id UVDebug_NameOfCurrentQueue()
{
  NSObject *v0;
  void *v1;
  uint64_t vars8;

  v0 = dispatch_get_current_queue();
  v1 = [NSString stringWithUTF8String:dispatch_queue_get_label(v0)];

  return v1;
}

id UVPreviewAgentLog()
{
  if (UVPreviewAgentLog_onceToken != -1) {
    dispatch_once(&UVPreviewAgentLog_onceToken, &__block_literal_global);
  }
  v0 = (void *)UVPreviewAgentLog___log;

  return v0;
}

uint64_t __UVPreviewAgentLog_block_invoke()
{
  UVPreviewAgentLog___log = (uint64_t)os_log_create("com.apple.dt.Previews", "Agent");

  return MEMORY[0x270F9A758]();
}

id UVCurrentSystemBuildNumberString()
{
  if (UVCurrentSystemBuildNumberString_predicate != -1) {
    dispatch_once(&UVCurrentSystemBuildNumberString_predicate, &__block_literal_global_0);
  }
  v0 = (void *)UVCurrentSystemBuildNumberString_cachedValue;

  return v0;
}

void __UVCurrentSystemBuildNumberString_block_invoke()
{
  v0 = (void *)_CFCopySystemVersionDictionary();
  if (!v0) {
    v0 = (void *)_CFCopyServerVersionDictionary();
  }
  id v3 = v0;
  uint64_t v1 = [v0 objectForKey:*MEMORY[0x263EFFAB0]];
  v2 = (void *)UVCurrentSystemBuildNumberString_cachedValue;
  UVCurrentSystemBuildNumberString_cachedValue = v1;
}

uint64_t CrashReportError.kind.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A384B64(v1, a1, type metadata accessor for CrashReportError.Kind);
}

uint64_t CrashReportError.kind.setter(uint64_t a1)
{
  return sub_25A384A64(a1, v1);
}

uint64_t (*CrashReportError.kind.modify())()
{
  return nullsub_1;
}

uint64_t CrashReportError.symbolicationParameters.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + *(int *)(type metadata accessor for CrashReportError(0) + 20));

  return swift_bridgeObjectRetain();
}

uint64_t CrashReportError.symbolicationParameters.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(int *)(type metadata accessor for CrashReportError(0) + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = v2;
  return result;
}

uint64_t (*CrashReportError.symbolicationParameters.modify())()
{
  return nullsub_1;
}

uint64_t CrashReportError.init(report:symbolicationParameters:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v67 = a2;
  uint64_t v68 = a1;
  uint64_t v69 = a3;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4156C0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v54 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CrashReportError.UncaughtExceptionError();
  uint64_t v55 = *(void *)(v5 - 8);
  uint64_t v56 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v52 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4156C8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v58 = (uint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
  uint64_t v59 = *(void *)(CrashError - 8);
  uint64_t v60 = CrashError;
  MEMORY[0x270FA5388](CrashError);
  uint64_t v53 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4156D0);
  MEMORY[0x270FA5388](v11 - 8);
  v64 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CrashReportError.ConditionInFileError();
  uint64_t v62 = *(void *)(v13 - 8);
  uint64_t v63 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v57 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CrashReportError(0);
  MEMORY[0x270FA5388](v15);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4156D8);
  MEMORY[0x270FA5388](v18 - 8);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for CrashReportError.IndexOutOfRangeError();
  uint64_t v21 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v24 - 8);
  v26 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4156E0);
  MEMORY[0x270FA5388](v27 - 8);
  v29 = (char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  v33 = (char *)&v52 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *v67;
  v67 = (void *)v15;
  uint64_t v35 = *(int *)(v15 + 20);
  uint64_t v65 = v34;
  uint64_t v66 = v35;
  uint64_t v36 = v68;
  *(void *)(v69 + v35) = 0;
  sub_25A384B64(v36, (uint64_t)v26, type metadata accessor for CrashReport);
  sub_25A383054((uint64_t)v26, (uint64_t)v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) != 1)
  {
    sub_25A387404(v36, type metadata accessor for CrashReport);
    sub_25A384C28((uint64_t)v29, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for CrashReportError.MissingEnvironmentObjectError);
    sub_25A384C28((uint64_t)v33, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CrashReportError.MissingEnvironmentObjectError);
LABEL_11:
    uint64_t v44 = v69;
    v45 = v67;
    uint64_t v46 = v65;
    goto LABEL_12;
  }
  uint64_t v37 = v62;
  uint64_t v38 = v63;
  uint64_t v39 = (uint64_t)v64;
  sub_25A384BCC((uint64_t)v29, &qword_26A4156E0);
  sub_25A384B64(v36, (uint64_t)v26, type metadata accessor for CrashReport);
  sub_25A383464((uint64_t)v26, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v61) != 1)
  {
    sub_25A387404(v36, type metadata accessor for CrashReport);
    sub_25A384C28((uint64_t)v20, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CrashReportError.IndexOutOfRangeError);
    sub_25A384C28((uint64_t)v23, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CrashReportError.IndexOutOfRangeError);
    goto LABEL_11;
  }
  sub_25A384BCC((uint64_t)v20, &qword_26A4156D8);
  sub_25A384B64(v36, (uint64_t)v26, type metadata accessor for CrashReport);
  CrashReportError.ConditionInFileError.init(report:)((uint64_t)v26, v39);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v39, 1, v38) != 1)
  {
    sub_25A387404(v36, type metadata accessor for CrashReport);
    uint64_t v47 = v57;
    sub_25A384C28(v39, v57, (uint64_t (*)(void))type metadata accessor for CrashReportError.ConditionInFileError);
    sub_25A384C28(v47, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CrashReportError.ConditionInFileError);
    goto LABEL_11;
  }
  sub_25A384BCC(v39, &qword_26A4156D0);
  sub_25A384B64(v36, (uint64_t)v26, type metadata accessor for CrashReport);
  uint64_t v40 = v58;
  sub_25A38379C((uint64_t)v26, v58);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v40, 1, v60) != 1)
  {
    sub_25A387404(v36, type metadata accessor for CrashReport);
    uint64_t v48 = v53;
    sub_25A384C28(v40, v53, (uint64_t (*)(void))type metadata accessor for CrashReportError.DyldLibraryLoadCrashError);
    sub_25A384C28(v48, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CrashReportError.DyldLibraryLoadCrashError);
    goto LABEL_11;
  }
  sub_25A384BCC(v40, &qword_26A4156C8);
  uint64_t v41 = v36;
  sub_25A384B64(v36, (uint64_t)v26, type metadata accessor for CrashReport);
  uint64_t v42 = v54;
  sub_25A383BB4((uint64_t)v26, v54);
  int v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v42, 1, v56);
  uint64_t v44 = v69;
  v45 = v67;
  uint64_t v46 = v65;
  if (v43 == 1)
  {
    sub_25A384BCC(v42, &qword_26A4156C0);
    sub_25A384C28(v41, (uint64_t)v17, type metadata accessor for CrashReport);
  }
  else
  {
    sub_25A387404(v41, type metadata accessor for CrashReport);
    uint64_t v50 = v42;
    uint64_t v51 = v52;
    sub_25A384C28(v50, v52, (uint64_t (*)(void))type metadata accessor for CrashReportError.UncaughtExceptionError);
    sub_25A384C28(v51, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CrashReportError.UncaughtExceptionError);
  }
LABEL_12:
  type metadata accessor for CrashReportError.Kind(0);
  swift_storeEnumTagMultiPayload();
  *(void *)&v17[*((int *)v45 + 5)] = v46;
  swift_bridgeObjectRelease();
  return sub_25A384C28((uint64_t)v17, v44, type metadata accessor for CrashReportError);
}

uint64_t sub_25A383054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4156E0);
  MEMORY[0x270FA5388](v7 - 8);
  v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_26A415578 != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (!qword_26A419DB8 || !*(void *)(a1 + *(int *)(v4 + 36))) {
    goto LABEL_9;
  }
  id v10 = (id)qword_26A419DB8;
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = sub_25A38C53C(v11, v10);
  if (!*(void *)(v12 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    sub_25A387404(a1, type metadata accessor for CrashReport);
    goto LABEL_10;
  }
  uint64_t v36 = a2;
  uint64_t v13 = *(void **)(v12 + 48);
  swift_bridgeObjectRetain();
  id v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25A384B64(a1, (uint64_t)v6, type metadata accessor for CrashReport);
  uint64_t v15 = &v6[*(int *)(v4 + 20)];
  uint64_t v16 = *((void *)v15 + 1);
  void *v9 = *(void *)v15;
  v9[1] = v16;
  swift_bridgeObjectRetain();
  v17 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  uint64_t v18 = (void *)sub_25A50EBF0();
  id v19 = objc_msgSend(v14, sel_rangeWithName_, v18);
  uint64_t v21 = v20;

  id v22 = objc_msgSend(v17, sel_substringWithRange_, v19, v21);
  uint64_t v23 = sub_25A50EC20();
  uint64_t v25 = v24;

  uint64_t v37 = v23;
  uint64_t v38 = v25;
  uint64_t v26 = sub_25A50EED0();
  uint64_t v28 = v27;

  v9[2] = v26;
  v9[3] = v28;
  uint64_t v29 = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
  sub_25A384C28((uint64_t)v6, (uint64_t)v9 + *(int *)(v29 + 24), type metadata accessor for CrashReport);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56);
  v31((uint64_t)v9, 0, 1, v29);

  sub_25A387404(a1, type metadata accessor for CrashReport);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v30 + 48))(v9, 1, v29))
  {
    sub_25A384BCC((uint64_t)v9, &qword_26A4156E0);
    a2 = v36;
LABEL_10:
    uint64_t v32 = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(a2, 1, 1, v32);
  }
  uint64_t v34 = v36;
  sub_25A384C28((uint64_t)v9, v36, (uint64_t (*)(void))type metadata accessor for CrashReportError.MissingEnvironmentObjectError);
  return v31(v34, 0, 1, v29);
}

uint64_t sub_25A383464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4156D8);
  MEMORY[0x270FA5388](v7 - 8);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26A415560 != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (!qword_26A419848 || !*(void *)(a1 + *(int *)(v4 + 36))) {
    goto LABEL_9;
  }
  id v10 = (id)qword_26A419848;
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = sub_25A38C53C(v11, v10);
  if (!*(void *)(v12 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    sub_25A387404(a1, type metadata accessor for CrashReport);
    goto LABEL_10;
  }
  uint64_t v13 = *(void **)(v12 + 48);
  swift_bridgeObjectRetain();
  id v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25A384B64(a1, (uint64_t)v6, type metadata accessor for CrashReport);
  swift_bridgeObjectRelease();

  sub_25A384C28((uint64_t)v6, (uint64_t)v9, type metadata accessor for CrashReport);
  uint64_t v15 = type metadata accessor for CrashReportError.IndexOutOfRangeError();
  uint64_t v16 = *(void *)(v15 - 8);
  v17 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
  v17(v9, 0, 1, v15);

  sub_25A387404(a1, type metadata accessor for CrashReport);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15))
  {
    sub_25A384BCC((uint64_t)v9, &qword_26A4156D8);
LABEL_10:
    uint64_t v18 = type metadata accessor for CrashReportError.IndexOutOfRangeError();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
  sub_25A384C28((uint64_t)v9, a2, (uint64_t (*)(void))type metadata accessor for CrashReportError.IndexOutOfRangeError);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v17)(a2, 0, 1, v15);
}

uint64_t sub_25A38379C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4156C8);
  MEMORY[0x270FA5388](v7 - 8);
  v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_26A4154B0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (!qword_26A417AA8 || !*(void *)(a1 + *(int *)(v4 + 36))) {
    goto LABEL_9;
  }
  id v10 = (id)qword_26A417AA8;
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = sub_25A38C53C(v11, v10);
  if (!*(void *)(v12 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    sub_25A387404(a1, type metadata accessor for CrashReport);
    goto LABEL_10;
  }
  uint64_t v36 = a2;
  uint64_t v13 = *(void **)(v12 + 48);
  swift_bridgeObjectRetain();
  id v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25A384B64(a1, (uint64_t)v6, type metadata accessor for CrashReport);
  uint64_t v15 = &v6[*(int *)(v4 + 20)];
  uint64_t v16 = *((void *)v15 + 1);
  void *v9 = *(void *)v15;
  v9[1] = v16;
  swift_bridgeObjectRetain();
  v17 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  uint64_t v18 = (void *)sub_25A50EBF0();
  id v19 = objc_msgSend(v14, sel_rangeWithName_, v18);
  uint64_t v21 = v20;

  id v22 = objc_msgSend(v17, sel_substringWithRange_, v19, v21);
  uint64_t v23 = sub_25A50EC20();
  uint64_t v25 = v24;

  uint64_t v37 = v23;
  uint64_t v38 = v25;
  uint64_t v26 = sub_25A50EED0();
  uint64_t v28 = v27;

  v9[2] = v26;
  v9[3] = v28;
  uint64_t CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
  sub_25A384C28((uint64_t)v6, (uint64_t)v9 + *(int *)(CrashError + 24), type metadata accessor for CrashReport);
  uint64_t v30 = *(void *)(CrashError - 8);
  uint64_t v31 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56);
  v31((uint64_t)v9, 0, 1, CrashError);

  sub_25A387404(a1, type metadata accessor for CrashReport);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v30 + 48))(v9, 1, CrashError))
  {
    sub_25A384BCC((uint64_t)v9, &qword_26A4156C8);
    a2 = v36;
LABEL_10:
    uint64_t v32 = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(a2, 1, 1, v32);
  }
  uint64_t v34 = v36;
  sub_25A384C28((uint64_t)v9, v36, (uint64_t (*)(void))type metadata accessor for CrashReportError.DyldLibraryLoadCrashError);
  return v31(v34, 0, 1, CrashError);
}

uint64_t sub_25A383BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4156C0);
  MEMORY[0x270FA5388](v7 - 8);
  v9 = (uint64_t *)((char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_26A415680 != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (!qword_26A41ABC0 || !*(void *)(a1 + *(int *)(v4 + 36))) {
    goto LABEL_9;
  }
  id v10 = (id)qword_26A41ABC0;
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = sub_25A38C53C(v11, v10);
  if (!*(void *)(v12 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    sub_25A387404(a1, type metadata accessor for CrashReport);
    goto LABEL_10;
  }
  uint64_t v13 = *(void **)(v12 + 48);
  swift_bridgeObjectRetain();
  id v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25A384B64(a1, (uint64_t)v6, type metadata accessor for CrashReport);
  CrashReportError.UncaughtExceptionError.init(report:asi:match:)((uint64_t)v6, v14, v9);

  sub_25A387404(a1, type metadata accessor for CrashReport);
  uint64_t v15 = type metadata accessor for CrashReportError.UncaughtExceptionError();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15))
  {
    sub_25A384BCC((uint64_t)v9, &qword_26A4156C0);
LABEL_10:
    uint64_t v17 = type metadata accessor for CrashReportError.UncaughtExceptionError();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a2, 1, 1, v17);
  }
  sub_25A384C28((uint64_t)v9, a2, (uint64_t (*)(void))type metadata accessor for CrashReportError.UncaughtExceptionError);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v15);
}

uint64_t sub_25A383EC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CrashReportError.Kind(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A384B64(v2, (uint64_t)v6, type metadata accessor for CrashReportError.Kind);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t CrashError = type metadata accessor for CrashReportError.IndexOutOfRangeError();
      uint64_t v8 = type metadata accessor for CrashReportError.IndexOutOfRangeError;
      v9 = &off_270833720;
      break;
    case 2u:
      uint64_t CrashError = type metadata accessor for CrashReportError.ConditionInFileError();
      uint64_t v8 = type metadata accessor for CrashReportError.ConditionInFileError;
      v9 = &off_270837DD8;
      break;
    case 3u:
      uint64_t CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
      uint64_t v8 = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError;
      v9 = &off_270830048;
      break;
    case 4u:
      uint64_t CrashError = type metadata accessor for CrashReportError.UncaughtExceptionError();
      uint64_t v8 = type metadata accessor for CrashReportError.UncaughtExceptionError;
      v9 = &off_270835970;
      break;
    case 5u:
      uint64_t CrashError = type metadata accessor for CrashReportError.GenericCrashError();
      uint64_t v8 = type metadata accessor for CrashReportError.GenericCrashError;
      v9 = &off_27082DDF8;
      break;
    default:
      uint64_t CrashError = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
      uint64_t v8 = type metadata accessor for CrashReportError.MissingEnvironmentObjectError;
      v9 = &off_270834360;
      break;
  }
  a1[3] = CrashError;
  a1[4] = (uint64_t)v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  return sub_25A384C28((uint64_t)v6, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))v8);
}

uint64_t CrashReportError.crashReport.getter()
{
  sub_25A383EC0(v3);
  uint64_t v0 = v4;
  uint64_t v1 = v5;
  __swift_project_boxed_opaque_existential_1(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t CrashReportError.highValueTitle.getter()
{
  sub_25A383EC0(v4);
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t CrashReportError.additionalInfo.getter()
{
  sub_25A383EC0(v4);
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t CrashReportError.additionalDiagnostics.getter()
{
  uint64_t v0 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v13[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A383EC0(v13);
  uint64_t v3 = v14;
  uint64_t v4 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  Swift::String v5 = CrashReport.formattedAsLegacyCrashReport()();
  uint64_t v6 = sub_25A38BE34(0, 1, 1, MEMORY[0x263F8EE78], &qword_26A415918, (void (*)(void, int64_t, void *, void *))sub_25A38C9FC);
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  if (v8 >= v7 >> 1) {
    uint64_t v6 = sub_25A38BE34((void *)(v7 > 1), v8 + 1, 1, v6, &qword_26A415918, (void (*)(void, int64_t, void *, void *))sub_25A38C9FC);
  }
  v6[2] = v8 + 1;
  v9 = (Swift::String *)&v6[3 * v8];
  v9[2] = v5;
  LOBYTE(v9[3]._countAndFlagsBits) = 0;
  uint64_t v10 = Array<A>.builtDescription.getter((uint64_t)v6);
  swift_bridgeObjectRelease();
  sub_25A387404((uint64_t)v2, type metadata accessor for CrashReport);
  return v10;
}

uint64_t sub_25A3843B8()
{
  Swift::String v0 = CrashReport.formattedAsLegacyCrashReport()();
  uint64_t v1 = sub_25A38BE34(0, 1, 1, MEMORY[0x263F8EE78], &qword_26A415918, (void (*)(void, int64_t, void *, void *))sub_25A38C9FC);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_25A38BE34((void *)(v2 > 1), v3 + 1, 1, v1, &qword_26A415918, (void (*)(void, int64_t, void *, void *))sub_25A38C9FC);
  }
  v1[2] = v3 + 1;
  uint64_t v4 = (Swift::String *)&v1[3 * v3];
  v4[2] = v0;
  LOBYTE(v4[3]._countAndFlagsBits) = 0;
  Array<A>.builtDescription.getter((uint64_t)v1);
  swift_bridgeObjectRelease();
  sub_25A50EDA0();

  return swift_bridgeObjectRelease();
}

void CrashReportError.options.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t CrashReportError.isPotentialCrash.getter()
{
  return 1;
}

uint64_t sub_25A3844E4()
{
  sub_25A383EC0(v4);
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t sub_25A384560()
{
  sub_25A383EC0(v4);
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t sub_25A3845DC()
{
  uint64_t v0 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v7[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  sub_25A50EDA0();
  sub_25A383EC0(v7);
  uint64_t v3 = v8;
  uint64_t v4 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  sub_25A3843B8();
  sub_25A387404((uint64_t)v2, type metadata accessor for CrashReport);
  sub_25A50EDA0();
  return v10;
}

void sub_25A3846E8(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t sub_25A3846F8()
{
  return 1;
}

uint64_t sub_25A384720(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v7 = *v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_25A38BE34(0, v7[2] + 1, 1, v7, &qword_26A415918, (void (*)(void, int64_t, void *, void *))sub_25A38C9FC);
    unint64_t v7 = (void *)result;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)sub_25A38BE34((void *)(v9 > 1), v10 + 1, 1, v7, &qword_26A415918, (void (*)(void, int64_t, void *, void *))sub_25A38C9FC);
    unint64_t v7 = (void *)result;
  }
  v7[2] = v10 + 1;
  unint64_t v11 = &v7[3 * v10];
  v11[4] = a1;
  v11[5] = a2;
  *((unsigned char *)v11 + 48) = a3;
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A384810()
{
  Swift::String v0 = CrashReport.formattedAsLegacyCrashReport()();
  uint64_t v1 = sub_25A38BE34(0, 1, 1, MEMORY[0x263F8EE78], &qword_26A415918, (void (*)(void, int64_t, void *, void *))sub_25A38C9FC);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_25A38BE34((void *)(v2 > 1), v3 + 1, 1, v1, &qword_26A415918, (void (*)(void, int64_t, void *, void *))sub_25A38C9FC);
  }
  v1[2] = v3 + 1;
  uint64_t v4 = (Swift::String *)&v1[3 * v3];
  v4[2] = v0;
  LOBYTE(v4[3]._countAndFlagsBits) = 0;
  uint64_t v5 = Array<A>.builtDescription.getter((uint64_t)v1);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_25A384900@<X0>(uint64_t *a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_25A4F6F78(*a1, a1[1]);
  *a2 = result & 1;
  return result;
}

uint64_t sub_25A384930@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25A50EE80();
  *a1 = result & 1;
  return result;
}

uint64_t sub_25A384978@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25A50EE80();
  *a1 = result & 1;
  return result;
}

uint64_t sub_25A3849C0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25A50EE80();
  *a1 = result & 1;
  return result;
}

void sub_25A384A0C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 3;
}

uint64_t sub_25A384A1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A384A34(a1, 0, a2);
}

uint64_t sub_25A384A24@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A384A34(a1, 1, a2);
}

uint64_t sub_25A384A2C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A384A34(a1, 2, a2);
}

uint64_t sub_25A384A34@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  *(void *)a3 = v3;
  *(void *)(a3 + 8) = v4;
  *(unsigned char *)(a3 + 16) = a2;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for CrashReportError.Kind(uint64_t a1)
{
  return sub_25A384AE8(a1, (uint64_t *)&unk_26A415710);
}

uint64_t sub_25A384A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrashReportError.Kind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CrashReportError(uint64_t a1)
{
  return sub_25A384AE8(a1, (uint64_t *)&unk_26A415700);
}

uint64_t sub_25A384AE8(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_25A384B64(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25A384BCC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25A384C28(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void sub_25A384D24(void *a1@<X8>)
{
  *a1 = 0;
}

BOOL sub_25A384D2C(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_25A384D40@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_25A384D54(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_25A384D68(void *result)
{
  *v1 &= *result;
  return result;
}

uint64_t sub_25A384D7C(uint64_t a1, uint64_t a2)
{
  return sub_25A384E88(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t sub_25A384DA0(uint64_t a1, uint64_t a2)
{
  return sub_25A384E88(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t sub_25A384DC0()
{
  sub_25A50EC20();
  sub_25A50ED30();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A384E14()
{
  sub_25A50EC20();
  sub_25A5104E0();
  sub_25A50ED30();
  uint64_t v0 = sub_25A510530();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_25A384E88(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_25A50EC20();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_25A384ECC(uint64_t a1, id *a2)
{
  uint64_t result = sub_25A50EC00();
  *a2 = 0;
  return result;
}

uint64_t sub_25A384F44(uint64_t a1, id *a2)
{
  char v3 = sub_25A50EC10();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_25A384FC4@<X0>(uint64_t *a1@<X8>)
{
  sub_25A50EC20();
  uint64_t v2 = sub_25A50EBF0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

BOOL sub_25A385008(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_25A385038@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_25A385044(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_25A385054()
{
  uint64_t v0 = sub_25A50EC20();
  uint64_t v2 = v1;
  if (v0 == sub_25A50EC20() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_25A510370();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_25A3850E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_25A50EC20();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_25A385110(uint64_t a1)
{
  uint64_t v2 = sub_25A385374(&qword_26A415988, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_25A385374(&qword_26A415990, type metadata accessor for URLResourceKey);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_25A3851CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_25A50EBF0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_25A385214(uint64_t a1)
{
  uint64_t v2 = sub_25A385374(&qword_26A415998, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v3 = sub_25A385374(&qword_26A4159A0, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

void *sub_25A3852D0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38BE34(a1, a2, a3, a4, &qword_26A415918, (void (*)(void, int64_t, void *, void *))sub_25A38C9FC);
}

uint64_t sub_25A3852F0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_25A385374(&qword_26A4156E8, (void (*)(uint64_t))type metadata accessor for CrashReportError);
  uint64_t result = sub_25A385374(&qword_26A4156F0, (void (*)(uint64_t))type metadata accessor for CrashReportError);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_25A385374(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25A3853BC()
{
  return sub_25A385374(&qword_26A4156F8, (void (*)(uint64_t))type metadata accessor for CrashReportError);
}

uint64_t initializeBufferWithCopyOfBuffer for CrashReportError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *(void *)a1 = *a2;
    a1 = v29 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    type metadata accessor for CrashReportError.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 5u:
        uint64_t v103 = sub_25A50E4C0();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v103 - 8) + 16))(a1, a2, v103);
        v104 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v105 = v104[5];
        v106 = (void *)(a1 + v105);
        v107 = (uint64_t *)((char *)a2 + v105);
        uint64_t v108 = v107[1];
        void *v106 = *v107;
        v106[1] = v108;
        uint64_t v109 = v104[6];
        v110 = (void *)(a1 + v109);
        v111 = (uint64_t *)((char *)a2 + v109);
        uint64_t v112 = v111[1];
        void *v110 = *v111;
        v110[1] = v112;
        *(_DWORD *)(a1 + v104[7]) = *(_DWORD *)((char *)a2 + v104[7]);
        uint64_t v113 = v104[8];
        uint64_t v114 = a1 + v113;
        uint64_t v115 = (uint64_t)a2 + v113;
        uint64_t v116 = sub_25A50E470();
        v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v117(v114, v115, v116);
        *(void *)(a1 + v104[9]) = *(uint64_t *)((char *)a2 + v104[9]);
        *(void *)(a1 + v104[10]) = *(uint64_t *)((char *)a2 + v104[10]);
        *(void *)(a1 + v104[11]) = *(uint64_t *)((char *)a2 + v104[11]);
        uint64_t v118 = v104[12];
        v119 = (void *)(a1 + v118);
        v120 = (uint64_t *)((char *)a2 + v118);
        uint64_t v121 = v120[1];
        void *v119 = *v120;
        v119[1] = v121;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v30 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v30;
        uint64_t v31 = a2[2];
        uint64_t v32 = a2[3];
        unsigned __int8 v33 = *((unsigned char *)a2 + 32);
        swift_bridgeObjectRetain();
        sub_25A385D94(v31, v32, v33);
        *(void *)(a1 + 16) = v31;
        *(void *)(a1 + 24) = v32;
        *(unsigned char *)(a1 + 32) = v33;
        uint64_t v34 = a2[6];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = v34;
        *(void *)(a1 + 56) = a2[7];
        *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
        uint64_t v35 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
        uint64_t v36 = a1 + v35;
        uint64_t v37 = (uint64_t)a2 + v35;
        uint64_t v38 = sub_25A50E4C0();
        uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16);
        swift_bridgeObjectRetain();
        v39(v36, v37, v38);
        uint64_t v40 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v41 = v40[5];
        uint64_t v42 = (void *)(v36 + v41);
        int v43 = (void *)(v37 + v41);
        uint64_t v44 = v43[1];
        *uint64_t v42 = *v43;
        v42[1] = v44;
        uint64_t v45 = v40[6];
        uint64_t v46 = (void *)(v36 + v45);
        uint64_t v47 = (void *)(v37 + v45);
        uint64_t v48 = v47[1];
        *uint64_t v46 = *v47;
        v46[1] = v48;
        *(_DWORD *)(v36 + v40[7]) = *(_DWORD *)(v37 + v40[7]);
        uint64_t v49 = v40[8];
        uint64_t v124 = v37 + v49;
        uint64_t v128 = v36 + v49;
        uint64_t v50 = sub_25A50E470();
        uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v51(v128, v124, v50);
        *(void *)(v36 + v40[9]) = *(void *)(v37 + v40[9]);
        *(void *)(v36 + v40[10]) = *(void *)(v37 + v40[10]);
        *(void *)(v36 + v40[11]) = *(void *)(v37 + v40[11]);
        uint64_t v52 = v40[12];
        uint64_t v53 = (void *)(v36 + v52);
        uint64_t v54 = (void *)(v37 + v52);
        uint64_t v55 = v54[1];
        *uint64_t v53 = *v54;
        v53[1] = v55;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v56 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v56;
        uint64_t v57 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v57;
        uint64_t v58 = *(int *)(type metadata accessor for CrashReportError.DyldLibraryLoadCrashError() + 24);
        uint64_t v59 = a1 + v58;
        uint64_t v60 = (uint64_t)a2 + v58;
        uint64_t v61 = sub_25A50E4C0();
        uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v62(v59, v60, v61);
        uint64_t v63 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v64 = v63[5];
        uint64_t v65 = (void *)(v59 + v64);
        uint64_t v66 = (void *)(v60 + v64);
        uint64_t v67 = v66[1];
        *uint64_t v65 = *v66;
        v65[1] = v67;
        uint64_t v68 = v63[6];
        uint64_t v69 = (void *)(v59 + v68);
        v70 = (void *)(v60 + v68);
        uint64_t v71 = v70[1];
        *uint64_t v69 = *v70;
        v69[1] = v71;
        *(_DWORD *)(v59 + v63[7]) = *(_DWORD *)(v60 + v63[7]);
        uint64_t v72 = v63[8];
        uint64_t v125 = v60 + v72;
        uint64_t v129 = v59 + v72;
        uint64_t v73 = sub_25A50E470();
        v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v74(v129, v125, v73);
        *(void *)(v59 + v63[9]) = *(void *)(v60 + v63[9]);
        *(void *)(v59 + v63[10]) = *(void *)(v60 + v63[10]);
        *(void *)(v59 + v63[11]) = *(void *)(v60 + v63[11]);
        uint64_t v75 = v63[12];
        v76 = (void *)(v59 + v75);
        v77 = (void *)(v60 + v75);
        uint64_t v78 = v77[1];
        void *v76 = *v77;
        v76[1] = v78;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v79 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v79;
        uint64_t v80 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v80;
        uint64_t v81 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v81;
        uint64_t v82 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
        uint64_t v83 = a1 + v82;
        uint64_t v84 = (uint64_t)a2 + v82;
        uint64_t v85 = sub_25A50E4C0();
        v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v86(v83, v84, v85);
        v87 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v88 = v87[5];
        v89 = (void *)(v83 + v88);
        v90 = (void *)(v84 + v88);
        uint64_t v91 = v90[1];
        void *v89 = *v90;
        v89[1] = v91;
        uint64_t v92 = v87[6];
        v93 = (void *)(v83 + v92);
        v94 = (void *)(v84 + v92);
        uint64_t v95 = v94[1];
        void *v93 = *v94;
        v93[1] = v95;
        *(_DWORD *)(v83 + v87[7]) = *(_DWORD *)(v84 + v87[7]);
        uint64_t v96 = v87[8];
        uint64_t v126 = v84 + v96;
        uint64_t v130 = v83 + v96;
        uint64_t v97 = sub_25A50E470();
        v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v98(v130, v126, v97);
        *(void *)(v83 + v87[9]) = *(void *)(v84 + v87[9]);
        *(void *)(v83 + v87[10]) = *(void *)(v84 + v87[10]);
        *(void *)(v83 + v87[11]) = *(void *)(v84 + v87[11]);
        uint64_t v99 = v87[12];
        v100 = (void *)(v83 + v99);
        v101 = (void *)(v84 + v99);
        uint64_t v102 = v101[1];
        void *v100 = *v101;
        v100[1] = v102;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v6;
        uint64_t v7 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v7;
        uint64_t v8 = *(int *)(type metadata accessor for CrashReportError.MissingEnvironmentObjectError() + 24);
        uint64_t v9 = a1 + v8;
        uint64_t v10 = (uint64_t)a2 + v8;
        uint64_t v11 = sub_25A50E4C0();
        uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v12(v9, v10, v11);
        uint64_t v13 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v14 = v13[5];
        uint64_t v15 = (void *)(v9 + v14);
        uint64_t v16 = (void *)(v10 + v14);
        uint64_t v17 = v16[1];
        *uint64_t v15 = *v16;
        v15[1] = v17;
        uint64_t v18 = v13[6];
        uint64_t v19 = (void *)(v9 + v18);
        uint64_t v20 = (void *)(v10 + v18);
        uint64_t v21 = v20[1];
        *uint64_t v19 = *v20;
        v19[1] = v21;
        *(_DWORD *)(v9 + v13[7]) = *(_DWORD *)(v10 + v13[7]);
        uint64_t v22 = v13[8];
        uint64_t v123 = v10 + v22;
        uint64_t v127 = v9 + v22;
        uint64_t v23 = sub_25A50E470();
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v24(v127, v123, v23);
        *(void *)(v9 + v13[9]) = *(void *)(v10 + v13[9]);
        *(void *)(v9 + v13[10]) = *(void *)(v10 + v13[10]);
        *(void *)(v9 + v13[11]) = *(void *)(v10 + v13[11]);
        uint64_t v25 = v13[12];
        uint64_t v26 = (void *)(v9 + v25);
        uint64_t v27 = (void *)(v10 + v25);
        uint64_t v28 = v27[1];
        void *v26 = *v27;
        v26[1] = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    *(void *)(a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_25A385D94(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for CrashReportError(uint64_t a1)
{
  type metadata accessor for CrashReportError.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t CrashError = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
      goto LABEL_6;
    case 1u:
    case 5u:
      uint64_t v2 = sub_25A50E4C0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
      uint64_t v3 = type metadata accessor for CrashReport(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = a1 + *(int *)(v3 + 32);
      uint64_t v5 = sub_25A50E470();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
      goto LABEL_9;
    case 2u:
      swift_bridgeObjectRelease();
      sub_25A386064(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
      swift_bridgeObjectRelease();
      uint64_t v7 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
      goto LABEL_8;
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
LABEL_6:
      uint64_t v7 = *(int *)(CrashError + 24);
      goto LABEL_8;
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
LABEL_8:
      uint64_t v8 = a1 + v7;
      uint64_t v9 = sub_25A50E4C0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
      uint64_t v10 = type metadata accessor for CrashReport(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v8 + *(int *)(v10 + 32);
      uint64_t v12 = sub_25A50E470();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
LABEL_9:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A386064(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CrashReportError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CrashReportError.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 5u:
      uint64_t v101 = sub_25A50E4C0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 16))(a1, a2, v101);
      uint64_t v102 = (int *)type metadata accessor for CrashReport(0);
      uint64_t v103 = v102[5];
      v104 = (void *)(a1 + v103);
      uint64_t v105 = (void *)(a2 + v103);
      uint64_t v106 = v105[1];
      void *v104 = *v105;
      v104[1] = v106;
      uint64_t v107 = v102[6];
      uint64_t v108 = (void *)(a1 + v107);
      uint64_t v109 = (void *)(a2 + v107);
      uint64_t v110 = v109[1];
      *uint64_t v108 = *v109;
      v108[1] = v110;
      *(_DWORD *)(a1 + v102[7]) = *(_DWORD *)(a2 + v102[7]);
      uint64_t v111 = v102[8];
      uint64_t v112 = a1 + v111;
      uint64_t v113 = a2 + v111;
      uint64_t v114 = sub_25A50E470();
      uint64_t v115 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v114 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v115(v112, v113, v114);
      *(void *)(a1 + v102[9]) = *(void *)(a2 + v102[9]);
      *(void *)(a1 + v102[10]) = *(void *)(a2 + v102[10]);
      *(void *)(a1 + v102[11]) = *(void *)(a2 + v102[11]);
      uint64_t v116 = v102[12];
      v117 = (void *)(a1 + v116);
      uint64_t v118 = (void *)(a2 + v116);
      uint64_t v119 = v118[1];
      void *v117 = *v118;
      v117[1] = v119;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 2u:
      uint64_t v28 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v28;
      uint64_t v29 = *(void *)(a2 + 16);
      uint64_t v30 = *(void *)(a2 + 24);
      unsigned __int8 v31 = *(unsigned char *)(a2 + 32);
      swift_bridgeObjectRetain();
      sub_25A385D94(v29, v30, v31);
      *(void *)(a1 + 16) = v29;
      *(void *)(a1 + 24) = v30;
      *(unsigned char *)(a1 + 32) = v31;
      uint64_t v32 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v32;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      uint64_t v33 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
      uint64_t v34 = a1 + v33;
      uint64_t v35 = a2 + v33;
      uint64_t v36 = sub_25A50E4C0();
      uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16);
      swift_bridgeObjectRetain();
      v37(v34, v35, v36);
      uint64_t v38 = (int *)type metadata accessor for CrashReport(0);
      uint64_t v39 = v38[5];
      uint64_t v40 = (void *)(v34 + v39);
      uint64_t v41 = (void *)(v35 + v39);
      uint64_t v42 = v41[1];
      *uint64_t v40 = *v41;
      v40[1] = v42;
      uint64_t v43 = v38[6];
      uint64_t v44 = (void *)(v34 + v43);
      uint64_t v45 = (void *)(v35 + v43);
      uint64_t v46 = v45[1];
      *uint64_t v44 = *v45;
      v44[1] = v46;
      *(_DWORD *)(v34 + v38[7]) = *(_DWORD *)(v35 + v38[7]);
      uint64_t v47 = v38[8];
      uint64_t v122 = v35 + v47;
      uint64_t v126 = v34 + v47;
      uint64_t v48 = sub_25A50E470();
      uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v49(v126, v122, v48);
      *(void *)(v34 + v38[9]) = *(void *)(v35 + v38[9]);
      *(void *)(v34 + v38[10]) = *(void *)(v35 + v38[10]);
      *(void *)(v34 + v38[11]) = *(void *)(v35 + v38[11]);
      uint64_t v50 = v38[12];
      uint64_t v51 = (void *)(v34 + v50);
      uint64_t v52 = (void *)(v35 + v50);
      uint64_t v53 = v52[1];
      *uint64_t v51 = *v52;
      v51[1] = v53;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v54 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v54;
      uint64_t v55 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v55;
      uint64_t v56 = *(int *)(type metadata accessor for CrashReportError.DyldLibraryLoadCrashError() + 24);
      uint64_t v57 = a1 + v56;
      uint64_t v58 = a2 + v56;
      uint64_t v59 = sub_25A50E4C0();
      uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v60(v57, v58, v59);
      uint64_t v61 = (int *)type metadata accessor for CrashReport(0);
      uint64_t v62 = v61[5];
      uint64_t v63 = (void *)(v57 + v62);
      uint64_t v64 = (void *)(v58 + v62);
      uint64_t v65 = v64[1];
      *uint64_t v63 = *v64;
      v63[1] = v65;
      uint64_t v66 = v61[6];
      uint64_t v67 = (void *)(v57 + v66);
      uint64_t v68 = (void *)(v58 + v66);
      uint64_t v69 = v68[1];
      void *v67 = *v68;
      v67[1] = v69;
      *(_DWORD *)(v57 + v61[7]) = *(_DWORD *)(v58 + v61[7]);
      uint64_t v70 = v61[8];
      uint64_t v123 = v58 + v70;
      uint64_t v127 = v57 + v70;
      uint64_t v71 = sub_25A50E470();
      uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v72(v127, v123, v71);
      *(void *)(v57 + v61[9]) = *(void *)(v58 + v61[9]);
      *(void *)(v57 + v61[10]) = *(void *)(v58 + v61[10]);
      *(void *)(v57 + v61[11]) = *(void *)(v58 + v61[11]);
      uint64_t v73 = v61[12];
      v74 = (void *)(v57 + v73);
      uint64_t v75 = (void *)(v58 + v73);
      uint64_t v76 = v75[1];
      void *v74 = *v75;
      v74[1] = v76;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 4u:
      uint64_t v77 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v77;
      uint64_t v78 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v78;
      uint64_t v79 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v79;
      uint64_t v80 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
      uint64_t v81 = a1 + v80;
      uint64_t v82 = a2 + v80;
      uint64_t v83 = sub_25A50E4C0();
      uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v84(v81, v82, v83);
      uint64_t v85 = (int *)type metadata accessor for CrashReport(0);
      uint64_t v86 = v85[5];
      v87 = (void *)(v81 + v86);
      uint64_t v88 = (void *)(v82 + v86);
      uint64_t v89 = v88[1];
      void *v87 = *v88;
      v87[1] = v89;
      uint64_t v90 = v85[6];
      uint64_t v91 = (void *)(v81 + v90);
      uint64_t v92 = (void *)(v82 + v90);
      uint64_t v93 = v92[1];
      *uint64_t v91 = *v92;
      v91[1] = v93;
      *(_DWORD *)(v81 + v85[7]) = *(_DWORD *)(v82 + v85[7]);
      uint64_t v94 = v85[8];
      uint64_t v124 = v82 + v94;
      uint64_t v128 = v81 + v94;
      uint64_t v95 = sub_25A50E470();
      uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v96(v128, v124, v95);
      *(void *)(v81 + v85[9]) = *(void *)(v82 + v85[9]);
      *(void *)(v81 + v85[10]) = *(void *)(v82 + v85[10]);
      *(void *)(v81 + v85[11]) = *(void *)(v82 + v85[11]);
      uint64_t v97 = v85[12];
      v98 = (void *)(v81 + v97);
      uint64_t v99 = (void *)(v82 + v97);
      uint64_t v100 = v99[1];
      void *v98 = *v99;
      v98[1] = v100;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v6;
      uint64_t v7 = *(int *)(type metadata accessor for CrashReportError.MissingEnvironmentObjectError() + 24);
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      uint64_t v10 = sub_25A50E4C0();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11(v8, v9, v10);
      uint64_t v12 = (int *)type metadata accessor for CrashReport(0);
      uint64_t v13 = v12[5];
      uint64_t v14 = (void *)(v8 + v13);
      uint64_t v15 = (void *)(v9 + v13);
      uint64_t v16 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v16;
      uint64_t v17 = v12[6];
      uint64_t v18 = (void *)(v8 + v17);
      uint64_t v19 = (void *)(v9 + v17);
      uint64_t v20 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v20;
      *(_DWORD *)(v8 + v12[7]) = *(_DWORD *)(v9 + v12[7]);
      uint64_t v21 = v12[8];
      uint64_t v121 = v9 + v21;
      uint64_t v125 = v8 + v21;
      uint64_t v22 = sub_25A50E470();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23(v125, v121, v22);
      *(void *)(v8 + v12[9]) = *(void *)(v9 + v12[9]);
      *(void *)(v8 + v12[10]) = *(void *)(v9 + v12[10]);
      *(void *)(v8 + v12[11]) = *(void *)(v9 + v12[11]);
      uint64_t v24 = v12[12];
      uint64_t v25 = (void *)(v8 + v24);
      uint64_t v26 = (void *)(v9 + v24);
      uint64_t v27 = v26[1];
      *uint64_t v25 = *v26;
      v25[1] = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CrashReportError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v106 = a3;
    sub_25A387404(a1, type metadata accessor for CrashReportError.Kind);
    type metadata accessor for CrashReportError.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 5u:
        uint64_t v81 = sub_25A50E4C0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 16))(a1, a2, v81);
        uint64_t v82 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v83 = v82[5];
        uint64_t v84 = (void *)(a1 + v83);
        uint64_t v85 = (void *)(a2 + v83);
        *uint64_t v84 = *v85;
        v84[1] = v85[1];
        uint64_t v86 = v82[6];
        v87 = (void *)(a1 + v86);
        uint64_t v88 = (void *)(a2 + v86);
        void *v87 = *v88;
        v87[1] = v88[1];
        *(_DWORD *)(a1 + v82[7]) = *(_DWORD *)(a2 + v82[7]);
        uint64_t v89 = v82[8];
        uint64_t v90 = a1 + v89;
        uint64_t v91 = a2 + v89;
        uint64_t v92 = sub_25A50E470();
        uint64_t v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v93(v90, v91, v92);
        *(void *)(a1 + v82[9]) = *(void *)(a2 + v82[9]);
        *(void *)(a1 + v82[10]) = *(void *)(a2 + v82[10]);
        *(void *)(a1 + v82[11]) = *(void *)(a2 + v82[11]);
        uint64_t v94 = v82[12];
        uint64_t v95 = (void *)(a1 + v94);
        uint64_t v96 = (void *)(a2 + v94);
        *uint64_t v95 = *v96;
        v95[1] = v96[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        uint64_t v23 = *(void *)(a2 + 16);
        uint64_t v24 = *(void *)(a2 + 24);
        unsigned __int8 v25 = *(unsigned char *)(a2 + 32);
        swift_bridgeObjectRetain();
        sub_25A385D94(v23, v24, v25);
        *(void *)(a1 + 16) = v23;
        *(void *)(a1 + 24) = v24;
        *(unsigned char *)(a1 + 32) = v25;
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        uint64_t v26 = *(void *)(a2 + 56);
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
        *(void *)(a1 + 56) = v26;
        uint64_t v27 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
        uint64_t v28 = a1 + v27;
        uint64_t v29 = a2 + v27;
        uint64_t v30 = sub_25A50E4C0();
        unsigned __int8 v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16);
        swift_bridgeObjectRetain();
        v31(v28, v29, v30);
        uint64_t v32 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v33 = v32[5];
        uint64_t v34 = (void *)(v28 + v33);
        uint64_t v35 = (void *)(v29 + v33);
        *uint64_t v34 = *v35;
        v34[1] = v35[1];
        uint64_t v36 = v32[6];
        uint64_t v37 = (void *)(v28 + v36);
        uint64_t v38 = (void *)(v29 + v36);
        *uint64_t v37 = *v38;
        v37[1] = v38[1];
        *(_DWORD *)(v28 + v32[7]) = *(_DWORD *)(v29 + v32[7]);
        uint64_t v39 = v32[8];
        uint64_t v99 = v29 + v39;
        uint64_t v103 = v28 + v39;
        uint64_t v40 = sub_25A50E470();
        uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v41(v103, v99, v40);
        *(void *)(v28 + v32[9]) = *(void *)(v29 + v32[9]);
        *(void *)(v28 + v32[10]) = *(void *)(v29 + v32[10]);
        *(void *)(v28 + v32[11]) = *(void *)(v29 + v32[11]);
        uint64_t v42 = v32[12];
        uint64_t v43 = (void *)(v28 + v42);
        uint64_t v44 = (void *)(v29 + v42);
        *uint64_t v43 = *v44;
        v43[1] = v44[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v45 = *(int *)(type metadata accessor for CrashReportError.DyldLibraryLoadCrashError() + 24);
        uint64_t v46 = a1 + v45;
        uint64_t v47 = a2 + v45;
        uint64_t v48 = sub_25A50E4C0();
        uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v49(v46, v47, v48);
        uint64_t v50 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v51 = v50[5];
        uint64_t v52 = (void *)(v46 + v51);
        uint64_t v53 = (void *)(v47 + v51);
        *uint64_t v52 = *v53;
        v52[1] = v53[1];
        uint64_t v54 = v50[6];
        uint64_t v55 = (void *)(v46 + v54);
        uint64_t v56 = (void *)(v47 + v54);
        *uint64_t v55 = *v56;
        v55[1] = v56[1];
        *(_DWORD *)(v46 + v50[7]) = *(_DWORD *)(v47 + v50[7]);
        uint64_t v57 = v50[8];
        uint64_t v100 = v47 + v57;
        uint64_t v104 = v46 + v57;
        uint64_t v58 = sub_25A50E470();
        uint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v59(v104, v100, v58);
        *(void *)(v46 + v50[9]) = *(void *)(v47 + v50[9]);
        *(void *)(v46 + v50[10]) = *(void *)(v47 + v50[10]);
        *(void *)(v46 + v50[11]) = *(void *)(v47 + v50[11]);
        uint64_t v60 = v50[12];
        uint64_t v61 = (void *)(v46 + v60);
        uint64_t v62 = (void *)(v47 + v60);
        *uint64_t v61 = *v62;
        v61[1] = v62[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v63 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
        uint64_t v64 = a1 + v63;
        uint64_t v65 = a2 + v63;
        uint64_t v66 = sub_25A50E4C0();
        uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v67(v64, v65, v66);
        uint64_t v68 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v69 = v68[5];
        uint64_t v70 = (void *)(v64 + v69);
        uint64_t v71 = (void *)(v65 + v69);
        void *v70 = *v71;
        v70[1] = v71[1];
        uint64_t v72 = v68[6];
        uint64_t v73 = (void *)(v64 + v72);
        v74 = (void *)(v65 + v72);
        *uint64_t v73 = *v74;
        v73[1] = v74[1];
        *(_DWORD *)(v64 + v68[7]) = *(_DWORD *)(v65 + v68[7]);
        uint64_t v75 = v68[8];
        uint64_t v101 = v65 + v75;
        uint64_t v105 = v64 + v75;
        uint64_t v76 = sub_25A50E470();
        uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v77(v105, v101, v76);
        *(void *)(v64 + v68[9]) = *(void *)(v65 + v68[9]);
        *(void *)(v64 + v68[10]) = *(void *)(v65 + v68[10]);
        *(void *)(v64 + v68[11]) = *(void *)(v65 + v68[11]);
        uint64_t v78 = v68[12];
        uint64_t v79 = (void *)(v64 + v78);
        uint64_t v80 = (void *)(v65 + v78);
        *uint64_t v79 = *v80;
        v79[1] = v80[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v5 = *(int *)(type metadata accessor for CrashReportError.MissingEnvironmentObjectError() + 24);
        uint64_t v6 = a1 + v5;
        uint64_t v7 = a2 + v5;
        uint64_t v8 = sub_25A50E4C0();
        uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9(v6, v7, v8);
        uint64_t v10 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v11 = v10[5];
        uint64_t v12 = (void *)(v6 + v11);
        uint64_t v13 = (void *)(v7 + v11);
        *uint64_t v12 = *v13;
        v12[1] = v13[1];
        uint64_t v14 = v10[6];
        uint64_t v15 = (void *)(v6 + v14);
        uint64_t v16 = (void *)(v7 + v14);
        *uint64_t v15 = *v16;
        v15[1] = v16[1];
        *(_DWORD *)(v6 + v10[7]) = *(_DWORD *)(v7 + v10[7]);
        uint64_t v17 = v10[8];
        uint64_t v98 = v7 + v17;
        uint64_t v102 = v6 + v17;
        uint64_t v18 = sub_25A50E470();
        uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v19(v102, v98, v18);
        *(void *)(v6 + v10[9]) = *(void *)(v7 + v10[9]);
        *(void *)(v6 + v10[10]) = *(void *)(v7 + v10[10]);
        *(void *)(v6 + v10[11]) = *(void *)(v7 + v10[11]);
        uint64_t v20 = v10[12];
        uint64_t v21 = (void *)(v6 + v20);
        uint64_t v22 = (void *)(v7 + v20);
        *uint64_t v21 = *v22;
        v21[1] = v22[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    a3 = v106;
  }
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25A387404(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for CrashReportError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CrashReportError.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 5u:
      uint64_t v6 = sub_25A50E4C0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for CrashReport(0);
      *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
      *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
      *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
      uint64_t v8 = v7[8];
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      uint64_t v11 = sub_25A50E470();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
      *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
      *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
      *(_OWORD *)(a1 + v7[12]) = *(_OWORD *)(a2 + v7[12]);
      goto LABEL_9;
    case 2u:
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      uint64_t v15 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
      goto LABEL_8;
    case 3u:
      long long v16 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v16;
      uint64_t CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
      goto LABEL_6;
    case 4u:
      long long v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v15 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
      goto LABEL_8;
    default:
      long long v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      uint64_t CrashError = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
LABEL_6:
      uint64_t v15 = *(int *)(CrashError + 24);
LABEL_8:
      uint64_t v18 = a1 + v15;
      uint64_t v19 = a2 + v15;
      uint64_t v20 = sub_25A50E4C0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
      uint64_t v21 = (int *)type metadata accessor for CrashReport(0);
      *(_OWORD *)(v18 + v21[5]) = *(_OWORD *)(v19 + v21[5]);
      *(_OWORD *)(v18 + v21[6]) = *(_OWORD *)(v19 + v21[6]);
      *(_DWORD *)(v18 + v21[7]) = *(_DWORD *)(v19 + v21[7]);
      uint64_t v22 = v21[8];
      uint64_t v23 = v18 + v22;
      uint64_t v24 = v19 + v22;
      uint64_t v25 = sub_25A50E470();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
      *(void *)(v18 + v21[9]) = *(void *)(v19 + v21[9]);
      *(void *)(v18 + v21[10]) = *(void *)(v19 + v21[10]);
      *(void *)(v18 + v21[11]) = *(void *)(v19 + v21[11]);
      *(_OWORD *)(v18 + v21[12]) = *(_OWORD *)(v19 + v21[12]);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
      return a1;
  }
}

uint64_t assignWithTake for CrashReportError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_25A387404(a1, type metadata accessor for CrashReportError.Kind);
    type metadata accessor for CrashReportError.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 5u:
        uint64_t v6 = sub_25A50E4C0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for CrashReport(0);
        *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
        *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
        *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
        uint64_t v8 = v7[8];
        uint64_t v9 = a1 + v8;
        uint64_t v10 = a2 + v8;
        uint64_t v11 = sub_25A50E470();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
        *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
        *(_OWORD *)(a1 + v7[12]) = *(_OWORD *)(a2 + v7[12]);
        goto LABEL_10;
      case 2u:
        long long v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
        uint64_t v15 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
        goto LABEL_9;
      case 3u:
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        uint64_t CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
        goto LABEL_6;
      case 4u:
        long long v16 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v16;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        uint64_t v15 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
        goto LABEL_9;
      default:
        long long v12 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v12;
        uint64_t CrashError = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
LABEL_6:
        uint64_t v15 = *(int *)(CrashError + 24);
LABEL_9:
        uint64_t v18 = a1 + v15;
        uint64_t v19 = a2 + v15;
        uint64_t v20 = sub_25A50E4C0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
        uint64_t v21 = (int *)type metadata accessor for CrashReport(0);
        *(_OWORD *)(v18 + v21[5]) = *(_OWORD *)(v19 + v21[5]);
        *(_OWORD *)(v18 + v21[6]) = *(_OWORD *)(v19 + v21[6]);
        *(_DWORD *)(v18 + v21[7]) = *(_DWORD *)(v19 + v21[7]);
        uint64_t v22 = v21[8];
        uint64_t v23 = v18 + v22;
        uint64_t v24 = v19 + v22;
        uint64_t v25 = sub_25A50E470();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
        *(void *)(v18 + v21[9]) = *(void *)(v19 + v21[9]);
        *(void *)(v18 + v21[10]) = *(void *)(v19 + v21[10]);
        *(void *)(v18 + v21[11]) = *(void *)(v19 + v21[11]);
        *(_OWORD *)(v18 + v21[12]) = *(_OWORD *)(v19 + v21[12]);
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CrashReportError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A387ACC);
}

uint64_t sub_25A387ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CrashReportError.Kind(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CrashReportError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A387BAC);
}

uint64_t sub_25A387BAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CrashReportError.Kind(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t sub_25A387C68()
{
  uint64_t result = type metadata accessor for CrashReportError.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CrashReportError.Kind(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *(void *)a1 = *a2;
    a1 = v29 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 5u:
        uint64_t v103 = sub_25A50E4C0();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v103 - 8) + 16))(a1, a2, v103);
        uint64_t v104 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v105 = v104[5];
        uint64_t v106 = (void *)(a1 + v105);
        uint64_t v107 = (uint64_t *)((char *)a2 + v105);
        uint64_t v108 = v107[1];
        void *v106 = *v107;
        v106[1] = v108;
        uint64_t v109 = v104[6];
        uint64_t v110 = (void *)(a1 + v109);
        uint64_t v111 = (uint64_t *)((char *)a2 + v109);
        uint64_t v112 = v111[1];
        void *v110 = *v111;
        v110[1] = v112;
        *(_DWORD *)(a1 + v104[7]) = *(_DWORD *)((char *)a2 + v104[7]);
        uint64_t v113 = v104[8];
        uint64_t v130 = a1 + v113;
        uint64_t v114 = (uint64_t)a2 + v113;
        uint64_t v115 = sub_25A50E470();
        uint64_t v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v116(v130, v114, v115);
        *(void *)(a1 + v104[9]) = *(uint64_t *)((char *)a2 + v104[9]);
        *(void *)(a1 + v104[10]) = *(uint64_t *)((char *)a2 + v104[10]);
        *(void *)(a1 + v104[11]) = *(uint64_t *)((char *)a2 + v104[11]);
        uint64_t v117 = v104[12];
        uint64_t v118 = (void *)(a1 + v117);
        uint64_t v119 = (uint64_t *)((char *)a2 + v117);
        uint64_t v120 = v119[1];
        *uint64_t v118 = *v119;
        v118[1] = v120;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v30 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v30;
        uint64_t v31 = a2[2];
        uint64_t v32 = a2[3];
        unsigned __int8 v33 = *((unsigned char *)a2 + 32);
        swift_bridgeObjectRetain();
        sub_25A385D94(v31, v32, v33);
        *(void *)(a1 + 16) = v31;
        *(void *)(a1 + 24) = v32;
        *(unsigned char *)(a1 + 32) = v33;
        uint64_t v34 = a2[6];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = v34;
        *(void *)(a1 + 56) = a2[7];
        *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
        uint64_t v35 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
        uint64_t v36 = a1 + v35;
        uint64_t v37 = (uint64_t)a2 + v35;
        uint64_t v38 = sub_25A50E4C0();
        uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16);
        swift_bridgeObjectRetain();
        v39(v36, v37, v38);
        uint64_t v40 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v41 = v40[5];
        uint64_t v42 = (void *)(v36 + v41);
        uint64_t v43 = (void *)(v37 + v41);
        uint64_t v44 = v43[1];
        *uint64_t v42 = *v43;
        v42[1] = v44;
        uint64_t v45 = v40[6];
        uint64_t v46 = (void *)(v36 + v45);
        uint64_t v47 = (void *)(v37 + v45);
        uint64_t v48 = v47[1];
        *uint64_t v46 = *v47;
        v46[1] = v48;
        *(_DWORD *)(v36 + v40[7]) = *(_DWORD *)(v37 + v40[7]);
        uint64_t v49 = v40[8];
        uint64_t v123 = v37 + v49;
        uint64_t v127 = v36 + v49;
        uint64_t v50 = sub_25A50E470();
        uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v51(v127, v123, v50);
        *(void *)(v36 + v40[9]) = *(void *)(v37 + v40[9]);
        *(void *)(v36 + v40[10]) = *(void *)(v37 + v40[10]);
        *(void *)(v36 + v40[11]) = *(void *)(v37 + v40[11]);
        uint64_t v52 = v40[12];
        uint64_t v53 = (void *)(v36 + v52);
        uint64_t v54 = (void *)(v37 + v52);
        uint64_t v55 = v54[1];
        *uint64_t v53 = *v54;
        v53[1] = v55;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v56 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v56;
        uint64_t v57 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v57;
        uint64_t v58 = *(int *)(type metadata accessor for CrashReportError.DyldLibraryLoadCrashError() + 24);
        uint64_t v59 = a1 + v58;
        uint64_t v60 = (uint64_t)a2 + v58;
        uint64_t v61 = sub_25A50E4C0();
        uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v62(v59, v60, v61);
        uint64_t v63 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v64 = v63[5];
        uint64_t v65 = (void *)(v59 + v64);
        uint64_t v66 = (void *)(v60 + v64);
        uint64_t v67 = v66[1];
        *uint64_t v65 = *v66;
        v65[1] = v67;
        uint64_t v68 = v63[6];
        uint64_t v69 = (void *)(v59 + v68);
        uint64_t v70 = (void *)(v60 + v68);
        uint64_t v71 = v70[1];
        *uint64_t v69 = *v70;
        v69[1] = v71;
        *(_DWORD *)(v59 + v63[7]) = *(_DWORD *)(v60 + v63[7]);
        uint64_t v72 = v63[8];
        uint64_t v124 = v60 + v72;
        uint64_t v128 = v59 + v72;
        uint64_t v73 = sub_25A50E470();
        v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v74(v128, v124, v73);
        *(void *)(v59 + v63[9]) = *(void *)(v60 + v63[9]);
        *(void *)(v59 + v63[10]) = *(void *)(v60 + v63[10]);
        *(void *)(v59 + v63[11]) = *(void *)(v60 + v63[11]);
        uint64_t v75 = v63[12];
        uint64_t v76 = (void *)(v59 + v75);
        uint64_t v77 = (void *)(v60 + v75);
        uint64_t v78 = v77[1];
        void *v76 = *v77;
        v76[1] = v78;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v79 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v79;
        uint64_t v80 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v80;
        uint64_t v81 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v81;
        uint64_t v82 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
        uint64_t v83 = a1 + v82;
        uint64_t v84 = (uint64_t)a2 + v82;
        uint64_t v85 = sub_25A50E4C0();
        uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v86(v83, v84, v85);
        v87 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v88 = v87[5];
        uint64_t v89 = (void *)(v83 + v88);
        uint64_t v90 = (void *)(v84 + v88);
        uint64_t v91 = v90[1];
        void *v89 = *v90;
        v89[1] = v91;
        uint64_t v92 = v87[6];
        uint64_t v93 = (void *)(v83 + v92);
        uint64_t v94 = (void *)(v84 + v92);
        uint64_t v95 = v94[1];
        void *v93 = *v94;
        v93[1] = v95;
        *(_DWORD *)(v83 + v87[7]) = *(_DWORD *)(v84 + v87[7]);
        uint64_t v96 = v87[8];
        uint64_t v125 = v84 + v96;
        uint64_t v129 = v83 + v96;
        uint64_t v97 = sub_25A50E470();
        uint64_t v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v98(v129, v125, v97);
        *(void *)(v83 + v87[9]) = *(void *)(v84 + v87[9]);
        *(void *)(v83 + v87[10]) = *(void *)(v84 + v87[10]);
        *(void *)(v83 + v87[11]) = *(void *)(v84 + v87[11]);
        uint64_t v99 = v87[12];
        uint64_t v100 = (void *)(v83 + v99);
        uint64_t v101 = (void *)(v84 + v99);
        uint64_t v102 = v101[1];
        void *v100 = *v101;
        v100[1] = v102;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v6;
        uint64_t v7 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v7;
        uint64_t v8 = *(int *)(type metadata accessor for CrashReportError.MissingEnvironmentObjectError() + 24);
        uint64_t v9 = a1 + v8;
        uint64_t v10 = (uint64_t)a2 + v8;
        uint64_t v11 = sub_25A50E4C0();
        long long v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v12(v9, v10, v11);
        uint64_t v13 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v14 = v13[5];
        uint64_t v15 = (void *)(v9 + v14);
        long long v16 = (void *)(v10 + v14);
        uint64_t v17 = v16[1];
        *uint64_t v15 = *v16;
        v15[1] = v17;
        uint64_t v18 = v13[6];
        uint64_t v19 = (void *)(v9 + v18);
        uint64_t v20 = (void *)(v10 + v18);
        uint64_t v21 = v20[1];
        *uint64_t v19 = *v20;
        v19[1] = v21;
        *(_DWORD *)(v9 + v13[7]) = *(_DWORD *)(v10 + v13[7]);
        uint64_t v22 = v13[8];
        uint64_t v122 = v10 + v22;
        uint64_t v126 = v9 + v22;
        uint64_t v23 = sub_25A50E470();
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v24(v126, v122, v23);
        *(void *)(v9 + v13[9]) = *(void *)(v10 + v13[9]);
        *(void *)(v9 + v13[10]) = *(void *)(v10 + v13[10]);
        *(void *)(v9 + v13[11]) = *(void *)(v10 + v13[11]);
        uint64_t v25 = v13[12];
        uint64_t v26 = (void *)(v9 + v25);
        uint64_t v27 = (void *)(v10 + v25);
        uint64_t v28 = v27[1];
        void *v26 = *v27;
        v26[1] = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CrashReportError.Kind(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t CrashError = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
      goto LABEL_5;
    case 1:
    case 5:
      goto LABEL_8;
    case 2:
      swift_bridgeObjectRelease();
      sub_25A386064(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
      swift_bridgeObjectRelease();
      uint64_t v4 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
      goto LABEL_7;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
LABEL_5:
      uint64_t v4 = *(int *)(CrashError + 24);
      goto LABEL_7;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
LABEL_7:
      a1 += v4;
LABEL_8:
      uint64_t v5 = sub_25A50E4C0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      uint64_t v6 = type metadata accessor for CrashReport(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = a1 + *(int *)(v6 + 32);
      uint64_t v8 = sub_25A50E470();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for CrashReportError.Kind(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 5u:
      uint64_t v104 = sub_25A50E4C0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 16))(a1, a2, v104);
      uint64_t v105 = (int *)type metadata accessor for CrashReport(0);
      uint64_t v106 = v105[5];
      uint64_t v107 = (void *)(a1 + v106);
      uint64_t v108 = (void *)(a2 + v106);
      uint64_t v109 = v108[1];
      void *v107 = *v108;
      v107[1] = v109;
      uint64_t v110 = v105[6];
      uint64_t v111 = (void *)(a1 + v110);
      uint64_t v112 = (void *)(a2 + v110);
      uint64_t v113 = v112[1];
      void *v111 = *v112;
      v111[1] = v113;
      *(_DWORD *)(a1 + v105[7]) = *(_DWORD *)(a2 + v105[7]);
      uint64_t v114 = v105[8];
      uint64_t v115 = a1 + v114;
      uint64_t v116 = a2 + v114;
      uint64_t v117 = sub_25A50E470();
      uint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v118(v115, v116, v117);
      *(void *)(a1 + v105[9]) = *(void *)(a2 + v105[9]);
      *(void *)(a1 + v105[10]) = *(void *)(a2 + v105[10]);
      *(void *)(a1 + v105[11]) = *(void *)(a2 + v105[11]);
      uint64_t v119 = v105[12];
      uint64_t v120 = (void *)(a1 + v119);
      uint64_t v121 = (void *)(a2 + v119);
      uint64_t v122 = v121[1];
      void *v120 = *v121;
      v120[1] = v122;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 2u:
      uint64_t v28 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v28;
      uint64_t v29 = *(void *)(a2 + 16);
      uint64_t v30 = *(void *)(a2 + 24);
      unsigned __int8 v31 = *(unsigned char *)(a2 + 32);
      swift_bridgeObjectRetain();
      sub_25A385D94(v29, v30, v31);
      *(void *)(a1 + 16) = v29;
      *(void *)(a1 + 24) = v30;
      *(unsigned char *)(a1 + 32) = v31;
      uint64_t v32 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v32;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      uint64_t v33 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
      uint64_t v34 = a1 + v33;
      uint64_t v35 = a2 + v33;
      uint64_t v36 = sub_25A50E4C0();
      uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16);
      swift_bridgeObjectRetain();
      v37(v34, v35, v36);
      uint64_t v38 = (int *)type metadata accessor for CrashReport(0);
      uint64_t v39 = v38[5];
      uint64_t v40 = (void *)(v34 + v39);
      uint64_t v41 = (void *)(v35 + v39);
      uint64_t v42 = v41[1];
      *uint64_t v40 = *v41;
      v40[1] = v42;
      uint64_t v43 = v38[6];
      uint64_t v44 = (void *)(v34 + v43);
      uint64_t v45 = (void *)(v35 + v43);
      uint64_t v46 = v45[1];
      *uint64_t v44 = *v45;
      v44[1] = v46;
      *(_DWORD *)(v34 + v38[7]) = *(_DWORD *)(v35 + v38[7]);
      uint64_t v47 = v38[8];
      uint64_t v125 = v34 + v47;
      uint64_t v48 = v35 + v47;
      uint64_t v49 = sub_25A50E470();
      uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50(v125, v48, v49);
      *(void *)(v34 + v38[9]) = *(void *)(v35 + v38[9]);
      *(void *)(v34 + v38[10]) = *(void *)(v35 + v38[10]);
      *(void *)(v34 + v38[11]) = *(void *)(v35 + v38[11]);
      uint64_t v51 = v38[12];
      uint64_t v52 = (void *)(v34 + v51);
      uint64_t v53 = (void *)(v35 + v51);
      uint64_t v54 = v53[1];
      *uint64_t v52 = *v53;
      v52[1] = v54;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v55 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v55;
      uint64_t v56 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v56;
      uint64_t v57 = *(int *)(type metadata accessor for CrashReportError.DyldLibraryLoadCrashError() + 24);
      uint64_t v58 = a1 + v57;
      uint64_t v59 = a2 + v57;
      uint64_t v60 = sub_25A50E4C0();
      uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v61(v58, v59, v60);
      uint64_t v62 = (int *)type metadata accessor for CrashReport(0);
      uint64_t v63 = v62[5];
      uint64_t v64 = (void *)(v58 + v63);
      uint64_t v65 = (void *)(v59 + v63);
      uint64_t v66 = v65[1];
      void *v64 = *v65;
      v64[1] = v66;
      uint64_t v67 = v62[6];
      uint64_t v68 = (void *)(v58 + v67);
      uint64_t v69 = (void *)(v59 + v67);
      uint64_t v70 = v69[1];
      *uint64_t v68 = *v69;
      v68[1] = v70;
      *(_DWORD *)(v58 + v62[7]) = *(_DWORD *)(v59 + v62[7]);
      uint64_t v71 = v62[8];
      uint64_t v126 = v58 + v71;
      uint64_t v72 = v59 + v71;
      uint64_t v73 = sub_25A50E470();
      v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v74(v126, v72, v73);
      *(void *)(v58 + v62[9]) = *(void *)(v59 + v62[9]);
      *(void *)(v58 + v62[10]) = *(void *)(v59 + v62[10]);
      *(void *)(v58 + v62[11]) = *(void *)(v59 + v62[11]);
      uint64_t v75 = v62[12];
      uint64_t v76 = (void *)(v58 + v75);
      uint64_t v77 = (void *)(v59 + v75);
      uint64_t v78 = v77[1];
      void *v76 = *v77;
      v76[1] = v78;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 4u:
      uint64_t v79 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v79;
      uint64_t v80 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v80;
      uint64_t v81 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v81;
      uint64_t v82 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
      uint64_t v83 = a1 + v82;
      uint64_t v84 = a2 + v82;
      uint64_t v85 = sub_25A50E4C0();
      uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v86(v83, v84, v85);
      v87 = (int *)type metadata accessor for CrashReport(0);
      uint64_t v88 = v87[5];
      uint64_t v89 = (void *)(v83 + v88);
      uint64_t v90 = (void *)(v84 + v88);
      uint64_t v91 = v90[1];
      void *v89 = *v90;
      v89[1] = v91;
      uint64_t v92 = v87[6];
      uint64_t v93 = (void *)(v83 + v92);
      uint64_t v94 = (void *)(v84 + v92);
      uint64_t v95 = v94[1];
      void *v93 = *v94;
      v93[1] = v95;
      *(_DWORD *)(v83 + v87[7]) = *(_DWORD *)(v84 + v87[7]);
      uint64_t v96 = v87[8];
      uint64_t v127 = v83 + v96;
      uint64_t v97 = v84 + v96;
      uint64_t v98 = sub_25A50E470();
      uint64_t v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v99(v127, v97, v98);
      *(void *)(v83 + v87[9]) = *(void *)(v84 + v87[9]);
      *(void *)(v83 + v87[10]) = *(void *)(v84 + v87[10]);
      *(void *)(v83 + v87[11]) = *(void *)(v84 + v87[11]);
      uint64_t v100 = v87[12];
      uint64_t v101 = (void *)(v83 + v100);
      uint64_t v102 = (void *)(v84 + v100);
      uint64_t v103 = v102[1];
      void *v101 = *v102;
      v101[1] = v103;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      uint64_t v6 = *(int *)(type metadata accessor for CrashReportError.MissingEnvironmentObjectError() + 24);
      uint64_t v7 = a1 + v6;
      uint64_t v8 = a2 + v6;
      uint64_t v9 = sub_25A50E4C0();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10(v7, v8, v9);
      uint64_t v11 = (int *)type metadata accessor for CrashReport(0);
      uint64_t v12 = v11[5];
      uint64_t v13 = (void *)(v7 + v12);
      uint64_t v14 = (void *)(v8 + v12);
      uint64_t v15 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v15;
      uint64_t v16 = v11[6];
      uint64_t v17 = (void *)(v7 + v16);
      uint64_t v18 = (void *)(v8 + v16);
      uint64_t v19 = v18[1];
      void *v17 = *v18;
      v17[1] = v19;
      *(_DWORD *)(v7 + v11[7]) = *(_DWORD *)(v8 + v11[7]);
      uint64_t v20 = v11[8];
      uint64_t v124 = v7 + v20;
      uint64_t v21 = v8 + v20;
      uint64_t v22 = sub_25A50E470();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23(v124, v21, v22);
      *(void *)(v7 + v11[9]) = *(void *)(v8 + v11[9]);
      *(void *)(v7 + v11[10]) = *(void *)(v8 + v11[10]);
      *(void *)(v7 + v11[11]) = *(void *)(v8 + v11[11]);
      uint64_t v24 = v11[12];
      uint64_t v25 = (void *)(v7 + v24);
      uint64_t v26 = (void *)(v8 + v24);
      uint64_t v27 = v26[1];
      *uint64_t v25 = *v26;
      v25[1] = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for CrashReportError.Kind(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_25A387404(a1, type metadata accessor for CrashReportError.Kind);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 5u:
        uint64_t v84 = sub_25A50E4C0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 16))(a1, a2, v84);
        uint64_t v85 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v86 = v85[5];
        v87 = (void *)(a1 + v86);
        uint64_t v88 = (void *)(a2 + v86);
        void *v87 = *v88;
        v87[1] = v88[1];
        uint64_t v89 = v85[6];
        uint64_t v90 = (void *)(a1 + v89);
        uint64_t v91 = (void *)(a2 + v89);
        void *v90 = *v91;
        v90[1] = v91[1];
        *(_DWORD *)(a1 + v85[7]) = *(_DWORD *)(a2 + v85[7]);
        uint64_t v92 = v85[8];
        uint64_t v93 = a1 + v92;
        uint64_t v94 = a2 + v92;
        uint64_t v95 = sub_25A50E470();
        uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v96(v93, v94, v95);
        *(void *)(a1 + v85[9]) = *(void *)(a2 + v85[9]);
        *(void *)(a1 + v85[10]) = *(void *)(a2 + v85[10]);
        *(void *)(a1 + v85[11]) = *(void *)(a2 + v85[11]);
        uint64_t v97 = v85[12];
        uint64_t v98 = (void *)(a1 + v97);
        uint64_t v99 = (void *)(a2 + v97);
        void *v98 = *v99;
        v98[1] = v99[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        uint64_t v23 = *(void *)(a2 + 16);
        uint64_t v24 = *(void *)(a2 + 24);
        unsigned __int8 v25 = *(unsigned char *)(a2 + 32);
        swift_bridgeObjectRetain();
        sub_25A385D94(v23, v24, v25);
        *(void *)(a1 + 16) = v23;
        *(void *)(a1 + 24) = v24;
        *(unsigned char *)(a1 + 32) = v25;
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        uint64_t v26 = *(void *)(a2 + 56);
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
        *(void *)(a1 + 56) = v26;
        uint64_t v27 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
        uint64_t v28 = a1 + v27;
        uint64_t v29 = a2 + v27;
        uint64_t v30 = sub_25A50E4C0();
        unsigned __int8 v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16);
        swift_bridgeObjectRetain();
        v31(v28, v29, v30);
        uint64_t v32 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v33 = v32[5];
        uint64_t v34 = (void *)(v28 + v33);
        uint64_t v35 = (void *)(v29 + v33);
        *uint64_t v34 = *v35;
        v34[1] = v35[1];
        uint64_t v36 = v32[6];
        uint64_t v37 = (void *)(v28 + v36);
        uint64_t v38 = (void *)(v29 + v36);
        *uint64_t v37 = *v38;
        v37[1] = v38[1];
        *(_DWORD *)(v28 + v32[7]) = *(_DWORD *)(v29 + v32[7]);
        uint64_t v39 = v32[8];
        uint64_t v102 = v28 + v39;
        uint64_t v40 = v29 + v39;
        uint64_t v41 = sub_25A50E470();
        uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v42(v102, v40, v41);
        *(void *)(v28 + v32[9]) = *(void *)(v29 + v32[9]);
        *(void *)(v28 + v32[10]) = *(void *)(v29 + v32[10]);
        *(void *)(v28 + v32[11]) = *(void *)(v29 + v32[11]);
        uint64_t v43 = v32[12];
        uint64_t v44 = (void *)(v28 + v43);
        uint64_t v45 = (void *)(v29 + v43);
        *uint64_t v44 = *v45;
        v44[1] = v45[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v46 = *(int *)(type metadata accessor for CrashReportError.DyldLibraryLoadCrashError() + 24);
        uint64_t v47 = a1 + v46;
        uint64_t v48 = a2 + v46;
        uint64_t v49 = sub_25A50E4C0();
        uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v50(v47, v48, v49);
        uint64_t v51 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v52 = v51[5];
        uint64_t v53 = (void *)(v47 + v52);
        uint64_t v54 = (void *)(v48 + v52);
        *uint64_t v53 = *v54;
        v53[1] = v54[1];
        uint64_t v55 = v51[6];
        uint64_t v56 = (void *)(v47 + v55);
        uint64_t v57 = (void *)(v48 + v55);
        *uint64_t v56 = *v57;
        v56[1] = v57[1];
        *(_DWORD *)(v47 + v51[7]) = *(_DWORD *)(v48 + v51[7]);
        uint64_t v58 = v51[8];
        uint64_t v103 = v47 + v58;
        uint64_t v59 = v48 + v58;
        uint64_t v60 = sub_25A50E470();
        uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v61(v103, v59, v60);
        *(void *)(v47 + v51[9]) = *(void *)(v48 + v51[9]);
        *(void *)(v47 + v51[10]) = *(void *)(v48 + v51[10]);
        *(void *)(v47 + v51[11]) = *(void *)(v48 + v51[11]);
        uint64_t v62 = v51[12];
        uint64_t v63 = (void *)(v47 + v62);
        uint64_t v64 = (void *)(v48 + v62);
        *uint64_t v63 = *v64;
        v63[1] = v64[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v65 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
        uint64_t v66 = a1 + v65;
        uint64_t v67 = a2 + v65;
        uint64_t v68 = sub_25A50E4C0();
        uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v69(v66, v67, v68);
        uint64_t v70 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v71 = v70[5];
        uint64_t v72 = (void *)(v66 + v71);
        uint64_t v73 = (void *)(v67 + v71);
        *uint64_t v72 = *v73;
        v72[1] = v73[1];
        uint64_t v74 = v70[6];
        uint64_t v75 = (void *)(v66 + v74);
        uint64_t v76 = (void *)(v67 + v74);
        *uint64_t v75 = *v76;
        v75[1] = v76[1];
        *(_DWORD *)(v66 + v70[7]) = *(_DWORD *)(v67 + v70[7]);
        uint64_t v77 = v70[8];
        uint64_t v104 = v66 + v77;
        uint64_t v78 = v67 + v77;
        uint64_t v79 = sub_25A50E470();
        uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v80(v104, v78, v79);
        *(void *)(v66 + v70[9]) = *(void *)(v67 + v70[9]);
        *(void *)(v66 + v70[10]) = *(void *)(v67 + v70[10]);
        *(void *)(v66 + v70[11]) = *(void *)(v67 + v70[11]);
        uint64_t v81 = v70[12];
        uint64_t v82 = (void *)(v66 + v81);
        uint64_t v83 = (void *)(v67 + v81);
        *uint64_t v82 = *v83;
        v82[1] = v83[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v4 = *(int *)(type metadata accessor for CrashReportError.MissingEnvironmentObjectError() + 24);
        uint64_t v5 = a1 + v4;
        uint64_t v6 = a2 + v4;
        uint64_t v7 = sub_25A50E4C0();
        uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v8(v5, v6, v7);
        uint64_t v9 = (int *)type metadata accessor for CrashReport(0);
        uint64_t v10 = v9[5];
        uint64_t v11 = (void *)(v5 + v10);
        uint64_t v12 = (void *)(v6 + v10);
        *uint64_t v11 = *v12;
        v11[1] = v12[1];
        uint64_t v13 = v9[6];
        uint64_t v14 = (void *)(v5 + v13);
        uint64_t v15 = (void *)(v6 + v13);
        *uint64_t v14 = *v15;
        v14[1] = v15[1];
        *(_DWORD *)(v5 + v9[7]) = *(_DWORD *)(v6 + v9[7]);
        uint64_t v16 = v9[8];
        uint64_t v101 = v5 + v16;
        uint64_t v17 = v6 + v16;
        uint64_t v18 = sub_25A50E470();
        uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v19(v101, v17, v18);
        *(void *)(v5 + v9[9]) = *(void *)(v6 + v9[9]);
        *(void *)(v5 + v9[10]) = *(void *)(v6 + v9[10]);
        *(void *)(v5 + v9[11]) = *(void *)(v6 + v9[11]);
        uint64_t v20 = v9[12];
        uint64_t v21 = (void *)(v5 + v20);
        uint64_t v22 = (void *)(v6 + v20);
        *uint64_t v21 = *v22;
        v21[1] = v22[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for CrashReportError.Kind(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 5u:
      uint64_t v4 = sub_25A50E4C0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
      uint64_t v5 = (int *)type metadata accessor for CrashReport(0);
      *(_OWORD *)(a1 + v5[5]) = *(_OWORD *)(a2 + v5[5]);
      *(_OWORD *)(a1 + v5[6]) = *(_OWORD *)(a2 + v5[6]);
      *(_DWORD *)(a1 + v5[7]) = *(_DWORD *)(a2 + v5[7]);
      uint64_t v6 = v5[8];
      uint64_t v7 = a1 + v6;
      uint64_t v8 = a2 + v6;
      uint64_t v9 = sub_25A50E470();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
      *(void *)(a1 + v5[10]) = *(void *)(a2 + v5[10]);
      *(void *)(a1 + v5[11]) = *(void *)(a2 + v5[11]);
      *(_OWORD *)(a1 + v5[12]) = *(_OWORD *)(a2 + v5[12]);
      goto LABEL_9;
    case 2u:
      long long v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      uint64_t v13 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
      goto LABEL_8;
    case 3u:
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
      uint64_t CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
      goto LABEL_6;
    case 4u:
      long long v15 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v15;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v13 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
      goto LABEL_8;
    default:
      long long v10 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      uint64_t CrashError = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
LABEL_6:
      uint64_t v13 = *(int *)(CrashError + 24);
LABEL_8:
      uint64_t v16 = a1 + v13;
      uint64_t v17 = a2 + v13;
      uint64_t v18 = sub_25A50E4C0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      uint64_t v19 = (int *)type metadata accessor for CrashReport(0);
      *(_OWORD *)(v16 + v19[5]) = *(_OWORD *)(v17 + v19[5]);
      *(_OWORD *)(v16 + v19[6]) = *(_OWORD *)(v17 + v19[6]);
      *(_DWORD *)(v16 + v19[7]) = *(_DWORD *)(v17 + v19[7]);
      uint64_t v20 = v19[8];
      uint64_t v21 = v16 + v20;
      uint64_t v22 = v17 + v20;
      uint64_t v23 = sub_25A50E470();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
      *(void *)(v16 + v19[9]) = *(void *)(v17 + v19[9]);
      *(void *)(v16 + v19[10]) = *(void *)(v17 + v19[10]);
      *(void *)(v16 + v19[11]) = *(void *)(v17 + v19[11]);
      *(_OWORD *)(v16 + v19[12]) = *(_OWORD *)(v17 + v19[12]);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
}

uint64_t assignWithTake for CrashReportError.Kind(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_25A387404(a1, type metadata accessor for CrashReportError.Kind);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 5u:
        uint64_t v4 = sub_25A50E4C0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
        uint64_t v5 = (int *)type metadata accessor for CrashReport(0);
        *(_OWORD *)(a1 + v5[5]) = *(_OWORD *)(a2 + v5[5]);
        *(_OWORD *)(a1 + v5[6]) = *(_OWORD *)(a2 + v5[6]);
        *(_DWORD *)(a1 + v5[7]) = *(_DWORD *)(a2 + v5[7]);
        uint64_t v6 = v5[8];
        uint64_t v7 = a1 + v6;
        uint64_t v8 = a2 + v6;
        uint64_t v9 = sub_25A50E470();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
        *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
        *(void *)(a1 + v5[10]) = *(void *)(a2 + v5[10]);
        *(void *)(a1 + v5[11]) = *(void *)(a2 + v5[11]);
        *(_OWORD *)(a1 + v5[12]) = *(_OWORD *)(a2 + v5[12]);
        goto LABEL_10;
      case 2u:
        long long v15 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v15;
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
        uint64_t v13 = *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);
        goto LABEL_9;
      case 3u:
        long long v12 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v12;
        uint64_t CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
        goto LABEL_6;
      case 4u:
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        uint64_t v13 = *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);
        goto LABEL_9;
      default:
        long long v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        uint64_t CrashError = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
LABEL_6:
        uint64_t v13 = *(int *)(CrashError + 24);
LABEL_9:
        uint64_t v16 = a1 + v13;
        uint64_t v17 = a2 + v13;
        uint64_t v18 = sub_25A50E4C0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
        uint64_t v19 = (int *)type metadata accessor for CrashReport(0);
        *(_OWORD *)(v16 + v19[5]) = *(_OWORD *)(v17 + v19[5]);
        *(_OWORD *)(v16 + v19[6]) = *(_OWORD *)(v17 + v19[6]);
        *(_DWORD *)(v16 + v19[7]) = *(_DWORD *)(v17 + v19[7]);
        uint64_t v20 = v19[8];
        uint64_t v21 = v16 + v20;
        uint64_t v22 = v17 + v20;
        uint64_t v23 = sub_25A50E470();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
        *(void *)(v16 + v19[9]) = *(void *)(v17 + v19[9]);
        *(void *)(v16 + v19[10]) = *(void *)(v17 + v19[10]);
        *(void *)(v16 + v19[11]) = *(void *)(v17 + v19[11]);
        *(_OWORD *)(v16 + v19[12]) = *(_OWORD *)(v17 + v19[12]);
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CrashReportError.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for CrashReportError.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_25A38A228()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25A38A238()
{
  uint64_t result = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CrashReport(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for CrashReportError.ConditionInFileError();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for CrashReportError.UncaughtExceptionError();
          if (v5 <= 0x3F)
          {
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_25A38A3B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_25A38A3C4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_25A38A3D8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_25A38A3EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_25A38A400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

void type metadata accessor for CFRunLoopSource(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TimePeriod(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TimePeriod(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for _CSTypeRef(uint64_t a1)
{
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_25A38A4A0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CrashReport.Frame(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_4(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_25A38A548(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

void type metadata accessor for OSLogType(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void *sub_25A38A5A4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158C0);
      long long v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_25A38C908(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38A6B4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415930);
      long long v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38C31C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38A7DC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415920);
      long long v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38C42C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38A900(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415800);
      long long v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_25A38CBE8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38AA10(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158A8);
      long long v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38CDCC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38AB38(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415900);
      long long v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_25A38CAF4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38AC48(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38C1B8(a1, a2, a3, a4, &qword_26A415908, &qword_26A415910);
}

void *sub_25A38AC5C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4157D0);
      long long v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38DC0C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38AD84(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38B314(a1, a2, a3, a4, &qword_26A4157B8);
}

void *sub_25A38AD90(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158F8);
      long long v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4]) {
          memmove(v12, a4 + 4, 80 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38CCD4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38AEB0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158F0);
      long long v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4]) {
          memmove(v12, a4 + 4, 144 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38CEDC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38AFD8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4157F0);
      long long v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38D9F0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38B0FC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158E8);
      long long v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_25A38CBE8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_25A38B20C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158E0);
      long long v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38D0C8(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38B308(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38B314(a1, a2, a3, a4, &qword_26A4158D8);
}

void *sub_25A38B314(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      size_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      long long v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      size_t v11 = (void *)MEMORY[0x263F8EE78];
      long long v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_25A38DD08(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_25A38B420(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_25A38B5B0(a1, a2, a3, a4, &qword_26A4158C8, MEMORY[0x263F06EA8], MEMORY[0x263F06EA8]);
}

void *sub_25A38B454(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158D0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      int64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38D800(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_25A38B57C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_25A38B5B0(a1, a2, a3, a4, &qword_26A4158B8, type metadata accessor for TimingRecord, type metadata accessor for TimingRecord);
}

uint64_t sub_25A38B5B0(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = sub_25A510050();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_25A38DE14(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_25A38B830(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38B314(a1, a2, a3, a4, &qword_26A415808);
}

void *sub_25A38B83C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38B314(a1, a2, a3, a4, &qword_26A415810);
}

void *sub_25A38B848(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38B314(a1, a2, a3, a4, &qword_26A415860);
}

void *sub_25A38B854(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415820);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38D1B0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38B97C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415830);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_25A38D2C0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38BA8C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38BF78(a1, a2, a3, a4, &qword_26A415840, &qword_26A415848);
}

void *sub_25A38BAA0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415850);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38D4D8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38BBC0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415818);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38D8F8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38BCEC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38B314(a1, a2, a3, a4, &qword_26A415868);
}

void *sub_25A38BCF8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38B314(a1, a2, a3, a4, &qword_26A4158A0);
}

void *sub_25A38BD04(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415870);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_25A38D3CC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38BE14(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38BE34(a1, a2, a3, a4, &qword_26A415880, (void (*)(void, int64_t, void *, void *))sub_25A38D6F0);
}

void *sub_25A38BE34(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      uint64_t v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[3 * v11 + 4]) {
          memmove(v15, a4 + 4, 24 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    a6(0, v11, v15, a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_25A38BF64(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38BF78(a1, a2, a3, a4, &qword_26A415890, &qword_26A415898);
}

void *sub_25A38BF78(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 1;
      }
      v13[2] = v11;
      uint64_t v13[3] = 2 * (v15 >> 5);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[4 * v11 + 4]) {
          memmove(v16, a4 + 4, 32 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_25A38D5E8(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_25A38C094(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4157E8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_25A38CFD4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25A38C1A4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_25A38C1B8(a1, a2, a3, a4, &qword_26A4157D8, &qword_26A4157E0);
}

void *sub_25A38C1B8(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      uint64_t v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25A38DB00(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_25A38C2E8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_25A38B5B0(a1, a2, a3, a4, &qword_26A4157C8, (uint64_t (*)(void))type metadata accessor for IOPowerSource.Observer, (uint64_t (*)(void))type metadata accessor for IOPowerSource.Observer);
}

uint64_t sub_25A38C31C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415938);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38C42C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415928);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38C53C(uint64_t a1, void *a2)
{
  uint64_t v34 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v36 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  uint64_t v33 = (void *)MEMORY[0x263F8EE78];
  if (v4) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v9 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v9 < v36)
    {
      unint64_t v10 = *(void *)(v34 + 8 * v9);
      ++v6;
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v36) {
        goto LABEL_40;
      }
      unint64_t v10 = *(void *)(v34 + 8 * v6);
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 2;
      if (v9 + 2 >= v36) {
        goto LABEL_40;
      }
      unint64_t v10 = *(void *)(v34 + 8 * v6);
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 3;
      if (v9 + 3 >= v36) {
        goto LABEL_40;
      }
      unint64_t v10 = *(void *)(v34 + 8 * v6);
      if (v10)
      {
LABEL_22:
        unint64_t v4 = (v10 - 1) & v10;
        for (unint64_t i = __clz(__rbit64(v10)) + (v6 << 6); ; unint64_t i = v7 | (v6 << 6))
        {
          uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * i);
          uint64_t v13 = *(void *)(v12 + 16);
          if (v13)
          {
            unint64_t v38 = v4;
            int64_t v39 = v6;
            swift_bridgeObjectRetain_n();
            id v14 = a2;
            uint64_t v15 = (uint64_t *)(v12 + 40);
            uint64_t v16 = (void *)MEMORY[0x263F8EE78];
            do
            {
              uint64_t v18 = *(v15 - 1);
              uint64_t v17 = *v15;
              swift_bridgeObjectRetain();
              size_t v19 = (void *)sub_25A50EBF0();
              id v20 = objc_msgSend(v14, sel_firstMatchInString_options_range_, v19, 0, 0, sub_25A50ED50());

              if (v20)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v16 = sub_25A38A6B4(0, v16[2] + 1, 1, v16);
                }
                unint64_t v22 = v16[2];
                unint64_t v21 = v16[3];
                if (v22 >= v21 >> 1) {
                  uint64_t v16 = sub_25A38A6B4((void *)(v21 > 1), v22 + 1, 1, v16);
                }
                v16[2] = v22 + 1;
                unint64_t v23 = &v16[3 * v22];
                v23[4] = v18;
                v23[5] = v17;
                v23[6] = v20;
              }
              else
              {
                swift_bridgeObjectRelease();
              }
              v15 += 2;
              --v13;
            }
            while (v13);

            swift_bridgeObjectRelease_n();
            int64_t v6 = v39;
            unint64_t v4 = v38;
            if (!v16[2])
            {
LABEL_6:
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              if (!v4) {
                goto LABEL_8;
              }
              goto LABEL_7;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            uint64_t v16 = (void *)MEMORY[0x263F8EE78];
            if (!*(void *)(MEMORY[0x263F8EE78] + 16)) {
              goto LABEL_6;
            }
          }
          unint64_t v24 = v4;
          int64_t v25 = v6;
          uint64_t v26 = v16[4];
          uint64_t v27 = v16[5];
          uint64_t v28 = (void *)v16[6];
          swift_bridgeObjectRetain();
          id v29 = v28;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_25A38A6B4(0, v33[2] + 1, 1, v33);
            uint64_t v33 = (void *)result;
          }
          unint64_t v31 = v33[2];
          unint64_t v30 = v33[3];
          if (v31 >= v30 >> 1)
          {
            uint64_t result = (uint64_t)sub_25A38A6B4((void *)(v30 > 1), v31 + 1, 1, v33);
            uint64_t v33 = (void *)result;
          }
          v33[2] = v31 + 1;
          uint64_t v32 = &v33[3 * v31];
          v32[4] = v26;
          v32[5] = v27;
          v32[6] = v29;
          int64_t v6 = v25;
          unint64_t v4 = v24;
          if (!v24) {
            goto LABEL_8;
          }
LABEL_7:
          unint64_t v7 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      int64_t v11 = v9 + 4;
      if (v11 < v36)
      {
        unint64_t v10 = *(void *)(v34 + 8 * v11);
        int64_t v6 = v11;
        if (!v10)
        {
          while (1)
          {
            int64_t v6 = v11 + 1;
            if (__OFADD__(v11, 1)) {
              goto LABEL_42;
            }
            if (v6 >= v36) {
              goto LABEL_40;
            }
            unint64_t v10 = *(void *)(v34 + 8 * v6);
            ++v11;
            if (v10) {
              goto LABEL_22;
            }
          }
        }
        goto LABEL_22;
      }
    }
LABEL_40:
    swift_release();
    return (uint64_t)v33;
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_25A38C908(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38C9FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38CAF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

char *sub_25A38CBE8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38CCD4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 80 * a1 + 32;
    unint64_t v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38CDCC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158B0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38CEDC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 144 * a1 + 32;
    unint64_t v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38CFD4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

char *sub_25A38D0C8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38D1B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415828);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38D2C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38D3CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415878);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38D4D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415858);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38D5E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 32 * a1 + 32;
    unint64_t v7 = a3 + 32 * v5;
    if (v6 >= v7 || v6 + 32 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38D6F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415888);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38D800(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38D8F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38D9F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4157F8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38DB00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38DC0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38DD08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4157C0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A38DE14(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_25A38DFF4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_25A38E014(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for _CSArchitecture(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

void sub_25A38E064(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_25A38E0AC()
{
  return sub_25A385374(&qword_26A415958, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_25A38E0F4()
{
  return sub_25A385374(&qword_26A415960, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_25A38E13C()
{
  return sub_25A385374(&qword_26A415968, type metadata accessor for URLResourceKey);
}

uint64_t sub_25A38E184()
{
  return sub_25A385374(&qword_26A415970, type metadata accessor for URLResourceKey);
}

uint64_t sub_25A38E1CC()
{
  return sub_25A385374(&qword_26A415978, type metadata accessor for URLResourceKey);
}

uint64_t sub_25A38E214()
{
  return sub_25A385374(&qword_26A415980, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t static Task.create<>(file:line:column:function:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  unint64_t v24 = a1;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v17 - 8);
  size_t v19 = (char *)&v25[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = a2;
  v25[1] = a3;
  char v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  char v31 = a9;
  sub_25A38E408((uint64_t)v25, &v32);
  uint64_t v20 = v32;
  uint64_t v21 = sub_25A50F2A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 1, 1, v21);
  unint64_t v22 = (void *)swift_allocObject();
  v22[2] = 0;
  v22[3] = 0;
  v22[4] = a10;
  v22[5] = v20;
  swift_retain();
  uint64_t result = sub_25A38EF00((uint64_t)v19, (uint64_t)&unk_26A4159B8, (uint64_t)v22, a10);
  *unint64_t v24 = v20;
  return result;
}

{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t result;
  uint64_t *v24;
  void v25[2];
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  unint64_t v24 = a1;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v17 - 8);
  size_t v19 = (char *)&v25[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = a2;
  v25[1] = a3;
  char v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  char v31 = a9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  sub_25A38E408((uint64_t)v25, &v32);
  uint64_t v20 = v32;
  uint64_t v21 = sub_25A50F2A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 1, 1, v21);
  unint64_t v22 = (void *)swift_allocObject();
  v22[2] = 0;
  v22[3] = 0;
  v22[4] = a10;
  v22[5] = v20;
  swift_retain();
  uint64_t result = sub_25A38FBAC((uint64_t)v19, (uint64_t)&unk_26A4159C8, (uint64_t)v22);
  *unint64_t v24 = v20;
  return result;
}

uint64_t sub_25A38E408@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v17 = a2;
  type metadata accessor for PromiseFulfillment();
  uint64_t v3 = sub_25A50F260();
  uint64_t v4 = sub_25A50FA40();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 16);
  long long v16 = *(_OWORD *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 48);
  LOBYTE(a1) = *(unsigned char *)(a1 + 56);
  type metadata accessor for FulfillOnceState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v7, 1, 1, v3);
  v19[0] = v8;
  v19[1] = v9;
  char v20 = v10;
  long long v21 = v16;
  uint64_t v22 = v11;
  uint64_t v23 = v15;
  char v24 = a1;
  long long v18 = xmmword_25A511960;
  uint64_t v12 = sub_25A3B275C((uint64_t)v7, v19, 0, 0, (uint64_t *)&v18, 0x6F7270206B736174, 0xEC0000006573696DLL, 0x656C6C69666C7566, 0xE900000000000064);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t *v17 = v12;
  return result;
}

uint64_t sub_25A38E604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for PromiseFulfillment();
  v5[5] = v6;
  v5[6] = *(void *)(v6 - 8);
  v5[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A38E6DC, 0, 0);
}

uint64_t sub_25A38E6DC()
{
  unint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v2;
  void *v2 = v0;
  v2[1] = sub_25A38E7CC;
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 40);
  return MEMORY[0x270FA2318](v3, 0, 0, 0xD000000000000022, 0x800000025A51DB90, sub_25A39232C, v1, v4);
}

uint64_t sub_25A38E7CC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A38E8E4, 0, 0);
}

uint64_t sub_25A38E8E4()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  sub_25A417108(v3, v0[2]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_25A38E97C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_25A3923B4;
  return sub_25A38E604(a1, v4, v5, v6, v7);
}

uint64_t sub_25A38EA3C(uint64_t a1, void *a2)
{
  uint64_t v24 = a1;
  uint64_t v2 = a2[2];
  uint64_t v3 = a2[3];
  uint64_t v4 = a2[4];
  uint64_t v5 = type metadata accessor for PromiseFulfillment();
  uint64_t v23 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  long long v21 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v22 = (char *)v20 - v8;
  v20[1] = sub_25A50F260();
  sub_25A50FA40();
  uint64_t v9 = MEMORY[0x263F8EE60] + 8;
  uint64_t updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult();
  uint64_t v11 = *(void *)(updated - 8);
  uint64_t v12 = MEMORY[0x270FA5388](updated);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  long long v16 = (char *)v20 - v15;
  uint64_t v26 = v2;
  uint64_t v27 = v3;
  uint64_t v28 = v4;
  uint64_t v29 = v24;
  FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_25A392220, (uint64_t)v25, v9);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, updated);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v18 = v22;
    uint64_t v17 = v23;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v22, v14, v5);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v18, v5);
    swift_checkMetadataState();
    sub_25A50F250();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, updated);
}

uint64_t sub_25A38ED10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A38ED64(a1, a2, a3);
}

uint64_t sub_25A38ED3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A38ED64(a1, a2, a3);
}

uint64_t sub_25A38ED64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50F2A0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_25A50F290();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_25A391AF4(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_25A50F220();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_25A38EF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_25A50F2A0();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) != 1)
  {
    sub_25A50F290();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_25A391AF4(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_25A50F220();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  return swift_task_create();
}

uint64_t sub_25A38F22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return MEMORY[0x270FA2498](sub_25A38F250, 0, 0);
}

uint64_t sub_25A38F250()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = swift_task_alloc();
  v0[6] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_25A38F358;
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[2];
  return MEMORY[0x270FA2338](v7, &unk_26A415A98, v3, sub_25A392210, v4, 0, 0, v6);
}

uint64_t sub_25A38F358()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25A38F4A0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_25A38F4A0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A38F550(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  int8x16_t v5 = v1[2];
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_25A38F608;
  *(int8x16_t *)(v4 + 24) = vextq_s8(v5, v5, 8uLL);
  *(void *)(v4 + 16) = a1;
  return MEMORY[0x270FA2498](sub_25A38F250, 0, 0);
}

uint64_t sub_25A38F608()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_25A38F6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v4 = type metadata accessor for PromiseFulfillment();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A38F7E0, 0, 0);
}

uint64_t sub_25A38F7E0()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v2;
  void *v2 = v0;
  v2[1] = sub_25A38F8D0;
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 40);
  return MEMORY[0x270FA2318](v3, 0, 0, 0xD000000000000022, 0x800000025A51DB90, sub_25A392218, v1, v4);
}

uint64_t sub_25A38F8D0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A38F9E8, 0, 0);
}

uint64_t sub_25A38F9E8()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  sub_25A417214(v3, v0[2]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_25A38FA98(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v2 = (void *)type metadata accessor for Task.Promise();
  return sub_25A38EA3C(a1, v2);
}

void sub_25A38FB04()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v0 = type metadata accessor for Task.Promise();
  uint64_t WitnessTable = swift_getWitnessTable();
  PromiseProtocol.cancel<>(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Task+Promise.swift", 124, 2, 46, 31, (uint64_t)"create(file:line:column:function:)", 34, 2, v0, WitnessTable);
}

uint64_t sub_25A38FBAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_25A50F2A0();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_25A50F290();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_25A391AF4(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_25A50F220();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_25A38FD28(char *a1, uint64_t a2)
{
  type metadata accessor for PromiseFulfillment();
  uint64_t v4 = sub_25A50F260();
  uint64_t v5 = sub_25A50FA40();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)&v13 - v7, a1, v5);
  uint64_t v9 = *(void *)(v4 - 8);
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4);
  uint64_t v11 = *(void (**)(char *, uint64_t))(v6 + 8);
  v11(v8, v5);
  if (v10 == 1)
  {
    v11(a1, v5);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(a1, a2, v4);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v4);
  }
  else
  {
    uint64_t result = sub_25A510060();
    __break(1u);
  }
  return result;
}

uint64_t Task.Promise.cancel<A>(file:line:column:function:onInvalidationOf:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17 = *v12;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = *(void *)(a10 + 16);
  *(void *)(v18 + 24) = a11;
  *(void *)(v18 + 32) = a12;
  *(void *)(v18 + 40) = v17;
  *(void *)(v18 + 48) = a1;
  *(void *)(v18 + 56) = a2;
  *(unsigned char *)(v18 + 64) = a3;
  *(void *)(v18 + 72) = a4;
  *(void *)(v18 + 80) = a5;
  *(void *)(v18 + 88) = a6;
  *(void *)(v18 + 96) = a7;
  *(unsigned char *)(v18 + 104) = a8;
  swift_retain();
  ConcurrentInvalidatable.observeInvalidation(_:)((void (*)(long long *))sub_25A390198, v18, a11, a12, &v25);
  uint64_t result = swift_release();
  char v20 = v25;
  if (v25)
  {
    CancelationToken<>.cancel<A>(onInvalidationOf:)(a9, a11, a12);
    return sub_25A3901A8((uint64_t)v20);
  }
  return result;
}

void sub_25A39007C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v10 = a2;
  long long v3 = a3[1];
  v8[0] = *a3;
  v8[1] = v3;
  v9[0] = a3[2];
  *(_OWORD *)((char *)v9 + 9) = *(long long *)((char *)a3 + 41);
  sub_25A50F270();
  sub_25A39210C();
  uint64_t v4 = (void *)swift_allocError();
  sub_25A50E870();
  uint64_t v7 = v4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v5 = type metadata accessor for Task.Promise();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_25A417378(v8, (uint64_t)&v7, v5, WitnessTable);
}

uint64_t sub_25A390160()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 105, 7);
}

void sub_25A390198(uint64_t a1)
{
  sub_25A39007C(a1, *(void *)(v1 + 40), (long long *)(v1 + 48));
}

uint64_t sub_25A3901A8(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_25A3901EC(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char *a5, void *a6)
{
  uint64_t v64 = a5;
  uint64_t v63 = a4;
  uint64_t v62 = a3;
  uint64_t v61 = a2;
  uint64_t v7 = a6[2];
  uint64_t v8 = a6[3];
  uint64_t v9 = a6[4];
  uint64_t v10 = type metadata accessor for PromiseFulfillment();
  uint64_t v54 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v53 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v56 = (char *)&v51 - v13;
  uint64_t v55 = sub_25A50F260();
  uint64_t v14 = sub_25A50FA40();
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  size_t v19 = (char *)&v51 - v18;
  uint64_t v58 = v20;
  uint64_t v60 = v10;
  uint64_t v21 = type metadata accessor for FulfillOnceState.FulfillmentOutcome();
  uint64_t v59 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  char v25 = *(unsigned char *)(a1 + 16);
  char v26 = *(unsigned char *)(a1 + 56);
  long long v77 = *(_OWORD *)a1;
  char v78 = v25;
  long long v79 = *(_OWORD *)(a1 + 24);
  long long v80 = *(_OWORD *)(a1 + 40);
  char v81 = v26;
  uint64_t v72 = v7;
  uint64_t v73 = v8;
  uint64_t v74 = v9;
  uint64_t v75 = v61;
  uint64_t v76 = v62;
  uint64_t v66 = v7;
  uint64_t v67 = v8;
  uint64_t v68 = v9;
  uint64_t v28 = (char *)&v51 - v27;
  uint64_t v69 = v63;
  uint64_t v70 = v64;
  uint64_t v29 = v82;
  FulfillOnceState.fulfill(callsite:makeFulfilledState:ifAlreadyFulfilled:)(&v77, (uint64_t)sub_25A391AA8, (uint64_t)v71, (uint64_t)sub_25A391AD0, (uint64_t)v65);
  if (!v29)
  {
    char v31 = v19;
    uint64_t v32 = v57;
    uint64_t v52 = v17;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v24, v28, v21);
    uint64_t v33 = v58;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v35 = v21;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v24, 1, TupleTypeMetadata2) == 1)
    {
      uint64_t v46 = *(void (**)(char *, uint64_t))(v59 + 8);
      v46(v28, v35);
      v46(v24, v35);
      char v30 = 0;
    }
    else
    {
      LODWORD(v63) = 1;
      uint64_t v64 = v28;
      uint64_t v82 = v21;
      int64_t v36 = &v24[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v37 = v31;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v31, v24, v33);
      uint64_t v38 = v54;
      int64_t v39 = v56;
      uint64_t v40 = v36;
      uint64_t v41 = v37;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v56, v40, v60);
      uint64_t v42 = v52;
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v52, v41, v33);
      uint64_t v43 = v55;
      uint64_t v44 = *(void *)(v55 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v55) == 1)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v60);
        uint64_t v45 = *(void (**)(char *, uint64_t))(v32 + 8);
        v45(v41, v33);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v64, v82);
        v45(v52, v33);
      }
      else
      {
        uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
        uint64_t v62 = v41;
        uint64_t v48 = v60;
        v47(v53, v39, v60);
        uint64_t v49 = v52;
        sub_25A50F250();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v48);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v62, v33);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v64, v82);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v49, v43);
      }
      char v30 = v63;
    }
  }
  return v30 & 1;
}

uint64_t sub_25A390870(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void *), uint64_t a4)
{
  uint64_t v25 = a4;
  int64_t v36 = a3;
  uint64_t v6 = type metadata accessor for PromiseFulfillment();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  char v12 = *((unsigned char *)a2 + 16);
  uint64_t v13 = a2[3];
  uint64_t v22 = a2[4];
  uint64_t v23 = v13;
  uint64_t v14 = a2[5];
  uint64_t v20 = a2[6];
  uint64_t v21 = v14;
  int v19 = *((unsigned __int8 *)a2 + 56);
  uint64_t v18 = a2[8];
  uint64_t v17 = a2[9];
  long long v24 = *((_OWORD *)a2 + 5);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v16 - v8, a1, v6);
  LODWORD(a2) = swift_getEnumCaseMultiPayload();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (a2 <= 1)
  {
    v26[0] = v10;
    v26[1] = v11;
    char v27 = v12;
    uint64_t v28 = v23;
    uint64_t v29 = v22;
    uint64_t v30 = v21;
    uint64_t v31 = v20;
    char v32 = v19;
    uint64_t v33 = v18;
    uint64_t v34 = v17;
    long long v35 = v24;
    return v36(v26);
  }
  return result;
}

uint64_t sub_25A390A3C(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char *a5, void *a6)
{
  return sub_25A3901EC(a1, a2, a3, a4, a5, a6) & 1;
}

double Continuation.init(wrapping:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = v9;
  long long v13 = xmmword_25A511960;
  Continuation.init(file:line:column:function:initializationInfo:failureMode:resume:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Task+Promise.swift", 124, 2, 139, 18, (uint64_t)"init(wrapping:)", 15, 2, (uint64_t)&v14, 0, 0, &v13, (uint64_t)sub_25A390BFC, (uint64_t)v10, a2, a3, a4);
  uint64_t v11 = v15;
  double result = *(double *)&v14;
  *(_OWORD *)a5 = v14;
  *(void *)(a5 + 16) = v11;
  return result;
}

uint64_t sub_25A390B2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Task.Promise();
  uint64_t WitnessTable = swift_getWitnessTable();
  return PromiseProtocol.fulfill(file:line:column:function:with:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Task+Promise.swift", 124, 2, 140, 38, (uint64_t)"init(wrapping:)", 15, 2, a1, v2, WitnessTable);
}

uint64_t sub_25A390BC4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A390BFC(uint64_t a1)
{
  return sub_25A390B2C(a1);
}

double sub_25A390C08@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 1;
  *a1 = xmmword_25A511960;
  return result;
}

uint64_t Continuation.track(task:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  uint64_t v8 = v2[1];
  uint64_t v10 = v2[2];
  uint64_t v11 = sub_25A50F2A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(a2 + 16);
  *(void *)(v12 + 48) = *(void *)(a2 + 32);
  *(void *)(v12 + 56) = v9;
  *(void *)(v12 + 64) = v8;
  *(void *)(v12 + 72) = v10;
  *(void *)(v12 + 80) = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_25A38ED64((uint64_t)v7, (uint64_t)&unk_26A4159D8, v12);
  return swift_release();
}

uint64_t sub_25A390D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = v19;
  v8[7] = v20;
  v8[5] = a8;
  uint64_t v14 = sub_25A510540();
  v8[8] = v14;
  v8[9] = *(void *)(v14 - 8);
  uint64_t v15 = swift_task_alloc();
  v8[10] = v15;
  long long v8[2] = a4;
  v8[3] = a5;
  v8[4] = a6;
  uint64_t v16 = (void *)swift_task_alloc();
  v8[11] = v16;
  *uint64_t v16 = v8;
  v16[1] = sub_25A390ED8;
  return MEMORY[0x270FA1FB8](v15, a7, a8);
}

uint64_t sub_25A390ED8()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A390FD4, 0, 0);
}

uint64_t sub_25A390FD4()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  type metadata accessor for Continuation();
  Continuation.resume(with:file:line:column:function:)(v1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Task+Promise.swift", 124, 2, 146, 24, (uint64_t)"track(task:)", 12, 2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_25A3910AC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t sub_25A3910FC(uint64_t a1)
{
  uint64_t v12 = v1[4];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[7];
  uint64_t v7 = v1[8];
  uint64_t v8 = v1[9];
  uint64_t v9 = v1[10];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_25A38F608;
  return sub_25A390D80(a1, v4, v5, v6, v7, v8, v9, v12);
}

uint64_t Continuation.track<A>(task:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v4;
  uint64_t v12 = v4[1];
  uint64_t v14 = v4[2];
  uint64_t v15 = sub_25A50F2A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = *(void *)(a2 + 16);
  v16[5] = a3;
  v16[6] = a4;
  v16[7] = a1;
  v16[8] = v13;
  v16[9] = v12;
  v16[10] = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_25A38ED64((uint64_t)v11, (uint64_t)&unk_26A4159E8, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_25A391364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = v15;
  v8[8] = v16;
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[9] = *(void *)(v15 - 8);
  v8[10] = swift_task_alloc();
  v8[11] = swift_task_alloc();
  v8[12] = *(void *)(a8 - 8);
  v8[13] = swift_task_alloc();
  v8[14] = sub_25A510540();
  uint64_t v11 = swift_task_alloc();
  v8[15] = v11;
  uint64_t v12 = (void *)swift_task_alloc();
  v8[16] = v12;
  *uint64_t v12 = v8;
  v12[1] = sub_25A391530;
  return MEMORY[0x270FA1FB8](v11, a4, a8);
}

uint64_t sub_25A391530()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A39162C, 0, 0);
}

uint64_t sub_25A39162C()
{
  uint64_t v1 = v0[15];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = v0[10];
    uint64_t v2 = v0[11];
    uint64_t v4 = v0[9];
    uint64_t v5 = v0[7];
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    v6(v2, v1, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    uint64_t v7 = sub_25A5102E0();
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[7];
    if (v7)
    {
      uint64_t v10 = (void *)v7;
      (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[7]);
    }
    else
    {
      uint64_t v10 = (void *)swift_allocError();
      v6(v15, v8, v9);
    }
    uint64_t v16 = v0[11];
    uint64_t v17 = v0[9];
    uint64_t v18 = v0[7];
    v0[2] = v10;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    uint64_t v19 = type metadata accessor for Continuation();
    Continuation.resume(throwing:file:line:column:function:)((uint64_t)(v0 + 2), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Task+Promise.swift", 124, 2, 154, 46, (uint64_t)"track(task:)", 12, 2, v19);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  else
  {
    uint64_t v12 = v0[12];
    uint64_t v11 = v0[13];
    uint64_t v13 = v0[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v11, v1, v13);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    uint64_t v14 = type metadata accessor for Continuation();
    Continuation.resume(returning:file:line:column:function:)(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Task+Promise.swift", 124, 2, 153, 46, (uint64_t)"track(task:)", 12, 2, v14);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_25A391900()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t sub_25A391950(uint64_t a1)
{
  uint64_t v12 = v1[4];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[7];
  uint64_t v7 = v1[8];
  uint64_t v8 = v1[9];
  uint64_t v9 = v1[10];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_25A3923B4;
  return sub_25A391364(a1, v4, v5, v6, v7, v8, v9, v12);
}

uint64_t sub_25A391A44(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t sub_25A391A4C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_25A391A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t type metadata accessor for Task.Promise()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A391AA8()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_25A391AD0(uint64_t a1, uint64_t *a2)
{
  return sub_25A390870(a1, a2, *(uint64_t (**)(void *))(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_25A391AF4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25A391B54(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_25A391C30;
  return v6(a1);
}

uint64_t sub_25A391C30()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_25A391D28(uint64_t a1, int *a2)
{
  *(void *)(v2 + 32) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 40) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_25A391E08;
  return v5(v2 + 16);
}

uint64_t sub_25A391E08()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(_OWORD **)(*v0 + 32);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  _OWORD *v2 = *(_OWORD *)(v1 + 16);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_25A391F1C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A391F54(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_25A3923B4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_26A415A70 + dword_26A415A70);
  return v6(a1, v4);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_25A392054(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_25A3923B4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_26A41A330 + dword_26A41A330);
  return v6(a1, v4);
}

unint64_t sub_25A39210C()
{
  unint64_t result = qword_26A415A88;
  if (!qword_26A415A88)
  {
    sub_25A50F270();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_26A415A88);
  }
  return result;
}

uint64_t sub_25A392164(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_25A3923B4;
  return sub_25A38F6FC(a1, v4, v5);
}

void sub_25A392210()
{
}

uint64_t sub_25A392218(uint64_t a1)
{
  return sub_25A38FA98(a1);
}

uint64_t sub_25A392220(char *a1)
{
  return sub_25A38FD28(a1, *(void *)(v1 + 40));
}

uint64_t sub_25A39222C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A392264(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 24);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_25A3923B4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_26A415AA0 + dword_26A415AA0);
  return v6(a1, v4);
}

uint64_t sub_25A39232C(uint64_t a1)
{
  uint64_t v2 = (void *)type metadata accessor for Task.Promise();
  return sub_25A38EA3C(a1, v2);
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A3923BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    *((void *)&v8 + 1) = type metadata accessor for QueryResolutions.Resolution();
    *(void *)&long long v7 = a1;
    *((void *)&v7 + 1) = a2;
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  return sub_25A4A1838((uint64_t)&v7, a3);
}

void *QueryResolutions.init(_:)@<X0>(void *(*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, void *a2@<X8>)
{
  sub_25A393124(MEMORY[0x263F8EE78]);
  uint64_t v4 = swift_bridgeObjectRelease();
  unint64_t result = a1(&v6, v4);
  *a2 = v6;
  return result;
}

uint64_t QueryResolutions.resolutions.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  *(void *)(inited + 32) = v3;
  swift_bridgeObjectRetain();
  static QueryResolutionsBuilder.buildBlock(_:)(inited, a1);
  swift_setDeallocating();
  return swift_arrayDestroy();
}

uint64_t QueryResolutions.value<A>(for:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v8 = (void (*)(uint64_t, uint64_t))sub_25A39261C(a3, *v4);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    v8(a1, a2);
    return sub_25A393228(v9);
  }
  else
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
    return v12(a4, 1, 1, AssociatedTypeWitness);
  }
}

uint64_t sub_25A39261C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v3 = sub_25A4096EC(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  sub_25A3937CC(*(void *)(a2 + 56) + 32 * v3, (uint64_t)v7);
  type metadata accessor for QueryResolutions.Resolution();
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

unint64_t static QueryResolutions.empty.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_25A393124(MEMORY[0x263F8EE78]);
  *a1 = result;
  return result;
}

Swift::Void __swiftcall QueryResolutions.merge(with:)(PreviewsFoundationOS::QueryResolutions with)
{
  uint64_t v2 = *(void *)with.storage.resolutions._rawValue;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  sub_25A410B30(v2, (uint64_t)sub_25A410B00, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v4);
  *uint64_t v1 = v4;

  swift_bridgeObjectRelease();
}

uint64_t sub_25A392788@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  *(void *)(inited + 32) = v3;
  swift_bridgeObjectRetain();
  static QueryResolutionsBuilder.buildBlock(_:)(inited, a1);
  swift_setDeallocating();
  return swift_arrayDestroy();
}

uint64_t static Query.resolve(using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a1;
  v10[5] = a2;
  swift_retain();
  static Query.resolve(using:)((uint64_t)sub_25A393270, (uint64_t)v10, a3, a5);

  return swift_release();
}

{
  void *v10;
  uint64_t vars8;

  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a1;
  v10[5] = a2;
  swift_retain();
  static Query.resolve(using:)((uint64_t)sub_25A393298, (uint64_t)v10, a3, a5);

  return swift_release();
}

uint64_t static Query.resolve(using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  *a4 = sub_25A393124(MEMORY[0x263F8EE78]);
  return sub_25A3923BC(a1, a2, a3);
}

unint64_t sub_25A3929E0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B18);
  uint64_t v2 = (void *)sub_25A510130();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (char *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 4);
    uint64_t v6 = *((void *)v4 - 3);
    uint64_t v7 = *((void *)v4 - 2);
    unint64_t v8 = *((void *)v4 - 1);
    char v9 = *v4;
    swift_bridgeObjectRetain();
    sub_25A39373C(v7, v8, v9);
    unint64_t result = sub_25A409670(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v12 = v5;
    v12[1] = v6;
    uint64_t v13 = v2[7] + 24 * result;
    *(void *)uint64_t v13 = v7;
    *(void *)(v13 + 8) = v8;
    *(unsigned char *)(v13 + 16) = v9;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4 += 40;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_25A392B24(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AF0);
  uint64_t v2 = sub_25A510130();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_25A393828(v6, (uint64_t)&v15, &qword_26A415AF8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_25A409670(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v11 = (uint64_t *)(v3[6] + 16 * result);
    *char v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_25A3936D4((uint64_t)&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_25A392C68(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AC8);
  uint64_t v2 = (void *)sub_25A510130();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_25A409670(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_25A392D84(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B20);
  uint64_t v2 = (void *)sub_25A510130();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_25A409670(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    BOOL v12 = (void *)(v2[7] + 16 * result);
    *BOOL v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_25A392EA8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B08);
  uint64_t v2 = sub_25A510130();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_25A393828(v6, (uint64_t)&v15, &qword_26A415B10);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_25A409670(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_25A3936C4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_25A392FE0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AE0);
  uint64_t v2 = sub_25A510130();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_25A393828(v6, (uint64_t)v15, &qword_26A415AE8);
    unint64_t result = sub_25A409798((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_25A3936C4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_25A393124(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B28);
    uint64_t v3 = (void *)sub_25A510130();
    for (uint64_t i = a1 + 32; ; i += 40)
    {
      sub_25A393828(i, (uint64_t)&v11, qword_26A415B30);
      uint64_t v5 = v11;
      unint64_t result = sub_25A4096EC(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = (unint64_t)sub_25A3936C4(&v12, (_OWORD *)(v3[7] + 32 * result));
      uint64_t v8 = v3[2];
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

uint64_t sub_25A393228(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_25A393238()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A393270()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_25A393298()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

ValueMetadata *type metadata accessor for QueryResolutions()
{
  return &type metadata for QueryResolutions;
}

ValueMetadata *type metadata accessor for QueryResolutions.ResolutionStorage()
{
  return &type metadata for QueryResolutions.ResolutionStorage;
}

unint64_t sub_25A3932E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AB8);
  uint64_t v3 = (void *)sub_25A510130();
  uint64_t v4 = *(void *)(a1 + 32);
  long long v13 = *(_OWORD *)(a1 + 40);
  unint64_t result = sub_25A4096E8(v4);
  if (v6)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  char v7 = (_OWORD *)(a1 + 64);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    *(_OWORD *)(v3[7] + 16 * result) = v13;
    uint64_t v8 = v3[2];
    BOOL v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      break;
    }
    v3[2] = v10;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v11 = (_OWORD *)((char *)v7 + 24);
    uint64_t v4 = *((void *)v7 - 1);
    long long v13 = *v7;
    swift_retain();
    unint64_t result = sub_25A4096E8(v4);
    char v7 = v11;
    if (v12) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_25A3933E8(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AD8);
  uint64_t v3 = (void *)sub_25A510130();
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_25A409848(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    long long v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_retain();
    unint64_t result = sub_25A409848(v5);
    uint64_t v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_25A3934E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AD0);
    uint64_t v3 = (void *)sub_25A510130();
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = sub_25A4096E8(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

unint64_t sub_25A3935C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AC0);
  uint64_t v3 = (void *)sub_25A510130();
  unsigned int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_25A409AB4(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  char v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v12 = v8 + 2;
    unsigned int v4 = *((_DWORD *)v8 - 2);
    uint64_t v13 = *v8;
    swift_retain();
    unint64_t result = sub_25A409AB4(v4);
    char v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

_OWORD *sub_25A3936C4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_25A3936D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A39373C(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 4) {
    return sub_25A39375C(result, a2);
  }
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_25A39375C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t type metadata accessor for QueryResolutions.Resolution()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3937CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_25A393828(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25A39388C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

void *initializeBufferWithCopyOfBuffer for ConcurrentInvalidationObserverBox(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for ConcurrentInvalidationObserverBox()
{
  return swift_release();
}

void *assignWithCopy for ConcurrentInvalidationObserverBox(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ConcurrentInvalidationObserverBox(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltProductPathResolver.Cache(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltProductPathResolver.Cache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t compare<A, B, C>(_:_:of:_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = a6;
  uint64_t v36 = a5;
  uint64_t v7 = *(void *)(*a2 + *MEMORY[0x263F8EA20] + 8);
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  BOOL v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)v32 - v12;
  uint64_t v16 = *(void *)(v14 + v15);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v11);
  uint64_t v20 = (char *)v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)v32 - v21;
  v32[1] = v23;
  swift_getAtKeyPath();
  uint64_t v34 = a4;
  swift_getAtKeyPath();
  if ((sub_25A50EBE0() & 1) == 0)
  {
    char v28 = sub_25A50EAF0();
LABEL_6:
    uint64_t v30 = *(void (**)(char *, uint64_t))(v17 + 8);
    v30(v20, v16);
    v30(v22, v16);
    return v28 & 1;
  }
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  char v24 = sub_25A50EBE0();
  uint64_t v25 = v33;
  if ((v24 & 1) == 0)
  {
    char v28 = sub_25A50EAF0();
    uint64_t v29 = *(void (**)(char *, uint64_t))(v25 + 8);
    v29(v10, v7);
    v29(v13, v7);
    goto LABEL_6;
  }
  char v26 = *(void (**)(char *, uint64_t))(v33 + 8);
  v26(v10, v7);
  v26(v13, v7);
  char v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v20, v16);
  v27(v22, v16);
  char v28 = 0;
  return v28 & 1;
}

uint64_t compare<A, B, C, D>(_:_:_:of:_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v59 = a8;
  uint64_t v65 = a7;
  uint64_t v66 = a6;
  uint64_t v64 = a2;
  uint64_t v8 = *a3;
  uint64_t v57 = a3;
  uint64_t v60 = *(void *)(v8 + *MEMORY[0x263F8EA20] + 8);
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v58 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v63 = (char *)&v55 - v12;
  uint64_t v15 = *(void *)(v13 + v14);
  uint64_t v62 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v11);
  uint64_t v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v55 - v20;
  uint64_t v24 = *(void *)(v22 + v23);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v19);
  char v28 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v55 - v29;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  if (sub_25A50EBE0())
  {
    uint64_t v31 = v24;
    uint64_t v55 = v28;
    uint64_t v56 = v30;
    char v32 = v63;
    uint64_t v66 = v25;
    swift_getAtKeyPath();
    swift_getAtKeyPath();
    if (sub_25A50EBE0())
    {
      uint64_t v64 = v15;
      uint64_t v65 = v21;
      uint64_t v33 = v32;
      swift_getAtKeyPath();
      uint64_t v34 = v58;
      swift_getAtKeyPath();
      uint64_t v35 = v60;
      char v36 = sub_25A50EBE0();
      uint64_t v37 = v62;
      int64_t v39 = v55;
      uint64_t v38 = v56;
      if (v36)
      {
        uint64_t v40 = *(void (**)(char *, uint64_t))(v61 + 8);
        v40(v34, v35);
        v40(v33, v35);
        uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
        uint64_t v42 = v64;
        v41(v18, v64);
        v41(v65, v42);
        uint64_t v43 = *(void (**)(char *, uint64_t))(v66 + 8);
        v43(v39, v31);
        v43(v38, v31);
        char v44 = 0;
      }
      else
      {
        uint64_t v48 = v56;
        char v44 = sub_25A50EAF0();
        uint64_t v49 = v34;
        uint64_t v50 = *(void (**)(char *, uint64_t))(v61 + 8);
        v50(v49, v35);
        v50(v33, v35);
        uint64_t v51 = *(void (**)(char *, uint64_t))(v37 + 8);
        uint64_t v52 = v64;
        v51(v18, v64);
        v51(v65, v52);
        uint64_t v53 = *(void (**)(char *, uint64_t))(v66 + 8);
        v53(v39, v31);
        v53(v48, v31);
      }
    }
    else
    {
      char v44 = sub_25A50EAF0();
      uint64_t v46 = *(void (**)(char *, uint64_t))(v62 + 8);
      v46(v18, v15);
      v46(v21, v15);
      uint64_t v47 = *(void (**)(char *, uint64_t))(v66 + 8);
      v47(v55, v24);
      v47(v56, v24);
    }
  }
  else
  {
    char v44 = sub_25A50EAF0();
    uint64_t v45 = *(void (**)(char *, uint64_t))(v25 + 8);
    v45(v28, v24);
    v45(v30, v24);
  }
  return v44 & 1;
}

uint64_t compare<A, B, C, D, E>(_:_:_:_:of:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, char *a7, char *a8)
{
  uint64_t v85 = a2;
  uint64_t v86 = a8;
  uint64_t v88 = a7;
  uint64_t v84 = a3;
  uint64_t v8 = *a4;
  char v78 = a4;
  uint64_t v75 = *(void *)(v8 + *MEMORY[0x263F8EA20] + 8);
  uint64_t v79 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v76 = (char *)&v71 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  long long v77 = (char *)&v71 - v11;
  uint64_t v83 = *(void *)(v12 + v13);
  uint64_t v80 = *(void *)(v83 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  char v81 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v71 - v17;
  uint64_t v21 = *(void *)(v19 + v20);
  uint64_t v82 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v16);
  uint64_t v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v27 = (char *)&v71 - v26;
  uint64_t v30 = *(void *)(v28 + v29);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v25);
  uint64_t v34 = (char *)&v71 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  char v36 = (char *)&v71 - v35;
  uint64_t v87 = v37;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  if ((sub_25A50EBE0() & 1) == 0)
  {
    char v57 = sub_25A50EAF0();
    uint64_t v58 = *(void (**)(char *, uint64_t))(v31 + 8);
    v58(v34, v30);
    v58(v36, v30);
    return v57 & 1;
  }
  uint64_t v73 = v34;
  uint64_t v74 = v30;
  uint64_t v71 = v18;
  uint64_t v72 = v31;
  uint64_t v88 = v36;
  uint64_t v38 = v83;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  if (sub_25A50EBE0())
  {
    uint64_t v86 = v24;
    int64_t v39 = v71;
    swift_getAtKeyPath();
    uint64_t v40 = v81;
    swift_getAtKeyPath();
    uint64_t v41 = v38;
    if (sub_25A50EBE0())
    {
      uint64_t v85 = v21;
      uint64_t v42 = v77;
      swift_getAtKeyPath();
      uint64_t v43 = v76;
      char v44 = v42;
      swift_getAtKeyPath();
      uint64_t v45 = v75;
      char v46 = sub_25A50EBE0();
      uint64_t v47 = v43;
      uint64_t v48 = v82;
      uint64_t v49 = v72;
      uint64_t v50 = v79;
      uint64_t v51 = v74;
      if (v46)
      {
        uint64_t v52 = *(void (**)(char *, uint64_t))(v79 + 8);
        v52(v47, v45);
        v52(v44, v45);
        uint64_t v53 = *(void (**)(char *, uint64_t))(v80 + 8);
        v53(v81, v41);
        v53(v71, v41);
        uint64_t v54 = *(void (**)(char *, uint64_t))(v48 + 8);
        uint64_t v55 = v85;
        v54(v86, v85);
        v54(v27, v55);
        uint64_t v56 = *(void (**)(char *, uint64_t))(v49 + 8);
        v56(v73, v51);
        v56(v88, v51);
        char v57 = 0;
      }
      else
      {
        uint64_t v64 = v47;
        char v57 = sub_25A50EAF0();
        uint64_t v65 = *(void (**)(char *, uint64_t))(v50 + 8);
        v65(v64, v45);
        v65(v42, v45);
        uint64_t v66 = *(void (**)(char *, uint64_t))(v80 + 8);
        v66(v81, v41);
        v66(v71, v41);
        uint64_t v67 = *(void (**)(char *, uint64_t))(v48 + 8);
        uint64_t v68 = v85;
        v67(v86, v85);
        v67(v27, v68);
        uint64_t v69 = *(void (**)(char *, uint64_t))(v49 + 8);
        uint64_t v70 = v74;
        v69(v73, v74);
        v69(v88, v70);
      }
      return v57 & 1;
    }
    char v57 = sub_25A50EAF0();
    uint64_t v60 = *(void (**)(char *, uint64_t))(v80 + 8);
    v60(v40, v38);
    v60(v39, v38);
    uint64_t v59 = *(void (**)(char *, uint64_t))(v82 + 8);
    v59(v86, v21);
  }
  else
  {
    char v57 = sub_25A50EAF0();
    uint64_t v59 = *(void (**)(char *, uint64_t))(v82 + 8);
    v59(v24, v21);
  }
  v59(v27, v21);
  uint64_t v61 = *(void (**)(char *, uint64_t))(v72 + 8);
  uint64_t v62 = v74;
  v61(v73, v74);
  v61(v88, v62);
  return v57 & 1;
}

void *mergeEnvironmentVariables(environments:defaultMergeHandlers:additionalMergeHandlers:)(uint64_t a1, Swift::OpaquePointer a2, Swift::OpaquePointer a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    right._rawValue = *(void **)(a1 + 8 * v3 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = v3 + 3;
    do
    {
      uint64_t v7 = swift_bridgeObjectRetain();
      mergeEnvironmentVariables(left:right:defaultMergeHandlers:additionalMergeHandlers:)((Swift::OpaquePointer)v7, &right, a2, a3);
      swift_bridgeObjectRelease();
      --v6;
    }
    while (v6 != 3);
    swift_bridgeObjectRelease();
    return right._rawValue;
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    return (void *)sub_25A392D84(v9);
  }
}

Swift::Void __swiftcall mergeEnvironmentVariables(left:right:defaultMergeHandlers:additionalMergeHandlers:)(Swift::OpaquePointer left, Swift::OpaquePointer *right, Swift::OpaquePointer defaultMergeHandlers, Swift::OpaquePointer additionalMergeHandlers)
{
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = sub_25A39524C(v8);
  uint64_t v10 = swift_bridgeObjectRetain();
  sub_25A3953E4(v10, v9);
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = sub_25A39951C(v11, &qword_26A4158C0, (uint64_t (*)(void *, void *, uint64_t, uint64_t))sub_25A3FFE34, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A39C88C);
  swift_bridgeObjectRelease();
  v98[0] = (uint64_t)v12;
  sub_25A39742C(v98);
  swift_bridgeObjectRelease();
  uint64_t v13 = v98[0];
  v98[0] = (uint64_t)defaultMergeHandlers._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25A396CAC((uint64_t)additionalMergeHandlers._rawValue);
  uint64_t v89 = *(void *)(v13 + 16);
  if (!v89)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  unint64_t v14 = 0;
  uint64_t v15 = *(void *)(v98[0] + 16);
  uint64_t v87 = v15;
  uint64_t v88 = v13 + 32;
  uint64_t v85 = v98[0] + 32;
  uint64_t v91 = right;
  uint64_t v86 = v13;
  rawValue = left._rawValue;
  while (v14 < *(void *)(v13 + 16))
  {
    uint64_t v16 = (uint64_t *)(v88 + 16 * v14);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = *((void *)left._rawValue + 2);
    swift_bridgeObjectRetain();
    uint64_t v94 = v17;
    if (v19)
    {
      swift_bridgeObjectRetain();
      unint64_t v20 = sub_25A409670(v18, v17);
      if (v21)
      {
        uint64_t v22 = (uint64_t *)(*((void *)left._rawValue + 7) + 16 * v20);
        uint64_t v23 = v22[1];
        uint64_t v93 = *v22;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v93 = 0;
        uint64_t v23 = 0;
      }
      swift_bridgeObjectRelease();
      uint64_t v92 = v18;
      if (v15)
      {
LABEL_23:
        uint64_t v44 = v15;
        unint64_t v90 = v14;
        swift_bridgeObjectRetain();
        uint64_t v45 = 0;
        uint64_t v46 = v85;
        uint64_t v47 = v44;
        while (1)
        {
          sub_25A3990F8(v46, (uint64_t)v98);
          uint64_t v48 = v99;
          uint64_t v49 = v100;
          __swift_project_boxed_opaque_existential_1(v98, v99);
          uint64_t v50 = v91->_rawValue;
          uint64_t v51 = *((void *)v91->_rawValue + 2);
          swift_bridgeObjectRetain();
          if (v51)
          {
            swift_bridgeObjectRetain();
            unint64_t v52 = sub_25A409670(v18, v94);
            if (v53)
            {
              uint64_t v54 = (uint64_t *)(v50[7] + 16 * v52);
              uint64_t v55 = *v54;
              uint64_t v51 = v54[1];
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v55 = 0;
              uint64_t v51 = 0;
            }
            uint64_t v56 = v94;
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v55 = 0;
            uint64_t v56 = v94;
          }
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 8))(&v96, v92, v56, v93, v23, v55, v51, v48, v49);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v57 = v97;
          if (v97 != 1) {
            break;
          }
          uint64_t v18 = v92;
LABEL_25:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
          v46 += 40;
          if (!--v47)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            left._rawValue = rawValue;
            uint64_t v13 = v86;
            unint64_t v14 = v90;
            if (!v45) {
              goto LABEL_12;
            }
            goto LABEL_4;
          }
        }
        uint64_t v93 = v96;
        swift_bridgeObjectRelease();
        BOOL v58 = __OFADD__(v45++, 1);
        if (v58)
        {
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          break;
        }
        if (!v57)
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = v92;
          unint64_t v69 = sub_25A409670(v92, v94);
          char v71 = v70;
          swift_bridgeObjectRelease();
          if (v71)
          {
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v73 = (uint64_t)v91->_rawValue;
            uint64_t v95 = v91->_rawValue;
            v91->_rawValue = (void *)0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              sub_25A40ED50();
              uint64_t v73 = (uint64_t)v95;
            }
            swift_bridgeObjectRelease();
            sub_25A397FE4(v69, v73);
            v91->_rawValue = (void *)v73;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v23 = 0;
          goto LABEL_25;
        }
        swift_bridgeObjectRetain();
        sub_25A39915C(v93, v57);
        char v59 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v60 = v91->_rawValue;
        v91->_rawValue = (void *)0x8000000000000000;
        uint64_t v18 = v92;
        unint64_t v62 = sub_25A409670(v92, v94);
        uint64_t v63 = v60[2];
        BOOL v64 = (v61 & 1) == 0;
        uint64_t v65 = v63 + v64;
        if (__OFADD__(v63, v64)) {
          goto LABEL_65;
        }
        char v66 = v61;
        if (v60[3] >= v65)
        {
          if (v59)
          {
            if ((v61 & 1) == 0) {
              goto LABEL_49;
            }
          }
          else
          {
            sub_25A40ED50();
            if ((v66 & 1) == 0) {
              goto LABEL_49;
            }
          }
        }
        else
        {
          sub_25A40B4F0(v65, v59);
          unint64_t v67 = sub_25A409670(v92, v94);
          if ((v66 & 1) != (v68 & 1)) {
            goto LABEL_70;
          }
          unint64_t v62 = v67;
          if ((v66 & 1) == 0)
          {
LABEL_49:
            v60[(v62 >> 6) + 8] |= 1 << v62;
            uint64_t v75 = (uint64_t *)(v60[6] + 16 * v62);
            *uint64_t v75 = v92;
            v75[1] = v94;
            uint64_t v76 = (uint64_t *)(v60[7] + 16 * v62);
            uint64_t *v76 = v93;
            v76[1] = v57;
            uint64_t v77 = v60[2];
            BOOL v58 = __OFADD__(v77, 1);
            uint64_t v78 = v77 + 1;
            if (v58) {
              goto LABEL_66;
            }
            v60[2] = v78;
            swift_bridgeObjectRetain();
            goto LABEL_51;
          }
        }
        uint64_t v74 = (uint64_t *)(v60[7] + 16 * v62);
        swift_bridgeObjectRelease();
        uint64_t *v74 = v93;
        v74[1] = v57;
LABEL_51:
        v91->_rawValue = v60;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v23 = v57;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v93 = 0;
      uint64_t v23 = 0;
      uint64_t v92 = v18;
      if (v15) {
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    if (*((void *)v91->_rawValue + 2)
      && (swift_bridgeObjectRetain(), sub_25A409670(v18, v94), char v25 = v24, swift_bridgeObjectRelease(), (v25 & 1) != 0)
      || !*((void *)left._rawValue + 2))
    {
LABEL_4:
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v26 = sub_25A409670(v18, v94);
      if (v27)
      {
        uint64_t v28 = v18;
        unint64_t v29 = v14;
        uint64_t v30 = (uint64_t *)(*((void *)left._rawValue + 7) + 16 * v26);
        uint64_t v32 = *v30;
        uint64_t v31 = v30[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        char v33 = swift_isUniquelyReferenced_nonNull_native();
        v98[0] = (uint64_t)v91->_rawValue;
        uint64_t v34 = v98[0];
        v91->_rawValue = (void *)0x8000000000000000;
        unint64_t v36 = sub_25A409670(v28, v94);
        uint64_t v37 = *(void *)(v34 + 16);
        BOOL v38 = (v35 & 1) == 0;
        uint64_t v39 = v37 + v38;
        if (__OFADD__(v37, v38)) {
          goto LABEL_68;
        }
        char v40 = v35;
        if (*(void *)(v34 + 24) >= v39)
        {
          if (v33)
          {
            uint64_t v43 = (void *)v98[0];
            if ((v35 & 1) == 0) {
              goto LABEL_57;
            }
          }
          else
          {
            sub_25A40ED50();
            uint64_t v43 = (void *)v98[0];
            if ((v40 & 1) == 0) {
              goto LABEL_57;
            }
          }
        }
        else
        {
          sub_25A40B4F0(v39, v33);
          unint64_t v41 = sub_25A409670(v92, v94);
          if ((v40 & 1) != (v42 & 1)) {
            goto LABEL_70;
          }
          unint64_t v36 = v41;
          uint64_t v43 = (void *)v98[0];
          if ((v40 & 1) == 0)
          {
LABEL_57:
            v43[(v36 >> 6) + 8] |= 1 << v36;
            uint64_t v80 = (uint64_t *)(v43[6] + 16 * v36);
            *uint64_t v80 = v92;
            v80[1] = v94;
            char v81 = (void *)(v43[7] + 16 * v36);
            *char v81 = v32;
            v81[1] = v31;
            uint64_t v82 = v43[2];
            BOOL v58 = __OFADD__(v82, 1);
            uint64_t v83 = v82 + 1;
            if (v58) {
              goto LABEL_69;
            }
            v43[2] = v83;
            swift_bridgeObjectRetain();
            goto LABEL_59;
          }
        }
        uint64_t v79 = (void *)(v43[7] + 16 * v36);
        swift_bridgeObjectRelease();
        *uint64_t v79 = v32;
        v79[1] = v31;
LABEL_59:
        v91->_rawValue = v43;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v13 = v86;
        unint64_t v14 = v29;
        goto LABEL_5;
      }
      swift_bridgeObjectRelease_n();
    }
LABEL_5:
    ++v14;
    uint64_t v15 = v87;
    if (v14 == v89)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  sub_25A510430();
  __break(1u);
  swift_release();
  __break(1u);
}

uint64_t sub_25A39524C(uint64_t a1)
{
  uint64_t result = sub_25A50F470();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_25A432394(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_25A3953E4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_25A432394(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t DYLDEnvironmentVariablePathMergeHandler.merge(key:left:right:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  if (qword_26A415478 != -1) {
    swift_once();
  }
  uint64_t result = sub_25A3961AC(a1, a2, qword_26A415BB8);
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415870);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25A511AC0;
    *(void *)(inited + 32) = a3;
    *(void *)(inited + 40) = a4;
    *(void *)(inited + 48) = a5;
    *(void *)(inited + 56) = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v16 = splitAndDedupeDYLDPathEnvironmentValues(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415878);
    swift_arrayDestroy();
    sub_25A395A30((uint64_t)v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415BC0);
    sub_25A39BDF0();
    sub_25A39BE4C();
    uint64_t v17 = sub_25A50F010();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 0x2000000000000000) != 0) {
      uint64_t v20 = HIBYTE(v19) & 0xF;
    }
    else {
      uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v20)
    {
      *a7 = v17;
      a7[1] = v19;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      *a7 = 0;
      a7[1] = 0;
    }
  }
  else
  {
    *(_OWORD *)a7 = xmmword_25A511AB0;
  }
  return result;
}

Swift::Bool __swiftcall isDYLDParseablePathKey(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (qword_26A415478 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_26A415BB8;

  return sub_25A3961AC(countAndFlagsBits, (uint64_t)object, v3);
}

void *splitAndDedupeDYLDPathEnvironmentValues(_:)(uint64_t a1)
{
  sub_25A396570(MEMORY[0x263F8EE78], &v30);
  uint64_t v26 = *(void *)(a1 + 16);
  if (v26)
  {
    v24[4] = a1;
    uint64_t v25 = a1 + 32;
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v25 + 16 * v3 + 8);
      if (v5) {
        uint64_t v6 = *(void *)(v25 + 16 * v3);
      }
      else {
        uint64_t v6 = 0;
      }
      if (v5) {
        unint64_t v7 = *(void *)(v25 + 16 * v3 + 8);
      }
      else {
        unint64_t v7 = 0xE000000000000000;
      }
      v29[0] = 58;
      v29[1] = 0xE100000000000000;
      MEMORY[0x270FA5388](v2);
      v24[2] = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_25A397498(0x7FFFFFFFFFFFFFFFLL, 1, sub_25A39BEA0, (uint64_t)v24, v6, v7);
      int64_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        unint64_t v27 = v7;
        uint64_t v28 = v4;
        v29[0] = MEMORY[0x263F8EE78];
        sub_25A39A068(0, v9, 0);
        uint64_t v10 = v29[0];
        uint64_t v11 = (uint64_t *)(v8 + 56);
        do
        {
          uint64_t v12 = *(v11 - 3);
          uint64_t v13 = *(v11 - 2);
          uint64_t v15 = *(v11 - 1);
          uint64_t v14 = *v11;
          swift_bridgeObjectRetain();
          uint64_t v16 = MEMORY[0x26113CCD0](v12, v13, v15, v14);
          uint64_t v18 = v17;
          swift_bridgeObjectRelease();
          v29[0] = v10;
          unint64_t v20 = *(void *)(v10 + 16);
          unint64_t v19 = *(void *)(v10 + 24);
          if (v20 >= v19 >> 1)
          {
            sub_25A39A068(v19 > 1, v20 + 1, 1);
            uint64_t v10 = v29[0];
          }
          *(void *)(v10 + 16) = v20 + 1;
          uint64_t v21 = v10 + 16 * v20;
          *(void *)(v21 + 32) = v16;
          *(void *)(v21 + 40) = v18;
          v11 += 4;
          --v9;
        }
        while (v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v4 = v28;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v10 = MEMORY[0x263F8EE78];
      }
      ++v3;
      sub_25A3967CC(v10);
      uint64_t v2 = swift_bridgeObjectRelease();
    }
    while (v3 != v26);
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = sub_25A399028(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_25A395A30(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    sub_25A39A0A8(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415878);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_25A39A0A8(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v11;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_25A39A0A8(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v11;
      }
      v4 += 16;
      *(void *)(v2 + 16) = v6 + 1;
      uint64_t v7 = v2 + 16 * v6;
      *(void *)(v7 + 32) = v9;
      *(void *)(v7 + 40) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_25A395B70(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
    sub_25A39A128(0, v1, 0);
    uint64_t v2 = v10;
    uint64_t v4 = (id *)(a1 + 32);
    do
    {
      id v5 = *v4;
      id v6 = *v4;
      unint64_t v8 = *(void *)(v10 + 16);
      unint64_t v7 = *(void *)(v10 + 24);
      if (v8 >= v7 >> 1) {
        sub_25A39A128(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v10 + 16) = v8 + 1;
      *(void *)(v10 + 8 * v8 + 32) = v5;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t joinDYLDPathEnvironmentPaths<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[1] = a1;
  uint64_t v5 = sub_25A50FDF0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)v18 - v7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415878);
  sub_25A50FF90();
  swift_getWitnessTable();
  sub_25A5100E0();
  swift_getWitnessTable();
  uint64_t v9 = sub_25A50FF90();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v18 - v11;
  MEMORY[0x26113CF80](a2, a3);
  swift_getWitnessTable();
  sub_25A510160();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_getWitnessTable();
  sub_25A39BE4C();
  uint64_t v13 = sub_25A50F010();
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v13;
}

uint64_t sub_25A395EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return DYLDEnvironmentVariablePathMergeHandler.merge(key:left:right:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t InjectLibraryFirstEnvironmentVariableMergeHandler.path.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InjectLibraryFirstEnvironmentVariableMergeHandler.path.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*InjectLibraryFirstEnvironmentVariableMergeHandler.path.modify())()
{
  return nullsub_1;
}

PreviewsFoundationOS::InjectLibraryFirstEnvironmentVariableMergeHandler __swiftcall InjectLibraryFirstEnvironmentVariableMergeHandler.init(path:)(PreviewsFoundationOS::InjectLibraryFirstEnvironmentVariableMergeHandler path)
{
  *uint64_t v1 = path;
  return path;
}

uint64_t InjectLibraryFirstEnvironmentVariableMergeHandler.merge(key:left:right:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = *v7;
  uint64_t v13 = v7[1];
  if (a1 == 0xD000000000000015 && a2 == 0x800000025A51D800 || (uint64_t result = sub_25A510370(), (result & 1) != 0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415870);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 32) = v14;
    *(_OWORD *)(inited + 16) = xmmword_25A511AD0;
    *(void *)(inited + 40) = v13;
    *(void *)(inited + 48) = a3;
    *(void *)(inited + 56) = a4;
    *(void *)(inited + 64) = a5;
    *(void *)(inited + 72) = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = splitAndDedupeDYLDPathEnvironmentValues(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415878);
    swift_arrayDestroy();
    sub_25A395A30((uint64_t)v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415BC0);
    sub_25A39BDF0();
    sub_25A39BE4C();
    uint64_t v18 = sub_25A50F010();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 0x2000000000000000) != 0) {
      uint64_t v21 = HIBYTE(v20) & 0xF;
    }
    else {
      uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v21)
    {
      *a7 = v18;
      a7[1] = v20;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      *a7 = 0;
      a7[1] = 0;
    }
  }
  else
  {
    *(_OWORD *)a7 = xmmword_25A511AB0;
  }
  return result;
}

uint64_t static EnvironmentVariableMergeHandler<>.injectLibraryFirst(path:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_25A3961AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_25A5104E0();
    sub_25A50ED30();
    uint64_t v6 = sub_25A510530();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_25A510370() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_25A510370() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_25A3962E4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  sub_25A5104E0();
  sub_25A510520();
  uint64_t v4 = sub_25A510530();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t splitDYLDPathEnvironmentValue(_:)(uint64_t a1, unint64_t a2)
{
  v8[0] = 58;
  v8[1] = 0xE100000000000000;
  v7[2] = v8;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_25A397498(0x7FFFFFFFFFFFFFFFLL, 1, sub_25A39BEA0, (uint64_t)v7, a1, a2);
  uint64_t v5 = sub_25A396470(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_25A396470(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    sub_25A39A068(0, v1, 0);
    uint64_t v2 = v16;
    uint64_t v4 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v5 = *(v4 - 3);
      uint64_t v6 = *(v4 - 2);
      uint64_t v7 = *(v4 - 1);
      uint64_t v8 = *v4;
      swift_bridgeObjectRetain();
      uint64_t v9 = MEMORY[0x26113CCD0](v5, v6, v7, v8);
      uint64_t v11 = v10;
      swift_bridgeObjectRelease();
      unint64_t v13 = *(void *)(v16 + 16);
      unint64_t v12 = *(void *)(v16 + 24);
      if (v13 >= v12 >> 1) {
        sub_25A39A068(v12 > 1, v13 + 1, 1);
      }
      *(void *)(v16 + 16) = v13 + 1;
      uint64_t v14 = v16 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_25A396570@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a2;
  uint64_t v26 = (void *)MEMORY[0x263F8EE78];
  uint64_t v27 = MEMORY[0x263F8EE88];
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    uint64_t v22 = MEMORY[0x263F8EE88];
    goto LABEL_27;
  }
  uint64_t v4 = 0;
  uint64_t v24 = a1 + 32;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v6 = (uint64_t *)(v24 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    uint64_t v9 = v27;
    if (*(void *)(v27 + 16))
    {
      sub_25A5104E0();
      swift_bridgeObjectRetain();
      sub_25A50ED30();
      uint64_t v10 = sub_25A510530();
      uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v12 = v10 & ~v11;
      if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
      {
        uint64_t v13 = *(void *)(v9 + 48);
        uint64_t v14 = (void *)(v13 + 16 * v12);
        BOOL v15 = *v14 == v8 && v14[1] == v7;
        if (v15 || (sub_25A510370() & 1) != 0)
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        while (1)
        {
          unint64_t v12 = (v12 + 1) & ~v11;
          if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
            break;
          }
          uint64_t v16 = (void *)(v13 + 16 * v12);
          BOOL v17 = *v16 == v8 && v16[1] == v7;
          if (v17 || (sub_25A510370() & 1) != 0) {
            goto LABEL_3;
          }
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    sub_25A432394(&v25, v8, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_25A38A5A4(0, v5[2] + 1, 1, v5);
    }
    unint64_t v19 = v5[2];
    unint64_t v18 = v5[3];
    if (v19 >= v18 >> 1) {
      uint64_t v5 = sub_25A38A5A4((void *)(v18 > 1), v19 + 1, 1, v5);
    }
    v5[2] = v19 + 1;
    unint64_t v20 = &v5[2 * v19];
    v20[4] = v8;
    v20[5] = v7;
    swift_bridgeObjectRelease();
    uint64_t v26 = v5;
LABEL_4:
    ++v4;
  }
  while (v4 != v3);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v22 = v27;
  uint64_t v2 = a2;
LABEL_27:
  void *v2 = v5;
  v2[1] = v22;
  return result;
}

uint64_t sub_25A3967CC(uint64_t result)
{
  uint64_t v26 = *(void *)(result + 16);
  if (!v26) {
    return result;
  }
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t *)(v1 + 1);
  uint64_t v25 = result + 32;
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v26; ++i)
  {
    uint64_t v5 = (uint64_t *)(v25 + 16 * i);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v8 = *v3;
    if (*(void *)(*v3 + 16))
    {
      sub_25A5104E0();
      swift_bridgeObjectRetain();
      sub_25A50ED30();
      uint64_t v9 = sub_25A510530();
      uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v11 = v9 & ~v10;
      uint64_t v12 = v8 + 56;
      if ((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
      {
        uint64_t v13 = *(void *)(v8 + 48);
        uint64_t v14 = (void *)(v13 + 16 * v11);
        BOOL v15 = *v14 == v7 && v14[1] == v6;
        if (v15 || (sub_25A510370() & 1) != 0)
        {
LABEL_3:
          swift_bridgeObjectRelease();
          continue;
        }
        uint64_t v16 = ~v10;
        for (unint64_t j = v11 + 1; ; unint64_t j = v18 + 1)
        {
          uint64_t v18 = j & v16;
          if (((*(void *)(v12 + (((j & v16) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v16)) & 1) == 0) {
            break;
          }
          unint64_t v19 = (void *)(v13 + 16 * v18);
          BOOL v20 = *v19 == v7 && v19[1] == v6;
          if (v20 || (sub_25A510370() & 1) != 0) {
            goto LABEL_3;
          }
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    sub_25A432394(&v27, v7, v6);
    swift_bridgeObjectRelease();
    uint64_t v21 = *v2;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v21 = sub_25A38A5A4(0, v21[2] + 1, 1, v21);
    }
    unint64_t v23 = v21[2];
    unint64_t v22 = v21[3];
    if (v23 >= v22 >> 1) {
      uint64_t v21 = sub_25A38A5A4((void *)(v22 > 1), v23 + 1, 1, v21);
    }
    v21[2] = v23 + 1;
    uint64_t v24 = &v21[2 * v23];
    v24[4] = v7;
    void v24[5] = v6;
    swift_bridgeObjectRelease();
    void *v2 = v21;
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A396A1C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_25A396A28()
{
  uint64_t v0 = sub_25A40815C((uint64_t)&unk_27082B9B0);
  uint64_t result = swift_arrayDestroy();
  qword_26A415BB8 = v0;
  return result;
}

uint64_t RejectTestingLibTemporarily_127569585.merge(key:left:right:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  if (a1 == 0xD000000000000015 && a2 == 0x800000025A51D800 || (uint64_t result = sub_25A510370(), (result & 1) != 0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415870);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25A511AC0;
    *(void *)(inited + 32) = a3;
    *(void *)(inited + 40) = a4;
    *(void *)(inited + 48) = a5;
    *(void *)(inited + 56) = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = splitAndDedupeDYLDPathEnvironmentValues(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415878);
    swift_arrayDestroy();
    uint64_t v15 = sub_25A39BF84((uint64_t)v14);
    swift_bridgeObjectRelease();
    sub_25A395A30(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415BC0);
    sub_25A39BDF0();
    sub_25A39BE4C();
    uint64_t v16 = sub_25A50F010();
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 0x2000000000000000) != 0) {
      uint64_t v19 = HIBYTE(v18) & 0xF;
    }
    else {
      uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v19)
    {
      *a7 = v16;
      a7[1] = v18;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      *a7 = 0;
      a7[1] = 0;
    }
  }
  else
  {
    *(_OWORD *)a7 = xmmword_25A511AB0;
  }
  return result;
}

uint64_t sub_25A396C94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return RejectTestingLibTemporarily_127569585.merge(key:left:right:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_25A396CAC(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_25A38AC48(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415910);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A396E24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_25A38A5A4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A396F78(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_25A38AEB0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[18 * v9 + 4];
  if (a1 + 32 < v10 + 144 * v8 && v10 < a1 + 32 + 144 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A3970D8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_25A38B420(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(sub_25A50E320() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A397288(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = sub_25A38B57C(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for TimingRecord(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39742C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_25A4DEBC8(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_25A399610(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_25A397498(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x263F8EE78];
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_25A39793C(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    unint64_t v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  unint64_t v13 = (void *)MEMORY[0x263F8EE78];
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = sub_25A50EEB0();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = sub_25A50ED60();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = sub_25A50ED60();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = sub_25A50EEE0();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v13 = sub_25A38AB38(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    unint64_t v13 = sub_25A38AB38((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  v13[2] = v27 + 1;
  uint64_t v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = sub_25A50ED60();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = sub_25A50EEE0();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v13 = sub_25A38AB38(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      unint64_t v13 = sub_25A38AB38((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    v13[2] = v39 + 1;
    char v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_25A510050();
  __break(1u);
LABEL_42:
  uint64_t result = sub_25A510050();
  __break(1u);
  return result;
}

uint64_t sub_25A39793C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = sub_25A50EEE0();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_25A38AB38(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_25A38AB38((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    char v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = sub_25A510050();
  __break(1u);
  return result;
}

unint64_t sub_25A397A98(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25A50FCA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_25A5104E0();
        swift_bridgeObjectRetain();
        sub_25A50ED30();
        uint64_t v10 = sub_25A510530();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          unint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = v15 + 24 * v3;
          unint64_t v17 = (long long *)(v15 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v16 >= (unint64_t)v17 + 24 || (v18 = v3 == v6, int64_t v3 = v6, !v18))
          {
            long long v9 = *v17;
            *(void *)(v16 + 16) = *((void *)v17 + 2);
            *(_OWORD *)unint64_t v16 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    char v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    char v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *char v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25A397C90(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25A50FCA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_25A5104E0();
        sub_25A510520();
        uint64_t result = sub_25A510530();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8) {
            goto LABEL_5;
          }
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          uint64_t v10 = *(void *)(a2 + 48);
          unint64_t v11 = (void *)(v10 + 8 * v3);
          uint64_t v12 = (void *)(v10 + 8 * v6);
          if (v3 != v6 || v11 >= v12 + 1) {
            *unint64_t v11 = *v12;
          }
          uint64_t v13 = *(void *)(a2 + 56);
          unint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v14 >= v15 + 1))
          {
            *unint64_t v14 = *v15;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *unint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25A397E4C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25A50FCA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(a2 + 48);
        unint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t result = sub_25A5104D0();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1) {
              *uint64_t v15 = *v11;
            }
            uint64_t v16 = *(void *)(a2 + 56);
            uint64_t v17 = (_OWORD *)(v16 + 32 * v3);
            uint64_t v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 2))
            {
              long long v9 = v18[1];
              _OWORD *v17 = *v18;
              v17[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25A397FE4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25A50FCA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_25A5104E0();
        swift_bridgeObjectRetain();
        sub_25A50ED30();
        uint64_t v9 = sub_25A510530();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25A3981BC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25A50FCA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        sub_25A5104E0();
        sub_25A510520();
        uint64_t result = sub_25A510530();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v9 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v10 = *(void *)(a2 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v3);
        unint64_t v12 = (void *)(v10 + 8 * v6);
        if (v3 != v6 || v11 >= v12 + 1) {
          *uint64_t v11 = *v12;
        }
        uint64_t v13 = *(void *)(a2 + 56);
        uint64_t result = v13 + 32 * v3;
        if (v3 < (uint64_t)v6 || result >= v13 + 32 * v6 + 32)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          BOOL v14 = v3 == v6;
          int64_t v3 = v6;
          if (v14) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_19;
        }
      }
      if (v9 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v9) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v15 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v16 = *v15;
    uint64_t v17 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v15 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v17 = *v15;
    uint64_t v16 = (-1 << result) - 1;
  }
  *uint64_t v15 = v17 & v16;
  uint64_t v18 = *(void *)(a2 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v20;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25A3983A0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25A50FCA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_25A5104E0();
        sub_25A510520();
        uint64_t result = sub_25A510530();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8) {
            goto LABEL_5;
          }
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          uint64_t v10 = *(void *)(a2 + 48);
          uint64_t v11 = (void *)(v10 + 8 * v3);
          unint64_t v12 = (void *)(v10 + 8 * v6);
          if (v3 != v6 || v11 >= v12 + 1) {
            *uint64_t v11 = *v12;
          }
          uint64_t v13 = *(void *)(a2 + 56);
          BOOL v14 = (void *)(v13 + 8 * v3);
          uint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v14 >= v15 + 1))
          {
            *BOOL v14 = *v15;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25A398560(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25A50FCA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_25A39C794(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        uint64_t v10 = sub_25A50FCD0();
        uint64_t result = sub_25A39C7F0((uint64_t)v28);
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            uint64_t v16 = (long long *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              long long v17 = *v16;
              long long v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            BOOL v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              long long v9 = v21[1];
              _OWORD *v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25A39872C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25A50FCA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_25A5104E0();
        sub_25A5104F0();
        uint64_t result = sub_25A510530();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8) {
            goto LABEL_5;
          }
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          uint64_t v10 = *(void *)(a2 + 48);
          unint64_t v11 = (unsigned char *)(v10 + v3);
          unint64_t v12 = (unsigned char *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1) {
            *unint64_t v11 = *v12;
          }
          uint64_t v13 = *(void *)(a2 + 56);
          uint64_t v14 = (void *)(v13 + 8 * v3);
          unint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v14 >= v15 + 1))
          {
            *uint64_t v14 = *v15;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25A3988E8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25A50FCA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        sub_25A5104E0();
        swift_bridgeObjectRetain();
        sub_25A50ED30();
        uint64_t v9 = sub_25A510530();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *unint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(sub_25A50E320() - 8) + 72);
        int64_t v16 = v15 * v3;
        uint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    BOOL v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  uint64_t *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25A398AF8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25A50FCA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_25A5104E0();
        sub_25A5104F0();
        uint64_t result = sub_25A510530();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8) {
            goto LABEL_5;
          }
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          uint64_t v10 = *(void *)(a2 + 48);
          uint64_t v11 = (void *)(v10 + 8 * v3);
          unint64_t v12 = (void *)(v10 + 8 * v6);
          if (v3 != v6 || v11 >= v12 + 1) {
            *uint64_t v11 = *v12;
          }
          uint64_t v13 = *(void *)(a2 + 56);
          uint64_t v14 = (void *)(v13 + 8 * v3);
          uint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v14 >= v15 + 1))
          {
            *uint64_t v14 = *v15;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *int64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25A398CB4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25A50FCA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_25A5104E0();
        swift_bridgeObjectRetain();
        sub_25A50ED30();
        uint64_t v10 = sub_25A510530();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          int64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *int64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25A398E8C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25A50FCA0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (_DWORD *)(v9 + 4 * v6);
        uint64_t result = MEMORY[0x26113E4C0](*(void *)(a2 + 40), *v10, 4);
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (_DWORD *)(v9 + 4 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            int64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *int64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *sub_25A399028(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158C0);
  int64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  uint64_t v3[3] = 2 * (v5 >> 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_25A3FFCF8(&v8, v3 + 4, v1, a1);
  swift_release();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t sub_25A3990F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_25A39915C(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *sub_25A399170(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C50);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  uint64_t v3[3] = 2 * (v5 >> 3);
  uint64_t v6 = sub_25A400940(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_25A39C550();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

void *sub_25A399258(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C38);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  uint64_t v3[3] = 2 * (v5 >> 3);
  uint64_t v6 = sub_25A400B3C(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_25A39C550();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

void *sub_25A399340(uint64_t a1)
{
  return sub_25A39951C(a1, &qword_26A415C40, (uint64_t (*)(void *, void *, uint64_t, uint64_t))sub_25A400CD0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A39C550);
}

uint64_t sub_25A399374(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158C0);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      _OWORD v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

void *sub_25A3994E8(uint64_t a1)
{
  return sub_25A39951C(a1, &qword_26A415BE0, (uint64_t (*)(void *, void *, uint64_t, uint64_t))sub_25A400ED4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A39C550);
}

void *sub_25A39951C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void *, void *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = (void *)swift_allocObject();
  int64_t v9 = _swift_stdlib_malloc_size(v8);
  uint64_t v10 = v9 - 32;
  if (v9 < 32) {
    uint64_t v10 = v9 - 17;
  }
  void v8[2] = v4;
  v8[3] = 2 * (v10 >> 4);
  uint64_t v11 = a3(v18, v8 + 4, v4, a1);
  uint64_t v12 = v18[0];
  uint64_t v13 = v18[1];
  uint64_t v14 = v18[2];
  uint64_t v15 = v18[3];
  uint64_t v16 = v18[4];
  swift_bridgeObjectRetain();
  a4(v12, v13, v14, v15, v16);
  if (v11 != v4)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v8;
}

uint64_t sub_25A399610(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_25A510250();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_25A399CFC(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  uint64_t v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_118:
      uint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_25A399DCC((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_25A4DEBB4((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_25A50F130();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v106 = v3;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = sub_25A510370();
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ sub_25A510370()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      uint64_t v22 = v20 + 1;
      uint64_t v9 = v20;
      uint64_t v20 = v22;
    }
    while (v22 < v3);
    uint64_t v20 = v22;
LABEL_36:
    uint64_t v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        uint64_t v27 = v20;
        uint64_t v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      uint64_t v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_25A4DE9FC(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_25A4DE9FC((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      uint64_t v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        unint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        char v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        unint64_t v89 = v44;
        unint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_25A399DCC((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        uint64_t v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    uint64_t v32 = v3;
  }
  else {
    uint64_t v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        uint64_t v37 = v13;
        unint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_25A510370() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)unint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      uint64_t v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  uint64_t result = sub_25A510050();
  __break(1u);
  return result;
}

uint64_t sub_25A399CFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    uint64_t result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (uint64_t result = sub_25A510370(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_25A399DCC(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      uint64_t v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          uint64_t v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (sub_25A510370() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)uint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            }
            uint64_t v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (sub_25A510370() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      uint64_t v27 = v7;
    }
LABEL_50:
    sub_25A4DEAF8((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39A068(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39A288(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_25A39A088(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39A3F4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_25A39A0A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39A554(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25A39A0C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39A6E0(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25A39A0E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39A884(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25A39A108(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39AA10(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_25A39A128(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39AD24(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25A39A148(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39B500(a1, a2, a3, (void *)*v3, &qword_26A415C10, &qword_26A415C18);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25A39A178(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39AEB0(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25A39A198(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39B048(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25A39A1B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39B1EC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_25A39A1D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39B364(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25A39A1F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39B500(a1, a2, a3, (void *)*v3, &qword_26A415890, &qword_26A415898);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25A39A228(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39B68C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25A39A248(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39B9C0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_25A39A268(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25A39BB2C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25A39A288(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39A3F4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C30);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39A554(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415870);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415878);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39A6E0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415BF0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415BF8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39A884(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C68);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C70);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39AA10(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158D0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39AB98(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C40);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C48);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39AD24(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415830);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39AEB0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415850);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 4;
  unint64_t v13 = a4 + 4;
  size_t v14 = 5 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415858);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39B048(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C00);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 80 * v8) {
      memmove(v10 + 4, a4 + 4, 80 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 80 * v8 || v12 >= v13 + 80 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C08);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39B1EC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158F8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 80 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39B364(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C20);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = v10 + 4;
  unint64_t v13 = a4 + 4;
  size_t v14 = 3 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C28);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39B500(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 1;
    }
    v13[2] = v11;
    uint64_t v13[3] = 2 * (v15 >> 5);
  }
  else
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v16 = v13 + 4;
  uint64_t v17 = a4 + 4;
  size_t v18 = 4 * v11;
  if (a1)
  {
    if (v13 != a4 || v16 >= &v17[v18]) {
      memmove(v13 + 4, a4 + 4, v18 * 8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= &v16[v18] || v16 >= &v17[v18])
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39B68C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C58);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C60);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39B834(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415BE0);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415BE8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39B9C0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415BD8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39BB2C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4157C8);
  uint64_t v10 = *(void *)(type metadata accessor for IOPowerSource.Observer() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  uint64_t v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for IOPowerSource.Observer() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  size_t v18 = (char *)v13 + v17;
  int v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39BD6C(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_25A510370() & 1;
  }
}

BOOL sub_25A39BDC4(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

uint64_t sub_25A39BDD4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = a1[1];
  if (result)
  {
    *a2 = *a1;
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_25A39BDF0()
{
  unint64_t result = qword_26A415BC8;
  if (!qword_26A415BC8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415BC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A415BC8);
  }
  return result;
}

unint64_t sub_25A39BE4C()
{
  unint64_t result = qword_26A415BD0;
  if (!qword_26A415BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A415BD0);
  }
  return result;
}

uint64_t sub_25A39BEA0(void *a1)
{
  return sub_25A39BEBC(a1) & 1;
}

uint64_t sub_25A39BEBC(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return sub_25A510370() & 1;
  }
}

uint64_t (*sub_25A39BF14(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))()
{
  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = result;
    int64_t v7 = (void *)(a4 + 16 * a2);
    uint64_t v8 = v7[1];
    *(void *)unint64_t v6 = *v7;
    *((void *)v6 + 1) = v8;
    swift_bridgeObjectRetain();
    return destroy for InjectLibraryFirstEnvironmentVariableMergeHandler;
  }
  return result;
}

uint64_t destroy for InjectLibraryFirstEnvironmentVariableMergeHandler()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_25A39BF84(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v2 = 0;
  uint64_t v3 = result + 40;
  uint64_t v4 = -(uint64_t)v1;
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v14 = result + 40;
  unint64_t v15 = *(void *)(result + 16);
  do
  {
    if (v2 <= v1) {
      unint64_t v6 = v1;
    }
    else {
      unint64_t v6 = v2;
    }
    uint64_t v7 = -(uint64_t)v6;
    for (uint64_t i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v10 = *(i - 1);
      uint64_t v9 = *i;
      sub_25A39BE4C();
      swift_bridgeObjectRetain();
      if ((sub_25A50FB90() & 1) == 0) {
        break;
      }
      unint64_t result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1) {
        return v5;
      }
    }
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      unint64_t result = sub_25A39A068(0, *(void *)(v5 + 16) + 1, 1);
    }
    unint64_t v12 = *(void *)(v5 + 16);
    unint64_t v11 = *(void *)(v5 + 24);
    if (v12 >= v11 >> 1) {
      unint64_t result = sub_25A39A068(v11 > 1, v12 + 1, 1);
    }
    *(void *)(v5 + 16) = v12 + 1;
    uint64_t v13 = v5 + 16 * v12;
    *(void *)(v13 + 32) = v10;
    *(void *)(v13 + 40) = v9;
    uint64_t v3 = v14;
    unint64_t v1 = v15;
  }
  while (v4 + v2);
  return v5;
}

unint64_t destroy for EnvironmentVariableMergeResult(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if ((v2 + 1) <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s20PreviewsFoundationOS30EnvironmentVariableMergeResultOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if ((v4 + 1) > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for EnvironmentVariableMergeResult(void *a1, void *a2)
{
  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = a1[1];
  }
  unsigned int v6 = v5 + 1;
  if (a2[1] < 0xFFFFFFFFuLL) {
    uint64_t v4 = a2[1];
  }
  unsigned int v7 = v4 + 1;
  if (v6 > 1)
  {
    if (v7 <= 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_12:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v7 > 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EnvironmentVariableMergeResult(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if ((v5 + 1) > 1) {
    goto LABEL_9;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  LODWORD(v7) = -1;
  if (v6 < 0xFFFFFFFF) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if ((v7 + 1) > 1)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentVariableMergeResult(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) < 2) {
    LODWORD(v3) = 0;
  }
  if (v3 >= 2) {
    return (v3 - 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for EnvironmentVariableMergeResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_25A39C380(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  if ((v1 + 1) >= 2) {
    return v1;
  }
  else {
    return 0;
  }
}

void *sub_25A39C3A0(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *unint64_t result = 0;
    result[1] = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentVariableMergeResult()
{
  return &type metadata for EnvironmentVariableMergeResult;
}

uint64_t dispatch thunk of EnvironmentVariableMergeHandler.merge(key:left:right:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8))();
}

ValueMetadata *type metadata accessor for DYLDEnvironmentVariablePathMergeHandler()
{
  return &type metadata for DYLDEnvironmentVariablePathMergeHandler;
}

void *initializeBufferWithCopyOfBuffer for InjectLibraryFirstEnvironmentVariableMergeHandler(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for InjectLibraryFirstEnvironmentVariableMergeHandler(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for InjectLibraryFirstEnvironmentVariableMergeHandler(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InjectLibraryFirstEnvironmentVariableMergeHandler(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InjectLibraryFirstEnvironmentVariableMergeHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InjectLibraryFirstEnvironmentVariableMergeHandler()
{
  return &type metadata for InjectLibraryFirstEnvironmentVariableMergeHandler;
}

ValueMetadata *type metadata accessor for RejectTestingLibTemporarily_127569585()
{
  return &type metadata for RejectTestingLibTemporarily_127569585;
}

uint64_t sub_25A39C550()
{
  return swift_release();
}

uint64_t sub_25A39C558(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_25A50F470();
  uint64_t v8 = result;
  if (v2)
  {
    unint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_25A432394(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

void *sub_25A39C5F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = *(void **)v4;
  int64_t v8 = *(void *)(*(void *)v4 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v9 > v7[3] >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      uint64_t result = sub_25A38A5A4(result, v13, 1, v7);
      uint64_t v7 = result;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6) {
    goto LABEL_25;
  }
  if (v6 < 0) {
    goto LABEL_27;
  }
  unint64_t v15 = (unint64_t)&v7[2 * v14 + 4];
  unint64_t v16 = a2 + 16 * a3;
  if (v16 < v15 + 16 * v6 && v15 < v16 + 16 * v6) {
    goto LABEL_27;
  }
  uint64_t result = (void *)swift_arrayInitWithCopy();
  if (!v6)
  {
LABEL_22:
    *(void *)uint64_t v4 = v7;
    return result;
  }
  uint64_t v18 = v7[2];
  BOOL v19 = __OFADD__(v18, v6);
  uint64_t v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = (void *)sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A39C794(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_25A39C7F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_25A39C844()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A39C87C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t static Future.completed(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  v11[0] = a2;
  v11[1] = a3;
  char v12 = a4;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  uint64_t v15 = a7;
  uint64_t v16 = a8;
  char v17 = a9;
  return sub_25A39C8D8(v11, a10);
}

uint64_t sub_25A39C8D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v17 = a2;
  uint64_t v4 = *(void *)(v2 + 80);
  uint64_t v18 = type metadata accessor for FutureTermination();
  uint64_t v5 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v7 = (void *)((char *)&v16 - v6);
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  char v10 = *((unsigned char *)a1 + 16);
  long long v16 = *(_OWORD *)(a1 + 3);
  uint64_t v12 = a1[5];
  uint64_t v11 = a1[6];
  char v13 = *((unsigned char *)a1 + 56);
  type metadata accessor for ConstantFuture();
  *(void *)&long long v19 = v8;
  *((void *)&v19 + 1) = v9;
  char v20 = v10;
  long long v21 = v16;
  uint64_t v22 = v12;
  uint64_t v23 = v11;
  char v24 = v13;
  static FutureTermination.completed(_:)(v17, v4, v7);
  swift_allocObject();
  uint64_t v14 = sub_25A39EF28(&v19, (uint64_t)v7);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v18);
  return v14;
}

uint64_t static Future.succeeded(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  return sub_25A39EF9C(a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t static Future.failed(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, void *a10)
{
  return sub_25A39F124(a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t static Future.canceled(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v22 = a7;
  uint64_t v23 = a8;
  uint64_t v14 = type metadata accessor for FutureTermination();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v22 - v16;
  type metadata accessor for ConstantFuture();
  *(void *)&long long v24 = a2;
  *((void *)&v24 + 1) = a3;
  char v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v19 = v22;
  uint64_t v18 = v23;
  uint64_t v28 = v22;
  uint64_t v29 = v23;
  char v30 = a9;
  *(void *)uint64_t v17 = a2;
  *((void *)v17 + 1) = a3;
  v17[16] = a4;
  *((void *)v17 + 3) = a5;
  *((void *)v17 + 4) = a6;
  *((void *)v17 + 5) = v19;
  *((void *)v17 + 6) = v18;
  v17[56] = a9;
  swift_storeEnumTagMultiPayload();
  swift_allocObject();
  uint64_t v20 = sub_25A39EF28(&v24, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return v20;
}

uint64_t static Future.unreachable(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t (*a10)(void))
{
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v31 = a10;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v34 = sub_25A510540();
  uint64_t v15 = *(void *)(v34 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v34);
  uint64_t v18 = (uint64_t *)((char *)&v30 - v17);
  uint64_t v19 = a10(v16);
  uint64_t v30 = v20;
  uint64_t v31 = (uint64_t (*)(void))v19;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  char v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v21 = a6;
  uint64_t v23 = v32;
  uint64_t v22 = v33;
  uint64_t v40 = v32;
  uint64_t v41 = v33;
  char v42 = a9;
  sub_25A403498();
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  char v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = v21;
  uint64_t v40 = v23;
  uint64_t v41 = v22;
  char v42 = a9;
  sub_25A39F29C();
  uint64_t v24 = swift_allocError();
  uint64_t v25 = v30;
  void *v26 = v31;
  v26[1] = v25;
  void v26[2] = 0;
  v26[3] = 0;
  *uint64_t v18 = v24;
  uint64_t v27 = v34;
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = sub_25A39C8D8(&v35, (uint64_t)v18);
  (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v18, v27);
  return v28;
}

uint64_t static Future.completed(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v23 = a6;
  uint64_t v24 = a11;
  v22[0] = a5;
  v22[1] = a10;
  uint64_t v15 = *(void *)(v11 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v16 = sub_25A510540();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v22 - v18;
  v30[0] = a2;
  v30[1] = a3;
  char v31 = a4;
  uint64_t v32 = v22[0];
  uint64_t v33 = v23;
  uint64_t v34 = v25;
  uint64_t v35 = v26;
  char v36 = a9;
  uint64_t v27 = v15;
  uint64_t v28 = a10;
  uint64_t v29 = a11;
  sub_25A39CF80((void (*)(unsigned char *))sub_25A39F2F0, (uint64_t)v22 - v18);
  uint64_t v20 = sub_25A39C8D8(v30, (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  return v20;
}

uint64_t sub_25A39CF48(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = a1();
  if (v4) {
    *a4 = v4;
  }
  return result;
}

uint64_t sub_25A39CF80@<X0>(void (*a1)(unsigned char *)@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_25A510540();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t static Future<A>.succeeded(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  char v13 = a4;
  uint64_t v14 = a5;
  uint64_t v15 = a6;
  uint64_t v16 = a7;
  uint64_t v17 = a8;
  char v18 = a9;
  memset(v11, 0, 58);
  __swift_instantiateConcreteTypeFromMangledName(qword_26A415C80);
  swift_allocObject();
  uint64_t v9 = sub_25A39D1C0(&v12);
  swift_retain();
  sub_25A39DAE0((uint64_t)v11);
  swift_release();
  return v9;
}

uint64_t sub_25A39D1C0(_OWORD *a1)
{
  long long v2 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = a1[2];
  *(_OWORD *)(v1 + 57) = *(_OWORD *)((char *)a1 + 41);
  *(void *)(v1 + 80) = mach_absolute_time();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DB0);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 100) = 0;
  *(void *)(v3 + 16) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 81) = 0u;
  *(void *)(v1 + 88) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DB8);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  uint64_t v5 = (os_unfair_lock_s *)(v4 + 24);
  *(void *)(v4 + 16) = 0;
  *(void *)(v1 + 96) = v4;
  uint64_t v8 = v1;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_25A39F5A4(&v7);
  os_unfair_lock_unlock(v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_25A39D318(_OWORD *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D10);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v6 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v6;
  *(_OWORD *)(v1 + 48) = a1[2];
  *(_OWORD *)(v1 + 57) = *(_OWORD *)((char *)a1 + 41);
  *(void *)(v1 + 80) = mach_absolute_time();
  *uint64_t v5 = MEMORY[0x263F8EE78];
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D28);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_25A393828((uint64_t)v5, v7 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v7 + 16), &qword_26A415D10);
  sub_25A39F3D4((uint64_t)v5);
  *(void *)(v1 + 88) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D30);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 24) = 0;
  uint64_t v9 = (os_unfair_lock_s *)(v8 + 24);
  *(void *)(v8 + 16) = 0;
  *(void *)(v1 + 96) = v8;
  uint64_t v15 = type metadata accessor for CrashReport(0);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v17 = v1;
  uint64_t v13 = KeyPath;
  uint64_t v14 = &v17;
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v9);
  sub_25A39F5A4(&v16);
  os_unfair_lock_unlock(v9);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_25A39D550(_OWORD *a1)
{
  long long v2 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = a1[2];
  *(_OWORD *)(v1 + 57) = *(_OWORD *)((char *)a1 + 41);
  *(void *)(v1 + 80) = mach_absolute_time();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D48);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 100) = 0;
  *(void *)(v3 + 16) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 81) = 0u;
  *(void *)(v1 + 88) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D50);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  uint64_t v5 = (os_unfair_lock_s *)(v4 + 24);
  *(void *)(v4 + 16) = 0;
  *(void *)(v1 + 96) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D40);
  uint64_t v8 = v1;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_25A39F5A4(&v7);
  os_unfair_lock_unlock(v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_25A39D6A8(_OWORD *a1)
{
  long long v2 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = a1[2];
  *(_OWORD *)(v1 + 57) = *(_OWORD *)((char *)a1 + 41);
  *(void *)(v1 + 80) = mach_absolute_time();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D98);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 100) = 0;
  *(void *)(v3 + 16) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 81) = 0u;
  *(void *)(v1 + 88) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DA0);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  uint64_t v5 = (os_unfair_lock_s *)(v4 + 24);
  *(void *)(v4 + 16) = 0;
  *(void *)(v1 + 96) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415878);
  uint64_t v8 = v1;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_25A39F5A4(&v7);
  os_unfair_lock_unlock(v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_25A39D800(_OWORD *a1)
{
  long long v2 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = a1[2];
  *(_OWORD *)(v1 + 57) = *(_OWORD *)((char *)a1 + 41);
  *(void *)(v1 + 80) = mach_absolute_time();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D68);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 100) = 0;
  *(void *)(v3 + 16) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 81) = 0u;
  *(void *)(v1 + 88) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D70);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  uint64_t v5 = (os_unfair_lock_s *)(v4 + 24);
  *(void *)(v4 + 16) = 0;
  *(void *)(v1 + 96) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D60);
  uint64_t v8 = v1;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_25A39F5A4(&v7);
  os_unfair_lock_unlock(v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_25A39D958(_OWORD *a1)
{
  long long v2 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = a1[2];
  *(_OWORD *)(v1 + 57) = *(_OWORD *)((char *)a1 + 41);
  *(void *)(v1 + 80) = mach_absolute_time();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D80);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 100) = 0;
  *(void *)(v3 + 16) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 81) = 0u;
  *(void *)(v1 + 88) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D88);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  uint64_t v5 = (os_unfair_lock_s *)(v4 + 24);
  *(void *)(v4 + 16) = 0;
  *(void *)(v1 + 96) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415828);
  uint64_t v8 = v1;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_25A39F5A4(&v7);
  os_unfair_lock_unlock(v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_25A39DAB0()
{
  uint64_t v0 = Future.deinit();

  return MEMORY[0x270FA0228](v0, 104, 7);
}

uint64_t sub_25A39DAE0(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_25A39F4F8(a1, (uint64_t)v26, &qword_26A415DA8);
  mach_absolute_time();
  uint64_t v3 = *(void *)(v1 + 88);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 100));
  sub_25A39F55C((uint64_t *)(v3 + 16), v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 100));
  uint64_t v4 = v22[0];
  uint64_t v5 = swift_release();
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      uint64_t v18 = v2;
      uint64_t v21 = v26[0];
      uint64_t v20 = v26[1];
      uint64_t v7 = v26[3];
      uint64_t v19 = v26[2];
      uint64_t v9 = v26[4];
      uint64_t v8 = v26[5];
      uint64_t v10 = v26[6];
      char v11 = v27;
      char v12 = v28;
      swift_bridgeObjectRetain();
      uint64_t v13 = v4 + 40;
      do
      {
        uint64_t v14 = *(void (**)(void *))(v13 - 8);
        v22[0] = v21;
        v22[1] = v20;
        void v22[2] = v19;
        v22[3] = v7;
        v22[4] = v9;
        v22[5] = v8;
        v22[6] = v10;
        char v23 = v11;
        char v24 = v12;
        swift_retain();
        v14(v22);
        swift_release();
        v13 += 16;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      uint64_t v2 = v18;
    }
    uint64_t v5 = swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(os_unfair_lock_s **)(v2 + 96);
  MEMORY[0x270FA5388](v5);
  uint64_t KeyPath = swift_getKeyPath();
  v22[0] = 0;
  MEMORY[0x270FA5388](KeyPath);
  swift_retain();
  os_unfair_lock_lock(v15 + 6);
  sub_25A39F5A4(&v25);
  os_unfair_lock_unlock(v15 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_25A39DD44(uint64_t a1)
{
  mach_absolute_time();
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_25A39F384(v4, &v15);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = v15;
  uint64_t v7 = swift_release();
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 16);
    if (v8)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = v6 + 40;
      do
      {
        uint64_t v10 = *(void (**)(uint64_t))(v9 - 8);
        swift_retain();
        v10(a1);
        swift_release();
        v9 += 16;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
    uint64_t v7 = swift_bridgeObjectRelease();
  }
  char v11 = *(os_unfair_lock_s **)(v1 + 96);
  MEMORY[0x270FA5388](v7);
  type metadata accessor for CrashReport(0);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = 0;
  MEMORY[0x270FA5388](KeyPath);
  swift_retain();
  os_unfair_lock_lock(v11 + 6);
  sub_25A39F3B8(&v14);
  os_unfair_lock_unlock(v11 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_25A39DF44(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_25A39F4F8(a1, (uint64_t)v26, &qword_26A415D38);
  mach_absolute_time();
  uint64_t v3 = *(void *)(v1 + 88);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 100));
  sub_25A39F5BC((void **)(v3 + 16), v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 100));
  uint64_t v4 = v22[0];
  uint64_t v5 = swift_release();
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      uint64_t v18 = v2;
      uint64_t v21 = v26[0];
      uint64_t v20 = v26[1];
      uint64_t v7 = v26[3];
      uint64_t v19 = v26[2];
      uint64_t v9 = v26[4];
      uint64_t v8 = v26[5];
      uint64_t v10 = v26[6];
      char v11 = v27;
      char v12 = v28;
      swift_bridgeObjectRetain();
      uint64_t v13 = v4 + 40;
      do
      {
        uint64_t v14 = *(void (**)(void *))(v13 - 8);
        v22[0] = v21;
        v22[1] = v20;
        void v22[2] = v19;
        v22[3] = v7;
        v22[4] = v9;
        v22[5] = v8;
        v22[6] = v10;
        char v23 = v11;
        char v24 = v12;
        swift_retain();
        v14(v22);
        swift_release();
        v13 += 16;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      uint64_t v2 = v18;
    }
    uint64_t v5 = swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(os_unfair_lock_s **)(v2 + 96);
  MEMORY[0x270FA5388](v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D40);
  uint64_t KeyPath = swift_getKeyPath();
  v22[0] = 0;
  MEMORY[0x270FA5388](KeyPath);
  swift_retain();
  os_unfair_lock_lock(v15 + 6);
  sub_25A39F5A4(&v25);
  os_unfair_lock_unlock(v15 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_25A39E1AC(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_25A39F4F8(a1, (uint64_t)v26, &qword_26A415D90);
  mach_absolute_time();
  uint64_t v3 = *(void *)(v1 + 88);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 100));
  sub_25A39F4A4((uint64_t *)(v3 + 16), v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 100));
  uint64_t v4 = v22[0];
  uint64_t v5 = swift_release();
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      uint64_t v18 = v2;
      uint64_t v21 = v26[0];
      uint64_t v20 = v26[1];
      uint64_t v7 = v26[3];
      uint64_t v19 = v26[2];
      uint64_t v9 = v26[4];
      uint64_t v8 = v26[5];
      uint64_t v10 = v26[6];
      char v11 = v27;
      char v12 = v28;
      swift_bridgeObjectRetain();
      uint64_t v13 = v4 + 40;
      do
      {
        uint64_t v14 = *(void (**)(void *))(v13 - 8);
        v22[0] = v21;
        v22[1] = v20;
        void v22[2] = v19;
        v22[3] = v7;
        v22[4] = v9;
        v22[5] = v8;
        v22[6] = v10;
        char v23 = v11;
        char v24 = v12;
        swift_retain();
        v14(v22);
        swift_release();
        v13 += 16;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      uint64_t v2 = v18;
    }
    uint64_t v5 = swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(os_unfair_lock_s **)(v2 + 96);
  MEMORY[0x270FA5388](v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415878);
  uint64_t KeyPath = swift_getKeyPath();
  v22[0] = 0;
  MEMORY[0x270FA5388](KeyPath);
  swift_retain();
  os_unfair_lock_lock(v15 + 6);
  sub_25A39F5A4(&v25);
  os_unfair_lock_unlock(v15 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_25A39E414(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_25A39F4F8(a1, (uint64_t)v26, &qword_26A415D58);
  mach_absolute_time();
  uint64_t v3 = *(void *)(v1 + 88);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 100));
  sub_25A39F5BC((void **)(v3 + 16), v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 100));
  uint64_t v4 = v22[0];
  uint64_t v5 = swift_release();
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      uint64_t v18 = v2;
      uint64_t v21 = v26[0];
      uint64_t v20 = v26[1];
      uint64_t v7 = v26[3];
      uint64_t v19 = v26[2];
      uint64_t v9 = v26[4];
      uint64_t v8 = v26[5];
      uint64_t v10 = v26[6];
      char v11 = v27;
      char v12 = v28;
      swift_bridgeObjectRetain();
      uint64_t v13 = v4 + 40;
      do
      {
        uint64_t v14 = *(void (**)(void *))(v13 - 8);
        v22[0] = v21;
        v22[1] = v20;
        void v22[2] = v19;
        v22[3] = v7;
        v22[4] = v9;
        v22[5] = v8;
        v22[6] = v10;
        char v23 = v11;
        char v24 = v12;
        swift_retain();
        v14(v22);
        swift_release();
        v13 += 16;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      uint64_t v2 = v18;
    }
    uint64_t v5 = swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(os_unfair_lock_s **)(v2 + 96);
  MEMORY[0x270FA5388](v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D60);
  uint64_t KeyPath = swift_getKeyPath();
  v22[0] = 0;
  MEMORY[0x270FA5388](KeyPath);
  swift_retain();
  os_unfair_lock_lock(v15 + 6);
  sub_25A39F5A4(&v25);
  os_unfair_lock_unlock(v15 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_25A39E67C(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_25A39F4F8(a1, (uint64_t)v26, &qword_26A415D78);
  mach_absolute_time();
  uint64_t v3 = *(void *)(v1 + 88);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 100));
  sub_25A39F450((uint64_t *)(v3 + 16), v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 100));
  uint64_t v4 = v22[0];
  uint64_t v5 = swift_release();
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      uint64_t v18 = v2;
      uint64_t v21 = v26[0];
      uint64_t v20 = v26[1];
      uint64_t v7 = v26[3];
      uint64_t v19 = v26[2];
      uint64_t v9 = v26[4];
      uint64_t v8 = v26[5];
      uint64_t v10 = v26[6];
      char v11 = v27;
      char v12 = v28;
      swift_bridgeObjectRetain();
      uint64_t v13 = v4 + 40;
      do
      {
        uint64_t v14 = *(void (**)(void *))(v13 - 8);
        v22[0] = v21;
        v22[1] = v20;
        void v22[2] = v19;
        v22[3] = v7;
        v22[4] = v9;
        v22[5] = v8;
        v22[6] = v10;
        char v23 = v11;
        char v24 = v12;
        swift_retain();
        v14(v22);
        swift_release();
        v13 += 16;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      uint64_t v2 = v18;
    }
    uint64_t v5 = swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(os_unfair_lock_s **)(v2 + 96);
  MEMORY[0x270FA5388](v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415828);
  uint64_t KeyPath = swift_getKeyPath();
  v22[0] = 0;
  MEMORY[0x270FA5388](KeyPath);
  swift_retain();
  os_unfair_lock_lock(v15 + 6);
  sub_25A39F5A4(&v25);
  os_unfair_lock_unlock(v15 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_25A39E8E4(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_25A39F4F8(a1, (uint64_t)v26, &qword_26A415D08);
  mach_absolute_time();
  uint64_t v3 = *(void *)(v1 + 88);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 100));
  sub_25A39F364((void **)(v3 + 16), v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 100));
  uint64_t v4 = v22[0];
  uint64_t v5 = swift_release();
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      uint64_t v18 = v2;
      uint64_t v21 = v26[0];
      uint64_t v20 = v26[1];
      uint64_t v7 = v26[3];
      uint64_t v19 = v26[2];
      uint64_t v9 = v26[4];
      uint64_t v8 = v26[5];
      uint64_t v10 = v26[6];
      char v11 = v27;
      char v12 = v28;
      swift_bridgeObjectRetain();
      uint64_t v13 = v4 + 40;
      do
      {
        uint64_t v14 = *(void (**)(void *))(v13 - 8);
        v22[0] = v21;
        v22[1] = v20;
        void v22[2] = v19;
        v22[3] = v7;
        v22[4] = v9;
        v22[5] = v8;
        v22[6] = v10;
        char v23 = v11;
        char v24 = v12;
        swift_retain();
        v14(v22);
        swift_release();
        v13 += 16;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      uint64_t v2 = v18;
    }
    uint64_t v5 = swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(os_unfair_lock_s **)(v2 + 96);
  MEMORY[0x270FA5388](v5);
  uint64_t KeyPath = swift_getKeyPath();
  v22[0] = 0;
  MEMORY[0x270FA5388](KeyPath);
  swift_retain();
  os_unfair_lock_lock(v15 + 6);
  sub_25A39F5A4(&v25);
  os_unfair_lock_unlock(v15 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_25A39EB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D10);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (void *)((char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_25A393828(a1, (uint64_t)v10, &qword_26A415D10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_25A39F3D4((uint64_t)v10);
    v14[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future.swift";
    v14[1] = 118;
    char v15 = 2;
    long long v16 = xmmword_25A511C30;
    uint64_t v17 = "didFinish(_:)";
    uint64_t v18 = 13;
    char v19 = 2;
    sub_25A403498();
    return 0;
  }
  else
  {
    sub_25A39F3D4(a1);
    uint64_t v11 = *v10;
    char v12 = (void *)(a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A415D18) + 48));
    sub_25A393828(a2, a1, &qword_26A415D20);
    *char v12 = a3;
    v12[1] = a4;
    swift_storeEnumTagMultiPayload();
  }
  return v11;
}

uint64_t sub_25A39ECAC@<X0>(void **a1@<X0>, void **a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  if ((_BYTE)a1[10])
  {
    uint64_t result = sub_25A403498();
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = *((unsigned __int8 *)a2 + 57);
    uint64_t v9 = (uint64_t)a2[5];
    uint64_t v10 = (uint64_t)a2[6];
    uint64_t v12 = (uint64_t)a2[3];
    uint64_t v11 = (uint64_t)a2[4];
    uint64_t v14 = (uint64_t)a2[1];
    uint64_t v13 = (uint64_t)a2[2];
    char v15 = *a2;
    uint64_t v16 = *((unsigned __int8 *)a2 + 56);
    *a1 = *a2;
    a1[1] = (void *)v14;
    a1[2] = (void *)v13;
    a1[3] = (void *)v12;
    a1[4] = (void *)v11;
    a1[5] = (void *)v9;
    a1[6] = (void *)v10;
    a1[7] = (void *)(v16 | (v8 << 8));
    a1[8] = a3;
    a1[9] = a4;
    *((unsigned char *)a1 + 80) = 1;
    uint64_t result = (uint64_t)sub_25A39F434(v15, v14, v13, v12, v11, v9, v10, v16, v8);
  }
  *a5 = v7;
  return result;
}

uint64_t sub_25A39ED90@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, void *a6@<X8>)
{
  if (a1[10])
  {
    uint64_t result = sub_25A403498();
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v10 = a2[5];
    uint64_t v11 = a2[6];
    uint64_t v13 = a2[3];
    uint64_t v12 = a2[4];
    uint64_t v15 = a2[1];
    uint64_t v14 = a2[2];
    uint64_t v16 = *a2;
    unint64_t v17 = *((unsigned __int8 *)a2 + 56) | ((unint64_t)*((unsigned __int8 *)a2 + 57) << 8);
    *a1 = *a2;
    a1[1] = v15;
    a1[2] = v14;
    a1[3] = v13;
    a1[4] = v12;
    a1[5] = v10;
    a1[6] = v11;
    a1[7] = v17;
    a1[8] = a3;
    a1[9] = a4;
    *((unsigned char *)a1 + 80) = 1;
    uint64_t result = a5(v16, v15, v14, v13);
  }
  *a6 = v8;
  return result;
}

uint64_t sub_25A39EE7C@<X0>(uint64_t *a1@<X2>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void (*)(void *, void))swift_readAtKeyPath();
  uint64_t v6 = *v5;
  swift_retain();
  v4(v8, 0);
  v8[0] = v3;
  swift_retain();
  uint64_t result = swift_setAtWritableKeyPath();
  *a2 = v6;
  return result;
}

uint64_t sub_25A39EF28(long long *a1, uint64_t a2)
{
  char v3 = *((unsigned char *)a1 + 16);
  char v4 = *((unsigned char *)a1 + 56);
  long long v7 = *a1;
  char v8 = v3;
  long long v9 = *(long long *)((char *)a1 + 24);
  long long v10 = *(long long *)((char *)a1 + 40);
  char v11 = v4;
  uint64_t v5 = sub_25A4EECC4((uint64_t)&v7);
  swift_retain();
  sub_25A4EF7A8(a2);
  swift_release();
  return v5;
}

uint64_t sub_25A39EF9C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  int v25 = a8;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v24 = a9;
  uint64_t v15 = *(void *)(v9 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v16 = sub_25A510540();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  char v19 = (char *)&v22 - v18;
  v26[0] = a1;
  v26[1] = a2;
  char v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v30 = v22;
  uint64_t v31 = v23;
  char v32 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))((char *)&v22 - v18, a9, v15);
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = sub_25A39C8D8(v26, (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  return v20;
}

uint64_t sub_25A39F124(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, void *a9)
{
  int v24 = a8;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v14 = sub_25A510540();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v21 - v16;
  v25[0] = a1;
  v25[1] = a2;
  char v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = v22;
  uint64_t v30 = v23;
  char v31 = v24;
  *(uint64_t *)((char *)&v21 - v16) = (uint64_t)a9;
  swift_storeEnumTagMultiPayload();
  id v18 = a9;
  uint64_t v19 = sub_25A39C8D8(v25, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return v19;
}

uint64_t type metadata accessor for ConstantFuture()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_25A39F29C()
{
  unint64_t result = qword_26A415C78;
  if (!qword_26A415C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A415C78);
  }
  return result;
}

uint64_t sub_25A39F2F0(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 24))();
  if (v2) {
    *a1 = v2;
  }
  return result;
}

uint64_t sub_25A39F32C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_25A39F364@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return sub_25A39ECAC(a1, *(void ***)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), a2);
}

uint64_t sub_25A39F384@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_25A39EB44(a1, v2[2], v2[3], v2[4]);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_25A39F3B8@<X0>(void *a1@<X8>)
{
  return sub_25A39EE7C(*(uint64_t **)(v1 + 24), a1);
}

uint64_t sub_25A39F3D4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_25A39F434(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 1) {
    return result;
  }
  if (!a9) {
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_25A39F450@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_25A39ED90(a1, *(uint64_t **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_25A39F484, a2);
}

id sub_25A39F484(id result, int a2, id a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 1) {
    return result;
  }
  if (!a9) {
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_25A39F4A4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_25A39ED90(a1, *(uint64_t **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_25A39F4D8, a2);
}

id sub_25A39F4D8(id result, id a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 1) {
    return result;
  }
  if (!a9) {
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_25A39F4F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_25A39F55C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_25A39ED90(a1, *(uint64_t **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_25A39F590, a2);
}

id sub_25A39F590(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 1) {
    return result;
  }
  return result;
}

uint64_t sub_25A39F5A4@<X0>(void *a1@<X8>)
{
  return sub_25A39F3B8(a1);
}

uint64_t sub_25A39F5BC@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return sub_25A39F364(a1, a2);
}

uint64_t sub_25A39F5D4(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = sub_25A50F5F0();
  if (!v20) {
    return sub_25A50F120();
  }
  uint64_t v21 = v20;
  uint64_t v27 = v15;
  uint64_t v43 = sub_25A50E860();
  uint64_t v35 = sub_25A50FF40();
  sub_25A50FEE0();
  uint64_t v41 = v19;
  uint64_t result = sub_25A50F5E0();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    char v37 = v23;
    int v24 = v27;
    while (1)
    {
      int v25 = (void (*)(char *, void))sub_25A50F730();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      sub_25A50FF20();
      sub_25A50F630();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

uint64_t CommandLineOptionDescription.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineOptionDescription.aliases.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineOptionDescription.parameterDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineOptionDescription.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineOptionDescription.shortUsage.getter()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v1;
  void v8[2] = *(_OWORD *)(v0 + 32);
  uint64_t v9 = *(void *)(v0 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158C0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_25A5119F0;
  *(void *)(v2 + 32) = sub_25A39FB78(*(uint64_t *)&v8[0], *((uint64_t *)&v8[0] + 1), (uint64_t)v8);
  *(void *)(v2 + 40) = v3;
  sub_25A3A0FE4((uint64_t)v8);
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_25A3A0E28(v4, (uint64_t)v8);
  sub_25A3A1038((uint64_t)v8);
  swift_bridgeObjectRelease();
  sub_25A396E24(v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3A108C();
  uint64_t v6 = sub_25A50EAD0();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_25A39FB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_25A50ED50();
  uint64_t v5 = 11565;
  if (v4 == 1) {
    uint64_t v5 = 45;
  }
  uint64_t v7 = v5;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  if (*(void *)(a3 + 32))
  {
    sub_25A50EA50();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t CommandLineOption.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineOption.aliases.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineOption.parameterDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineOption.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineOption.apply.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_retain();
  return v1;
}

uint64_t CommandLineOption.init(_:_:parameter:description:apply:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

uint64_t CommandLineOption.init(_:_:BOOLean:description:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = 0;
  a7[4] = 0;
  a7[5] = a5;
  a7[6] = a6;
  a7[7] = sub_25A3A10E8;
  a7[8] = a4;
  return result;
}

uint64_t CommandLineOption.init(_:_:parameter:string:description:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v14 = result;
  if (!a5)
  {
    uint64_t result = sub_25A50EA50();
    a4 = result;
    a5 = v16;
  }
  *a9 = v14;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a7;
  a9[6] = a8;
  a9[7] = (uint64_t)sub_25A3A1120;
  a9[8] = a6;
  return result;
}

uint64_t CommandLineOption.init(_:_:parameter:int:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v12 = a5;
  if (!a5)
  {
    a4 = sub_25A50EA50();
    uint64_t v12 = v18;
  }
  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v19[2] = a1;
  v19[3] = a2;
  v19[4] = a6;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = v12;
  a9[5] = a7;
  a9[6] = a8;
  a9[7] = sub_25A3A11C0;
  a9[8] = v19;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A39FED0(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = a2();
  if (!v5)
  {
    uint64_t v10 = result;
    uint64_t v11 = v9;
    uint64_t v12 = HIBYTE(v9) & 0xF;
    uint64_t v13 = result & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0x2000000000000000) != 0) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = result & 0xFFFFFFFFFFFFLL;
    }
    if (v14)
    {
      if ((v11 & 0x1000000000000000) == 0)
      {
        if ((v11 & 0x2000000000000000) == 0)
        {
          if ((result & 0x1000000000000000) != 0) {
            uint64_t v15 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            uint64_t v15 = (unsigned __int8 *)sub_25A50FE60();
          }
          uint64_t v16 = sub_25A4F5A1C(v15, v13, 10);
          if ((v17 & 1) == 0)
          {
            uint64_t v18 = (uint64_t)v16;
LABEL_37:
            swift_bridgeObjectRelease();
            v34[0] = v18;
            return swift_setAtWritableKeyPath();
          }
          goto LABEL_55;
        }
        v34[0] = result;
        v34[1] = v11 & 0xFFFFFFFFFFFFFFLL;
        if (result == 43)
        {
          if (!v12) {
            goto LABEL_60;
          }
          if (v12 == 1) {
            goto LABEL_58;
          }
          if ((BYTE1(result) - 48) > 9u) {
            goto LABEL_33;
          }
          uint64_t v18 = (BYTE1(result) - 48);
          if (v12 != 2)
          {
            if ((BYTE2(result) - 48) > 9u) {
              goto LABEL_33;
            }
            uint64_t v18 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
            uint64_t v19 = v12 - 3;
            if (v12 != 3)
            {
              uint64_t v20 = (unsigned __int8 *)v34 + 3;
              while (1)
              {
                unsigned int v21 = *v20 - 48;
                if (v21 > 9) {
                  goto LABEL_33;
                }
                uint64_t v22 = 10 * v18;
                if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
                  goto LABEL_33;
                }
                uint64_t v18 = v22 + v21;
                if (__OFADD__(v22, v21)) {
                  goto LABEL_33;
                }
                LOBYTE(v12) = 0;
                ++v20;
                if (!--v19) {
                  goto LABEL_36;
                }
              }
            }
          }
        }
        else
        {
          if (result == 45)
          {
            if (v12)
            {
              if (v12 != 1)
              {
                if ((BYTE1(result) - 48) > 9u) {
                  goto LABEL_33;
                }
                if (v12 == 2)
                {
                  LOBYTE(v12) = 0;
                  uint64_t v18 = -(uint64_t)(BYTE1(result) - 48);
                  goto LABEL_36;
                }
                if ((BYTE2(result) - 48) > 9u) {
                  goto LABEL_33;
                }
                uint64_t v18 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
                uint64_t v27 = v12 - 3;
                if (v12 != 3)
                {
                  uint64_t v28 = (unsigned __int8 *)v34 + 3;
                  while (1)
                  {
                    unsigned int v29 = *v28 - 48;
                    if (v29 > 9) {
                      goto LABEL_33;
                    }
                    uint64_t v30 = 10 * v18;
                    if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
                      goto LABEL_33;
                    }
                    uint64_t v18 = v30 - v29;
                    if (__OFSUB__(v30, v29)) {
                      goto LABEL_33;
                    }
                    LOBYTE(v12) = 0;
                    ++v28;
                    if (!--v27) {
                      goto LABEL_36;
                    }
                  }
                }
                goto LABEL_35;
              }
LABEL_58:
              uint64_t v18 = 0;
LABEL_36:
              if ((v12 & 1) == 0) {
                goto LABEL_37;
              }
              goto LABEL_55;
            }
            __break(1u);
LABEL_60:
            __break(1u);
            return result;
          }
          if (!v12 || (result - 48) > 9u)
          {
LABEL_33:
            uint64_t v18 = 0;
            LOBYTE(v12) = 1;
            goto LABEL_36;
          }
          uint64_t v18 = (result - 48);
          if (v12 != 1)
          {
            if ((BYTE1(result) - 48) > 9u) {
              goto LABEL_33;
            }
            uint64_t v18 = 10 * (result - 48) + (BYTE1(result) - 48);
            uint64_t v23 = v12 - 2;
            if (v12 != 2)
            {
              int v24 = (unsigned __int8 *)v34 + 2;
              while (1)
              {
                unsigned int v25 = *v24 - 48;
                if (v25 > 9) {
                  goto LABEL_33;
                }
                uint64_t v26 = 10 * v18;
                if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
                  goto LABEL_33;
                }
                uint64_t v18 = v26 + v25;
                if (__OFADD__(v26, v25)) {
                  goto LABEL_33;
                }
                LOBYTE(v12) = 0;
                ++v24;
                if (!--v23) {
                  goto LABEL_36;
                }
              }
            }
          }
        }
LABEL_35:
        LOBYTE(v12) = 0;
        goto LABEL_36;
      }
      swift_bridgeObjectRetain();
      uint64_t v18 = (uint64_t)sub_25A4F5A80(v10, v11, 10);
      char v32 = v31;
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0) {
        goto LABEL_37;
      }
    }
LABEL_55:
    sub_25A3A1A08();
    swift_allocError();
    void *v33 = a4;
    v33[1] = a5;
    v33[2] = v10;
    v33[3] = v11;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

void *CommandLineOption.init<A>(_:_:parameter:optionalEnum:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v38 = a7;
  unint64_t v39 = a8;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a11;
  uint64_t v15 = *a6;
  uint64_t v40 = a6;
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(*(void *)(*MEMORY[0x263F8DE50] + v15 + 8) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned int v21 = (char *)&v35 - v20;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  if (!a5)
  {
    uint64_t v42 = sub_25A50EA50();
    a5 = v22;
  }
  uint64_t v23 = sub_25A50FDD0();
  MEMORY[0x270FA5388](v23);
  *(&v35 - 4) = *(void *)(v16 + *MEMORY[0x263F8DE50]);
  *(&v35 - 3) = v17;
  uint64_t v24 = v43;
  *(&v35 - 2) = a10;
  *(&v35 - 1) = v24;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v27 = sub_25A39F5D4((void (*)(char *, char *))sub_25A3A11E0, (uint64_t)(&v35 - 6), AssociatedTypeWitness, MEMORY[0x263F8D310], MEMORY[0x263F8E628], AssociatedConformanceWitness, MEMORY[0x263F8E658], v26);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, AssociatedTypeWitness);
  uint64_t v44 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3A108C();
  sub_25A50EAD0();
  swift_bridgeObjectRelease();
  uint64_t v44 = 0;
  unint64_t v45 = 0xE000000000000000;
  uint64_t v28 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  uint64_t v44 = 2570;
  unint64_t v45 = 0xE200000000000000;
  uint64_t v29 = v42;
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  uint64_t v44 = v38;
  unint64_t v45 = v39;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = v44;
  unint64_t v31 = v45;
  uint64_t result = (void *)swift_allocObject();
  uint64_t v33 = v43;
  result[2] = a10;
  result[3] = v33;
  uint64_t v34 = v36;
  result[4] = v36;
  result[5] = v28;
  result[6] = v40;
  *a9 = v34;
  a9[1] = v28;
  a9[2] = v41;
  a9[3] = v29;
  a9[4] = a5;
  a9[5] = v30;
  a9[6] = v31;
  a9[7] = sub_25A3A1258;
  a9[8] = result;
  return result;
}

uint64_t sub_25A3A05AC(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, char *a7, char *a8)
{
  char v48 = a8;
  uint64_t v49 = a2;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v42 = a1;
  uint64_t v8 = *MEMORY[0x263F8DE50];
  uint64_t v41 = *a6;
  uint64_t v9 = *(void *)(v8 + v41 + 8);
  uint64_t v10 = *(char **)(v9 + 16);
  uint64_t v46 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v47 = *((void *)v10 - 1);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v38 - v22;
  uint64_t v24 = v52;
  uint64_t result = v49(v21);
  if (!v24)
  {
    uint64_t v38 = v17;
    uint64_t v39 = result;
    uint64_t v52 = 0;
    uint64_t v27 = v46;
    uint64_t v50 = result;
    uint64_t v51 = v26;
    uint64_t v49 = v26;
    swift_bridgeObjectRetain();
    sub_25A50F030();
    uint64_t v28 = v47;
    if ((*(unsigned int (**)(char *, uint64_t, char *))(v47 + 48))(v20, 1, v10) == 1)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v9);
      uint64_t v29 = sub_25A50FDD0();
      MEMORY[0x270FA5388](v29);
      *(&v38 - 4) = *(char **)(v41 + *MEMORY[0x263F8DE50]);
      *(&v38 - 3) = v10;
      uint64_t v30 = v48;
      *(&v38 - 2) = v27;
      *(&v38 - 1) = v30;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v33 = sub_25A39F5D4((void (*)(char *, char *))sub_25A3A1E84, (uint64_t)(&v38 - 6), AssociatedTypeWitness, MEMORY[0x263F8D310], MEMORY[0x263F8E628], AssociatedConformanceWitness, MEMORY[0x263F8E658], v32);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v14, AssociatedTypeWitness);
      sub_25A3A19B4();
      swift_allocError();
      uint64_t v34 = v45;
      *uint64_t v35 = v44;
      v35[1] = v34;
      uint64_t v36 = v49;
      v35[2] = v39;
      v35[3] = v36;
      v35[4] = v33;
      swift_bridgeObjectRetain();
      return swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, char *))(v28 + 32))(v23, v20, v10);
      uint64_t v37 = v38;
      (*(void (**)(char *, char *, char *))(v28 + 16))(v38, v23, v10);
      (*(void (**)(char *, void, uint64_t, char *))(v28 + 56))(v37, 0, 1, v10);
      swift_setAtWritableKeyPath();
      return (*(uint64_t (**)(char *, char *))(v28 + 8))(v23, v10);
    }
  }
  return result;
}

__n128 CommandLineOption.init<A>(_:_:parameter:enum:description:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, unint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  swift_getKeyPath();
  uint64_t v15 = (void *)sub_25A50FEA0();
  swift_release();
  CommandLineOption.init<A>(_:_:parameter:optionalEnum:description:)(a1, a2, a3, a4, a5, v15, a6, a7, &v24, a9, a10);
  swift_release();
  uint64_t v16 = v27;
  uint64_t v17 = v29;
  __n128 result = v25;
  long long v19 = v28;
  long long v20 = v26;
  *(void *)a8 = v24;
  *(__n128 *)(a8 + 8) = result;
  *(_OWORD *)(a8 + 24) = v20;
  *(void *)(a8 + 40) = v16;
  *(_OWORD *)(a8 + 48) = v19;
  *(void *)(a8 + 64) = v17;
  return result;
}

uint64_t sub_25A3A0B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v8 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, v3, a1);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);

  return v6(a2, 0, 1, a1);
}

uint64_t CommandLineOption.names.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158C0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_25A5119F0;
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  uint64_t v6 = v3;
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_25A396E24(v4);
  return v6;
}

uint64_t sub_25A3A0C98()
{
  sub_25A50FDB0();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  uint64_t v2 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3A108C();
  sub_25A50EAD0();
  sub_25A3A1E58((uint64_t)&v2);
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_25A3A0DEC()
{
  return sub_25A3A0C98();
}

uint64_t sub_25A3A0E28(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    sub_25A39A068(0, v2, 0);
    uint64_t v3 = v17;
    uint64_t v6 = a1 + 40;
    uint64_t v15 = *(void *)(a2 + 32);
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = sub_25A50ED50();
      uint64_t v8 = 11565;
      if (v7 == 1)
      {
        uint64_t v8 = 45;
        unint64_t v9 = 0xE100000000000000;
      }
      else
      {
        unint64_t v9 = 0xE200000000000000;
      }
      uint64_t v16 = v8;
      swift_bridgeObjectRetain();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      unint64_t v10 = v9;
      if (v15)
      {
        sub_25A50EA50();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v12 = *(void *)(v17 + 16);
      unint64_t v11 = *(void *)(v17 + 24);
      if (v12 >= v11 >> 1) {
        sub_25A39A068(v11 > 1, v12 + 1, 1);
      }
      v6 += 16;
      *(void *)(v17 + 16) = v12 + 1;
      uint64_t v13 = v17 + 16 * v12;
      *(void *)(v13 + 32) = v16;
      *(void *)(v13 + 40) = v10;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_25A3A0FE4(uint64_t a1)
{
  return a1;
}

uint64_t sub_25A3A1038(uint64_t a1)
{
  return a1;
}

unint64_t sub_25A3A108C()
{
  unint64_t result = qword_26A415DC8[0];
  if (!qword_26A415DC8[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415DC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A415DC8);
  }
  return result;
}

uint64_t sub_25A3A10E8()
{
  return swift_setAtWritableKeyPath();
}

uint64_t sub_25A3A1120(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if (!v2) {
    return swift_setAtWritableKeyPath();
  }
  return result;
}

uint64_t sub_25A3A1180()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A3A11C0(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  return sub_25A39FED0(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_25A3A11E0()
{
  return sub_25A50F020();
}

uint64_t sub_25A3A1218()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A3A1258(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  return sub_25A3A05AC(a1, a2, a3, *(void *)(v3 + 32), *(void *)(v3 + 40), *(uint64_t **)(v3 + 48), *(char **)(v3 + 16), *(char **)(v3 + 24));
}

uint64_t sub_25A3A127C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_25A3A0B60(*(void *)(a2 + a1 - 24), a3);
}

uint64_t sub_25A3A12AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A3A1868(a1, *(void *)(a4 + a3 - 24));
}

uint64_t sub_25A3A12DC()
{
  return 32;
}

__n128 sub_25A3A12E8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t destroy for CommandLineOptionDescription()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CommandLineOptionDescription(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CommandLineOptionDescription(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CommandLineOptionDescription(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandLineOptionDescription(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CommandLineOptionDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandLineOptionDescription()
{
  return &type metadata for CommandLineOptionDescription;
}

uint64_t sub_25A3A1578()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_25A3A15CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_25A3A1654(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[8];
  a1[7] = a2[7];
  a1[8] = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_25A3A1738(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CrashReport.Image(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CrashReport.Image(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for CommandLineOption()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3A1868(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_25A50FA40();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v11 - v6, a1);
  uint64_t v9 = *(void *)(a2 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, a2);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, a2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v2, v7, a2);
  }
  return result;
}

unint64_t sub_25A3A19B4()
{
  unint64_t result = qword_26A415E50;
  if (!qword_26A415E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A415E50);
  }
  return result;
}

unint64_t sub_25A3A1A08()
{
  unint64_t result = qword_26A415E58[0];
  if (!qword_26A415E58[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A415E58);
  }
  return result;
}

uint64_t destroy for InvalidInteger()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for InvalidInteger(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for InvalidInteger(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for InvalidInteger(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidInteger(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InvalidInteger(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InvalidInteger()
{
  return &type metadata for InvalidInteger;
}

uint64_t destroy for UnknownEnumValue()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for UnknownEnumValue(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for UnknownEnumValue(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for UnknownEnumValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnknownEnumValue(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnknownEnumValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnknownEnumValue()
{
  return &type metadata for UnknownEnumValue;
}

uint64_t sub_25A3A1E58(uint64_t a1)
{
  return a1;
}

uint64_t sub_25A3A1E84()
{
  return sub_25A3A11E0();
}

uint64_t SafeDecodable.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v25 = sub_25A510540();
  uint64_t v4 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v6 = (char *)v22 - v5;
  uint64_t v7 = type metadata accessor for SafeDecodable();
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (void *)((char *)v22 - v8);
  uint64_t v10 = a1[3];
  uint64_t v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_25A510550();
  if (v2)
  {
    if (qword_26A4155B0 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_25A50E5E0();
    __swift_project_value_buffer(v11, (uint64_t)qword_26A419E88);
    id v12 = v2;
    id v13 = v2;
    uint64_t v14 = sub_25A50E5C0();
    os_log_type_t v15 = sub_25A50F830();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v22[1] = 0;
      uint64_t v18 = v17;
      v29[0] = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_getErrorValue();
      Swift::String v19 = Error.describe()();
      uint64_t v28 = sub_25A3A36A4(v19._countAndFlagsBits, (unint64_t)v19._object, v29);
      sub_25A50FB00();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25A380000, v14, v15, "Error decoding SafeDecodable value: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x26113F070](v18, -1, -1);
      MEMORY[0x26113F070](v16, -1, -1);
    }
    else
    {
    }
    void *v9 = v2;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v29, v29[3]);
    sub_25A510390();
    uint64_t v21 = v25;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, char *, uint64_t))(v4 + 32))(v9, v6, v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  (*(void (**)(uint64_t, void *, uint64_t))(v23 + 32))(v26, v9, v24);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t type metadata accessor for SafeDecodable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SafeDecodable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25A3A2330@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SafeDecodable.init(from:)(a1, a2);
}

uint64_t SafeDecodable<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v14[1] = a3;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = sub_25A50FA40();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v14 - v7;
  uint64_t v9 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v12 = sub_25A510540();
  Result.value.getter(v12, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v3) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, v3);
  sub_25A50EA00();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v3);
}

uint64_t sub_25A3A254C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SafeDecodable<>.encode(to:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t SafeDecodable<>.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = sub_25A50FA40();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - v8;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v10 = sub_25A510540();
  Result.value.getter(v10, (uint64_t)v9);
  uint64_t v11 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v5) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v9, v5);
  }
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(v5, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SafeDecodable.value.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v2 = sub_25A510540();

  return Result.value.getter(v2, a1);
}

uint64_t sub_25A3A2764@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_25A50E860();
  *a1 = result;
  return result;
}

uint64_t sub_25A3A2790@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_25A50E850();
  *a1 = result;
  return result;
}

uint64_t SafeDecodableArray.value.getter()
{
  type metadata accessor for SafeDecodable();
  sub_25A50F1E0();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v0 = type metadata accessor for SafeDecodable();
  SafeDecodable<>.value.getter(v0, (uint64_t)&protocol witness table for [A], (uint64_t)&v3);
  swift_getWitnessTable();
  uint64_t v1 = sub_25A50EF30();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SafeDecodableArray.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25A510550();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    type metadata accessor for SafeDecodable();
    sub_25A50F1E0();
    v8[6] = swift_getWitnessTable();
    swift_getWitnessTable();
    type metadata accessor for SafeDecodable();
    swift_getWitnessTable();
    sub_25A510390();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *(void *)a2 = v6;
    *(unsigned char *)(a2 + 8) = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t SafeDecodableArray.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = a1;
  v13[2] = a2;
  uint64_t v13[3] = a3;
  uint64_t v5 = sub_25A50F1E0();
  uint64_t v6 = type metadata accessor for SafeDecodable();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = sub_25A39F5D4((void (*)(char *, char *))sub_25A3A3CF0, (uint64_t)v13, v5, v6, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v8);
  swift_bridgeObjectRelease();
  uint64_t v14 = v9;
  uint64_t v10 = sub_25A50F1E0();
  v13[5] = swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t result = SafeDecodable.init(_:)((uint64_t)&v14, v10, (uint64_t)&v15);
  char v12 = v16;
  *(void *)a4 = v15;
  *(unsigned char *)(a4 + 8) = v12;
  return result;
}

uint64_t sub_25A3A2BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  return SafeDecodable.init(_:)((uint64_t)v6, a2, a3);
}

uint64_t sub_25A3A2C84@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SafeDecodableArray.init(from:)(a1, a2);
}

uint64_t SafeDecodableDictionary.value.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SafeDecodableDictionary.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X5>, void *a3@<X8>)
{
  uint64_t v20 = a2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25A510550();
  if (!v3)
  {
    __swift_project_boxed_opaque_existential_1(&v17, v19);
    type metadata accessor for SafeDecodable();
    sub_25A50E990();
    swift_getWitnessTable();
    swift_getWitnessTable();
    uint64_t v6 = type metadata accessor for SafeDecodable();
    swift_getWitnessTable();
    sub_25A510390();
    uint64_t v14 = v15;
    char v13 = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    uint64_t v12 = sub_25A50E990();
    uint64_t v17 = v15;
    char v18 = v16;
    uint64_t v7 = SafeDecodable<>.value.getter(v6, (uint64_t)&protocol witness table for [A : B], (uint64_t)&v15);
    uint64_t v17 = v15;
    MEMORY[0x270FA5388](v7);
    swift_getTupleTypeMetadata2();
    swift_getWitnessTable();
    uint64_t v8 = sub_25A50EF30();
    swift_bridgeObjectRelease();
    uint64_t v15 = (void *)v8;
    uint64_t v9 = sub_25A50F1E0();
    uint64_t WitnessTable = swift_getWitnessTable();
    swift_getWitnessTable();
    KeyValueMap.init<A>(_:)((uint64_t)&v15, v12, v9, WitnessTable, (uint64_t)&v17);
    sub_25A3A4ABC(v14, v13);
    *a3 = v17;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25A3A2FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, uint64_t, uint64_t)@<X4>, char *a5@<X8>)
{
  char v48 = a4;
  uint64_t v51 = a5;
  uint64_t v8 = sub_25A50FA40();
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v50 = (uint64_t)&v40 - v10;
  uint64_t v46 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v41 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_25A50FA40();
  uint64_t v44 = *(void *)(v12 - 8);
  uint64_t v45 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v40 - v14;
  uint64_t v16 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v49 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a3;
  uint64_t v18 = type metadata accessor for SafeDecodable();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v20 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v21 = *(void *)(v18 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v40 - v23;
  uint64_t v25 = *(int *)(v22 + 56);
  uint64_t v27 = v26 + v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v26 + v25, a1 + v25, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v24, v27, v18);
  swift_bridgeObjectRetain();
  sub_25A5102F0();
  uint64_t v28 = v16;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v18);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v45);
LABEL_5:
    uint64_t v33 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v51, 1, 1, v33);
  }
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v29(v49, v15, a2);
  uint64_t v30 = v50;
  SafeDecodable.value.getter(v50);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v18);
  uint64_t v32 = v46;
  uint64_t v31 = v47;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v30, 1, v47) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v49, a2);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v50, v43);
    goto LABEL_5;
  }
  char v48 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 32);
  uint64_t v35 = v41;
  v48(v41, v50, v31);
  uint64_t v36 = v31;
  uint64_t v37 = swift_getTupleTypeMetadata2();
  uint64_t v38 = v51;
  uint64_t v39 = &v51[*(int *)(v37 + 48)];
  v29(v51, v49, a2);
  v48(v39, (uint64_t)v35, v36);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v38, 0, 1, v37);
}

uint64_t sub_25A3A3558@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return SafeDecodableDictionary.init(from:)(a1, *(void *)(a2 + 48), a3);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_25A3A35B8(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  unsigned char *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_25A3A35C8(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_25A3A3604(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_25A3A362C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_25A3A36A4(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  sub_25A50FB00();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_25A3A36A4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_25A3A3778(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_25A3937CC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_25A3937CC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_25A3A3778(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_25A50FB10();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_25A3A3934(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_25A50FE60();
  if (!v8)
  {
    sub_25A510050();
    __break(1u);
LABEL_17:
    uint64_t result = sub_25A510140();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_25A3A3934(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_25A3A39CC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_25A3A3B44(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_25A3A3B44(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_25A3A39CC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_25A4E6AA4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_25A50FDC0();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_25A510050();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_25A50EDD0();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_25A510140();
    __break(1u);
LABEL_14:
    uint64_t result = sub_25A510050();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_25A3A3B44(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158E0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

unsigned char **sub_25A3A3C94(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_25A3A3CA4@<X0>(uint64_t a1@<X8>)
{
  return SafeDecodable.value.getter(a1);
}

uint64_t sub_25A3A3CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3A2BB4(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_25A3A3D10@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_25A3A2FD4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(char *, uint64_t, uint64_t))(v2 + 40), a2);
}

uint64_t sub_25A3A3D34()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t result = sub_25A510540();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_25A3A3DE0(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    int64_t v8 = *(char **)a2;
    *(void *)unint64_t v3 = *(void *)a2;
    unint64_t v3 = &v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1)
    {
      uint64_t v14 = *(void *)a2;
      id v15 = *(id *)a2;
      *(void *)unint64_t v3 = v14;
      v3[v5] = 1;
    }
    else
    {
      (*(void (**)(char *))(v4 + 16))(a1);
      v3[v5] = 0;
    }
  }
  return v3;
}

void sub_25A3A3F68(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {

  }
  else {
    (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *sub_25A3A4068(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = *(void *)a2;
    id v11 = *(id *)a2;
    *a1 = v10;
    char v12 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v12 = 0;
  }
  *((unsigned char *)a1 + v4) = v12;
  return a1;
}

unsigned __int8 *sub_25A3A41B0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      uint64_t v18 = *(void **)a2;
      id v19 = v18;
      *(void *)a1 = v18;
      char v20 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v20 = 0;
    }
    a1[v7] = v20;
  }
  return a1;
}

void *sub_25A3A43D0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(void *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_25A3A4508(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_25A3A4720(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void sub_25A3A4854(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x25A3A4A1CLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25A3A4A44(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_25A3A4A8C(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id sub_25A3A4A8C(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

void sub_25A3A4A98(uint64_t a1)
{
}

void sub_25A3A4ABC(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_25A3A4AC8(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_25A3A4A8C(*(id *)a2, v4);
  unint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_25A3A4ABC(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t sub_25A3A4B30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  unint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_25A3A4ABC(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidationHandle.TraceStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InvalidationHandle.TraceStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for SafeDecodableArray()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3A4C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 48);
}

uint64_t type metadata accessor for SafeDecodableDictionary()
{
  return swift_getGenericMetadata();
}

uint64_t Either.left.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  char v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v6, v8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v8);
  }
}

uint64_t Either.right.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  char v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v6, v8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
}

uint64_t Either.analyze<A>(left:right:)(void (*a1)(char *), uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a4;
  uint64_t v25 = a3;
  uint64_t v23 = a1;
  uint64_t v5 = *(void *)(a5 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v7);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v17, v5);
    v25(v9);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v17, v11);
    v23(v15);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
}

uint64_t Either.mapLeft<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v12, *(void *)(a2 + 24));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  type metadata accessor for Either();
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for Either()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Either.flatMapLeft<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v12, *(void *)(a2 + 24));
    type metadata accessor for Either();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t Either.flattenedLeft<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v8, a2);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(a2 + 16) - 8) + 32))(a3, v6);
  }
  (*(void (**)(uint64_t, char *))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v6);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Either.mapRight<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 16) - 8) + 32))(a3, v12, *(void *)(a2 + 16));
  }
  type metadata accessor for Either();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Either.flatMapRight<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 16) - 8) + 32))(a3, v12, *(void *)(a2 + 16));
    type metadata accessor for Either();
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t Either.flattenedRight<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v8, a2);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v6);
  }
  (*(void (**)(uint64_t, char *))(*(void *)(*(void *)(a2 + 16) - 8) + 32))(a3, v6);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Either.Discriminant.description.getter(char a1)
{
  if (a1) {
    return 0x7468676972;
  }
  else {
    return 1952867692;
  }
}

BOOL static Either.Discriminant.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t Either.Discriminant.hash(into:)()
{
  return sub_25A5104F0();
}

uint64_t Either.Discriminant.hashValue.getter()
{
  return sub_25A510530();
}

BOOL sub_25A3A5D44(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Either.Discriminant.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_25A3A5D50()
{
  return Either.Discriminant.hashValue.getter();
}

uint64_t sub_25A3A5D58()
{
  return Either.Discriminant.hash(into:)();
}

uint64_t sub_25A3A5D60()
{
  return sub_25A510530();
}

uint64_t sub_25A3A5DA0()
{
  return Either.Discriminant.description.getter(*v0);
}

BOOL Either.discriminant.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t Either<>.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x270FA5388]();
  BOOL v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a2, v5);
}

uint64_t Either<>.init(left:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  if (swift_getEnumCaseMultiPayload() == 1) {
    *a3 = *a1;
  }
  else {
    (*(void (**)(void *, void *, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  }
  type metadata accessor for Either();

  return swift_storeEnumTagMultiPayload();
}

uint64_t Either<>.init(right:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  if (swift_getEnumCaseMultiPayload() == 1) {
    *a3 = *a1;
  }
  else {
    (*(void (**)(void *, void *, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  }
  type metadata accessor for Either();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25A3A6164()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A3A6180()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_25A3A624C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_25A3A6420(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_25A3A655C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_25A3A66D0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_25A3A6910(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_25A3A6A84(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_25A3A6CC4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_25A3A6E08(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x25A3A6FE0);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25A3A7008(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_25A3A70D0(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5] = a2;
  }
}

uint64_t sub_25A3A71F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t _s15PaddingPositionOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_25A3A729C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A3A7368);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_25A3A7390(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_25A3A7398(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for Either.Discriminant()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t NSObjectBox.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  unsigned int v4 = (char *)v1 + *(void *)(v3 + 0x58);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t NSObjectBox.value.setter(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  unsigned int v4 = (char *)v1 + *(void *)(v3 + 0x58);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*NSObjectBox.value.modify())()
{
  return j__swift_endAccess;
}

id NSObjectBox.__allocating_init(_:)(uint64_t a1)
{
  int v2 = v1;
  id v4 = objc_allocWithZone(v1);
  id v5 = sub_25A3A77CC(a1);
  (*(void (**)(uint64_t))(*(void *)(*((void *)v2 + 10) - 8) + 8))(a1);
  return v5;
}

id NSObjectBox.init(_:)(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  id v4 = sub_25A3A77CC(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

id NSObjectBox.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void NSObjectBox.init()()
{
}

void sub_25A3A7704()
{
}

id NSObjectBox.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_25A3A7764(char *a1)
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x50)
                                                       - 8)
                                           + 8))(&a1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x58)]);
}

id sub_25A3A77CC(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)v1) + 0x50)
                                                      - 8)
                                          + 16))(&v1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v1) + 0x58)], a1);
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

void sub_25A3A7888()
{
}

uint64_t sub_25A3A78B8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for NSObjectBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for NSObjectBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NSObjectBox);
}

uint64_t dispatch thunk of NSObjectBox.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

void IdentifiedSet.subscript.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  JUMPOUT(0x26113C9D0);
}

void sub_25A3A7A40()
{
}

uint64_t IdentifiedSet.subscript.setter(uint64_t a1, uint64_t a2)
{
  sub_25A3AC6A0(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  uint64_t v5 = sub_25A50FA40();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(a1, v5);
}

void (*IdentifiedSet.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  unsigned int v6 = malloc(0x48uLL);
  *a1 = v6;
  *unsigned int v6 = a3;
  v6[1] = v3;
  uint64_t v7 = sub_25A50FA40();
  v6[2] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[3] = v8;
  size_t v9 = *(void *)(v8 + 64);
  v6[4] = malloc(v9);
  v6[5] = malloc(v9);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[6] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = v11;
  v6[7] = v11;
  v6[8] = malloc(*(void *)(v11 + 64));
  (*(void (**)(void))(v12 + 16))();
  IdentifiedSet.subscript.getter();
  return sub_25A3A7D00;
}

void sub_25A3A7D00(uint64_t a1, char a2)
{
  objc_super v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 56);
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  uint64_t v5 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 48);
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  uint64_t v7 = *(void **)(*(void *)a1 + 32);
  uint64_t v9 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v8 + 16))(*(void *)(*(void *)a1 + 32), v5, v9);
    sub_25A3AC6A0((uint64_t)v7, (uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    int v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v7, v9);
    v10(v5, v9);
  }
  else
  {
    sub_25A3AC6A0(*(void *)(*(void *)a1 + 40), (uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v9);
  }
  free(v3);
  free(v5);
  free(v7);

  free(v2);
}

uint64_t IdentifiedSet.init()@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  sub_25A50F120();
  swift_getAssociatedConformanceWitness();
  uint64_t result = sub_25A50E900();
  *a1 = result;
  return result;
}

uint64_t IdentifiedSet.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  int v14 = &v16[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t))(v12 + 16))(v14, a1);
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  IdentifiedSet.init<A>(_:uniquingElementsWith:)((uint64_t)v14, a3, &v21);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a3);
  *a6 = v21;
  return result;
}

uint64_t IdentifiedSet.init<A>(_:uniquingElementsWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, void *a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  sub_25A50F120();
  swift_getAssociatedConformanceWitness();
  sub_25A50E900();
  sub_25A50E990();
  sub_25A50EFB0();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v7) {
    *a3 = v8;
  }
  return result;
}

uint64_t IdentifiedSet.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v10 = a1;
  uint64_t v7 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = IdentifiedSet.init<A>(_:)((uint64_t)&v10, a2, v7, a3, WitnessTable, &v11);
  *a4 = v11;
  return result;
}

uint64_t sub_25A3A8244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_25A5102C0();
  swift_allocObject();
  sub_25A50F0C0();
  uint64_t v9 = v8 + *(int *)(TupleTypeMetadata2 + 48);
  sub_25A50FDE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v9, a2, a5);
  sub_25A3DFCA4();
  swift_getAssociatedConformanceWitness();
  sub_25A50E900();
  sub_25A50E990();
  return sub_25A50E940();
}

BOOL IdentifiedSet.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v16 = sub_25A50FA40();
  uint64_t v4 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v6 = (char *)&v15 - v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = *v2;
  sub_25A50FDE0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x26113C9D0](v10, v11, AssociatedTypeWitness, v3, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v6, 1, v3) != 1;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v16);
  return v13;
}

uint64_t IdentifiedSet.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v12 - v7;
  MEMORY[0x270FA5388](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  sub_25A50FDE0();
  swift_getAssociatedConformanceWitness();
  sub_25A50E990();
  sub_25A50E8D0();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

uint64_t IdentifiedSet.remove(_:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v5 - v2;
  sub_25A50FDE0();
  swift_getAssociatedConformanceWitness();
  sub_25A50E990();
  sub_25A50E8C0();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

Swift::Void __swiftcall IdentifiedSet.removeAll()()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_25A50E990();

  sub_25A50E980();
}

uint64_t IdentifiedSet.filter(_:)@<X0>(uint64_t a1@<X2>, void *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = v5;
  sub_25A50E950();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t result = sub_25A50EFA0();
  if (!v3)
  {
    uint64_t v11 = result;
    uint64_t v9 = sub_25A50F1E0();
    uint64_t WitnessTable = swift_getWitnessTable();
    return IdentifiedSet.init<A>(_:)((uint64_t)&v11, v7, v9, v6, WitnessTable, a2);
  }
  return result;
}

uint64_t IdentifiedSet.merge<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 24);
  v6[2] = *(void *)(a2 + 16);
  v6[3] = a3;
  v6[4] = v4;
  v6[5] = a4;
  return IdentifiedSet.merge<A>(_:uniquingElementsWith:)(a1, (uint64_t)sub_25A3AC880, (uint64_t)v6, a2, a3);
}

uint64_t IdentifiedSet.merge<A>(_:uniquingElementsWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  uint64_t result = IdentifiedSet.init<A>(_:uniquingElementsWith:)((uint64_t)v8, a5, &v12);
  if (!v5)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    sub_25A50E990();
    return sub_25A50E940();
  }
  return result;
}

uint64_t IdentifiedSet.merging<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  void v8[7] = *v5;
  uint64_t v6 = *(void *)(a2 + 24);
  void v8[2] = *(void *)(a2 + 16);
  _OWORD v8[3] = a3;
  void v8[4] = v6;
  v8[5] = a4;
  return IdentifiedSet.merging<A>(_:uniquingElementsWith:)(a1, (uint64_t)sub_25A3AC880, (uint64_t)v8, a2, a3, a5);
}

uint64_t IdentifiedSet.merging<A>(_:uniquingElementsWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v15 = *v6;
  swift_bridgeObjectRetain();
  IdentifiedSet.merge<A>(_:uniquingElementsWith:)(a1, a2, a3, a4, a5);
  uint64_t result = v15;
  if (v7) {
    return swift_bridgeObjectRelease();
  }
  *a6 = v15;
  return result;
}

uint64_t IdentifiedSet.subtract<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v33 = a4;
  uint64_t v34 = a1;
  uint64_t v32 = a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v29 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_25A50FA40();
  uint64_t v27 = *(void *)(v31 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v31);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  BOOL v13 = (char *)&v26 - v12;
  uint64_t v14 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v26 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v34, a3);
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v33 = v19;
  uint64_t v34 = AssociatedTypeWitness;
  uint64_t v30 = AssociatedConformanceWitness;
  sub_25A50FAF0();
  uint64_t v21 = v29;
  BOOL v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v22(v13, 1, v5) != 1)
  {
    uint64_t v29 = *(void *)(v21 + 32);
    uint64_t v23 = (void (**)(char *, uint64_t))(v27 + 8);
    uint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
    do
    {
      ((void (*)(char *, char *, uint64_t))v29)(v7, v13, v5);
      IdentifiedSet.remove(_:)();
      (*v23)(v10, v31);
      (*v24)(v7, v5);
      sub_25A50FAF0();
    }
    while (v22(v13, 1, v5) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v33, v34);
}

uint64_t IdentifiedSet.subtracting<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_25A3A9858(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))IdentifiedSet.subtract<A>(_:), a5);
}

uint64_t IdentifiedSet.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  Sequence<>.identified()(a3, a4, *(void *)(a2 + 24), &v8);
  swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  swift_getTupleTypeMetadata2();
  sub_25A50F120();
  swift_getAssociatedConformanceWitness();
  sub_25A50E900();
  sub_25A50E990();
  swift_getWitnessTable();
  sub_25A50EFB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = v6;
  return result;
}

uint64_t sub_25A3A93C8(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v51 = a6;
  uint64_t v49 = a3;
  uint64_t v47 = a1;
  uint64_t v8 = sub_25A50FA40();
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v46 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v44 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = *(void *)(a4 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v17);
  uint64_t v50 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v21;
  uint64_t v23 = *(int *)(v21 + 48);
  uint64_t v24 = &v19[v23];
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v28 = v26 + 16;
  uint64_t v45 = a2;
  uint64_t v38 = v27;
  v27(v19, a2, AssociatedTypeWitness);
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  char v48 = v24;
  uint64_t v39 = v29;
  uint64_t v40 = v25;
  v29(v24, v25, a4);
  uint64_t v52 = v49;
  type metadata accessor for IdentifiedSet();
  IdentifiedSet.subscript.getter();
  uint64_t v30 = (uint64_t (**)(char *, uint64_t))(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v12, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v43);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v48, a4);
    return (*v30)(v19, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v50, v12, a4);
    uint64_t v49 = *(void (**)(void, void))(v20 + 8);
    v49(v48, a4);
    (*v30)(v19, AssociatedTypeWitness);
    char v48 = &v44[*(int *)(v41 + 48)];
    uint64_t v32 = v48;
    v38(v44, v45, AssociatedTypeWitness);
    uint64_t v33 = v39;
    v39(v32, v40, a4);
    uint64_t v34 = v46;
    uint64_t v35 = v50;
    v33(v46, v50, a4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v34, 0, 1, a4);
    swift_getAssociatedConformanceWitness();
    sub_25A50E990();
    sub_25A50E9E0();
    uint64_t v36 = (uint64_t (*)(char *, uint64_t))v49;
    v49(v35, a4);
    return v36(v48, a4);
  }
}

uint64_t IdentifiedSet.intersection<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_25A3A9858(a1, a2, a3, a4, IdentifiedSet.formIntersection<A>(_:), a5);
}

uint64_t sub_25A3A9858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, void *a6@<X8>)
{
  *a6 = *v6;
  swift_bridgeObjectRetain();
  return a5(a1, a2, a3, a4);
}

uint64_t IdentifiedSet.values.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v10[5] = v2;
  v10[2] = v3;
  v10[3] = v4;
  uint64_t v5 = sub_25A50E950();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = sub_25A39F5D4((void (*)(char *, char *))sub_25A3AC934, (uint64_t)v10, v5, v3, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t IdentifiedSet.ids.getter()
{
  return sub_25A50F540();
}

uint64_t IdentifiedSet.startIndex.getter(uint64_t a1)
{
  return sub_25A3A9AEC(a1, MEMORY[0x263F8CFC8]);
}

uint64_t IdentifiedSet.endIndex.getter(uint64_t a1)
{
  return sub_25A3A9AEC(a1, MEMORY[0x263F8D058]);
}

uint64_t sub_25A3A9AEC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return a2(v4, AssociatedTypeWitness, v5, AssociatedConformanceWitness);
}

uint64_t IdentifiedSet.index(after:)()
{
  return sub_25A50E930();
}

uint64_t IdentifiedSet.subscript.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v5 - v2;
  swift_getAssociatedConformanceWitness();
  sub_25A50E9F0();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t sub_25A3A9D7C@<X0>(uint64_t a1@<X8>)
{
  return sub_25A3A9DAC((uint64_t (*)(void))IdentifiedSet.startIndex.getter, a1);
}

uint64_t sub_25A3A9D94@<X0>(uint64_t a1@<X8>)
{
  return sub_25A3A9DAC((uint64_t (*)(void))IdentifiedSet.endIndex.getter, a1);
}

uint64_t sub_25A3A9DAC@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5 & 1;
  return result;
}

uint64_t (*sub_25A3A9DE0(void *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_25A3A9E58(v6, *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), a3);
  return sub_25A3A9E54;
}

uint64_t (*sub_25A3A9E58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v5 = *(void *)(a5 + 16);
  *a1 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  a1[1] = v6;
  a1[2] = malloc(*(void *)(v6 + 64));
  IdentifiedSet.subscript.getter();
  return sub_25A3A9F28;
}

void sub_25A3A9F3C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -2;
}

uint64_t sub_25A3A9F64@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = IdentifiedSet.index(after:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_25A3A9FA4(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = IdentifiedSet.index(after:)();
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t result = sub_25A3ACF28(v2, v3, v4);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v9 & 1;
  return result;
}

uint64_t sub_25A3AA020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return IdentifiedSet.init(arrayLiteral:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_25A3AA02C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t result = IdentifiedSet.startIndex.getter(a1);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 24) = v7 & 1;
  return result;
}

uint64_t sub_25A3AA06C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_25A3AA0C0()
{
  return 2;
}

uint64_t sub_25A3AA0C8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_25A3AA120()
{
  return sub_25A50EF70();
}

uint64_t static IdentifiedSet<>.== infix(_:_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return sub_25A50E9B0();
}

uint64_t sub_25A3AA1F4()
{
  return static IdentifiedSet<>.== infix(_:_:)();
}

void OrderedIdentifiedSet.subscript.modify(void *a1, uint64_t a2, uint64_t a3)
{
  char v7 = malloc(0x48uLL);
  *a1 = v7;
  *char v7 = a3;
  v7[1] = v3;
  uint64_t v8 = sub_25A50FA40();
  v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  void v7[4] = malloc(v10);
  v7[5] = malloc(v10);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[6] = AssociatedTypeWitness;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = v12;
  v7[7] = v12;
  v7[8] = malloc(*(void *)(v12 + 64));
  (*(void (**)(void))(v13 + 16))();
  OrderedIdentifiedSet.subscript.getter(a2, a3);
}

{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;

  char v7 = malloc(0x48uLL);
  *a1 = v7;
  *char v7 = a3;
  v7[1] = v3;
  uint64_t v8 = sub_25A50FA40();
  v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  void v7[4] = malloc(v10);
  v7[5] = malloc(v10);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[6] = AssociatedTypeWitness;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = v12;
  v7[7] = v12;
  v7[8] = malloc(*(void *)(v12 + 64));
  (*(void (**)(void))(v13 + 16))();
  OrderedIdentifiedSet.subscript.getter(a2, a3);
}

uint64_t (*sub_25A3AA368())()
{
  return sub_25A3AA3A0;
}

void _s20PreviewsFoundationOS20OrderedIdentifiedSetVyxSg2IDQzcig_0()
{
}

uint64_t sub_25A3AA45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = type metadata accessor for OrderedIdentifiedSet();
  return a4(a2, v6);
}

uint64_t _s20PreviewsFoundationOS20OrderedIdentifiedSetVyxSg2IDQzcis_0(uint64_t a1, uint64_t a2)
{
  sub_25A3AC98C(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  uint64_t v5 = sub_25A50FA40();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(a1, v5);
}

uint64_t (*sub_25A3AA6F0())()
{
  return sub_25A3AA3A0;
}

void sub_25A3AA728(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 56);
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  uint64_t v5 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 48);
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  char v7 = *(void **)(*(void *)a1 + 32);
  uint64_t v9 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v8 + 16))(*(void *)(*(void *)a1 + 32), v5, v9);
    sub_25A3AC98C((uint64_t)v7, (uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    size_t v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v7, v9);
    v10(v5, v9);
  }
  else
  {
    sub_25A3AC98C(*(void *)(*(void *)a1 + 40), (uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v9);
  }
  free(v3);
  free(v5);
  free(v7);

  free(v2);
}

double OrderedIdentifiedSet.init()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  uint64_t v5 = sub_25A50F120();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  OrderedDictionary.init(dictionaryLiteral:)(v5, AssociatedTypeWitness, a1, AssociatedConformanceWitness, &v8);
  double result = *(double *)&v8;
  *a2 = v8;
  return result;
}

double OrderedIdentifiedSet.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  uint64_t v9 = sub_25A50F120();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  OrderedDictionary.init(dictionaryLiteral:)(v9, AssociatedTypeWitness, a2, AssociatedConformanceWitness, &v12);
  type metadata accessor for OrderedDictionary();
  sub_25A50EFB0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  double result = *(double *)&v13;
  *a4 = v13;
  return result;
}

uint64_t sub_25A3AAAA0(uint64_t a1, uint64_t a2)
{
  v13[1] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)v13 - v5;
  uint64_t v7 = sub_25A50FA40();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  size_t v10 = (char *)v13 - v9;
  sub_25A50FDE0();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for OrderedDictionary();
  OrderedDictionary.updateValue(_:forKey:)(a2, (uint64_t)v6, v11, (uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

double OrderedIdentifiedSet.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a1;
  uint64_t v5 = sub_25A50F1E0();
  swift_getWitnessTable();
  OrderedIdentifiedSet.init<A>(_:)((uint64_t)&v7, a2, v5, &v8);
  double result = *(double *)&v8;
  *a3 = v8;
  return result;
}

void OrderedIdentifiedSet.contains(_:)()
{
  uint64_t v1 = sub_25A50FA40();
  MEMORY[0x270FA5388](v1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25A50FDE0();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OrderedDictionary();
  OrderedDictionary.subscript.getter();
}

BOOL sub_25A3AAEC0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  BOOL v7 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 48))(v2, 1, v1) != 1;
  (*(void (**)(uint64_t, void))(v0 + 8))(v2, *(void *)(v6 - 104));
  return v7;
}

uint64_t OrderedIdentifiedSet.insert(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  BOOL v7 = (char *)&v10 - v6;
  sub_25A50FDE0();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for OrderedDictionary();
  OrderedDictionary.updateValue(_:forKey:)(a1, (uint64_t)v7, v8, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
}

uint64_t OrderedIdentifiedSet.remove(_:)@<X0>(char *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v8 - v4;
  sub_25A50FDE0();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for OrderedDictionary();
  OrderedDictionary.removeValue(forKey:)((uint64_t)v5, v6, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
}

Swift::Void __swiftcall OrderedIdentifiedSet.removeAll()()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OrderedDictionary();

  OrderedDictionary.removeAll()();
}

double OrderedIdentifiedSet.filter(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v11 = *v4;
  uint64_t v10 = v4[1];
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(a3 + 24);
  OrderedIdentifiedSet.init()(v12, &v18);
  v16[6] = v11;
  v16[7] = v10;
  v16[2] = v12;
  v16[3] = v13;
  v16[4] = a1;
  v16[5] = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = (void *)type metadata accessor for OrderedDictionary();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OrderedDictionary.filter(_:)((uint64_t (*)(char *, char *))sub_25A3ACB8C, (uint64_t)v16, v14, &v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v6)
  {
    double result = *(double *)&v17;
    *a4 = v17;
  }
  return result;
}

uint64_t OrderedIdentifiedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  OrderedIdentifiedSet.init<A>(_:)((uint64_t)v6, *(void *)(a2 + 16), a3, &v10);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = (void *)type metadata accessor for OrderedDictionary();
  OrderedDictionary.append(contentsOf:)((uint64_t *)&v10, v8);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t OrderedIdentifiedSet.appending<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_25A3ABFA0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OrderedIdentifiedSet.append<A>(contentsOf:), a5);
}

uint64_t OrderedIdentifiedSet.subtract<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v33 = a4;
  uint64_t v34 = a1;
  uint64_t v32 = a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v29 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_25A50FA40();
  uint64_t v27 = *(void *)(v31 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v31);
  long long v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v26 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v34, a3);
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v33 = v19;
  uint64_t v34 = AssociatedTypeWitness;
  uint64_t v30 = AssociatedConformanceWitness;
  sub_25A50FAF0();
  uint64_t v21 = v29;
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v22(v13, 1, v5) != 1)
  {
    uint64_t v29 = *(void *)(v21 + 32);
    uint64_t v23 = (void (**)(char *, uint64_t))(v27 + 8);
    uint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
    do
    {
      ((void (*)(char *, char *, uint64_t))v29)(v7, v13, v5);
      OrderedIdentifiedSet.remove(_:)(v10);
      (*v23)(v10, v31);
      (*v24)(v7, v5);
      sub_25A50FAF0();
    }
    while (v22(v13, 1, v5) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v33, v34);
}

uint64_t OrderedIdentifiedSet.subtracting<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_25A3ABFA0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OrderedIdentifiedSet.subtract<A>(_:), a5);
}

__n128 OrderedIdentifiedSet.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  Sequence<>.identified()(a3, a4, *(void *)(a2 + 24), &v17);
  uint64_t v7 = v4->n128_i64[1];
  unint64_t v15 = v4->n128_u64[0];
  uint64_t v16 = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getTupleTypeMetadata2();
  uint64_t v10 = sub_25A50F120();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  OrderedDictionary.init(dictionaryLiteral:)(v10, AssociatedTypeWitness, v8, AssociatedConformanceWitness, &v14);
  type metadata accessor for OrderedDictionary();
  swift_getWitnessTable();
  sub_25A50EFB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 v13 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = v13;
  *uint64_t v5 = v13;
  return result;
}

uint64_t sub_25A3ABB10(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v53 = a6;
  uint64_t v51 = a3;
  uint64_t v49 = a1;
  uint64_t v8 = sub_25A50FA40();
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v45 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  char v48 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v46 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = *(void *)(a4 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v17);
  uint64_t v52 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v21;
  uint64_t v23 = *(int *)(v21 + 48);
  uint64_t v24 = &v19[v23];
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v28 = v26 + 16;
  uint64_t v47 = a2;
  uint64_t v40 = v27;
  v27(v19, a2, AssociatedTypeWitness);
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  uint64_t v50 = v24;
  uint64_t v41 = v29;
  uint64_t v42 = v25;
  v29(v24, v25, a4);
  uint64_t v54 = v51;
  type metadata accessor for IdentifiedSet();
  IdentifiedSet.subscript.getter();
  uint64_t v30 = (uint64_t (**)(char *, uint64_t))(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v12, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v45);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v50, a4);
    return (*v30)(v19, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v52, v12, a4);
    uint64_t v51 = *(void (**)(void, void))(v20 + 8);
    v51(v50, a4);
    (*v30)(v19, AssociatedTypeWitness);
    uint64_t v32 = (uint64_t)v46;
    uint64_t v50 = &v46[*(int *)(v43 + 48)];
    uint64_t v33 = v50;
    v40(v46, v47, AssociatedTypeWitness);
    uint64_t v34 = v41;
    v41(v33, v42, a4);
    uint64_t v35 = v48;
    uint64_t v36 = v52;
    v34(v48, v52, a4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v35, 0, 1, a4);
    swift_getAssociatedConformanceWitness();
    uint64_t v37 = type metadata accessor for OrderedDictionary();
    OrderedDictionary.subscript.setter(v35, v32, v37);
    uint64_t v38 = (uint64_t (*)(char *, uint64_t))v51;
    v51(v36, a4);
    return v38(v50, a4);
  }
}

uint64_t OrderedIdentifiedSet.intersection<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_25A3ABFA0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OrderedIdentifiedSet.formIntersection<A>(_:), a5);
}

uint64_t sub_25A3ABFA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, void *a6@<X8>)
{
  uint64_t v12 = *v6;
  uint64_t v13 = v6[1];
  *a6 = v12;
  a6[1] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a5(a1, a2, a3, a4);
}

uint64_t OrderedIdentifiedSet.values.getter(uint64_t a1)
{
  return sub_25A3AC0FC(a1, (uint64_t (*)(uint64_t))OrderedDictionary.values.getter);
}

uint64_t OrderedIdentifiedSet.ids.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OrderedDictionary();
  sub_25A3DB38C();

  return swift_bridgeObjectRetain();
}

uint64_t OrderedIdentifiedSet.startIndex.getter()
{
  return 0;
}

uint64_t OrderedIdentifiedSet.endIndex.getter(uint64_t a1)
{
  return sub_25A3AC0FC(a1, (uint64_t (*)(uint64_t))OrderedDictionary.endIndex.getter);
}

uint64_t sub_25A3AC0FC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for OrderedDictionary();
  return a2(v3);
}

Swift::Int __swiftcall OrderedIdentifiedSet.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t OrderedIdentifiedSet.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v11 - v7;
  long long v11 = *v2;
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = (void *)type metadata accessor for OrderedDictionary();
  OrderedDictionary.subscript.getter((uint64_t)v8, a2, a1, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
}

uint64_t sub_25A3AC2FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = OrderedIdentifiedSet.endIndex.getter(a1);
  *a2 = result;
  return result;
}

uint64_t (*sub_25A3AC324(void *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_25A3AC3DC(v6, *a2, a3);
  return sub_25A3A9E54;
}

void sub_25A3AC394(void *a1)
{
  BOOL v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_25A3AC3DC(void *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = *(void *)(a3 + 16);
  *a1 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  a1[1] = v6;
  uint64_t v7 = malloc(*(void *)(v6 + 64));
  a1[2] = v7;
  OrderedIdentifiedSet.subscript.getter(a2, (uint64_t)v7);
  return sub_25A3A9F28;
}

void sub_25A3AC494(void *a1)
{
  BOOL v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);

  free(v1);
}

void sub_25A3AC4E0(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *sub_25A3AC4F0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *sub_25A3AC508(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

double sub_25A3AC520@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return OrderedIdentifiedSet.init(arrayLiteral:)(a1, *(void *)(a2 + 16), a3);
}

__n128 sub_25A3AC52C@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_25A3AC53C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_25A3AC590(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t static OrderedIdentifiedSet<>.== infix(_:_:)(long long *a1, long long *a2, uint64_t a3)
{
  long long v4 = *a1;
  long long v8 = *a2;
  long long v9 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return static OrderedDictionary<>.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8, AssociatedTypeWitness, a3, AssociatedConformanceWitness) & 1;
}

uint64_t sub_25A3AC690(long long *a1, long long *a2, uint64_t a3)
{
  return static OrderedIdentifiedSet<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t sub_25A3AC6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50FA40();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v12 - v9, a2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  swift_getAssociatedConformanceWitness();
  sub_25A50E990();
  return sub_25A50E9E0();
}

uint64_t sub_25A3AC880@<X0>(uint64_t a1@<X8>)
{
  return sub_25A3AC8BC(a1);
}

uint64_t sub_25A3AC898(uint64_t a1, uint64_t a2)
{
  return sub_25A3A8244(a1, a2, v2[6], v2[7], v2[2]);
}

uint64_t sub_25A3AC8BC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v1 + 16) - 8) + 16))(a1);
}

uint64_t sub_25A3AC910(uint64_t a1, uint64_t a2)
{
  return sub_25A3A93C8(a1, a2, *(void (**)(void, void))(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_25A3AC934@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, a1);
}

uint64_t sub_25A3AC98C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50FA40();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14 - v9, a2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for OrderedDictionary();
  return OrderedDictionary.subscript.setter(v7, (uint64_t)v10, v12);
}

uint64_t sub_25A3ACB6C(uint64_t a1, uint64_t a2)
{
  return sub_25A3AAAA0(a1, a2);
}

uint64_t sub_25A3ACB8C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 32))(a2) & 1;
}

uint64_t sub_25A3ACBBC(uint64_t a1, uint64_t a2)
{
  return sub_25A3ABB10(a1, a2, *(void (**)(void, void))(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_25A3ACBE0()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A3ACBFC()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A3ACC18()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A3ACC34()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A3ACC50()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A3ACC6C()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A3ACC88()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t sub_25A3ACC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3AC6A0(a1, a3);
}

uint64_t sub_25A3ACCE8()
{
  return 16;
}

__n128 sub_25A3ACCF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_25A3ACD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3AA45C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))OrderedIdentifiedSet.subscript.getter);
}

uint64_t sub_25A3ACD30()
{
  return 16;
}

__n128 sub_25A3ACD3C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_25A3ACD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3AA45C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))OrderedIdentifiedSet.subscript.getter);
}

uint64_t keypath_set_3Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3AC98C(a1, a3);
}

uint64_t sub_25A3ACDC8()
{
  return 16;
}

__n128 sub_25A3ACDD4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata accessor for IdentifiedSet()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for BuiltProductPathResolver.Cache()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s20PreviewsFoundationOS24BuiltProductPathResolverC5CacheVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BuiltProductPathResolver.Cache(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for BuiltProductPathResolver.Cache(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for OrderedIdentifiedSet()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3ACF28(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SendableAnyHashable.base.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A3937CC(v1, a1);
}

uint64_t SendableAnyHashable.init<A>(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4[3] = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  uint64_t v13 = *(void (**)(uint64_t *, char *, uint64_t))(v8 + 16);
  v13(boxed_opaque_existential_1, a1, a2);
  v13((uint64_t *)v10, a1, a2);
  unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  uint64_t v16 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v16(v15 + v14, v10, a2);
  a4[4] = (uint64_t)sub_25A3AD118;
  a4[5] = v15;
  v16((unint64_t)v10, a1, a2);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v21;
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = v18;
  uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v16)(v17 + v14, v10, a2);
  a4[6] = (uint64_t)sub_25A3AD420;
  a4[7] = v17;
  return result;
}

uint64_t sub_25A3AD118()
{
  return sub_25A50EA20();
}

uint64_t sub_25A3AD174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_25A50FA40();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v17[-v8];
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_25A3937CC(a1, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416260);
  char v13 = swift_dynamicCast();
  unint64_t v14 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v13)
  {
    v14(v9, 0, 1, a3);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v12, v9, a3);
    char v15 = sub_25A50EBE0();
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, a3);
  }
  else
  {
    v14(v9, 1, 1, a3);
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_25A3AD420(uint64_t a1)
{
  return sub_25A3AD174(a1, v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)), *(void *)(v1 + 16));
}

uint64_t static SendableAnyHashable.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 48))(a2) & 1;
}

uint64_t SendableAnyHashable.hash(into:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t SendableAnyHashable.description.getter()
{
  sub_25A3937CC(v0, (uint64_t)&v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416260);
  return sub_25A50EC90();
}

uint64_t SendableAnyHashable.hashValue.getter()
{
  sub_25A5104E0();
  (*(void (**)(unsigned char *))(v0 + 32))(v2);
  return sub_25A510530();
}

uint64_t sub_25A3AD540()
{
  sub_25A5104E0();
  (*(void (**)(unsigned char *))(v0 + 32))(v2);
  return sub_25A510530();
}

uint64_t sub_25A3AD588()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_25A3AD5B0()
{
  sub_25A5104E0();
  (*(void (**)(unsigned char *))(v0 + 32))(v2);
  return sub_25A510530();
}

unint64_t sub_25A3AD5F8()
{
  unint64_t result = qword_26A416268;
  if (!qword_26A416268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416268);
  }
  return result;
}

uint64_t sub_25A3AD64C()
{
  sub_25A3937CC(v0, (uint64_t)&v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416260);
  return sub_25A50EC90();
}

uint64_t sub_25A3AD68C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 48))(a2) & 1;
}

uint64_t destroy for SendableAnyHashable(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SendableAnyHashable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v5;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for SendableAnyHashable(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_0(a1, a2);
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[7];
  a1[6] = a2[6];
  a1[7] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_OWORD *assignWithTake for SendableAnyHashable(_OWORD *a1, _OWORD *a2)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SendableAnyHashable(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SendableAnyHashable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SendableAnyHashable()
{
  return &type metadata for SendableAnyHashable;
}

uint64_t CommandLineArgumentConsumer.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineArgumentConsumer.limit.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t CommandLineArgumentConsumer.aggregate.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t CommandLineArgumentConsumer.init(_:limit:aggregate:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if ((a4 & 1) != 0 || a3)
  {
    *(void *)a7 = result;
    *(void *)(a7 + 8) = a2;
    *(void *)(a7 + 16) = a3;
    *(unsigned char *)(a7 + 24) = a4 & 1;
    *(void *)(a7 + 32) = a5;
    *(void *)(a7 + 40) = a6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CommandLineArgumentConsumer.init(_:string:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_25A3ADC3C(a1, a2, a3, 1, 0, (uint64_t)sub_25A3ADBD0, a4);
}

uint64_t sub_25A3ADBD0()
{
  return swift_setAtWritableKeyPath();
}

uint64_t CommandLineArgumentConsumer.init(_:strings:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_25A3ADC3C(a1, a2, a3, 0, 1, (uint64_t)sub_25A3ADD54, a4);
}

uint64_t sub_25A3ADC3C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a4;
  *(unsigned char *)(a7 + 24) = a5;
  *(void *)(a7 + 32) = a6;
  *(void *)(a7 + 40) = a3;
  return result;
}

uint64_t sub_25A3ADC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t v5 = (uint64_t (*)(uint64_t *, void))swift_modifyAtWritableKeyPath();
  uint64_t v7 = v6;
  uint64_t v8 = *v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v7 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v8 = sub_25A38A5A4(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t v8 = sub_25A38A5A4((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  void v8[2] = v11 + 1;
  uint64_t v12 = &v8[2 * v11];
  v12[4] = a2;
  v12[5] = a3;
  return v5(&v14, 0);
}

uint64_t sub_25A3ADD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3ADC50(a1, a2, a3);
}

uint64_t CommandLineArgumentConsumer.shortUsage.getter()
{
  v4[0] = *(_OWORD *)(v0 + 16);
  v4[1] = *(_OWORD *)(v0 + 32);
  sub_25A3ADEE0((uint64_t)v4, (uint64_t)v5);
  uint64_t result = sub_25A3ADEE0((uint64_t)v5, (uint64_t)&v6);
  if (v7 == 1)
  {
    sub_25A50EA50();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    return 91;
  }
  if (v6 == 1) {
    return sub_25A50EA50();
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    MEMORY[0x270FA5388](result);
    sub_25A3ADFF8(0, v3, (uint64_t (*)(uint64_t, uint64_t))sub_25A3ADFF0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
    sub_25A3A108C();
    uint64_t v2 = sub_25A50EAD0();
    swift_bridgeObjectRelease();
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t sub_25A3ADEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_26A416270);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A3ADF48(uint64_t a1)
{
  uint64_t result = sub_25A50EA50();
  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    sub_25A5102B0();
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v3;
  }
  return result;
}

uint64_t sub_25A3ADFF0(uint64_t a1)
{
  return sub_25A3ADF48(a1);
}

uint64_t sub_25A3ADFF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t result = sub_25A39A068(0, 0, 0);
  uint64_t v6 = a2 - a1;
  if (a2 == a1) {
    return v15;
  }
  if (a2 >= a1)
  {
    uint64_t v7 = 0;
    while (v6 != v7)
    {
      if (__OFADD__(v7, 1)) {
        goto LABEL_12;
      }
      uint64_t result = a3(v7, a1 + v7);
      uint64_t v8 = result;
      uint64_t v10 = v9;
      unint64_t v12 = *(void *)(v15 + 16);
      unint64_t v11 = *(void *)(v15 + 24);
      if (v12 >= v11 >> 1) {
        uint64_t result = sub_25A39A068(v11 > 1, v12 + 1, 1);
      }
      *(void *)(v15 + 16) = v12 + 1;
      uint64_t v13 = v15 + 16 * v12;
      *(void *)(v13 + 32) = v8;
      *(void *)(v13 + 40) = v10;
      if (v6 == ++v7) {
        return v15;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_25A3AE114()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_25A3AE150(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_25A3AE1A0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_25A3AE22C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagnosticsCollector.WriteFileAction(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagnosticsCollector.WriteFileAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for CommandLineArgumentConsumer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of static PredicateProtocol.isSatisfied(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

unint64_t sub_25A3AE348(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = sub_25A4E776C(a1, a3, a4);
  unint64_t result = sub_25A4E776C(a2, a3, a4);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_25A50ECF0();
        unint64_t v7 = result;
      }
      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = sub_25A50FE60();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14) {
        return v11;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_25A50ED00();
        unint64_t v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = sub_25A50FE60();
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14) {
        return v11;
      }
    }
    goto LABEL_36;
  }
  return 0;
}

uint64_t sub_25A3AE55C(unsigned int a1)
{
  if (a1 <= 0x19)
  {
    unsigned int v4 = a1 + 97;
LABEL_7:
    unsigned int v6 = v4 + 1;
LABEL_8:
    v11[1] = v2;
    uint64_t v11[2] = v3;
    v11[0] = (v6 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v6) >> 3))));
    return MEMORY[0x26113CD20](v11);
  }
  unsigned int v4 = a1 + 39;
  if (a1 >= 0xFFFFFFD9)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (HIWORD(v4) <= 0x10u && (v4 & 0xFFFFF800) != 0xD800)
  {
    if (v4 <= 0x7F) {
      goto LABEL_7;
    }
    int v1 = (v4 & 0x3F) << 8;
    if (v4 < 0x800)
    {
      unsigned int v6 = (v1 | (v4 >> 6)) + 33217;
      goto LABEL_8;
    }
LABEL_14:
    unsigned int v7 = v4 >> 12;
    int v8 = (v1 | (v4 >> 6) & 0x3F) << 8;
    unsigned int v9 = HIWORD(v4);
    unsigned int v6 = (((v8 | (v4 >> 12) & 0x3F) << 8) | (v4 >> 18)) - 2122219023;
    int v10 = (v8 | v7) + 8487393;
    if (!v9) {
      unsigned int v6 = v10;
    }
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_25A3AE670(uint64_t result, unsigned int a2, char a3)
{
  unsigned int v3 = result >> 1;
  if (a3) {
    unsigned int v3 = result / 0x2BC;
  }
  if (!a2)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  unsigned int v4 = v3 / a2 + v3;
  if (v4 >= 0x1C8)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = v5 + 36;
      if (v5 >= 0xFFFFFFDC) {
        break;
      }
      unsigned int v7 = v4 / 0x23;
      v5 += 36;
      unsigned int v8 = v4 >> 3;
      v4 /= 0x23u;
      if (v8 <= 0x7CA)
      {
        unsigned int v4 = v7;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  unsigned int v6 = 0;
LABEL_10:
  unsigned int v9 = 36 * v4 / (v4 + 38);
  uint64_t result = v6 + v9;
  if (__CFADD__(v6, v9)) {
    goto LABEL_14;
  }
  return result;
}

uint64_t _s20PreviewsFoundationOS8PunycodeO6encode6stringSSSgSS_tFZ_0(unint64_t a1, unint64_t a2)
{
  unint64_t v4 = 0xE000000000000000;
  uint64_t v78 = 0;
  unint64_t v79 = 0xE000000000000000;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    goto LABEL_161;
  }
  swift_bridgeObjectRetain_n();
  for (uint64_t i = 0; i < v5; i += v12)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v9 = sub_25A50FDA0();
      uint64_t v12 = v11;
      if (v9 <= 0x7F) {
        goto LABEL_6;
      }
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        uint64_t v76 = a1;
        uint64_t v77 = a2 & 0xFFFFFFFFFFFFFFLL;
        unsigned int v9 = *((unsigned __int8 *)&v76 + i);
        if (*((char *)&v76 + i) < 0)
        {
          switch(__clz(v9 ^ 0xFF))
          {
            case 0x1Au:
              int v10 = (char *)&v76 + i;
LABEL_22:
              unsigned int v9 = v10[1] & 0x3F | ((v9 & 0x1F) << 6);
              uint64_t v12 = 2;
              if (v9 <= 0x7F) {
                goto LABEL_6;
              }
              break;
            case 0x1Bu:
              int v13 = (char *)&v76 + i;
LABEL_26:
              unsigned int v9 = ((v9 & 0xF) << 12) | ((v13[1] & 0x3F) << 6) | v13[2] & 0x3F;
              uint64_t v12 = 3;
              if (v9 <= 0x7F) {
                goto LABEL_6;
              }
              break;
            case 0x1Cu:
              int v14 = (char *)&v76 + i;
LABEL_30:
              unsigned int v9 = ((v9 & 0xF) << 18) | ((v14[1] & 0x3F) << 12) | ((v14[2] & 0x3F) << 6) | v14[3] & 0x3F;
              uint64_t v12 = 4;
              if (v9 <= 0x7F) {
                goto LABEL_6;
              }
              break;
            default:
              goto LABEL_18;
          }
          continue;
        }
      }
      else
      {
        uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a1 & 0x1000000000000000) == 0) {
          uint64_t v8 = sub_25A50FE60();
        }
        unsigned int v9 = *(unsigned __int8 *)(v8 + i);
        if (*(char *)(v8 + i) < 0)
        {
          switch(__clz(v9 ^ 0xFF))
          {
            case 0x1Au:
              int v10 = (char *)(i + v8);
              goto LABEL_22;
            case 0x1Bu:
              int v13 = (char *)(i + v8);
              goto LABEL_26;
            case 0x1Cu:
              int v14 = (char *)(i + v8);
              goto LABEL_30;
            default:
              break;
          }
        }
      }
LABEL_18:
      uint64_t v12 = 1;
      if (v9 <= 0x7F)
      {
LABEL_6:
        uint64_t v76 = v9;
        uint64_t v7 = MEMORY[0x26113CD20](&v76, 1);
        MEMORY[0x26113CD90](v7);
        swift_bridgeObjectRelease();
        continue;
      }
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v78;
  unint64_t v15 = v79;
  unint64_t v4 = 0xE000000000000000;
  while (1)
  {
    uint64_t v78 = 0;
    unint64_t v79 = v4;
    unint64_t v17 = sub_25A50ED50();
    if ((v17 & 0x8000000000000000) != 0) {
      goto LABEL_167;
    }
    int v18 = v17;
    if (HIDWORD(v17)) {
      goto LABEL_167;
    }
    uint64_t v19 = 7;
    if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
      uint64_t v19 = 11;
    }
    unint64_t v71 = v19 | (v5 << 16);
    if ((uint64_t)sub_25A3AE348(0xFuLL, v71, a1, a2) <= v17)
    {
LABEL_141:
      uint64_t v64 = v78;
      uint64_t v65 = HIBYTE(v79) & 0xF;
      if ((v79 & 0x2000000000000000) == 0) {
        uint64_t v65 = v78 & 0xFFFFFFFFFFFFLL;
      }
      if (v65)
      {
        uint64_t v66 = HIBYTE(v15) & 0xF;
        if ((v15 & 0x2000000000000000) == 0) {
          uint64_t v66 = v16 & 0xFFFFFFFFFFFFLL;
        }
        if (v66)
        {
          uint64_t v76 = v16;
          uint64_t v77 = v15;
          sub_25A50EDA0();
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
          return v76;
        }
        else
        {
          swift_bridgeObjectRelease();
          return v64;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      return v16;
    }
    int v20 = v18;
    unsigned int v21 = 0;
    unsigned int v73 = 72;
    unsigned int v22 = 128;
    int v72 = v20;
    int v69 = v20;
    unint64_t v70 = v15;
    uint64_t v68 = v16;
LABEL_39:
    unsigned int v23 = 1114111;
    if (v5)
    {
      for (uint64_t j = 0; j < v5; j += v26)
      {
        if ((a2 & 0x1000000000000000) != 0)
        {
          unsigned int v25 = sub_25A50FDA0();
        }
        else
        {
          if ((a2 & 0x2000000000000000) != 0)
          {
            uint64_t v76 = a1;
            uint64_t v77 = a2 & 0xFFFFFFFFFFFFFFLL;
            unsigned int v25 = *((unsigned __int8 *)&v76 + j);
            if (*((char *)&v76 + j) < 0)
            {
              switch(__clz(v25 ^ 0xFF))
              {
                case 0x1Au:
                  uint64_t v29 = (char *)&v76 + j;
LABEL_59:
                  unsigned int v25 = v29[1] & 0x3F | ((v25 & 0x1F) << 6);
                  uint64_t v26 = 2;
                  break;
                case 0x1Bu:
                  uint64_t v30 = (char *)&v76 + j;
LABEL_62:
                  unsigned int v25 = ((v25 & 0xF) << 12) | ((v30[1] & 0x3F) << 6) | v30[2] & 0x3F;
                  uint64_t v26 = 3;
                  break;
                case 0x1Cu:
                  uint64_t v31 = (char *)&v76 + j;
LABEL_65:
                  unsigned int v25 = ((v25 & 0xF) << 18) | ((v31[1] & 0x3F) << 12) | ((v31[2] & 0x3F) << 6) | v31[3] & 0x3F;
                  uint64_t v26 = 4;
                  break;
                default:
                  goto LABEL_56;
              }
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t v28 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((a1 & 0x1000000000000000) == 0) {
              uint64_t v28 = sub_25A50FE60();
            }
            unsigned int v25 = *(unsigned __int8 *)(v28 + j);
            if (*(char *)(v28 + j) < 0)
            {
              switch(__clz(v25 ^ 0xFF))
              {
                case 0x1Au:
                  uint64_t v29 = (char *)(j + v28);
                  goto LABEL_59;
                case 0x1Bu:
                  uint64_t v30 = (char *)(j + v28);
                  goto LABEL_62;
                case 0x1Cu:
                  uint64_t v31 = (char *)(j + v28);
                  goto LABEL_65;
                default:
                  break;
              }
            }
          }
LABEL_56:
          uint64_t v26 = 1;
        }
LABEL_42:
        if (v25 >= v23) {
          unsigned int v27 = v23;
        }
        else {
          unsigned int v27 = v25;
        }
        if (v25 >= v22) {
          unsigned int v23 = v27;
        }
      }
    }
    if (v23 < v22)
    {
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      sub_25A510050();
      __break(1u);
      JUMPOUT(0x25A3AF0F8);
    }
    unsigned int v32 = v72;
    if (v72 == -1) {
      goto LABEL_163;
    }
    unint64_t v33 = (v23 - v22) * (unint64_t)(v72 + 1);
    if ((v33 & 0xFFFFFFFF00000000) != 0) {
      goto LABEL_164;
    }
    unsigned int v34 = v21 + v33;
    if (__CFADD__(v21, v33)) {
      break;
    }
    if (!v5) {
      goto LABEL_139;
    }
    swift_bridgeObjectRetain();
    uint64_t v35 = 0;
    while (1)
    {
      while (1)
      {
LABEL_74:
        if ((a2 & 0x1000000000000000) != 0)
        {
          unsigned int v36 = sub_25A50FDA0();
          goto LABEL_84;
        }
        if ((a2 & 0x2000000000000000) == 0)
        {
          uint64_t v38 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0) {
            uint64_t v38 = sub_25A50FE60();
          }
          unsigned int v36 = *(unsigned __int8 *)(v38 + v35);
          if (*(char *)(v38 + v35) < 0)
          {
            switch(__clz(v36 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v39 = (char *)(v35 + v38);
                goto LABEL_90;
              case 0x1Bu:
                uint64_t v40 = (char *)(v35 + v38);
                goto LABEL_93;
              case 0x1Cu:
                uint64_t v41 = (char *)(v35 + v38);
                goto LABEL_96;
              default:
                break;
            }
          }
LABEL_83:
          uint64_t v37 = 1;
          goto LABEL_84;
        }
        uint64_t v76 = a1;
        uint64_t v77 = a2 & 0xFFFFFFFFFFFFFFLL;
        unsigned int v36 = *((unsigned __int8 *)&v76 + v35);
        if ((*((char *)&v76 + v35) & 0x80000000) == 0) {
          goto LABEL_83;
        }
        switch(__clz(v36 ^ 0xFF))
        {
          case 0x1Au:
            uint64_t v39 = (char *)&v76 + v35;
LABEL_90:
            unsigned int v36 = v39[1] & 0x3F | ((v36 & 0x1F) << 6);
            uint64_t v37 = 2;
            break;
          case 0x1Bu:
            uint64_t v40 = (char *)&v76 + v35;
LABEL_93:
            unsigned int v36 = ((v36 & 0xF) << 12) | ((v40[1] & 0x3F) << 6) | v40[2] & 0x3F;
            uint64_t v37 = 3;
            break;
          case 0x1Cu:
            uint64_t v41 = (char *)&v76 + v35;
LABEL_96:
            unsigned int v36 = ((v36 & 0xF) << 18) | ((v41[1] & 0x3F) << 12) | ((v41[2] & 0x3F) << 6) | v41[3] & 0x3F;
            uint64_t v37 = 4;
            break;
          default:
            goto LABEL_83;
        }
LABEL_84:
        v35 += v37;
        if (v36 >= v23) {
          break;
        }
        if (v34 == -1) {
          goto LABEL_148;
        }
        ++v34;
        if (v35 >= v5)
        {
LABEL_137:
          unsigned int v63 = v34;
          unsigned int v62 = v72;
          goto LABEL_138;
        }
      }
      if (v36 == v23) {
        break;
      }
      if (v35 >= v5) {
        goto LABEL_137;
      }
    }
    unint64_t v4 = 36;
    unsigned int v42 = v34;
    while (1)
    {
      int v43 = v4 + 36;
      if (v4 < 0xFFFFFFDC)
      {
        if (v73 < v4) {
          goto LABEL_102;
        }
        if (!v42) {
          goto LABEL_133;
        }
        unsigned int v44 = 1;
LABEL_113:
        int v45 = v43;
        goto LABEL_114;
      }
      if (v73 < v4)
      {
        int v43 = -1;
LABEL_102:
        if (v73 >= 0xFFFFFFE6) {
          goto LABEL_158;
        }
        if (v4 >= v73 + 26)
        {
          if (v42 < 0x1A) {
            goto LABEL_133;
          }
          unsigned int v44 = 26;
        }
        else
        {
          unsigned int v44 = v4 - v73;
          if (v4 < v73) {
            goto LABEL_160;
          }
          if (v42 < v44)
          {
LABEL_133:
            uint64_t v60 = sub_25A3AE55C(v42);
            if (!v61)
            {
LABEL_148:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_149;
            }
            MEMORY[0x26113CD90](v60);
            swift_bridgeObjectRelease();
            unsigned int v62 = v72 + 1;
            if (v72 == -1) {
              goto LABEL_165;
            }
            unsigned int v73 = sub_25A3AE670(v34, v72 + 1, v72 == v69);
            unsigned int v34 = 0;
            unsigned int v63 = 0;
            ++v72;
            if (v35 >= v5)
            {
LABEL_138:
              unsigned int v34 = v63;
              swift_bridgeObjectRelease();
              unsigned int v32 = v62;
LABEL_139:
              int v72 = v32;
              unsigned int v21 = v34 + 1;
              uint64_t v16 = v68;
              if (v34 == -1) {
                goto LABEL_166;
              }
              unsigned int v22 = v23 + 1;
              unint64_t v15 = v70;
              if ((uint64_t)sub_25A3AE348(0xFuLL, v71, a1, a2) <= v32) {
                goto LABEL_141;
              }
              goto LABEL_39;
            }
            goto LABEL_74;
          }
        }
        goto LABEL_113;
      }
      if (!v42) {
        goto LABEL_133;
      }
      int v45 = -1;
      unsigned int v44 = 1;
LABEL_114:
      unsigned int v46 = v42 - v44;
      if (v42 < v44) {
        break;
      }
      unint64_t v4 = 36 - v44;
      if (v44 > 0x24) {
        goto LABEL_155;
      }
      if (!v4) {
        goto LABEL_156;
      }
      unsigned int v47 = v46 / v4;
      unsigned int v48 = v46 % v4;
      BOOL v49 = __CFADD__(v44, v48);
      unsigned int v50 = v44 + v48;
      if (v49) {
        goto LABEL_157;
      }
      unsigned int v74 = v45;
      unsigned int v75 = v47;
      if (v50 > 0x19)
      {
        BOOL v49 = __CFADD__(v50, 39);
        unsigned int v51 = v50 + 39;
        if (v49) {
          goto LABEL_159;
        }
        if (v51 >> 11 == 27 || v51 > 0x10FFFF) {
          goto LABEL_148;
        }
        if (v51 > 0x7F)
        {
          int v55 = (v51 & 0x3F) << 8;
          if (v51 >= 0x800)
          {
            unsigned int v56 = v51 >> 12;
            int v57 = (v55 | (v51 >> 6) & 0x3F) << 8;
            unsigned int v58 = HIWORD(v51);
            unsigned int v53 = (((v57 | (v51 >> 12) & 0x3F) << 8) | (v51 >> 18)) - 2122219023;
            int v59 = (v57 | v56) + 8487393;
            if (!v58) {
              unsigned int v53 = v59;
            }
          }
          else
          {
            unsigned int v53 = (v55 | (v51 >> 6)) + 33217;
          }
          goto LABEL_127;
        }
      }
      else
      {
        unsigned int v51 = v50 + 97;
      }
      unsigned int v53 = v51 + 1;
LABEL_127:
      uint64_t v76 = (v53 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v53) >> 3))));
      uint64_t v54 = MEMORY[0x26113CD20](&v76);
      MEMORY[0x26113CD90](v54);
      swift_bridgeObjectRelease();
      unint64_t v4 = v74;
      unsigned int v42 = v75;
      if (v74 == -1) {
        goto LABEL_133;
      }
    }
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    uint64_t v16 = 0;
    unint64_t v15 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
LABEL_149:
  swift_bridgeObjectRelease();
  return 0;
}

ValueMetadata *type metadata accessor for Punycode()
{
  return &type metadata for Punycode;
}

uint64_t Sequence.pairs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388]();
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t _s20PreviewsFoundationOS17UncheckedSendableVyACyxGxcfC_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t PairSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v17 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_25A50FA40();
  uint64_t v15 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  unsigned int v6 = (char *)&v14 - v5;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v4);
  unsigned int v9 = (char *)&v14 - v8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = v1;
  sub_25A50FAF0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v3);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v17, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v6, AssociatedTypeWitness);
    uint64_t v12 = swift_getTupleTypeMetadata2();
    uint64_t v13 = v17;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v17, v9, AssociatedTypeWitness);
    sub_25A50FAF0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v13, 0, 1, v12);
  }
}

uint64_t sub_25A3AF578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v5(a2, a1, AssociatedTypeWitness);
}

uint64_t PairSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  sub_25A50EEF0();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v11, AssociatedTypeWitness);
}

uint64_t sub_25A3AF794()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A3AF7B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  PairSequence.makeIterator()(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t sub_25A3AF810()
{
  return 0;
}

uint64_t sub_25A3AF81C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25A3AF8AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_25A3AF964(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_25A3AF990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_25A3AF9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_25A3AFA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_25A3AFA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_25A3AFAD0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_25A3AFC2C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x25A3AFE44);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for PairSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3AFE84()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25A3AFF24(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_25A3B0000(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t sub_25A3B007C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_25A3B00F4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_25A3B016C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_25A3B01E4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_25A3B025C(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        int v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void sub_25A3B040C(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x25A3B0648);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t type metadata accessor for PairSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FulfillOnceState.__allocating_init(waitingState:initializationCallsite:initializationInfo:failureMode:thingDescription:actionPastParticiple:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = sub_25A3B275C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 80) - 8) + 8))(a1);
  return v11;
}

uint64_t FulfillOnceState.updateWaitingState<A>(update:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  uint64_t v15 = v3[18];
  uint64_t v10 = *(void *)(v4 + 80);
  uint64_t v11 = *(void *)(v4 + 88);
  uint64_t v12 = a3;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  type metadata accessor for FulfillOnceState.State();
  uint64_t v5 = sub_25A50E5B0();
  uint64_t updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FulfillOnce.swift", 123, 2, 75, 25, (uint64_t)"updateWaitingState(update:)", 27, 2, (uint64_t)sub_25A3B2800, (uint64_t)v9, v5, updated, WitnessTable);
  return swift_release();
}

uint64_t FulfillOnceState.fulfill(callsite:makeFulfilledState:ifAlreadyFulfilled:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v6 = a1[1];
  long long v17 = *a1;
  long long v18 = v6;
  v19[0] = a1[2];
  *(_OWORD *)((char *)v19 + 9) = *(long long *)((char *)a1 + 41);
  uint64_t v16 = *(void *)(v5 + 144);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  type metadata accessor for FulfillOnceState.State();
  uint64_t v7 = sub_25A50E5B0();
  uint64_t v8 = type metadata accessor for FulfillOnceState.FulfillmentOutcome();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FulfillOnce.swift", 123, 2, 104, 29, (uint64_t)"fulfill(callsite:makeFulfilledState:ifAlreadyFulfilled:)", 56, 2, (uint64_t)sub_25A3B2854, (uint64_t)v11, v7, v8, WitnessTable);
  return swift_release();
}

__n128 FulfillOnceState.initializationCallsite.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  char v3 = *(unsigned char *)(v1 + 72);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(unsigned char *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 40);
  __n128 result = *(__n128 *)(v1 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 56) = v3;
  return result;
}

uint64_t FulfillOnceState.init(waitingState:initializationCallsite:initializationInfo:failureMode:thingDescription:actionPastParticiple:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *v9;
  uint64_t v12 = sub_25A3B2564(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 80) - 8) + 8))(a1);
  return v12;
}

uint64_t FulfillOnceState.__allocating_init<>(initializationCallsite:initializationInfo:failureMode:thingDescription:actionPastParticiple:)(long long *a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14 = *((unsigned char *)a1 + 56);
  long long v15 = *a1;
  char v20 = *((unsigned char *)a1 + 16);
  long long v21 = *(long long *)((char *)a1 + 24);
  long long v22 = *(long long *)((char *)a1 + 40);
  char v23 = v14;
  long long v18 = *a4;
  long long v19 = v15;
  uint64_t v16 = swift_allocObject();
  return sub_25A3B2564(v16, (uint64_t *)&v19, a2, a3, (uint64_t *)&v18, a5, a6, a7, a8);
}

void *FulfillOnceState.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = *(void *)(*v0 + 88);
  uint64_t v4 = type metadata accessor for FulfillOnceState.State();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - v6;
  v46[0] = v0[18];
  uint64_t v8 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FulfillOnce.swift", 123, 2, 58, 38, (uint64_t)"deinit", 6, 2, v8, WitnessTable);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v7, v2);
    uint64_t v11 = v1[14];
    uint64_t v10 = v1[15];
    uint64_t v12 = v1[17];
    uint64_t v44 = v1[16];
    uint64_t v45 = v11;
    uint64_t v13 = v1[2];
    uint64_t v14 = v1[3];
    char v15 = *((unsigned char *)v1 + 32);
    uint64_t v42 = v1[5];
    uint64_t v43 = v13;
    uint64_t v40 = v1[6];
    uint64_t v41 = v10;
    uint64_t v38 = v1[7];
    uint64_t v39 = v12;
    uint64_t v36 = v1[8];
    uint64_t v37 = v3;
    int v35 = *((unsigned __int8 *)v1 + 72);
    uint64_t v16 = (uint64_t (*)(uint64_t))v1[10];
    swift_bridgeObjectRetain();
    if (v16)
    {
      uint64_t v17 = swift_bridgeObjectRetain();
      uint64_t v34 = v16(v17);
      uint64_t v33 = v18;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = 0;
      uint64_t v33 = 0;
    }
    unint64_t v31 = v1[12];
    uint64_t v32 = v1[13];
    unint64_t v53 = v31;
    uint64_t v54 = v32;
    uint64_t v20 = v42;
    uint64_t v19 = v43;
    v46[0] = v43;
    v46[1] = v14;
    char v47 = v15;
    uint64_t v21 = v40;
    uint64_t v48 = v42;
    uint64_t v49 = v40;
    uint64_t v22 = v38;
    uint64_t v23 = v36;
    uint64_t v50 = v38;
    uint64_t v51 = v36;
    char v24 = v35;
    char v52 = v35;
    type metadata accessor for FulfillOnceState.Unfulfilled();
    swift_getWitnessTable();
    unsigned int v25 = (void *)swift_allocError();
    uint64_t v26 = v41;
    *(void *)uint64_t v27 = v45;
    *(void *)(v27 + 8) = v26;
    uint64_t v28 = v39;
    *(void *)(v27 + 16) = v44;
    *(void *)(v27 + 24) = v28;
    *(void *)(v27 + 32) = v19;
    *(void *)(v27 + 40) = v14;
    *(unsigned char *)(v27 + 48) = v15;
    *(void *)(v27 + 56) = v20;
    *(void *)(v27 + 64) = v21;
    *(void *)(v27 + 72) = v22;
    *(void *)(v27 + 80) = v23;
    *(unsigned char *)(v27 + 88) = v24;
    uint64_t v29 = v33;
    *(void *)(v27 + 96) = v34;
    *(void *)(v27 + 104) = v29;
    sub_25A3B28BC(v31);
    sub_25A3B0E88((uint64_t)v46, v25);
    sub_25A3B2890(v53);
  }
  sub_25A393228(v1[10]);
  sub_25A3B2890(v1[12]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

void sub_25A3B0E88(uint64_t a1, void *a2)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    if (v4 == (void (*)(uint64_t))1)
    {
      sub_25A403498();
    }
    else if (v4 == (void (*)(uint64_t))2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
      sub_25A50FFB0();
      sub_25A510060();
      __break(1u);
    }
    else
    {
      uint64_t v15 = swift_retain();
      v4(v15);
      sub_25A3B2890((unint64_t)v4);
    }
  }
  else
  {
    if (qword_26B329310 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_25A50E5E0();
    __swift_project_value_buffer(v5, (uint64_t)qword_26B3292F8);
    id v6 = a2;
    id v7 = a2;
    oslog = sub_25A50E5C0();
    os_log_type_t v8 = sub_25A50F830();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v18 = v16;
      *(_DWORD *)uint64_t v9 = 138412546;
      id v11 = a2;
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      sub_25A50FB00();
      *uint64_t v10 = v12;

      *(_WORD *)(v9 + 12) = 2080;
      uint64_t v13 = Callsite.description.getter();
      sub_25A3A36A4(v13, v14, &v18);
      sub_25A50FB00();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25A380000, oslog, v8, "FulfillOnce failure: %@, callsite: %s", (uint8_t *)v9, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(qword_26A416680);
      swift_arrayDestroy();
      MEMORY[0x26113F070](v10, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x26113F070](v16, -1, -1);
      MEMORY[0x26113F070](v9, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t FulfillOnceState.__deallocating_deinit()
{
  FulfillOnceState.deinit();

  return MEMORY[0x270FA0228](v0, 152, 7);
}

uint64_t sub_25A3B1254@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v18 = a3;
  uint64_t v19 = a2;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for FulfillOnceState.State();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v18 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a5 - 8) + 32))(a6, v15, a5);
    type metadata accessor for FulfillOnceState.WaitingStateUpdateResult();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, a4);
    v19(v12);
    type metadata accessor for FulfillOnceState.WaitingStateUpdateResult();
    swift_storeEnumTagMultiPayload();
    sub_25A3B14B4(a1, (uint64_t)v12, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  }
}

uint64_t sub_25A3B14B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FulfillOnceState.State();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v11 - v8, a2, a3);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 40))(a1, v9, v6);
}

uint64_t FulfillOnceState.snapshot.getter()
{
  type metadata accessor for FulfillOnceState.State();
  uint64_t v0 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  return SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FulfillOnce.swift", 123, 2, 89, 19, (uint64_t)"snapshot", 8, 2, v0, WitnessTable);
}

uint64_t sub_25A3B1694@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, void (*a6)(char *, void *)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v47 = a7;
  uint64_t v48 = a6;
  uint64_t v37 = a3;
  uint64_t v38 = a2;
  uint64_t v49 = a8;
  uint64_t v11 = *a5;
  uint64_t v46 = *a4;
  uint64_t v45 = a4[1];
  int v44 = *((unsigned __int8 *)a4 + 16);
  uint64_t v43 = a4[3];
  uint64_t v42 = a4[4];
  uint64_t v41 = a4[5];
  uint64_t v40 = a4[6];
  int v39 = *((unsigned __int8 *)a4 + 56);
  uint64_t v12 = *(void *)(v11 + 88);
  uint64_t v50 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v16 = *(void (**)(uint64_t))(v15 + 80);
  uint64_t v17 = type metadata accessor for FulfillOnceState.State();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v37 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v37 - v19, a1, v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v38 = v16;
    uint64_t v21 = &v20[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    *(_OWORD *)&v64[9] = *(_OWORD *)(v21 + 41);
    long long v22 = *((_OWORD *)v21 + 1);
    long long v62 = *(_OWORD *)v21;
    long long v63 = v22;
    *(_OWORD *)uint64_t v64 = *((_OWORD *)v21 + 2);
    uint64_t v23 = v50;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v14, v20, v12);
    unint64_t v24 = a5[12];
    uint64_t v25 = a5[13];
    uint64_t v26 = swift_allocObject();
    long long v27 = v63;
    *(_OWORD *)(v26 + 24) = v62;
    *(_OWORD *)(v26 + 40) = v27;
    *(_OWORD *)(v26 + 56) = *(_OWORD *)v64;
    *(_OWORD *)(v26 + 65) = *(_OWORD *)&v64[9];
    long long v28 = *((_OWORD *)a4 + 1);
    *(_OWORD *)(v26 + 88) = *(_OWORD *)a4;
    *(void *)(v26 + 16) = a5;
    *(_OWORD *)(v26 + 104) = v28;
    *(_OWORD *)(v26 + 120) = *((_OWORD *)a4 + 2);
    *(_OWORD *)(v26 + 129) = *(_OWORD *)((char *)a4 + 41);
    v51[0] = v46;
    v51[1] = v45;
    char v52 = v44;
    uint64_t v53 = v43;
    uint64_t v54 = v42;
    uint64_t v55 = v41;
    uint64_t v56 = v40;
    char v57 = v39;
    unint64_t v58 = v24;
    uint64_t v59 = v25;
    uint64_t v60 = sub_25A3B72C8;
    uint64_t v61 = v26;
    sub_25A3B28BC(v24);
    swift_retain();
    uint64_t v29 = v65;
    v48(v14, v51);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v12);
    sub_25A3B2890(v24);
    uint64_t result = swift_release();
    if (!v29)
    {
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v49, 1, 1, TupleTypeMetadata2);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
    uint64_t v32 = v49;
    (*(void (**)(uint64_t, char *, void (*)(uint64_t)))(*((void *)v16 - 1) + 32))(v49, v20, v16);
    uint64_t v33 = swift_getTupleTypeMetadata2();
    uint64_t v34 = v32 + *(int *)(v33 + 48);
    v38(v32);
    int v35 = (_OWORD *)(a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(a1, v34, v12);
    long long v36 = *((_OWORD *)a4 + 1);
    *int v35 = *(_OWORD *)a4;
    v35[1] = v36;
    v35[2] = *((_OWORD *)a4 + 2);
    *(_OWORD *)((char *)v35 + 41) = *(_OWORD *)((char *)a4 + 41);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 0, 1, v33);
  }
  return result;
}

uint64_t sub_25A3B1C08(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  char v9 = *((unsigned char *)a2 + 16);
  uint64_t v35 = a2[4];
  uint64_t v36 = a2[3];
  uint64_t v33 = a2[6];
  uint64_t v34 = a2[5];
  char v32 = *((unsigned char *)a2 + 56);
  uint64_t v30 = a3[1];
  uint64_t v31 = *a3;
  char v29 = *((unsigned char *)a3 + 16);
  uint64_t v27 = a3[4];
  uint64_t v28 = a3[3];
  uint64_t v25 = a3[6];
  uint64_t v26 = a3[5];
  char v24 = *((unsigned char *)a3 + 56);
  uint64_t v22 = *(void *)(a1 + 24);
  uint64_t v23 = *(void *)(a1 + 16);
  char v21 = *(unsigned char *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 56);
  char v16 = *(unsigned char *)(a1 + 72);
  uint64_t v10 = *(uint64_t (**)(uint64_t))(a1 + 80);
  swift_bridgeObjectRetain();
  if (v10)
  {
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = v10(v11);
    uint64_t v10 = v13;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
  }
  type metadata accessor for FulfillOnceState.Overfulfilled();
  swift_getWitnessTable();
  uint64_t result = swift_allocError();
  *(void *)uint64_t v15 = v4;
  *(void *)(v15 + 8) = v3;
  *(void *)(v15 + 16) = v6;
  *(void *)(v15 + 24) = v5;
  *(void *)(v15 + 32) = v7;
  *(void *)(v15 + 40) = v8;
  *(unsigned char *)(v15 + 48) = v9;
  *(void *)(v15 + 56) = v36;
  *(void *)(v15 + 64) = v35;
  *(void *)(v15 + 72) = v34;
  *(void *)(v15 + 80) = v33;
  *(unsigned char *)(v15 + 88) = v32;
  *(void *)(v15 + 96) = v31;
  *(void *)(v15 + 104) = v30;
  *(unsigned char *)(v15 + 112) = v29;
  *(void *)(v15 + 120) = v28;
  *(void *)(v15 + 128) = v27;
  *(void *)(v15 + 136) = v26;
  *(void *)(v15 + 144) = v25;
  *(unsigned char *)(v15 + 152) = v24;
  *(void *)(v15 + 160) = v23;
  *(void *)(v15 + 168) = v22;
  *(unsigned char *)(v15 + 176) = v21;
  *(void *)(v15 + 184) = v20;
  *(void *)(v15 + 192) = v19;
  *(void *)(v15 + 200) = v18;
  *(void *)(v15 + 208) = v17;
  *(unsigned char *)(v15 + 216) = v16;
  *(void *)(v15 + 224) = v12;
  *(void *)(v15 + 232) = v10;
  return result;
}

uint64_t FulfillOnceState.fulfill<>(callsite:ifAlreadyFulfilled:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  char v5 = *(unsigned char *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 56);
  long long v11 = *(_OWORD *)a1;
  char v12 = v5;
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v14 = *(_OWORD *)(a1 + 40);
  char v15 = v6;
  uint64_t v10 = *(void *)(v4 + 80);
  void v8[2] = a2;
  _OWORD v8[3] = a3;
  return FulfillOnceState.fulfill(callsite:makeFulfilledState:ifAlreadyFulfilled:)(&v11, (uint64_t)nullsub_1, (uint64_t)v9, (uint64_t)sub_25A3B28D0, (uint64_t)v8);
}

unint64_t sub_25A3B1EC4(uint64_t a1, long long *a2)
{
  return sub_25A3B1EDC(a1, a2);
}

unint64_t sub_25A3B1EDC(uint64_t a1, long long *a2)
{
  char v2 = *((unsigned char *)a2 + 16);
  char v3 = *((unsigned char *)a2 + 56);
  unint64_t v4 = *((void *)a2 + 8);
  uint64_t v5 = *((void *)a2 + 9);
  char v6 = (uint64_t (*)(unint64_t))*((void *)a2 + 10);
  unint64_t v15 = v4;
  uint64_t v16 = v5;
  long long v10 = *a2;
  char v11 = v2;
  long long v12 = *(long long *)((char *)a2 + 24);
  long long v13 = *(long long *)((char *)a2 + 40);
  char v14 = v3;
  unint64_t v7 = sub_25A3B28BC(v4);
  uint64_t v8 = (void *)v6(v7);
  sub_25A3B0E88((uint64_t)&v10, v8);

  return sub_25A3B2890(v4);
}

uint64_t sub_25A3B1F88(uint64_t a1, long long *a2, uint64_t (*a3)(long long *))
{
  char v3 = *((unsigned char *)a2 + 16);
  char v4 = *((unsigned char *)a2 + 56);
  long long v7 = *a2;
  char v8 = v3;
  long long v9 = *(long long *)((char *)a2 + 24);
  long long v10 = *(long long *)((char *)a2 + 40);
  char v11 = v4;
  long long v5 = a2[5];
  long long v12 = a2[4];
  long long v13 = v5;
  return a3(&v7);
}

uint64_t sub_25A3B1FEC()
{
  return 0;
}

uint64_t sub_25A3B2178()
{
  return 0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> OverfulfillHandle.throwError()()
{
  (*(void (**)(void))(v0 + 80))();
  swift_willThrow();
}

Swift::Void __swiftcall OverfulfillHandle.assert()()
{
  char v1 = *((unsigned char *)v0 + 16);
  char v2 = *((unsigned char *)v0 + 56);
  unint64_t v3 = *((void *)v0 + 8);
  uint64_t v4 = *((void *)v0 + 9);
  long long v5 = (uint64_t (*)(unint64_t))*((void *)v0 + 10);
  unint64_t v13 = v3;
  uint64_t v14 = v4;
  long long v8 = *v0;
  char v9 = v1;
  long long v10 = *(long long *)((char *)v0 + 24);
  long long v11 = *(long long *)((char *)v0 + 40);
  char v12 = v2;
  unint64_t v6 = sub_25A3B28BC(v3);
  long long v7 = (void *)v5(v6);
  sub_25A3B0E88((uint64_t)&v8, v7);

  sub_25A3B2890(v3);
}

uint64_t sub_25A3B2564(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v37 = a4;
  uint64_t v38 = a6;
  uint64_t v36 = a3;
  uint64_t v34 = a1;
  uint64_t v12 = *(void *)(*(void *)v9 + 80);
  uint64_t v35 = a9;
  uint64_t v13 = type metadata accessor for FulfillOnceState.State();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v18 = *a2;
  uint64_t v17 = a2[1];
  char v19 = *((unsigned char *)a2 + 16);
  long long v31 = *(_OWORD *)(a2 + 3);
  uint64_t v20 = a2[5];
  uint64_t v29 = a2[6];
  uint64_t v30 = v20;
  LOBYTE(a2) = *((unsigned char *)a2 + 56);
  uint64_t v21 = *a5;
  uint64_t v32 = a5[1];
  uint64_t v33 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))((char *)&v29 - v15, v34, v12);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = sub_25A3EF560(v16, v13);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  *(void *)(v9 + 144) = v22;
  *(void *)(v9 + 16) = v18;
  *(void *)(v9 + 24) = v17;
  *(unsigned char *)(v9 + 32) = v19;
  *(_OWORD *)(v9 + 40) = v31;
  uint64_t v23 = v29;
  *(void *)(v9 + 56) = v30;
  *(void *)(v9 + 64) = v23;
  *(unsigned char *)(v9 + 72) = (_BYTE)a2;
  uint64_t v24 = v37;
  *(void *)(v9 + 80) = v36;
  *(void *)(v9 + 88) = v24;
  uint64_t v25 = v32;
  *(void *)(v9 + 96) = v33;
  *(void *)(v9 + 104) = v25;
  uint64_t v26 = v39;
  *(void *)(v9 + 112) = v38;
  *(void *)(v9 + 120) = v26;
  uint64_t v27 = v35;
  *(void *)(v9 + 128) = v40;
  *(void *)(v9 + 136) = v27;
  return v9;
}

uint64_t sub_25A3B275C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_25A3B2564(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_25A3B2800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3B1254(a1, *(void (**)(char *))(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t type metadata accessor for FulfillOnceState.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FulfillOnceState.WaitingStateUpdateResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3B2854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3B1694(a1, *(void (**)(uint64_t))(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), *(uint64_t **)(v2 + 40), *(void (**)(char *, void *))(v2 + 48), *(void *)(v2 + 56), a2);
}

uint64_t type metadata accessor for FulfillOnceState.FulfillmentOutcome()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_25A3B2890(unint64_t result)
{
  if (result >= 3) {
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for FulfillOnceState.Unfulfilled()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_25A3B28BC(unint64_t result)
{
  if (result >= 3) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_25A3B28D0(uint64_t a1, long long *a2)
{
  return sub_25A3B1F88(a1, a2, *(uint64_t (**)(long long *))(v2 + 16));
}

uint64_t sub_25A3B28EC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FulfillOnceState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for FulfillOnceState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FulfillOnceState);
}

uint64_t dispatch thunk of FulfillOnceState.__allocating_init(waitingState:initializationCallsite:initializationInfo:failureMode:thingDescription:actionPastParticiple:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t sub_25A3B29A8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v3[4] = *(void *)(result - 8) + 64;
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_25A3B2A88(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 57 <= *(void *)(v5 + 64)) {
    unint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  }
  int v10 = *(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80);
  if ((v10 & 0x1000F8) != 0 || v9 + 1 > 0x18)
  {
    uint64_t v12 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v12 + (((v10 & 0xF8 | 7u) + 16) & ~(unint64_t)(v10 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    unsigned int v13 = a2[v9];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v15 = v9;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_19;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_19:
          int v17 = (v16 | (v14 << (8 * v9))) + 2;
          unsigned int v13 = v16 + 2;
          if (v9 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      uint64_t v18 = (_OWORD *)(((unint64_t)v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
      char v19 = (long long *)((unint64_t)&a2[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
      long long v21 = v19[1];
      long long v20 = v19[2];
      long long v22 = *v19;
      *(_OWORD *)((char *)v18 + 41) = *(long long *)((char *)v19 + 41);
      v18[1] = v21;
      void v18[2] = v20;
      *uint64_t v18 = v22;
      *((unsigned char *)v4 + v9) = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(a1, a2);
      *((unsigned char *)v4 + v9) = 0;
    }
  }
  return v4;
}

uint64_t sub_25A3B2CB0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = ((*(void *)(*(void *)v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_25A3B2DF8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 57 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    unint64_t v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    unsigned int v13 = (_OWORD *)((a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v14 = (long long *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    long long v16 = v14[1];
    long long v15 = v14[2];
    long long v17 = *v14;
    *(_OWORD *)((char *)v13 + 41) = *(long long *)((char *)v14 + 41);
    v13[1] = v16;
    void v13[2] = v15;
    *unsigned int v13 = v17;
    char v18 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, a2);
    char v18 = 0;
  }
  *(unsigned char *)(a1 + v7) = v18;
  return a1;
}

unsigned __int8 *sub_25A3B2FD8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = *(void *)(v8 + 64);
    if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 57 <= *(void *)(v7 + 64)) {
      unint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v11 == 1) {
      uint64_t v17 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v17 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v18 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v6);
      uint64_t v23 = (_OWORD *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v24 = (long long *)((unint64_t)&a2[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
      long long v26 = v24[1];
      long long v25 = v24[2];
      long long v27 = *v24;
      *(_OWORD *)((char *)v23 + 41) = *(long long *)((char *)v24 + 41);
      v23[1] = v26;
      v23[2] = v25;
      _OWORD *v23 = v27;
      char v28 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
      char v28 = 0;
    }
    a1[v10] = v28;
  }
  return a1;
}

uint64_t sub_25A3B3278(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 57 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    unint64_t v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    uint64_t v13 = (_OWORD *)((a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v14 = (long long *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    long long v16 = v14[1];
    long long v15 = v14[2];
    long long v17 = *v14;
    *(_OWORD *)((char *)v13 + 41) = *(long long *)((char *)v14 + 41);
    v13[1] = v16;
    void v13[2] = v15;
    *uint64_t v13 = v17;
    char v18 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1, a2);
    char v18 = 0;
  }
  *(unsigned char *)(a1 + v7) = v18;
  return a1;
}

unsigned __int8 *sub_25A3B3458(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = *(void *)(v8 + 64);
    if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 57 <= *(void *)(v7 + 64)) {
      unint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v11 == 1) {
      uint64_t v17 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v17 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v18 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v6);
      uint64_t v23 = (_OWORD *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v24 = (long long *)((unint64_t)&a2[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
      long long v26 = v24[1];
      long long v25 = v24[2];
      long long v27 = *v24;
      *(_OWORD *)((char *)v23 + 41) = *(long long *)((char *)v24 + 41);
      v23[1] = v26;
      v23[2] = v25;
      _OWORD *v23 = v27;
      char v28 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
      char v28 = 0;
    }
    a1[v10] = v28;
  }
  return a1;
}

uint64_t sub_25A3B36F8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = ((*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_25A3B3848(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (((*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57 > v5) {
    unint64_t v5 = ((*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x25A3B3A2CLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25A3B3A54(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = ((*(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_25A3B3B28(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
    if (((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8)
                                                                                 + 64))
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    else {
      size_t v7 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (((*(void *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57 > v5) {
      unint64_t v5 = ((*(void *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
    }
    a1[v5] = a2;
  }
}

uint64_t sub_25A3B3C68()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_25A3B3D34(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_25A3B3F08(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 32) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 32) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 32) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_25A3B4044(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_25A3B41B8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v5 = *(void *)(a3 + 32);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 32) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 32);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_25A3B43F8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_25A3B456C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v5 = *(void *)(a3 + 32);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 32) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 32);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_25A3B47AC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_25A3B48F0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x25A3B4AC8);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25A3B4AF0(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 32) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 32) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_25A3B4BB8(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5] = a2;
  }
}

uint64_t sub_25A3B4CE0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      swift_initEnumMetadataSinglePayload();
      return 0;
    }
  }
  return result;
}

void *sub_25A3B4DB0(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  int v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = *(void *)(v7 + 64) + v11;
  unint64_t v13 = v12 & ~(unint64_t)v11;
  uint64_t v14 = *(void *)(v9 + 64);
  uint64_t v15 = v13 + v14;
  int v16 = v10 | v8;
  if (v10 | v8) {
    size_t v17 = v13 + v14;
  }
  else {
    size_t v17 = v15 + 1;
  }
  uint64_t v18 = (*(unsigned char *)(v7 + 80) | v11);
  if (v18 > 7 || ((*(_DWORD *)(v7 + 80) | v11) & 0x100000) != 0 || v17 > 0x18)
  {
    uint64_t v21 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
    return a1;
  }
  unint64_t v26 = ~(unint64_t)v11;
  if (!v16)
  {
    if (!*((unsigned char *)a2 + v15)) {
      goto LABEL_33;
    }
    int v22 = (*((unsigned __int8 *)a2 + v15) - 1) << (8 * v15);
    if (v15 > 3) {
      int v22 = 0;
    }
    if (v15)
    {
      int v23 = v15 <= 3 ? v15 : 4;
      switch(v23)
      {
        case 2:
          int v24 = *a2;
          break;
        case 3:
          int v24 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v24 = *(_DWORD *)a2;
          break;
        default:
          int v24 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v24 = 0;
    }
    if ((v24 | v22) == 0xFFFFFFFF) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  if (v8 >= v10)
  {
    if (!(*(unsigned int (**)(unsigned __int16 *))(v7 + 48))(a2)) {
      goto LABEL_33;
    }
LABEL_27:
    memcpy(a1, a2, v17);
    return a1;
  }
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)a2 + v12) & ~(unint64_t)v11, v10, v5))
  {
    goto LABEL_27;
  }
LABEL_33:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v12) & v26, ((unint64_t)a2 + v12) & v26, v5);
  if (!v16) {
    *((unsigned char *)a1 + v15) = 0;
  }
  return a1;
}

uint64_t sub_25A3B5048(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ~v10;
  uint64_t v12 = *(void *)(v5 + 64) + v10;
  uint64_t v18 = v8;
  if (v9 | v6)
  {
    if (v6 >= v9)
    {
      uint64_t result = (*(uint64_t (**)(unsigned __int16 *))(v5 + 48))(a1);
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)a1 + v12) & v11, v9, v7);
      if (result) {
        return result;
      }
    }
    goto LABEL_19;
  }
  uint64_t v14 = (v12 & ~v10) + *(void *)(v8 + 64);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_19;
  }
  int v15 = (*((unsigned __int8 *)a1 + v14) - 1) << (8 * v14);
  if (v14 > 3) {
    int v15 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  int v16 = v14 | v15;
  uint64_t result = (v16 + 1);
  if (v16 == -1)
  {
LABEL_19:
    (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, v4);
    size_t v17 = *(uint64_t (**)(unint64_t, uint64_t))(v18 + 8);
    return v17(((unint64_t)a1 + v12) & v11, v7);
  }
  return result;
}

unsigned char *sub_25A3B527C(unsigned char *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ~v11;
  uint64_t v13 = *(void *)(v7 + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  int v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      if (!(*(unsigned int (**)(unsigned __int16 *))(v7 + 48))(a2)) {
        goto LABEL_24;
      }
    }
    else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)a2 + v13) & v12, v10, v5))
    {
LABEL_24:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&a1[v13] & v12, ((unint64_t)a2 + v13) & v12, v5);
      if (!v15) {
        a1[v14] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v14)) {
      goto LABEL_24;
    }
    int v16 = (*((unsigned __int8 *)a2 + v14) - 1) << (8 * v14);
    if (v14 > 3) {
      int v16 = 0;
    }
    if (v14)
    {
      int v17 = v14 <= 3 ? (v13 & ~v11) + *(_DWORD *)(v9 + 64) : 4;
      switch(v17)
      {
        case 2:
          int v18 = *a2;
          break;
        case 3:
          int v18 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v18 = *(_DWORD *)a2;
          break;
        default:
          int v18 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v18 = 0;
    }
    if ((v18 | v16) == 0xFFFFFFFF) {
      goto LABEL_24;
    }
  }
  if (v15) {
    size_t v19 = v14;
  }
  else {
    size_t v19 = v14 + 1;
  }
  memcpy(a1, a2, v19);
  return a1;
}

unsigned __int16 *sub_25A3B54C0(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v44 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v44 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(v5 + 64) + v9;
  size_t v12 = (v11 & ~v9) + *(void *)(v7 + 64);
  int v13 = v8 | v6;
  uint64_t v42 = ~v9;
  uint64_t v43 = v4;
  uint64_t v41 = v11;
  if (!(v8 | v6))
  {
    char v24 = 8 * v12;
    if (*((unsigned char *)a1 + v12))
    {
      int v25 = (*((unsigned __int8 *)a1 + v12) - 1) << v24;
      if (v12 > 3) {
        int v25 = 0;
      }
      if (v12)
      {
        int v26 = v12 <= 3 ? (v11 & ~v9) + *(_DWORD *)(v7 + 64) : 4;
        switch(v26)
        {
          case 2:
            int v27 = *a1;
            break;
          case 3:
            int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v27 = *(_DWORD *)a1;
            break;
          default:
            int v27 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v27 = 0;
      }
      if ((v27 | v25) != 0xFFFFFFFF)
      {
        if (*((unsigned char *)a2 + v12))
        {
          int v32 = (*((unsigned __int8 *)a2 + v12) - 1) << v24;
          if (v12 > 3) {
            int v32 = 0;
          }
          if (v12)
          {
            int v33 = v12 <= 3 ? v12 : 4;
            switch(v33)
            {
              case 2:
                int v34 = *a2;
                break;
              case 3:
                int v34 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
                break;
              case 4:
                int v34 = *(_DWORD *)a2;
                break;
              default:
                int v34 = *(unsigned __int8 *)a2;
                break;
            }
          }
          else
          {
            int v34 = 0;
          }
          if ((v34 | v32) != 0xFFFFFFFF) {
            goto LABEL_5;
          }
        }
        goto LABEL_60;
      }
    }
    if (!*((unsigned char *)a2 + v12)) {
      goto LABEL_55;
    }
    int v35 = (*((unsigned __int8 *)a2 + v12) - 1) << v24;
    if (v12 > 3) {
      int v35 = 0;
    }
    if (v12)
    {
      int v36 = v12 <= 3 ? v12 : 4;
      switch(v36)
      {
        case 2:
          int v37 = *a2;
          break;
        case 3:
          int v37 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v37 = *(_DWORD *)a2;
          break;
        default:
          int v37 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v37 = 0;
    }
    uint64_t v10 = v42;
    if ((v37 | v35) == 0xFFFFFFFF)
    {
LABEL_55:
      (*(void (**)(unsigned __int16 *, const void *, uint64_t))(v5 + 24))(a1, v3, v44);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)a1 + v11) & v10, ((unint64_t)v3 + v11) & v10, v43);
      return a1;
    }
LABEL_50:
    (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, v44);
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)a1 + v11) & v10, v43);
    if (v13) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v12 + 1;
    }
    int v23 = a1;
    goto LABEL_54;
  }
  if (v6 < v8)
  {
    unint64_t v14 = ((unint64_t)a1 + v11) & v10;
    uint64_t v40 = *(void *)(v4 - 8);
    int v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48);
    size_t v17 = (v11 & ~v9) + *(void *)(v40 + 64);
    uint64_t v18 = *(void *)(*(void *)(v44 - 8) + 64) + v9;
    uint64_t v19 = *(void *)(a3 + 24);
    int v39 = v16(v14, v8, v4);
    unint64_t v20 = ((unint64_t)a2 + v18) & v10;
    size_t v12 = v17;
    int v21 = v16(v20, v8, v19);
    int v13 = v8 | v6;
    uint64_t v3 = a2;
    uint64_t v7 = v40;
    if (v39) {
      goto LABEL_4;
    }
LABEL_19:
    uint64_t v11 = v41;
    uint64_t v10 = v42;
    if (!v21) {
      goto LABEL_55;
    }
    goto LABEL_50;
  }
  int v29 = v8 | v6;
  uint64_t v30 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
  int v31 = v30(a1, v6, v44);
  int v21 = v30(a2, v6, v44);
  int v13 = v29;
  uint64_t v3 = a2;
  if (!v31) {
    goto LABEL_19;
  }
LABEL_4:
  if (v21)
  {
LABEL_5:
    if (v13) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v12 + 1;
    }
    int v23 = a1;
LABEL_54:
    memcpy(v23, v3, v22);
    return a1;
  }
LABEL_60:
  (*(void (**)(unsigned __int16 *, const void *, uint64_t))(v5 + 16))(a1, v3, v44);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)a1 + v41) & v42, ((unint64_t)v3 + v41) & v42, v43);
  if (!v13) {
    *((unsigned char *)a1 + v12) = 0;
  }
  return a1;
}

unsigned char *sub_25A3B596C(unsigned char *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ~v11;
  uint64_t v13 = *(void *)(v7 + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  int v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      if (!(*(unsigned int (**)(unsigned __int16 *))(v7 + 48))(a2)) {
        goto LABEL_24;
      }
    }
    else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)a2 + v13) & v12, v10, v5))
    {
LABEL_24:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&a1[v13] & v12, ((unint64_t)a2 + v13) & v12, v5);
      if (!v15) {
        a1[v14] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v14)) {
      goto LABEL_24;
    }
    int v16 = (*((unsigned __int8 *)a2 + v14) - 1) << (8 * v14);
    if (v14 > 3) {
      int v16 = 0;
    }
    if (v14)
    {
      int v17 = v14 <= 3 ? (v13 & ~v11) + *(_DWORD *)(v9 + 64) : 4;
      switch(v17)
      {
        case 2:
          int v18 = *a2;
          break;
        case 3:
          int v18 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v18 = *(_DWORD *)a2;
          break;
        default:
          int v18 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v18 = 0;
    }
    if ((v18 | v16) == 0xFFFFFFFF) {
      goto LABEL_24;
    }
  }
  if (v15) {
    size_t v19 = v14;
  }
  else {
    size_t v19 = v14 + 1;
  }
  memcpy(a1, a2, v19);
  return a1;
}

unsigned __int16 *sub_25A3B5BB0(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v44 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v44 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(v5 + 64) + v9;
  size_t v12 = (v11 & ~v9) + *(void *)(v7 + 64);
  int v13 = v8 | v6;
  uint64_t v42 = ~v9;
  uint64_t v43 = v4;
  uint64_t v41 = v11;
  if (!(v8 | v6))
  {
    char v24 = 8 * v12;
    if (*((unsigned char *)a1 + v12))
    {
      int v25 = (*((unsigned __int8 *)a1 + v12) - 1) << v24;
      if (v12 > 3) {
        int v25 = 0;
      }
      if (v12)
      {
        int v26 = v12 <= 3 ? (v11 & ~v9) + *(_DWORD *)(v7 + 64) : 4;
        switch(v26)
        {
          case 2:
            int v27 = *a1;
            break;
          case 3:
            int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v27 = *(_DWORD *)a1;
            break;
          default:
            int v27 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v27 = 0;
      }
      if ((v27 | v25) != 0xFFFFFFFF)
      {
        if (*((unsigned char *)a2 + v12))
        {
          int v32 = (*((unsigned __int8 *)a2 + v12) - 1) << v24;
          if (v12 > 3) {
            int v32 = 0;
          }
          if (v12)
          {
            int v33 = v12 <= 3 ? v12 : 4;
            switch(v33)
            {
              case 2:
                int v34 = *a2;
                break;
              case 3:
                int v34 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
                break;
              case 4:
                int v34 = *(_DWORD *)a2;
                break;
              default:
                int v34 = *(unsigned __int8 *)a2;
                break;
            }
          }
          else
          {
            int v34 = 0;
          }
          if ((v34 | v32) != 0xFFFFFFFF) {
            goto LABEL_5;
          }
        }
        goto LABEL_60;
      }
    }
    if (!*((unsigned char *)a2 + v12)) {
      goto LABEL_55;
    }
    int v35 = (*((unsigned __int8 *)a2 + v12) - 1) << v24;
    if (v12 > 3) {
      int v35 = 0;
    }
    if (v12)
    {
      int v36 = v12 <= 3 ? v12 : 4;
      switch(v36)
      {
        case 2:
          int v37 = *a2;
          break;
        case 3:
          int v37 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v37 = *(_DWORD *)a2;
          break;
        default:
          int v37 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v37 = 0;
    }
    uint64_t v10 = v42;
    if ((v37 | v35) == 0xFFFFFFFF)
    {
LABEL_55:
      (*(void (**)(unsigned __int16 *, const void *, uint64_t))(v5 + 40))(a1, v3, v44);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)a1 + v11) & v10, ((unint64_t)v3 + v11) & v10, v43);
      return a1;
    }
LABEL_50:
    (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, v44);
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)a1 + v11) & v10, v43);
    if (v13) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v12 + 1;
    }
    int v23 = a1;
    goto LABEL_54;
  }
  if (v6 < v8)
  {
    unint64_t v14 = ((unint64_t)a1 + v11) & v10;
    uint64_t v40 = *(void *)(v4 - 8);
    int v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48);
    size_t v17 = (v11 & ~v9) + *(void *)(v40 + 64);
    uint64_t v18 = *(void *)(*(void *)(v44 - 8) + 64) + v9;
    uint64_t v19 = *(void *)(a3 + 24);
    int v39 = v16(v14, v8, v4);
    unint64_t v20 = ((unint64_t)a2 + v18) & v10;
    size_t v12 = v17;
    int v21 = v16(v20, v8, v19);
    int v13 = v8 | v6;
    uint64_t v3 = a2;
    uint64_t v7 = v40;
    if (v39) {
      goto LABEL_4;
    }
LABEL_19:
    uint64_t v11 = v41;
    uint64_t v10 = v42;
    if (!v21) {
      goto LABEL_55;
    }
    goto LABEL_50;
  }
  int v29 = v8 | v6;
  uint64_t v30 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
  int v31 = v30(a1, v6, v44);
  int v21 = v30(a2, v6, v44);
  int v13 = v29;
  uint64_t v3 = a2;
  if (!v31) {
    goto LABEL_19;
  }
LABEL_4:
  if (v21)
  {
LABEL_5:
    if (v13) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v12 + 1;
    }
    int v23 = a1;
LABEL_54:
    memcpy(v23, v3, v22);
    return a1;
  }
LABEL_60:
  (*(void (**)(unsigned __int16 *, const void *, uint64_t))(v5 + 32))(a1, v3, v44);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)a1 + v41) & v42, ((unint64_t)v3 + v41) & v42, v43);
  if (!v13) {
    *((unsigned char *)a1 + v12) = 0;
  }
  return a1;
}

uint64_t sub_25A3B605C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  if (v9 <= v5) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  unsigned int v11 = v10 - 1;
  if (!v10) {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  if (v10) {
    uint64_t v13 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  else {
    uint64_t v13 = *(void *)(*(void *)(v6 - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v12;
  int v15 = a2 - v11;
  if (a2 > v11)
  {
    uint64_t v16 = v13 + (v14 & ~v12);
    char v17 = 8 * v16;
    if (v16 > 3) {
      goto LABEL_12;
    }
    unsigned int v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (v18) {
        goto LABEL_19;
      }
    }
    else
    {
      if (v19 <= 0xFF)
      {
        if (v19 < 2) {
          goto LABEL_29;
        }
LABEL_12:
        int v18 = *((unsigned __int8 *)a1 + v16);
        if (!*((unsigned char *)a1 + v16)) {
          goto LABEL_29;
        }
LABEL_19:
        int v20 = (v18 - 1) << v17;
        if (v16 > 3) {
          int v20 = 0;
        }
        if (v16)
        {
          if (v16 <= 3) {
            int v21 = v16;
          }
          else {
            int v21 = 4;
          }
          switch(v21)
          {
            case 2:
              int v22 = *a1;
              break;
            case 3:
              int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v22 = *(_DWORD *)a1;
              break;
            default:
              int v22 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v22 = 0;
        }
        return v11 + (v22 | v20) + 1;
      }
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_19;
      }
    }
  }
LABEL_29:
  if (v10 < 2) {
    return 0;
  }
  if (v5 >= v9) {
    unsigned int v24 = (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    unsigned int v24 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)a1 + v14) & ~v12, v9, v6);
  }
  if (v24 >= 2) {
    return v24 - 1;
  }
  else {
    return 0;
  }
}

void sub_25A3B6294(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= v8) {
    unsigned int v14 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  if (v14) {
    unsigned int v15 = v14 - 1;
  }
  else {
    unsigned int v15 = 0;
  }
  uint64_t v16 = v12 + v13;
  size_t v17 = ((v12 + v13) & ~v13) + *(void *)(*(void *)(v9 - 8) + 64);
  if (v14) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v17 + 1;
  }
  BOOL v19 = a3 >= v15;
  unsigned int v20 = a3 - v15;
  if (v20 == 0 || !v19)
  {
LABEL_19:
    if (v15 < a2) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  if (v18 > 3)
  {
    int v6 = 1;
    if (v15 < a2) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  unsigned int v21 = ((v20 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
  if (!HIWORD(v21))
  {
    if (v21 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v21 > 1;
    }
    goto LABEL_19;
  }
  int v6 = 4;
  if (v15 < a2)
  {
LABEL_20:
    unsigned int v22 = ~v15 + a2;
    if (v18 < 4)
    {
      int v23 = (v22 >> (8 * v18)) + 1;
      if (v18)
      {
        int v24 = v22 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if (v18 == 3)
        {
          *(_WORD *)a1 = v24;
          a1[2] = BYTE2(v24);
        }
        else if (v18 == 2)
        {
          *(_WORD *)a1 = v24;
        }
        else
        {
          *a1 = v24;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v18] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v23;
        return;
      case 3:
        goto LABEL_63;
      case 4:
        *(_DWORD *)&a1[v18] = v23;
        return;
      default:
        return;
    }
  }
LABEL_27:
  uint64_t v25 = ~v13;
  switch(v6)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_63:
      __break(1u);
      JUMPOUT(0x25A3B661CLL);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if (v14 >= 2)
        {
          if (a2 + 1 <= v14)
          {
            if (a2 != -1)
            {
              if (v8 >= v11)
              {
                int v31 = *(void (**)(char *, uint64_t))(v7 + 56);
                uint64_t v32 = a2 + 1;
                v31(a1, v32);
              }
              else
              {
                int v29 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
                uint64_t v30 = a2 + 1;
                v29((unint64_t)&a1[v16] & v25, v30, v11, v9);
              }
            }
          }
          else
          {
            if (v17 <= 3) {
              int v26 = ~(-1 << (8 * v17));
            }
            else {
              int v26 = -1;
            }
            if (v17)
            {
              int v27 = v26 & (a2 - v14);
              if (v17 <= 3) {
                int v28 = v17;
              }
              else {
                int v28 = 4;
              }
              bzero(a1, v17);
              switch(v28)
              {
                case 2:
                  *(_WORD *)a1 = v27;
                  break;
                case 3:
                  *(_WORD *)a1 = v27;
                  a1[2] = BYTE2(v27);
                  break;
                case 4:
                  *(_DWORD *)a1 = v27;
                  break;
                default:
                  *a1 = v27;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_25A3B6654(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v4 = v3;
  unsigned int v5 = *(_DWORD *)(v3 + 84);
  uint64_t v6 = *(void *)(v2 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v3 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  if (v7 | v5)
  {
    if (v5 >= v7) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    else {
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)a1 + v10) & ~v9, v7, v2);
    }
  }
  else
  {
    uint64_t v12 = (v10 & ~v9) + *(void *)(*(void *)(v2 - 8) + 64);
    if (*((unsigned char *)a1 + v12))
    {
      int v13 = (*((unsigned __int8 *)a1 + v12) - 1) << (8 * v12);
      if (v12 > 3) {
        int v13 = 0;
      }
      if (v12)
      {
        if (v12 > 3) {
          LODWORD(v12) = 4;
        }
        switch((int)v12)
        {
          case 2:
            LODWORD(v12) = *a1;
            break;
          case 3:
            LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v12) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v12) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return (v12 | v13) + 1;
    }
    else
    {
      return 0;
    }
  }
}

void sub_25A3B67D4(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5;
  unsigned int v7 = *(_DWORD *)(v5 + 84);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v14 = ((v10 + v11) & ~v11) + v12;
  if (v13 >= a2)
  {
    if (v13)
    {
      if (!a2) {
        return;
      }
    }
    else
    {
      a1[v14] = 0;
      if (!a2) {
        return;
      }
    }
    if (v7 >= v9)
    {
      unsigned int v20 = *(void (**)(void))(v6 + 56);
      v20();
    }
    else
    {
      unint64_t v18 = (unint64_t)&a1[v10 + v11] & ~v11;
      BOOL v19 = *(void (**)(unint64_t))(v8 + 56);
      v19(v18);
    }
    return;
  }
  unsigned int v15 = ~v13 + a2;
  if (v14 >= 4)
  {
    bzero(a1, ((v10 + v11) & ~v11) + v12);
    *(_DWORD *)a1 = v15;
    LOBYTE(v16) = 1;
    if (v13) {
      return;
    }
    goto LABEL_26;
  }
  int v16 = (v15 >> (8 * v14)) + 1;
  if (!v14)
  {
LABEL_25:
    if (v13) {
      return;
    }
    goto LABEL_26;
  }
  int v17 = v15 & ~(-1 << (8 * v14));
  bzero(a1, ((v10 + v11) & ~v11) + v12);
  if (v14 == 3)
  {
    *(_WORD *)a1 = v17;
    a1[2] = BYTE2(v17);
    goto LABEL_25;
  }
  if (v14 == 2)
  {
    *(_WORD *)a1 = v17;
    if (v13) {
      return;
    }
    goto LABEL_26;
  }
  *a1 = v17;
  if (!v13) {
LABEL_26:
  }
    a1[v14] = v16;
}

void *destroy for FulfillmentFailureMode(void *result)
{
  if (*result >= 0xFFFFFFFFuLL) {
    return (void *)swift_release();
  }
  return result;
}

uint64_t _s20PreviewsFoundationOS22FulfillmentFailureModeOwCP_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for FulfillmentFailureMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for FulfillmentFailureMode(void *a1, uint64_t a2)
{
  if (*a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FulfillmentFailureMode(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FulfillmentFailureMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_25A3B6BF8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_25A3B6C10(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for FulfillmentFailureMode()
{
  return &type metadata for FulfillmentFailureMode;
}

uint64_t destroy for OverfulfillHandle(uint64_t a1)
{
  if (*(void *)(a1 + 64) >= 3uLL) {
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for OverfulfillHandle(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  unint64_t v5 = *(void *)(a2 + 64);
  if (v5 >= 3)
  {
    uint64_t v6 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v5;
    *(void *)(a1 + 72) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OverfulfillHandle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v4 = (_OWORD *)(a1 + 64);
  uint64_t v6 = (_OWORD *)(a2 + 64);
  unint64_t v5 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64) >= 3uLL)
  {
    if (v5 >= 3)
    {
      uint64_t v8 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v5;
      *(void *)(a1 + 72) = v8;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    sub_25A3B6DEC(a1 + 64);
    goto LABEL_6;
  }
  if (v5 < 3)
  {
LABEL_6:
    *long long v4 = *v6;
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v7;
  swift_retain();
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_25A3B6DEC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(qword_26A4165F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for OverfulfillHandle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v4 = (_OWORD *)(a1 + 64);
  uint64_t v6 = (_OWORD *)(a2 + 64);
  unint64_t v5 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64) >= 3uLL)
  {
    if (v5 >= 3)
    {
      uint64_t v7 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v5;
      *(void *)(a1 + 72) = v7;
      swift_release();
      goto LABEL_6;
    }
    sub_25A3B6DEC(a1 + 64);
  }
  *long long v4 = *v6;
LABEL_6:
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OverfulfillHandle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OverfulfillHandle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OverfulfillHandle()
{
  return &type metadata for OverfulfillHandle;
}

uint64_t sub_25A3B6FC4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A3B7008(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_25A3B7078(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t sub_25A3B716C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandLineToolInvocation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CommandLineToolInvocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_25A3B7290()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 145, 7);
}

uint64_t sub_25A3B72C8()
{
  return sub_25A3B1C08(v0[2], v0 + 3, v0 + 11);
}

uint64_t type metadata accessor for FulfillOnceState.Overfulfilled()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3B72F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

uint64_t sub_25A3B72F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A3B733C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  long long v9 = *(_OWORD *)(a2 + 192);
  long long v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  uint64_t v11 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_25A3B73DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t sub_25A3B7570(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  uint64_t v6 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25A3B7640(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 240)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_25A3B7688(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 240) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 240) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_25A3B7704(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416730);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 76) = 0;
  *(unsigned char *)(v18 + 73) = 0;
  *(void *)(v9 + 136) = a9;
  *(void *)(v9 + 144) = v18;
  long long v19 = a1[1];
  *(_OWORD *)(v9 + 16) = *a1;
  *(_OWORD *)(v9 + 32) = v19;
  *(_OWORD *)(v9 + 48) = a1[2];
  *(_OWORD *)(v9 + 57) = *(_OWORD *)((char *)a1 + 41);
  *(void *)(v9 + 80) = a2;
  *(void *)(v9 + 88) = a3;
  *(void *)(v9 + 96) = a4;
  *(void *)(v9 + 104) = a5;
  *(void *)(v9 + 112) = a6;
  *(void *)(v9 + 120) = a7;
  *(void *)(v9 + 128) = a8;
  return v9;
}

uint64_t sub_25A3B77B4@<X0>(long long *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t, void *)@<X5>, unsigned char *a6@<X8>)
{
  uint64_t v9 = a6;
  int v10 = *((unsigned __int8 *)a1 + 57);
  if (v10 == 1)
  {
    uint64_t v12 = *((void *)a1 + 6);
    long long v22 = a1[1];
    long long v23 = a1[2];
    long long v21 = *a1;
    char v30 = *((unsigned char *)a3 + 56);
    uint64_t v28 = a3[5];
    uint64_t v29 = a3[6];
    long long v27 = *(_OWORD *)(a3 + 3);
    char v25 = *((unsigned char *)a1 + 56);
    char v26 = *((unsigned char *)a3 + 16);
    uint64_t v24 = a3[1];
    uint64_t v42 = a6;
    uint64_t v13 = *a3;
    unint64_t v14 = *(void *)(a4 + 96);
    uint64_t v15 = *(void *)(a4 + 104);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a4;
    *(_OWORD *)(v16 + 24) = v21;
    *(_OWORD *)(v16 + 40) = v22;
    *(_OWORD *)(v16 + 56) = v23;
    *(void *)(v16 + 72) = v12;
    *(unsigned char *)(v16 + 80) = v25;
    long long v17 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(v16 + 88) = *(_OWORD *)a3;
    *(_OWORD *)(v16 + 104) = v17;
    *(_OWORD *)(v16 + 120) = *((_OWORD *)a3 + 2);
    *(_OWORD *)(v16 + 129) = *(_OWORD *)((char *)a3 + 41);
    v32[0] = v13;
    uint64_t v9 = v42;
    v32[1] = v24;
    char v33 = v26;
    long long v34 = v27;
    uint64_t v35 = v28;
    uint64_t v36 = v29;
    char v37 = v30;
    unint64_t v38 = v14;
    uint64_t v39 = v15;
    uint64_t v40 = sub_25A3B8704;
    uint64_t v41 = v16;
    sub_25A3B28BC(v14);
    uint64_t v18 = swift_retain();
    a5(v18, v32);
    sub_25A3B2890(v14);
    uint64_t result = swift_release();
    if (v6) {
      return result;
    }
  }
  else
  {
    uint64_t result = a2();
    long long v20 = *((_OWORD *)a3 + 1);
    *a1 = *(_OWORD *)a3;
    a1[1] = v20;
    a1[2] = *((_OWORD *)a3 + 2);
    *(long long *)((char *)a1 + 41) = *(_OWORD *)((char *)a3 + 41);
    *((unsigned char *)a1 + 57) = 1;
  }
  unsigned char *v9 = v10;
  return result;
}

uint64_t sub_25A3B7994@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t *, void *)@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10 = *(void *)a1;
  uint64_t v12 = (_OWORD *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 65))
  {
    uint64_t v26 = *(void *)(a1 + 40);
    uint64_t v24 = *(void *)(a1 + 32);
    uint64_t v22 = *(void *)(a1 + 24);
    char v32 = *(unsigned char *)(a1 + 64);
    char v33 = *((unsigned char *)a3 + 56);
    uint64_t v30 = *(void *)(a1 + 56);
    uint64_t v31 = a3[6];
    uint64_t v28 = *(void *)(a1 + 48);
    uint64_t v29 = a3[5];
    long long v27 = *(_OWORD *)(a3 + 3);
    char v25 = *((unsigned char *)a3 + 16);
    uint64_t v23 = a3[1];
    uint64_t v21 = *a3;
    uint64_t v45 = *(void *)a1;
    unint64_t v15 = *(void *)(a4 + 96);
    uint64_t v16 = *(void *)(a4 + 104);
    uint64_t v17 = swift_allocObject();
    long long v18 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(v17 + 88) = *(_OWORD *)a3;
    *(void *)(v17 + 16) = a4;
    *(void *)(v17 + 24) = v11;
    *(void *)(v17 + 32) = v13;
    *(void *)(v17 + 40) = v22;
    *(void *)(v17 + 48) = v24;
    *(void *)(v17 + 56) = v26;
    *(void *)(v17 + 64) = v28;
    *(void *)(v17 + 72) = v30;
    *(unsigned char *)(v17 + 80) = v32;
    *(_OWORD *)(v17 + 104) = v18;
    *(_OWORD *)(v17 + 120) = *((_OWORD *)a3 + 2);
    *(_OWORD *)(v17 + 129) = *(_OWORD *)((char *)a3 + 41);
    v35[0] = v21;
    v35[1] = v23;
    char v36 = v25;
    long long v37 = v27;
    uint64_t v38 = v29;
    uint64_t v39 = v31;
    char v40 = v33;
    unint64_t v41 = v15;
    uint64_t v42 = v16;
    uint64_t v43 = sub_25A3B8660;
    uint64_t v44 = v17;
    sub_25A3B8694(v10, v11, v13, v22, v24, v26, v28, v30, v32, 1);
    sub_25A3B28BC(v15);
    swift_retain();
    a5(&v45, v35);
    swift_bridgeObjectRelease();
    sub_25A3B2890(v15);
    uint64_t result = swift_release();
    if (!v6)
    {
      *(_OWORD *)a6 = 0u;
      *(_OWORD *)(a6 + 16) = 0u;
    }
  }
  else
  {
    *(void *)a6 = v10;
    *(void *)(a6 + 8) = v11;
    *(void *)(a6 + 16) = v13;
    a2(a6);
    *(void *)a1 = *(void *)(a6 + 24);
    long long v20 = *((_OWORD *)a3 + 1);
    *uint64_t v12 = *(_OWORD *)a3;
    v12[1] = v20;
    v12[2] = *((_OWORD *)a3 + 2);
    *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)((char *)a3 + 41);
    *(unsigned char *)(a1 + 65) = 1;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_25A3B7BDC@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t *, void *)@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10 = *(void *)a1;
  uint64_t v12 = (_OWORD *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 65))
  {
    uint64_t v26 = *(void *)(a1 + 40);
    uint64_t v24 = *(void *)(a1 + 32);
    uint64_t v22 = *(void *)(a1 + 24);
    char v32 = *(unsigned char *)(a1 + 64);
    char v33 = *((unsigned char *)a3 + 56);
    uint64_t v30 = *(void *)(a1 + 56);
    uint64_t v31 = a3[6];
    uint64_t v28 = *(void *)(a1 + 48);
    uint64_t v29 = a3[5];
    long long v27 = *(_OWORD *)(a3 + 3);
    char v25 = *((unsigned char *)a3 + 16);
    uint64_t v23 = a3[1];
    uint64_t v21 = *a3;
    uint64_t v45 = *(void *)a1;
    unint64_t v15 = *(void *)(a4 + 96);
    uint64_t v16 = *(void *)(a4 + 104);
    uint64_t v17 = swift_allocObject();
    long long v18 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(v17 + 88) = *(_OWORD *)a3;
    *(void *)(v17 + 16) = a4;
    *(void *)(v17 + 24) = v11;
    *(void *)(v17 + 32) = v13;
    *(void *)(v17 + 40) = v22;
    *(void *)(v17 + 48) = v24;
    *(void *)(v17 + 56) = v26;
    *(void *)(v17 + 64) = v28;
    *(void *)(v17 + 72) = v30;
    *(unsigned char *)(v17 + 80) = v32;
    *(_OWORD *)(v17 + 104) = v18;
    *(_OWORD *)(v17 + 120) = *((_OWORD *)a3 + 2);
    *(_OWORD *)(v17 + 129) = *(_OWORD *)((char *)a3 + 41);
    v35[0] = v21;
    v35[1] = v23;
    char v36 = v25;
    long long v37 = v27;
    uint64_t v38 = v29;
    uint64_t v39 = v31;
    char v40 = v33;
    unint64_t v41 = v15;
    uint64_t v42 = v16;
    uint64_t v43 = sub_25A3B862C;
    uint64_t v44 = v17;
    sub_25A3B8694(v10, v11, v13, v22, v24, v26, v28, v30, v32, 1);
    sub_25A3B28BC(v15);
    swift_retain();
    a5(&v45, v35);
    swift_bridgeObjectRelease();
    sub_25A3B2890(v15);
    uint64_t result = swift_release();
    if (!v6)
    {
      *(_OWORD *)a6 = 0u;
      *(_OWORD *)(a6 + 16) = 0u;
    }
  }
  else
  {
    *(void *)a6 = v10;
    *(void *)(a6 + 8) = v11;
    *(void *)(a6 + 16) = v13;
    a2(a6);
    *(void *)a1 = *(void *)(a6 + 24);
    long long v20 = *((_OWORD *)a3 + 1);
    *uint64_t v12 = *(_OWORD *)a3;
    v12[1] = v20;
    v12[2] = *((_OWORD *)a3 + 2);
    *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)((char *)a3 + 41);
    *(unsigned char *)(a1 + 65) = 1;
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 sub_25A3B7E24(uint64_t a1, long long *a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v11 = *(void *)(a1 + 136);
  uint64_t v23 = *(void *)(a1 + 128);
  uint64_t v30 = *(void *)(a1 + 24);
  uint64_t v31 = *(void *)(a1 + 16);
  char v29 = *(unsigned char *)(a1 + 32);
  uint64_t v27 = *(void *)(a1 + 48);
  uint64_t v28 = *(void *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 64);
  uint64_t v26 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 72);
  uint64_t v12 = *(uint64_t (**)(uint64_t))(a1 + 80);
  swift_bridgeObjectRetain();
  if (v12)
  {
    uint64_t v13 = swift_bridgeObjectRetain();
    uint64_t v14 = v12(v13);
    uint64_t v12 = v15;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(a4);
  sub_25A3B8738(a5, a4);
  swift_allocError();
  *(void *)uint64_t v16 = v10;
  *(void *)(v16 + 8) = v9;
  *(void *)(v16 + 16) = v23;
  *(void *)(v16 + 24) = v11;
  long long v18 = a2[1];
  long long v17 = a2[2];
  long long v19 = *a2;
  *(_OWORD *)(v16 + 73) = *(long long *)((char *)a2 + 41);
  *(_OWORD *)(v16 + 48) = v18;
  *(_OWORD *)(v16 + 64) = v17;
  *(_OWORD *)(v16 + 32) = v19;
  __n128 result = *(__n128 *)(a3 + 41);
  long long v22 = *(_OWORD *)(a3 + 16);
  long long v21 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v16 + 96) = *(_OWORD *)a3;
  *(_OWORD *)(v16 + 112) = v22;
  *(_OWORD *)(v16 + 128) = v21;
  *(__n128 *)(v16 + 137) = result;
  *(void *)(v16 + 160) = v31;
  *(void *)(v16 + 168) = v30;
  *(unsigned char *)(v16 + 176) = v29;
  *(void *)(v16 + 184) = v28;
  *(void *)(v16 + 192) = v27;
  *(void *)(v16 + 200) = v26;
  *(void *)(v16 + 208) = v25;
  *(unsigned char *)(v16 + 216) = v24;
  *(void *)(v16 + 224) = v14;
  *(void *)(v16 + 232) = v12;
  return result;
}

uint64_t AutoCancelling.wrappedValue.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutoCancelling.wrappedValue.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*AutoCancelling.wrappedValue.modify(void *a1))(void *a1)
{
  *a1 = *(void *)(v1 + 16);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return sub_25A3B8000;
}

uint64_t sub_25A3B8000(void *a1)
{
  *(void *)(a1[1] + 16) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t AutoCancelling.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  return result;
}

uint64_t AutoCancelling.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  return result;
}

uint64_t AutoCancelling.deinit()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Auto"
          "Cancelling.swift";
    uint64_t v12 = 126;
    char v13 = 2;
    long long v14 = xmmword_25A512B20;
    unint64_t v15 = "deinit";
    uint64_t v16 = 6;
    char v17 = 2;
    uint64_t v3 = swift_bridgeObjectRetain_n();
    uint64_t v4 = v1 + 48;
    do
    {
      uint64_t v9 = *(void (**)(uint64_t))(v4 - 16);
      uint64_t v5 = *(void *)(*(void *)v4 + 144);
      MEMORY[0x270FA5388](v3);
      swift_retain();
      swift_retain_n();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v5 + 76));
      sub_25A3B8530((long long *)(v5 + 16), &v10);
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 76));
      swift_release();
      uint64_t v6 = swift_release();
      if ((v10 & 1) == 0) {
        v9(v6);
      }
      swift_release();
      uint64_t v3 = swift_release();
      v4 += 24;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
    uint64_t v0 = v8;
  }
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AutoCancelling.__deallocating_deinit()
{
  AutoCancelling.deinit();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t AutoCancelling.projectedValue.getter@<X0>(uint64_t (**a1)()@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  uint64_t v3 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416730);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 76) = 0;
  *(unsigned char *)(v4 + 73) = 0;
  *(void *)(v3 + 144) = v4;
  *(void *)(v3 + 16) = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Previews"
                         "Foundation/AutoCancelling.swift";
  *(void *)(v3 + 24) = 126;
  *(unsigned char *)(v3 + 32) = 2;
  *(_OWORD *)(v3 + 40) = xmmword_25A512B30;
  *(void *)(v3 + 56) = "projectedValue";
  *(void *)(v3 + 64) = 14;
  *(unsigned char *)(v3 + 72) = 2;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = 0;
  *(_OWORD *)(v3 + 96) = xmmword_25A511960;
  *(void *)(v3 + 112) = 0xD000000000000011;
  *(void *)(v3 + 120) = 0x800000025A51E350;
  *(void *)(v3 + 128) = 0x64656C65636E6163;
  *(void *)(v3 + 136) = 0xE800000000000000;
  *a1 = sub_25A3B8548;
  a1[1] = v1;
  a1[2] = (uint64_t (*)())v3;

  return swift_retain();
}

uint64_t sub_25A3B8360(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = MEMORY[0x263F8EE78];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    char v10 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Auto"
          "Cancelling.swift";
    uint64_t v11 = 126;
    char v12 = 2;
    long long v13 = xmmword_25A512B40;
    long long v14 = "projectedValue";
    uint64_t v15 = 14;
    char v16 = 2;
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = v1 + 48;
    do
    {
      uint64_t v8 = *(void (**)(uint64_t))(v4 - 16);
      uint64_t v5 = *(void *)(*(void *)v4 + 144);
      MEMORY[0x270FA5388](v3);
      swift_retain();
      swift_retain();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v5 + 76));
      sub_25A3B8530((long long *)(v5 + 16), &v9);
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 76));
      uint64_t v6 = swift_release();
      if ((v9 & 1) == 0) {
        v8(v6);
      }
      swift_release();
      uint64_t v3 = swift_release();
      v4 += 24;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_25A3B8530@<X0>(long long *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_25A3B86E0(a1, a2);
}

uint64_t sub_25A3B8548()
{
  return sub_25A3B8360(v0);
}

uint64_t sub_25A3B8550@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_25A3B8560(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 16) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for AutoCancelling()
{
  return self;
}

uint64_t method lookup function for AutoCancelling(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AutoCancelling);
}

uint64_t dispatch thunk of AutoCancelling.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_25A3B85F4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 145, 7);
}

double sub_25A3B862C()
{
  *(void *)&double result = sub_25A3B7E24(*(void *)(v0 + 16), (long long *)(v0 + 24), v0 + 88, &qword_26A416710, &qword_26A416718).n128_u64[0];
  return result;
}

double sub_25A3B8660()
{
  *(void *)&double result = sub_25A3B7E24(*(void *)(v0 + 16), (long long *)(v0 + 24), v0 + 88, &qword_26A416720, &qword_26A416728).n128_u64[0];
  return result;
}

uint64_t sub_25A3B8694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if ((a10 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A3B86E0@<X0>(long long *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_25A3B77B4(a1, *(uint64_t (**)(void))(v2 + 16), *(uint64_t **)(v2 + 32), *(void *)(v2 + 40), *(void (**)(uint64_t, void *))(v2 + 48), a2);
}

double sub_25A3B8704()
{
  *(void *)&double result = sub_25A3B7E24(*(void *)(v0 + 16), (long long *)(v0 + 24), v0 + 88, &qword_26A416738, &qword_26A416740).n128_u64[0];
  return result;
}

uint64_t sub_25A3B8738(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t AnalyticsLogger.logEvent(identifierSuffix:makeFields:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a3();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(a1, a2, v10, a5, a6);

  return swift_bridgeObjectRelease();
}

uint64_t static AnalyticsFieldBuilder.buildBlock(_:)(uint64_t a1)
{
  uint64_t v38 = *(void *)(a1 + 16);
  if (!v38) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v37 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v1 = 0;
  uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  while (1)
  {
    uint64_t v3 = *(void *)(v37 + 8 * v1);
    uint64_t v41 = v1 + 1;
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v46 = v2;
    uint64_t v43 = v3 + 64;
    uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v6 = -v5 < 64 ? ~(-1 << -(char)v5) : -1;
    unint64_t v7 = v6 & *(void *)(v3 + 64);
    unint64_t v8 = (unint64_t)(63 - v5) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    int64_t v42 = v8;
    uint64_t v44 = v3;
    uint64_t v39 = v3 + 112;
    unint64_t v40 = v8 - 6;
    if (v7) {
      break;
    }
LABEL_11:
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_45;
    }
    if (v13 < v42)
    {
      unint64_t v14 = *(void *)(v43 + 8 * v13);
      uint64_t v12 = v9 + 1;
      if (v14) {
        goto LABEL_26;
      }
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < v42)
      {
        unint64_t v14 = *(void *)(v43 + 8 * v12);
        if (v14) {
          goto LABEL_26;
        }
        uint64_t v12 = v9 + 3;
        if (v9 + 3 < v42)
        {
          unint64_t v14 = *(void *)(v43 + 8 * v12);
          if (v14) {
            goto LABEL_26;
          }
          uint64_t v12 = v9 + 4;
          if (v9 + 4 < v42)
          {
            unint64_t v14 = *(void *)(v43 + 8 * v12);
            if (v14) {
              goto LABEL_26;
            }
            uint64_t v12 = v9 + 5;
            if (v9 + 5 < v42)
            {
              unint64_t v14 = *(void *)(v43 + 8 * v12);
              if (!v14)
              {
                uint64_t v15 = v9;
                do
                {
                  if (v40 == v15) {
                    goto LABEL_3;
                  }
                  unint64_t v14 = *(void *)(v39 + 8 * v15++);
                }
                while (!v14);
                uint64_t v12 = v15 + 5;
              }
LABEL_26:
              uint64_t v45 = (v14 - 1) & v14;
              unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
              goto LABEL_27;
            }
          }
        }
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    sub_25A39C550();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v1 = v41;
    if (v41 == v38)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v2;
    }
  }
  while (1)
  {
    uint64_t v45 = (v7 - 1) & v7;
    unint64_t v11 = __clz(__rbit64(v7)) | (v9 << 6);
    uint64_t v12 = v9;
LABEL_27:
    char v16 = (uint64_t *)(*(void *)(v44 + 48) + 16 * v11);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = *(void *)(v44 + 56) + 24 * v11;
    uint64_t v20 = *(void *)v19;
    unint64_t v21 = *(void *)(v19 + 8);
    char v22 = *(unsigned char *)(v19 + 16);
    swift_bridgeObjectRetain();
    sub_25A39373C(v20, v21, v22);
    swift_bridgeObjectRetain();
    sub_25A39373C(v20, v21, v22);
    swift_bridgeObjectRelease();
    sub_25A3B9028(v20, v21, v22);
    if (!v18) {
      goto LABEL_3;
    }
    unint64_t v24 = sub_25A409670(v17, v18);
    uint64_t v25 = v2[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      break;
    }
    char v28 = v23;
    if (v2[3] >= v27)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v2 = v46;
        if (v23) {
          goto LABEL_9;
        }
      }
      else
      {
        sub_25A40E61C();
        uint64_t v2 = v46;
        if (v28) {
          goto LABEL_9;
        }
      }
LABEL_35:
      v2[(v24 >> 6) + 8] |= 1 << v24;
      uint64_t v31 = (uint64_t *)(v2[6] + 16 * v24);
      *uint64_t v31 = v17;
      v31[1] = v18;
      uint64_t v32 = v2[7] + 24 * v24;
      *(void *)uint64_t v32 = v20;
      *(void *)(v32 + 8) = v21;
      *(unsigned char *)(v32 + 16) = v22;
      uint64_t v33 = v2[2];
      BOOL v34 = __OFADD__(v33, 1);
      uint64_t v35 = v33 + 1;
      if (v34) {
        goto LABEL_44;
      }
      v2[2] = v35;
      char isUniquelyReferenced_nonNull_native = 1;
      uint64_t v9 = v12;
      unint64_t v7 = v45;
      if (!v45) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_25A40A2E8(v27, isUniquelyReferenced_nonNull_native & 1);
      unint64_t v29 = sub_25A409670(v17, v18);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_46;
      }
      unint64_t v24 = v29;
      uint64_t v2 = v46;
      if ((v28 & 1) == 0) {
        goto LABEL_35;
      }
LABEL_9:
      swift_bridgeObjectRelease();
      uint64_t v10 = v2[7] + 24 * v24;
      sub_25A3B9028(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
      *(void *)uint64_t v10 = v20;
      *(void *)(v10 + 8) = v21;
      char isUniquelyReferenced_nonNull_native = 1;
      uint64_t v9 = v12;
      unint64_t v7 = v45;
      *(unsigned char *)(v10 + 16) = v22;
      if (!v45) {
        goto LABEL_11;
      }
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t static AnalyticsFieldBuilder.buildArray(_:)(uint64_t a1)
{
  uint64_t v38 = *(void *)(a1 + 16);
  if (!v38) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v37 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v1 = 0;
  uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  while (1)
  {
    uint64_t v3 = *(void *)(v37 + 8 * v1);
    uint64_t v41 = v1 + 1;
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v46 = v2;
    uint64_t v43 = v3 + 64;
    uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v6 = -v5 < 64 ? ~(-1 << -(char)v5) : -1;
    unint64_t v7 = v6 & *(void *)(v3 + 64);
    unint64_t v8 = (unint64_t)(63 - v5) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    int64_t v42 = v8;
    uint64_t v44 = v3;
    uint64_t v39 = v3 + 112;
    unint64_t v40 = v8 - 6;
    if (v7) {
      break;
    }
LABEL_11:
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_45;
    }
    if (v13 < v42)
    {
      unint64_t v14 = *(void *)(v43 + 8 * v13);
      uint64_t v12 = v9 + 1;
      if (v14) {
        goto LABEL_26;
      }
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < v42)
      {
        unint64_t v14 = *(void *)(v43 + 8 * v12);
        if (v14) {
          goto LABEL_26;
        }
        uint64_t v12 = v9 + 3;
        if (v9 + 3 < v42)
        {
          unint64_t v14 = *(void *)(v43 + 8 * v12);
          if (v14) {
            goto LABEL_26;
          }
          uint64_t v12 = v9 + 4;
          if (v9 + 4 < v42)
          {
            unint64_t v14 = *(void *)(v43 + 8 * v12);
            if (v14) {
              goto LABEL_26;
            }
            uint64_t v12 = v9 + 5;
            if (v9 + 5 < v42)
            {
              unint64_t v14 = *(void *)(v43 + 8 * v12);
              if (!v14)
              {
                uint64_t v15 = v9;
                do
                {
                  if (v40 == v15) {
                    goto LABEL_3;
                  }
                  unint64_t v14 = *(void *)(v39 + 8 * v15++);
                }
                while (!v14);
                uint64_t v12 = v15 + 5;
              }
LABEL_26:
              uint64_t v45 = (v14 - 1) & v14;
              unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
              goto LABEL_27;
            }
          }
        }
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    sub_25A39C550();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v1 = v41;
    if (v41 == v38)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v2;
    }
  }
  while (1)
  {
    uint64_t v45 = (v7 - 1) & v7;
    unint64_t v11 = __clz(__rbit64(v7)) | (v9 << 6);
    uint64_t v12 = v9;
LABEL_27:
    char v16 = (uint64_t *)(*(void *)(v44 + 48) + 16 * v11);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = *(void *)(v44 + 56) + 24 * v11;
    uint64_t v20 = *(void *)v19;
    unint64_t v21 = *(void *)(v19 + 8);
    char v22 = *(unsigned char *)(v19 + 16);
    swift_bridgeObjectRetain();
    sub_25A39373C(v20, v21, v22);
    swift_bridgeObjectRetain();
    sub_25A39373C(v20, v21, v22);
    swift_bridgeObjectRelease();
    sub_25A3B9028(v20, v21, v22);
    if (!v18) {
      goto LABEL_3;
    }
    unint64_t v24 = sub_25A409670(v17, v18);
    uint64_t v25 = v2[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      break;
    }
    char v28 = v23;
    if (v2[3] >= v27)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v2 = v46;
        if (v23) {
          goto LABEL_9;
        }
      }
      else
      {
        sub_25A40E61C();
        uint64_t v2 = v46;
        if (v28) {
          goto LABEL_9;
        }
      }
LABEL_35:
      v2[(v24 >> 6) + 8] |= 1 << v24;
      uint64_t v31 = (uint64_t *)(v2[6] + 16 * v24);
      *uint64_t v31 = v17;
      v31[1] = v18;
      uint64_t v32 = v2[7] + 24 * v24;
      *(void *)uint64_t v32 = v20;
      *(void *)(v32 + 8) = v21;
      *(unsigned char *)(v32 + 16) = v22;
      uint64_t v33 = v2[2];
      BOOL v34 = __OFADD__(v33, 1);
      uint64_t v35 = v33 + 1;
      if (v34) {
        goto LABEL_44;
      }
      v2[2] = v35;
      char isUniquelyReferenced_nonNull_native = 1;
      uint64_t v9 = v12;
      unint64_t v7 = v45;
      if (!v45) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_25A40A2E8(v27, isUniquelyReferenced_nonNull_native & 1);
      unint64_t v29 = sub_25A409670(v17, v18);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_46;
      }
      unint64_t v24 = v29;
      uint64_t v2 = v46;
      if ((v28 & 1) == 0) {
        goto LABEL_35;
      }
LABEL_9:
      swift_bridgeObjectRelease();
      uint64_t v10 = v2[7] + 24 * v24;
      sub_25A3B9028(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
      *(void *)uint64_t v10 = v20;
      *(void *)(v10 + 8) = v21;
      char isUniquelyReferenced_nonNull_native = 1;
      uint64_t v9 = v12;
      unint64_t v7 = v45;
      *(unsigned char *)(v10 + 16) = v22;
      if (!v45) {
        goto LABEL_11;
      }
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t sub_25A3B9028(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 4) {
    return sub_25A3B9048(result, a2);
  }
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A3B9048(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t static AnalyticsFieldBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_26A416748);
  uint64_t inited = swift_initStackObject();
  uint64_t v9 = inited;
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  if (a4) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = 0;
  }
  if (a4) {
    char v11 = 0;
  }
  else {
    char v11 = 5;
  }
  *(void *)(inited + 48) = v10;
  *(void *)(inited + 56) = a4;
  *(unsigned char *)(inited + 64) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_25A3929E0(v9);
}

unint64_t static AnalyticsFieldBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_26A416748);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  swift_bridgeObjectRetain();
  if ((a5 & 0x100) != 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    char v11 = 5;
  }
  else
  {
    uint64_t v9 = sub_25A50FE00();
    char v11 = 0;
  }
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = v10;
  *(unsigned char *)(inited + 64) = v11;
  return sub_25A3929E0(inited);
}

unint64_t static AnalyticsFieldBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  int v6 = a3;
  __swift_instantiateConcreteTypeFromMangledName(qword_26A416748);
  uint64_t inited = swift_initStackObject();
  uint64_t v8 = inited;
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  if (v6 == 2) {
    char v9 = 5;
  }
  else {
    char v9 = 1;
  }
  *(void *)(inited + 48) = a3 & 1;
  *(void *)(inited + 56) = 0;
  *(unsigned char *)(inited + 64) = v9;
  swift_bridgeObjectRetain();
  return sub_25A3929E0(v8);
}

unint64_t static AnalyticsFieldBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_26A416748);
  uint64_t inited = swift_initStackObject();
  uint64_t v9 = inited;
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  if (a4) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a3;
  }
  if (a4) {
    char v11 = 5;
  }
  else {
    char v11 = 2;
  }
  *(void *)(inited + 48) = v10;
  *(void *)(inited + 56) = 0;
  *(unsigned char *)(inited + 64) = v11;
  swift_bridgeObjectRetain();
  return sub_25A3929E0(v9);
}

{
  unint64_t result;
  uint64_t v9;
  char v10;

  __swift_instantiateConcreteTypeFromMangledName(qword_26A416748);
  uint64_t result = swift_initStackObject();
  uint64_t v9 = result;
  *(_OWORD *)(result + 16) = xmmword_25A5119F0;
  *(void *)(result + 32) = a1;
  *(void *)(result + 40) = a2;
  if (a4)
  {
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0;
    uint64_t v10 = 5;
    goto LABEL_5;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    *(void *)(result + 48) = a3;
    *(void *)(result + 56) = 0;
    uint64_t v10 = 2;
LABEL_5:
    *(unsigned char *)(result + 64) = v10;
    swift_bridgeObjectRetain();
    return sub_25A3929E0(v9);
  }
  __break(1u);
  return result;
}

{
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(qword_26A416748);
  uint64_t inited = swift_initStackObject();
  uint64_t v9 = inited;
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  if (a4) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a3;
  }
  if (a4) {
    char v11 = 5;
  }
  else {
    char v11 = 3;
  }
  *(void *)(inited + 48) = v10;
  *(void *)(inited + 56) = 0;
  *(unsigned char *)(inited + 64) = v11;
  swift_bridgeObjectRetain();
  return sub_25A3929E0(v9);
}

unint64_t static AnalyticsFieldBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_26A416748);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  swift_bridgeObjectRetain();
  sub_25A3B9664(a3, a4);
  sub_25A3B9678(a3, a4);
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  if (a4 >> 60 == 15) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = a3;
  }
  if (a4 >> 60 == 15) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = a4;
  }
  if (a4 >> 60 == 15) {
    char v11 = 5;
  }
  else {
    char v11 = 4;
  }
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = v10;
  *(unsigned char *)(inited + 64) = v11;
  sub_25A3B9664(a3, a4);
  return sub_25A3929E0(inited);
}

unint64_t static AnalyticsFieldBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_26A416748);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  swift_bridgeObjectRetain();
  sub_25A39373C(a3, a4, a5);
  sub_25A3B9028(a3, a4, a5);
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  swift_bridgeObjectRetain();
  sub_25A39373C(a3, a4, a5);
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = a3;
  *(void *)(inited + 56) = a4;
  *(unsigned char *)(inited + 64) = a5;
  return sub_25A3929E0(inited);
}

unint64_t static AnalyticsFieldBuilder.buildExpression<A>(_:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_26A416748);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  swift_bridgeObjectRetain();
  *(void *)(inited + 48) = sub_25A5105D0();
  *(void *)(inited + 56) = v5;
  *(unsigned char *)(inited + 64) = 0;
  return sub_25A3929E0(inited);
}

uint64_t sub_25A3B9664(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_25A39375C(a1, a2);
  }
  return a1;
}

uint64_t sub_25A3B9678(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_25A3B9048(a1, a2);
  }
  return a1;
}

uint64_t dispatch thunk of AnalyticsLogger.logEvent(identifierSuffix:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of AnalyticsLogger.hints.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnalyticsLogger.hints.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AnalyticsLogger.hints.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

ValueMetadata *type metadata accessor for AnalyticsFieldBuilder()
{
  return &type metadata for AnalyticsFieldBuilder;
}

uint64_t Ref.instance.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Ref.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Ref.hash(into:)()
{
  return sub_25A5104F0();
}

BOOL static Ref.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t Ref.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t sub_25A3B978C()
{
  return sub_25A510530();
}

uint64_t Set.insert<A>(_:)()
{
  swift_unknownObjectRetain();
  char v0 = sub_25A50F4C0();
  swift_unknownObjectRelease();
  return v0 & 1;
}

uint64_t Set.remove<A>(_:)()
{
  swift_unknownObjectRetain();
  sub_25A50F4D0();
  swift_unknownObjectRelease();
  return v1;
}

uint64_t Set.contains<A>(_:)()
{
  type metadata accessor for Ref();
  swift_unknownObjectRetain();
  swift_getWitnessTable();
  char v0 = sub_25A50F4F0();
  swift_unknownObjectRelease();
  return v0 & 1;
}

uint64_t type metadata accessor for Ref()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Set.forEach<A>(_:)()
{
  return sub_25A50EFF0();
}

uint64_t sub_25A3B99DC(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 24))(*a1);
}

uint64_t sub_25A3B9A10()
{
  return swift_getWitnessTable();
}

id NSUndoManager.withGrouping<A>(perform:)(void (*a1)(id))
{
  a1(objc_msgSend(v1, sel_beginUndoGrouping));
  return objc_msgSend(v1, sel_endUndoGrouping);
}

uint64_t DepthFirstRecursiveIterator.init(rootElements:dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v14 = (char *)&v19 - v13;
  uint64_t RecursiveIterator = type metadata accessor for DepthFirstRecursiveIterator();
  *(void *)(a5 + *(int *)(RecursiveIterator + 36)) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a4);
  sub_25A50EEF0();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a4);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a5, v14, AssociatedTypeWitness);
  uint64_t v17 = (void *)(a5 + *(int *)(RecursiveIterator + 40));
  uint64_t v18 = v20;
  void *v17 = v19;
  v17[1] = v18;
  return result;
}

uint64_t type metadata accessor for DepthFirstRecursiveIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t DepthFirstRecursiveIterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = sub_25A50FA40();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v61 = (char *)&v52 - v8;
  uint64_t v63 = v3;
  uint64_t v9 = *(void *)(v3 - 8);
  v3 -= 8;
  uint64_t v59 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  unint64_t v58 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v54 = (char *)&v52 - v13;
  MEMORY[0x270FA5388](v12);
  char v57 = (char *)&v52 - v14;
  uint64_t v67 = *(void *)(v3 + 32);
  uint64_t v69 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v52 - v17;
  uint64_t v19 = sub_25A50FA40();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v65 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v64 = (char *)&v52 - v24;
  MEMORY[0x270FA5388](v23);
  BOOL v26 = (char *)&v52 - v25;
  uint64_t v53 = *(int *)(v3 + 44);
  uint64_t v27 = *(void *)(v2 + v53);
  uint64_t v70 = v2;
  uint64_t v60 = v18;
  if (v27) {
    sub_25A50FD00();
  }
  else {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(a2, 1, 1, AssociatedTypeWitness);
  }
  char v28 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v66 = a2;
  v28(v26, (uint64_t)a2, v19);
  uint64_t v62 = v16;
  unint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v68 = AssociatedTypeWitness;
  int v30 = v29(v26, 1, AssociatedTypeWitness);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t))(v20 + 8);
  uint64_t result = v31(v26, v19);
  if (v30 == 1)
  {
    char v52 = v28;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v33 = v64;
    sub_25A50FAF0();
    BOOL v34 = v66;
    v31(v66, v19);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v34, v33, v19);
    uint64_t v35 = v65;
    v52(v65, (uint64_t)v34, v19);
    if (v29(v35, 1, v68) == 1)
    {
      return v31(v35, v19);
    }
    else
    {
      uint64_t v36 = v62;
      uint64_t v37 = v60;
      uint64_t v38 = v68;
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v60, v35, v68);
      uint64_t v39 = v63;
      uint64_t v40 = v70 + *(int *)(v63 + 40);
      uint64_t v41 = *(void (**)(char *))v40;
      uint64_t v42 = *(void *)(v40 + 8);
      uint64_t v43 = v61;
      (*(void (**)(char *))v40)(v37);
      uint64_t v44 = v69;
      uint64_t v45 = *(void *)(v69 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v69) == 1)
      {
        (*(void (**)(char *, uint64_t))(v55 + 8))(v43, v56);
        return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v37, v38);
      }
      else
      {
        uint64_t v46 = v54;
        Sequence.depthFirstRecursiveIterator(dataSource:)((uint64_t)v41, v42, v44, v67);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v44);
        uint64_t v47 = v59;
        uint64_t v48 = v57;
        (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v57, v46, v39);
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v58, v48, v39);
        swift_getWitnessTable();
        uint64_t v49 = sub_25A50FD10();
        (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v39);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
        uint64_t v50 = v53;
        uint64_t v51 = v70;
        uint64_t result = swift_release();
        *(void *)(v51 + v50) = v49;
      }
    }
  }
  return result;
}

uint64_t Sequence.depthFirstRecursiveIterator(dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A3BADA4(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))DepthFirstRecursiveIterator.init(rootElements:dataSource:));
}

uint64_t BreadthFirstRecursiveIterator.init(rootElements:dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v21 = a1;
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t RecursiveIterator = type metadata accessor for BreadthFirstRecursiveIterator();
  uint64_t v15 = *(int *)(RecursiveIterator + 36);
  *(void *)(a5 + v15) = sub_25A50F120();
  uint64_t v16 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v21, a4);
  sub_25A50EEF0();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v16, a4);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, AssociatedTypeWitness);
  uint64_t v18 = (void *)(a5 + *(int *)(RecursiveIterator + 40));
  uint64_t v19 = v23;
  *uint64_t v18 = v22;
  v18[1] = v19;
  return result;
}

uint64_t type metadata accessor for BreadthFirstRecursiveIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t BreadthFirstRecursiveIterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v54 = sub_25A50FA40();
  uint64_t v53 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v55 = (char *)&v48 - v6;
  uint64_t v76 = a1;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v60 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v57 = (char *)&v48 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v69 = sub_25A50FA40();
  uint64_t v61 = *(void (***)(char *, uint64_t))(v69 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v69);
  uint64_t v13 = (char *)&v48 - v12;
  uint64_t v58 = *(void *)(v10 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v51 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v49 = (char *)&v48 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v50 = (char *)&v48 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v68 = (char *)&v48 - v20;
  uint64_t v21 = sub_25A50FA40();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v59 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v67 = (char *)&v48 - v26;
  MEMORY[0x270FA5388](v25);
  char v28 = (char *)&v48 - v27;
  uint64_t v52 = v7;
  uint64_t v56 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_25A50FAF0();
  unint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v70 = a2;
  unsigned int v74 = v29;
  uint64_t v75 = v22 + 16;
  v29(v28, (uint64_t)a2, v21);
  int v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
  uint64_t v71 = AssociatedTypeWitness;
  int v72 = v30;
  uint64_t v73 = v60 + 48;
  unsigned int v31 = v30(v28, 1, AssociatedTypeWitness);
  uint64_t v77 = *(void (**)(char *, uint64_t))(v22 + 8);
  if (v31 == 1)
  {
    uint64_t v32 = (unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
    uint64_t v64 = (void (**)(uint64_t, char *, uint64_t))(v58 + 24);
    uint64_t v65 = (void (**)(char *, char *, uint64_t))(v58 + 32);
    uint64_t v62 = (void (**)(uint64_t, char *, uint64_t))(v22 + 32);
    uint64_t v63 = (void (**)(char *, uint64_t))(v58 + 8);
    ++v61;
    while (1)
    {
      v77(v28, v21);
      uint64_t v34 = v2;
      uint64_t v78 = *(void *)(v2 + *(int *)(v76 + 36));
      uint64_t v35 = sub_25A50F1E0();
      swift_getWitnessTable();
      if (sub_25A50F6C0()) {
        break;
      }
      Array.popFirst()(v35, (uint64_t)v13);
      if ((*v32)(v13, 1, v10) == 1)
      {
        (*v61)(v13, v69);
        uint64_t v33 = v70;
      }
      else
      {
        uint64_t v36 = v68;
        (*v65)(v68, v13, v10);
        (*v64)(v2, v36, v10);
        uint64_t v37 = v67;
        sub_25A50FAF0();
        (*v63)(v36, v10);
        uint64_t v33 = v70;
        v77(v70, v21);
        (*v62)((uint64_t)v33, v37, v21);
      }
      uint64_t v38 = v71;
      v74(v28, (uint64_t)v33, v21);
      if (v72(v28, 1, v38) != 1) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v34 = v2;
    v77(v28, v21);
  }
  uint64_t v39 = v59;
  v74(v59, (uint64_t)v70, v21);
  uint64_t v40 = v71;
  if (v72(v39, 1, v71) == 1) {
    return ((uint64_t (*)(char *, uint64_t))v77)(v39, v21);
  }
  uint64_t v42 = v60;
  uint64_t v43 = v57;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v57, v39, v40);
  uint64_t v44 = v55;
  (*(void (**)(char *))(v34 + *(int *)(v76 + 40)))(v43);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 48))(v44, 1, v56) == 1)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v44, v54);
  }
  else
  {
    uint64_t v45 = v49;
    sub_25A50EEF0();
    uint64_t v46 = v58;
    uint64_t v47 = v50;
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v50, v45, v10);
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v51, v47, v10);
    sub_25A50F1E0();
    sub_25A50F180();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v10);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v43, v40);
}

uint64_t Sequence.breadthFirstRecursiveIterator(dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A3BADA4(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))BreadthFirstRecursiveIterator.init(rootElements:dataSource:));
}

uint64_t sub_25A3BADA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v5);
  swift_retain();
  return a5(v12, a1, a2, a3, a4);
}

uint64_t sub_25A3BAEA0()
{
  return sub_25A3BB5BC();
}

void *sub_25A3BAEAC(void *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = v9;
    a1 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(void *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    uint64_t v10 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    uint64_t v12 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = v12[1];
    uint64_t v14 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v14 = *v12;
    v14[1] = v13;
    swift_retain();
  }
  swift_retain();
  return a1;
}

uint64_t sub_25A3BAFE0(uint64_t a1, uint64_t a2)
{
  return sub_25A3BB7BC(a1, a2, MEMORY[0x263F8EED8]);
}

uint64_t sub_25A3BAFF8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_25A3BB0B4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
  *uint64_t v10 = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  v10[1] = v11;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_25A3BB188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3BBAC0(a1, a2, a3, MEMORY[0x263F8EED8]);
}

uint64_t sub_25A3BB1A0(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x25A3BB350);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)(((((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

void sub_25A3BB364(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v9 >= a3)
  {
    int v13 = 0;
    int v14 = a2 - v9;
    if (a2 <= v9)
    {
LABEL_17:
      switch(v13)
      {
        case 1:
          *((unsigned char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)((char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)((char *)a1 + v10) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v18 = (void *)(((((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v19 = a2 ^ 0x80000000;
                v18[1] = 0;
              }
              else
              {
                uint64_t v19 = (a2 - 1);
              }
              *unint64_t v18 = v19;
            }
            else
            {
              uint64_t v17 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
              v17(a1, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v11 = a3 - v9 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    int v14 = a2 - v9;
    if (a2 <= v9) {
      goto LABEL_17;
    }
  }
  if (((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v15 = v14;
  }
  else {
    int v15 = 1;
  }
  if (((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v16 = ~v9 + a2;
    bzero(a1, v10);
    *a1 = v16;
  }
  switch(v13)
  {
    case 1:
      *((unsigned char *)a1 + v10) = v15;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v10) = v15;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x25A3BB584);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = v15;
      break;
    default:
      return;
  }
}

uint64_t sub_25A3BB5AC()
{
  return sub_25A3BB5BC();
}

uint64_t sub_25A3BB5BC()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_25A3BB670(void *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = v9;
    a1 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(void *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    size_t v10 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *size_t v10 = *v11;
    int v12 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = v12[1];
    int v14 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v14 = *v12;
    v14[1] = v13;
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return a1;
}

uint64_t sub_25A3BB7A4(uint64_t a1, uint64_t a2)
{
  return sub_25A3BB7BC(a1, a2, MEMORY[0x263F8EEA0]);
}

uint64_t sub_25A3BB7BC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v6)(a1, AssociatedTypeWitness);
  a3(*(void *)((a1 + *(void *)(v6 + 56) + 7) & 0xFFFFFFFFFFFFFFF8));

  return swift_release();
}

uint64_t sub_25A3BB86C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_25A3BB928(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  size_t v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
  *size_t v10 = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  v10[1] = v11;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_25A3BB9F8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_25A3BBAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3BBAC0(a1, a2, a3, MEMORY[0x263F8EEA0]);
}

uint64_t sub_25A3BBAC0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v8)(a1, a2, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v8 + 24) + 7;
  size_t v10 = (uint64_t *)((v9 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (uint64_t *)((v9 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = *v10;
  *size_t v10 = *v11;
  a4(v12);
  *(_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_25A3BBB88(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x25A3BBD30);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

void sub_25A3BBD44(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v9 >= a3)
  {
    int v13 = 0;
    int v14 = a2 - v9;
    if (a2 <= v9)
    {
LABEL_17:
      switch(v13)
      {
        case 1:
          *((unsigned char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)((char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)((char *)a1 + v10) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v18 = (void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v19 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v19 = (a2 - 1);
              }
              *unint64_t v18 = v19;
            }
            else
            {
              uint64_t v17 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
              v17(a1, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v11 = a3 - v9 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    int v14 = a2 - v9;
    if (a2 <= v9) {
      goto LABEL_17;
    }
  }
  if (((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v15 = v14;
  }
  else {
    int v15 = 1;
  }
  if (((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v16 = ~v9 + a2;
    bzero(a1, v10);
    *a1 = v16;
  }
  switch(v13)
  {
    case 1:
      *((unsigned char *)a1 + v10) = v15;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v10) = v15;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x25A3BBF58);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = v15;
      break;
    default:
      return;
  }
}

uint64_t Future.__allocating_init(dsoHandle:file:line:column:function:callback:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, void (*a10)(uint64_t), uint64_t a11)
{
  return sub_25A3BE3E4(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_25A3BBFB0(long long *a1, void (*a2)(uint64_t), uint64_t a3)
{
  char v4 = *((unsigned char *)a1 + 16);
  char v5 = *((unsigned char *)a1 + 56);
  long long v7 = *a1;
  char v8 = v4;
  long long v9 = *(long long *)((char *)a1 + 24);
  long long v10 = *(long long *)((char *)a1 + 40);
  char v11 = v5;
  sub_25A3BC014((uint64_t)&v7, a2, a3, v3, (uint64_t)&v12);
  return v12;
}

uint64_t sub_25A3BC014@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v23 = a2;
  uint64_t v21 = a5;
  uint64_t v6 = *(void *)(a4 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  long long v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)v7;
  uint64_t v11 = *(void *)(v7 + 8);
  char v12 = *(unsigned char *)(v7 + 16);
  long long v20 = *(_OWORD *)(v7 + 24);
  uint64_t v13 = *(void *)(v7 + 40);
  uint64_t v14 = *(void *)(v7 + 48);
  char v15 = *(unsigned char *)(v7 + 56);
  type metadata accessor for Future();
  v24[0] = v10;
  v24[1] = v11;
  char v25 = v12;
  long long v26 = v20;
  uint64_t v27 = v13;
  uint64_t v28 = v14;
  char v29 = v15;
  uint64_t v16 = sub_25A3BC17C((uint64_t)v24);
  uint64_t v18 = v17;
  v24[0] = v16;
  swift_retain();
  swift_dynamicCast();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v21, v9, a4);
  v23(v18);
  swift_release();
  return swift_release();
}

uint64_t sub_25A3BC17C(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  char v6 = *(unsigned char *)(a1 + 56);
  type metadata accessor for PromiseFuture();
  v10[0] = v1;
  v10[1] = v2;
  char v11 = v3;
  long long v12 = v9;
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  char v15 = v6;
  swift_allocObject();
  uint64_t v7 = sub_25A3BC354(v10);
  type metadata accessor for Promise();
  *(void *)(swift_allocObject() + 16) = v7;
  return swift_retain();
}

uint64_t static Future.create(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, void (*a10)(uint64_t))
{
  v13[0] = a2;
  v13[1] = a3;
  char v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  uint64_t v18 = a8;
  char v19 = a9;
  uint64_t v10 = sub_25A3BC17C((uint64_t)v13);
  a10(v11);
  swift_release();
  return v10;
}

uint64_t static Future.create(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_25A3BE428(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_25A3BC2E4(uint64_t *a1)
{
  return sub_25A3BC354(a1);
}

uint64_t sub_25A3BC320(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t sub_25A3BC354(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for FutureState();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v14 - v5;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  char v9 = *((unsigned char *)a1 + 16);
  long long v16 = *(_OWORD *)(a1 + 3);
  uint64_t v10 = a1[5];
  uint64_t v15 = a1[6];
  HIDWORD(v14) = *((unsigned __int8 *)a1 + 56);
  uint64_t v11 = type metadata accessor for FutureTermination();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  swift_retain();
  uint64_t v12 = sub_25A3EF560(v6, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(void *)(v1 + 104) = v12;
  swift_release();
  v17[0] = v7;
  v17[1] = v8;
  char v18 = v9;
  long long v19 = v16;
  uint64_t v20 = v10;
  uint64_t v21 = v15;
  char v22 = BYTE4(v14);
  return sub_25A4EECC4((uint64_t)v17);
}

uint64_t sub_25A3BC4F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FutureTermination();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - v4;
  LOBYTE(v4) = *(unsigned char *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 56);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a1;
  unsigned char v5[16] = v4;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(a1 + 40);
  v5[56] = v6;
  swift_storeEnumTagMultiPayload();
  sub_25A3BC954((uint64_t)v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25A3BC604(uint64_t a1)
{
  sub_25A39F4F8(a1, (uint64_t)v5, &qword_26A415DA8);
  uint64_t v2 = *(void *)(v1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 76));
  sub_25A3C0000((void *)(v2 + 16), (BOOL *)&v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 76));
  char v3 = v6;
  uint64_t result = swift_release();
  if (v3)
  {
    sub_25A39F4F8((uint64_t)v5, (uint64_t)&v6, &qword_26A415DA8);
    return sub_25A39DAE0((uint64_t)&v6);
  }
  return result;
}

uint64_t sub_25A3BC714(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 104);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_25A3BE6E0(v4, &v8);
  os_unfair_lock_unlock(v5);
  char v6 = v8;
  uint64_t result = swift_release();
  if (v6) {
    return sub_25A39DD44(a1);
  }
  return result;
}

uint64_t sub_25A3BC844(uint64_t a1)
{
  sub_25A39F4F8(a1, (uint64_t)v5, &qword_26A415D90);
  uint64_t v2 = *(void *)(v1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 76));
  sub_25A3BE6FC((void *)(v2 + 16), (BOOL *)&v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 76));
  char v3 = v6;
  uint64_t result = swift_release();
  if (v3)
  {
    sub_25A39F4F8((uint64_t)v5, (uint64_t)&v6, &qword_26A415D90);
    return sub_25A39E1AC((uint64_t)&v6);
  }
  return result;
}

uint64_t sub_25A3BC954(uint64_t a1)
{
  return sub_25A3BCC0C(a1);
}

uint64_t sub_25A3BC9CC()
{
  uint64_t v0 = type metadata accessor for FutureTermination();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  char v3 = (uint64_t *)((char *)&v6 - v2);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v4 = sub_25A510540();
  sub_25A50B2F4(v4, v3);
  sub_25A3BC954((uint64_t)v3);
  return (*(uint64_t (**)(void *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_25A3BCAE0()
{
  uint64_t v0 = type metadata accessor for FutureTermination();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  char v3 = (uint64_t *)((char *)&v6 - v2);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v4 = sub_25A510540();
  sub_25A50B2F4(v4, v3);
  sub_25A3BCC0C((uint64_t)v3);
  return (*(uint64_t (**)(void *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_25A3BCC0C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v11 = v1[13];
  uint64_t v9 = *(void *)(v4 + 200);
  uint64_t v10 = a1;
  type metadata accessor for FutureState();
  uint64_t v5 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/PromiseFuture.swift", 125, 2, 136, 51, (uint64_t)"tryTransition(to:)", 18, 2, (uint64_t)sub_25A3BE6AC, (uint64_t)v8, v5, MEMORY[0x263F8D4F8], WitnessTable);
  uint64_t result = swift_release();
  if (!v2 && v12 == 1) {
    return sub_25A4EF7A8(a1);
  }
  return result;
}

uint64_t sub_25A3BCD40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v34 = a2;
  uint64_t v6 = type metadata accessor for FutureTermination();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  int v30 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  unsigned int v31 = (char *)&v29 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v33 = (char *)&v29 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = type metadata accessor for FutureState();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  long long v19 = (char *)&v29 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v29 - v18, a1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v19, 1, v6) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, v34, v6);
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    *uint64_t v32 = 1;
    return result;
  }
  uint64_t v21 = (uint64_t)v31;
  uint64_t v29 = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v19, v6);
  BOOL v22 = FutureTermination.isCompleted.getter(v6);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v23(v33, v34, v6);
  if (v22)
  {
    uint64_t v24 = v15;
    char v25 = v33;
    BOOL v26 = FutureTermination.isCompleted.getter(v6);
    uint64_t v27 = *(void (**)(char *, uint64_t))(v7 + 8);
    v27(v25, v6);
    if (v26)
    {
      v23((char *)v21, (uint64_t)v24, v6);
      v23(v30, v34, v6);
      type metadata accessor for PromiseFuture.TransitionError();
      swift_getWitnessTable();
      swift_allocError();
      sub_25A3BD124(v21, (uint64_t)v30, v28);
      swift_willThrow();
      return ((uint64_t (*)(char *, uint64_t))v27)(v24, v6);
    }
  }
  else
  {
    uint64_t v24 = v15;
    uint64_t v27 = *(void (**)(char *, uint64_t))(v7 + 8);
    v27(v33, v6);
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v24, v6);
  *uint64_t v32 = 0;
  return result;
}

uint64_t sub_25A3BD124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FutureTermination();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t))v9)((void *)(v6 - 8), a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for PromiseFuture.TransitionError() + 28);

  return v9(v7, a2, v6);
}

uint64_t sub_25A3BD1EC()
{
  return 0;
}

uint64_t sub_25A3BD2EC()
{
  return swift_release();
}

uint64_t sub_25A3BD2F4()
{
  uint64_t v0 = Future.deinit();
  swift_release();

  return MEMORY[0x270FA0228](v0, 112, 7);
}

uint64_t Promise.track(future:on:)(uint64_t result, uint64_t *a2)
{
  if (*(void *)(v2 + 16) != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = a2[1];
    uint64_t v6 = *a2;
    uint64_t v5 = v6;
    uint64_t v7 = v4;
    swift_retain();
    Future.observeCompletion(on:_:)((uint64_t)&v6, (uint64_t)sub_25A3BE460, v2);
    swift_release();
    uint64_t v6 = v5;
    uint64_t v7 = v4;
    swift_retain();
    Future.observeCancelation(on:_:)((uint64_t)&v6, (uint64_t)sub_25A3BE484, v2);
    swift_release();
    uint64_t v6 = v5;
    uint64_t v7 = v4;
    swift_retain();
    Future.observeCancelation(on:_:)((uint64_t)&v6, (uint64_t)sub_25A3BE48C, v3);
    return swift_release();
  }
  return result;
}

uint64_t Promise.fulfill(with:)()
{
  return sub_25A3BC9CC();
}

uint64_t sub_25A3BD450(long long *a1)
{
  char v1 = *((unsigned char *)a1 + 16);
  char v2 = *((unsigned char *)a1 + 56);
  long long v4 = *a1;
  char v5 = v1;
  long long v6 = *(long long *)((char *)a1 + 24);
  long long v7 = *(long long *)((char *)a1 + 40);
  char v8 = v2;
  return sub_25A3BC4F0((uint64_t)&v4);
}

uint64_t Promise.cancel(callsite:)(long long *a1)
{
  char v1 = *((unsigned char *)a1 + 16);
  char v2 = *((unsigned char *)a1 + 56);
  long long v4 = *a1;
  char v5 = v1;
  long long v6 = *(long long *)((char *)a1 + 24);
  long long v7 = *(long long *)((char *)a1 + 40);
  char v8 = v2;
  return sub_25A3BC4F0((uint64_t)&v4);
}

uint64_t sub_25A3BD500(long long *a1, uint64_t a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  char v3 = *((unsigned char *)a1 + 56);
  long long v5 = *a1;
  char v6 = v2;
  long long v7 = *(long long *)((char *)a1 + 24);
  long long v8 = *(long long *)((char *)a1 + 40);
  char v9 = v3;
  return (*(uint64_t (**)(long long *))(*(void *)a2 + 192))(&v5);
}

uint64_t Promise.deinit()
{
  swift_release();
  return v0;
}

uint64_t Promise.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t Promise.observeCancelation(on:_:)(long long *a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *a1;
  return Future.observeCancelation(on:_:)((uint64_t)&v4, a2, a3);
}

uint64_t Promise.cancel(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_25A3BE494(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t Promise.succeed(with:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v4 = sub_25A510540();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))((char *)&v9 - v6, a1, v3);
  swift_storeEnumTagMultiPayload();
  sub_25A3BC9CC();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Promise.fail(with:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v2 = sub_25A510540();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - v4;
  *(uint64_t *)((char *)&v8 - v4) = (uint64_t)a1;
  swift_storeEnumTagMultiPayload();
  id v6 = a1;
  sub_25A3BC9CC();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Promise<A>.succeed()()
{
  memset(v1, 0, 58);
  return sub_25A3BC604((uint64_t)v1);
}

uint64_t Promise<A>.trySucceed()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  memset(v7, 0, 58);
  uint64_t v3 = *(void *)(v2 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 76));
  sub_25A3BE4D8((void *)(v3 + 16), &v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 76));
  if (v1) {
    return swift_release();
  }
  BOOL v5 = v6;
  uint64_t result = swift_release();
  if (v5)
  {
    sub_25A39F4F8((uint64_t)v7, (uint64_t)v8, &qword_26A415DA8);
    return sub_25A39DAE0((uint64_t)v8);
  }
  return result;
}

uint64_t Promise.trySucceed(with:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v4 = sub_25A510540();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))((char *)v9 - v6, a1, v3);
  swift_storeEnumTagMultiPayload();
  sub_25A3BCAE0();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

BOOL Promise.isCanceled.getter()
{
  return sub_25A4EF184();
}

uint64_t Promise.tryFulfill(with:)()
{
  return sub_25A3BCAE0();
}

uint64_t Promise.tryFail(with:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v2 = sub_25A510540();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - v4;
  *(uint64_t *)((char *)&v8 - v4) = (uint64_t)a1;
  swift_storeEnumTagMultiPayload();
  id v6 = a1;
  sub_25A3BCAE0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Promise.fulfill(on:handler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v18[0] = a1;
  uint64_t v7 = sub_25A50E750();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25A50E790();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = v4;
  v15[3] = a2;
  v15[4] = a3;
  aBlock[4] = sub_25A3BE534;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25A3BE05C;
  aBlock[3] = &block_descriptor;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_25A50E770();
  v18[1] = MEMORY[0x263F8EE78];
  sub_25A3BE558();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
  sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
  sub_25A50FC90();
  MEMORY[0x26113D8E0](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_25A3BDF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a1 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v6 = sub_25A510540();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v11[-v8];
  uint64_t v12 = v5;
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  sub_25A39CF80((void (*)(unsigned char *))sub_25A3BFFE8, (uint64_t)&v11[-v8]);
  sub_25A3BC9CC();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_25A3BE05C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t Promise.fulfill(handler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v6 = sub_25A510540();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v11[-v8];
  uint64_t v12 = v5;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  sub_25A39CF80((void (*)(unsigned char *))sub_25A3BE5B0, (uint64_t)&v11[-v8]);
  sub_25A3BC9CC();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

void *sub_25A3BE1F0@<X0>(void *result@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(unsigned __int8 *)(a2 + 56);
  int v12 = *(unsigned __int8 *)(a2 + 57);
  uint64_t v13 = *((unsigned __int16 *)result + 28);
  unsigned int v14 = v13 >> 8;
  if (v13 >> 8 < 0xFF)
  {
    if (v14 != 2 && v12 != 2)
    {
      uint64_t v16 = (void *)*result;
      uint64_t v25 = result[1];
      uint64_t v23 = result[3];
      uint64_t v24 = result[2];
      uint64_t v21 = result[5];
      uint64_t v22 = result[4];
      uint64_t v20 = result[6];
      unsigned int v19 = *(unsigned __int8 *)(a2 + 56);
      uint64_t v17 = *(void *)(a2 + 40);
      uint64_t v18 = *(void *)(a2 + 48);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4169E8);
      sub_25A3BE718(qword_26A4169F0, &qword_26A4169E8);
      swift_allocError();
      *(void *)uint64_t v15 = v16;
      *(void *)(v15 + 8) = v25;
      *(void *)(v15 + 16) = v24;
      *(void *)(v15 + 24) = v23;
      *(void *)(v15 + 32) = v22;
      *(void *)(v15 + 40) = v21;
      *(void *)(v15 + 48) = v20;
      *(_WORD *)(v15 + 56) = v13;
      *(void *)(v15 + 64) = v5;
      *(void *)(v15 + 72) = v4;
      *(void *)(v15 + 80) = v7;
      *(void *)(v15 + 88) = v6;
      *(void *)(v15 + 96) = v9;
      *(void *)(v15 + 104) = v17;
      *(void *)(v15 + 112) = v18;
      *(unsigned char *)(v15 + 120) = v19;
      *(unsigned char *)(v15 + 121) = v12;
      sub_25A39F590(v5, v4, v7, v6, v9, v17, v18, v19, v12);
      sub_25A3BE75C(v16, v25, v24, v23, v22, v21, v20, v13);
      return (void *)swift_willThrow();
    }
  }
  else
  {
    *uint64_t result = v5;
    result[1] = v4;
    result[2] = v7;
    result[3] = v6;
    result[4] = v9;
    result[5] = v8;
    result[6] = v10;
    *((_WORD *)result + 28) = v11 | ((_WORD)v12 << 8);
    uint64_t result = sub_25A39F590(v5, v4, v7, v6, v9, v8, v10, v11, v12);
  }
  *a3 = v14 > 0xFE;
  return result;
}

uint64_t sub_25A3BE3E4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, void (*a9)(uint64_t), uint64_t a10)
{
  *(void *)&long long v11 = a1;
  *((void *)&v11 + 1) = a2;
  char v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v15 = a6;
  uint64_t v16 = a7;
  char v17 = a8;
  return sub_25A3BBFB0(&v11, a9, a10);
}

uint64_t sub_25A3BE428(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  v9[0] = a1;
  v9[1] = a2;
  char v10 = a3;
  uint64_t v11 = a4;
  uint64_t v12 = a5;
  uint64_t v13 = a6;
  uint64_t v14 = a7;
  char v15 = a8;
  return sub_25A3BC17C((uint64_t)v9);
}

uint64_t sub_25A3BE460()
{
  return sub_25A3BC9CC();
}

uint64_t sub_25A3BE484(long long *a1)
{
  return sub_25A3BD450(a1);
}

uint64_t sub_25A3BE48C(long long *a1)
{
  return sub_25A3BD500(a1, v1);
}

uint64_t sub_25A3BE494(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  v9[0] = a1;
  v9[1] = a2;
  char v10 = a3;
  uint64_t v11 = a4;
  uint64_t v12 = a5;
  uint64_t v13 = a6;
  uint64_t v14 = a7;
  char v15 = a8;
  return sub_25A3BC4F0((uint64_t)v9);
}

void *sub_25A3BE4D8@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_25A3BE1F0(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_25A3BE4F4()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A3BE534()
{
  return sub_25A3BDF08(v0[2], v0[3], v0[4]);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_25A3BE558()
{
  unint64_t result = qword_26A4168D0;
  if (!qword_26A4168D0)
  {
    sub_25A50E750();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4168D0);
  }
  return result;
}

uint64_t sub_25A3BE5B0(void *a1)
{
  return sub_25A39CF48(*(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 16), a1);
}

uint64_t sub_25A3BE5D4()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PromiseFuture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3BE634()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Promise()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for Promise(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Promise);
}

uint64_t sub_25A3BE6AC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_25A3BCD40(a1, *(void *)(v2 + 24), *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for PromiseFuture.TransitionError()
{
  return __swift_instantiateGenericMetadata();
}

BOOL sub_25A3BE6E0@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_25A4CDBB0(a1, *(void *)(v2 + 16), a2);
}

void *sub_25A3BE6FC@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_25A504A38(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_25A3BE718(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_25A3BE75C(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (BYTE1(a8) != 255) {
    return sub_25A39F590(result, a2, a3, a4, a5, a6, a7, a8, SBYTE1(a8));
  }
  return result;
}

uint64_t sub_25A3BE794()
{
  uint64_t result = type metadata accessor for FutureTermination();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_25A3BE824(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = (char *)a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v5 + 64) <= 0x39uLL) {
    uint64_t v6 = 57;
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = v6 + 1;
  int v8 = *(_DWORD *)(v5 + 80);
  uint64_t v9 = v8 & 0xF8 | 7;
  uint64_t v10 = ~v9;
  if ((v8 & 0x1000F8) != 0 || ((v6 + 1 + v9) & (unint64_t)~v9) + v6 + 1 > 0x18)
  {
    uint64_t v12 = *(char **)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = &v12[(v9 + 16) & v10];
    swift_retain();
  }
  else
  {
    unsigned int v13 = a2[v6];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v6 <= 3) {
        uint64_t v15 = v6;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v6 >= 4) {
            goto LABEL_26;
          }
          goto LABEL_20;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v6 >= 4) {
            goto LABEL_26;
          }
          goto LABEL_20;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v6 < 4) {
            goto LABEL_20;
          }
          goto LABEL_26;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v6 < 4)
          {
LABEL_20:
            unsigned int v13 = (v16 | (v14 << (8 * v6))) + 3;
            break;
          }
LABEL_26:
          unsigned int v13 = v16 + 3;
          if (v13 == 2) {
            goto LABEL_27;
          }
          goto LABEL_22;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
LABEL_27:
      long long v20 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v20;
      a1[2] = *((_OWORD *)a2 + 2);
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)(a2 + 41);
      char v19 = 2;
    }
    else
    {
LABEL_22:
      if (v13 == 1)
      {
        uint64_t v17 = *(void *)a2;
        id v18 = *(id *)a2;
        *(void *)uint64_t v4 = v17;
        char v19 = 1;
      }
      else
      {
        (*(void (**)(_OWORD *, unsigned __int8 *, void))(v5 + 16))(a1, a2, *(void *)(a3 + 16));
        char v19 = 0;
      }
    }
    v4[v6] = v19;
    uint64_t v21 = (_OWORD *)((unint64_t)&v4[v7 + 7] & v10);
    uint64_t v22 = (id *)((unint64_t)&a2[v7 + 7] & v10);
    unsigned int v23 = *((unsigned __int8 *)v22 + v6);
    unsigned int v24 = v23 - 3;
    if (v23 >= 3)
    {
      if (v6 <= 3) {
        uint64_t v25 = v6;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *(unsigned __int8 *)v22;
          goto LABEL_37;
        case 2:
          int v26 = *(unsigned __int16 *)v22;
          goto LABEL_37;
        case 3:
          int v26 = *(unsigned __int16 *)v22 | (*(unsigned __int8 *)(((unint64_t)&a2[v7 + 7] & v10) + 2) << 16);
          goto LABEL_37;
        case 4:
          int v26 = *(_DWORD *)v22;
LABEL_37:
          int v27 = (v26 | (v24 << (8 * v6))) + 3;
          unsigned int v23 = v26 + 3;
          if (v6 < 4) {
            unsigned int v23 = v27;
          }
          break;
        default:
          break;
      }
    }
    if (v23 == 2)
    {
      long long v30 = *(_OWORD *)v22;
      long long v31 = *(_OWORD *)(((unint64_t)&a2[v7 + 7] & v10) + 0x10);
      long long v32 = *(_OWORD *)(((unint64_t)&a2[v7 + 7] & v10) + 0x20);
      *(_OWORD *)(((unint64_t)&v4[v7 + 7] & v10) + 0x29) = *(_OWORD *)(((unint64_t)&a2[v7 + 7] & v10)
                                                                            + 0x29);
      *(_OWORD *)(((unint64_t)&v4[v7 + 7] & v10) + 0x10) = v31;
      *(_OWORD *)(((unint64_t)&v4[v7 + 7] & v10) + 0x20) = v32;
      *uint64_t v21 = v30;
      *((unsigned char *)v21 + v6) = 2;
    }
    else if (v23 == 1)
    {
      id v28 = *v22;
      id v29 = *v22;
      *(void *)uint64_t v21 = v28;
      *((unsigned char *)v21 + v6) = 1;
    }
    else
    {
      (*(void (**)(unint64_t))(v5 + 16))((unint64_t)&v4[v7 + 7] & v10);
      *((unsigned char *)v21 + v6) = 0;
    }
  }
  return v4;
}

void sub_25A3BEB30(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  if (*(void *)(v3 + 64) <= 0x39uLL) {
    uint64_t v4 = 57;
  }
  else {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 3;
  if (v5 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 3;
        unsigned int v5 = v8 + 3;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 != 2)
  {
    uint64_t v19 = *(void *)(*(void *)(a2 + 16) - 8);
    if (v5 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, void))(v3 + 8))(a1, *(void *)(a2 + 16));
    }
    uint64_t v3 = v19;
  }
  uint64_t v10 = *(_DWORD *)(v3 + 80) & 0xF8 | 7;
  uint64_t v11 = (unsigned __int8 *)((unint64_t)&a1[v4 + 1 + v10] & ~v10);
  unsigned int v12 = v11[v4];
  unsigned int v13 = v12 - 3;
  if (v12 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v14 = v4;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *v11;
        goto LABEL_29;
      case 2:
        int v15 = *(unsigned __int16 *)v11;
        goto LABEL_29;
      case 3:
        int v15 = *(unsigned __int16 *)v11 | (v11[2] << 16);
        goto LABEL_29;
      case 4:
        int v15 = *(_DWORD *)v11;
LABEL_29:
        int v16 = (v15 | (v13 << (8 * v4))) + 3;
        unsigned int v12 = v15 + 3;
        if (v4 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v12 != 2)
  {
    if (v12 == 1)
    {
      uint64_t v17 = *(void **)v11;
    }
    else
    {
      id v18 = *(void (**)(void))(v3 + 8);
      v18();
    }
  }
}

_OWORD *sub_25A3BED94(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v5 + 64) <= 0x39uLL) {
    uint64_t v6 = 57;
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 3;
  if (v7 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 3;
        unsigned int v7 = v10 + 3;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 2)
  {
    long long v15 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v15;
    a1[2] = *((_OWORD *)a2 + 2);
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)(a2 + 41);
    char v14 = 2;
  }
  else if (v7 == 1)
  {
    uint64_t v12 = *(void *)a2;
    id v13 = *(id *)a2;
    *(void *)a1 = v12;
    char v14 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *, unsigned __int8 *, void))(v5 + 16))(a1, a2, *(void *)(a3 + 16));
    char v14 = 0;
  }
  *((unsigned char *)a1 + v6) = v14;
  uint64_t v16 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  uint64_t v17 = v6 + v16 + 1;
  id v18 = (_OWORD *)(((unint64_t)a1 + v17) & ~v16);
  uint64_t v19 = (unsigned __int8 *)((unint64_t)&a2[v17] & ~v16);
  unsigned int v20 = v19[v6];
  unsigned int v21 = v20 - 3;
  if (v20 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v22 = v6;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *v19;
        goto LABEL_29;
      case 2:
        int v23 = *(unsigned __int16 *)v19;
        goto LABEL_29;
      case 3:
        int v23 = *(unsigned __int16 *)v19 | (v19[2] << 16);
        goto LABEL_29;
      case 4:
        int v23 = *(_DWORD *)v19;
LABEL_29:
        int v24 = (v23 | (v21 << (8 * v6))) + 3;
        unsigned int v20 = v23 + 3;
        if (v6 < 4) {
          unsigned int v20 = v24;
        }
        break;
      default:
        break;
    }
  }
  if (v20 == 2)
  {
    long long v28 = *(_OWORD *)v19;
    long long v29 = *((_OWORD *)v19 + 1);
    long long v30 = *((_OWORD *)v19 + 2);
    *(_OWORD *)((char *)v18 + 41) = *(_OWORD *)(v19 + 41);
    v18[1] = v29;
    void v18[2] = v30;
    *id v18 = v28;
    char v27 = 2;
  }
  else if (v20 == 1)
  {
    uint64_t v25 = *(void *)v19;
    id v26 = *(id *)v19;
    *(void *)id v18 = v25;
    char v27 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v5 + 16))(v18);
    char v27 = 0;
  }
  *((unsigned char *)v18 + v6) = v27;
  return a1;
}

unsigned __int8 *sub_25A3BF034(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    if (*(void *)(v6 + 64) <= 0x39uLL) {
      uint64_t v7 = 57;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 3;
    if (v8 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          if (v7 >= 4) {
            goto LABEL_28;
          }
          goto LABEL_15;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          if (v7 >= 4) {
            goto LABEL_28;
          }
          goto LABEL_15;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v7 < 4) {
            goto LABEL_15;
          }
          goto LABEL_28;
        case 4:
          int v11 = *(_DWORD *)a1;
          if (v7 < 4)
          {
LABEL_15:
            unsigned int v8 = (v11 | (v9 << (8 * v7))) + 3;
            break;
          }
LABEL_28:
          unsigned int v8 = v11 + 3;
          if (v8 == 2) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v8 != 2)
    {
LABEL_17:
      if (v8 == 1) {

      }
      else {
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      }
    }
LABEL_20:
    unsigned int v12 = a2[v7];
    unsigned int v13 = v12 - 3;
    if (v12 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v14 = v7;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          if (v7 >= 4) {
            goto LABEL_39;
          }
          goto LABEL_33;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          if (v7 >= 4) {
            goto LABEL_39;
          }
          goto LABEL_33;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v7 < 4) {
            goto LABEL_33;
          }
          goto LABEL_39;
        case 4:
          int v15 = *(_DWORD *)a2;
          if (v7 < 4)
          {
LABEL_33:
            unsigned int v12 = (v15 | (v13 << (8 * v7))) + 3;
            break;
          }
LABEL_39:
          unsigned int v12 = v15 + 3;
          if (v12 == 2) {
            goto LABEL_40;
          }
          goto LABEL_35;
        default:
          break;
      }
    }
    if (v12 == 2)
    {
LABEL_40:
      long long v19 = *(_OWORD *)a2;
      long long v20 = *((_OWORD *)a2 + 1);
      long long v21 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      *((_OWORD *)a1 + 1) = v20;
      *((_OWORD *)a1 + 2) = v21;
      *(_OWORD *)a1 = v19;
      char v18 = 2;
    }
    else
    {
LABEL_35:
      if (v12 == 1)
      {
        uint64_t v16 = *(void *)a2;
        id v17 = *(id *)a2;
        *(void *)a1 = v16;
        char v18 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        char v18 = 0;
      }
    }
    a1[v7] = v18;
  }
  uint64_t v22 = v6;
  if (*(void *)(v6 + 64) <= 0x39uLL) {
    uint64_t v23 = 57;
  }
  else {
    uint64_t v23 = *(void *)(v6 + 64);
  }
  uint64_t v24 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v25 = v23 + v24 + 1;
  id v26 = (unsigned __int8 *)((unint64_t)&a1[v25] & ~v24);
  char v27 = (unsigned __int8 *)((unint64_t)&a2[v25] & ~v24);
  if (v26 != v27)
  {
    unsigned int v28 = v26[v23];
    unsigned int v29 = v28 - 3;
    if (v28 >= 3)
    {
      if (v23 <= 3) {
        uint64_t v30 = v23;
      }
      else {
        uint64_t v30 = 4;
      }
      switch(v30)
      {
        case 1:
          int v31 = *v26;
          goto LABEL_55;
        case 2:
          int v31 = *(unsigned __int16 *)v26;
          goto LABEL_55;
        case 3:
          int v31 = *(unsigned __int16 *)v26 | (v26[2] << 16);
          goto LABEL_55;
        case 4:
          int v31 = *(_DWORD *)v26;
LABEL_55:
          int v32 = (v31 | (v29 << (8 * v23))) + 3;
          unsigned int v28 = v31 + 3;
          if (v23 < 4) {
            unsigned int v28 = v32;
          }
          break;
        default:
          break;
      }
    }
    if (v28 != 2)
    {
      if (v28 == 1) {

      }
      else {
        (*(void (**)(unsigned __int8 *, uint64_t))(v22 + 8))(v26, v5);
      }
    }
    unsigned int v33 = v27[v23];
    unsigned int v34 = v33 - 3;
    if (v33 >= 3)
    {
      if (v23 <= 3) {
        uint64_t v35 = v23;
      }
      else {
        uint64_t v35 = 4;
      }
      switch(v35)
      {
        case 1:
          int v36 = *v27;
          goto LABEL_70;
        case 2:
          int v36 = *(unsigned __int16 *)v27;
          goto LABEL_70;
        case 3:
          int v36 = *(unsigned __int16 *)v27 | (v27[2] << 16);
          goto LABEL_70;
        case 4:
          int v36 = *(_DWORD *)v27;
LABEL_70:
          int v37 = (v36 | (v34 << (8 * v23))) + 3;
          unsigned int v33 = v36 + 3;
          if (v23 < 4) {
            unsigned int v33 = v37;
          }
          break;
        default:
          break;
      }
    }
    if (v33 == 2)
    {
      long long v41 = *(_OWORD *)v27;
      long long v42 = *((_OWORD *)v27 + 1);
      long long v43 = *((_OWORD *)v27 + 2);
      *(_OWORD *)(v26 + 41) = *(_OWORD *)(v27 + 41);
      *((_OWORD *)v26 + 1) = v42;
      *((_OWORD *)v26 + 2) = v43;
      *(_OWORD *)id v26 = v41;
      char v40 = 2;
    }
    else if (v33 == 1)
    {
      uint64_t v38 = *(void *)v27;
      id v39 = *(id *)v27;
      *(void *)id v26 = v38;
      char v40 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v22 + 16))(v26, v27, v5);
      char v40 = 0;
    }
    v26[v23] = v40;
  }
  return a1;
}

_OWORD *sub_25A3BF4F8(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v5 + 64) <= 0x39uLL) {
    uint64_t v6 = 57;
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 3;
  if (v7 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 3;
        unsigned int v7 = v10 + 3;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 2)
  {
    long long v13 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v13;
    a1[2] = *((_OWORD *)a2 + 2);
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)(a2 + 41);
    char v12 = 2;
  }
  else if (v7 == 1)
  {
    *(void *)a1 = *(void *)a2;
    char v12 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *, unsigned __int8 *, void))(v5 + 32))(a1, a2, *(void *)(a3 + 16));
    char v12 = 0;
  }
  *((unsigned char *)a1 + v6) = v12;
  uint64_t v14 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  uint64_t v15 = v6 + v14 + 1;
  uint64_t v16 = (_OWORD *)(((unint64_t)a1 + v15) & ~v14);
  id v17 = (unsigned __int8 *)((unint64_t)&a2[v15] & ~v14);
  unsigned int v18 = v17[v6];
  unsigned int v19 = v18 - 3;
  if (v18 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v20 = v6;
    }
    else {
      uint64_t v20 = 4;
    }
    switch(v20)
    {
      case 1:
        int v21 = *v17;
        goto LABEL_29;
      case 2:
        int v21 = *(unsigned __int16 *)v17;
        goto LABEL_29;
      case 3:
        int v21 = *(unsigned __int16 *)v17 | (v17[2] << 16);
        goto LABEL_29;
      case 4:
        int v21 = *(_DWORD *)v17;
LABEL_29:
        int v22 = (v21 | (v19 << (8 * v6))) + 3;
        unsigned int v18 = v21 + 3;
        if (v6 < 4) {
          unsigned int v18 = v22;
        }
        break;
      default:
        break;
    }
  }
  if (v18 == 2)
  {
    long long v24 = *(_OWORD *)v17;
    long long v25 = *((_OWORD *)v17 + 1);
    long long v26 = *((_OWORD *)v17 + 2);
    *(_OWORD *)((char *)v16 + 41) = *(_OWORD *)(v17 + 41);
    v16[1] = v25;
    v16[2] = v26;
    *uint64_t v16 = v24;
    char v23 = 2;
  }
  else if (v18 == 1)
  {
    *(void *)uint64_t v16 = *(void *)v17;
    char v23 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v5 + 32))(v16);
    char v23 = 0;
  }
  *((unsigned char *)v16 + v6) = v23;
  return a1;
}

unsigned __int8 *sub_25A3BF788(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    if (*(void *)(v6 + 64) <= 0x39uLL) {
      uint64_t v7 = 57;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 3;
    if (v8 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          if (v7 >= 4) {
            goto LABEL_28;
          }
          goto LABEL_15;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          if (v7 >= 4) {
            goto LABEL_28;
          }
          goto LABEL_15;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v7 < 4) {
            goto LABEL_15;
          }
          goto LABEL_28;
        case 4:
          int v11 = *(_DWORD *)a1;
          if (v7 < 4)
          {
LABEL_15:
            unsigned int v8 = (v11 | (v9 << (8 * v7))) + 3;
            break;
          }
LABEL_28:
          unsigned int v8 = v11 + 3;
          if (v8 == 2) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v8 != 2)
    {
LABEL_17:
      if (v8 == 1) {

      }
      else {
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      }
    }
LABEL_20:
    unsigned int v12 = a2[v7];
    unsigned int v13 = v12 - 3;
    if (v12 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v14 = v7;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          if (v7 >= 4) {
            goto LABEL_39;
          }
          goto LABEL_33;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          if (v7 >= 4) {
            goto LABEL_39;
          }
          goto LABEL_33;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v7 < 4) {
            goto LABEL_33;
          }
          goto LABEL_39;
        case 4:
          int v15 = *(_DWORD *)a2;
          if (v7 < 4)
          {
LABEL_33:
            unsigned int v12 = (v15 | (v13 << (8 * v7))) + 3;
            break;
          }
LABEL_39:
          unsigned int v12 = v15 + 3;
          if (v12 == 2) {
            goto LABEL_40;
          }
          goto LABEL_35;
        default:
          break;
      }
    }
    if (v12 == 2)
    {
LABEL_40:
      long long v17 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v17;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      char v16 = 2;
    }
    else
    {
LABEL_35:
      if (v12 == 1)
      {
        *(void *)a1 = *(void *)a2;
        char v16 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        char v16 = 0;
      }
    }
    a1[v7] = v16;
  }
  uint64_t v18 = v6;
  if (*(void *)(v6 + 64) <= 0x39uLL) {
    uint64_t v19 = 57;
  }
  else {
    uint64_t v19 = *(void *)(v6 + 64);
  }
  uint64_t v20 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v21 = v19 + v20 + 1;
  int v22 = (unsigned __int8 *)((unint64_t)&a1[v21] & ~v20);
  char v23 = (unsigned __int8 *)((unint64_t)&a2[v21] & ~v20);
  if (v22 != v23)
  {
    unsigned int v24 = v22[v19];
    unsigned int v25 = v24 - 3;
    if (v24 >= 3)
    {
      if (v19 <= 3) {
        uint64_t v26 = v19;
      }
      else {
        uint64_t v26 = 4;
      }
      switch(v26)
      {
        case 1:
          int v27 = *v22;
          goto LABEL_55;
        case 2:
          int v27 = *(unsigned __int16 *)v22;
          goto LABEL_55;
        case 3:
          int v27 = *(unsigned __int16 *)v22 | (v22[2] << 16);
          goto LABEL_55;
        case 4:
          int v27 = *(_DWORD *)v22;
LABEL_55:
          int v28 = (v27 | (v25 << (8 * v19))) + 3;
          unsigned int v24 = v27 + 3;
          if (v19 < 4) {
            unsigned int v24 = v28;
          }
          break;
        default:
          break;
      }
    }
    if (v24 != 2)
    {
      if (v24 == 1) {

      }
      else {
        (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(v22, v5);
      }
    }
    unsigned int v29 = v23[v19];
    unsigned int v30 = v29 - 3;
    if (v29 >= 3)
    {
      if (v19 <= 3) {
        uint64_t v31 = v19;
      }
      else {
        uint64_t v31 = 4;
      }
      switch(v31)
      {
        case 1:
          int v32 = *v23;
          goto LABEL_70;
        case 2:
          int v32 = *(unsigned __int16 *)v23;
          goto LABEL_70;
        case 3:
          int v32 = *(unsigned __int16 *)v23 | (v23[2] << 16);
          goto LABEL_70;
        case 4:
          int v32 = *(_DWORD *)v23;
LABEL_70:
          int v33 = (v32 | (v30 << (8 * v19))) + 3;
          unsigned int v29 = v32 + 3;
          if (v19 < 4) {
            unsigned int v29 = v33;
          }
          break;
        default:
          break;
      }
    }
    if (v29 == 2)
    {
      long long v35 = *(_OWORD *)v23;
      long long v36 = *((_OWORD *)v23 + 1);
      long long v37 = *((_OWORD *)v23 + 2);
      *(_OWORD *)(v22 + 41) = *(_OWORD *)(v23 + 41);
      *((_OWORD *)v22 + 1) = v36;
      *((_OWORD *)v22 + 2) = v37;
      *(_OWORD *)int v22 = v35;
      char v34 = 2;
    }
    else if (v29 == 1)
    {
      *(void *)int v22 = *(void *)v23;
      char v34 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v18 + 32))(v22, v23, v5);
      char v34 = 0;
    }
    v22[v19] = v34;
  }
  return a1;
}

uint64_t sub_25A3BFC3C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (v4 <= 0x39) {
    unint64_t v4 = 57;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  uint64_t v5 = *(_DWORD *)(v3 + 80) & 0xF8 | 7;
  uint64_t v6 = ((v4 + 1 + v5) & ~v5) + v4 + 1;
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((a2 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v10 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v10 < 2)
    {
LABEL_22:
      unsigned int v12 = *((unsigned __int8 *)a1 + v4);
      if (v12 >= 3) {
        return (v12 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_22;
  }
LABEL_14:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v6 | v11) + 254;
}

void sub_25A3BFDB4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (v6 <= 0x39) {
    unint64_t v6 = 57;
  }
  uint64_t v7 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  size_t v8 = ((v6 + 1 + v7) & ~v7) + v6 + 1;
  if (a3 < 0xFE)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 253) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v10 = a2 - 254;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x25A3BFFC0);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25A3BFFE8(void *a1)
{
  return sub_25A3BE5B0(a1);
}

void *sub_25A3C0000@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_25A3BE4D8(a1, a2);
}

uint64_t BiMap.init(_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v46 = a6;
  uint64_t v11 = sub_25A50FA40();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v59 = (char *)v45 - v13;
  uint64_t v52 = *(void *)(a2 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v58 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v14);
  char v57 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v65 = sub_25A50FA40();
  uint64_t v18 = *(void *)(v65 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v65);
  uint64_t v21 = (char *)v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  char v23 = (char *)v45 - v22;
  uint64_t v60 = a4;
  *(void *)&long long v72 = sub_25A50E850();
  uint64_t v67 = a2;
  uint64_t v61 = a5;
  uint64_t result = sub_25A50E850();
  *((void *)&v72 + 1) = result;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t result = sub_25A510030();
    unint64_t v47 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    a1 = result | 0x8000000000000000;
  }
  else
  {
    uint64_t v27 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v28 = *(void *)(a1 + 64);
    unint64_t v47 = a1 + 64;
    uint64_t v29 = ~v27;
    uint64_t v30 = -v27;
    if (v30 < 64) {
      uint64_t v31 = ~(-1 << v30);
    }
    else {
      uint64_t v31 = -1;
    }
    unint64_t v26 = v31 & v28;
    uint64_t v25 = v29;
  }
  int64_t v32 = 0;
  uint64_t v49 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v64 = TupleTypeMetadata2 - 8;
  v45[1] = v25;
  uint64_t v50 = v52 + 16;
  uint64_t v66 = (void (**)(char *, char *, uint64_t))(v51 + 16);
  uint64_t v63 = (void (**)(char *, char *, uint64_t))(v18 + 32);
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v52 + 32);
  uint64_t v56 = (void (**)(char *, char *, uint64_t))(v51 + 32);
  uint64_t v54 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56);
  uint64_t v53 = (uint64_t (**)(char *, uint64_t))(v51 + 8);
  int64_t v48 = (unint64_t)(v25 + 64) >> 6;
  v45[0] = v48 - 1;
  unint64_t v62 = a1;
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (v26)
  {
    uint64_t v33 = (v26 - 1) & v26;
    unint64_t v34 = __clz(__rbit64(v26)) | (v32 << 6);
    int64_t v35 = v32;
LABEL_10:
    (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(v21, *(void *)(a1 + 48) + *(void *)(v52 + 72) * v34, v67);
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(&v21[*(int *)(TupleTypeMetadata2 + 48)], *(void *)(a1 + 56) + *(void *)(v51 + 72) * v34, a3);
    uint64_t v36 = 0;
    goto LABEL_20;
  }
  int64_t v35 = v32 + 1;
  if (__OFADD__(v32, 1))
  {
    __break(1u);
  }
  else
  {
    if (v35 >= v48)
    {
      uint64_t v33 = 0;
      uint64_t v36 = 1;
      int64_t v35 = v32;
      goto LABEL_20;
    }
    unint64_t v37 = *(void *)(v47 + 8 * v35);
    if (v37) {
      goto LABEL_16;
    }
    if (v32 + 2 >= v48)
    {
      uint64_t v33 = 0;
      uint64_t v36 = 1;
      goto LABEL_20;
    }
    unint64_t v37 = *(void *)(v47 + 8 * (v32 + 2));
    if (v37)
    {
      int64_t v35 = v32 + 2;
LABEL_16:
      uint64_t v33 = (v37 - 1) & v37;
      unint64_t v34 = __clz(__rbit64(v37)) + (v35 << 6);
      goto LABEL_10;
    }
    int64_t v44 = v32 + 3;
    if (v32 + 3 >= v48)
    {
      uint64_t v33 = 0;
      uint64_t v36 = 1;
      int64_t v35 = v32 + 2;
      goto LABEL_20;
    }
    unint64_t v37 = *(void *)(v47 + 8 * v44);
    if (v37)
    {
      int64_t v35 = v32 + 3;
      goto LABEL_16;
    }
    while (1)
    {
      int64_t v35 = v44 + 1;
      if (__OFADD__(v44, 1)) {
        break;
      }
      if (v35 >= v48)
      {
        uint64_t v33 = 0;
        uint64_t v36 = 1;
        int64_t v35 = v45[0];
LABEL_20:
        while (1)
        {
          uint64_t v38 = *(void *)(TupleTypeMetadata2 - 8);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v21, v36, 1, TupleTypeMetadata2);
          (*v63)(v23, v21, v65);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v23, 1, TupleTypeMetadata2) == 1) {
            break;
          }
          id v39 = v57;
          (*v56)(v57, &v23[*(int *)(TupleTypeMetadata2 + 48)], a3);
          uint64_t v40 = (uint64_t)v58;
          uint64_t v41 = v67;
          (*v55)(v58, v23, v67);
          uint64_t v42 = (uint64_t)v59;
          (*v66)(v59, v39, a3);
          (*v54)(v42, 0, 1, a3);
          uint64_t v68 = v41;
          uint64_t v69 = a3;
          uint64_t v70 = v60;
          uint64_t v71 = v61;
          long long v43 = (void *)type metadata accessor for BiMap();
          BiMap.subscript.setter(v42, v40, v43);
          uint64_t result = (*v53)(v39, a3);
          int64_t v32 = v35;
          unint64_t v26 = v33;
          a1 = v62;
          if ((v62 & 0x8000000000000000) == 0) {
            goto LABEL_8;
          }
LABEL_11:
          if (sub_25A510040())
          {
            sub_25A510330();
            swift_unknownObjectRelease();
            sub_25A510330();
            swift_unknownObjectRelease();
            uint64_t v36 = 0;
          }
          else
          {
            uint64_t v36 = 1;
          }
          int64_t v35 = v32;
          uint64_t v33 = v26;
        }
        uint64_t result = sub_25A39C550();
        *uint64_t v46 = v72;
        return result;
      }
      unint64_t v37 = *(void *)(v47 + 8 * v35);
      ++v44;
      if (v37) {
        goto LABEL_16;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t BiMap.subscript.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v57 = a1;
  uint64_t v6 = a3[2];
  uint64_t v59 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v52 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_25A50FA40();
  uint64_t v43 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  int v9 = (char *)&v42 - v8;
  uint64_t v10 = a3[3];
  uint64_t v56 = sub_25A50FA40();
  uint64_t v58 = *(void *)(v56 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v56);
  uint64_t v53 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v51 = (char *)&v42 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  long long v17 = (char *)&v42 - v16;
  uint64_t v18 = *(void *)(v10 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v15);
  int64_t v44 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v54 = (char *)&v42 - v22;
  MEMORY[0x270FA5388](v21);
  unsigned int v24 = (char *)&v42 - v23;
  uint64_t v25 = *v3;
  uint64_t v48 = a3[4];
  MEMORY[0x26113C9D0](a2, v25, v6, v10);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v26 = v50(v17, 1, v10);
  uint64_t v46 = v9;
  unint64_t v47 = a3;
  uint64_t v45 = v18;
  uint64_t v55 = v3;
  if (v26 == 1)
  {
    uint64_t v27 = v58;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v17, v56);
    uint64_t v28 = v27;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v17, v10);
    sub_25A50E990();
    sub_25A50E8C0();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v49);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v10);
    uint64_t v28 = v58;
  }
  uint64_t v29 = v6;
  uint64_t v43 = *(void *)(v59 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v43)(v52, a2, v6);
  uint64_t v49 = a2;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v32 = v56;
  uint64_t v31 = v57;
  v30(v51, v57, v56);
  sub_25A50E990();
  uint64_t v33 = v31;
  sub_25A50E9E0();
  unint64_t v34 = v53;
  v30(v53, v33, v32);
  if (v50(v34, 1, v10) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v49, v6);
    int64_t v35 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    v35(v33, v32);
    return ((uint64_t (*)(char *, uint64_t))v35)(v34, v32);
  }
  else
  {
    uint64_t v37 = v45;
    uint64_t v38 = v54;
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v54, v34, v10);
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v44, v38, v10);
    id v39 = v46;
    uint64_t v40 = v49;
    ((void (*)(char *, uint64_t, uint64_t))v43)(v46, v49, v6);
    uint64_t v41 = v59;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v39, 0, 1, v29);
    sub_25A50E990();
    sub_25A50E9E0();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v29);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v32);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v54, v10);
  }
}

{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t vars8;

  sub_25A3C2BE4(a1, a2, a3);
  (*(void (**)(uint64_t))(*(void *)(a3[2] - 8) + 8))(a2);
  uint64_t v6 = sub_25A50FA40();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(a1, v6);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  unint64_t v62 = a1;
  uint64_t v6 = a3[3];
  uint64_t v60 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v58 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_25A50FA40();
  uint64_t v45 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  int v9 = (char *)&v45 - v8;
  uint64_t v10 = a3[2];
  uint64_t v11 = sub_25A50FA40();
  uint64_t v59 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v57 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v56 = (char *)&v45 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v19 = *(void *)(v10 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v16);
  uint64_t v46 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  unint64_t v47 = (char *)&v45 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v45 - v24;
  int v26 = *(void *)(v3 + 8);
  uint64_t v55 = v3 + 8;
  uint64_t v27 = a3[5];
  uint64_t v61 = a2;
  uint64_t v52 = v27;
  MEMORY[0x26113C9D0](a2, v26, v6, v10);
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  uint64_t v28 = v54(v18, 1, v10);
  uint64_t v50 = a3;
  uint64_t v51 = v3;
  uint64_t v48 = v19;
  uint64_t v49 = v9;
  if (v28 == 1)
  {
    uint64_t v29 = v59;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v18, v11);
    uint64_t v30 = v29;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v25, v18, v10);
    sub_25A50E990();
    sub_25A50E8C0();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v53);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v10);
    uint64_t v30 = v59;
  }
  uint64_t v31 = v11;
  uint64_t v45 = *(void *)(v60 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v45)(v58, v61, v6);
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  uint64_t v33 = v62;
  v32(v56, v62, v11);
  uint64_t v53 = v6;
  unint64_t v34 = v33;
  sub_25A50E990();
  sub_25A50E9E0();
  int64_t v35 = v57;
  v32(v57, v34, v31);
  uint64_t v36 = v31;
  if (v54(v35, 1, v10) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v53);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v37(v62, v31);
    return ((uint64_t (*)(char *, uint64_t))v37)(v35, v31);
  }
  else
  {
    uint64_t v40 = v47;
    id v39 = v48;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v35, v10);
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v46, v40, v10);
    uint64_t v41 = v49;
    uint64_t v42 = v61;
    uint64_t v43 = v53;
    ((void (*)(char *, uint64_t, uint64_t))v45)(v49, v61, v53);
    int64_t v44 = v60;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v41, 0, 1, v43);
    sub_25A50E990();
    sub_25A50E9E0();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v62, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v40, v10);
  }
}

uint64_t type metadata accessor for BiMap()
{
  return swift_getGenericMetadata();
}

void BiMap.subscript.getter()
{
}

{
  JUMPOUT(0x26113C9D0);
}

{
  JUMPOUT(0x26113C9D0);
}

uint64_t sub_25A3C0D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + a3 - 32);
  uint64_t v7 = *(void *)(a4 + a3 - 8);
  long long v18 = *(_OWORD *)(a4 + a3 - 24);
  uint64_t v8 = sub_25A50FA40();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v18 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v18 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v18 - v13, a3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  uint64_t v19 = v6;
  long long v20 = v18;
  uint64_t v21 = v7;
  uint64_t v16 = (void *)type metadata accessor for BiMap();
  return BiMap.subscript.setter((uint64_t)v12, (uint64_t)v14, v16);
}

void (*BiMap.subscript.modify(void *a1, uint64_t a2, void *a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  *uint64_t v7 = a3;
  v7[1] = v3;
  uint64_t v8 = a3[3];
  uint64_t v9 = sub_25A50FA40();
  v7[2] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v7[3] = v10;
  size_t v11 = *(void *)(v10 + 64);
  _OWORD v7[4] = malloc(v11);
  uint64_t v12 = malloc(v11);
  uint64_t v13 = a3[2];
  v7[5] = v12;
  v7[6] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14;
  v7[7] = v14;
  size_t v16 = *(void *)(v14 + 64);
  v7[8] = malloc(v16);
  v7[9] = malloc(v16);
  (*(void (**)(void))(v15 + 16))();
  MEMORY[0x26113C9D0](a2, *v3, v13, v8, a3[4]);
  return sub_25A3C1090;
}

{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;

  uint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  *uint64_t v7 = a3;
  v7[1] = v3;
  uint64_t v8 = a3[2];
  uint64_t v9 = sub_25A50FA40();
  v7[2] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v7[3] = v10;
  size_t v11 = *(void *)(v10 + 64);
  _OWORD v7[4] = malloc(v11);
  uint64_t v12 = malloc(v11);
  uint64_t v13 = a3[3];
  v7[5] = v12;
  v7[6] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14;
  v7[7] = v14;
  size_t v16 = *(void *)(v14 + 64);
  v7[8] = malloc(v16);
  v7[9] = malloc(v16);
  (*(void (**)(void))(v15 + 16))();
  MEMORY[0x26113C9D0](a2, *(void *)(v3 + 8), v13, v8, a3[5]);
  return sub_25A3C1DFC;
}

void sub_25A3C1090(uint64_t **a1, char a2)
{
}

uint64_t sub_25A3C10BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)type metadata accessor for BiMap();
  return sub_25A3C2BE4(a1, a3, v5);
}

void (*BiMap.subscript.modify(void *a1, uint64_t a2, void *a3))(void ***a1, char a2)
{
  uint64_t v7 = malloc(0x48uLL);
  *a1 = v7;
  *uint64_t v7 = a3;
  v7[1] = v3;
  uint64_t v8 = a3[3];
  uint64_t v9 = sub_25A50FA40();
  v7[2] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v7[3] = v10;
  size_t v11 = *(void *)(v10 + 64);
  _OWORD v7[4] = malloc(v11);
  uint64_t v12 = malloc(v11);
  uint64_t v13 = a3[2];
  v7[5] = v12;
  v7[6] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14;
  v7[7] = v14;
  v7[8] = malloc(*(void *)(v14 + 64));
  (*(void (**)(void))(v15 + 16))();
  MEMORY[0x26113C9D0](a2, *v3, v13, v8, a3[4]);
  return sub_25A3C1338;
}

void sub_25A3C1338(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  unint64_t v4 = (*a1)[7];
  uint64_t v3 = (*a1)[8];
  uint64_t v5 = (*a1)[5];
  uint64_t v6 = (*a1)[6];
  uint64_t v8 = (*a1)[3];
  uint64_t v7 = (*a1)[4];
  uint64_t v9 = (*a1)[2];
  uint64_t v10 = **a1;
  if (a2)
  {
    ((void (*)(void *, void *, void *))v8[2])((*a1)[4], v5, v9);
    sub_25A3C2BE4((uint64_t)v7, (uint64_t)v3, v10);
    ((void (*)(void *, void *))v4[1])(v3, v6);
    size_t v11 = (void (*)(void *, void *))v8[1];
    v11(v7, v9);
    v11(v5, v9);
  }
  else
  {
    sub_25A3C2BE4((uint64_t)(*a1)[5], (uint64_t)v3, v10);
    ((void (*)(void *, void *))v4[1])(v3, v6);
    ((void (*)(void *, void *))v8[1])(v5, v9);
  }
  free(v3);
  free(v5);
  free(v7);

  free(v2);
}

uint64_t sub_25A3C1488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = type metadata accessor for BiMap();
  return a4(a2, v6);
}

uint64_t sub_25A3C14F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + a3;
  uint64_t v7 = *(void *)(a4 + a3 - 32);
  uint64_t v8 = *(void *)(a4 + a3 - 8);
  uint64_t v9 = sub_25A50FA40();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v19 - v12;
  long long v19 = *(_OWORD *)(v6 - 24);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t))(v16 + 16))((char *)&v19 - v14, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  uint64_t v20 = v7;
  long long v21 = v19;
  uint64_t v22 = v8;
  long long v17 = (void *)type metadata accessor for BiMap();
  return BiMap.subscript.setter((uint64_t)v13, (uint64_t)v15, v17);
}

void sub_25A3C1DFC(uint64_t **a1, char a2)
{
}

void sub_25A3C1E14(uint64_t **a1, char a2, void (*a3)(void *, void *, uint64_t))
{
  unint64_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[8];
  uint64_t v6 = (void *)(*a1)[9];
  if (a2)
  {
    uint64_t v7 = v4[7];
    uint64_t v9 = (void *)v4[4];
    uint64_t v8 = (void *)v4[5];
    uint64_t v10 = v4[2];
    uint64_t v11 = v4[3];
    uint64_t v12 = *v4;
    uint64_t v13 = v4[6];
    (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v9, v8, v10);
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v5, v6, v13);
    a3(v9, v5, v12);
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
  }
  else
  {
    uint64_t v9 = (void *)v4[4];
    uint64_t v8 = (void *)v4[5];
    a3(v8, v6, *v4);
  }
  free(v6);
  free(v5);
  free(v8);
  free(v9);

  free(v4);
}

uint64_t BiMap.keys.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_25A3C1F68(a1, (uint64_t (*)(void, void, void, void))nullsub_1, a2);
}

uint64_t BiMap.values.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_25A3C1F68(a1, (uint64_t (*)(void, void, void, void))j_nullsub_1, a2);
}

uint64_t sub_25A3C1F68@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void, void, void)@<X1>, void *a3@<X8>)
{
  *a3 = a2(*v3, a1[2], a1[3], a1[4]);

  return swift_bridgeObjectRetain();
}

uint64_t BiMap.description.getter()
{
  return sub_25A50E8B0();
}

uint64_t BiMap.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = sub_25A50FA40();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  unint64_t v47 = (char *)&v39 - v14;
  uint64_t v15 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v48 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v18 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v39 = *(void *)(v18 + 64);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v20 = (char *)&v39 - v19;
  uint64_t v50 = a4;
  uint64_t v21 = sub_25A50E850();
  uint64_t v53 = v21;
  uint64_t v49 = a2;
  uint64_t v51 = a5;
  uint64_t v22 = sub_25A50E850();
  uint64_t v54 = v22;
  if (MEMORY[0x26113D1B0](a1, TupleTypeMetadata2))
  {
    uint64_t v23 = 0;
    unsigned int v24 = &v20[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v43 = TupleTypeMetadata2;
    int64_t v44 = v24;
    uint64_t v45 = (void (**)(char *, void *, uint64_t))(v18 + 16);
    uint64_t v46 = v20;
    uint64_t v42 = (void (**)(uint64_t, char *, uint64_t))(v15 + 32);
    uint64_t v40 = a6;
    uint64_t v41 = a3 - 8;
    uint64_t v25 = (uint64_t)v48;
    while (1)
    {
      char v26 = sub_25A50F140();
      sub_25A50F0D0();
      if (v26)
      {
        uint64_t v27 = v46;
        (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v46, a1+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(void *)(v18 + 72) * v23, TupleTypeMetadata2);
        uint64_t v28 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = sub_25A50FE20();
        uint64_t v27 = v46;
        if (v39 != 8)
        {
          __break(1u);
          return result;
        }
        v52[0] = result;
        (*v45)(v46, v52, TupleTypeMetadata2);
        swift_unknownObjectRelease();
        uint64_t v28 = v23 + 1;
        if (__OFADD__(v23, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v21 = v53;
          uint64_t v22 = v54;
          a6 = v40;
          goto LABEL_13;
        }
      }
      uint64_t v29 = v49;
      (*v42)(v25, v27, v49);
      uint64_t v30 = *(void *)(a3 - 8);
      uint64_t v31 = a1;
      uint64_t v32 = v18;
      uint64_t v33 = v47;
      unint64_t v34 = v44;
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v47, v44, a3);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v33, 0, 1, a3);
      v52[0] = v29;
      v52[1] = a3;
      v52[2] = v50;
      v52[3] = v51;
      int64_t v35 = (void *)type metadata accessor for BiMap();
      uint64_t v36 = (uint64_t)v33;
      uint64_t v18 = v32;
      a1 = v31;
      BiMap.subscript.setter(v36, v25, v35);
      uint64_t v37 = v34;
      TupleTypeMetadata2 = v43;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v37, a3);
      ++v23;
      if (v28 == MEMORY[0x26113D1B0](v31, TupleTypeMetadata2)) {
        goto LABEL_11;
      }
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
LABEL_13:
  *a6 = v21;
  a6[1] = v22;
  return result;
}

uint64_t BiMap.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_25A50E850();
  uint64_t result = sub_25A50E850();
  *a1 = v2;
  a1[1] = result;
  return result;
}

uint64_t BiMap.count.getter()
{
  return sub_25A50E920();
}

void BiMap.isEmpty.getter()
{
}

uint64_t BiMap.startIndex.getter(void *a1)
{
  return sub_25A3C2488(a1, MEMORY[0x263F8CFC8]);
}

uint64_t BiMap.endIndex.getter(void *a1)
{
  return sub_25A3C2488(a1, MEMORY[0x263F8D058]);
}

uint64_t sub_25A3C2488(void *a1, uint64_t (*a2)(void, void, void, void))
{
  return a2(*v2, a1[2], a1[3], a1[4]);
}

uint64_t BiMap.index(after:)()
{
  return sub_25A50E930();
}

uint64_t BiMap.subscript.getter()
{
  return sub_25A50E9F0();
}

uint64_t BiMap.makeIterator()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = sub_25A510030();
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = v4 | 0x8000000000000000;
  }
  else
  {
    uint64_t v9 = -1;
    uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v6 = ~v10;
    unint64_t v5 = v3 + 64;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v9 = ~(-1 << v11);
    }
    uint64_t v7 = v9 & *(void *)(v3 + 64);
    unint64_t v8 = *v1;
  }
  *a1 = v8;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = 0;
  a1[4] = v7;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A3C25D0@<X0>(uint64_t *a1@<X8>)
{
  return BiMap.init()(a1);
}

void (*sub_25A3C25E8(void *a1, uint64_t a2, void *a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = BiMap.subscript.modify(v6, a2, a3);
  return sub_25A3C2658;
}

void sub_25A3C2658(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

double sub_25A3C26A0@<D0>(uint64_t a1@<X8>)
{
  BiMap.makeIterator()((unint64_t *)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_25A3C26FC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_25A3C2750(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_25A3C27A4@<X0>(uint64_t a1@<X8>)
{
  return sub_25A3C27D4((uint64_t (*)(void))BiMap.startIndex.getter, a1);
}

uint64_t sub_25A3C27BC@<X0>(uint64_t a1@<X8>)
{
  return sub_25A3C27D4((uint64_t (*)(void))BiMap.endIndex.getter, a1);
}

uint64_t sub_25A3C27D4@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5 & 1;
  return result;
}

void (*sub_25A3C2808(uint64_t **a1, uint64_t a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  char v5 = (uint64_t *)malloc(0x40uLL);
  *a1 = v5;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5[4] = TupleTypeMetadata2;
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  v5[5] = v9;
  uint64_t v10 = (char *)malloc(*(void *)(v9 + 64));
  v5[6] = (uint64_t)v10;
  uint64_t v11 = sub_25A3C29F0(v5);
  uint64_t v13 = v12;
  v5[7] = (uint64_t)v11;
  (*(void (**)(char *))(*(void *)(v7 - 8) + 16))(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(&v10[*(int *)(TupleTypeMetadata2 + 48)], v13, v6);
  return sub_25A3C2978;
}

void sub_25A3C2978(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void, void))(*(void *)(*a1 + 40) + 8))(*(void *)(*a1 + 48), *(void *)(*a1 + 32));
  uint64_t v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);

  free((void *)v3);
}

void (*sub_25A3C29F0(uint64_t *a1))(void *a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v3 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v3;
  a1[2] = (uint64_t)malloc(*(void *)(v3 + 64));
  sub_25A50E9F0();
  return sub_25A3AC494;
}

uint64_t sub_25A3C2B18@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = BiMap.index(after:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_25A3C2B58(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = BiMap.index(after:)();
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t result = sub_25A3ACF28(v2, v3, v4);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v9 & 1;
  return result;
}

uint64_t sub_25A3C2BD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return BiMap.init(dictionaryLiteral:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t sub_25A3C2BE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_25A50FA40();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v15 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  return BiMap.subscript.setter((uint64_t)v10, (uint64_t)v12, a3);
}

uint64_t sub_25A3C2D54(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_25A3C2DB4()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A3C2DD0()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A3C2DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3C1488(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))BiMap.subscript.getter);
}

uint64_t sub_25A3C2E1C()
{
  return 32;
}

__n128 sub_25A3C2E28(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_25A3C2E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3C1488(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))BiMap.subscript.getter);
}

uint64_t sub_25A3C2E64()
{
  return 32;
}

__n128 sub_25A3C2E70(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_25A3C2E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3C1488(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))BiMap.subscript.getter);
}

uint64_t sub_25A3C2EAC()
{
  return 32;
}

__n128 sub_25A3C2EB8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_25A3C2EC4(void *a1)
{
  return get_witness_table_SHRzSHR_r0_lSD4KeysVyxq__GSlHPyHCTm(a1, MEMORY[0x263F8CFE0]);
}

uint64_t sub_25A3C2EF0(void *a1)
{
  return get_witness_table_SHRzSHR_r0_lSD4KeysVyxq__GSlHPyHCTm(a1, MEMORY[0x263F8D020]);
}

uint64_t get_witness_table_SHRzSHR_r0_lSD4KeysVyxq__GSlHPyHCTm(void *a1, void (*a2)(uint64_t, void, void, void))
{
  a2(255, *a1, a1[1], a1[2]);

  return swift_getWitnessTable();
}

uint64_t Range.fullyContains(_:)()
{
  if (sub_25A50EB10()) {
    return sub_25A50EB10() & 1;
  }
  else {
    return 0;
  }
}

uint64_t Dictionary.nextUniqueKeyUsing(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = a5;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_25A50FA40();
  uint64_t v13 = *(void *)(v25 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v25);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v23 = a1;
  a1(v14);
  uint64_t v24 = a4 - 8;
  long long v17 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
  uint64_t v18 = (void (**)(uint64_t, uint64_t))(v10 + 8);
  for (uint64_t i = (void (**)(uint64_t, char *, uint64_t))(v10 + 32); ; (*i)(a6, v12, a3))
  {
    MEMORY[0x26113C9D0](a6, v26, a3, a4, v27);
    int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 48))(v16, 1, a4);
    uint64_t result = (*v17)(v16, v25);
    if (v20 == 1) {
      break;
    }
    v23(result);
    (*v18)(a6, a3);
  }
  return result;
}

uint64_t Dictionary.mapKeys<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_25A3C348C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)sub_25A3C3410, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Sequence.keyedMap<A, B>(_:));
}

uint64_t sub_25A3C3248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t result = a4(a3);
  if (!v7)
  {
    uint64_t v16 = *(int *)(TupleTypeMetadata2 + 48);
    long long v17 = &v14[v16];
    uint64_t v18 = a3 + v16;
    uint64_t v19 = *(void *)(a6 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v14, a3, a6);
    uint64_t v20 = *(void *)(a7 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v17, v18, a7);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v22, v17, a7);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v14, a6);
  }
  return result;
}

uint64_t sub_25A3C3410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3C3248(a1, a2, a3, *(uint64_t (**)(uint64_t))(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t Dictionary.compactMapKeys<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_25A3C348C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)sub_25A3C3820, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Sequence.compactKeyedMap<A, B>(_:));
}

uint64_t sub_25A3C348C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  void v16[8] = a2;
  v16[9] = a3;
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  v16[6] = a8;
  v16[7] = a1;
  uint64_t v13 = sub_25A50E990();
  uint64_t WitnessTable = swift_getWitnessTable();
  return a10(a9, v16, v13, a6, a5, WitnessTable, a8);
}

uint64_t sub_25A3C354C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v31 = a8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v32 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v30 = a5;
  uint64_t v16 = sub_25A50FA40();
  uint64_t v27 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v27 - v17;
  uint64_t result = a2(a1);
  if (!v8)
  {
    uint64_t v20 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v21 = &v15[v20];
    uint64_t v22 = a1 + v20;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v15, a1, a3);
    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v21, v22, a4);
    MEMORY[0x270FA5388](v23);
    *(&v27 - 6) = a3;
    *(&v27 - 5) = a4;
    uint64_t v24 = v28;
    *(&v27 - 4) = v30;
    *(&v27 - 3) = v24;
    *(&v27 - 2) = v29;
    *(&v27 - 1) = (uint64_t)v15;
    uint64_t v25 = swift_getTupleTypeMetadata2();
    sub_25A3F60F8((void (*)(char *, char *))sub_25A3C3A2C, (uint64_t)(&v27 - 8), MEMORY[0x263F8E628], v25, v26, v31);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v15, TupleTypeMetadata2);
  }
  return result;
}

uint64_t sub_25A3C3820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3C354C(a1, *(uint64_t (**)(uint64_t))(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), a2);
}

uint64_t sub_25A3C3848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = a6 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(a6, a1, a5);
  uint64_t v17 = *(int *)(v13 + 56);
  uint64_t v18 = &v15[v17];
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v15, a2, a3);
  uint64_t v21 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v18, v19, a4);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v16, v18, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v15, a3);
}

uint64_t sub_25A3C3A2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3C3848(a1, v2[7], v2[2], v2[3], v2[4], a2);
}

uint64_t SynchronousAccessProviding<>.peek(file:line:column:function:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  v14[0] = a1;
  v14[1] = a2;
  char v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  char v20 = a8;
  void v13[2] = a9;
  uint64_t v13[3] = a10;
  uint64_t v10 = *(uint64_t (**)(void *, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), void *, uint64_t, uint64_t, uint64_t))(a10 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v10(v14, sub_25A3C3EE8, v13, AssociatedTypeWitness, a9, a10);
}

uint64_t SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  v15[0] = a2;
  v15[1] = a3;
  char v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  uint64_t v20 = a8;
  char v21 = a9;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a14 + 24))(v15, a10, a11, a13, a12, a14);
}

uint64_t SynchronousAccessProviding<>.syncUpdate(file:line:column:function:to:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v15[0] = a1;
  v15[1] = a2;
  char v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  char v21 = a8;
  void v14[2] = a10;
  v14[3] = a11;
  v14[4] = a9;
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), void *, uint64_t, uint64_t, uint64_t))(a11 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v11(v15, sub_25A3C3F6C, v14, AssociatedTypeWitness, a10, a11);
}

uint64_t SynchronousAccessProviding.syncRead<A>(file:line:column:function:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  v14[0] = a1;
  v14[1] = a2;
  char v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  char v20 = a8;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a13 + 16))(v14, a9, a10, a12, a11, a13);
}

uint64_t SynchronousAccessProviding.syncSetValue<A>(at:to:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  void v8[2] = a3;
  _OWORD v8[3] = a4;
  void v8[4] = a1;
  v8[5] = a2;
  uint64_t v6 = *(void *)(*MEMORY[0x263F8DE50] + v5 + 8);
  v9[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Sync"
          "hronousAccessProviding.swift";
  v9[1] = 138;
  char v10 = 2;
  long long v11 = xmmword_25A513130;
  uint64_t v12 = "syncSetValue(at:to:)";
  uint64_t v13 = 20;
  char v14 = 2;
  return (*(uint64_t (**)(void *, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), void *, uint64_t, uint64_t))(a4 + 24))(v9, sub_25A3C4034, v8, v6, a3);
}

uint64_t sub_25A3C3D80@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(*MEMORY[0x263F8DE50] + *a2 + 8);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = &v13[-v8];
  char v10 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  long long v11 = *(void (**)(uint64_t))(v7 + 16);
  v11(a4);
  v10(v13, 0);
  ((void (*)(unsigned char *, uint64_t, uint64_t))v11)(v9, a3, v6);
  return swift_setAtWritableKeyPath();
}

uint64_t sub_25A3C3EE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
}

uint64_t sub_25A3C3F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a2, a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, v5, AssociatedTypeWitness);
}

uint64_t sub_25A3C4034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3C3D80(a1, *(void **)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t dispatch thunk of SynchronousAccessProviding.syncRead<A>(callsite:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of SynchronousAccessProviding.syncWrite<A>(callsite:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t CrashLogSymbolicationParameters.pathResolvers.getter()
{
  return swift_bridgeObjectRetain();
}

PreviewsFoundationOS::CrashLogSymbolicationParameters __swiftcall CrashLogSymbolicationParameters.init(pathResolvers:)(PreviewsFoundationOS::CrashLogSymbolicationParameters pathResolvers)
{
  v1->pathResolvers._rawValue = pathResolvers.pathResolvers._rawValue;
  return pathResolvers;
}

ValueMetadata *type metadata accessor for CrashLogSymbolicationParameters()
{
  return &type metadata for CrashLogSymbolicationParameters;
}

uint64_t Assertion.invalidationHandle.getter()
{
  sub_25A3C59B0();

  return swift_retain();
}

uint64_t Assertion.__allocating_init(_:description:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  Assertion.init(_:description:)(a1, a2, a3);
  return v6;
}

void *sub_25A3C4144(void *a1, uint64_t a2, uint64_t a3)
{
  char v4 = v3;
  type metadata accessor for InvalidationHandle();
  uint64_t v8 = swift_allocObject();
  type metadata accessor for SingleFireEvent();
  swift_allocObject();
  *(void *)(v8 + 96) = SingleFireEvent.init(description:)(0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416AF8);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 28) = 0;
  *(void *)(v9 + 16) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v9 + 24) = 0;
  *(void *)(v8 + 104) = v9;
  *(void *)(v8 + 16) = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Previews"
                         "Foundation/Assertion.swift";
  *(void *)(v8 + 24) = 121;
  *(unsigned char *)(v8 + 32) = 2;
  *(_OWORD *)(v8 + 40) = xmmword_25A5131E0;
  *(void *)(v8 + 56) = "Assertion";
  *(void *)(v8 + 64) = 9;
  *(unsigned char *)(v8 + 72) = 2;
  *(void *)(v8 + 80) = 0;
  *(void *)(v8 + 88) = 0;
  v3[2] = v8;
  uint64_t v3[3] = a2;
  v3[4] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416B90);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = a1;
  v3[5] = v10;
  long long v11 = (void *)swift_allocObject();
  uint64_t v11[2] = a2;
  void v11[3] = a3;
  _OWORD v11[4] = v4;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_25A3C5BC8;
  *(void *)(v12 + 24) = v11;
  uint64_t v24 = sub_25A3C5CC8;
  uint64_t v25 = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25A3C54E0;
  uint64_t v23 = &block_descriptor_13;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain_n();
  swift_bridgeObjectRetain();
  id v14 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_setInvalidationHandler_, v13);
  _Block_release(v13);
  swift_release_n();
  uint64_t v15 = *(void *)(*(void *)(v4[2] + 96) + 16);
  swift_retain_n();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v15 + 32));
  sub_25A3C5BDC((void *)(v15 + 16), (uint64_t)aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 32));
  uint64_t v16 = swift_release();
  uint64_t v17 = aBlock[0];
  if (aBlock[0])
  {
    sub_25A502680((uint64_t)aBlock);
    sub_25A3901A8(v17);
LABEL_5:
    swift_release_n();

    swift_release();
    return v4;
  }
  if (!(_BYTE)v23) {
    goto LABEL_5;
  }
  uint64_t v18 = v4[5];
  aBlock[0] = 0;
  MEMORY[0x270FA5388](v16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v18 + 24));
  sub_25A3C5BF8((uint64_t *)(v18 + 16), &v21);
  os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 24));
  uint64_t v19 = v21;
  swift_release();
  objc_msgSend(v19, sel_invalidate);
  swift_release_n();

  swift_release();
  return v4;
}

uint64_t Assertion.init(_:description:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)v3;
  uint64_t v8 = *v3;
  uint64_t v9 = *v3;
  type metadata accessor for InvalidationHandle();
  uint64_t v10 = swift_allocObject();
  type metadata accessor for SingleFireEvent();
  swift_allocObject();
  *(void *)(v10 + 96) = SingleFireEvent.init(description:)(0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416AF8);
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 28) = 0;
  *(void *)(v11 + 16) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v11 + 24) = 0;
  *(void *)(v10 + 104) = v11;
  *(void *)(v10 + 16) = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Preview"
                          "sFoundation/Assertion.swift";
  *(void *)(v10 + 24) = 121;
  *(unsigned char *)(v10 + 32) = 2;
  *(_OWORD *)(v10 + 40) = xmmword_25A5131E0;
  *(void *)(v10 + 56) = "Assertion";
  *(void *)(v10 + 64) = 9;
  *(unsigned char *)(v10 + 72) = 2;
  *(void *)(v10 + 80) = 0;
  *(void *)(v10 + 88) = 0;
  v3[2] = v10;
  uint64_t v3[3] = a2;
  v3[4] = a3;
  uint64_t v18 = a1;
  uint64_t v12 = *(void *)(v8 + 80);
  uint64_t v13 = sub_25A50FA40();
  swift_bridgeObjectRetain();
  *(void *)(v4 + 40) = sub_25A3EF560(&v18, v13);
  id v14 = (void *)swift_allocObject();
  void v14[2] = a2;
  v14[3] = a3;
  v14[4] = v4;
  uint64_t v15 = *(void *)(v8 + 88);
  uint64_t v16 = *(void (**)(uint64_t (*)(void *), void *, uint64_t, uint64_t))(v15 + 8);
  swift_retain();
  v16(sub_25A3C59BC, v14, v12, v15);
  swift_release();
  uint64_t v18 = v4;
  swift_retain();
  Invalidatable.onInvalidation(_:)((void (*)(uint64_t))sub_25A3C59C8, v4, v9, (uint64_t)&protocol witness table for Assertion<A>);
  swift_release();
  swift_unknownObjectRelease();
  return v4;
}

uint64_t sub_25A3C4730(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (qword_26B329310 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_25A50E5E0();
  __swift_project_value_buffer(v8, (uint64_t)qword_26B3292F8);
  swift_bridgeObjectRetain();
  id v9 = a1;
  swift_bridgeObjectRetain();
  id v10 = a1;
  uint64_t v11 = sub_25A50E5C0();
  os_log_type_t v12 = sub_25A50F810();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(void *)&v23[0] = v14;
    *(_DWORD *)uint64_t v13 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_25A3A36A4(a2, a3, (uint64_t *)v23);
    sub_25A50FB00();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 2080;
    unint64_t v15 = 0xE000000000000000;
    if (a1)
    {
      uint64_t v35 = 0;
      unint64_t v36 = 0xE000000000000000;
      sub_25A50EDA0();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
      sub_25A50FFB0();
      uint64_t v16 = v35;
      unint64_t v15 = v36;
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v35 = sub_25A3A36A4(v16, v15, (uint64_t *)v23);
    sub_25A50FB00();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_25A380000, v11, v12, "Assertion \"%{public}s\" invalidated%s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x26113F070](v14, -1, -1);
    MEMORY[0x26113F070](v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  uint64_t v17 = *(void *)(a4 + 16);
  char v18 = *(unsigned char *)(v17 + 32);
  char v19 = *(unsigned char *)(v17 + 72);
  long long v20 = *(_OWORD *)(v17 + 16);
  v23[0] = *(_OWORD *)(v17 + 80);
  v23[1] = v20;
  char v24 = v18;
  long long v25 = *(_OWORD *)(v17 + 40);
  long long v26 = *(_OWORD *)(v17 + 56);
  char v27 = v19;
  uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Assertion.swift";
  uint64_t v29 = 121;
  char v30 = 2;
  long long v31 = xmmword_25A5131F0;
  uint64_t v32 = "init(_:description:)";
  uint64_t v33 = 20;
  char v34 = 2;
  sub_25A3C5C10((uint64_t)v23);
  uint64_t v21 = sub_25A3C5C28((uint64_t)v23, (uint64_t)&v35);
  MEMORY[0x270FA5388](v21);
  swift_retain();
  sub_25A502340((void (*)(uint64_t (*)(), void *))sub_25A3C5C84);
  return swift_release();
}

uint64_t sub_25A3C4A84(void *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  if (qword_26B329310 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_25A50E5E0();
  __swift_project_value_buffer(v8, (uint64_t)qword_26B3292F8);
  swift_bridgeObjectRetain();
  id v9 = a1;
  swift_bridgeObjectRetain();
  id v10 = a1;
  uint64_t v11 = sub_25A50E5C0();
  os_log_type_t v12 = sub_25A50F810();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v16 = v14;
    *(_DWORD *)uint64_t v13 = 136446466;
    swift_bridgeObjectRetain();
    sub_25A3A36A4(a2, a3, &v16);
    sub_25A50FB00();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 2080;
    if (a1)
    {
      sub_25A50EDA0();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
      sub_25A50FFB0();
    }
    sub_25A3A36A4(0, 0xE000000000000000, &v16);
    sub_25A50FB00();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_25A380000, v11, v12, "Assertion \"%{public}s\" invalidated%s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x26113F070](v14, -1, -1);
    MEMORY[0x26113F070](v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  return sub_25A4C4F5C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Assertion.swift", 121, 2, 36, 28, (uint64_t)"init(_:description:)", 20, 2, v7, (uint64_t)&protocol witness table for Assertion<A>);
}

void sub_25A3C4D60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  v3[1] = 0;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  sub_25A3C5BF8((uint64_t *)(v1 + 16), v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  uint64_t v2 = (void *)v3[0];
  swift_release();
  objc_msgSend(v2, sel_invalidate);
}

uint64_t sub_25A3C4DF0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[5];
  v10[0] = 0;
  v10[1] = v3;
  uint64_t v4 = *(void *)(v1 + 80);
  sub_25A50FA40();
  uint64_t v5 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = SynchronousAccessProviding<>.syncUpdate(file:line:column:function:to:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Assertion.swift", 121, 2, 40, 52, (uint64_t)"init(_:description:)", 20, 2, (uint64_t)v10, v5, WitnessTable);
  if (v10[2])
  {
    uint64_t v8 = *(void *)(v2 + 88);
    id v9 = *(void (**)(uint64_t, uint64_t))(v8 + 16);
    swift_unknownObjectRetain();
    v9(v4, v8);
    return swift_unknownObjectRelease_n();
  }
  return result;
}

Swift::Void __swiftcall Assertion.acquire()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  sub_25A50FA40();
  uint64_t v3 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Assertion.swift", 121, 2, 46, 43, (uint64_t)"acquire()", 9, 2, v3, WitnessTable);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)(v1 + 88) + 24))(v2);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_25A403498();
  }
}

uint64_t Assertion.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t Assertion.__deallocating_deinit()
{
  Assertion.deinit();

  return MEMORY[0x270FA0228](v0, 48, 7);
}

uint64_t sub_25A3C536C()
{
  sub_25A3C59B0();

  return swift_retain();
}

id RBSAssertion.onInvalidation(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_25A3C5A08;
    v9[5] = v6;
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 1107296256;
    void v9[2] = sub_25A3C54E0;
    v9[3] = &block_descriptor_0;
    uint64_t v7 = _Block_copy(v9);
    sub_25A3C5A4C(a1);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setInvalidationHandler_, v7);
    _Block_release(v7);
    return (id)sub_25A393228(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setInvalidationHandler_, 0);
  }
}

void sub_25A3C54E0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

id sub_25A3C5570()
{
  return objc_msgSend(v0, sel_invalidate);
}

id sub_25A3C5580()
{
  return sub_25A3C5598();
}

id sub_25A3C5598()
{
  v3[1] = *(id *)MEMORY[0x263EF8340];
  v3[0] = 0;
  if (objc_msgSend(v0, sel_acquireWithError_, v3)) {
    return v3[0];
  }
  id v2 = v3[0];
  sub_25A50E240();

  return (id)swift_willThrow();
}

void *Assertion<>.init(pid:domain:name:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v10 = self;
  swift_bridgeObjectRetain();
  id v11 = objc_msgSend(v10, sel_targetWithPid_, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416B00);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_25A513210;
  uint64_t v13 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(self, sel_attributeWithDomain_name_, v13, v14);

  *(void *)(v12 + 32) = v15;
  sub_25A50F0B0();
  id v16 = objc_allocWithZone(MEMORY[0x263F64408]);
  uint64_t v17 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  sub_25A3C5A5C();
  char v18 = (void *)sub_25A50F080();
  swift_bridgeObjectRelease();
  id v19 = objc_msgSend(v16, sel_initWithExplanation_target_attributes_, v17, v11, v18);

  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_allocObject();
  return sub_25A3C4144(v19, a6, a7);
}

uint64_t sub_25A3C5898(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_25A3C58D0(uint64_t (*a1)(void))
{
  return a1();
}

void sub_25A3C58F8(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  sub_25A50FB00();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t sub_25A3C59B0()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_25A3C59BC(void *a1)
{
  return sub_25A3C4A84(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t **)(v1 + 32));
}

uint64_t sub_25A3C59C8()
{
  return sub_25A3C4DF0(v0);
}

uint64_t sub_25A3C59D0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A3C5A08(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_25A3C5A4C(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_25A3C5A5C()
{
  unint64_t result = qword_26A416B08[0];
  if (!qword_26A416B08[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_26A416B08);
  }
  return result;
}

uint64_t dispatch thunk of AssertionImpl.onInvalidation(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of AssertionImpl.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AssertionImpl.acquire()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_25A3C5AEC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Assertion()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for Assertion(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Assertion);
}

uint64_t dispatch thunk of Assertion.__allocating_init(_:description:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t objectdestroyTm_1()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A3C5BC8(void *a1)
{
  return sub_25A3C4730(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_25A3C5BD4()
{
  sub_25A3C4D60(v0);
}

double sub_25A3C5BDC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A504280(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

id sub_25A3C5BF8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_25A3C5C8C(a1, a2);
}

uint64_t sub_25A3C5C10(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 96);
  *(void *)(result + 72) &= 0x1FFuLL;
  *(void *)(result + 96) = v1;
  return result;
}

uint64_t sub_25A3C5C28(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_25A3C5C84(void (*a1)(uint64_t), uint64_t a2)
{
  return sub_25A4C3C90(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

id sub_25A3C5C8C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = **(void ***)(v2 + 16);
  uint64_t v4 = *a1;
  *a1 = (uint64_t)v3;
  *a2 = v4;
  return v3;
}

uint64_t AgentSymbolTable.__allocating_init(dataProvider:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_25A3C85D8(a1, v2 + 16);
  return v2;
}

uint64_t AgentSymbolTable.init(dataProvider:)(long long *a1)
{
  sub_25A3C85D8(a1, v1 + 16);
  return v1;
}

uint64_t AgentSymbolTable.orderedSymbolAddresses.getter()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

Swift::String __swiftcall AgentSymbolTable.symbolName(for:)(Swift::UInt64 a1)
{
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v3);
  uint64_t v5 = (*(uint64_t (**)(Swift::UInt64, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4);
  if (!v6)
  {
    uint64_t v5 = 0x746164206461623CLL;
    id v6 = (void *)0xEA00000000003E61;
  }
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

Swift::String_optional __swiftcall AgentSymbolTable.symbolName(covering:)(Swift::UInt64 covering)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 2;
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  unint64_t v8 = sub_25A3C5F30(covering, v7);
  if (v9)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    goto LABEL_16;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v8 >= *(void *)(v7 + 16))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  Swift::UInt64 v10 = *(void *)(v7 + 8 * v8 + 32);
  swift_bridgeObjectRelease();
  if (covering <= v10 || (covering - v10) >> 20 != 0) {
    goto LABEL_13;
  }
  uint64_t v13 = v2[5];
  uint64_t v12 = v2[6];
  __swift_project_boxed_opaque_existential_1(v4, v13);
  unint64_t v8 = (*(uint64_t (**)(Swift::UInt64, uint64_t, uint64_t))(v12 + 24))(v10, v13, v12);
  if (!v9)
  {
    unint64_t v8 = 0x746164206461623CLL;
    unint64_t v9 = 0xEA00000000003E61;
  }
LABEL_16:
  result.value._object = (void *)v9;
  result.value._uint64_t countAndFlagsBits = v8;
  return result;
}

uint64_t sub_25A3C5F30(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t result = 0;
  int64_t v5 = 0;
  int64_t v6 = v2 - 1;
  while (!__OFSUB__(v6, v5))
  {
    unint64_t v7 = v5 + (v6 - v5) / 2;
    if (__OFADD__(v5, (v6 - v5) / 2)) {
      goto LABEL_13;
    }
    if (v7 >= v2) {
      goto LABEL_14;
    }
    if (*(void *)(a2 + 32 + 8 * v7) > a1)
    {
      int64_t v6 = v7 - 1;
    }
    else
    {
      uint64_t result = v5 + (v6 - v5) / 2;
      int64_t v5 = v7 + 1;
    }
    if (v6 < v5) {
      return result;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t AgentSymbolTable.symbolCount.getter()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t AgentSymbolTable.augmentCrashReport(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2[5];
  uint64_t v7 = v2[6];
  uint64_t v54 = v2 + 2;
  __swift_project_boxed_opaque_existential_1(v2 + 2, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  sub_25A3C635C(a1, a2);
  uint64_t result = type metadata accessor for CrashReport(0);
  Swift::UInt64 v10 = *(void **)(a2 + *(int *)(result + 44));
  uint64_t v11 = v10[2];
  if (v11)
  {
    unint64_t v12 = 0;
    uint64_t v13 = v8 + 32;
    uint64_t v46 = a2;
    unint64_t v47 = v3;
    uint64_t v55 = v8;
    uint64_t v44 = *(int *)(result + 44);
    uint64_t v45 = result;
    uint64_t v43 = v10[2];
    while (1)
    {
      if (v12 >= v10[2])
      {
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      uint64_t v14 = &v10[10 * v12];
      if (!v14[7])
      {
        unint64_t v15 = v14[4];
        if ((v15 & 0x8000000000000000) != 0) {
          goto LABEL_43;
        }
        uint64_t v16 = *(void *)(a2 + *(int *)(result + 40));
        if (v15 >= *(void *)(v16 + 16)) {
          goto LABEL_44;
        }
        uint64_t v17 = v14[5];
        uint64_t v18 = *(void *)(v16 + 72 * v15 + 64);
        BOOL v19 = __CFADD__(v18, v17);
        unint64_t v20 = v18 + v17;
        if (v19) {
          goto LABEL_45;
        }
        unint64_t v21 = *(void *)(v8 + 16);
        if (v21) {
          break;
        }
      }
LABEL_3:
      if (++v12 == v11) {
        goto LABEL_36;
      }
    }
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = v14[8];
    char v25 = *((unsigned char *)v14 + 72);
    uint64_t v26 = v14[10];
    long long v27 = *(_OWORD *)(v14 + 11);
    uint64_t v28 = v21 - 1;
    char v29 = 1;
    char v30 = *((unsigned char *)v14 + 104);
    do
    {
      while (1)
      {
        if (__OFSUB__(v28, v23))
        {
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        unint64_t v31 = v23 + (v28 - v23) / 2;
        if (__OFADD__(v23, (v28 - v23) / 2)) {
          goto LABEL_40;
        }
        if (v31 >= v21) {
          goto LABEL_41;
        }
        if (v20 < *(void *)(v13 + 8 * v31)) {
          break;
        }
        char v29 = 0;
        uint64_t v23 = v31 + 1;
        unint64_t v22 = v31;
        if (v28 <= (uint64_t)v31) {
          goto LABEL_20;
        }
      }
      uint64_t v28 = v31 - 1;
    }
    while ((uint64_t)(v31 - 1) >= v23);
    unint64_t v31 = v22;
    if (v29) {
      goto LABEL_3;
    }
LABEL_20:
    if (v31 >= v21) {
      goto LABEL_46;
    }
    unint64_t v32 = *(void *)(v13 + 8 * v31);
    BOOL v33 = v20 > v32;
    unint64_t v34 = (v20 - v32) >> 20;
    if (!v33 || v34 != 0)
    {
      uint64_t v8 = v55;
      goto LABEL_3;
    }
    char v50 = v30;
    uint64_t v51 = v26;
    char v52 = v25;
    uint64_t v53 = v24;
    uint64_t v36 = v3[5];
    uint64_t v48 = v3[6];
    long long v56 = v27;
    __swift_project_boxed_opaque_existential_1(v54, v36);
    uint64_t v49 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v48 + 24);
    swift_bridgeObjectRetain();
    uint64_t v37 = v49(v32, v36, v48);
    unint64_t v39 = v38;
    swift_bridgeObjectRelease();
    if (v39) {
      uint64_t v40 = v37;
    }
    else {
      uint64_t v40 = 0x746164206461623CLL;
    }
    if (v39) {
      unint64_t v41 = v39;
    }
    else {
      unint64_t v41 = 0xEA00000000003E61;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_25A3C753C(v10);
      Swift::UInt64 v10 = (void *)result;
    }
    if (v12 < v10[2])
    {
      uint64_t v42 = &v10[10 * v12];
      v42[4] = v15;
      v42[5] = v17;
      v42[6] = v40;
      v42[7] = v41;
      v42[8] = v53;
      *((unsigned char *)v42 + 72) = v52;
      v42[10] = v51;
      *(_OWORD *)(v42 + 11) = v56;
      *((unsigned char *)v42 + 104) = v50;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a2 = v46;
      uint64_t v3 = v47;
      uint64_t result = v45;
      *(void *)(v46 + v44) = v10;
      uint64_t v8 = v55;
      uint64_t v11 = v43;
      goto LABEL_3;
    }
LABEL_47:
    __break(1u);
  }
  else
  {
LABEL_36:
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A3C635C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrashReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AgentSymbolTable.mappingSize.getter()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t AgentSymbolTable.swiftEntrySectionPointer.getter()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t AgentSymbolTable.mappingSizeDescription.getter()
{
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v4, v3);
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  return 0x3A736C6F626D7973;
}

uint64_t AgentSymbolTable.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t AgentSymbolTable.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t SwiftEntrySectionPayload.sectionStart.getter()
{
  return *(void *)v0;
}

uint64_t SwiftEntrySectionPayload.sectionStart.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*SwiftEntrySectionPayload.sectionStart.modify())()
{
  return nullsub_1;
}

uint64_t SwiftEntrySectionPayload.init(sectionStart:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t SwiftEntrySectionPayload.init(jsonPayload:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_25A50E020();
  swift_allocObject();
  sub_25A50E010();
  uint64_t v7 = sub_25A3C671C(a1, a2);
  unint64_t v9 = v8;
  sub_25A3C7550();
  sub_25A50E000();
  swift_release();
  uint64_t result = sub_25A3B9048(v7, v9);
  if (!v3) {
    *a3 = v11;
  }
  return result;
}

uint64_t sub_25A3C671C(unint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C08);
  if (swift_dynamicCast())
  {
    sub_25A3C85D8(v38, (uint64_t)&v41);
    __swift_project_boxed_opaque_existential_1(&v41, v43);
    sub_25A50E190();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_25A3C850C((uint64_t)v38);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      uint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = sub_25A50FE60();
      }
      if (v4) {
        uint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = (uint64_t *)v4;
    }
    unint64_t v8 = sub_25A3C8310(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    uint64_t v11 = sub_25A50EDD0();
    goto LABEL_17;
  }
LABEL_69:
  unint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v11 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = sub_25A3C8374(v11);
  *((void *)&v38[0] + 1) = v12;
  MEMORY[0x270FA5388](*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)sub_25A3C7C20((void *(*)(uint64_t *__return_ptr, char *, char *))sub_25A3C856C);
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        sub_25A50E350();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = sub_25A48B718(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = sub_25A50EE20();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = sub_25A50FE60();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = sub_25A48B718(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = sub_25A50EDE0();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      sub_25A50E360();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  unint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    sub_25A50E360();
    sub_25A3B9678(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  sub_25A3B9678((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

char *SwiftEntrySectionPayload.jsonPayload.getter()
{
  uint64_t v2 = sub_25A50EC80();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_25A50E050();
  swift_allocObject();
  sub_25A50E040();
  v14[1] = v5;
  sub_25A3C75A4();
  uint64_t v6 = sub_25A50E030();
  if (!v1)
  {
    uint64_t v8 = v6;
    unint64_t v9 = v7;
    sub_25A50EC60();
    uint64_t v4 = (char *)sub_25A50EC40();
    uint64_t v11 = v10;
    sub_25A3B9048(v8, v9);
    if (!v11)
    {
      sub_25A3C75F8();
      swift_allocError();
      *unint64_t v13 = v4;
      v13[1] = 0;
      void v13[2] = v4;
      uint64_t v13[3] = 0;
      swift_willThrow();
    }
  }
  swift_release();
  return v4;
}

uint64_t sub_25A3C6D98()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_25A3C6DC8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_25A3C6DF8()
{
  return 0;
}

uint64_t sub_25A3C6E00()
{
  return sub_25A445DD8(*v0, v0[1], v0[2], v0[3]);
}

uint64_t SwiftEntrySectionPayload.hash(into:)()
{
  return sub_25A510520();
}

BOOL static SwiftEntrySectionPayload.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_25A3C6E4C()
{
  return sub_25A510530();
}

uint64_t sub_25A3C6E90()
{
  return sub_25A5104F0();
}

uint64_t sub_25A3C6EB8()
{
  return sub_25A510530();
}

uint64_t sub_25A3C6EF8()
{
  return 0x536E6F6974636573;
}

uint64_t sub_25A3C6F18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x536E6F6974636573 && a2 == 0xEC00000074726174)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25A510370();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25A3C6FC8()
{
  return 0;
}

void sub_25A3C6FD4(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_25A3C6FE0(uint64_t a1)
{
  unint64_t v2 = sub_25A3C764C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25A3C701C(uint64_t a1)
{
  unint64_t v2 = sub_25A3C764C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SwiftEntrySectionPayload.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416BB0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25A3C764C();
  sub_25A510570();
  sub_25A510240();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t SwiftEntrySectionPayload.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t SwiftEntrySectionPayload.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416BC0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25A3C764C();
  sub_25A510560();
  if (!v2)
  {
    uint64_t v9 = sub_25A510220();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25A3C7324@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return SwiftEntrySectionPayload.init(from:)(a1, a2);
}

uint64_t sub_25A3C733C(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416BB0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25A3C764C();
  sub_25A510570();
  sub_25A510240();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25A3C7470()
{
  return sub_25A510530();
}

uint64_t sub_25A3C74B8()
{
  return sub_25A510520();
}

uint64_t sub_25A3C74E4()
{
  return sub_25A510530();
}

void *sub_25A3C7528(void *a1)
{
  return sub_25A38A900(0, a1[2], 0, a1);
}

void *sub_25A3C753C(void *a1)
{
  return sub_25A38AD90(0, a1[2], 0, a1);
}

unint64_t sub_25A3C7550()
{
  unint64_t result = qword_26A416B98;
  if (!qword_26A416B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416B98);
  }
  return result;
}

unint64_t sub_25A3C75A4()
{
  unint64_t result = qword_26A416BA0;
  if (!qword_26A416BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416BA0);
  }
  return result;
}

unint64_t sub_25A3C75F8()
{
  unint64_t result = qword_26A416BA8;
  if (!qword_26A416BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416BA8);
  }
  return result;
}

unint64_t sub_25A3C764C()
{
  unint64_t result = qword_26A416BB8;
  if (!qword_26A416BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416BB8);
  }
  return result;
}

unint64_t sub_25A3C76A4()
{
  unint64_t result = qword_26A416BC8;
  if (!qword_26A416BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416BC8);
  }
  return result;
}

uint64_t type metadata accessor for AgentSymbolTable()
{
  return self;
}

uint64_t method lookup function for AgentSymbolTable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AgentSymbolTable);
}

uint64_t dispatch thunk of AgentSymbolTable.__allocating_init(dataProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of AgentSymbolTable.DataProvider.symbolCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AgentSymbolTable.DataProvider.orderedSymbolAddresses.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AgentSymbolTable.DataProvider.symbolName(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AgentSymbolTable.DataProvider.mappingSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AgentSymbolTable.DataProvider.swiftEntrySectionPointer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

ValueMetadata *type metadata accessor for SwiftEntrySectionPayload()
{
  return &type metadata for SwiftEntrySectionPayload;
}

uint64_t getEnumTagSinglePayload for SwiftEntrySectionPayload.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for SwiftEntrySectionPayload.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25A3C78CCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SwiftEntrySectionPayload.CodingKeys()
{
  return &type metadata for SwiftEntrySectionPayload.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString()
{
  return &type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString;
}

unint64_t sub_25A3C79C8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_25A3C79F8();
  unint64_t result = sub_25A3C7A4C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_25A3C79F8()
{
  unint64_t result = qword_26A416BD0;
  if (!qword_26A416BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416BD0);
  }
  return result;
}

unint64_t sub_25A3C7A4C()
{
  unint64_t result = qword_26A416BD8;
  if (!qword_26A416BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416BD8);
  }
  return result;
}

unint64_t sub_25A3C7AA4()
{
  unint64_t result = qword_26A416BE0;
  if (!qword_26A416BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416BE0);
  }
  return result;
}

unint64_t sub_25A3C7AFC()
{
  unint64_t result = qword_26A416BE8;
  if (!qword_26A416BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416BE8);
  }
  return result;
}

unint64_t sub_25A3C7B54()
{
  unint64_t result = qword_26A416BF0;
  if (!qword_26A416BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416BF0);
  }
  return result;
}

uint64_t sub_25A3C7BA8(unint64_t a1)
{
  return sub_25A38B57C(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_25A3C7BBC(void *a1)
{
  return sub_25A38BAA0(0, a1[2], 0, a1);
}

void *sub_25A3C7BD0(void *a1)
{
  return sub_25A38BBC0(0, a1[2], 0, a1);
}

void *sub_25A3C7BE4(void *a1)
{
  return sub_25A38BF64(0, a1[2], 0, a1);
}

void *sub_25A3C7BF8(void *a1)
{
  return sub_25A38A5A4(0, a1[2], 0, a1);
}

void *sub_25A3C7C0C(void *a1)
{
  return sub_25A38AEB0(0, a1[2], 0, a1);
}

char *sub_25A3C7C20(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_25A5132E0;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (sub_25A50E110() && __OFSUB__((int)v4, sub_25A50E140())) {
        goto LABEL_24;
      }
      sub_25A50E150();
      swift_allocObject();
      uint64_t v13 = sub_25A50E0F0();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      unint64_t result = sub_25A3C800C((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_25A50E330();
      unint64_t result = sub_25A3C800C(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *uint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *uint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      unint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      unint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        unint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *uint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

unsigned char *sub_25A3C7F24@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    unint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    unint64_t result = (unsigned char *)sub_25A3C814C(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    unint64_t result = (unsigned char *)sub_25A3C8210((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    unint64_t result = (unsigned char *)sub_25A3C828C((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *sub_25A3C7F9C(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    unint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  unint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *sub_25A3C800C(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  unint64_t result = (char *)sub_25A50E110();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  unint64_t result = (char *)sub_25A50E140();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = sub_25A50E130();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  unint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_25A3C80C0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    unint64_t result = sub_25A50FDC0();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      unint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_25A3C814C(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_25A3C8210(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_25A50E150();
  swift_allocObject();
  uint64_t result = sub_25A50E100();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_25A50E340();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_25A3C828C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_25A50E150();
  swift_allocObject();
  uint64_t result = sub_25A50E100();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

unsigned char *sub_25A3C8310(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)sub_25A3C814C(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)sub_25A3C8210((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)sub_25A3C828C((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_25A3C8374(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_25A50E150();
      swift_allocObject();
      sub_25A50E120();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_25A50E340();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_25A3C8414(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416BF8);
  unint64_t v10 = sub_25A3C84B0();
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  char v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_25A3C7F24(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

unint64_t sub_25A3C84B0()
{
  unint64_t result = qword_26A416C00;
  if (!qword_26A416C00)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A416BF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416C00);
  }
  return result;
}

uint64_t sub_25A3C850C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_25A3C856C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  unint64_t result = sub_25A3C7F9C((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_25A3C85F0, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_25A3C85D8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_25A3C85F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_25A3C80C0(a1, a2);
}

uint64_t sub_25A3C8610@<X0>(uint64_t a1@<X8>)
{
  return sub_25A3C635C(v1, a1);
}

uint64_t sub_25A3C861C()
{
  return sub_25A3C8630();
}

uint64_t sub_25A3C8624()
{
  return sub_25A3C8630();
}

uint64_t sub_25A3C8630()
{
  uint64_t v2 = *(void *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 20));
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  return v2;
}

uint64_t *_s20IndexOutOfRangeErrorVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for CrashReport(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = sub_25A50E4C0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = v6[5];
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    void *v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = v6[6];
    uint64_t v13 = (uint64_t *)((char *)a1 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    *(_DWORD *)((char *)a1 + v6[7]) = *(_DWORD *)((char *)a2 + v6[7]);
    uint64_t v16 = v6[8];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = sub_25A50E470();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(v17, v18, v19);
    *(uint64_t *)((char *)a1 + v6[9]) = *(uint64_t *)((char *)a2 + v6[9]);
    *(uint64_t *)((char *)a1 + v6[10]) = *(uint64_t *)((char *)a2 + v6[10]);
    *(uint64_t *)((char *)a1 + v6[11]) = *(uint64_t *)((char *)a2 + v6[11]);
    uint64_t v21 = v6[12];
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    BOOL v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s20IndexOutOfRangeErrorVwxx(uint64_t a1)
{
  uint64_t v2 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = type metadata accessor for CrashReport(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(v3 + 32);
  uint64_t v5 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s20IndexOutOfRangeErrorVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for CrashReport(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  uint64_t v10 = v5[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  *(_DWORD *)(a1 + v5[7]) = *(_DWORD *)(a2 + v5[7]);
  uint64_t v14 = v5[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_25A50E470();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(v15, v16, v17);
  *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
  *(void *)(a1 + v5[10]) = *(void *)(a2 + v5[10]);
  *(void *)(a1 + v5[11]) = *(void *)(a2 + v5[11]);
  uint64_t v19 = v5[12];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = v21[1];
  void *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s20IndexOutOfRangeErrorVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for CrashReport(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = v5[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + v5[7]) = *(_DWORD *)(a2 + v5[7]);
  uint64_t v12 = v5[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v5[10]) = *(void *)(a2 + v5[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v5[11]) = *(void *)(a2 + v5[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = v5[12];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  void *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s20IndexOutOfRangeErrorVwtk(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for CrashReport(0);
  *(_OWORD *)(a1 + v5[5]) = *(_OWORD *)(a2 + v5[5]);
  *(_OWORD *)(a1 + v5[6]) = *(_OWORD *)(a2 + v5[6]);
  *(_DWORD *)(a1 + v5[7]) = *(_DWORD *)(a2 + v5[7]);
  uint64_t v6 = v5[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
  *(void *)(a1 + v5[10]) = *(void *)(a2 + v5[10]);
  *(void *)(a1 + v5[11]) = *(void *)(a2 + v5[11]);
  *(_OWORD *)(a1 + v5[12]) = *(_OWORD *)(a2 + v5[12]);
  return a1;
}

uint64_t _s20IndexOutOfRangeErrorVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for CrashReport(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (uint64_t *)(a2 + v6);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *uint64_t v7 = v10;
  v7[1] = v9;
  swift_bridgeObjectRelease();
  uint64_t v11 = v5[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + v5[7]) = *(_DWORD *)(a2 + v5[7]);
  uint64_t v16 = v5[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v5[10]) = *(void *)(a2 + v5[10]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v5[11]) = *(void *)(a2 + v5[11]);
  swift_bridgeObjectRelease();
  uint64_t v20 = v5[12];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s17GenericCrashErrorVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A3C8F18);
}

uint64_t sub_25A3C8F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrashReport(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t _s17GenericCrashErrorVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A3C8F98);
}

uint64_t sub_25A3C8F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrashReport(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CrashReportError.GenericCrashError()
{
  uint64_t result = qword_26A416C18;
  if (!qword_26A416C18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25A3C9054()
{
  uint64_t result = type metadata accessor for CrashReport(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t NSTask.standardOutputPipe.getter()
{
  return sub_25A3C929C((SEL *)&selRef_standardOutput);
}

uint64_t sub_25A3C90EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A3C9154(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_25A3C91B4()
{
  unint64_t result = qword_26A416C30;
  if (!qword_26A416C30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26A416C30);
  }
  return result;
}

void NSTask.standardOutputPipe.setter(void *a1)
{
  objc_msgSend(v1, sel_setStandardOutput_, a1);
}

void (*NSTask.standardOutputPipe.modify(uint64_t *a1))(uint64_t a1, uint64_t a2)
{
  a1[1] = v1;
  *a1 = NSTask.standardOutputPipe.getter();
  return sub_25A3C9284;
}

void sub_25A3C9284(uint64_t a1, uint64_t a2)
{
}

uint64_t NSTask.standardErrorPipe.getter()
{
  return sub_25A3C929C((SEL *)&selRef_standardError);
}

uint64_t sub_25A3C929C(SEL *a1)
{
  if ([v1 *a1])
  {
    sub_25A50FC10();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_25A3C90EC((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    sub_25A3C91B4();
    if (swift_dynamicCast()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_25A3C9154((uint64_t)v5);
    return 0;
  }
}

void NSTask.standardErrorPipe.setter(void *a1)
{
  objc_msgSend(v1, sel_setStandardError_, a1);
}

void (*NSTask.standardErrorPipe.modify(uint64_t *a1))(uint64_t a1, uint64_t a2)
{
  a1[1] = v1;
  *a1 = NSTask.standardErrorPipe.getter();
  return sub_25A3C93E0;
}

void sub_25A3C93E0(uint64_t a1, uint64_t a2)
{
}

void sub_25A3C93EC(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v3 = *(id *)a1;
  objc_msgSend(*(id *)(a1 + 8), *a3, *(void *)a1);
}

uint64_t NSTask.makeStream(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C38);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)objc_msgSend(v2, sel_isRunning);
  if (result)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x270FA5388](result);
    *(&v9 - 2) = (uint64_t)v2;
    *(&v9 - 1) = a1;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8F580], v4);
    return sub_25A50F380();
  }
  return result;
}

void sub_25A3C958C(uint64_t a1, void *a2)
{
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08A80]), sel_init);
  id v4 = a2;
  id v5 = v6;
  swift_setAtReferenceWritableKeyPath();

  sub_25A3CA9A8(v5, a1);
}

void sub_25A3C9618(uint64_t a1)
{
  sub_25A3C958C(a1, *(void **)(v1 + 16));
}

uint64_t NSTask.makeCombinedStream()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C38);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)objc_msgSend(v1, sel_isRunning);
  if (result)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x270FA5388](result);
    *(&v7 - 2) = (uint64_t)v1;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F580], v2);
    return sub_25A50F380();
  }
  return result;
}

void sub_25A3C9774(uint64_t a1, void *a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08A80]), sel_init);
  objc_msgSend(a2, sel_setStandardOutput_, v4);
  objc_msgSend(a2, sel_setStandardError_, v4);
  sub_25A3CA9A8(v4, a1);
}

void sub_25A3C9804(uint64_t a1)
{
  sub_25A3C9774(a1, *(void **)(v1 + 16));
}

uint64_t sub_25A3C980C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(qword_26A416C78);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25A50E3A0();
  uint64_t v19 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_msgSend(a1, sel_availableData);
  uint64_t v13 = sub_25A50E380();
  unint64_t v15 = v14;

  switch(v15 >> 62)
  {
    case 1uLL:
      if (!((v13 ^ (unint64_t)(v13 << 32)) >> 32)) {
        goto LABEL_7;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v13 + 16) == *(void *)(v13 + 24)) {
        goto LABEL_7;
      }
LABEL_10:
      sub_25A39375C(v13, v15);
LABEL_11:
      sub_25A50E3B0();
      for (__int16 i = sub_25A50E390(); (i & 0x100) == 0; __int16 i = sub_25A50E390())
      {
        char v20 = i;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C70);
        sub_25A50F300();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
      (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
      uint64_t result = sub_25A3B9048(v13, v15);
      break;
    case 3uLL:
      goto LABEL_7;
    default:
      if ((v15 & 0xFF000000000000) != 0) {
        goto LABEL_11;
      }
LABEL_7:
      id v16 = objc_msgSend(a3, sel_fileHandleForReading);
      objc_msgSend(v16, sel_setReadabilityHandler_, 0);
      _Block_release(0);

      __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C70);
      sub_25A50F310();
      uint64_t result = sub_25A3B9048(v13, v15);
      break;
  }
  return result;
}

uint64_t NSTask.run(interruptible:)(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 56) = a1;
  return MEMORY[0x270FA2498](sub_25A3C9B3C, 0, 0);
}

uint64_t sub_25A3C9B3C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 56);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 24) = v3;
  *(void *)(v3 + 16) = v1;
  *(unsigned char *)(v3 + 24) = v2;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 32) = v4;
  *(unsigned char *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_25A3C9C50;
  uint64_t v6 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2338](v5, &unk_26A416C50, v3, sub_25A3CA528, v4, 0, 0, v6);
}

uint64_t sub_25A3C9C50()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v2 = sub_25A3C9D8C;
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    char v2 = sub_25A3C9D74;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A3C9D74()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_25A3C9D8C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A3C9DF8(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 48) = a3;
  *(void *)(v3 + 16) = a2;
  return MEMORY[0x270FA2498](sub_25A3C9E1C, 0, 0);
}

uint64_t sub_25A3C9E1C()
{
  char v1 = *(unsigned char *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 24) = v3;
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_25A3C9F18;
  return MEMORY[0x270FA2360]();
}

uint64_t sub_25A3C9F18()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_25A3CA0C0;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_25A3CA034;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A3CA034()
{
  if (*(unsigned char *)(v0 + 48) == 1 && (uint64_t v1 = *(void *)(v0 + 40), sub_25A50F3F0(), v1)) {
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  }
  else {
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v2();
}

uint64_t sub_25A3CA0C0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A3CA124()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(unsigned char *)(v4 + 48) = v3;
  *(void *)(v4 + 8) = sub_25A38F608;
  *(void *)(v4 + 16) = v2;
  return MEMORY[0x270FA2498](sub_25A3C9E1C, 0, 0);
}

uint64_t sub_25A3CA1D4(uint64_t a1, void *a2, char a3)
{
  void aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C68);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (char *)swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, v6);
  aBlock[4] = sub_25A3CA928;
  aBlock[5] = v11;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_25A3C9B14;
  void aBlock[3] = &block_descriptor_1;
  id v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_setTerminationHandler_, v12);
  _Block_release(v12);
  if (a3) {
    sub_25A50F3F0();
  }
  aBlock[0] = 0;
  if (objc_msgSend(a2, sel_launchAndReturnError_, aBlock))
  {
    id v13 = aBlock[0];
    uint64_t result = sub_25A50F3E0();
    if ((result & 1) == 0) {
      return result;
    }
  }
  else
  {
    id v15 = aBlock[0];
    id v16 = (void *)sub_25A50E240();

    swift_willThrow();
    objc_msgSend(a2, sel_setTerminationHandler_, 0);
    aBlock[0] = v16;
    sub_25A50F240();
    uint64_t result = sub_25A50F3E0();
    if ((result & 1) == 0) {
      return result;
    }
  }
  if (a3)
  {
    uint64_t result = (uint64_t)objc_msgSend(a2, sel_isRunning);
    if (result) {
      return (uint64_t)objc_msgSend(a2, sel_terminate);
    }
  }
  return result;
}

void sub_25A3CA460(uint64_t a1, void *a2)
{
  char v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_25A3CA4C8(uint64_t result, id a2)
{
  if (result)
  {
    uint64_t result = (uint64_t)objc_msgSend(a2, sel_isRunning);
    if (result)
    {
      return (uint64_t)objc_msgSend(a2, sel_terminate);
    }
  }
  return result;
}

void sub_25A3CA528()
{
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    uint64_t v1 = *(void **)(v0 + 24);
    if (objc_msgSend(v1, sel_isRunning))
    {
      objc_msgSend(v1, sel_terminate);
    }
  }
}

Swift::Bool __swiftcall NSTask.hasNonZeroExit()()
{
  Swift::Bool result = objc_msgSend(v0, sel_isRunning);
  if (!result) {
    return objc_msgSend(v0, sel_terminationReason) != (id)1
  }
        || objc_msgSend(v0, sel_terminationStatus) != 0;
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSTask.checkNonZeroExit()()
{
  if (objc_msgSend(v0, sel_isRunning))
  {
    __break(1u);
  }
  else if (objc_msgSend(v0, sel_terminationReason) != (id)1 || objc_msgSend(v0, sel_terminationStatus))
  {
    sub_25A3CA688();
    swift_allocError();
    swift_willThrow();
  }
}

unint64_t sub_25A3CA688()
{
  unint64_t result = qword_26A416C58;
  if (!qword_26A416C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416C58);
  }
  return result;
}

uint64_t sub_25A3CA6DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NSTask.standardOutputPipe.getter();
  *a1 = result;
  return result;
}

id sub_25A3CA708(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setStandardOutput_, *a1);
}

uint64_t sub_25A3CA71C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NSTask.standardErrorPipe.getter();
  *a1 = result;
  return result;
}

id sub_25A3CA748(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setStandardError_, *a1);
}

unsigned char *storeEnumTagSinglePayload for ProcessError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25A3CA7F8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProcessError()
{
  return &type metadata for ProcessError;
}

unint64_t sub_25A3CA834()
{
  unint64_t result = qword_26A416C60;
  if (!qword_26A416C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416C60);
  }
  return result;
}

uint64_t sub_25A3CA888(uint64_t a1)
{
  return sub_25A3CA1D4(a1, *(void **)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_25A3CA894()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C68);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A3CA928()
{
  return sub_25A50F250();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_25A3CA9A8(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C70);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  id v7 = objc_msgSend(a1, sel_fileHandleForReading);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *(void *)(v9 + ((v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8)) = a1;
  aBlock[4] = sub_25A3CAC48;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25A3C9B14;
  void aBlock[3] = &block_descriptor_18;
  unint64_t v10 = _Block_copy(aBlock);
  id v11 = a1;
  sub_25A3C5A4C((uint64_t)sub_25A3CAC48);
  swift_release();
  objc_msgSend(v7, sel_setReadabilityHandler_, v10);

  _Block_release(v10);
  return swift_release();
}

uint64_t sub_25A3CABA0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C70);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t sub_25A3CAC48(void *a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A416C70) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_25A3C980C(a1, v1 + v4, v5);
}

uint64_t MutableBox.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 88);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t MutableBox.value.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*MutableBox.value.modify())()
{
  return j__swift_endAccess;
}

uint64_t MutableBox.clone()(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v7 = v1 + *(void *)(v6 + 88);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  return MutableBox.__allocating_init(_:)(v5);
}

uint64_t ImmutableBox.value.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 88));
}

uint64_t _s20PreviewsFoundationOS10MutableBoxCyACyxGxcfC_0(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 80) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 88), a1);
  return v2;
}

uint64_t _s20PreviewsFoundationOS10MutableBoxCyACyxGxcfc_0(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 88), a1);
  return v1;
}

uint64_t ImmutableBox.clone()()
{
  MEMORY[0x270FA5388]();
  uint64_t v2 = (char *)&v6 - v1;
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - v1, v0 + *(void *)(v3 + 88));
  return MutableBox.__allocating_init(_:)(v2);
}

uint64_t _s20PreviewsFoundationOS10MutableBoxCfd_0()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  return v0;
}

uint64_t _s20PreviewsFoundationOS10MutableBoxCfD_0()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t type metadata accessor for MutableBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for MutableBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MutableBox);
}

uint64_t dispatch thunk of MutableBox.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for ImmutableBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ImmutableBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ImmutableBox);
}

uint64_t dispatch thunk of ImmutableBox.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t Lens.modify(in:_:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  id v12 = (char *)&v14 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 24))(a1, a4, a5);
  a2(v12);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a5 + 32))(v12, a1, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

void sub_25A3CB560()
{
}

void sub_25A3CB5AC()
{
}

uint64_t sub_25A3CB5F8()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t sub_25A3CB608(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 136) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 152), a1);
  return v2;
}

uint64_t sub_25A3CB69C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 144) + 24))(a1, *(void *)(*(void *)v1 + 136));
}

uint64_t sub_25A3CB714(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)v2 + 144) + 32))(a1, a2, *(void *)(*(void *)v2 + 136));
}

uint64_t sub_25A3CB78C()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));
}

uint64_t sub_25A3CB7E4()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t AnyLens.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  AnyLens.init<A>(_:)(a1, a2, a3);
  return v6;
}

uint64_t *AnyLens.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  if (swift_dynamicCast())
  {
    uint64_t v11 = v14;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    uint64_t v12 = *(void *)(v11 + 16);
    swift_retain();
    swift_release();
  }
  else
  {
    long long v14 = *(_OWORD *)(v8 + 80);
    uint64_t v15 = a2;
    uint64_t v16 = a3;
    type metadata accessor for AnyLens.Box();
    uint64_t v12 = sub_25A3CB608(a1);
  }
  _OWORD v4[2] = v12;
  return v4;
}

uint64_t type metadata accessor for AnyLens.Box()
{
  return swift_getGenericMetadata();
}

uint64_t AnyLens.get(from:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 96))();
}

uint64_t AnyLens.set(_:in:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 104))();
}

uint64_t AnyLens.deinit()
{
  swift_release();
  return v0;
}

uint64_t AnyLens.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_25A3CBB64()
{
  return AnyLens.get(from:)();
}

uint64_t sub_25A3CBB88()
{
  return AnyLens.set(_:in:)();
}

uint64_t WritableKeyPath.get(from:)()
{
  return swift_getAtKeyPath();
}

uint64_t WritableKeyPath.set(_:in:)(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - v1);
  return swift_setAtWritableKeyPath();
}

uint64_t sub_25A3CBCA8()
{
  return WritableKeyPath.get(from:)();
}

uint64_t sub_25A3CBCCC(uint64_t a1)
{
  return WritableKeyPath.set(_:in:)(a1);
}

uint64_t dispatch thunk of Lens.get(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Lens.set(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t sub_25A3CBD18()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AnyLens()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for AnyLens(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyLens);
}

uint64_t dispatch thunk of AnyLens.__allocating_init<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_25A3CBDA4()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AnyLens.BoxRoot()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3CBDF4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t CancelationToken<>.cancel<A>(onInvalidationOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(uint64_t))v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_25A3CCF00(v4, v5, v6);

  return swift_release();
}

{
  uint64_t v3;
  long long v4;
  long long v6[2];
  uint64_t v7;
  uint64_t vars8;

  uint64_t v4 = *(_OWORD *)(v3 + 16);
  v6[0] = *(_OWORD *)v3;
  v6[1] = v4;
  uint64_t v7 = *(void *)(v3 + 32);
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_25A3CD0C0(v6);

  return swift_release();
}

double sub_25A3CBEFC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_25A4096E8(a1);
  if (v6)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_25A40EF0C();
      uint64_t v9 = v11;
    }
    sub_25A3CE6F0(*(void *)(v9 + 56) + 32 * v7, a2);
    sub_25A3981BC(v7, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = xmmword_25A511AB0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t sub_25A3CBFC4(uint64_t a1, uint64_t a2)
{
  sub_25A393828(a1, (uint64_t)v6, &qword_26A416F88);
  if (v6[0]) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v6[1] == 1;
  }
  if (v4)
  {
    sub_25A3CE690((uint64_t)v6);
    sub_25A3CC8B8(a2, (uint64_t)v7);
    sub_25A3CE690(a1);
    return sub_25A3CE690((uint64_t)v7);
  }
  else
  {
    sub_25A3CE6F0((uint64_t)v6, (uint64_t)v7);
    sub_25A3CC55C((uint64_t)v7, a2, (uint64_t)v6);
    sub_25A3CE690(a1);
    sub_25A3CE690((uint64_t)v6);
    return sub_25A3CE734((uint64_t)v7);
  }
}

uint64_t sub_25A3CC070@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int64_t v4 = *(void *)(a1 + 16);
  sub_25A3CE5CC();
  uint64_t v5 = (void *)sub_25A50E8E0();
  char v6 = sub_25A38A900(0, v4, 0, MEMORY[0x263F8EE78]);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_22:
    *a2 = v5;
    a2[1] = v6;
    return result;
  }
  uint64_t v8 = a1 + 32;
  while (1)
  {
    sub_25A393828(v8, (uint64_t)&v26, &qword_26A416FB0);
    uint64_t v9 = v26;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v6 = sub_25A38A900(0, v6[2] + 1, 1, v6);
    }
    unint64_t v11 = v6[2];
    unint64_t v10 = v6[3];
    if (v11 >= v10 >> 1) {
      char v6 = sub_25A38A900((void *)(v10 > 1), v11 + 1, 1, v6);
    }
    v6[2] = v11 + 1;
    v6[v11 + 4] = v9;
    sub_25A3CE764((uint64_t)v27, (uint64_t)v25);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v14 = sub_25A4096E8(v9);
    uint64_t v15 = v5[2];
    BOOL v16 = (v13 & 1) == 0;
    uint64_t v17 = v15 + v16;
    if (__OFADD__(v15, v16)) {
      break;
    }
    char v18 = v13;
    if (v5[3] >= v17)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v13) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_25A40EF0C();
        if (v18) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_25A40B818(v17, isUniquelyReferenced_nonNull_native);
      uint64_t v19 = sub_25A4096E8(v9);
      if ((v18 & 1) != (v20 & 1)) {
        goto LABEL_25;
      }
      unint64_t v14 = v19;
      if (v18)
      {
LABEL_3:
        sub_25A3CE7B4((uint64_t)v25, v5[7] + 32 * v14);
        goto LABEL_4;
      }
    }
    v5[(v14 >> 6) + 8] |= 1 << v14;
    *(void *)(v5[6] + 8 * v14) = v9;
    sub_25A3CE6F0((uint64_t)v25, v5[7] + 32 * v14);
    uint64_t v21 = v5[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_24;
    }
    uint64_t v5[2] = v23;
LABEL_4:
    swift_bridgeObjectRelease();
    sub_25A3CE734((uint64_t)v27);
    v8 += 40;
    if (!--v7)
    {
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t sub_25A3CC2EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int64_t v3 = *(void *)(a1 + 16);
  sub_25A3CE5CC();
  int64_t v4 = (void *)sub_25A50E8E0();
  uint64_t v5 = sub_25A38A900(0, v3, 0, MEMORY[0x263F8EE78]);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_20:
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v4;
    a2[1] = v5;
    return result;
  }
  uint64_t v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v10 = *(v7 - 2);
    uint64_t v9 = *(v7 - 1);
    uint64_t v11 = *v7;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_25A38A900(0, v5[2] + 1, 1, v5);
    }
    unint64_t v13 = v5[2];
    unint64_t v12 = v5[3];
    if (v13 >= v12 >> 1) {
      uint64_t v5 = sub_25A38A900((void *)(v12 > 1), v13 + 1, 1, v5);
    }
    uint64_t v5[2] = v13 + 1;
    v5[v13 + 4] = v10;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v16 = sub_25A4096E8(v10);
    uint64_t v17 = v4[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      break;
    }
    char v20 = v15;
    if (v4[3] >= v19)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v15) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_25A40E9E0();
        if (v20) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_25A40AF54(v19, isUniquelyReferenced_nonNull_native);
      uint64_t v21 = sub_25A4096E8(v10);
      if ((v20 & 1) != (v22 & 1)) {
        goto LABEL_23;
      }
      unint64_t v16 = v21;
      if (v20)
      {
LABEL_3:
        uint64_t v8 = (void *)(v4[7] + 16 * v16);
        swift_release();
        *uint64_t v8 = v9;
        v8[1] = v11;
        goto LABEL_4;
      }
    }
    v4[(v16 >> 6) + 8] |= 1 << v16;
    *(void *)(v4[6] + 8 * v16) = v10;
    uint64_t v23 = (void *)(v4[7] + 16 * v16);
    void *v23 = v9;
    v23[1] = v11;
    uint64_t v24 = v4[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_22;
    }
    _OWORD v4[2] = v26;
LABEL_4:
    swift_release();
    swift_bridgeObjectRelease();
    v7 += 3;
    if (!--v6) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t sub_25A3CC544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3CC6A8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_25A3CD874);
}

uint64_t sub_25A3CC55C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int64_t v4 = v3;
  sub_25A3CE764(a1, (uint64_t)v13);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *v3;
  *int64_t v3 = 0x8000000000000000;
  sub_25A3CD988((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native, (uint64_t)v14);
  *int64_t v3 = v12;
  swift_bridgeObjectRelease();
  if (v14[0] || v14[1] != 1) {
    return sub_25A3CE6F0((uint64_t)v14, a3);
  }
  sub_25A3CE690((uint64_t)v14);
  uint64_t v8 = (void *)v3[1];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_25A38A900(0, v8[2] + 1, 1, v8);
    uint64_t v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)sub_25A38A900((void *)(v10 > 1), v11 + 1, 1, v8);
    uint64_t v8 = (void *)result;
  }
  void v8[2] = v11 + 1;
  v8[v11 + 4] = a2;
  v4[1] = v8;
  *(_OWORD *)a3 = xmmword_25A511AB0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  return result;
}

uint64_t sub_25A3CC690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3CC6A8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_25A3CDAD8);
}

uint64_t sub_25A3CC6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  swift_retain();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v4;
  *int64_t v4 = 0x8000000000000000;
  uint64_t v11 = a4(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *uint64_t v6 = v16;
  swift_bridgeObjectRelease();
  if (!v11)
  {
    uint64_t v12 = (void *)v6[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_25A38A900(0, v12[2] + 1, 1, v12);
    }
    unint64_t v14 = v12[2];
    unint64_t v13 = v12[3];
    if (v14 >= v13 >> 1) {
      uint64_t v12 = sub_25A38A900((void *)(v13 > 1), v14 + 1, 1, v12);
    }
    v12[2] = v14 + 1;
    v12[v14 + 4] = a3;
    v6[1] = v12;
  }
  return v11;
}

uint64_t sub_25A3CC7C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_25A4096E8(a1);
  if ((v5 & 1) == 0) {
    return 0;
  }
  unint64_t v6 = v4;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v1;
  uint64_t v15 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_25A40E9E0();
    uint64_t v8 = v15;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 16 * v6);
  sub_25A397C90(v6, v8);
  uint64_t *v2 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = v2[1];
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = v11 + 32;
    while (*(void *)(v14 + 8 * v13) != a1)
    {
      if (v12 == ++v13)
      {
        __break(1u);
        return 0;
      }
    }
    sub_25A4C3120(v13, &v15);
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_25A3CC8B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_25A3CBEFC(a1, (uint64_t)v11);
  unint64_t v5 = (unint64_t)v11;
  if (v11[0]) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v11[1] == 1;
  }
  if (v6)
  {
LABEL_10:
    uint64_t result = sub_25A3CE690(v5);
    *(_OWORD *)a2 = xmmword_25A511AB0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    uint64_t result = sub_25A3CE6F0((uint64_t)v11, (uint64_t)v12);
    uint64_t v8 = *(void *)(v2 + 8);
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      unint64_t v5 = 0;
      uint64_t v10 = v8 + 32;
      while (*(void *)(v10 + 8 * v5) != a1)
      {
        if (v9 == ++v5)
        {
          __break(1u);
          goto LABEL_10;
        }
      }
      sub_25A4C3120(v5, v11);
      return sub_25A3CE6F0((uint64_t)v12, a2);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_25A3CC970(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_25A4096E8(a1);
  if ((v5 & 1) == 0) {
    return 0;
  }
  unint64_t v6 = v4;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v1;
  uint64_t v15 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_25A410954();
    uint64_t v8 = v15;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 16 * v6);
  sub_25A397C90(v6, v8);
  uint64_t *v2 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = v2[1];
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = v11 + 32;
    while (*(void *)(v14 + 8 * v13) != a1)
    {
      if (v12 == ++v13)
      {
        __break(1u);
        return 0;
      }
    }
    sub_25A4C3120(v13, &v15);
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_25A3CCA60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = sub_25A50FA40();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - v7;
  if (qword_26A4154C0 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)(qword_26A418748 + 16);
  uint64_t v10 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v10);
  sub_25A42091C(v9, &v16);
  os_unfair_lock_unlock(v10);
  uint64_t v11 = v16;
  swift_release();
  uint64_t v12 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v8, a1, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v5);
  uint64_t v16 = v11;
  sub_25A3CE5CC();
  uint64_t v13 = type metadata accessor for OrderedDictionary();
  uint64_t result = OrderedDictionary.subscript.setter(v8, (uint64_t)&v16, v13);
  *a3 = v11;
  return result;
}

uint64_t sub_25A3CCC14(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = sub_25A50FA40();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))((char *)&v10 - v5, 1, 1, v3);
  uint64_t v11 = v7;
  sub_25A3CE5CC();
  uint64_t v8 = type metadata accessor for OrderedDictionary();
  return OrderedDictionary.subscript.setter(v6, (uint64_t)&v11, v8);
}

uint64_t sub_25A3CCCF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getTupleTypeMetadata2();
  uint64_t v4 = sub_25A50F120();
  unint64_t v5 = sub_25A3CE5CC();
  OrderedDictionary.init(dictionaryLiteral:)(v4, (uint64_t)&type metadata for Identifier, a1, v5, (_OWORD *)a2);
  type metadata accessor for CancelationToken();
  uint64_t result = sub_25A50F120();
  *(void *)(a2 + 16) = result;
  return result;
}

uint64_t sub_25A3CCDA0()
{
  unint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v1 + 21);
  sub_25A3CE668((uint64_t)&v1[4], (uint64_t)&v3);
  os_unfair_lock_unlock(v1 + 21);
  swift_release();
  swift_release();
  return sub_25A3CE684(v3, v4);
}

uint64_t sub_25A3CCE50()
{
  unint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v1 + 21);
  sub_25A3CE84C((uint64_t)&v1[4], (uint64_t)&v3);
  os_unfair_lock_unlock(v1 + 21);
  swift_release();
  swift_release();
  return sub_25A3CE684(v3, v4);
}

uint64_t sub_25A3CCF00(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  char v4 = *(os_unfair_lock_s **)(*(void *)(v3 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v4 + 21);
  sub_25A3CE668((uint64_t)&v4[4], (uint64_t)&v11);
  os_unfair_lock_unlock(v4 + 21);
  swift_release();
  uint64_t result = swift_release();
  if (v12 == 1)
  {
    uint64_t v6 = v11;
    uint64_t v7 = v13;
    uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Inva"
          "lidationHandle.swift";
    uint64_t v17 = 130;
    char v20 = "manage(_:)";
    uint64_t v21 = 10;
    char v18 = 2;
    long long v19 = xmmword_25A5138A0;
    char v22 = 2;
    uint64_t v8 = *(void *)(v15 + 144);
    MEMORY[0x270FA5388](result);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 76));
    sub_25A3B86E0((long long *)(v8 + 16), v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 76));
    uint64_t v9 = swift_release();
    if ((v10[0] & 1) == 0) {
      v7(v9);
    }
    return sub_25A3CE684(v6, 1);
  }
  return result;
}

uint64_t sub_25A3CD0C0(long long *a1)
{
  long long v2 = a1[1];
  long long v8 = *a1;
  long long v9 = v2;
  uint64_t v10 = *((void *)a1 + 4);
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)(v1 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v3 + 21);
  sub_25A3CE84C((uint64_t)&v3[4], (uint64_t)&v6);
  os_unfair_lock_unlock(v3 + 21);
  swift_release();
  uint64_t result = swift_release();
  if (v7 == 1)
  {
    uint64_t v5 = v6;
    long long v11 = v8;
    long long v12 = v9;
    uint64_t v13 = v10;
    sub_25A50693C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidationHandle.swift", 130, 2, 64, 45, (uint64_t)"manage(_:)", 10, 2);
    return sub_25A3CE684(v5, 1);
  }
  return result;
}

uint64_t sub_25A3CD1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v8 = *(void **)(a1 + 16);
  swift_retain();
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_25A38AA10(0, v8[2] + 1, 1, v8);
    long long v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)sub_25A38AA10((void *)(v10 > 1), v11 + 1, 1, v8);
    long long v8 = (void *)result;
  }
  void v8[2] = v11 + 1;
  long long v12 = &v8[3 * v11];
  void v12[4] = a2;
  v12[5] = a3;
  v12[6] = a4;
  *(void *)(a1 + 16) = v8;
  return result;
}

uint64_t IsolatedInvalidationHandle.executor.getter()
{
  swift_beginAccess();
  return MEMORY[0x26113F1A0](v0 + 40);
}

uint64_t IsolatedInvalidationHandle.executor.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 48) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*IsolatedInvalidationHandle.executor.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x26113F1A0](v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v3[3] = v4;
  v3[4] = v5;
  return sub_25A3CD3CC;
}

void sub_25A3CD3CC(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 48) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

void *IsolatedInvalidationHandle.__allocating_init(dsoHandle:file:line:column:function:on:name:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  swift_allocObject();
  char v20 = sub_25A3CDCCC(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  swift_unknownObjectRelease();
  return v20;
}

void *IsolatedInvalidationHandle.init(dsoHandle:file:line:column:function:on:name:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13 = sub_25A3CDCCC(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  swift_unknownObjectRelease();
  return v13;
}

uint64_t sub_25A3CD594(uint64_t a1, uint64_t a2)
{
  return sub_25A3CD798(a1, a2, (void (*)(uint64_t))sub_25A3CCDA0);
}

uint64_t IsolatedInvalidationHandle.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  sub_25A3CDE50(v0 + 40);
  return v0;
}

uint64_t IsolatedInvalidationHandle.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  sub_25A3CDE50(v0 + 40);

  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t IsolatedInvalidationHandle.invalidationHandle.getter()
{
  return swift_retain();
}

uint64_t sub_25A3CD62C()
{
  return swift_retain();
}

void *ConcurrentInvalidationHandle.__allocating_init(dsoHandle:file:line:column:function:name:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  return sub_25A3CDE78(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void *ConcurrentInvalidationHandle.init(dsoHandle:file:line:column:function:name:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  return sub_25A3CDE78(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_25A3CD780(uint64_t a1, uint64_t a2)
{
  return sub_25A3CD798(a1, a2, (void (*)(uint64_t))sub_25A3CCE50);
}

uint64_t sub_25A3CD798(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(a2);
    return swift_release();
  }
  return result;
}

uint64_t ConcurrentInvalidationHandle.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t ConcurrentInvalidationHandle.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t sub_25A3CD874(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_25A4096E8(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if (v16)
      {
LABEL_8:
        long long v19 = (uint64_t *)(v18[7] + 16 * v12);
        uint64_t result = *v19;
        *long long v19 = a1;
        v19[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_25A40E9E0();
      goto LABEL_7;
    }
    sub_25A40AF54(v15, a4 & 1);
    uint64_t v21 = sub_25A4096E8(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
LABEL_11:
      sub_25A3FEFA8(v12, a3, a1, a2, v18);
      return 0;
    }
  }
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t sub_25A3CD988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_25A4096E8(a2);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a3 & 1) == 0)
  {
    if (v17 >= v15 && (a3 & 1) == 0)
    {
      sub_25A40EF0C();
      goto LABEL_7;
    }
    sub_25A40B818(v15, a3 & 1);
    uint64_t v21 = sub_25A4096E8(a2);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
LABEL_13:
      uint64_t result = sub_25A3FF058(v12, a2, a1, v18);
      *(_OWORD *)a4 = xmmword_25A511AB0;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
      return result;
    }
LABEL_15:
    uint64_t result = sub_25A510430();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if ((v16 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  sub_25A3CE6F0(v18[7] + 32 * v12, a4);
  uint64_t v19 = v18[7] + 32 * v12;

  return sub_25A3CE6F0(a1, v19);
}

uint64_t sub_25A3CDAD8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_25A4096E8(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if (v16)
      {
LABEL_8:
        uint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
        uint64_t result = *v19;
        *uint64_t v19 = a1;
        v19[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_25A410954();
      goto LABEL_7;
    }
    sub_25A40E344(v15, a4 & 1);
    uint64_t v21 = sub_25A4096E8(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
LABEL_11:
      sub_25A3FEFA8(v12, a3, a1, a2, v18);
      return 0;
    }
  }
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t sub_25A3CDBEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v7 = a2[4];
  long long v8 = *(void **)(a1 + 16);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_25A38AFD8(0, v8[2] + 1, 1, v8);
    long long v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)sub_25A38AFD8((void *)(v10 > 1), v11 + 1, 1, v8);
    long long v8 = (void *)result;
  }
  void v8[2] = v11 + 1;
  unint64_t v12 = &v8[5 * v11];
  void v12[4] = v3;
  v12[5] = v4;
  v12[6] = v6;
  v12[7] = v5;
  v12[8] = v7;
  *(void *)(a1 + 16) = v8;
  return result;
}

void *sub_25A3CDCCC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v12[6] = 0;
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  v12[6] = a10;
  swift_unknownObjectWeakAssign();
  v12[2] = a11;
  uint64_t v12[3] = a12;
  uint64_t v17 = MEMORY[0x263F8EE78];
  sub_25A3CC070(MEMORY[0x263F8EE78], v27);
  uint64_t v18 = v27[0];
  uint64_t v19 = v27[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416FA0);
  uint64_t v20 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416FA8);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 84) = 0;
  *(void *)(v21 + 16) = v18;
  *(void *)(v21 + 24) = v19;
  *(void *)(v21 + 32) = v17;
  *(_OWORD *)(v21 + 40) = 0u;
  *(_OWORD *)(v21 + 56) = 0u;
  *(_OWORD *)(v21 + 66) = 0u;
  *(void *)(v20 + 144) = v21;
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  *(unsigned char *)(v20 + 32) = a3;
  *(void *)(v20 + 40) = a4;
  *(void *)(v20 + 48) = a5;
  *(void *)(v20 + 56) = a6;
  *(void *)(v20 + 64) = a7;
  *(unsigned char *)(v20 + 72) = a8;
  *(void *)(v20 + 80) = 0;
  *(void *)(v20 + 88) = 0;
  *(_OWORD *)(v20 + 96) = xmmword_25A511960;
  *(void *)(v20 + 112) = 0xD00000000000001CLL;
  *(void *)(v20 + 120) = 0x800000025A51E870;
  *(void *)(v20 + 128) = 0x6164696C61766E69;
  *(void *)(v20 + 136) = 0xEB00000000646574;
  void v12[4] = v20;
  return v12;
}

uint64_t sub_25A3CDE50(uint64_t a1)
{
  return a1;
}

void *sub_25A3CDE78(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10[2] = a9;
  void v10[3] = a10;
  sub_25A3CC2EC(MEMORY[0x263F8EE78], v24);
  uint64_t v17 = v24[0];
  uint64_t v18 = v24[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416F90);
  uint64_t v19 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416F98);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 84) = 0;
  *(void *)(v20 + 16) = v17;
  *(void *)(v20 + 24) = v18;
  *(void *)(v20 + 32) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 66) = 0u;
  *(void *)(v19 + 144) = v20;
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  *(unsigned char *)(v19 + 32) = a3;
  *(void *)(v19 + 40) = a4;
  *(void *)(v19 + 48) = a5;
  *(void *)(v19 + 56) = a6;
  *(void *)(v19 + 64) = a7;
  *(unsigned char *)(v19 + 72) = a8;
  *(void *)(v19 + 80) = 0;
  *(void *)(v19 + 88) = 0;
  *(_OWORD *)(v19 + 96) = xmmword_25A511960;
  *(void *)(v19 + 112) = 0xD00000000000001ELL;
  *(void *)(v19 + 120) = 0x800000025A51E7C0;
  *(void *)(v19 + 128) = 0x6164696C61766E69;
  *(void *)(v19 + 136) = 0xEB00000000646574;
  v10[4] = v19;
  return v10;
}

_UNKNOWN **sub_25A3CDFC4()
{
  return &off_26BC27348;
}

_UNKNOWN **sub_25A3CDFD0()
{
  return &protocol witness table for IsolatedTokenCallback;
}

_UNKNOWN **sub_25A3CDFDC()
{
  return &off_26BC27330;
}

_UNKNOWN **sub_25A3CDFE8()
{
  return &protocol witness table for ConcurrentTokenCallback;
}

uint64_t sub_25A3CDFF4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 40;
  swift_beginAccess();
  uint64_t result = MEMORY[0x26113F1A0](v4);
  uint64_t v6 = *(void *)(v3 + 48);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_25A3CE050(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 48) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_25A3CE0AC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_25A3CE0C0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_25A3CE0D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t sub_25A3CE0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for IsolatedInvalidationHandle()
{
  return self;
}

uint64_t method lookup function for IsolatedInvalidationHandle(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IsolatedInvalidationHandle);
}

uint64_t dispatch thunk of IsolatedInvalidationHandle.__allocating_init(dsoHandle:file:line:column:function:on:name:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for ConcurrentInvalidationHandle()
{
  return self;
}

uint64_t method lookup function for ConcurrentInvalidationHandle(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ConcurrentInvalidationHandle);
}

uint64_t dispatch thunk of ConcurrentInvalidationHandle.__allocating_init(dsoHandle:file:line:column:function:name:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for ConcurrentInvalidationObserverBox()
{
  return &type metadata for ConcurrentInvalidationObserverBox;
}

uint64_t destroy for IsolatedInvalidationObserverBox()
{
  swift_unknownObjectWeakDestroy();

  return swift_release();
}

uint64_t initializeWithCopy for IsolatedInvalidationObserverBox(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for IsolatedInvalidationObserverBox(uint64_t a1, void *a2)
{
  *(void *)(swift_unknownObjectWeakCopyAssign() + 8) = a2[1];
  uint64_t v4 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for IsolatedInvalidationObserverBox(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_unknownObjectWeakTakeInit();
  uint64_t v4 = *(void *)(a2 + 24);
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v3 + 8) = result;
  *(void *)(v3 + 24) = v4;
  return result;
}

uint64_t assignWithTake for IsolatedInvalidationObserverBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_unknownObjectWeakTakeAssign();
  uint64_t v5 = *(void *)(a2 + 24);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IsolatedInvalidationObserverBox(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IsolatedInvalidationObserverBox(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IsolatedInvalidationObserverBox()
{
  return &type metadata for IsolatedInvalidationObserverBox;
}

uint64_t sub_25A3CE3BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_25A3CE400(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_25A3CE450(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_25A3CE4DC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CancellationToken(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CancellationToken(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ObserverAndTokenStorage()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_25A3CE5CC()
{
  unint64_t result = qword_26A416F80;
  if (!qword_26A416F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416F80);
  }
  return result;
}

uint64_t sub_25A3CE620()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v3 = xmmword_25A511AB0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  return sub_25A3CBFC4((uint64_t)&v3, v1);
}

uint64_t sub_25A3CE668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A4837BC(a1, *(void (**)(long long *))(v2 + 16), a2);
}

uint64_t sub_25A3CE684(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A3CE690(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416F88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25A3CE6F0(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeInit();
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = v4;
  return a2;
}

uint64_t sub_25A3CE734(uint64_t a1)
{
  return a1;
}

uint64_t sub_25A3CE764(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit();
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = v4;
  swift_retain();
  return a2;
}

uint64_t sub_25A3CE7AC(uint64_t a1)
{
  return sub_25A3CDBEC(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_25A3CE7B4(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeAssign();
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = v4;
  swift_release();
  return a2;
}

uint64_t sub_25A3CE800(uint64_t a1)
{
  return sub_25A3CD1D4(a1, **(void **)(v1 + 16), *(void *)(*(void *)(v1 + 16) + 8), *(void *)(*(void *)(v1 + 16) + 16));
}

uint64_t sub_25A3CE810()
{
  uint64_t v1 = sub_25A3CC7C8(*(void *)(v0 + 16));

  return sub_25A393228(v1);
}

uint64_t sub_25A3CE84C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3CE668(a1, a2);
}

uint64_t Set.map<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  long long v56 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v48 = (char *)v41 - v15;
  uint64_t v46 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v53 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_25A50FA40();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)v41 - v19;
  uint64_t v49 = a5;
  uint64_t v50 = a7;
  uint64_t v21 = a3;
  uint64_t v65 = sub_25A50E880();
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_25A50FCB0();
    uint64_t result = sub_25A50F4E0();
    uint64_t v21 = v60;
    uint64_t v42 = v61;
    uint64_t v23 = v62;
    int64_t v24 = v63;
    unint64_t v25 = v64;
  }
  else
  {
    uint64_t v26 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v27 = *(void *)(a3 + 56);
    uint64_t v42 = a3 + 56;
    uint64_t v28 = ~v26;
    uint64_t v29 = -v26;
    if (v29 < 64) {
      uint64_t v30 = ~(-1 << v29);
    }
    else {
      uint64_t v30 = -1;
    }
    unint64_t v25 = v30 & v27;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v23 = v28;
    int64_t v24 = 0;
  }
  uint64_t v43 = v21 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v58 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
  v41[1] = v23;
  int64_t v44 = (unint64_t)(v23 + 64) >> 6;
  uint64_t v45 = v46 + 16;
  unint64_t v47 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v51 = (uint64_t (**)(char *, uint64_t))(v46 + 8);
  char v52 = (void (**)(char *, char *, uint64_t))(v46 + 32);
  uint64_t v57 = v21;
  if (v21 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v25)
  {
    uint64_t v31 = (v25 - 1) & v25;
    unint64_t v32 = __clz(__rbit64(v25)) | (v24 << 6);
    int64_t v33 = v24;
    goto LABEL_25;
  }
  int64_t v33 = v24 + 1;
  if (__OFADD__(v24, 1))
  {
    __break(1u);
    return result;
  }
  if (v33 >= v44) {
    goto LABEL_30;
  }
  unint64_t v34 = *(void *)(v42 + 8 * v33);
  if (!v34)
  {
    if (v24 + 2 < v44)
    {
      unint64_t v34 = *(void *)(v42 + 8 * (v24 + 2));
      if (v34)
      {
        int64_t v33 = v24 + 2;
        goto LABEL_24;
      }
      int64_t v33 = v24 + 3;
      if (v24 + 3 < v44)
      {
        unint64_t v34 = *(void *)(v42 + 8 * v33);
        if (v34) {
          goto LABEL_24;
        }
        int64_t v35 = v24 + 4;
        while (v44 != v35)
        {
          unint64_t v34 = *(void *)(v42 + 8 * v35++);
          if (v34)
          {
            int64_t v33 = v35 - 1;
            goto LABEL_24;
          }
        }
      }
    }
LABEL_30:
    (*v58)(v20, 1, 1, a4);
    sub_25A39C550();
    return v65;
  }
LABEL_24:
  uint64_t v31 = (v34 - 1) & v34;
  unint64_t v32 = __clz(__rbit64(v34)) + (v33 << 6);
LABEL_25:
  (*(void (**)(char *, unint64_t, uint64_t))(v46 + 16))(v20, *(void *)(v21 + 48) + *(void *)(v46 + 72) * v32, a4);
  while (1)
  {
    (*v58)(v20, 0, 1, a4);
    uint64_t v36 = a4;
    uint64_t v37 = v53;
    (*v52)(v53, v20, v36);
    uint64_t v38 = v59;
    v54(v37);
    if (v38) {
      break;
    }
    uint64_t v59 = 0;
    uint64_t v39 = v49;
    sub_25A50F530();
    long long v40 = v48;
    sub_25A50F4C0();
    (*v47)(v40, v39);
    uint64_t result = (*v51)(v37, v36);
    int64_t v24 = v33;
    unint64_t v25 = v31;
    uint64_t v21 = v57;
    a4 = v36;
    if ((v57 & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
LABEL_10:
    if (!sub_25A50FCC0()) {
      goto LABEL_30;
    }
    sub_25A510330();
    swift_unknownObjectRelease();
    int64_t v33 = v24;
    uint64_t v31 = v25;
  }
  (*v51)(v37, v36);
  sub_25A39C550();
  return swift_bridgeObjectRelease();
}

uint64_t Set.inserting(_:)()
{
  return sub_25A50F4B0();
}

uint64_t static StandardErrorCapture.captureStdErr(toFileName:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v6 = sub_25A50E260();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_25A50E320();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v21 - v15;
  id v17 = objc_msgSend(self, sel_defaultManager);
  id v18 = objc_msgSend(v17, sel_temporaryDirectory);

  sub_25A50E2E0();
  uint64_t v25 = a1;
  uint64_t v26 = v21;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F06E38], v6);
  sub_25A39BE4C();
  sub_25A50E310();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v10);
  _s20PreviewsFoundationOS20StandardErrorCaptureO010captureStdE05toURL4file4liney0B00J0V_SSSitFZ_0((uint64_t)v16, v22, v23, v24);
  return ((uint64_t (*)(char *, uint64_t))v19)(v16, v10);
}

void sub_25A3CF0C8(uint64_t *a1@<X0>, long long *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  unint64_t v6 = a1[1];
  if (v6)
  {
    uint64_t v7 = *a1;
    if (*a1 != v4 || v6 != v5)
    {
      unint64_t v9 = a1[3];
      uint64_t v10 = a1[4];
      uint64_t v11 = a1[2];
      if ((sub_25A510370() & 1) == 0)
      {
        uint64_t v12 = qword_26A4155B8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v12 != -1) {
          swift_once();
        }
        uint64_t v13 = sub_25A50E5E0();
        __swift_project_value_buffer(v13, (uint64_t)qword_26A419EA0);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v14 = sub_25A50E5C0();
        os_log_type_t v15 = sub_25A50F830();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v21 = v11;
          uint64_t v16 = swift_slowAlloc();
          uint64_t v24 = swift_slowAlloc();
          *(void *)&long long v23 = v24;
          *(_DWORD *)uint64_t v16 = 136446722;
          swift_bridgeObjectRetain();
          sub_25A3A36A4(v7, v6, (uint64_t *)&v23);
          sub_25A50FB00();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v16 + 12) = 2082;
          swift_bridgeObjectRetain();
          sub_25A3A36A4(v21, v9, (uint64_t *)&v23);
          sub_25A50FB00();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v16 + 22) = 2048;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)&long long v22 = v10;
          sub_25A50FB00();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_25A380000, v14, v15, "Already captured stderror to %{public}s from %{public}s:%ld", (uint8_t *)v16, 0x20u);
          uint64_t v17 = v24;
          swift_arrayDestroy();
          MEMORY[0x26113F070](v17, -1, -1);
          MEMORY[0x26113F070](v16, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
      }
    }
    *a3 = 1;
  }
  else
  {
    uint64_t v18 = *((void *)a2 + 4);
    long long v20 = *a2;
    long long v22 = a2[1];
    long long v19 = v22;
    long long v23 = v20;
    *a1 = v4;
    a1[1] = v5;
    *((_OWORD *)a1 + 1) = v19;
    a1[4] = v18;
    *a3 = 0;
    sub_25A3D04A0((uint64_t)&v23);
    sub_25A3D04A0((uint64_t)&v22);
  }
}

id sub_25A3CF3C4(uint64_t a1)
{
  v11[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = (void *)sub_25A50E2B0();
  v11[0] = 0;
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForWritingToURL_error_, v2, v11);

  id v4 = v11[0];
  if (v3)
  {
    uint64_t v5 = sub_25A50E320();
    unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    id v7 = v4;
    v6(a1, v5);
  }
  else
  {
    id v8 = v11[0];
    sub_25A50E240();

    swift_willThrow();
    uint64_t v9 = sub_25A50E320();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
  }
  return v3;
}

uint64_t static StandardErrorCapture.print(_:)()
{
  uint64_t v0 = sub_25A50E470();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  if (qword_26A415480 != -1) {
    swift_once();
  }
  id v4 = (void *)qword_26A416FB8;
  _s20PreviewsFoundationOS12TimingRecordV5PointV3nowAEvgZ_0();
  uint64_t v5 = (void *)sub_25A50E400();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v6 = objc_msgSend(v4, sel_stringFromDate_, v5, v13, v14);

  uint64_t v7 = sub_25A50EC20();
  unint64_t v9 = v8;

  swift_bridgeObjectRelease();
  uint64_t v13 = v7;
  unint64_t v14 = v9;
  sub_25A50EDA0();
  sub_25A50EDA0();
  sub_25A50EDA0();
  uint64_t v10 = (FILE *)sub_25A50E610();
  uint64_t v11 = sub_25A50ECC0();
  swift_bridgeObjectRelease();
  fputs((const char *)(v11 + 32), v10);
  return swift_release();
}

id sub_25A3CF6E4()
{
  uint64_t v0 = sub_25A50E530();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088C0]), sel_init);
  sub_25A50E520();
  uint64_t v5 = (void *)sub_25A50E510();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, sel_setTimeZone_, v5);

  id result = objc_msgSend(v4, sel_setFormatOptions_, 3955);
  qword_26A416FB8 = (uint64_t)v4;
  return result;
}

double sub_25A3CF804()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416FD0);
  uint64_t v0 = (_OWORD *)swift_allocObject();
  double result = 0.0;
  v0[1] = 0u;
  v0[2] = 0u;
  *(_OWORD *)((char *)v0 + 44) = 0u;
  qword_26A416FC0 = (uint64_t)v0;
  return result;
}

BOOL sub_25A3CF844(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_25A3CF890(v5, v7);
}

BOOL sub_25A3CF890(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_25A510370(), BOOL result = 0, (v5 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3]) {
      return a1[4] == a2[4];
    }
    char v8 = sub_25A510370();
    BOOL result = 0;
    if (v8) {
      return a1[4] == a2[4];
    }
  }
  return result;
}

void _s20PreviewsFoundationOS20StandardErrorCaptureO010captureStdE05toURL4file4liney0B00J0V_SSSitFZ_0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_25A50E470();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v60 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25A50E320();
  uint64_t v66 = *(void *)(v11 - 8);
  uint64_t v67 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v65 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_25A50EC80();
  uint64_t v61 = *(void *)(v13 - 8);
  uint64_t v62 = v13;
  MEMORY[0x270FA5388](v13);
  unint64_t v64 = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = a1;
  uint64_t v15 = sub_25A50E2F0();
  unint64_t v17 = v16;
  uint64_t v68 = v15;
  v73[0] = v15;
  v73[1] = v16;
  v73[2] = a2;
  v73[3] = a3;
  uint64_t v63 = a4;
  v73[4] = a4;
  uint64_t v18 = qword_26A415488;
  swift_bridgeObjectRetain();
  uint64_t v19 = swift_bridgeObjectRetain();
  if (v18 != -1) {
    uint64_t v19 = swift_once();
  }
  uint64_t v20 = qword_26A416FC0;
  MEMORY[0x270FA5388](v19);
  v57[-2] = v73;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v20 + 56));
  sub_25A3D0444((uint64_t *)(v20 + 16), &v71);
  os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 56));
  char v21 = v71;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (v21)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_26A4155B8 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_25A50E5E0();
    uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)qword_26A419EA0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v24 = sub_25A50E5C0();
    os_log_type_t v25 = sub_25A50F830();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v59 = v9;
    if (v26)
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v58 = v8;
      uint64_t v28 = v27;
      uint64_t v29 = swift_slowAlloc();
      v57[1] = v23;
      uint64_t v30 = v29;
      uint64_t v71 = v29;
      *(_DWORD *)uint64_t v28 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v70 = sub_25A3A36A4(v68, v17, &v71);
      sub_25A50FB00();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v70 = sub_25A3A36A4(a2, a3, &v71);
      sub_25A50FB00();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 22) = 2048;
      uint64_t v70 = v63;
      sub_25A50FB00();
      _os_log_impl(&dword_25A380000, v24, v25, "Redirecting stderr to %s, from %s:%ld", (uint8_t *)v28, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x26113F070](v30, -1, -1);
      uint64_t v31 = v28;
      uint64_t v8 = v58;
      MEMORY[0x26113F070](v31, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    unint64_t v32 = self;
    id v33 = objc_msgSend(v32, sel_processInfo);
    id v34 = objc_msgSend(v33, sel_processName);

    sub_25A50EC20();
    id v35 = objc_msgSend(v32, sel_processInfo);
    LODWORD(v63) = objc_msgSend(v35, sel_processIdentifier);

    id v36 = objc_msgSend(self, sel_defaultManager);
    uint64_t v37 = v69;
    sub_25A50E300();
    uint64_t v38 = (void *)sub_25A50EBF0();
    swift_bridgeObjectRelease();
    LOBYTE(v33) = objc_msgSend(v36, sel_fileExistsAtPath_, v38);

    if ((v33 & 1) == 0)
    {
      uint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      uint64_t v39 = v64;
      sub_25A50EC60();
      sub_25A39BE4C();
      sub_25A50FB80();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v39, v62);
      swift_bridgeObjectRelease();
    }
    sub_25A3D0460();
    uint64_t v40 = (uint64_t)v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v37, v67);
    id v41 = sub_25A3CF3C4(v40);
    swift_bridgeObjectRelease();
    objc_msgSend(v41, sel_seekToEndOfFile);
    int v42 = objc_msgSend(v41, sel_fileDescriptor);
    id v43 = objc_msgSend(self, sel_fileHandleWithStandardError);
    int v44 = objc_msgSend(v43, sel_fileDescriptor);

    if (dup2(v42, v44) == -1)
    {
      uint64_t v52 = swift_bridgeObjectRelease();
      int v53 = MEMORY[0x26113C600](v52);
      uint64_t v54 = sub_25A50E5C0();
      os_log_type_t v55 = sub_25A50F830();
      if (os_log_type_enabled(v54, v55))
      {
        long long v56 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)long long v56 = 67109120;
        LODWORD(v71) = v53;
        sub_25A50FB00();
        _os_log_impl(&dword_25A380000, v54, v55, "Failed to dup stderr to logHandle: %d", v56, 8u);
        MEMORY[0x26113F070](v56, -1, -1);
      }
    }
    else
    {
      uint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      sub_25A50FDB0();
      sub_25A50EDA0();
      if (qword_26A415480 != -1) {
        swift_once();
      }
      uint64_t v45 = (void *)qword_26A416FB8;
      uint64_t v46 = v60;
      _s20PreviewsFoundationOS12TimingRecordV5PointV3nowAEvgZ_0();
      unint64_t v47 = (void *)sub_25A50E400();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v46, v8);
      id v48 = objc_msgSend(v45, sel_stringFromDate_, v47);

      sub_25A50EC20();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      LODWORD(v70) = v63;
      sub_25A5102B0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      uint64_t v49 = (FILE *)sub_25A50E610();
      uint64_t v50 = sub_25A50ECC0();
      swift_bridgeObjectRelease();
      fputs((const char *)(v50 + 32), v49);
      swift_release();
      uint64_t v51 = (FILE *)sub_25A50E610();
      fflush(v51);
    }
  }
}

ValueMetadata *type metadata accessor for StandardErrorCapture()
{
  return &type metadata for StandardErrorCapture;
}

void sub_25A3D0444(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_25A3CF0C8(a1, *(long long **)(v2 + 16), a2);
}

unint64_t sub_25A3D0460()
{
  unint64_t result = qword_26A416FC8;
  if (!qword_26A416FC8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26A416FC8);
  }
  return result;
}

uint64_t sub_25A3D04A0(uint64_t a1)
{
  return a1;
}

void *initializeWithCopy for CaptureConfiguration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CaptureConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

void *assignWithTake for CaptureConfiguration(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

ValueMetadata *type metadata accessor for CaptureConfiguration()
{
  return &type metadata for CaptureConfiguration;
}

uint64_t Future.publisher()()
{
  sub_25A3D06B8();
  sub_25A50E690();
  swift_retain();
  sub_25A50E6A0();
  swift_getWitnessTable();
  uint64_t v0 = sub_25A50E6B0();
  swift_release();
  return v0;
}

unint64_t sub_25A3D06B8()
{
  unint64_t result = qword_26A416FD8;
  if (!qword_26A416FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A416FD8);
  }
  return result;
}

uint64_t sub_25A3D070C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = *(void *)(v5 + 80);
  v6[3] = a1;
  void v6[4] = a2;
  swift_retain();
  Future.observeFinish(_:)((uint64_t)sub_25A3D0C80, (uint64_t)v6);

  return swift_release();
}

uint64_t sub_25A3D07B4(uint64_t a1, uint64_t a2)
{
  return sub_25A3D070C(a1, a2, v2);
}

uint64_t sub_25A3D07BC(uint64_t a1, void (*a2)(void **), uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a2;
  sub_25A3D06B8();
  uint64_t v6 = sub_25A510540();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (void **)((char *)&v22 - v9);
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for FutureTermination();
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (void **)((char *)&v22 - v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v22 - v15, a1, v14);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v19 = *v16;
      *uint64_t v10 = *v16;
      swift_storeEnumTagMultiPayload();
      id v20 = v19;
      v23(v10);
    }
    else
    {
      *uint64_t v10 = 0;
      swift_storeEnumTagMultiPayload();
      v23(v10);
    }
    return (*(uint64_t (**)(void **, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v11 + 32))(v13, v16, a4);
    (*(void (**)(void **, char *, uint64_t))(v11 + 16))(v10, v13, a4);
    swift_storeEnumTagMultiPayload();
    v23(v10);
    (*(void (**)(void **, uint64_t))(v7 + 8))(v10, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, a4);
  }
}

void *initializeBufferWithCopyOfBuffer for CombinePublisherError(void *a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for CombinePublisherError(id *a1)
{
}

void **assignWithCopy for CombinePublisherError(void **a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = v3;

  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void **assignWithTake for CombinePublisherError(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for CombinePublisherError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CombinePublisherError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

void *sub_25A3D0C18(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for CombinePublisherError()
{
  return &type metadata for CombinePublisherError;
}

uint64_t sub_25A3D0C48()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A3D0C80(uint64_t a1)
{
  return sub_25A3D07BC(a1, *(void (**)(void **))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 16));
}

uint64_t xtpProcessEnvironmentKey.getter()
{
  return 0x5054585F5444;
}

uint64_t skywagonProcessEnvironmentKey.getter()
{
  return 18755;
}

uint64_t sub_25A3D0CB0()
{
  uint64_t result = sub_25A3D0CE4(0x5054585F5444, 0xE600000000000000);
  byte_26A416FE0 = result & 1;
  return result;
}

uint64_t sub_25A3D0CE4(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(self, sel_processInfo);
  id v5 = objc_msgSend(v4, sel_environment);

  uint64_t v6 = sub_25A50E8A0();
  if (!*(void *)(v6 + 16)) {
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_25A409670(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = (uint64_t *)(*(void *)(v6 + 56) + 16 * v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (sub_25A50EA40() == 1702195828 && v12 == 0xE400000000000000) {
    goto LABEL_11;
  }
  char v14 = sub_25A510370();
  swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_12;
  }
  if (sub_25A50EA40() == 7562617 && v16 == 0xE300000000000000)
  {
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    return 1;
  }
  char v18 = sub_25A510370();
  swift_bridgeObjectRelease();
  if (v18) {
    goto LABEL_12;
  }
  if (v11 == 49 && v10 == 0xE100000000000000) {
    goto LABEL_12;
  }
  char v20 = sub_25A510370();
  swift_bridgeObjectRelease();
  return v20 & 1;
}

uint64_t isXTP.getter()
{
  return sub_25A3D0F58(&qword_26B3292F0, (unsigned __int8 *)&byte_26A416FE0);
}

uint64_t sub_25A3D0F08()
{
  uint64_t result = sub_25A3D0CE4(18755, 0xE200000000000000);
  byte_26A416FE1 = result & 1;
  return result;
}

uint64_t isSkywagon.getter()
{
  return sub_25A3D0F58(&qword_26B3292E8, (unsigned __int8 *)&byte_26A416FE1);
}

uint64_t sub_25A3D0F58(void *a1, unsigned __int8 *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *a2;
}

uint64_t isAutomation.getter()
{
  if (qword_26B3292F0 != -1) {
    swift_once();
  }
  if (byte_26A416FE0) {
    return 1;
  }
  if (qword_26B3292E8 != -1) {
    swift_once();
  }
  return byte_26A416FE1;
}

void catchAndRethrow<A>(_:errorHandler:)(void (*a1)(void), uint64_t a2, void (*a3)(void *))
{
  a1();
  if (v3)
  {
    a3(v3);
  }
}

uint64_t Error.future<A>()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  id v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  uint64_t v6 = sub_25A5102E0();
  if (v6)
  {
    unint64_t v7 = (void *)v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    unint64_t v7 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v8, v4, a1);
  }
  type metadata accessor for Future();
  uint64_t v9 = sub_25A39F124((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Error+UVAdditions.swift", 129, 2, 33, 23, (uint64_t)"future()", 8, 2, v7);

  return v9;
}

unint64_t static SampleProjectConstants.appleBundleIDBase.getter()
{
  return 0xD00000000000001CLL;
}

ValueMetadata *type metadata accessor for SampleProjectConstants()
{
  return &type metadata for SampleProjectConstants;
}

uint64_t DiagnosticsReporter.underlyingCollector.getter()
{
  return swift_retain();
}

uint64_t DiagnosticsReporter.__allocating_init(storeArchiveAt:)(uint64_t a1)
{
  uint64_t v2 = sub_25A50E320();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for DiagnosticsReporter.DiagnosticsURL();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = swift_allocObject();
  sub_25A3D16A0(a1, (uint64_t)v8);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1)
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 32))(v5, v8, v2);
    uint64_t v10 = sub_25A50E300();
    uint64_t v11 = v12;
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  }
  swift_beginAccess();
  uint64_t v17 = qword_26A41AB20;
  char v16 = 0;
  type metadata accessor for DiagnosticsCollector(0);
  swift_allocObject();
  uint64_t v13 = DiagnosticsCollector.init(options:simulatorDiagnosticsDeviceSet:outputDirectory:prefix:suffix:)(&v17, &v16, v10, v11, 0, 0, 0, 0);
  sub_25A3D1894(a1);
  *(void *)(v9 + 16) = v13;
  return v9;
}

uint64_t DiagnosticsReporter.init(storeArchiveAt:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_25A50E320();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DiagnosticsReporter.DiagnosticsURL();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_25A3D16A0(a1, (uint64_t)v10);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v7, v10, v4);
    uint64_t v11 = sub_25A50E300();
    uint64_t v12 = v13;
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_beginAccess();
  uint64_t v18 = qword_26A41AB20;
  char v17 = 0;
  type metadata accessor for DiagnosticsCollector(0);
  swift_allocObject();
  uint64_t v14 = DiagnosticsCollector.init(options:simulatorDiagnosticsDeviceSet:outputDirectory:prefix:suffix:)(&v18, &v17, v11, v12, 0, 0, 0, 0);
  sub_25A3D1894(a1);
  *(void *)(v2 + 16) = v14;
  return v2;
}

uint64_t type metadata accessor for DiagnosticsReporter.DiagnosticsURL()
{
  uint64_t result = qword_26A416FE8;
  if (!qword_26A416FE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25A3D16A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiagnosticsReporter.DiagnosticsURL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A3D1704()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 16) + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock(v1 + 8);
  sub_25A4B043C((uint64_t)&v1[4], &v4);
  os_unfair_lock_unlock(v1 + 8);
  uint64_t v2 = v4;
  swift_release();
  return v2;
}

uint64_t sub_25A3D1788()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 16) + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v1 + 8);
  sub_25A3D18F0((uint64_t)&v1[4]);
  os_unfair_lock_unlock(v1 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t DiagnosticsReporter.deinit()
{
  swift_release();
  return v0;
}

uint64_t DiagnosticsReporter.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_25A3D1894(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DiagnosticsReporter.DiagnosticsURL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25A3D18F0(uint64_t a1)
{
  return sub_25A4AFB60(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t type metadata accessor for DiagnosticsReporter()
{
  return self;
}

uint64_t method lookup function for DiagnosticsReporter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DiagnosticsReporter);
}

uint64_t dispatch thunk of DiagnosticsReporter.__allocating_init(storeArchiveAt:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of DiagnosticsReporter.summaryDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of DiagnosticsReporter.insertLogEntry(titled:content:at:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t *initializeBufferWithCopyOfBuffer for DiagnosticsReporter.DiagnosticsURL(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_25A50E320();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for DiagnosticsReporter.DiagnosticsURL(uint64_t a1)
{
  uint64_t v2 = sub_25A50E320();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for DiagnosticsReporter.DiagnosticsURL(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for DiagnosticsReporter.DiagnosticsURL(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for DiagnosticsReporter.DiagnosticsURL(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for DiagnosticsReporter.DiagnosticsURL(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagnosticsReporter.DiagnosticsURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A3D20E4);
}

uint64_t sub_25A3D20E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E320();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DiagnosticsReporter.DiagnosticsURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A3D2164);
}

uint64_t sub_25A3D2164(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_25A50E320();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_25A3D21E4(uint64_t a1)
{
  uint64_t v2 = sub_25A50E320();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_25A3D224C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E320();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t sub_25A3D22BC()
{
  uint64_t result = sub_25A50E320();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t StaticBuiltProductPathProvider.init(paths:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t StaticBuiltProductPathProvider.paths.getter()
{
  uint64_t v2 = *v0;
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  swift_bridgeObjectRetain();
  return sub_25A3D23C8(v3, v1, v2);
}

uint64_t sub_25A3D23C8(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_25A3D23D8()
{
  uint64_t v2 = *v0;
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  swift_bridgeObjectRetain();
  return sub_25A3D23C8(v3, v1, v2);
}

uint64_t dispatch thunk of BuiltProductPathProvider.paths.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 8) + **(int **)(a2 + 8));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_25A3D2554;
  return v7(a1, a2);
}

uint64_t sub_25A3D2554(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

ValueMetadata *type metadata accessor for StaticBuiltProductPathProvider()
{
  return &type metadata for StaticBuiltProductPathProvider;
}

uint64_t sub_25A3D2660()
{
  uint64_t v0 = sub_25A50E5A0();
  __swift_allocate_value_buffer(v0, qword_26A417010);
  __swift_project_value_buffer(v0, (uint64_t)qword_26A417010);
  return sub_25A3D26AC();
}

uint64_t sub_25A3D26AC()
{
  uint64_t v0 = sub_25A50E5E0();
  MEMORY[0x270FA5388](v0 - 8);
  id v1 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v2 = (void *)sub_25A50EBF0();
  unsigned int v3 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  if (v3)
  {
    sub_25A50E5D0();
    return sub_25A50E580();
  }
  else
  {
    return MEMORY[0x270FA2D38]();
  }
}

uint64_t static OSSignposter.ultraviolet.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A415490 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_25A50E5A0();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_26A417010);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

BOOL sub_25A3D290C()
{
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  BOOL v0 = v7 < v6;
  if (v7 == v6)
  {
    swift_getAtKeyPath();
    swift_getAtKeyPath();
    BOOL v0 = v5 < v4;
    if (v5 == v4)
    {
      swift_getAtKeyPath();
      swift_getAtKeyPath();
      BOOL v0 = v3 < v2;
      if (v3 == v2) {
        return 0;
      }
    }
  }
  return v0;
}

uint64_t VersionNumber.major.getter()
{
  return *(void *)v0;
}

uint64_t VersionNumber.minor.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t VersionNumber.update.getter()
{
  return *(void *)(v0 + 16);
}

PreviewsFoundationOS::VersionNumber __swiftcall VersionNumber.init(major:minor:update:)(Swift::Int major, Swift::Int minor, Swift::Int update)
{
  *uint64_t v3 = major;
  v3[1] = minor;
  id v3[2] = update;
  result.update = update;
  result.minor = minor;
  result.major = major;
  return result;
}

PreviewsFoundationOS::VersionNumber __swiftcall VersionNumber.init(_:)(PreviewsFoundationOS::VersionNumber result)
{
  *id v1 = result;
  return result;
}

PreviewsFoundationOS::VersionNumber_optional __swiftcall VersionNumber.init(_:)(Swift::String a1)
{
  uint64_t v2 = v1;
  Swift::String v40 = a1;
  sub_25A39BE4C();
  uint64_t v3 = sub_25A50FB20();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
    unint64_t v35 = 0;
    int v9 = (void *)MEMORY[0x263F8EE78];
LABEL_64:
    swift_bridgeObjectRelease();
    if (v35 != v9[2] || v35 - 1 >= 3)
    {
      Swift::Int isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 16) = 0;
      *(unsigned char *)(v2 + 24) = 1;
    }
    else
    {
      uint64_t v37 = v9[4];
      if (v35 >= 2)
      {
        uint64_t v38 = v9[5];
        if (v35 == 2) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v9[6];
        }
      }
      else
      {
        uint64_t v38 = 0;
        uint64_t v39 = 0;
      }
      Swift::Int isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      *(void *)uint64_t v2 = v37;
      *(void *)(v2 + 8) = v38;
      *(void *)(v2 + 16) = v39;
      *(unsigned char *)(v2 + 24) = 0;
    }
    goto LABEL_78;
  }
  Swift::Int isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  int v9 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    int v10 = (uint64_t *)(v3 + 32 + 16 * v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    uint64_t v13 = HIBYTE(v12) & 0xF;
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v12 & 0x2000000000000000) != 0) {
      uint64_t v15 = HIBYTE(v12) & 0xF;
    }
    else {
      uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
    }
    if (!v15) {
      goto LABEL_4;
    }
    if ((v12 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = (uint64_t)sub_25A4F5A80(v11, v12, 10);
      char v34 = v33;
      Swift::Int isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      if ((v34 & 1) == 0) {
        goto LABEL_48;
      }
      goto LABEL_4;
    }
    if ((v12 & 0x2000000000000000) == 0)
    {
      if ((v11 & 0x1000000000000000) != 0) {
        char v16 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        char v16 = (unsigned __int8 *)sub_25A50FE60();
      }
      Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)sub_25A4F5A1C(v16, v14, 10);
      if ((v17 & 1) == 0)
      {
        uint64_t v18 = isUniquelyReferenced_nonNull_native;
LABEL_48:
        Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)sub_25A38B0FC(0, v9[2] + 1, 1, v9);
          int v9 = (void *)isUniquelyReferenced_nonNull_native;
        }
        unint64_t v29 = v9[2];
        unint64_t v28 = v9[3];
        if (v29 >= v28 >> 1)
        {
          Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)sub_25A38B0FC((void *)(v28 > 1), v29 + 1, 1, v9);
          int v9 = (void *)isUniquelyReferenced_nonNull_native;
        }
        void v9[2] = v29 + 1;
        v9[v29 + 4] = v18;
        goto LABEL_4;
      }
      goto LABEL_4;
    }
    v40._uint64_t countAndFlagsBits = v11;
    v40._object = (void *)(v12 & 0xFFFFFFFFFFFFFFLL);
    if (v11 == 43)
    {
      if (!v13) {
        goto LABEL_77;
      }
      if (v13 != 1 && (BYTE1(v11) - 48) <= 9u)
      {
        uint64_t v18 = (BYTE1(v11) - 48);
        if (v13 == 2) {
          goto LABEL_48;
        }
        if ((BYTE2(v11) - 48) <= 9u)
        {
          uint64_t v18 = 10 * (BYTE1(v11) - 48) + (BYTE2(v11) - 48);
          uint64_t v19 = v13 - 3;
          if (v13 != 3)
          {
            char v20 = (unsigned __int8 *)&v40._countAndFlagsBits + 3;
            while (1)
            {
              unsigned int v21 = *v20 - 48;
              if (v21 > 9) {
                goto LABEL_4;
              }
              uint64_t v22 = 10 * v18;
              if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
                goto LABEL_4;
              }
              uint64_t v18 = v22 + v21;
              if (__OFADD__(v22, v21)) {
                goto LABEL_4;
              }
              ++v20;
              if (!--v19) {
                goto LABEL_48;
              }
            }
          }
          goto LABEL_48;
        }
      }
      goto LABEL_4;
    }
    if (v11 != 45)
    {
      if (v13 && (v11 - 48) <= 9u)
      {
        uint64_t v18 = (v11 - 48);
        if (v13 == 1) {
          goto LABEL_48;
        }
        if ((BYTE1(v11) - 48) <= 9u)
        {
          uint64_t v18 = 10 * (v11 - 48) + (BYTE1(v11) - 48);
          uint64_t v23 = v13 - 2;
          if (v13 != 2)
          {
            uint64_t v24 = (unsigned __int8 *)&v40._countAndFlagsBits + 2;
            while (1)
            {
              unsigned int v25 = *v24 - 48;
              if (v25 > 9) {
                goto LABEL_4;
              }
              uint64_t v26 = 10 * v18;
              if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
                goto LABEL_4;
              }
              uint64_t v18 = v26 + v25;
              if (__OFADD__(v26, v25)) {
                goto LABEL_4;
              }
              ++v24;
              if (!--v23) {
                goto LABEL_48;
              }
            }
          }
          goto LABEL_48;
        }
      }
      goto LABEL_4;
    }
    if (!v13) {
      break;
    }
    if (v13 != 1 && (BYTE1(v11) - 48) <= 9u)
    {
      if (v13 == 2)
      {
        uint64_t v18 = -(uint64_t)(BYTE1(v11) - 48);
        goto LABEL_48;
      }
      if ((BYTE2(v11) - 48) <= 9u)
      {
        uint64_t v18 = -10 * (BYTE1(v11) - 48) - (BYTE2(v11) - 48);
        uint64_t v27 = v13 - 3;
        if (v13 != 3)
        {
          uint64_t v30 = (unsigned __int8 *)&v40._countAndFlagsBits + 3;
          while (1)
          {
            unsigned int v31 = *v30 - 48;
            if (v31 > 9) {
              goto LABEL_4;
            }
            uint64_t v32 = 10 * v18;
            if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
              goto LABEL_4;
            }
            uint64_t v18 = v32 - v31;
            if (__OFSUB__(v32, v31)) {
              goto LABEL_4;
            }
            ++v30;
            if (!--v27) {
              goto LABEL_48;
            }
          }
        }
        goto LABEL_48;
      }
    }
LABEL_4:
    if (++v8 == v4)
    {
      swift_bridgeObjectRelease();
      unint64_t v35 = *(void *)(v3 + 16);
      goto LABEL_64;
    }
  }
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  result.value.update = v6;
  result.value.minor = v14;
  result.value.major = isUniquelyReferenced_nonNull_native;
  result.is_nil = v7;
  return result;
}

__n128 static VersionNumber.current.getter@<Q0>(__n128 *a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_processInfo);
  objc_msgSend(v2, sel_operatingSystemVersion);
  unint64_t v3 = v7;
  __n128 v5 = v6;

  __n128 result = v5;
  *a1 = v5;
  a1[1].n128_u64[0] = v3;
  return result;
}

uint64_t VersionNumber.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v3 = sub_25A5102B0();
  sub_25A50EDA0();
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  uint64_t result = v3;
  if (v1)
  {
    sub_25A50EDA0();
    sub_25A5102B0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    return v3;
  }
  return result;
}

BOOL static VersionNumber.< infix(_:_:)()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  BOOL v0 = sub_25A3D290C();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t VersionNumber.hash(into:)()
{
  return sub_25A5104F0();
}

BOOL static VersionNumber.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t VersionNumber.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t sub_25A3D31B0()
{
  return sub_25A510530();
}

uint64_t sub_25A3D321C()
{
  return sub_25A5104F0();
}

uint64_t sub_25A3D3264()
{
  return sub_25A510530();
}

BOOL sub_25A3D32CC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  BOOL v0 = sub_25A3D290C();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

BOOL sub_25A3D3398()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  BOOL v0 = sub_25A3D290C();
  swift_release();
  swift_release();
  swift_release();
  return !v0;
}

BOOL sub_25A3D3468()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  BOOL v0 = sub_25A3D290C();
  swift_release();
  swift_release();
  swift_release();
  return !v0;
}

BOOL sub_25A3D3538()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  BOOL v0 = sub_25A3D290C();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

BOOL sub_25A3D3608(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

unint64_t sub_25A3D363C()
{
  unint64_t result = qword_26A417028[0];
  if (!qword_26A417028[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A417028);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for VersionNumber(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for VersionNumber(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for VersionNumber()
{
  return &type metadata for VersionNumber;
}

uint64_t ErasingBox.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_25A3D3760(a1, a2, (uint64_t (*)(void))type metadata accessor for CastableValueWrapper, (uint64_t)&off_27082E8A0, a3);
}

uint64_t type metadata accessor for CastableValueWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ErasingBox.forceUnwrap<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_25A3D381C(a1, (uint64_t (*)(void))type metadata accessor for CastableValueWrapper, (uint64_t (*)(void))type metadata accessor for CastableValueWrapper, a2);
}

uint64_t SendableErasingBox.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_25A3D3760(a1, a2, (uint64_t (*)(void))type metadata accessor for SendableCastableValueWrapper, (uint64_t)&off_27082E898, a3);
}

uint64_t sub_25A3D3760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  a5[3] = a3(0);
  a5[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  int v10 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v10(boxed_opaque_existential_1, a1, a2);
}

uint64_t type metadata accessor for SendableCastableValueWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SendableErasingBox.forceUnwrap<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_25A3D381C(a1, (uint64_t (*)(void))type metadata accessor for SendableCastableValueWrapper, (uint64_t (*)(void))type metadata accessor for SendableCastableValueWrapper, a2);
}

uint64_t sub_25A3D381C@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = a2(0);
  MEMORY[0x270FA5388](v8 - 8);
  int v10 = (char *)&v14 - v9;
  uint64_t v11 = v4[3];
  unint64_t v12 = __swift_project_boxed_opaque_existential_1(v4, v11);
  sub_25A3D3900((uint64_t)v12, v11, a3, (uint64_t)v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a1 - 8) + 32))(a4, v10, a1);
}

uint64_t sub_25A3D3900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  uint64_t result = a3(0);
  if (result == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);
    return v8(a4, a1, a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *assignWithCopy for ErasingBox(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    char v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *char v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *char v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for ErasingBox(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ErasingBox()
{
  return &type metadata for ErasingBox;
}

uint64_t _s20PreviewsFoundationOS10ErasingBoxVwcp_0(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t _s20PreviewsFoundationOS10ErasingBoxVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_25A3D3CDC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SendableErasingBox()
{
  return &type metadata for SendableErasingBox;
}

uint64_t sub_25A3D3D58()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_25A3D3DE8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_25A3D3F44(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x25A3D415CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t SubscriberCollection.init()@<X0>(uint64_t *a1@<X8>)
{
  sub_25A3CE5CC();

  return OrderedDictionary.init()(a1);
}

uint64_t static SubscriberCollection.add(file:line:column:function:_:modify:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t (**a9)()@<X8>, uint64_t a10, void (*a11)(uint64_t (*)(uint64_t a1)), uint64_t a12, uint64_t a13)
{
  *(void *)&long long v14 = a1;
  *((void *)&v14 + 1) = a2;
  char v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  char v20 = a8;
  return static SubscriberCollection.add(callsite:_:modify:)(&v14, a10, a11, a12, a13, a9);
}

uint64_t static SubscriberCollection.add(callsite:_:modify:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t (*)(uint64_t a1))@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  long long v11 = a1[1];
  v23[0] = *a1;
  v23[1] = v11;
  v24[0] = a1[2];
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)a1 + 41);
  if (qword_26A4154C0 != -1) {
    swift_once();
  }
  unsigned int v12 = (void *)(qword_26A418748 + 16);
  int v13 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v13);
  sub_25A42091C(v12, &v22);
  os_unfair_lock_unlock(v13);
  uint64_t v14 = v22;
  uint64_t v15 = swift_release();
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = a5;
  uint64_t v20 = v14;
  uint64_t v21 = a2;
  a3(sub_25A3D52B4);
  uint64_t v16 = (uint64_t (*)())swift_allocObject();
  *((void *)v16 + 2) = a5;
  *((void *)v16 + 3) = a3;
  *((void *)v16 + 4) = a4;
  *((void *)v16 + 5) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t v17 = sub_25A3B7704(v23, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  *a6 = sub_25A3D52F8;
  a6[1] = v16;
  a6[2] = (uint64_t (*)())v17;
  return swift_retain();
}

uint64_t sub_25A3D4404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_25A50FA40();
  MEMORY[0x270FA5388](v7 - 8);
  BOOL v9 = (char *)&v13 - v8;
  uint64_t v10 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v13 - v8, a3, a4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, a4);
  uint64_t v14 = a2;
  sub_25A3CE5CC();
  uint64_t v11 = type metadata accessor for OrderedDictionary();
  return OrderedDictionary.subscript.setter(v9, (uint64_t)&v14, v11);
}

uint64_t sub_25A3D4528(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_25A50FA40();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v10 = a2;
  sub_25A3CE5CC();
  uint64_t v7 = type metadata accessor for OrderedDictionary();
  OrderedDictionary.removeValue(forKey:)((uint64_t)&v10, v7, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t static SubscriberCollection.add<A>(file:line:column:function:_:at:of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t (**a9)()@<X8>, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  *(void *)&long long v13 = a1;
  *((void *)&v13 + 1) = a2;
  char v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  char v19 = a8;
  return static SubscriberCollection.add<A>(callsite:_:at:of:)(&v13, a10, a11, a12, a9);
}

uint64_t static SubscriberCollection.add<A>(callsite:_:at:of:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  uint64_t v9 = *a3;
  char v10 = *((unsigned char *)a1 + 16);
  char v11 = *((unsigned char *)a1 + 56);
  long long v25 = *a1;
  char v26 = v10;
  long long v27 = *(long long *)((char *)a1 + 24);
  long long v28 = *(long long *)((char *)a1 + 40);
  char v29 = v11;
  unsigned int v12 = (uint64_t *)(v9 + *MEMORY[0x263F8E100]);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = MEMORY[0x263F8EE60] + 8;
  uint64_t v16 = sub_25A3F78A4(*v12, v14, MEMORY[0x263F8EE60] + 8);
  uint64_t v18 = v17;
  swift_retain();
  char v19 = captureWeak<A, B, C>(_:deinitialized:toInvoke:)(a4, (uint64_t)v16, v18, (uint64_t)sub_25A3D534C, (uint64_t)a3, v13, v14, v15);
  uint64_t v21 = v20;
  swift_release();
  swift_release();
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v23 = *(void *)(v14 + 16);
  void v22[2] = v23;
  v22[3] = v13;
  v22[4] = v19;
  v22[5] = v21;
  static SubscriberCollection.add(callsite:_:modify:)(&v25, a2, (void (*)(uint64_t (*)(uint64_t)))sub_25A3D538C, (uint64_t)v22, v23, a5);

  return swift_release();
}

uint64_t sub_25A3D4804(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = (void *)(v7 + *MEMORY[0x263F8E100]);
  void v8[2] = *(void *)(v9[1] + 16);
  void v8[3] = *v9;
  void v8[4] = a2;
  v8[5] = a3;
  uint64_t v14 = a1;
  swift_unknownObjectRetain();
  char v10 = (void (*)(unsigned char *, void))swift_modifyAtReferenceWritableKeyPath();
  a2(v11);
  v10(v13, 0);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t SubscriberCollection.all.getter()
{
  sub_25A3CE5CC();
  uint64_t v0 = type metadata accessor for OrderedDictionary();
  return OrderedDictionary.lazyValues.getter(v0);
}

void SubscriberCollection.notifyAll(closure:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v16 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  v15[4] = (char *)v15 - v7;
  uint64_t v8 = sub_25A50FA40();
  uint64_t v18 = *(void *)(v8 - 8);
  uint64_t v19 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v21 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unsigned int v12 = (char *)v15 - v11;
  uint64_t v14 = *v3;
  uint64_t v13 = v3[1];
  uint64_t v22 = v14;
  uint64_t v23 = v13;
  uint64_t v24 = 0;
  sub_25A3CE5CC();
  uint64_t v20 = v4;
  type metadata accessor for OrderedDictionary();
  void v15[2] = v6 + 8;
  v15[3] = v16 + 16;
  uint64_t v17 = v16 + 32;
  uint64_t v18 = v6 + 48;
  v16 += 8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15[1] = v12;
  OrderedDictionary.endIndex.getter();
}

uint64_t SubscriberCollection.isEmpty.getter()
{
  return OrderedDictionary.isEmpty.getter() & 1;
}

void SubscriberCollection.count.getter()
{
}

Swift::Void __swiftcall SubscriberCollection.removeAll()()
{
  sub_25A3CE5CC();
  OrderedDictionary.init()((uint64_t *)&v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _OWORD *v0 = v1;
}

uint64_t SubscriberCollection.sort(using:)()
{
  return swift_bridgeObjectRelease();
}

void sub_25A3D4F1C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v17[1] = a6;
  void v17[2] = a5;
  uint64_t v10 = sub_25A50FA40();
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  v17[6] = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  v17[0] = (char *)v17 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = *a1;
  v17[3] = *a2;
  v17[4] = a3;
  v17[8] = a3;
  v17[9] = a4;
  v17[5] = a4;
  v17[7] = v16;
  sub_25A3CE5CC();
  type metadata accessor for OrderedDictionary();
  OrderedDictionary.subscript.getter();
}

void sub_25A3D50A0()
{
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v0) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, v3, v0);
    uint64_t v5 = *(void *)(v4 - 120);
    *(void *)(v4 - 96) = *(void *)(v4 - 128);
    *(void *)(v4 - 88) = v5;
    *(void *)(v4 - 104) = *(void *)(v4 - 136);
    OrderedDictionary.subscript.getter();
  }
  __break(1u);
  JUMPOUT(0x25A3D51B4);
}

void SubscriberCollection<A>.notify()()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *v0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    do
    {
      if (!*(void *)(v3 + 16))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        return;
      }
      uint64_t v5 = sub_25A4096E8(*(void *)(v1 + 8 * v4 + 32));
      if ((v6 & 1) == 0) {
        goto LABEL_11;
      }
      uint64_t v7 = *(void (**)(uint64_t))(*(void *)(v3 + 56) + 16 * v5);
      ++v4;
      uint64_t v8 = swift_retain();
      v7(v8);
      swift_release();
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_25A3D528C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_25A3D52B4(uint64_t a1)
{
  return sub_25A3D4404(a1, v1[3], v1[4], v1[2]);
}

uint64_t sub_25A3D52C0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A3D52F8()
{
  uint64_t v1 = (uint64_t (*)(uint64_t (*)(uint64_t), void *))v0[3];
  uint64_t v2 = v0[5];
  _OWORD v4[2] = v0[2];
  uint64_t v4[3] = v2;
  return v1(sub_25A3D541C, v4);
}

uint64_t sub_25A3D534C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  return sub_25A3D4804(a1, a2, a3, v3);
}

uint64_t sub_25A3D5354()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A3D538C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t (*)(), _OWORD *))(v2 + 32);
  v5[1] = *(_OWORD *)(v2 + 16);
  uint64_t v6 = a1;
  uint64_t v7 = a2;
  return v3(sub_25A3AD588, v5);
}

void sub_25A3D53E4(uint64_t *a1, void *a2)
{
  sub_25A3D4F1C(a1, a2, v2[3], v2[4], v2[5], v2[6]);
}

uint64_t type metadata accessor for SubscriberCollection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3D540C()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A3D541C(uint64_t a1)
{
  return sub_25A3D4528(a1, *(void *)(v1 + 24));
}

uint64_t Callsite.init(_:_:_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(unsigned char *)(a9 + 56) = a8;
  return result;
}

uint64_t Callsite.file.getter()
{
  return *(void *)v0;
}

uint64_t Callsite.line.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t Callsite.column.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t Callsite.function.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t Callsite.description.getter()
{
  sub_25A50FDB0();
  sub_25A3D55F4();
  uint64_t v0 = (void *)sub_25A50F9B0();
  id v1 = objc_msgSend(v0, sel_lastPathComponent);

  uint64_t v2 = sub_25A50EC20();
  swift_bridgeObjectRelease();

  sub_25A50EDA0();
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A50FE00();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_25A3D55F4()
{
  unint64_t result = qword_26A4171B0[0];
  if (!qword_26A4171B0[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_26A4171B0);
  }
  return result;
}

__n128 CallsiteError.callsite.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  char v3 = *(unsigned char *)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(unsigned char *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  __n128 result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 56) = v3;
  return result;
}

uint64_t CallsiteError.underlying.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t CallsiteError.init(underlying:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7 = *(unsigned char *)(a2 + 16);
  char v8 = *(unsigned char *)(a2 + 56);
  *(_OWORD *)a4 = *(_OWORD *)a2;
  *(unsigned char *)(a4 + 16) = v7;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a4 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a4 + 56) = v8;
  uint64_t v9 = a4 + *(int *)(type metadata accessor for CallsiteError() + 36);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);

  return v10(v9, a1, a3);
}

uint64_t type metadata accessor for CallsiteError()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CallsiteError.lowValueTitle.getter()
{
  return Callsite.description.getter();
}

uint64_t CallsiteError.additionalInfo.getter()
{
  return 0;
}

uint64_t CallsiteError.additionalDiagnostics.getter()
{
  return 0;
}

uint64_t CallsiteError.isPotentialCrash.getter(uint64_t a1)
{
  Error.humanReadable.getter(*(void *)(a1 + 16), (uint64_t)v4);
  uint64_t v1 = v5;
  uint64_t v2 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v1 & 1;
}

uint64_t sub_25A3D5854()
{
  return 0;
}

uint64_t sub_25A3D5864(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return HumanReadableError.errorDescription.getter(a1, WitnessTable);
}

uint64_t sub_25A3D58B8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return HumanReadableError.description.getter(a1, WitnessTable);
}

uint64_t Error.trackingCallsite(file:line:column:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t *a9@<X8>, uint64_t a10)
{
  int v27 = a8;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v23 = a5;
  char v29 = a9;
  uint64_t v15 = *(void *)(a10 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Error.humanReadable.getter(a10, (uint64_t)v37);
  uint64_t v18 = v38;
  uint64_t v28 = v39;
  char v26 = __swift_project_boxed_opaque_existential_1(v37, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v10, a10);
  v30[0] = a1;
  v30[1] = a2;
  char v31 = a3;
  uint64_t v32 = a4;
  uint64_t v33 = v23;
  uint64_t v34 = v24;
  uint64_t v35 = v25;
  char v36 = v27;
  type metadata accessor for CallsiteError();
  swift_getWitnessTable();
  uint64_t v19 = (void *)swift_allocError();
  CallsiteError.init(underlying:callsite:)((uint64_t)v17, (uint64_t)v30, a10, v20);
  HumanReadableError.withUnderlying(_:)(v19, v18, v28, v29);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
}

uint64_t sub_25A3D5ACC(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_25A3D5B2C()
{
  return swift_getWitnessTable();
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Callsite(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Callsite(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 57) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Callsite()
{
  return &type metadata for Callsite;
}

uint64_t sub_25A3D5BD0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_25A3D5C6C(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 57) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    *char v3 = *a2;
    char v3 = (void *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v9;
    a1[2] = *((_OWORD *)a2 + 2);
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 57) & ~v5, ((unint64_t)a2 + v5 + 57) & ~v5);
  }
  return v3;
}

uint64_t sub_25A3D5D68(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

_OWORD *sub_25A3D5DA4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t sub_25A3D5E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((*(unsigned __int8 *)(v4 + 80) + 57 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 57 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_OWORD *sub_25A3D5ECC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t sub_25A3D5F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 57 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 57 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_25A3D5FDC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 57) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 57) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void sub_25A3D6158(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 57) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x25A3D638CLL);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 57] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

Swift::String __swiftcall lengthPrefixedNameSuitableForMangledSymbolName(_:)(Swift::String a1)
{
  _s20PreviewsFoundationOS8PunycodeO6encode6stringSSSgSS_tFZ_0(a1._countAndFlagsBits, (unint64_t)a1._object);
  if (!v1) {
    swift_bridgeObjectRetain();
  }
  sub_25A50EE80();
  sub_25A50ED50();
  sub_25A50ED50();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50ED50();
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  uint64_t v2 = 0;
  char v3 = (void *)0xE000000000000000;
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

Swift::tuple_module_String_name_String_optional __swiftcall demangleSimpleType(_:)(Swift::String a1)
{
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v2 = sub_25A50F9F0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unsigned int v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_allocWithZone(MEMORY[0x263F08B08]);
  swift_bridgeObjectRetain();
  unsigned int v7 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithString_, v7);

  size_t v9 = *(void (**)(void))(v3 + 104);
  unsigned int v38 = *MEMORY[0x263F07D68];
  uint64_t v37 = (void (*)(char *, void, uint64_t))v9;
  v9(v5);
  sub_25A50FA00();
  char v11 = v10;
  int v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v5, v2);
  if (v11)
  {

    goto LABEL_18;
  }
  sub_25A50F9D0();
  v36[1] = countAndFlagsBits;
  if (sub_25A50EEB0() == 95 && v13 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = sub_25A510370();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      goto LABEL_11;
    }
  }
  sub_25A50F9E0();
  swift_bridgeObjectRelease();
LABEL_11:
  sub_25A50F9D0();
  unint64_t v16 = sub_25A50ED80();
  unint64_t v17 = sub_25A50F9D0();
  if (v16 >> 14 < v17 >> 14)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v21 = sub_25A50EEE0();
  uint64_t v22 = MEMORY[0x26113CCD0](v21);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  sub_25A50F9C0();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  if (v26)
  {
    v37(v5, v38, v2);
    sub_25A50FA00();
    char v28 = v27;
    v12(v5, v2);
    if ((v28 & 1) == 0)
    {
      sub_25A50F9D0();
      if (sub_25A50EEB0() == 95 && v29 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v32 = sub_25A510370();
        swift_bridgeObjectRelease();
        if ((v32 & 1) == 0) {
          goto LABEL_22;
        }
      }
      sub_25A50F9E0();
      swift_bridgeObjectRelease();
LABEL_22:
      sub_25A50F9D0();
      unint64_t v33 = sub_25A50ED80();
      unint64_t v17 = sub_25A50F9D0();
      if (v33 >> 14 >= v17 >> 14)
      {
        uint64_t v34 = sub_25A50EEE0();
        uint64_t v30 = MEMORY[0x26113CCD0](v34);
        char v31 = v35;
        swift_bridgeObjectRelease();

        goto LABEL_19;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
  }

  swift_bridgeObjectRelease();
LABEL_18:
  uint64_t v22 = 0;
  uint64_t v24 = 0;
  uint64_t v30 = 0;
  char v31 = 0;
LABEL_19:
  unint64_t v17 = v22;
  uint64_t v18 = v24;
  uint64_t v19 = v30;
  uint64_t v20 = v31;
LABEL_26:
  result.value.name._object = v20;
  result.value.name._uint64_t countAndFlagsBits = v19;
  result.value.module._object = v18;
  result.value.module._uint64_t countAndFlagsBits = v17;
  return result;
}

void OrderedDictionary.subscript.getter()
{
}

uint64_t OrderedDictionary.subscript.setter(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = sub_25A50FA40();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  int v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v23 = a1;
  v18(v14, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v6) == 1)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19(v14, v7);
    OrderedDictionary.removeValue(forKey:)(a2, a3, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8))(a2);
    v19(v23, v7);
    return ((uint64_t (*)(char *, uint64_t))v19)(v11, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v6);
    OrderedDictionary.updateValue(_:forKey:)((uint64_t)v17, a2, a3, (uint64_t)v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8))(a2);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
    v21(v23, v7);
    v21(v11, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v6);
  }
}

uint64_t OrderedDictionary.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10 = sub_25A50FA40();
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v50 = (char *)&v34 - v12;
  uint64_t v52 = *(void *)(a2 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v49 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  id v48 = (char *)&v34 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v17 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v34 = *(void *)(v17 + 64);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v19 = (char *)&v34 - v18;
  MEMORY[0x26113D160](a1, TupleTypeMetadata2);
  uint64_t v51 = a4;
  *(void *)&long long v54 = sub_25A50E8E0();
  *((void *)&v54 + 1) = sub_25A50F120();
  uint64_t v47 = a2;
  uint64_t v45 = sub_25A50F1E0();
  uint64_t v46 = (char *)&v54 + 8;
  sub_25A50F0E0();
  if (MEMORY[0x26113D1B0](a1, TupleTypeMetadata2))
  {
    uint64_t v35 = a5;
    uint64_t v20 = 0;
    Swift::String v40 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v41 = TupleTypeMetadata2;
    id v43 = (void (**)(char *, uint64_t *, uint64_t))(v17 + 16);
    int v44 = v19;
    unsigned int v38 = (void (**)(char *, char *, uint64_t))(v52 + 16);
    uint64_t v39 = (void (**)(char *, char *, uint64_t))(v52 + 32);
    char v36 = (void (**)(char *, uint64_t))(v52 + 8);
    uint64_t v37 = a3 - 8;
    uint64_t v42 = a1;
    uint64_t v21 = v47;
    uint64_t v22 = v48;
    while (1)
    {
      char v23 = sub_25A50F140();
      sub_25A50F0D0();
      if (v23)
      {
        uint64_t v24 = v44;
        (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v44, a1+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(void *)(v17 + 72) * v20, TupleTypeMetadata2);
        uint64_t v25 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = sub_25A50FE20();
        uint64_t v24 = v44;
        if (v34 != 8)
        {
          __break(1u);
          return result;
        }
        uint64_t v53 = result;
        (*v43)(v44, &v53, TupleTypeMetadata2);
        swift_unknownObjectRelease();
        uint64_t v25 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          uint64_t result = swift_bridgeObjectRelease();
          a5 = v35;
          goto LABEL_13;
        }
      }
      uint64_t v52 = v25;
      (*v39)(v22, v24, v21);
      uint64_t v26 = *v38;
      char v27 = v49;
      (*v38)(v49, v22, v21);
      sub_25A50F180();
      v26(v27, v22, v21);
      uint64_t v28 = *(void *)(a3 - 8);
      uint64_t v29 = v17;
      uint64_t v30 = v50;
      char v31 = v40;
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v50, v40, a3);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, a3);
      sub_25A50E990();
      uint64_t v17 = v29;
      TupleTypeMetadata2 = v41;
      sub_25A50E9E0();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v31, a3);
      a1 = v42;
      (*v36)(v22, v21);
      uint64_t v32 = MEMORY[0x26113D1B0](a1, TupleTypeMetadata2);
      ++v20;
      if (v52 == v32) {
        goto LABEL_11;
      }
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
LABEL_13:
  *a5 = v54;
  return result;
}

uint64_t OrderedDictionary.updateValue(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = a4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v22 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  char v23 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_25A50FA40();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v22 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  sub_25A50E990();
  uint64_t v17 = v24;
  sub_25A50E8D0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v23, v17, v5);
    sub_25A50F1E0();
    sub_25A50F180();
    uint64_t v18 = 1;
    uint64_t v19 = v25;
  }
  else
  {
    uint64_t v20 = v25;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v25, v16, v9);
    uint64_t v18 = 0;
    uint64_t v19 = v20;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v19, v18, 1, v9);
}

uint64_t OrderedDictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v24 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  char v23 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = sub_25A50FA40();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A50E990();
  uint64_t v25 = a1;
  uint64_t v16 = v27;
  sub_25A50E8C0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    uint64_t v17 = 1;
    uint64_t v18 = v26;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v18, v17, 1, v7);
  }
  uint64_t v19 = v12;
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v20(v15, v19, v7);
  uint64_t v28 = *(void *)(v16 + 8);
  sub_25A50F1E0();
  swift_getWitnessTable();
  uint64_t result = sub_25A50F700();
  if ((v29 & 1) == 0)
  {
    uint64_t v22 = v23;
    sub_25A50F1A0();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v4);
    uint64_t v18 = v26;
    v20(v26, v15, v7);
    uint64_t v17 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v18, v17, 1, v7);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.removeAll()()
{
}

uint64_t OrderedDictionary.filter(_:)@<X0>(uint64_t (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t v51 = a4;
  uint64_t v6 = a3[3];
  uint64_t v7 = sub_25A50FA40();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v52 = (char *)&v51 - v8;
  uint64_t v9 = a3[2];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v59 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v78 = (char *)&v51 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v72 = (uint64_t)&v51 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v21 = *v4;
  uint64_t v20 = v4[1];
  uint64_t v66 = a3;
  OrderedDictionary.init()((uint64_t *)&v77);
  uint64_t v74 = v21;
  uint64_t v75 = v20;
  uint64_t v76 = 0;
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_bridgeObjectRetain();
  if (MEMORY[0x26113D1B0](v22, v9))
  {
    uint64_t v23 = 0;
    uint64_t v71 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v58 = v9 - 8;
    uint64_t v65 = v6;
    uint64_t v24 = v6 - 8;
    uint64_t v25 = v9;
    uint64_t v57 = v24;
    uint64_t v70 = (uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    os_log_type_t v55 = v19;
    uint64_t v69 = TupleTypeMetadata2;
    uint64_t v56 = v9;
    while (1)
    {
      uint64_t v36 = v72;
      uint64_t v37 = v72 + *(int *)(TupleTypeMetadata2 + 48);
      OrderedDictionary.subscript.getter(v72, v37, v23, v66);
      uint64_t v38 = *(void *)(v25 - 8);
      uint64_t v39 = v19;
      uint64_t v67 = *(void (**)(void))(v38 + 16);
      ((void (*)(char *, uint64_t, uint64_t))v67)(v19, v36, v25);
      uint64_t v40 = v65;
      uint64_t v41 = *(void *)(v65 - 8);
      uint64_t v42 = v37;
      uint64_t v43 = v69;
      unint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
      v64(v71, v42, v65);
      uint64_t v68 = *v70;
      uint64_t result = v68(v36, v43);
      if (__OFADD__(v76, 1)) {
        break;
      }
      ++v76;
      uint64_t v45 = v78;
      uint64_t v46 = &v78[*(int *)(v43 + 48)];
      uint64_t v63 = v38;
      uint64_t v47 = v56;
      (*(void (**)(char *, char *))(v38 + 32))(v78, v39);
      uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
      v62(v46, v71, v40);
      uint64_t v48 = v73;
      char v49 = v60(v45, v46);
      uint64_t v73 = v48;
      if (v48)
      {
        v68((uint64_t)v78, v69);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v49)
      {
        uint64_t v26 = v41;
        uint64_t v27 = v69;
        long long v54 = (char *)(v72 + *(int *)(v69 + 48));
        uint64_t v28 = v54;
        v67();
        char v29 = v28;
        char v31 = (void (*)(char *, char *, uint64_t))v64;
        uint64_t v30 = v65;
        v64(v29, (uint64_t)v46, v65);
        uint64_t v53 = &v59[*(int *)(v27 + 48)];
        v67();
        uint64_t v32 = v53;
        v31(v53, v46, v30);
        uint64_t v33 = v26;
        uint64_t v34 = v52;
        v62(v52, v32, v30);
        uint64_t v25 = v47;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v34, 0, 1, v30);
        OrderedDictionary.subscript.setter(v34, v72, (uint64_t)v66);
        TupleTypeMetadata2 = v27;
        v68((uint64_t)v78, v27);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v59, v25);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v54, v30);
      }
      else
      {
        uint64_t v50 = v69;
        v68((uint64_t)v78, v69);
        uint64_t v25 = v47;
        TupleTypeMetadata2 = v50;
      }
      uint64_t v23 = v76;
      uint64_t v35 = MEMORY[0x26113D1B0](v75, v25);
      uint64_t v19 = v55;
      if (v23 == v35) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v51 = v77;
  }
  return result;
}

uint64_t OrderedDictionary.append(contentsOf:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[3];
  uint64_t v55 = sub_25A50FA40();
  uint64_t v50 = *(void (***)(uint64_t, uint64_t))(v55 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v55);
  uint64_t v54 = (uint64_t)&v43 - v7;
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v53 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = a2;
  uint64_t v11 = a2[2];
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = v5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v47 = (uint64_t)&v43 - v17;
  uint64_t v18 = sub_25A50FA40();
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v60 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v43 - v21;
  uint64_t v23 = v8;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v46 = (void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  int v44 = (uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  uint64_t v26 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v27 + 32);
  uint64_t v61 = v24;
  uint64_t v62 = v25;
  uint64_t v63 = 0;
  uint64_t v51 = (void (**)(char *, char *, uint64_t))(v23 + 32);
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  char v49 = (void (**)(uint64_t, uint64_t))(v23 + 8);
  ++v50;
  uint64_t v48 = (void (**)(char *, uint64_t))(v12 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  uint64_t v43 = v22;
  while (1)
  {
    if (v28 == MEMORY[0x26113D1B0](v25, v11))
    {
      uint64_t v29 = 1;
      goto LABEL_6;
    }
    uint64_t v30 = v26;
    char v31 = v14;
    uint64_t v32 = v18;
    uint64_t v33 = v2;
    uint64_t v34 = v47;
    uint64_t v35 = v47 + *(int *)(TupleTypeMetadata2 + 48);
    OrderedDictionary.subscript.getter(v47, v35, v28, v59);
    uint64_t v36 = v60;
    (*v46)(v60, v34, v11);
    (*v45)(&v36[*(int *)(TupleTypeMetadata2 + 48)], v35, v58);
    uint64_t result = (*v44)(v34, TupleTypeMetadata2);
    if (__OFADD__(v63, 1)) {
      break;
    }
    uint64_t v29 = 0;
    ++v63;
    uint64_t v2 = v33;
    uint64_t v18 = v32;
    uint64_t v14 = v31;
    uint64_t v26 = v30;
    uint64_t v22 = v43;
LABEL_6:
    uint64_t v38 = v60;
    (*v26)(v60, v29, 1, TupleTypeMetadata2);
    (*v57)(v22, v38, v18);
    if ((*v56)(v22, 1, TupleTypeMetadata2) == 1)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v39 = &v22[*(int *)(TupleTypeMetadata2 + 48)];
    (*v52)(v14, v22, v11);
    uint64_t v40 = (uint64_t)v53;
    uint64_t v41 = v58;
    (*v51)(v53, v39, v58);
    uint64_t v42 = v54;
    OrderedDictionary.updateValue(_:forKey:)(v40, (uint64_t)v14, (uint64_t)v59, v54);
    (*v50)(v42, v55);
    (*v49)(v40, v41);
    (*v48)(v14, v11);
    uint64_t v25 = v62;
    uint64_t v28 = v63;
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.values.getter(void *a1)
{
  long long v12 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v9 = a1[2];
  uint64_t v10 = v3;
  uint64_t v11 = a1[4];
  void v8[2] = v9;
  void v8[3] = v11;
  void v8[4] = swift_getKeyPath();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = sub_25A39F5D4((void (*)(char *, char *))sub_25A3DB368, (uint64_t)v8, (uint64_t)a1, v3, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v5);
  swift_release();
  return v6;
}

uint64_t OrderedDictionary.keys.getter()
{
  sub_25A3DB38C();

  return swift_bridgeObjectRetain();
}

uint64_t OrderedDictionary.startIndex.getter()
{
  return 0;
}

void OrderedDictionary.endIndex.getter()
{
}

Swift::Int __swiftcall OrderedDictionary.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t OrderedDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v20 = a2;
  uint64_t v7 = a4[3];
  uint64_t v8 = sub_25A50FA40();
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = a4[2];
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v4;
  sub_25A50F210();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a1, v15, v12);
  MEMORY[0x26113C9D0](v15, v16, v12, v7, a4[4]);
  uint64_t v17 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v11, 1, v7);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v20, v11, v7);
  }
  return result;
}

uint64_t static OrderedDictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a2 + 8);
  if ((sub_25A50E9B0() & 1) == 0) {
    return 0;
  }
  uint64_t v9 = *(void *)(a5 + 8);

  return MEMORY[0x270F9DCF8](v7, v8, a3, v9);
}

uint64_t OrderedDictionary.init()@<X0>(uint64_t *a1@<X8>)
{
  swift_getTupleTypeMetadata2();
  sub_25A50F120();
  uint64_t v2 = sub_25A50E900();
  uint64_t result = sub_25A50F120();
  *a1 = v2;
  a1[1] = result;
  return result;
}

uint64_t OrderedDictionary.lazyValues.getter(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x26113CF80](&v8, a1, WitnessTable);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v3;
  v6[3] = v4;
  void v6[4] = KeyPath;
  sub_25A50FDF0();
  swift_getWitnessTable();
  sub_25A510170();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t OrderedDictionary.isEmpty.getter()
{
  return sub_25A50F6C0() & 1;
}

void OrderedDictionary.count.getter()
{
}

uint64_t OrderedDictionary.sort(using:)()
{
  return sub_25A50EB90();
}

double OrderedDictionary.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v60 = a5;
  uint64_t v47 = a6;
  uint64_t v48 = a1;
  uint64_t v9 = sub_25A50FA40();
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v56 = (char *)&v43 - v11;
  uint64_t v52 = *(void (***)(char *, char *, uint64_t))(a2 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v57 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v17 = sub_25A50FA40();
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v20 = (char *)&v43 - v19;
  uint64_t v21 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v44 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v58 = a2;
  uint64_t v26 = (char *)&v43 - v25;
  OrderedDictionary.init()((uint64_t *)&v61);
  uint64_t v45 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v48, a4);
  sub_25A50EEF0();
  uint64_t v46 = a4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_25A50FAF0();
  uint64_t v28 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  uint64_t v30 = v28 + 48;
  if (v29(v20, 1, TupleTypeMetadata2) != 1)
  {
    char v31 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
    v52 += 4;
    uint64_t v53 = v31;
    uint64_t v50 = (void (**)(char *, void, uint64_t, uint64_t))(v59 + 56);
    uint64_t v51 = (void (**)(char *, char *, uint64_t))(v59 + 16);
    v59 += 32;
    char v49 = (void (**)(char *, uint64_t))(v59 - 24);
    uint64_t v54 = v30;
    uint64_t v55 = TupleTypeMetadata2;
    do
    {
      v53(v15, &v20[*(int *)(TupleTypeMetadata2 + 48)], a3);
      uint64_t v32 = AssociatedTypeWitness;
      uint64_t v33 = v57;
      (*v52)(v57, v20, v58);
      uint64_t v34 = AssociatedConformanceWitness;
      uint64_t v35 = v26;
      uint64_t v36 = v20;
      uint64_t v37 = v15;
      uint64_t v38 = v56;
      (*v51)(v56, v37, a3);
      (*v50)(v38, 0, 1, a3);
      uint64_t v39 = type metadata accessor for OrderedDictionary();
      uint64_t v40 = v38;
      uint64_t v15 = v37;
      uint64_t v20 = v36;
      uint64_t v26 = v35;
      uint64_t AssociatedConformanceWitness = v34;
      uint64_t v41 = (uint64_t)v33;
      uint64_t AssociatedTypeWitness = v32;
      OrderedDictionary.subscript.setter(v40, v41, v39);
      (*v49)(v15, a3);
      sub_25A50FAF0();
      TupleTypeMetadata2 = v55;
    }
    while (v29(v20, 1, v55) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v48, v46);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v26, AssociatedTypeWitness);
  double result = *(double *)&v61;
  *uint64_t v47 = v61;
  return result;
}

double OrderedDictionary.init<A>(_:uniquingKeysWith:)@<D0>(uint64_t a1@<X0>, void (*a2)(char *, char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  uint64_t v93 = a7;
  uint64_t v75 = a3;
  uint64_t v74 = a2;
  uint64_t v69 = a1;
  uint64_t v68 = a8;
  uint64_t v73 = sub_25A50FA40();
  uint64_t v80 = *(char **)(v73 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v73);
  uint64_t v86 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  unint64_t v90 = (char *)&v62 - v14;
  uint64_t v70 = *(void (***)(char *, char *, uint64_t))(a5 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v72 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  unint64_t v64 = (char *)&v62 - v18;
  uint64_t v76 = *(void *)(a4 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v85 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v63 = (char *)&v62 - v21;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v23 = sub_25A50FA40();
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v62 - v25;
  uint64_t v27 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v65 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v32 = (char *)&v62 - v31;
  OrderedDictionary.init()((uint64_t *)&v94);
  uint64_t v66 = v27;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v34 = a4;
  uint64_t v35 = v63;
  v33(v29, v69, a6);
  sub_25A50EEF0();
  uint64_t v67 = a6;
  uint64_t v36 = v64;
  uint64_t v37 = v76;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v91 = v32;
  uint64_t v92 = AssociatedTypeWitness;
  uint64_t v89 = AssociatedConformanceWitness;
  sub_25A50FAF0();
  uint64_t v39 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  uint64_t v87 = v39 + 48;
  uint64_t v88 = v40;
  if (v40(v26, 1, TupleTypeMetadata2) != 1)
  {
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    uint64_t v42 = v37 + 32;
    uint64_t v84 = v43;
    uint64_t v82 = (unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 6);
    unint64_t v83 = v70 + 4;
    uint64_t v78 = (void (**)(char *, void, uint64_t, uint64_t))(v70 + 7);
    unint64_t v79 = (void (**)(char *, char *, uint64_t))(v42 - 16);
    long long v77 = (void (**)(char *, uint64_t))(v70 + 1);
    uint64_t v81 = (void (**)(char *, uint64_t))(v42 - 24);
    uint64_t v71 = (void (**)(char *, uint64_t))(v80 + 8);
    v70 += 2;
    uint64_t v80 = v26;
    uint64_t v76 = v42;
    do
    {
      uint64_t v53 = &v26[*(int *)(TupleTypeMetadata2 + 48)];
      v84(v35, v26, v34);
      uint64_t v54 = *v83;
      (*v83)(v36, v53, a5);
      uint64_t v55 = v94;
      uint64_t v56 = (void *)type metadata accessor for OrderedDictionary();
      uint64_t v57 = v55;
      uint64_t v58 = v90;
      MEMORY[0x26113C9D0](v35, v57, v56[2], v56[3], v56[4]);
      if ((*v82)(v58, 1, a5) == 1)
      {
        (*v71)(v58, v73);
        uint64_t v59 = v85;
        (*v79)(v85, v35, v34);
        uint64_t v60 = v86;
        (*v70)(v86, v36, a5);
        (*v78)(v60, 0, 1, a5);
        uint64_t v61 = (uint64_t)v59;
        uint64_t v26 = v80;
        OrderedDictionary.subscript.setter(v60, v61, (uint64_t)v56);
        (*v77)(v36, a5);
      }
      else
      {
        uint64_t v44 = v36;
        uint64_t v45 = v72;
        v54(v72, v58, a5);
        uint64_t v46 = TupleTypeMetadata2;
        uint64_t v47 = v35;
        uint64_t v48 = v85;
        (*v79)(v85, v47, v34);
        char v49 = v86;
        v74(v45, v44);
        (*v78)(v49, 0, 1, a5);
        uint64_t v50 = (uint64_t)v48;
        uint64_t v35 = v47;
        TupleTypeMetadata2 = v46;
        uint64_t v26 = v80;
        OrderedDictionary.subscript.setter(v49, v50, (uint64_t)v56);
        uint64_t v51 = *v77;
        uint64_t v52 = v45;
        uint64_t v36 = v44;
        (*v77)(v52, a5);
        v51(v44, a5);
      }
      (*v81)(v35, v34);
      sub_25A50FAF0();
    }
    while (v88(v26, 1, TupleTypeMetadata2) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v69, v67);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v91, v92);
  double result = *(double *)&v94;
  *uint64_t v68 = v94;
  return result;
}

uint64_t sub_25A3D9574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_25A50E920();
  swift_bridgeObjectRelease();
  uint64_t v9 = MEMORY[0x26113D160](a2, a3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v8 != v9) {
    uint64_t result = sub_25A403498();
  }
  *a4 = a1;
  a4[1] = a2;
  return result;
}

uint64_t sub_25A3D9650@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = a4;
  uint64_t v5 = *a2;
  uint64_t v6 = (void *)MEMORY[0x263F8EA20];
  uint64_t v7 = *(void *)(*a2 + *MEMORY[0x263F8EA20]);
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = *(int *)(v7 + 48);
  uint64_t v15 = (char *)&v24 + v14 - v12;
  uint64_t v16 = v11 + v14;
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t))(v18 + 16))((char *)&v24 - v12, v19);
  uint64_t v20 = *(void *)(*v6 + v5 + 8);
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v15, v16, v20);
  uint64_t v22 = &v10[*(int *)(v7 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v10, v13, a3);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v22, v15, v20);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v10, v7);
}

uint64_t sub_25A3D9880@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v25[0] = a2;
  v25[1] = a4;
  uint64_t v5 = *a2;
  uint64_t v6 = (void *)MEMORY[0x263F8EA20];
  uint64_t v7 = *(void *)(*a2 + *MEMORY[0x263F8EA20]);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)v25 - v13;
  uint64_t v15 = *(int *)(v7 + 48);
  uint64_t v16 = (char *)v25 + v15 - v13;
  uint64_t v17 = v12 + v15;
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t))(v19 + 16))((char *)v25 - v13, v20);
  uint64_t v21 = *(void *)(*v6 + v5 + 8);
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v16, v17, v21);
  uint64_t v23 = &v11[*(int *)(v7 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v11, v14, a3);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v23, v16, v21);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void sub_25A3D9AA4()
{
}

uint64_t sub_25A3D9B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + a3 - 24);
  uint64_t v7 = sub_25A50FA40();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v17 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v17 - v12, a3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  uint64_t v15 = type metadata accessor for OrderedDictionary();
  return OrderedDictionary.subscript.setter(v11, (uint64_t)v13, v15);
}

void (*OrderedDictionary.subscript.modify(void *a1, uint64_t a2, void *a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  *uint64_t v7 = a3;
  v7[1] = v3;
  uint64_t v8 = a3[3];
  uint64_t v9 = sub_25A50FA40();
  _OWORD v7[2] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v7[3] = v10;
  size_t v11 = *(void *)(v10 + 64);
  _OWORD v7[4] = malloc(v11);
  uint64_t v12 = malloc(v11);
  uint64_t v13 = a3[2];
  v7[5] = v12;
  v7[6] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14;
  v7[7] = v14;
  size_t v16 = *(void *)(v14 + 64);
  v7[8] = malloc(v16);
  v7[9] = malloc(v16);
  (*(void (**)(void))(v15 + 16))();
  MEMORY[0x26113C9D0](a2, *v3, v13, v8, a3[4]);
  return sub_25A3D9E1C;
}

{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;

  uint64_t v7 = malloc(0x48uLL);
  *a1 = v7;
  *uint64_t v7 = a3;
  v7[1] = v3;
  uint64_t v8 = a3[3];
  _OWORD v7[2] = a3[2];
  uint64_t v7[3] = v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  _OWORD v7[4] = TupleTypeMetadata2;
  uint64_t v10 = *(void *)(TupleTypeMetadata2 - 8);
  v7[5] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v7[6] = malloc(v11);
  uint64_t v12 = malloc(v11);
  v7[7] = v12;
  uint64_t v13 = *(int *)(TupleTypeMetadata2 + 48);
  *((_DWORD *)v7 + 16) = v13;
  OrderedDictionary.subscript.getter((uint64_t)v12, (uint64_t)v12 + v13, a2, a3);
  return sub_25A3DA3C8;
}

void sub_25A3D9E1C(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[8];
  uint64_t v4 = (void *)(*a1)[9];
  if (a2)
  {
    uint64_t v5 = v2[7];
    uint64_t v11 = v2[6];
    uint64_t v7 = (char *)v2[4];
    uint64_t v6 = (char *)v2[5];
    uint64_t v8 = v2[2];
    uint64_t v9 = v2[3];
    uint64_t v10 = *v2;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v11);
    OrderedDictionary.subscript.setter(v7, (uint64_t)v3, v10);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    uint64_t v7 = (char *)v2[4];
    uint64_t v6 = (char *)v2[5];
    OrderedDictionary.subscript.setter(v6, (uint64_t)v4, *v2);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);

  free(v2);
}

uint64_t sub_25A3D9F30@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 24);
  uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
  uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = TupleTypeMetadata2 - 8;
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = *(void *)(v6 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v10);
  size_t v16 = (char *)&v27 - v15;
  uint64_t v17 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v27 - v18;
  uint64_t v20 = *a2;
  long long v29 = *a1;
  uint64_t v21 = (void *)type metadata accessor for OrderedDictionary();
  OrderedDictionary.subscript.getter((uint64_t)v19, (uint64_t)v16, v20, v21);
  uint64_t v22 = &v12[*(int *)(v9 + 56)];
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v23(v12, v19, v7);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v24(v22, v16, v6);
  uint64_t v25 = v28 + *(int *)(v9 + 56);
  ((void (*)(uint64_t))v23)(v28);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v24)(v25, v22, v6);
}

uint64_t sub_25A3DA168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 24);
  uint64_t v6 = *(void *)(a4 + a3 - 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = *(int *)(v8 + 56);
  uint64_t v12 = (uint64_t)&v10[v11];
  uint64_t v13 = a1 + v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v10, a1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
  uint64_t v14 = type metadata accessor for OrderedDictionary();
  return sub_25A3DB3F0((uint64_t)v10, v12, v14);
}

uint64_t OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A3DB3F0(a1, a2, a4);
}

void sub_25A3DA3C8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((int *)*a1 + 16);
  uint64_t v4 = (void *)(*a1)[6];
  uint64_t v5 = (char *)(*a1)[7];
  if (a2)
  {
    uint64_t v6 = v2[4];
    uint64_t v7 = v2[5];
    uint64_t v8 = v2[3];
    uint64_t v9 = *v2;
    uint64_t v10 = &v5[v3];
    uint64_t v11 = (uint64_t)v4 + *(int *)(v6 + 48);
    (*(void (**)(uint64_t, char *))(*(void *)(v2[2] - 8) + 16))((*a1)[6], v5);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v11, v10, v8);
    sub_25A3DB3F0((uint64_t)v4, v11, v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  else
  {
    sub_25A3DB3F0((*a1)[7], (uint64_t)&v5[v3], *v2);
  }
  free(v5);
  free(v4);

  free(v2);
}

uint64_t OrderedDictionary.appending(contentsOf:)@<X0>(long long *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  *a3 = v6;
  a3[1] = v7;
  long long v9 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return OrderedDictionary.append(contentsOf:)((uint64_t *)&v9, a2);
}

uint64_t OrderedDictionary.subtract(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[3];
  uint64_t v6 = sub_25A50FA40();
  uint64_t v42 = *(void (***)(char *, uint64_t))(v6 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v37 - v8;
  uint64_t v50 = a2;
  uint64_t v10 = a2[2];
  uint64_t v41 = *(void (***)(char *, uint64_t))(v10 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v44 = *(unsigned int (***)(char *, uint64_t, uint64_t))(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v40 = (uint64_t)&v37 - v14;
  uint64_t v15 = sub_25A50FA40();
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v51 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = *a1;
  uint64_t v21 = a1[1];
  uint64_t v48 = v5 - 8;
  uint64_t v49 = v5;
  uint64_t v38 = (uint64_t (**)(uint64_t, uint64_t))(v44 + 1);
  uint64_t v39 = (void (**)(char *, uint64_t, uint64_t))(v41 + 2);
  uint64_t v45 = (void (**)(char *, char *, uint64_t))(v22 + 32);
  uint64_t v46 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 7);
  uint64_t v52 = v20;
  uint64_t v53 = v21;
  uint64_t v54 = 0;
  uint64_t v43 = (void (**)(char *, char *, uint64_t))(v41 + 4);
  v44 += 6;
  ++v41;
  ++v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = 0;
  uint64_t v47 = TupleTypeMetadata2;
  uint64_t v37 = v19;
  while (1)
  {
    if (v23 == MEMORY[0x26113D1B0](v21, v10))
    {
      uint64_t v24 = 1;
      goto LABEL_6;
    }
    uint64_t v25 = v12;
    uint64_t v26 = v9;
    uint64_t v27 = v6;
    uint64_t v28 = v2;
    uint64_t v29 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v30 = v40;
    uint64_t v31 = v40 + v29;
    OrderedDictionary.subscript.getter(v40, v40 + v29, v23, v50);
    uint64_t v32 = v51;
    (*v39)(v51, v30, v10);
    (*(void (**)(char *, uint64_t))(*(void *)(v49 - 8) + 16))(&v32[*(int *)(v47 + 48)], v31);
    uint64_t v33 = v30;
    TupleTypeMetadata2 = v47;
    uint64_t result = (*v38)(v33, v47);
    if (__OFADD__(v54, 1)) {
      break;
    }
    uint64_t v24 = 0;
    ++v54;
    uint64_t v2 = v28;
    uint64_t v6 = v27;
    long long v9 = v26;
    uint64_t v12 = v25;
    uint64_t v19 = v37;
LABEL_6:
    uint64_t v35 = v51;
    (*v46)(v51, v24, 1, TupleTypeMetadata2);
    (*v45)(v19, v35, v15);
    if ((*v44)(v19, 1, TupleTypeMetadata2) == 1)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v36 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    (*v43)(v12, v19, v10);
    OrderedDictionary.removeValue(forKey:)((uint64_t)v12, (uint64_t)v50, v9);
    (*v42)(v9, v6);
    (*v41)(v12, v10);
    (*(void (**)(char *))(*(void *)(v49 - 8) + 8))(v36);
    uint64_t v21 = v53;
    uint64_t v23 = v54;
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.union<A>(groupsIn:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v51 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v56 = v11;
  uint64_t v12 = v11[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v48 = (uint64_t)&v42 - v15;
  uint64_t v53 = sub_25A50FA40();
  uint64_t v16 = MEMORY[0x270FA5388](v53);
  uint64_t v55 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v42 - v18;
  uint64_t v20 = *a1;
  uint64_t v21 = a1[1];
  uint64_t v22 = v3[1];
  *(void *)&long long v62 = *v3;
  *((void *)&v62 + 1) = v22;
  uint64_t v23 = v6;
  uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v47 = (uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
  uint64_t v52 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  uint64_t v59 = v20;
  uint64_t v60 = v21;
  uint64_t v61 = 0;
  uint64_t v25 = (void (**)(char *, char *, uint64_t))(v24 + 32);
  uint64_t v26 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  uint64_t v49 = (void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v50 = (void (**)(char *, char *, uint64_t))(v23 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v27 = 0;
  uint64_t v45 = v25;
  uint64_t v46 = v19;
  uint64_t v44 = v26;
  while (1)
  {
    if (v27 == MEMORY[0x26113D1B0](v21, v5))
    {
      uint64_t v29 = 1;
      goto LABEL_7;
    }
    uint64_t v30 = v5;
    uint64_t v31 = TupleTypeMetadata2;
    uint64_t v32 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v33 = v48;
    uint64_t v34 = (void *)(v48 + v32);
    OrderedDictionary.subscript.getter(v48, v48 + v32, v27, v56);
    uint64_t v35 = v55;
    (*v54)(v55, v33, v30);
    *(void *)&v35[*(int *)(v31 + 48)] = *v34;
    uint64_t v36 = *v47;
    swift_bridgeObjectRetain();
    uint64_t v37 = v33;
    TupleTypeMetadata2 = v31;
    uint64_t result = v36(v37, v31);
    if (__OFADD__(v61, 1)) {
      break;
    }
    uint64_t v29 = 0;
    ++v61;
    uint64_t v5 = v30;
    uint64_t v25 = v45;
    uint64_t v19 = v46;
    uint64_t v26 = v44;
LABEL_7:
    uint64_t v39 = v55;
    (*v52)(v55, v29, 1, TupleTypeMetadata2);
    (*v25)(v19, v39, v53);
    if ((*v26)(v19, 1, TupleTypeMetadata2) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v43 = v62;
      return result;
    }
    uint64_t v40 = *(void *)&v19[*(int *)(TupleTypeMetadata2 + 48)];
    (*v50)(v10, v19, v5);
    MEMORY[0x26113C9D0](&v57, v10, v62, v5, v12, v56[4]);
    uint64_t v41 = v57;
    if (!v57) {
      uint64_t v41 = sub_25A50F120();
    }
    uint64_t v57 = v40;
    uint64_t v58 = v41;
    swift_getWitnessTable();
    sub_25A50F170();
    uint64_t v28 = (uint64_t)v51;
    (*v54)(v51, (uint64_t)v10, v5);
    uint64_t v57 = v58;
    OrderedDictionary.subscript.setter((char *)&v57, v28, (uint64_t)v56);
    (*v49)(v10, v5);
    uint64_t v21 = v60;
    uint64_t v27 = v61;
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.mapValues<A>(_:)@<X0>(uint64_t a1@<X2>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = sub_25A50E970();
  if (!v3)
  {
    uint64_t v8 = result;
    swift_bridgeObjectRetain();
    return sub_25A3D9574(v8, v5, v6, a2);
  }
  return result;
}

uint64_t sub_25A3DAF98@<X0>(uint64_t *a1@<X8>)
{
  return OrderedDictionary.init()(a1);
}

void (*sub_25A3DAFB0(void *a1, uint64_t a2, void *a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  void v6[4] = OrderedDictionary.subscript.modify(v6, a2, a3);
  return sub_25A3C2658;
}

void sub_25A3DB020()
{
}

uint64_t sub_25A3DB038(uint64_t result)
{
  *BOOL v1 = result;
  return result;
}

void (*sub_25A3DB048(uint64_t **a1, uint64_t *a2, void *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  uint64_t v8 = a3[2];
  uint64_t v7 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  void v6[4] = TupleTypeMetadata2;
  uint64_t v10 = *(void *)(TupleTypeMetadata2 - 8);
  v6[5] = v10;
  uint64_t v11 = (char *)malloc(*(void *)(v10 + 64));
  v6[6] = (uint64_t)v11;
  uint64_t v12 = sub_25A3DB1B4(v6, *a2, a3);
  uint64_t v14 = v13;
  v6[7] = (uint64_t)v12;
  (*(void (**)(char *))(*(void *)(v8 - 8) + 16))(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(&v11[*(int *)(TupleTypeMetadata2 + 48)], v14, v7);
  return sub_25A3C2978;
}

void (*sub_25A3DB1B4(uint64_t *a1, uint64_t a2, void *a3))(void *a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v7 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  OrderedDictionary.subscript.getter((uint64_t)v8, (uint64_t)v8 + *(int *)(TupleTypeMetadata2 + 48), a2, a3);
  return sub_25A3AC494;
}

uint64_t sub_25A3DB29C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  return OrderedDictionary.init(dictionaryLiteral:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_25A3DB2AC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_25A3DB300(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_25A3DB354(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static OrderedDictionary<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_25A3DB368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3D9650(a1, *(void **)(v2 + 32), *(void *)(v2 + 16), a2);
}

uint64_t sub_25A3DB38C()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_25A3DB394()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A3DB3CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3D9880(a1, *(uint64_t **)(v2 + 32), *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for OrderedDictionary()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3DB3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v17 = sub_25A50FA40();
  uint64_t v7 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))((char *)&v17 - v13, a1, v10);
  uint64_t v15 = (uint64_t)&v14[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v15, a2, v6);
  OrderedDictionary.updateValue(_:forKey:)(v15, (uint64_t)v14, a3, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, TupleTypeMetadata2);
}

uint64_t sub_25A3DB604(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_25A3DB664()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A3DB688()
{
  return 24;
}

__n128 sub_25A3DB694(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_25A3DB6B0()
{
  return 24;
}

__n128 sub_25A3DB6BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_25A3DB6D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (qword_26A4154C0 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)(qword_26A418748 + 16);
  uint64_t v11 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v11);
  sub_25A42091C(v10, &v14);
  os_unfair_lock_unlock(v11);
  uint64_t v12 = v14;
  uint64_t result = swift_release();
  *a5 = v12;
  a5[1] = a1;
  a5[2] = a2;
  a5[3] = a3;
  a5[4] = a4;
  return result;
}

uint64_t ManagedResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  ManagedResource.init(_:)(a1);
  return v2;
}

uint64_t ManagedResource.init(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  type metadata accessor for ManagedResource.Request();
  uint64_t v5 = sub_25A50E860();
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v1 + *(void *)(*(void *)v1 + 88), a1, v4);
  return v1;
}

uint64_t ManagedResource.requestUnderlying(receive:revoke:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v12 = *(void *)(*(void *)v6 + 80);
  swift_retain();
  swift_retain();
  sub_25A3DB6D0(a1, a2, a3, a4, v23);
  if (sub_25A3DBA7C(v6, (uint64_t)v23)) {
    (*((void (**)(uint64_t))&v23[0] + 1))(v6 + *(void *)(*(void *)v6 + 88));
  }
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  *(void *)(v14 + 24) = v13;
  long long v15 = v23[1];
  *(_OWORD *)(v14 + 32) = v23[0];
  *(_OWORD *)(v14 + 48) = v15;
  *(void *)(v14 + 64) = v24;
  *(void *)&long long v17 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/ManagedResource.swift";
  *((void *)&v17 + 1) = 127;
  char v18 = 2;
  long long v19 = xmmword_25A5143D0;
  uint64_t v20 = "requestUnderlying(receive:revoke:)";
  uint64_t v21 = 34;
  char v22 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t result = sub_25A3B7704(&v17, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  *a5 = sub_25A3DBCBC;
  a5[1] = (uint64_t (*)())v14;
  a5[2] = (uint64_t (*)())result;
  return result;
}

BOOL sub_25A3DBA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  long long v8 = *(_OWORD *)(a2 + 24);
  long long v9 = *(_OWORD *)(a2 + 8);
  uint64_t v4 = a1 + *(void *)(*(void *)a1 + 96);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5)
  {
    swift_beginAccess();
    sub_25A3DC7E4(a2);
    type metadata accessor for ManagedResource.Request();
    sub_25A50F1E0();
    sub_25A50F180();
    swift_endAccess();
  }
  else
  {
    uint64_t v6 = *(void *)v4;
    *(void *)uint64_t v4 = v3;
    *(_OWORD *)(v4 + 8) = v9;
    *(_OWORD *)(v4 + 24) = v8;
    sub_25A3DC7E4(a2);
    sub_25A3DC174(v6, 0);
  }
  return v5 == 0;
}

uint64_t sub_25A3DBBD4()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A3DBC0C(uint64_t a1, uint64_t *a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = *a2;
    sub_25A3DBCC8(&v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_25A3DBC74()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25A3DBCBC()
{
  return sub_25A3DBC0C(*(void *)(v0 + 24), (uint64_t *)(v0 + 32));
}

uint64_t sub_25A3DBCC8(uint64_t *a1)
{
  sub_25A3DBE18(&v11, v10, v1, *a1);
  uint64_t v3 = v11;
  uint64_t v2 = v12;
  uint64_t v4 = v13;
  uint64_t v5 = (void (*)(uint64_t))v10[1];
  uint64_t v9 = v10[0];
  if (v12)
  {
    uint64_t v6 = swift_retain();
    v4(v6);
    swift_release();
  }
  if (v5)
  {
    uint64_t v7 = v1 + *(void *)(*(void *)v1 + 88);
    swift_retain();
    v5(v7);
    sub_25A3DC174(v3, v2);
    sub_25A3DC174(v9, (uint64_t)v5);
    return swift_release();
  }
  else
  {
    return sub_25A3DC174(v3, v2);
  }
}

uint64_t sub_25A3DBE18(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t *)(a3 + *(void *)(*(void *)a3 + 96));
  uint64_t v8 = swift_beginAccess();
  uint64_t v9 = v7[1];
  if (v9) {
    BOOL v10 = *v7 == a4;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v26 = v7[3];
    uint64_t v24 = v7[4];
    uint64_t v25 = v7[2];
    swift_beginAccess();
    type metadata accessor for ManagedResource.Request();
    uint64_t v17 = sub_25A50F1E0();
    swift_retain();
    swift_retain();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v19 = swift_getWitnessTable();
    MEMORY[0x26113D7B0](v27, v17, WitnessTable, v19);
    uint64_t v20 = v28;
    uint64_t v21 = *v7;
    uint64_t v22 = v7[1];
    long long v23 = v27[1];
    *(_OWORD *)uint64_t v7 = v27[0];
    *((_OWORD *)v7 + 1) = v23;
    _OWORD v7[4] = v20;
    swift_endAccess();
    sub_25A3DC174(v21, v22);
    *a1 = a4;
    a1[1] = v9;
    a1[2] = v25;
    a1[3] = v26;
    a1[4] = v24;
    uint64_t v12 = *v7;
    uint64_t v13 = v7[1];
    uint64_t v14 = v7[2];
    uint64_t v15 = v7[3];
    uint64_t v16 = v7[4];
    uint64_t result = sub_25A3DC7A0(v12, v13);
  }
  else
  {
    *(void *)&v27[0] = v7[5];
    MEMORY[0x270FA5388](v8);
    type metadata accessor for ManagedResource.Request();
    sub_25A50F1E0();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    v7[5] = sub_25A50FEB0();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    a1[4] = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  *a2 = v12;
  a2[1] = v13;
  a2[2] = v14;
  a2[3] = v15;
  a2[4] = v16;
  return result;
}

uint64_t ManagedResource.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  sub_25A3DC174(*(void *)(v0 + *(void *)(*(void *)v0 + 96)), *(void *)(v0 + *(void *)(*(void *)v0 + 96) + 8));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_25A3DC174(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t ManagedResource.__deallocating_deinit()
{
  ManagedResource.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_25A3DC210()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ManagedResource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ManagedResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ManagedResource);
}

uint64_t dispatch thunk of ManagedResource.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_25A3DC2F0(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_release();
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A3DC33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = v5;
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_25A3DC3BC(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (!a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      uint64_t v7 = a2[2];
      a1[1] = a2[1];
      a1[2] = v7;
      uint64_t v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    long long v10 = *(_OWORD *)a2;
    long long v11 = *((_OWORD *)a2 + 1);
    a1[4] = a2[4];
    *(_OWORD *)a1 = v10;
    *((_OWORD *)a1 + 1) = v11;
    goto LABEL_8;
  }
  if (!v4)
  {
    uint64_t v9 = type metadata accessor for ManagedResource.Request();
    (*(void (**)(void *, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
    goto LABEL_7;
  }
  *a1 = *a2;
  uint64_t v5 = a2[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[4];
  a1[3] = a2[3];
  a1[4] = v6;
  swift_retain();
  swift_release();
LABEL_8:
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ManagedResource.Request()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3DC4E0(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    uint64_t v6 = type metadata accessor for ManagedResource.Request();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
LABEL_6:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25A3DC5A0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_25A3DC5E8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ManagedResource.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3DC64C()
{
  swift_release();

  return swift_release();
}

uint64_t sub_25A3DC688(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_25A3DC6D4(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_25A3DC73C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

BOOL sub_25A3DC78C(void *a1)
{
  return *a1 != *(void *)(v1 + 24);
}

uint64_t sub_25A3DC7A0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_25A3DC7E4(uint64_t a1)
{
  return a1;
}

uint64_t PredicatedWrapper.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v35 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = a3;
  uint64_t v36 = a2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  long long v11 = (char *)&v31 - v10;
  uint64_t v12 = type metadata accessor for Predicated();
  uint64_t v13 = sub_25A50FA40();
  uint64_t v31 = *(void *)(v13 - 8);
  uint64_t v32 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v31 - v15;
  uint64_t v17 = *(void *)(v12 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v14);
  uint64_t v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v31 - v21;
  long long v23 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v34 = v8;
  v23(v11, v37, v8);
  Predicated.init(_:)((uint64_t)v11, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v12) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v37, v34);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v32);
    uint64_t v24 = 1;
    uint64_t v25 = v35;
    uint64_t v26 = v36;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v16, v12);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v12);
    uint64_t v27 = v35;
    uint64_t v28 = v20;
    uint64_t v29 = v36;
    (*(void (**)(char *, uint64_t))(v33 + 24))(v28, v36);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v37, v34);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v12);
    uint64_t v24 = 0;
    uint64_t v26 = v29;
    uint64_t v25 = v27;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, v24, 1);
}

uint64_t PredicatedWrapper.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Predicated();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a3, v9, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t PredicatedWrapper.proof.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Predicated();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  uint64_t v10 = &v9[*(int *)(v6 + 36)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a3, v10, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t dispatch thunk of PredicatedWrapper.init(predicated:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PredicatedWrapper.predicated.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t OS_dispatch_queue.runAsync<A>(work:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  return MEMORY[0x270FA2498](sub_25A3DCF44, 0, 0);
}

uint64_t sub_25A3DCF44()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  long long v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_25A3DD03C;
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 16);
  return MEMORY[0x270FA2360](v5, 0, 0, 0x636E7973416E7572, 0xEF293A6B726F7728, sub_25A3DD53C, v1, v4);
}

uint64_t sub_25A3DD03C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25A3DD178, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_25A3DD178()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A3DD1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v26 = a2;
  uint64_t v7 = sub_25A50E750();
  uint64_t v25 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_25A50E790();
  uint64_t v10 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v13 = sub_25A50F260();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v22 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v22 - v15, a1, v13);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  uint64_t v19 = v22;
  *((void *)v18 + 2) = a5;
  *((void *)v18 + 3) = v19;
  *((void *)v18 + 4) = v23;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v18[v17], v16, v13);
  aBlock[4] = sub_25A3DDAAC;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25A3BE05C;
  void aBlock[3] = &block_descriptor_2;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  sub_25A50E770();
  uint64_t v27 = MEMORY[0x263F8EE78];
  sub_25A3BE558();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
  sub_25A3DDB54();
  sub_25A50FC90();
  MEMORY[0x26113D8E0](0, v12, v9, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v24);
  return swift_release();
}

uint64_t sub_25A3DD53C(uint64_t a1)
{
  return sub_25A3DD1DC(a1, v1[3], v1[4], v1[5], v1[2]);
}

uint64_t sub_25A3DD548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void (*)(void))MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)v13 - v10;
  v9();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v11, a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A50F260();
  sub_25A50F250();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, a4);
}

uint64_t static OS_dispatch_queue.runAsync<A>(qos:work:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  return MEMORY[0x270FA2498](sub_25A3DD700, 0, 0);
}

uint64_t sub_25A3DD700()
{
  sub_25A3DD980();
  uint64_t v1 = sub_25A50F900();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *(void *)uint64_t v2 = v0;
  *(void *)(v2 + 8) = sub_25A3DD7E0;
  uint64_t v3 = *(void *)(v0 + 16);
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 40) = *(void *)(v0 + 48);
  *(void *)(v2 + 48) = v1;
  *(_OWORD *)(v2 + 24) = v4;
  *(void *)(v2 + 16) = v3;
  return MEMORY[0x270FA2498](sub_25A3DCF44, 0, 0);
}

uint64_t sub_25A3DD7E0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25A3DD91C, 0, 0);
  }
  else
  {

    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_25A3DD91C()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_25A3DD980()
{
  unint64_t result = qword_26A417448;
  if (!qword_26A417448)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26A417448);
  }
  return result;
}

uint64_t sub_25A3DD9C0()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v1 = sub_25A50F260();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A3DDAAC()
{
  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v2 = *(void *)(sub_25A50F260() - 8);
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (uint64_t)v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return sub_25A3DD548(v3, v4, v5, v1);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t sub_25A3DDB54()
{
  unint64_t result = qword_26A4168E0[0];
  if (!qword_26A4168E0[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A4168D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A4168E0);
  }
  return result;
}

uint64_t CommandLineToolInvocation.launchPath.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineToolInvocation.launchArguments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineToolInvocation.environment.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineToolInvocation.workingPath.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineToolInvocation.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

void *CommandLineToolInvocation.log.getter()
{
  uint64_t v1 = *(void **)(v0 + 64);
  id v2 = v1;
  return v1;
}

uint64_t CommandLineToolInvocation.printToStandardOutput.getter()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t CommandLineToolInvocation.failedWhenRunningHandler.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_retain();
  return v1;
}

uint64_t CommandLineToolInvocation.failedToLaunchError.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_retain();
  return v1;
}

__n128 CommandLineToolInvocation.init(launchPath:launchArguments:environment:workingPath:name:log:printToStandardOutput:failedWhenRunningHandler:failedToLaunchError:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, unint64_t a10, unsigned __int8 a11, __n128 a12, unint64_t a13, unint64_t a14)
{
  __n128 result = a12;
  a9->n128_u64[0] = a1;
  a9->n128_u64[1] = a2;
  a9[1].n128_u64[0] = a3;
  a9[1].n128_u64[1] = a4;
  a9[2].n128_u64[0] = a5;
  a9[2].n128_u64[1] = a6;
  a9[3].n128_u64[0] = a7;
  a9[3].n128_u64[1] = a8;
  a9[4].n128_u64[0] = a10;
  a9[4].n128_u8[8] = a11;
  a9[5] = a12;
  a9[6].n128_u64[0] = a13;
  a9[6].n128_u64[1] = a14;
  return result;
}

uint64_t CommandLineToolInvocation.commandLineDescription.getter()
{
  uint64_t v1 = v0[2];
  uint64_t v12 = *v0;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  uint64_t v2 = v12;
  int64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_25A39A068(0, v3, 0);
    sub_25A39BE4C();
    uint64_t v4 = (unint64_t *)(v1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      unint64_t v5 = *v4;
      swift_bridgeObjectRetain();
      if (sub_25A50FB90())
      {
        sub_25A50EDA0();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
        uint64_t v6 = 34;
        unint64_t v5 = 0xE100000000000000;
      }
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      if (v8 >= v7 >> 1) {
        sub_25A39A068(v7 > 1, v8 + 1, 1);
      }
      v4 += 2;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    uint64_t v2 = v12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3BE718(qword_26A415DC8, &qword_26A415DC0);
  sub_25A50EAD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t CommandLineToolInvocation.toolName.getter()
{
  uint64_t v0 = (void *)sub_25A50EBF0();
  id v1 = objc_msgSend(v0, sel_lastPathComponent);

  uint64_t v2 = sub_25A50EC20();
  return v2;
}

uint64_t CommandLineToolInvocation.run()()
{
  sub_25A50EC80();
  *(void *)(v1 + 200) = swift_task_alloc();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C38);
  *(void *)(v1 + 208) = v2;
  *(void *)(v1 + 216) = *(void *)(v2 - 8);
  *(void *)(v1 + 224) = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417458);
  *(void *)(v1 + 232) = v3;
  *(void *)(v1 + 240) = *(void *)(v3 - 8);
  *(void *)(v1 + 248) = swift_task_alloc();
  uint64_t v4 = sub_25A50E320();
  *(void *)(v1 + 256) = v4;
  *(void *)(v1 + 264) = *(void *)(v4 - 8);
  *(void *)(v1 + 272) = swift_task_alloc();
  long long v5 = v0[5];
  *(_OWORD *)(v1 + 80) = v0[4];
  *(_OWORD *)(v1 + 96) = v5;
  *(_OWORD *)(v1 + 112) = v0[6];
  long long v6 = v0[1];
  *(_OWORD *)(v1 + 16) = *v0;
  *(_OWORD *)(v1 + 32) = v6;
  long long v7 = v0[3];
  *(_OWORD *)(v1 + 48) = v0[2];
  *(_OWORD *)(v1 + 64) = v7;
  return MEMORY[0x270FA2498](sub_25A3DE160, 0, 0);
}

uint64_t sub_25A3DE160()
{
  uint64_t v42 = v0;
  if (qword_26A4154C0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)(qword_26A418748 + 16);
  uint64_t v2 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v2);
  sub_25A42091C(v1, &v40);
  os_unfair_lock_unlock(v2);
  uint64_t v3 = (uint64_t)(v0 + 16);
  uint64_t v4 = v40;
  v0[35] = v40;
  swift_release();
  long long v5 = v0[10];
  v0[36] = v5;
  if (v5)
  {
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    sub_25A3DF830((uint64_t)(v0 + 2));
    sub_25A50FDB0();
    swift_bridgeObjectRelease();
    uint64_t v40 = 543451483;
    unint64_t v41 = 0xE400000000000000;
    v0[24] = v4;
    sub_25A5102B0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    sub_25A3DF830((uint64_t)(v0 + 2));
    long long v6 = (void *)sub_25A50EBF0();
    id v7 = objc_msgSend(v6, sel_lastPathComponent);

    sub_25A50EC20();
    sub_25A3DF8C0((uint64_t)(v0 + 2));
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    unint64_t v8 = v40;
    unint64_t v9 = v41;
    uint64_t v40 = 543451483;
    unint64_t v41 = 0xE400000000000000;
    v0[21] = v4;
    sub_25A5102B0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    uint64_t v10 = v40;
    unint64_t v11 = v41;
    os_log_type_t v12 = sub_25A50F810();
    uint64_t v13 = v10;
    uint64_t v3 = (uint64_t)(v0 + 16);
    sub_25A48B804(v8, v9, v13, v11, v12, v5);
    sub_25A3DF8C0((uint64_t)(v0 + 2));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08B50]), sel_init);
  v0[37] = v14;
  sub_25A3DF70C((uint64_t)(v0 + 6), (uint64_t)(v0 + 18));
  sub_25A3DF70C((uint64_t)(v0 + 18), v3);
  if (v0[17])
  {
    uint64_t v16 = v0[33];
    uint64_t v15 = v0[34];
    uint64_t v17 = v0[32];
    sub_25A50E290();
    uint64_t v18 = (void *)sub_25A50E2B0();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    objc_msgSend(v14, sel_setCurrentDirectoryURL_, v18);
  }
  uint64_t v20 = v0[33];
  uint64_t v19 = v0[34];
  uint64_t v21 = v0[32];
  uint64_t v22 = v0[3];
  v0[38] = v0[2];
  v0[39] = v22;
  sub_25A50E290();
  uint64_t v23 = (void *)sub_25A50E2B0();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  objc_msgSend(v14, sel_setExecutableURL_, v23);

  uint64_t v24 = (void *)sub_25A50F080();
  objc_msgSend(v14, sel_setArguments_, v24);

  uint64_t v25 = (void *)sub_25A50E890();
  objc_msgSend(v14, sel_setEnvironment_, v25);

  uint64_t v26 = (uint64_t)objc_msgSend(v14, sel_isRunning);
  if (v26)
  {
    __break(1u);
  }
  else
  {
    uint64_t v35 = v0[27];
    uint64_t v34 = v0[28];
    uint64_t v36 = v0[26];
    *(void *)(swift_task_alloc() + 16) = v14;
    (*(void (**)(uint64_t, void, uint64_t))(v35 + 104))(v34, *MEMORY[0x263F8F580], v36);
    sub_25A50F380();
    swift_task_dealloc();
    uint64_t v37 = swift_task_alloc();
    v0[40] = v37;
    *(void *)(v37 + 16) = v14;
    *(unsigned char *)(v37 + 24) = 1;
    uint64_t v38 = swift_task_alloc();
    v0[41] = v38;
    *(unsigned char *)(v38 + 16) = 1;
    *(void *)(v38 + 24) = v14;
    uint64_t v26 = swift_task_alloc();
    v0[42] = v26;
    *(void *)uint64_t v26 = v0;
    *(void *)(v26 + 8) = sub_25A3DE6BC;
    uint64_t v33 = MEMORY[0x263F8EE60] + 8;
    uint64_t v27 = &unk_26A416C50;
    uint64_t v29 = sub_25A3DF824;
    uint64_t v28 = v37;
    uint64_t v30 = v38;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }
  return MEMORY[0x270FA2338](v26, v27, v28, v29, v30, v31, v32, v33);
}

uint64_t sub_25A3DE6BC()
{
  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_25A3DF030;
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = sub_25A3DE7E0;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A3DE7E0()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_26A417460 + dword_26A417460);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_25A3DE884;
  return v3();
}

uint64_t sub_25A3DE884(uint64_t a1)
{
  *(void *)(*(void *)v1 + 360) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A3DE984, 0, 0);
}

uint64_t sub_25A3DE984()
{
  uint64_t v54 = v0;
  uint64_t v1 = sub_25A3C8414(*(void *)(v0 + 360));
  unint64_t v3 = v2;
  swift_bridgeObjectRelease();
  sub_25A50EC60();
  uint64_t v50 = v1;
  unint64_t v51 = v3;
  uint64_t v4 = sub_25A50EC40();
  if (v5) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 0xE000000000000000;
  }
  uint64_t v8 = MEMORY[0x263F8D310];
  if (*(unsigned char *)(v0 + 88))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417478);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_25A5119F0;
    *(void *)(v9 + 56) = v8;
    *(void *)(v9 + 32) = v6;
    *(void *)(v9 + 40) = v7;
    swift_bridgeObjectRetain();
    sub_25A5104B0();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = *(void **)(v0 + 288);
  uint64_t v52 = v6;
  if (v10)
  {
    unint64_t v11 = *(void **)(v0 + 296);
    uint64_t v12 = *(void *)(v0 + 280);
    id v13 = v10;
    sub_25A50F820();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_25A5144E0;
    *(void *)(v0 + 184) = v12;
    uint64_t v15 = sub_25A5102B0();
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = v8;
    unint64_t v18 = sub_25A3DF94C();
    *(void *)(v14 + 64) = v18;
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    unsigned int v19 = objc_msgSend(v11, sel_processIdentifier);
    uint64_t v20 = MEMORY[0x263F8E548];
    uint64_t v21 = MEMORY[0x263F8E5B0];
    *(void *)(v14 + 96) = MEMORY[0x263F8E548];
    *(void *)(v14 + 104) = v21;
    *(_DWORD *)(v14 + 72) = v19;
    uint64_t v23 = *(void *)(v0 + 64);
    uint64_t v22 = *(void *)(v0 + 72);
    *(void *)(v14 + 136) = v8;
    *(void *)(v14 + 144) = v18;
    *(void *)(v14 + 112) = v23;
    *(void *)(v14 + 120) = v22;
    swift_bridgeObjectRetain();
    unsigned int v24 = [v11 (SEL)0x2654799BALL];
    *(void *)(v14 + 176) = v20;
    *(void *)(v14 + 184) = v21;
    *(_DWORD *)(v14 + 152) = v24;
    sub_25A50E540();
    swift_bridgeObjectRelease();
  }
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(v0 + 296), sel_isRunning);
  if (result)
  {
    __break(1u);
  }
  else if (objc_msgSend(*(id *)(v0 + 296), sel_terminationReason) == (id)1 {
         && !objc_msgSend(*(id *)(v0 + 296), sel_terminationStatus))
  }
  {
    uint64_t v39 = *(void *)(v0 + 288);
    if (v39)
    {
      uint64_t v40 = *(void *)(v0 + 280);
      uint64_t v41 = *(void *)(v0 + 240);
      uint64_t v49 = *(void *)(v0 + 248);
      uint64_t v47 = *(void **)(v0 + 296);
      uint64_t v48 = *(void *)(v0 + 232);
      swift_bridgeObjectRetain();
      sub_25A50FDB0();
      swift_bridgeObjectRelease();
      *(void *)&v53[0] = 543451483;
      *((void *)&v53[0] + 1) = 0xE400000000000000;
      *(void *)(v0 + 176) = v40;
      sub_25A5102B0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      sub_25A3DF830(v0 + 16);
      uint64_t v42 = (void *)sub_25A50EBF0();
      id v43 = objc_msgSend(v42, sel_lastPathComponent);

      sub_25A50EC20();
      sub_25A3DF8C0(v0 + 16);
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      uint64_t v44 = sub_25A50F820();
      sub_25A48BEC8(*(void *)&v53[0], *((void *)&v53[0] + 1), 0, 0, v44, v39, v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_25A3B9048(v50, v51);

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v49, v48);
    }
    else
    {
      uint64_t v45 = *(void **)(v0 + 296);
      (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
      sub_25A3B9048(v50, v51);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v46 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
    return v46(v6, v7);
  }
  else
  {
    uint64_t v26 = *(void *)(v0 + 288);
    char v27 = sub_25A50F3E0();
    if (v26 && (v27 & 1) == 0)
    {
      uint64_t v28 = *(void *)(v0 + 288);
      uint64_t v29 = *(void **)(v0 + 296);
      uint64_t v30 = *(void *)(v0 + 280);
      swift_bridgeObjectRetain();
      sub_25A50FDB0();
      swift_bridgeObjectRelease();
      *(void *)&v53[0] = 543451483;
      *((void *)&v53[0] + 1) = 0xE400000000000000;
      *(void *)(v0 + 160) = v30;
      sub_25A5102B0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      swift_bridgeObjectRetain();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      *(_DWORD *)(v0 + 368) = [v29 (SEL)0x2654799BALL];
      sub_25A5102B0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      uint64_t v31 = sub_25A50F810();
      uint64_t v32 = v28;
      uint64_t v6 = v52;
      sub_25A48BEC8(*(void *)&v53[0], *((void *)&v53[0] + 1), 0, 0, v31, v32, v52, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v33 = *(void **)(v0 + 296);
    uint64_t v34 = *(void (**)(_OWORD *, uint64_t, unint64_t))(v0 + 96);
    long long v35 = *(_OWORD *)(v0 + 96);
    v53[4] = *(_OWORD *)(v0 + 80);
    v53[5] = v35;
    v53[6] = *(_OWORD *)(v0 + 112);
    long long v36 = *(_OWORD *)(v0 + 32);
    v53[0] = *(_OWORD *)(v0 + 16);
    v53[1] = v36;
    long long v37 = *(_OWORD *)(v0 + 64);
    v53[2] = *(_OWORD *)(v0 + 48);
    v53[3] = v37;
    v34(v53, v6, v7);
    swift_bridgeObjectRelease();
    swift_willThrow();
    sub_25A3B9048(v50, v51);

    (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
    return v38();
  }
  return result;
}

uint64_t sub_25A3DF030()
{
  uint64_t v10 = v0;
  uint64_t v1 = *(void **)(v0 + 344);
  unint64_t v2 = *(void **)(v0 + 296);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = *(void (**)(_OWORD *, void *))(v0 + 112);
  long long v4 = *(_OWORD *)(v0 + 96);
  v9[4] = *(_OWORD *)(v0 + 80);
  v9[5] = v4;
  void v9[6] = *(_OWORD *)(v0 + 112);
  long long v5 = *(_OWORD *)(v0 + 32);
  v9[0] = *(_OWORD *)(v0 + 16);
  v9[1] = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  void v9[2] = *(_OWORD *)(v0 + 48);
  v9[3] = v6;
  v3(v9, v1);
  swift_willThrow();

  (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_25A3DF140()
{
  v1[2] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417458);
  v1[3] = v2;
  _OWORD v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417480);
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A3DF264, 0, 0);
}

uint64_t sub_25A3DF264()
{
  (*(void (**)(void, void, void))(v0[4] + 16))(v0[5], v0[2], v0[3]);
  sub_25A3BE718(&qword_26A417488, &qword_26A417458);
  sub_25A50F430();
  v0[9] = MEMORY[0x263F8EE78];
  uint64_t v1 = sub_25A3BE718(&qword_26A417490, &qword_26A417480);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  void *v2 = v0;
  v2[1] = sub_25A3DF3B0;
  uint64_t v3 = v0[6];
  return MEMORY[0x270FA1E80](v0 + 12, v3, v1);
}

uint64_t sub_25A3DF3B0()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_25A3DF684;
  }
  else
  {
    uint64_t v2 = sub_25A3DF4CC;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A3DF4CC()
{
  char v1 = *(unsigned char *)(v0 + 96);
  if (*(unsigned char *)(v0 + 97))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 56) + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v3 = *(void *)(v0 + 72);
    return v2(v3);
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    long long v6 = *(char **)(v0 + 72);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      long long v6 = sub_25A38B20C(0, *((void *)v6 + 2) + 1, 1, v6);
    }
    unint64_t v8 = *((void *)v6 + 2);
    unint64_t v7 = *((void *)v6 + 3);
    if (v8 >= v7 >> 1) {
      long long v6 = sub_25A38B20C((char *)(v7 > 1), v8 + 1, 1, v6);
    }
    *((void *)v6 + 2) = v8 + 1;
    v6[v8 + 32] = v1;
    *(void *)(v0 + 72) = v6;
    uint64_t v9 = sub_25A3BE718(&qword_26A417490, &qword_26A417480);
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_25A3DF3B0;
    uint64_t v11 = *(void *)(v0 + 48);
    return MEMORY[0x270FA1E80](v0 + 96, v11, v9);
  }
}

uint64_t sub_25A3DF684()
{
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_25A3DF70C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415878);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A3DF774(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(unsigned char *)(v1 + 24);
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *long long v6 = v2;
  v6[1] = sub_25A38F608;
  return sub_25A3C9DF8(a1, v4, v5);
}

uint64_t sub_25A3DF824()
{
  return sub_25A3CA4C8(*(unsigned __int8 *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_25A3DF830(uint64_t a1)
{
  id v2 = *(id *)(a1 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_25A3DF8C0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 64);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

unint64_t sub_25A3DF94C()
{
  unint64_t result = qword_26A417470;
  if (!qword_26A417470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417470);
  }
  return result;
}

uint64_t destroy for CommandLineToolInvocation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for CommandLineToolInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  unint64_t v7 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v7;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CommandLineToolInvocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 64);
  uint64_t v5 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v5;
  id v6 = v5;

  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CommandLineToolInvocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CommandLineToolInvocation()
{
  return &type metadata for CommandLineToolInvocation;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_25A3DFCA4()
{
  uint64_t v0 = sub_25A50F1E0();
  nullsub_1(v0);
}

uint64_t CommandLineOptions.options.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineOptions.argumentConsumers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineOptions.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CommandLineOption();
  uint64_t v2 = sub_25A50F120();
  type metadata accessor for CommandLineArgumentConsumer();
  uint64_t result = sub_25A50F120();
  *a1 = v2;
  a1[1] = result;
  return result;
}

uint64_t CommandLineOptions.init(consumer:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v12 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 24);
  type metadata accessor for CommandLineOption();
  long long v11 = a1[2];
  uint64_t v6 = sub_25A50F120();
  type metadata accessor for CommandLineArgumentConsumer();
  sub_25A5102C0();
  swift_allocObject();
  uint64_t v7 = sub_25A50F0C0();
  *(_OWORD *)uint64_t v8 = v12;
  *(void *)(v8 + 16) = v4;
  *(unsigned char *)(v8 + 24) = v5;
  *(_OWORD *)(v8 + 32) = v11;
  uint64_t v13 = v7;
  uint64_t v9 = sub_25A50F1E0();
  uint64_t result = nullsub_1(v9);
  *a2 = v6;
  a2[1] = v13;
  return result;
}

uint64_t CommandLineOptions.init(option:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  long long v11 = *(_OWORD *)(a1 + 3);
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[8];
  type metadata accessor for CommandLineOption();
  sub_25A5102C0();
  swift_allocObject();
  uint64_t v7 = sub_25A50F0C0();
  *(void *)uint64_t v8 = v4;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(v8 + 24) = v11;
  *(void *)(v8 + 40) = v5;
  *(_OWORD *)(v8 + 48) = *((_OWORD *)a1 + 3);
  *(void *)(v8 + 64) = v6;
  uint64_t v12 = v7;
  uint64_t v9 = sub_25A50F1E0();
  nullsub_1(v9);
  type metadata accessor for CommandLineArgumentConsumer();
  uint64_t result = sub_25A50F120();
  *a2 = v12;
  a2[1] = result;
  return result;
}

uint64_t CommandLineOptions.init(options:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1();
  type metadata accessor for CommandLineArgumentConsumer();
  uint64_t result = sub_25A50F120();
  *a2 = v3;
  a2[1] = result;
  return result;
}

uint64_t CommandLineOptions.init(consumers:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for CommandLineOption();
  uint64_t v4 = sub_25A50F120();
  uint64_t result = a1();
  *a2 = v4;
  a2[1] = result;
  return result;
}

uint64_t CommandLineOptions.init(option:consumer:)@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[8];
  long long v19 = *(_OWORD *)(a1 + 3);
  long long v21 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  char v10 = *((unsigned char *)a2 + 24);
  type metadata accessor for CommandLineOption();
  sub_25A5102C0();
  swift_allocObject();
  uint64_t v11 = sub_25A50F0C0();
  *(void *)uint64_t v12 = v6;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(v12 + 24) = v19;
  *(void *)(v12 + 40) = v7;
  *(_OWORD *)(v12 + 48) = *((_OWORD *)a1 + 3);
  *(void *)(v12 + 64) = v8;
  uint64_t v22 = v11;
  uint64_t v13 = sub_25A50F1E0();
  long long v20 = a2[2];
  nullsub_1(v13);
  uint64_t v14 = v22;
  type metadata accessor for CommandLineArgumentConsumer();
  sub_25A5102C0();
  swift_allocObject();
  uint64_t v15 = sub_25A50F0C0();
  *(_OWORD *)uint64_t v16 = v21;
  *(void *)(v16 + 16) = v9;
  *(unsigned char *)(v16 + 24) = v10;
  *(_OWORD *)(v16 + 32) = v20;
  uint64_t v23 = v15;
  uint64_t v17 = sub_25A50F1E0();
  uint64_t result = nullsub_1(v17);
  *a3 = v14;
  a3[1] = v23;
  return result;
}

uint64_t CommandLineOptions.init(options:consumer:)@<X0>(uint64_t (*a1)(void)@<X0>, long long *a2@<X2>, uint64_t *a3@<X8>)
{
  long long v12 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  char v6 = *((unsigned char *)a2 + 24);
  uint64_t v7 = a1();
  type metadata accessor for CommandLineArgumentConsumer();
  sub_25A5102C0();
  swift_allocObject();
  uint64_t v8 = sub_25A50F0C0();
  *(_OWORD *)uint64_t v9 = v12;
  *(void *)(v9 + 16) = v5;
  *(unsigned char *)(v9 + 24) = v6;
  *(_OWORD *)(v9 + 32) = a2[2];
  uint64_t v13 = v8;
  uint64_t v10 = sub_25A50F1E0();
  uint64_t result = nullsub_1(v10);
  *a3 = v7;
  a3[1] = v13;
  return result;
}

uint64_t CommandLineOptions.init(options:consumers:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1();
  uint64_t result = a2();
  *a3 = v5;
  a3[1] = result;
  return result;
}

uint64_t CommandLineOptions.shortUsage.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  type metadata accessor for CommandLineOption();
  sub_25A50F1E0();
  swift_getWitnessTable();
  char v2 = sub_25A50F6C0();
  uint64_t v3 = 0x534E4F4954504FLL;
  if (v2) {
    uint64_t v3 = 0;
  }
  unint64_t v4 = 0xE700000000000000;
  if (v2) {
    unint64_t v4 = 0xE000000000000000;
  }
  uint64_t v12 = v3;
  unint64_t v13 = v4;
  uint64_t v5 = type metadata accessor for CommandLineArgumentConsumer();
  uint64_t v6 = swift_bridgeObjectRetain();
  if (MEMORY[0x26113D1B0](v6, v5))
  {
    uint64_t v7 = 0;
    uint64_t v8 = v1 + 40;
    while (1)
    {
      char v9 = sub_25A50F140();
      uint64_t result = sub_25A50F0D0();
      if ((v9 & 1) == 0) {
        break;
      }
      uint64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_14;
      }
      swift_bridgeObjectRetain();
      swift_retain();
      if ((v13 & 0xF00000000000000) != 0) {
        sub_25A50EDA0();
      }
      CommandLineArgumentConsumer.shortUsage.getter();
      sub_25A50EDA0();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v7;
      v8 += 48;
      if (v11 == MEMORY[0x26113D1B0](v1, v5)) {
        goto LABEL_12;
      }
    }
    uint64_t result = sub_25A50FE20();
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

uint64_t CommandLineOptions.parse<A>(_:into:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v101 = a1;
  uint64_t v88 = a5;
  uint64_t v93 = sub_25A50E0C0();
  uint64_t v91 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  uint64_t v92 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = a4;
  uint64_t v95 = *(void *)(*(void *)(a4 + 8) + 8);
  uint64_t v102 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v90 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v96 = (char *)&v86 - v11;
  uint64_t v12 = *(void *)(a2 + 16);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = *v5;
  uint64_t v87 = v5[1];
  uint64_t v89 = v15;
  uint64_t v16 = *(void (**)(void))(v15 + 16);
  long long v94 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16();
  uint64_t v103 = v12;
  uint64_t v17 = type metadata accessor for CommandLineOption();
  uint64_t v128 = sub_25A50E850();
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = MEMORY[0x26113D1B0](v18, v17);
  uint64_t v106 = v17;
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v98 = v14 + 32;
    uint64_t v99 = v14;
    while (1)
    {
      char v22 = sub_25A50F140();
      uint64_t result = sub_25A50F0D0();
      if ((v22 & 1) == 0) {
        break;
      }
      if (__OFADD__(v20, 1)) {
        goto LABEL_44;
      }
      uint64_t v105 = v20 + 1;
      unsigned int v24 = (uint64_t *)(v98 + 72 * v20);
      unint64_t v25 = v24[1];
      uint64_t v27 = v24[2];
      uint64_t v26 = v24[3];
      uint64_t v29 = (void (*)(char *, uint64_t, unint64_t))v24[4];
      uint64_t v28 = v24[5];
      uint64_t v31 = v24[6];
      uint64_t v30 = v24[7];
      uint64_t v32 = v24[8];
      uint64_t v111 = *v24;
      uint64_t v118 = v111;
      unint64_t v119 = v25;
      uint64_t v120 = v27;
      uint64_t v121 = v26;
      uint64_t v110 = v26;
      uint64_t v122 = v29;
      uint64_t v123 = v28;
      uint64_t v109 = v28;
      uint64_t v124 = v31;
      uint64_t v125 = (void (*)(char *, uint64_t (*)()))v30;
      uint64_t AssociatedConformanceWitness = v30;
      uint64_t v126 = (uint64_t *)v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v107 = CommandLineOption.names.getter();
      uint64_t v33 = *(void *)(v107 + 16);
      if (v33)
      {
        sub_25A50E990();
        uint64_t v34 = (uint64_t *)(v107 + 40);
        do
        {
          uint64_t v35 = *(v34 - 1);
          uint64_t v36 = *v34;
          uint64_t v118 = v111;
          unint64_t v119 = v25;
          uint64_t v120 = v27;
          uint64_t v121 = v110;
          uint64_t v122 = v29;
          uint64_t v123 = v109;
          uint64_t v124 = v31;
          uint64_t v125 = (void (*)(char *, uint64_t (*)()))AssociatedConformanceWitness;
          uint64_t v126 = (uint64_t *)v32;
          uint64_t v116 = v35;
          uint64_t v117 = v36;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          sub_25A50E9E0();
          v34 += 2;
          --v33;
        }
        while (v33);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v21 = MEMORY[0x26113D1B0](v99, v106);
      uint64_t v20 = v105;
      if (v105 == v21) {
        goto LABEL_10;
      }
    }
    uint64_t result = sub_25A50FE20();
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t v111 = swift_allocBox();
    uint64_t v38 = v37;
    sub_25A50F5E0();
    sub_25A50F620();
    swift_beginAccess();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v39 = 0;
    uint64_t v98 = 0;
    uint64_t v107 = v91 + 8;
    uint64_t v105 = v38;
    while (1)
    {
      uint64_t v40 = v96;
      if ((sub_25A50EAF0() & 1) == 0) {
        break;
      }
      uint64_t v99 = v39;
      while (1)
      {
        uint64_t v41 = (void (*)(uint64_t *, void))sub_25A50F730();
        uint64_t v43 = *v42;
        unint64_t v44 = v42[1];
        swift_bridgeObjectRetain();
        v41(&v118, 0);
        sub_25A3E122C();
        if ((sub_25A50EE80() & 1) == 0) {
          break;
        }
        uint64_t v115 = 0;
        uint64_t v114 = 0;
        uint64_t v118 = v43;
        unint64_t v119 = v44;
        uint64_t v112 = 61;
        unint64_t v113 = 0xE100000000000000;
        sub_25A39BE4C();
        uint64_t v45 = sub_25A50FB90();
        if (v45)
        {
          uint64_t v118 = 61;
          unint64_t v119 = 0xE100000000000000;
          MEMORY[0x270FA5388](v45);
          uint64_t v85 = &v118;
          swift_bridgeObjectRetain_n();
          uint64_t v46 = v104;
          uint64_t v47 = (void *)sub_25A397498(0x7FFFFFFFFFFFFFFFLL, 1, sub_25A3E18D4, (uint64_t)(&v86 - 4), v43, v44);
          uint64_t v104 = v46;
          uint64_t result = swift_bridgeObjectRelease();
          if (!v47[2]) {
            goto LABEL_45;
          }
          uint64_t v49 = v47[4];
          uint64_t v48 = v47[5];
          uint64_t v50 = v47[6];
          uint64_t v51 = v47[7];
          swift_bridgeObjectRetain();
          uint64_t v52 = MEMORY[0x26113CCD0](v49, v48, v50, v51);
          unint64_t v54 = v53;
          uint64_t result = swift_bridgeObjectRelease();
          if (v47[2] < 2uLL) {
            goto LABEL_46;
          }
          uint64_t v55 = v47[8];
          uint64_t v56 = v47[9];
          uint64_t v110 = v43;
          unint64_t v57 = v44;
          uint64_t v58 = v47[10];
          uint64_t v59 = v47[11];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v60 = MEMORY[0x26113CCD0](v55, v56, v58, v59);
          uint64_t v62 = v61;
          unint64_t v44 = v57;
          uint64_t v43 = v110;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v114 = v60;
          uint64_t v115 = v62;
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v52 = v43;
          unint64_t v54 = v44;
        }
        uint64_t v118 = v52;
        unint64_t v119 = v54;
        uint64_t v63 = v92;
        sub_25A50E070();
        uint64_t v64 = MEMORY[0x263F8D310];
        uint64_t v65 = sub_25A50FB50();
        unint64_t v67 = v66;
        (*(void (**)(char *, uint64_t))v107)(v63, v93);
        swift_bridgeObjectRelease();
        uint64_t v112 = v65;
        unint64_t v113 = v67;
        MEMORY[0x26113C9D0](&v118, &v112, v128, v64, v106, MEMORY[0x263F8D320]);
        swift_bridgeObjectRelease();
        uint64_t v68 = v119;
        if (!v119)
        {
          sub_25A3E17D8();
          swift_allocError();
          *unint64_t v83 = v43;
          v83[1] = v44;
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v103);
          (*(void (**)(char *, uint64_t))(v90 + 8))(v96, AssociatedTypeWitness);
          swift_release();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        uint64_t v69 = v118;
        uint64_t v70 = v125;
        uint64_t v71 = v126;
        v127[0] = v118;
        v127[1] = v119;
        v127[2] = v120;
        v127[3] = v121;
        v127[4] = v122;
        v127[5] = v123;
        uint64_t v109 = v123;
        uint64_t v110 = v124;
        v127[6] = v124;
        v127[7] = v125;
        v127[8] = v126;
        uint64_t v72 = swift_bridgeObjectRelease();
        LOBYTE(v118) = 0;
        MEMORY[0x270FA5388](v72);
        uint64_t v73 = v102;
        *(&v86 - 10) = v103;
        *(&v86 - 9) = v73;
        *(&v86 - 8) = v100;
        *(&v86 - 7) = (uint64_t)&v114;
        *(&v86 - 6) = (uint64_t)&v118;
        uint64_t v40 = v96;
        *(&v86 - 5) = v111;
        *(&v86 - 4) = (uint64_t)v40;
        *(&v86 - 3) = v101;
        uint64_t v85 = v127;
        uint64_t v74 = v104;
        v70(v94, sub_25A3E182C);
        uint64_t v104 = v74;
        if (v74)
        {
          (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v103);
          uint64_t v85 = v71;
          sub_25A3E1864(v69, v68);
          (*(void (**)(char *, uint64_t))(v90 + 8))(v40, AssociatedTypeWitness);
          swift_release();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        uint64_t v85 = v71;
        sub_25A3E1864(v69, v68);
        swift_bridgeObjectRelease();
        if ((sub_25A50EAF0() & 1) == 0) {
          goto LABEL_37;
        }
      }
      uint64_t v75 = type metadata accessor for CommandLineArgumentConsumer();
      uint64_t v76 = MEMORY[0x26113D160](v87, v75);
      if (v98 >= v76)
      {
        sub_25A3E17D8();
        swift_allocError();
        *uint64_t v84 = v43;
        v84[1] = v44;
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v103);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v96, AssociatedTypeWitness);
        swift_release();
        return swift_bridgeObjectRelease();
      }
      sub_25A50F210();
      uint64_t v77 = v120;
      char v78 = v121;
      uint64_t v79 = v104;
      v122(v94, v43, v44);
      uint64_t v104 = v79;
      if (v78)
      {
        if (v79) {
          goto LABEL_42;
        }
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v39 = v99 + 1;
        if (__OFADD__(v99, 1)) {
          goto LABEL_47;
        }
      }
      else
      {
        if (v79)
        {
LABEL_42:
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v103);
          (*(void (**)(char *, uint64_t))(v90 + 8))(v96, AssociatedTypeWitness);
          swift_release();
          return swift_bridgeObjectRelease();
        }
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v80 = v99 + 1;
        if (__OFADD__(v99, 1)) {
          goto LABEL_48;
        }
        BOOL v81 = v80 < v77;
        if (v80 < v77) {
          uint64_t v39 = v99 + 1;
        }
        else {
          uint64_t v39 = 0;
        }
        uint64_t v82 = v98;
        if (!v81) {
          uint64_t v82 = v98 + 1;
        }
        uint64_t v98 = v82;
      }
    }
LABEL_37:
    (*(void (**)(char *, uint64_t))(v90 + 8))(v40, AssociatedTypeWitness);
    (*(void (**)(uint64_t, char *, uint64_t))(v89 + 32))(v88, v94, v103);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A3E122C()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v2 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = &v9[-v5];
  uint64_t v7 = swift_projectBox();
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 16))(v4, v7, AssociatedTypeWitness);
  sub_25A50F600();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v4, AssociatedTypeWitness);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v1 + 40))(v7, v6, AssociatedTypeWitness);
}

uint64_t sub_25A3E13C8(uint64_t *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v32 = a7;
  uint64_t v28 = a6;
  uint64_t v34 = a4;
  uint64_t v30 = a9;
  uint64_t v31 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v16 = (char *)v27 - v15;
  uint64_t v29 = a3;
  uint64_t v17 = swift_projectBox();
  if (a1[1] && (*a2 & 1) == 0)
  {
    uint64_t v23 = *a1;
    *a2 = 1;
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_beginAccess();
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v18(v16, v17, AssociatedTypeWitness);
    v27[1] = a8;
    swift_getAssociatedConformanceWitness();
    char v19 = sub_25A50EAF0();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v14 + 8);
    v20(v16, AssociatedTypeWitness);
    if (v19)
    {
      swift_beginAccess();
      v18(v16, v17, AssociatedTypeWitness);
      uint64_t v21 = (void (*)(unsigned char *, void))sub_25A50F730();
      uint64_t v23 = *v22;
      swift_bridgeObjectRetain();
      v21(v33, 0);
      v20(v16, AssociatedTypeWitness);
      sub_25A3E122C();
    }
    else
    {
      uint64_t v24 = *v28;
      uint64_t v23 = v28[1];
      sub_25A3E1960();
      swift_allocError();
      *unint64_t v25 = v24;
      v25[1] = v23;
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
  }
  return v23;
}

unint64_t sub_25A3E167C()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_25A3E171C()
{
  return sub_25A3E167C();
}

uint64_t sub_25A3E1724()
{
  return 0x22206E6F6974704FLL;
}

uint64_t sub_25A3E17D0()
{
  return sub_25A3E1724();
}

unint64_t sub_25A3E17D8()
{
  unint64_t result = qword_26A417498[0];
  if (!qword_26A417498[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A417498);
  }
  return result;
}

uint64_t sub_25A3E182C()
{
  return sub_25A3E13C8(*(uint64_t **)(v0 + 40), *(unsigned char **)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(uint64_t **)(v0 + 80), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_25A3E1864(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A3E18D4(void *a1)
{
  return sub_25A39BD6C(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t type metadata accessor for CommandLineOptions()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3E190C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 8);
}

uint64_t type metadata accessor for CommandLineOptionBuilder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CommandLineArgumentConsumerBuilder()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for UnknownOptionError()
{
  return &type metadata for UnknownOptionError;
}

unint64_t sub_25A3E1960()
{
  unint64_t result = qword_26A417620;
  if (!qword_26A417620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417620);
  }
  return result;
}

ValueMetadata *type metadata accessor for OptionNeedsArgumentError()
{
  return &type metadata for OptionNeedsArgumentError;
}

uint64_t IteratorProtocol.map<A>(withBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = swift_allocBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v12, v5, a3);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  uint64_t v13[3] = a4;
  v13[4] = a5;
  v13[5] = v11;
  void v13[6] = a1;
  v13[7] = a2;
  swift_retain();

  return MEMORY[0x270F9E908](sub_25A3E1D58, v13, a4);
}

uint64_t sub_25A3E1AB0@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v18 = a2;
  char v19 = a1;
  uint64_t v20 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_25A50FA40();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v18 - v12;
  swift_projectBox();
  swift_beginAccess();
  sub_25A50FAF0();
  swift_endAccess();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v14 = 1;
    uint64_t v15 = v20;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, AssociatedTypeWitness);
    uint64_t v16 = v20;
    v19(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
    uint64_t v14 = 0;
    uint64_t v15 = v16;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v15, v14, 1, a3);
}

uint64_t sub_25A3E1D18()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_25A3E1D58@<X0>(uint64_t a1@<X8>)
{
  return sub_25A3E1AB0(*(void (**)(char *))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 24), a1);
}

uint64_t AnyIterator.map<A>(withBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v10[2] = a4;
  void v10[3] = a5;
  v10[4] = a3;
  v10[5] = a1;
  void v10[6] = a2;
  swift_retain();
  swift_retain();

  return MEMORY[0x270F9E908](sub_25A3E2064, v10, a5);
}

uint64_t sub_25A3E1E08@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v7 = sub_25A50FA40();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A50FD00();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    uint64_t v15 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, a2);
    v18(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    uint64_t v15 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, v15, 1, a3);
}

uint64_t sub_25A3E2024()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A3E2064@<X0>(uint64_t a1@<X8>)
{
  return sub_25A3E1E08(*(void (**)(char *))(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t HumanReadableError.lowValueTitle.getter()
{
  return 0;
}

void sub_25A3E2080(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void HumanReadableError.severity.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t HumanReadableError.canTryAgain.getter()
{
  return 1;
}

uint64_t sub_25A3E20A4(uint64_t a1)
{
  uint64_t v6 = a1;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
  sub_25A3ECE80(v1, (uint64_t)boxed_opaque_existential_1);
  __swift_project_boxed_opaque_existential_1(v5, v6);
  swift_getDynamicType();
  uint64_t v3 = sub_25A5105D0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v3;
}

uint64_t HumanReadableError.errorTypeDescription.getter(uint64_t a1)
{
  uint64_t v7 = a1;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_1, v1, a1);
  __swift_project_boxed_opaque_existential_1(v6, v7);
  swift_getDynamicType();
  uint64_t v4 = sub_25A5105D0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v4;
}

uint64_t sub_25A3E21BC(uint64_t a1)
{
  void v8[4] = a1;
  void v8[3] = &type metadata for JITError;
  v8[0] = a1;
  __swift_project_boxed_opaque_existential_1(v8, (uint64_t)&type metadata for JITError);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_25A5105D0();
  uint64_t v4 = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  v8[0] = v2;
  v8[1] = v4;
  if (*(void *)(a1 + 16)) {
    sub_25A50EDA0();
  }
  JITError.additionalDiagnostics.getter();
  if (v5)
  {
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  sub_25A39BE4C();
  uint64_t v6 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_25A3E2314(uint64_t a1)
{
  uint64_t v7[3] = &type metadata for InvalidAuditTokenDeserialization;
  v7[0] = a1;
  __swift_project_boxed_opaque_existential_1(v7, (uint64_t)&type metadata for InvalidAuditTokenDeserialization);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_25A5105D0();
  uint64_t v3 = v2;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  v7[0] = v1;
  v7[1] = v3;
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  uint64_t v4 = swift_bridgeObjectRetain();
  MEMORY[0x26113D0A0](v4, MEMORY[0x263F8E8F8]);
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A39BE4C();
  uint64_t v5 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_25A3E24A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A3E24D0(a1, a2, a3, a4, (uint64_t)&type metadata for UnhandledUnknownCaseError);
}

uint64_t sub_25A3E24BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A3E24D0(a1, a2, a3, a4, (uint64_t)&type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString);
}

uint64_t sub_25A3E24D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v16[3] = a5;
  uint64_t v10 = (void *)swift_allocObject();
  v16[0] = v10;
  uint64_t v10[2] = a1;
  void v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  __swift_project_boxed_opaque_existential_1(v16, a5);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_25A5105D0();
  uint64_t v13 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  v16[0] = v11;
  v16[1] = v13;
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  if (a4)
  {
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  sub_25A39BE4C();
  uint64_t v14 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_25A3E265C()
{
  long long v3 = *v0;
  if (*((void *)v0 + 3))
  {
LABEL_4:
    sub_25A3D04A0((uint64_t)&v3);
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    if (!*((void *)v0 + 7)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*((void *)v0 + 5))
  {
    swift_bridgeObjectRetain();
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  if (*((void *)v0 + 7))
  {
LABEL_5:
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
LABEL_6:
  if (*((void *)v0 + 9))
  {
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  sub_25A39BE4C();
  uint64_t v1 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_25A3E2800()
{
  sub_25A5105D0();
  sub_25A5105D0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  sub_25A50FFB0();
  sub_25A50EDA0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A39BE4C();
  uint64_t v0 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_25A3E2944(void *a1)
{
  sub_25A3E9AA4(a1);
  id v2 = a1;
  id v3 = objc_msgSend(v2, sel_localizedDescription);
  sub_25A50EC20();

  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_localizedRecoverySuggestion);
  if (v4)
  {
    uint64_t v5 = v4;
    sub_25A50EC20();

    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  sub_25A3E9604(v2);
  if (v6)
  {
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  sub_25A39BE4C();
  uint64_t v7 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_25A3E2AE4()
{
  uint64_t v1 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v1 - 8);
  id v3 = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for CrashReportError(0);
  id v4 = __swift_allocate_boxed_opaque_existential_1(&v26);
  sub_25A3ECE80(v0, (uint64_t)v4);
  __swift_project_boxed_opaque_existential_1(&v26, v28);
  swift_getDynamicType();
  uint64_t v5 = sub_25A5105D0();
  unint64_t v7 = v6;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  uint64_t v30 = v5;
  unint64_t v31 = v7;
  sub_25A383EC0(&v26);
  uint64_t v8 = v28;
  uint64_t v9 = v29;
  __swift_project_boxed_opaque_existential_1(&v26, v28);
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  uint64_t v11 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  if (v11)
  {
    uint64_t v26 = 8250;
    unint64_t v27 = 0xE200000000000000;
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  sub_25A383EC0(&v26);
  uint64_t v12 = v28;
  uint64_t v13 = v29;
  __swift_project_boxed_opaque_existential_1(&v26, v28);
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  uint64_t v15 = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  if (v15)
  {
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  sub_25A383EC0(&v26);
  uint64_t v16 = v28;
  uint64_t v17 = v29;
  __swift_project_boxed_opaque_existential_1(&v26, v28);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  Swift::String v18 = CrashReport.formattedAsLegacyCrashReport()();
  char v19 = sub_25A3852D0(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v21 = v19[2];
  unint64_t v20 = v19[3];
  if (v21 >= v20 >> 1) {
    char v19 = sub_25A3852D0((void *)(v20 > 1), v21 + 1, 1, v19);
  }
  _OWORD v19[2] = v21 + 1;
  char v22 = (Swift::String *)&v19[3 * v21];
  void v22[2] = v18;
  LOBYTE(v22[3]._countAndFlagsBits) = 0;
  Array<A>.builtDescription.getter((uint64_t)v19);
  swift_bridgeObjectRelease();
  sub_25A3ECEE4((uint64_t)v3);
  sub_25A50EDA0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  uint64_t v26 = v30;
  unint64_t v27 = v31;
  v25[3] = 28252;
  v25[4] = 0xE200000000000000;
  v25[1] = 10;
  void v25[2] = 0xE100000000000000;
  sub_25A39BE4C();
  uint64_t v23 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_25A3E2E2C()
{
  uint64_t v1 = v0;
  v9[3] = &type metadata for LowValueError;
  uint64_t v2 = swift_allocObject();
  v9[0] = v2;
  long long v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(v0 + 32);
  *(unsigned char *)(v2 + 64) = *(unsigned char *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1(v9, (uint64_t)&type metadata for LowValueError);
  swift_getDynamicType();
  sub_25A3ECDF0(v0);
  uint64_t v4 = sub_25A5105D0();
  uint64_t v6 = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  v9[0] = v4;
  v9[1] = v6;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 24))
  {
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v1 + 40))
  {
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  sub_25A39BE4C();
  uint64_t v7 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_25A3E2FFC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v19 = &type metadata for TimeoutError;
  uint64_t v8 = swift_allocObject();
  uint64_t v16 = v8;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  char v9 = a4 & 1;
  *(unsigned char *)(v8 + 40) = a4 & 1;
  __swift_project_boxed_opaque_existential_1(&v16, (uint64_t)&type metadata for TimeoutError);
  swift_getDynamicType();
  sub_25A3ECD94(a1, a2, a3, a4 & 1);
  uint64_t v10 = sub_25A5105D0();
  unint64_t v12 = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  uint64_t v20 = v10;
  unint64_t v21 = v12;
  uint64_t v16 = a1;
  unint64_t v17 = a2;
  uint64_t v18 = a3;
  LOBYTE(v19) = v9;
  TimeoutError.highValueTitle.getter();
  if (v13)
  {
    uint64_t v16 = 8250;
    unint64_t v17 = 0xE200000000000000;
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    uint64_t v10 = v20;
    unint64_t v12 = v21;
  }
  uint64_t v16 = v10;
  unint64_t v17 = v12;
  sub_25A39BE4C();
  uint64_t v14 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_25A3E3184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[3] = &type metadata for Unreachable;
  uint64_t v8 = (void *)swift_allocObject();
  v14[0] = v8;
  void v8[2] = a1;
  void v8[3] = a2;
  void v8[4] = a3;
  void v8[5] = a4;
  __swift_project_boxed_opaque_existential_1(v14, (uint64_t)&type metadata for Unreachable);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_25A5105D0();
  uint64_t v11 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  v14[0] = v9;
  v14[1] = v11;
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  if (a4)
  {
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  sub_25A39BE4C();
  uint64_t v12 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_25A3E3334(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = &type metadata for InvalidUUID;
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  __swift_project_boxed_opaque_existential_1(&v7, (uint64_t)&type metadata for InvalidUUID);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_25A5105D0();
  uint64_t v4 = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  uint64_t v7 = v2;
  uint64_t v8 = v4;
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A39BE4C();
  uint64_t v5 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t HumanReadableError.fullDiagnosticsOutput.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 88))();
  HumanReadableError.effectiveTitle.getter(a1, a2);
  if (v4)
  {
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (v5)
  {
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  if (v6)
  {
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  sub_25A39BE4C();
  uint64_t v7 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_25A3E3670@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v2 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for CrashReportError(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
  sub_25A3ECE80(v1, (uint64_t)boxed_opaque_existential_1);
  __swift_project_boxed_opaque_existential_1(v33, v34);
  swift_getDynamicType();
  uint64_t v31 = sub_25A5105D0();
  uint64_t v7 = v6;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  sub_25A383EC0(v33);
  uint64_t v8 = v34;
  uint64_t v9 = v35;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  uint64_t v11 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  sub_25A383EC0(v33);
  uint64_t v12 = v34;
  uint64_t v13 = v35;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  uint64_t v16 = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  sub_25A383EC0(v33);
  uint64_t v17 = v34;
  uint64_t v18 = v35;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  Swift::String v19 = CrashReport.formattedAsLegacyCrashReport()();
  uint64_t v20 = sub_25A3852D0(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v22 = v20[2];
  unint64_t v21 = v20[3];
  if (v22 >= v21 >> 1) {
    uint64_t v20 = sub_25A3852D0((void *)(v21 > 1), v22 + 1, 1, v20);
  }
  void v20[2] = v22 + 1;
  uint64_t v23 = (Swift::String *)&v20[3 * v22];
  _OWORD v23[2] = v19;
  LOBYTE(v23[3]._countAndFlagsBits) = 0;
  uint64_t v24 = Array<A>.builtDescription.getter((uint64_t)v20);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  sub_25A3ECEE4((uint64_t)v4);
  v33[0] = v31;
  v33[1] = v7;
  v33[2] = v30;
  uint64_t v34 = v11;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = v14;
  uint64_t v38 = v16;
  uint64_t v39 = v24;
  uint64_t v40 = v26;
  uint64_t v41 = 2;
  char v42 = 0;
  __int16 v43 = 258;
  char v44 = 1;
  uint64_t v27 = sub_25A3E796C((uint64_t)v33);
  uint64_t v28 = sub_25A3EB380(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v32 = v28;
  return result;
}

uint64_t sub_25A3E3948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *((void *)&v18 + 1) = &type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString;
  uint64_t v10 = (void *)swift_allocObject();
  v17[0] = v10;
  uint64_t v10[2] = a1;
  void v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  __swift_project_boxed_opaque_existential_1(v17, (uint64_t)&type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_25A5105D0();
  uint64_t v13 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  v17[0] = v11;
  v17[1] = v13;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = 0;
  char v25 = 1;
  __int16 v26 = 2;
  char v27 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_25A3E796C((uint64_t)v17);
  uint64_t v15 = sub_25A3EB380(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a5 = v15;
  return result;
}

uint64_t sub_25A3E3A90@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v15 = &type metadata for InvalidUUID;
  unint64_t v12 = a1;
  unint64_t v13 = a2;
  __swift_project_boxed_opaque_existential_1(&v12, (uint64_t)&type metadata for InvalidUUID);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_25A5105D0();
  unint64_t v6 = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  unint64_t v12 = 0;
  unint64_t v13 = 0xE000000000000000;
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  unint64_t v12 = 0xD000000000000015;
  unint64_t v13 = 0x800000025A51EC40;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  unint64_t v7 = v12;
  uint64_t v8 = (ValueMetadata *)v13;
  unint64_t v12 = v4;
  unint64_t v13 = v6;
  unint64_t v14 = v7;
  uint64_t v15 = v8;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  char v20 = 1;
  __int16 v21 = 2;
  char v22 = 1;
  uint64_t v9 = sub_25A3E796C((uint64_t)&v12);
  uint64_t v10 = sub_25A3EB380(v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v10;
  return result;
}

uint64_t sub_25A3E3BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  long long v18 = &type metadata for Unreachable;
  uint64_t v10 = (void *)swift_allocObject();
  v17[0] = v10;
  uint64_t v10[2] = a1;
  void v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  __swift_project_boxed_opaque_existential_1(v17, (uint64_t)&type metadata for Unreachable);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_25A5105D0();
  uint64_t v13 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  v17[0] = v11;
  v17[1] = v13;
  void v17[2] = 0;
  long long v18 = 0;
  unint64_t v19 = 0xD00000000000001FLL;
  unint64_t v20 = 0x800000025A51ECD0;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = 0;
  char v26 = 1;
  __int16 v27 = 2;
  char v28 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_25A3E796C((uint64_t)v17);
  uint64_t v15 = sub_25A3EB380(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a5 = v15;
  return result;
}

uint64_t sub_25A3E3D54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  char v9 = a4 & 1;
  unint64_t v20 = &type metadata for TimeoutError;
  uint64_t v10 = swift_allocObject();
  v19[0] = v10;
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)(v10 + 32) = a3;
  *(unsigned char *)(v10 + 40) = v9;
  __swift_project_boxed_opaque_existential_1(v19, (uint64_t)&type metadata for TimeoutError);
  swift_getDynamicType();
  sub_25A3ECD94(a1, a2, a3, v9);
  uint64_t v11 = sub_25A5105D0();
  uint64_t v13 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  uint64_t v14 = TimeoutError.highValueTitle.getter();
  v19[0] = v11;
  v19[1] = v13;
  _OWORD v19[2] = v14;
  unint64_t v20 = v15;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v24 = 0;
  char v25 = 1;
  __int16 v26 = 258;
  char v27 = 1;
  uint64_t v16 = sub_25A3E796C((uint64_t)v19);
  uint64_t v17 = sub_25A3EB380(v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a5 = v17;
  return result;
}

uint64_t sub_25A3E3EA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v17 = &type metadata for LowValueError;
  uint64_t v3 = swift_allocObject();
  v16[0] = v3;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v1 + 32);
  *(unsigned char *)(v3 + 64) = *(unsigned char *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(v16, (uint64_t)&type metadata for LowValueError);
  swift_getDynamicType();
  sub_25A3ECDF0(v1);
  uint64_t v5 = sub_25A5105D0();
  uint64_t v7 = v6;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  char v8 = (*(unsigned char *)(v1 + 48) == 2) | *(unsigned char *)(v1 + 48);
  uint64_t v9 = *(void *)v1;
  uint64_t v10 = *(void *)(v1 + 8);
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = *(void *)(v1 + 40);
  v16[0] = v5;
  v16[1] = v7;
  v16[2] = 0;
  uint64_t v17 = 0;
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  uint64_t v20 = v11;
  long long v21 = *(_OWORD *)(v1 + 24);
  uint64_t v22 = v12;
  uint64_t v23 = 0;
  __int16 v24 = 513;
  char v25 = v8 & 1;
  char v26 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_25A3E796C((uint64_t)v16);
  uint64_t v14 = sub_25A3EB380(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v14;
  return result;
}

uint64_t sub_25A3E4018@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __int16 v24 = &type metadata for AccumulatedError;
  v23[0] = a1;
  __swift_project_boxed_opaque_existential_1(v23, (uint64_t)&type metadata for AccumulatedError);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_25A5105D0();
  uint64_t v4 = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  uint64_t v5 = sub_25A4B9F40(a1);
  uint64_t v7 = v6;
  unint64_t v8 = sub_25A4B9DE8(a1);
  uint64_t v10 = v9;
  uint64_t v11 = sub_25A4BA078(a1);
  uint64_t v13 = v12;
  uint64_t v14 = sub_25A4BA1B0(a1);
  uint64_t v16 = v15;
  char v17 = sub_25A4BA2E8(a1);
  v23[0] = v21;
  v23[1] = v4;
  _OWORD v23[2] = v5;
  __int16 v24 = v7;
  unint64_t v25 = v8;
  uint64_t v26 = v10;
  uint64_t v27 = v11;
  uint64_t v28 = v13;
  uint64_t v29 = v14;
  uint64_t v30 = v16;
  uint64_t v31 = 0;
  __int16 v32 = 513;
  char v33 = v17 & 1;
  char v34 = 1;
  uint64_t v18 = sub_25A3E796C((uint64_t)v23);
  uint64_t v19 = sub_25A3EB380(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v19;
  return result;
}

uint64_t sub_25A3E4180@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_25A3E9AA4(a1);
  uint64_t v6 = v5;
  id v7 = objc_msgSend(a1, sel_localizedDescription);
  uint64_t v8 = sub_25A50EC20();
  uint64_t v10 = v9;

  id v11 = objc_msgSend(a1, sel_localizedRecoverySuggestion);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = sub_25A50EC20();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  sub_25A3E9604(a1);
  v21[0] = v4;
  v21[1] = v6;
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = v8;
  v21[5] = v10;
  v21[6] = v13;
  v21[7] = v15;
  v21[8] = v16;
  v21[9] = v17;
  v21[10] = 0;
  char v22 = 1;
  __int16 v23 = 258;
  char v24 = 0;
  uint64_t v18 = sub_25A3E796C((uint64_t)v21);
  uint64_t v19 = sub_25A3EB380(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v19;
  return result;
}

uint64_t sub_25A3E42C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_25A5105D0();
  uint64_t v4 = v3;
  sub_25A5105D0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  sub_25A50FFB0();
  v8[0] = v2;
  v8[1] = v4;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v12 = 0;
  unint64_t v13 = 0xE000000000000000;
  uint64_t v14 = 0;
  char v15 = 1;
  __int16 v16 = 258;
  char v17 = 0;
  uint64_t v5 = sub_25A3E796C((uint64_t)v8);
  uint64_t v6 = sub_25A3EB380(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v6;
  return result;
}

uint64_t sub_25A3E43F0@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v15 = &type metadata for InvalidAuditTokenDeserialization;
  unint64_t v12 = a1;
  __swift_project_boxed_opaque_existential_1(&v12, (uint64_t)&type metadata for InvalidAuditTokenDeserialization);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_25A5105D0();
  unint64_t v5 = v4;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  unint64_t v12 = 0;
  unint64_t v13 = 0xE000000000000000;
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  unint64_t v12 = 0xD000000000000027;
  unint64_t v13 = 0x800000025A51ED10;
  uint64_t v6 = swift_bridgeObjectRetain();
  MEMORY[0x26113D0A0](v6, MEMORY[0x263F8E8F8]);
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v7 = v12;
  uint64_t v8 = (ValueMetadata *)v13;
  unint64_t v12 = v3;
  unint64_t v13 = v5;
  unint64_t v14 = v7;
  char v15 = v8;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  char v20 = 1;
  __int16 v21 = 2;
  char v22 = 1;
  uint64_t v9 = sub_25A3E796C((uint64_t)&v12);
  uint64_t v10 = sub_25A3EB380(v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v10;
  return result;
}

uint64_t sub_25A3E455C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v15 = &type metadata for JITError;
  v14[0] = a1;
  __swift_project_boxed_opaque_existential_1(v14, (uint64_t)&type metadata for JITError);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_25A5105D0();
  uint64_t v6 = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (*(void *)(a1 + 16)) {
    unint64_t v7 = 0xD000000000000017;
  }
  else {
    unint64_t v7 = 0;
  }
  if (*(void *)(a1 + 16)) {
    unint64_t v8 = 0x800000025A51EC80;
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v9 = JITError.additionalDiagnostics.getter();
  v14[0] = v4;
  v14[1] = v6;
  void v14[2] = 0;
  char v15 = 0;
  unint64_t v16 = v7;
  unint64_t v17 = v8;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = v9;
  uint64_t v21 = v10;
  uint64_t v22 = qword_27082B980;
  char v23 = 0;
  __int16 v24 = 258;
  char v25 = 1;
  uint64_t v11 = sub_25A3E796C((uint64_t)v14);
  uint64_t v12 = sub_25A3EB380(v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v12;
  return result;
}

uint64_t HumanReadableError.plistRepresentation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = (*(uint64_t (**)(void))(a2 + 88))();
  uint64_t v7 = v6;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  uint64_t v27 = v9;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  uint64_t v25 = v11;
  uint64_t v26 = v10;
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  uint64_t v13 = v12;
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  uint64_t v15 = v14;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 56))(&v29, a1, a2);
  uint64_t v22 = v29;
  char v16 = v30;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 64))(&v33, a1, a2);
  char v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 96))(a1, a2);
  char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 120))(a1, a2);
  v31[0] = v5;
  v31[1] = v7;
  v31[2] = v8;
  v31[3] = v27;
  v31[4] = v26;
  v31[5] = v25;
  v31[6] = v24;
  v31[7] = v13;
  v31[8] = v23;
  v31[9] = v15;
  v31[10] = v22;
  char v32 = v16;
  BYTE1(v33) = v17 & 1;
  BYTE2(v33) = v18 & 1;
  uint64_t v19 = sub_25A3E796C((uint64_t)v31);
  uint64_t v20 = sub_25A3EB380(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v20;
  return result;
}

uint64_t HumanReadableError.isNativeHumanReadable.getter()
{
  return 1;
}

uint64_t HumanReadableError.errorDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t HumanReadableError.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

Swift::String __swiftcall Error.describe()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v0 - 8);
  uint64_t v5 = ((uint64_t (*)())MEMORY[0x270FA5388])();
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v8((char *)&v18 - v9, v1, v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415BF8);
  if (!swift_dynamicCast())
  {
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    sub_25A384BCC((uint64_t)&v18, &qword_26A417628);
    v8(v7, v1, v3);
LABEL_5:
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    sub_25A510310();
    uint64_t v14 = (void *)*((void *)&v18 + 1);
    uint64_t v12 = v18;
    goto LABEL_6;
  }
  uint64_t v10 = *((void *)&v19 + 1);
  uint64_t v11 = v20;
  __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
  uint64_t v12 = HumanReadableError.effectiveTitle.getter(v10, v11);
  uint64_t v14 = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  v8(v7, v2, v3);
  if (!v14) {
    goto LABEL_5;
  }
LABEL_6:
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v15 = v12;
  char v16 = v14;
  result._object = v16;
  result._uint64_t countAndFlagsBits = v15;
  return result;
}

uint64_t HumanReadableError.highValueTitle.getter()
{
  return 0;
}

void HumanReadableError.options.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t sub_25A3E4AE8(uint64_t a1)
{
  return sub_25A3EA2C8(a1);
}

uint64_t sub_25A3E4AF4()
{
  return sub_25A3E24D0(*v0, v0[1], v0[2], v0[3], (uint64_t)&type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString);
}

uint64_t sub_25A3E4B24@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A3E3948(*v1, v1[1], v1[2], v1[3], a1);
}

void Error.humanReadable.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v44 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12((char *)&v44 - v13, v2, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415BF8);
  if (swift_dynamicCast()) {
    goto LABEL_7;
  }
  uint64_t v52 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  sub_25A384BCC((uint64_t)&v50, &qword_26A417628);
  v12(v11, v2, a1);
  uint64_t v14 = sub_25A5102E0();
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, a1);
  }
  else
  {
    uint64_t v15 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v16, v11, a1);
  }
  char v17 = (void *)sub_25A50E230();

  sub_25A3E9C60(v17, (uint64_t)&v50);
  if (*((void *)&v51 + 1))
  {

LABEL_7:
    sub_25A3C85D8(&v50, (uint64_t)&v53);
    sub_25A3C85D8(&v53, a2);
    return;
  }
  char v44 = v8;
  uint64_t v45 = (uint64_t *)a2;
  sub_25A384BCC((uint64_t)&v50, &qword_26A417628);
  id v18 = objc_msgSend(v17, sel_userInfo);
  uint64_t v19 = sub_25A50E8A0();

  uint64_t v20 = *(void *)(v19 + 16);
  swift_bridgeObjectRelease();
  if (v20)
  {
    id v21 = objc_msgSend(v17, sel_userInfo);
    uint64_t v22 = sub_25A50E8A0();

    uint64_t v23 = sub_25A50EC20();
    if (*(void *)(v22 + 16))
    {
      unint64_t v25 = sub_25A409670(v23, v24);
      uint64_t v26 = v45;
      if (v27)
      {
        sub_25A3937CC(*(void *)(v22 + 56) + 32 * v25, (uint64_t)&v53);
      }
      else
      {
        long long v53 = 0u;
        long long v54 = 0u;
      }
    }
    else
    {
      long long v53 = 0u;
      long long v54 = 0u;
      uint64_t v26 = v45;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v54 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
      if (swift_dynamicCast())
      {
        uint64_t v31 = (void *)v50;
        *((void *)&v54 + 1) = &type metadata for HumanReadableNSError;
        unint64_t v55 = sub_25A3EB6A0();
        *(void *)&long long v53 = v17;
        swift_getErrorValue();
        uint64_t v32 = v48;
        uint64_t v33 = v49;
        v26[3] = (uint64_t)&type metadata for UnderlyingErrorWrapper;
        v26[4] = sub_25A3EB6F4();
        uint64_t v34 = swift_allocObject();
        uint64_t v35 = v34 + 16;
        uint64_t *v26 = v34;
        id v36 = v17;
        id v37 = v31;
        Error.humanReadable.getter(v32, v33);

        sub_25A3C85D8(&v53, v35);
        return;
      }
    }
    else
    {
      sub_25A384BCC((uint64_t)&v53, &qword_26A416C28);
    }
    v26[3] = (uint64_t)&type metadata for HumanReadableNSError;
    v26[4] = sub_25A3EB6A0();
    uint64_t *v26 = (uint64_t)v17;
  }
  else
  {
    uint64_t v28 = v44;
    v12(v44, v2, a1);
    uint64_t v29 = sub_25A5102E0();
    if (v29)
    {
      uint64_t v30 = v29;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v28, a1);
    }
    else
    {
      uint64_t v30 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v38, v28, a1);
    }
    uint64_t v39 = v45;
    swift_getErrorValue();
    uint64_t v40 = v46;
    uint64_t v41 = v47;
    *((void *)&v54 + 1) = v47;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v53);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(boxed_opaque_existential_1, v40, v41);
    __swift_project_boxed_opaque_existential_1(&v53, *((uint64_t *)&v54 + 1));
    uint64_t DynamicType = swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
    v39[3] = (uint64_t)&type metadata for HumanReadableSwiftError;
    v39[4] = sub_25A3EB788();

    *uint64_t v39 = v30;
    v39[1] = DynamicType;
  }
}

void sub_25A3E50AC(uint64_t a1@<X8>)
{
}

void sub_25A3E50C4(unsigned char *a1@<X8>)
{
}

uint64_t HumanReadableError.withUnderlying(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1)
  {
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, v4, a2);
    swift_getErrorValue();
    a4[3] = (uint64_t)&type metadata for UnderlyingErrorWrapper;
    a4[4] = sub_25A3EB6F4();
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = v9 + 16;
    *a4 = v9;
    uint64_t v11 = v9 + 56;
    id v12 = a1;
    Error.humanReadable.getter(v16, v11);

    return sub_25A3C85D8(&v17, v10);
  }
  else
  {
    a4[3] = a2;
    a4[4] = a3;
    uint64_t v14 = __swift_allocate_boxed_opaque_existential_1(a4);
    uint64_t v15 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);
    return v15(v14, v4, a2);
  }
}

uint64_t HumanReadableError.isPotentialCrash.getter()
{
  return 1;
}

PreviewsFoundationOS::HumanReadableErrorSeverity_optional __swiftcall HumanReadableErrorSeverity.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_25A510190();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  char *v2 = v5;
  return result;
}

uint64_t HumanReadableErrorSeverity.rawValue.getter()
{
  if (*v0) {
    return 1868983913;
  }
  else {
    return 0x726F727265;
  }
}

uint64_t sub_25A3E52E0(char *a1, char *a2)
{
  return sub_25A4D5F68(*a1, *a2);
}

uint64_t sub_25A3E52EC()
{
  return sub_25A510530();
}

uint64_t sub_25A3E5364()
{
  sub_25A50ED30();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A3E53C8()
{
  return sub_25A510530();
}

PreviewsFoundationOS::HumanReadableErrorSeverity_optional sub_25A3E543C(Swift::String *a1)
{
  return HumanReadableErrorSeverity.init(rawValue:)(*a1);
}

void sub_25A3E5448(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1868983913;
  if (!*v1) {
    uint64_t v2 = 0x726F727265;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t HumanReadableErrorOptions.rawValue.getter()
{
  return *(void *)v0;
}

PreviewsFoundationOS::HumanReadableErrorOptions __swiftcall HumanReadableErrorOptions.init(rawValue:)(PreviewsFoundationOS::HumanReadableErrorOptions rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static HumanReadableErrorOptions.showCrashLogsButton.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static HumanReadableErrorOptions.showTitleOnly.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static HumanReadableErrorOptions.generatesLiveIssues.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static HumanReadableErrorOptions.additionalInfoStringContainsMarkdown.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static HumanReadableErrorOptions.showCustomTitleAndDetails.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static HumanReadableErrorOptions.isJITRelated.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void *sub_25A3E54D4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_25A3E54E8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_25A3E54FC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_25A3E5528@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_25A3E554C(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_25A3E5560@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_25A3E5574(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_25A3E5588(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_25A3E559C(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_25A3E55B0()
{
  return *v0 == 0;
}

uint64_t sub_25A3E55C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *sub_25A3E55D8(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_25A3E55EC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t HumanReadableError.unwrapped.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v9((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  if (swift_dynamicCast())
  {
    void v17[2] = v14;
    void v17[3] = v15;
    v17[4] = v16;
    v17[0] = v12;
    v17[1] = v13;
    sub_25A3990F8((uint64_t)v17, (uint64_t)a3);
    return sub_25A3EB7DC((uint64_t)v17);
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    sub_25A384BCC((uint64_t)&v12, &qword_26A417648);
    a3[3] = a1;
    a3[4] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v9)(boxed_opaque_existential_1, v3, a1);
  }
}

double HumanReadableError.underlying.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (swift_dynamicCast())
  {
    v12[0] = v8;
    v12[1] = v9;
    v12[2] = v10;
    v11[0] = v6;
    v11[1] = v7;
    sub_25A3990F8((uint64_t)v12 + 8, a2);
    sub_25A3EB7DC((uint64_t)v11);
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v6 = 0u;
    sub_25A384BCC((uint64_t)&v6, &qword_26A417648);
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t HumanReadableError.effectiveTitle.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x270FA5388]();
  long long v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 24))(v6);
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (!v12) {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  return v10;
}

void *HumanReadableError.effectiveOptions.getter@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  double result = (*(void *(**)(uint64_t *__return_ptr))(a1 + 56))(&v5);
  if (v6) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v5;
  }
  *a2 = v4;
  return result;
}

id HumanReadableError.serializableNSError.getter(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417650);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A511AC0;
  *(void *)(inited + 32) = sub_25A50EC20();
  *(void *)(inited + 40) = v5;
  uint64_t v6 = HumanReadableError.effectiveTitle.getter(a1, a2);
  *(void *)(inited + 72) = MEMORY[0x263F8D310];
  unint64_t v8 = 0xD000000000000018;
  if (v7) {
    unint64_t v8 = v6;
  }
  unint64_t v9 = 0x800000025A51EBD0;
  if (v7) {
    unint64_t v9 = v7;
  }
  *(void *)(inited + 48) = v8;
  *(void *)(inited + 56) = v9;
  uint64_t v10 = self;
  *(void *)(inited + 80) = 0xD000000000000014;
  *(void *)(inited + 88) = 0x800000025A51EBF0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 112))(&v15, a1, a2);
  uint64_t v11 = v15;
  *(void *)(inited + 120) = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417658);
  *(void *)(inited + 96) = v11;
  sub_25A392EA8(inited);
  uint64_t v12 = (void *)sub_25A50E890();
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v10, sel_uv_errorWithUserInfo_, v12);

  return v13;
}

uint64_t sub_25A3E5B9C(char *a1, char *a2)
{
  return sub_25A4D5EC8(*a1, *a2);
}

uint64_t sub_25A3E5BA8()
{
  return sub_25A510530();
}

uint64_t sub_25A3E5C24()
{
  sub_25A50ED30();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A3E5C8C()
{
  return sub_25A510530();
}

uint64_t sub_25A3E5D04@<X0>(char *a1@<X8>)
{
  return sub_25A3E6010(a1);
}

void sub_25A3E5D10(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1717658988;
  if (*v1) {
    uint64_t v2 = 0x72657070617277;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_25A3E5D48()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
  uint64_t v5 = v4;
  uint64_t v7 = v0[8];
  uint64_t v6 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v7, v6);
  uint64_t v10 = v8;
  if (v5)
  {
    if (v8)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_25A511AC0;
      uint64_t v12 = MEMORY[0x263F8D310];
      *(void *)(v11 + 56) = MEMORY[0x263F8D310];
      unint64_t v13 = sub_25A3DF94C();
      *(void *)(v11 + 32) = v3;
      *(void *)(v11 + 40) = v5;
      *(void *)(v11 + 96) = v12;
      *(void *)(v11 + 104) = v13;
      *(void *)(v11 + 64) = v13;
      *(void *)(v11 + 72) = v9;
      *(void *)(v11 + 80) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_25A50EC50();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      return v3;
    }
  }
  return v9;
}

uint64_t sub_25A3E5E90(char *a1, char *a2)
{
  return sub_25A4D6314(*a1, *a2);
}

uint64_t sub_25A3E5E9C()
{
  return sub_25A510530();
}

uint64_t sub_25A3E5F1C()
{
  sub_25A50ED30();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A3E5F88()
{
  return sub_25A510530();
}

uint64_t sub_25A3E6004@<X0>(char *a1@<X8>)
{
  return sub_25A3E6010(a1);
}

uint64_t sub_25A3E6010@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25A510190();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_25A3E606C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1852399981;
  if (*v1) {
    uint64_t v2 = 0x69796C7265646E75;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xEA0000000000676ELL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_25A3E60A8()
{
  if (*v0) {
    return 0x69796C7265646E75;
  }
  else {
    return 1852399981;
  }
}

uint64_t sub_25A3E60E0(void *a1)
{
  char v10 = 0;
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 112))(&v11, v2, v3);
  char v4 = a1 + 5;
  uint64_t v6 = a1[8];
  uint64_t v5 = a1[9];
  __swift_project_boxed_opaque_existential_1(v4, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 112))(&v9, v6, v5);
  uint64_t v7 = sub_25A3E61E0(0x707954726F727265, 0xE900000000000065, 1u, 0, v11, 1, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_25A3E61E0(uint64_t a1, uint64_t a2, unsigned __int8 a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  int v13 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  uint64_t v15 = inited;
  *(_OWORD *)(inited + 16) = xmmword_25A511AD0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  if (v13 == 2)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    *(void *)(inited + 64) = 0;
  }
  else
  {
    if (v13) {
      uint64_t v16 = 0x72657070617277;
    }
    else {
      uint64_t v16 = 1717658988;
    }
    if (v13) {
      unint64_t v17 = 0xE700000000000000;
    }
    else {
      unint64_t v17 = 0xE400000000000000;
    }
    uint64_t v19 = &protocol witness table for String;
    uint64_t v18 = MEMORY[0x263F8D310];
  }
  unint64_t v20 = 0xEA0000000000676ELL;
  uint64_t v21 = 0x69796C7265646E75;
  *(void *)(inited + 48) = v16;
  *(void *)(inited + 56) = v17;
  *(void *)(inited + 72) = v18;
  *(void *)(inited + 80) = v19;
  if (a4) {
    uint64_t v22 = 0x69796C7265646E75;
  }
  else {
    uint64_t v22 = 1852399981;
  }
  unint64_t v23 = 0xE400000000000000;
  if (a4) {
    unint64_t v23 = 0xEA0000000000676ELL;
  }
  *(void *)(inited + 88) = v22;
  *(void *)(inited + 96) = v23;
  if (a5)
  {
    uint64_t v24 = &protocol witness table for PropertyList;
    unint64_t v25 = &type metadata for PropertyList;
    uint64_t v26 = a5;
  }
  else
  {
    uint64_t v26 = 0;
    unint64_t v25 = 0;
    uint64_t v24 = 0;
    *(void *)(inited + 112) = 0;
    *(void *)(inited + 120) = 0;
  }
  *(void *)(inited + 104) = v26;
  *(void *)(inited + 128) = v25;
  *(void *)(inited + 136) = v24;
  if ((a6 & 1) == 0)
  {
    uint64_t v21 = 1852399981;
    unint64_t v20 = 0xE400000000000000;
  }
  *(void *)(inited + 144) = v21;
  *(void *)(inited + 152) = v20;
  if (a7)
  {
    char v27 = &protocol witness table for PropertyList;
    uint64_t v28 = &type metadata for PropertyList;
    uint64_t v29 = a7;
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v28 = 0;
    char v27 = 0;
    *(void *)(inited + 168) = 0;
    *(void *)(inited + 176) = 0;
  }
  *(void *)(inited + 160) = v29;
  *(void *)(inited + 184) = v28;
  *(void *)(inited + 192) = v27;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v30 = sub_25A392B24(v15);
  uint64_t v31 = sub_25A44B148(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t sub_25A3E63DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  char v10 = &type metadata for UnderlyingErrorWrapper.Key;
  uint64_t v11 = &off_27082F980;
  LOBYTE(v9) = 0;
  sub_25A3E67B8(&v9, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  char v10 = &type metadata for UnderlyingErrorWrapper.Key;
  uint64_t v11 = &off_27082F980;
  LOBYTE(v9) = 1;
  sub_25A3E67B8(&v9, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)&v8[0];
  unarchiveHumanReadableError(from:)(&v9, v8);
  swift_bridgeObjectRelease();
  uint64_t v7 = v5;
  unarchiveHumanReadableError(from:)(v8, &v7);
  swift_bridgeObjectRelease();
  sub_25A3C85D8(&v9, a2);
  return sub_25A3C85D8(v8, a2 + 40);
}

double sub_25A3E6510(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  if (!*(void *)(a2 + 16) || (unint64_t v9 = sub_25A409670(v7, v8), (v10 & 1) == 0))
  {
    long long v15 = 0u;
    long long v16 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  sub_25A3937CC(*(void *)(a2 + 56) + 32 * v9, (uint64_t)&v15);
  swift_bridgeObjectRelease();
  if (!*((void *)&v16 + 1))
  {
LABEL_6:
    sub_25A384BCC((uint64_t)&v15, &qword_26A416C28);
    sub_25A3ECF40();
    swift_allocError();
    int v13 = v12;
    *uint64_t v12 = a2;
    sub_25A3990F8((uint64_t)a1, (uint64_t)(v12 + 1));
    *((unsigned char *)v13 + 112) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return v2;
  }
  sub_25A3936C4(&v15, v17);
  sub_25A3EA994((uint64_t)v17, (uint64_t)a1, a2);
  double v2 = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v2;
}

uint64_t sub_25A3E6668(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (!*(void *)(a2 + 16) || (unint64_t v8 = sub_25A409670(v6, v7), (v9 & 1) == 0))
  {
    long long v13 = 0u;
    long long v14 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  sub_25A3937CC(*(void *)(a2 + 56) + 32 * v8, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  if (!*((void *)&v14 + 1))
  {
LABEL_6:
    sub_25A384BCC((uint64_t)&v13, &qword_26A416C28);
    sub_25A3ECF40();
    swift_allocError();
    double v11 = v10;
    *char v10 = a2;
    sub_25A3990F8((uint64_t)a1, (uint64_t)(v10 + 1));
    *((unsigned char *)v11 + 112) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return a2;
  }
  sub_25A3936C4(&v13, v15);
  a2 = sub_25A3EAA90((uint64_t)v15, (uint64_t)a1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return a2;
}

uint64_t sub_25A3E67B8(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (*(void *)(a2 + 16) && (unint64_t v8 = sub_25A409670(v6, v7), (v9 & 1) != 0))
  {
    sub_25A3937CC(*(void *)(a2 + 56) + 32 * v8, (uint64_t)&v13);
    swift_bridgeObjectRelease();
    if (*((void *)&v14 + 1))
    {
      sub_25A3936C4(&v13, v15);
      sub_25A3EAF4C((uint64_t)v15, (uint64_t)a1, a2);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    }
  }
  else
  {
    long long v13 = 0u;
    long long v14 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_25A384BCC((uint64_t)&v13, &qword_26A416C28);
  sub_25A3ECF40();
  swift_allocError();
  uint64_t v12 = v11;
  *double v11 = a2;
  sub_25A3990F8((uint64_t)a1, (uint64_t)(v11 + 1));
  *((unsigned char *)v12 + 112) = 0;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t sub_25A3E690C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (!*(void *)(a2 + 16) || (unint64_t v8 = sub_25A409670(v6, v7), (v9 & 1) == 0))
  {
    long long v13 = 0u;
    long long v14 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  sub_25A3937CC(*(void *)(a2 + 56) + 32 * v8, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  if (!*((void *)&v14 + 1))
  {
LABEL_6:
    sub_25A384BCC((uint64_t)&v13, &qword_26A416C28);
    sub_25A3ECF40();
    swift_allocError();
    double v11 = v10;
    *char v10 = a2;
    sub_25A3990F8((uint64_t)a1, (uint64_t)(v10 + 1));
    *((unsigned char *)v11 + 112) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return a2;
  }
  sub_25A3936C4(&v13, v15);
  a2 = sub_25A3EAE50((uint64_t)v15, (uint64_t)a1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return a2;
}

uint64_t sub_25A3E6A64@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  if (*(void *)(a2 + 16) && (unint64_t v10 = sub_25A409670(v8, v9), (v11 & 1) != 0))
  {
    sub_25A3937CC(*(void *)(a2 + 56) + 32 * v10, (uint64_t)&v15);
    swift_bridgeObjectRelease();
    if (*((void *)&v16 + 1))
    {
      sub_25A3936C4(&v15, v17);
      sub_25A3EB0E8((uint64_t)v17, (uint64_t)a1, a2, a3);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    }
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_25A384BCC((uint64_t)&v15, &qword_26A416C28);
  sub_25A3ECF40();
  swift_allocError();
  long long v14 = v13;
  *long long v13 = a2;
  sub_25A3990F8((uint64_t)a1, (uint64_t)(v13 + 1));
  *((unsigned char *)v14 + 112) = 0;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t sub_25A3E6BB8(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  if (!*(void *)(a2 + 16) || (unint64_t v9 = sub_25A409670(v7, v8), (v10 & 1) == 0))
  {
    long long v21 = 0u;
    long long v22 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_25A3937CC(*(void *)(a2 + 56) + 32 * v9, (uint64_t)&v21);
  swift_bridgeObjectRelease();
  if (!*((void *)&v22 + 1))
  {
LABEL_7:
    sub_25A384BCC((uint64_t)&v21, &qword_26A416C28);
    sub_25A3ECF40();
    swift_allocError();
    long long v14 = v13;
    *long long v13 = a2;
    sub_25A3990F8((uint64_t)a1, (uint64_t)(v13 + 1));
    *((unsigned char *)v14 + 112) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return a2;
  }
  sub_25A3936C4(&v21, v23);
  uint64_t v11 = sub_25A3EAE50((uint64_t)v23, (uint64_t)a1, a2);
  if (!v2)
  {
    a2 = v11;
    uint64_t v16 = v12;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_25A510190();
    swift_bridgeObjectRelease();
    if (v17)
    {
      if (v17 != 1)
      {
        sub_25A3ECF40();
        swift_allocError();
        uint64_t v19 = v18;
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417770);
        *(void *)uint64_t v19 = &type metadata for ErrorType;
        *(void *)(v19 + 56) = MEMORY[0x263F8D310];
        *(void *)(v19 + 24) = v20;
        *(void *)(v19 + 32) = a2;
        *(void *)(v19 + 40) = v16;
        *(unsigned char *)(v19 + 112) = 3;
        swift_willThrow();
        goto LABEL_5;
      }
      a2 = 1;
    }
    else
    {
      a2 = 0;
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    return a2;
  }
LABEL_5:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return a2;
}

uint64_t unarchiveHumanReadableError(from:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  *((void *)&v26 + 1) = MEMORY[0x263F8D310];
  *(void *)&long long v27 = &protocol witness table for String;
  uint64_t v24 = 0x707954726F727265;
  unint64_t v25 = 0xE900000000000065;
  char v5 = sub_25A3E6BB8(&v24, v4);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  char v7 = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  if (v7)
  {
    a2[3] = (uint64_t)&type metadata for UnderlyingErrorWrapper;
    a2[4] = sub_25A3EB6F4();
    uint64_t v19 = (_OWORD *)swift_allocObject();
    *a2 = (uint64_t)v19;
    uint64_t v35 = v4;
    swift_bridgeObjectRetain();
    uint64_t result = sub_25A3E63DC(&v35, (uint64_t)v36);
    long long v20 = v36[3];
    long long v21 = v36[4];
    long long v23 = v36[0];
    long long v22 = v36[1];
    void v19[3] = v36[2];
    v19[4] = v20;
    v19[5] = v21;
    v19[1] = v23;
    _OWORD v19[2] = v22;
  }
  else
  {
    a2[3] = (uint64_t)&type metadata for RemoteHumanReadableError;
    a2[4] = sub_25A3EB860();
    uint64_t v8 = swift_allocObject();
    *a2 = v8;
    *(void *)&v36[0] = v4;
    swift_bridgeObjectRetain();
    uint64_t result = sub_25A3E8B14((uint64_t *)v36, (uint64_t)&v24);
    unint64_t v9 = v25;
    uint64_t v10 = v30;
    char v11 = v31;
    char v12 = v32;
    char v13 = v33;
    char v14 = v34;
    long long v15 = v26;
    long long v16 = v27;
    long long v17 = v28;
    long long v18 = v29;
    *(void *)(v8 + 16) = v24;
    *(void *)(v8 + 24) = v9;
    *(_OWORD *)(v8 + 32) = v15;
    *(_OWORD *)(v8 + 48) = v16;
    *(_OWORD *)(v8 + 64) = v17;
    *(_OWORD *)(v8 + 80) = v18;
    *(void *)(v8 + 96) = v10;
    *(unsigned char *)(v8 + 104) = v11;
    *(unsigned char *)(v8 + 105) = v12;
    *(unsigned char *)(v8 + 106) = v13;
    *(unsigned char *)(v8 + 107) = v14;
  }
  return result;
}

unint64_t sub_25A3E6F78(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x756C615668676968;
      break;
    case 2:
      unint64_t result = 0x65756C6156776F6CLL;
      break;
    case 3:
      unint64_t result = 0x6E6F697469646461;
      break;
    case 4:
      unint64_t result = 0xD000000000000015;
      break;
    case 5:
      unint64_t result = 0x736E6F6974706FLL;
      break;
    case 6:
      unint64_t result = 0x7974697265766573;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0x65766974614E7369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25A3E70C8()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  uint64_t v6 = v5;
  sub_25A3ECC30(v1, (uint64_t)v10);
  if (!v6)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
  }
  sub_25A3EB7DC((uint64_t)v10);
  return v4;
}

uint64_t sub_25A3E718C()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  uint64_t v6 = v5;
  sub_25A3ECC30(v1, (uint64_t)v10);
  if (!v6)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  }
  sub_25A3EB7DC((uint64_t)v10);
  return v4;
}

uint64_t sub_25A3E7254@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 56))(&v14, v4, v5);
  uint64_t v6 = v14;
  LOBYTE(v5) = v15;
  sub_25A3ECC30(v2, (uint64_t)v10);
  if (v5)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  }
  else
  {
    *(void *)a1 = v6;
    *(unsigned char *)(a1 + 8) = 0;
  }
  return sub_25A3EB7DC((uint64_t)v10);
}

uint64_t sub_25A3E7328@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 64))(&v14, v4, v5);
  int v6 = v14;
  sub_25A3ECC30(v2, (uint64_t)v10);
  if (v6 == 2)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
  }
  else
  {
    *a1 = v6;
  }
  return sub_25A3EB7DC((uint64_t)v10);
}

uint64_t sub_25A3E73F8(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 72))(a1, v3, v4);
  uint64_t v6 = v1[8];
  uint64_t v5 = v1[9];
  __swift_project_boxed_opaque_existential_1(v1 + 5, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 72))(a1, v6, v5);
}

uint64_t sub_25A3E7494()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 80))(v2, v3);
  sub_25A3ECC30(v1, (uint64_t)v9);
  if (v4)
  {
    char v5 = 1;
  }
  else
  {
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v6, v7);
  }
  sub_25A3EB7DC((uint64_t)v9);
  return v5 & 1;
}

uint64_t sub_25A3E7554()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v2);
  sub_25A50EDA0();
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 88))(v4, v3);
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_25A3E7610()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v2) & 1;
}

uint64_t sub_25A3E7668()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 104))(v1, v2);
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v3);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 104))(v3, v4);
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 2105468;
  v5._object = (void *)0xE300000000000000;
  String.prefixingEachLine(with:startingOnLine:)(v5, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_25A3E77A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_25A3E60E0(v1);
  uint64_t v4 = sub_25A3EB380(v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v4;
  return result;
}

uint64_t sub_25A3E77F4()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(v1, v2) & 1;
}

uint64_t sub_25A3E784C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3E63DC(a1, a2);
}

uint64_t sub_25A3E7868(char *a1, char *a2)
{
  return sub_25A4D6004(*a1, *a2);
}

uint64_t sub_25A3E7874()
{
  return sub_25A510530();
}

uint64_t sub_25A3E78BC()
{
  return sub_25A4D6638();
}

uint64_t sub_25A3E78C4()
{
  return sub_25A510530();
}

uint64_t sub_25A3E7908@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25A3ECFAC();
  *a1 = result;
  return result;
}

unint64_t sub_25A3E7938@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_25A3E6F78(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_25A3E7964()
{
  return sub_25A3E6F78(*v0);
}

uint64_t sub_25A3E796C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)a1;
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 80);
  char v7 = *(unsigned char *)(a1 + 88);
  char v8 = *(unsigned char *)(a1 + 89);
  char v9 = *(unsigned char *)(a1 + 90);
  char v10 = *(unsigned char *)(a1 + 91);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_25A3E7AD4(0, v15, v1, 1, v16, v2, 2, v17, v3, 3, v14, v4, 4, v13, v5, 5, v6, v7, 6,
          v8,
          7,
          v9,
          8,
          v10,
          0x707954726F727265,
          0xE900000000000065,
          0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_25A3E7AD4(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A514740;
  unint64_t v34 = 0xD000000000000014;
  unint64_t v35 = 0x800000025A51D8B0;
  uint64_t v36 = inited;
  switch(a1)
  {
    case 1:
      unint64_t v34 = 0x756C615668676968;
      unint64_t v35 = 0xEE00656C74695465;
      break;
    case 2:
      unint64_t v34 = 0x65756C6156776F6CLL;
      unint64_t v35 = 0xED0000656C746954;
      break;
    case 3:
      unint64_t v34 = 0x6E6F697469646461;
      unint64_t v35 = 0xEE006F666E496C61;
      break;
    case 4:
      unint64_t v34 = 0xD000000000000015;
      unint64_t v35 = 0x800000025A51D900;
      break;
    case 5:
      unint64_t v35 = 0xE700000000000000;
      unint64_t v34 = 0x736E6F6974706FLL;
      break;
    case 6:
      unint64_t v35 = 0xE800000000000000;
      unint64_t v34 = 0x7974697265766573;
      break;
    case 7:
      unint64_t v35 = 0x800000025A51D930;
      unint64_t v34 = 0xD000000000000010;
      break;
    case 8:
      unint64_t v35 = 0xE800000000000000;
      unint64_t v34 = 0x65766974614E7369;
      break;
    default:
      break;
  }
  *(void *)(inited + 32) = v34;
  *(void *)(inited + 40) = v35;
  if (a3)
  {
    id v37 = &protocol witness table for String;
    uint64_t v38 = MEMORY[0x263F8D310];
  }
  else
  {
    a2 = 0;
    uint64_t v38 = 0;
    id v37 = 0;
    *(void *)(inited + 64) = 0;
  }
  *(void *)(inited + 48) = a2;
  *(void *)(inited + 56) = a3;
  unint64_t v39 = 0xD000000000000014;
  unint64_t v40 = 0x800000025A51D8B0;
  *(void *)(inited + 72) = v38;
  *(void *)(inited + 80) = v37;
  switch(a4)
  {
    case 1:
      uint64_t v41 = 0x756C615668676968;
      uint64_t v42 = 0x656C74695465;
      goto LABEL_18;
    case 2:
      strcpy((char *)(inited + 88), "lowValueTitle");
      *(_WORD *)(inited + 102) = -4864;
      if (!a6) {
        goto LABEL_19;
      }
      goto LABEL_28;
    case 3:
      uint64_t v41 = 0x6E6F697469646461;
      uint64_t v42 = 0x6F666E496C61;
LABEL_18:
      *(void *)(inited + 88) = v41;
      *(void *)(inited + 96) = v42 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      if (!a6) {
        goto LABEL_19;
      }
      goto LABEL_28;
    case 4:
      *(void *)(inited + 88) = 0xD000000000000015;
      *(void *)(inited + 96) = 0x800000025A51D900;
      if (!a6) {
        goto LABEL_19;
      }
      goto LABEL_28;
    case 5:
      *(void *)(inited + 88) = 0x736E6F6974706FLL;
      *(void *)(inited + 96) = 0xE700000000000000;
      if (!a6) {
        goto LABEL_19;
      }
      goto LABEL_28;
    case 6:
      *(void *)(inited + 88) = 0x7974697265766573;
      *(void *)(inited + 96) = 0xE800000000000000;
      if (!a6) {
        goto LABEL_19;
      }
      goto LABEL_28;
    case 7:
      unint64_t v40 = 0x800000025A51D930;
      unint64_t v39 = 0xD000000000000010;
      goto LABEL_27;
    case 8:
      *(void *)(inited + 88) = 0x65766974614E7369;
      *(void *)(inited + 96) = 0xE800000000000000;
      if (!a6) {
        goto LABEL_19;
      }
      goto LABEL_28;
    default:
LABEL_27:
      *(void *)(inited + 88) = v39;
      *(void *)(inited + 96) = v40;
      if (a6)
      {
LABEL_28:
        uint64_t v45 = &protocol witness table for String;
        uint64_t v44 = MEMORY[0x263F8D310];
        uint64_t v43 = a6;
      }
      else
      {
LABEL_19:
        a5 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        *(void *)(inited + 120) = 0;
      }
      *(void *)(inited + 104) = a5;
      *(void *)(inited + 112) = v43;
      unint64_t v46 = 0xD000000000000014;
      unint64_t v47 = 0x800000025A51D8B0;
      *(void *)(inited + 128) = v44;
      *(void *)(inited + 136) = v45;
      switch(a7)
      {
        case 1:
          uint64_t v48 = 0x756C615668676968;
          uint64_t v49 = 0x656C74695465;
          goto LABEL_36;
        case 2:
          strcpy((char *)(inited + 144), "lowValueTitle");
          *(_WORD *)(inited + 158) = -4864;
          if (!a9) {
            goto LABEL_37;
          }
          goto LABEL_46;
        case 3:
          uint64_t v48 = 0x6E6F697469646461;
          uint64_t v49 = 0x6F666E496C61;
LABEL_36:
          *(void *)(inited + 144) = v48;
          *(void *)(inited + 152) = v49 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          if (!a9) {
            goto LABEL_37;
          }
          goto LABEL_46;
        case 4:
          *(void *)(inited + 144) = 0xD000000000000015;
          *(void *)(inited + 152) = 0x800000025A51D900;
          if (!a9) {
            goto LABEL_37;
          }
          goto LABEL_46;
        case 5:
          *(void *)(inited + 144) = 0x736E6F6974706FLL;
          *(void *)(inited + 152) = 0xE700000000000000;
          if (!a9) {
            goto LABEL_37;
          }
          goto LABEL_46;
        case 6:
          *(void *)(inited + 144) = 0x7974697265766573;
          *(void *)(inited + 152) = 0xE800000000000000;
          if (!a9) {
            goto LABEL_37;
          }
          goto LABEL_46;
        case 7:
          unint64_t v47 = 0x800000025A51D930;
          unint64_t v46 = 0xD000000000000010;
          goto LABEL_45;
        case 8:
          *(void *)(inited + 144) = 0x65766974614E7369;
          *(void *)(inited + 152) = 0xE800000000000000;
          if (!a9) {
            goto LABEL_37;
          }
          goto LABEL_46;
        default:
LABEL_45:
          *(void *)(inited + 144) = v46;
          *(void *)(inited + 152) = v47;
          if (a9)
          {
LABEL_46:
            long long v53 = &protocol witness table for String;
            uint64_t v52 = MEMORY[0x263F8D310];
            uint64_t v51 = a9;
            uint64_t v50 = a8;
          }
          else
          {
LABEL_37:
            uint64_t v50 = 0;
            uint64_t v51 = 0;
            uint64_t v52 = 0;
            long long v53 = 0;
            *(void *)(inited + 176) = 0;
          }
          *(void *)(inited + 160) = v50;
          *(void *)(inited + 168) = v51;
          unint64_t v54 = 0xD000000000000014;
          unint64_t v55 = 0x800000025A51D8B0;
          *(void *)(inited + 184) = v52;
          *(void *)(inited + 192) = v53;
          switch(a10)
          {
            case 1:
              uint64_t v56 = 0x756C615668676968;
              uint64_t v57 = 0x656C74695465;
              goto LABEL_54;
            case 2:
              strcpy((char *)(inited + 200), "lowValueTitle");
              *(_WORD *)(inited + 214) = -4864;
              if (!a12) {
                goto LABEL_55;
              }
              goto LABEL_64;
            case 3:
              uint64_t v56 = 0x6E6F697469646461;
              uint64_t v57 = 0x6F666E496C61;
LABEL_54:
              *(void *)(inited + 200) = v56;
              *(void *)(inited + 208) = v57 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
              if (!a12) {
                goto LABEL_55;
              }
              goto LABEL_64;
            case 4:
              *(void *)(inited + 200) = 0xD000000000000015;
              *(void *)(inited + 208) = 0x800000025A51D900;
              if (!a12) {
                goto LABEL_55;
              }
              goto LABEL_64;
            case 5:
              *(void *)(inited + 200) = 0x736E6F6974706FLL;
              *(void *)(inited + 208) = 0xE700000000000000;
              if (!a12) {
                goto LABEL_55;
              }
              goto LABEL_64;
            case 6:
              *(void *)(inited + 200) = 0x7974697265766573;
              *(void *)(inited + 208) = 0xE800000000000000;
              if (!a12) {
                goto LABEL_55;
              }
              goto LABEL_64;
            case 7:
              unint64_t v55 = 0x800000025A51D930;
              unint64_t v54 = 0xD000000000000010;
              goto LABEL_63;
            case 8:
              *(void *)(inited + 200) = 0x65766974614E7369;
              *(void *)(inited + 208) = 0xE800000000000000;
              if (!a12) {
                goto LABEL_55;
              }
              goto LABEL_64;
            default:
LABEL_63:
              *(void *)(inited + 200) = v54;
              *(void *)(inited + 208) = v55;
              if (a12)
              {
LABEL_64:
                uint64_t v61 = &protocol witness table for String;
                uint64_t v60 = MEMORY[0x263F8D310];
                uint64_t v59 = a12;
                uint64_t v58 = a11;
              }
              else
              {
LABEL_55:
                uint64_t v58 = 0;
                uint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v61 = 0;
                *(void *)(inited + 232) = 0;
              }
              *(void *)(inited + 216) = v58;
              *(void *)(inited + 224) = v59;
              unint64_t v62 = 0xD000000000000014;
              unint64_t v63 = 0x800000025A51D8B0;
              *(void *)(inited + 240) = v60;
              *(void *)(inited + 248) = v61;
              switch(a13)
              {
                case 1:
                  uint64_t v64 = 0x756C615668676968;
                  uint64_t v65 = 0x656C74695465;
                  goto LABEL_72;
                case 2:
                  strcpy((char *)(inited + 256), "lowValueTitle");
                  *(_WORD *)(inited + 270) = -4864;
                  if (!a15) {
                    goto LABEL_73;
                  }
                  goto LABEL_82;
                case 3:
                  uint64_t v64 = 0x6E6F697469646461;
                  uint64_t v65 = 0x6F666E496C61;
LABEL_72:
                  *(void *)(inited + 256) = v64;
                  *(void *)(inited + 264) = v65 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
                  if (!a15) {
                    goto LABEL_73;
                  }
                  goto LABEL_82;
                case 4:
                  *(void *)(inited + 256) = 0xD000000000000015;
                  *(void *)(inited + 264) = 0x800000025A51D900;
                  if (!a15) {
                    goto LABEL_73;
                  }
                  goto LABEL_82;
                case 5:
                  *(void *)(inited + 256) = 0x736E6F6974706FLL;
                  *(void *)(inited + 264) = 0xE700000000000000;
                  if (!a15) {
                    goto LABEL_73;
                  }
                  goto LABEL_82;
                case 6:
                  *(void *)(inited + 256) = 0x7974697265766573;
                  *(void *)(inited + 264) = 0xE800000000000000;
                  if (!a15) {
                    goto LABEL_73;
                  }
                  goto LABEL_82;
                case 7:
                  unint64_t v63 = 0x800000025A51D930;
                  unint64_t v62 = 0xD000000000000010;
                  goto LABEL_81;
                case 8:
                  *(void *)(inited + 256) = 0x65766974614E7369;
                  *(void *)(inited + 264) = 0xE800000000000000;
                  if (!a15) {
                    goto LABEL_73;
                  }
                  goto LABEL_82;
                default:
LABEL_81:
                  *(void *)(inited + 256) = v62;
                  *(void *)(inited + 264) = v63;
                  if (a15)
                  {
LABEL_82:
                    uint64_t v69 = &protocol witness table for String;
                    uint64_t v68 = MEMORY[0x263F8D310];
                    uint64_t v67 = a15;
                    uint64_t v66 = a14;
                  }
                  else
                  {
LABEL_73:
                    uint64_t v66 = 0;
                    uint64_t v67 = 0;
                    uint64_t v68 = 0;
                    uint64_t v69 = 0;
                    *(void *)(inited + 288) = 0;
                  }
                  *(void *)(inited + 272) = v66;
                  *(void *)(inited + 280) = v67;
                  unint64_t v70 = 0xD000000000000014;
                  unint64_t v71 = 0x800000025A51D8B0;
                  *(void *)(inited + 296) = v68;
                  *(void *)(inited + 304) = v69;
                  switch(a16)
                  {
                    case 1:
                      unint64_t v70 = 0x756C615668676968;
                      unint64_t v71 = 0xEE00656C74695465;
                      break;
                    case 2:
                      unint64_t v70 = 0x65756C6156776F6CLL;
                      unint64_t v71 = 0xED0000656C746954;
                      break;
                    case 3:
                      unint64_t v70 = 0x6E6F697469646461;
                      unint64_t v71 = 0xEE006F666E496C61;
                      break;
                    case 4:
                      unint64_t v70 = 0xD000000000000015;
                      unint64_t v71 = 0x800000025A51D900;
                      break;
                    case 5:
                      unint64_t v71 = 0xE700000000000000;
                      unint64_t v70 = 0x736E6F6974706FLL;
                      break;
                    case 6:
                      unint64_t v71 = 0xE800000000000000;
                      unint64_t v70 = 0x7974697265766573;
                      break;
                    case 7:
                      unint64_t v71 = 0x800000025A51D930;
                      unint64_t v70 = 0xD000000000000010;
                      break;
                    case 8:
                      unint64_t v71 = 0xE800000000000000;
                      unint64_t v70 = 0x65766974614E7369;
                      break;
                    default:
                      break;
                  }
                  *(void *)(inited + 312) = v70;
                  *(void *)(inited + 320) = v71;
                  if (a18)
                  {
                    uint64_t v73 = 0;
                    uint64_t v72 = 0;
                    a17 = 0;
                    *(void *)(inited + 336) = 0;
                    *(void *)(inited + 344) = 0;
                  }
                  else
                  {
                    uint64_t v72 = &protocol witness table for Int;
                    uint64_t v73 = MEMORY[0x263F8D6C8];
                  }
                  *(void *)(inited + 352) = v73;
                  *(void *)(inited + 360) = v72;
                  unint64_t v75 = 0xD000000000000014;
                  unint64_t v76 = 0x800000025A51D8B0;
                  *(void *)(inited + 328) = a17;
                  switch(a19)
                  {
                    case 1:
                      unint64_t v75 = 0x756C615668676968;
                      unint64_t v76 = 0xEE00656C74695465;
                      break;
                    case 2:
                      unint64_t v75 = 0x65756C6156776F6CLL;
                      unint64_t v76 = 0xED0000656C746954;
                      break;
                    case 3:
                      unint64_t v75 = 0x6E6F697469646461;
                      unint64_t v76 = 0xEE006F666E496C61;
                      break;
                    case 4:
                      unint64_t v75 = 0xD000000000000015;
                      unint64_t v76 = 0x800000025A51D900;
                      break;
                    case 5:
                      unint64_t v76 = 0xE700000000000000;
                      unint64_t v75 = 0x736E6F6974706FLL;
                      break;
                    case 6:
                      unint64_t v76 = 0xE800000000000000;
                      unint64_t v75 = 0x7974697265766573;
                      break;
                    case 7:
                      unint64_t v76 = 0x800000025A51D930;
                      unint64_t v75 = 0xD000000000000010;
                      break;
                    case 8:
                      unint64_t v76 = 0xE800000000000000;
                      unint64_t v75 = 0x65766974614E7369;
                      break;
                    default:
                      break;
                  }
                  *(void *)(inited + 368) = v75;
                  *(void *)(inited + 376) = v76;
                  if (a20 == 2)
                  {
                    uint64_t v77 = 0;
                    unint64_t v78 = 0;
                    uint64_t v79 = 0;
                    uint64_t v80 = 0;
                    *(void *)(inited + 400) = 0;
                  }
                  else
                  {
                    uint64_t v77 = 1868983913;
                    if ((a20 & 1) == 0) {
                      uint64_t v77 = 0x726F727265;
                    }
                    unint64_t v78 = 0xE400000000000000;
                    if ((a20 & 1) == 0) {
                      unint64_t v78 = 0xE500000000000000;
                    }
                    uint64_t v80 = &protocol witness table for String;
                    uint64_t v79 = MEMORY[0x263F8D310];
                  }
                  *(void *)(inited + 384) = v77;
                  *(void *)(inited + 392) = v78;
                  unint64_t v81 = 0xD000000000000014;
                  unint64_t v82 = 0x800000025A51D8B0;
                  *(void *)(inited + 408) = v79;
                  *(void *)(inited + 416) = v80;
                  switch(a21)
                  {
                    case 1:
                      unint64_t v81 = 0x756C615668676968;
                      unint64_t v82 = 0xEE00656C74695465;
                      break;
                    case 2:
                      unint64_t v81 = 0x65756C6156776F6CLL;
                      unint64_t v82 = 0xED0000656C746954;
                      break;
                    case 3:
                      unint64_t v81 = 0x6E6F697469646461;
                      unint64_t v82 = 0xEE006F666E496C61;
                      break;
                    case 4:
                      unint64_t v81 = 0xD000000000000015;
                      unint64_t v82 = 0x800000025A51D900;
                      break;
                    case 5:
                      unint64_t v82 = 0xE700000000000000;
                      unint64_t v81 = 0x736E6F6974706FLL;
                      break;
                    case 6:
                      unint64_t v82 = 0xE800000000000000;
                      unint64_t v81 = 0x7974697265766573;
                      break;
                    case 7:
                      unint64_t v82 = 0x800000025A51D930;
                      unint64_t v81 = 0xD000000000000010;
                      break;
                    case 8:
                      unint64_t v82 = 0xE800000000000000;
                      unint64_t v81 = 0x65766974614E7369;
                      break;
                    default:
                      break;
                  }
                  unint64_t v83 = (void *)(inited + 440);
                  *(void *)(inited + 424) = v81;
                  *(void *)(inited + 432) = v82;
                  if (a22 == 2)
                  {
                    uint64_t v84 = 0;
                    uint64_t v85 = 0;
                    *unint64_t v83 = 0;
                    *(void *)(inited + 448) = 0;
                    *(void *)(inited + 456) = 0;
                  }
                  else
                  {
                    *(unsigned char *)unint64_t v83 = a22 & 1;
                    uint64_t v85 = &protocol witness table for Bool;
                    uint64_t v84 = MEMORY[0x263F8D4F8];
                  }
                  *(void *)(inited + 464) = v84;
                  *(void *)(inited + 472) = v85;
                  unint64_t v86 = 0xD000000000000014;
                  unint64_t v87 = 0x800000025A51D8B0;
                  switch(a23)
                  {
                    case 1:
                      unint64_t v86 = 0x756C615668676968;
                      unint64_t v87 = 0xEE00656C74695465;
                      break;
                    case 2:
                      unint64_t v86 = 0x65756C6156776F6CLL;
                      unint64_t v87 = 0xED0000656C746954;
                      break;
                    case 3:
                      unint64_t v86 = 0x6E6F697469646461;
                      unint64_t v87 = 0xEE006F666E496C61;
                      break;
                    case 4:
                      unint64_t v86 = 0xD000000000000015;
                      unint64_t v87 = 0x800000025A51D900;
                      break;
                    case 5:
                      unint64_t v87 = 0xE700000000000000;
                      unint64_t v86 = 0x736E6F6974706FLL;
                      break;
                    case 6:
                      unint64_t v87 = 0xE800000000000000;
                      unint64_t v86 = 0x7974697265766573;
                      break;
                    case 7:
                      unint64_t v87 = 0x800000025A51D930;
                      unint64_t v86 = 0xD000000000000010;
                      break;
                    case 8:
                      unint64_t v87 = 0xE800000000000000;
                      unint64_t v86 = 0x65766974614E7369;
                      break;
                    default:
                      break;
                  }
                  uint64_t v88 = (void *)(inited + 496);
                  *(void *)(inited + 480) = v86;
                  *(void *)(inited + 488) = v87;
                  if (a24 == 2)
                  {
                    uint64_t v89 = 0;
                    uint64_t v90 = 0;
                    *uint64_t v88 = 0;
                    *(void *)(inited + 504) = 0;
                    *(void *)(inited + 512) = 0;
                  }
                  else
                  {
                    *(unsigned char *)uint64_t v88 = a24 & 1;
                    uint64_t v90 = &protocol witness table for Bool;
                    uint64_t v89 = MEMORY[0x263F8D4F8];
                  }
                  *(void *)(inited + 520) = v89;
                  *(void *)(inited + 528) = v90;
                  *(void *)(inited + 536) = a25;
                  *(void *)(inited + 544) = a26;
                  if (a27 == 2)
                  {
                    uint64_t v91 = 0;
                    unint64_t v92 = 0;
                    uint64_t v93 = 0;
                    long long v94 = 0;
                    *(void *)(inited + 568) = 0;
                  }
                  else
                  {
                    uint64_t v91 = 1717658988;
                    if (a27) {
                      uint64_t v91 = 0x72657070617277;
                    }
                    unint64_t v92 = 0xE400000000000000;
                    if (a27) {
                      unint64_t v92 = 0xE700000000000000;
                    }
                    long long v94 = &protocol witness table for String;
                    uint64_t v93 = MEMORY[0x263F8D310];
                  }
                  *(void *)(inited + 552) = v91;
                  *(void *)(inited + 560) = v92;
                  *(void *)(inited + 576) = v93;
                  *(void *)(inited + 584) = v94;
                  swift_bridgeObjectRetain_n();
                  swift_bridgeObjectRetain_n();
                  swift_bridgeObjectRetain_n();
                  swift_bridgeObjectRetain_n();
                  swift_bridgeObjectRetain_n();
                  swift_bridgeObjectRetain_n();
                  unint64_t v95 = sub_25A392B24(v36);
                  uint64_t v96 = sub_25A44B148(v95);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  return v96;
              }
          }
      }
  }
}

uint64_t sub_25A3E8B14@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v30 = &type metadata for RemoteHumanReadableError.Key;
  LOBYTE(v28) = 0;
  uint64_t v5 = sub_25A3E8EB8(&v28, v4);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    return swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v7 = v5;
    unint64_t v8 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    if (v8)
    {
      if ((sub_25A50EE80() & 1) == 0)
      {
        uint64_t v28 = 0x5D65746F6D65525BLL;
        unint64_t v29 = 0xE900000000000020;
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
        unint64_t v7 = v28;
        unint64_t v8 = v29;
      }
    }
    else
    {
      unint64_t v8 = 0x800000025A51ECF0;
      unint64_t v7 = 0xD000000000000016;
    }
    uint64_t v30 = &type metadata for RemoteHumanReadableError.Key;
    char v31 = &off_27082F990;
    LOBYTE(v28) = 1;
    uint64_t v9 = sub_25A3E8EB8(&v28, v4);
    uint64_t v11 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    uint64_t v30 = &type metadata for RemoteHumanReadableError.Key;
    char v31 = &off_27082F990;
    LOBYTE(v28) = 2;
    uint64_t v24 = sub_25A3E8EB8(&v28, v4);
    uint64_t v25 = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    uint64_t v30 = &type metadata for RemoteHumanReadableError.Key;
    char v31 = &off_27082F990;
    LOBYTE(v28) = 3;
    uint64_t v22 = sub_25A3E8EB8(&v28, v4);
    uint64_t v23 = v13;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    uint64_t v30 = &type metadata for RemoteHumanReadableError.Key;
    char v31 = &off_27082F990;
    LOBYTE(v28) = 4;
    uint64_t v20 = sub_25A3E8EB8(&v28, v4);
    uint64_t v21 = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    uint64_t v30 = &type metadata for RemoteHumanReadableError.Key;
    char v31 = &off_27082F990;
    LOBYTE(v28) = 5;
    sub_25A3E8FDC(&v28, v4, (uint64_t)&v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    uint64_t v19 = v26;
    int v32 = v27;
    uint64_t v30 = &type metadata for RemoteHumanReadableError.Key;
    char v31 = &off_27082F990;
    LOBYTE(v28) = 6;
    sub_25A3E90FC(&v28, v4, &v33);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    char v18 = v33;
    uint64_t v30 = &type metadata for RemoteHumanReadableError.Key;
    char v31 = &off_27082F990;
    LOBYTE(v28) = 7;
    char v17 = sub_25A3E9220(&v28, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    uint64_t v30 = &type metadata for RemoteHumanReadableError.Key;
    char v31 = &off_27082F990;
    LOBYTE(v28) = 8;
    char v15 = sub_25A3E9220(&v28, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v9;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v24;
    *(void *)(a2 + 40) = v25;
    *(void *)(a2 + 48) = v22;
    *(void *)(a2 + 56) = v23;
    *(void *)(a2 + 64) = v20;
    *(void *)(a2 + 72) = v21;
    *(void *)(a2 + 80) = v19;
    *(unsigned char *)(a2 + 88) = v32;
    *(unsigned char *)(a2 + 89) = v18;
    *(unsigned char *)(a2 + 90) = (v17 == 2) | v17 & 1;
    *(unsigned char *)(a2 + 91) = v15 & 1;
  }
  return result;
}

uint64_t sub_25A3E8EB8(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  if (!*(void *)(a2 + 16) || (v9 = a2, unint64_t v10 = sub_25A409670(v7, v8), (v11 & 1) == 0))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_25A3937CC(*(void *)(a2 + 56) + 32 * v10, (uint64_t)&v14);
  swift_bridgeObjectRelease();
  if (!*((void *)&v15 + 1))
  {
LABEL_8:
    sub_25A384BCC((uint64_t)&v14, &qword_26A416C28);
    return 0;
  }
  sub_25A3936C4(&v14, v16);
  uint64_t v12 = sub_25A3EAE50((uint64_t)v16, (uint64_t)a1, a2);
  if (!v2) {
    uint64_t v9 = v12;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v9;
}

uint64_t sub_25A3E8FDC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  if (!*(void *)(a2 + 16) || (unint64_t v11 = sub_25A409670(v9, v10), (v12 & 1) == 0))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_25A3937CC(*(void *)(a2 + 56) + 32 * v11, (uint64_t)&v14);
  swift_bridgeObjectRelease();
  if (!*((void *)&v15 + 1))
  {
LABEL_7:
    uint64_t result = sub_25A384BCC((uint64_t)&v14, &qword_26A416C28);
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 1;
    return result;
  }
  sub_25A3936C4(&v14, v16);
  sub_25A3EAD4C((uint64_t)v16, (uint64_t)a1, a2, (void *)a3);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if (!v3) {
    *(unsigned char *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t sub_25A3E90FC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  if (!*(void *)(a2 + 16) || (unint64_t v11 = sub_25A409670(v9, v10), (v12 & 1) == 0))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_25A3937CC(*(void *)(a2 + 56) + 32 * v11, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  if (!*((void *)&v17 + 1))
  {
LABEL_8:
    uint64_t result = sub_25A384BCC((uint64_t)&v16, &qword_26A416C28);
    *a3 = 2;
    return result;
  }
  sub_25A3936C4(&v16, v18);
  uint64_t v13 = sub_25A3EAE50((uint64_t)v18, (uint64_t)a1, a2);
  if (!v3) {
    sub_25A446138(v13, v14, a3);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t sub_25A3E9220(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (*(void *)(a2 + 16) && (unint64_t v8 = sub_25A409670(v6, v7), (v9 & 1) != 0))
  {
    sub_25A3937CC(*(void *)(a2 + 56) + 32 * v8, (uint64_t)&v12);
    swift_bridgeObjectRelease();
    if (*((void *)&v13 + 1))
    {
      sub_25A3936C4(&v12, v14);
      char v10 = sub_25A3EAC48((uint64_t)v14, (uint64_t)a1, a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      return v10 & 1;
    }
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_25A384BCC((uint64_t)&v12, &qword_26A416C28);
  return 2;
}

uint64_t sub_25A3E9334()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_25A3E9364()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_25A3E9394()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_25A3E93C4(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 88);
  *(void *)a1 = *(void *)(v1 + 80);
  *(unsigned char *)(a1 + 8) = v2;
}

void sub_25A3E93D8(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 89);
}

uint64_t sub_25A3E93E4()
{
  return *(unsigned __int8 *)(v0 + 90);
}

uint64_t sub_25A3E93EC()
{
  return sub_25A3E265C();
}

uint64_t sub_25A3E9438@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = v1[3];
  long long v8[2] = v1[2];
  void v8[3] = v3;
  v9[0] = v1[4];
  *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)((char *)v1 + 76);
  long long v4 = v1[1];
  v8[0] = *v1;
  v8[1] = v4;
  sub_25A3ECC68((uint64_t)v8);
  uint64_t v5 = sub_25A3E796C((uint64_t)v8);
  uint64_t v6 = sub_25A3EB380(v5);
  swift_bridgeObjectRelease();
  uint64_t result = sub_25A3ECCD4((uint64_t)v8);
  *a1 = v6;
  return result;
}

uint64_t sub_25A3E94BC()
{
  return *(unsigned __int8 *)(v0 + 91);
}

uint64_t sub_25A3E94C4@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = v1[3];
  long long v8[2] = v1[2];
  void v8[3] = v3;
  v9[0] = v1[4];
  *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)((char *)v1 + 76);
  long long v4 = v1[1];
  v8[0] = *v1;
  v8[1] = v4;
  uint64_t v5 = sub_25A3E796C((uint64_t)v8);
  uint64_t v6 = sub_25A3EB380(v5);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v6;
  return result;
}

uint64_t sub_25A3E9538@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3E8B14(a1, a2);
}

uint64_t sub_25A3E9550()
{
  return 0;
}

uint64_t sub_25A3E95E8()
{
  return sub_25A5105D0();
}

uint64_t sub_25A3E95F4()
{
  return sub_25A3E2800();
}

uint64_t sub_25A3E95FC@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A3E42C4(a1);
}

void sub_25A3E9604(void *a1)
{
  long long v39 = xmmword_25A511AD0;
  uint64_t v2 = sub_25A50EC20();
  uint64_t v4 = v3;
  uint64_t v40 = v2;
  uint64_t v41 = v3;
  uint64_t v42 = sub_25A50EC20();
  uint64_t v43 = v5;
  uint64_t v30 = v5;
  uint64_t v44 = sub_25A50EC20();
  uint64_t v45 = v6;
  id v7 = objc_msgSend(a1, sel_domain);
  uint64_t v8 = sub_25A50EC20();
  uint64_t v10 = v9;

  uint64_t v34 = v8;
  uint64_t v35 = v10;
  sub_25A50EDA0();
  *(void *)&long long v32 = objc_msgSend(a1, sel_code);
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  uint64_t v11 = v42;
  uint64_t v37 = v34;
  uint64_t v38 = v10;
  id v12 = objc_msgSend(a1, sel_userInfo);
  uint64_t v13 = sub_25A50E8A0();

  int64_t v14 = 0;
  uint64_t v15 = *(void *)(v13 + 64);
  uint64_t v29 = v13 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v31 = (unint64_t)(v16 + 63) >> 6;
  if ((v17 & v15) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v19 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v20 = v19 | (v14 << 6);
LABEL_7:
  uint64_t v21 = *(void *)(v13 + 56);
  uint64_t v22 = (void *)(*(void *)(v13 + 48) + 16 * v20);
  uint64_t v23 = v22[1];
  *(void *)&long long v32 = *v22;
  *((void *)&v32 + 1) = v23;
  sub_25A3937CC(v21 + 32 * v20, (uint64_t)v33);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_25A39F4F8((uint64_t)&v32, (uint64_t)&v34, &qword_26A417720);
    uint64_t v27 = v35;
    if (!v35)
    {
      swift_release();
      swift_arrayDestroy();
      return;
    }
    if ((uint64_t v28 = v34, sub_25A3936C4(&v36, &v32), v2 == v28) && v4 == v27
      || (sub_25A510370() & 1) != 0
      || v11 == v28 && v30 == v27
      || (sub_25A510370() & 1) != 0
      || v44 == v28 && v45 == v27
      || (sub_25A510370() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_6;
      }
    }
    else
    {
      sub_25A50EDA0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      sub_25A50FFB0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      if (v18) {
        goto LABEL_6;
      }
    }
LABEL_8:
    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v24 >= v31)
    {
      int64_t v26 = v14;
    }
    else
    {
      unint64_t v25 = *(void *)(v29 + 8 * v24);
      if (v25) {
        goto LABEL_11;
      }
      int64_t v26 = v14 + 1;
      if (v14 + 2 < v31)
      {
        unint64_t v25 = *(void *)(v29 + 8 * (v14 + 2));
        if (v25)
        {
          int64_t v24 = v14 + 2;
LABEL_11:
          unint64_t v18 = (v25 - 1) & v25;
          unint64_t v20 = __clz(__rbit64(v25)) + (v24 << 6);
          int64_t v14 = v24;
          goto LABEL_7;
        }
        int64_t v26 = v14 + 2;
        if (v14 + 3 < v31)
        {
          unint64_t v25 = *(void *)(v29 + 8 * (v14 + 3));
          if (v25)
          {
            int64_t v24 = v14 + 3;
            goto LABEL_11;
          }
          int64_t v24 = v14 + 4;
          int64_t v26 = v14 + 3;
          if (v14 + 4 < v31)
          {
            unint64_t v25 = *(void *)(v29 + 8 * v24);
            if (v25) {
              goto LABEL_11;
            }
            while (v31 - 5 != v14)
            {
              unint64_t v25 = *(void *)(v13 + 104 + 8 * v14++);
              if (v25)
              {
                int64_t v24 = v14 + 4;
                goto LABEL_11;
              }
            }
            int64_t v26 = v31 - 1;
          }
        }
      }
    }
    unint64_t v18 = 0;
    memset(v33, 0, sizeof(v33));
    int64_t v14 = v26;
    long long v32 = 0u;
  }
  __break(1u);
}

uint64_t sub_25A3E9AA4(void *a1)
{
  id v2 = objc_msgSend(a1, sel_domain);
  sub_25A50EC20();

  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  objc_msgSend(a1, sel_code);
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  return 0x2E726F727245534ELL;
}

uint64_t sub_25A3E9B80()
{
  id v1 = objc_msgSend(*v0, sel_localizedDescription);
  uint64_t v2 = sub_25A50EC20();

  return v2;
}

uint64_t sub_25A3E9BD8()
{
  id v1 = objc_msgSend(*v0, sel_localizedRecoverySuggestion);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_25A50EC20();

  return v3;
}

void sub_25A3E9C40()
{
  sub_25A3E9604(*v0);
}

uint64_t sub_25A3E9C48()
{
  return sub_25A3E9AA4(*v0);
}

uint64_t sub_25A3E9C50()
{
  return sub_25A3E2944(*v0);
}

uint64_t sub_25A3E9C58@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A3E4180(*v1, a1);
}

uint64_t sub_25A3E9C60@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(a1, sel_userInfo);
  uint64_t v4 = sub_25A50E8A0();

  if (!*(void *)(v4 + 16) || (unint64_t v5 = sub_25A409670(0xD000000000000014, 0x800000025A51EBF0), (v6 & 1) == 0))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_25A3937CC(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  if (!*((void *)&v10 + 1))
  {
LABEL_7:
    uint64_t result = sub_25A384BCC((uint64_t)&v9, &qword_26A416C28);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417658);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *(void *)&long long v9 = v8[0];
    unarchiveHumanReadableError(from:)((uint64_t *)&v9, v8);
    swift_bridgeObjectRelease();
    sub_25A39F4F8((uint64_t)v8, (uint64_t)&v9, &qword_26A417628);
    return sub_25A39F4F8((uint64_t)&v9, a2, &qword_26A417628);
  }
LABEL_8:
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t Error.errorTypeDescription.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v8((char *)&v17 - v9, v1, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415BF8);
  if (!swift_dynamicCast())
  {
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    sub_25A384BCC((uint64_t)&v17, &qword_26A417628);
    v8(v7, v1, a1);
LABEL_5:
    *((void *)&v18 + 1) = a1;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    v8((char *)boxed_opaque_existential_1, (uint64_t)v7, a1);
    __swift_project_boxed_opaque_existential_1(&v17, *((uint64_t *)&v18 + 1));
    swift_getDynamicType();
    uint64_t v12 = sub_25A5105D0();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    goto LABEL_6;
  }
  uint64_t v10 = *((void *)&v18 + 1);
  uint64_t v11 = v19;
  __swift_project_boxed_opaque_existential_1(&v17, *((uint64_t *)&v18 + 1));
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 88))(v10, v11);
  uint64_t v14 = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  v8(v7, v2, a1);
  if (!v14) {
    goto LABEL_5;
  }
LABEL_6:
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
  return v12;
}

PreviewsFoundationOS::UnhandledUnknownCaseError __swiftcall UnhandledUnknownCaseError.init()()
{
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t UnhandledUnknownCaseError.additionalInfo.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UnhandledUnknownCaseError.additionalInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*UnhandledUnknownCaseError.additionalInfo.modify())()
{
  return nullsub_1;
}

uint64_t UnhandledUnknownCaseError.additionalDiagnostics.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UnhandledUnknownCaseError.additionalDiagnostics.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*UnhandledUnknownCaseError.additionalDiagnostics.modify())()
{
  return nullsub_1;
}

uint64_t sub_25A3EA2BC(uint64_t a1)
{
  return sub_25A3EA2C8(a1);
}

uint64_t sub_25A3EA2C8(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  void v10[3] = a1;
  id v7 = (void *)swift_allocObject();
  v10[0] = v7;
  _OWORD v7[2] = v4;
  uint64_t v7[3] = v3;
  void v7[4] = v6;
  v7[5] = v5;
  __swift_project_boxed_opaque_existential_1(v10, a1);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_25A5105D0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v8;
}

uint64_t sub_25A3EA378()
{
  return sub_25A3E24D0(*v0, v0[1], v0[2], v0[3], (uint64_t)&type metadata for UnhandledUnknownCaseError);
}

uint64_t sub_25A3EA3A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v8 = v2[2];
  uint64_t v7 = v2[3];
  *((void *)&v17 + 1) = a1;
  uint64_t v9 = (void *)swift_allocObject();
  v16[0] = v9;
  _OWORD v9[2] = v6;
  v9[3] = v5;
  void v9[4] = v8;
  v9[5] = v7;
  __swift_project_boxed_opaque_existential_1(v16, a1);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_25A5105D0();
  uint64_t v12 = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  v16[0] = v10;
  v16[1] = v12;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = v6;
  uint64_t v20 = v5;
  uint64_t v21 = v8;
  uint64_t v22 = v7;
  uint64_t v23 = 0;
  char v24 = 1;
  __int16 v25 = 258;
  char v26 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_25A3E796C((uint64_t)v16);
  uint64_t v14 = sub_25A3EB380(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v14;
  return result;
}

uint64_t sub_25A3EA4EC()
{
  return sub_25A445DEC(*v0, v0[1], v0[2], v0[3]);
}

uint64_t LowValueError.lowValueTitle.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LowValueError.additionalInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LowValueError.additionalInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*LowValueError.additionalInfo.modify())()
{
  return nullsub_1;
}

uint64_t LowValueError.additionalDiagnostics.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LowValueError.additionalDiagnostics.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*LowValueError.additionalDiagnostics.modify())()
{
  return nullsub_1;
}

uint64_t LowValueError.isPotentialCrash.getter()
{
  return (*(unsigned char *)(v0 + 48) == 2) | *(unsigned char *)(v0 + 48) & 1u;
}

void __swiftcall LowValueError.init(_:isPotentialCrash:)(PreviewsFoundationOS::LowValueError *__return_ptr retstr, Swift::String _, Swift::Bool_optional isPotentialCrash)
{
  retstr->title = _;
  retstr->additionalInfo = 0u;
  retstr->additionalDiagnostics = 0u;
  retstr->potentialCrash = isPotentialCrash;
}

void sub_25A3EA664(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t sub_25A3EA674(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v7 = v1[5];
  char v9 = *((unsigned char *)v1 + 48);
  uint64_t v13[3] = a1;
  uint64_t v10 = swift_allocObject();
  v13[0] = v10;
  *(void *)(v10 + 16) = v4;
  *(void *)(v10 + 24) = v3;
  *(void *)(v10 + 32) = v6;
  *(void *)(v10 + 40) = v5;
  *(void *)(v10 + 48) = v8;
  *(void *)(v10 + 56) = v7;
  *(unsigned char *)(v10 + 64) = v9;
  __swift_project_boxed_opaque_existential_1(v13, a1);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_25A5105D0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return v11;
}

uint64_t sub_25A3EA748()
{
  return (*(unsigned char *)(v0 + 48) == 2) | *(unsigned char *)(v0 + 48) & 1u;
}

uint64_t sub_25A3EA760()
{
  return sub_25A3E2E2C();
}

uint64_t sub_25A3EA7A4@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A3E3EA4(a1);
}

uint64_t sub_25A3EA7E8(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  void v10[3] = a1;
  uint64_t v7 = (void *)swift_allocObject();
  v10[0] = v7;
  _OWORD v7[2] = v4;
  uint64_t v7[3] = v3;
  void v7[4] = v6;
  v7[5] = v5;
  __swift_project_boxed_opaque_existential_1(v10, a1);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_25A5105D0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v8;
}

uint64_t sub_25A3EA89C()
{
  return sub_25A3E3184(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_25A3EA8A8@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A3E3BF0(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_25A3EA8B4(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  char v6 = *(unsigned char *)(v1 + 24);
  void v10[3] = a1;
  uint64_t v7 = swift_allocObject();
  v10[0] = v7;
  *(void *)(v7 + 16) = v3;
  *(void *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v5;
  *(unsigned char *)(v7 + 40) = v6;
  __swift_project_boxed_opaque_existential_1(v10, a1);
  swift_getDynamicType();
  sub_25A3ECD94(v3, v4, v5, v6);
  uint64_t v8 = sub_25A5105D0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v8;
}

uint64_t sub_25A3EA974()
{
  return sub_25A3E2FFC(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_25A3EA984@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A3E3D54(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

uint64_t sub_25A3EA994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_25A3937CC(a1, (uint64_t)v10);
  uint64_t v6 = MEMORY[0x263F8EF38];
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    sub_25A3ECF40();
    swift_allocError();
    char v9 = v8;
    *uint64_t v8 = a3;
    sub_25A3990F8(a2, (uint64_t)(v8 + 1));
    sub_25A3937CC(a1, (uint64_t)(v9 + 6));
    v9[13] = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417758);
    v9[10] = v6;
    *((unsigned char *)v9 + 112) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_25A3EAA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417748);
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v9 = result;
    sub_25A3990F8(a2, (uint64_t)&v15);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = a3;
    sub_25A3C85D8(&v15, v10 + 24);
    uint64_t v11 = sub_25A3937CC(a1, (uint64_t)v14);
    MEMORY[0x270FA5388](v11);
    void v13[2] = sub_25A3ECF98;
    uint64_t v13[3] = v10;
    uint64_t v12 = *(void (**)(uint64_t *, uint64_t (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v7;
    uint64_t v17 = v9;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15);
    swift_bridgeObjectRetain();
    v12(v14, sub_25A3ECFA4, v13, v7, v9);
    swift_release();
    if (v3)
    {
      __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v15);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A417750);
      swift_dynamicCast();
      uint64_t v7 = sub_25A3ECFF8(v14[0]);
      swift_bridgeObjectRelease();
    }
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_25A3EAC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_25A3937CC(a1, (uint64_t)v11);
  uint64_t v6 = MEMORY[0x263F8D4F8];
  if (swift_dynamicCast())
  {
    char v7 = v11[47] & 1;
  }
  else
  {
    sub_25A3ECF40();
    swift_allocError();
    uint64_t v9 = v8;
    *uint64_t v8 = a3;
    sub_25A3990F8(a2, (uint64_t)(v8 + 1));
    sub_25A3937CC(a1, (uint64_t)(v9 + 6));
    v9[13] = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417760);
    v9[10] = v6;
    *((unsigned char *)v9 + 112) = 1;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  return v7 & 1;
}

uint64_t sub_25A3EAD4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_25A3937CC(a1, (uint64_t)v13);
  uint64_t v8 = MEMORY[0x263F8D6C8];
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *a4 = v12;
  }
  else
  {
    sub_25A3ECF40();
    swift_allocError();
    uint64_t v11 = v10;
    *uint64_t v10 = a3;
    sub_25A3990F8(a2, (uint64_t)(v10 + 1));
    sub_25A3937CC(a1, (uint64_t)(v11 + 6));
    v11[13] = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417768);
    v11[10] = v8;
    *((unsigned char *)v11 + 112) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_25A3EAE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_25A3937CC(a1, (uint64_t)v11);
  uint64_t v6 = MEMORY[0x263F8D310];
  if (swift_dynamicCast()) {
    return v10;
  }
  sub_25A3ECF40();
  swift_allocError();
  uint64_t v9 = v8;
  *uint64_t v8 = a3;
  sub_25A3990F8(a2, (uint64_t)(v8 + 1));
  sub_25A3937CC(a1, (uint64_t)(v9 + 6));
  v9[13] = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417740);
  v9[10] = v6;
  *((unsigned char *)v9 + 112) = 1;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t sub_25A3EAF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v8 = result;
    sub_25A3990F8(a2, (uint64_t)&v14);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a3;
    sub_25A3C85D8(&v14, v9 + 24);
    uint64_t v10 = sub_25A3937CC(a1, (uint64_t)v13);
    MEMORY[0x270FA5388](v10);
    v12[2] = sub_25A3ED52C;
    _OWORD v12[3] = v9;
    uint64_t v11 = *(void (**)(unsigned char *, uint64_t (*)(), void *, ValueMetadata *, uint64_t))(v8 + 16);
    long long v15 = &type metadata for PropertyList;
    uint64_t v16 = v8;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v14);
    swift_bridgeObjectRetain();
    v11(v13, sub_25A3ED524, v12, &type metadata for PropertyList, v8);
    swift_release();
    if (v3)
    {
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v14);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A417750);
      return swift_dynamicCast();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_25A3EB0E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  sub_25A3937CC(a1, (uint64_t)v13);
  uint64_t v8 = MEMORY[0x263F06F78];
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *a4 = v12;
  }
  else
  {
    sub_25A3ECF40();
    swift_allocError();
    uint64_t v11 = v10;
    *uint64_t v10 = a3;
    sub_25A3990F8(a2, (uint64_t)(v10 + 1));
    sub_25A3937CC(a1, (uint64_t)(v11 + 6));
    v11[13] = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417738);
    v11[10] = v8;
    *((unsigned char *)v11 + 112) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_25A3EB1EC(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr))
{
  a3(v6);
  sub_25A3ECF40();
  uint64_t v3 = swift_allocError();
  sub_25A3ED0C0((uint64_t)v6, v4);
  return v3;
}

uint64_t sub_25A3EB250()
{
  return sub_25A3E2314(*v0);
}

uint64_t sub_25A3EB258@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A3E43F0(*v1, a1);
}

uint64_t sub_25A3EB260(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v6[3] = a1;
  v6[0] = v2;
  v6[1] = v3;
  __swift_project_boxed_opaque_existential_1(v6, a1);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_25A5105D0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v4;
}

uint64_t sub_25A3EB2DC()
{
  return sub_25A3E3334(*v0, v0[1]);
}

uint64_t sub_25A3EB2E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A3E3A90(*v1, v1[1], a1);
}

uint64_t sub_25A3EB2EC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v5[3] = a1;
  v5[0] = v2;
  __swift_project_boxed_opaque_existential_1(v5, a1);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_25A5105D0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v3;
}

uint64_t sub_25A3EB368@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A3E4018(*v1, a1);
}

uint64_t sub_25A3EB370()
{
  return sub_25A3E21BC(*v0);
}

uint64_t sub_25A3EB378@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A3E455C(*v1, a1);
}

uint64_t sub_25A3EB380(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B08);
  uint64_t result = sub_25A510110();
  uint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v29 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v30 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v31 = result + 64;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  int64_t v41 = v4;
  for (unint64_t i = v9 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    long long v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    sub_25A3990F8(*(void *)(a1 + 56) + 40 * i, (uint64_t)v39);
    sub_25A3990F8((uint64_t)v39, (uint64_t)&v34);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417778);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417750);
    if (swift_dynamicCast())
    {
      sub_25A3C85D8(v32, (uint64_t)v36);
      uint64_t v18 = a1;
      uint64_t v20 = v37;
      uint64_t v19 = v38;
      __swift_project_boxed_opaque_existential_1(v36, v37);
      uint64_t v21 = v20;
      a1 = v18;
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v19 + 8))(&v34, v21, v19);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    }
    else
    {
      uint64_t v33 = 0;
      memset(v32, 0, sizeof(v32));
      sub_25A384BCC((uint64_t)v32, &qword_26A417780);
      uint64_t v22 = v40;
      uint64_t v23 = __swift_project_boxed_opaque_existential_1(v39, v40);
      uint64_t v35 = v22;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v34);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(boxed_opaque_existential_1, v23, v22);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    *(void *)(v31 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    __int16 v25 = (void *)(v3[6] + 16 * i);
    *__int16 v25 = v16;
    v25[1] = v17;
    uint64_t result = (uint64_t)sub_25A3936C4(&v34, (_OWORD *)(v3[7] + 32 * i));
    uint64_t v26 = v3[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    id v3[2] = v28;
    int64_t v4 = v41;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_27;
    }
    if (v11 >= v30) {
      return (uint64_t)v3;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v4 + 1;
    if (!v12)
    {
      int64_t v13 = v4 + 2;
      if (v4 + 2 >= v30) {
        return (uint64_t)v3;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v4 + 3;
        if (v4 + 3 >= v30) {
          return (uint64_t)v3;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v12 - 1) & v12;
    int64_t v41 = v13;
  }
  uint64_t v14 = v4 + 4;
  if (v4 + 4 >= v30) {
    return (uint64_t)v3;
  }
  unint64_t v12 = *(void *)(v29 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v4 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v30) {
      return (uint64_t)v3;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_18;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_25A3EB6A0()
{
  unint64_t result = qword_26A417630;
  if (!qword_26A417630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417630);
  }
  return result;
}

unint64_t sub_25A3EB6F4()
{
  unint64_t result = qword_26A417638;
  if (!qword_26A417638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417638);
  }
  return result;
}

uint64_t sub_25A3EB748()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  return MEMORY[0x270FA0238](v0, 96, 7);
}

unint64_t sub_25A3EB788()
{
  unint64_t result = qword_26A417640;
  if (!qword_26A417640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417640);
  }
  return result;
}

uint64_t sub_25A3EB7DC(uint64_t a1)
{
  return a1;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x26113F070);
  }
  return result;
}

unint64_t sub_25A3EB860()
{
  unint64_t result = qword_26A417660;
  if (!qword_26A417660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417660);
  }
  return result;
}

uint64_t sub_25A3EB8B4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 108, 7);
}

unint64_t sub_25A3EB910()
{
  unint64_t result = qword_26A417668;
  if (!qword_26A417668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417668);
  }
  return result;
}

_UNKNOWN **sub_25A3EB964()
{
  return &protocol witness table for String;
}

unint64_t sub_25A3EB974()
{
  unint64_t result = qword_26A417670;
  if (!qword_26A417670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417670);
  }
  return result;
}

unint64_t sub_25A3EB9CC()
{
  unint64_t result = qword_26A417678;
  if (!qword_26A417678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417678);
  }
  return result;
}

_UNKNOWN **sub_25A3EBA20()
{
  return &protocol witness table for Int;
}

unint64_t sub_25A3EBA30()
{
  unint64_t result = qword_26A417680;
  if (!qword_26A417680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417680);
  }
  return result;
}

unint64_t sub_25A3EBA88()
{
  unint64_t result = qword_26A417688;
  if (!qword_26A417688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417688);
  }
  return result;
}

uint64_t sub_25A3EBADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3ECB4C(a1, a2, a3, (uint64_t (*)(void))sub_25A3EBB08, (uint64_t (*)(void))sub_25A3EBB5C);
}

unint64_t sub_25A3EBB08()
{
  unint64_t result = qword_26A417690;
  if (!qword_26A417690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417690);
  }
  return result;
}

unint64_t sub_25A3EBB5C()
{
  unint64_t result = qword_26A417698;
  if (!qword_26A417698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417698);
  }
  return result;
}

unint64_t sub_25A3EBBB4()
{
  unint64_t result = qword_26A4176A0;
  if (!qword_26A4176A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4176A0);
  }
  return result;
}

uint64_t sub_25A3EBC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3ECB4C(a1, a2, a3, (uint64_t (*)(void))sub_25A3EBC34, (uint64_t (*)(void))sub_25A3EBC88);
}

unint64_t sub_25A3EBC34()
{
  unint64_t result = qword_26A4176A8;
  if (!qword_26A4176A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4176A8);
  }
  return result;
}

unint64_t sub_25A3EBC88()
{
  unint64_t result = qword_26A4176B0;
  if (!qword_26A4176B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4176B0);
  }
  return result;
}

unint64_t sub_25A3EBCE0()
{
  unint64_t result = qword_26A4176B8;
  if (!qword_26A4176B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4176B8);
  }
  return result;
}

uint64_t dispatch thunk of HumanReadableError.highValueTitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of HumanReadableError.lowValueTitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of HumanReadableError.additionalInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of HumanReadableError.additionalDiagnostics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of HumanReadableError.options.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of HumanReadableError.severity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of HumanReadableError.collectDiagnostics(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of HumanReadableError.canTryAgain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of HumanReadableError.errorTypeDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of HumanReadableError.isPotentialCrash.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of HumanReadableError.fullDiagnosticsOutput.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of HumanReadableError.plistRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of HumanReadableError.isNativeHumanReadable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

ValueMetadata *type metadata accessor for HumanReadableErrorSeverity()
{
  return &type metadata for HumanReadableErrorSeverity;
}

ValueMetadata *type metadata accessor for HumanReadableErrorOptions()
{
  return &type metadata for HumanReadableErrorOptions;
}

ValueMetadata *type metadata accessor for UnhandledUnknownCaseError()
{
  return &type metadata for UnhandledUnknownCaseError;
}

uint64_t destroy for LowValueError()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LowValueError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LowValueError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LowValueError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for LowValueError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LowValueError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LowValueError()
{
  return &type metadata for LowValueError;
}

uint64_t destroy for RemoteHumanReadableError()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RemoteHumanReadableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RemoteHumanReadableError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  return a1;
}

__n128 __swift_memcpy92_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for RemoteHumanReadableError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteHumanReadableError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 92)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteHumanReadableError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 92) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 92) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteHumanReadableError()
{
  return &type metadata for RemoteHumanReadableError;
}

void *initializeBufferWithCopyOfBuffer for HumanReadableSwiftError(void *a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  id v5 = *(id *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = v4;
  a1[1] = v6;
  return a1;
}

uint64_t assignWithCopy for HumanReadableSwiftError(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  id v5 = *(id *)a2;
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

id *assignWithTake for HumanReadableSwiftError(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  return a1;
}

ValueMetadata *type metadata accessor for HumanReadableSwiftError()
{
  return &type metadata for HumanReadableSwiftError;
}

uint64_t destroy for UnderlyingErrorWrapper(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

uint64_t initializeWithCopy for UnderlyingErrorWrapper(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for UnderlyingErrorWrapper(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for UnderlyingErrorWrapper(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnderlyingErrorWrapper(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnderlyingErrorWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnderlyingErrorWrapper()
{
  return &type metadata for UnderlyingErrorWrapper;
}

ValueMetadata *type metadata accessor for HumanReadableNSError()
{
  return &type metadata for HumanReadableNSError;
}

unint64_t sub_25A3EC73C()
{
  unint64_t result = qword_26A4176C0;
  if (!qword_26A4176C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4176C0);
  }
  return result;
}

unint64_t sub_25A3EC794()
{
  unint64_t result = qword_26A4176C8;
  if (!qword_26A4176C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4176C8);
  }
  return result;
}

_UNKNOWN **sub_25A3EC7E8()
{
  return &protocol witness table for PropertyList;
}

unint64_t sub_25A3EC7F8()
{
  unint64_t result = qword_26A4176D0;
  if (!qword_26A4176D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4176D0);
  }
  return result;
}

unint64_t sub_25A3EC850()
{
  unint64_t result = qword_26A4176D8;
  if (!qword_26A4176D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4176D8);
  }
  return result;
}

uint64_t sub_25A3EC8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3ECB4C(a1, a2, a3, (uint64_t (*)(void))sub_25A3EC8D0, (uint64_t (*)(void))sub_25A3EC924);
}

unint64_t sub_25A3EC8D0()
{
  unint64_t result = qword_26A4176E0;
  if (!qword_26A4176E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4176E0);
  }
  return result;
}

unint64_t sub_25A3EC924()
{
  unint64_t result = qword_26A4176E8;
  if (!qword_26A4176E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4176E8);
  }
  return result;
}

uint64_t sub_25A3EC978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3ECB4C(a1, a2, a3, (uint64_t (*)(void))sub_25A3EC9A4, (uint64_t (*)(void))sub_25A3EC9F8);
}

unint64_t sub_25A3EC9A4()
{
  unint64_t result = qword_26A4176F0;
  if (!qword_26A4176F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4176F0);
  }
  return result;
}

unint64_t sub_25A3EC9F8()
{
  unint64_t result = qword_26A4176F8;
  if (!qword_26A4176F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4176F8);
  }
  return result;
}

uint64_t sub_25A3ECA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3ECB4C(a1, a2, a3, (uint64_t (*)(void))sub_25A3ECA78, (uint64_t (*)(void))sub_25A3ECACC);
}

unint64_t sub_25A3ECA78()
{
  unint64_t result = qword_26A417700;
  if (!qword_26A417700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417700);
  }
  return result;
}

unint64_t sub_25A3ECACC()
{
  unint64_t result = qword_26A417708;
  if (!qword_26A417708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417708);
  }
  return result;
}

uint64_t sub_25A3ECB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A3ECB4C(a1, a2, a3, (uint64_t (*)(void))sub_25A3ECB88, (uint64_t (*)(void))sub_25A3ECBDC);
}

uint64_t sub_25A3ECB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_25A3ECB88()
{
  unint64_t result = qword_26A417710;
  if (!qword_26A417710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417710);
  }
  return result;
}

unint64_t sub_25A3ECBDC()
{
  unint64_t result = qword_26A417718;
  if (!qword_26A417718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417718);
  }
  return result;
}

uint64_t sub_25A3ECC30(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_25A3ECC68(uint64_t a1)
{
  return a1;
}

uint64_t sub_25A3ECCD4(uint64_t a1)
{
  return a1;
}

uint64_t sub_25A3ECD44()
{
  sub_25A3ECD84(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x270FA0238](v0, 41, 7);
}

uint64_t sub_25A3ECD84(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A3ECD94(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_25A3ECDA8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 65, 7);
}

uint64_t sub_25A3ECDF0(uint64_t a1)
{
  return a1;
}

uint64_t objectdestroy_18Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A3ECE80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrashReportError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A3ECEE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CrashReport(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_25A3ECF40()
{
  unint64_t result = qword_26A417730;
  if (!qword_26A417730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417730);
  }
  return result;
}

uint64_t sub_25A3ECF98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_25A44C6F0(a1, a2, *(void *)(v3 + 16), v3 + 24, a3);
}

uint64_t sub_25A3ECFA4(uint64_t a1, uint64_t a2)
{
  return sub_25A3EB1EC(a1, a2, *(void (**)(void *__return_ptr))(v2 + 16));
}

uint64_t sub_25A3ECFAC()
{
  unint64_t v0 = sub_25A510190();
  swift_bridgeObjectRelease();
  if (v0 >= 9) {
    return 9;
  }
  else {
    return v0;
  }
}

uint64_t sub_25A3ECFF8(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_25A39A088(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (int *)(a1 + 32);
    unint64_t v5 = *(void *)(v9 + 16);
    do
    {
      int v7 = *v4++;
      int v6 = v7;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 24);
      if (v5 >= v8 >> 1)
      {
        sub_25A39A088(v8 > 1, v5 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v5 + 1;
      *(_DWORD *)(result + 4 * v5++ + 32) = v6;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_25A3ED0C0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t objectdestroy_44Tm()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return MEMORY[0x270FA0238](v0, 64, 7);
}

ValueMetadata *type metadata accessor for ErrorType()
{
  return &type metadata for ErrorType;
}

unsigned char *_s20PreviewsFoundationOS26HumanReadableErrorSeverityOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A3ED23CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnderlyingErrorWrapper.Key()
{
  return &type metadata for UnderlyingErrorWrapper.Key;
}

uint64_t getEnumTagSinglePayload for RemoteHumanReadableError.Key(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RemoteHumanReadableError.Key(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A3ED3D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

unsigned char *sub_25A3ED3F8(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RemoteHumanReadableError.Key()
{
  return &type metadata for RemoteHumanReadableError.Key;
}

unint64_t sub_25A3ED414()
{
  unint64_t result = qword_26A417788;
  if (!qword_26A417788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417788);
  }
  return result;
}

unint64_t sub_25A3ED46C()
{
  unint64_t result = qword_26A417790;
  if (!qword_26A417790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417790);
  }
  return result;
}

unint64_t sub_25A3ED4C4()
{
  unint64_t result = qword_26A417798;
  if (!qword_26A417798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417798);
  }
  return result;
}

void static ExecutionLane.any.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double static ExecutionLane.main.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 1;
  *a1 = xmmword_25A511960;
  return result;
}

uint64_t static ExecutionLane.queue(label:qos:attributes:target:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v28 = a2;
  id v29 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v30 = a1;
  uint64_t v31 = a6;
  uint64_t v6 = sub_25A50F8C0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_25A50F870();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  int64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_25A50E790();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A3DD980();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v26, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v27, v10);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F130], v6);
  id v18 = v29;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_25A50F8F0();
  if (qword_26A4154C0 != -1) {
    swift_once();
  }
  uint64_t v20 = (void *)(qword_26A418748 + 16);
  uint64_t v21 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v21);
  sub_25A42091C(v20, &v32);
  os_unfair_lock_unlock(v21);
  uint64_t v22 = v32;
  swift_release();
  if (qword_26A415498 != -1) {
    swift_once();
  }
  uint64_t v32 = v22;
  char v33 = 0;
  uint64_t result = sub_25A50F8A0();
  char v24 = v31;
  *uint64_t v31 = v19;
  v24[1] = v22;
  return result;
}

uint64_t ExecutionLane.execute(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  if (!*v2) {
    return a1();
  }
  uint64_t v5 = v2[1];
  if (*v2 != 1)
  {
    sub_25A3DD980();
    if (qword_26A415498 != -1) {
      swift_once();
    }
    sub_25A50F890();
    if ((v8 & 1) != 0 || v5 != v7) {
      return sub_25A3EDA1C((uint64_t (*)(uint64_t))a1, a2);
    }
    return a1();
  }
  if (objc_msgSend(self, sel_isMainThread)) {
    return a1();
  }
  return sub_25A3EDA1C((uint64_t (*)(uint64_t))a1, a2);
}

uint64_t ExecutionLane.isCurrentLane.getter()
{
  if (!*v0) {
    return 1;
  }
  if (*v0 == 1) {
    return (uint64_t)objc_msgSend(self, sel_isMainThread);
  }
  uint64_t v2 = v0[1];
  sub_25A3DD980();
  if (qword_26A415498 != -1) {
    swift_once();
  }
  sub_25A50F890();
  return (v2 == v3) & ~v4;
}

uint64_t sub_25A3EDA1C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v5 = sub_25A50E750();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25A50E790();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  int64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v2;
  if (!*v2) {
    return a1(v11);
  }
  v19[0] = v11;
  if (v14 == (void *)1)
  {
    sub_25A3DD980();
    uint64_t v15 = (void *)sub_25A50F8D0();
    char v24 = a1;
    uint64_t v25 = a2;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v21 = 1107296256;
    uint64_t v22 = sub_25A3BE05C;
    uint64_t v23 = &block_descriptor_4;
    uint64_t v16 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    sub_25A50E770();
    uint64_t aBlock = MEMORY[0x263F8EE78];
    sub_25A3BE558();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
    sub_25A3DDB54();
    sub_25A50FC90();
    MEMORY[0x26113D8E0](0, v13, v8, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (*(uint64_t (**)(char *, void))(v10 + 8))(v13, v19[0]);
  }
  else
  {
    char v24 = a1;
    uint64_t v25 = a2;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v21 = 1107296256;
    uint64_t v22 = sub_25A3BE05C;
    uint64_t v23 = &block_descriptor_3;
    id v18 = _Block_copy(&aBlock);
    swift_retain();
    sub_25A3EE304(v14);
    sub_25A50E770();
    v19[1] = MEMORY[0x263F8EE78];
    sub_25A3BE558();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
    sub_25A3DDB54();
    sub_25A50FC90();
    MEMORY[0x26113D8E0](0, v13, v8, v18);
    _Block_release(v18);
    sub_25A3EE314(v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, void))(v10 + 8))(v13, v19[0]);
    return swift_release();
  }
}

uint64_t sub_25A3EDDBC()
{
  __swift_instantiateConcreteTypeFromMangledName(qword_26A4177B8);
  swift_allocObject();
  uint64_t result = sub_25A50E740();
  qword_26A4177A0 = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for ExecutionLane(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2 >= 2uLL)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *a1 = v3;
    a1[1] = v4;
    id v5 = v3;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

void destroy for ExecutionLane(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 2) {
}
  }

void **assignWithCopy for ExecutionLane(void **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  id v5 = *(void **)a2;
  if ((unint64_t)*a1 >= 2)
  {
    if ((unint64_t)v5 >= 2)
    {
      *a1 = v5;
      id v7 = v5;

      a1[1] = *(void **)(a2 + 8);
      return a1;
    }
    sub_25A3EDEE8((uint64_t)a1);
    goto LABEL_6;
  }
  if ((unint64_t)v5 < 2)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = v5;
  a1[1] = *(void **)(a2 + 8);
  id v6 = v5;
  return a1;
}

uint64_t sub_25A3EDEE8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4177A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void **assignWithTake for ExecutionLane(void **a1, void **a2)
{
  uint64_t v4 = *a1;
  if ((unint64_t)*a1 >= 2)
  {
    if ((unint64_t)*a2 >= 2)
    {
      *a1 = *a2;

      a1[1] = a2[1];
      return a1;
    }
    sub_25A3EDEE8((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for ExecutionLane(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 2;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExecutionLane(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = a2 - 2147483646;
    *(void *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionLane()
{
  return &type metadata for ExecutionLane;
}

uint64_t initializeBufferWithCopyOfBuffer for ExecutionLane.Lane(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    id v5 = v3;
  }
  return a1;
}

void destroy for ExecutionLane.Lane(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

uint64_t assignWithCopy for ExecutionLane.Lane(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  if (*(void *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      id v7 = v5;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    goto LABEL_7;
  }
  *(void *)a1 = v5;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ExecutionLane.Lane(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {

LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExecutionLane.Lane(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ExecutionLane.Lane(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionLane.Lane()
{
  return &type metadata for ExecutionLane.Lane;
}

ValueMetadata *type metadata accessor for QueueIdentifier()
{
  return &type metadata for QueueIdentifier;
}

unint64_t sub_25A3EE298()
{
  unint64_t result = qword_26A4177B0;
  if (!qword_26A4177B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4177B0);
  }
  return result;
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

id sub_25A3EE304(id result)
{
  if ((unint64_t)result >= 2) {
    return result;
  }
  return result;
}

void sub_25A3EE314(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

uint64_t AnalyticsHints.isSampleProject.getter()
{
  return *v0;
}

PreviewsFoundationOS::AnalyticsHints __swiftcall AnalyticsHints.init(isSampleProject:)(PreviewsFoundationOS::AnalyticsHints isSampleProject)
{
  v1->isSampleProject = isSampleProject.isSampleProject;
  return isSampleProject;
}

uint64_t getEnumTagSinglePayload for AnalyticsHints(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AnalyticsHints(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A3EE4B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsHints()
{
  return &type metadata for AnalyticsHints;
}

uint64_t (*UncheckedSendable.value.modify())()
{
  return nullsub_1;
}

uint64_t _s20PreviewsFoundationOS17UncheckedSendableV5valuexvg_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t sub_25A3EE550(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = (char *)&v6 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v6 - v1);
  uint64_t v4 = type metadata accessor for UncheckedSendable();
  return UncheckedSendable.wrappedValue.setter(v2, v4);
}

uint64_t _s20PreviewsFoundationOS17UncheckedSendableV5valuexvs_0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

void (*UncheckedSendable.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  *uint64_t v5 = v2;
  v5[1] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  _OWORD v5[2] = v7;
  uint64_t v5[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v5[4] = malloc(v9);
  v5[5] = malloc(v9);
  (*(void (**)(void))(v8 + 16))();
  return sub_25A3EE740;
}

void sub_25A3EE740(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v8 = *v2;
    uint64_t v7 = v2[1];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, v7);
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 40))(v8, v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v7);
  }
  else
  {
    (*(void (**)(void, void *))(v2[2] + 40))(*v2, v4);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t sub_25A3EE84C()
{
  uint64_t v0 = type metadata accessor for UncheckedSendable();
  return UncheckedSendable.wrappedValue.getter(v0);
}

uint64_t sub_25A3EE88C()
{
  return 8;
}

void *sub_25A3EE898(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_25A3EE8A4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_25A3EEA00(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x25A3EEC18);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for UncheckedSendable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CGFloat.init(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_25A50FD80();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (unsigned int v7 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = sub_25A50FE60();
      }
      char v6 = sub_25A3EEFFC(v4, v5, (void (*)(uint64_t *__return_ptr))sub_25A3EF0B8);
      swift_bridgeObjectRelease();
    }
  }
  if (v6) {
    return 0;
  }
  else {
    return 0;
  }
}

uint64_t sub_25A3EEDE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = 0;
  _OWORD v7[2] = &v8;
  char v4 = sub_25A3EEE78((uint64_t)sub_25A3EF0A0, (uint64_t)v7, a1, a2);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v6 = v8;
  if ((v4 & 1) == 0) {
    uint64_t v6 = 0;
  }
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 8) = (v4 & 1) == 0;
  return result;
}

uint64_t sub_25A3EEE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v7)(uint64_t *__return_ptr, void *);
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void v12[2];
  uint64_t v13;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    unsigned int v10 = sub_25A50FD80();
    if (!v4) {
      unsigned int v10 = BYTE1(v13);
    }
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v12[0] = v5;
      v12[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      unsigned int v10 = v7(&v13, v12);
      if (!v4) {
        unsigned int v10 = v13;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        char v9 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v8 = sub_25A50FE60();
      }
      unsigned int v10 = sub_25A3EEFFC(v8, v9, (void (*)(uint64_t *__return_ptr))sub_25A3EF0B8);
    }
  }
  return v10 & 1;
}

unsigned char *sub_25A3EEF90@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_25A3EEFFC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

void *sub_25A3EF05C@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, unsigned char *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

unsigned char *sub_25A3EF0A0@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_25A3EF128(a1, a2);
}

void *sub_25A3EF0B8@<X0>(unsigned char *a1@<X8>)
{
  return sub_25A3EF198(a1);
}

unint64_t sub_25A3EF0D4()
{
  unint64_t result = qword_26A417840;
  if (!qword_26A417840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417840);
  }
  return result;
}

unsigned char *sub_25A3EF128@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (unint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_25A3EF198@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t OSAllocatedUnfairLock.init(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A3EF560();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

void OSAllocatedUnfairLock.syncRead<A>(callsite:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (os_unfair_lock_s *)(a4 + ((*(unsigned int *)(*(void *)a4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v4);
  sub_25A3EF564();
  os_unfair_lock_unlock(v4);
}

unsigned char *sub_25A3EF300@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_25A3EF30C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3EF324(a1, a2);
}

uint64_t sub_25A3EF324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  char v10 = *(unsigned char *)(a1 + 64);
  char v11 = *(unsigned char *)(a1 + 65);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v8;
  *(void *)(a2 + 56) = v9;
  *(unsigned char *)(a2 + 64) = v10;
  *(unsigned char *)(a2 + 65) = v11;
  return sub_25A3B8694(v3, v2, v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_25A3EF390@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_25A3EF3C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = v2;
  return swift_bridgeObjectRetain();
}

void OSAllocatedUnfairLock.syncWrite<A>(callsite:_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)a4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(a4 + ((*(unsigned int *)(*(void *)a4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  a2(v5);
  os_unfair_lock_unlock(v6);
}

void sub_25A3EF4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OSAllocatedUnfairLock.syncRead<A>(callsite:_:)(a1, a2, a3, *v3);
}

void sub_25A3EF4C8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  OSAllocatedUnfairLock.syncWrite<A>(callsite:_:)(a1, a2, a3, *v3);
}

uint64_t sub_25A3EF4E4()
{
  return sub_25A50FE40();
}

uint64_t sub_25A3EF564()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_25A3EF58C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(v4 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4 + *MEMORY[0x263F8DD00]) - 8) + 16))(a2, v3);
}

id sub_25A3EF624()
{
  id v0 = objc_allocWithZone(MEMORY[0x263F08AE8]);
  id result = sub_25A4B2F48(0xD000000000000010, 0x800000025A51EDF0, 16);
  qword_26A417848 = (uint64_t)result;
  return result;
}

id sub_25A3EF6DC()
{
  id v0 = objc_allocWithZone(MEMORY[0x263F08AE8]);
  id result = sub_25A4B2F48(0x203A5C726F727265, 0xED000024292A2E28, 16);
  qword_26A417850 = (uint64_t)result;
  return result;
}

uint64_t String.firstFileBuildErrorMessage.getter(uint64_t a1, uint64_t a2)
{
  return sub_25A3EF7E4(a1, a2, &qword_26A4154A0, (void **)&qword_26A417848);
}

uint64_t String.firstBuildErrorMessage.getter(uint64_t a1, uint64_t a2)
{
  return sub_25A3EF7E4(a1, a2, &qword_26A4154A8, (void **)&qword_26A417850);
}

uint64_t sub_25A3EF7E4(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  if (*a3 == -1)
  {
    uint64_t v5 = *a4;
    if (!*a4) {
      return 0;
    }
  }
  else
  {
    swift_once();
    uint64_t v5 = *a4;
    if (!*a4) {
      return 0;
    }
  }
  id v6 = v5;
  uint64_t v7 = (void *)sub_25A50EBF0();
  id v8 = objc_msgSend(v6, sel_firstMatchInString_options_range_, v7, 0, 0, sub_25A50ED50());

  if (!v8)
  {

    return 0;
  }
  id v9 = objc_msgSend(v8, sel_rangeAtIndex_, 1);
  uint64_t v11 = v10;

  unsigned int v12 = (void *)sub_25A50EBF0();
  id v13 = objc_msgSend(v12, sel_substringWithRange_, v9, v11);

  sub_25A50EC20();
  uint64_t v14 = sub_25A50EED0();

  return v14;
}

Swift::Void __swiftcall NSRunLoop.spin(count:)(Swift::Int count)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_25A50E470();
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (count >= 1)
  {
    uint64_t v8 = *MEMORY[0x263EFF478];
    id v9 = (void (**)(char *, uint64_t))(v5 + 8);
    Swift::Int v10 = 1;
    do
    {
      sub_25A50E430();
      uint64_t v11 = (void *)sub_25A50E400();
      (*v9)(v7, v4);
      unsigned int v12 = objc_msgSend(v2, sel_runMode_beforeDate_, v8, v11);

      if (v12) {
        BOOL v13 = v10 < count;
      }
      else {
        BOOL v13 = 0;
      }
      ++v10;
    }
    while (v13);
  }
}

uint64_t NSRunLoop.spin(timeout:until:)(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417858);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25A50E470();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  unsigned int v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v23 - v13;
  if (a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    goto LABEL_5;
  }
  sub_25A50E460();
  sub_25A50E3F0();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_5:
    sub_25A50E3E0();
    sub_25A3EFD74((uint64_t)v7);
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
LABEL_6:
  int v15 = self;
  uint64_t v16 = *MEMORY[0x263EFF478];
  uint64_t v17 = (void (**)(char *, uint64_t))(v9 + 8);
  do
  {
    id v18 = objc_msgSend(v15, sel_currentRunLoop, v23, v24);
    uint64_t v19 = (void *)sub_25A50E400();
    unsigned int v20 = objc_msgSend(v18, sel_runMode_beforeDate_, v16, v19);

    if (!v20) {
      break;
    }
    if (v23()) {
      break;
    }
    sub_25A50E460();
    char v21 = sub_25A50E410();
    (*v17)(v12, v8);
  }
  while ((v21 & 1) == 0);
  return ((uint64_t (*)(char *, uint64_t))*v17)(v14, v8);
}

uint64_t sub_25A3EFD74(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417858);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Unreachable.init(message:diagnostics:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t result = sub_25A403498();
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t Unreachable.message.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Unreachable.additionalDiagnostics.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Unreachable.init(_:diagnostics:file:line:column:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t result = sub_25A403498();
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

unint64_t Unreachable.lowValueTitle.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t Unreachable.additionalInfo.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Unreachable.isPotentialCrash.getter()
{
  return 0;
}

unint64_t sub_25A3EFF84()
{
  return 0xD00000000000001FLL;
}

uint64_t static Result.unreachable(_:file:line:column:function:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1();
  uint64_t v5 = v4;
  sub_25A39F29C();
  uint64_t v6 = swift_allocError();
  uint64_t v8 = v7;
  sub_25A403498();
  *uint64_t v8 = v3;
  v8[1] = v5;
  long long v8[2] = 0;
  void v8[3] = 0;
  *a2 = v6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();

  return swift_storeEnumTagMultiPayload();
}

unint64_t sub_25A3F00B8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_25A3F00E8();
  unint64_t result = sub_25A3F013C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_25A3F00E8()
{
  unint64_t result = qword_26A417860;
  if (!qword_26A417860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417860);
  }
  return result;
}

unint64_t sub_25A3F013C()
{
  unint64_t result = qword_26A417868[0];
  if (!qword_26A417868[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A417868);
  }
  return result;
}

ValueMetadata *type metadata accessor for Unreachable()
{
  return &type metadata for Unreachable;
}

uint64_t CountedSet.init()@<X0>(uint64_t *a1@<X8>)
{
  swift_getTupleTypeMetadata2();
  sub_25A50F120();
  uint64_t result = sub_25A50E900();
  *a1 = result;
  return result;
}

uint64_t CountedSet.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getTupleTypeMetadata2();
  sub_25A50F120();
  uint64_t v9 = sub_25A50E900();
  uint64_t v18 = v9;
  if (MEMORY[0x26113D1B0](a1, a2))
  {
    uint64_t v15 = v7;
    uint64_t v16 = a3;
    uint64_t v10 = 0;
    while (1)
    {
      char v11 = sub_25A50F140();
      sub_25A50F0D0();
      if (v11)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, a1+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v10, a2);
        uint64_t v12 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = sub_25A50FE20();
        if (v15 != 8)
        {
          __break(1u);
          return result;
        }
        uint64_t v17 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 16))(v8, &v17, a2);
        swift_unknownObjectRelease();
        uint64_t v12 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v9 = v18;
          a3 = v16;
          goto LABEL_13;
        }
      }
      uint64_t v13 = type metadata accessor for CountedSet();
      CountedSet.insert(_:)((uint64_t)v8, v13);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
      ++v10;
      if (v12 == MEMORY[0x26113D1B0](a1, a2)) {
        goto LABEL_11;
      }
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
LABEL_13:
  *a3 = v9;
  return result;
}

uint64_t CountedSet.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x26113C9D0](&v12, v6, *v2, v4, MEMORY[0x263F8D6C8], *(void *)(v9 + 24));
  if (v13) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v12;
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  if (__OFADD__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = v10 + 1;
    char v13 = 0;
    sub_25A50E990();
    return sub_25A50E9E0();
  }
  return result;
}

uint64_t CountedSet.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x26113C9D0](&v13, v6, *v2, v4, MEMORY[0x263F8D6C8], *(void *)(v9 + 24));
  uint64_t v10 = v13;
  char v11 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  if ((v11 & 1) != 0 || v10 < 2)
  {
    uint64_t v13 = 0;
    char v14 = 1;
  }
  else
  {
    uint64_t v13 = v10 - 1;
    char v14 = 0;
  }
  sub_25A50E990();
  return sub_25A50E9E0();
}

uint64_t CountedSet.count(of:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x26113C9D0](&v4, a1, *v2, *(void *)(a2 + 16), MEMORY[0x263F8D6C8], *(void *)(a2 + 24));
  if (v5) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t CountedSet.contains(_:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x26113C9D0](&v4, a1, *v2, *(void *)(a2 + 16), MEMORY[0x263F8D6C8], *(void *)(a2 + 24));
  return (v4 > 0) & ~v5;
}

uint64_t CountedSet.totalCount.getter()
{
  sub_25A50E990();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_25A50EFC0();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t CountedSet.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_25A50E9A0();

  return swift_bridgeObjectRelease();
}

uint64_t static CountedSet.== infix(_:_:)()
{
  return sub_25A50E9B0();
}

uint64_t CountedSet.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t sub_25A3F0920()
{
  return sub_25A510530();
}

uint64_t sub_25A3F0964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return CountedSet.init(arrayLiteral:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t sub_25A3F0970()
{
  return static CountedSet.== infix(_:_:)();
}

uint64_t type metadata accessor for CountedSet()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3F0994@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = swift_getTupleTypeMetadata2();
  uint64_t v7 = *(void *)(a2 + *(int *)(result + 48));
  BOOL v8 = __OFADD__(v5, v7);
  uint64_t v9 = v5 + v7;
  if (v8) {
    __break(1u);
  }
  else {
    *a3 = v9;
  }
  return result;
}

uint64_t sub_25A3F0A04()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A3F0A20(unint64_t a1)
{
  unint64_t v17 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_42;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    uint64_t result = sub_25A39A178(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    if (!v2) {
      break;
    }
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v17)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = sub_25A510100();
    }
    else
    {
      uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    unint64_t v11 = 0;
    unint64_t v5 = a1 & 0xC000000000000001;
    while ((v2 & ~(v2 >> 63)) != v11)
    {
      if (v16 == v11) {
        goto LABEL_40;
      }
      if (v5)
      {
        uint64_t v12 = MEMORY[0x26113DE30](v11, a1);
      }
      else
      {
        if (v11 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_41;
        }
        uint64_t v12 = *(void *)(a1 + 8 * v11 + 32);
        swift_retain();
      }
      unint64_t v14 = *(void *)(v18 + 16);
      unint64_t v13 = *(void *)(v18 + 24);
      if (v14 >= v13 >> 1) {
        sub_25A39A178(v13 > 1, v14 + 1, 1);
      }
      ++v11;
      *(void *)(v18 + 16) = v14 + 1;
      uint64_t v15 = v18 + 40 * v14;
      *(void *)(v15 + 32) = v12;
      *(void *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(unsigned char *)(v15 + 64) = -1;
      if (v2 == v11) {
        goto LABEL_8;
      }
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_25A510100();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v5 = a1 & 0xC000000000000001;
  swift_bridgeObjectRetain();
LABEL_8:
  if (v17)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_25A510100();
      swift_bridgeObjectRelease();
      if (v2 == v6) {
        break;
      }
LABEL_12:
      if (v5)
      {
        uint64_t v7 = MEMORY[0x26113DE30](v2, a1);
        if (__OFADD__(v2, 1)) {
          goto LABEL_38;
        }
      }
      else
      {
        if (v2 < 0)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        if ((unint64_t)v2 >= *(void *)(v4 + 16)) {
          goto LABEL_37;
        }
        uint64_t v7 = *(void *)(a1 + 8 * v2 + 32);
        swift_retain();
        if (__OFADD__(v2, 1)) {
          goto LABEL_38;
        }
      }
      unint64_t v9 = *(void *)(v18 + 16);
      unint64_t v8 = *(void *)(v18 + 24);
      if (v9 >= v8 >> 1) {
        sub_25A39A178(v8 > 1, v9 + 1, 1);
      }
      *(void *)(v18 + 16) = v9 + 1;
      uint64_t v10 = v18 + 40 * v9;
      *(void *)(v10 + 32) = v7;
      *(void *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(unsigned char *)(v10 + 64) = -1;
      ++v2;
      if (!v17) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    if (v2 != *(void *)(v4 + 16)) {
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_25A3F0CF8(unint64_t a1)
{
  unint64_t v17 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_42;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    uint64_t result = sub_25A39A1F8(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    if (!v2) {
      break;
    }
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v17)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = sub_25A510100();
    }
    else
    {
      uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    unint64_t v11 = 0;
    unint64_t v5 = a1 & 0xC000000000000001;
    while ((v2 & ~(v2 >> 63)) != v11)
    {
      if (v16 == v11) {
        goto LABEL_40;
      }
      if (v5)
      {
        uint64_t v12 = MEMORY[0x26113DE30](v11, a1);
      }
      else
      {
        if (v11 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_41;
        }
        uint64_t v12 = *(void *)(a1 + 8 * v11 + 32);
        swift_retain();
      }
      unint64_t v14 = *(void *)(v18 + 16);
      unint64_t v13 = *(void *)(v18 + 24);
      if (v14 >= v13 >> 1) {
        sub_25A39A1F8(v13 > 1, v14 + 1, 1);
      }
      *(void *)(v18 + 16) = v14 + 1;
      uint64_t v15 = v18 + 32 * v14;
      *(void *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      ++v11;
      *(void *)(v15 + 32) = v12;
      *(unsigned char *)(v15 + 56) = -1;
      if (v2 == v11) {
        goto LABEL_8;
      }
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_25A510100();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v5 = a1 & 0xC000000000000001;
  swift_bridgeObjectRetain();
LABEL_8:
  if (v17)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_25A510100();
      swift_bridgeObjectRelease();
      if (v2 == v6) {
        break;
      }
LABEL_12:
      if (v5)
      {
        uint64_t v7 = MEMORY[0x26113DE30](v2, a1);
        if (__OFADD__(v2, 1)) {
          goto LABEL_38;
        }
      }
      else
      {
        if (v2 < 0)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        if ((unint64_t)v2 >= *(void *)(v4 + 16)) {
          goto LABEL_37;
        }
        uint64_t v7 = *(void *)(a1 + 8 * v2 + 32);
        swift_retain();
        if (__OFADD__(v2, 1)) {
          goto LABEL_38;
        }
      }
      unint64_t v9 = *(void *)(v18 + 16);
      unint64_t v8 = *(void *)(v18 + 24);
      if (v9 >= v8 >> 1) {
        sub_25A39A1F8(v8 > 1, v9 + 1, 1);
      }
      *(void *)(v18 + 16) = v9 + 1;
      uint64_t v10 = v18 + 32 * v9;
      *(void *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 32) = v7;
      *(unsigned char *)(v10 + 56) = -1;
      ++v2;
      if (!v17) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    if (v2 != *(void *)(v4 + 16)) {
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t Sequence.traverse<A>(dsoHandle:file:line:column:function:andAccumulateErrors:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  v15[0] = a2;
  v15[1] = a3;
  char v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  uint64_t v20 = a8;
  char v21 = a9;
  return sub_25A3F1304((uint64_t)v15, a10, a11, a12, a13, a14);
}

void sub_25A3F102C(_OWORD *a1, char a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain_n();
    if (sub_25A510100()) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease_n();
    uint64_t v9 = MEMORY[0x263F8EE78];
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    __int16 v13 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4179F0);
    swift_allocObject();
    sub_25A39D550(a1);
    swift_retain();
    sub_25A39DF44((uint64_t)&v9);
    swift_release();
    return;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v6) {
    goto LABEL_9;
  }
LABEL_3:
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = MEMORY[0x26113DE30](0, a3);
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4179F8);
  uint64_t v8 = swift_allocObject();

  sub_25A3F1954(a1, a2 & 1, a3, v7, v8);
}

void sub_25A3F1198(_OWORD *a1, char a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain_n();
    if (sub_25A510100()) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease_n();
    uint64_t v9 = MEMORY[0x263F8EE78];
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    __int16 v13 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417A10);
    swift_allocObject();
    sub_25A39D800(a1);
    swift_retain();
    sub_25A39E414((uint64_t)&v9);
    swift_release();
    return;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v6) {
    goto LABEL_9;
  }
LABEL_3:
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = MEMORY[0x26113DE30](0, a3);
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417A18);
  uint64_t v8 = swift_allocObject();

  sub_25A3F1FAC(a1, a2 & 1, a3, v7, v8);
}

uint64_t sub_25A3F1304(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = a4;
  uint64_t v40 = a6;
  uint64_t v30 = a3;
  int v29 = a2;
  uint64_t v8 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  long long v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v11;
  uint64_t v12 = type metadata accessor for Inhabited();
  uint64_t v13 = sub_25A50FA40();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v28 - v16;
  uint64_t v18 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v28 - v19;
  uint64_t v21 = *(void *)(a1 + 8);
  uint64_t v33 = *(void *)a1;
  uint64_t v34 = v21;
  int v35 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v22 = *(void *)(a1 + 32);
  uint64_t v36 = *(void *)(a1 + 24);
  uint64_t v37 = v22;
  uint64_t v23 = *(void *)(a1 + 48);
  uint64_t v38 = *(void *)(a1 + 40);
  uint64_t v39 = v23;
  char v24 = *(unsigned char *)(a1 + 56);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v32, a5);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.init(_:)((uint64_t)v10, v12, WitnessTable, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    sub_25A50F1E0();
    type metadata accessor for Future();
    uint64_t v43 = v33;
    uint64_t v44 = v34;
    char v45 = v35;
    uint64_t v46 = v36;
    uint64_t v47 = v37;
    uint64_t v48 = v38;
    uint64_t v49 = v39;
    char v50 = v24;
    uint64_t v41 = sub_25A50F120();
    char v42 = 0;
    uint64_t v26 = sub_25A39C8D8(&v43, (uint64_t)&v41);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v17, v12);
    type metadata accessor for TraverseFuture();
    uint64_t v43 = v33;
    uint64_t v44 = v34;
    char v45 = v35;
    uint64_t v46 = v36;
    uint64_t v47 = v37;
    uint64_t v48 = v38;
    uint64_t v49 = v39;
    char v50 = v24;
    swift_allocObject();
    uint64_t v26 = sub_25A3F4570(&v43, v29 & 1, (uint64_t)v20, v30, v31);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v12);
  }
  return v26;
}

uint64_t Sequence.invert<A>(dsoHandle:file:line:column:function:andAccumulateErrors:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_25A3F4BC8(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_25A3F1704(long long *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5 = *((unsigned char *)a1 + 16);
  char v6 = *((unsigned char *)a1 + 56);
  long long v9 = *a1;
  char v10 = v5;
  long long v11 = *(long long *)((char *)a1 + 24);
  long long v12 = *(long long *)((char *)a1 + 40);
  char v13 = v6;
  long long v8[2] = a3;
  void v8[3] = a4;
  _OWORD v8[4] = a5;
  return sub_25A3F1304((uint64_t)&v9, a2, (char *)sub_25A3F52C0, (uint64_t)v8, a3, a4);
}

uint64_t static Future.inverting<A>(dsoHandle:file:line:column:function:accumulateErrors:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)&long long v15 = a2;
  *((void *)&v15 + 1) = a3;
  char v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  uint64_t v20 = a8;
  char v21 = a9;
  return sub_25A3F1704(&v15, a10, a12, *(void *)(v13 + 80), a13);
}

uint64_t static Future.inverting(dsoHandle:file:line:column:function:accumulateErrors:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v23 = a11;
  *(void *)&long long v16 = a2;
  *((void *)&v16 + 1) = a3;
  char v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = a8;
  char v22 = a9;
  uint64_t v12 = *(void *)(v11 + 80);
  type metadata accessor for Future();
  uint64_t v13 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_25A3F1704(&v16, a10, v13, v12, WitnessTable);
}

uint64_t sub_25A3F1888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for TraverseFuture.Activity.Fiber() + 44);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  uint64_t v5 = sub_25A50FA40();
  char v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v6(v4, a2, v5);
}

void sub_25A3F1954(_OWORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_retain();
  unint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = sub_25A3F0A20(v8);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417A00);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = v9;
  *(void *)(a5 + 104) = v10;
  *(unsigned char *)(a5 + 112) = a2;
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v11 = sub_25A39D550(a1);
  uint64_t v44 = *(void *)(v9 + 16);
  if (v44)
  {
    swift_retain();
    uint64_t v12 = 0;
    uint64_t v13 = (unsigned __int8 *)(v9 + 64);
    uint64_t v14 = v11;
    while (1)
    {
      uint64_t v15 = *((void *)v13 - 4);
      uint64_t v16 = v14;
      uint64_t v51 = (void *)*((void *)v13 - 3);
      uint64_t v48 = *((void *)v13 - 2);
      uint64_t v50 = *((void *)v13 - 1);
      char v45 = v13;
      unsigned __int8 v49 = *v13;
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = v12;
      uint64_t v18 = (void *)swift_allocObject();
      _OWORD v18[2] = 0;
      v18[3] = 0;
      v18[4] = sub_25A3F4E08;
      void v18[5] = v17;
      uint64_t v19 = *(os_unfair_lock_s **)(v15 + 88);
      MEMORY[0x270FA5388](v18);
      uint64_t v20 = v16;
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      sub_25A3F4E80(v51, v48, v50, v49);
      swift_retain();
      os_unfair_lock_lock(v19 + 25);
      sub_25A3F4E64((uint64_t)&v19[4], (uint64_t)&v53);
      uint64_t v47 = v12;
      os_unfair_lock_unlock(v19 + 25);
      swift_release();
      __int16 v21 = v60;
      unsigned int v22 = HIBYTE(v60);
      uint64_t v14 = v20;
      uint64_t v23 = v15;
      if (v22 <= 0xFE) {
        break;
      }
LABEL_13:
      swift_release();
      swift_release();
      swift_release_n();
      uint64_t v32 = (void *)swift_allocObject();
      long long v32[2] = 0;
      v32[3] = 0;
      v32[4] = sub_25A3F4EA8;
      v32[5] = v14;
      uint64_t v33 = *(os_unfair_lock_s **)(v23 + 88);
      MEMORY[0x270FA5388](v32);
      swift_retain_n();
      swift_retain();
      os_unfair_lock_lock(v33 + 25);
      sub_25A3F60C8((uint64_t)&v33[4], (uint64_t)&v53);
      os_unfair_lock_unlock(v33 + 25);
      swift_release();
      __int16 v34 = v60;
      if (HIBYTE(v60) <= 0xFEu)
      {
        id v35 = v53;
        int v36 = v54;
        uint64_t v37 = v55;
        int v38 = v56;
        int v40 = v57;
        int v39 = v58;
        int v41 = v59;
        if (v60 >= 0x200u)
        {
          v61[0] = (uint64_t)v53;
          v61[1] = v54;
          char v62 = (char)v55;
          uint64_t v63 = v56;
          uint64_t v64 = v57;
          uint64_t v65 = v58;
          uint64_t v66 = v59;
          char v67 = v60;
          swift_retain();
          sub_25A3F2C78(v61);
          swift_release();
        }
        sub_25A3F4F98(v35, v36, v37, v38, v40, v39, v41, v34);
        uint64_t v14 = v11;
      }
      uint64_t v12 = v47 + 1;
      uint64_t v13 = v45 + 40;
      swift_release();
      swift_release();
      swift_release_n();
      sub_25A3F4F70(v51, v48, v50, v49);
      if (v44 == v47 + 1)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
    }
    id v24 = v53;
    uint64_t v25 = v54;
    uint64_t v26 = (uint64_t)v55;
    int v28 = v57;
    int v27 = v58;
    uint64_t v46 = v55;
    int v43 = v56;
    int v42 = v59;
    if (v22)
    {
      if (v22 != 1)
      {
LABEL_12:
        sub_25A3F4F98(v24, v25, v46, v43, v28, v27, v42, v21);
        sub_25A3F4F98(v24, v25, v46, v43, v28, v27, v42, v21);
        uint64_t v23 = 0;
        uint64_t v14 = v11;
        goto LABEL_13;
      }
      unsigned __int8 v52 = 1;
      id v29 = v53;
      id v30 = v24;
      uint64_t v26 = 0;
      uint64_t v31 = 0;
    }
    else
    {
      unsigned __int8 v52 = 0;
      swift_bridgeObjectRetain_n();
      uint64_t v31 = v25;
    }
    if (v52 != 255)
    {
      swift_retain();
      sub_25A3F4E80(v24, v31, v26, v52);
      sub_25A3F26F0();
      sub_25A3F4F70(v24, v31, v26, v52);
      swift_release();
      sub_25A3F4F70(v24, v31, v26, v52);
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_25A3F1FAC(_OWORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_retain();
  unint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = sub_25A3F0CF8(v8);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(qword_26A417A20);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = v9;
  *(void *)(a5 + 104) = v10;
  *(unsigned char *)(a5 + 112) = a2;
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v11 = sub_25A39D800(a1);
  uint64_t v42 = *(void *)(v9 + 16);
  if (v42)
  {
    swift_retain();
    uint64_t v12 = 0;
    uint64_t v13 = (unsigned __int8 *)(v9 + 56);
    uint64_t v43 = v11;
    while (1)
    {
      uint64_t v15 = *((void *)v13 - 3);
      uint64_t v16 = (void *)*((void *)v13 - 2);
      uint64_t v49 = *((void *)v13 - 1);
      uint64_t v44 = v13;
      unsigned __int8 v48 = *v13;
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v11;
      *(void *)(v17 + 24) = v12;
      uint64_t v18 = (void *)swift_allocObject();
      _OWORD v18[2] = 0;
      v18[3] = 0;
      v18[4] = sub_25A3F50C4;
      void v18[5] = v17;
      uint64_t v19 = *(os_unfair_lock_s **)(v15 + 88);
      MEMORY[0x270FA5388](v18);
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      char v45 = v16;
      uint64_t v20 = v16;
      uint64_t v14 = v49;
      sub_25A3F5138(v20, v49, v48);
      swift_retain();
      os_unfair_lock_lock(v19 + 25);
      sub_25A3F511C((uint64_t)&v19[4], (uint64_t)&v51);
      uint64_t v47 = v12;
      os_unfair_lock_unlock(v19 + 25);
      swift_release();
      __int16 v21 = v58;
      unsigned int v22 = HIBYTE(v58);
      if (v22 <= 0xFE) {
        break;
      }
LABEL_13:
      swift_release();
      uint64_t v11 = v43;
      swift_release();
      swift_release_n();
      id v30 = (void *)swift_allocObject();
      void v30[2] = 0;
      v30[3] = 0;
      v30[4] = sub_25A3F5160;
      v30[5] = v43;
      uint64_t v31 = (os_unfair_lock_s *)MEMORY[0x58];
      MEMORY[0x270FA5388](v30);
      swift_retain_n();
      swift_retain();
      os_unfair_lock_lock(v31 + 25);
      sub_25A3F60E0((uint64_t)&v31[4], (uint64_t)&v51);
      os_unfair_lock_unlock(v31 + 25);
      swift_release();
      __int16 v32 = v58;
      if (HIBYTE(v58) <= 0xFEu)
      {
        id v33 = v51;
        __int16 v34 = (void *)v52;
        int v35 = v53;
        int v36 = v54;
        int v38 = v55;
        int v37 = v56;
        int v39 = v57;
        if (v58 >= 0x200u)
        {
          v59[0] = (uint64_t)v51;
          v59[1] = v52;
          char v60 = v53;
          uint64_t v61 = v54;
          uint64_t v62 = v55;
          uint64_t v63 = v56;
          uint64_t v64 = v57;
          char v65 = v58;
          swift_retain();
          sub_25A3F2E38(v59);
          swift_release();
        }
        sub_25A3F5230(v33, v34, v35, v36, v38, v37, v39, v32);
        uint64_t v11 = v43;
        uint64_t v14 = v49;
      }
      uint64_t v12 = v47 + 1;
      uint64_t v13 = v44 + 32;
      swift_release();
      swift_release();
      swift_release_n();
      sub_25A3F5208(v45, v14, v48);
      if (v42 == v47 + 1)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
    }
    id v23 = v51;
    uint64_t v46 = (void *)v52;
    int v24 = v53;
    int v25 = v56;
    int v26 = v57;
    int v41 = v54;
    int v40 = v55;
    if (v22)
    {
      if (v22 != 1)
      {
LABEL_12:
        sub_25A3F5230(v23, v46, v24, v41, v40, v25, v26, v21);
        sub_25A3F5230(v23, v46, v24, v41, v40, v25, v26, v21);
        uint64_t v14 = v49;
        goto LABEL_13;
      }
      unsigned __int8 v50 = 1;
      id v27 = v51;
      id v28 = v23;
      uint64_t v29 = 0;
    }
    else
    {
      unsigned __int8 v50 = 0;
      uint64_t v29 = v52;
      swift_bridgeObjectRetain_n();
    }
    if (v50 != 255)
    {
      swift_retain();
      sub_25A3F5138(v23, v29, v50);
      sub_25A3F2804();
      sub_25A3F5208(v23, v29, v50);
      swift_release();
      sub_25A3F5208(v23, v29, v50);
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t sub_25A3F25BC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v6 = sub_25A510540();
  uint64_t v7 = sub_25A50FA40();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = a2(a1);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v9, 1, 1, v6);
  return sub_25A3F1888(v10, (uint64_t)v9, a3);
}

void sub_25A3F26F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  sub_25A3F4FF0((void **)(v2 + 16), &v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  uint64_t v3 = v8;
  swift_release();
  if (v3)
  {
    if (*(unsigned char *)(v1 + 112) == 1) {
      uint64_t v4 = sub_25A3F3B84(v3);
    }
    else {
      uint64_t v4 = sub_25A3F40EC(v3);
    }
    uint64_t v6 = v4;
    char v7 = v5;
    swift_bridgeObjectRelease();
    v7 &= 1u;
    uint64_t v8 = (uint64_t)v6;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    char v12 = 0;
    char v13 = v7;
    sub_25A3A4A8C(v6, v7);
    sub_25A39DF44((uint64_t)&v8);
    sub_25A3A4ABC(v6, v7);
    sub_25A3A4ABC(v6, v7);
  }
}

void sub_25A3F2804()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  sub_25A3F5288((void **)(v2 + 16), &v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  uint64_t v3 = v8;
  swift_release();
  if (v3)
  {
    if (*(unsigned char *)(v1 + 112) == 1) {
      uint64_t v4 = sub_25A3F3E48(v3);
    }
    else {
      uint64_t v4 = sub_25A3F4244(v3);
    }
    uint64_t v6 = v4;
    char v7 = v5;
    swift_bridgeObjectRelease();
    v7 &= 1u;
    uint64_t v8 = (uint64_t)v6;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    char v12 = 0;
    char v13 = v7;
    sub_25A3A4A8C(v6, v7);
    sub_25A39E414((uint64_t)&v8);
    sub_25A3A4ABC(v6, v7);
    sub_25A3A4ABC(v6, v7);
  }
}

void sub_25A3F2914(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = (void *)*v2;
  uint64_t v53 = v2[13];
  uint64_t v30 = v4[25];
  uint64_t v5 = v4[26];
  uint64_t v31 = v5;
  uint64_t v32 = v4[27];
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  type metadata accessor for TraverseFuture.Activity();
  uint64_t v6 = sub_25A50E5B0();
  swift_retain();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  uint64_t v8 = sub_25A50F1E0();
  uint64_t v9 = sub_25A50FA40();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TraverseFuture.swift", 126, 2, 145, 42, (uint64_t)"receiveUnderlyingCompletion(at:with:)", 37, 2, (uint64_t)sub_25A3F5060, (uint64_t)v29, v6, v9, WitnessTable);
  swift_release();
  if (v54)
  {
    if (*((unsigned char *)v3 + 112) == 1)
    {
      uint64_t v44 = (void *)v54;
      uint64_t v11 = swift_getWitnessTable();
      uint64_t v12 = Sequence.invertAndAccumulateErrors<A, B>()(v8, v5, v7, v11, MEMORY[0x263F8E4E0]);
      char v14 = v13;
      swift_bridgeObjectRelease();
      char v15 = v14 & 1;
    }
    else
    {
      uint64_t v35 = v54;
      uint64_t v16 = swift_getWitnessTable();
      Sequence.invert<A, B>()(v8, v5, v7, v16, MEMORY[0x263F8E4E0], (uint64_t *)&v44);
      swift_bridgeObjectRelease();
      uint64_t v12 = (uint64_t)v44;
      char v15 = v45;
    }
    id v27 = (void *)v12;
    char v28 = v15;
    uint64_t v35 = v12;
    LOBYTE(v36) = v15;
    sub_25A50F1E0();
    uint64_t v17 = sub_25A510540();
    sub_25A50B2F4(v17, &v44);
    uint64_t v18 = v44;
    uint64_t v19 = v45;
    uint64_t v20 = v46;
    uint64_t v21 = v47;
    uint64_t v22 = v48;
    uint64_t v23 = v49;
    uint64_t v24 = v50;
    char v25 = v52;
    uint64_t v26 = v51;
    uint64_t v35 = (uint64_t)v44;
    uint64_t v36 = v45;
    uint64_t v37 = v46;
    uint64_t v38 = v47;
    uint64_t v39 = v48;
    uint64_t v40 = v49;
    uint64_t v41 = v50;
    unsigned __int8 v42 = v51;
    char v43 = v52;
    sub_25A4EF7A8((uint64_t)&v35);
    sub_25A3A4ABC(v27, v28);
    sub_25A3F5084(v18, v19, v20, v21, v22, v23, v24, v26, v25);
  }
}

uint64_t sub_25A3F2C20(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 16);
  char v2 = *(unsigned char *)(a1 + 56);
  long long v4 = *(_OWORD *)a1;
  char v5 = v1;
  long long v6 = *(_OWORD *)(a1 + 24);
  long long v7 = *(_OWORD *)(a1 + 40);
  char v8 = v2;
  return sub_25A3F2FE8(&v4);
}

uint64_t sub_25A3F2C78(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *((unsigned __int8 *)a1 + 16);
  uint64_t v6 = a1[3];
  uint64_t v24 = a1[5];
  uint64_t v25 = a1[4];
  uint64_t v23 = a1[6];
  char v22 = *((unsigned char *)a1 + 56);
  uint64_t v7 = *(void *)(v1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  sub_25A3F60B0((uint64_t *)(v7 + 16), &v26);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  uint64_t v8 = v26;
  uint64_t result = swift_release();
  if (v8)
  {
    uint64_t v21 = v6;
    uint64_t v10 = *(void *)(v8 + 16);
    if (v10)
    {
      uint64_t v19 = v4;
      uint64_t v20 = v5;
      swift_bridgeObjectRetain();
      uint64_t v11 = (unsigned __int8 *)(v8 + 64);
      do
      {
        uint64_t v12 = *((void *)v11 - 4);
        char v13 = (void *)*((void *)v11 - 3);
        uint64_t v14 = *((void *)v11 - 2);
        uint64_t v15 = *((void *)v11 - 1);
        unsigned __int8 v16 = *v11;
        v11 += 40;
        long long v17 = *((_OWORD *)a1 + 1);
        long long v26 = *(_OWORD *)a1;
        long long v27 = v17;
        *(_OWORD *)char v28 = *((_OWORD *)a1 + 2);
        *(_OWORD *)&v28[9] = *(_OWORD *)((char *)a1 + 41);
        uint64_t v18 = *(void (**)(long long *))(*(void *)v12 + 192);
        swift_retain();
        sub_25A3F4E80(v13, v14, v15, v16);
        v18(&v26);
        swift_release();
        sub_25A3F4F70(v13, v14, v15, v16);
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      uint64_t v5 = v20;
      uint64_t v4 = v19;
    }
    swift_bridgeObjectRelease();
    *(void *)&long long v26 = v3;
    *((void *)&v26 + 1) = v4;
    *(void *)&long long v27 = v5;
    *((void *)&v27 + 1) = v21;
    *(void *)char v28 = v25;
    *(void *)&v28[8] = v24;
    *(void *)&v28[16] = v23;
    v28[24] = v22;
    char v29 = 2;
    return sub_25A39DF44((uint64_t)&v26);
  }
  return result;
}

uint64_t sub_25A3F2E38(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *((unsigned __int8 *)a1 + 16);
  uint64_t v6 = a1[3];
  uint64_t v23 = a1[5];
  uint64_t v24 = a1[4];
  uint64_t v22 = a1[6];
  char v21 = *((unsigned char *)a1 + 56);
  uint64_t v7 = *(void *)(v1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  sub_25A3F44B0((uint64_t *)(v7 + 16), &v25);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  uint64_t v8 = v25;
  uint64_t result = swift_release();
  if (v8)
  {
    uint64_t v20 = v6;
    uint64_t v10 = *(void *)(v8 + 16);
    if (v10)
    {
      uint64_t v18 = v4;
      uint64_t v19 = v3;
      swift_bridgeObjectRetain();
      uint64_t v11 = (unsigned __int8 *)(v8 + 56);
      do
      {
        uint64_t v12 = *((void *)v11 - 3);
        char v13 = (void *)*((void *)v11 - 2);
        uint64_t v14 = *((void *)v11 - 1);
        unsigned __int8 v15 = *v11;
        v11 += 32;
        long long v16 = *((_OWORD *)a1 + 1);
        long long v25 = *(_OWORD *)a1;
        long long v26 = v16;
        *(_OWORD *)long long v27 = *((_OWORD *)a1 + 2);
        *(_OWORD *)&v27[9] = *(_OWORD *)((char *)a1 + 41);
        long long v17 = *(void (**)(long long *))(*(void *)v12 + 192);
        swift_retain();
        sub_25A3F5138(v13, v14, v15);
        v17(&v25);
        swift_release();
        sub_25A3F5208(v13, v14, v15);
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      uint64_t v4 = v18;
      uint64_t v3 = v19;
    }
    swift_bridgeObjectRelease();
    *(void *)&long long v25 = v3;
    *((void *)&v25 + 1) = v4;
    *(void *)&long long v26 = v5;
    *((void *)&v26 + 1) = v20;
    *(void *)long long v27 = v24;
    *(void *)&v27[8] = v23;
    *(void *)&v27[16] = v22;
    v27[24] = v21;
    char v28 = 2;
    return sub_25A39E414((uint64_t)&v25);
  }
  return result;
}

uint64_t sub_25A3F2FE8(long long *a1)
{
  char v2 = (void *)*v1;
  long long v3 = a1[1];
  long long v25 = *a1;
  long long v26 = v3;
  v27[0] = a1[2];
  *(_OWORD *)((char *)v27 + 9) = *(long long *)((char *)a1 + 41);
  uint64_t v4 = *(void *)a1;
  uint64_t v16 = *((void *)a1 + 1);
  uint64_t v5 = *((unsigned __int8 *)a1 + 16);
  uint64_t v15 = *((void *)a1 + 3);
  uint64_t v14 = *((void *)a1 + 4);
  uint64_t v13 = *((void *)a1 + 5);
  uint64_t v12 = *((void *)a1 + 6);
  int v11 = *((unsigned __int8 *)a1 + 56);
  uint64_t v24 = v1[13];
  uint64_t v18 = v2[25];
  uint64_t v19 = v2[26];
  uint64_t v20 = v2[27];
  type metadata accessor for TraverseFuture.Activity();
  uint64_t v6 = sub_25A50E5B0();
  type metadata accessor for TraverseFuture.Activity.Fiber();
  sub_25A50F1E0();
  uint64_t v7 = sub_25A50FA40();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TraverseFuture.swift", 126, 2, 167, 42, (uint64_t)"cancel(callsite:)", 17, 2, (uint64_t)sub_25A3F44B0, (uint64_t)v17, v6, v7, WitnessTable);
  uint64_t result = swift_release();
  if (v21[0])
  {
    v10[1] = v10;
    MEMORY[0x270FA5388](result);
    v10[0] = v5;
    swift_getWitnessTable();
    sub_25A50EFF0();
    swift_bridgeObjectRelease();
    v21[0] = v4;
    v21[1] = v16;
    v21[2] = v10[0];
    v21[3] = v15;
    v21[4] = v14;
    v21[5] = v13;
    v21[6] = v12;
    char v22 = v11;
    char v23 = 2;
    return sub_25A4EF7A8((uint64_t)v21);
  }
  return result;
}

uint64_t sub_25A3F32E4(void **a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6 = *a1;
  if (!*a1) {
    return (uint64_t)v6;
  }
  int v11 = a1;
  char v12 = a6 & 1;
  sub_25A3F4E98(a3, a4, a5, a6 & 1);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = v6;
  if (result)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)sub_25A3C7BBC(v6);
  uint64_t v14 = (void *)result;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_17;
  }
LABEL_4:
  if (v14[2] > a2)
  {
    uint64_t v15 = &v14[5 * a2];
    sub_25A3F4F70((void *)v15[5], v15[6], v15[7], *((unsigned char *)v15 + 64));
    void v15[5] = a3;
    v15[6] = a4;
    v15[7] = a5;
    *((unsigned char *)v15 + 64) = v12;
    int64_t v16 = v14[2];
    if (v16)
    {
      long long v27 = v11;
      uint64_t v28 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_25A39A148(0, v16, 0);
      uint64_t v17 = v28;
      long long v26 = v14;
      uint64_t v18 = (unsigned __int8 *)(v14 + 8);
      do
      {
        uint64_t v19 = (void *)*((void *)v18 - 3);
        uint64_t v20 = *((void *)v18 - 2);
        uint64_t v21 = *((void *)v18 - 1);
        unsigned __int8 v22 = *v18;
        sub_25A3F4E80(v19, v20, v21, *v18);
        unint64_t v24 = *(void *)(v28 + 16);
        unint64_t v23 = *(void *)(v28 + 24);
        if (v24 >= v23 >> 1) {
          sub_25A39A148(v23 > 1, v24 + 1, 1);
        }
        v18 += 40;
        *(void *)(v28 + 16) = v24 + 1;
        unint64_t v25 = v28 + 32 * v24;
        *(void *)(v25 + 32) = v19;
        *(void *)(v25 + 40) = v20;
        *(void *)(v25 + 48) = v21;
        *(unsigned char *)(v25 + 56) = v22;
        --v16;
      }
      while (v16);
      uint64_t v14 = v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v11 = v27;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = MEMORY[0x263F8EE78];
    }
    uint64_t v6 = sub_25A4E33F8(v17);
    swift_bridgeObjectRelease();
    if (v6[2] == v14[2])
    {
      swift_bridgeObjectRelease();
      *int v11 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = 0;
      *int v11 = v14;
    }
    return (uint64_t)v6;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_25A3F34F4(void **a1, unint64_t a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v5 = *a1;
  if (!*a1) {
    return (uint64_t)v5;
  }
  uint64_t v9 = a1;
  char v10 = a5 & 1;
  sub_25A3F5150(a3, a4, a5 & 1);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  char v12 = v5;
  if (result)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)sub_25A3C7BE4(v5);
  char v12 = (void *)result;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_17;
  }
LABEL_4:
  if (v12[2] > a2)
  {
    uint64_t v13 = &v12[4 * a2];
    sub_25A3F5208((void *)v13[5], v13[6], *((unsigned char *)v13 + 56));
    void v13[5] = a3;
    void v13[6] = a4;
    *((unsigned char *)v13 + 56) = v10;
    int64_t v14 = v12[2];
    if (v14)
    {
      unint64_t v24 = v9;
      uint64_t v25 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_25A39A1D8(0, v14, 0);
      uint64_t v15 = v25;
      unint64_t v23 = v12;
      int64_t v16 = (unsigned __int8 *)(v12 + 7);
      do
      {
        uint64_t v17 = (void *)*((void *)v16 - 2);
        uint64_t v18 = *((void *)v16 - 1);
        unsigned __int8 v19 = *v16;
        sub_25A3F5138(v17, v18, *v16);
        unint64_t v21 = *(void *)(v25 + 16);
        unint64_t v20 = *(void *)(v25 + 24);
        if (v21 >= v20 >> 1) {
          sub_25A39A1D8(v20 > 1, v21 + 1, 1);
        }
        v16 += 32;
        *(void *)(v25 + 16) = v21 + 1;
        unint64_t v22 = v25 + 24 * v21;
        *(void *)(v22 + 32) = v17;
        *(void *)(v22 + 40) = v18;
        *(unsigned char *)(v22 + 48) = v19;
        --v14;
      }
      while (v14);
      char v12 = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = v24;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = MEMORY[0x263F8EE78];
    }
    uint64_t v5 = sub_25A4E3514(v15);
    swift_bridgeObjectRelease();
    if (v5[2] == v12[2])
    {
      swift_bridgeObjectRelease();
      void *v9 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = 0;
      void *v9 = v12;
    }
    return (uint64_t)v5;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_25A3F36E8@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v39 = a6;
  uint64_t v40 = a4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v12 = sub_25A510540();
  uint64_t v13 = sub_25A50FA40();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t result = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v41 = a1;
  uint64_t v18 = *a1;
  if (*a1)
  {
    uint64_t v38 = a7;
    uint64_t v43 = v18;
    uint64_t v19 = *(void *)(v12 - 8);
    unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    uint64_t v37 = result;
    v20(v17, a3, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v12);
    uint64_t v36 = a5;
    uint64_t v21 = v39;
    uint64_t v22 = type metadata accessor for TraverseFuture.Activity.Fiber();
    uint64_t v23 = sub_25A50F1E0();
    swift_bridgeObjectRetain();
    sub_25A50F110();
    uint64_t v24 = v43;
    sub_25A474B7C(a2, v43);
    unint64_t v25 = v24
        + ((*(unsigned __int8 *)(*(void *)(v22 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v22 - 8) + 80))
        + *(void *)(*(void *)(v22 - 8) + 72) * a2
        + *(int *)(v22 + 44);
    uint64_t v26 = v37;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 40))(v25, v17, v37);
    nullsub_1(v23);
    uint64_t v42 = v43;
    MEMORY[0x270FA5388](v43);
    uint64_t v27 = v36;
    *(&v36 - 4) = v40;
    *(&v36 - 3) = v27;
    *(&v36 - 2) = v21;
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v30 = sub_25A39F5D4((void (*)(char *, char *))sub_25A3F50A0, (uint64_t)(&v36 - 6), v23, v26, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = v30;
    sub_25A50F1E0();
    swift_getWitnessTable();
    uint64_t v31 = Collection.compacted<A>(type:)();
    swift_bridgeObjectRelease();
    uint64_t v32 = MEMORY[0x26113D160](v31, v12);
    uint64_t v33 = v43;
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = MEMORY[0x26113D160](v34, v22);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v32 == v35)
    {
      *uint64_t v41 = 0;
      *uint64_t v38 = v31;
    }
    else
    {
      *uint64_t v41 = v33;
      *uint64_t v38 = 0;
    }
  }
  else
  {
    *a7 = 0;
  }
  return result;
}

uint64_t sub_25A3F3AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for TraverseFuture.Activity.Fiber() + 44);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  uint64_t v4 = sub_25A50FA40();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, v3, v4);
}

void *sub_25A3F3B84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    char v2 = (char *)(swift_bridgeObjectRetain() + 56);
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v5 = (void *)*((void *)v2 - 3);
      uint64_t v6 = *((void *)v2 - 2);
      uint64_t v7 = *((void *)v2 - 1);
      char v8 = *v2;
      if (*v2)
      {
        id v9 = v5;
        id v10 = v5;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = sub_25A38B97C(0, v4[2] + 1, 1, v4);
        }
        unint64_t v12 = v4[2];
        unint64_t v11 = v4[3];
        if (v12 >= v11 >> 1) {
          uint64_t v4 = sub_25A38B97C((void *)(v11 > 1), v12 + 1, 1, v4);
        }
        _OWORD v4[2] = v12 + 1;
        v4[v12 + 4] = v5;
      }
      else
      {
        sub_25A3F4E98(*((void **)v2 - 3), *((void *)v2 - 2), *((void *)v2 - 1), 0);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = sub_25A38B854(0, v3[2] + 1, 1, v3);
        }
        unint64_t v14 = v3[2];
        unint64_t v13 = v3[3];
        if (v14 >= v13 >> 1) {
          uint64_t v3 = sub_25A38B854((void *)(v13 > 1), v14 + 1, 1, v3);
        }
        id v3[2] = v14 + 1;
        uint64_t v15 = &v3[3 * v14];
        v15[4] = v5;
        void v15[5] = v6;
        v15[6] = v7;
      }
      v2 += 32;
      sub_25A3F4F88(v5, v6, v7, v8);
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
    if (v4[2]) {
      goto LABEL_16;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    return v3;
  }
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  if (!*(void *)(MEMORY[0x263F8EE78] + 16)) {
    goto LABEL_20;
  }
LABEL_16:
  uint64_t v16 = (void *)v4[4];
  id v17 = v16;
  swift_bridgeObjectRelease();
  if (v4[2] == 1)
  {
    swift_bridgeObjectRelease();
    id v18 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
    uint64_t v19 = sub_25A5102E0();
    if (v19)
    {
      uint64_t v3 = (void *)v19;
    }
    else
    {
      uint64_t v3 = (void *)swift_allocError();
      void *v23 = v16;
    }
  }
  else
  {
    uint64_t v20 = sub_25A395B70((uint64_t)v4);
    swift_bridgeObjectRelease();
    uint64_t v21 = sub_25A4BBDA8(v20);
    swift_bridgeObjectRelease();
    sub_25A3F500C();
    uint64_t v3 = (void *)swift_allocError();
    *uint64_t v22 = v21;
  }

  return v3;
}

void *sub_25A3F3E48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    char v2 = (char *)(swift_bridgeObjectRetain() + 48);
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v5 = (void *)*((void *)v2 - 2);
      uint64_t v6 = *((void *)v2 - 1);
      char v7 = *v2;
      if (*v2)
      {
        id v8 = v5;
        id v9 = v5;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = sub_25A38B97C(0, v4[2] + 1, 1, v4);
        }
        unint64_t v11 = v4[2];
        unint64_t v10 = v4[3];
        if (v11 >= v10 >> 1) {
          uint64_t v4 = sub_25A38B97C((void *)(v10 > 1), v11 + 1, 1, v4);
        }
        _OWORD v4[2] = v11 + 1;
        v4[v11 + 4] = v5;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = sub_25A38BD04(0, v3[2] + 1, 1, v3);
        }
        unint64_t v13 = v3[2];
        unint64_t v12 = v3[3];
        if (v13 >= v12 >> 1) {
          uint64_t v3 = sub_25A38BD04((void *)(v12 > 1), v13 + 1, 1, v3);
        }
        id v3[2] = v13 + 1;
        unint64_t v14 = &v3[2 * v13];
        uint64_t v14[4] = v5;
        v14[5] = v6;
      }
      v2 += 24;
      sub_25A3F5220(v5, v6, v7);
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
    if (v4[2]) {
      goto LABEL_16;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    return v3;
  }
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  if (!*(void *)(MEMORY[0x263F8EE78] + 16)) {
    goto LABEL_20;
  }
LABEL_16:
  uint64_t v15 = (void *)v4[4];
  id v16 = v15;
  swift_bridgeObjectRelease();
  if (v4[2] == 1)
  {
    swift_bridgeObjectRelease();
    id v17 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
    uint64_t v18 = sub_25A5102E0();
    if (v18)
    {
      uint64_t v3 = (void *)v18;
    }
    else
    {
      uint64_t v3 = (void *)swift_allocError();
      *uint64_t v22 = v15;
    }
  }
  else
  {
    uint64_t v19 = sub_25A395B70((uint64_t)v4);
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_25A4BBDA8(v19);
    swift_bridgeObjectRelease();
    sub_25A3F500C();
    uint64_t v3 = (void *)swift_allocError();
    *uint64_t v21 = v20;
  }

  return v3;
}

void *sub_25A3F40EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    char v2 = (unsigned char *)(swift_bridgeObjectRetain() + 56);
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v4 = (void *)*((void *)v2 - 3);
      if (*v2) {
        break;
      }
      uint64_t v5 = *((void *)v2 - 2);
      uint64_t v6 = *((void *)v2 - 1);
      sub_25A3F4E98(*((void **)v2 - 3), v5, v6, 0);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_25A38B854(0, v3[2] + 1, 1, v3);
      }
      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1) {
        uint64_t v3 = sub_25A38B854((void *)(v7 > 1), v8 + 1, 1, v3);
      }
      v2 += 32;
      id v3[2] = v8 + 1;
      id v9 = &v3[3 * v8];
      void v9[4] = v4;
      v9[5] = v5;
      void v9[6] = v6;
      sub_25A3F4F88(v4, v5, v6, 0);
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    id v10 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    return (void *)MEMORY[0x263F8EE78];
  }
  return v4;
}

void *sub_25A3F4244(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    char v2 = (unsigned char *)(swift_bridgeObjectRetain() + 48);
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v4 = (void *)*((void *)v2 - 2);
      if (*v2) {
        break;
      }
      uint64_t v5 = *((void *)v2 - 1);
      swift_bridgeObjectRetain_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_25A38BD04(0, v3[2] + 1, 1, v3);
      }
      unint64_t v7 = v3[2];
      unint64_t v6 = v3[3];
      if (v7 >= v6 >> 1) {
        uint64_t v3 = sub_25A38BD04((void *)(v6 > 1), v7 + 1, 1, v3);
      }
      v2 += 24;
      id v3[2] = v7 + 1;
      unint64_t v8 = &v3[2 * v7];
      _OWORD v8[4] = v4;
      uint64_t v8[5] = v5;
      sub_25A3F5220(v4, v5, 0);
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    id v9 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    return (void *)MEMORY[0x263F8EE78];
  }
  return v4;
}

uint64_t sub_25A3F4378()
{
  uint64_t v0 = Future.deinit();
  swift_release();

  return MEMORY[0x270FA0228](v0, 113, 7);
}

uint64_t sub_25A3F43C0(uint64_t (*a1)(long long *), uint64_t a2, long long *a3)
{
  uint64_t v3 = *((void *)a3 + 2);
  char v4 = *((unsigned char *)a3 + 24);
  long long v6 = *a3;
  uint64_t v7 = v3;
  char v8 = v4;
  return a1(&v6);
}

uint64_t sub_25A3F4410@<X0>(void **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_25A3F32E4(a1, a2, *(void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(unsigned char *)(a3 + 24));
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t sub_25A3F444C(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  sub_25A39F4F8(a1, (uint64_t)v10, &qword_26A415D90);
  return sub_25A4CBCFC((uint64_t)v10, a2, a3, a4, a5);
}

uint64_t *sub_25A3F44B0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  if (*result) {
    *uint64_t result = 0;
  }
  *a2 = v2;
  return result;
}

void sub_25A3F44C4(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  sub_25A39F4F8(a1, (uint64_t)v9, &qword_26A415D90);
  sub_25A4C87C0((uint64_t)v9, a2, a3, a4, a5);
}

uint64_t sub_25A3F4528(uint64_t (*a1)(long long *), uint64_t a2, long long *a3)
{
  char v3 = *((unsigned char *)a3 + 16);
  long long v5 = *a3;
  char v6 = v3;
  return a1(&v5);
}

uint64_t sub_25A3F4570(uint64_t *a1, int a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v54 = a5;
  uint64_t v53 = a4;
  LODWORD(v56) = a2;
  uint64_t v8 = *(void *)(*(void *)v5 + 200);
  uint64_t v9 = *(void *)(*(void *)v5 + 208);
  uint64_t v10 = *(void *)(*(void *)v5 + 216);
  unint64_t v11 = (char *)type metadata accessor for TraverseFuture.Activity.Fiber();
  uint64_t v51 = *((void *)v11 - 1);
  MEMORY[0x270FA5388](v11);
  char v52 = &v42[-v12];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v58 = sub_25A50FA40();
  uint64_t v55 = *(void (***)(void *, unsigned char *, uint64_t))(v58 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v58);
  uint64_t v57 = &v42[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  id v17 = &v42[-v16];
  uint64_t v18 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v20 = &v42[-v19];
  uint64_t v49 = *a1;
  uint64_t v48 = a1[1];
  int v47 = *((unsigned __int8 *)a1 + 16);
  long long v46 = *(_OWORD *)(a1 + 3);
  uint64_t v45 = a1[5];
  uint64_t v44 = a1[6];
  int v43 = *((unsigned __int8 *)a1 + 56);
  uint64_t v21 = type metadata accessor for Inhabited();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(v21, WitnessTable, (uint64_t)v20);
  uint64_t v60 = v8;
  uint64_t v61 = v9;
  uint64_t v62 = v10;
  uint64_t v63 = v53;
  uint64_t v64 = v54;
  uint64_t v24 = sub_25A4E8930((void (*)(char *, char *))sub_25A3F52F8, (uint64_t)v59, v8, v11, MEMORY[0x263F8E628], v10, MEMORY[0x263F8E658], v23);
  (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v20, v8);
  v67[0] = v24;
  uint64_t v25 = type metadata accessor for TraverseFuture.Activity();
  *(void *)(v6 + 104) = sub_25A3EF560(v67, v25);
  *(unsigned char *)(v6 + 112) = v56;
  swift_release();
  v67[0] = v49;
  v67[1] = v48;
  uint64_t v26 = TupleTypeMetadata2;
  char v68 = v47;
  long long v69 = v46;
  uint64_t v70 = v45;
  uint64_t v71 = v44;
  char v72 = v43;
  uint64_t v27 = sub_25A4EECC4((uint64_t)v67);
  v67[0] = v24;
  uint64_t v53 = v11;
  uint64_t v28 = sub_25A50F1E0();
  swift_retain();
  uint64_t v29 = swift_getWitnessTable();
  MEMORY[0x26113CF40](&v66, v28, v29);
  swift_bridgeObjectRelease();
  uint64_t v65 = v66;
  sub_25A5100D0();
  sub_25A5100A0();
  uint64_t v56 = sub_25A5100C0();
  v55 += 4;
  uint64_t v54 = v26 - 8;
  uint64_t v30 = (void (**)(unsigned char *, char *, char *))(v51 + 32);
  uint64_t v31 = (void (**)(unsigned char *, char *))(v51 + 8);
  for (unint64_t i = v52; ; (*v31)(i, v40))
  {
    uint64_t v33 = v57;
    sub_25A5100B0();
    (*v55)(v17, v33, v58);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v17, 1, v26) == 1) {
      break;
    }
    uint64_t v34 = *v17;
    uint64_t v35 = (char *)v17 + *(int *)(v26 + 48);
    uint64_t v36 = v17;
    uint64_t v37 = v26;
    uint64_t v38 = v53;
    (*v30)(i, v35, v53);
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v27;
    *(void *)(v39 + 24) = v34;
    swift_retain();
    Future.observeCompletion(_:)((uint64_t)sub_25A3F5320, v39);
    swift_release();
    swift_retain();
    Future.observeCancelation(_:)((uint64_t)sub_25A3F534C, v27);
    swift_release();
    uint64_t v40 = v38;
    uint64_t v26 = v37;
    id v17 = v36;
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t sub_25A3F4BC8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)&long long v13 = a1;
  *((void *)&v13 + 1) = a2;
  char v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  char v19 = a8;
  return sub_25A3F1704(&v13, a9, a10, a11, a12);
}

uint64_t sub_25A3F4C1C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for TraverseFuture()
{
  return __swift_instantiateGenericMetadata();
}

void *sub_25A3F4C84(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for FutureSerialQueue.State()
{
  return swift_bridgeObjectRelease();
}

void *sub_25A3F4CBC(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_25A3F4CF8(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for TraverseFuture.Activity()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TraverseFuture.Activity.Fiber()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A3F4D5C(uint64_t *a1)
{
  uint64_t v2 = *(_OWORD **)(v1 + 40);
  uint64_t v3 = *a1;
  long long v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  v7[0] = v2[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)v2 + 41);
  return (*(uint64_t (**)(_OWORD *))(*(void *)v3 + 192))(v6);
}

uint64_t sub_25A3F4DD0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_25A3F4E08()
{
}

uint64_t sub_25A3F4E44(uint64_t a1)
{
  return sub_25A3F4F08(a1, &qword_26A415D78, (uint64_t (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A4C7A58);
}

double sub_25A3F4E64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A503718(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

id sub_25A3F4E80(id result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255) {
    return sub_25A3F4E98(result, a2, a3, a4 & 1);
  }
  return result;
}

id sub_25A3F4E98(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

uint64_t sub_25A3F4EA8(_OWORD *a1)
{
  long long v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v4[0] = a1[2];
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)a1 + 41);
  return sub_25A3F2C78((uint64_t *)v3);
}

uint64_t sub_25A3F4EE8(uint64_t a1)
{
  return sub_25A3F4F08(a1, &qword_26A415D78, (uint64_t (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A4CAFFC);
}

uint64_t sub_25A3F4F08(uint64_t a1, uint64_t *a2, uint64_t (*a3)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v7 = v3[5];
  sub_25A39F4F8(a1, (uint64_t)v10, a2);
  return a3(v10, v5, v6, v8, v7);
}

void sub_25A3F4F70(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255) {
    sub_25A3F4F88(a1, a2, a3, a4 & 1);
  }
}

void sub_25A3F4F88(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

void sub_25A3F4F98(void *a1, int a2, void *a3, int a4, int a5, int a6, int a7, __int16 a8)
{
  if (HIBYTE(a8) != 255) {
    sub_25A3F4FD0(a1, a2, a3, a4, a5, a6, a7, a8, SHIBYTE(a8));
  }
}

void sub_25A3F4FD0(void *a1, int a2, id a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 1)
  {
  }
  else if (!a9)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_25A3F4FF0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25A3F4410(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

unint64_t sub_25A3F500C()
{
  unint64_t result = qword_26A417A08;
  if (!qword_26A417A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417A08);
  }
  return result;
}

uint64_t sub_25A3F5060@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25A3F36E8(a1, *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

void sub_25A3F5084(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 1)
  {
  }
  else if (!a9)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_25A3F50A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3F3AD8(a1, a2);
}

void sub_25A3F50C4()
{
}

uint64_t sub_25A3F50FC(uint64_t a1)
{
  return sub_25A3F4F08(a1, &qword_26A415D90, (uint64_t (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A4C87C0);
}

double sub_25A3F511C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A503934(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

id sub_25A3F5138(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_25A3F5150(result, a2, a3 & 1);
  }
  return result;
}

id sub_25A3F5150(void *a1, uint64_t a2, char a3)
{
  if (a3) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

uint64_t sub_25A3F5160(_OWORD *a1)
{
  long long v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v4[0] = a1[2];
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)a1 + 41);
  return sub_25A3F2E38((uint64_t *)v3);
}

uint64_t objectdestroy_2Tm()
{
  long long v1 = *(void **)(v0 + 16);
  if ((unint64_t)v1 >= 2) {

  }
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A3F51E8(uint64_t a1)
{
  return sub_25A3F4F08(a1, &qword_26A415D90, (uint64_t (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A4CBCFC);
}

void sub_25A3F5208(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    sub_25A3F5220(a1, a2, a3 & 1);
  }
}

void sub_25A3F5220(void *a1, uint64_t a2, char a3)
{
  if (a3) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

void sub_25A3F5230(void *a1, void *a2, int a3, int a4, int a5, int a6, int a7, __int16 a8)
{
  if (HIBYTE(a8) != 255) {
    sub_25A3F5268(a1, a2, a3, a4, a5, a6, a7, a8, SHIBYTE(a8));
  }
}

void sub_25A3F5268(void *a1, id a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 1)
  {
  }
  else if (!a9)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_25A3F5288@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_25A3F34F4(a1, *(void *)(v2 + 16), **(void ***)(v2 + 24), *(void *)(*(void *)(v2 + 24) + 8), *(unsigned char *)(*(void *)(v2 + 24) + 16));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_25A3F52C0(uint64_t a1)
{
  sub_25A3F52F0(a1);

  return swift_retain();
}

uint64_t sub_25A3F52F0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_25A3F52F8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_25A3F25BC(a1, *(uint64_t (**)(uint64_t))(v2 + 40), a2);
}

void sub_25A3F5320(uint64_t a1)
{
  sub_25A3F2914(*(void *)(v1 + 24), a1);
}

uint64_t sub_25A3F534C(uint64_t a1)
{
  return sub_25A3F2C20(a1);
}

uint64_t sub_25A3F5354()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  uint64_t result = sub_25A50FA40();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25A3F541C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6 & 0xF8 | 7;
  uint64_t v8 = ~v7;
  if (*(void *)(v5 + 64) <= 8uLL) {
    uint64_t v9 = 8;
  }
  else {
    uint64_t v9 = *(void *)(v5 + 64);
  }
  uint64_t v10 = *a2;
  *a1 = *a2;
  if ((v6 & 0x1000F8) != 0 || (((v6 & 0xF8) + 15) & (unint64_t)~v7) + v9 + 1 > 0x18)
  {
    a1 = (uint64_t *)(v10 + ((v7 + 16) & v8));
    swift_retain();
  }
  else
  {
    uint64_t v12 = (void *)(((unint64_t)a1 + 15) & v8);
    long long v13 = (id *)(((unint64_t)a2 + 15) & v8);
    unsigned int v14 = *((unsigned __int8 *)v13 + v9);
    swift_retain();
    if (v14 > 1)
    {
      memcpy(v12, v13, v9 + 1);
    }
    else if (v14 == 1)
    {
      id v15 = *v13;
      id v16 = *v13;
      *uint64_t v12 = v15;
      *((unsigned char *)v12 + v9) = 1;
    }
    else
    {
      (*(void (**)(void *, id *, uint64_t))(v5 + 16))(v12, v13, v4);
      *((unsigned char *)v12 + v9) = 0;
    }
  }
  return a1;
}

void sub_25A3F5570(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  int v6 = (void **)((a1 + v5 + 8) & ~v5);
  unint64_t v7 = *(void *)(v4 + 64);
  if (v7 <= 8) {
    unint64_t v7 = 8;
  }
  unsigned int v8 = *((unsigned __int8 *)v6 + v7);
  if (v8 <= 1)
  {
    if (v8 == 1)
    {
      uint64_t v9 = *v6;
    }
    else
    {
      uint64_t v10 = *(void (**)(void))(v4 + 8);
      v10();
    }
  }
}

void *sub_25A3F5660(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v7 = v6 + 15;
  unint64_t v8 = (unint64_t)a1 + v6 + 15;
  unint64_t v9 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (void *)(v8 & v9);
  unint64_t v11 = (id *)(((unint64_t)a2 + v7) & v9);
  if (*(void *)(v5 + 64) <= 8uLL) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = *(void *)(v5 + 64);
  }
  unsigned int v13 = *((unsigned __int8 *)v11 + v12);
  swift_retain();
  if (v13 > 1)
  {
    memcpy(v10, v11, v12 + 1);
  }
  else if (v13 == 1)
  {
    id v14 = *v11;
    id v15 = *v11;
    *uint64_t v10 = v14;
    *((unsigned char *)v10 + v12) = 1;
  }
  else
  {
    (*(void (**)(void *, id *, uint64_t))(v5 + 16))(v10, v11, v4);
    *((unsigned char *)v10 + v12) = 0;
  }
  return a1;
}

void *sub_25A3F5780(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v9 = v8 + 15;
  unint64_t v10 = (unint64_t)a1 + v8 + 15;
  unint64_t v11 = ~v8 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = (id *)(v10 & v11);
  unsigned int v13 = (unsigned __int8 *)(((unint64_t)a2 + v9) & v11);
  if (*(void *)(v7 + 64) <= 8uLL) {
    uint64_t v14 = 8;
  }
  else {
    uint64_t v14 = *(void *)(v7 + 64);
  }
  unsigned int v15 = *((unsigned __int8 *)v12 + v14);
  unsigned int v16 = v13[v14];
  if (v15 > 1)
  {
    if (v16 <= 1)
    {
      if (v16 != 1)
      {
LABEL_29:
        (*(void (**)(id *, unsigned __int8 *, uint64_t))(v7 + 16))(v12, v13, v6);
        *((unsigned char *)v12 + v14) = 0;
        return a1;
      }
      goto LABEL_11;
    }
LABEL_15:
    memcpy(v12, v13, v14 + 1);
    return a1;
  }
  if (v16 > 1)
  {
    if (v15 == 1) {

    }
    else {
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v10 & v11, v6);
    }
    goto LABEL_15;
  }
  if (v12 != (id *)v13)
  {
    if (v15 == 1) {

    }
    else {
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v10 & v11, v6);
    }
    unsigned int v19 = v13[v14];
    unsigned int v20 = v19 - 2;
    if (v19 >= 2)
    {
      if (v14 <= 3) {
        uint64_t v21 = v14;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *v13;
          goto LABEL_26;
        case 2:
          int v22 = *(unsigned __int16 *)v13;
          goto LABEL_26;
        case 3:
          int v22 = *(unsigned __int16 *)v13 | (v13[2] << 16);
          goto LABEL_26;
        case 4:
          int v22 = *(_DWORD *)v13;
LABEL_26:
          int v23 = (v22 | (v20 << (8 * v14))) + 2;
          unsigned int v19 = v22 + 2;
          if (v14 < 4) {
            unsigned int v19 = v23;
          }
          break;
        default:
          break;
      }
    }
    if (v19 != 1) {
      goto LABEL_29;
    }
LABEL_11:
    uint64_t v17 = *(void **)v13;
    id v18 = *(id *)v13;
    *uint64_t v12 = v17;
    *((unsigned char *)v12 + v14) = 1;
  }
  return a1;
}

void *sub_25A3F59C4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  uint64_t v6 = v5 + 15;
  unint64_t v7 = (unint64_t)a1 + v5 + 15;
  unint64_t v8 = ~v5 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = (void *)(v7 & v8);
  unint64_t v10 = (void *)(((unint64_t)a2 + v6) & v8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  unsigned int v12 = *((unsigned __int8 *)v10 + v11);
  if (v12 > 1)
  {
    memcpy((void *)(v7 & v8), v10, v11 + 1);
  }
  else if (v12 == 1)
  {
    void *v9 = *v10;
    *((unsigned char *)v9 + v11) = 1;
  }
  else
  {
    (*(void (**)(unint64_t))(v4 + 32))(v7 & v8);
    *((unsigned char *)v9 + v11) = 0;
  }
  return a1;
}

void *sub_25A3F5ABC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v9 = v8 + 15;
  unint64_t v10 = (unint64_t)a1 + v8 + 15;
  unint64_t v11 = ~v8 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v12 = (id *)(v10 & v11);
  unsigned int v13 = (unsigned __int8 *)(((unint64_t)a2 + v9) & v11);
  if (*(void *)(v7 + 64) <= 8uLL) {
    uint64_t v14 = 8;
  }
  else {
    uint64_t v14 = *(void *)(v7 + 64);
  }
  unsigned int v15 = *((unsigned __int8 *)v12 + v14);
  unsigned int v16 = v13[v14];
  if (v15 > 1)
  {
    if (v16 <= 1)
    {
      if (v16 != 1)
      {
LABEL_29:
        (*(void (**)(id *, unsigned __int8 *, uint64_t))(v7 + 32))(v12, v13, v6);
        *((unsigned char *)v12 + v14) = 0;
        return a1;
      }
      goto LABEL_11;
    }
LABEL_15:
    memcpy(v12, v13, v14 + 1);
    return a1;
  }
  if (v16 > 1)
  {
    if (v15 == 1) {

    }
    else {
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v10 & v11, v6);
    }
    goto LABEL_15;
  }
  if (v12 != (id *)v13)
  {
    if (v15 == 1) {

    }
    else {
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v10 & v11, v6);
    }
    unsigned int v17 = v13[v14];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v14 <= 3) {
        uint64_t v19 = v14;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *v13;
          goto LABEL_26;
        case 2:
          int v20 = *(unsigned __int16 *)v13;
          goto LABEL_26;
        case 3:
          int v20 = *(unsigned __int16 *)v13 | (v13[2] << 16);
          goto LABEL_26;
        case 4:
          int v20 = *(_DWORD *)v13;
LABEL_26:
          int v21 = (v20 | (v18 << (8 * v14))) + 2;
          unsigned int v17 = v20 + 2;
          if (v14 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    if (v17 != 1) {
      goto LABEL_29;
    }
LABEL_11:
    *unsigned int v12 = *(id *)v13;
    *((unsigned char *)v12 + v14) = 1;
  }
  return a1;
}

uint64_t sub_25A3F5CF0(unsigned __int16 *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (v4 <= 8) {
    unint64_t v4 = 8;
  }
  if (!a2) {
    return 0;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  uint64_t v7 = v4
     + ((unsigned __int16)((*(_WORD *)(v3 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v3 + 80) & 0xF8) & 0x1F8)
     + 1;
  char v8 = 8 * v7;
  if (v7 > 3) {
    goto LABEL_10;
  }
  unsigned int v10 = (a2 - 0x7FFFFFFF + ~(-1 << v8)) >> v8;
  if (v10 > 0xFFFE)
  {
    int v9 = *(_DWORD *)((char *)a1 + v7);
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
  if (v10 <= 0xFE)
  {
    if (!v10) {
      goto LABEL_5;
    }
LABEL_10:
    int v9 = *((unsigned __int8 *)a1 + v7);
    if (!*((unsigned char *)a1 + v7)) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
  int v9 = *(unsigned __int16 *)((char *)a1 + v7);
  if (!*(unsigned __int16 *)((char *)a1 + v7))
  {
LABEL_5:
    uint64_t v5 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }
LABEL_19:
  int v11 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v11 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v11) ^ 0x80000000;
}

void sub_25A3F5E6C(char *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 24) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (v6 <= 8) {
    unint64_t v6 = 8;
  }
  size_t v7 = v6
     + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8)
     + 1;
  if (a3 < 0)
  {
    if (v7 <= 3)
    {
      unsigned int v9 = (a3 - 0x7FFFFFFF + ~(-1 << (8 * v7))) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        int v8 = 4;
        if (a2 < 0) {
          goto LABEL_14;
        }
        goto LABEL_21;
      }
      if (v9 >= 0xFF) {
        int v8 = 2;
      }
      else {
        int v8 = v9 != 0;
      }
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_21;
      }
    }
    else
    {
      int v8 = 1;
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_21;
      }
    }
LABEL_14:
    unsigned int v10 = a2 ^ 0x80000000;
    if (v7 < 4)
    {
      int v11 = (v10 >> (8 * v7)) + 1;
      if (v7)
      {
        int v12 = a2 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if (v7 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v7 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v7] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v7] = v11;
        return;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v7] = v11;
        return;
      default:
        return;
    }
  }
  int v8 = 0;
  if (a2 < 0) {
    goto LABEL_14;
  }
LABEL_21:
  switch(v8)
  {
    case 1:
      a1[v7] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v7] = 0;
      goto LABEL_25;
    case 3:
LABEL_36:
      __break(1u);
      JUMPOUT(0x25A3F607CLL);
    case 4:
      *(_DWORD *)&a1[v7] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    default:
LABEL_25:
      if (a2) {
LABEL_26:
      }
        *(void *)a1 = (a2 - 1);
      return;
  }
}

uint64_t *sub_25A3F60B0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_25A3F44B0(a1, a2);
}

double sub_25A3F60C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3F4E64(a1, a2);
}

double sub_25A3F60E0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3F511C(a1, a2);
}

uint64_t sub_25A3F60F8@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  int v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v10);
  unsigned int v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  int v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t static AnalyticsValue.type(_:)()
{
  return sub_25A5105D0();
}

uint64_t static AnalyticsValue.type<A>(_:)()
{
  return sub_25A5105D0();
}

uint64_t static AnalyticsValue.type<A>(of:)(uint64_t a1, uint64_t a2)
{
  _OWORD v4[2] = a2;
  sub_25A50FA40();
  sub_25A3F60F8((void (*)(char *, char *))sub_25A3F6530, (uint64_t)v4, MEMORY[0x263F8E628], (uint64_t)&type metadata for AnalyticsValue, v2, (uint64_t)&v5);
  if (v6 == 255) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t sub_25A3F6478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  __swift_project_boxed_opaque_existential_1(v11, v12);
  swift_getDynamicType();
  uint64_t v7 = sub_25A5105D0();
  uint64_t v9 = v8;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t sub_25A3F6530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3F6478(a1, *(void *)(v2 + 16), a2);
}

uint64_t destroy for AnalyticsValue(uint64_t a1)
{
  return sub_25A3B9028(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s20PreviewsFoundationOS14AnalyticsValueOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_25A39373C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnalyticsValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_25A39373C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_25A3B9028(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AnalyticsValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_25A3B9028(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_25A3F66F0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t sub_25A3F6708(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)__n128 result = a2 - 5;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsValue()
{
  return &type metadata for AnalyticsValue;
}

uint64_t CrashReportError.DyldLibraryLoadCrashError.library.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReportError.DyldLibraryLoadCrashError.crashReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CrashReportError.DyldLibraryLoadCrashError() + 24);

  return sub_25A3C635C(v3, a1);
}

uint64_t type metadata accessor for CrashReportError.DyldLibraryLoadCrashError()
{
  uint64_t result = qword_26A417AB0;
  if (!qword_26A417AB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CrashReportError.DyldLibraryLoadCrashError.highValueTitle.getter()
{
  sub_25A50FDB0();
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  return v1;
}

uint64_t CrashReportError.DyldLibraryLoadCrashError.additionalInfo.getter()
{
  return 0;
}

id sub_25A3F68C8()
{
  id v0 = objc_allocWithZone(MEMORY[0x263F08AE8]);
  id result = sub_25A4B2F48(0xD000000000000062, 0x800000025A51EFE0, 0);
  qword_26A417AA8 = (uint64_t)result;
  return result;
}

uint64_t static CrashReportError.DyldLibraryLoadCrashError.asiRegularExpression.getter()
{
  if (qword_26A4154B0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = qword_26A417AA8;
  id v1 = (id)qword_26A417AA8;
  return v0;
}

void static CrashReportError.DyldLibraryLoadCrashError.asiRegularExpression.setter(uint64_t a1)
{
  if (qword_26A4154B0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = (void *)qword_26A417AA8;
  qword_26A417AA8 = a1;
}

uint64_t (*static CrashReportError.DyldLibraryLoadCrashError.asiRegularExpression.modify())()
{
  if (qword_26A4154B0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t CrashReportError.DyldLibraryLoadCrashError.init(report:asi:match:)@<X0>(uint64_t a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  char v6 = (void *)(a1 + *(int *)(type metadata accessor for CrashReport(0) + 20));
  uint64_t v7 = v6[1];
  *a3 = *v6;
  a3[1] = v7;
  swift_bridgeObjectRetain();
  char v8 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)sub_25A50EBF0();
  id v10 = objc_msgSend(a2, sel_rangeWithName_, v9);
  uint64_t v12 = v11;

  id v13 = objc_msgSend(v8, sel_substringWithRange_, v10, v12);
  sub_25A50EC20();

  uint64_t v14 = sub_25A50EED0();
  uint64_t v16 = v15;

  a3[2] = v14;
  a3[3] = v16;
  uint64_t CrashError = type metadata accessor for CrashReportError.DyldLibraryLoadCrashError();
  sub_25A3F6C88(a1, (uint64_t)a3 + *(int *)(CrashError + 24));
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(CrashError - 8) + 56))(a3, 0, 1, CrashError);
}

uint64_t sub_25A3F6C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrashReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A3F6CEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3C635C(v2 + *(int *)(a1 + 24), a2);
}

uint64_t *_s29MissingEnvironmentObjectErrorVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v29 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    char v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_25A50E4C0();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = (int *)type metadata accessor for CrashReport(0);
    uint64_t v13 = v12[5];
    uint64_t v14 = &v8[v13];
    uint64_t v15 = &v9[v13];
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    uint64_t v17 = v12[6];
    unsigned int v18 = &v8[v17];
    uint64_t v19 = &v9[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)unsigned int v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    *(_DWORD *)&v8[v12[7]] = *(_DWORD *)&v9[v12[7]];
    uint64_t v21 = v12[8];
    uint64_t v31 = &v8[v21];
    uint64_t v22 = &v9[v21];
    uint64_t v23 = sub_25A50E470();
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24(v31, v22, v23);
    *(void *)&v8[v12[9]] = *(void *)&v9[v12[9]];
    *(void *)&v8[v12[10]] = *(void *)&v9[v12[10]];
    *(void *)&v8[v12[11]] = *(void *)&v9[v12[11]];
    uint64_t v25 = v12[12];
    uint64_t v26 = &v8[v25];
    uint64_t v27 = &v9[v25];
    uint64_t v28 = *((void *)v27 + 1);
    *(void *)uint64_t v26 = *(void *)v27;
    *((void *)v26 + 1) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t _s29MissingEnvironmentObjectErrorVwxx(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = type metadata accessor for CrashReport(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v4 + *(int *)(v6 + 32);
  uint64_t v8 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s29MissingEnvironmentObjectErrorVwcp(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_25A50E4C0();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = (int *)type metadata accessor for CrashReport(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  uint64_t v16 = v11[6];
  uint64_t v17 = &v7[v16];
  unsigned int v18 = &v8[v16];
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = v19;
  *(_DWORD *)&v7[v11[7]] = *(_DWORD *)&v8[v11[7]];
  uint64_t v20 = v11[8];
  uint64_t v29 = &v7[v20];
  uint64_t v21 = &v8[v20];
  uint64_t v22 = sub_25A50E470();
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(v29, v21, v22);
  *(void *)&v7[v11[9]] = *(void *)&v8[v11[9]];
  *(void *)&v7[v11[10]] = *(void *)&v8[v11[10]];
  *(void *)&v7[v11[11]] = *(void *)&v8[v11[11]];
  uint64_t v24 = v11[12];
  uint64_t v25 = &v7[v24];
  uint64_t v26 = &v8[v24];
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s29MissingEnvironmentObjectErrorVwca(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_25A50E4C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for CrashReport(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = v10[6];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v17 = v10[8];
  unsigned int v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  uint64_t v20 = sub_25A50E470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 24))(v18, v19, v20);
  *(void *)&v7[v10[9]] = *(void *)&v8[v10[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v10[10]] = *(void *)&v8[v10[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v10[11]] = *(void *)&v8[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v10[12];
  uint64_t v22 = &v7[v21];
  uint64_t v23 = &v8[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s29MissingEnvironmentObjectErrorVwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_25A50E4C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  uint64_t v9 = (int *)type metadata accessor for CrashReport(0);
  *(_OWORD *)&v6[v9[5]] = *(_OWORD *)&v7[v9[5]];
  *(_OWORD *)&v6[v9[6]] = *(_OWORD *)&v7[v9[6]];
  *(_DWORD *)&v6[v9[7]] = *(_DWORD *)&v7[v9[7]];
  uint64_t v10 = v9[8];
  uint64_t v11 = &v6[v10];
  uint64_t v12 = &v7[v10];
  uint64_t v13 = sub_25A50E470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  *(void *)&v6[v9[9]] = *(void *)&v7[v9[9]];
  *(void *)&v6[v9[10]] = *(void *)&v7[v9[10]];
  *(void *)&v6[v9[11]] = *(void *)&v7[v9[11]];
  *(_OWORD *)&v6[v9[12]] = *(_OWORD *)&v7[v9[12]];
  return a1;
}

void *_s29MissingEnvironmentObjectErrorVwta(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_25A50E4C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = (int *)type metadata accessor for CrashReport(0);
  uint64_t v13 = v12[5];
  uint64_t v14 = &v9[v13];
  uint64_t v15 = &v10[v13];
  uint64_t v17 = *(void *)v15;
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = v17;
  *((void *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = v12[6];
  uint64_t v19 = &v9[v18];
  uint64_t v20 = &v10[v18];
  uint64_t v22 = *(void *)v20;
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = v22;
  *((void *)v19 + 1) = v21;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v9[v12[7]] = *(_DWORD *)&v10[v12[7]];
  uint64_t v23 = v12[8];
  uint64_t v24 = &v9[v23];
  uint64_t v25 = &v10[v23];
  uint64_t v26 = sub_25A50E470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
  *(void *)&v9[v12[9]] = *(void *)&v10[v12[9]];
  swift_bridgeObjectRelease();
  *(void *)&v9[v12[10]] = *(void *)&v10[v12[10]];
  swift_bridgeObjectRelease();
  *(void *)&v9[v12[11]] = *(void *)&v10[v12[11]];
  swift_bridgeObjectRelease();
  uint64_t v27 = v12[12];
  uint64_t v28 = &v9[v27];
  uint64_t v29 = &v10[v27];
  uint64_t v31 = *(void *)v29;
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = v31;
  *((void *)v28 + 1) = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s25DyldLibraryLoadCrashErrorVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A3F76A0);
}

uint64_t sub_25A3F76A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CrashReport(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t _s25DyldLibraryLoadCrashErrorVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A3F7764);
}

uint64_t sub_25A3F7764(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CrashReport(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_25A3F780C()
{
  uint64_t result = type metadata accessor for CrashReport(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t (*sub_25A3F78A4(uint64_t a1, uint64_t a2, uint64_t a3))(void)
{
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = a1;
  uint64_t v6[3] = a2;
  void v6[4] = a3;
  return nullsub_1;
}

uint64_t (*captureWeak<A, B, C>(_:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))()
{
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a6;
  void v16[3] = a7;
  void v16[4] = a8;
  v16[5] = a4;
  v16[6] = a5;
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a6;
  void v17[3] = a7;
  v17[4] = a8;
  _OWORD v17[5] = a2;
  v17[6] = a3;
  captureWeak<A, B, C, D>(_:toInvoke:deinitialized:)(a1, (uint64_t)sub_25A3FABFC, (uint64_t)v16, (uint64_t)sub_25A3FAC24, (uint64_t)v17, a6, a7, a8, MEMORY[0x263F8EE60] + 8);
  uint64_t v19 = v18;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = a6;
  v20[3] = a7;
  v20[4] = a8;
  v20[5] = sub_25A3FC90C;
  v20[6] = v19;
  return sub_25A3FAC4C;
}

uint64_t (*captureWeak<A, B>(toInvokeInstanceMethod:on:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  uint64_t v14 = (void *)swift_allocObject();
  _OWORD v14[2] = a6;
  void v14[3] = a7;
  uint64_t v14[4] = a1;
  v14[5] = a2;
  captureWeak<A, B>(_:toInvoke:deinitialized:)(a3, (uint64_t)sub_25A3FAC74, (uint64_t)v14, a4, a5, a6, a7);
  swift_retain();
  swift_release();
  return sub_25A3FAD44;
}

uint64_t (*captureWeak<A, B>(_:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v14 = (void *)swift_allocObject();
  _OWORD v14[2] = a6;
  void v14[3] = a7;
  uint64_t v14[4] = v13;
  v14[5] = a4;
  void v14[6] = a5;
  v14[7] = a2;
  v14[8] = a3;
  swift_retain();
  swift_retain();
  return sub_25A3FAD44;
}

uint64_t (*captureWeak<A>(toInvokeInstanceMethod:deinitialized:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a6;
  _OWORD v12[3] = a1;
  void v12[4] = a2;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B>(toInvokeInstanceMethod:on:deinitialized:)((uint64_t)sub_25A3FAD58, (uint64_t)v12, a5, (uint64_t)sub_25A3FADB8, v13, a6, MEMORY[0x263F8EE60] + 8);
  uint64_t v15 = v14;
  swift_release();
  swift_release();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_25A3FAD44;
  *(void *)(v16 + 24) = v15;
  return sub_25A3FADE0;
}

uint64_t sub_25A3F7D3C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t (*captureWeak<A, B, C>(toInvokeInstanceMethod:on:context:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a7;
  void v17[3] = a8;
  v17[4] = a9;
  _OWORD v17[5] = a1;
  v17[6] = a2;
  captureWeak<A, B, C>(_:context:toInvoke:deinitialized:)(a3, a4, (uint64_t)sub_25A3FADE8, (uint64_t)v17, a5, a6, a7, a8, a9);
  swift_retain();
  swift_release();
  return sub_25A3FAED8;
}

uint64_t (*captureWeak<A, B, C>(_:context:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9))()
{
  uint64_t v21 = a7;
  uint64_t v22 = a5;
  uint64_t v23 = a3;
  uint64_t v13 = *(void *)(a8 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a8);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = v21;
  *((void *)v17 + 3) = a8;
  *((void *)v17 + 4) = a9;
  *((void *)v17 + 5) = v15;
  *((void *)v17 + 6) = v22;
  *((void *)v17 + 7) = a6;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v17[v16], (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a8);
  uint64_t v18 = &v17[(v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(void *)uint64_t v18 = v23;
  *((void *)v18 + 1) = a4;
  swift_retain();
  swift_retain();
  return sub_25A3FAED8;
}

uint64_t (*captureWeak<A, B>(toInvokeInstanceMethod:deinitialized:on:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))()
{
  unint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a7;
  void v16[3] = a8;
  void v16[4] = a1;
  v16[5] = a2;
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a7;
  void v17[3] = a8;
  v17[4] = a3;
  _OWORD v17[5] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C>(toInvokeInstanceMethod:on:context:deinitialized:)((uint64_t)sub_25A3FAF6C, (uint64_t)v16, a5, a6, (uint64_t)sub_25A3AD588, (uint64_t)v17, a7, a8, MEMORY[0x263F8EE60] + 8);
  uint64_t v19 = v18;
  swift_release();
  swift_release();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_25A3FAED8;
  *(void *)(v20 + 24) = v19;
  return sub_25A3FCAFC;
}

uint64_t (*captureWeak<A, B, C, D>(toInvokeInstanceMethod:on:context:_:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a8;
  void v17[3] = a9;
  v17[4] = a10;
  _OWORD v17[5] = a11;
  v17[6] = a1;
  v17[7] = a2;
  captureWeak<A, B, C, D>(_:context:_:toInvoke:deinitialized:)(a3, a4, a5, (uint64_t)sub_25A3FAF70, (uint64_t)v17, a6, a7, a8, a9, a10, a11);
  swift_retain();
  swift_release();
  return sub_25A3FB0D8;
}

uint64_t (*captureWeak<A, B, C, D>(_:context:_:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11))()
{
  uint64_t v40 = a8;
  uint64_t v41 = a6;
  uint64_t v42 = a7;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v12 = *(void *)(a10 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v39 = a11;
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  uint64_t v45 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v18 = *(void *)(a9 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v20 = MEMORY[0x270FA5388](v15);
  uint64_t v35 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v34 - v21;
  uint64_t v36 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v22, v38, a9);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, a3, a10);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v23((char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v22, a9);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v24(v45, v17, a10);
  unint64_t v25 = (*(unsigned __int8 *)(v18 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  unint64_t v26 = (v19 + *(unsigned __int8 *)(v12 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v27 = (char *)swift_allocObject();
  *((void *)v27 + 2) = v40;
  *((void *)v27 + 3) = a9;
  uint64_t v28 = v39;
  *((void *)v27 + 4) = a10;
  *((void *)v27 + 5) = v28;
  uint64_t v29 = v35;
  uint64_t v30 = v41;
  *((void *)v27 + 6) = v36;
  *((void *)v27 + 7) = v30;
  *((void *)v27 + 8) = v42;
  v23(&v27[v25], v29, a9);
  v24(&v27[v26], v45, a10);
  uint64_t v31 = &v27[(v13 + v26 + 7) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v32 = v44;
  *(void *)uint64_t v31 = v43;
  *((void *)v31 + 1) = v32;
  swift_retain();
  swift_retain();
  return sub_25A3FB0D8;
}

uint64_t (*captureWeak<A, B, C>(toInvokeInstanceMethod:deinitialized:on:context:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a8;
  void v17[3] = a9;
  v17[4] = a10;
  _OWORD v17[5] = a1;
  v17[6] = a2;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a8;
  v18[3] = a9;
  v18[4] = a10;
  void v18[5] = a3;
  v18[6] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C, D>(toInvokeInstanceMethod:on:context:_:deinitialized:)((uint64_t)sub_25A3FB1C8, (uint64_t)v17, a5, a6, a7, (uint64_t)sub_25A3FB1CC, (uint64_t)v18, a8, a9, a10, MEMORY[0x263F8EE60] + 8);
  uint64_t v20 = v19;
  swift_release();
  swift_release();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_25A3FB0D8;
  *(void *)(v21 + 24) = v20;
  return sub_25A3FCAFC;
}

uint64_t (*captureWeak<A, B, C, D, E>(toInvokeInstanceMethod:on:context:_:_:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, void (*a6)(char *, char *, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a9;
  void v17[3] = a10;
  v17[4] = a11;
  _OWORD v17[5] = a12;
  v17[6] = a13;
  v17[7] = a1;
  v17[8] = a2;
  captureWeak<A, B, C, D, E>(_:context:_:_:toInvoke:deinitialized:)(a3, a4, a5, a6, (uint64_t)sub_25A3FB1F4, (uint64_t)v17, a7, a8, a9, a10, a11, a12, a13);
  swift_retain();
  swift_release();
  return sub_25A3FB3D8;
}

uint64_t (*captureWeak<A, B, C, D, E>(_:context:_:_:toInvoke:deinitialized:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13))()
{
  uint64_t v59 = a7;
  uint64_t v60 = a8;
  uint64_t v61 = a5;
  uint64_t v62 = a6;
  uint64_t v51 = a1;
  char v52 = a2;
  uint64_t v58 = a13;
  uint64_t v54 = a12;
  uint64_t v55 = a4;
  uint64_t v14 = *(void *)(a12 - 8);
  uint64_t v56 = *(void *)(v14 + 64);
  uint64_t v57 = a9;
  uint64_t v15 = MEMORY[0x270FA5388](a1);
  uint64_t v65 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v49 = (char *)&v47 - v18;
  uint64_t v19 = *(void *)(a11 - 8);
  uint64_t v53 = *(void *)(v19 + 64);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v64 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v47 - v23;
  uint64_t v25 = *(void *)(a10 - 8);
  uint64_t v26 = *(void *)(v25 + 64);
  uint64_t v27 = MEMORY[0x270FA5388](v22);
  uint64_t v63 = (char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v47 - v28;
  uint64_t v50 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v30 = *(void (**)(char *, void, uint64_t))(v25 + 16);
  uint64_t v48 = a10;
  v30(v29, v52, a10);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v24, a3, a11);
  uint64_t v31 = v49;
  uint64_t v32 = v54;
  (*(void (**)(char *, void (*)(void, void), uint64_t))(v14 + 16))(v49, (void (*)(void, void))v55, v54);
  uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  v55(v63, v29, a10);
  char v52 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v52(v64, v24, a11);
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v14 += 32;
  uint64_t v51 = v14;
  uint64_t v34 = v32;
  v33(v65, v31, v32);
  unint64_t v35 = (*(unsigned __int8 *)(v25 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  unint64_t v36 = (v26 + *(unsigned __int8 *)(v19 + 80) + v35) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v37 = (v53 + *(unsigned __int8 *)(v14 + 48) + v36) & ~(unint64_t)*(unsigned __int8 *)(v14 + 48);
  unint64_t v38 = (v56 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v39 = (char *)swift_allocObject();
  uint64_t v40 = v48;
  *((void *)v39 + 2) = v57;
  *((void *)v39 + 3) = v40;
  *((void *)v39 + 4) = a11;
  *((void *)v39 + 5) = v34;
  uint64_t v41 = v50;
  *((void *)v39 + 6) = v58;
  *((void *)v39 + 7) = v41;
  uint64_t v42 = &v39[v35];
  uint64_t v43 = v60;
  *((void *)v39 + 8) = v59;
  *((void *)v39 + 9) = v43;
  ((void (*)(char *, char *))v55)(v42, v63);
  v52(&v39[v36], v64, a11);
  v33(&v39[v37], v65, v34);
  uint64_t v44 = &v39[v38];
  uint64_t v45 = v62;
  *(void *)uint64_t v44 = v61;
  *((void *)v44 + 1) = v45;
  swift_retain();
  swift_retain();
  return sub_25A3FB3D8;
}

uint64_t (*captureWeak<A, B, C, D>(toInvokeInstanceMethod:deinitialized:on:context:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t), uint64_t a7, void (*a8)(char *, char *, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a9;
  void v17[3] = a10;
  v17[4] = a11;
  _OWORD v17[5] = a12;
  v17[6] = a1;
  v17[7] = a2;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a9;
  v18[3] = a10;
  v18[4] = a11;
  void v18[5] = a12;
  v18[6] = a3;
  v18[7] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C, D, E>(toInvokeInstanceMethod:on:context:_:_:deinitialized:)((uint64_t)sub_25A3FB524, (uint64_t)v17, a5, a6, a7, a8, (uint64_t)sub_25A3FB528, (uint64_t)v18, a9, a10, a11, a12, MEMORY[0x263F8EE60] + 8);
  uint64_t v20 = v19;
  swift_release();
  swift_release();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_25A3FB3D8;
  *(void *)(v21 + 24) = v20;
  return sub_25A3FCAFC;
}

uint64_t (*captureWeak<A, B, C>(toInvokeInstanceMethod:on:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(uint64_t a1)
{
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a6;
  void v16[3] = a7;
  void v16[4] = a8;
  v16[5] = a1;
  v16[6] = a2;
  captureWeak<A, B, C>(_:toInvoke:deinitialized:)(a3, (uint64_t)sub_25A3FADE8, (uint64_t)v16, a4, a5, a6, a7, a8);
  swift_retain();
  swift_release();
  return sub_25A3FB5FC;
}

uint64_t (*captureWeak<A, B, C>(_:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(uint64_t a1)
{
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a6;
  void v16[3] = a7;
  void v16[4] = a8;
  v16[5] = v15;
  v16[6] = a4;
  v16[7] = a5;
  void v16[8] = a2;
  v16[9] = a3;
  swift_retain();
  swift_retain();
  return sub_25A3FB5FC;
}

uint64_t (*captureWeak<A, B>(toInvokeInstanceMethod:deinitialized:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  uint64_t v14 = (void *)swift_allocObject();
  _OWORD v14[2] = a6;
  void v14[3] = a7;
  uint64_t v14[4] = a1;
  v14[5] = a2;
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a6;
  v15[3] = a7;
  v15[4] = a3;
  void v15[5] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C>(toInvokeInstanceMethod:on:deinitialized:)((uint64_t)sub_25A3FAF6C, (uint64_t)v14, a5, (uint64_t)sub_25A3FCC0C, (uint64_t)v15, a6, a7, MEMORY[0x263F8EE60] + 8);
  uint64_t v17 = v16;
  swift_release();
  swift_release();
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a6;
  v18[3] = a7;
  v18[4] = sub_25A3FB5FC;
  void v18[5] = v17;
  return sub_25A3FB6AC;
}

uint64_t (*captureWeak<A, B, C, D>(toInvokeInstanceMethod:on:context:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10))(uint64_t a1)
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a7;
  void v17[3] = a8;
  v17[4] = a9;
  _OWORD v17[5] = a10;
  v17[6] = a1;
  v17[7] = a2;
  captureWeak<A, B, C, D>(_:context:toInvoke:deinitialized:)(a3, a4, (uint64_t)sub_25A3FAF70, (uint64_t)v17, a5, a6, a7, a8, a9, a10);
  swift_retain();
  swift_release();
  return sub_25A3FB91C;
}

uint64_t (*captureWeak<A, B, C, D>(_:context:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10))(uint64_t a1)
{
  uint64_t v22 = a7;
  uint64_t v23 = a8;
  uint64_t v24 = a5;
  uint64_t v25 = a3;
  uint64_t v13 = *(void *)(a9 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a9);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (char *)swift_allocObject();
  uint64_t v18 = v23;
  *((void *)v17 + 2) = v22;
  *((void *)v17 + 3) = v18;
  *((void *)v17 + 4) = a9;
  *((void *)v17 + 5) = a10;
  uint64_t v19 = v24;
  *((void *)v17 + 6) = v15;
  *((void *)v17 + 7) = v19;
  *((void *)v17 + 8) = a6;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v17[v16], (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a9);
  uint64_t v20 = &v17[(v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(void *)uint64_t v20 = v25;
  *((void *)v20 + 1) = a4;
  swift_retain();
  swift_retain();
  return sub_25A3FB91C;
}

uint64_t (*captureWeak<A, B, C>(toInvokeInstanceMethod:deinitialized:on:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a7;
  void v17[3] = a8;
  v17[4] = a9;
  _OWORD v17[5] = a1;
  v17[6] = a2;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a7;
  v18[3] = a8;
  v18[4] = a9;
  void v18[5] = a3;
  v18[6] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C, D>(toInvokeInstanceMethod:on:context:deinitialized:)((uint64_t)sub_25A3FB1C8, (uint64_t)v17, a5, a6, (uint64_t)sub_25A3FCBEC, (uint64_t)v18, a7, a8, a9, MEMORY[0x263F8EE60] + 8);
  uint64_t v20 = v19;
  swift_release();
  swift_release();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a7;
  v21[3] = a8;
  v21[4] = a9;
  v21[5] = sub_25A3FB91C;
  v21[6] = v20;
  return sub_25A3FBA44;
}

uint64_t (*captureWeak<A, B, C, D, E>(toInvokeInstanceMethod:on:context:_:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12))(uint64_t a1)
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a8;
  void v17[3] = a9;
  v17[4] = a10;
  _OWORD v17[5] = a11;
  v17[6] = a12;
  v17[7] = a1;
  v17[8] = a2;
  captureWeak<A, B, C, D, E>(_:context:_:toInvoke:deinitialized:)(a3, a4, a5, (uint64_t)sub_25A3FB1F4, (uint64_t)v17, a6, a7, a8, a9, a10, a11, a12);
  swift_retain();
  swift_release();
  return sub_25A3FBEC0;
}

uint64_t (*captureWeak<A, B, C, D, E>(_:context:_:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12))(uint64_t a1)
{
  uint64_t v43 = a8;
  uint64_t v44 = a6;
  uint64_t v45 = a7;
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v42 = a12;
  uint64_t v13 = *(void *)(a11 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v41 = a9;
  uint64_t v15 = MEMORY[0x270FA5388](a1);
  uint64_t v48 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(a10 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  uint64_t v21 = MEMORY[0x270FA5388](v16);
  unint64_t v37 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v38 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v23, v40, a10);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, a3, a11);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v24((char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v23, a10);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v25(v48, v18, a11);
  unint64_t v26 = (*(unsigned __int8 *)(v19 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v27 = (v20 + *(unsigned __int8 *)(v13 + 80) + v26) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v28 = (char *)swift_allocObject();
  uint64_t v29 = v41;
  *((void *)v28 + 2) = v43;
  *((void *)v28 + 3) = v29;
  *((void *)v28 + 4) = a10;
  *((void *)v28 + 5) = a11;
  uint64_t v30 = v37;
  uint64_t v31 = v38;
  *((void *)v28 + 6) = v42;
  *((void *)v28 + 7) = v31;
  uint64_t v32 = &v28[v26];
  uint64_t v33 = v45;
  *((void *)v28 + 8) = v44;
  *((void *)v28 + 9) = v33;
  v24(v32, v30, a10);
  v25(&v28[v27], v48, a11);
  uint64_t v34 = &v28[(v14 + v27 + 7) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v35 = v47;
  *(void *)uint64_t v34 = v46;
  *((void *)v34 + 1) = v35;
  swift_retain();
  swift_retain();
  return sub_25A3FBEC0;
}

uint64_t (*captureWeak<A, B, C, D>(toInvokeInstanceMethod:deinitialized:on:context:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a8;
  void v17[3] = a9;
  v17[4] = a10;
  _OWORD v17[5] = a11;
  v17[6] = a1;
  v17[7] = a2;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a8;
  v18[3] = a9;
  v18[4] = a10;
  void v18[5] = a11;
  v18[6] = a3;
  v18[7] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C, D, E>(toInvokeInstanceMethod:on:context:_:deinitialized:)((uint64_t)sub_25A3FB524, (uint64_t)v17, a5, a6, a7, (uint64_t)sub_25A3FCB00, (uint64_t)v18, a8, a9, a10, a11, MEMORY[0x263F8EE60] + 8);
  uint64_t v20 = v19;
  swift_release();
  swift_release();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a8;
  v21[3] = a9;
  v21[4] = a10;
  v21[5] = a11;
  v21[6] = sub_25A3FBEC0;
  void v21[7] = v20;
  return sub_25A3FC03C;
}

uint64_t (*captureWeak<A, B, C, D, E, F>(toInvokeInstanceMethod:on:context:_:_:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, void (*a6)(char *, char *, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14))(uint64_t a1)
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a9;
  void v17[3] = a10;
  v17[4] = a11;
  _OWORD v17[5] = a12;
  v17[6] = a13;
  v17[7] = a14;
  v17[8] = a1;
  v17[9] = a2;
  captureWeak<A, B, C, D, E, F>(_:context:_:_:toInvoke:deinitialized:)(a3, a4, a5, a6, (uint64_t)sub_25A3FC09C, (uint64_t)v17, a7, a8, a9, a10, a11, a12, a13, a14);
  swift_retain();
  swift_release();
  return sub_25A3FC548;
}

uint64_t (*captureWeak<A, B, C, D, E, F>(_:context:_:_:toInvoke:deinitialized:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14))(uint64_t a1)
{
  uint64_t v59 = a7;
  uint64_t v60 = a8;
  uint64_t v61 = a5;
  uint64_t v62 = a6;
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v56 = a9;
  uint64_t v57 = a10;
  uint64_t v58 = a14;
  uint64_t v53 = a13;
  uint64_t v54 = a4;
  uint64_t v15 = *(void *)(a13 - 8);
  uint64_t v55 = *(void *)(v15 + 64);
  uint64_t v16 = MEMORY[0x270FA5388](a1);
  uint64_t v65 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v48 = (char *)&v47 - v19;
  uint64_t v20 = *(void *)(a12 - 8);
  uint64_t v52 = *(void *)(v20 + 64);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v64 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v47 - v24;
  uint64_t v26 = *(void *)(a11 - 8);
  uint64_t v27 = *(void *)(v26 + 64);
  uint64_t v28 = MEMORY[0x270FA5388](v23);
  uint64_t v63 = (char *)&v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v47 - v29;
  uint64_t v49 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v31 = *(void (**)(char *, void, uint64_t))(v26 + 16);
  uint64_t v47 = a11;
  v31(v30, v51, a11);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v25, a3, a12);
  uint64_t v32 = v48;
  uint64_t v33 = v53;
  (*(void (**)(char *, void (*)(void, void), uint64_t))(v15 + 16))(v48, (void (*)(void, void))v54, v53);
  uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v54(v63, v30, a11);
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v51(v64, v25, a12);
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v15 += 32;
  uint64_t v50 = v15;
  uint64_t v35 = v33;
  v34(v65, v32, v33);
  unint64_t v36 = (*(unsigned __int8 *)(v26 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v37 = (v27 + *(unsigned __int8 *)(v20 + 80) + v36) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  unint64_t v38 = (v52 + *(unsigned __int8 *)(v15 + 48) + v37) & ~(unint64_t)*(unsigned __int8 *)(v15 + 48);
  unint64_t v39 = (v55 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = (char *)swift_allocObject();
  uint64_t v41 = v57;
  *((void *)v40 + 2) = v56;
  *((void *)v40 + 3) = v41;
  *((void *)v40 + 4) = v47;
  *((void *)v40 + 5) = a12;
  uint64_t v42 = v58;
  *((void *)v40 + 6) = v35;
  *((void *)v40 + 7) = v42;
  uint64_t v43 = v59;
  *((void *)v40 + 8) = v49;
  *((void *)v40 + 9) = v43;
  *((void *)v40 + 10) = v60;
  ((void (*)(char *, char *))v54)(&v40[v36], v63);
  v51(&v40[v37], v64, a12);
  v34(&v40[v38], v65, v35);
  uint64_t v44 = &v40[v39];
  uint64_t v45 = v62;
  *(void *)uint64_t v44 = v61;
  *((void *)v44 + 1) = v45;
  swift_retain();
  swift_retain();
  return sub_25A3FC548;
}

uint64_t (*captureWeak<A, B, C, D, E>(toInvokeInstanceMethod:deinitialized:on:context:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t), uint64_t a7, void (*a8)(char *, char *, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a9;
  void v17[3] = a10;
  v17[4] = a11;
  _OWORD v17[5] = a12;
  v17[6] = a13;
  v17[7] = a1;
  v17[8] = a2;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a9;
  v18[3] = a10;
  v18[4] = a11;
  void v18[5] = a12;
  v18[6] = a13;
  v18[7] = a3;
  v18[8] = a4;
  swift_retain();
  swift_retain();
  captureWeak<A, B, C, D, E, F>(toInvokeInstanceMethod:on:context:_:_:deinitialized:)((uint64_t)sub_25A3FC698, (uint64_t)v17, a5, a6, a7, a8, (uint64_t)sub_25A3FC72C, (uint64_t)v18, a9, a10, a11, a12, a13, MEMORY[0x263F8EE60] + 8);
  uint64_t v20 = v19;
  swift_release();
  swift_release();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a9;
  v21[3] = a10;
  v21[4] = a11;
  v21[5] = a12;
  v21[6] = a13;
  void v21[7] = sub_25A3FC548;
  v21[8] = v20;
  return sub_25A3FC754;
}

uint64_t sub_25A3FA010(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(void))
{
  uint64_t v6 = a1 + 16;
  swift_beginAccess();
  if (!MEMORY[0x26113F1A0](v6)) {
    return a2();
  }
  a4();
  return swift_unknownObjectRelease();
}

uint64_t (*captureWeak<A>(_:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a6;
  _OWORD v12[3] = a4;
  void v12[4] = a5;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  captureWeak<A, B>(_:toInvoke:deinitialized:)(a1, (uint64_t)sub_25A3FC7B4, (uint64_t)v12, (uint64_t)sub_25A3FCC10, v13, a6, MEMORY[0x263F8EE60] + 8);
  uint64_t v15 = v14;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_25A3FAD44;
  *(void *)(v16 + 24) = v15;
  return sub_25A3FCAFC;
}

uint64_t sub_25A3FA1DC(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8 = a1 + 16;
  swift_beginAccess();
  if (!MEMORY[0x26113F1A0](v8)) {
    return a2(a4);
  }
  a5();
  return swift_unknownObjectRelease();
}

uint64_t (*captureWeak<A, B>(_:context:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))()
{
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a7;
  void v16[3] = a8;
  void v16[4] = a5;
  v16[5] = a6;
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a7;
  void v17[3] = a8;
  v17[4] = a3;
  _OWORD v17[5] = a4;
  captureWeak<A, B, C>(_:context:toInvoke:deinitialized:)(a1, a2, (uint64_t)sub_25A3FC84C, (uint64_t)v16, (uint64_t)sub_25A3FCC0C, (uint64_t)v17, a7, a8, MEMORY[0x263F8EE60] + 8);
  uint64_t v19 = v18;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_25A3FAED8;
  *(void *)(v20 + 24) = v19;
  return sub_25A3FCAFC;
}

uint64_t sub_25A3FA3E4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v10 = a1 + 16;
  swift_beginAccess();
  if (!MEMORY[0x26113F1A0](v10)) {
    return a2(a4, a5);
  }
  a6();
  return swift_unknownObjectRelease();
}

uint64_t (*captureWeak<A, B, C>(_:context:_:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a8;
  void v17[3] = a9;
  v17[4] = a10;
  _OWORD v17[5] = a6;
  v17[6] = a7;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a8;
  v18[3] = a9;
  v18[4] = a10;
  void v18[5] = a4;
  v18[6] = a5;
  captureWeak<A, B, C, D>(_:context:_:toInvoke:deinitialized:)(a1, a2, a3, (uint64_t)sub_25A3FC874, (uint64_t)v17, (uint64_t)sub_25A3FCBEC, (uint64_t)v18, a8, a9, a10, MEMORY[0x263F8EE60] + 8);
  uint64_t v20 = v19;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_25A3FB0D8;
  *(void *)(v21 + 24) = v20;
  return sub_25A3FCAFC;
}

uint64_t sub_25A3FA608(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v12 = a1 + 16;
  swift_beginAccess();
  if (!MEMORY[0x26113F1A0](v12)) {
    return a2(a4, a5, a6);
  }
  a7();
  return swift_unknownObjectRelease();
}

uint64_t (*captureWeak<A, B, C, D>(_:context:_:_:deinitialized:toInvoke:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a9;
  void v17[3] = a10;
  v17[4] = a11;
  _OWORD v17[5] = a12;
  v17[6] = a7;
  v17[7] = a8;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a9;
  v18[3] = a10;
  v18[4] = a11;
  void v18[5] = a12;
  v18[6] = a5;
  v18[7] = a6;
  captureWeak<A, B, C, D, E>(_:context:_:_:toInvoke:deinitialized:)(a1, a2, a3, a4, (uint64_t)sub_25A3FC89C, (uint64_t)v17, (uint64_t)sub_25A3FCB00, (uint64_t)v18, a9, a10, a11, a12, MEMORY[0x263F8EE60] + 8);
  uint64_t v20 = v19;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_25A3FB3D8;
  *(void *)(v21 + 24) = v20;
  return sub_25A3FCAFC;
}

uint64_t sub_25A3FA840(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, void (*a5)(void))
{
  uint64_t v8 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x26113F1A0](v8)) {
    return a3(a1);
  }
  a5();
  return swift_unknownObjectRelease();
}

uint64_t (*captureWeak<A, B>(_:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  uint64_t v14 = (void *)swift_allocObject();
  _OWORD v14[2] = a6;
  void v14[3] = a7;
  uint64_t v14[4] = a4;
  v14[5] = a5;
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a6;
  v15[3] = a7;
  v15[4] = a2;
  void v15[5] = a3;
  captureWeak<A, B, C>(_:toInvoke:deinitialized:)(a1, (uint64_t)sub_25A3FCBF0, (uint64_t)v14, (uint64_t)sub_25A3FCC0C, (uint64_t)v15, a6, a7, MEMORY[0x263F8EE60] + 8);
  uint64_t v17 = v16;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a6;
  v18[3] = a7;
  v18[4] = sub_25A3FB5FC;
  void v18[5] = v17;
  return sub_25A3FCC14;
}

uint64_t (*captureWeak<A, B, C, D>(_:toInvoke:deinitialized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9))(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a6;
  void v17[3] = a7;
  v17[4] = a8;
  _OWORD v17[5] = a9;
  v17[6] = v16;
  v17[7] = a4;
  v17[8] = a5;
  v17[9] = a2;
  void v17[10] = a3;
  swift_retain();
  swift_retain();
  return sub_25A3FC90C;
}

uint64_t sub_25A3FAB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, void (*a6)(void))
{
  uint64_t v10 = a3 + 16;
  swift_beginAccess();
  if (!MEMORY[0x26113F1A0](v10)) {
    return a4(a1, a2);
  }
  a6();
  return swift_unknownObjectRelease();
}

uint64_t sub_25A3FABC4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A3FABFC()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_25A3FAC24()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_25A3FAC4C()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_25A3FAC74()
{
  unint64_t v1 = (void (*)(void))(*(uint64_t (**)(void))(v0 + 32))();
  v1();

  return swift_release();
}

uint64_t sub_25A3FACC4()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A3FACFC()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25A3FAD44()
{
  return sub_25A3FA010(*(void *)(v0 + 32), *(uint64_t (**)(void))(v0 + 40), *(void *)(v0 + 48), *(void (**)(void))(v0 + 56));
}

uint64_t (*sub_25A3FAD58())()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 24))();
  uint64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  return sub_25A3FCC10;
}

uint64_t sub_25A3FADB8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_25A3FADE0()
{
  return sub_25A3D528C(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_25A3FADEC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t sub_25A3FAED8()
{
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80);
  return sub_25A3FA1DC(*(void *)(v0 + 40), *(uint64_t (**)(uint64_t))(v0 + 48), *(void *)(v0 + 56), v0 + v1, *(void (**)(void))(v0+ ((*(void *)(*(void *)(*(void *)(v0 + 24) - 8) + 64) + v1 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_25A3FAF74()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 72) & ~v4;
  uint64_t v6 = *(void *)(v2 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + *(void *)(v3 + 64) + v7) & ~v7;
  uint64_t v9 = v4 | v7 | 7;
  unint64_t v10 = ((*(void *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v2);
  swift_release();

  return MEMORY[0x270FA0238](v0, v10, v9);
}

uint64_t sub_25A3FB0D8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80);
  unint64_t v3 = (v2
      + *(void *)(*(void *)(*(void *)(v0 + 24) - 8) + 64)
      + *(unsigned __int8 *)(*(void *)(v1 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8)
                                                                                                  + 80);
  return sub_25A3FA3E4(*(void *)(v0 + 48), *(uint64_t (**)(uint64_t, uint64_t))(v0 + 56), *(void *)(v0 + 64), v0 + v2, v0 + v3, *(void (**)(void))(v0 + ((*(void *)(*(void *)(v1 - 8) + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_25A3FB1CC()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_25A3FB1F8()
{
  uint64_t v2 = *((void *)v0 + 3);
  uint64_t v1 = *((void *)v0 + 4);
  uint64_t v15 = *((void *)v0 + 5);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 80) & ~v4;
  uint64_t v6 = *(void *)(v1 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + *(void *)(v3 + 64) + v7) & ~v7;
  uint64_t v9 = *(void *)(v15 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v8 + *(void *)(v6 + 64) + v10) & ~v10;
  unint64_t v13 = ((*(void *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v14 = v4 | v7 | v10 | 7;
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(&v0[v5], v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(&v0[v8], v1);
  (*(void (**)(char *, uint64_t))(v9 + 8))(&v0[v11], v15);
  swift_release();

  return MEMORY[0x270FA0238](v0, v13, v14);
}

uint64_t sub_25A3FB3D8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80);
  unint64_t v4 = (v3
      + *(void *)(*(void *)(*(void *)(v0 + 24) - 8) + 64)
      + *(unsigned __int8 *)(*(void *)(v1 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8)
                                                                                                  + 80);
  unint64_t v5 = (v4 + *(void *)(*(void *)(v1 - 8) + 64) + *(unsigned __int8 *)(*(void *)(v2 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  return sub_25A3FA608(*(void *)(v0 + 56), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 64), *(void *)(v0 + 72), v0 + v3, v0 + v4, v0 + v5, *(void (**)(void))(v0 + ((*(void *)(*(void *)(v2 - 8) + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_25A3FB528()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t sub_25A3FB550(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void (*)(uint64_t))(*(uint64_t (**)(void))(v2 + 40))();
  v4(a2);

  return swift_release();
}

uint64_t sub_25A3FB5B4()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_25A3FB5FC(uint64_t a1)
{
  return sub_25A3FA840(a1, *(void *)(v1 + 40), *(uint64_t (**)(uint64_t))(v1 + 48), *(void *)(v1 + 56), *(void (**)(void))(v1 + 64));
}

uint64_t (*sub_25A3FB630())()
{
  long long v6 = *(_OWORD *)(v0 + 16);
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 32))();
  uint64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = v6;
  *(void *)(v4 + 32) = v1;
  *(void *)(v4 + 40) = v3;
  return sub_25A3FCC0C;
}

uint64_t sub_25A3FB6AC()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_25A3FB6D4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_25A3FB70C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(void))(v3 + 48))();
  v6(a2, a3);

  return swift_release();
}

uint64_t sub_25A3FB778(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v10 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x26113F1A0](v10)) {
    return a3(a1, a5);
  }
  a6();
  return swift_unknownObjectRelease();
}

uint64_t sub_25A3FB830()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 72) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t sub_25A3FB91C(uint64_t a1)
{
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) - 8) + 80);
  return sub_25A3FB778(a1, *(void *)(v1 + 48), *(uint64_t (**)(uint64_t, uint64_t))(v1 + 56), *(void *)(v1 + 64), v1 + v2, *(void (**)(void))(v1+ ((*(void *)(*(void *)(*(void *)(v1 + 32) - 8) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t (*sub_25A3FB9B8())()
{
  uint64_t v1 = *(void *)(v0 + 32);
  long long v7 = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (*(uint64_t (**)(void))(v0 + 40))();
  uint64_t v4 = v3;
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = v7;
  *(void *)(v5 + 32) = v1;
  *(void *)(v5 + 40) = v2;
  *(void *)(v5 + 48) = v4;
  return sub_25A3FCBEC;
}

uint64_t sub_25A3FBA44()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_25A3FBA6C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25A3FBAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t))(*(uint64_t (**)(void))(v4 + 56))();
  v8(a2, a3, a4);

  return swift_release();
}

uint64_t (*captureWeak<A, B, C>(_:context:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a7;
  void v17[3] = a8;
  v17[4] = a9;
  _OWORD v17[5] = a5;
  v17[6] = a6;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a7;
  v18[3] = a8;
  v18[4] = a9;
  void v18[5] = a3;
  v18[6] = a4;
  captureWeak<A, B, C, D>(_:context:toInvoke:deinitialized:)(a1, a2, (uint64_t)sub_25A3FCB04, (uint64_t)v17, (uint64_t)sub_25A3FCBEC, (uint64_t)v18, a7, a8, a9, MEMORY[0x263F8EE60] + 8);
  uint64_t v20 = v19;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a7;
  v21[3] = a8;
  v21[4] = a9;
  v21[5] = sub_25A3FB91C;
  v21[6] = v20;
  return sub_25A3FCC18;
}

uint64_t sub_25A3FBC90(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v12 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x26113F1A0](v12)) {
    return a3(a1, a5, a6);
  }
  a7();
  return swift_unknownObjectRelease();
}

uint64_t sub_25A3FBD5C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 80) & ~v4;
  uint64_t v6 = *(void *)(v2 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + *(void *)(v3 + 64) + v7) & ~v7;
  uint64_t v9 = v4 | v7 | 7;
  unint64_t v10 = ((*(void *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v2);
  swift_release();

  return MEMORY[0x270FA0238](v0, v10, v9);
}

uint64_t sub_25A3FBEC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) - 8) + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) - 8) + 80);
  unint64_t v4 = (v3
      + *(void *)(*(void *)(*(void *)(v1 + 32) - 8) + 64)
      + *(unsigned __int8 *)(*(void *)(v2 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8)
                                                                                                  + 80);
  return sub_25A3FBC90(a1, *(void *)(v1 + 56), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 64), *(void *)(v1 + 72), v1 + v3, v1 + v4, *(void (**)(void))(v1 + ((*(void *)(*(void *)(v2 - 8) + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t (*sub_25A3FBFB8())()
{
  long long v6 = *(_OWORD *)(v0 + 32);
  long long v7 = *(_OWORD *)(v0 + 16);
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 48))();
  uint64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v6;
  *(void *)(v4 + 48) = v1;
  *(void *)(v4 + 56) = v3;
  return sub_25A3FCB00;
}

uint64_t sub_25A3FC03C()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t sub_25A3FC064()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_25A3FC09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(uint64_t (**)(void))(v5 + 64))();
  v10(a2, a3, a4, a5);

  return swift_release();
}

uint64_t (*captureWeak<A, B, C, D>(_:context:_:deinitialized:toInvoke:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a8;
  void v17[3] = a9;
  v17[4] = a10;
  _OWORD v17[5] = a11;
  v17[6] = a6;
  v17[7] = a7;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a8;
  v18[3] = a9;
  v18[4] = a10;
  void v18[5] = a11;
  v18[6] = a4;
  v18[7] = a5;
  captureWeak<A, B, C, D, E>(_:context:_:toInvoke:deinitialized:)(a1, a2, a3, (uint64_t)sub_25A3FCBF4, (uint64_t)v17, (uint64_t)sub_25A3FCB00, (uint64_t)v18, a8, a9, a10, a11, MEMORY[0x263F8EE60] + 8);
  uint64_t v20 = v19;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a8;
  v21[3] = a9;
  v21[4] = a10;
  v21[5] = a11;
  v21[6] = sub_25A3FBEC0;
  void v21[7] = v20;
  return sub_25A3FCC1C;
}

uint64_t sub_25A3FC290(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void))
{
  uint64_t v14 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x26113F1A0](v14)) {
    return a3(a1, a5, a6, a7);
  }
  a8();
  return swift_unknownObjectRelease();
}

uint64_t sub_25A3FC368()
{
  uint64_t v2 = *((void *)v0 + 4);
  uint64_t v1 = *((void *)v0 + 5);
  uint64_t v15 = *((void *)v0 + 6);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 88) & ~v4;
  uint64_t v6 = *(void *)(v1 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + *(void *)(v3 + 64) + v7) & ~v7;
  uint64_t v9 = *(void *)(v15 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v8 + *(void *)(v6 + 64) + v10) & ~v10;
  unint64_t v13 = ((*(void *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v14 = v4 | v7 | v10 | 7;
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(&v0[v5], v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(&v0[v8], v1);
  (*(void (**)(char *, uint64_t))(v9 + 8))(&v0[v11], v15);
  swift_release();

  return MEMORY[0x270FA0238](v0, v13, v14);
}

uint64_t sub_25A3FC548(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) - 8) + 80);
  unint64_t v5 = (v4
      + *(void *)(*(void *)(*(void *)(v1 + 32) - 8) + 64)
      + *(unsigned __int8 *)(*(void *)(v2 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8)
                                                                                                  + 80);
  unint64_t v6 = (v5 + *(void *)(*(void *)(v2 - 8) + 64) + *(unsigned __int8 *)(*(void *)(v3 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  return sub_25A3FC290(a1, *(void *)(v1 + 64), *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 72), *(void *)(v1 + 80), v1 + v4, v1 + v5, v1 + v6, *(void (**)(void))(v1 + ((*(void *)(*(void *)(v3 - 8) + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t (*sub_25A3FC698())()
{
  uint64_t v1 = *(void *)(v0 + 48);
  long long v7 = *(_OWORD *)(v0 + 32);
  long long v8 = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (*(uint64_t (**)(void))(v0 + 56))();
  uint64_t v4 = v3;
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v7;
  *(void *)(v5 + 48) = v1;
  *(void *)(v5 + 56) = v2;
  *(void *)(v5 + 64) = v4;
  return sub_25A3FCBF8;
}

uint64_t sub_25A3FC72C()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t sub_25A3FC754()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t sub_25A3FC77C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A3FC7B4()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_25A3FC7DC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A3FC814()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A3FC84C()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_25A3FC874()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_25A3FC89C()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t sub_25A3FC8C4()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t sub_25A3FC90C(uint64_t a1, uint64_t a2)
{
  return sub_25A3FAB0C(a1, a2, *(void *)(v2 + 48), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 56), *(void *)(v2 + 64), *(void (**)(void))(v2 + 72));
}

uint64_t (*captureWeak<A, B, C, D, E>(_:context:_:_:deinitialized:toInvoke:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13))()
{
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a9;
  void v17[3] = a10;
  v17[4] = a11;
  _OWORD v17[5] = a12;
  v17[6] = a13;
  v17[7] = a7;
  v17[8] = a8;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a9;
  v18[3] = a10;
  v18[4] = a11;
  void v18[5] = a12;
  v18[6] = a13;
  v18[7] = a5;
  v18[8] = a6;
  captureWeak<A, B, C, D, E, F>(_:context:_:_:toInvoke:deinitialized:)(a1, a2, a3, a4, (uint64_t)sub_25A3FCAC4, (uint64_t)v17, (uint64_t)sub_25A3FCBF8, (uint64_t)v18, a9, a10, a11, a12, a13, MEMORY[0x263F8EE60] + 8);
  uint64_t v20 = v19;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a9;
  v21[3] = a10;
  v21[4] = a11;
  v21[5] = a12;
  v21[6] = a13;
  void v21[7] = sub_25A3FC548;
  v21[8] = v20;
  return sub_25A3FCC20;
}

uint64_t sub_25A3FCAC4()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t sub_25A3FCAEC()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t static CharacterSet.c99IdentifierAllowed.getter()
{
  uint64_t v0 = sub_25A50E0C0();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v2);
  long long v7 = (char *)&v18 - v6;
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  unint64_t v13 = (char *)&v18 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v18 - v14;
  sub_25A50E0B0();
  sub_25A50E060();
  sub_25A50E080();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v1 + 8);
  v16(v4, v0);
  v16(v7, v0);
  sub_25A50E060();
  sub_25A50E080();
  v16(v7, v0);
  v16(v10, v0);
  sub_25A50E060();
  sub_25A50E080();
  v16(v10, v0);
  v16(v13, v0);
  sub_25A50E070();
  sub_25A50E080();
  v16(v13, v0);
  return ((uint64_t (*)(char *, uint64_t))v16)(v15, v0);
}

uint64_t sub_25A3FCE8C(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_25A4DEBDC(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = sub_25A3FF38C(v5);
  *a1 = v2;
  return result;
}

void DispatchScheduler.Deadline.advanced(by:)()
{
}

void sub_25A3FCF0C()
{
}

BOOL sub_25A3FCF18()
{
  return (_s20PreviewsFoundationOS17DispatchSchedulerV8DeadlineV1loiySbAE_AEtFZ_0() & 1) == 0;
}

BOOL sub_25A3FCF44()
{
  return (_s20PreviewsFoundationOS17DispatchSchedulerV8DeadlineV1loiySbAE_AEtFZ_0() & 1) == 0;
}

uint64_t sub_25A3FCF64()
{
  return _s20PreviewsFoundationOS17DispatchSchedulerV8DeadlineV1loiySbAE_AEtFZ_0();
}

uint64_t DispatchScheduler.init(queue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t DispatchScheduler.schedule(after:qos:execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a2;
  uint64_t v8 = sub_25A50E750();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_25A50E7D0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25A3BE05C;
  void aBlock[3] = &block_descriptor_4;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v20 = MEMORY[0x263F8EE78];
  sub_25A400318((unint64_t *)&qword_26A4168D0, MEMORY[0x263F8F030]);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
  sub_25A3DDB54();
  sub_25A50FC90();
  MEMORY[0x26113D880](v15, v19, v11, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

PreviewsFoundationOS::StepScheduler::Deadline __swiftcall StepScheduler.Deadline.init(floatLiteral:)(PreviewsFoundationOS::StepScheduler::Deadline floatLiteral)
{
  v1->time = floatLiteral.time;
  return floatLiteral;
}

PreviewsFoundationOS::StepScheduler::Deadline __swiftcall StepScheduler.Deadline.init(integerLiteral:)(Swift::Int integerLiteral)
{
  result.time = (double)integerLiteral;
  *uint64_t v1 = (double)integerLiteral;
  return result;
}

Swift::Double __swiftcall StepScheduler.Deadline.distance(to:)(PreviewsFoundationOS::StepScheduler::Deadline to)
{
  return *v1 - *v2;
}

PreviewsFoundationOS::StepScheduler::Deadline __swiftcall StepScheduler.Deadline.advanced(by:)(Swift::Double by)
{
  result.time = *v2 + by;
  *uint64_t v1 = result.time;
  return result;
}

BOOL static StepScheduler.Deadline.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

uint64_t StepScheduler.Deadline.description.getter()
{
  double v1 = *v0;
  if ((~*(void *)v0 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
  {
    sub_25A3FD308();
    return sub_25A50FC00();
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t sub_25A3FD308()
{
  unint64_t result = qword_26A417AC0;
  if (!qword_26A417AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417AC0);
  }
  return result;
}

uint64_t StepScheduler.Deadline.hash(into:)()
{
  return sub_25A510520();
}

uint64_t StepScheduler.Deadline.hashValue.getter()
{
  return sub_25A510530();
}

double sub_25A3FD3DC@<D0>(double *a1@<X8>, double a2@<D0>)
{
  double result = *v2 + a2;
  *a1 = result;
  return result;
}

double sub_25A3FD3EC@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 - *v2;
  *a2 = result;
  return result;
}

double sub_25A3FD400@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 + *v2;
  *a2 = result;
  return result;
}

double *sub_25A3FD414(double *result, uint64_t a2, char a3, double *a4, double *a5, double *a6)
{
  double v6 = *a6;
  if (a3)
  {
    double v8 = v6 + *a4;
    goto LABEL_5;
  }
  if (!__OFADD__(a2++, 1))
  {
    double v8 = *a5 + v6 * (double)a2;
LABEL_5:
    *double result = v8;
    return (double *)a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_25A3FD458()
{
  return sub_25A510530();
}

uint64_t sub_25A3FD4A4()
{
  return sub_25A510520();
}

uint64_t sub_25A3FD4D8()
{
  return sub_25A510530();
}

BOOL sub_25A3FD520(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL sub_25A3FD534(double *a1, double *a2)
{
  return *a2 >= *a1;
}

BOOL sub_25A3FD548(double *a1, double *a2)
{
  return *a1 >= *a2;
}

BOOL sub_25A3FD55C(double *a1, double *a2)
{
  return *a2 < *a1;
}

double sub_25A3FD570@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_25A3FD57C@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  double result = (double)*a1;
  *a2 = result;
  return result;
}

uint64_t sub_25A3FD58C()
{
  double v1 = *v0;
  if ((~*(void *)v0 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
  {
    sub_25A3FD308();
    return sub_25A50FC00();
  }
LABEL_7:
  __break(1u);
  return result;
}

BOOL sub_25A3FD614(double *a1, double *a2)
{
  return *a2 - *a1 == 0.0;
}

double StepScheduler.now.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 16);
  *a1 = result;
  return result;
}

uint64_t StepScheduler.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  uint64_t v1 = MEMORY[0x263F8EE80];
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v1;
  return result;
}

uint64_t StepScheduler.init()()
{
  uint64_t result = v0;
  uint64_t v2 = MEMORY[0x263F8EE80];
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = v2;
  return result;
}

Swift::Void __swiftcall StepScheduler.advance(by:)(Swift::Double by)
{
  if ((~*(void *)&by & 0x7FF0000000000000) == 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (by <= -9.22337204e18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (by >= 9.22337204e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t)by;
  if ((uint64_t)by < 0)
  {
LABEL_49:
    __break(1u);
    swift_release();
    __break(1u);
    return;
  }
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v2 + 24);
    swift_beginAccess();
    uint64_t v5 = 0;
    uint64_t v40 = v3;
    while (v5 != v3)
    {
      *(double *)(v2 + 16) = *(double *)(v2 + 16) + 1.0;
      uint64_t v6 = *(void *)(v2 + 24);
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C68);
        double v8 = (void *)swift_allocObject();
        int64_t v9 = _swift_stdlib_malloc_size(v8);
        uint64_t v10 = v9 - 32;
        if (v9 < 32) {
          uint64_t v10 = v9 - 17;
        }
        long long v8[2] = v7;
        void v8[3] = 2 * (v10 >> 4);
        uint64_t v41 = sub_25A400034((uint64_t)&v44, v8 + 4, v7, v6);
        swift_bridgeObjectRetain_n();
        sub_25A39C550();
        if (v41 != v7) {
          goto LABEL_45;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        double v8 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v44 = v8;
      sub_25A3FCE8C(&v44);
      uint64_t v42 = v5 + 1;
      swift_bridgeObjectRelease();
      uint64_t v11 = v44;
      unint64_t v12 = v44[2];
      swift_retain();
      unint64_t v13 = 0;
      uint64_t v14 = (void *)MEMORY[0x263F8EE78];
LABEL_17:
      if (v13 <= v12) {
        unint64_t v15 = v12;
      }
      else {
        unint64_t v15 = v13;
      }
      uint64_t v16 = (double *)&v11[2 * v13 + 4];
      unint64_t v17 = v15 + 1;
      while (v12 != v13)
      {
        if (v17 == ++v13)
        {
          __break(1u);
          goto LABEL_44;
        }
        uint64_t v18 = v16 + 2;
        double v19 = *v16;
        BOOL v20 = *(double *)(v2 + 16) < *v16;
        v16 += 2;
        if (!v20)
        {
          uint64_t v21 = *(v18 - 1);
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v44 = v14;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_25A39A0E8(0, v14[2] + 1, 1);
            uint64_t v14 = v44;
          }
          unint64_t v24 = v14[2];
          unint64_t v23 = v14[3];
          if (v24 >= v23 >> 1)
          {
            sub_25A39A0E8(v23 > 1, v24 + 1, 1);
            uint64_t v14 = v44;
          }
          _OWORD v14[2] = v24 + 1;
          uint64_t v25 = (double *)&v14[2 * v24];
          v25[4] = v19;
          *((void *)v25 + 5) = v21;
          goto LABEL_17;
        }
      }
      swift_release();
      swift_release();
      uint64_t v26 = v14[2];
      if (v26)
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = 0;
        do
        {
          uint64_t v28 = (double *)&v14[2 * v27 + 4];
          double v29 = *v28;
          uint64_t v30 = *((void *)v28 + 1);
          uint64_t v31 = *(void *)(v30 + 16);
          if (v31)
          {
            swift_bridgeObjectRetain();
            uint64_t v32 = v30 + 40;
            do
            {
              uint64_t v33 = *(void (**)(uint64_t))(v32 - 8);
              uint64_t v34 = swift_retain();
              v33(v34);
              swift_release();
              v32 += 16;
              --v31;
            }
            while (v31);
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          swift_beginAccess();
          unint64_t v35 = sub_25A409728(v29);
          if (v36)
          {
            unint64_t v37 = v35;
            int v38 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v39 = *v4;
            uint64_t v43 = *v4;
            *uint64_t v4 = 0x8000000000000000;
            if (!v38)
            {
              sub_25A40F0D0();
              uint64_t v39 = v43;
            }
            sub_25A3983A0(v37, v39);
            *uint64_t v4 = v39;
            swift_bridgeObjectRelease();
          }
          ++v27;
          swift_endAccess();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        while (v27 != v26);
        swift_release_n();
      }
      else
      {
        swift_release();
      }
      uint64_t v3 = v40;
      uint64_t v5 = v42;
      if (v42 == v40) {
        return;
      }
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
}

uint64_t StepScheduler.schedule(after:qos:execute:)(double *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  double v7 = *a1;
  if (*(double *)(v4 + 16) >= *a1) {
    return a3();
  }
  double v8 = (uint64_t *)(v4 + 24);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v4 + 24);
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_25A409728(v7), (v11 & 1) != 0))
  {
    unint64_t v12 = *(void **)(*(void *)(v9 + 56) + 8 * v10);
    swift_endAccess();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_endAccess();
    unint64_t v12 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = a4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v15 = v12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v15 = sub_25A38B308(0, v12[2] + 1, 1, v12);
  }
  unint64_t v17 = v15[2];
  unint64_t v16 = v15[3];
  if (v17 >= v16 >> 1) {
    unint64_t v15 = sub_25A38B308((void *)(v16 > 1), v17 + 1, 1, v15);
  }
  void v15[2] = v17 + 1;
  uint64_t v18 = &v15[2 * v17];
  v18[4] = sub_25A400274;
  void v18[5] = v14;
  swift_release();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *v8;
  *double v8 = 0x8000000000000000;
  sub_25A3FE1A0((uint64_t)v15, isUniquelyReferenced_nonNull_native, v7);
  *double v8 = v20;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

Swift::Void __swiftcall StepScheduler.unscheduleAll()()
{
  swift_beginAccess();
  *(void *)(v0 + 24) = MEMORY[0x263F8EE80];
  swift_bridgeObjectRelease();
}

uint64_t StepScheduler.description.getter()
{
  sub_25A50FDB0();
  uint64_t result = swift_bridgeObjectRelease();
  double v2 = *(double *)(v0 + 16);
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 9.22337204e18)
  {
    sub_25A3FD308();
    sub_25A50FC00();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417AC8);
    sub_25A40027C();
    sub_25A50E8B0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    return 0xD000000000000014;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t StepScheduler.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t StepScheduler.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0228](v0, 32, 7);
}

double sub_25A3FDE70@<D0>(double *a1@<X8>)
{
  double result = *(double *)(*(void *)v1 + 16);
  *a1 = result;
  return result;
}

uint64_t sub_25A3FDE80(double *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  return StepScheduler.schedule(after:qos:execute:)(a1, a2, a3, a4);
}

uint64_t sub_25A3FDEA4()
{
  return StepScheduler.description.getter();
}

uint64_t sub_25A3FDEC8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  double v7 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_25A409670(a4, a5);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a6 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_25A40E61C();
LABEL_7:
    uint64_t v22 = (void *)*v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 24 * v16;
      uint64_t result = sub_25A3B9028(*(void *)v23, *(void *)(v23 + 8), *(unsigned char *)(v23 + 16));
      *(void *)uint64_t v23 = a1;
      *(void *)(v23 + 8) = a2;
      *(unsigned char *)(v23 + 16) = a3;
      return result;
    }
    goto LABEL_11;
  }
  sub_25A40A2E8(v19, a6 & 1);
  unint64_t v25 = sub_25A409670(a4, a5);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_17:
    uint64_t result = sub_25A510430();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = (void *)*v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  uint64_t v27 = (uint64_t *)(v22[6] + 16 * v16);
  *uint64_t v27 = a4;
  v27[1] = a5;
  uint64_t v28 = v22[7] + 24 * v16;
  *(void *)uint64_t v28 = a1;
  *(void *)(v28 + 8) = a2;
  *(unsigned char *)(v28 + 16) = a3;
  uint64_t v29 = v22[2];
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (v30)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v22[2] = v31;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_25A3FE064(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  double v8 = (void *)*v3;
  unint64_t v10 = sub_25A4096EC(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_25A40EB8C();
      goto LABEL_7;
    }
    sub_25A40B22C(v13, a3 & 1);
    unint64_t v19 = sub_25A4096EC(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      unint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_25A510430();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    return sub_25A3936C4(a1, v17);
  }
LABEL_13:

  return sub_25A3FEFF0(v10, a2, a1, v16);
}

uint64_t sub_25A3FE1A0(uint64_t a1, char a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_25A409728(a3);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a2 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_25A40F0D0();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(double *)(v16[6] + v19) = a3;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      void v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_25A40BAF0(result, a2 & 1);
  uint64_t result = sub_25A409728(a3);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    unint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

_OWORD *sub_25A3FE2D8(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_25A409798(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_25A40F274();
      goto LABEL_7;
    }
    sub_25A40BDCC(v13, a3 & 1);
    unint64_t v19 = sub_25A409798(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      unint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_25A39C794(a2, (uint64_t)v21);
      return sub_25A3FF0C0(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)sub_25A510430();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);

  return sub_25A3936C4(a1, v17);
}

uint64_t sub_25A3FE424(uint64_t a1, unsigned __int8 a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_25A4097DC(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_25A40F45C();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      void v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_25A40C0E4(result, a3 & 1);
  uint64_t result = sub_25A4097DC(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    unint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t sub_25A3FE55C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_25A409670(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_25A40F8C4();
      goto LABEL_7;
    }
    sub_25A40C7A0(v15, a4 & 1);
    unint64_t v22 = sub_25A409670(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = sub_25A510430();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = v19
        + *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A417B00) - 8) + 72) * v12;
    return sub_25A401264(a1, v20);
  }
LABEL_13:
  sub_25A3FF180(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A3FE6C4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_25A409848(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_25A40FB3C();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      void v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_25A40CB54(result, a3 & 1);
  uint64_t result = sub_25A409848(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t sub_25A3FE800(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_25A4096E8(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_25A40FCE0();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v18 = 8 * v10;
    *(void *)(v16[6] + v18) = a2;
    *(void *)(v16[7] + v18) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      void v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_25A40CE30(result, a3 & 1);
  uint64_t result = sub_25A4096E8(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

_OWORD *sub_25A3FE930(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_25A409670(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_25A40E7F8();
      goto LABEL_7;
    }
    sub_25A40A614(v15, a4 & 1);
    unint64_t v21 = sub_25A409670(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_25A510430();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return sub_25A3936C4(a1, v19);
  }
LABEL_13:
  sub_25A3FF21C(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_25A3FEA84(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CrashReport.ID(0);
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (void *)*v3;
  unint64_t v13 = sub_25A40991C(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t result = swift_release();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_25A40FE70();
    goto LABEL_7;
  }
  sub_25A40D100(v16, a3 & 1);
  unint64_t v22 = sub_25A40991C(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = sub_25A510430();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_25A401134(a2, (uint64_t)v10);
  return sub_25A3FF288(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_25A3FEBF0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_25A4096EC(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_25A4100D0();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      void v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_25A40D4BC(result, a3 & 1);
  uint64_t result = sub_25A4096EC(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    uint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

unint64_t sub_25A3FED2C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_25A4099A0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_25A410274();
      goto LABEL_7;
    }
    sub_25A40D774(v15, a4 & 1);
    unint64_t v21 = sub_25A4099A0(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = sub_25A510430();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 80 * v12;
    return sub_25A4010D8((uint64_t)a1, v19);
  }
LABEL_13:

  return sub_25A3FF328(v12, a2, a3, a1, v18);
}

uint64_t sub_25A3FEE70(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_25A409AB4(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_25A4107AC();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      void v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_25A40E090(result, a3 & 1);
  uint64_t result = sub_25A409AB4(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

unint64_t sub_25A3FEFA8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

_OWORD *sub_25A3FEFF0(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_25A3936C4(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_25A3FF058(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_25A3CE6F0(a3, a4[7] + 32 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

_OWORD *sub_25A3FF0C0(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_25A3936C4(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t sub_25A3FF13C(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_25A3FF180(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417B00);
  uint64_t result = sub_25A4011FC(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

_OWORD *sub_25A3FF21C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_25A3936C4(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_25A3FF288(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CrashReport.ID(0);
  uint64_t result = sub_25A401198(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_25A3FF328(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a5[6] + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  uint64_t v6 = (_OWORD *)(a5[7] + 80 * result);
  *(_OWORD *)((char *)v6 + 57) = *(_OWORD *)((char *)a4 + 57);
  long long v7 = a4[3];
  _OWORD v6[2] = a4[2];
  uint64_t v6[3] = v7;
  long long v8 = a4[1];
  *uint64_t v6 = *a4;
  v6[1] = v8;
  uint64_t v9 = a5[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a5[2] = v11;
  }
  return result;
}

uint64_t sub_25A3FF38C(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_25A510250();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v84 = *a1;
      uint64_t v85 = -1;
      uint64_t v86 = 1;
      uint64_t v87 = *a1;
      do
      {
        double v88 = *(double *)(v84 + 16 * v86);
        uint64_t v89 = v85;
        uint64_t v90 = v87;
        do
        {
          if (*(double *)v90 < v88) {
            break;
          }
          if (!v84) {
            goto LABEL_141;
          }
          uint64_t v91 = *(void *)(v90 + 24);
          *(_OWORD *)(v90 + 16) = *(_OWORD *)v90;
          *(double *)uint64_t v90 = v88;
          *(void *)(v90 + 8) = v91;
          v90 -= 16;
        }
        while (!__CFADD__(v89++, 1));
        ++v86;
        v87 += 16;
        --v85;
      }
      while (v86 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  uint64_t v6 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    __dst = (double *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      BOOL v12 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      uint64_t v93 = v12;
      uint64_t v104 = v9;
      if (v13 >= 2)
      {
        uint64_t v94 = *v102;
        do
        {
          unint64_t v95 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v94) {
            goto LABEL_145;
          }
          uint64_t v96 = v93;
          uint64_t v97 = *(void *)&v93[16 * v95 + 32];
          uint64_t v98 = *(void *)&v93[16 * v13 + 24];
          sub_25A3FFA7C((double *)(v94 + 16 * v97), (double *)(v94 + 16 * *(void *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1) {
            break;
          }
          if (v98 < v97) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v96 = sub_25A4DEBB4((uint64_t)v96);
          }
          if (v95 >= *((void *)v96 + 2)) {
            goto LABEL_134;
          }
          uint64_t v99 = &v96[16 * v95 + 32];
          *(void *)uint64_t v99 = v97;
          *((void *)v99 + 1) = v98;
          unint64_t v100 = *((void *)v96 + 2);
          if (v13 > v100) {
            goto LABEL_135;
          }
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          uint64_t v93 = v96;
          *((void *)v96 + 2) = v100 - 1;
          unint64_t v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C70);
    uint64_t v8 = sub_25A50F130();
    *(void *)(v8 + 16) = v7;
    uint64_t v104 = v8;
    __dst = (double *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v103 = *a1 + 32;
  uint64_t v101 = *a1 - 16;
  BOOL v12 = (char *)MEMORY[0x263F8EE78];
  uint64_t v105 = v6;
  uint64_t v106 = v3;
  uint64_t v107 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(double *)(v11 + 16 * v10);
      uint64_t v16 = 16 * v14;
      double v17 = *(double *)(v11 + 16 * v14);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        char v18 = (double *)(v103 + 16 * v14);
        double v19 = v15;
        while (1)
        {
          double v20 = v19;
          double v19 = *v18;
          if (v17 >= v15 == v20 < *v18) {
            break;
          }
          ++v10;
          v18 += 2;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v17 >= v15)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          uint64_t v21 = 16 * v10;
          uint64_t v22 = v10;
          uint64_t v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11) {
                goto LABEL_144;
              }
              uint64_t v24 = v11 + v21;
              uint64_t v25 = *(void *)(v11 + v16);
              uint64_t v26 = *(void *)(v11 + v16 + 8);
              *(_OWORD *)(v11 + v16) = *(_OWORD *)(v11 + v21 - 16);
              *(void *)(v24 - 16) = v25;
              *(void *)(v24 - 8) = v26;
            }
            ++v23;
            v21 -= 16;
            v16 += 16;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v27 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v27 >= v3) {
      uint64_t v27 = v3;
    }
    if (v27 < v14) {
      break;
    }
    if (v10 != v27)
    {
      uint64_t v28 = v101 + 16 * v10;
      do
      {
        double v29 = *(double *)(v11 + 16 * v10);
        uint64_t v30 = v14;
        uint64_t v31 = v28;
        do
        {
          if (*(double *)v31 < v29) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          uint64_t v32 = *(void *)(v31 + 24);
          *(_OWORD *)(v31 + 16) = *(_OWORD *)v31;
          *(double *)uint64_t v31 = v29;
          *(void *)(v31 + 8) = v32;
          v31 -= 16;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 16;
      }
      while (v10 != v27);
      uint64_t v10 = v27;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      BOOL v12 = sub_25A4DE9FC(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v34 = *((void *)v12 + 2);
    unint64_t v33 = *((void *)v12 + 3);
    unint64_t v13 = v34 + 1;
    uint64_t v11 = v107;
    if (v34 >= v33 >> 1)
    {
      unint64_t v83 = sub_25A4DE9FC((char *)(v33 > 1), v34 + 1, 1, v12);
      uint64_t v11 = v107;
      BOOL v12 = v83;
    }
    *((void *)v12 + 2) = v13;
    unint64_t v35 = v12 + 32;
    char v36 = &v12[16 * v34 + 32];
    *(void *)char v36 = v14;
    *((void *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        unint64_t v37 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v42 = &v35[16 * v13];
          uint64_t v43 = *((void *)v42 - 8);
          uint64_t v44 = *((void *)v42 - 7);
          BOOL v48 = __OFSUB__(v44, v43);
          uint64_t v45 = v44 - v43;
          if (v48) {
            goto LABEL_120;
          }
          uint64_t v47 = *((void *)v42 - 6);
          uint64_t v46 = *((void *)v42 - 5);
          BOOL v48 = __OFSUB__(v46, v47);
          uint64_t v40 = v46 - v47;
          char v41 = v48;
          if (v48) {
            goto LABEL_121;
          }
          unint64_t v49 = v13 - 2;
          uint64_t v50 = &v35[16 * v13 - 32];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          BOOL v48 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v48) {
            goto LABEL_123;
          }
          BOOL v48 = __OFADD__(v40, v53);
          uint64_t v54 = v40 + v53;
          if (v48) {
            goto LABEL_126;
          }
          if (v54 >= v45)
          {
            char v72 = &v35[16 * v37];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            BOOL v48 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v48) {
              goto LABEL_130;
            }
            BOOL v65 = v40 < v75;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v66 = *((void *)v12 + 4);
            uint64_t v67 = *((void *)v12 + 5);
            BOOL v48 = __OFSUB__(v67, v66);
            uint64_t v59 = v67 - v66;
            char v60 = v48;
            goto LABEL_77;
          }
          uint64_t v39 = *((void *)v12 + 4);
          uint64_t v38 = *((void *)v12 + 5);
          BOOL v48 = __OFSUB__(v38, v39);
          uint64_t v40 = v38 - v39;
          char v41 = v48;
        }
        if (v41) {
          goto LABEL_122;
        }
        unint64_t v49 = v13 - 2;
        uint64_t v55 = &v35[16 * v13 - 32];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v58 = __OFSUB__(v56, v57);
        uint64_t v59 = v56 - v57;
        char v60 = v58;
        if (v58) {
          goto LABEL_125;
        }
        uint64_t v61 = &v35[16 * v37];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v48 = __OFSUB__(v62, v63);
        uint64_t v64 = v62 - v63;
        if (v48) {
          goto LABEL_128;
        }
        if (__OFADD__(v59, v64)) {
          goto LABEL_129;
        }
        if (v59 + v64 >= v40)
        {
          BOOL v65 = v40 < v64;
LABEL_83:
          if (v65) {
            unint64_t v37 = v49;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v60) {
          goto LABEL_124;
        }
        char v68 = &v35[16 * v37];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v48 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v48) {
          goto LABEL_127;
        }
        if (v71 < v59) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        uint64_t v77 = v12;
        unint64_t v78 = &v35[16 * v76];
        uint64_t v79 = *(void *)v78;
        uint64_t v80 = &v35[16 * v37];
        uint64_t v81 = *((void *)v80 + 1);
        sub_25A3FFA7C((double *)(v11 + 16 * *(void *)v78), (double *)(v11 + 16 * *(void *)v80), v11 + 16 * v81, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v81 < v79) {
          goto LABEL_117;
        }
        if (v37 > *((void *)v77 + 2)) {
          goto LABEL_118;
        }
        *(void *)unint64_t v78 = v79;
        *(void *)&v35[16 * v76 + 8] = v81;
        unint64_t v82 = *((void *)v77 + 2);
        if (v37 >= v82) {
          goto LABEL_119;
        }
        BOOL v12 = v77;
        unint64_t v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((void *)v77 + 2) = v82 - 1;
        uint64_t v11 = v107;
        if (v82 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v105;
    uint64_t v3 = v106;
    if (v10 >= v106)
    {
      uint64_t v9 = v104;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  uint64_t result = sub_25A510050();
  __break(1u);
  return result;
}

uint64_t sub_25A3FFA7C(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v16 = &v4[2 * v13];
      uint64_t v22 = v16;
      uint64_t v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        double v17 = (double *)(a3 - 16);
        char v18 = v6;
        while (1)
        {
          double v19 = v17 + 2;
          double v20 = *(v18 - 2);
          v18 -= 2;
          if (v20 >= *(v16 - 2))
          {
            if (v19 != v6 || v17 >= v6) {
              *(_OWORD *)double v17 = *(_OWORD *)v18;
            }
            uint64_t v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t v22 = v16 - 2;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *(_OWORD *)double v17 = *((_OWORD *)v16 - 1);
            }
            char v18 = v6;
            v16 -= 2;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 2;
          uint64_t v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[2 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v4 >= *v6)
        {
          double v15 = v6 + 2;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        else
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 2;
          uint64_t v23 = v4;
          double v15 = v6;
        }
        v7 += 2;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      uint64_t v24 = v7;
    }
LABEL_42:
    sub_25A4DEAF8((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A3FFCF8(uint64_t *a1, void *a2, uint64_t a3, void *a4)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_26A417B08);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = 0;
  uint64_t result = swift_bridgeObjectRelease();
  if (!a2) {
    goto LABEL_8;
  }
  if (!a3)
  {
LABEL_17:
    *a1 = v8;
    return a3;
  }
  if (a3 < 0) {
    goto LABEL_19;
  }
  if (!a4[2])
  {
LABEL_8:
    a3 = 0;
    goto LABEL_17;
  }
  uint64_t v10 = a4[4];
  uint64_t v11 = a4[5];
  *(void *)(v8 + 24) = 1;
  *a2 = v10;
  a2[1] = v11;
  if (a3 == 1)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    goto LABEL_17;
  }
  unint64_t v12 = a4[2];
  if (v12 == 1)
  {
    a3 = 1;
    goto LABEL_16;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 2;
  while (v14 - 1 < v12)
  {
    double v15 = &a2[v13];
    uint64_t v16 = a4[v13 + 6];
    uint64_t v17 = a4[v13 + 7];
    *(void *)(v8 + 24) = v14;
    void v15[2] = v16;
    v15[3] = v17;
    if (a3 == v14)
    {
      swift_bridgeObjectRetain();
      goto LABEL_16;
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v18 = v14 + 1;
    unint64_t v12 = a4[2];
    v13 += 2;
    if (v14++ == v12)
    {
      a3 = v18 - 1;
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_25A3FFE34(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    uint64_t v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    double v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_25A400034(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    uint64_t v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = *(void *)(*(void *)(a4 + 48) + 8 * v16);
    v11[1] = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_25A40023C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A400274()
{
  return sub_25A3F7D3C(*(uint64_t (**)(void))(v0 + 16));
}

unint64_t sub_25A40027C()
{
  unint64_t result = qword_26A417AD0;
  if (!qword_26A417AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417AD0);
  }
  return result;
}

uint64_t sub_25A4002D0()
{
  return sub_25A400318(&qword_26A417AD8, (void (*)(uint64_t))type metadata accessor for DispatchScheduler.Deadline);
}

uint64_t sub_25A400318(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DispatchScheduler.Deadline()
{
  uint64_t result = qword_26A417AF0;
  if (!qword_26A417AF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

_UNKNOWN **sub_25A4003AC()
{
  return &protocol witness table for DispatchScheduler.Deadline;
}

unint64_t sub_25A4003BC()
{
  unint64_t result = qword_26A417AE0;
  if (!qword_26A417AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417AE0);
  }
  return result;
}

uint64_t sub_25A400410()
{
  return MEMORY[0x263F8D560];
}

uint64_t sub_25A40041C()
{
  return MEMORY[0x263F8D590];
}

unint64_t sub_25A40042C()
{
  unint64_t result = qword_26A417AE8;
  if (!qword_26A417AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417AE8);
  }
  return result;
}

uint64_t sub_25A400480()
{
  return MEMORY[0x263F8D5B0];
}

uint64_t sub_25A40048C()
{
  return MEMORY[0x263F8D748];
}

_UNKNOWN **sub_25A400498()
{
  return &protocol witness table for StepScheduler.Deadline;
}

uint64_t dispatch thunk of Scheduler.now.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Scheduler.schedule(after:qos:execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of SchedulerDeadline.advanced(by:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for DispatchScheduler()
{
  return &type metadata for DispatchScheduler;
}

uint64_t initializeBufferWithCopyOfBuffer for DispatchScheduler.Deadline(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E7D0();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for DispatchScheduler.Deadline(uint64_t a1)
{
  uint64_t v2 = sub_25A50E7D0();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for DispatchScheduler.Deadline(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E7D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for DispatchScheduler.Deadline(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E7D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for DispatchScheduler.Deadline(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E7D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for DispatchScheduler.Deadline(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E7D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DispatchScheduler.Deadline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A400764);
}

uint64_t sub_25A400764(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E7D0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DispatchScheduler.Deadline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A4007E4);
}

uint64_t sub_25A4007E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E7D0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_25A400854()
{
  uint64_t result = sub_25A50E7D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for StepScheduler()
{
  return self;
}

uint64_t method lookup function for StepScheduler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for StepScheduler);
}

uint64_t dispatch thunk of StepScheduler.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for StepScheduler.Deadline()
{
  return &type metadata for StepScheduler.Deadline;
}

void *sub_25A400940(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    uint64_t v5[3] = v12;
    void v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_25A400B3C(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_25A400CD0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    uint64_t v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *unint64_t v11 = *(void *)(*(void *)(a4 + 48) + 8 * v16);
    v11[1] = v20;
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_25A400ED4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    uint64_t v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *(_DWORD *)uint64_t v11 = *(_DWORD *)(*(void *)(a4 + 48) + 4 * v16);
    *(void *)(v11 + 8) = v20;
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    v11 += 16;
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_25A4010D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_25A401134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrashReport.ID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A401198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrashReport.ID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A4011FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A401264(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

__uint64_t static NSThread.currentID.getter()
{
  v1[1] = *MEMORY[0x263EF8340];
  v1[0] = 0;
  pthread_threadid_np(0, v1);
  return v1[0];
}

uint64_t InvalidationTrace.appending(link:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_25A3C5C28(a1, (uint64_t)v8);
  uint64_t v4 = *v2;
  sub_25A401A20((uint64_t)v8, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_25A40142C);
  sub_25A401A20((uint64_t)v8, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_25A40142C);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_25A38AEB0(0, v4[2] + 1, 1, v4);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    uint64_t v4 = sub_25A38AEB0((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  _OWORD v4[2] = v6 + 1;
  sub_25A3C5C28((uint64_t)v8, (uint64_t)&v4[18 * v6 + 4]);
  uint64_t result = sub_25A401A20((uint64_t)v8, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_25A401A8C);
  *a2 = v4;
  return result;
}

uint64_t sub_25A40142C()
{
  return swift_bridgeObjectRetain();
}

uint64_t InvalidationTrace.links.getter()
{
  return swift_bridgeObjectRetain();
}

void static InvalidationTrace.empty.getter(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

PreviewsFoundationOS::InvalidationTrace __swiftcall InvalidationTrace.appending(links:)(Swift::OpaquePointer links)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  result.links._rawValue = (void *)sub_25A396F78(v4);
  *uint64_t v3 = v6;
  return result;
}

uint64_t InvalidationTrace.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  uint64_t v5 = v3 + 144 * v2 - 112;
  uint64_t v10 = v3;
  do
  {
    sub_25A3C5C28(v5, (uint64_t)v11);
    sub_25A401A20((uint64_t)v11, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_25A40142C);
    sub_25A5102B0();
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A3C5C28((uint64_t)v11, (uint64_t)v12);
    int v6 = sub_25A401A94((uint64_t)v12);
    uint64_t v7 = sub_25A401AA0((uint64_t)v12);
    if (v6 == 1)
    {
      char v8 = *(unsigned char *)(v7 + 73);
      sub_25A401A20((uint64_t)v11, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_25A40142C);
      sub_25A50EDA0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      if (v8)
      {
        sub_25A401A20((uint64_t)v11, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_25A401A8C);
        goto LABEL_11;
      }
      sub_25A50FDB0();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(void *)(v7 + 8))
      {
        sub_25A50EDA0();
        sub_25A50EDA0();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
      }
      sub_25A50FDB0();
      swift_bridgeObjectRelease();
      Callsite.description.getter();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50FDB0();
      swift_bridgeObjectRelease();
    }
    Callsite.description.getter();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    sub_25A50EDA0();
    sub_25A401A20((uint64_t)v11, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_25A401A8C);
    swift_bridgeObjectRelease();
LABEL_11:
    if (v2 == 1) {
      goto LABEL_14;
    }
    --v2;
    ++v4;
    v5 -= 144;
  }
  while (v2 <= *(void *)(v10 + 16));
  __break(1u);
LABEL_14:
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t static InvalidationTrace.reason(_:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t *a4@<X8>)
{
  long long v13 = a3[1];
  long long v14 = *a3;
  long long v12 = a3[2];
  uint64_t v7 = *((void *)a3 + 6);
  char v8 = *((unsigned char *)a3 + 56);
  char v9 = *((unsigned char *)a3 + 57);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158F0);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_25A5119F0;
  v15[0] = a1;
  v15[1] = a2;
  long long v16 = v14;
  long long v17 = v13;
  long long v18 = v12;
  uint64_t v19 = v7;
  char v20 = v8;
  char v21 = v9;
  sub_25A401AB0((uint64_t)v15);
  sub_25A3C5C28((uint64_t)v15, v10 + 32);
  *a4 = v10;
  return swift_bridgeObjectRetain();
}

uint64_t sub_25A401A20(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 136);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), v4);
  return a1;
}

uint64_t sub_25A401A8C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_25A401A94(uint64_t a1)
{
  return *(void *)(a1 + 96) >> 63;
}

uint64_t sub_25A401AA0(uint64_t result)
{
  *(void *)(result + 96) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_25A401AB0(uint64_t result)
{
  unint64_t v1 = *(unsigned __int8 *)(result + 96) | 0x8000000000000000;
  *(void *)(result + 72) &= 0x1FFuLL;
  *(void *)(result + 96) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InvalidationTrace()
{
  return &type metadata for InvalidationTrace;
}

uint64_t destroy for InvalidationTrace.Link()
{
  return sub_25A401A8C();
}

uint64_t initializeWithCopy for InvalidationTrace.Link(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  char v21 = *((unsigned char *)a2 + 136);
  sub_25A40142C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(unsigned char *)(a1 + 136) = v21;
  return a1;
}

uint64_t assignWithCopy for InvalidationTrace.Link(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  char v21 = *((unsigned char *)a2 + 136);
  sub_25A40142C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(unsigned char *)(a1 + 136) = v21;
  sub_25A401A8C();
  return a1;
}

__n128 __swift_memcpy137_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for InvalidationTrace.Link(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 128);
  char v4 = *(unsigned char *)(a2 + 136);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(void *)(a1 + 128) = v3;
  *(unsigned char *)(a1 + 136) = v4;
  sub_25A401A8C();
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidationTrace.Link(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 137)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 72) >> 9;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for InvalidationTrace.Link(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 136) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 137) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = (unint64_t)-a2 << 9;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 121) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 137) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_25A401F38(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 *)(result + 96) | (unint64_t)(a2 << 63);
  *(void *)(result + 72) &= 0x1FFuLL;
  *(void *)(result + 96) = v2;
  return result;
}

ValueMetadata *type metadata accessor for InvalidationTrace.Link()
{
  return &type metadata for InvalidationTrace.Link;
}

id static NSProcessInfo.operatingSystemIsAtLeast(majorVersion:minorVersion:patchVersion:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(self, sel_processInfo);
  v9[0] = a1;
  v9[1] = a2;
  _OWORD v9[2] = a3;
  id v7 = objc_msgSend(v6, sel_isOperatingSystemAtLeastVersion_, v9);

  return v7;
}

uint64_t assertUnreachable(message:callsite:)()
{
  return sub_25A403498();
}

uint64_t assertUnreachable(_:file:line:column:function:)()
{
  return sub_25A403498();
}

uint64_t assertEqual<A>(_:to:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_25A4022B4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t))assertEqual<A>(_:to:callsite:)) & 1;
}

uint64_t assertNoThrow<A>(_:file:line:column:function:)@<X0>(void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return assertNoThrow<A>(_:callsite:)((void (*)(void *__return_ptr))sub_25A403674, a4, a1);
}

uint64_t assertTrue(_:file:line:column:function:)(uint64_t (*a1)(void))
{
  char v1 = a1();
  if ((v1 & 1) == 0) {
    sub_25A403498();
  }
  return v1 & 1;
}

uint64_t assertTrue(_:callsite:)(uint64_t (*a1)(void))
{
  char v1 = a1();
  if ((v1 & 1) == 0) {
    sub_25A403498();
  }
  return v1 & 1;
}

uint64_t sub_25A402244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A403498(a3);
}

uint64_t assertEqual<A>(_:to:callsite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25A40245C(a1, a2, a3, a4, a5, MEMORY[0x263F8D218]);
}

uint64_t assertGreaterOrEqual<A>(_:to:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_25A4022B4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t))assertGreaterOrEqual<A>(_:to:callsite:)) & 1;
}

uint64_t sub_25A4022B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t, void *, uint64_t, uint64_t))
{
  v14[0] = a3;
  v14[1] = a4;
  char v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  uint64_t v18 = a8;
  uint64_t v19 = a9;
  char v20 = a10;
  return a13(a1, a2, v14, a11, a12) & 1;
}

uint64_t assertGreaterOrEqual<A>(_:to:callsite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25A40245C(a1, a2, a3, a4, a5, MEMORY[0x263F8D178]);
}

uint64_t assertGreater<A>(_:than:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_25A4022B4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t))assertGreater<A>(_:than:callsite:)) & 1;
}

uint64_t assertGreater<A>(_:than:callsite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25A40245C(a1, a2, a3, a4, a5, MEMORY[0x263F8D168]);
}

uint64_t assertLessOrEqual<A>(_:to:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_25A4022B4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t))assertLessOrEqual<A>(_:to:callsite:)) & 1;
}

uint64_t assertLessOrEqual<A>(_:to:callsite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25A40245C(a1, a2, a3, a4, a5, MEMORY[0x263F8D180]);
}

uint64_t assertLess<A>(_:than:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_25A4022B4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t))assertLess<A>(_:than:callsite:)) & 1;
}

uint64_t assertLess<A>(_:than:callsite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25A40245C(a1, a2, a3, a4, a5, MEMORY[0x263F8D170]);
}

uint64_t sub_25A40245C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v6 = a6(a1, a2, a4, a5);
  if ((v6 & 1) == 0) {
    sub_25A403498();
  }
  return v6 & 1;
}

uint64_t assertIdentical<A>(_:to:file:line:column:function:)(uint64_t a1, uint64_t a2)
{
  return assertIdentical<A>(_:to:callsite:)(a1, a2) & 1;
}

uint64_t assertIdentical<A>(_:to:callsite:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2 && a1 == a2) {
      return 1;
    }
  }
  else if (!a2)
  {
    return 1;
  }
  sub_25A403498();
  return 0;
}

uint64_t assertUnreachable(file:line:column:function:)()
{
  return sub_25A403498();
}

uint64_t assertionFailure(message:file:line:column:function:)()
{
  return sub_25A403498();
}

uint64_t assertNil<A>(_:_:file:line:column:function:)(uint64_t a1, void (*a2)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v12 = a1;
  v14[0] = a4;
  v14[1] = a5;
  char v15 = a6;
  uint64_t v16 = a7;
  uint64_t v17 = a8;
  uint64_t v18 = a9;
  uint64_t v19 = a10;
  char v20 = a11;
  a2(a1, a2, a3, a4, a5, a6, a7, a8);
  LOBYTE(v12) = sub_25A40369C(v12, v14, a12);
  swift_bridgeObjectRelease();
  return v12 & 1;
}

BOOL assertNil<A>(_:callsite:message:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25A40369C(a1, a2, a5);
}

BOOL assertNil<A>(_:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  v11[0] = a2;
  v11[1] = a3;
  char v12 = a4;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  uint64_t v15 = a7;
  uint64_t v16 = a8;
  char v17 = a9;
  return sub_25A40369C(a1, v11, a10);
}

uint64_t assertEmpty<A>(_:file:line:column:function:)()
{
  return assertEmpty<A>(_:callsite:)() & 1;
}

uint64_t assertEmpty<A>(_:callsite:)()
{
  char v0 = sub_25A50F610();
  if ((v0 & 1) == 0) {
    sub_25A403498();
  }
  return v0 & 1;
}

uint64_t assertNoThrow<A>(_:callsite:)@<X0>(void (*a1)(void *__return_ptr)@<X0>, uint64_t a2@<X3>, void *a3@<X8>)
{
  a1(a3);
  char v4 = *(uint64_t (**)(void *, void, uint64_t))(*(void *)(a2 - 8) + 56);

  return v4(a3, 0, 1);
}

uint64_t assertCast<A>(_:to:file:line:column:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, char a10)
{
  v11[0] = a2;
  v11[1] = a3;
  char v12 = a4;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  uint64_t v15 = a7;
  uint64_t v16 = a9;
  char v17 = a10;
  return assertCast<A>(_:to:callsite:)(a1, (uint64_t)v11, a8);
}

uint64_t assertCast<A>(_:to:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  long long v14 = *(_OWORD *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  uint64_t IsCastableTo = type metadata accessor for IsCastableTo();
  v15[0] = v5;
  v15[1] = v6;
  char v16 = v7;
  long long v17 = v14;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  char v20 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  return assertPredicate<A>(_:predicate:callsite:)(a1, v15, IsCastableTo, WitnessTable, a3);
}

uint64_t assertPredicate<A>(_:predicate:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v29 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_25A50FA40();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v15 = *a2;
  uint64_t v14 = a2[1];
  int v28 = *((unsigned __int8 *)a2 + 16);
  uint64_t v16 = a2[3];
  uint64_t v26 = a2[4];
  uint64_t v27 = v16;
  uint64_t v17 = a2[5];
  uint64_t v24 = a2[6];
  uint64_t v25 = v17;
  char v18 = *((unsigned char *)a2 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 24))(a1, a3, a4);
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v30 = v15;
    uint64_t v31 = v14;
    char v32 = v28;
    uint64_t v33 = v27;
    uint64_t v34 = v26;
    uint64_t v35 = v25;
    uint64_t v36 = v24;
    char v37 = v18;
    sub_25A403498();
    uint64_t v20 = 1;
    uint64_t v21 = v29;
  }
  else
  {
    uint64_t v22 = v29;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v29, v13, AssociatedTypeWitness);
    uint64_t v20 = 0;
    uint64_t v21 = v22;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1, AssociatedTypeWitness);
}

uint64_t static IsCastableTo.isSatisfied(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_25A3937CC(a1, (uint64_t)&v7);
  int v5 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v5 ^ 1u, 1, a2);
}

uint64_t sub_25A402C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static IsCastableTo.isSatisfied(by:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t assertInhabit<A>(_:file:line:column:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  v11[0] = a2;
  v11[1] = a3;
  char v12 = a4;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  uint64_t v15 = a7;
  uint64_t v16 = a8;
  char v17 = a10;
  return assertInhabit<A>(_:callsite:)(a1, v11, a9);
}

uint64_t assertInhabit<A>(_:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  char v7 = *((unsigned char *)a2 + 16);
  long long v14 = *(_OWORD *)(a2 + 3);
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  char v10 = *((unsigned char *)a2 + 56);
  uint64_t v11 = type metadata accessor for Inhabited();
  v15[0] = v5;
  v15[1] = v6;
  char v16 = v7;
  long long v17 = v14;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  char v20 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  return assertPredicate<A>(_:wrapper:callsite:)(a1, (uint64_t)v15, v11, WitnessTable, a3);
}

uint64_t assertPredicate<A>(_:wrapper:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a1;
  uint64_t v24 = a5;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_25A50FA40();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  char v12 = *(unsigned char *)(a2 + 16);
  long long v19 = *(_OWORD *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  LOBYTE(a2) = *(unsigned char *)(a2 + 56);
  uint64_t v15 = swift_checkMetadataState();
  v29[0] = v10;
  v29[1] = v11;
  char v30 = v12;
  long long v31 = v19;
  uint64_t v32 = v14;
  uint64_t v33 = v13;
  char v34 = a2;
  uint64_t v16 = v23;
  assertPredicate<A>(_:predicate:callsite:)(v23, v29, v15, AssociatedConformanceWitness, (uint64_t)v9);
  uint64_t v26 = v21;
  uint64_t v27 = v22;
  uint64_t v28 = v16;
  sub_25A3F60F8((void (*)(char *, char *))sub_25A403844, (uint64_t)v25, MEMORY[0x263F8E628], v21, v17, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t assertUnwrap<A>(_:file:line:column:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  v11[0] = a2;
  v11[1] = a3;
  char v12 = a4;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  uint64_t v15 = a7;
  uint64_t v16 = a8;
  char v17 = a10;
  return assertUnwrap<A>(_:callsite:)(a1, (uint64_t)v11, a9);
}

uint64_t assertUnwrap<A>(_:callsite:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  long long v14 = *(_OWORD *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  uint64_t IsSome = type metadata accessor for IsSome();
  v15[0] = v5;
  v15[1] = v6;
  char v16 = v7;
  long long v17 = v14;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  char v20 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  return assertPredicate<A>(_:predicate:callsite:)(a1, v15, IsSome, WitnessTable, a3);
}

uint64_t static IsSome.isSatisfied(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_25A50FA40();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v13 - v7, a1);
  uint64_t v10 = *(void *)(a2 - 8);
  uint64_t v11 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, a2) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, a2);
    uint64_t v11 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, v11, 1, a2);
}

uint64_t sub_25A4031EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static IsSome.isSatisfied(by:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t assertPredicate<A>(_:wrapper:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_25A4033B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t))assertPredicate<A>(_:wrapper:callsite:));
}

uint64_t sub_25A403240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Predicated();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v12 - v9;
  static Predicated.unverified(value:proof:)(a2, a1, (uint64_t)v12 - v9);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 24))(v10, a3, a4);
}

uint64_t assertPredicate<A>(_:predicate:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_25A4033B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t))assertPredicate<A>(_:predicate:callsite:));
}

uint64_t sub_25A4033B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t, void *, uint64_t, uint64_t))
{
  v14[0] = a3;
  v14[1] = a4;
  char v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  uint64_t v18 = a8;
  uint64_t v19 = a9;
  char v20 = a10;
  return a13(a1, a2, v14, a11, a12);
}

uint64_t assertMainThread(file:line:column:function:)()
{
  uint64_t result = (uint64_t)objc_msgSend(self, sel_isMainThread);
  if ((result & 1) == 0) {
    return sub_25A403498();
  }
  return result;
}

uint64_t sub_25A403498()
{
  type metadata accessor for CoreAnalyticsLogger();
  uint64_t inited = swift_initStackObject();
  __swift_instantiateConcreteTypeFromMangledName(qword_26A417C10);
  uint64_t v1 = swift_initStackObject();
  *(_DWORD *)(v1 + 20) = 0;
  *(unsigned char *)(v1 + 16) = 2;
  *(void *)(inited + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(qword_26A416748);
  uint64_t v2 = swift_initStackObject();
  *(_OWORD *)(v2 + 16) = xmmword_25A5119F0;
  *(void *)(v2 + 32) = 1701603686;
  *(void *)(v2 + 40) = 0xE400000000000000;
  sub_25A50FE00();
  int v3 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v3, sel_lastPathComponent);

  uint64_t v5 = sub_25A50EC20();
  uint64_t v7 = v6;

  sub_25A50EDA0();
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = v5;
  *(void *)(v2 + 56) = v7;
  *(unsigned char *)(v2 + 64) = 0;
  unint64_t v8 = sub_25A3929E0(v2);
  v9._uint64_t countAndFlagsBits = 0x6573734174666F73;
  v9._object = (void *)0xEA00000000007472;
  CoreAnalyticsLogger.logEvent(identifierSuffix:fields:)(v9, (Swift::OpaquePointer)v8);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25A403674()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

BOOL sub_25A40369C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50FA40();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  Swift::String v9 = (char *)&v18 - v8;
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  char v12 = *((unsigned char *)a2 + 16);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  uint64_t v20 = a2[5];
  uint64_t v21 = v10;
  uint64_t v19 = a2[6];
  char v15 = *((unsigned char *)a2 + 56);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v18 - v8, a1, v6);
  int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 48))(v9, 1, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v16 != 1)
  {
    uint64_t v22 = v21;
    uint64_t v23 = v11;
    char v24 = v12;
    uint64_t v25 = v13;
    uint64_t v26 = v14;
    uint64_t v27 = v20;
    uint64_t v28 = v19;
    char v29 = v15;
    sub_25A403498();
  }
  return v16 == 1;
}

uint64_t type metadata accessor for IsCastableTo()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A403844(uint64_t a1)
{
  return sub_25A403240(a1, v1[4], v1[2], v1[3]);
}

uint64_t type metadata accessor for IsSome()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PropertyListArchiver()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PropertyListArchiver.archiveCase<A, B, C, D>(_:parameter:withKey:withDefault:)()
{
  return PropertyListArchiver.archiveCase<A, B, C, D>(_:parameter:withKey:withDefault:)();
}

{
  return PropertyListArchiver.archiveCase<A, B, C, D>(_:parameter:withKey:withDefault:)();
}

{
  return PropertyListArchiver.archiveCase<A, B, C, D>(_:parameter:withKey:withDefault:)();
}

uint64_t PropertyListArchiver.archiveCase<A, B, C>(_:parameter:withKey:withDefault:)()
{
  return PropertyListArchiver.archiveCase<A, B, C>(_:parameter:withKey:withDefault:)();
}

{
  return PropertyListArchiver.archiveCase<A, B, C>(_:parameter:withKey:withDefault:)();
}

uint64_t PropertyListArchiver.archiveCase<A, B>(_:parameter:withKey:withDefault:)()
{
  return PropertyListArchiver.archiveCase<A, B>(_:parameter:withKey:withDefault:)();
}

uint64_t PropertyListArchiver.archiveCase<A, B, C, D, E>(_:parameter:withKey:withDefault:)()
{
  return PropertyListArchiver.archiveCase<A, B, C, D, E>(_:parameter:withKey:withDefault:)();
}

{
  return PropertyListArchiver.archiveCase<A, B, C, D, E>(_:parameter:withKey:withDefault:)();
}

{
  return PropertyListArchiver.archiveCase<A, B, C, D, E>(_:parameter:withKey:withDefault:)();
}

{
  return PropertyListArchiver.archiveCase<A, B, C, D, E>(_:parameter:withKey:withDefault:)();
}

double Continuation.init(file:line:column:function:initializationInfo:failureMode:resume:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, long long *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)&long long v22 = a1;
  *((void *)&v22 + 1) = a2;
  char v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  char v28 = a8;
  long long v21 = *a12;
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = a15;
  v18[3] = a16;
  v18[4] = a17;
  void v18[5] = a13;
  v18[6] = a14;
  Continuation.init(callsite:initializationInfo:failureMode:resume:)(&v22, a10, a11, (uint64_t *)&v21, (uint64_t)sub_25A40406C, (uint64_t)v18, a15, a16, (uint64_t (**)(long long *, uint64_t))&v29, a17);
  uint64_t v19 = v30;
  double result = *(double *)&v29;
  *(_OWORD *)a9 = v29;
  *(void *)(a9 + 16) = v19;
  return result;
}

uint64_t Continuation.resume(with:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = *v9;
  v12[0] = a2;
  v12[1] = a3;
  char v13 = a4;
  uint64_t v14 = a5;
  uint64_t v15 = a6;
  uint64_t v16 = a7;
  uint64_t v17 = a8;
  char v18 = a9;
  return v10(v12, a1);
}

uint64_t Continuation.resume(returning:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v26 = a1;
  uint64_t v14 = *(void *)(a10 + 16);
  uint64_t v15 = sub_25A510540();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  char v18 = (char *)&v21 - v17;
  uint64_t v19 = *v10;
  v27[0] = a2;
  v27[1] = a3;
  char v28 = a4;
  uint64_t v29 = v22;
  uint64_t v30 = v23;
  uint64_t v31 = v24;
  uint64_t v32 = v25;
  char v33 = a9;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))((char *)&v21 - v17, v26, v14);
  swift_storeEnumTagMultiPayload();
  v19(v27, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t Continuation.resume(throwing:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v26 = a1;
  uint64_t v14 = *(void *)(a10 + 24);
  uint64_t v15 = sub_25A510540();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  char v18 = (char *)&v21 - v17;
  uint64_t v19 = *v10;
  v27[0] = a2;
  v27[1] = a3;
  char v28 = a4;
  uint64_t v29 = v22;
  uint64_t v30 = v23;
  uint64_t v31 = v24;
  uint64_t v32 = v25;
  char v33 = a9;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))((char *)&v21 - v17, v26, v14);
  swift_storeEnumTagMultiPayload();
  v19(v27, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t Continuation.init(callsite:initializationInfo:failureMode:resume:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)(long long *a1, uint64_t a2)@<X8>, uint64_t a10)
{
  long long v17 = a1[1];
  v23[0] = *a1;
  v23[1] = v17;
  v24[0] = a1[2];
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)a1 + 41);
  uint64_t v18 = *a4;
  uint64_t v19 = a4[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t v20 = sub_25A3B7704(v23, a2, a3, v18, v19, 0x61756E69746E6F43, 0xEC0000006E6F6974, 0x64656D75736572, 0xE700000000000000);
  uint64_t v21 = (uint64_t (*)(long long *, uint64_t))swift_allocObject();
  *((void *)v21 + 2) = a7;
  *((void *)v21 + 3) = a8;
  *((void *)v21 + 4) = a10;
  *((void *)v21 + 5) = v20;
  *((void *)v21 + 6) = a5;
  *((void *)v21 + 7) = a6;
  *a9 = sub_25A4040D8;
  a9[1] = v21;
  a9[2] = (uint64_t (*)(long long *, uint64_t))v20;

  return swift_retain();
}

uint64_t sub_25A403F28(long long *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *, uint64_t))
{
  long long v6 = a1[1];
  long long v11 = *a1;
  long long v12 = v6;
  v13[0] = a1[2];
  *(_OWORD *)((char *)v13 + 9) = *(long long *)((char *)a1 + 41);
  uint64_t v7 = *(void *)(a3 + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 76));
  sub_25A3B86E0((long long *)(v7 + 16), v9);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 76));
  uint64_t result = swift_release();
  if ((v9[0] & 1) == 0)
  {
    v9[0] = v11;
    v9[1] = v12;
    v10[0] = v13[0];
    *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)v13 + 9);
    return a4(v9, a2);
  }
  return result;
}

uint64_t sub_25A404034()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A40406C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 40))(a2);
}

uint64_t sub_25A404098()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_25A4040D8(long long *a1, uint64_t a2)
{
  return sub_25A403F28(a1, a2, *(void *)(v2 + 40), *(uint64_t (**)(_OWORD *, uint64_t))(v2 + 48));
}

double Continuation.init(file:line:column:function:initializationInfo:failureMode:wrapping:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11, _OWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v33 = a8;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  int v28 = a3;
  uint64_t v36 = a9;
  uint64_t v34 = a11;
  uint64_t v35 = a10;
  uint64_t v27 = a12;
  uint64_t v18 = sub_25A50F260();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v27 - v20;
  *(void *)&long long v38 = a1;
  *((void *)&v38 + 1) = a2;
  char v39 = v28;
  uint64_t v40 = v29;
  uint64_t v41 = v30;
  uint64_t v42 = v31;
  uint64_t v43 = v32;
  char v44 = v33;
  long long v37 = *a12;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v27 - v20, a13, v18);
  unint64_t v22 = (*(unsigned __int8 *)(v19 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = a14;
  *((void *)v23 + 3) = a15;
  *((void *)v23 + 4) = a16;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v23[v22], v21, v18);
  Continuation.init(callsite:initializationInfo:failureMode:resume:)(&v38, v35, v34, (uint64_t *)&v37, (uint64_t)sub_25A4043A0, (uint64_t)v23, a14, a15, (uint64_t (**)(long long *, uint64_t))&v45, a16);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a13, v18);
  uint64_t v24 = v46;
  double result = *(double *)&v45;
  uint64_t v26 = v36;
  *uint64_t v36 = v45;
  *((void *)v26 + 2) = v24;
  return result;
}

uint64_t sub_25A404308()
{
  uint64_t v1 = sub_25A50F260();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A4043A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_25A50F260();
  return sub_25A4955D8(a2, v3);
}

uint64_t Continuation.resume(callsite:with:)(long long *a1)
{
  char v2 = *((unsigned char *)a1 + 16);
  char v3 = *((unsigned char *)a1 + 56);
  uint64_t v4 = *v1;
  long long v6 = *a1;
  char v7 = v2;
  long long v8 = *(long long *)((char *)a1 + 24);
  long long v9 = *(long long *)((char *)a1 + 40);
  char v10 = v3;
  return v4(&v6);
}

uint64_t Continuation.resume<>(file:line:column:function:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v23 = a8;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v12 = sub_25A510540();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v18 - v14;
  uint64_t v16 = *v8;
  v24[0] = a1;
  v24[1] = a2;
  char v25 = a3;
  uint64_t v26 = v19;
  uint64_t v27 = v20;
  uint64_t v28 = v21;
  uint64_t v29 = v22;
  char v30 = v23;
  static Result<>.success.getter();
  v16(v24, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

double static Continuation.noop.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v8 = (void *)swift_allocObject();
  long long v8[2] = a1;
  void v8[3] = a2;
  _OWORD v8[4] = a3;
  sub_25A390C08(&v11);
  long long v10 = v11;
  return Continuation.init(file:line:column:function:initializationInfo:failureMode:resume:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Continuation.swift", 124, 2, 126, 14, (uint64_t)"noop", 4, 2, a4, 0, 0, &v10, (uint64_t)nullsub_1, (uint64_t)v8, a1, a2, a3);
}

uint64_t sub_25A404694()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A4046A4@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (**a8)(long long *a1, uint64_t a2)@<X8>)
{
  char v12 = *((unsigned char *)a1 + 16);
  char v13 = *((unsigned char *)a1 + 56);
  uint64_t v14 = v8[1];
  uint64_t v22 = *v8;
  uint64_t v15 = (void *)v8[2];
  long long v29 = *a1;
  char v30 = v12;
  long long v31 = *(long long *)((char *)a1 + 24);
  long long v32 = *(long long *)((char *)a1 + 40);
  char v33 = v13;
  uint64_t v16 = v15[10];
  uint64_t v17 = v15[11];
  uint64_t v19 = v15[13];
  v28[0] = v15[12];
  unint64_t v18 = v28[0];
  v28[1] = v19;
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = *(_OWORD *)(a4 + 16);
  *(void *)(v20 + 32) = a5;
  *(void *)(v20 + 40) = a6;
  *(void *)(v20 + 48) = *(void *)(a4 + 32);
  *(void *)(v20 + 56) = a7;
  *(void *)(v20 + 64) = v22;
  *(void *)(v20 + 72) = v14;
  *(void *)(v20 + 80) = v15;
  *(void *)(v20 + 88) = a2;
  *(void *)(v20 + 96) = a3;
  sub_25A3C5A4C(v16);
  sub_25A3B28BC(v18);
  swift_retain();
  swift_retain();
  swift_retain();
  return Continuation.init(callsite:initializationInfo:failureMode:resume:)(&v29, v16, v17, v28, (uint64_t)sub_25A405064, v20, a5, a6, a8, a7);
}

uint64_t sub_25A4047E8(long long *a1, uint64_t a2, void (*a3)(long long *, char *), uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v10 = sub_25A510540();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)&v16 - v12;
  LOBYTE(v12) = *((unsigned char *)a1 + 16);
  char v14 = *((unsigned char *)a1 + 56);
  long long v16 = *a1;
  char v17 = v12;
  long long v18 = *(long long *)((char *)a1 + 24);
  long long v19 = *(long long *)((char *)a1 + 40);
  char v20 = v14;
  a6(a2);
  a3(&v16, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t Continuation.contramap<A>(file:line:column:function:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t (**a9)(long long *a1, uint64_t a2)@<X8>, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t v15 = *((void *)v13 + 2);
  long long v27 = *v13;
  uint64_t v28 = v15;
  *(void *)&long long v20 = a1;
  *((void *)&v20 + 1) = a2;
  char v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  char v26 = a8;
  long long v16 = (void *)swift_allocObject();
  uint64_t v17 = a12[3];
  void v16[2] = a12[2];
  void v16[3] = v17;
  uint64_t v18 = a12[4];
  void v16[4] = a13;
  v16[5] = v18;
  v16[6] = a10;
  v16[7] = a11;
  swift_retain();
  sub_25A4046A4(&v20, (uint64_t)sub_25A404A54, (uint64_t)v16, (uint64_t)a12, a13, v17, v18, a9);

  return swift_release();
}

uint64_t sub_25A404A1C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_25A404A54@<X0>(uint64_t a1@<X8>)
{
  char v3 = *(void (**)(char *))(v1 + 48);
  uint64_t v4 = sub_25A510540();
  return sub_25A4B7DC0(v3, v4, a1);
}

uint64_t Continuation.contramapError<A>(file:line:column:function:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t (**a9)(long long *a1, uint64_t a2)@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = *((void *)v14 + 2);
  long long v28 = *v14;
  uint64_t v29 = v16;
  *(void *)&long long v21 = a1;
  *((void *)&v21 + 1) = a2;
  char v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  char v27 = a8;
  uint64_t v17 = swift_allocObject();
  long long v20 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)(v17 + 16) = v20;
  uint64_t v18 = *(void *)(a12 + 32);
  *(void *)(v17 + 32) = a13;
  *(void *)(v17 + 40) = v18;
  *(void *)(v17 + 48) = a14;
  *(void *)(v17 + 56) = a10;
  *(void *)(v17 + 64) = a11;
  swift_retain();
  sub_25A4046A4(&v21, (uint64_t)sub_25A404CF8, v17, a12, v20, a13, a14, a9);

  return swift_release();
}

uint64_t sub_25A404BB4@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_25A510540();
  MEMORY[0x270FA5388](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v10 - v7, a1, v6);
  return sub_25A47CB24(a2, v6, a3);
}

uint64_t sub_25A404CC0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25A404CF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A404BB4(a1, *(void (**)(char *))(v2 + 56), a2);
}

uint64_t Continuation.contramapResult<A, B>(file:line:column:function:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t (**a9)(long long *a1, uint64_t a2)@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = *((void *)v15 + 2);
  long long v25 = *v15;
  uint64_t v26 = v16;
  *(void *)&long long v18 = a1;
  *((void *)&v18 + 1) = a2;
  char v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  char v24 = a8;
  return sub_25A4046A4(&v18, a10, a11, a12, a13, a14, a15, a9);
}

uint64_t Continuation<>.tryContramap<A, B>(file:line:column:function:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t (**a9)(long long *a1, uint64_t a2)@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17 = *((void *)v15 + 2);
  long long v27 = *v15;
  uint64_t v28 = v17;
  *(void *)&long long v20 = a1;
  *((void *)&v20 + 1) = a2;
  char v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  char v26 = a8;
  long long v18 = (void *)swift_allocObject();
  void v18[2] = *(void *)(a12 + 16);
  v18[3] = a13;
  v18[4] = a14;
  void v18[5] = a15;
  v18[6] = a10;
  v18[7] = a11;
  swift_retain();
  sub_25A4046A4(&v20, (uint64_t)sub_25A404E78, (uint64_t)v18, a12, a13, a14, a15, a9);

  return swift_release();
}

uint64_t sub_25A404E78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v5 = (void (*)(char *))v1[6];
  uint64_t v4 = v1[7];
  uint64_t v6 = sub_25A510540();
  return Result.tryMap<A>(_:)(v5, v4, v6, v3, a1);
}

uint64_t destroy for CancellationToken()
{
  swift_release();

  return swift_release();
}

void *_s20PreviewsFoundationOS17CancellationTokenVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for CancellationToken(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CancellationToken(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for Continuation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A40501C()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 104, 7);
}

uint64_t sub_25A405064(long long *a1, uint64_t a2)
{
  return sub_25A4047E8(a1, a2, *(void (**)(long long *, char *))(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(void (**)(uint64_t))(v2 + 88));
}

void static TimeoutError.defaultError@Sendable (_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
}

uint64_t Future.timeout(dsoHandle:file:line:column:function:after:timeoutError:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v33 = a12;
  uint64_t v34 = a11;
  uint64_t v20 = sub_25A50E760();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[0] = a3;
  v36[1] = a4;
  char v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v41 = a9;
  char v42 = a10;
  uint64_t v25 = v24;
  (*(void (**)(char *, void))(v21 + 104))(v23, *MEMORY[0x263F8F050]);
  v35[3] = &type metadata for SimpleTimeoutTimer;
  v35[4] = &protocol witness table for SimpleTimeoutTimer;
  sub_25A3DD980();
  uint64_t v26 = sub_25A50F900();
  type metadata accessor for DelayedInvocation();
  uint64_t v27 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417D18);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v26;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417D20);
  uint64_t v29 = swift_allocObject();
  *(_DWORD *)(v29 + 44) = 0;
  *(void *)(v29 + 24) = 0;
  *(void *)(v29 + 32) = 0;
  *(void *)(v29 + 16) = nullsub_1;
  *(unsigned char *)(v29 + 40) = 1;
  *(void *)(v28 + 24) = v29;
  *(void *)(v27 + 16) = v28;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v25);
  v35[0] = v27;
  *(double *)&v35[1] = a1;
  uint64_t v30 = Future.timeout(callsite:using:timeoutError:)((uint64_t)v36, (uint64_t)v35, v34, v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return v30;
}

uint64_t Future.timeout(callsite:using:timeoutError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  long long v14 = *(_OWORD *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  char v12 = *(unsigned char *)(a1 + 56);
  type metadata accessor for TimeoutFuture();
  v17[0] = v7;
  v17[1] = v8;
  char v18 = v9;
  long long v19 = v14;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  char v22 = v12;
  sub_25A3990F8(a2, (uint64_t)v16);
  swift_allocObject();
  swift_retain();
  swift_retain();
  return sub_25A405838(v17, v4, v16, a3, a4);
}

uint64_t sub_25A4053C4(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return sub_25A405838(a1, a2, a3, a4, a5);
}

uint64_t (*static TimeoutError.timedOut(waitingFor:)(uint64_t a1, uint64_t a2))@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_bridgeObjectRetain();
  return sub_25A4069C8;
}

uint64_t TimeoutError.highValueTitle.getter()
{
  if (*(unsigned char *)(v0 + 24) == 1)
  {
    sub_25A50FDB0();
    sub_25A50EDA0();
    sub_25A50EDA0();
  }
  else
  {
    sub_25A50FDB0();
  }
  sub_25A50EDA0();
  sub_25A50F450();
  sub_25A50EDA0();
  return 0;
}

uint64_t TimeoutError.additionalInfo.getter()
{
  return 0;
}

uint64_t TimeoutError.additionalDiagnostics.getter()
{
  return 0;
}

uint64_t sub_25A4055F0()
{
  return sub_25A445E00(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t Future.flattened<A>()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = *(void *)(*(void *)(v1 + 80) + 16);
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v3 = sub_25A47E6EC((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TimeoutFuture.swift", 125, 2, 80, 13, (uint64_t)"flattened()", 11, 2, v5, (uint64_t)sub_25A4069F0, v2);
  swift_release();
  sub_25A3EE314(0);
  return v3;
}

uint64_t sub_25A4056CC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v4 = sub_25A510540();
  uint64_t v5 = sub_25A510540();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (uint64_t *)((char *)&v10 - v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v10 - v6, a1, v5);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 32))(a2, v7, v4);
  }
  *a2 = *v7;
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25A405838(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  char v11 = *((unsigned char *)a1 + 16);
  long long v23 = *(_OWORD *)(a1 + 3);
  uint64_t v21 = a1[6];
  uint64_t v22 = a1[5];
  char v20 = *((unsigned char *)a1 + 56);
  *(void *)&long long v24 = a2;
  sub_25A3990F8((uint64_t)a3, (uint64_t)&v24 + 8);
  uint64_t v12 = type metadata accessor for TimeoutFuture.Activity();
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_25A3EF560(&v24, v12);
  (*(void (**)(long long *, uint64_t))(*(void *)(v12 - 8) + 8))(&v24, v12);
  v5[13] = v13;
  sub_25A3990F8((uint64_t)a3, (uint64_t)&v24);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  sub_25A3C85D8(&v24, v14 + 32);
  v5[14] = sub_25A407150;
  v5[15] = v14;
  swift_retain();
  swift_release();
  *(void *)&long long v24 = v9;
  *((void *)&v24 + 1) = v10;
  char v25 = v11;
  long long v26 = v23;
  uint64_t v27 = v22;
  uint64_t v28 = v21;
  char v29 = v20;
  uint64_t v15 = sub_25A4EECC4((uint64_t)&v24);
  uint64_t v16 = a3[3];
  uint64_t v17 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v16);
  char v18 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v17 + 16);
  swift_retain_n();
  v18(sub_25A4072AC, v15, v16, v17);
  swift_release();
  swift_retain();
  Future.observeFinish(_:)((uint64_t)sub_25A4071BC, v15);
  swift_release_n();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  return v15;
}

uint64_t sub_25A405A70()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 200);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  uint64_t v3 = type metadata accessor for FutureTermination();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v13[-v5];
  uint64_t v15 = *(void *)(v1 + 104);
  uint64_t v14 = v2;
  type metadata accessor for TimeoutFuture.Activity();
  uint64_t v7 = sub_25A50E5B0();
  type metadata accessor for Future();
  uint64_t v8 = sub_25A50FA40();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TimeoutFuture.swift", 125, 2, 136, 48, (uint64_t)"handleTimeout()", 15, 2, (uint64_t)sub_25A4072B0, (uint64_t)v13, v7, v8, WitnessTable);
  uint64_t result = swift_release();
  if (v16)
  {
    char v11 = *(uint64_t (**)(uint64_t))(v1 + 112);
    uint64_t v12 = swift_retain();
    *uint64_t v6 = v11(v12);
    swift_storeEnumTagMultiPayload();
    sub_25A4EF7A8((uint64_t)v6);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
    sub_25A4F1FD0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TimeoutFuture.swift", 125, 2, 145, 33, (uint64_t)"handleTimeout()", 15, 2);
    return swift_release_n();
  }
  return result;
}

uint64_t sub_25A405CCC(uint64_t a1)
{
  uint64_t v23 = a1;
  uint64_t v2 = *(void *)(*v1 + 200);
  uint64_t v3 = type metadata accessor for FutureTermination();
  uint64_t v24 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v23 - v4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v6 = sub_25A510540();
  uint64_t v7 = type metadata accessor for FutureTermination();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)&v23 - v9);
  v29[0] = v1[13];
  uint64_t v26 = v2;
  type metadata accessor for TimeoutFuture.Activity();
  uint64_t v11 = sub_25A50E5B0();
  swift_retain();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E48);
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TimeoutFuture.swift", 125, 2, 117, 47, (uint64_t)"receiveUnderlyingFinish(_:)", 27, 2, (uint64_t)sub_25A4071C0, (uint64_t)v25, v11, v12, WitnessTable);
  swift_release();
  sub_25A4071DC((uint64_t)v32, (uint64_t)&v27);
  if (v28)
  {
    uint64_t v14 = sub_25A3C85D8(&v27, (uint64_t)v29);
    MEMORY[0x270FA5388](v14);
    void v22[2] = v2;
    uint64_t v15 = v23;
    FutureTermination.map<A>(_:)((void (*)(void *))sub_25A4072A4, (uint64_t)v22, v3, v6, v10);
    sub_25A4EF7A8((uint64_t)v10);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v16 = v24;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v5, v15, v3);
    if (swift_getEnumCaseMultiPayload() >= 2)
    {
      uint64_t v20 = v30;
      uint64_t v21 = v31;
      __swift_project_boxed_opaque_existential_1(v29, v30);
      (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v3);
      uint64_t v17 = v30;
      uint64_t v18 = v31;
      __swift_project_boxed_opaque_existential_1(v29, v30);
      (*(void (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
    }
    sub_25A407244((uint64_t)v32);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  else
  {
    sub_25A407244((uint64_t)v32);
    return sub_25A407244((uint64_t)&v27);
  }
}

double sub_25A406088@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TimeoutFuture.Activity();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(&v8, a1, v4);
  uint64_t v6 = *(void (**)(uint64_t *, uint64_t))(v5 + 8);
  if (v8)
  {
    v6(a1, v4);
    swift_release();
    sub_25A3C85D8(&v9, a2);
    double result = 0.0;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    v6(&v8, v4);
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_25A4061A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v4 = sub_25A510540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  sub_25A510540();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25A40626C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TimeoutFuture.Activity();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(&v9, a1, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8);
  if (v9)
  {
    v6(a1, v4);
    uint64_t v7 = v9;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    uint64_t result = v6(&v9, v4);
    uint64_t v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_25A406378(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 200);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  uint64_t v5 = type metadata accessor for FutureTermination();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = *a1;
  uint64_t v40 = a1[1];
  int v39 = *((unsigned __int8 *)a1 + 16);
  uint64_t v38 = a1[3];
  uint64_t v37 = a1[4];
  uint64_t v10 = a1[6];
  uint64_t v36 = a1[5];
  int v35 = *((unsigned __int8 *)a1 + 56);
  uint64_t v11 = *(void *)(v2 + 104);
  uint64_t v42 = v4;
  uint64_t v43 = v11;
  type metadata accessor for TimeoutFuture.Activity();
  uint64_t v12 = sub_25A50E5B0();
  type metadata accessor for Future();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A417E40);
  swift_getTupleTypeMetadata2();
  uint64_t v13 = sub_25A50FA40();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TimeoutFuture.swift", 125, 2, 150, 42, (uint64_t)"cancel(callsite:)", 17, 2, (uint64_t)sub_25A4070F4, (uint64_t)v41, v12, v13, WitnessTable);
  swift_release();
  uint64_t v15 = *(void *)(v13 - 8);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 16))(&v43, v53, v13);
  uint64_t v16 = v43;
  if (v43)
  {
    sub_25A3C85D8(&v44, (uint64_t)v50);
    uint64_t v34 = v15;
    uint64_t v32 = v2;
    uint64_t v30 = v5;
    uint64_t v33 = v6;
    uint64_t v17 = v9;
    uint64_t v29 = v9;
    uint64_t v18 = v51;
    uint64_t v19 = v52;
    __swift_project_boxed_opaque_existential_1(v50, v51);
    (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
    uint64_t v20 = v40;
    uint64_t v43 = v17;
    *(void *)&long long v44 = v40;
    LOBYTE(v19) = v39;
    BYTE8(v44) = v39;
    uint64_t v21 = v38;
    uint64_t v22 = v37;
    uint64_t v45 = v38;
    uint64_t v46 = v37;
    uint64_t v23 = v10;
    uint64_t v24 = v36;
    uint64_t v47 = v36;
    uint64_t v48 = v23;
    uint64_t v31 = v13;
    char v25 = v35;
    char v49 = v35;
    (*(void (**)(uint64_t *))(*(void *)v16 + 192))(&v43);
    *(void *)uint64_t v8 = v29;
    *((void *)v8 + 1) = v20;
    unsigned char v8[16] = v19;
    *((void *)v8 + 3) = v21;
    *((void *)v8 + 4) = v22;
    *((void *)v8 + 5) = v24;
    *((void *)v8 + 6) = v23;
    v8[56] = v25;
    uint64_t v26 = v30;
    swift_storeEnumTagMultiPayload();
    sub_25A4EF7A8((uint64_t)v8);
    swift_release();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v26);
    (*(void (**)(uint64_t *, uint64_t))(v34 + 8))(v53, v31);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  }
  else
  {
    uint64_t v28 = *(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8);
    v28(v53, v13);
    return v28(&v43, v13);
  }
}

double sub_25A4067BC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TimeoutFuture.Activity();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(&v9, a1, v4);
  uint64_t v6 = *(void (**)(uint64_t *, uint64_t))(v5 + 8);
  if (v9)
  {
    v6(a1, v4);
    uint64_t v7 = v9;
    sub_25A3C85D8(&v10, (uint64_t)v11);
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
    *(void *)a2 = v7;
    sub_25A3C85D8(v11, a2 + 8);
  }
  else
  {
    v6(&v9, v4);
    double result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t sub_25A4068E0()
{
  swift_release();

  return swift_release();
}

uint64_t sub_25A406910()
{
  uint64_t v0 = Future.deinit();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_25A406948()
{
  uint64_t v0 = sub_25A406910();

  return MEMORY[0x270FA0228](v0, 128, 7);
}

uint64_t type metadata accessor for TimeoutFuture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A406990()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A4069C8@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v3 = *(void *)(v2 + 24);
  *(double *)a1 = a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_25A4069E0()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A4069F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_25A4056CC(a1, a2);
}

unint64_t sub_25A4069F8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_25A406A28();
  unint64_t result = sub_25A406A7C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_25A406A28()
{
  unint64_t result = qword_26A417D28;
  if (!qword_26A417D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417D28);
  }
  return result;
}

unint64_t sub_25A406A7C()
{
  unint64_t result = qword_26A417D30;
  if (!qword_26A417D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417D30);
  }
  return result;
}

unint64_t sub_25A406AD4()
{
  unint64_t result = qword_26A417D38[0];
  if (!qword_26A417D38[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A417D38);
  }
  return result;
}

uint64_t destroy for TimeoutError(uint64_t a1)
{
  return sub_25A3ECD84(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for TimeoutError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_25A3ECD94(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for TimeoutError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_25A3ECD94(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  sub_25A3ECD84(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TimeoutError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  sub_25A3ECD84(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeoutError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeoutError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_25A406D00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_25A406D08(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TimeoutError()
{
  return &type metadata for TimeoutError;
}

uint64_t sub_25A406D24()
{
  return swift_initClassMetadata2();
}

unint64_t sub_25A406D78(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));
  }
  return result;
}

char *sub_25A406DCC(char *a1, _OWORD *a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    long long v7 = a2[1];
    *(_OWORD *)a1 = *a2;
    *((_OWORD *)a1 + 1) = v7;
    *((_OWORD *)a1 + 2) = a2[2];
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    unsigned int v3 = (char *)a2 + 8;
    long long v4 = a2[2];
    *((_OWORD *)a1 + 2) = v4;
    uint64_t v5 = v4;
    uint64_t v6 = **(void (***)(char *, char *, uint64_t))(v4 - 8);
    swift_retain();
    v6(a1 + 8, v3, v5);
  }
  return a1;
}

uint64_t sub_25A406E74(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(void *)a1 = v5;
      uint64_t v6 = (uint64_t)a2 + 8;
      uint64_t v7 = *((void *)a2 + 4);
      *(void *)(a1 + 32) = v7;
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      char v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
      swift_retain();
      v8(a1 + 8, v6, v7);
      return a1;
    }
LABEL_7:
    long long v9 = *a2;
    long long v10 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)a1 = v9;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  *(void *)a1 = v5;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)a2 + 1);
  return a1;
}

uint64_t sub_25A406F74(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
LABEL_5:
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t sub_25A407004(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t sub_25A407054(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_25A4070B0(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t type metadata accessor for TimeoutFuture.Activity()
{
  return __swift_instantiateGenericMetadata();
}

double sub_25A4070F4@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A4067BC(a1, a2);
}

uint64_t sub_25A407110()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25A407150()
{
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[2];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  __swift_project_boxed_opaque_existential_1(v0 + 4, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  return v1(v4);
}

double sub_25A4071C0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A406088(a1, a2);
}

uint64_t sub_25A4071DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A407244(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25A4072A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A4061A0(a1, a2);
}

uint64_t sub_25A4072B0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_25A40626C(a1, a2);
}

uint64_t FileSystemProductsPathProvider.roots.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FileSystemProductsPathProvider.init(roots:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t FileSystemProductsPathProvider.paths.getter()
{
  *(void *)(v1 + 16) = *v0;
  return MEMORY[0x270FA2498](sub_25A407300, 0, 0);
}

uint64_t sub_25A407300()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_25A407C14(v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_25A407384@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  id v65 = a1;
  uint64_t v52 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E68);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v53 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  long long v9 = (char *)&v49 - v8;
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v49 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v49 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E60);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_25A50E320();
  uint64_t v54 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v50 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v70 = (char *)&v49 - v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C50);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A511AC0;
  uint64_t v23 = (void *)*MEMORY[0x263EFF6C0];
  *(void *)(inited + 32) = *MEMORY[0x263EFF6C0];
  uint64_t v24 = (void *)*MEMORY[0x263EFF6F0];
  *(void *)(inited + 40) = *MEMORY[0x263EFF6F0];
  id v25 = v23;
  id v26 = v24;
  uint64_t v27 = sub_25A408300(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  id v28 = objc_msgSend(self, sel_defaultManager);
  uint64_t v29 = swift_bridgeObjectRetain();
  sub_25A399170(v29);
  uint64_t v64 = v27;
  swift_bridgeObjectRelease();
  uint64_t v30 = (void *)sub_25A50F800();

  swift_release();
  id v65 = v30;
  if (v30)
  {
    uint64_t v62 = (unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v63 = (void (**)(char *, void, uint64_t, uint64_t))(v54 + 56);
    char v60 = (void (**)(char *, char *, uint64_t))(v54 + 32);
    uint64_t v59 = (void (**)(char *, uint64_t))(v54 + 8);
    char v49 = (void (**)(char *, char *, uint64_t))(v54 + 16);
    unint64_t v51 = MEMORY[0x263F8EE78];
    uint64_t v61 = MEMORY[0x263F8EE58] + 8;
    uint64_t v57 = v18;
    uint64_t v66 = v14;
    while (1)
    {
      if (objc_msgSend(v65, sel_nextObject, v49))
      {
        sub_25A50FC10();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v67, 0, sizeof(v67));
      }
      sub_25A3C90EC((uint64_t)v67, (uint64_t)&v68);
      if (!*((void *)&v69 + 1))
      {
        uint64_t v47 = v52;
        unint64_t v46 = v51;
        goto LABEL_29;
      }
      int v31 = swift_dynamicCast();
      (*v63)(v17, v31 ^ 1u, 1, v18);
      if ((*v62)(v17, 1, v18) == 1)
      {
        uint64_t v47 = v52;
        unint64_t v46 = v51;
        goto LABEL_31;
      }
      BOOL v58 = *v60;
      v58(v70, v17, v18);
      sub_25A50E270();
      if (v3)
      {

        uint64_t v32 = sub_25A50E1C0();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v14, 1, 1, v32);
        uint64_t v3 = 0;
      }
      else
      {
        uint64_t v32 = sub_25A50E1C0();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v14, 0, 1, v32);
      }
      sub_25A408530((uint64_t)v14, (uint64_t)v12);
      sub_25A50E1C0();
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      if (v34(v12, 1, v32) == 1) {
        break;
      }
      uint64_t v56 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v34;
      char v35 = sub_25A50E1A0();
      uint64_t v55 = *(void (**)(char *, uint64_t))(v33 + 8);
      v55(v12, v32);
      uint64_t v3 = 0;
      uint64_t v18 = v57;
      if (v35 == 2) {
        goto LABEL_15;
      }
      sub_25A408530((uint64_t)v66, (uint64_t)v9);
      uint64_t v36 = (uint64_t)v9;
      if ((v35 & 1) == 0) {
        goto LABEL_16;
      }
      uint64_t v37 = v53;
      sub_25A408530((uint64_t)v9, v53);
      if (v56(v37, 1, v32) == 1)
      {
        sub_25A384BCC((uint64_t)v9, &qword_26A417E68);
        uint64_t v36 = v37;
        goto LABEL_16;
      }
      uint64_t v38 = v37;
      char v39 = sub_25A50E1B0();
      sub_25A384BCC((uint64_t)v9, &qword_26A417E68);
      uint64_t v40 = v38;
      uint64_t v18 = v57;
      v55((char *)v40, v32);
      if (v39)
      {
        (*v49)(v50, v70, v18);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = v66;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          unint64_t v51 = sub_25A38B420(0, *(void *)(v51 + 16) + 1, 1, v51);
        }
        unint64_t v43 = *(void *)(v51 + 16);
        unint64_t v42 = *(void *)(v51 + 24);
        if (v43 >= v42 >> 1) {
          unint64_t v51 = sub_25A38B420(v42 > 1, v43 + 1, 1, v51);
        }
        unint64_t v44 = v51;
        *(void *)(v51 + 16) = v43 + 1;
        uint64_t v45 = v54;
        v58((char *)(v44+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v43), v50, v18);
        sub_25A384BCC((uint64_t)v14, &qword_26A417E68);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v70, v18);
      }
      else
      {
LABEL_17:
        uint64_t v14 = v66;
        sub_25A384BCC((uint64_t)v66, &qword_26A417E68);
        (*v59)(v70, v18);
      }
    }
    sub_25A384BCC((uint64_t)v12, &qword_26A417E68);
LABEL_15:
    sub_25A408530((uint64_t)v66, (uint64_t)v9);
    uint64_t v36 = (uint64_t)v9;
LABEL_16:
    sub_25A384BCC(v36, &qword_26A417E68);
    goto LABEL_17;
  }
  long long v68 = 0u;
  long long v69 = 0u;
  unint64_t v46 = MEMORY[0x263F8EE78];
  uint64_t v47 = v52;
LABEL_29:
  sub_25A384BCC((uint64_t)&v68, &qword_26A416C28);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v17, 1, 1, v18);
LABEL_31:
  swift_bridgeObjectRelease();

  uint64_t result = sub_25A384BCC((uint64_t)v17, &qword_26A417E60);
  *uint64_t v47 = v46;
  return result;
}

uint64_t sub_25A407C14(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_25A50E320();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E60);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v43 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v44 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v49 = v5 + 16;
  uint64_t v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v47 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v48 = v5 + 48;
  uint64_t v51 = a1;
  uint64_t v52 = v5;
  unint64_t v46 = (void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  int64_t v15 = 0;
  unint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v45 = v10;
  while (1)
  {
    unint64_t v55 = v16;
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      uint64_t v19 = (v14 - 1) & v14;
      unint64_t v20 = v18 | (v15 << 6);
      goto LABEL_21;
    }
    BOOL v21 = __OFADD__(v15++, 1);
    if (v21) {
      goto LABEL_52;
    }
    if (v15 >= v44)
    {
LABEL_46:
      (*v50)(v10, 1, 1, v4);
      goto LABEL_47;
    }
    unint64_t v22 = *(void *)(v43 + 8 * v15);
    if (!v22) {
      break;
    }
LABEL_20:
    uint64_t v19 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v15 << 6);
LABEL_21:
    uint64_t v24 = v52;
    uint64_t v25 = *(void *)(v52 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(v10, *(void *)(v51 + 48) + v25 * v20, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v10, 1, v4) == 1)
    {
      swift_release();
      return v55;
    }
    (*v47)(v7, v10, v4);
    sub_25A407384(v7, &v56);
    if (v2)
    {
      (*v46)(v7, v4);
      unint64_t v16 = v55;
      swift_bridgeObjectRelease();
LABEL_47:
      swift_release();
      return v16;
    }
    unint64_t v53 = v19;
    int64_t v54 = v15;
    id v26 = v7;
    uint64_t v27 = v4;
    (*v46)(v7, v4);
    unint64_t v28 = v56;
    uint64_t v29 = *(void *)(v56 + 16);
    unint64_t v30 = v55;
    int64_t v31 = *(void *)(v55 + 16);
    int64_t v32 = v31 + v29;
    if (__OFADD__(v31, v29))
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v32 > *(void *)(v30 + 24) >> 1)
    {
      if (v31 <= v32) {
        int64_t v34 = v31 + v29;
      }
      else {
        int64_t v34 = v31;
      }
      unint64_t v30 = sub_25A38B420(isUniquelyReferenced_nonNull_native, v34, 1, v30);
    }
    uint64_t v4 = v27;
    if (*(void *)(v28 + 16))
    {
      uint64_t v35 = *(void *)(v30 + 16);
      if ((*(void *)(v30 + 24) >> 1) - v35 < v29) {
        goto LABEL_51;
      }
      unint64_t v36 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      unint64_t v37 = v30 + v36 + v35 * v25;
      if (v28 + v36 < v37 + v29 * v25 && v37 < v28 + v36 + v29 * v25) {
        goto LABEL_55;
      }
      unint64_t v17 = v30;
      swift_arrayInitWithCopy();
      if (v29)
      {
        uint64_t v39 = *(void *)(v30 + 16);
        BOOL v21 = __OFADD__(v39, v29);
        uint64_t v40 = v39 + v29;
        if (v21) {
          goto LABEL_53;
        }
        *(void *)(v30 + 16) = v40;
      }
    }
    else
    {
      unint64_t v17 = v30;
      if (v29) {
        goto LABEL_50;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v2 = 0;
    uint64_t v7 = v26;
    unint64_t v16 = v17;
    uint64_t v10 = v45;
    unint64_t v14 = v53;
    int64_t v15 = v54;
  }
  int64_t v23 = v15 + 1;
  if (v15 + 1 >= v44) {
    goto LABEL_46;
  }
  unint64_t v22 = *(void *)(v43 + 8 * v23);
  if (v22) {
    goto LABEL_19;
  }
  int64_t v23 = v15 + 2;
  if (v15 + 2 >= v44) {
    goto LABEL_46;
  }
  unint64_t v22 = *(void *)(v43 + 8 * v23);
  if (v22) {
    goto LABEL_19;
  }
  int64_t v23 = v15 + 3;
  if (v15 + 3 >= v44) {
    goto LABEL_46;
  }
  unint64_t v22 = *(void *)(v43 + 8 * v23);
  if (v22) {
    goto LABEL_19;
  }
  int64_t v23 = v15 + 4;
  if (v15 + 4 >= v44) {
    goto LABEL_46;
  }
  unint64_t v22 = *(void *)(v43 + 8 * v23);
  if (v22)
  {
LABEL_19:
    int64_t v15 = v23;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v15 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v15 >= v44) {
      goto LABEL_46;
    }
    unint64_t v22 = *(void *)(v43 + 8 * v15);
    ++v23;
    if (v22) {
      goto LABEL_20;
    }
  }
LABEL_54:
  __break(1u);
LABEL_55:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A408128()
{
  *(void *)(v1 + 16) = *v0;
  return MEMORY[0x270FA2498](sub_25A407300, 0, 0);
}

ValueMetadata *type metadata accessor for FileSystemProductsPathProvider()
{
  return &type metadata for FileSystemProductsPathProvider;
}

uint64_t sub_25A40815C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E78);
    uint64_t v3 = sub_25A50FD60();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      sub_25A5104E0();
      swift_bridgeObjectRetain();
      sub_25A50ED30();
      uint64_t result = sub_25A510530();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        unint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (uint64_t result = sub_25A510370(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            uint64_t result = sub_25A510370();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      BOOL v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *BOOL v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t sub_25A408300(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E70);
    uint64_t v3 = sub_25A50FD60();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      sub_25A50EC20();
      sub_25A5104E0();
      id v7 = v6;
      sub_25A50ED30();
      uint64_t v8 = sub_25A510530();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = sub_25A50EC20();
        uint64_t v17 = v16;
        if (v15 == sub_25A50EC20() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = sub_25A510370();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = sub_25A50EC20();
          uint64_t v24 = v23;
          if (v22 == sub_25A50EC20() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = sub_25A510370();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t sub_25A408530(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t withCaughtObjectiveCExceptions<A>(perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v36 = a4;
  void aBlock[6] = *(id *)MEMORY[0x263EF8340];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v7 = sub_25A510540();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v35 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  int64_t v34 = (char *)&v33 - v11;
  uint64_t v40 = sub_25A50FA40();
  uint64_t v12 = *(void *)(v40 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v40);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v38 = (uint64_t)&v33 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v39 = v8;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))((char *)&v33 - v18, 1, 1, v7);
  char v20 = self;
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a3;
  v21[3] = v19;
  uint64_t v41 = v19;
  v21[4] = a1;
  v21[5] = a2;
  uint64_t v22 = (void *)swift_allocObject();
  void v22[2] = sub_25A408C7C;
  void v22[3] = v21;
  aBlock[4] = sub_25A3FADB8;
  aBlock[5] = v22;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_25A408C98;
  void aBlock[3] = &block_descriptor_5;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v24 = objc_msgSend(v20, sel_perform_error_, v23, aBlock);
  _Block_release(v23);
  id v25 = aBlock[0];
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v19) {
    __break(1u);
  }
  if (v24)
  {
    uint64_t v26 = v40;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v41, v40);
    uint64_t v27 = v38;
    assertUnwrap<A>(_:file:line:column:function:)((uint64_t)v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/UVExceptionHandling.swift", 131, 2, 20, 36, (uint64_t)"withCaughtObjectiveCExceptions(perform:)", 40, v38, 2);
    uint64_t v28 = *(void (**)(char *, uint64_t))(v12 + 8);
    v28(v15, v26);
    uint64_t v29 = v39;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v27, 1, v7) == 1)
    {
      v28((char *)v27, v26);
      sub_25A408CD8();
      swift_allocError();
      swift_willThrow();
    }
    else
    {
      uint64_t v30 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v34, v27, v7);
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v35, v30, v7);
      uint64_t v31 = v37;
      sub_25A408D2C(v7, (uint64_t)aBlock, v36);
      if (!v31)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v7);
        v28(v41, v26);
        return swift_release();
      }
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v7);
    }
    v28(v41, v26);
  }
  else
  {
    sub_25A50E240();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v41, v40);
  }
  return swift_release();
}

uint64_t sub_25A408AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v8 = sub_25A510540();
  uint64_t v9 = sub_25A50FA40();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v14[-v11];
  uint64_t v15 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  sub_25A39CF80((void (*)(unsigned char *))sub_25A39F2F0, (uint64_t)&v14[-v11]);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v12, 0, 1, v8);
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v10 + 40))(a1, v12, v9);
}

uint64_t sub_25A408C6C()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A408C7C()
{
  return sub_25A408AE8(v0[3], v0[4], v0[5], v0[2]);
}

uint64_t sub_25A408C88()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A408C98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

unint64_t sub_25A408CD8()
{
  unint64_t result = qword_26A417E80;
  if (!qword_26A417E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417E80);
  }
  return result;
}

uint64_t sub_25A408D2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a3, v3);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 24) - 8) + 32))(a2, v3, *(void *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

unsigned char *storeEnumTagSinglePayload for UVExceptionHandlingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25A408E98);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UVExceptionHandlingError()
{
  return &type metadata for UVExceptionHandlingError;
}

unint64_t sub_25A408ED4()
{
  unint64_t result = qword_26A417E88;
  if (!qword_26A417E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417E88);
  }
  return result;
}

uint64_t static QueryResolutionsBuilder.buildExpression(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

unint64_t static QueryResolutionsBuilder.buildBlock(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_25A393124(MEMORY[0x263F8EE78]);
  uint64_t v5 = (void *)result;
  uint64_t v39 = *(void *)(a1 + 16);
  if (!v39)
  {
LABEL_30:
    *a2 = v5;
    return result;
  }
  uint64_t v38 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(v38 + 8 * v6);
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v52 = v5;
    uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    uint64_t v12 = v11 < 64 ? ~(-1 << v11) : -1;
    uint64_t v13 = v12 & *(void *)(v7 + 64);
    uint64_t v45 = v7;
    uint64_t v46 = v7 + 64;
    uint64_t v47 = v10;
    uint64_t v48 = 0;
    uint64_t v49 = v13;
    uint64_t v50 = sub_25A410B00;
    uint64_t v51 = 0;
    swift_bridgeObjectRetain();
    sub_25A409494((uint64_t)&v42);
    if (v44) {
      break;
    }
LABEL_3:
    ++v6;
    swift_bridgeObjectRelease();
    sub_25A39C550();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v6 == v39)
    {
      unint64_t result = swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  uint64_t v14 = v42;
  sub_25A3936C4(&v43, v41);
  unint64_t v16 = sub_25A4096EC(v14);
  uint64_t v17 = v5[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  char v20 = v15;
  if (v5[3] >= v19)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((v15 & 1) == 0) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_25A40EB8C();
      if ((v20 & 1) == 0) {
        goto LABEL_17;
      }
    }
    goto LABEL_15;
  }
  sub_25A40B22C(v19, isUniquelyReferenced_nonNull_native);
  unint64_t v21 = sub_25A4096EC(v14);
  if ((v20 & 1) != (v22 & 1)) {
    goto LABEL_33;
  }
  unint64_t v16 = v21;
  if (v20)
  {
LABEL_15:
    uint64_t v5 = v52;
    sub_25A3936C4(v41, v40);
    uint64_t v23 = (_OWORD *)(v5[7] + 32 * v16);
LABEL_19:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    sub_25A3936C4(v40, v23);
LABEL_22:
    while (1)
    {
      sub_25A409494((uint64_t)&v42);
      if (!v44) {
        goto LABEL_3;
      }
      uint64_t v29 = v42;
      sub_25A3936C4(&v43, v41);
      unint64_t v31 = sub_25A4096EC(v29);
      uint64_t v32 = v5[2];
      BOOL v33 = (v30 & 1) == 0;
      uint64_t v34 = v32 + v33;
      if (__OFADD__(v32, v33)) {
        goto LABEL_31;
      }
      char v35 = v30;
      if (v5[3] < v34)
      {
        sub_25A40B22C(v34, 1);
        unint64_t v36 = sub_25A4096EC(v29);
        if ((v35 & 1) != (v37 & 1)) {
          goto LABEL_33;
        }
        unint64_t v31 = v36;
      }
      if (v35)
      {
        uint64_t v5 = v52;
        sub_25A3936C4(v41, v40);
        uint64_t v23 = (_OWORD *)(v5[7] + 32 * v31);
        goto LABEL_19;
      }
      uint64_t v5 = v52;
      v52[(v31 >> 6) + 8] |= 1 << v31;
      *(void *)(v5[6] + 8 * v31) = v29;
      sub_25A3936C4(v41, (_OWORD *)(v5[7] + 32 * v31));
      uint64_t v27 = v5[2];
      BOOL v25 = __OFADD__(v27, 1);
      uint64_t v28 = v27 + 1;
      if (v25) {
        goto LABEL_32;
      }
      uint64_t v5[2] = v28;
    }
  }
LABEL_17:
  uint64_t v5 = v52;
  v52[(v16 >> 6) + 8] |= 1 << v16;
  *(void *)(v5[6] + 8 * v16) = v14;
  sub_25A3936C4(v41, (_OWORD *)(v5[7] + 32 * v16));
  uint64_t v24 = v5[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (!v25)
  {
    uint64_t v5[2] = v26;
    goto LABEL_22;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  unint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t sub_25A4092A8@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_25A3937CC(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  __uint64_t v1[2] = v6;
  v1[3] = v7;
  _OWORD v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_25A39F4F8((uint64_t)&v23, (uint64_t)v22, &qword_26A417720);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_25A384BCC((uint64_t)v21, &qword_26A417ED0);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_25A409494@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = *(void *)(*(void *)(v3 + 48) + 8 * v10);
    sub_25A3937CC(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v23 + 8);
    *(void *)&v23[0] = v11;
    goto LABEL_23;
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    unint64_t v14 = *(void *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v10 = __clz(__rbit64(v14)) + (v12 << 6);
      int64_t v7 = v12;
      goto LABEL_3;
    }
    int64_t v15 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      unint64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        int64_t v12 = v15;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        unint64_t v14 = *(void *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          int64_t v12 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v15 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          unint64_t v14 = *(void *)(v4 + 8 * v15);
          if (v14) {
            goto LABEL_10;
          }
          int64_t v12 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            unint64_t v14 = *(void *)(v4 + 8 * v12);
            if (v14) {
              goto LABEL_7;
            }
            int64_t v7 = v13 - 1;
            int64_t v16 = v5 + 6;
            while (v13 != v16)
            {
              unint64_t v14 = *(void *)(v4 + 8 * v16++);
              if (v14)
              {
                int64_t v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  __uint64_t v1[2] = v6;
  v1[3] = v7;
  _OWORD v1[4] = v9;
  int64_t v17 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_25A39F4F8((uint64_t)v23, (uint64_t)v21, &qword_26A417F08);
  if (v22)
  {
    v19[0] = v21[0];
    v19[1] = v21[1];
    uint64_t v20 = v22;
    v17(v19);
    return sub_25A384BCC((uint64_t)v19, &qword_26A417F10);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

unint64_t sub_25A409670(uint64_t a1, uint64_t a2)
{
  sub_25A5104E0();
  sub_25A50ED30();
  uint64_t v4 = sub_25A510530();

  return sub_25A409AFC(a1, a2, v4);
}

unint64_t sub_25A4096EC(uint64_t a1)
{
  uint64_t v2 = sub_25A5104D0();
  return sub_25A409FBC(a1, v2);
}

unint64_t sub_25A409728(double a1)
{
  sub_25A5104E0();
  sub_25A510520();
  uint64_t v2 = sub_25A510530();

  return sub_25A409BE0(v2, a1);
}

unint64_t sub_25A409798(uint64_t a1)
{
  uint64_t v2 = sub_25A50FCD0();

  return sub_25A409C80(a1, v2);
}

unint64_t sub_25A4097DC(unsigned __int8 a1)
{
  sub_25A5104E0();
  sub_25A5104F0();
  uint64_t v2 = sub_25A510530();

  return sub_25A409D48(a1, v2);
}

unint64_t sub_25A409848(uint64_t a1)
{
  sub_25A5104E0();
  sub_25A5104F0();
  uint64_t v2 = sub_25A510530();

  return sub_25A409DE8(a1, v2);
}

unint64_t sub_25A4098B4(uint64_t a1)
{
  sub_25A5104E0();
  sub_25A510520();
  uint64_t v2 = sub_25A510530();
  return sub_25A409DE8(a1, v2);
}

unint64_t sub_25A40991C(uint64_t a1)
{
  sub_25A5104E0();
  sub_25A50E4C0();
  sub_25A410E6C();
  sub_25A50EA20();
  uint64_t v2 = sub_25A510530();

  return sub_25A409E84(a1, v2);
}

unint64_t sub_25A4099A0(uint64_t a1, uint64_t a2)
{
  sub_25A5104E0();
  sub_25A5104F0();
  sub_25A5104F0();
  uint64_t v4 = sub_25A510530();

  return sub_25A40A058(a1, a2, v4);
}

unint64_t sub_25A409A20(uint64_t a1)
{
  sub_25A50EC20();
  sub_25A5104E0();
  sub_25A50ED30();
  uint64_t v2 = sub_25A510530();
  swift_bridgeObjectRelease();

  return sub_25A40A0D4(a1, v2);
}

unint64_t sub_25A409AB4(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x26113E4C0](*(void *)(v1 + 40), a1, 4);

  return sub_25A40A24C(a1, v3);
}

unint64_t sub_25A409AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_25A510370() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        int64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_25A510370() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_25A409BE0(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (a2 - *(double *)(v6 + 8 * result) != 0.0)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (a2 - *(double *)(v6 + 8 * result) == 0.0) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_25A409C80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_25A39C794(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x26113DCE0](v9, a1);
      sub_25A39C7F0((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_25A409D48(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_25A409DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_25A409E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrashReport.ID(0) - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v11 = *(void *)(v5 + 72);
    do
    {
      sub_25A401134(*(void *)(v2 + 48) + v11 * v9, (uint64_t)v7);
      char v12 = _s20PreviewsFoundationOS11CrashReportV2IDV2eeoiySbAE_AEtFZ_0();
      sub_25A410EC4((uint64_t)v7);
      if (v12) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_25A409FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_25A40A058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      uint64_t v8 = (uint64_t *)(*(void *)(v3 + 48) + 16 * result);
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      if (v10 == a1 && v9 == a2) {
        break;
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_25A40A0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_25A50EC20();
    uint64_t v8 = v7;
    if (v6 == sub_25A50EC20() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_25A510370();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_25A50EC20();
          uint64_t v15 = v14;
          if (v13 == sub_25A50EC20() && v15 == v16) {
            break;
          }
          char v18 = sub_25A510370();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_25A40A24C(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_25A40A2E8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B18);
  char v40 = a2;
  uint64_t v6 = sub_25A510120();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 24 * v21;
      uint64_t v34 = *(void *)v32;
      unint64_t v33 = *(void *)(v32 + 8);
      char v35 = *(unsigned char *)(v32 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_25A39373C(v34, v33, v35);
      }
      sub_25A5104E0();
      sub_25A50ED30();
      uint64_t result = sub_25A510530();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      char v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *char v18 = v30;
      v18[1] = v31;
      uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
      *(void *)uint64_t v19 = v34;
      *(void *)(v19 + 8) = v33;
      *(unsigned char *)(v19 + 16) = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40A614(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B08);
  uint64_t v6 = sub_25A510120();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_25A3936C4(v24, v35);
      }
      else
      {
        sub_25A3937CC((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_25A5104E0();
      sub_25A50ED30();
      uint64_t result = sub_25A510530();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_25A3936C4(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40A914(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EC0);
  char v37 = a2;
  uint64_t v6 = sub_25A510120();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      sub_25A3C85D8(v25, (uint64_t)v38);
    }
    else
    {
      sub_25A3990F8((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    sub_25A5104E0();
    sub_25A50ED30();
    uint64_t result = sub_25A510530();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_25A3C85D8(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40AC3C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EC8);
  char v36 = a2;
  uint64_t v6 = sub_25A510120();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    char v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_25A5104E0();
    sub_25A50ED30();
    uint64_t result = sub_25A510530();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40AF54(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417F00);
  uint64_t result = sub_25A510120();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v29 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v29[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v29 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      long long v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      sub_25A5104E0();
      sub_25A510520();
      uint64_t result = sub_25A510530();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40B22C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B28);
  uint64_t result = sub_25A510120();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_34;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_34;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_41;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v9 = -1 << v30;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v13) {
                  goto LABEL_34;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      int64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2) {
        sub_25A3936C4(v22, v32);
      }
      else {
        sub_25A3937CC((uint64_t)v22, (uint64_t)v32);
      }
      uint64_t result = sub_25A5104D0();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      uint64_t result = (uint64_t)sub_25A3936C4(v32, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40B4F0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B20);
  char v42 = a2;
  uint64_t v6 = sub_25A510120();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_25A5104E0();
    sub_25A50ED30();
    uint64_t result = sub_25A510530();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    int64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40B818(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E98);
  uint64_t result = sub_25A510120();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      uint64_t v21 = *(void *)(v5 + 56) + 32 * v16;
      if (a2) {
        sub_25A3CE6F0(v21, (uint64_t)v31);
      }
      else {
        sub_25A3CE764(v21, (uint64_t)v31);
      }
      sub_25A5104E0();
      sub_25A510520();
      uint64_t result = sub_25A510530();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      uint64_t result = sub_25A3CE6F0((uint64_t)v31, *(void *)(v7 + 56) + 32 * v14);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40BAF0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EF8);
  uint64_t result = sub_25A510120();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v32 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v32[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v32 = -1 << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      sub_25A5104E0();
      sub_25A510520();
      uint64_t result = sub_25A510530();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40BDCC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AE0);
  uint64_t v6 = sub_25A510120();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_25A3936C4((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_25A39C794(v25, (uint64_t)&v38);
      sub_25A3937CC(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = sub_25A50FCD0();
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_25A3936C4(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40C0E4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EE8);
  uint64_t result = sub_25A510120();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      char v26 = *(unsigned char *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      sub_25A5104E0();
      sub_25A5104F0();
      uint64_t result = sub_25A510530();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40C3B8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v49 = sub_25A50E320();
  uint64_t v5 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EE0);
  int v47 = a2;
  uint64_t v8 = sub_25A510120();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  char v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  unint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    unint64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    uint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    sub_25A5104E0();
    sub_25A50ED30();
    uint64_t result = sub_25A510530();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    int64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *int64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  uint64_t v3 = v42;
  unint64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_25A40C7A0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417B00);
  uint64_t v42 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417ED8);
  int v43 = a2;
  uint64_t v9 = sub_25A510120();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    unint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      sub_25A39F4F8(v30, (uint64_t)v7, &qword_26A417B00);
    }
    else
    {
      sub_25A410F20(v30, (uint64_t)v7);
      swift_bridgeObjectRetain();
    }
    sub_25A5104E0();
    sub_25A50ED30();
    uint64_t result = sub_25A510530();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    int64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *int64_t v19 = v27;
    v19[1] = v28;
    uint64_t result = sub_25A39F4F8((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, &qword_26A417B00);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_25A40CB54(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AD8);
  uint64_t result = sub_25A510120();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unint64_t v32 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v32[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v32 = -1 << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      sub_25A5104E0();
      sub_25A5104F0();
      uint64_t result = sub_25A510530();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40CE30(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AD0);
  uint64_t result = sub_25A510120();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v32 = a2;
    int64_t v8 = 0;
    unint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v18 >= v12) {
          goto LABEL_31;
        }
        unint64_t v19 = v33[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v19 = v33[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v19 = v33[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = 8 * v17;
      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + v21);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + v21);
      sub_25A5104E0();
      sub_25A510520();
      uint64_t result = sub_25A510530();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = 8 * v14;
      *(void *)(*(void *)(v7 + 48) + v15) = v22;
      *(void *)(*(void *)(v7 + 56) + v15) = v23;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40D100(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CrashReport.ID(0);
  uint64_t v39 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EB0);
  int v40 = a2;
  uint64_t v9 = sub_25A510120();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v38 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  BOOL v36 = v2;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37) {
      break;
    }
    uint64_t v22 = v38;
    unint64_t v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v23 = v38[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v36;
          if ((v40 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v37) {
              goto LABEL_34;
            }
            unint64_t v23 = v38[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v39 + 72);
    uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if (v40)
    {
      sub_25A401198(v26, (uint64_t)v7);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
    }
    else
    {
      sub_25A401134(v26, (uint64_t)v7);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
      swift_retain();
    }
    sub_25A5104E0();
    sub_25A50E4C0();
    sub_25A410E6C();
    sub_25A50EA20();
    uint64_t result = sub_25A510530();
    uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = sub_25A401198((uint64_t)v7, *(void *)(v10 + 48) + v25 * v18);
    *(void *)(*(void *)(v10 + 56) + 8 * v18) = v27;
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  uint64_t v22 = v38;
  if ((v40 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v35;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_25A40D4BC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EA0);
  uint64_t result = sub_25A510120();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  uint64_t *v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = sub_25A5104D0();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25A40D774(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EA8);
  char v37 = a2;
  uint64_t result = sub_25A510120();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    BOOL v36 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v21 >= v35) {
          goto LABEL_33;
        }
        unint64_t v22 = v36[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v22 = v36[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
              if (v34 >= 64) {
                bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v36 = -1 << v34;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v36[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v22 = v36[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v11 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      long long v28 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20);
      uint64_t v29 = *(void *)(v5 + 56) + 80 * v20;
      uint64_t v30 = *(void *)(v29 + 16);
      long long v40 = *(_OWORD *)(v29 + 24);
      long long v41 = v28;
      char v31 = *(unsigned char *)(v29 + 40);
      uint64_t v32 = *(void *)(v29 + 48);
      long long v38 = *(_OWORD *)v29;
      long long v39 = *(_OWORD *)(v29 + 56);
      char v33 = *(unsigned char *)(v29 + 72);
      if ((v37 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_25A5104E0();
      sub_25A5104F0();
      sub_25A5104F0();
      uint64_t result = sub_25A510530();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        long long v17 = v41;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v13) >> 6;
        long long v17 = v41;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v15 == v25;
          if (v15 == v25) {
            unint64_t v15 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        unint64_t v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_OWORD *)(*(void *)(v7 + 48) + 16 * v16) = v17;
      uint64_t v18 = *(void *)(v7 + 56) + 80 * v16;
      *(_OWORD *)uint64_t v18 = v38;
      *(void *)(v18 + 16) = v30;
      *(_OWORD *)(v18 + 24) = v40;
      *(unsigned char *)(v18 + 40) = v31;
      *(void *)(v18 + 48) = v32;
      *(_OWORD *)(v18 + 56) = v39;
      *(unsigned char *)(v18 + 72) = v33;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}