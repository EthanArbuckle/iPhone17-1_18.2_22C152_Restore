void sub_25A4B3F5C(id *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;

  v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x39) {
    v2 = 57;
  }
  v3 = *((unsigned __int8 *)a1 + v2);
  if (v3 <= 2 && v3 != 2)
  {
    if (v3 == 1) {

    }
    else {
      (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
    }
  }
}

char *sub_25A4B3FE4(char *__dst, _OWORD *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x39uLL) {
    uint64_t v4 = 57;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = *((unsigned __int8 *)a2 + v4);
  if (v5 > 2)
  {
    memcpy(__dst, a2, v4 + 1);
  }
  else if (v5 == 2)
  {
    long long v8 = a2[1];
    *(_OWORD *)__dst = *a2;
    *((_OWORD *)__dst + 1) = v8;
    *((_OWORD *)__dst + 2) = a2[2];
    *(_OWORD *)(__dst + 41) = *(_OWORD *)((char *)a2 + 41);
    __dst[v4] = 2;
  }
  else if (v5 == 1)
  {
    uint64_t v6 = *(void *)a2;
    id v7 = *(id *)a2;
    *(void *)__dst = v6;
    __dst[v4] = 1;
  }
  else
  {
    (*(void (**)(char *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(__dst);
    __dst[v4] = 0;
  }
  return __dst;
}

long long *sub_25A4B40E4(long long *__dst, long long *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(void *)(v6 + 64) <= 0x39uLL) {
    uint64_t v7 = 57;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  unsigned int v8 = *((unsigned __int8 *)__dst + v7);
  unsigned int v9 = *((unsigned __int8 *)__src + v7);
  if (v8 > 2)
  {
    if (v9 <= 2)
    {
      if (v9 == 2)
      {
        long long v10 = *__src;
        long long v11 = __src[1];
        long long v12 = __src[2];
        *(long long *)((char *)__dst + 41) = *(long long *)((char *)__src + 41);
        __dst[1] = v11;
        __dst[2] = v12;
        *__dst = v10;
        LOBYTE(v9) = 2;
LABEL_35:
        *((unsigned char *)__dst + v7) = v9;
        return __dst;
      }
      goto LABEL_31;
    }
LABEL_17:
    memcpy(__dst, __src, v7 + 1);
    return __dst;
  }
  if (v9 > 2)
  {
    if (v8 != 2)
    {
      if (v8 == 1) {

      }
      else {
        (*(void (**)(long long *, uint64_t))(v6 + 8))(__dst, v5);
      }
    }
    goto LABEL_17;
  }
  if (__dst == __src) {
    return __dst;
  }
  if (*((unsigned char *)__dst + v7))
  {
    if (v8 != 1) {
      goto LABEL_30;
    }
  }
  else
  {
    (*(void (**)(long long *, uint64_t))(v6 + 8))(__dst, v5);
  }
  unsigned int v9 = *((unsigned __int8 *)__src + v7);
  unsigned int v13 = v9 - 3;
  if (v9 >= 3)
  {
    if (v7 <= 3) {
      uint64_t v14 = v7;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *(unsigned __int8 *)__src;
        goto LABEL_28;
      case 2:
        int v15 = *(unsigned __int16 *)__src;
        goto LABEL_28;
      case 3:
        int v15 = *(unsigned __int16 *)__src | (*((unsigned __int8 *)__src + 2) << 16);
        goto LABEL_28;
      case 4:
        int v15 = *(_DWORD *)__src;
LABEL_28:
        int v16 = (v15 | (v13 << (8 * v7))) + 3;
        unsigned int v9 = v15 + 3;
        if (v7 < 4) {
          unsigned int v9 = v16;
        }
        break;
      default:
        break;
    }
  }
LABEL_30:
  if (v9 == 2)
  {
    long long v19 = *__src;
    long long v20 = __src[1];
    long long v21 = __src[2];
    *(long long *)((char *)__dst + 41) = *(long long *)((char *)__src + 41);
    __dst[1] = v20;
    __dst[2] = v21;
    *__dst = v19;
    goto LABEL_35;
  }
LABEL_31:
  if (v9 == 1)
  {
    v17 = *(void **)__src;
    id v18 = v17;
    *(void *)__dst = v17;
    LOBYTE(v9) = 1;
    goto LABEL_35;
  }
  (*(void (**)(long long *, long long *, uint64_t))(v6 + 16))(__dst, __src, v5);
  *((unsigned char *)__dst + v7) = 0;
  return __dst;
}

char *sub_25A4B4330(char *__dst, _OWORD *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x39uLL) {
    uint64_t v4 = 57;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = *((unsigned __int8 *)a2 + v4);
  if (v5 > 2)
  {
    memcpy(__dst, a2, v4 + 1);
  }
  else if (v5 == 2)
  {
    long long v6 = a2[1];
    *(_OWORD *)__dst = *a2;
    *((_OWORD *)__dst + 1) = v6;
    *((_OWORD *)__dst + 2) = a2[2];
    *(_OWORD *)(__dst + 41) = *(_OWORD *)((char *)a2 + 41);
    __dst[v4] = 2;
  }
  else if (v5 == 1)
  {
    *(void *)__dst = *(void *)a2;
    __dst[v4] = 1;
  }
  else
  {
    (*(void (**)(char *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(__dst);
    __dst[v4] = 0;
  }
  return __dst;
}

_OWORD *sub_25A4B4420(_OWORD *__dst, _OWORD *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(void *)(v6 + 64) <= 0x39uLL) {
    uint64_t v7 = 57;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  unsigned int v8 = *((unsigned __int8 *)__dst + v7);
  unsigned int v9 = *((unsigned __int8 *)__src + v7);
  if (v8 > 2)
  {
    if (v9 <= 2)
    {
      if (v9 == 2)
      {
        long long v10 = __src[1];
        *__dst = *__src;
        __dst[1] = v10;
        __dst[2] = __src[2];
        *(_OWORD *)((char *)__dst + 41) = *(_OWORD *)((char *)__src + 41);
        LOBYTE(v9) = 2;
LABEL_35:
        *((unsigned char *)__dst + v7) = v9;
        return __dst;
      }
      goto LABEL_31;
    }
LABEL_17:
    memcpy(__dst, __src, v7 + 1);
    return __dst;
  }
  if (v9 > 2)
  {
    if (v8 != 2)
    {
      if (v8 == 1) {

      }
      else {
        (*(void (**)(_OWORD *, uint64_t))(v6 + 8))(__dst, v5);
      }
    }
    goto LABEL_17;
  }
  if (__dst == __src) {
    return __dst;
  }
  if (*((unsigned char *)__dst + v7))
  {
    if (v8 != 1) {
      goto LABEL_30;
    }
  }
  else
  {
    (*(void (**)(_OWORD *, uint64_t))(v6 + 8))(__dst, v5);
  }
  unsigned int v9 = *((unsigned __int8 *)__src + v7);
  unsigned int v11 = v9 - 3;
  if (v9 >= 3)
  {
    if (v7 <= 3) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *(unsigned __int8 *)__src;
        goto LABEL_28;
      case 2:
        int v13 = *(unsigned __int16 *)__src;
        goto LABEL_28;
      case 3:
        int v13 = *(unsigned __int16 *)__src | (*((unsigned __int8 *)__src + 2) << 16);
        goto LABEL_28;
      case 4:
        int v13 = *(_DWORD *)__src;
LABEL_28:
        int v14 = (v13 | (v11 << (8 * v7))) + 3;
        unsigned int v9 = v13 + 3;
        if (v7 < 4) {
          unsigned int v9 = v14;
        }
        break;
      default:
        break;
    }
  }
LABEL_30:
  if (v9 == 2)
  {
    long long v15 = __src[1];
    *__dst = *__src;
    __dst[1] = v15;
    __dst[2] = __src[2];
    *(_OWORD *)((char *)__dst + 41) = *(_OWORD *)((char *)__src + 41);
    goto LABEL_35;
  }
LABEL_31:
  if (v9 == 1)
  {
    *(void *)__dst = *(void *)__src;
    LOBYTE(v9) = 1;
    goto LABEL_35;
  }
  (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(__dst, __src, v5);
  *((unsigned char *)__dst + v7) = 0;
  return __dst;
}

uint64_t sub_25A4B4664(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 57;
  if (*(void *)(v3 + 64) > 0x39uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) > 3) {
    goto LABEL_6;
  }
  unsigned int v9 = ((a2 + ~(-1 << v6) - 252) >> v6) + 1;
  if (HIWORD(v9))
  {
    int v7 = *(_DWORD *)((char *)a1 + v5);
    if (v7) {
      goto LABEL_14;
    }
LABEL_22:
    unsigned int v11 = *((unsigned __int8 *)a1 + v4);
    if (v11 >= 3) {
      unsigned int v12 = (v11 ^ 0xFF) + 1;
    }
    else {
      unsigned int v12 = 0;
    }
    if (v12 >= 2) {
      return v12 - 1;
    }
    else {
      return 0;
    }
  }
  if (v9 > 0xFF)
  {
    int v7 = *(unsigned __int16 *)((char *)a1 + v5);
    if (*(unsigned __int16 *)((char *)a1 + v5)) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
  if (v9 < 2) {
    goto LABEL_22;
  }
LABEL_6:
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 253;
}

void sub_25A4B47A4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x39) {
    unint64_t v5 = 57;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFD)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 252) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFC)
  {
    unsigned int v8 = a2 - 253;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x25A4B496CLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = ~(_BYTE)a2;
        break;
    }
  }
}

uint64_t sub_25A4B4994(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x39) {
    unint64_t v2 = 57;
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + v2);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void sub_25A4B49CC(_WORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v4 <= 0x39) {
    unint64_t v4 = 57;
  }
  if (a2 > 0xFD)
  {
    size_t v5 = (v4 + 1);
    if (v5 <= 3) {
      int v6 = ~(-1 << (8 * v5));
    }
    else {
      int v6 = -1;
    }
    if (v5)
    {
      int v7 = v6 & (a2 - 254);
      if (v5 <= 3) {
        int v8 = v5;
      }
      else {
        int v8 = 4;
      }
      bzero(a1, v5);
      switch(v8)
      {
        case 2:
          *a1 = v7;
          break;
        case 3:
          *a1 = v7;
          *((unsigned char *)a1 + 2) = BYTE2(v7);
          break;
        case 4:
          *(_DWORD *)a1 = v7;
          break;
        default:
          *(unsigned char *)a1 = v7;
          break;
      }
    }
  }
  else if (a2)
  {
    *((unsigned char *)a1 + v4) = -(char)a2;
  }
}

uint64_t type metadata accessor for FutureState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Collection.pluralize(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (sub_25A50F5F0() == 1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    if (a4) {
      return a3;
    }
    else {
      sub_25A50EDA0();
    }
  }
  return a1;
}

uint64_t Int.pluralize(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a1;
  if (a5 == 1)
  {
    swift_bridgeObjectRetain();
  }
  else if (a4)
  {
    swift_bridgeObjectRetain();
    return a3;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    return a1;
  }
  return v5;
}

uint64_t Collection.countDescription(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50F5F0();

  return sub_25A4B4C6C(a1, a2, v4);
}

uint64_t Int.countDescription(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25A4B4C6C(a1, a2, a5);
}

uint64_t sub_25A4B4C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  if (a3 != 1) {
    sub_25A50EDA0();
  }
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t getEnumTagSinglePayload for PluralizationStrategy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PluralizationStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void *sub_25A4B4DC8(void *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PluralizationStrategy()
{
  return &type metadata for PluralizationStrategy;
}

uint64_t Issue.Identifier.rawValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Issue.Identifier.rawValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Issue.Identifier.rawValue.modify())()
{
  return nullsub_1;
}

PreviewsFoundationOS::Issue::Identifier __swiftcall Issue.Identifier.init(rawValue:)(PreviewsFoundationOS::Issue::Identifier rawValue)
{
  *uint64_t v1 = rawValue;
  return rawValue;
}

uint64_t sub_25A4B4E88()
{
  return sub_25A510530();
}

uint64_t sub_25A4B4EE4()
{
  swift_bridgeObjectRetain();
  sub_25A50ED30();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A4B4F3C()
{
  return sub_25A510530();
}

uint64_t sub_25A4B4F94(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_25A510370();
  }
}

BOOL static Issue.Severity.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Issue.Severity.hash(into:)()
{
  return sub_25A5104F0();
}

uint64_t Issue.Severity.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t Issue.identifier.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Issue.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Issue() + 20);
  uint64_t v4 = sub_25A50E470();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for Issue()
{
  uint64_t result = qword_26A41AC68;
  if (!qword_26A41AC68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Issue.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Issue() + 24);
  *(void *)a1 = *(void *)v3;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v3 + 24);

  return swift_bridgeObjectRetain();
}

uint64_t Issue.description.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Issue() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Issue.severity.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for Issue();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t Issue.init(identifier:timestamp:location:severity:description:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v11 = a1[1];
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v15 = a3[2];
  uint64_t v14 = a3[3];
  uint64_t v23 = a3[4];
  char v24 = *a4;
  if (v11)
  {
    uint64_t v16 = *a1;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = a5;
    uint64_t v11 = a6;
  }
  *a7 = v16;
  a7[1] = v11;
  v17 = (int *)type metadata accessor for Issue();
  id v18 = (char *)a7 + v17[5];
  uint64_t v19 = sub_25A50E470();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a2, v19);
  long long v21 = (void *)((char *)a7 + v17[6]);
  *long long v21 = v12;
  v21[1] = v13;
  v21[2] = v15;
  v21[3] = v14;
  v21[4] = v23;
  v22 = (void *)((char *)a7 + v17[7]);
  void *v22 = a5;
  v22[1] = a6;
  *((unsigned char *)a7 + v17[8]) = v24;
  return result;
}

unint64_t sub_25A4B5300()
{
  unint64_t result = qword_26A41AC58;
  if (!qword_26A41AC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41AC58);
  }
  return result;
}

unint64_t sub_25A4B5358()
{
  unint64_t result = qword_26A41AC60;
  if (!qword_26A41AC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41AC60);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Issue(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    int v9 = (char *)a1 + v8;
    unsigned int v10 = (char *)a2 + v8;
    uint64_t v11 = sub_25A50E470();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v4 + v13;
    uint64_t v16 = (char *)a2 + v13;
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    *((_OWORD *)v15 + 1) = *((_OWORD *)v16 + 1);
    *((void *)v15 + 4) = *((void *)v16 + 4);
    id v18 = (void *)((char *)v4 + v14);
    uint64_t v19 = (void *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *id v18 = *v19;
    v18[1] = v20;
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Issue(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Issue(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  int v9 = (char *)a2 + v7;
  uint64_t v10 = sub_25A50E470();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
  *((void *)v14 + 4) = *((void *)v15 + 4);
  uint64_t v17 = (void *)((char *)a1 + v13);
  id v18 = (void *)((char *)a2 + v13);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Issue(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_25A50E470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *(void *)((char *)a2 + v10);
  v11[1] = *(void *)((char *)a2 + v10 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[2] = v12[2];
  v11[3] = v12[3];
  v11[4] = v12[4];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

_OWORD *initializeWithTake for Issue(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_25A50E470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  long long v14 = *(_OWORD *)v13;
  long long v15 = *((_OWORD *)v13 + 1);
  *((void *)v12 + 4) = *((void *)v13 + 4);
  *(_OWORD *)uint64_t v12 = v14;
  *((_OWORD *)v12 + 1) = v15;
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

void *assignWithTake for Issue(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_25A50E470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)((char *)a2 + v11 + 8);
  *(void *)uint64_t v12 = *(void *)((char *)a2 + v11);
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
  *((void *)v12 + 4) = *((void *)v13 + 4);
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Issue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A4B595C);
}

uint64_t sub_25A4B595C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_25A50E470();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Issue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A4B5A20);
}

uint64_t sub_25A4B5A20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_25A50E470();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_25A4B5AC8()
{
  uint64_t result = sub_25A50E470();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Issue.Identifier()
{
  return &type metadata for Issue.Identifier;
}

uint64_t initializeWithCopy for Issue.Location(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Issue.Location(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for Issue.Location(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Issue.Location(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Issue.Location(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

double sub_25A4B5D20(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Issue.Location()
{
  return &type metadata for Issue.Location;
}

unsigned char *storeEnumTagSinglePayload for Issue.Severity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A4B5E28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Issue.Severity()
{
  return &type metadata for Issue.Severity;
}

uint64_t FixedStack.push(_:)(uint64_t a1)
{
  return sub_25A4B6134(a1) & 1;
}

void *FixedStack.init(capacity:)@<X0>(void *a1@<X8>)
{
  type metadata accessor for FixedStack.Implementation();
  uint64_t v2 = sub_25A50FA70();
  uint64_t v4 = v3;
  double result = (void *)swift_allocObject();
  result[2] = v2;
  result[3] = v4;
  result[4] = 0;
  *a1 = result;
  return result;
}

uint64_t FixedStack.pop()@<X0>(uint64_t a1@<X8>)
{
  return sub_25A4B6274(a1);
}

uint64_t FixedStack.endIndex.getter()
{
  return *(void *)(*(void *)v0 + 32);
}

uint64_t FixedStack.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A4B6400(a1, a2);
}

void *sub_25A4B5F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

uint64_t sub_25A4B5FA8()
{
  uint64_t result = sub_25A50FA60();
  if (result)
  {
    sub_25A50FA20();
    sub_25A50FA50();
    return v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_25A4B6020()
{
  uint64_t v0 = sub_25A4B5FA8();

  return MEMORY[0x270FA0228](v0, 40, 7);
}

void *sub_25A4B6050()
{
  uint64_t v1 = sub_25A50FA70();
  uint64_t v3 = v2;
  uint64_t result = (void *)sub_25A50FA60();
  if (result)
  {
    uint64_t result = (void *)sub_25A50FA60();
    if (result)
    {
      sub_25A50FA30();
      uint64_t v5 = *(void *)(v0 + 32);
      uint64_t result = (void *)swift_allocObject();
      result[2] = v1;
      result[3] = v3;
      result[4] = v5;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_25A4B6134(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v6 = (char *)&v14 - v5;
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  if (v8 >= v7) {
    return v8 < v7;
  }
  uint64_t result = sub_25A50FA60();
  if (result)
  {
    uint64_t v10 = result + *(void *)(v4 + 72) * v1[4];
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, v3);
    uint64_t v11 = v1[4];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (!v12)
    {
      v1[4] = v13;
      return v8 < v7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_25A4B6274@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[4] < 1)
  {
    uint64_t v13 = *(void *)(v3 + 80);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v11 = a1;
    uint64_t v12 = 1;
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t result = sub_25A50FA60();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v6 = v1[4];
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v14 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a1, result + *(void *)(v14 + 72) * (v6 - 1), v4);
  uint64_t result = sub_25A50FA20();
  uint64_t v7 = v1[4];
  BOOL v8 = __OFSUB__(v7, 1);
  uint64_t v9 = v7 - 1;
  if (v8)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v1[4] = v9;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  uint64_t v11 = a1;
  uint64_t v12 = 0;
  uint64_t v13 = v4;
LABEL_7:

  return v10(v11, v12, 1, v13);
}

uint64_t sub_25A4B63F8()
{
  return *(void *)(v0 + 32);
}

uint64_t sub_25A4B6400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  if (v3[4] <= a1) {
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(*v3 + 80);
  uint64_t v7 = sub_25A50FA60();
  if (!v7)
  {
    __break(1u);
LABEL_7:
    sub_25A50FDB0();
    sub_25A50EDA0();
    sub_25A5102B0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    sub_25A5102B0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    sub_25A5102B0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    uint64_t result = sub_25A510060();
    __break(1u);
    return result;
  }
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v7 + *(void *)(v8 + 72) * a1;

  return v9(a2, v10, v6);
}

uint64_t sub_25A4B6618()
{
  swift_getWitnessTable();

  return sub_25A50F580();
}

uint64_t sub_25A4B669C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_25A4B63F8();
  *a1 = result;
  return result;
}

uint64_t (*sub_25A4B66C8(void *a1, uint64_t *a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_25A4B672C(v4, *a2);
  return sub_25A3A9E54;
}

uint64_t (*sub_25A4B672C(void *a1, uint64_t a2))()
{
  uint64_t v5 = *(void *)(*(void *)v2 + 80);
  *a1 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  a1[1] = v6;
  uint64_t v7 = malloc(*(void *)(v6 + 64));
  a1[2] = v7;
  sub_25A4B6400(a2, (uint64_t)v7);
  return sub_25A3A9F28;
}

uint64_t sub_25A4B67E4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E070](a1, WitnessTable, v3);
}

uint64_t sub_25A4B6850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A4B7884(a1, a2, a3, a4, MEMORY[0x263F8D870], MEMORY[0x263F8D170]);
}

uint64_t sub_25A4B6890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A4B7884(a1, a2, a3, a4, MEMORY[0x263F8D1A0], MEMORY[0x263F8D180]);
}

uint64_t sub_25A4B68D0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_25A4B6924(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_25A4B6978()
{
  type metadata accessor for FixedStack.Implementation();
  uint64_t result = sub_25A510300();
  if ((result & 1) == 0)
  {
    uint64_t v2 = sub_25A4B6050();
    uint64_t result = swift_release();
    void *v0 = v2;
  }
  return result;
}

uint64_t type metadata accessor for FixedStack.Implementation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FixedStack.startIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall FixedStack.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall FixedStack.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall FixedStack.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall FixedStack.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_25A4B6A34()
{
  swift_getWitnessTable();

  return sub_25A50F580();
}

uint64_t sub_25A4B6AB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = FixedStack.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t (*sub_25A4B6AE0(void *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_25A4B6B50(v6, *a2, a3);
  return sub_25A3A9E54;
}

uint64_t (*sub_25A4B6B50(void *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = *(void *)(a3 + 16);
  *a1 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  a1[1] = v6;
  uint64_t v7 = malloc(*(void *)(v6 + 64));
  a1[2] = v7;
  sub_25A4B6400(a2, (uint64_t)v7);
  return sub_25A3A9F28;
}

uint64_t sub_25A4B6BFC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E070](a1, WitnessTable, v3);
}

uint64_t sub_25A4B6C68(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_25A4B6CBC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_25A4B6D10(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32))
  {
    sub_25A50FA80();
    swift_getWitnessTable();
    sub_25A50F6A0();
    sub_25A50F6A0();
    sub_25A5104A0();
    swift_getWitnessTable();
    uint64_t v2 = sub_25A510410();
    uint64_t v3 = MEMORY[0x270FA5388](v2);
    MEMORY[0x270FA5388](v3);
    sub_25A50FE10();
    swift_getWitnessTable();
    char v4 = sub_25A50EF20();
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_25A4B6F64(uint64_t *a1, uint64_t *a2)
{
  return sub_25A4B6D10(*a1, *a2);
}

uint64_t sub_25A4B6F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*v2 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v15 - v6;
  sub_25A5104F0();
  sub_25A5104F0();
  uint64_t result = sub_25A50FA60();
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v9 = v2[4];
  if (v9 < 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v15[1] = a2;
  if (v9)
  {
    uint64_t v10 = result;
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = *(void *)(v11 + 56);
    do
    {
      v12(v7, v10, v4);
      sub_25A50EA20();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 - 8))(v7, v4);
      v10 += v14;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_25A4B70E4(uint64_t a1)
{
  sub_25A5104E0();
  sub_25A4B6F74((uint64_t)v3, a1);
  return sub_25A510530();
}

uint64_t sub_25A4B712C(uint64_t a1, uint64_t a2)
{
  return sub_25A4B70E4(*(void *)(a2 - 8));
}

uint64_t sub_25A4B7154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4B6F74(a1, *(void *)(a3 - 8));
}

uint64_t sub_25A4B717C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 - 8);
  sub_25A5104E0();
  sub_25A4B6F74((uint64_t)v5, v3);
  return sub_25A510530();
}

uint64_t static FixedStack<A>.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  type metadata accessor for FixedStack.Implementation();
  return sub_25A4B6D10(v2, v3) & 1;
}

uint64_t sub_25A4B721C(uint64_t *a1, uint64_t *a2)
{
  return static FixedStack<A>.== infix(_:_:)(a1, a2);
}

uint64_t FixedStack<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4B6F74(a1, a3);
}

uint64_t FixedStack<A>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  sub_25A5104E0();
  sub_25A4B6F74((uint64_t)v4, a2);
  return sub_25A510530();
}

uint64_t sub_25A4B729C(uint64_t a1, uint64_t a2)
{
  return FixedStack<A>.hashValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t sub_25A4B72A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FixedStack<A>.hash(into:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t sub_25A4B72AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 - 8);
  sub_25A5104E0();
  FixedStack<A>.hash(into:)((uint64_t)v6, v4, v3);
  return sub_25A510530();
}

uint64_t sub_25A4B72F0()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4B730C()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4B7370()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4B738C()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4B73F0()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4B740C()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for FixedStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4B746C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_25A4B74BC()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4B7504()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4B7520()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4B753C()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4B75A0()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4B75BC()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4B7620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A4B7884(a1, a2, a3, a4, MEMORY[0x263F8D1A0], MEMORY[0x263F8D180]);
}

uint64_t sub_25A4B764C(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = sub_25A50F7F0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = sub_25A50EB10();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v9, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v9, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = sub_25A50EB10();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_25A4B7858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A4B7884(a1, a2, a3, a4, MEMORY[0x263F8D870], MEMORY[0x263F8D170]);
}

uint64_t sub_25A4B7884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = sub_25A50EB10();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_25A4B7AF4(uint64_t a1)
{
  return sub_25A4748D8(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32)) & 1;
}

uint64_t Result.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v6, v8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v8);
  }
}

uint64_t Sequence.invertAndAccumulateErrors<A, B>()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v6[5] = a4;
  v6[6] = a5;
  return Sequence.traverseAndAccumulateErrors<A, B>(_:)((void (*)(char *))sub_25A4B9D34, (uint64_t)v6, a1, a2, a3, a4, a5);
}

uint64_t Sequence.invert<A, B>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v7[5] = a4;
  v7[6] = a5;
  return Sequence.traverse<A, B>(_:)((void (*)(char *))sub_25A4B9D34, (uint64_t)v7, a1, a2, a6);
}

uint64_t static Result<>.success.getter()
{
  sub_25A510540();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25A4B7DC0@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v12, *(void *)(a2 + 24));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  sub_25A510540();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Result.tryMap<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  v32 = a1;
  uint64_t v33 = a4;
  uint64_t v31 = a2;
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v11);
  char v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    char v24 = a5;
    v25 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v25(v13, v21, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v13, v6);
    uint64_t v26 = sub_25A5102E0();
    if (v26)
    {
      uint64_t v27 = v26;
      v28 = *(void (**)(char *, uint64_t))(v7 + 8);
      v28(v10, v6);
    }
    else
    {
      uint64_t v27 = swift_allocError();
      v25(v29, v10, v6);
      v28 = *(void (**)(char *, uint64_t))(v7 + 8);
    }
    v28(v13, v6);
    *char v24 = v27;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    sub_25A510540();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
    v32(v19);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    sub_25A510540();
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t Result.analyze<A>(success:failure:)(void (*a1)(char *), uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a4;
  v25 = a3;
  uint64_t v23 = a1;
  uint64_t v5 = *(void *)(a5 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v7);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v17, v5);
    v25(v9);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v17, v11);
    v23(v15);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
}

uint64_t Result.failure.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v6, v8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
}

BOOL Result.isSuccess.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = sub_25A50FA40();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - v5;
  Result.value.getter(a1, (uint64_t)&v9 - v5);
  BOOL v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v6, 1, v2) != 1;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

BOOL Result.isFailure.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = sub_25A50FA40();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - v5;
  Result.failure.getter(a1, (uint64_t)&v9 - v5);
  BOOL v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v6, 1, v2) != 1;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t Result.replace<A>(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_25A4B7DC0((void (*)(char *))sub_25A4B9DB4, a1, a2);
}

uint64_t Result.ignoringValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A4B7DC0((void (*)(char *))nullsub_1, a1, a2);
}

uint64_t Result.flattened<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a2, v5);
  }
  (*(void (**)(uint64_t, char *))(*(void *)(*(void *)(a1 + 24) - 8) + 32))(a2, v5);
  return swift_storeEnumTagMultiPayload();
}

BOOL static Result.Discriminant.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t Result.Discriminant.hash(into:)()
{
  return sub_25A5104F0();
}

uint64_t Result.Discriminant.hashValue.getter()
{
  return sub_25A510530();
}

BOOL sub_25A4B8C38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Result.Discriminant.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_25A4B8C44()
{
  return Result.Discriminant.hashValue.getter();
}

uint64_t sub_25A4B8C4C()
{
  return Result.Discriminant.hash(into:)();
}

uint64_t sub_25A4B8C54()
{
  return sub_25A510530();
}

BOOL Result.discriminant.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t Sequence.traverse<A, B>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  v51 = a1;
  uint64_t v52 = a2;
  v41 = a5;
  uint64_t v56 = a4;
  uint64_t v37 = *(void *)(a4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  v49 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v48 = (char *)&v37 - v8;
  uint64_t v39 = v9;
  uint64_t v40 = v10;
  uint64_t v50 = sub_25A510540();
  MEMORY[0x270FA5388](v50);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t v16 = sub_25A50FA40();
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  v25 = (char *)&v37 - v24;
  uint64_t v57 = sub_25A50F120();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v54, a3);
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v53 = v25;
  uint64_t v54 = v23;
  uint64_t v47 = AssociatedConformanceWitness;
  sub_25A50FAF0();
  uint64_t v27 = v55;
  v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
  uint64_t v46 = v55 + 48;
  if (v45(v19, 1, AssociatedTypeWitness) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v53, v54);
    uint64_t *v41 = v57;
    sub_25A50F1E0();
    sub_25A510540();
  }
  else
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v43 = (void (**)(char *, char *, uint64_t))(v37 + 32);
    v44 = v28;
    v42 = (void (**)(char *, char *, uint64_t))(v37 + 16);
    v29 = (void (**)(char *, uint64_t))(v37 + 8);
    uint64_t v55 = v27 + 32;
    v30 = (void (**)(char *, uint64_t))(v27 + 8);
    uint64_t v31 = v56;
    while (1)
    {
      v44(v15, v19, AssociatedTypeWitness);
      v51(v15);
      if (swift_getEnumCaseMultiPayload() == 1) {
        break;
      }
      v32 = v15;
      uint64_t v33 = AssociatedTypeWitness;
      v34 = v48;
      (*v43)(v48, v12, v31);
      (*v42)(v49, v34, v31);
      sub_25A50F1E0();
      sub_25A50F180();
      v35 = v34;
      uint64_t AssociatedTypeWitness = v33;
      uint64_t v15 = v32;
      (*v29)(v35, v31);
      (*v30)(v32, AssociatedTypeWitness);
      sub_25A50FAF0();
      if (v45(v19, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_5;
      }
    }
    (*v30)(v15, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v53, v54);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v41, v12, v39);
    sub_25A50F1E0();
    sub_25A510540();
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t Sequence.traverseAndAccumulateErrors<A, B>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v80 = a4;
  v87 = a1;
  uint64_t v88 = a2;
  uint64_t v66 = sub_25A50FA40();
  uint64_t v65 = *(void *)(v66 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v66);
  v69 = (char *)&v62 - v12;
  uint64_t v81 = a5;
  uint64_t v70 = *(void *)(a5 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  v63 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v67 = (char *)&v62 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  v79 = (char *)&v62 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v78 = (char *)&v62 - v20;
  v73 = *(void (***)(char *, uint64_t))(a4 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v77 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  v76 = (char *)&v62 - v23;
  uint64_t v64 = a7;
  uint64_t v86 = sub_25A510540();
  MEMORY[0x270FA5388](v86);
  v25 = (char *)&v62 - v24;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v91 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v28 = (char *)&v62 - v27;
  uint64_t v29 = sub_25A50FA40();
  uint64_t v30 = MEMORY[0x270FA5388](v29 - 8);
  v32 = (char *)&v62 - v31;
  uint64_t v33 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v30);
  v35 = (char *)&v62 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v68 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)&v62 - v37;
  uint64_t v94 = sub_25A50F120();
  uint64_t v93 = sub_25A50F120();
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v35, v90, a3);
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v89 = v38;
  uint64_t v90 = v36;
  uint64_t v85 = AssociatedConformanceWitness;
  sub_25A50FAF0();
  uint64_t v40 = v91;
  v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48);
  uint64_t v84 = v91 + 48;
  if (v83(v32, 1, AssociatedTypeWitness) != 1)
  {
    v82 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    v74 = (void (**)(char *, char *, uint64_t))(v73 + 2);
    v75 = (void (**)(char *, char *, uint64_t))(v73 + 4);
    ++v73;
    uint64_t v91 = v40 + 32;
    v72 = (void (**)(char *, char *, uint64_t))(v70 + 32);
    v71 = (void (**)(char *, char *, uint64_t))(v70 + 16);
    uint64_t v52 = (void (**)(char *, uint64_t))(v70 + 8);
    v82(v28, v32, AssociatedTypeWitness);
    while (1)
    {
      v87(v28);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v53 = v78;
        uint64_t v54 = v81;
        (*v72)(v78, v25, v81);
        (*v71)(v79, v53, v54);
        sub_25A50F1E0();
        sub_25A50F180();
        (*v52)(v53, v54);
      }
      else
      {
        uint64_t v55 = v76;
        uint64_t v56 = v80;
        (*v75)(v76, v25, v80);
        (*v74)(v77, v55, v56);
        sub_25A50F1E0();
        sub_25A50F180();
        (*v73)(v55, v56);
      }
      (*(void (**)(char *, uint64_t))(v40 + 8))(v28, AssociatedTypeWitness);
      sub_25A50FAF0();
      if (v83(v32, 1, AssociatedTypeWitness) == 1) {
        break;
      }
      v82(v28, v32, AssociatedTypeWitness);
    }
  }
  (*(void (**)(char *, uint64_t))(v68 + 8))(v89, v90);
  uint64_t v92 = v93;
  uint64_t v41 = v81;
  sub_25A50F1E0();
  swift_getWitnessTable();
  v42 = v69;
  sub_25A50F670();
  uint64_t v43 = v70;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v42, 1, v41) == 1)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v42, v66);
    return v94;
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v45 = v67;
    v44(v67, v42, v41);
    uint64_t v46 = swift_bridgeObjectRetain();
    uint64_t v47 = MEMORY[0x26113D160](v46, v41);
    swift_bridgeObjectRelease();
    if (v47 == 1)
    {
      swift_bridgeObjectRelease();
      v48 = v63;
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v63, v45, v41);
      uint64_t v49 = sub_25A5102E0();
      if (v49)
      {
        uint64_t v50 = v49;
        v51 = *(void (**)(char *, uint64_t))(v43 + 8);
        v51(v48, v41);
        v51(v45, v41);
      }
      else
      {
        uint64_t v50 = swift_allocError();
        v44(v60, v48, v41);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v41);
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
      uint64_t v57 = sub_25A50FFA0();
      swift_bridgeObjectRelease();
      uint64_t v58 = sub_25A4BBDA8(v57);
      swift_bridgeObjectRelease();
      sub_25A3F500C();
      uint64_t v50 = swift_allocError();
      uint64_t *v59 = v58;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v41);
    }
  }
  return v50;
}

uint64_t sub_25A4B9D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_25A510540();
  BOOL v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t sub_25A4B9DB4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 32) - 8) + 16))(a1, *(void *)(v1 + 48));
}

unint64_t sub_25A4B9DE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_25A3990F8(v2, (uint64_t)&v13);
      uint64_t v3 = v14;
      uint64_t v4 = v15;
      __swift_project_boxed_opaque_existential_1(&v13, v14);
      (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      if (v6) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
      v2 += 40;
      if (!--v1) {
        goto LABEL_7;
      }
    }
    sub_25A3C85D8(&v13, (uint64_t)&v16);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)&v17 + 1);
  if (!*((void *)&v17 + 1))
  {
    sub_25A4BC0F0((uint64_t)&v16);
LABEL_13:
    swift_bridgeObjectRelease();
    return 0xD00000000000001BLL;
  }
  uint64_t v8 = v18;
  __swift_project_boxed_opaque_existential_1(&v16, *((uint64_t *)&v17 + 1));
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  uint64_t v11 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  if (!v11) {
    goto LABEL_13;
  }
  return v9;
}

uint64_t sub_25A4B9F40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_25A3990F8(v2, (uint64_t)&v10);
      uint64_t v3 = v11;
      uint64_t v4 = v12;
      __swift_project_boxed_opaque_existential_1(&v10, v11);
      (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      if (v6) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
      v2 += 40;
      if (!--v1) {
        goto LABEL_7;
      }
    }
    sub_25A3C85D8(&v10, (uint64_t)&v13);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    uint64_t v8 = v15;
    __swift_project_boxed_opaque_existential_1(&v13, *((uint64_t *)&v14 + 1));
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    sub_25A4BC0F0((uint64_t)&v13);
  }
  return v7;
}

uint64_t sub_25A4BA078(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_25A3990F8(v2, (uint64_t)&v10);
      uint64_t v3 = v11;
      uint64_t v4 = v12;
      __swift_project_boxed_opaque_existential_1(&v10, v11);
      (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v3, v4);
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      if (v6) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
      v2 += 40;
      if (!--v1) {
        goto LABEL_7;
      }
    }
    sub_25A3C85D8(&v10, (uint64_t)&v13);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    uint64_t v8 = v15;
    __swift_project_boxed_opaque_existential_1(&v13, *((uint64_t *)&v14 + 1));
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 40))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    sub_25A4BC0F0((uint64_t)&v13);
  }
  return v7;
}

uint64_t sub_25A4BA1B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_25A3990F8(v2, (uint64_t)&v10);
      uint64_t v3 = v11;
      uint64_t v4 = v12;
      __swift_project_boxed_opaque_existential_1(&v10, v11);
      (*(void (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      if (v6) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
      v2 += 40;
      if (!--v1) {
        goto LABEL_7;
      }
    }
    sub_25A3C85D8(&v10, (uint64_t)&v13);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    uint64_t v8 = v15;
    __swift_project_boxed_opaque_existential_1(&v13, *((uint64_t *)&v14 + 1));
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 48))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    sub_25A4BC0F0((uint64_t)&v13);
  }
  return v7;
}

uint64_t sub_25A4BA2E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_25A3990F8(v2, (uint64_t)&v8);
      uint64_t v3 = v9;
      uint64_t v4 = v10;
      __swift_project_boxed_opaque_existential_1(&v8, v9);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 96))(v3, v4)) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
      v2 += 40;
      if (!--v1) {
        goto LABEL_7;
      }
    }
    sub_25A3C85D8(&v8, (uint64_t)&v11);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = *((void *)&v12 + 1);
  if (*((void *)&v12 + 1))
  {
    uint64_t v6 = v13;
    __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
    LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 96))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  }
  else
  {
    sub_25A4BC0F0((uint64_t)&v11);
  }
  return v5 & 1;
}

uint64_t sub_25A4BA40C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v15 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  unint64_t v3 = 1;
  unint64_t v14 = v1;
  do
  {
    uint64_t v4 = (void *)(v15 + 40 * v2);
    sub_25A5102B0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    uint64_t v5 = v4[3];
    uint64_t v6 = v4[4];
    __swift_project_boxed_opaque_existential_1(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 104))(v5, v6);
    sub_25A39BE4C();
    uint64_t v7 = sub_25A50FB20();
    uint64_t v18 = MEMORY[0x263F8EE78];
    sub_25A39A068(0, 0, 0);
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      unint64_t v16 = v3;
      uint64_t v17 = v2;
      swift_bridgeObjectRetain();
      uint64_t v9 = v7 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
        unint64_t v11 = *(void *)(v18 + 16);
        unint64_t v10 = *(void *)(v18 + 24);
        if (v11 >= v10 >> 1) {
          sub_25A39A068(v10 > 1, v11 + 1, 1);
        }
        v9 += 16;
        *(void *)(v18 + 16) = v11 + 1;
        uint64_t v12 = v18 + 16 * v11;
        *(void *)(v12 + 32) = 2105376;
        *(void *)(v12 + 40) = 0xE300000000000000;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      unint64_t v1 = v14;
      unint64_t v3 = v16;
      uint64_t v2 = v17;
    }
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
    sub_25A3A108C();
    sub_25A50EAD0();
    swift_bridgeObjectRelease();
    swift_release();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    if (v3 < v1) {
      sub_25A50EDA0();
    }
    ++v2;
    ++v3;
  }
  while (v2 != v1);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_25A4BA704()
{
  return sub_25A4B9F40(*v0);
}

unint64_t sub_25A4BA70C()
{
  return sub_25A4B9DE8(*v0);
}

uint64_t sub_25A4BA714()
{
  return sub_25A4BA078(*v0);
}

uint64_t sub_25A4BA71C()
{
  return sub_25A4BA1B0(*v0);
}

uint64_t sub_25A4BA724()
{
  return sub_25A4BA2E8(*v0);
}

uint64_t sub_25A4BA72C()
{
  return sub_25A4BA40C(*v0);
}

uint64_t Result.asyncMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v8 = *(void *)(a4 + 16);
  void v6[8] = v8;
  v6[9] = *(void *)(v8 - 8);
  v6[10] = swift_task_alloc();
  v6[11] = *(void *)(a4 - 8);
  v6[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A4BA84C, 0, 0);
}

uint64_t sub_25A4BA84C()
{
  (*(void (**)(void, void, void))(v0[11] + 16))(v0[12], v0[7], v0[5]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v2 = v0[12];
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(void, uint64_t, void))(*(void *)(*(void *)(v0[5] + 24) - 8) + 32))(v0[2], v2, *(void *)(v0[5] + 24));
    sub_25A510540();
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = (int *)v0[3];
    (*(void (**)(void, uint64_t, void))(v0[9] + 32))(v0[10], v2, v0[8]);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
    uint64_t v6 = (void *)swift_task_alloc();
    v0[13] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_25A4BAA38;
    uint64_t v7 = v0[10];
    uint64_t v8 = v0[2];
    return v9(v8, v7);
  }
}

uint64_t sub_25A4BAA38()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A4BAB34, 0, 0);
}

uint64_t sub_25A4BAB34()
{
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  sub_25A510540();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t Result.asyncMapError<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  void v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  uint64_t v9 = *(void *)(a4 + 24);
  v7[9] = v9;
  v7[10] = *(void *)(v9 - 8);
  v7[11] = swift_task_alloc();
  v7[12] = *(void *)(a4 - 8);
  v7[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A4BAD0C, 0, 0);
}

uint64_t sub_25A4BAD0C()
{
  (*(void (**)(void, void, void))(v0[12] + 16))(v0[13], v0[8], v0[5]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v2 = v0[13];
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = (int *)v0[3];
    (*(void (**)(void, uint64_t, void))(v0[10] + 32))(v0[11], v2, v0[9]);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[14] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_25A4BAEF4;
    uint64_t v5 = v0[11];
    uint64_t v6 = v0[2];
    return v9(v6, v5);
  }
  else
  {
    (*(void (**)(void, uint64_t, void))(*(void *)(*(void *)(v0[5] + 16) - 8) + 32))(v0[2], v2, *(void *)(v0[5] + 16));
    sub_25A510540();
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_25A4BAEF4()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A4BAFF0, 0, 0);
}

uint64_t sub_25A4BAFF0()
{
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  sub_25A510540();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t Result.asyncTryMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v8 = *(void *)(a4 + 24);
  void v6[8] = v8;
  v6[9] = *(void *)(v8 - 8);
  v6[10] = swift_task_alloc();
  v6[11] = swift_task_alloc();
  uint64_t v9 = *(void *)(a4 + 16);
  v6[12] = v9;
  v6[13] = *(void *)(v9 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = *(void *)(a4 - 8);
  v6[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A4BB228, 0, 0);
}

uint64_t sub_25A4BB228()
{
  (*(void (**)(void, void, void))(v0[15] + 16))(v0[16], v0[7], v0[5]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v2 = v0[16];
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = v0[10];
    uint64_t v4 = v0[11];
    uint64_t v5 = v0[8];
    uint64_t v6 = v0[9];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v7(v4, v2, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v4, v5);
    uint64_t v8 = sub_25A5102E0();
    uint64_t v10 = v0[9];
    uint64_t v9 = v0[10];
    uint64_t v11 = v0[8];
    if (v8)
    {
      uint64_t v12 = v8;
      uint64_t v13 = *(void (**)(void, void))(v10 + 8);
      v13(v0[10], v0[8]);
    }
    else
    {
      uint64_t v12 = swift_allocError();
      v7(v19, v9, v11);
      uint64_t v13 = *(void (**)(void, void))(v10 + 8);
    }
    uint64_t v20 = (uint64_t *)v0[2];
    v13(v0[11], v0[8]);
    *uint64_t v20 = v12;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    sub_25A510540();
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
  else
  {
    unint64_t v14 = (int *)v0[3];
    (*(void (**)(void, uint64_t, void))(v0[13] + 32))(v0[14], v2, v0[12]);
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t))((char *)v14 + *v14);
    uint64_t v15 = (void *)swift_task_alloc();
    v0[17] = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_25A4BB4E8;
    uint64_t v16 = v0[14];
    uint64_t v17 = v0[2];
    return v22(v17, v16);
  }
}

uint64_t sub_25A4BB4E8()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25A4BB6D8;
  }
  else {
    uint64_t v2 = sub_25A4BB5FC;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A4BB5FC()
{
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_25A4BB6D8()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = (void *)v0[2];
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  *uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t static Result.awaiting<>(_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  v4[4] = *(void *)(a4 - 8);
  uint64_t v6 = swift_task_alloc();
  v4[5] = v6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v7 = (void *)swift_task_alloc();
  v4[6] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_25A4BB8F4;
  return v9(v6);
}

uint64_t sub_25A4BB8F4()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25A4BBABC;
  }
  else {
    uint64_t v2 = sub_25A4BBA08;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A4BBA08()
{
  (*(void (**)(void, void, void))(v0[4] + 32))(v0[2], v0[5], v0[3]);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_25A4BBABC()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Result<>.init(_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  v4[4] = *(void *)(a4 - 8);
  uint64_t v6 = swift_task_alloc();
  v4[5] = v6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v7 = (void *)swift_task_alloc();
  v4[6] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_25A4BBC94;
  return v9(v6);
}

uint64_t sub_25A4BBC94()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25A4BC150;
  }
  else {
    uint64_t v2 = sub_25A4BC154;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A4BBDA8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    sub_25A39A0C8(0, v1, 0);
    uint64_t v2 = v13;
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4;
      swift_getErrorValue();
      id v6 = v5;
      Error.humanReadable.getter(v11, (uint64_t)v12);

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v13 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_25A39A0C8(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v13;
      }
      unint64_t v9 = *(void *)(v2 + 16);
      unint64_t v8 = *(void *)(v2 + 24);
      if (v9 >= v8 >> 1)
      {
        sub_25A39A0C8(v8 > 1, v9 + 1, 1);
        uint64_t v2 = v13;
      }
      *(void *)(v2 + 16) = v9 + 1;
      sub_25A3C85D8(v12, v2 + 40 * v9 + 32);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_25A4BBEDC()
{
  return swift_getWitnessTable();
}

unsigned char *sub_25A4BBEF8(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A4BBFC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for Result.Discriminant()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for AccumulatedError()
{
  return &type metadata for AccumulatedError;
}

unint64_t sub_25A4BC018(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_25A4BC048();
  unint64_t result = sub_25A4BC09C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_25A4BC048()
{
  unint64_t result = qword_26A41AE20;
  if (!qword_26A41AE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41AE20);
  }
  return result;
}

unint64_t sub_25A4BC09C()
{
  unint64_t result = qword_26A41AE28[0];
  if (!qword_26A41AE28[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A41AE28);
  }
  return result;
}

uint64_t sub_25A4BC0F0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417628);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25A4BC158(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  if (v4)
  {
    uint64_t v7 = (void (*)(long long *))result;
    swift_bridgeObjectRetain();
    unint64_t result = swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    do
    {
      if (!*(void *)(a3 + 16))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        return result;
      }
      unint64_t result = sub_25A4096E8(*(void *)(a4 + 8 * v8 + 32));
      if ((v9 & 1) == 0) {
        goto LABEL_11;
      }
      ++v8;
      long long v10 = *(_OWORD *)(*(void *)(a3 + 56) + 16 * result);
      swift_retain();
      v7(&v10);
      unint64_t result = swift_release();
    }
    while (v4 != v8);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t EventStream.Sink.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  EventStream.Sink.init()();
  return v0;
}

void sub_25A4BC290()
{
  swift_getFunctionTypeMetadata1();
  type metadata accessor for SubscriberCollection();
  uint64_t v0 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream.swift", 123, 2, 110, 25, (uint64_t)"observerCount", 13, 2, v0, WitnessTable);
  SubscriberCollection.count.getter();
}

uint64_t sub_25A4BC368(uint64_t a1)
{
  return a1;
}

void EventStream.Sink.send(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)&long long v11 = v1[2];
  uint64_t v4 = *(void *)(v3 + 80);
  swift_getFunctionTypeMetadata1();
  uint64_t v5 = type metadata accessor for SubscriberCollection();
  uint64_t v6 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream.swift", 123, 2, 119, 25, (uint64_t)"send(_:)", 8, 2, v6, WitnessTable);
  long long v11 = v12;
  uint64_t v9 = v4;
  uint64_t v10 = a1;
  SubscriberCollection.notifyAll(closure:)((uint64_t)sub_25A4BCBDC, (uint64_t)v8, v5);
}

uint64_t sub_25A4BC490()
{
  return swift_bridgeObjectRelease();
}

uint64_t EventStream.Sink.eventStream.getter@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)@<X8>)
{
  *a1 = sub_25A4BCC64;
  a1[1] = v1;
  return swift_retain();
}

uint64_t sub_25A4BC4D0(long long *a1)
{
  char v2 = *((unsigned char *)a1 + 16);
  char v3 = *((unsigned char *)a1 + 56);
  uint64_t v4 = *v1;
  long long v6 = *a1;
  char v7 = v2;
  long long v8 = *(long long *)((char *)a1 + 24);
  long long v9 = *(long long *)((char *)a1 + 40);
  char v10 = v3;
  return v4(&v6);
}

uint64_t sub_25A4BC52C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t EventStream.observe(dsoHandle:file:line:column:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  long long v12 = *v11;
  v14[0] = a2;
  v14[1] = a3;
  char v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  uint64_t v19 = a8;
  char v20 = a9;
  return v12(v14, a10, a11);
}

uint64_t static EventStream.empty.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *a2 = sub_25A4BCC7C;
  a2[1] = result;
  return result;
}

uint64_t sub_25A4BC5DC@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t result = sub_25A3B7704(v5, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  *a2 = nullsub_1;
  a2[1] = 0;
  a2[2] = result;
  return result;
}

uint64_t EventStream.init<A>(publisher:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (**a3)()@<X8>)@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  long long v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = a2;
  *((void *)v12 + 3) = a3;
  *((void *)v12 + 4) = a4;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 32))(&v12[v11], a1, a3);
  *a5 = sub_25A4BCD0C;
  a5[1] = (uint64_t (*)@<X0>(uint64_t@<X1>, uint64_t@<X2>, uint64_t (**)()@<X8>))v12;
  return result;
}

uint64_t sub_25A4BC780@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t (**a6)()@<X8>)
{
  long long v12 = (void *)swift_allocObject();
  long long v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a1;
  v12[6] = a2;
  swift_retain();
  uint64_t v13 = sub_25A50E720();
  swift_release();
  *(void *)&long long v15 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/EventStream.swift";
  *((void *)&v15 + 1) = 123;
  char v16 = 2;
  long long v17 = xmmword_25A51B630;
  uint64_t v18 = "init(publisher:)";
  uint64_t v19 = 16;
  char v20 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t result = sub_25A3B7704(&v15, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  *a6 = sub_25A4BD950;
  a6[1] = (uint64_t (*)())v13;
  a6[2] = (uint64_t (*)())result;
  return result;
}

uint64_t EventStream.Sink.init()()
{
  swift_getFunctionTypeMetadata1();
  SubscriberCollection.init()(v5);
  v4[0] = v5[0];
  v4[1] = v5[1];
  uint64_t v1 = type metadata accessor for SubscriberCollection();
  uint64_t v2 = sub_25A3EF560(v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t sub_25A4BC98C@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8 = *v4;
  char v9 = *((unsigned char *)a1 + 16);
  char v10 = *((unsigned char *)a1 + 56);
  long long v15 = *a1;
  char v16 = v9;
  long long v17 = *(long long *)((char *)a1 + 24);
  long long v18 = *(long long *)((char *)a1 + 40);
  char v19 = v10;
  unint64_t v11 = (void *)swift_allocObject();
  v11[2] = *(void *)(v8 + 80);
  v11[3] = a2;
  v11[4] = a3;
  v14[0] = sub_25A4BD98C;
  v14[1] = v11;
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  swift_retain();
  swift_retain();
  static SubscriberCollection.add(callsite:_:modify:)(&v15, (uint64_t)v14, (void (*)(uint64_t (*)(uint64_t)))sub_25A4BD9B4, (uint64_t)v4, FunctionTypeMetadata1, a4);
  swift_release();
  return swift_release();
}

uint64_t sub_25A4BCAA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v12 = a3[2];
  uint64_t v9 = *(void *)(v3 + 80);
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  uint64_t v4 = MEMORY[0x263F8EE60] + 8;
  swift_getFunctionTypeMetadata1();
  type metadata accessor for SubscriberCollection();
  uint64_t v5 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream.swift", 123, 2, 105, 39, (uint64_t)"observe(callsite:_:)", 20, 2, (uint64_t)sub_25A4BD9BC, (uint64_t)v8, v5, v4, WitnessTable);
  return swift_release();
}

void EventStream.Sink.isObserved.getter()
{
}

BOOL sub_25A4BCBCC(uint64_t a1)
{
  return a1 != 0;
}

uint64_t sub_25A4BCBDC(uint64_t (**a1)(void))
{
  return (*a1)(*(void *)(v1 + 24));
}

uint64_t sub_25A4BCC0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  char v4 = *(unsigned char *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 56);
  long long v7 = *(_OWORD *)a1;
  char v8 = v4;
  long long v9 = *(_OWORD *)(a1 + 24);
  long long v10 = *(_OWORD *)(a1 + 40);
  char v11 = v5;
  return sub_25A4BC98C(&v7, a2, a3, a4);
}

uint64_t sub_25A4BCC64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  return sub_25A4BCC0C(a1, a2, a3, a4);
}

uint64_t sub_25A4BCC6C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A4BCC7C@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  return sub_25A4BC5DC(a1, a2);
}

uint64_t sub_25A4BCC84()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_25A4BCD0C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (**a3)()@<X8>)
{
  return sub_25A4BC780(a1, a2, v3[2], v3[3], v3[4], a3);
}

uint64_t EventStream.Sink.send<A>()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A3EF390((void *)(v1 + 16), v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  swift_release();
  sub_25A4BC158((uint64_t)sub_25A4BD608, (uint64_t)&v3, v4[0], v4[1]);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t EventStream.Sink.deinit()
{
  swift_release();
  return v0;
}

uint64_t EventStream.Sink.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t EventStream.eventStream.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_retain();
}

uint64_t EventStreamProtocol.onObserve(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)(uint64_t *a1, uint64_t a2, uint64_t a3)@<X8>)
{
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a3;
  *((void *)v14 + 3) = a4;
  *((void *)v14 + 4) = a1;
  *((void *)v14 + 5) = a2;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v14[v13], (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  *a5 = sub_25A4BD6F4;
  a5[1] = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v14;
  return swift_retain();
}

uint64_t sub_25A4BCFA4(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  char v13 = *((unsigned char *)a1 + 16);
  long long v18 = *(_OWORD *)(a1 + 3);
  uint64_t v15 = a1[5];
  uint64_t v14 = a1[6];
  char v17 = *((unsigned char *)a1 + 56);
  a4(a2, a3);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a8 + 16))(&v20, a7, a8);
  v21[0] = v11;
  v21[1] = v12;
  char v22 = v13;
  long long v23 = v18;
  uint64_t v24 = v15;
  uint64_t v25 = v14;
  char v26 = v17;
  v20(v21, a2, a3);

  return swift_release();
}

uint64_t EventStream.asyncStream.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = sub_25A50F2E0();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = *MEMORY[0x263F8F580];
  char v8 = *(void (**)(char *, uint64_t))(v7 + 104);
  long long v10 = *v1;
  v8(v5, v6);
  uint64_t v11 = v2;
  long long v12 = v10;
  return sub_25A50F380();
}

uint64_t sub_25A4BD1A8(uint64_t a1, void (*a2)(long long *__return_ptr, void *, uint64_t (*)(uint64_t a1), uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_25A50F320();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  long long v10 = (char *)&v16 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v16 - v9, a1, v7);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, v10, v7);
  v19[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream.swift";
  v19[1] = 123;
  char v20 = 2;
  long long v21 = xmmword_25A51B640;
  char v22 = "asyncStream";
  uint64_t v23 = 11;
  char v24 = 2;
  a2(&v17, v19, sub_25A4BD848, v12);
  swift_release();
  uint64_t v13 = v18;
  long long v16 = v17;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(_OWORD *)(v14 + 24) = v16;
  *(void *)(v14 + 40) = v13;
  return sub_25A50F2D0();
}

uint64_t sub_25A4BD398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25A50F2C0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  sub_25A50F320();
  sub_25A50F300();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_25A4BD510(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream.swift";
  uint64_t v9 = 123;
  char v10 = 2;
  long long v11 = xmmword_25A51B650;
  uint64_t v12 = "asyncStream";
  uint64_t v13 = 11;
  char v14 = 2;
  uint64_t v5 = *(void *)(a4 + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 76));
  sub_25A3B86E0((long long *)(v5 + 16), &v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 76));
  uint64_t result = swift_release();
  if ((v7 & 1) == 0) {
    return a2(result);
  }
  return result;
}

uint64_t sub_25A4BD608(uint64_t (**a1)(void))
{
  return (*a1)();
}

uint64_t sub_25A4BD630()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A4BD6F4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4BCFA4(a1, a2, a3, *(void (**)(uint64_t, uint64_t))(v3 + 32), *(void *)(v3 + 40), v3+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80)), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_25A4BD738(uint64_t a1)
{
  return sub_25A4BD1A8(a1, *(void (**)(long long *__return_ptr, void *, uint64_t (*)(uint64_t), uint64_t))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 16));
}

uint64_t type metadata accessor for EventStream()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EventStream.Sink()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for EventStream.Sink(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EventStream.Sink);
}

uint64_t dispatch thunk of EventStream.Sink.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of EventStreamProtocol.eventStream.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_25A4BD7B4()
{
  uint64_t v1 = sub_25A50F320();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A4BD848(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(sub_25A50F320() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_25A4BD398(a1, v5, v3);
}

uint64_t sub_25A4BD8CC()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A4BD90C(uint64_t a1)
{
  return sub_25A4BD510(a1, *(uint64_t (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_25A4BD918()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A4BD954()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A4BD98C()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_25A4BD9B4(uint64_t a1, uint64_t a2)
{
  return sub_25A4BCAA4(a1, a2, v2);
}

uint64_t sub_25A4BD9BC()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t CancellationToken.cancel(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char v10 = *(uint64_t (**)(uint64_t))v9;
  uint64_t v11 = *(void *)(v9 + 16);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  char v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = a8;
  char v22 = a9;
  uint64_t v12 = *(void *)(v11 + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 76));
  sub_25A3B86E0((long long *)(v12 + 16), &v14);
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 76));
  uint64_t result = swift_release();
  if ((v14 & 1) == 0) {
    return v10(result);
  }
  return result;
}

uint64_t CancellationToken.init(dsoHandle:file:line:column:function:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, char a9, uint64_t a10, uint64_t a11)
{
  *(void *)&long long v13 = a1;
  *((void *)&v13 + 1) = a2;
  char v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  char v19 = a9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t result = sub_25A3B7704(&v13, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  *a8 = a10;
  a8[1] = a11;
  a8[2] = result;
  return result;
}

uint64_t CancellationToken.init(callsite:didCancel:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  long long v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  v10[0] = a1[2];
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)a1 + 41);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t result = sub_25A3B7704(v9, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  *a4 = a2;
  a4[1] = a3;
  a4[2] = result;
  return result;
}

Swift::Void __swiftcall CancellationToken.store(in:)(Swift::OpaquePointer *in)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  rawValue = in->_rawValue;
  swift_retain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    rawValue = sub_25A38AC5C(0, rawValue[2] + 1, 1, rawValue);
  }
  unint64_t v8 = rawValue[2];
  unint64_t v7 = rawValue[3];
  if (v8 >= v7 >> 1) {
    rawValue = sub_25A38AC5C((void *)(v7 > 1), v8 + 1, 1, rawValue);
  }
  rawValue[2] = v8 + 1;
  uint64_t v9 = &rawValue[3 * v8];
  v9[4] = v4;
  v9[5] = v3;
  v9[6] = v5;
  in->_rawValue = rawValue;
}

ValueMetadata *type metadata accessor for CancellationToken()
{
  return &type metadata for CancellationToken;
}

uint64_t Collection.concatenating<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  long long v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v15, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  return sub_25A4BDE94((uint64_t)v13, (uint64_t)v11, a2, a3, a4);
}

uint64_t sub_25A4BDE94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for ConcatenateCollection();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t _s20PreviewsFoundationOS21ConcatenateCollectionV5IndexV1loiySbAEyxq__G_AGtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v46 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v40 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v39 = (char *)&v39 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  char v19 = (char *)&v39 - v18;
  uint64_t v41 = a3;
  uint64_t v42 = a5;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v43 = a4;
  uint64_t v44 = a6;
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  uint64_t v20 = type metadata accessor for ConcatenateCollection.Index.Implementation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v22 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  char v24 = (char *)&v39 - v23;
  uint64_t v25 = (char *)&v39 + *(int *)(v22 + 56) - v23;
  uint64_t v26 = *(void *)(v20 - 8);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v27((char *)&v39 - v23, v47, v20);
  v27(v25, v48, v20);
  LODWORD(a6) = swift_getEnumCaseMultiPayload();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (a6 == 1)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v29 = v46;
      uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
      uint64_t v31 = v39;
      v30(v39, v24, AssociatedTypeWitness);
      v32 = v40;
      v30(v40, v25, AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      char v33 = sub_25A50EAF0();
      uint64_t v34 = *(void (**)(char *, uint64_t))(v29 + 8);
      v34(v32, AssociatedTypeWitness);
      v34(v31, AssociatedTypeWitness);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v20);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v24, AssociatedTypeWitness);
      char v33 = 0;
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v20);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v24, v14);
    char v33 = 1;
  }
  else
  {
    uint64_t v35 = v45;
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v36(v19, v24, v14);
    v36(v17, v25, v14);
    swift_getAssociatedConformanceWitness();
    char v33 = sub_25A50EAF0();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v35 + 8);
    v37(v17, v14);
    v37(v19, v14);
  }
  return v33 & 1;
}

uint64_t _s20PreviewsFoundationOS21ConcatenateCollectionV5IndexV2eeoiySbAEyxq__G_AGtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v44 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v45 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v37 = (char *)&v36 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v36 = (char *)&v36 - v13;
  uint64_t v38 = a3;
  uint64_t v39 = a5;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v40 = a4;
  uint64_t v41 = a6;
  uint64_t v50 = a5;
  uint64_t v51 = a6;
  uint64_t v14 = type metadata accessor for ConcatenateCollection.Index.Implementation();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v36 - v19;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v42 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  char v24 = (char *)&v36 - v23;
  uint64_t v25 = (char *)&v36 + *(int *)(v22 + 48) - v23;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v26((char *)&v36 - v23, v46, v14);
  v26(v25, v47, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v26(v18, (uint64_t)v24, v14);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v28 = v44;
      uint64_t v27 = v45;
      uint64_t v29 = v37;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v37, v25, v45);
      swift_getAssociatedConformanceWitness();
      char v30 = sub_25A50EBE0();
      uint64_t v31 = *(void (**)(char *, uint64_t))(v28 + 8);
      v31(v29, v27);
      v31(v18, v27);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v45);
LABEL_7:
    char v30 = 0;
    uint64_t v15 = v42;
    uint64_t v14 = TupleTypeMetadata2;
    goto LABEL_10;
  }
  v26(v20, (uint64_t)v24, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v20, v12);
    goto LABEL_7;
  }
  uint64_t v32 = v43;
  char v33 = v36;
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v36, v25, v12);
  swift_getAssociatedConformanceWitness();
  char v30 = sub_25A50EBE0();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v32 + 8);
  v34(v33, v12);
  v34(v20, v12);
LABEL_10:
  (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v14);
  return v30 & 1;
}

uint64_t sub_25A4BE8A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return _s20PreviewsFoundationOS21ConcatenateCollectionV5IndexV1loiySbAEyxq__G_AGtFZ_0(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_25A4BE8C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return _s20PreviewsFoundationOS21ConcatenateCollectionV5IndexV2eeoiySbAEyxq__G_AGtFZ_0(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_25A4BE8D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v12 = type metadata accessor for ConcatenateCollection.Index.Implementation();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v18 - v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v14, a1, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v16 = type metadata accessor for ConcatenateCollection.Index.Implementation();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 32))(a6, v14, v16);
}

uint64_t sub_25A4BEA28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v12 = type metadata accessor for ConcatenateCollection.Index.Implementation();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v18 - v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v14, a1, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v16 = type metadata accessor for ConcatenateCollection.Index.Implementation();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 32))(a6, v14, v16);
}

uint64_t sub_25A4BEB84(uint64_t a1, uint64_t a2, void *a3)
{
  return static ConcatenateCollection.Index.< infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_25A4BEB94(uint64_t a1, uint64_t a2, void *a3)
{
  return static ConcatenateCollection.Index.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t ConcatenateCollection.startIndex.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = a1[5];
  uint64_t v25 = a1[3];
  uint64_t v26 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v21 = (char *)&v21 - v5;
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[2];
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v21 - v13;
  sub_25A50F5E0();
  sub_25A50F620();
  swift_getAssociatedConformanceWitness();
  char v15 = sub_25A50EBE0();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, v8);
  v16(v14, v8);
  if (v15)
  {
    uint64_t v17 = (uint64_t)v21;
    uint64_t v19 = v25;
    uint64_t v18 = v26;
    sub_25A50F5E0();
    sub_25A4BEA28(v17, v7, v19, v6, v18, v24);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v17, v23);
  }
  else
  {
    sub_25A50F5E0();
    sub_25A4BE8D4((uint64_t)v14, v7, v25, v6, v26, v24);
    return ((uint64_t (*)(char *, uint64_t))v16)(v14, v8);
  }
}

uint64_t ConcatenateCollection.index(after:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v41 = a1;
  uint64_t v4 = a2[5];
  uint64_t v5 = a2[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v40 = AssociatedTypeWitness;
  uint64_t v7 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v37 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[2];
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v42 = (char *)&v36 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v45 = v12;
  uint64_t v46 = v5;
  uint64_t v44 = v11;
  uint64_t v47 = v11;
  uint64_t v48 = v4;
  uint64_t v21 = type metadata accessor for ConcatenateCollection.Index.Implementation();
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v36 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)&v36 - v22, v41, v21);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = v39;
    uint64_t v25 = v40;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v10, v23, v40);
    uint64_t v27 = (uint64_t)v37;
    sub_25A50F600();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v26 + 8);
    v28(v10, v25);
    sub_25A4BEA28(v27, v12, v5, v44, v4, v43);
    return ((uint64_t (*)(uint64_t, uint64_t))v28)(v27, v25);
  }
  else
  {
    uint64_t v37 = v10;
    uint64_t v41 = v4;
    uint64_t v30 = v38;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v20, v23, v13);
    sub_25A50F600();
    sub_25A50F620();
    swift_getAssociatedConformanceWitness();
    char v31 = sub_25A50EBE0();
    uint64_t v32 = *(void (**)(char *, uint64_t))(v30 + 8);
    v32(v16, v13);
    if (v31)
    {
      uint64_t v33 = (uint64_t)v37;
      uint64_t v34 = v41;
      sub_25A50F5E0();
      v32(v42, v13);
      v32(v20, v13);
      sub_25A4BEA28(v33, v12, v5, v44, v34, v43);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v33, v40);
    }
    else
    {
      v32(v20, v13);
      uint64_t v35 = (uint64_t)v42;
      sub_25A4BE8D4((uint64_t)v42, v12, v5, v44, v41, v43);
      return ((uint64_t (*)(uint64_t, uint64_t))v32)(v35, v13);
    }
  }
}

uint64_t type metadata accessor for ConcatenateCollection.Index.Implementation()
{
  return swift_getGenericMetadata();
}

uint64_t ConcatenateCollection.endIndex.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  sub_25A50F620();
  sub_25A4BEA28((uint64_t)v9, a1[2], v5, a1[4], v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t ConcatenateCollection.subscript.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v34 = a3;
  uint64_t v4 = a2[5];
  uint64_t v5 = a2[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v32 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v30 - v7;
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[2];
  uint64_t v30 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v13 = (char *)&v30 - v12;
  v35[0] = v10;
  v35[1] = v5;
  v35[2] = v9;
  v35[3] = v4;
  uint64_t v14 = type metadata accessor for ConcatenateCollection.Index.Implementation();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v30 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v30 - v15, v33, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = v31;
    uint64_t v18 = v32;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v8, v16, v32);
    uint64_t v20 = (void (*)(void *, void))sub_25A50F730();
    uint64_t v22 = v21;
    uint64_t v23 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v34, v22, v23);
    v20(v35, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v8, v18);
  }
  else
  {
    uint64_t v25 = v30;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v30);
    uint64_t v26 = (void (*)(void *, void))sub_25A50F730();
    uint64_t v28 = v27;
    uint64_t v29 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v34, v28, v29);
    v26(v35, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v25);
  }
}

void (*sub_25A4BF7FC(uint64_t **a1, uint64_t a2, void *a3))(void *a1)
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_25A4BF86C(v6, a2, a3);
  return sub_25A3AC394;
}

void (*sub_25A4BF86C(uint64_t *a1, uint64_t a2, void *a3))(void *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  ConcatenateCollection.subscript.getter(a2, a3, (uint64_t)v8);
  return sub_25A3AC494;
}

uint64_t sub_25A4BF948@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ConcatenateCollection.Index();
  uint64_t v2 = sub_25A50FA40();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_25A4BF9CC(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 32);
  v10[0] = *(_OWORD *)(a2 + 16);
  v10[1] = v4;
  uint64_t v5 = type metadata accessor for ConcatenateCollection.Index();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v10 - v7;
  ConcatenateCollection.index(after:)(a1, (void *)a2, (uint64_t)v10 - v7);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v8, v5);
}

uint64_t sub_25A4BFAD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 32);
  v13[0] = *(_OWORD *)(a1 + 16);
  v13[1] = v5;
  uint64_t v6 = type metadata accessor for ConcatenateCollection.Index();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v13 - v8;
  uint64_t v10 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a2, v2, a1);
  ConcatenateCollection.startIndex.getter((void *)a1, (uint64_t)v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t v11 = sub_25A50FFC0();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2 + *(int *)(v11 + 36), v9, v6);
}

uint64_t sub_25A4BFC50(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_25A4BFCA4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t ConcatenateCollection<>.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v57 = a5;
  uint64_t v56 = a1;
  uint64_t v49 = a4;
  uint64_t v7 = *(void *)(a4 + 8);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v53 = *(void (***)(char *, char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v48 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v52 = (char *)&v44 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v50 = (char *)&v44 - v14;
  uint64_t v51 = a2;
  uint64_t v55 = a3;
  uint64_t v15 = *(void *)(a3 + 8);
  uint64_t v16 = *(void *)(a2 + 16);
  uint64_t v54 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v54 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v54);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v44 - v21;
  uint64_t v60 = v16;
  uint64_t v61 = v8;
  uint64_t v58 = v8;
  uint64_t v59 = v7;
  uint64_t v62 = v15;
  uint64_t v63 = v7;
  uint64_t v23 = type metadata accessor for ConcatenateCollection.Index.Implementation();
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v44 - v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))((char *)&v44 - v24, v56, v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v45 = v20;
    uint64_t v46 = v22;
    uint64_t v47 = v17;
    uint64_t v56 = v16;
    uint64_t v27 = v53;
    uint64_t v28 = v50;
    v53[2](v50, v25, AssociatedTypeWitness);
    uint64_t v29 = v52;
    sub_25A50F5E0();
    swift_getAssociatedConformanceWitness();
    char v30 = sub_25A50EBE0();
    uint64_t v31 = (void (**)(char *, char *, uint64_t))v27[1];
    ((void (*)(char *, uint64_t))v31)(v29, AssociatedTypeWitness);
    ((void (*)(char *, uint64_t))v31)(v28, AssociatedTypeWitness);
    uint64_t v32 = v57;
    if (v30)
    {
      uint64_t v33 = v45;
      uint64_t v34 = v56;
      sub_25A50F620();
      v53 = v31;
      uint64_t v35 = (uint64_t)v46;
      sub_25A50EA70();
      uint64_t v36 = *(void (**)(char *, uint64_t))(v47 + 8);
      uint64_t v37 = v54;
      v36(v33, v54);
      sub_25A4BE8D4(v35, v34, v58, v15, v59, v57);
      v36((char *)v35, v37);
      return ((uint64_t (*)(char *, uint64_t))v53)(v25, AssociatedTypeWitness);
    }
    else
    {
      uint64_t v41 = v52;
      v53[4](v52, v25, AssociatedTypeWitness);
      uint64_t v42 = (uint64_t)v48;
      uint64_t v43 = v58;
      sub_25A50EA70();
      ((void (*)(char *, uint64_t))v31)(v41, AssociatedTypeWitness);
      sub_25A4BEA28(v42, v56, v43, v15, v59, v32);
      return ((uint64_t (*)(uint64_t, uint64_t))v31)(v42, AssociatedTypeWitness);
    }
  }
  else
  {
    uint64_t v39 = v54;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v25, v54);
    sub_25A50EA70();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v17 + 8);
    v40(v22, v39);
    sub_25A4BE8D4((uint64_t)v20, v16, v58, v15, v59, v57);
    return ((uint64_t (*)(char *, uint64_t))v40)(v20, v39);
  }
}

uint64_t sub_25A4C0218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ConcatenateCollection<>.index(before:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), a4);
}

uint64_t sub_25A4C0224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 16);
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = *(void *)(v6 + 8);
  long long v14 = *(_OWORD *)(a2 + 16);
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v9 = type metadata accessor for ConcatenateCollection.Index();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v14 - v11;
  ConcatenateCollection<>.index(before:)(a1, a2, v5, v6, (uint64_t)&v14 - v11);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v12, v9);
}

uint64_t ConcatenateCollection<>.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v71 = a2;
  uint64_t v67 = a1;
  uint64_t v65 = a6;
  uint64_t v62 = a5;
  uint64_t v8 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v68 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v61 = (uint64_t)&v56 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v56 - v14;
  uint64_t v66 = a4;
  uint64_t v16 = *(void *)(*(void *)(a4 + 8) + 8);
  uint64_t v63 = a3;
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v60 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v56 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v56 - v25;
  uint64_t v72 = v17;
  uint64_t v73 = v9;
  uint64_t v74 = v16;
  uint64_t v75 = v8;
  uint64_t v69 = v8;
  uint64_t v27 = type metadata accessor for ConcatenateCollection.Index.Implementation();
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v56 - v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))((char *)&v56 - v28, v67, v27);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v57 = v24;
    uint64_t v58 = v18;
    uint64_t v59 = v19;
    uint64_t v61 = v17;
    uint64_t v67 = v16;
    uint64_t v31 = v70;
    uint64_t v32 = AssociatedTypeWitness;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v68, v29, AssociatedTypeWitness);
    uint64_t v33 = v69;
    sub_25A50F5E0();
    uint64_t v34 = sub_25A50F570();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v31 + 8);
    uint64_t v36 = v31 + 8;
    v35(v15, v32);
    uint64_t v37 = v33;
    if (v34 <= v71)
    {
      uint64_t v50 = v68;
      sub_25A50F560();
      v35(v50, v32);
      sub_25A4BEA28((uint64_t)v15, v61, v9, v67, v33, v65);
      return ((uint64_t (*)(char *, uint64_t))v35)(v15, v32);
    }
    uint64_t v70 = v36;
    uint64_t v38 = v60;
    uint64_t v39 = v61;
    uint64_t v40 = v67;
    uint64_t v41 = v68;
    uint64_t result = sub_25A50F620();
    if (!__OFSUB__(v71, v34))
    {
      uint64_t v43 = (uint64_t)v57;
      sub_25A50F560();
      uint64_t v44 = v58;
      uint64_t v45 = *(void (**)(char *, uint64_t))(v59 + 8);
      v45(v38, v58);
      v35(v41, AssociatedTypeWitness);
      sub_25A4BE8D4(v43, v39, v9, v40, v37, v65);
      return ((uint64_t (*)(uint64_t, uint64_t))v45)(v43, v44);
    }
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v68 = v15;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v26, v29, v18);
  sub_25A50F620();
  uint64_t v46 = sub_25A50F570();
  uint64_t v49 = *(void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v48 = v19 + 8;
  uint64_t v47 = v49;
  v49(v24, v18);
  if (v46 > v71)
  {
    sub_25A50F560();
    v47(v26, v18);
    sub_25A4BE8D4((uint64_t)v24, v17, v9, v16, v69, v65);
    return ((uint64_t (*)(char *, uint64_t))v47)(v24, v18);
  }
  uint64_t v59 = v48;
  uint64_t v67 = v16;
  uint64_t v51 = v61;
  uint64_t v52 = v69;
  uint64_t result = sub_25A50F5E0();
  if (__OFSUB__(v71, v46))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v53 = (uint64_t)v68;
  sub_25A50F560();
  uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
  uint64_t v55 = AssociatedTypeWitness;
  v54(v51, AssociatedTypeWitness);
  v47(v26, v18);
  sub_25A4BEA28(v53, v17, v9, v67, v52, v65);
  return ((uint64_t (*)(uint64_t, uint64_t))v54)(v53, v55);
}

char *ConcatenateCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = a2;
  uint64_t v57 = a5;
  uint64_t v58 = a1;
  uint64_t v7 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v54 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v62 = (char *)v53 - v13;
  uint64_t v56 = a4;
  uint64_t v14 = *(void *)(*(void *)(a4 + 8) + 8);
  v53[3] = a3;
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = (void *)swift_getAssociatedTypeWitness();
  uint64_t v61 = (void *)*(v16 - 1);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v60 = (char *)v53 - v20;
  v53[1] = v7;
  v53[2] = v15;
  uint64_t v63 = v15;
  uint64_t v64 = v8;
  uint64_t v55 = v8;
  v53[0] = v14;
  uint64_t v65 = v14;
  uint64_t v66 = v7;
  uint64_t v21 = type metadata accessor for ConcatenateCollection.Index.Implementation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v23 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v25 = (char *)v53 - v24;
  uint64_t v26 = (char *)v53 + *(int *)(v23 + 56) - v24;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16);
  v27((char *)v53 - v24, v58, v21);
  v27(v26, v59, v21);
  LODWORD(v27) = swift_getEnumCaseMultiPayload();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (v27 != 1)
  {
    uint64_t v36 = v62;
    uint64_t v37 = (void (*)(char *, uint64_t))v61[4];
    ((void (*)(char *, char *, void *))v37)(v60, v25, v16);
    if (EnumCaseMultiPayload != 1)
    {
LABEL_11:
      ((void (*)(char *, char *, void *))v37)(v19, v26, v16);
      uint64_t v50 = v60;
      uint64_t v26 = (char *)sub_25A50F570();
      uint64_t v51 = (void (*)(char *, void *))v61[1];
      v51(v19, v16);
      v51(v50, v16);
      return v26;
    }
    uint64_t v38 = v16;
    uint64_t v39 = v10;
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v31 = v36;
    uint64_t v41 = AssociatedTypeWitness;
    v40(v36, v26, AssociatedTypeWitness);
    sub_25A50F620();
    uint64_t v42 = v60;
    uint64_t v59 = sub_25A50F570();
    uint64_t AssociatedTypeWitness = (uint64_t)(v61 + 1);
    uint64_t v16 = (void *)v61[1];
    uint64_t v30 = v38;
    ((void (*)(char *, void *))v16)(v19, v38);
    uint64_t v43 = v54;
    sub_25A50F5E0();
    uint64_t v19 = (char *)sub_25A50F570();
    uint64_t v44 = *(void (**)(char *, uint64_t))(v39 + 8);
    v44(v43, v41);
    v44(v31, v41);
    ((void (*)(char *, void *))v16)(v42, v30);
    uint64_t v26 = &v19[v59];
    if (!__OFADD__(v59, v19)) {
      return v26;
    }
    __break(1u);
LABEL_8:
    ((void (*)(char *, char *, void *))v30[4])(v31, v26, v16);
    uint64_t v45 = v54;
    sub_25A50F5E0();
    uint64_t v58 = sub_25A50F570();
    uint64_t v46 = *(void (**)(char *, uint64_t))(v59 + 8);
    v46(v45, AssociatedTypeWitness);
    uint64_t v37 = v46;
    sub_25A50F620();
    uint64_t v47 = sub_25A50F570();
    uint64_t v48 = (void (*)(char *, void *))v30[1];
    v48(v19, v16);
    v48(v31, v16);
    v37(v62, AssociatedTypeWitness);
    BOOL v49 = __OFADD__(v58, v47);
    uint64_t v26 = (char *)(v58 + v47);
    if (!v49) {
      return v26;
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v29 = v10;
  uint64_t v31 = v60;
  uint64_t v30 = v61;
  uint64_t v59 = v29;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  v32(v62, v25, AssociatedTypeWitness);
  if (EnumCaseMultiPayload != 1) {
    goto LABEL_8;
  }
  uint64_t v33 = v54;
  v32(v54, v26, AssociatedTypeWitness);
  uint64_t v34 = v62;
  uint64_t v26 = (char *)sub_25A50F570();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v59 + 8);
  v35(v33, AssociatedTypeWitness);
  v35(v34, AssociatedTypeWitness);
  return v26;
}

uint64_t sub_25A4C0FA0()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4C0FBC()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4C0FD8()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4C0FF4()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4C1010()
{
  return sub_25A4C110C();
}

uint64_t sub_25A4C103C()
{
  return sub_25A4C110C();
}

uint64_t sub_25A4C1068()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4C10B4()
{
  return sub_25A4C110C();
}

uint64_t sub_25A4C10E0()
{
  return sub_25A4C110C();
}

uint64_t sub_25A4C110C()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4C1164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ConcatenateCollection<>.index(_:offsetBy:)(a1, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

char *sub_25A4C1170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ConcatenateCollection<>.distance(from:to:)(a1, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t sub_25A4C117C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_25A4C1374(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x25A4C1640);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ConcatenateCollection()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A4C1680()
{
  uint64_t result = type metadata accessor for ConcatenateCollection.Index.Implementation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ConcatenateCollection.Index()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A4C1750()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_25A4C1844(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v10 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v5 + 80));
  if (v10 <= 7 && v9 + 1 <= 0x18 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) == 0)
  {
    unsigned int v14 = a2[v9];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_21;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_21:
          int v18 = (v17 | (v15 << (8 * v9))) + 2;
          unsigned int v14 = v17 + 2;
          if (v9 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      *((unsigned char *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((unsigned char *)a1 + v9) = 0;
    }
  }
  else
  {
    uint64_t v13 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t sub_25A4C1A7C(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  unint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  if (v6 <= v4) {
    unint64_t v6 = v4;
  }
  unsigned int v7 = a1[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_12;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_12:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 1) {
    uint64_t v12 = *(void *)(v5 - 8);
  }
  else {
    uint64_t v12 = v3;
  }
  if (v7 == 1) {
    uint64_t v13 = v5;
  }
  else {
    uint64_t v13 = AssociatedTypeWitness;
  }
  unsigned int v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v12 + 8);

  return v14(a1, v13);
}

uint64_t sub_25A4C1C44(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  BOOL v15 = v10 == 1;
  if (v10 == 1)
  {
    uint64_t v16 = v7;
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v16 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v16);
  *(unsigned char *)(a1 + v9) = v15;
  return a1;
}

unsigned __int8 *sub_25A4C1E14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) <= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v16 = v5;
    }
    if (v11 == 1) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v5;
    }
    if (v18 == 1) {
      uint64_t v25 = v8;
    }
    else {
      uint64_t v25 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v25);
    a1[v10] = v23;
  }
  return a1;
}

uint64_t sub_25A4C209C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  BOOL v15 = v10 == 1;
  if (v10 == 1)
  {
    uint64_t v16 = v7;
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v16 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v16);
  *(unsigned char *)(a1 + v9) = v15;
  return a1;
}

unsigned __int8 *sub_25A4C226C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) <= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v16 = v5;
    }
    if (v11 == 1) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v5;
    }
    if (v18 == 1) {
      uint64_t v25 = v8;
    }
    else {
      uint64_t v25 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 32))(a1, a2, v25);
    a1[v10] = v23;
  }
  return a1;
}

uint64_t sub_25A4C24F4(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_23;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v11 < 2)
    {
LABEL_23:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 2) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_23;
  }
LABEL_15:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 255;
}

void sub_25A4C26A8(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  size_t v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v10 = a2 - 255;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v7 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x25A4C28D0);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25A4C28F8(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v3 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2) {
    unint64_t v3 = v2;
  }
  uint64_t result = a1[v3];
  if (result >= 2)
  {
    if (v3 <= 3) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | ((result - 2) << (8 * v3))) + 2;
        unsigned int v8 = v6 + 2;
        if (v3 >= 4) {
          uint64_t result = v8;
        }
        else {
          uint64_t result = v7;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_25A4C2A28(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  if (a2 > 1)
  {
    size_t v7 = *(void *)(v4 + 64);
    size_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v8 <= v7) {
      size_t v9 = v7;
    }
    else {
      size_t v9 = v8;
    }
    unsigned int v10 = a2 - 2;
    if (v9 < 4)
    {
      unsigned int v11 = v10 >> (8 * v9);
      int v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 2;
      bzero(a1, v9);
      if (v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if (v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
    else
    {
      a1[v9] = 2;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }
  else
  {
    unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v6 <= *(void *)(v5 + 64)) {
      unint64_t v6 = *(void *)(v5 + 64);
    }
    a1[v6] = a2;
  }
}

uint64_t sub_25A4C2BAC()
{
  return swift_getWitnessTable();
}

uint64_t Optional.flatten<A>(inner:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x270FA5388](a1);
  unint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v8, a2);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 16) - 8) + 56))(a3, 1, 1);
  }
  else {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v6, v9);
  }
}

uint64_t Optional.described.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1) {
    return 7104878;
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v7, v1);
  v11[0] = 0;
  v11[1] = 0xE000000000000000;
  sub_25A510310();
  uint64_t v9 = v11[0];
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v9;
}

uint64_t InvalidationHandle.__allocating_init(dsoHandle:file:line:column:function:name:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16 = swift_allocObject();
  type metadata accessor for SingleFireEvent();
  swift_allocObject();
  *(void *)(v16 + 96) = SingleFireEvent.init(description:)(0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416AF8);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 28) = 0;
  *(void *)(v17 + 16) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v17 + 24) = 0;
  *(void *)(v16 + 104) = v17;
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  *(unsigned char *)(v16 + 32) = a4;
  *(void *)(v16 + 40) = a5;
  *(void *)(v16 + 48) = a6;
  *(void *)(v16 + 56) = a7;
  *(void *)(v16 + 64) = a8;
  *(unsigned char *)(v16 + 72) = a9;
  *(void *)(v16 + 80) = a10;
  *(void *)(v16 + 88) = a11;
  return v16;
}

uint64_t Invalidatable.invalidate(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  return sub_25A4C4F5C(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t Invalidatable.onInvalidation(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4) + 96) + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
  sub_25A3C5BDC((void *)(v5 + 16), (uint64_t)&v9);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
  uint64_t v6 = swift_release();
  uint64_t v7 = v9;
  if (v9)
  {
    sub_25A502680((uint64_t)&v9);
    sub_25A3901A8(v7);
  }
  else if (v10)
  {
    a1(v6);
  }
  return swift_release();
}

uint64_t sub_25A4C3120@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_25A3C7528(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = &v5[a1];
    uint64_t v10 = v8[4];
    uint64_t v9 = v8 + 4;
    *a2 = v10;
    uint64_t v11 = v6 - 1 - a1;
    if (v11 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v9, v9 + 1, 8 * v11);
      uint64_t v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A4C3200@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_25A3C7C0C(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    sub_25A3C5C28((uint64_t)&v5[18 * a1 + 4], (uint64_t)v9);
    sub_25A3C5C28((uint64_t)v9, a2);
    if ((uint64_t)(v7 - a1) >= 0)
    {
      uint64_t result = (uint64_t)memmove(&v5[18 * a1 + 4], &v5[18 * a1 + 22], 144 * (v7 - a1));
      uint64_t v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t Invalidatable.observeInvalidation(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  SingleFireEvent.observe(_:)(a1, a4);

  return swift_release();
}

uint64_t Invalidatable.observeInvalidation(on:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *(void **)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  int v13 = (void *)swift_allocObject();
  _OWORD v13[2] = v11;
  v13[3] = v12;
  v13[4] = a2;
  v13[5] = a3;
  sub_25A3EE304(v11);
  int v14 = *(void (**)(uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  v14(a4, a5);
  SingleFireEvent.observe(_:)((uint64_t (*)(uint64_t))sub_25A4C5838, a6);
  swift_release();

  return swift_release();
}

uint64_t Invalidatable.trackInvalidation(dsoHandle:file:line:column:function:of:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(a12 + 8))(a11);
  uint64_t v17 = a10[3];
  uint64_t v18 = a10[4];
  __swift_project_boxed_opaque_existential_1(a10, v17);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v16;
  *(void *)(v19 + 24) = a2;
  *(void *)(v19 + 32) = a3;
  *(unsigned char *)(v19 + 40) = a4;
  *(void *)(v19 + 48) = a5;
  *(void *)(v19 + 56) = a6;
  *(void *)(v19 + 64) = a7;
  *(void *)(v19 + 72) = a8;
  *(unsigned char *)(v19 + 80) = a9;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  swift_retain();
  v20(v17, v18);
  SingleFireEvent.observe(_:)((uint64_t (*)(uint64_t))sub_25A4C5068, (uint64_t)&v26);
  swift_release();
  swift_release();
  uint64_t v21 = v26;
  if (v26)
  {
    swift_retain();
    swift_retain();
    sub_25A502680((uint64_t)&v26);
    sub_25A3901A8(v21);
    sub_25A3901A8(v21);
  }

  return swift_release();
}

uint64_t Invalidatable._bindInvalidation(dsoHandle:file:line:column:function:to:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v13[0] = a2;
  v13[1] = a3;
  char v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  uint64_t v18 = a8;
  char v19 = a9;
  return sub_25A4C3648((uint64_t)v13, a10, a11, a12);
}

uint64_t sub_25A4C3648(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v22 = *(void *)(result + 8);
    uint64_t v23 = *(void *)result;
    char v21 = *(unsigned char *)(result + 16);
    uint64_t v26 = *(void *)(result + 40);
    uint64_t v27 = *(void *)(result + 32);
    uint64_t v25 = *(void *)(result + 48);
    char v24 = *(unsigned char *)(result + 56);
    uint64_t v8 = (void *)(a2 + 32);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
    uint64_t v19 = *(void *)(result + 24);
    swift_bridgeObjectRetain();
    uint64_t v20 = a3;
    do
    {
      uint64_t v9 = v18(a3, a4);
      *(void *)&long long v29 = v23;
      *((void *)&v29 + 1) = v22;
      char v30 = v21;
      uint64_t v31 = v19;
      uint64_t v32 = v27;
      uint64_t v33 = v26;
      uint64_t v34 = v25;
      char v35 = v24;
      uint64_t v10 = v6;
      uint64_t v11 = v8[3];
      uint64_t v12 = v8[4];
      int v13 = __swift_project_boxed_opaque_existential_1(v8, v11);
      sub_25A4C4BAC((uint64_t)v13, &v29, v9, v11, v12);
      swift_release();
      uint64_t v14 = v8[3];
      uint64_t v15 = v8[4];
      __swift_project_boxed_opaque_existential_1(v8, v14);
      uint64_t v16 = v14;
      uint64_t v6 = v10;
      a3 = v20;
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
      *(void *)&long long v29 = v23;
      *((void *)&v29 + 1) = v22;
      char v30 = v21;
      uint64_t v31 = v19;
      uint64_t v32 = v27;
      uint64_t v33 = v26;
      uint64_t v34 = v25;
      char v35 = v24;
      sub_25A4C4BAC(v6, &v29, v17, v20, a4);
      swift_release();
      v8 += 5;
      --v5;
    }
    while (v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Invalidatable.onInvalidation(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v9;
  v11[3] = v10;
  v11[4] = a2;
  v11[5] = a3;
  sub_25A3EE304(v9);
  swift_retain();
  Invalidatable.onInvalidation(_:)((void (*)(uint64_t))sub_25A4C5078, (uint64_t)v11, a4, a5);

  return swift_release();
}

uint64_t sub_25A4C38E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  if (!a1) {
    return a3();
  }
  if (a1 != 1)
  {
    sub_25A3DD980();
    if (qword_26A415498 != -1) {
      swift_once();
    }
    sub_25A50F890();
    if ((v9 & 1) != 0 || v8 != a2) {
      return sub_25A3EDA1C((uint64_t (*)(uint64_t))a3, a4);
    }
    return a3();
  }
  if (objc_msgSend(self, sel_isMainThread)) {
    return a3();
  }
  return sub_25A3EDA1C((uint64_t (*)(uint64_t))a3, a4);
}

BOOL Invalidatable.isInvalidated.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(void))(a2 + 8))() + 96) + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 32));
  sub_25A4C4AE4((unint64_t *)(v2 + 16), &v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 32));
  unint64_t v3 = v5;
  swift_release();
  sub_25A4C5098(v3);
  swift_release();
  return v3 == 0;
}

uint64_t InvalidationHandle.init(dsoHandle:file:line:column:function:name:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  type metadata accessor for SingleFireEvent();
  swift_allocObject();
  *(void *)(v11 + 96) = SingleFireEvent.init(description:)(0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416AF8);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 28) = 0;
  *(void *)(v17 + 16) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v17 + 24) = 0;
  *(void *)(v11 + 104) = v17;
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  *(unsigned char *)(v11 + 32) = a4;
  *(void *)(v11 + 40) = a5;
  *(void *)(v11 + 48) = a6;
  *(void *)(v11 + 56) = a7;
  *(void *)(v11 + 64) = a8;
  *(unsigned char *)(v11 + 72) = a9;
  *(void *)(v11 + 80) = a10;
  *(void *)(v11 + 88) = a11;
  return v11;
}

uint64_t InvalidationHandle.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(*(void *)(v0 + 96) + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 32));
  sub_25A4C4AE4((unint64_t *)(v2 + 16), v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 32));
  unint64_t v3 = v5[0];
  swift_release();
  sub_25A4C5098(v3);
  if (v3)
  {
    v5[0] = (unint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Pre"
                              "viewsFoundation/Invalidatable.swift";
    v5[1] = 125;
    char v6 = 2;
    long long v7 = xmmword_25A51BAF0;
    uint64_t v8 = "deinit";
    uint64_t v9 = 6;
    char v10 = 2;
    sub_25A403498();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t InvalidationHandle.__deallocating_deinit()
{
  InvalidationHandle.deinit();

  return MEMORY[0x270FA0228](v0, 112, 7);
}

uint64_t sub_25A4C3C90(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_25A3C5C28(a3, (uint64_t)v7);
  swift_retain();
  sub_25A4C542C((uint64_t)v7, a4, a1);
  return swift_release();
}

uint64_t sub_25A4C3CF8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 28));
  sub_25A4C56EC((uint64_t *)(v3 + 16), v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 28));
  unint64_t v4 = v22[0];
  uint64_t result = swift_release();
  if (v4)
  {
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = sub_25A510100();
      uint64_t v6 = result;
      if (result) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v6)
      {
LABEL_4:
        if (v6 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v7 = 0;
        unint64_t v13 = v4 & 0xC000000000000001;
        unint64_t v15 = v4;
        uint64_t v14 = v6;
        do
        {
          if (v13)
          {
            uint64_t v8 = MEMORY[0x26113DE30](v7, v4);
            uint64_t v9 = v8;
          }
          else
          {
            uint64_t v9 = *(void *)(v4 + 8 * v7 + 32);
            uint64_t v8 = swift_retain();
          }
          uint64_t v10 = *(void *)(v9 + 16);
          uint64_t v17 = v2;
          long long v18 = 0u;
          long long v19 = 0u;
          long long v20 = 0u;
          __int16 v21 = 0;
          uint64_t v11 = *(void *)(v10 + 104);
          MEMORY[0x270FA5388](v8);
          swift_bridgeObjectRetain();
          swift_retain();
          os_unfair_lock_lock((os_unfair_lock_t)(v11 + 76));
          sub_25A4C5708((void *)(v11 + 16), &v16);
          os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 76));
          BOOL v12 = v16;
          swift_release();
          if (v12)
          {
            sub_25A39F4F8((uint64_t)&v17, (uint64_t)v22, &qword_26A415D08);
            sub_25A39E8E4((uint64_t)v22);
          }
          swift_release();
          swift_bridgeObjectRelease();
          unint64_t v4 = v15;
          ++v7;
        }
        while (v14 != v7);
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t sub_25A4C3FBC(uint64_t a1, long long *a2)
{
  char v2 = *((unsigned char *)a2 + 16);
  char v3 = *((unsigned char *)a2 + 56);
  char v4 = *(unsigned char *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)(a1 + 80);
  v9[1] = v6;
  char v10 = v4;
  long long v11 = *(_OWORD *)(a1 + 40);
  long long v12 = *(_OWORD *)(a1 + 56);
  char v13 = v5;
  long long v14 = *a2;
  char v15 = v2;
  long long v16 = *(long long *)((char *)a2 + 24);
  long long v17 = *(long long *)((char *)a2 + 40);
  char v18 = v3;
  sub_25A3C5C10((uint64_t)v9);
  sub_25A3C5C28((uint64_t)v9, (uint64_t)v8);
  return sub_25A502340((void (*)(uint64_t (*)(), void *))sub_25A4C5840);
}

uint64_t CancellationToken.manage(using:)()
{
  uint64_t v1 = *((void *)v0 + 2);
  long long v3 = *v0;
  uint64_t v4 = v1;
  return sub_25A502680((uint64_t)&v3);
}

{
  long long *v0;
  uint64_t v1;
  long long v3;
  uint64_t v4;

  uint64_t v1 = *((void *)v0 + 2);
  long long v3 = *v0;
  uint64_t v4 = v1;
  return sub_25A502680((uint64_t)&v3);
}

void sub_25A4C40C4()
{
  off_26A41B0B0 = (_UNKNOWN *)MEMORY[0x263F8EE78];
}

id sub_25A4C40D8()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08AE0]), sel_init);
  qword_26A41B0B8 = (uint64_t)result;
  return result;
}

uint64_t sub_25A4C410C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1[1])
  {
    uint64_t result = sub_25A403498();
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = *a1;
    *a1 = a2;
    *((unsigned char *)a1 + 8) = 1;
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a3 = v5;
  return result;
}

uint64_t CancellationToken.cancelOnInvalidation(of:)(void *a1)
{
  uint64_t v2 = *((void *)v1 + 2);
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  long long v6 = *v1;
  uint64_t v7 = v2;
  sub_25A502680((uint64_t)&v6);

  return swift_release();
}

uint64_t bindInvalidation(of:_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v6[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Invalidatable.swift";
  v6[1] = 125;
  char v7 = 2;
  long long v8 = xmmword_25A51BB10;
  uint64_t v9 = "bindInvalidation(of:_:)";
  uint64_t v10 = 23;
  char v11 = 2;
  return sub_25A4C3648((uint64_t)v6, a2, v3, v4);
}

uint64_t Invalidatable.bindInvalidation(of:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v12[3] = a2;
  v12[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, v4, a2);
  ConcurrentInvalidatable.trackInvalidation(of:)((uint64_t)v12, v8, v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return Invalidatable.trackInvalidation(of:)((uint64_t)a1, a2, a3);
}

uint64_t ConcurrentInvalidatable.trackInvalidation(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = (void *)MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v8[3];
  uint64_t v11 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, a2);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, v9, a2);
  Invalidatable.onInvalidation(_:)((void (*)(uint64_t))sub_25A4C5164, v13, v10, v11);
  return swift_release();
}

uint64_t Invalidatable.trackInvalidation(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  uint64_t v10 = sub_25A50F2A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  sub_25A3990F8(a1, (uint64_t)v14);
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = 0;
  v11[3] = 0;
  sub_25A3C85D8(v14, (uint64_t)(v11 + 4));
  v11[9] = v9;
  sub_25A38ED10((uint64_t)v8, (uint64_t)&unk_26A41B0C8, (uint64_t)v11);
  return swift_release();
}

uint64_t sub_25A4C4634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 608) = a5;
  *(void *)(v5 + 600) = a4;
  return MEMORY[0x270FA2498](sub_25A4C4658, 0, 0);
}

uint64_t sub_25A4C4658()
{
  uint64_t v1 = *(void **)(v0 + 600);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_25A4C471C;
  return ConcurrentInvalidatable.invalidationTrace.getter(v0 + 592, v2, v3);
}

uint64_t sub_25A4C471C()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A4C4818, 0, 0);
}

uint64_t sub_25A4C4818()
{
  uint64_t v1 = (_OWORD *)(v0 + 488);
  uint64_t v2 = *(void *)(v0 + 592);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    long long v16 = "trackInvalidation(of:)";
    char v14 = 2;
    uint64_t v11 = 22;
    uint64_t v15 = 102;
    uint64_t v9 = 295;
    uint64_t v8 = 125;
    char v12 = 2;
    uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Invalidatable.swift";
    goto LABEL_8;
  }
  sub_25A3C5C28(v2 + 144 * v3 - 112, v0 + 304);
  sub_25A401A20(v0 + 304, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_25A40142C);
  swift_bridgeObjectRelease();
  sub_25A3C5C28(v0 + 304, v0 + 160);
  int v4 = sub_25A401A94(v0 + 160);
  uint64_t v5 = sub_25A401AA0(v0 + 160);
  uint64_t v6 = v5;
  if (v4 == 1)
  {
    uint64_t v7 = *(const char **)(v5 + 16);
    uint64_t v8 = *(void *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 40);
    uint64_t v10 = *(const char **)(v5 + 56);
    uint64_t v26 = *(void *)(v5 + 48);
    uint64_t v27 = *(void *)(v5 + 32);
    uint64_t v11 = *(void *)(v5 + 64);
    char v12 = *(unsigned char *)(v5 + 72);
    char v13 = *(unsigned char *)(v5 + 73);
    sub_25A401A20(v0 + 304, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_25A401A8C);
    uint64_t v1 = (_OWORD *)(v0 + 488);
    if ((v13 & 1) == 0)
    {
      uint64_t v15 = v26;
      char v14 = v27;
      long long v16 = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_25A401A20(v0 + 304, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_25A401A8C);
  uint64_t v7 = *(const char **)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 88);
  char v14 = *(unsigned char *)(v6 + 96);
  uint64_t v9 = *(void *)(v6 + 104);
  uint64_t v15 = *(void *)(v6 + 112);
  long long v16 = *(const char **)(v6 + 120);
  uint64_t v11 = *(void *)(v6 + 128);
  char v12 = *(unsigned char *)(v6 + 136);
  uint64_t v1 = (_OWORD *)(v0 + 488);
LABEL_8:
  uint64_t v17 = *(void *)(v0 + 608);
  char v18 = *(unsigned char *)(v17 + 32);
  char v19 = *(unsigned char *)(v17 + 72);
  long long v20 = *(_OWORD *)(v17 + 16);
  long long v21 = *(_OWORD *)(v17 + 40);
  long long v22 = *(_OWORD *)(v17 + 56);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v17 + 80);
  *(_OWORD *)(v0 + 464) = v20;
  *(unsigned char *)(v0 + 480) = v18;
  *uint64_t v1 = v21;
  v1[1] = v22;
  *(unsigned char *)(v0 + 520) = v19;
  *(void *)(v0 + 528) = v7;
  *(void *)(v0 + 536) = v8;
  *(unsigned char *)(v0 + 544) = v14;
  *(void *)(v0 + 552) = v9;
  *(void *)(v0 + 560) = v15;
  *(void *)(v0 + 568) = v16;
  *(void *)(v0 + 576) = v11;
  *(unsigned char *)(v0 + 584) = v12;
  sub_25A3C5C10(v0 + 448);
  sub_25A3C5C28(v0 + 448, v0 + 16);
  uint64_t v23 = swift_task_alloc();
  *(void *)(v23 + 16) = v0 + 16;
  *(void *)(v23 + 24) = v17;
  sub_25A502340((void (*)(uint64_t (*)(), void *))sub_25A3C5C84);
  swift_task_dealloc();
  char v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_25A4C4A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v5 = MEMORY[0x263F8EE78];
  AnyInvalidatable.invalidate(file:line:column:function:trace:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Invalidatable.swift", 125, 2, 305, 28, (uint64_t)"trackInvalidation(of:)", 22, 2, &v5, a2, v4);

  return swift_bridgeObjectRelease();
}

unint64_t sub_25A4C4AE4@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return sub_25A4C57B8(v3);
}

uint64_t sub_25A4C4B18@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v5 = v3[2];
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v5 - 1;
      sub_25A3C5C28((uint64_t)&v3[18 * v5 - 14], (uint64_t)v7);
      sub_25A3C5C28((uint64_t)v7, a1);
      v3[2] = v6;
      *uint64_t v1 = v3;
      return nullsub_1(a1);
    }
  }
  else
  {
    uint64_t result = (uint64_t)sub_25A3C7C0C(v3);
    unint64_t v3 = (void *)result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_25A4C4BAC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  long long v13 = a2[1];
  *(_OWORD *)(v12 + 24) = *a2;
  *(_OWORD *)(v12 + 40) = v13;
  *(_OWORD *)(v12 + 56) = a2[2];
  *(_OWORD *)(v12 + 65) = *(_OWORD *)((char *)a2 + 41);
  char v14 = *(void (**)(uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  v14(a4, a5);
  SingleFireEvent.observe(_:)((uint64_t (*)(uint64_t))sub_25A4C5844, (uint64_t)&v18);
  swift_release();
  swift_release();
  uint64_t v15 = v18;
  if (v18)
  {
    swift_retain();
    swift_retain();
    sub_25A502680((uint64_t)&v18);
    sub_25A3901A8(v15);
    sub_25A3901A8(v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a4);
}

void *sub_25A4C4D8C@<X0>(void *result@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(unsigned __int8 *)(a2 + 56);
  int v12 = *(unsigned __int8 *)(a2 + 57);
  uint64_t v13 = *((unsigned __int16 *)result + 28);
  unsigned int v14 = v13 >> 8;
  if (v13 >> 8 < 0xFF)
  {
    if (v14 != 2 && v12 != 2)
    {
      long long v16 = (void *)*result;
      uint64_t v25 = result[1];
      uint64_t v23 = result[3];
      uint64_t v24 = result[2];
      uint64_t v21 = result[5];
      uint64_t v22 = result[4];
      uint64_t v20 = result[6];
      unsigned int v19 = *(unsigned __int8 *)(a2 + 56);
      uint64_t v17 = *(void *)(a2 + 40);
      uint64_t v18 = *(void *)(a2 + 48);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B0D8);
      sub_25A4C5724();
      swift_allocError();
      *(void *)uint64_t v15 = v16;
      *(void *)(v15 + 8) = v25;
      *(void *)(v15 + 16) = v24;
      *(void *)(v15 + 24) = v23;
      *(void *)(v15 + 32) = v22;
      *(void *)(v15 + 40) = v21;
      *(void *)(v15 + 48) = v20;
      *(_WORD *)(v15 + 56) = v13;
      *(void *)(v15 + 64) = v5;
      *(void *)(v15 + 72) = v4;
      *(void *)(v15 + 80) = v7;
      *(void *)(v15 + 88) = v6;
      *(void *)(v15 + 96) = v9;
      *(void *)(v15 + 104) = v17;
      *(void *)(v15 + 112) = v18;
      *(unsigned char *)(v15 + 120) = v19;
      *(unsigned char *)(v15 + 121) = v12;
      sub_25A39F434(v5, v4, v7, v6, v9, v17, v18, v19, v12);
      sub_25A4C5780(v16, v25, v24, v23, v22, v21, v20, v13);
      return (void *)swift_willThrow();
    }
  }
  else
  {
    *uint64_t result = v5;
    result[1] = v4;
    result[2] = v7;
    result[3] = v6;
    result[4] = v9;
    result[5] = v8;
    result[6] = v10;
    *((_WORD *)result + 28) = v11 | ((_WORD)v12 << 8);
    uint64_t result = sub_25A39F434(v5, v4, v7, v6, v9, v8, v10, v11, v12);
  }
  *a3 = v14 > 0xFE;
  return result;
}

uint64_t sub_25A4C4F5C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(a10 + 8))(a9);
  char v19 = *(unsigned char *)(v18 + 32);
  char v20 = *(unsigned char *)(v18 + 72);
  long long v21 = *(_OWORD *)(v18 + 16);
  v24[0] = *(_OWORD *)(v18 + 80);
  v24[1] = v21;
  char v25 = v19;
  long long v26 = *(_OWORD *)(v18 + 40);
  long long v27 = *(_OWORD *)(v18 + 56);
  char v28 = v20;
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  char v31 = a3;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  char v36 = a8;
  sub_25A3C5C10((uint64_t)v24);
  sub_25A3C5C28((uint64_t)v24, (uint64_t)v23);
  sub_25A502340((void (*)(uint64_t (*)(), void *))sub_25A4C5840);
  return swift_release();
}

uint64_t sub_25A4C5068()
{
  return sub_25A4C3FBC(*(void *)(v0 + 16), (long long *)(v0 + 24));
}

uint64_t sub_25A4C5078()
{
  return sub_25A4C38E4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32), *(void *)(v0 + 40));
}

unint64_t sub_25A4C5098(unint64_t result)
{
  if (result >= 2)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A4C50DC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_25A4C5164()
{
  return sub_25A4C4A64(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_25A4C51A4()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_25A4C51EC()
{
  uint64_t v2 = v0 + 32;
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_25A38F608;
  v4[76] = v3;
  v4[75] = v2;
  return MEMORY[0x270FA2498](sub_25A4C4658, 0, 0);
}

uint64_t dispatch thunk of Invalidatable.invalidationHandle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for InvalidationHandle()
{
  return self;
}

uint64_t method lookup function for InvalidationHandle(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for InvalidationHandle);
}

uint64_t dispatch thunk of InvalidationHandle.__allocating_init(dsoHandle:file:line:column:function:name:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t initializeBufferWithCopyOfBuffer for InvalidationHandle.TraceStatus(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  j__swift_bridgeObjectRetain(*a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for InvalidationHandle.TraceStatus(uint64_t a1)
{
  return j__swift_bridgeObjectRelease(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t *assignWithCopy for InvalidationHandle.TraceStatus(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  j__swift_bridgeObjectRetain(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  j__swift_bridgeObjectRelease(v5, v6);
  return a1;
}

uint64_t *assignWithTake for InvalidationHandle.TraceStatus(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  j__swift_bridgeObjectRelease(v5, v6);
  return a1;
}

uint64_t sub_25A4C5408(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_25A4C5410(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InvalidationHandle.TraceStatus()
{
  return &type metadata for InvalidationHandle.TraceStatus;
}

id sub_25A4C542C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  sub_25A3C5C28(a1, (uint64_t)v16);
  if (qword_26A415690 != -1) {
    swift_once();
  }
  objc_msgSend((id)qword_26A41B0B8, sel_lock);
  if (qword_26A415688 != -1) {
    swift_once();
  }
  swift_beginAccess();
  char v4 = off_26A41B0B0;
  sub_25A401A20((uint64_t)v16, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_25A40142C);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  off_26A41B0B0 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v4 = sub_25A38AEB0(0, v4[2] + 1, 1, v4);
    off_26A41B0B0 = v4;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    char v4 = sub_25A38AEB0((void *)(v6 > 1), v7 + 1, 1, v4);
    off_26A41B0B0 = v4;
  }
  uint64_t v4[2] = v7 + 1;
  sub_25A3C5C28((uint64_t)v16, (uint64_t)&v4[18 * v7 + 4]);
  uint64_t v8 = off_26A41B0B0;
  swift_endAccess();
  v15[0] = (uint64_t)v8;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_25A4C3CF8(v15);
  a3(v9);
  swift_bridgeObjectRelease();
  id result = (id)swift_beginAccess();
  if (*((void *)off_26A41B0B0 + 2))
  {
    sub_25A4C4B18((uint64_t)v12);
    sub_25A39F4F8((uint64_t)v12, (uint64_t)v14, &qword_26A41B0D0);
    sub_25A39F4F8((uint64_t)v14, (uint64_t)v15, &qword_26A41B0D0);
    if (sub_25A4C56D4((uint64_t)v15) == 1)
    {
      sub_25A4C3200(*((void *)off_26A41B0B0 + 2) - 1, (uint64_t)v13);
    }
    else
    {
      sub_25A39F4F8((uint64_t)v14, (uint64_t)v11, &qword_26A41B0D0);
      sub_25A3C5C28((uint64_t)v11, (uint64_t)v13);
    }
    swift_endAccess();
    sub_25A3C5C28((uint64_t)v13, (uint64_t)v12);
    sub_25A401A20((uint64_t)v12, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_25A401A8C);
    return objc_msgSend((id)qword_26A41B0B8, sel_unlock);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_25A4C56D4(uint64_t a1)
{
  if ((*(void *)(a1 + 72) >> 9) > 0x80000000) {
    return -(*(void *)(a1 + 72) >> 9);
  }
  else {
    return 0;
  }
}

uint64_t sub_25A4C56EC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_25A4C410C(a1, *(void *)(v2 + 16), a2);
}

void *sub_25A4C5708@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_25A4C4D8C(a1, *(void *)(v2 + 16), a2);
}

unint64_t sub_25A4C5724()
{
  unint64_t result = qword_26A41B0E0[0];
  if (!qword_26A41B0E0[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A41B0D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A41B0E0);
  }
  return result;
}

id sub_25A4C5780(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (BYTE1(a8) != 255) {
    return sub_25A39F434(result, a2, a3, a4, a5, a6, a7, a8, SBYTE1(a8));
  }
  return result;
}

unint64_t sub_25A4C57B8(unint64_t result)
{
  if (result >= 2)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_25A4C57FC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 81, 7);
}

uint64_t ConcurrentFutureCache.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ConcurrentFutureCache.init()();
  return v0;
}

uint64_t ConcurrentFutureCache.init()()
{
  type metadata accessor for Future();
  swift_getTupleTypeMetadata2();
  sub_25A50F120();
  uint64_t v4 = sub_25A50E900();
  uint64_t v1 = sub_25A50E990();
  uint64_t v2 = sub_25A3EF560(&v4, v1);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t ConcurrentFutureCache.guaranteedValue(for:creatingIfNecessaryWith:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = (void *)*v2;
  void v21[2] = v2[2];
  uint64_t v16 = v5[10];
  uint64_t v17 = v5[11];
  uint64_t v18 = v5[12];
  uint64_t v19 = a1;
  type metadata accessor for Future();
  sub_25A50E990();
  uint64_t v6 = sub_25A50E5B0();
  type metadata accessor for Promise();
  sub_25A50FA40();
  swift_retain();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ConcurrentFutureCache.swift", 133, 2, 21, 47, (uint64_t)"guaranteedValue(for:creatingIfNecessaryWith:)", 45, 2, (uint64_t)sub_25A4C5D50, (uint64_t)v15, v6, TupleTypeMetadata2, WitnessTable);
  swift_release();
  uint64_t v9 = v21[3];
  if (v21[4])
  {
    uint64_t v10 = swift_retain();
    uint64_t v11 = a2(v10);
    if (v3)
    {
      swift_release();
      swift_release_n();
    }
    else
    {
      uint64_t v12 = v11;
      sub_25A41B150(v21);
      uint64_t v13 = (void *)v21[0];
      v20[0] = v21[0];
      v20[1] = v21[1];
      Promise.track(future:on:)(v12, v20);
      swift_release_n();
      swift_release();
      sub_25A3EE314(v13);
    }
  }
  return v9;
}

uint64_t sub_25A4C5B9C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v13 = 0;
  void v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  v11[5] = &v13;
  type metadata accessor for Future();
  uint64_t v7 = sub_25A50E990();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = KeyValueMap.guaranteedValue(for:creatingIfNecessaryWith:)(a1, (uint64_t (*)(uint64_t))sub_25A4C5DB4, (uint64_t)v11, v7, WitnessTable, (uint64_t)&v12);
  uint64_t v10 = v13;
  *a5 = v12;
  a5[1] = v10;
  return result;
}

uint64_t sub_25A4C5C74@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for Future();
  uint64_t v4 = sub_25A3BE428((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ConcurrentFutureCache.swift", 133, 2, 26, 65, (uint64_t)"guaranteedValue(for:creatingIfNecessaryWith:)", 45, 2);
  *a1 = v5;
  uint64_t result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t ConcurrentFutureCache.deinit()
{
  swift_release();
  return v0;
}

uint64_t ConcurrentFutureCache.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_25A4C5D50@<X0>(void *a1@<X8>)
{
  return sub_25A4C5B9C(v1[5], v1[2], v1[3], v1[4], a1);
}

uint64_t type metadata accessor for ConcurrentFutureCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ConcurrentFutureCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ConcurrentFutureCache);
}

uint64_t dispatch thunk of ConcurrentFutureCache.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_25A4C5DB4@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A4C5C74(*(void **)(v1 + 40), a1);
}

BOOL sub_25A4C5DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v37 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v36 = (uint64_t)&v36 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v36 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197B8);
  MEMORY[0x270FA5388](v19 - 8);
  long long v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a1;
  uint64_t v23 = a1;
  uint64_t v24 = v39;
  sub_25A393828(v23, (uint64_t)v21, &qword_26A4197B8);
  uint64_t v25 = v3;
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v3);
  int v27 = v26;
  if (v26 != 1)
  {
    uint64_t v28 = (uint64_t)v10;
    LODWORD(v39) = v26;
    uint64_t v29 = v38;
    uint64_t v30 = (uint64_t)v37;
    sub_25A39F4F8((uint64_t)v21, (uint64_t)v18, &qword_26A415D20);
    sub_25A393828((uint64_t)v18, (uint64_t)v16, &qword_26A415D20);
    if (swift_getEnumCaseMultiPayload() >= 2)
    {
      sub_25A393828(v29, (uint64_t)v13, &qword_26A415D20);
    }
    else
    {
      sub_25A384BCC((uint64_t)v16, &qword_26A415D20);
      sub_25A393828(v29, (uint64_t)v13, &qword_26A415D20);
      sub_25A393828((uint64_t)v13, v28, &qword_26A415D20);
      if (swift_getEnumCaseMultiPayload() < 2)
      {
        sub_25A384BCC(v28, &qword_26A415D20);
        sub_25A384BCC((uint64_t)v13, &qword_26A415D20);
        uint64_t v31 = v36;
        sub_25A393828((uint64_t)v18, v36, &qword_26A415D20);
        sub_25A393828(v29, v30, &qword_26A415D20);
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B170);
        sub_25A3BE718(&qword_26A41B178, &qword_26A41B170);
        swift_allocError();
        uint64_t v34 = v33;
        sub_25A39F4F8(v31, v33, &qword_26A415D20);
        sub_25A39F4F8(v30, v34 + *(int *)(v32 + 28), &qword_26A415D20);
        swift_willThrow();
        sub_25A384BCC((uint64_t)v18, &qword_26A415D20);
LABEL_8:
        int v27 = v39;
        return v27 == 1;
      }
    }
    sub_25A384BCC((uint64_t)v13, &qword_26A415D20);
    sub_25A384BCC((uint64_t)v18, &qword_26A415D20);
    goto LABEL_8;
  }
  sub_25A384BCC(v22, &qword_26A4197B8);
  sub_25A393828(v38, v22, &qword_26A415D20);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v22, 0, 1, v25);
  return v27 == 1;
}

uint64_t sub_25A4C61BC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197D8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (uint64_t *)((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_25A393828(a1, (uint64_t)v4, &qword_26A4197D8);
  if (swift_getEnumCaseMultiPayload() == 1) {
    *uint64_t v7 = *v4;
  }
  else {
    sub_25A3F6C88((uint64_t)v4, (uint64_t)v7);
  }
  swift_storeEnumTagMultiPayload();
  sub_25A3BC714((uint64_t)v7);
  return sub_25A384BCC((uint64_t)v7, &qword_26A415D20);
}

uint64_t Future.observeCompletion(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4CCA44(a1, a2, a3, (uint64_t)&unk_270836410, (void (*)(void))sub_25A4C965C);
}

uint64_t sub_25A4C6328(_OWORD *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void *)(a2 + 16);
  long long v8 = a1[1];
  *uint64_t v6 = *a1;
  v6[1] = v8;
  void v6[2] = a1[2];
  *(_OWORD *)((char *)v6 + 41) = *(_OWORD *)((char *)a1 + 41);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(void *)(v7 + 104);
  uint64_t v14 = v6;
  uint64_t v10 = v9 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v9 + 16);
  uint64_t v11 = (os_unfair_lock_s *)(v9 + ((*(unsigned int *)(*(void *)v9 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v11);
  sub_25A4CF8FC(v10, &v15);
  os_unfair_lock_unlock(v11);
  LOBYTE(a2) = v15;
  swift_release();
  if (a2) {
    sub_25A39DD44((uint64_t)v6);
  }
  return sub_25A384BCC((uint64_t)v6, &qword_26A415D20);
}

uint64_t Future.observeCancelation(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4CCA44(a1, a2, a3, (uint64_t)&unk_270836438, (void (*)(void))sub_25A4CC968);
}

uint64_t Future.observeFinish(_:)(uint64_t a1, uint64_t a2)
{
  v3[0] = 0;
  v3[1] = 0;
  return Future.observeFinish(on:_:)((uint64_t)v3, a1, a2);
}

uint64_t Future.observeCompletion(_:)(uint64_t a1, uint64_t a2)
{
  v3[0] = 0;
  v3[1] = 0;
  return Future.observeCompletion(on:_:)((uint64_t)v3, a1, a2);
}

uint64_t Future.observeCancelation(_:)(uint64_t a1, uint64_t a2)
{
  v3[0] = 0;
  v3[1] = 0;
  return Future.observeCancelation(on:_:)((uint64_t)v3, a1, a2);
}

uint64_t Future.observeSuccess(_:)(uint64_t a1, uint64_t a2)
{
  v3[0] = 0;
  v3[1] = 0;
  return Future.observeSuccess(on:_:)((uint64_t)v3, a1, a2);
}

uint64_t Future.observeFinish(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4CCA44(a1, a2, a3, (uint64_t)&unk_270836460, (void (*)(void))sub_25A4CC984);
}

uint64_t sub_25A4C65E8(uint64_t a1, void *a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6)
{
  uint64_t v49 = a5;
  uint64_t v50 = a4;
  uint64_t v51 = a3;
  uint64_t v48 = a2;
  uint64_t v8 = sub_25A50E750();
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v46 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v42 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_25A50E790();
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v44 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v41 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for FutureTermination();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v40 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v40 - v19;
  long long v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21((char *)&v40 - v19, a1, v12);
  v21(v18, (uint64_t)v20, v12);
  uint64_t v47 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v48;
  v21(v47, (uint64_t)v20, v12);
  unint64_t v23 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v24 = v49;
  uint64_t v25 = v50;
  int v26 = (char *)swift_allocObject();
  *((void *)v26 + 2) = a6;
  *((void *)v26 + 3) = v25;
  *((void *)v26 + 4) = v24;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v26[v23], v20, v12);
  aBlock = v22;
  uint64_t v54 = v51;
  swift_retain_n();
  if (ExecutionLane.isCurrentLane.getter())
  {
    v25(v18);
    swift_release();
    swift_release();
LABEL_9:
    uint64_t v32 = v47;
    goto LABEL_10;
  }
  uint64_t v40 = v18;
  if (v22)
  {
    if (v22 == (void *)1)
    {
      sub_25A3DD980();
      uint64_t v51 = sub_25A50F8D0();
      uint64_t v57 = sub_25A4CDAB0;
      uint64_t v58 = v26;
      aBlock = (void *)MEMORY[0x263EF8330];
      uint64_t v54 = 1107296256;
      uint64_t v55 = sub_25A3BE05C;
      uint64_t v56 = &block_descriptor_51;
      int v27 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      uint64_t v28 = v41;
      sub_25A50E770();
      aBlock = (void *)MEMORY[0x263F8EE78];
      sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      uint64_t v29 = v42;
      uint64_t v30 = v46;
      sub_25A50FC90();
      uint64_t v31 = (void *)v51;
      MEMORY[0x26113D8E0](0, v28, v29, v27);
      _Block_release(v27);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v30);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v28, v44);
    }
    else
    {
      uint64_t v57 = sub_25A4CDAB0;
      uint64_t v58 = v26;
      aBlock = (void *)MEMORY[0x263EF8330];
      uint64_t v54 = 1107296256;
      uint64_t v55 = sub_25A3BE05C;
      uint64_t v56 = &block_descriptor_48_0;
      uint64_t v50 = (void (*)(char *))_Block_copy(&aBlock);
      swift_retain();
      sub_25A3EE304(v22);
      uint64_t v33 = v41;
      sub_25A50E770();
      uint64_t v52 = MEMORY[0x263F8EE78];
      sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      uint64_t v34 = v42;
      uint64_t v35 = v22;
      uint64_t v36 = v46;
      sub_25A50FC90();
      uint64_t v37 = v50;
      MEMORY[0x26113D8E0](0, v33, v34, v50);
      _Block_release(v37);
      sub_25A3EE314(v35);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v34, v36);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v44);
      swift_release();
    }
    swift_release();
    swift_release();
    uint64_t v18 = v40;
    goto LABEL_9;
  }
  uint64_t v32 = v47;
  v25(v47);
  swift_release();
  swift_release();
  uint64_t v18 = v40;
LABEL_10:
  uint64_t v38 = *(void (**)(char *, uint64_t))(v13 + 8);
  v38(v32, v12);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v38)(v18, v12);
}

uint64_t sub_25A4C6C44(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_25A4C6C74(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v56 = a5;
  uint64_t v57 = a3;
  uint64_t v55 = a2;
  uint64_t v7 = sub_25A50E750();
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v50 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25A50E790();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v49 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char **)((char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B180);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char **)((char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197D8);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v60 = (uint64_t)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v59 = (char *)&v49 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v49 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v58 = (uint64_t)&v49 - v26;
  sub_25A393828(a1, (uint64_t)v13, &qword_26A415D20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_25A3F6C88((uint64_t)v13, (uint64_t)v16);
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *uint64_t v16 = *v13;
LABEL_5:
    uint64_t v28 = (uint64_t)v59;
    swift_storeEnumTagMultiPayload();
    uint64_t v29 = 0;
    goto LABEL_7;
  }
  uint64_t v29 = 1;
  uint64_t v28 = (uint64_t)v59;
LABEL_7:
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, v29, 1, v17);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    uint64_t v32 = v58;
    sub_25A39F4F8((uint64_t)v16, v58, &qword_26A4197D8);
    sub_25A393828(v32, (uint64_t)v25, &qword_26A4197D8);
    sub_25A393828((uint64_t)v25, v28, &qword_26A4197D8);
    sub_25A393828((uint64_t)v25, v60, &qword_26A4197D8);
    unint64_t v33 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    uint64_t v34 = swift_allocObject();
    uint64_t v35 = v56;
    *(void *)(v34 + 16) = a4;
    *(void *)(v34 + 24) = v35;
    sub_25A39F4F8((uint64_t)v25, v34 + v33, &qword_26A4197D8);
    uint64_t v36 = v55;
    aBlock = v55;
    uint64_t v63 = v57;
    swift_retain_n();
    if (ExecutionLane.isCurrentLane.getter())
    {
      uint64_t v37 = v28;
    }
    else
    {
      if (v36)
      {
        if (v36 != (void *)1)
        {
          uint64_t v66 = sub_25A4CF948;
          uint64_t v67 = v34;
          aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v63 = 1107296256;
          uint64_t v64 = sub_25A3BE05C;
          uint64_t v65 = &block_descriptor_111;
          uint64_t v45 = _Block_copy(&aBlock);
          swift_retain();
          sub_25A3EE304(v36);
          uint64_t v46 = v49;
          sub_25A50E770();
          uint64_t v61 = MEMORY[0x263F8EE78];
          sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v47 = v50;
          uint64_t v48 = v54;
          sub_25A50FC90();
          MEMORY[0x26113D8E0](0, v46, v47, v45);
          _Block_release(v45);
          sub_25A3EE314(v36);
          (*(void (**)(char *, uint64_t))(v53 + 8))(v47, v48);
          (*(void (**)(char *, uint64_t))(v51 + 8))(v46, v52);
          swift_release();
          swift_release();
          goto LABEL_17;
        }
        sub_25A3DD980();
        uint64_t v38 = (void *)sub_25A50F8D0();
        uint64_t v66 = sub_25A4CF948;
        uint64_t v67 = v34;
        aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v63 = 1107296256;
        uint64_t v64 = sub_25A3BE05C;
        uint64_t v65 = &block_descriptor_114;
        uint64_t v39 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        uint64_t v40 = v49;
        sub_25A50E770();
        aBlock = (void *)MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
        uint64_t v41 = v50;
        uint64_t v42 = v54;
        sub_25A50FC90();
        MEMORY[0x26113D8E0](0, v40, v41, v39);
        _Block_release(v39);

        uint64_t v43 = v41;
        uint64_t v28 = (uint64_t)v59;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v43, v42);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v40, v52);
LABEL_16:
        swift_release();
LABEL_17:
        swift_release();
        sub_25A384BCC(v60, &qword_26A4197D8);
        swift_release();
        sub_25A384BCC(v28, &qword_26A4197D8);
        uint64_t v31 = v58;
        uint64_t v30 = &qword_26A4197D8;
        return sub_25A384BCC(v31, v30);
      }
      uint64_t v37 = v60;
    }
    a4(v37);
    goto LABEL_16;
  }
  uint64_t v30 = &qword_26A41B180;
  uint64_t v31 = (uint64_t)v16;
  return sub_25A384BCC(v31, v30);
}

void sub_25A4C73F0(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  uint64_t v32 = a3;
  sub_25A39F4F8(a1, (uint64_t)&v42, &qword_26A415D38);
  uint64_t v9 = v42;
  uint64_t v10 = sub_25A50E750();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_25A50E790();
  uint64_t v30 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A39F4F8(a1, (uint64_t)v43, &qword_26A415D38);
  if (v44)
  {
    if (v44 != 1) {
      return;
    }
    LOBYTE(aBlock) = 1;
    id v16 = v9;
  }
  else
  {
    LOBYTE(aBlock) = 0;
    swift_bridgeObjectRetain();
  }
  unsigned __int8 v17 = aBlock;
  if (aBlock != 255)
  {
    uint64_t v28 = v10;
    uint64_t v29 = v11;
    uint64_t v40 = v9;
    char v18 = aBlock & 1;
    char v41 = aBlock & 1;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a4;
    *(void *)(v19 + 24) = a5;
    sub_25A39F4F8((uint64_t)&v40, v19 + 32, &qword_26A4197B0);
    aBlock = a2;
    uint64_t v35 = v32;
    swift_retain();
    sub_25A470228(v9, v17);
    swift_retain();
    sub_25A470228(v9, v17);
    swift_retain();
    sub_25A470228(v9, v17);
    if (ExecutionLane.isCurrentLane.getter())
    {
      aBlock = v9;
      LOBYTE(v35) = v18;
    }
    else
    {
      if (a2)
      {
        if (a2 == (void *)1)
        {
          sub_25A3DD980();
          uint64_t v32 = sub_25A50F8D0();
          uint64_t v38 = sub_25A4D0774;
          uint64_t v39 = v19;
          aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v35 = 1107296256;
          uint64_t v36 = sub_25A3BE05C;
          uint64_t v37 = &block_descriptor_147;
          int v27 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          sub_25A50E770();
          aBlock = (void *)MEMORY[0x263F8EE78];
          sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v20 = v28;
          sub_25A50FC90();
          uint64_t v21 = v27;
          uint64_t v22 = (void *)v32;
          MEMORY[0x26113D8E0](0, v15, v13, v27);
          _Block_release(v21);

          (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v20);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v31);
        }
        else
        {
          uint64_t v38 = sub_25A4D0774;
          uint64_t v39 = v19;
          aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v35 = 1107296256;
          uint64_t v36 = sub_25A3BE05C;
          uint64_t v37 = &block_descriptor_144;
          uint64_t v26 = _Block_copy(&aBlock);
          swift_retain();
          int v27 = (void *)v19;
          sub_25A3EE304(a2);
          sub_25A50E770();
          uint64_t v33 = MEMORY[0x263F8EE78];
          unint64_t v25 = sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v23 = v28;
          sub_25A50FC90();
          uint64_t v24 = v26;
          MEMORY[0x26113D8E0](0, v15, v13, v26);
          _Block_release(v24);
          sub_25A3EE314(a2);
          (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v23);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v31);
          swift_release();
        }
        sub_25A470254(v9, v17);
        swift_release();
        goto LABEL_15;
      }
      aBlock = v9;
      LOBYTE(v35) = v17 & 1;
    }
    a4(&aBlock);
    sub_25A470254(v9, v17);
    swift_release();
LABEL_15:
    swift_release();
    sub_25A470254(v9, v17);
    swift_release();
    sub_25A470254(v9, v17);
  }
}

void sub_25A4C7A58(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  uint64_t v39 = a3;
  sub_25A39F4F8(a1, (uint64_t)v49, &qword_26A415D78);
  uint64_t v9 = (void *)v49[0];
  uint64_t v10 = v49[1];
  uint64_t v11 = v49[2];
  uint64_t v12 = sub_25A50E750();
  uint64_t v37 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v35 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_25A50E790();
  uint64_t v36 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v38 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A39F4F8(a1, (uint64_t)v50, &qword_26A415D78);
  if (v51)
  {
    if (v51 != 1) {
      return;
    }
    LOBYTE(aBlock) = 1;
    id v16 = v9;
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    LOBYTE(aBlock) = 0;
    swift_bridgeObjectRetain();
  }
  unsigned __int8 v17 = aBlock;
  if (aBlock != 255)
  {
    uint64_t v33 = v14;
    uint64_t v34 = v12;
    v47[0] = v9;
    v47[1] = v10;
    v47[2] = v11;
    char v18 = aBlock & 1;
    char v48 = aBlock & 1;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a4;
    *(void *)(v19 + 24) = a5;
    sub_25A39F4F8((uint64_t)v47, v19 + 32, &qword_26A415848);
    aBlock = a2;
    uint64_t v42 = v39;
    swift_retain();
    sub_25A3F4E80(v9, v10, v11, v17);
    swift_retain();
    sub_25A3F4E80(v9, v10, v11, v17);
    swift_retain();
    sub_25A3F4E80(v9, v10, v11, v17);
    if (ExecutionLane.isCurrentLane.getter())
    {
      aBlock = v9;
      uint64_t v42 = v10;
      uint64_t v43 = (uint64_t (*)(uint64_t))v11;
      LOBYTE(v44) = v18;
    }
    else
    {
      if (a2)
      {
        uint64_t v32 = v19;
        if (a2 == (void *)1)
        {
          sub_25A3DD980();
          uint64_t v39 = sub_25A50F8D0();
          uint64_t v45 = sub_25A4D07C8;
          uint64_t v46 = v19;
          aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v42 = 1107296256;
          uint64_t v43 = sub_25A3BE05C;
          char v44 = &block_descriptor_166;
          uint64_t v31 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          uint64_t v20 = v38;
          sub_25A50E770();
          aBlock = (void *)MEMORY[0x263F8EE78];
          sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v21 = v35;
          uint64_t v22 = v34;
          sub_25A50FC90();
          uint64_t v23 = v31;
          uint64_t v24 = (void *)v39;
          MEMORY[0x26113D8E0](0, v20, v21, v31);
          _Block_release(v23);

          (*(void (**)(char *, uint64_t))(v37 + 8))(v21, v22);
          (*(void (**)(char *, uint64_t))(v36 + 8))(v20, v33);
        }
        else
        {
          uint64_t v45 = sub_25A4D07C8;
          uint64_t v46 = v19;
          aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v42 = 1107296256;
          uint64_t v43 = sub_25A3BE05C;
          char v44 = &block_descriptor_163;
          uint64_t v31 = _Block_copy(&aBlock);
          swift_retain();
          sub_25A3EE304(a2);
          unint64_t v25 = v38;
          sub_25A50E770();
          uint64_t v40 = MEMORY[0x263F8EE78];
          unint64_t v30 = sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v26 = v35;
          uint64_t v27 = v34;
          sub_25A50FC90();
          uint64_t v28 = v25;
          uint64_t v29 = v31;
          MEMORY[0x26113D8E0](0, v28, v26, v31);
          _Block_release(v29);
          sub_25A3EE314(a2);
          (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v27);
          (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v33);
          swift_release();
        }
        sub_25A3F4F70(v9, v10, v11, v17);
        swift_release();
        goto LABEL_15;
      }
      aBlock = v9;
      uint64_t v42 = v10;
      uint64_t v43 = (uint64_t (*)(uint64_t))v11;
      LOBYTE(v44) = v17 & 1;
    }
    a4(&aBlock);
    sub_25A3F4F70(v9, v10, v11, v17);
    swift_release();
LABEL_15:
    swift_release();
    sub_25A3F4F70(v9, v10, v11, v17);
    swift_release();
    sub_25A3F4F70(v9, v10, v11, v17);
  }
}

void sub_25A4C8158(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  uint64_t v32 = a3;
  sub_25A39F4F8(a1, (uint64_t)&v42, &qword_26A415D58);
  uint64_t v9 = v42;
  uint64_t v10 = sub_25A50E750();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_25A50E790();
  uint64_t v30 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A39F4F8(a1, (uint64_t)v43, &qword_26A415D58);
  if (v44)
  {
    if (v44 != 1) {
      return;
    }
    LOBYTE(aBlock) = 1;
    id v16 = v9;
  }
  else
  {
    LOBYTE(aBlock) = 0;
    swift_bridgeObjectRetain();
  }
  unsigned __int8 v17 = aBlock;
  if (aBlock != 255)
  {
    uint64_t v28 = v10;
    uint64_t v29 = v11;
    uint64_t v40 = v9;
    char v18 = aBlock & 1;
    char v41 = aBlock & 1;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a4;
    *(void *)(v19 + 24) = a5;
    sub_25A39F4F8((uint64_t)&v40, v19 + 32, &qword_26A419810);
    aBlock = a2;
    uint64_t v35 = v32;
    swift_retain();
    sub_25A470228(v9, v17);
    swift_retain();
    sub_25A470228(v9, v17);
    swift_retain();
    sub_25A470228(v9, v17);
    if (ExecutionLane.isCurrentLane.getter())
    {
      aBlock = v9;
      LOBYTE(v35) = v18;
    }
    else
    {
      if (a2)
      {
        if (a2 == (void *)1)
        {
          sub_25A3DD980();
          uint64_t v32 = sub_25A50F8D0();
          uint64_t v38 = sub_25A4D0774;
          uint64_t v39 = v19;
          aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v35 = 1107296256;
          uint64_t v36 = sub_25A3BE05C;
          uint64_t v37 = &block_descriptor_185;
          uint64_t v27 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          sub_25A50E770();
          aBlock = (void *)MEMORY[0x263F8EE78];
          sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v20 = v28;
          sub_25A50FC90();
          uint64_t v21 = v27;
          uint64_t v22 = (void *)v32;
          MEMORY[0x26113D8E0](0, v15, v13, v27);
          _Block_release(v21);

          (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v20);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v31);
        }
        else
        {
          uint64_t v38 = sub_25A4D0774;
          uint64_t v39 = v19;
          aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v35 = 1107296256;
          uint64_t v36 = sub_25A3BE05C;
          uint64_t v37 = &block_descriptor_182;
          uint64_t v26 = _Block_copy(&aBlock);
          swift_retain();
          uint64_t v27 = (void *)v19;
          sub_25A3EE304(a2);
          sub_25A50E770();
          uint64_t v33 = MEMORY[0x263F8EE78];
          unint64_t v25 = sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v23 = v28;
          sub_25A50FC90();
          uint64_t v24 = v26;
          MEMORY[0x26113D8E0](0, v15, v13, v26);
          _Block_release(v24);
          sub_25A3EE314(a2);
          (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v23);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v31);
          swift_release();
        }
        sub_25A470254(v9, v17);
        swift_release();
        goto LABEL_15;
      }
      aBlock = v9;
      LOBYTE(v35) = v17 & 1;
    }
    a4(&aBlock);
    sub_25A470254(v9, v17);
    swift_release();
LABEL_15:
    swift_release();
    sub_25A470254(v9, v17);
    swift_release();
    sub_25A470254(v9, v17);
  }
}

void sub_25A4C87C0(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  uint64_t v35 = a3;
  sub_25A39F4F8(a1, (uint64_t)v45, &qword_26A415D90);
  uint64_t v9 = (void *)v45[0];
  uint64_t v10 = v45[1];
  uint64_t v11 = sub_25A50E750();
  uint64_t v34 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_25A50E790();
  uint64_t v32 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A39F4F8(a1, (uint64_t)v46, &qword_26A415D90);
  if (v47)
  {
    if (v47 != 1) {
      return;
    }
    LOBYTE(aBlock) = 1;
    id v16 = v9;
    uint64_t v10 = 0;
  }
  else
  {
    sub_25A39F4F8((uint64_t)v46, (uint64_t)v48, &qword_26A415878);
    LOBYTE(aBlock) = 0;
    swift_bridgeObjectRetain();
  }
  unsigned __int8 v17 = aBlock;
  if (aBlock != 255)
  {
    uint64_t v30 = v13;
    uint64_t v31 = v11;
    v43[0] = v9;
    v43[1] = v10;
    char v18 = aBlock & 1;
    char v44 = aBlock & 1;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a4;
    *(void *)(v19 + 24) = a5;
    sub_25A39F4F8((uint64_t)v43, v19 + 32, &qword_26A415888);
    aBlock = a2;
    uint64_t v38 = v35;
    swift_retain();
    sub_25A3F5138(v9, v10, v17);
    swift_retain();
    sub_25A3F5138(v9, v10, v17);
    swift_retain();
    sub_25A3F5138(v9, v10, v17);
    if (ExecutionLane.isCurrentLane.getter())
    {
      aBlock = v9;
      uint64_t v38 = v10;
      LOBYTE(v39) = v18;
    }
    else
    {
      if (a2)
      {
        if (a2 == (void *)1)
        {
          sub_25A3DD980();
          uint64_t v35 = sub_25A50F8D0();
          char v41 = sub_25A4D0860;
          uint64_t v42 = v19;
          aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v38 = 1107296256;
          uint64_t v39 = sub_25A3BE05C;
          uint64_t v40 = &block_descriptor_204;
          uint64_t v29 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          sub_25A50E770();
          aBlock = (void *)MEMORY[0x263F8EE78];
          sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v20 = v30;
          uint64_t v21 = v31;
          sub_25A50FC90();
          uint64_t v22 = v29;
          uint64_t v23 = (void *)v35;
          MEMORY[0x26113D8E0](0, v15, v20, v29);
          _Block_release(v22);

          (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v21);
          (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v33);
        }
        else
        {
          char v41 = sub_25A4D0860;
          uint64_t v42 = v19;
          aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v38 = 1107296256;
          uint64_t v39 = sub_25A3BE05C;
          uint64_t v40 = &block_descriptor_201;
          uint64_t v28 = _Block_copy(&aBlock);
          swift_retain();
          uint64_t v29 = (void *)v19;
          sub_25A3EE304(a2);
          sub_25A50E770();
          uint64_t v36 = MEMORY[0x263F8EE78];
          sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v24 = v30;
          uint64_t v25 = v31;
          sub_25A50FC90();
          uint64_t v26 = v28;
          MEMORY[0x26113D8E0](0, v15, v24, v28);
          _Block_release(v26);
          sub_25A3EE314(a2);
          (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v25);
          (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v33);
          swift_release();
        }
        sub_25A3F5208(v9, v10, v17);
        swift_release();
        goto LABEL_15;
      }
      aBlock = v9;
      uint64_t v38 = v10;
      LOBYTE(v39) = v17 & 1;
    }
    a4(&aBlock);
    sub_25A3F5208(v9, v10, v17);
    swift_release();
LABEL_15:
    swift_release();
    sub_25A3F5208(v9, v10, v17);
    swift_release();
    sub_25A3F5208(v9, v10, v17);
  }
}

uint64_t sub_25A4C8EA4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6)
{
  uint64_t v59 = a4;
  uint64_t v60 = a5;
  uint64_t v58 = a3;
  uint64_t v61 = a2;
  uint64_t v62 = a1;
  uint64_t v7 = sub_25A50E750();
  uint64_t v55 = *(void *)(v7 - 8);
  uint64_t v56 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v52 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25A50E790();
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v54 = v9;
  MEMORY[0x270FA5388](v9);
  char v51 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v11 = sub_25A510540();
  uint64_t v12 = sub_25A50FA40();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  id v16 = (char *)&v50 - v15;
  uint64_t v17 = *(void *)(v11 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v19 = MEMORY[0x270FA5388](v14);
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v63 = (char *)&v50 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v50 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v50 - v25;
  uint64_t v57 = a6;
  uint64_t v27 = type metadata accessor for FutureTermination();
  FutureTermination.completedResult.getter(v27, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v11) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v29(v26, v16, v11);
  uint64_t v62 = v17;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v30(v24, v26, v11);
  v30(v63, v24, v11);
  uint64_t v50 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30(v50, v24, v11);
  unint64_t v31 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v32 = (char *)swift_allocObject();
  uint64_t v34 = v59;
  uint64_t v33 = v60;
  *((void *)v32 + 2) = v57;
  *((void *)v32 + 3) = v34;
  *((void *)v32 + 4) = v33;
  uint64_t v57 = v11;
  v29(&v32[v31], v24, v11);
  uint64_t v35 = (void *)v61;
  uint64_t aBlock = v61;
  uint64_t v66 = v58;
  swift_retain_n();
  uint64_t v36 = v26;
  if (ExecutionLane.isCurrentLane.getter())
  {
    uint64_t v37 = v63;
    v34(v63);
    swift_release();
    swift_release();
LABEL_11:
    uint64_t v43 = v50;
    goto LABEL_12;
  }
  if (v35)
  {
    if (v35 == (void *)1)
    {
      sub_25A3DD980();
      uint64_t v61 = sub_25A50F8D0();
      uint64_t v69 = sub_25A4D09E4;
      uint64_t v70 = v32;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v66 = 1107296256;
      uint64_t v67 = sub_25A3BE05C;
      uint64_t v68 = &block_descriptor_223;
      uint64_t v38 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      uint64_t v39 = v51;
      sub_25A50E770();
      uint64_t aBlock = MEMORY[0x263F8EE78];
      sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      uint64_t v40 = v52;
      uint64_t v36 = v26;
      uint64_t v41 = v56;
      sub_25A50FC90();
      uint64_t v42 = (void *)v61;
      MEMORY[0x26113D8E0](0, v39, v40, v38);
      _Block_release(v38);

      (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v41);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v54);
    }
    else
    {
      uint64_t v69 = sub_25A4D09E4;
      uint64_t v70 = v32;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v66 = 1107296256;
      uint64_t v67 = sub_25A3BE05C;
      uint64_t v68 = &block_descriptor_220;
      uint64_t v59 = (void (*)(char *))_Block_copy(&aBlock);
      swift_retain();
      sub_25A3EE304(v35);
      char v44 = v51;
      sub_25A50E770();
      uint64_t v64 = MEMORY[0x263F8EE78];
      sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      uint64_t v45 = v52;
      uint64_t v46 = v56;
      sub_25A50FC90();
      char v47 = v59;
      MEMORY[0x26113D8E0](0, v44, v45, v59);
      _Block_release(v47);
      sub_25A3EE314(v35);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v45, v46);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v44, v54);
      swift_release();
    }
    swift_release();
    swift_release();
    uint64_t v37 = v63;
    goto LABEL_11;
  }
  uint64_t v43 = v50;
  v34(v50);
  swift_release();
  swift_release();
  uint64_t v37 = v63;
LABEL_12:
  char v48 = *(void (**)(char *, uint64_t))(v62 + 8);
  uint64_t v49 = v57;
  v48(v43, v57);
  swift_release();
  v48(v37, v49);
  return ((uint64_t (*)(char *, uint64_t))v48)(v36, v49);
}

uint64_t sub_25A4C965C(uint64_t a1)
{
  return sub_25A4CD0EC(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_25A4C8EA4);
}

uint64_t Future.observeSuccess(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4CCA44(a1, a2, a3, (uint64_t)&unk_270836488, (void (*)(void))sub_25A4CC9A0);
}

void sub_25A4C9694(void *a1, void *a2, uint64_t a3, void (*a4)(char *), uint64_t a5, void *a6)
{
  uint64_t v62 = a5;
  uint64_t v63 = a4;
  uint64_t v64 = a2;
  uint64_t v65 = a3;
  uint64_t v67 = a1;
  uint64_t v7 = sub_25A50E750();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v58 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25A50E790();
  uint64_t v59 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = (void *)*(a6 - 1);
  uint64_t v13 = v66[8];
  uint64_t v14 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v52 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v52 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v52 - v21;
  uint64_t v23 = type metadata accessor for FutureTermination();
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (id *)((char *)&v52 - v24);
  (*(void (**)(char *, void *, uint64_t))(v26 + 16))((char *)&v52 - v24, v67, v23);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v53 = v12;
    uint64_t v54 = v9;
    uint64_t v28 = v66;
    uint64_t v67 = (void *)v66[4];
    ((void (*)(char *, id *, void *))v67)(v22, v25, a6);
    uint64_t v29 = v62;
    unint64_t v31 = v28 + 2;
    uint64_t v30 = (void (*)(char *, char *, void *))v28[2];
    uint64_t v56 = v22;
    v30(v20, v22, a6);
    uint64_t v55 = v17;
    v30(v17, v20, a6);
    uint64_t v57 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v30(v57, v20, a6);
    unint64_t v32 = (*((unsigned __int8 *)v31 + 64) + 40) & ~(unint64_t)*((unsigned __int8 *)v31 + 64);
    uint64_t v33 = (void *)swift_allocObject();
    uint64_t v34 = v63;
    v33[2] = a6;
    v33[3] = v34;
    v33[4] = v29;
    ((void (*)(char *, char *, void *))v67)((char *)v33 + v32, v20, a6);
    uint64_t v35 = v64;
    uint64_t aBlock = v64;
    uint64_t v70 = v65;
    swift_retain_n();
    if (ExecutionLane.isCurrentLane.getter())
    {
      uint64_t v36 = v55;
      v34(v55);
      swift_release();
      swift_release();
    }
    else
    {
      if (!v35)
      {
        char v44 = v57;
        v34(v57);
        swift_release();
        swift_release();
        uint64_t v36 = v55;
LABEL_13:
        uint64_t v50 = v56;
        char v51 = (void (*)(char *, void *))v66[1];
        v51(v44, a6);
        swift_release();
        v51(v36, a6);
        v51(v50, a6);
        return;
      }
      if (v35 == (void *)1)
      {
        sub_25A3DD980();
        uint64_t v37 = (void *)sub_25A50F8D0();
        uint64_t v73 = sub_25A4CD938;
        uint64_t v74 = v33;
        uint64_t aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v70 = 1107296256;
        uint64_t v71 = sub_25A3BE05C;
        uint64_t v72 = &block_descriptor_42;
        uint64_t v38 = _Block_copy(&aBlock);
        uint64_t v67 = a6;
        uint64_t v39 = v38;
        swift_retain();
        swift_release();
        uint64_t v40 = v53;
        sub_25A50E770();
        uint64_t aBlock = (void *)MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
        uint64_t v41 = v58;
        uint64_t v42 = v61;
        sub_25A50FC90();
        MEMORY[0x26113D8E0](0, v40, v41, v39);
        uint64_t v43 = v39;
        a6 = v67;
        _Block_release(v43);

        (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v42);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v40, v54);
      }
      else
      {
        uint64_t v73 = sub_25A4CD938;
        uint64_t v74 = v33;
        uint64_t aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v70 = 1107296256;
        uint64_t v71 = sub_25A3BE05C;
        uint64_t v72 = &block_descriptor_39_0;
        uint64_t v45 = _Block_copy(&aBlock);
        swift_retain();
        sub_25A3EE304(v35);
        uint64_t v46 = v53;
        sub_25A50E770();
        uint64_t v68 = MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
        char v47 = v58;
        char v48 = v35;
        uint64_t v49 = v61;
        sub_25A50FC90();
        MEMORY[0x26113D8E0](0, v46, v47, v45);
        _Block_release(v45);
        sub_25A3EE314(v48);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v49);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v46, v54);
        swift_release();
      }
      swift_release();
      swift_release();
      uint64_t v36 = v55;
    }
    char v44 = v57;
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload == 1) {
}
  }

uint64_t Future.observeFailure(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4CCA44(a1, a2, a3, (uint64_t)&unk_2708364B0, (void (*)(void))sub_25A4CC9BC);
}

void sub_25A4C9E48(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v32 = sub_25A50E750();
  uint64_t v35 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_25A50E790();
  uint64_t v33 = *(void *)(v12 - 8);
  uint64_t v34 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for FutureTermination();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (void **)((char *)v30 - v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)v30 - v17, a1, v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v20 = *v18;
      uint64_t v21 = (void *)swift_allocObject();
      void v21[2] = a4;
      v21[3] = a5;
      v21[4] = v20;
      uint64_t aBlock = a2;
      uint64_t v38 = a3;
      swift_retain();
      id v22 = v20;
      swift_retain();
      id v23 = v20;
      swift_retain();
      id v24 = v20;
      if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
      {
        a4(v20);
      }
      else if (a2 == (void *)1)
      {
        sub_25A3DD980();
        uint64_t v25 = (void *)sub_25A50F8D0();
        uint64_t v41 = sub_25A4CD7E4;
        uint64_t v42 = v21;
        uint64_t aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v38 = 1107296256;
        uint64_t v39 = sub_25A3BE05C;
        uint64_t v40 = &block_descriptor_33;
        unint64_t v31 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        sub_25A50E770();
        uint64_t aBlock = (void *)MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
        uint64_t v26 = v32;
        sub_25A50FC90();
        uint64_t v27 = v31;
        MEMORY[0x26113D8E0](0, v14, v11, v31);
        _Block_release(v27);

        (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v26);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v34);
      }
      else
      {
        uint64_t v41 = sub_25A4CD7E4;
        uint64_t v42 = v21;
        uint64_t aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v38 = 1107296256;
        uint64_t v39 = sub_25A3BE05C;
        uint64_t v40 = &block_descriptor_30;
        unint64_t v31 = _Block_copy(&aBlock);
        swift_retain();
        sub_25A3EE304(a2);
        sub_25A50E770();
        uint64_t v36 = MEMORY[0x263F8EE78];
        v30[1] = sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
        uint64_t v28 = v32;
        sub_25A50FC90();
        uint64_t v29 = v31;
        MEMORY[0x26113D8E0](0, v14, v11, v31);
        _Block_release(v29);
        sub_25A3EE314(a2);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v28);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v34);
        swift_release();
      }

      swift_release();
      swift_release();

      swift_release();
    }
  }
  else
  {
    (*(void (**)(void **, uint64_t))(v16 + 8))(v18, v15);
  }
}

uint64_t Future.observeFailure(_:)(uint64_t a1, uint64_t a2)
{
  v3[0] = 0;
  v3[1] = 0;
  return Future.observeFailure(on:_:)((uint64_t)v3, a1, a2);
}

void sub_25A4CA404(uint64_t a1, void *a2, uint64_t a3, void (*a4)(long long *), uint64_t a5)
{
  uint64_t v29 = a5;
  uint64_t v9 = sub_25A50E750();
  uint64_t v28 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_25A50E790();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A393828(a1, (uint64_t)v16, &qword_26A415D20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_25A384BCC((uint64_t)v16, &qword_26A415D20);
    return;
  }
  if (EnumCaseMultiPayload == 1)
  {

    return;
  }
  long long v18 = *((_OWORD *)v16 + 1);
  long long v34 = *(_OWORD *)v16;
  long long v35 = v18;
  v36[0] = *((_OWORD *)v16 + 2);
  *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)(v16 + 41);
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v29;
  *(void *)(v19 + 16) = a4;
  *(void *)(v19 + 24) = v20;
  long long v21 = *((_OWORD *)v16 + 1);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)v16;
  *(_OWORD *)(v19 + 48) = v21;
  *(_OWORD *)(v19 + 64) = *((_OWORD *)v16 + 2);
  *(_OWORD *)(v19 + 73) = *(_OWORD *)(v16 + 41);
  *(void *)&long long aBlock = a2;
  *((void *)&aBlock + 1) = a3;
  swift_retain_n();
  if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
  {
    long long aBlock = v34;
    long long v32 = v35;
    v33[0] = v36[0];
    *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((char *)v36 + 9);
    a4(&aBlock);
  }
  else
  {
    if (a2 != (void *)1)
    {
      *(void *)&v33[0] = sub_25A4CF8B4;
      *((void *)&v33[0] + 1) = v19;
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v32 = sub_25A3BE05C;
      *((void *)&v32 + 1) = &block_descriptor_71;
      id v24 = _Block_copy(&aBlock);
      swift_retain();
      sub_25A3EE304(a2);
      sub_25A50E770();
      uint64_t v30 = MEMORY[0x263F8EE78];
      sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      sub_25A50FC90();
      MEMORY[0x26113D8E0](0, v13, v11, v24);
      _Block_release(v24);
      sub_25A3EE314(a2);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v26);
      swift_release_n();
      swift_release();
      goto LABEL_11;
    }
    sub_25A3DD980();
    id v22 = (void *)sub_25A50F8D0();
    *(void *)&v33[0] = sub_25A4CF8B4;
    *((void *)&v33[0] + 1) = v19;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v32 = sub_25A3BE05C;
    *((void *)&v32 + 1) = &block_descriptor_74;
    id v23 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    sub_25A50E770();
    *(void *)&long long aBlock = MEMORY[0x263F8EE78];
    sub_25A3BE558();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
    sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
    sub_25A50FC90();
    MEMORY[0x26113D8E0](0, v13, v11, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v26);
  }
  swift_release_n();
LABEL_11:
  swift_release();
}

uint64_t sub_25A4CA97C(uint64_t a1, void *a2, uint64_t a3, void (*a4)(id *), uint64_t a5)
{
  uint64_t v38 = a4;
  id v39 = a2;
  sub_25A39F4F8(a1, (uint64_t)v49, &qword_26A415D38);
  uint64_t v8 = (void *)v49[0];
  uint64_t v36 = v49[1];
  char v10 = v50;
  uint64_t v9 = v51;
  uint64_t v11 = v52;
  uint64_t v37 = v53;
  uint64_t v12 = v54;
  char v13 = v55;
  uint64_t v35 = sub_25A50E750();
  uint64_t v34 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  unint64_t v31 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_25A50E790();
  uint64_t v32 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v30 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_25A39F4F8(a1, (uint64_t)v56, &qword_26A415D38);
  if (v56[57] >= 2u)
  {
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v38;
    *(void *)(v17 + 24) = a5;
    uint64_t v18 = v36;
    *(void *)(v17 + 32) = v8;
    *(void *)(v17 + 40) = v18;
    *(unsigned char *)(v17 + 48) = v10;
    *(void *)(v17 + 56) = v9;
    *(void *)(v17 + 64) = v11;
    *(void *)(v17 + 72) = v37;
    *(void *)(v17 + 80) = v12;
    *(unsigned char *)(v17 + 88) = v13;
    id aBlock = v39;
    v29[1] = a3;
    uint64_t v42 = a3;
    swift_retain_n();
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || (v29[0] = a5, !v39))
    {
      id aBlock = v8;
      uint64_t v42 = v36;
      LOBYTE(v43) = v10;
      char v44 = v9;
      uint64_t v45 = v11;
      uint64_t v46 = v37;
      uint64_t v47 = v12;
      char v48 = v13;
      v38(&aBlock);
    }
    else
    {
      if (v39 != (id)1)
      {
        uint64_t v45 = sub_25A4CF8B4;
        uint64_t v46 = v17;
        id aBlock = (id)MEMORY[0x263EF8330];
        uint64_t v42 = 1107296256;
        uint64_t v43 = sub_25A3BE05C;
        char v44 = &block_descriptor_135;
        id v24 = _Block_copy(&aBlock);
        swift_retain();
        id v25 = v39;
        sub_25A3EE304(v39);
        uint64_t v26 = v30;
        sub_25A50E770();
        uint64_t v40 = MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
        uint64_t v27 = v31;
        uint64_t v28 = v35;
        sub_25A50FC90();
        MEMORY[0x26113D8E0](0, v26, v27, v24);
        _Block_release(v24);
        sub_25A3EE314(v25);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v28);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v26, v33);
        swift_release_n();
        swift_release();
        return swift_release();
      }
      sub_25A3DD980();
      uint64_t v19 = (void *)sub_25A50F8D0();
      uint64_t v45 = sub_25A4CF8B4;
      uint64_t v46 = v17;
      id aBlock = (id)MEMORY[0x263EF8330];
      uint64_t v42 = 1107296256;
      uint64_t v43 = sub_25A3BE05C;
      char v44 = &block_descriptor_138;
      uint64_t v20 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      long long v21 = v30;
      sub_25A50E770();
      id aBlock = (id)MEMORY[0x263F8EE78];
      sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      id v22 = v31;
      uint64_t v23 = v35;
      sub_25A50FC90();
      MEMORY[0x26113D8E0](0, v21, v22, v20);
      _Block_release(v20);

      (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v23);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v33);
    }
    swift_release_n();
    return swift_release();
  }
  return result;
}

uint64_t sub_25A4CAFFC(uint64_t a1, void *a2, uint64_t a3, void (*a4)(id *), uint64_t a5)
{
  uint64_t v38 = a4;
  id v39 = a2;
  sub_25A39F4F8(a1, (uint64_t)v49, &qword_26A415D78);
  uint64_t v8 = (void *)v49[0];
  uint64_t v36 = v49[1];
  char v10 = v50;
  uint64_t v9 = v51;
  uint64_t v11 = v52;
  uint64_t v37 = v53;
  uint64_t v12 = v54;
  char v13 = v55;
  uint64_t v35 = sub_25A50E750();
  uint64_t v34 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  unint64_t v31 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_25A50E790();
  uint64_t v32 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v30 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_25A39F4F8(a1, (uint64_t)v56, &qword_26A415D78);
  if (v56[57] >= 2u)
  {
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v38;
    *(void *)(v17 + 24) = a5;
    uint64_t v18 = v36;
    *(void *)(v17 + 32) = v8;
    *(void *)(v17 + 40) = v18;
    *(unsigned char *)(v17 + 48) = v10;
    *(void *)(v17 + 56) = v9;
    *(void *)(v17 + 64) = v11;
    *(void *)(v17 + 72) = v37;
    *(void *)(v17 + 80) = v12;
    *(unsigned char *)(v17 + 88) = v13;
    id aBlock = v39;
    v29[1] = a3;
    uint64_t v42 = a3;
    swift_retain_n();
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || (v29[0] = a5, !v39))
    {
      id aBlock = v8;
      uint64_t v42 = v36;
      LOBYTE(v43) = v10;
      char v44 = v9;
      uint64_t v45 = v11;
      uint64_t v46 = v37;
      uint64_t v47 = v12;
      char v48 = v13;
      v38(&aBlock);
    }
    else
    {
      if (v39 != (id)1)
      {
        uint64_t v45 = sub_25A4CF8B4;
        uint64_t v46 = v17;
        id aBlock = (id)MEMORY[0x263EF8330];
        uint64_t v42 = 1107296256;
        uint64_t v43 = sub_25A3BE05C;
        char v44 = &block_descriptor_154;
        id v24 = _Block_copy(&aBlock);
        swift_retain();
        id v25 = v39;
        sub_25A3EE304(v39);
        uint64_t v26 = v30;
        sub_25A50E770();
        uint64_t v40 = MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
        uint64_t v27 = v31;
        uint64_t v28 = v35;
        sub_25A50FC90();
        MEMORY[0x26113D8E0](0, v26, v27, v24);
        _Block_release(v24);
        sub_25A3EE314(v25);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v28);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v26, v33);
        swift_release_n();
        swift_release();
        return swift_release();
      }
      sub_25A3DD980();
      uint64_t v19 = (void *)sub_25A50F8D0();
      uint64_t v45 = sub_25A4CF8B4;
      uint64_t v46 = v17;
      id aBlock = (id)MEMORY[0x263EF8330];
      uint64_t v42 = 1107296256;
      uint64_t v43 = sub_25A3BE05C;
      char v44 = &block_descriptor_157;
      uint64_t v20 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      long long v21 = v30;
      sub_25A50E770();
      id aBlock = (id)MEMORY[0x263F8EE78];
      sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      id v22 = v31;
      uint64_t v23 = v35;
      sub_25A50FC90();
      MEMORY[0x26113D8E0](0, v21, v22, v20);
      _Block_release(v20);

      (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v23);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v33);
    }
    swift_release_n();
    return swift_release();
  }
  return result;
}

uint64_t sub_25A4CB67C(uint64_t a1, void *a2, uint64_t a3, void (*a4)(id *), uint64_t a5)
{
  uint64_t v38 = a4;
  id v39 = a2;
  sub_25A39F4F8(a1, (uint64_t)v49, &qword_26A415D58);
  uint64_t v8 = (void *)v49[0];
  uint64_t v36 = v49[1];
  char v10 = v50;
  uint64_t v9 = v51;
  uint64_t v11 = v52;
  uint64_t v37 = v53;
  uint64_t v12 = v54;
  char v13 = v55;
  uint64_t v35 = sub_25A50E750();
  uint64_t v34 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  unint64_t v31 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_25A50E790();
  uint64_t v32 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v30 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_25A39F4F8(a1, (uint64_t)v56, &qword_26A415D58);
  if (v56[57] >= 2u)
  {
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v38;
    *(void *)(v17 + 24) = a5;
    uint64_t v18 = v36;
    *(void *)(v17 + 32) = v8;
    *(void *)(v17 + 40) = v18;
    *(unsigned char *)(v17 + 48) = v10;
    *(void *)(v17 + 56) = v9;
    *(void *)(v17 + 64) = v11;
    *(void *)(v17 + 72) = v37;
    *(void *)(v17 + 80) = v12;
    *(unsigned char *)(v17 + 88) = v13;
    id aBlock = v39;
    v29[1] = a3;
    uint64_t v42 = a3;
    swift_retain_n();
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || (v29[0] = a5, !v39))
    {
      id aBlock = v8;
      uint64_t v42 = v36;
      LOBYTE(v43) = v10;
      char v44 = v9;
      uint64_t v45 = v11;
      uint64_t v46 = v37;
      uint64_t v47 = v12;
      char v48 = v13;
      v38(&aBlock);
    }
    else
    {
      if (v39 != (id)1)
      {
        uint64_t v45 = sub_25A4CF8B4;
        uint64_t v46 = v17;
        id aBlock = (id)MEMORY[0x263EF8330];
        uint64_t v42 = 1107296256;
        uint64_t v43 = sub_25A3BE05C;
        char v44 = &block_descriptor_173;
        id v24 = _Block_copy(&aBlock);
        swift_retain();
        id v25 = v39;
        sub_25A3EE304(v39);
        uint64_t v26 = v30;
        sub_25A50E770();
        uint64_t v40 = MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
        uint64_t v27 = v31;
        uint64_t v28 = v35;
        sub_25A50FC90();
        MEMORY[0x26113D8E0](0, v26, v27, v24);
        _Block_release(v24);
        sub_25A3EE314(v25);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v28);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v26, v33);
        swift_release_n();
        swift_release();
        return swift_release();
      }
      sub_25A3DD980();
      uint64_t v19 = (void *)sub_25A50F8D0();
      uint64_t v45 = sub_25A4CF8B4;
      uint64_t v46 = v17;
      id aBlock = (id)MEMORY[0x263EF8330];
      uint64_t v42 = 1107296256;
      uint64_t v43 = sub_25A3BE05C;
      char v44 = &block_descriptor_176;
      uint64_t v20 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      long long v21 = v30;
      sub_25A50E770();
      id aBlock = (id)MEMORY[0x263F8EE78];
      sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      id v22 = v31;
      uint64_t v23 = v35;
      sub_25A50FC90();
      MEMORY[0x26113D8E0](0, v21, v22, v20);
      _Block_release(v20);

      (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v23);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v33);
    }
    swift_release_n();
    return swift_release();
  }
  return result;
}

uint64_t sub_25A4CBCFC(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  uint64_t v46 = a5;
  uint64_t v45 = a3;
  uint64_t v43 = a2;
  sub_25A39F4F8(a1, (uint64_t)v56, &qword_26A415D90);
  uint64_t v7 = v56[1];
  char v44 = (void *)v56[0];
  uint64_t v8 = (void *)v56[3];
  uint64_t v42 = v56[2];
  char v10 = (uint64_t (*)())v56[4];
  uint64_t v9 = v56[5];
  uint64_t v11 = v56[6];
  int v12 = v57;
  uint64_t v13 = sub_25A50E750();
  uint64_t v41 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v38 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_25A50E790();
  uint64_t v39 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v37 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_25A39F4F8(a1, (uint64_t)v58, &qword_26A415D90);
  if (!v59) {
    return sub_25A39F4F8((uint64_t)v58, (uint64_t)&aBlock, &qword_26A415878);
  }
  if (v59 != 1)
  {
    uint64_t v33 = v13;
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = v46;
    *(void *)(v17 + 16) = a4;
    *(void *)(v17 + 24) = v18;
    uint64_t v36 = a4;
    uint64_t v19 = v44;
    *(void *)(v17 + 32) = v44;
    *(void *)(v17 + 40) = v7;
    char v20 = v42;
    *(unsigned char *)(v17 + 48) = v42;
    *(void *)(v17 + 56) = v8;
    *(void *)(v17 + 64) = v10;
    *(void *)(v17 + 72) = v9;
    *(void *)(v17 + 80) = v11;
    *(unsigned char *)(v17 + 88) = v12;
    int v35 = v12;
    uint64_t v34 = v11;
    long long v21 = v10;
    char v22 = v20;
    uint64_t v23 = v43;
    id aBlock = v43;
    uint64_t v49 = v45;
    swift_retain_n();
    if (ExecutionLane.isCurrentLane.getter())
    {
      id aBlock = v19;
      uint64_t v49 = v7;
      LOBYTE(v50) = v22;
      char v51 = v8;
      uint64_t v52 = v21;
      uint64_t v53 = v9;
      uint64_t v54 = v34;
      char v55 = v35;
      v36(&aBlock);
    }
    else
    {
      uint64_t v24 = v33;
      if (v23)
      {
        id v25 = v23;
        if (v23 != (void *)1)
        {
          uint64_t v52 = sub_25A4CF8B4;
          uint64_t v53 = v17;
          id aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v49 = 1107296256;
          uint64_t v50 = sub_25A3BE05C;
          char v51 = &block_descriptor_192;
          uint64_t v30 = _Block_copy(&aBlock);
          swift_retain();
          sub_25A3EE304(v25);
          unint64_t v31 = v37;
          sub_25A50E770();
          uint64_t v47 = MEMORY[0x263F8EE78];
          sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v32 = v38;
          sub_25A50FC90();
          MEMORY[0x26113D8E0](0, v31, v32, v30);
          _Block_release(v30);
          sub_25A3EE314(v25);
          (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v24);
          (*(void (**)(char *, uint64_t))(v39 + 8))(v31, v40);
          swift_release_n();
          swift_release();
          return swift_release();
        }
        sub_25A3DD980();
        uint64_t v26 = (void *)sub_25A50F8D0();
        uint64_t v52 = sub_25A4CF8B4;
        uint64_t v53 = v17;
        id aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v49 = 1107296256;
        uint64_t v50 = sub_25A3BE05C;
        char v51 = &block_descriptor_195;
        uint64_t v27 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        uint64_t v28 = v37;
        sub_25A50E770();
        id aBlock = (void *)MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
        uint64_t v29 = v38;
        sub_25A50FC90();
        MEMORY[0x26113D8E0](0, v28, v29, v27);
        _Block_release(v27);

        (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v24);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v40);
      }
      else
      {
        id aBlock = v44;
        uint64_t v49 = v7;
        LOBYTE(v50) = v22;
        char v51 = v8;
        uint64_t v52 = v21;
        uint64_t v53 = v9;
        uint64_t v54 = v34;
        char v55 = v35;
        v36(&aBlock);
      }
    }
    swift_release_n();
    return swift_release();
  }
  return result;
}

void sub_25A4CC3AC(uint64_t a1, void *a2, uint64_t a3, void (*a4)(long long *), uint64_t a5)
{
  uint64_t v29 = sub_25A50E750();
  uint64_t v32 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_25A50E790();
  uint64_t v30 = *(void *)(v12 - 8);
  uint64_t v31 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for FutureTermination();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v28 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v28 - v17, a1, v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return;
  }
  if (EnumCaseMultiPayload == 1)
  {

    return;
  }
  long long v20 = *((_OWORD *)v18 + 1);
  long long v37 = *(_OWORD *)v18;
  long long v38 = v20;
  v39[0] = *((_OWORD *)v18 + 2);
  *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)(v18 + 41);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a4;
  *(void *)(v21 + 24) = a5;
  long long v22 = *((_OWORD *)v18 + 1);
  *(_OWORD *)(v21 + 32) = *(_OWORD *)v18;
  *(_OWORD *)(v21 + 48) = v22;
  *(_OWORD *)(v21 + 64) = *((_OWORD *)v18 + 2);
  *(_OWORD *)(v21 + 73) = *(_OWORD *)(v18 + 41);
  *(void *)&long long aBlock = a2;
  *((void *)&aBlock + 1) = a3;
  swift_retain_n();
  if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
  {
    long long aBlock = v37;
    long long v35 = v38;
    v36[0] = v39[0];
    *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)((char *)v39 + 9);
    a4(&aBlock);
  }
  else
  {
    if (a2 != (void *)1)
    {
      *(void *)&v36[0] = sub_25A4CF8B4;
      *((void *)&v36[0] + 1) = v21;
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v35 = sub_25A3BE05C;
      *((void *)&v35 + 1) = &block_descriptor_211;
      uint64_t v26 = _Block_copy(&aBlock);
      swift_retain();
      sub_25A3EE304(a2);
      sub_25A50E770();
      uint64_t v33 = MEMORY[0x263F8EE78];
      sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      uint64_t v27 = v29;
      sub_25A50FC90();
      MEMORY[0x26113D8E0](0, v14, v11, v26);
      _Block_release(v26);
      sub_25A3EE314(a2);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v27);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v31);
      swift_release_n();
      swift_release();
      goto LABEL_11;
    }
    sub_25A3DD980();
    uint64_t v23 = (void *)sub_25A50F8D0();
    *(void *)&v36[0] = sub_25A4CF8B4;
    *((void *)&v36[0] + 1) = v21;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v35 = sub_25A3BE05C;
    *((void *)&v35 + 1) = &block_descriptor_214;
    uint64_t v24 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    sub_25A50E770();
    *(void *)&long long aBlock = MEMORY[0x263F8EE78];
    sub_25A3BE558();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
    sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
    uint64_t v25 = v29;
    sub_25A50FC90();
    MEMORY[0x26113D8E0](0, v14, v11, v24);
    _Block_release(v24);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v25);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v31);
  }
  swift_release_n();
LABEL_11:
  swift_release();
}

uint64_t sub_25A4CC968(uint64_t a1)
{
  return sub_25A4CD0EC(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_25A4CC3AC);
}

uint64_t sub_25A4CC984(uint64_t a1)
{
  return sub_25A4CD0EC(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_25A4C65E8);
}

uint64_t sub_25A4CC9A0(uint64_t a1)
{
  return sub_25A4CD0EC(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_25A4C9694);
}

uint64_t sub_25A4CC9BC(uint64_t a1)
{
  return sub_25A4CD0EC(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_25A4C9E48);
}

uint64_t sub_25A4CC9D4(uint64_t (*a1)(_OWORD *), uint64_t a2, _OWORD *a3)
{
  long long v3 = a3[1];
  v5[0] = *a3;
  v5[1] = v3;
  v6[0] = a3[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a3 + 41);
  return a1(v5);
}

uint64_t Future.observeUnsuccessfulResult(on:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4CCA44(a1, a2, a3, (uint64_t)&unk_2708364D8, (void (*)(void))sub_25A4CD0D4);
}

uint64_t sub_25A4CCA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v9 = *v5;
  uint64_t v10 = *(void **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = (void *)swift_allocObject();
  long long v12[2] = *(void *)(v9 + 80);
  v12[3] = v10;
  v12[4] = v11;
  uint64_t v12[5] = a2;
  v12[6] = a3;
  sub_25A3EE304(v10);
  swift_retain();
  sub_25A4EF460(a5, (uint64_t)v12);

  return swift_release();
}

void sub_25A4CCAF4(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v9 = sub_25A50E750();
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v37 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v33 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25A50E790();
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v14 = sub_25A510540();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (void **)((char *)&v31 - v16);
  uint64_t v18 = type metadata accessor for FutureTermination();
  FutureTermination.result.getter(v18, v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v17;
    long long v20 = (void *)swift_allocObject();
    uint64_t v20[2] = a4;
    v20[3] = a5;
    v20[4] = v19;
    long long aBlock = a2;
    uint64_t v40 = a3;
    swift_retain();
    id v21 = v19;
    swift_retain();
    id v22 = v19;
    swift_retain();
    id v23 = v19;
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
    {
      a4(v19);
    }
    else if (a2 == (void *)1)
    {
      sub_25A3DD980();
      uint64_t v32 = sub_25A50F8D0();
      uint64_t v43 = sub_25A4CD7E4;
      char v44 = v20;
      long long aBlock = (void *)MEMORY[0x263EF8330];
      uint64_t v40 = 1107296256;
      uint64_t v41 = sub_25A3BE05C;
      uint64_t v42 = &block_descriptor_24;
      uint64_t v24 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      sub_25A50E770();
      long long aBlock = (void *)MEMORY[0x263F8EE78];
      sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      uint64_t v25 = v33;
      uint64_t v26 = v37;
      sub_25A50FC90();
      uint64_t v27 = (void *)v32;
      MEMORY[0x26113D8E0](0, v13, v25, v24);
      _Block_release(v24);

      (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v26);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
    }
    else
    {
      uint64_t v43 = sub_25A4CD7E4;
      char v44 = v20;
      long long aBlock = (void *)MEMORY[0x263EF8330];
      uint64_t v40 = 1107296256;
      uint64_t v41 = sub_25A3BE05C;
      uint64_t v42 = &block_descriptor_11;
      uint64_t v32 = (uint64_t)_Block_copy(&aBlock);
      swift_retain();
      sub_25A3EE304(a2);
      sub_25A50E770();
      uint64_t v38 = MEMORY[0x263F8EE78];
      unint64_t v31 = sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      uint64_t v28 = v33;
      uint64_t v29 = v37;
      sub_25A50FC90();
      uint64_t v30 = (const void *)v32;
      MEMORY[0x26113D8E0](0, v13, v28, v32);
      _Block_release(v30);
      sub_25A3EE314(a2);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v29);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
      swift_release();
    }

    swift_release();
    swift_release();

    swift_release();
  }
  else
  {
    (*(void (**)(void **, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t objectdestroyTm_2()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if ((unint64_t)v1 >= 2) {

  }
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A4CD0D4(uint64_t a1)
{
  return sub_25A4CD0EC(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_25A4CCAF4);
}

uint64_t sub_25A4CD0EC(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[3], v2[4], v2[5], v2[6], v2[2]);
}

uint64_t Future.cancelOrObserveSuccess(dsoHandle:file:line:column:function:on:closure:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, long long *a10, uint64_t a11, uint64_t a12)
{
  long long v21 = *a10;
  Future.observeSuccess(on:_:)((uint64_t)&v21, a11, a12);
  *(void *)&long long v21 = a2;
  *((void *)&v21 + 1) = a3;
  char v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  char v27 = a9;
  return (*(uint64_t (**)(long long *))(*(void *)v12 + 192))(&v21);
}

uint64_t Future.hasFinishedSuccessfully.getter()
{
  uint64_t v0 = type metadata accessor for FutureTermination();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  long long v3 = (char *)&v10 - v2;
  uint64_t v4 = type metadata accessor for FutureState();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - v5;
  sub_25A4EEF28((uint64_t)&v10 - v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v6, v0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = 1;
      goto LABEL_7;
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = 0;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      return v8;
    }
  }
  return 0;
}

uint64_t PromiseProtocol<>.track(future:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, a2);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v7, a2);
  v12[0] = 0;
  v12[1] = 0;
  Future.observeFinish(on:_:)((uint64_t)v12, (uint64_t)sub_25A4CD7A0, v10);
  return swift_release();
}

void sub_25A4CD49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = type metadata accessor for FutureTermination();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (uint64_t *)((char *)&v17 - v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v17 - v12, a1, v11);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v16 = (void *)*v13;
      PromiseProtocol.fulfill<>(file:line:column:function:throwing:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future+Observation.swift", 130, 2, 142, 29, (uint64_t)"track(future:)", 14, 2, *v13, a3, a4);
    }
    else
    {
      PromiseProtocol.cancel<>(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future+Observation.swift", 130, 2, 144, 28, (uint64_t)"track(future:)", 14, 2, a3, a4);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v10, v13, AssociatedTypeWitness);
    PromiseProtocol.fulfill(file:line:column:function:returning:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future+Observation.swift", 130, 2, 140, 29, (uint64_t)"track(future:)", 14, 2, (uint64_t)v10, a3, a4);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
}

uint64_t sub_25A4CD718()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

void sub_25A4CD7A0(uint64_t a1)
{
  sub_25A4CD49C(a1, v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t objectdestroy_20Tm_0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A4CD844()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_25A4CD874()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A4CD938()
{
  return (*(uint64_t (**)(unint64_t))(v0 + 24))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
}

uint64_t sub_25A4CD99C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for FutureTermination() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
  }
  else if (!EnumCaseMultiPayload)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);
  }

  return MEMORY[0x270FA0238](v0, v4 + v5, v3 | 7);
}

uint64_t sub_25A4CDAB0()
{
  uint64_t v1 = *(void *)(type metadata accessor for FutureTermination() - 8);
  return (*(uint64_t (**)(unint64_t))(v0 + 24))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_25A4CDB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 152);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  sub_25A4CDBE0((unint64_t *)(v3 + 16), &v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  BOOL v4 = v6;
  uint64_t result = swift_release();
  if (v4) {
    return sub_25A39DD44(a1);
  }
  return result;
}

BOOL sub_25A4CDBB0@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  BOOL result = sub_25A4C5DD4(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

unint64_t sub_25A4CDBE0@<X0>(unint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  unint64_t result = *a1;
  unint64_t v5 = result & 0xC000000000000000;
  if ((result & 0xC000000000000000) == 0x4000000000000000)
  {
    unint64_t result = sub_25A46FA68(result);
    *a1 = 0x8000000000000000;
  }
  *a2 = v5 == 0x4000000000000000;
  return result;
}

uint64_t sub_25A4CDC48(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = a4;
  uint64_t v59 = a3;
  unsigned __int8 v57 = a2;
  uint64_t v5 = sub_25A50E750();
  uint64_t v55 = *(void *)(v5 - 8);
  uint64_t v56 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v52 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25A50E790();
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  MEMORY[0x270FA5388](v7);
  char v51 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (void **)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B180);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (void **)((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197D8);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v58 = (uint64_t)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  long long v21 = (char *)&v50 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)&v50 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v60 = (uint64_t)&v50 - v25;
  sub_25A393828(a1, (uint64_t)v11, &qword_26A415D20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_25A3F6C88((uint64_t)v11, (uint64_t)v14);
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *uint64_t v14 = *v11;
LABEL_5:
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = 0;
    goto LABEL_7;
  }
  uint64_t v27 = 1;
LABEL_7:
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, v27, 1, v15);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    uint64_t v30 = (uint64_t)v14;
    uint64_t v31 = v60;
    sub_25A39F4F8(v30, v60, &qword_26A4197D8);
    sub_25A393828(v31, (uint64_t)v24, &qword_26A4197D8);
    uint64_t v32 = (uint64_t)v21;
    sub_25A393828((uint64_t)v24, (uint64_t)v21, &qword_26A4197D8);
    uint64_t v33 = v58;
    sub_25A393828((uint64_t)v24, v58, &qword_26A4197D8);
    unint64_t v34 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v61;
    *(void *)(v35 + 16) = sub_25A4D0A6C;
    *(void *)(v35 + 24) = v36;
    sub_25A39F4F8((uint64_t)v24, v35 + v34, &qword_26A4197D8);
    uint64_t v37 = v57;
    long long aBlock = v57;
    uint64_t v64 = v59;
    swift_retain_n();
    if (ExecutionLane.isCurrentLane.getter())
    {
      uint64_t v38 = v32;
    }
    else
    {
      if (v37)
      {
        if (v37 != (void *)1)
        {
          uint64_t v67 = sub_25A4CF948;
          uint64_t v68 = v35;
          long long aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v64 = 1107296256;
          uint64_t v65 = sub_25A3BE05C;
          uint64_t v66 = &block_descriptor_101;
          uint64_t v50 = _Block_copy(&aBlock);
          swift_retain();
          sub_25A3EE304(v37);
          uint64_t v46 = v51;
          sub_25A50E770();
          uint64_t v62 = MEMORY[0x263F8EE78];
          sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v47 = v52;
          uint64_t v48 = v56;
          sub_25A50FC90();
          uint64_t v49 = v50;
          MEMORY[0x26113D8E0](0, v46, v47, v50);
          _Block_release(v49);
          sub_25A3EE314(v37);
          (*(void (**)(char *, uint64_t))(v55 + 8))(v47, v48);
          (*(void (**)(char *, uint64_t))(v53 + 8))(v46, v54);
          swift_release();
          swift_release();
          goto LABEL_17;
        }
        sub_25A3DD980();
        uint64_t v39 = (void *)sub_25A50F8D0();
        uint64_t v67 = sub_25A4CF948;
        uint64_t v68 = v35;
        long long aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v64 = 1107296256;
        uint64_t v65 = sub_25A3BE05C;
        uint64_t v66 = &block_descriptor_104;
        uint64_t v40 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        uint64_t v41 = v51;
        sub_25A50E770();
        long long aBlock = (void *)MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
        uint64_t v42 = v52;
        uint64_t v43 = v56;
        sub_25A50FC90();
        MEMORY[0x26113D8E0](0, v41, v42, v40);
        _Block_release(v40);

        (*(void (**)(char *, uint64_t))(v55 + 8))(v42, v43);
        char v44 = v41;
        uint64_t v33 = v58;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v44, v54);
LABEL_16:
        swift_release();
LABEL_17:
        swift_release();
        sub_25A384BCC(v33, &qword_26A4197D8);
        swift_release();
        sub_25A384BCC(v32, &qword_26A4197D8);
        uint64_t v29 = v60;
        uint64_t v28 = &qword_26A4197D8;
        goto LABEL_18;
      }
      uint64_t v38 = v33;
    }
    sub_25A4C61BC(v38);
    goto LABEL_16;
  }
  swift_retain();
  uint64_t v28 = &qword_26A41B180;
  uint64_t v29 = (uint64_t)v14;
LABEL_18:
  sub_25A384BCC(v29, v28);
  return swift_release();
}

uint64_t sub_25A4CE3E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  uint64_t v8 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v23 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B168);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = sub_25A4CF930;
  v16[5] = a4;
  uint64_t v17 = *(void *)(a3 + 88);
  uint64_t v26 = sub_25A4CF938;
  uint64_t v27 = v16;
  uint64_t v18 = (void *)(v17 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v17 + 16));
  uint64_t v19 = (os_unfair_lock_s *)(v17 + ((*(unsigned int *)(*(void *)v17 + 48) + 3) & 0x1FFFFFFFCLL));
  sub_25A3EE304(a1);
  swift_retain();
  uint64_t v25 = a2;
  sub_25A3EE304(a1);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_25A4D0B30(v18, (uint64_t)v15);
  os_unfair_lock_unlock(v19);
  swift_release();
  sub_25A393828((uint64_t)v15, (uint64_t)v13, &qword_26A41B168);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v24) == 1)
  {
    sub_25A384BCC((uint64_t)v15, &qword_26A41B168);
    uint64_t v15 = v13;
  }
  else
  {
    uint64_t v20 = v23;
    sub_25A39F4F8((uint64_t)v13, v23, &qword_26A415D20);
    swift_retain();
    sub_25A4CDC48(v20, a1, v25, a4);
    swift_release();
    sub_25A384BCC(v20, &qword_26A415D20);
  }
  sub_25A384BCC((uint64_t)v15, &qword_26A41B168);
  swift_release();
  sub_25A3EE314(a1);
  return swift_release_n();
}

uint64_t sub_25A4CE718(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_25A50E750();
  uint64_t v31 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25A50E790();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  uint64_t v30 = v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A393828(a1, (uint64_t)v17, &qword_26A415D20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v19 = *(void **)v17;
      swift_retain();
    }
    else
    {
      long long v20 = *((_OWORD *)v17 + 1);
      v39[0] = *(_OWORD *)v17;
      v39[1] = v20;
      v40[0] = *((_OWORD *)v17 + 2);
      *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)(v17 + 41);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = sub_25A4D0A70;
      *(void *)(v21 + 24) = a4;
      long long v22 = *((_OWORD *)v17 + 1);
      *(_OWORD *)(v21 + 32) = *(_OWORD *)v17;
      *(_OWORD *)(v21 + 48) = v22;
      *(_OWORD *)(v21 + 64) = *((_OWORD *)v17 + 2);
      *(_OWORD *)(v21 + 73) = *(_OWORD *)(v17 + 41);
      long long aBlock = a2;
      uint64_t v34 = a3;
      swift_retain_n();
      if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
      {
        sub_25A4C6328(v39, a4);
      }
      else
      {
        if (a2 != (void *)1)
        {
          uint64_t v37 = sub_25A4CF8B4;
          uint64_t v38 = v21;
          long long aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v34 = 1107296256;
          uint64_t v35 = sub_25A3BE05C;
          uint64_t v36 = &block_descriptor_87;
          uint64_t v28 = _Block_copy(&aBlock);
          swift_retain();
          sub_25A3EE304(a2);
          sub_25A50E770();
          uint64_t v32 = MEMORY[0x263F8EE78];
          sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          sub_25A50FC90();
          uint64_t v26 = v28;
          MEMORY[0x26113D8E0](0, v14, v10, v28);
          _Block_release(v26);
          sub_25A3EE314(a2);
          (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v29);
          swift_release_n();
          swift_release();
          return swift_release();
        }
        sub_25A3DD980();
        uint64_t v23 = (void *)sub_25A50F8D0();
        uint64_t v37 = sub_25A4CF8B4;
        uint64_t v38 = v21;
        long long aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v34 = 1107296256;
        uint64_t v35 = sub_25A3BE05C;
        uint64_t v36 = &block_descriptor_90;
        uint64_t v24 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        sub_25A50E770();
        long long aBlock = (void *)MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
        sub_25A50FC90();
        MEMORY[0x26113D8E0](0, v14, v10, v24);
        _Block_release(v24);

        (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v29);
      }
      swift_release_n();
    }
  }
  else
  {
    swift_retain();
    sub_25A384BCC((uint64_t)v17, &qword_26A415D20);
  }
  return swift_release();
}

uint64_t sub_25A4CEC80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  uint64_t v8 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v23 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B168);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = sub_25A4CF8B8;
  v16[5] = a4;
  uint64_t v17 = *(void *)(a3 + 88);
  uint64_t v26 = sub_25A4D0A74;
  uint64_t v27 = v16;
  uint64_t v18 = (void *)(v17 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v17 + 16));
  uint64_t v19 = (os_unfair_lock_s *)(v17 + ((*(unsigned int *)(*(void *)v17 + 48) + 3) & 0x1FFFFFFFCLL));
  sub_25A3EE304(a1);
  swift_retain();
  uint64_t v25 = a2;
  sub_25A3EE304(a1);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_25A4D0B30(v18, (uint64_t)v15);
  os_unfair_lock_unlock(v19);
  swift_release();
  sub_25A393828((uint64_t)v15, (uint64_t)v13, &qword_26A41B168);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v24) == 1)
  {
    sub_25A384BCC((uint64_t)v15, &qword_26A41B168);
    uint64_t v15 = v13;
  }
  else
  {
    uint64_t v20 = v23;
    sub_25A39F4F8((uint64_t)v13, v23, &qword_26A415D20);
    swift_retain();
    sub_25A4CE718(v20, a1, v25, a4);
    swift_release();
    sub_25A384BCC(v20, &qword_26A415D20);
  }
  sub_25A384BCC((uint64_t)v15, &qword_26A41B168);
  swift_release();
  sub_25A3EE314(a1);
  return swift_release_n();
}

uint64_t sub_25A4CEFB0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_25A50E750();
  uint64_t v31 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25A50E790();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  uint64_t v30 = v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A393828(a1, (uint64_t)v17, &qword_26A415D20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v19 = *(void **)v17;
      swift_retain();
    }
    else
    {
      long long v20 = *((_OWORD *)v17 + 1);
      long long v36 = *(_OWORD *)v17;
      long long v37 = v20;
      v38[0] = *((_OWORD *)v17 + 2);
      *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)(v17 + 41);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = sub_25A3BE48C;
      *(void *)(v21 + 24) = a4;
      long long v22 = *((_OWORD *)v17 + 1);
      *(_OWORD *)(v21 + 32) = *(_OWORD *)v17;
      *(_OWORD *)(v21 + 48) = v22;
      *(_OWORD *)(v21 + 64) = *((_OWORD *)v17 + 2);
      *(_OWORD *)(v21 + 73) = *(_OWORD *)(v17 + 41);
      *(void *)&long long aBlock = a2;
      *((void *)&aBlock + 1) = a3;
      swift_retain_n();
      if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
      {
        long long aBlock = v36;
        long long v34 = v37;
        v35[0] = v38[0];
        *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)((char *)v38 + 9);
        (*(void (**)(long long *))(*(void *)a4 + 192))(&aBlock);
      }
      else
      {
        if (a2 != (void *)1)
        {
          *(void *)&v35[0] = sub_25A4CF8B4;
          *((void *)&v35[0] + 1) = v21;
          *(void *)&long long aBlock = MEMORY[0x263EF8330];
          *((void *)&aBlock + 1) = 1107296256;
          *(void *)&long long v34 = sub_25A3BE05C;
          *((void *)&v34 + 1) = &block_descriptor_61;
          uint64_t v28 = _Block_copy(&aBlock);
          swift_retain();
          sub_25A3EE304(a2);
          sub_25A50E770();
          uint64_t v32 = MEMORY[0x263F8EE78];
          sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          sub_25A50FC90();
          uint64_t v26 = v28;
          MEMORY[0x26113D8E0](0, v14, v10, v28);
          _Block_release(v26);
          sub_25A3EE314(a2);
          (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v29);
          swift_release_n();
          swift_release();
          return swift_release();
        }
        sub_25A3DD980();
        uint64_t v23 = (void *)sub_25A50F8D0();
        *(void *)&v35[0] = sub_25A4CF8B4;
        *((void *)&v35[0] + 1) = v21;
        *(void *)&long long aBlock = MEMORY[0x263EF8330];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v34 = sub_25A3BE05C;
        *((void *)&v34 + 1) = &block_descriptor_64;
        uint64_t v24 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        sub_25A50E770();
        *(void *)&long long aBlock = MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
        sub_25A50FC90();
        MEMORY[0x26113D8E0](0, v14, v10, v24);
        _Block_release(v24);

        (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v29);
      }
      swift_release_n();
    }
  }
  else
  {
    swift_retain();
    sub_25A384BCC((uint64_t)v17, &qword_26A415D20);
  }
  return swift_release();
}

uint64_t sub_25A4CF558(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  uint64_t v8 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v23 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B168);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = sub_25A3BE48C;
  v16[5] = a4;
  uint64_t v17 = *(void *)(a3 + 88);
  uint64_t v26 = sub_25A4CF88C;
  uint64_t v27 = v16;
  uint64_t v18 = (void *)(v17 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v17 + 16));
  uint64_t v19 = (os_unfair_lock_s *)(v17 + ((*(unsigned int *)(*(void *)v17 + 48) + 3) & 0x1FFFFFFFCLL));
  sub_25A3EE304(a1);
  swift_retain();
  uint64_t v25 = a2;
  sub_25A3EE304(a1);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_25A4CF898(v18, (uint64_t)v15);
  os_unfair_lock_unlock(v19);
  swift_release();
  sub_25A393828((uint64_t)v15, (uint64_t)v13, &qword_26A41B168);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v24) == 1)
  {
    sub_25A384BCC((uint64_t)v15, &qword_26A41B168);
    uint64_t v15 = v13;
  }
  else
  {
    uint64_t v20 = v23;
    sub_25A39F4F8((uint64_t)v13, v23, &qword_26A415D20);
    swift_retain();
    sub_25A4CEFB0(v20, a1, v25, a4);
    swift_release();
    sub_25A384BCC(v20, &qword_26A415D20);
  }
  sub_25A384BCC((uint64_t)v15, &qword_26A41B168);
  swift_release();
  sub_25A3EE314(a1);
  return swift_release_n();
}

void sub_25A4CF88C(uint64_t a1)
{
  sub_25A4CA404(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void (**)(long long *))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_25A4CF898@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A503344(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_25A4CF8B8(_OWORD *a1)
{
  long long v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  v5[0] = a1[2];
  *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)((char *)a1 + 41);
  return sub_25A4C6328(v4, v1);
}

BOOL sub_25A4CF8FC@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_25A4C5DD4(a1, *(void *)(v2 + 16));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_25A4CF938(uint64_t a1)
{
  return sub_25A4C6C74(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_25A4CF948()
{
  return sub_25A4D06D4(&qword_26A4197D8);
}

uint64_t objectdestroy_97Tm()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4197D8) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  uint64_t v5 = (id *)(v0 + v3);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
  }
  else
  {
    uint64_t v6 = sub_25A50E4C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
    uint64_t v7 = type metadata accessor for CrashReport(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = (char *)v5 + *(int *)(v7 + 32);
    uint64_t v9 = sub_25A50E470();
    (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t sub_25A4CFB0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v5 = sub_25A50E750();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v42 = v5;
  uint64_t v43 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25A50E790();
  uint64_t v44 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v40 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v40 - v19;
  sub_25A393828(a1, (uint64_t)&v40 - v19, &qword_26A415D20);
  uint64_t v45 = v18;
  sub_25A393828((uint64_t)v20, (uint64_t)v18, &qword_26A415D20);
  uint64_t v46 = (uint64_t)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A393828((uint64_t)v20, v46, &qword_26A415D20);
  unint64_t v21 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v22 = v49;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_25A4D04F8;
  *(void *)(v23 + 24) = v22;
  uint64_t v24 = v47;
  uint64_t v25 = v48;
  sub_25A39F4F8((uint64_t)v20, v23 + v21, &qword_26A415D20);
  long long aBlock = v24;
  uint64_t v52 = v25;
  swift_retain_n();
  if (ExecutionLane.isCurrentLane.getter())
  {
    uint64_t v26 = *(void *)(v22 + 152);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v26 + 24));
    sub_25A4CDBE0((unint64_t *)(v26 + 16), (BOOL *)&aBlock);
    os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 24));
    int v27 = aBlock;
    swift_release();
    if (v27 == 1)
    {
      uint64_t v28 = (uint64_t)v45;
      sub_25A39DD44((uint64_t)v45);
      swift_release();
      swift_release();
      uint64_t v29 = v46;
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  uint64_t v41 = v9;
  if (v24)
  {
    uint64_t v30 = v11;
    if (v24 != (void *)1)
    {
      uint64_t v55 = sub_25A4D06C8;
      uint64_t v56 = v23;
      long long aBlock = (void *)MEMORY[0x263EF8330];
      uint64_t v52 = 1107296256;
      uint64_t v53 = sub_25A3BE05C;
      uint64_t v54 = &block_descriptor_125;
      long long v36 = v24;
      long long v37 = _Block_copy(&aBlock);
      swift_retain();
      sub_25A3EE304(v36);
      sub_25A50E770();
      uint64_t v50 = MEMORY[0x263F8EE78];
      sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      uint64_t v38 = v42;
      sub_25A50FC90();
      MEMORY[0x26113D8E0](0, v30, v8, v37);
      _Block_release(v37);
      sub_25A3EE314(v36);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v38);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v41);
      swift_release();
      swift_release();
      goto LABEL_12;
    }
    sub_25A3DD980();
    uint64_t v31 = (void *)sub_25A50F8D0();
    uint64_t v55 = sub_25A4D06C8;
    uint64_t v56 = v23;
    long long aBlock = (void *)MEMORY[0x263EF8330];
    uint64_t v52 = 1107296256;
    uint64_t v53 = sub_25A3BE05C;
    uint64_t v54 = &block_descriptor_128;
    uint64_t v32 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    sub_25A50E770();
    long long aBlock = (void *)MEMORY[0x263F8EE78];
    sub_25A3BE558();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
    sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
    uint64_t v33 = v42;
    sub_25A50FC90();
    MEMORY[0x26113D8E0](0, v11, v8, v32);
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v33);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v41);
LABEL_7:
    swift_release();
LABEL_12:
    swift_release();
    uint64_t v28 = (uint64_t)v45;
    uint64_t v29 = v46;
    goto LABEL_13;
  }
  uint64_t v34 = *(void *)(v22 + 152);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v34 + 24));
  sub_25A4CDBE0((unint64_t *)(v34 + 16), (BOOL *)&aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(v34 + 24));
  int v35 = aBlock;
  swift_release();
  uint64_t v28 = (uint64_t)v45;
  uint64_t v29 = v46;
  if (v35 == 1) {
    sub_25A39DD44(v46);
  }
  swift_release();
  swift_release();
LABEL_13:
  sub_25A384BCC(v29, &qword_26A415D20);
  swift_release();
  sub_25A384BCC(v28, &qword_26A415D20);
  return swift_release_n();
}

uint64_t sub_25A4D01C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  uint64_t v8 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v23 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B168);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = sub_25A4D04F8;
  v16[5] = a4;
  uint64_t v17 = *(void *)(a3 + 88);
  uint64_t v26 = sub_25A4D0504;
  int v27 = v16;
  uint64_t v18 = (void *)(v17 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v17 + 16));
  uint64_t v19 = (os_unfair_lock_s *)(v17 + ((*(unsigned int *)(*(void *)v17 + 48) + 3) & 0x1FFFFFFFCLL));
  sub_25A3EE304(a1);
  swift_retain();
  uint64_t v25 = a2;
  sub_25A3EE304(a1);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_25A4D0B30(v18, (uint64_t)v15);
  os_unfair_lock_unlock(v19);
  swift_release();
  sub_25A393828((uint64_t)v15, (uint64_t)v13, &qword_26A41B168);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v24) == 1)
  {
    sub_25A384BCC((uint64_t)v15, &qword_26A41B168);
    uint64_t v15 = v13;
  }
  else
  {
    uint64_t v20 = v23;
    sub_25A39F4F8((uint64_t)v13, v23, &qword_26A415D20);
    swift_retain();
    sub_25A4CFB0C(v20, a1, v25, a4);
    swift_release();
    sub_25A384BCC(v20, &qword_26A415D20);
  }
  sub_25A384BCC((uint64_t)v15, &qword_26A41B168);
  swift_release();
  sub_25A3EE314(a1);
  return swift_release_n();
}

uint64_t sub_25A4D04F8(uint64_t a1)
{
  return sub_25A4CDB1C(a1, v1);
}

uint64_t sub_25A4D0504(uint64_t a1)
{
  return sub_25A502D24(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void (**)(char *))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_25A4D0510()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  uint64_t v5 = (id *)(v0 + v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = sub_25A50E4C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v3, v7);
    uint64_t v8 = type metadata accessor for CrashReport(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = (char *)v5 + *(int *)(v8 + 32);
    uint64_t v10 = sub_25A50E470();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t sub_25A4D06C8()
{
  return sub_25A4D06D4(&qword_26A415D20);
}

uint64_t sub_25A4D06D4(uint64_t *a1)
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8);
  return (*(uint64_t (**)(unint64_t))(v1 + 16))(v1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
}

uint64_t sub_25A4D0738()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 89, 7);
}

uint64_t sub_25A4D0774()
{
  return sub_25A46F068(*(uint64_t (**)(uint64_t *))(v0 + 16), *(void *)(v0 + 24), (uint64_t *)(v0 + 32));
}

uint64_t sub_25A4D0780()
{
  swift_release();
  sub_25A3F4F88(*(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));

  return MEMORY[0x270FA0238](v0, 57, 7);
}

uint64_t sub_25A4D07C8()
{
  return sub_25A3F43C0(*(uint64_t (**)(long long *))(v0 + 16), *(void *)(v0 + 24), (long long *)(v0 + 32));
}

uint64_t objectdestroy_140Tm()
{
  swift_release();
  sub_25A3A4ABC(*(id *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x270FA0238](v0, 41, 7);
}

uint64_t sub_25A4D081C()
{
  swift_release();
  sub_25A3F5220(*(void **)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x270FA0238](v0, 49, 7);
}

uint64_t sub_25A4D0860()
{
  return sub_25A3F4528(*(uint64_t (**)(long long *))(v0 + 16), *(void *)(v0 + 24), (long long *)(v0 + 32));
}

uint64_t sub_25A4D086C()
{
  uint64_t v1 = *(uint64_t (**)(_OWORD *))(v0 + 16);
  long long v2 = *(_OWORD *)(v0 + 48);
  v4[0] = *(_OWORD *)(v0 + 32);
  v4[1] = v2;
  v5[0] = *(_OWORD *)(v0 + 64);
  *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)(v0 + 73);
  return v1(v4);
}

uint64_t sub_25A4D08BC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v2 = *(void *)(sub_25A510540() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1) {

  }
  else {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);
  }

  return MEMORY[0x270FA0238](v0, v4 + v5, v3 | 7);
}

uint64_t sub_25A4D09E4()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v1 = *(void *)(sub_25A510540() - 8);
  return (*(uint64_t (**)(unint64_t))(v0 + 24))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_25A4D0B30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A4CF898(a1, a2);
}

uint64_t sub_25A4D0BE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  LODWORD(v6) = a5;
  sub_25A50E050();
  swift_allocObject();
  uint64_t v12 = sub_25A50E040();
  id v13 = objc_msgSend(self, sel_mainBundle);
  id v14 = objc_msgSend(v13, sel_bundleIdentifier);

  if (v14)
  {
    uint64_t v15 = sub_25A50EC20();
    uint64_t v17 = v16;

    if (a4)
    {
      if (v15 != a3 || v17 != a4)
      {
        int v39 = (int)v6;
        uint64_t v6 = (uint8_t *)a2;
        uint64_t v19 = v12;
        char v20 = sub_25A510370();
        swift_bridgeObjectRelease();
        if (v20)
        {
          swift_bridgeObjectRelease();
          unint64_t v21 = 0;
          a3 = 0;
          a4 = 0;
LABEL_12:
          uint64_t v12 = v19;
          a2 = (uint64_t)v6;
          LODWORD(v6) = v39;
          goto LABEL_16;
        }
LABEL_11:
        swift_bridgeObjectRetain();
        unint64_t v21 = (void *)sub_25A50EBF0();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v21 = 0;
      a3 = 0;
      a4 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v21 = 0;
    }
  }
  else
  {
    if (a4)
    {
      int v39 = (int)v6;
      uint64_t v6 = (uint8_t *)a2;
      uint64_t v19 = v12;
      goto LABEL_11;
    }
    unint64_t v21 = 0;
    a3 = 0;
  }
LABEL_16:
  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFFA40]), sel_initWithSuiteName_, v21);

  if (!v22)
  {
    uint64_t v38 = a1;
    if (qword_26B329310 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_25A50E5E0();
    __swift_project_value_buffer(v25, (uint64_t)qword_26B3292F8);
    swift_bridgeObjectRetain_n();
    uint64_t v26 = sub_25A50E5C0();
    os_log_type_t v27 = sub_25A50F830();
    if (os_log_type_enabled(v26, v27))
    {
      int v39 = (int)v6;
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v42 = v28;
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v37 = v12;
      if (a4)
      {
        uint64_t v43 = 0;
        unint64_t v44 = 0xE000000000000000;
        uint64_t v40 = a3;
        uint64_t v41 = a4;
        sub_25A50FFB0();
        uint64_t v29 = 0;
        unint64_t v30 = 0xE000000000000000;
      }
      else
      {
        unint64_t v30 = 0xE300000000000000;
        uint64_t v29 = 7104878;
      }
      uint64_t v43 = (const char *)sub_25A3A36A4(v29, v30, &v42);
      sub_25A50FB00();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25A380000, v26, v27, "Failed to access defaults for %s; falling back to .standard", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x26113F070](v28, -1, -1);
      MEMORY[0x26113F070](v6, -1, -1);

      LOBYTE(v6) = v39;
      uint64_t v12 = v37;
    }
    else
    {

      uint64_t v31 = swift_bridgeObjectRelease_n();
    }
    uint64_t v32 = MEMORY[0x270FA5388](v31);
    v36[10] = a3;
    v36[11] = a4;
    uint64_t v33 = MEMORY[0x270FA5388](v32);
    v36[6] = sub_25A4D5DB4;
    v36[7] = v34;
    MEMORY[0x270FA5388](v33);
    _OWORD v36[2] = sub_25A4D5DBC;
    _OWORD v36[3] = v35;
    uint64_t v43 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/UserDefaults.swift";
    unint64_t v44 = 124;
    char v45 = 2;
    long long v46 = xmmword_25A51BC20;
    uint64_t v47 = "init(_:suiteName:defaultValue:cached:)";
    uint64_t v48 = 38;
    char v49 = 2;
    sub_25A402244((uint64_t)sub_25A4D5DBC, (uint64_t)v36, (uint64_t)&v43);
    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t)objc_msgSend(self, sel_standardUserDefaults);
    id v22 = (id)result;
    a1 = v38;
    if (v6) {
      goto LABEL_18;
    }
LABEL_30:
    char v24 = 2;
    goto LABEL_31;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((v6 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_18:
  swift_bridgeObjectRetain();
  uint64_t result = _sSb20PreviewsFoundationOSE15userDefaultsKey0dE0SbSgSS_So06NSUserE0CtcfC_0(a1, a2, v22);
  if (result == 2) {
    char v24 = 1;
  }
  else {
    char v24 = result & 1;
  }
LABEL_31:
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v22;
  *(unsigned char *)(a6 + 24) = v6 & 1;
  *(unsigned char *)(a6 + 25) = v24;
  *(void *)(a6 + 32) = sub_25A3C6FD4;
  *(void *)(a6 + 40) = 0;
  *(void *)(a6 + 48) = v12;
  return result;
}

uint64_t UserDefault.init(_:suiteName:defaultValue:cached:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(void)@<X4>, void (*a6)(void)@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  LODWORD(v64) = a7;
  uint64_t v63 = a3;
  uint64_t v16 = sub_25A50FA40();
  uint64_t v61 = *(void *)(v16 - 8);
  uint64_t v62 = v16;
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v60 = (char *)&v53 - v20;
  unint64_t v21 = (int *)type metadata accessor for UserDefault();
  uint64_t v22 = a9 + v21[11];
  uint64_t v23 = *(void *)(a8 - 8);
  uint64_t v55 = a8;
  uint64_t v56 = v23;
  char v24 = *(void (**)(void))(v23 + 56);
  uint64_t v58 = v23 + 56;
  uint64_t v59 = v22;
  unsigned __int8 v57 = v24;
  v24();
  uint64_t v25 = v21[13];
  sub_25A50E050();
  swift_allocObject();
  *(void *)(a9 + v25) = sub_25A50E040();
  uint64_t v26 = a6;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  os_log_type_t v27 = (void (**)(void))(a9 + v21[12]);
  uint64_t v54 = a5;
  *os_log_type_t v27 = a5;
  v27[1] = a6;
  uint64_t v28 = self;
  swift_retain();
  id v29 = objc_msgSend(v28, sel_mainBundle);
  id v30 = objc_msgSend(v29, sel_bundleIdentifier);

  if (!v30)
  {
    if (!a4)
    {
      long long v36 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = v19;
      goto LABEL_13;
    }
    uint64_t v35 = v19;
    char v37 = (char)v64;
    uint64_t v34 = v63;
LABEL_11:
    swift_bridgeObjectRetain();
    long long v36 = (void *)sub_25A50EBF0();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v31 = sub_25A50EC20();
  uint64_t v33 = v32;

  if (!a4)
  {
    swift_bridgeObjectRelease();
    long long v36 = 0;
    uint64_t v35 = v19;
    char v37 = (char)v64;
    uint64_t v34 = v63;
    goto LABEL_14;
  }
  uint64_t v34 = v63;
  uint64_t v35 = v19;
  if (v31 != v63 || v33 != a4)
  {
    char v38 = sub_25A510370();
    swift_bridgeObjectRelease();
    char v37 = (char)v64;
    if (v38)
    {
      swift_bridgeObjectRelease();
      long long v36 = 0;
      uint64_t v34 = 0;
      a4 = 0;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v36 = 0;
  uint64_t v34 = 0;
  a4 = 0;
LABEL_13:
  char v37 = (char)v64;
LABEL_14:
  id v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFFA40]), sel_initWithSuiteName_, v36);

  if (v39)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_26B329310 != -1) {
      swift_once();
    }
    uint64_t v40 = sub_25A50E5E0();
    __swift_project_value_buffer(v40, (uint64_t)qword_26B3292F8);
    swift_bridgeObjectRetain_n();
    uint64_t v41 = sub_25A50E5C0();
    os_log_type_t v42 = sub_25A50F830();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v64 = v21;
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      uint64_t v67 = v63;
      *(_DWORD *)uint64_t v43 = 136315138;
      uint64_t v53 = v26;
      if (a4)
      {
        uint64_t v68 = 0;
        unint64_t v69 = 0xE000000000000000;
        uint64_t v65 = v34;
        uint64_t v66 = a4;
        sub_25A50FFB0();
        uint64_t v44 = (uint64_t)v68;
        unint64_t v45 = v69;
      }
      else
      {
        unint64_t v45 = 0xE300000000000000;
        uint64_t v44 = 7104878;
      }
      uint64_t v68 = (const char *)sub_25A3A36A4(v44, v45, &v67);
      sub_25A50FB00();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25A380000, v41, v42, "Failed to access defaults for %s; falling back to .standard", v43, 0xCu);
      uint64_t v46 = v63;
      swift_arrayDestroy();
      MEMORY[0x26113F070](v46, -1, -1);
      MEMORY[0x26113F070](v43, -1, -1);

      unint64_t v21 = v64;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/UserDefaults.swift";
    unint64_t v69 = 124;
    char v70 = 2;
    long long v71 = xmmword_25A51BC20;
    uint64_t v72 = "init(_:suiteName:defaultValue:cached:)";
    uint64_t v73 = 38;
    char v74 = 2;
    sub_25A403498();
    swift_bridgeObjectRelease();
    id v39 = objc_msgSend(self, sel_standardUserDefaults);
  }
  *(void *)(a9 + 16) = v39;
  *(unsigned char *)(a9 + 24) = v37 & 1;
  if ((v37 & 1) == 0) {
    return swift_release();
  }
  sub_25A4D21DC((uint64_t)v21);
  uint64_t v47 = v55;
  uint64_t v48 = v56;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v35, 1, v55) == 1)
  {
    char v49 = v60;
    v54();
    swift_release();
    uint64_t v51 = v61;
    uint64_t v50 = v62;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v35, v62);
  }
  else
  {
    swift_release();
    char v49 = v60;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v60, v35, v47);
    uint64_t v51 = v61;
    uint64_t v50 = v62;
  }
  ((void (*)(char *, void, uint64_t, uint64_t))v57)(v49, 0, 1, v47);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v51 + 40))(v59, v49, v50);
}

uint64_t sub_25A4D175C@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return UserDefaultRepresentable.init(userDefaultsKey:userDefaults:)(a1, a2, a3);
}

uint64_t sub_25A4D1774@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417858);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)sub_25A50EBF0();
  id v8 = objc_msgSend(a1, sel_objectForKey_, v7);

  if (v8)
  {
    sub_25A50FC10();
    swift_unknownObjectRelease();
    sub_25A3936C4(&v17, v25);
    sub_25A50E020();
    swift_allocObject();
    sub_25A50E010();
    sub_25A3937CC((uint64_t)v25, (uint64_t)&v17);
    if (swift_dynamicCast())
    {
      uint64_t v9 = v23;
      unint64_t v10 = v24;
      uint64_t v11 = sub_25A50E470();
      sub_25A4D5D6C(&qword_26A41B188, MEMORY[0x263F07490]);
      sub_25A50E000();
      sub_25A3B9048(v9, v10);
      uint64_t v13 = *(void *)(v11 - 8);
      id v14 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
      v14(v6, 0, 1, v11);

      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v6, v11);
      return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v14)(a2, 0, 1, v11);
    }
    *(void *)&long long v17 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/UserDefaults.swift";
    *((void *)&v17 + 1) = 124;
    char v18 = 2;
    long long v19 = xmmword_25A51BC30;
    uint64_t v20 = "init(userDefaultsKey:userDefaults:)";
    uint64_t v21 = 35;
    char v22 = 2;
    sub_25A403498();

    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v12 = sub_25A50E470();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 1, 1, v12);
}

uint64_t UserDefaultRepresentable.init(userDefaultsKey:userDefaults:)@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_25A50FA40();
  MEMORY[0x270FA5388](v6);
  id v8 = (char *)&v17 - v7;
  uint64_t v9 = (void *)sub_25A50EBF0();
  id v10 = objc_msgSend(a1, sel_objectForKey_, v9);

  if (v10)
  {
    sub_25A50FC10();
    swift_unknownObjectRelease();
    sub_25A3936C4(&v18, v26);
    sub_25A50E020();
    swift_allocObject();
    sub_25A50E010();
    sub_25A3937CC((uint64_t)v26, (uint64_t)&v18);
    if (swift_dynamicCast())
    {
      uint64_t v17 = a3;
      uint64_t v11 = v24;
      unint64_t v12 = v25;
      sub_25A50E000();
      sub_25A3B9048(v11, v12);
      uint64_t v13 = *(void *)(a2 - 8);
      id v14 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
      v14(v8, 0, 1, a2);

      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      uint64_t v15 = v17;
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v17, v8, a2);
      return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v14)(v15, 0, 1, a2);
    }
    *(void *)&long long v18 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/UserDefaults.swift";
    *((void *)&v18 + 1) = 124;
    char v19 = 2;
    long long v20 = xmmword_25A51BC30;
    uint64_t v21 = "init(userDefaultsKey:userDefaults:)";
    uint64_t v22 = 35;
    char v23 = 2;
    sub_25A403498();

    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
}

uint64_t sub_25A4D1E78@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t UserDefault.Projected.key.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UserDefault.Projected.key.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*UserDefault.Projected.key.modify())()
{
  return nullsub_1;
}

uint64_t UserDefault.Projected.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t UserDefault.Projected.defaultValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*UserDefault.Projected.defaultValue.modify())()
{
  return nullsub_1;
}

uint64_t UserDefault.Projected.actualValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t UserDefault.Projected.actualValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*UserDefault.Projected.actualValue.modify())()
{
  return nullsub_1;
}

uint64_t sub_25A4D2038@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  *(void *)a6 = a1;
  *((void *)a6 + 1) = a2;
  uint64_t v10 = type metadata accessor for UserDefault.Projected();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32);
  v13(&a6[*(int *)(v10 + 36)], a3, a5);
  uint64_t v11 = &a6[*(int *)(v10 + 40)];

  return ((uint64_t (*)(char *, uint64_t, uint64_t))v13)(v11, a4, a5);
}

uint64_t sub_25A4D2100(uint64_t a1, uint64_t a2)
{
  if (a2) {
    sub_25A50FFB0();
  }
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  return 0;
}

uint64_t sub_25A4D21DC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)v1[2];
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(v6 + 24);
  id v8 = v4;
  swift_bridgeObjectRetain();
  return v7(v2, v3, v8, v5, v6);
}

uint64_t UserDefault.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  char v38 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v34 - v8;
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v11 = sub_25A50FA40();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v41 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = v2 + *(int *)(a1 + 44);
  uint64_t v39 = v17;
  long long v18 = *(void (**)(char *, uint64_t))(v17 + 16);
  uint64_t v37 = v19;
  v18((char *)&v34 - v14, v16);
  long long v20 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v20(v9, v2, a1);
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v15, 1, v10) == 1)
  {
    uint64_t v35 = v4;
    long long v36 = v15;
    char v23 = v41;
    sub_25A4D21DC(a1);
    uint64_t v24 = v38;
    v20(v38, (uint64_t)v9, a1);
    unint64_t v25 = v23;
    uint64_t v26 = v35;
    int v27 = v22(v25, 1, v10);
    uint64_t v28 = v24;
    uint64_t v29 = v40;
    uint64_t v30 = v37;
    if (v27 == 1)
    {
      (*(void (**)(void))&v24[*(int *)(a1 + 48)])();
      uint64_t v31 = *(void (**)(char *, uint64_t))(v26 + 8);
      v31(v9, a1);
      uint64_t v32 = v39;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v30);
    }
    else
    {
      uint64_t v31 = *(void (**)(char *, uint64_t))(v26 + 8);
      v31(v9, a1);
      (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v29, v41, v10);
      uint64_t v32 = v39;
    }
    v31(v28, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, v30);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, a1);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v40, v15, v10);
  }
}

uint64_t UserDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_25A4D3BE0(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

void (*UserDefault.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  _OWORD v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  UserDefault.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_25A4D2718;
}

void sub_25A4D2718(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_25A4D3BE0((uint64_t)v3, v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    sub_25A4D3BE0((*a1)[5], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t UserDefault.projectedValue.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v54 = a2;
  uint64_t v58 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  char v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v47 - v8;
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v11 = sub_25A50FA40();
  uint64_t v57 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v55 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v47 - v15;
  uint64_t v17 = *(void *)(v10 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v14);
  uint64_t v50 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v47 - v20;
  uint64_t v22 = v2[1];
  uint64_t v51 = *v2;
  uint64_t v52 = v22;
  char v23 = *(void (**)(uint64_t))((char *)v2 + *(int *)(a1 + 48));
  uint64_t v24 = swift_bridgeObjectRetain();
  uint64_t v53 = v21;
  v23(v24);
  unint64_t v25 = v16;
  uint64_t v26 = (char *)v3 + *(int *)(a1 + 44);
  int v27 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  uint64_t v48 = v11;
  v27(v16, v26, v11);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  uint64_t v56 = v9;
  v28(v9, (char *)v3, a1);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v29(v25, 1, v10) == 1)
  {
    uint64_t v47 = v25;
    uint64_t v31 = v55;
    uint64_t v30 = v56;
    sub_25A4D21DC(a1);
    uint64_t v32 = v49;
    v28(v49, v30, a1);
    int v33 = v29(v31, 1, v10);
    uint64_t v34 = v50;
    uint64_t v35 = v32;
    uint64_t v36 = v48;
    uint64_t v37 = v58;
    if (v33 == 1)
    {
      (*(void (**)(void))&v35[*(int *)(a1 + 48)])();
      char v38 = *(void (**)(char *, uint64_t))(v37 + 8);
      v38(v56, a1);
      uint64_t v39 = v57;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v36);
    }
    else
    {
      char v38 = *(void (**)(char *, uint64_t))(v58 + 8);
      v38(v56, a1);
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v34, v55, v10);
      uint64_t v39 = v57;
    }
    v38(v35, a1);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v47, v36);
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v56, a1);
    uint64_t v40 = v25;
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v34 = v50;
    v41(v50, v40, v10);
  }
  uint64_t v43 = v53;
  os_log_type_t v42 = v54;
  uint64_t v44 = v52;
  *(void *)uint64_t v54 = v51;
  *((void *)v42 + 1) = v44;
  uint64_t v45 = type metadata accessor for UserDefault.Projected();
  v41(&v42[*(int *)(v45 + 36)], v43, v10);
  return ((uint64_t (*)(char *, char *, uint64_t))v41)(&v42[*(int *)(v45 + 40)], v34, v10);
}

uint64_t UserDefault.observe(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (**a4)()@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v11 = (objc_class *)type metadata accessor for UserDefaultObserver();
  uint64_t v12 = *v4;
  uint64_t v15 = v4 + 1;
  uint64_t v14 = v4[1];
  uint64_t v13 = (void *)v15[1];
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v9;
  v16[3] = v10;
  v16[4] = a1;
  v16[5] = a2;
  id v17 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  id v18 = objc_allocWithZone(v11);
  id v19 = sub_25A4D33AC(v17, v12, v14, (uint64_t)sub_25A3AD588, (uint64_t)v16);
  uint64_t v20 = *(void **)(v8 + 16);
  *(void *)(v8 + 16) = v19;

  uint64_t v21 = (void (*)())swift_allocObject();
  *((void *)v21 + 2) = v9;
  *((void *)v21 + 3) = v10;
  *((void *)v21 + 4) = v8;
  *(void *)&long long v24 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/UserDefaults.swift";
  *((void *)&v24 + 1) = 124;
  char v25 = 2;
  long long v26 = xmmword_25A51BC40;
  int v27 = "observe(_:)";
  uint64_t v28 = 11;
  char v29 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t result = sub_25A3B7704(&v24, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  *a4 = sub_25A4D3ED0;
  a4[1] = v21;
  a4[2] = (void (*)())result;
  return result;
}

id sub_25A4D2E5C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  return sub_25A4D33AC(a1, a2, a3, a4, a5);
}

void sub_25A4D2EC0(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 16);
  swift_beginAccess();
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    id v4 = v3;
    sub_25A4D3614();
  }
  swift_beginAccess();
  uint64_t v5 = *v2;
  *uint64_t v2 = 0;
}

BOOL UserDefault.Projected<>.isDifferentFromDefault.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v15 - v9;
  id v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v11((char *)&v15 - v9, v1 + *(int *)(v8 + 36), v3);
  v11(v7, v1 + *(int *)(a1 + 40), v3);
  char v12 = sub_25A50EBE0();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, v3);
  v13(v10, v3);
  return (v12 & 1) == 0;
}

Swift::Double_optional __swiftcall Double.init(userDefaultsKey:userDefaults:)(Swift::String userDefaultsKey, NSUserDefaults userDefaults)
{
  char v2 = sub_25A4D38B8(userDefaultsKey._countAndFlagsBits, (uint64_t)userDefaultsKey._object, userDefaults.super.isa);
  result.value = v3;
  result.is_nil = v2;
  return result;
}

uint64_t sub_25A4D30BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_25A4D38B8(a1, a2, a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

Swift::Int_optional __swiftcall Int.init(userDefaultsKey:userDefaults:)(Swift::String userDefaultsKey, NSUserDefaults userDefaults)
{
  id v2 = sub_25A4D3ADC(userDefaultsKey._countAndFlagsBits, (uint64_t)userDefaultsKey._object, userDefaults.super.isa);
  Swift::Bool v4 = v3 & 1;
  result.value = (Swift::Int)v2;
  result.is_nil = v4;
  return result;
}

id sub_25A4D3108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id result = sub_25A4D3ADC(a1, a2, a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t sub_25A4D313C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = _sSb20PreviewsFoundationOSE15userDefaultsKey0dE0SbSgSS_So06NSUserE0CtcfC_0(a1, a2, a3);
  *a4 = result;
  return result;
}

void __swiftcall Float.init(userDefaultsKey:userDefaults:)(Swift::Float_optional *__return_ptr retstr, Swift::String userDefaultsKey, NSUserDefaults userDefaults)
{
}

unint64_t sub_25A4D3190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = sub_25A4D39C4(a1, a2, a3);
  *(_DWORD *)a4 = result;
  *(unsigned char *)(a4 + 4) = BYTE4(result) & 1;
  return result;
}

Swift::String_optional __swiftcall String.init(userDefaultsKey:userDefaults:)(Swift::String userDefaultsKey, NSUserDefaults userDefaults)
{
  Class isa = userDefaults.super.isa;
  char v3 = (void *)sub_25A50EBF0();
  id v4 = [(objc_class *)isa objectForKey:v3];

  if (!v4)
  {
    memset(v13, 0, sizeof(v13));

    swift_bridgeObjectRelease();
    sub_25A384BCC((uint64_t)v13, &qword_26A416C28);
LABEL_6:
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    goto LABEL_7;
  }
  sub_25A50FC10();
  swift_unknownObjectRelease();
  sub_25A384BCC((uint64_t)v13, &qword_26A416C28);
  uint64_t v5 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  id v6 = [(objc_class *)isa stringForKey:v5];

  if (!v6)
  {

    goto LABEL_6;
  }
  uint64_t v7 = sub_25A50EC20();
  uint64_t v9 = v8;

LABEL_7:
  uint64_t v10 = v7;
  id v11 = v9;
  result.value._object = v11;
  result.value._countAndFlagsBits = v10;
  return result;
}

uint64_t sub_25A4D32EC@<X0>(uint64_t a1@<X0>, NSUserDefaults a2@<0:X2, 8:X3, 16:X4, 24:X5>, Swift::String_optional *a3@<X8>)
{
  Swift::String_optional v6 = String.init(userDefaultsKey:userDefaults:)(*(Swift::String *)&a1, a2);
  uint64_t result = v6.value._countAndFlagsBits;
  *a3 = v6;
  return result;
}

uint64_t Optional<A>.init(userDefaultsKey:userDefaults:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  (*(void (**)(void))(a1 + 24))();
  uint64_t v3 = sub_25A50FA40();
  id v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 0, 1, v3);
}

uint64_t sub_25A4D33A0@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return Optional<A>.init(userDefaultsKey:userDefaults:)(*(void *)(a1 - 8), a2);
}

id sub_25A4D33AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&v5[qword_26A41B298] = a1;
  uint64_t v7 = &v5[qword_26A41B2A0];
  *(void *)uint64_t v7 = a2;
  *((void *)v7 + 1) = a3;
  uint64_t v8 = &v5[qword_26A41B2A8];
  *(void *)uint64_t v8 = a4;
  *((void *)v8 + 1) = a5;
  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for UserDefaultObserver();
  id v9 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  id v10 = objc_msgSendSuper2(&v13, sel_init);
  id v11 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_addObserver_forKeyPath_options_context_, v10, v11, 1, 0, v13.receiver, v13.super_class);

  swift_release();
  return v10;
}

uint64_t sub_25A4D34E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a3)
  {
    sub_25A50EC20();
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    memset(v14, 0, sizeof(v14));
    id v11 = a5;
    id v12 = a1;
    if (a5) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  swift_unknownObjectRetain();
  id v8 = a5;
  id v9 = a1;
  sub_25A50FC10();
  swift_unknownObjectRelease();
  if (!a5) {
    goto LABEL_7;
  }
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  sub_25A4D5D6C(&qword_26A415998, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v10 = sub_25A50E8A0();

LABEL_8:
  sub_25A4D5AC0((uint64_t)v14, v10);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_25A384BCC((uint64_t)v14, &qword_26A416C28);
}

void sub_25A4D3614()
{
  uint64_t v1 = *(void **)(v0 + qword_26A41B298);
  id v2 = (id)sub_25A50EBF0();
  objc_msgSend(v1, sel_removeObserver_forKeyPath_, v0, v2);
}

void sub_25A4D3688()
{
}

id sub_25A4D36CC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UserDefaultObserver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_25A4D3740(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t type metadata accessor for UserDefault()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _sSb20PreviewsFoundationOSE15userDefaultsKey0dE0SbSgSS_So06NSUserE0CtcfC_0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)sub_25A50EBF0();
  id v5 = objc_msgSend(a3, sel_objectForKey_, v4);

  if (v5)
  {
    sub_25A50FC10();
    swift_unknownObjectRelease();
    sub_25A384BCC((uint64_t)v9, &qword_26A416C28);
    Swift::String_optional v6 = (void *)sub_25A50EBF0();
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(a3, sel_BOOLForKey_, v6);
  }
  else
  {
    memset(v9, 0, sizeof(v9));

    swift_bridgeObjectRelease();
    sub_25A384BCC((uint64_t)v9, &qword_26A416C28);
    return 2;
  }
  return (uint64_t)v7;
}

uint64_t sub_25A4D38B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)sub_25A50EBF0();
  id v5 = objc_msgSend(a3, sel_objectForKey_, v4);

  if (v5)
  {
    sub_25A50FC10();
    swift_unknownObjectRelease();
    sub_25A384BCC((uint64_t)v10, &qword_26A416C28);
    Swift::String_optional v6 = (void *)sub_25A50EBF0();
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_doubleForKey_, v6);
    uint64_t v8 = v7;

    return v8;
  }
  else
  {
    memset(v10, 0, sizeof(v10));

    swift_bridgeObjectRelease();
    sub_25A384BCC((uint64_t)v10, &qword_26A416C28);
    return 0;
  }
}

unint64_t sub_25A4D39C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)sub_25A50EBF0();
  id v5 = objc_msgSend(a3, sel_objectForKey_, v4);

  if (v5)
  {
    sub_25A50FC10();
    swift_unknownObjectRelease();
    sub_25A384BCC((uint64_t)v11, &qword_26A416C28);
    Swift::String_optional v6 = (void *)sub_25A50EBF0();
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_floatForKey_, v6);
    unsigned int v8 = v7;

    uint64_t v9 = v8;
  }
  else
  {
    memset(v11, 0, sizeof(v11));

    swift_bridgeObjectRelease();
    sub_25A384BCC((uint64_t)v11, &qword_26A416C28);
    uint64_t v9 = 0;
  }
  return v9 | ((unint64_t)(v5 == 0) << 32);
}

id sub_25A4D3ADC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)sub_25A50EBF0();
  id v5 = objc_msgSend(a3, sel_objectForKey_, v4);

  if (v5)
  {
    sub_25A50FC10();
    swift_unknownObjectRelease();
    sub_25A384BCC((uint64_t)v9, &qword_26A416C28);
    Swift::String_optional v6 = (void *)sub_25A50EBF0();
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(a3, sel_integerForKey_, v6);
  }
  else
  {
    memset(v9, 0, sizeof(v9));

    swift_bridgeObjectRelease();
    sub_25A384BCC((uint64_t)v9, &qword_26A416C28);
    return 0;
  }
  return v7;
}

void sub_25A4D3BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(unsigned char *)(v3 + 24))
  {
    uint64_t v5 = v3 + *(int *)(a2 + 44);
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = sub_25A50FA40();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    uint64_t v8 = *(void *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, a1, v6);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v6);
  }
  swift_retain();
  uint64_t v9 = sub_25A50E030();
  unint64_t v11 = v10;
  swift_release();
  id v12 = *(id *)(v3 + 16);
  objc_super v13 = (void *)sub_25A50E370();
  swift_bridgeObjectRetain();
  id v14 = (id)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setObject_forKey_, v13, v14);
  sub_25A3B9048(v9, v11);
}

uint64_t sub_25A4D3E10()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t type metadata accessor for UserDefaultObserver()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4D3E60()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A4D3E98()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

void sub_25A4D3ED0()
{
  sub_25A4D2EC0(*(void *)(v0 + 32));
}

uint64_t sub_25A4D3EDC(uint64_t a1)
{
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F07490];
  *(void *)(a1 + 8) = sub_25A4D5D6C(&qword_26A41B188, MEMORY[0x263F07490]);
  uint64_t result = sub_25A4D5D6C(qword_26A41B190, v2);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_25A4D3F60(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_25A4D3FEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UserDefault();
  return UserDefault.wrappedValue.getter(v2, a1);
}

void sub_25A4D4028(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UserDefault();
  sub_25A4D3BE0(a1, v2);
}

uint64_t sub_25A4D4068()
{
  return 16;
}

__n128 sub_25A4D4074(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of UserDefaultRepresentable.init(userDefaultsKey:userDefaults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t sub_25A4D4094()
{
  uint64_t result = sub_25A50FA40();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25A4D4164(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + 7;
  unint64_t v11 = ((((v9 + 7 + ((v7 + 25) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  int v12 = v7 & 0x100000;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v3 = (uint64_t *)(v15 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  }
  else
  {
    uint64_t v16 = a2[1];
    *uint64_t v3 = *a2;
    v3[1] = v16;
    unint64_t v17 = ((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
    id v19 = *(void **)v18;
    *(void *)unint64_t v17 = *(void *)v18;
    *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
    uint64_t v20 = (void *)((v17 + v8 + 9) & ~v8);
    uint64_t v21 = (const void *)((v18 + v8 + 9) & ~v8);
    uint64_t v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    id v23 = v19;
    if (v22(v21, 1, v4))
    {
      memcpy(v20, v21, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v20, v21, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v4);
    }
    long long v24 = (void *)(((unint64_t)v20 + v10) & 0xFFFFFFFFFFFFFFF8);
    char v25 = (void *)(((unint64_t)v21 + v10) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = v25[1];
    *long long v24 = *v25;
    v24[1] = v26;
    *(void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v3;
}

uint64_t sub_25A4D4354(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = (id *)((a1 + 23) & 0xFFFFFFFFFFFFFFF8);

  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  }
  swift_release();

  return swift_release();
}

void *sub_25A4D4458(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  unint64_t v5 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = *(void **)v6;
  *(void *)unint64_t v5 = *(void *)v6;
  *(unsigned char *)(v5 + 8) = *(unsigned char *)(v6 + 8);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (void *)((v10 + 9 + v5) & ~v10);
  int v12 = (const void *)((v10 + 9 + v6) & ~v10);
  objc_super v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  id v14 = v7;
  if (v13(v12, 1, v8))
  {
    int v15 = *(_DWORD *)(v9 + 84);
    size_t v16 = *(void *)(v9 + 64);
    if (v15) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v16 + 1;
    }
    memcpy(v11, v12, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v11, v12, v8);
    id v19 = *(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56);
    uint64_t v18 = v9 + 56;
    v19(v11, 0, 1, v8);
    int v15 = *(_DWORD *)(v18 + 28);
    size_t v16 = *(void *)(v18 + 8);
  }
  if (v15) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = v16 + 1;
  }
  uint64_t v21 = (void *)(((unint64_t)v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)(((unint64_t)v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  *(void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_25A4D45F8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void **)v7;
  uint64_t v9 = *(void **)v6;
  *(void *)unint64_t v6 = *(void *)v7;
  id v10 = v8;

  *(unsigned char *)(v6 + 8) = *(unsigned char *)(v7 + 8);
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  id v14 = (void *)((v13 + 9 + v6) & ~v13);
  int v15 = (void *)((v13 + 9 + v7) & ~v13);
  size_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v7) = v16(v14, 1, v11);
  int v17 = v16(v15, 1, v11);
  if (v7)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v14, v15, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
      goto LABEL_12;
    }
    int v18 = *(_DWORD *)(v12 + 84);
    size_t v19 = *(void *)(v12 + 64);
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v14, v15, v11);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
    int v18 = *(_DWORD *)(v12 + 84);
    size_t v19 = *(void *)(v12 + 64);
  }
  if (v18) {
    size_t v20 = v19;
  }
  else {
    size_t v20 = v19 + 1;
  }
  memcpy(v14, v15, v20);
LABEL_12:
  if (*(_DWORD *)(v12 + 84)) {
    uint64_t v21 = *(void *)(v12 + 64);
  }
  else {
    uint64_t v21 = *(void *)(v12 + 64) + 1;
  }
  uint64_t v22 = (void *)(((unint64_t)v14 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = v23[1];
  void *v22 = *v23;
  v22[1] = v24;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_25A4D4830(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v4 = *(void *)v5;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(v5 + 8);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (void *)((v8 + 9 + v4) & ~v8);
  id v10 = (const void *)((v8 + 9 + v5) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
    if (v11) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    int v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, v6);
    int v11 = *(_DWORD *)(v14 + 28);
    size_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v12 + 1;
  }
  int v17 = (_OWORD *)(((unint64_t)v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v18 = (_OWORD *)(((unint64_t)v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v17 = *v18;
  *(void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_25A4D49AC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  unint64_t v7 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void **)v7;
  *(void *)unint64_t v7 = *(void *)v8;

  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  size_t v13 = (void *)((v12 + 9 + v7) & ~v12);
  uint64_t v14 = (void *)((v12 + 9 + v8) & ~v12);
  int v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v8) = v15(v13, 1, v10);
  int v16 = v15(v14, 1, v10);
  if (v8)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v13, v14, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      goto LABEL_12;
    }
    int v17 = *(_DWORD *)(v11 + 84);
    size_t v18 = *(void *)(v11 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v13, v14, v10);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
    int v17 = *(_DWORD *)(v11 + 84);
    size_t v18 = *(void *)(v11 + 64);
  }
  if (v17) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = v18 + 1;
  }
  memcpy(v13, v14, v19);
LABEL_12:
  if (*(_DWORD *)(v11 + 84)) {
    uint64_t v20 = *(void *)(v11 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v11 + 64) + 1;
  }
  uint64_t v21 = (_OWORD *)(((unint64_t)v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (uint64_t)v14 + v20 + 7;
  unint64_t v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + 23;
  *uint64_t v21 = *(_OWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v23 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_25A4D4BBC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = 7;
  if (!v6) {
    uint64_t v10 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v11 = ((((v10 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 25) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    unsigned int v12 = a2 - v8;
    uint64_t v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *(unsigned __int8 *)(a1 + v11);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)(a1 + v11);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x25A4D4D64);
      case 4:
        int v17 = *(_DWORD *)(a1 + v11);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *(_DWORD *)a1;
        }
        return v8 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  if ((v7 & 0x80000000) != 0)
  {
    unsigned int v21 = (*(uint64_t (**)(unint64_t))(v5 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 9) & ~v9);
    if (v21 >= 2) {
      return v21 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v20 = *(void *)(a1 + 8);
    if (v20 >= 0xFFFFFFFF) {
      LODWORD(v20) = -1;
    }
    return (v20 + 1);
  }
}

void sub_25A4D4D78(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((((v12 + ((v11 + 25) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((((v12 + ((v11 + 25) & ~v11) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((((v12 + ((v11 + 25) & ~v11) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((((v12 + ((v11 + 25) & ~v11) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_58;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x25A4D501CLL);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if ((v9 & 0x80000000) != 0)
        {
          int v19 = (unsigned char *)((((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v11 + 9) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v23 = a2 + 1;
            uint64_t v24 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            unint64_t v25 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v11 + 9) & ~v11;
            v24(v25, v23);
          }
          else
          {
            if (v12 <= 3) {
              int v20 = ~(-1 << (8 * v12));
            }
            else {
              int v20 = -1;
            }
            if (v12)
            {
              int v21 = v20 & (~v9 + a2);
              if (v12 <= 3) {
                int v22 = v12;
              }
              else {
                int v22 = 4;
              }
              bzero(v19, v12);
              switch(v22)
              {
                case 2:
                  *(_WORD *)int v19 = v21;
                  break;
                case 3:
                  *(_WORD *)int v19 = v21;
                  void v19[2] = BYTE2(v21);
                  break;
                case 4:
                  *(_DWORD *)int v19 = v21;
                  break;
                default:
                  *int v19 = v21;
                  break;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t sub_25A4D5054()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25A4D50F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = v7 + v6;
  unint64_t v9 = ((v7 + v6 + ((v6 + 16) & ~v6)) & ~v6) + v7;
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v9 > 0x18)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = ~v6;
    uint64_t v14 = a2[1];
    *a1 = *a2;
    a1[1] = v14;
    uint64_t v15 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v16 = ((unint64_t)a2 + v6 + 16) & ~v6;
    int v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v17(v15, v16, v4);
    v17((v8 + v15) & v13, (v8 + v16) & v13, v4);
  }
  return a1;
}

uint64_t sub_25A4D522C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = v5 + 8;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (a1 + v6 + 16) & ~v6;
  v11(v7, v4);
  uint64_t v8 = (*(void *)(v10 + 56) + v6 + v7) & ~v6;

  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8, v4);
}

void *sub_25A4D52E4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 16) & ~v8;
  swift_bridgeObjectRetain();
  v6(((unint64_t)a1 + v8 + 16) & ~v8, v9, v5);
  v6((*(void *)(v7 + 48) + v8 + (((unint64_t)a1 + v8 + 16) & ~v8)) & ~v8, (*(void *)(v7 + 48) + v8 + v9) & ~v8, v5);
  return a1;
}

void *sub_25A4D53A4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24);
  uint64_t v9 = v7 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = ((unint64_t)a2 + v10 + 16) & ~v10;
  v8(((unint64_t)a1 + v10 + 16) & ~v10, v11, v6);
  v8((*(void *)(v9 + 40) + v10 + (((unint64_t)a1 + v10 + 16) & ~v10)) & ~v10, (*(void *)(v9 + 40) + v10 + v11) & ~v10, v6);
  return a1;
}

_OWORD *sub_25A4D5480(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  v6(v9, v10, v4);
  v6((*(void *)(v7 + 32) + v8 + v9) & ~v8, (*(void *)(v7 + 32) + v8 + v10) & ~v8, v4);
  return a1;
}

void *sub_25A4D553C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 40);
  uint64_t v10 = v8 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = ((unint64_t)a2 + v11 + 16) & ~v11;
  v9(((unint64_t)a1 + v11 + 16) & ~v11, v12, v7);
  v9((*(void *)(v10 + 24) + v11 + (((unint64_t)a1 + v11 + 16) & ~v11)) & ~v11, (*(void *)(v10 + 24) + v11 + v12) & ~v11, v7);
  return a1;
}

uint64_t sub_25A4D5608(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v10 = ((v7 + v6 + ((v6 + 16) & ~v6)) & ~v6) + v7;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v16 = *((void *)a1 + 1);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v10 | v15) + 1;
}

void sub_25A4D57B4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v9 + ((v9 + 16) & ~v9)) & ~v9)
      + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x25A4D5A20);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          int v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for UserDefault.Projected()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4D5A60()
{
  return swift_initClassMetadata2();
}

uint64_t sub_25A4D5AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x50);
  uint64_t v6 = sub_25A50FA40();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  size_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v8);
  int v13 = (char *)&v20 - v12;
  if (a2 && *(void *)(a2 + 16))
  {
    id v14 = (id)*MEMORY[0x263F081B8];
    unint64_t v15 = sub_25A409A20((uint64_t)v14);
    if (v16)
    {
      sub_25A3937CC(*(void *)(a2 + 56) + 32 * v15, (uint64_t)&v20);
    }
    else
    {
      long long v20 = 0u;
      long long v21 = 0u;
    }
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416C28);
  int v17 = swift_dynamicCast();
  unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v17)
  {
    v18(v10, 0, 1, v5);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v5);
    (*(void (**)(char *))((char *)v3 + qword_26A41B2A8))(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v5);
  }
  else
  {
    v18(v10, 1, 1, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

void sub_25A4D5D3C()
{
}

uint64_t sub_25A4D5D6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25A4D5DB4()
{
  return sub_25A4D2100(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_25A4D5DBC()
{
  return sub_25A3A3604(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_25A4D5DC4(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 121;
  }
  else {
    uint64_t v2 = 120;
  }
  if (a2) {
    uint64_t v3 = 121;
  }
  else {
    uint64_t v3 = 120;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = sub_25A510370();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_25A4D5E28(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x746867696568;
  }
  else {
    uint64_t v3 = 0x6874646977;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x746867696568;
  }
  else {
    uint64_t v5 = 0x6874646977;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25A510370();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_25A4D5EC8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x72657070617277;
  }
  else {
    uint64_t v3 = 1717658988;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x72657070617277;
  }
  else {
    uint64_t v5 = 1717658988;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25A510370();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_25A4D5F68(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 1868983913;
  }
  else {
    uint64_t v3 = 0x726F727265;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  if (a2) {
    uint64_t v5 = 1868983913;
  }
  else {
    uint64_t v5 = 0x726F727265;
  }
  if (a2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25A510370();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_25A4D6004(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000014;
  unint64_t v4 = 0x800000025A51D8B0;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0x756C615668676968;
      unint64_t v4 = 0xEE00656C74695465;
      break;
    case 2:
      unint64_t v3 = 0x65756C6156776F6CLL;
      unint64_t v4 = 0xED0000656C746954;
      break;
    case 3:
      unint64_t v3 = 0x6E6F697469646461;
      unint64_t v4 = 0xEE006F666E496C61;
      break;
    case 4:
      unint64_t v3 = 0xD000000000000015;
      unint64_t v4 = 0x800000025A51D900;
      break;
    case 5:
      unint64_t v4 = 0xE700000000000000;
      unint64_t v3 = 0x736E6F6974706FLL;
      break;
    case 6:
      unint64_t v4 = 0xE800000000000000;
      unint64_t v3 = 0x7974697265766573;
      break;
    case 7:
      unint64_t v4 = 0x800000025A51D930;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 8:
      unint64_t v4 = 0xE800000000000000;
      unint64_t v3 = 0x65766974614E7369;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xD000000000000014;
  unint64_t v6 = 0x800000025A51D8B0;
  switch(a2)
  {
    case 1:
      uint64_t v7 = 0x756C615668676968;
      uint64_t v8 = 0x656C74695465;
      goto LABEL_15;
    case 2:
      unint64_t v6 = 0xED0000656C746954;
      if (v3 != 0x65756C6156776F6CLL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 3:
      uint64_t v7 = 0x6E6F697469646461;
      uint64_t v8 = 0x6F666E496C61;
LABEL_15:
      unint64_t v6 = v8 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      if (v3 != v7) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 4:
      unint64_t v6 = 0x800000025A51D900;
      if (v3 != 0xD000000000000015) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v6 = 0xE700000000000000;
      if (v3 != 0x736E6F6974706FLL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      unint64_t v6 = 0xE800000000000000;
      if (v3 != 0x7974697265766573) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      unint64_t v6 = 0x800000025A51D930;
      unint64_t v5 = 0xD000000000000010;
      goto LABEL_24;
    case 8:
      unint64_t v6 = 0xE800000000000000;
      if (v3 != 0x65766974614E7369) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v3 != v5) {
        goto LABEL_28;
      }
LABEL_25:
      if (v4 == v6) {
        char v9 = 1;
      }
      else {
LABEL_28:
      }
        char v9 = sub_25A510370();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_25A4D6314(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x69796C7265646E75;
  }
  else {
    uint64_t v3 = 1852399981;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xEA0000000000676ELL;
  }
  if (a2) {
    uint64_t v5 = 0x69796C7265646E75;
  }
  else {
    uint64_t v5 = 1852399981;
  }
  if (a2) {
    unint64_t v6 = 0xEA0000000000676ELL;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25A510370();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_25A4D63B8(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 25705;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1701667182;
      break;
    case 2:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v4 = 0x657079745F677562;
      break;
    case 3:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 6580592;
      break;
    case 4:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 6910817;
      break;
    case 5:
      uint64_t v4 = 1701669236;
      unint64_t v3 = 0xE400000000000000;
      break;
    case 6:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v4 = 0x736567616D69;
      break;
    case 7:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v4 = 0x73656D617266;
      break;
    case 8:
      uint64_t v4 = 0x50656C6946676F6CLL;
      unint64_t v3 = 0xEB00000000687461;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 25705;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE400000000000000;
      if (v4 == 1701667182) {
        goto LABEL_25;
      }
      goto LABEL_28;
    case 2:
      unint64_t v5 = 0xE800000000000000;
      if (v4 != 0x657079745F677562) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 3:
      unint64_t v5 = 0xE300000000000000;
      if (v4 != 6580592) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 4:
      unint64_t v5 = 0xE300000000000000;
      if (v4 != 6910817) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v5 = 0xE400000000000000;
      if (v4 != 1701669236) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      unint64_t v5 = 0xE600000000000000;
      if (v4 != 0x736567616D69) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      unint64_t v5 = 0xE600000000000000;
      uint64_t v6 = 0x73656D617266;
      goto LABEL_24;
    case 8:
      unint64_t v5 = 0xEB00000000687461;
      if (v4 != 0x50656C6946676F6CLL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v4 != v6) {
        goto LABEL_28;
      }
LABEL_25:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_28:
      }
        char v7 = sub_25A510370();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_25A4D6638()
{
  sub_25A50ED30();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A4D67BC()
{
  sub_25A50ED30();

  return swift_bridgeObjectRelease();
}

__n128 CrashReport.Frame.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

uint64_t CrashReport.init(id:name:bugType:pid:time:asi:images:frames:logFilePath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_25A401198(a1, a9);
  long long v20 = (int *)type metadata accessor for CrashReport(0);
  long long v21 = (void *)(a9 + v20[5]);
  *long long v21 = a2;
  v21[1] = a3;
  int v22 = (void *)(a9 + v20[6]);
  void *v22 = a4;
  v22[1] = a5;
  *(_DWORD *)(a9 + v20[7]) = a6;
  uint64_t v23 = a9 + v20[8];
  uint64_t v24 = sub_25A50E470();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(v23, a7, v24);
  *(void *)(a9 + v20[9]) = a8;
  *(void *)(a9 + v20[10]) = a10;
  *(void *)(a9 + v20[11]) = a11;
  uint64_t v26 = (void *)(a9 + v20[12]);
  *uint64_t v26 = a12;
  v26[1] = a13;
  return result;
}

uint64_t type metadata accessor for CrashReport.ID(uint64_t a1)
{
  return sub_25A384AE8(a1, (uint64_t *)&unk_26A41B420);
}

uint64_t type metadata accessor for CrashReport(uint64_t a1)
{
  return sub_25A384AE8(a1, (uint64_t *)&unk_26A41B410);
}

uint64_t CrashReport.ID.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_25A50E4C0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t CrashReport.ID.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_25A50E4C0();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t CrashReport.ID.hash(into:)()
{
  sub_25A50E4C0();
  sub_25A4DAC98((unint64_t *)&qword_26A417EB8, MEMORY[0x263F07508]);

  return sub_25A50EA20();
}

uint64_t CrashReport.ID.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t sub_25A4D6C40()
{
  return sub_25A510530();
}

uint64_t sub_25A4D6CC8()
{
  sub_25A50E4C0();
  sub_25A4DAC98((unint64_t *)&qword_26A417EB8, MEMORY[0x263F07508]);

  return sub_25A50EA20();
}

uint64_t sub_25A4D6D4C()
{
  return sub_25A510530();
}

uint64_t CrashReport.id.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A4DAF9C(v1, a1, type metadata accessor for CrashReport.ID);
}

uint64_t CrashReport.name.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.bugType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.pid.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 28));
}

uint64_t CrashReport.time.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CrashReport(0) + 32);
  uint64_t v4 = sub_25A50E470();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t CrashReport.asi.getter()
{
  type metadata accessor for CrashReport(0);

  return swift_bridgeObjectRetain();
}

uint64_t CrashReport.images.getter()
{
  type metadata accessor for CrashReport(0);

  return swift_bridgeObjectRetain();
}

uint64_t CrashReport.frames.getter()
{
  type metadata accessor for CrashReport(0);

  return swift_bridgeObjectRetain();
}

uint64_t CrashReport.frames.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CrashReport(0) + 44);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*CrashReport.frames.modify())(void)
{
  return nullsub_1;
}

uint64_t CrashReport.logFilePath.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Frame.ImageLocation.imageIndex.getter()
{
  return *(void *)v0;
}

uint64_t CrashReport.Frame.ImageLocation.imageOffset.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t CrashReport.Frame.ImageLocation.hash(into:)()
{
  return sub_25A5104F0();
}

BOOL static CrashReport.Frame.ImageLocation.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t CrashReport.Frame.ImageLocation.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t sub_25A4D7148()
{
  return sub_25A510530();
}

uint64_t sub_25A4D71A4()
{
  return sub_25A5104F0();
}

uint64_t sub_25A4D71E0()
{
  return sub_25A510530();
}

BOOL sub_25A4D7238(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL static CrashReport.Frame.CodingKeys.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CrashReport.Frame.CodingKeys.hash(into:)()
{
  return sub_25A5104F0();
}

PreviewsFoundationOS::CrashReport::Frame::CodingKeys_optional __swiftcall CrashReport.Frame.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  BOOL v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x646E496567616D69 && stringValue._object == (void *)0xEA00000000007865;
  if (v3
    || (object = stringValue._object, uint64_t countAndFlagsBits = stringValue._countAndFlagsBits, (sub_25A510370() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 0x66664F6567616D69 && object == (void *)0xEB00000000746573 {
         || (sub_25A510370() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else if (countAndFlagsBits == 0x6C6F626D7973 && object == (void *)0xE600000000000000 {
         || (sub_25A510370() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 2;
  }
  else if (countAndFlagsBits == 0x6F4C6C6F626D7973 && object == (void *)0xEE006E6F69746163 {
         || (sub_25A510370() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 3;
  }
  else if (countAndFlagsBits == 0x6946656372756F73 && object == (void *)0xEA0000000000656CLL {
         || (sub_25A510370() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 4;
  }
  else if (countAndFlagsBits == 0x694C656372756F73 && object == (void *)0xEA0000000000656ELL)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 5;
  }
  else
  {
    char v8 = sub_25A510370();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 5;
    }
    else {
      char v7 = 6;
    }
  }
  *BOOL v2 = v7;
  return result;
}

PreviewsFoundationOS::CrashReport::Frame::CodingKeys_optional __swiftcall CrashReport.Frame.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  *uint64_t v1 = 6;
  return (PreviewsFoundationOS::CrashReport::Frame::CodingKeys_optional)intValue;
}

uint64_t CrashReport.Frame.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CrashReport.Frame.CodingKeys.stringValue.getter()
{
  uint64_t result = 0x646E496567616D69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x66664F6567616D69;
      break;
    case 2:
      uint64_t result = 0x6C6F626D7973;
      break;
    case 3:
      uint64_t result = 0x6F4C6C6F626D7973;
      break;
    case 4:
      uint64_t result = 0x6946656372756F73;
      break;
    case 5:
      uint64_t result = 0x694C656372756F73;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25A4D7670()
{
  uint64_t result = 0x646E496567616D69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x66664F6567616D69;
      break;
    case 2:
      uint64_t result = 0x6C6F626D7973;
      break;
    case 3:
      uint64_t result = 0x6F4C6C6F626D7973;
      break;
    case 4:
      uint64_t result = 0x6946656372756F73;
      break;
    case 5:
      uint64_t result = 0x694C656372756F73;
      break;
    default:
      return result;
  }
  return result;
}

void sub_25A4D775C(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_25A4D7768(uint64_t a1)
{
  unint64_t v2 = sub_25A4D7CA8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25A4D77A4(uint64_t a1)
{
  unint64_t v2 = sub_25A4D7CA8();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CrashReport.Frame.imageIndex.getter()
{
  return *(void *)v0;
}

uint64_t CrashReport.Frame.imageOffset.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t CrashReport.Frame.symbol.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Frame.symbol.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*CrashReport.Frame.symbol.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Frame.symbolLocation.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t CrashReport.Frame.symbolLocation.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*CrashReport.Frame.symbolLocation.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Frame.sourceFile.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Frame.sourceFile.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*CrashReport.Frame.sourceFile.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Frame.sourceLine.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t CrashReport.Frame.sourceLine.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 64) = result;
  *(unsigned char *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*CrashReport.Frame.sourceLine.modify())()
{
  return nullsub_1;
}

void __swiftcall CrashReport.Frame.init(imageIndex:imageOffset:symbol:symbolLocation:sourceFile:sourceLine:)(PreviewsFoundationOS::CrashReport::Frame *__return_ptr retstr, Swift::Int imageIndex, Swift::Int imageOffset, Swift::String_optional symbol, Swift::Int_optional symbolLocation, Swift::String_optional sourceFile, Swift::Int_optional sourceLine)
{
  retstr->imageIndex = imageIndex;
  retstr->imageOffset = imageOffset;
  retstr->symbol = symbol;
  retstr->symbolLocation.value = symbolLocation.value;
  retstr->symbolLocation.is_nil = symbolLocation.is_nil;
  retstr->sourceFile = sourceFile;
  retstr->sourceLine.value = sourceLine.value;
  retstr->sourceLine.is_nil = sourceLine.is_nil;
}

uint64_t CrashReport.Frame.init(decoder:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B330);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25A4D7CA8();
  sub_25A510560();
  if (!v2)
  {
    char v36 = 0;
    uint64_t v9 = sub_25A5101F0();
    char v35 = 1;
    uint64_t v30 = sub_25A5101F0();
    char v34 = 2;
    uint64_t v10 = sub_25A5101B0();
    uint64_t v13 = v12;
    uint64_t v29 = v10;
    char v33 = 3;
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_25A5101C0();
    int v26 = v15;
    uint64_t v27 = v14;
    uint64_t v28 = a2;
    char v32 = 4;
    uint64_t v16 = sub_25A5101B0();
    uint64_t v18 = v17;
    uint64_t v25 = v16;
    char v31 = 5;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_25A5101C0();
    long long v20 = v8;
    char v22 = v21;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
    uint64_t v23 = v28;
    uint64_t v24 = v30;
    uint64_t *v28 = v9;
    v23[1] = v24;
    v23[2] = v29;
    v23[3] = v13;
    v23[4] = v27;
    *((unsigned char *)v23 + 40) = v26 & 1;
    v23[6] = v25;
    v23[7] = v18;
    v23[8] = v19;
    *((unsigned char *)v23 + 72) = v22 & 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_25A4D7CA8()
{
  unint64_t result = qword_26A41B338;
  if (!qword_26A41B338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B338);
  }
  return result;
}

uint64_t CrashReport.Frame.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B330);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25A4D7CA8();
  sub_25A510560();
  if (!v2)
  {
    char v36 = 0;
    uint64_t v9 = sub_25A5101F0();
    char v35 = 1;
    uint64_t v30 = sub_25A5101F0();
    char v34 = 2;
    uint64_t v10 = sub_25A5101B0();
    uint64_t v13 = v12;
    uint64_t v29 = v10;
    char v33 = 3;
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_25A5101C0();
    int v26 = v15;
    uint64_t v27 = v14;
    uint64_t v28 = a2;
    char v32 = 4;
    uint64_t v16 = sub_25A5101B0();
    uint64_t v18 = v17;
    uint64_t v25 = v16;
    char v31 = 5;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_25A5101C0();
    long long v20 = v8;
    char v22 = v21;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
    uint64_t v23 = v28;
    uint64_t v24 = v30;
    uint64_t *v28 = v9;
    v23[1] = v24;
    v23[2] = v29;
    v23[3] = v13;
    v23[4] = v27;
    *((unsigned char *)v23 + 40) = v26 & 1;
    v23[6] = v25;
    v23[7] = v18;
    v23[8] = v19;
    *((unsigned char *)v23 + 72) = v22 & 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25A4D7FFC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return CrashReport.Frame.init(from:)(a1, a2);
}

uint64_t CrashReport.Image.uuid.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Image.uuid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CrashReport.Image.uuid.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Image.arch.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Image.arch.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*CrashReport.Image.arch.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Image.base.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t CrashReport.Image.base.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*CrashReport.Image.base.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Image.path.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Image.path.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*CrashReport.Image.path.modify())()
{
  return nullsub_1;
}

uint64_t CrashReport.Image.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReport.Image.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return result;
}

uint64_t (*CrashReport.Image.name.modify())()
{
  return nullsub_1;
}

PreviewsFoundationOS::CrashReport::Image::CodingKeys_optional __swiftcall CrashReport.Image.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  uint64_t v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 1684632949 && stringValue._object == (void *)0xE400000000000000;
  if (v3
    || (object = stringValue._object, uint64_t countAndFlagsBits = stringValue._countAndFlagsBits, (sub_25A510370() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 1751347809 && object == (void *)0xE400000000000000 || (sub_25A510370() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else if (countAndFlagsBits == 1702060386 && object == (void *)0xE400000000000000 || (sub_25A510370() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 2;
  }
  else if (countAndFlagsBits == 1752457584 && object == (void *)0xE400000000000000 || (sub_25A510370() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 3;
  }
  else if (countAndFlagsBits == 1701667182 && object == (void *)0xE400000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 4;
  }
  else
  {
    char v8 = sub_25A510370();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 4;
    }
    else {
      char v7 = 5;
    }
  }
  *uint64_t v2 = v7;
  return result;
}

PreviewsFoundationOS::CrashReport::Image::CodingKeys_optional __swiftcall CrashReport.Image.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  *uint64_t v1 = 5;
  return (PreviewsFoundationOS::CrashReport::Image::CodingKeys_optional)intValue;
}

uint64_t CrashReport.Image.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CrashReport.Image.CodingKeys.stringValue.getter()
{
  return *(void *)&aUuid_0[8 * *v0];
}

uint64_t sub_25A4D8478()
{
  return *(void *)&aUuid_0[8 * *v0];
}

void sub_25A4D8494(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_25A4D84A0(uint64_t a1)
{
  unint64_t v2 = sub_25A4D8890();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25A4D84DC(uint64_t a1)
{
  unint64_t v2 = sub_25A4D8890();

  return MEMORY[0x270FA00B8](a1, v2);
}

void __swiftcall CrashReport.Image.init(uuid:arch:base:path:name:)(PreviewsFoundationOS::CrashReport::Image *__return_ptr retstr, Swift::String uuid, Swift::String_optional arch, Swift::Int base, Swift::String_optional path, Swift::String_optional name)
{
  retstr->uuid = uuid;
  retstr->arch = arch;
  retstr->base = base;
  retstr->path = path;
  retstr->name = name;
}

uint64_t CrashReport.Image.init(decoder:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B340);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25A4D8890();
  sub_25A510560();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    char v36 = 0;
    uint64_t v9 = sub_25A5101E0();
    uint64_t v12 = v11;
    uint64_t v31 = v9;
    char v35 = 1;
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_25A5101B0();
    uint64_t v15 = v14;
    uint64_t v30 = v13;
    char v34 = 2;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_25A5101F0();
    uint64_t v29 = a2;
    char v33 = 3;
    uint64_t v16 = sub_25A5101B0();
    uint64_t v18 = v17;
    uint64_t v27 = v16;
    char v32 = 4;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_25A5101B0();
    uint64_t v21 = v20;
    char v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v26 = v19;
    v22(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v23 = v29;
    uint64_t *v29 = v31;
    v23[1] = v12;
    v23[2] = v30;
    v23[3] = v15;
    uint64_t v24 = v27;
    v23[4] = v28;
    v23[5] = v24;
    uint64_t v25 = v26;
    v23[6] = v18;
    v23[7] = v25;
    v23[8] = v21;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_25A4D8890()
{
  unint64_t result = qword_26A41B348;
  if (!qword_26A41B348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B348);
  }
  return result;
}

uint64_t CrashReport.Image.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B340);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25A4D8890();
  sub_25A510560();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    char v36 = 0;
    uint64_t v9 = sub_25A5101E0();
    uint64_t v12 = v11;
    uint64_t v31 = v9;
    char v35 = 1;
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_25A5101B0();
    uint64_t v15 = v14;
    uint64_t v30 = v13;
    char v34 = 2;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_25A5101F0();
    uint64_t v29 = a2;
    char v33 = 3;
    uint64_t v16 = sub_25A5101B0();
    uint64_t v18 = v17;
    uint64_t v27 = v16;
    char v32 = 4;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_25A5101B0();
    uint64_t v21 = v20;
    char v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v26 = v19;
    v22(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v23 = v29;
    uint64_t *v29 = v31;
    v23[1] = v12;
    v23[2] = v30;
    v23[3] = v15;
    uint64_t v24 = v27;
    v23[4] = v28;
    v23[5] = v24;
    uint64_t v25 = v26;
    v23[6] = v18;
    v23[7] = v25;
    v23[8] = v21;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25A4D8C40@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return CrashReport.Image.init(from:)(a1, a2);
}

uint64_t CrashReport.init(dictionary:)()
{
  v10[1] = *(id *)MEMORY[0x263EF8340];
  sub_25A50E020();
  swift_allocObject();
  sub_25A50E010();
  uint64_t v0 = self;
  uint64_t v1 = (void *)sub_25A50E890();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v2 = objc_msgSend(v0, sel_dataWithJSONObject_options_error_, v1, 0, v10);

  id v3 = v10[0];
  if (v2)
  {
    type metadata accessor for CrashReport(0);
    id v4 = v3;
    uint64_t v5 = sub_25A50E380();
    unint64_t v7 = v6;

    sub_25A4DAC98(&qword_26A41B350, (void (*)(uint64_t))type metadata accessor for CrashReport);
    sub_25A50E000();
    swift_release();
    return sub_25A3B9048(v5, v7);
  }
  else
  {
    id v9 = v10[0];
    swift_release();
    sub_25A50E240();

    return swift_willThrow();
  }
}

uint64_t CrashReport.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v3 = sub_25A50E470();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  uint64_t v50 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v48 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A419588);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v53 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25A50E4C0();
  uint64_t v51 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B358);
  uint64_t v52 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1[3];
  uint64_t v54 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  sub_25A4DACE0();
  uint64_t v18 = v55;
  sub_25A510560();
  if (v18) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
  }
  uint64_t v55 = v10;
  uint64_t v19 = v52;
  uint64_t v45 = v16;
  uint64_t v46 = (int *)v14;
  LOBYTE(v57) = 0;
  sub_25A4DAC98(&qword_26A41B368, MEMORY[0x263F07508]);
  uint64_t v20 = (uint64_t)v53;
  sub_25A5101D0();
  char v22 = (char *)v8;
  uint64_t v23 = v13;
  uint64_t v24 = v51;
  int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v20, 1, v8);
  uint64_t v26 = v19;
  uint64_t v27 = v55;
  if (v25 == 1)
  {
    _s20PreviewsFoundationOS11CrashReportV2IDVAEycfC_0();
    sub_25A4DAD34(v20);
  }
  else
  {
    (*(void (**)(char *, uint64_t, char *))(v24 + 32))(v55, v20, v22);
  }
  uint64_t v28 = v45;
  uint64_t v29 = v46;
  (*(void (**)(char *, char *, char *))(v24 + 16))(v45, v27, v22);
  LOBYTE(v57) = 1;
  uint64_t v30 = sub_25A5101E0();
  uint64_t v53 = v22;
  uint64_t v31 = (uint64_t *)&v28[v29[5]];
  *uint64_t v31 = v30;
  v31[1] = v32;
  LOBYTE(v57) = 2;
  uint64_t v33 = sub_25A5101E0();
  char v34 = (uint64_t *)&v28[v29[6]];
  uint64_t *v34 = v33;
  v34[1] = v35;
  LOBYTE(v57) = 3;
  *(_DWORD *)&v28[v29[7]] = sub_25A510210();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B370);
  char v56 = 4;
  sub_25A4DAD94();
  sub_25A5101D0();
  *(void *)&v28[v29[9]] = v57;
  LOBYTE(v57) = 5;
  sub_25A4DAC98(&qword_26A41B188, MEMORY[0x263F07490]);
  char v36 = v48;
  uint64_t v37 = v11;
  uint64_t v38 = v49;
  sub_25A510200();
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v28[v29[8]], v36, v38);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B388);
  char v56 = 6;
  sub_25A4DAED0(&qword_26A41B390, &qword_26A41B388, (void (*)(void))sub_25A4DAE7C);
  sub_25A510200();
  uint64_t v39 = v37;
  *(void *)&v28[v29[10]] = v57;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B3A0);
  char v56 = 7;
  sub_25A4DAED0(&qword_26A41B3A8, &qword_26A41B3A0, (void (*)(void))sub_25A4DAF48);
  sub_25A510200();
  *(void *)&v28[v29[11]] = v57;
  LOBYTE(v57) = 8;
  uint64_t v40 = sub_25A5101B0();
  uint64_t v42 = v41;
  (*(void (**)(char *, char *))(v51 + 8))(v55, v53);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v39);
  uint64_t v43 = (uint64_t)v45;
  uint64_t v44 = (uint64_t *)&v45[v46[12]];
  *uint64_t v44 = v40;
  v44[1] = v42;
  sub_25A4DAF9C(v43, v47, type metadata accessor for CrashReport);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
  return sub_25A4DB004(v43, type metadata accessor for CrashReport);
}

uint64_t sub_25A4D97BC(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 1701667182;
      break;
    case 2:
      uint64_t result = 0x657079745F677562;
      break;
    case 3:
      uint64_t result = 6580592;
      break;
    case 4:
      uint64_t result = 6910817;
      break;
    case 5:
      uint64_t result = 1701669236;
      break;
    case 6:
      uint64_t result = 0x736567616D69;
      break;
    case 7:
      uint64_t result = 0x73656D617266;
      break;
    case 8:
      uint64_t result = 0x50656C6946676F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25A4D98B4(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 1701667182;
      break;
    case 2:
      uint64_t result = 0x657079745F677562;
      break;
    case 3:
      uint64_t result = 6580592;
      break;
    case 4:
      uint64_t result = 6910817;
      break;
    case 5:
      uint64_t result = 1701669236;
      break;
    case 6:
      uint64_t result = 0x736567616D69;
      break;
    case 7:
      uint64_t result = 0x73656D617266;
      break;
    case 8:
      uint64_t result = 0x50656C6946676F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25A4D99AC(char *a1, char *a2)
{
  return sub_25A4D63B8(*a1, *a2);
}

uint64_t sub_25A4D99B8()
{
  return sub_25A510530();
}

uint64_t sub_25A4D9A00()
{
  return sub_25A4D67BC();
}

uint64_t sub_25A4D9A08()
{
  return sub_25A510530();
}

uint64_t sub_25A4D9A4C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25A4DCC90();
  *a1 = result;
  return result;
}

uint64_t sub_25A4D9A7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_25A4D97BC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_25A4D9AA8()
{
  return sub_25A4D98B4(*v0);
}

uint64_t sub_25A4D9AB0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25A4DCC90();
  *a1 = result;
  return result;
}

void sub_25A4D9AD8(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_25A4D9AE4(uint64_t a1)
{
  unint64_t v2 = sub_25A4DACE0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25A4D9B20(uint64_t a1)
{
  unint64_t v2 = sub_25A4DACE0();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25A4D9B5C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CrashReport.init(from:)(a1, a2);
}

uint64_t sub_25A4D9B74@<X0>(uint64_t a1@<X8>)
{
  return sub_25A4DAF9C(v1, a1, type metadata accessor for CrashReport.ID);
}

Swift::Void __swiftcall CrashReport.describe(with:)(Swift::OpaquePointer *with)
{
  Swift::String v2 = CrashReport.formattedAsLegacyCrashReport()();
  rawValue = with->_rawValue;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    rawValue = sub_25A3852D0(0, rawValue[2] + 1, 1, rawValue);
  }
  unint64_t v5 = rawValue[2];
  unint64_t v4 = rawValue[3];
  if (v5 >= v4 >> 1) {
    rawValue = sub_25A3852D0((void *)(v4 > 1), v5 + 1, 1, rawValue);
  }
  rawValue[2] = v5 + 1;
  uint64_t v6 = (Swift::String *)&rawValue[3 * v5];
  _OWORD v6[2] = v2;
  LOBYTE(v6[3]._countAndFlagsBits) = 0;
  with->_rawValue = rawValue;
}

Swift::String __swiftcall CrashReport.formattedAsLegacyCrashReport()()
{
  unint64_t v1 = 0xD000000000000015;
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for CrashReport(0);
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  uint64_t v84 = (int *)v2;
  uint64_t v85 = v0;
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  int64_t v3 = 0xD000000000000015;
  unint64_t v4 = 0x800000025A5220B0;
  unint64_t v5 = sub_25A38A5A4(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v7 = v5[2];
  uint64_t v6 = v5[3];
  unint64_t v8 = v7 + 1;
  if (v7 >= (unint64_t)v6 >> 1) {
    goto LABEL_90;
  }
  while (1)
  {
    _OWORD v5[2] = v8;
    uint64_t v9 = &v5[2 * v7];
    v9[4] = v3;
    v9[5] = v4;
    sub_25A50FDB0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    unint64_t v11 = v5[2];
    unint64_t v10 = v5[3];
    int64_t v12 = v10 >> 1;
    unint64_t v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      unint64_t v5 = sub_25A38A5A4((void *)(v10 > 1), v11 + 1, 1, v5);
      unint64_t v10 = v5[3];
      int64_t v12 = v10 >> 1;
    }
    _OWORD v5[2] = v13;
    uint64_t v14 = &v5[2 * v11];
    v14[4] = v1;
    v14[5] = 0x800000025A5220D0;
    if (v12 < (uint64_t)(v11 + 2)) {
      unint64_t v5 = sub_25A38A5A4((void *)(v10 > 1), v11 + 2, 1, v5);
    }
    _OWORD v5[2] = v11 + 2;
    uint64_t v15 = &v5[2 * v13];
    v15[4] = 0;
    v15[5] = 0xE000000000000000;
    sub_25A50FDB0();
    swift_bridgeObjectRelease();
    sub_25A50E470();
    sub_25A4DAC98(&qword_26A41B3B8, MEMORY[0x263F07490]);
    sub_25A5102B0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    unint64_t v17 = v5[2];
    unint64_t v16 = v5[3];
    int64_t v18 = v16 >> 1;
    unint64_t v19 = v17 + 1;
    if (v16 >> 1 <= v17)
    {
      unint64_t v5 = sub_25A38A5A4((void *)(v16 > 1), v17 + 1, 1, v5);
      unint64_t v16 = v5[3];
      int64_t v18 = v16 >> 1;
    }
    _OWORD v5[2] = v19;
    uint64_t v20 = &v5[2 * v17];
    v20[4] = v1;
    v20[5] = 0x800000025A5220F0;
    if (v18 < (uint64_t)(v17 + 2)) {
      unint64_t v5 = sub_25A38A5A4((void *)(v16 > 1), v17 + 2, 1, v5);
    }
    _OWORD v5[2] = v17 + 2;
    uint64_t v21 = &v5[2 * v19];
    v21[4] = 0;
    void v21[5] = 0xE000000000000000;
    unint64_t v4 = *(void *)(v85 + v84[9]);
    if (v4)
    {
      int64_t v3 = v5[2];
      unint64_t v22 = v5[3];
      unint64_t v8 = v3 + 1;
      swift_bridgeObjectRetain();
      if (v3 >= v22 >> 1) {
        unint64_t v5 = sub_25A38A5A4((void *)(v22 > 1), v3 + 1, 1, v5);
      }
      int64_t v23 = 0;
      _OWORD v5[2] = v8;
      uint64_t v24 = &v5[2 * v3];
      v24[4] = v1 + 12;
      v24[5] = 0x800000025A522130;
      unint64_t v87 = v4 + 64;
      uint64_t v25 = 1 << *(unsigned char *)(v4 + 32);
      uint64_t v26 = -1;
      if (v25 < 64) {
        uint64_t v26 = ~(-1 << v25);
      }
      unint64_t v27 = v26 & *(void *)(v4 + 64);
      int64_t v88 = (unint64_t)(v25 + 63) >> 6;
      unint64_t v89 = v4;
      while (1)
      {
        if (v27)
        {
          uint64_t v91 = (v27 - 1) & v27;
          int64_t v93 = v23;
          unint64_t v28 = __clz(__rbit64(v27)) | (v23 << 6);
        }
        else
        {
          uint64_t v6 = v23 + 1;
          if (__OFADD__(v23, 1)) {
            goto LABEL_87;
          }
          if (v6 >= v88)
          {
LABEL_41:
            swift_release();
            unint64_t v1 = 0xD000000000000015;
            break;
          }
          unint64_t v29 = *(void *)(v87 + 8 * v6);
          int64_t v30 = v23 + 1;
          if (!v29)
          {
            int64_t v30 = v23 + 2;
            if (v23 + 2 >= v88) {
              goto LABEL_41;
            }
            unint64_t v29 = *(void *)(v87 + 8 * v30);
            if (!v29)
            {
              int64_t v30 = v23 + 3;
              if (v23 + 3 >= v88) {
                goto LABEL_41;
              }
              unint64_t v29 = *(void *)(v87 + 8 * v30);
              if (!v29)
              {
                uint64_t v6 = v23 + 4;
                if (v23 + 4 >= v88) {
                  goto LABEL_41;
                }
                unint64_t v29 = *(void *)(v87 + 8 * v6);
                if (!v29)
                {
                  while (1)
                  {
                    int64_t v30 = v6 + 1;
                    if (__OFADD__(v6, 1)) {
                      goto LABEL_89;
                    }
                    if (v30 >= v88) {
                      goto LABEL_41;
                    }
                    unint64_t v29 = *(void *)(v87 + 8 * v30);
                    ++v6;
                    if (v29) {
                      goto LABEL_32;
                    }
                  }
                }
                int64_t v30 = v23 + 4;
              }
            }
          }
LABEL_32:
          uint64_t v91 = (v29 - 1) & v29;
          int64_t v93 = v30;
          unint64_t v28 = __clz(__rbit64(v29)) + (v30 << 6);
        }
        int64_t v3 = *(void *)(*(void *)(v4 + 56) + 8 * v28);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
        sub_25A50EDA0();
        unint64_t v7 = v5[2];
        unint64_t v31 = v5[3];
        unint64_t v8 = v7 + 1;
        if (v7 >= v31 >> 1) {
          unint64_t v5 = sub_25A38A5A4((void *)(v31 > 1), v7 + 1, 1, v5);
        }
        _OWORD v5[2] = v8;
        uint64_t v32 = &v5[2 * v7];
        v32[4] = 538976288;
        v32[5] = 0xE400000000000000;
        uint64_t v33 = *(void *)(v3 + 16);
        if (v33)
        {
          unint64_t v1 = v3 + 40;
          do
          {
            swift_bridgeObjectRetain();
            sub_25A50EDA0();
            swift_bridgeObjectRelease();
            unint64_t v7 = 0xE800000000000000;
            unint64_t v35 = v5[2];
            unint64_t v34 = v5[3];
            unint64_t v8 = v35 + 1;
            if (v35 >= v34 >> 1) {
              unint64_t v5 = sub_25A38A5A4((void *)(v34 > 1), v35 + 1, 1, v5);
            }
            v1 += 16;
            _OWORD v5[2] = v8;
            char v36 = &v5[2 * v35];
            v36[4] = 0x2020202020202020;
            v36[5] = 0xE800000000000000;
            --v33;
          }
          while (v33);
        }
        swift_bridgeObjectRelease();
        unint64_t v4 = v89;
        unint64_t v27 = v91;
        int64_t v23 = v93;
      }
    }
    uint64_t v37 = *(void *)(v85 + v84[11]);
    if (!*(void *)(v37 + 16)) {
      break;
    }
    unint64_t v39 = v5[2];
    unint64_t v38 = v5[3];
    int64_t v40 = v38 >> 1;
    unint64_t v41 = v39 + 1;
    if (v38 >> 1 <= v39)
    {
      unint64_t v5 = sub_25A38A5A4((void *)(v38 > 1), v39 + 1, 1, v5);
      unint64_t v38 = v5[3];
      int64_t v40 = v38 >> 1;
    }
    _OWORD v5[2] = v41;
    uint64_t v42 = &v5[2 * v39];
    v42[4] = 0;
    v42[5] = 0xE000000000000000;
    int64_t v3 = v39 + 2;
    if (v40 < v3) {
      unint64_t v5 = sub_25A38A5A4((void *)(v38 > 1), v3, 1, v5);
    }
    _OWORD v5[2] = v3;
    uint64_t v43 = &v5[2 * v41];
    v43[4] = v1 - 5;
    v43[5] = 0x800000025A522110;
    uint64_t v82 = sub_25A4DAB80();
    sub_25A5102B0();
    sub_25A50EDA0();
    uint64_t v83 = sub_25A50ED50();
    swift_bridgeObjectRelease();
    unint64_t v8 = *(void *)(v37 + 16);
    swift_bridgeObjectRetain();
    if (!v8)
    {
LABEL_67:
      swift_bridgeObjectRelease();
      break;
    }
    unint64_t v44 = 0;
    uint64_t v45 = v37 + 56;
    uint64_t v6 = (uint64_t)swift_release_n;
    uint64_t v81 = v37;
    while (v44 < v8)
    {
      unint64_t v4 = *(void *)(v45 - 24);
      uint64_t v92 = *(void *)(v45 - 16);
      unint64_t v94 = v44;
      int64_t v3 = *(void *)(v45 - 8);
      unint64_t v1 = *(void *)(v45 + 8);
      unint64_t v7 = *(unsigned __int8 *)(v45 + 16);
      uint64_t v46 = *(void *)(v45 + 32);
      char v86 = *(unsigned char *)(v45 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_25A5102B0();
      uint64_t v48 = v47;
      uint64_t v49 = sub_25A50ED50();
      uint64_t v6 = v83;
      if (__OFSUB__(v83, v49)) {
        goto LABEL_85;
      }
      unint64_t v90 = v8;
      MEMORY[0x26113CE90](32, 0xE100000000000000, v83 - v49);
      uint64_t v6 = *(void *)(v85 + v84[10]);
      if ((int64_t)v4 >= *(void *)(v6 + 16))
      {
        unint64_t v4 = 0xE300000000000000;
        unint64_t v8 = 0xE300000000000000;
      }
      else
      {
        unint64_t v8 = 0xE300000000000000;
        if ((v4 & 0x8000000000000000) != 0) {
          goto LABEL_88;
        }
        unint64_t v4 = *(void *)(v6 + 72 * v4 + 96);
        if (v4) {
          swift_bridgeObjectRetain();
        }
        else {
          unint64_t v4 = 0xE300000000000000;
        }
      }
      uint64_t v50 = sub_25A50ED50();
      uint64_t v6 = v82;
      if (__OFSUB__(v82, v50)) {
        goto LABEL_86;
      }
      MEMORY[0x26113CE90](32, 0xE100000000000000, v82 - v50);
      swift_bridgeObjectRetain();
      if (!v7)
      {
        sub_25A5102B0();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
        unint64_t v1 = 0xE300000000000000;
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
      }
      if (v46)
      {
        swift_bridgeObjectRetain();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
        unint64_t v7 = 0xE200000000000000;
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
        if ((v86 & 1) == 0)
        {
          sub_25A5102B0();
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
          unint64_t v7 = 0xE100000000000000;
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
        }
        sub_25A50EDA0();
      }
      sub_25A50FDB0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
      uint64_t v51 = swift_allocObject();
      *(_OWORD *)(v51 + 16) = xmmword_25A5119F0;
      *(void *)(v51 + 56) = MEMORY[0x263F8D6C8];
      *(void *)(v51 + 64) = MEMORY[0x263F8D750];
      *(void *)(v51 + 32) = v92;
      sub_25A50EC50();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      int64_t v3 = v90;
      unint64_t v4 = v5[2];
      unint64_t v52 = v5[3];
      if (v4 >= v52 >> 1) {
        unint64_t v5 = sub_25A38A5A4((void *)(v52 > 1), v4 + 1, 1, v5);
      }
      unint64_t v44 = v94 + 1;
      _OWORD v5[2] = v4 + 1;
      uint64_t v6 = (uint64_t)&v5[2 * v4];
      *(void *)(v6 + 32) = v90;
      *(void *)(v6 + 40) = v48;
      unint64_t v8 = *(void *)(v81 + 16);
      v45 += 80;
      if (v94 + 1 == v8) {
        goto LABEL_67;
      }
    }
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    unint64_t v5 = sub_25A38A5A4((void *)((unint64_t)v6 > 1), v8, 1, v5);
  }
  uint64_t v53 = *(void *)(v85 + v84[10]);
  if (*(void *)(v53 + 16))
  {
    unint64_t v55 = v5[2];
    unint64_t v54 = v5[3];
    int64_t v56 = v54 >> 1;
    unint64_t v57 = v55 + 1;
    if (v54 >> 1 <= v55)
    {
      unint64_t v5 = sub_25A38A5A4((void *)(v54 > 1), v55 + 1, 1, v5);
      unint64_t v54 = v5[3];
      int64_t v56 = v54 >> 1;
    }
    _OWORD v5[2] = v57;
    uint64_t v58 = &v5[2 * v55];
    v58[4] = 0;
    v58[5] = 0xE000000000000000;
    int64_t v59 = v55 + 2;
    if (v56 < v59) {
      unint64_t v5 = sub_25A38A5A4((void *)(v54 > 1), v59, 1, v5);
    }
    _OWORD v5[2] = v59;
    uint64_t v60 = (char *)&v5[2 * v57];
    strcpy(v60 + 32, "Binary Images:");
    v60[47] = -18;
    uint64_t v61 = *(void *)(v53 + 16);
    if (v61)
    {
      swift_bridgeObjectRetain();
      uint64_t v62 = v53 + 96;
      do
      {
        uint64_t v63 = *(void *)(v62 - 32);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
        uint64_t v64 = swift_allocObject();
        *(_OWORD *)(v64 + 16) = xmmword_25A5119F0;
        *(void *)(v64 + 56) = MEMORY[0x263F8D6C8];
        *(void *)(v64 + 64) = MEMORY[0x263F8D750];
        *(void *)(v64 + 32) = v63;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        sub_25A50EC50();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
        sub_25A50EDA0();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
        sub_25A50EDA0();
        swift_bridgeObjectRetain();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_25A50EDA0();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
        unint64_t v66 = v5[2];
        unint64_t v65 = v5[3];
        if (v66 >= v65 >> 1) {
          unint64_t v5 = sub_25A38A5A4((void *)(v65 > 1), v66 + 1, 1, v5);
        }
        _OWORD v5[2] = v66 + 1;
        uint64_t v67 = &v5[2 * v66];
        v67[4] = 0x20202020202020;
        v67[5] = 0xE700000000000000;
        v62 += 72;
        --v61;
      }
      while (v61);
      swift_bridgeObjectRelease();
    }
  }
  unint64_t v69 = v5[2];
  unint64_t v68 = v5[3];
  int64_t v70 = v68 >> 1;
  unint64_t v71 = v69 + 1;
  if (v68 >> 1 <= v69)
  {
    unint64_t v5 = sub_25A38A5A4((void *)(v68 > 1), v69 + 1, 1, v5);
    unint64_t v68 = v5[3];
    int64_t v70 = v68 >> 1;
  }
  _OWORD v5[2] = v71;
  uint64_t v72 = &v5[2 * v69];
  v72[4] = 0;
  v72[5] = 0xE000000000000000;
  int64_t v73 = v69 + 2;
  if (v70 < v73) {
    unint64_t v5 = sub_25A38A5A4((void *)(v68 > 1), v73, 1, v5);
  }
  _OWORD v5[2] = v73;
  char v74 = &v5[2 * v71];
  v74[4] = 4607813;
  v74[5] = 0xE300000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3A108C();
  uint64_t v75 = sub_25A50EAD0();
  v77 = v76;
  swift_bridgeObjectRelease();
  uint64_t v78 = v75;
  v79 = v77;
  result._object = v79;
  result._uint64_t countAndFlagsBits = v78;
  return result;
}

uint64_t sub_25A4DAB4C()
{
  Swift::String v0 = CrashReport.formattedAsLegacyCrashReport()();
  return sub_25A384720(v0._countAndFlagsBits, (uint64_t)v0._object, 0);
}

uint64_t sub_25A4DAB80()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 40));
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  unint64_t v5 = (uint64_t *)(v1 + 96);
  while (1)
  {
    uint64_t v6 = *v5;
    v5 += 9;
    if (v6)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v7 = sub_25A50ED50();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v4 <= v7) {
        uint64_t v4 = v7;
      }
    }
    if (v2 - 1 == v3) {
      break;
    }
    if ((unint64_t)++v3 >= *(void *)(v1 + 16))
    {
      __break(1u);
      break;
    }
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_25A4DAC98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25A4DACE0()
{
  unint64_t result = qword_26A41B360;
  if (!qword_26A41B360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B360);
  }
  return result;
}

uint64_t sub_25A4DAD34(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A419588);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_25A4DAD94()
{
  unint64_t result = qword_26A41B378;
  if (!qword_26A41B378)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A41B370);
    sub_25A4DAE10();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B378);
  }
  return result;
}

unint64_t sub_25A4DAE10()
{
  unint64_t result = qword_26A41B380;
  if (!qword_26A41B380)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415DC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B380);
  }
  return result;
}

unint64_t sub_25A4DAE7C()
{
  unint64_t result = qword_26A41B398;
  if (!qword_26A41B398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B398);
  }
  return result;
}

uint64_t sub_25A4DAED0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25A4DAF48()
{
  unint64_t result = qword_26A41B3B0;
  if (!qword_26A41B3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B3B0);
  }
  return result;
}

uint64_t sub_25A4DAF9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25A4DB004(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25A4DB064()
{
  return sub_25A4DAC98(&qword_26A41B3C0, (void (*)(uint64_t))type metadata accessor for CrashReport.ID);
}

unint64_t sub_25A4DB0B0()
{
  unint64_t result = qword_26A41B3C8;
  if (!qword_26A41B3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B3C8);
  }
  return result;
}

unint64_t sub_25A4DB108()
{
  unint64_t result = qword_26A41B3D0;
  if (!qword_26A41B3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B3D0);
  }
  return result;
}

unint64_t sub_25A4DB160()
{
  unint64_t result = qword_26A41B3D8;
  if (!qword_26A41B3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B3D8);
  }
  return result;
}

unint64_t sub_25A4DB1B8()
{
  unint64_t result = qword_26A41B3E0;
  if (!qword_26A41B3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B3E0);
  }
  return result;
}

unint64_t sub_25A4DB210()
{
  unint64_t result = qword_26A41B3E8;
  if (!qword_26A41B3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B3E8);
  }
  return result;
}

unint64_t sub_25A4DB268()
{
  unint64_t result = qword_26A41B3F0;
  if (!qword_26A41B3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B3F0);
  }
  return result;
}

unint64_t sub_25A4DB2C0()
{
  unint64_t result = qword_26A41B3F8;
  if (!qword_26A41B3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B3F8);
  }
  return result;
}

uint64_t sub_25A4DB314()
{
  return sub_25A4DAC98(&qword_26A41B400, (void (*)(uint64_t))type metadata accessor for CrashReport.ID);
}

uint64_t sub_25A4DB35C(uint64_t a1)
{
  uint64_t result = sub_25A4DAC98(&qword_26A41B408, (void (*)(uint64_t))type metadata accessor for CrashReport);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CrashReport(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_25A50E4C0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unint64_t v10 = (uint64_t *)((char *)a1 + v8);
    unint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    unint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *unint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[8];
    *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    unint64_t v17 = (char *)a1 + v16;
    int64_t v18 = (char *)a2 + v16;
    uint64_t v19 = sub_25A50E470();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(v17, v18, v19);
    uint64_t v21 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
    uint64_t v22 = a3[12];
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    int64_t v23 = (uint64_t *)((char *)a1 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = v24[1];
    *int64_t v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CrashReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  uint64_t v6 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CrashReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  unint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_25A50E470();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v16, v17, v18);
  uint64_t v20 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  uint64_t v21 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  uint64_t v22 = (void *)(a1 + v21);
  int64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = v23[1];
  void *v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CrashReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[12];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CrashReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for CrashReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[12];
  uint64_t v22 = (void *)(a1 + v21);
  int64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  void *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CrashReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A4DBBD4);
}

uint64_t sub_25A4DBBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CrashReport.ID(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_25A50E470();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 32);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for CrashReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A4DBD18);
}

uint64_t sub_25A4DBD18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CrashReport.ID(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_25A50E470();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_25A4DBE48()
{
  uint64_t result = sub_25A50E4C0();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_25A50E470();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CrashReport.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E4C0();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for CrashReport.ID(uint64_t a1)
{
  uint64_t v2 = sub_25A50E4C0();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for CrashReport.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for CrashReport.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for CrashReport.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for CrashReport.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CrashReport.ID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A4DC1C0);
}

uint64_t sub_25A4DC1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E4C0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CrashReport.ID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A4DC240);
}

uint64_t sub_25A4DC240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E4C0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_25A4DC2B0()
{
  uint64_t result = sub_25A50E4C0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for CrashReport.Frame()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CrashReport.Frame(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CrashReport.Frame(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for CrashReport.Frame(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for CrashReport.Frame(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CrashReport.Frame(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CrashReport.Frame()
{
  return &type metadata for CrashReport.Frame;
}

ValueMetadata *type metadata accessor for CrashReport.Frame.ImageLocation()
{
  return &type metadata for CrashReport.Frame.ImageLocation;
}

uint64_t getEnumTagSinglePayload for CrashReport.Frame.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CrashReport.Frame.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A4DC754);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CrashReport.Frame.CodingKeys()
{
  return &type metadata for CrashReport.Frame.CodingKeys;
}

uint64_t destroy for CrashReport.Image()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CrashReport.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CrashReport.Image(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CrashReport.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CrashReport.Image()
{
  return &type metadata for CrashReport.Image;
}

unsigned char *storeEnumTagSinglePayload for CrashReport.Image.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A4DCA4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CrashReport.Image.CodingKeys()
{
  return &type metadata for CrashReport.Image.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for CrashReport.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *__n128 result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A4DCB50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CrashReport.CodingKeys()
{
  return &type metadata for CrashReport.CodingKeys;
}

unint64_t sub_25A4DCB8C()
{
  unint64_t result = qword_26A41B430;
  if (!qword_26A41B430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B430);
  }
  return result;
}

unint64_t sub_25A4DCBE4()
{
  unint64_t result = qword_26A41B438;
  if (!qword_26A41B438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B438);
  }
  return result;
}

unint64_t sub_25A4DCC3C()
{
  unint64_t result = qword_26A41B440;
  if (!qword_26A41B440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B440);
  }
  return result;
}

uint64_t sub_25A4DCC90()
{
  unint64_t v0 = sub_25A510190();
  swift_bridgeObjectRelease();
  if (v0 >= 9) {
    return 9;
  }
  else {
    return v0;
  }
}

uint64_t sub_25A4DCCEC(void **a1)
{
  int v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v2 = (void *)sub_25A4DEC04(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = sub_25A4DE098(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_25A4DCD58()
{
  type metadata accessor for AgentSymbolTableManager();
  uint64_t v0 = swift_allocObject();
  unint64_t v1 = sub_25A3935C0(MEMORY[0x263F8EE78]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B450);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = v1;
  *(void *)(v0 + 16) = result;
  *(void *)(v0 + 24) = 0x403E000000000000;
  off_26A41B448 = (_UNKNOWN *)v0;
  return result;
}

uint64_t AgentSymbolTableManager.__allocating_init(invalidatedLinkerTimeout:)(double a1)
{
  uint64_t v2 = swift_allocObject();
  unint64_t v3 = sub_25A3935C0(MEMORY[0x263F8EE78]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B450);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = v3;
  *(void *)(v2 + 16) = v4;
  *(double *)(v2 + 24) = a1;
  return v2;
}

uint64_t static AgentSymbolTableManager.shared.getter()
{
  if (qword_26A415698 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t AgentSymbolTableManager.init(invalidatedLinkerTimeout:)(double a1)
{
  unint64_t v3 = sub_25A3935C0(MEMORY[0x263F8EE78]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B450);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = v3;
  *(void *)(v1 + 16) = v4;
  *(double *)(v1 + 24) = a1;
  return v1;
}

uint64_t AgentSymbolTableManager.createSymbolTable(forPid:with:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  unint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_25A4DEC18(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_25A4DCF68@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  sub_25A3990F8(a2, (uint64_t)v10);
  type metadata accessor for AgentSymbolTable();
  uint64_t v7 = swift_allocObject();
  sub_25A3C85D8(v10, v7 + 16);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v10[0] = *a1;
  *a1 = 0x8000000000000000;
  sub_25A3FEE70(v7, a3, isUniquelyReferenced_nonNull_native);
  *a1 = *(void *)&v10[0];
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v7;
  return result;
}

Swift::Void __swiftcall AgentSymbolTableManager.linkerInvalidated(forPid:)(Swift::Int32 forPid)
{
  Swift::Int32 v26 = forPid;
  uint64_t v28 = sub_25A50E750();
  uint64_t v31 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  unint64_t v27 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_25A50E790();
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v30 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25A50E7D0();
  uint64_t v24 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = sub_25A50E760();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A3DD980();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F8F080], v12);
  uint64_t v16 = (void *)sub_25A50F900();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  _s20PreviewsFoundationOS17DispatchSchedulerV8DeadlineV3nowAEyFZ_0();
  uint64_t v17 = v25;
  MEMORY[0x26113C7E0](v9, *(double *)(v25 + 24));
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v9, v5);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v17;
  *(_DWORD *)(v19 + 24) = v26;
  aBlock[4] = sub_25A4DEC70;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25A3BE05C;
  aBlock[3] = &block_descriptor_12;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  sub_25A50E770();
  uint64_t v32 = MEMORY[0x263F8EE78];
  sub_25A3BE558();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
  sub_25A3DDB54();
  uint64_t v21 = v27;
  uint64_t v22 = v28;
  sub_25A50FC90();
  MEMORY[0x26113D880](v11, v4, v21, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v30);
  v18(v11, v24);
  swift_release();
}

void sub_25A4DD45C(int a1, Swift::Int32 pid)
{
  if (AgentSymbolTableManager.removeSymbolTable(pid:)(pid))
  {
    if (qword_26A415618 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_25A50E5E0();
    __swift_project_value_buffer(v2, (uint64_t)qword_26A419FC0);
    oslog = sub_25A50E5C0();
    os_log_type_t v3 = sub_25A50F830();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 67240192;
      sub_25A50FB00();
      _os_log_impl(&dword_25A380000, oslog, v3, "Agent symbol table for pid %{public}d was orphaned.", v4, 8u);
      MEMORY[0x26113F070](v4, -1, -1);
    }
    else
    {
    }
  }
}

Swift::Bool __swiftcall AgentSymbolTableManager.removeSymbolTable(pid:)(Swift::Int32 pid)
{
  os_log_type_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (uint64_t *)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_25A4DEC94(v4, &v15);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = (void *)v15;
  if (v15)
  {
    uint64_t v7 = qword_26A415618;
    swift_retain();
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_25A50E5E0();
    __swift_project_value_buffer(v8, (uint64_t)qword_26A419FC0);
    swift_retain();
    uint64_t v9 = sub_25A50E5C0();
    os_log_type_t v10 = sub_25A50F820();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 67240448;
      LODWORD(v15) = pid;
      sub_25A50FB00();
      *(_WORD *)(v11 + 8) = 2050;
      uint64_t v12 = v6[5];
      uint64_t v13 = v6[6];
      __swift_project_boxed_opaque_existential_1(v6 + 2, v12);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
      sub_25A50FB00();
      swift_release();
      _os_log_impl(&dword_25A380000, v9, v10, "Cleaned up agent symbol table for pid %{public}d, mapping size: %{public}ld", (uint8_t *)v11, 0x12u);
      MEMORY[0x26113F070](v11, -1, -1);
      swift_release_n();
    }
    else
    {

      swift_release_n();
    }
  }
  return v6 != 0;
}

uint64_t AgentSymbolTableManager.symbolTable(forPid:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  os_log_type_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_25A4DECB0(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_25A4DD7F8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  if (*(void *)(*(void *)a1 + 16) && (sub_25A409AB4(a2), (v4 & 1) != 0)) {
    uint64_t result = swift_retain();
  }
  else {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

unint64_t sub_25A4DD858@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  unint64_t result = sub_25A409AB4(a2);
  if (v6)
  {
    unint64_t v7 = result;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *a1;
    uint64_t v11 = *a1;
    *a1 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_25A4107AC();
      uint64_t v9 = v11;
    }
    uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v7);
    sub_25A398E8C(v7, v9);
    *a1 = v9;
    unint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  *a3 = v10;
  return result;
}

void sub_25A4DD908()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  os_log_type_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_25A4DDE14(v2, &v26);
  os_unfair_lock_unlock(v3);
  if (*(void *)(v26 + 16))
  {
    if (qword_26A415618 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_25A50E5E0();
    __swift_project_value_buffer(v4, (uint64_t)qword_26A419FC0);
    uint64_t v5 = sub_25A50E5C0();
    os_log_type_t v6 = sub_25A50F840();
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v7 = 0;
      _os_log_impl(&dword_25A380000, v5, v6, "Symbol Table Mapping Sizes:", v7, 2u);
      MEMORY[0x26113F070](v7, -1, -1);
    }

    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = sub_25A3994E8(v8);
    swift_bridgeObjectRelease();
    uint64_t v26 = (uint64_t)v9;
    sub_25A4DCCEC((void **)&v26);
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v26 + 16);
    if (v10)
    {
      uint64_t v11 = (void *)(v26 + 40);
      do
      {
        int v12 = *((_DWORD *)v11 - 2);
        uint64_t v13 = (void *)*v11;
        swift_retain_n();
        uint64_t v14 = sub_25A50E5C0();
        os_log_type_t v15 = sub_25A50F840();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = swift_slowAlloc();
          os_log_t osloga = (os_log_t)swift_slowAlloc();
          *(_DWORD *)uint64_t v16 = 67240450;
          *(_DWORD *)(v16 + 4) = v12;
          *(_WORD *)(v16 + 8) = 2082;
          uint64_t v26 = 0;
          unint64_t v27 = 0xE000000000000000;
          v28[0] = osloga;
          sub_25A50FDB0();
          swift_bridgeObjectRelease();
          uint64_t v26 = 0x3A736C6F626D7973;
          unint64_t v27 = 0xE900000000000020;
          uint64_t v17 = v13[5];
          uint64_t v18 = v13[6];
          __swift_project_boxed_opaque_existential_1(v13 + 2, v17);
          (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
          sub_25A5102B0();
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
          sub_25A50EDA0();
          uint64_t v19 = v13[5];
          uint64_t v20 = v13[6];
          __swift_project_boxed_opaque_existential_1(v13 + 2, v19);
          (*(void (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
          sub_25A5102B0();
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
          *(void *)(v16 + 10) = sub_25A3A36A4(v26, v27, (uint64_t *)v28);
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_25A380000, v14, v15, "    Table: pid: %{public}d, %{public}s", (uint8_t *)v16, 0x12u);
          swift_arrayDestroy();
          MEMORY[0x26113F070](osloga, -1, -1);
          MEMORY[0x26113F070](v16, -1, -1);
          swift_release();
        }
        else
        {

          swift_release_n();
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
    {
      __break(0xC471u);
    }
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_26A415618 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_25A50E5E0();
    __swift_project_value_buffer(v21, (uint64_t)qword_26A419FC0);
    oslog = sub_25A50E5C0();
    os_log_type_t v22 = sub_25A50F840();
    if (os_log_type_enabled(oslog, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_25A380000, oslog, v22, "No symbol tables tracked", v23, 2u);
      MEMORY[0x26113F070](v23, -1, -1);
    }
  }
}

uint64_t sub_25A4DDE14@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t AgentSymbolTableManager.deinit()
{
  swift_release();
  return v0;
}

uint64_t AgentSymbolTableManager.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x270FA0228](v0, 32, 7);
}

void __PrintAgentSymbolTableMappingSizes()
{
  if (qword_26A415698 != -1) {
    swift_once();
  }
  sub_25A4DD908();
}

Swift::Void __swiftcall _printAgentSymbolTableMappingSizes()()
{
  if (qword_26A415698 != -1) {
    swift_once();
  }
  sub_25A4DD908();
}

void *_symbolicateAgentAddress(_:_:)(uint64_t a1, Swift::UInt64 a2)
{
  if (qword_26A415698 != -1) {
    a1 = swift_once();
  }
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_25A4DED2C(v4, &v9);
  os_unfair_lock_unlock(v5);
  if (!v9) {
    return 0;
  }
  object = AgentSymbolTable.symbolName(covering:)(a2).value._object;
  swift_release();
  if (object)
  {
    uint64_t v7 = sub_25A50ECC0();
    swift_bridgeObjectRelease();
    object = strdup((const char *)(v7 + 32));
    swift_release();
  }
  return object;
}

uint64_t sub_25A4DE068@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_25A4DE098(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_25A510250();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v85 = 0;
      uint64_t v86 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        int v88 = *(_DWORD *)(v86 + 16 * i);
        uint64_t v89 = v85;
        do
        {
          if (v88 >= *(_DWORD *)(v86 + v89)) {
            break;
          }
          if (!v86) {
            goto LABEL_140;
          }
          uint64_t v90 = v86 + v89;
          uint64_t v91 = *(void *)(v86 + v89 + 24);
          *(_OWORD *)(v86 + v89 + 16) = *(_OWORD *)(v86 + v89);
          *(_DWORD *)uint64_t v90 = v88;
          *(void *)(v90 + 8) = v91;
          v89 -= 16;
        }
        while (v89 != -16);
        v85 += 16;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      int v12 = (char *)MEMORY[0x263F8EE78];
LABEL_102:
      uint64_t v92 = v12;
      uint64_t v103 = v9;
      if (v13 >= 2)
      {
        uint64_t v93 = *v101;
        do
        {
          unint64_t v94 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v93) {
            goto LABEL_144;
          }
          v95 = v92;
          uint64_t v96 = *(void *)&v92[16 * v94 + 32];
          uint64_t v97 = *(void *)&v92[16 * v13 + 24];
          sub_25A4DE780((char *)(v93 + 16 * v96), (char *)(v93 + 16 * *(void *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1) {
            break;
          }
          if (v97 < v96) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v95 = sub_25A4DEBB4((uint64_t)v95);
          }
          if (v94 >= *((void *)v95 + 2)) {
            goto LABEL_133;
          }
          v98 = &v95[16 * v94 + 32];
          *(void *)v98 = v96;
          *((void *)v98 + 1) = v97;
          unint64_t v99 = *((void *)v95 + 2);
          if (v13 > v99) {
            goto LABEL_134;
          }
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          uint64_t v92 = v95;
          *((void *)v95 + 2) = v99 - 1;
          unint64_t v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v103 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415BE8);
    uint64_t v8 = sub_25A50F130();
    *(void *)(v8 + 16) = v7;
    uint64_t v103 = v8;
    __dst = (char *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v102 = *a1 + 32;
  uint64_t v100 = *a1 - 16;
  int v12 = (char *)MEMORY[0x263F8EE78];
  uint64_t v104 = v6;
  uint64_t v105 = v3;
  uint64_t v106 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      int v15 = *(_DWORD *)(v11 + 16 * v10);
      uint64_t v16 = 16 * v14;
      int v17 = *(_DWORD *)(v11 + 16 * v14);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v18 = (int *)(v102 + 16 * v14);
        int v19 = v15;
        while (1)
        {
          int v21 = *v18;
          v18 += 4;
          int v20 = v21;
          if (v15 < v17 == v21 >= v19) {
            break;
          }
          ++v10;
          int v19 = v20;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          uint64_t v22 = 16 * v10;
          uint64_t v23 = v10;
          uint64_t v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = v11 + v22;
              int v26 = *(_DWORD *)(v11 + v16);
              uint64_t v27 = *(void *)(v11 + v16 + 8);
              *(_OWORD *)(v11 + v16) = *(_OWORD *)(v11 + v22 - 16);
              *(_DWORD *)(v25 - 16) = v26;
              *(void *)(v25 - 8) = v27;
            }
            ++v24;
            v22 -= 16;
            v16 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v28 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v28 >= v3) {
      uint64_t v28 = v3;
    }
    if (v28 < v14) {
      break;
    }
    if (v10 != v28)
    {
      uint64_t v29 = v100 + 16 * v10;
      do
      {
        int v30 = *(_DWORD *)(v11 + 16 * v10);
        uint64_t v31 = v14;
        uint64_t v32 = v29;
        do
        {
          if (v30 >= *(_DWORD *)v32) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v33 = *(void *)(v32 + 24);
          *(_OWORD *)(v32 + 16) = *(_OWORD *)v32;
          *(_DWORD *)uint64_t v32 = v30;
          *(void *)(v32 + 8) = v33;
          v32 -= 16;
          ++v31;
        }
        while (v10 != v31);
        ++v10;
        v29 += 16;
      }
      while (v10 != v28);
      uint64_t v10 = v28;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v12 = sub_25A4DE9FC(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v35 = *((void *)v12 + 2);
    unint64_t v34 = *((void *)v12 + 3);
    unint64_t v13 = v35 + 1;
    uint64_t v11 = v106;
    if (v35 >= v34 >> 1)
    {
      uint64_t v84 = sub_25A4DE9FC((char *)(v34 > 1), v35 + 1, 1, v12);
      uint64_t v11 = v106;
      int v12 = v84;
    }
    *((void *)v12 + 2) = v13;
    char v36 = v12 + 32;
    uint64_t v37 = &v12[16 * v35 + 32];
    *(void *)uint64_t v37 = v14;
    *((void *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        unint64_t v38 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v43 = &v36[16 * v13];
          uint64_t v44 = *((void *)v43 - 8);
          uint64_t v45 = *((void *)v43 - 7);
          BOOL v49 = __OFSUB__(v45, v44);
          uint64_t v46 = v45 - v44;
          if (v49) {
            goto LABEL_119;
          }
          uint64_t v48 = *((void *)v43 - 6);
          uint64_t v47 = *((void *)v43 - 5);
          BOOL v49 = __OFSUB__(v47, v48);
          uint64_t v41 = v47 - v48;
          char v42 = v49;
          if (v49) {
            goto LABEL_120;
          }
          unint64_t v50 = v13 - 2;
          uint64_t v51 = &v36[16 * v13 - 32];
          uint64_t v53 = *(void *)v51;
          uint64_t v52 = *((void *)v51 + 1);
          BOOL v49 = __OFSUB__(v52, v53);
          uint64_t v54 = v52 - v53;
          if (v49) {
            goto LABEL_122;
          }
          BOOL v49 = __OFADD__(v41, v54);
          uint64_t v55 = v41 + v54;
          if (v49) {
            goto LABEL_125;
          }
          if (v55 >= v46)
          {
            int64_t v73 = &v36[16 * v38];
            uint64_t v75 = *(void *)v73;
            uint64_t v74 = *((void *)v73 + 1);
            BOOL v49 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v49) {
              goto LABEL_129;
            }
            BOOL v66 = v41 < v76;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v67 = *((void *)v12 + 4);
            uint64_t v68 = *((void *)v12 + 5);
            BOOL v49 = __OFSUB__(v68, v67);
            uint64_t v60 = v68 - v67;
            char v61 = v49;
            goto LABEL_77;
          }
          uint64_t v40 = *((void *)v12 + 4);
          uint64_t v39 = *((void *)v12 + 5);
          BOOL v49 = __OFSUB__(v39, v40);
          uint64_t v41 = v39 - v40;
          char v42 = v49;
        }
        if (v42) {
          goto LABEL_121;
        }
        unint64_t v50 = v13 - 2;
        int64_t v56 = &v36[16 * v13 - 32];
        uint64_t v58 = *(void *)v56;
        uint64_t v57 = *((void *)v56 + 1);
        BOOL v59 = __OFSUB__(v57, v58);
        uint64_t v60 = v57 - v58;
        char v61 = v59;
        if (v59) {
          goto LABEL_124;
        }
        uint64_t v62 = &v36[16 * v38];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v49 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v49) {
          goto LABEL_127;
        }
        if (__OFADD__(v60, v65)) {
          goto LABEL_128;
        }
        if (v60 + v65 >= v41)
        {
          BOOL v66 = v41 < v65;
LABEL_83:
          if (v66) {
            unint64_t v38 = v50;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v61) {
          goto LABEL_123;
        }
        unint64_t v69 = &v36[16 * v38];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        BOOL v49 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v49) {
          goto LABEL_126;
        }
        if (v72 < v60) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v77 = v38 - 1;
        if (v38 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        uint64_t v78 = v12;
        v79 = &v36[16 * v77];
        uint64_t v80 = *(void *)v79;
        uint64_t v81 = &v36[16 * v38];
        uint64_t v82 = *((void *)v81 + 1);
        sub_25A4DE780((char *)(v11 + 16 * *(void *)v79), (char *)(v11 + 16 * *(void *)v81), v11 + 16 * v82, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v82 < v80) {
          goto LABEL_116;
        }
        if (v38 > *((void *)v78 + 2)) {
          goto LABEL_117;
        }
        *(void *)v79 = v80;
        *(void *)&v36[16 * v77 + 8] = v82;
        unint64_t v83 = *((void *)v78 + 2);
        if (v38 >= v83) {
          goto LABEL_118;
        }
        int v12 = v78;
        unint64_t v13 = v83 - 1;
        memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
        *((void *)v78 + 2) = v83 - 1;
        uint64_t v11 = v106;
        if (v83 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v104;
    uint64_t v3 = v105;
    if (v10 >= v105)
    {
      uint64_t v9 = v103;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  uint64_t result = sub_25A510050();
  __break(1u);
  return result;
}

uint64_t sub_25A4DE780(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v16 = &v4[16 * v13];
      uint64_t v22 = v16;
      uint64_t v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        int v17 = (char *)(a3 - 16);
        uint64_t v18 = v6;
        while (1)
        {
          int v19 = v17 + 16;
          int v20 = *((_DWORD *)v18 - 4);
          v18 -= 16;
          if (*((_DWORD *)v16 - 4) >= v20)
          {
            uint64_t v22 = v16 - 16;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *(_OWORD *)int v17 = *((_OWORD *)v16 - 1);
            }
            uint64_t v18 = v6;
            v16 -= 16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v19 != v6 || v17 >= v6) {
              *(_OWORD *)int v17 = *(_OWORD *)v18;
            }
            uint64_t v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 16;
          uint64_t v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*(_DWORD *)v6 >= *(_DWORD *)v4)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v23 = v4;
          int v15 = v6;
        }
        else
        {
          int v15 = v6 + 16;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      uint64_t v24 = v7;
    }
LABEL_42:
    sub_25A4DEAF8((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

char *sub_25A4DE9FC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B458);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_25A4DEAF8(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_25A510140();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_25A4DEBB4(uint64_t a1)
{
  return sub_25A4DE9FC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_25A4DEBC8(uint64_t a1)
{
  return sub_25A39A288(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_25A4DEBDC(void *a1)
{
  return sub_25A39A884(0, a1[2], 0, a1);
}

uint64_t sub_25A4DEBF0(void *a1)
{
  return sub_25A39AB98(0, a1[2], 0, a1);
}

uint64_t sub_25A4DEC04(void *a1)
{
  return sub_25A39B834(0, a1[2], 0, a1);
}

uint64_t sub_25A4DEC18@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25A4DCF68(a1, *(void *)(v2 + 16), *(_DWORD *)(v2 + 24), a2);
}

uint64_t sub_25A4DEC38()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 28, 7);
}

void sub_25A4DEC70()
{
  sub_25A4DD45C(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

unint64_t sub_25A4DEC94@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_25A4DD858(a1, *(_DWORD *)(v2 + 16), a2);
}

uint64_t sub_25A4DECB0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25A4DD7F8(a1, *(_DWORD *)(v2 + 16), a2);
}

uint64_t type metadata accessor for AgentSymbolTableManager()
{
  return self;
}

uint64_t method lookup function for AgentSymbolTableManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AgentSymbolTableManager);
}

uint64_t dispatch thunk of AgentSymbolTableManager.__allocating_init(invalidatedLinkerTimeout:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for AgentSymbolTableManager.State()
{
  return &type metadata for AgentSymbolTableManager.State;
}

uint64_t sub_25A4DED2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25A4DECB0(a1, a2);
}

uint64_t ThreadGuard.__allocating_init(value:tracker:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  ThreadGuard.init(value:tracker:)(a1, a2);
  return v4;
}

uint64_t ThreadGuard.init(value:tracker:)(uint64_t a1, long long *a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 80) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 88), a1);
  *(void *)(v2 + *(void *)(*(void *)v2 + 96)) = 0;
  *(void *)(v2 + *(void *)(*(void *)v2 + 104)) = 0;
  sub_25A3C85D8(a2, v2 + *(void *)(*(void *)v2 + 112));
  return v2;
}

uint64_t ThreadGuard.__allocating_init(value:requiringAccessOnThread:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  unint64_t v13 = sub_25A4DEF84();
  uint64_t v14 = &protocol witness table for NSThread;
  *(void *)&long long v12 = a2;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  uint64_t v9 = swift_allocObject();
  ThreadGuard.init(value:tracker:)((uint64_t)v8, &v12);
  return v9;
}

unint64_t sub_25A4DEF84()
{
  unint64_t result = qword_26A41B460[0];
  if (!qword_26A41B460[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_26A41B460);
  }
  return result;
}

uint64_t ThreadGuard.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(*(void *)v0 + 112));
  return v0;
}

uint64_t ThreadGuard.__deallocating_deinit()
{
  ThreadGuard.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t ThreadGuard.syncRead<A>(callsite:_:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v5 = v4;
  v31[1] = a4;
  v31[2] = a3;
  uint64_t v34 = *(void *)(*v4 + 80);
  uint64_t v6 = *(void *)(v34 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)v31 - v8;
  uint64_t v10 = *(void *)v7;
  uint64_t v11 = *(void *)(v7 + 8);
  char v12 = *(unsigned char *)(v7 + 16);
  uint64_t v47 = *(void *)(v7 + 24);
  uint64_t v13 = *(void *)(v7 + 32);
  uint64_t v37 = *(void *)(v7 + 40);
  uint64_t v38 = v13;
  uint64_t v36 = *(void *)(v7 + 48);
  int v35 = *(unsigned __int8 *)(v7 + 56);
  int v15 = (uint64_t *)((char *)v4 + *(void *)(v14 + 112));
  uint64_t v17 = v15[3];
  uint64_t v16 = v15[4];
  __swift_project_boxed_opaque_existential_1(v15, v17);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v17, v16);
  if (!(_BYTE)result)
  {
    uint64_t v39 = v10;
    uint64_t v40 = v11;
    char v41 = v12;
    uint64_t v42 = v47;
    uint64_t v43 = v38;
    uint64_t v44 = v37;
    uint64_t v45 = v36;
    char v46 = v35;
    uint64_t result = sub_25A403498();
  }
  uint64_t v19 = *v4;
  if (*(uint64_t *)((char *)v4 + *(void *)(*v4 + 104)))
  {
    uint64_t v39 = v10;
    uint64_t v40 = v11;
    char v41 = v12;
    uint64_t v42 = v47;
    uint64_t v43 = v38;
    uint64_t v44 = v37;
    uint64_t v45 = v36;
    char v46 = v35;
    uint64_t result = sub_25A403498();
    uint64_t v19 = *v4;
  }
  uint64_t v20 = *(void *)(v19 + 96);
  uint64_t v21 = *(uint64_t *)((char *)v4 + v20);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(uint64_t *)((char *)v4 + v20) = v23;
    uint64_t v24 = (uint64_t)v4 + *(void *)(*v4 + 88);
    swift_beginAccess();
    uint64_t v25 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v24, v34);
    uint64_t v26 = v33;
    v32(v9);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v25);
    uint64_t v27 = *(void *)(*v5 + 96);
    uint64_t v28 = *(uint64_t *)((char *)v5 + v27);
    BOOL v22 = __OFSUB__(v28, 1);
    uint64_t v29 = v28 - 1;
    int v30 = v22;
    if (v26)
    {
      if (!v30)
      {
LABEL_13:
        *(uint64_t *)((char *)v5 + v27) = v29;
        return result;
      }
      __break(1u);
    }
    if (!v30) {
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t ThreadGuard.syncWrite<A>(callsite:_:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 112));
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  if (result <= 1u) {
    uint64_t result = sub_25A403498();
  }
  uint64_t v8 = *v2;
  uint64_t v9 = *(void *)(*v2 + 104);
  if (*(uint64_t *)((char *)v3 + v9))
  {
    uint64_t result = sub_25A403498();
    uint64_t v8 = *v3;
  }
  if (*(uint64_t *)((char *)v3 + *(void *)(v8 + 96))) {
    uint64_t result = sub_25A403498();
  }
  uint64_t v10 = *(uint64_t *)((char *)v3 + v9);
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    *(uint64_t *)((char *)v3 + v9) = v12;
    uint64_t v13 = (uint64_t)v3 + *(void *)(*v3 + 88);
    swift_beginAccess();
    a2(v13);
    uint64_t result = swift_endAccess();
    uint64_t v14 = *(void *)(*v3 + 104);
    uint64_t v15 = *(uint64_t *)((char *)v3 + v14);
    BOOL v11 = __OFSUB__(v15, 1);
    uint64_t v16 = v15 - 1;
    int v17 = v11;
    if (v19)
    {
      if (!v17)
      {
LABEL_15:
        *(uint64_t *)((char *)v3 + v14) = v16;
        return result;
      }
      __break(1u);
    }
    if (!v17) {
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_25A4DF55C@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ThreadGuard.syncRead<A>(callsite:_:)(a1, a2, a3, a4);
}

uint64_t sub_25A4DF580(uint64_t a1, void (*a2)(uint64_t))
{
  return ThreadGuard.syncWrite<A>(callsite:_:)(a1, a2);
}

uint64_t sub_25A4DF5A4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ThreadGuard()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ThreadGuard(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ThreadGuard);
}

uint64_t dispatch thunk of ThreadGuard.__allocating_init(value:tracker:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t IsolatedInvalidatableCache.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  IsolatedInvalidatableCache.init()();
  return v0;
}

uint64_t IsolatedInvalidatableCache.resource(on:for:create:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[31] = a6;
  v7[32] = v6;
  v7[29] = a4;
  v7[30] = a5;
  v7[27] = a2;
  v7[28] = a3;
  v7[26] = a1;
  uint64_t v8 = *(void **)v6;
  uint64_t v9 = *(void *)(*(void *)v6 + 80);
  v7[33] = v9;
  uint64_t v10 = v8[11];
  v7[34] = v10;
  uint64_t v11 = v8[12];
  v7[35] = v11;
  uint64_t v12 = v8[13];
  v7[36] = v12;
  v7[2] = v9;
  v7[3] = v10;
  v7[4] = v11;
  v7[5] = v12;
  uint64_t v13 = type metadata accessor for IsolatedInvalidatableCache.ResourceStatus();
  v7[37] = v13;
  v7[38] = *(void *)(v13 - 8);
  v7[39] = swift_task_alloc();
  v7[40] = *(void *)(v10 - 8);
  v7[41] = swift_task_alloc();
  uint64_t v14 = *(void *)(v9 - 8);
  v7[42] = v14;
  v7[43] = *(void *)(v14 + 64);
  v7[44] = swift_task_alloc();
  uint64_t v15 = sub_25A50FA40();
  v7[45] = v15;
  v7[46] = *(void *)(v15 - 8);
  v7[47] = swift_task_alloc();
  v7[48] = swift_task_alloc();
  v7[49] = swift_task_alloc();
  v7[50] = swift_task_alloc();
  swift_getObjectType();
  uint64_t v17 = sub_25A50F220();
  v7[51] = v17;
  v7[52] = v16;
  return MEMORY[0x270FA2498](sub_25A4DF978, v17, v16);
}

uint64_t sub_25A4DF978()
{
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[38];
  uint64_t v4 = v0[35];
  uint64_t v6 = v0[32];
  uint64_t v5 = v0[33];
  uint64_t v7 = v0[29];
  swift_beginAccess();
  MEMORY[0x26113C9D0](v7, *(void *)(v6 + 16), v5, v2, v4);
  swift_endAccess();
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  v0[53] = v8;
  v0[54] = (v3 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v8(v1, 1, v2) == 1)
  {
    uint64_t v9 = (uint64_t *)v0[49];
    uint64_t v10 = v0[44];
    uint64_t v11 = v0[42];
    uint64_t v13 = v0[37];
    uint64_t v12 = v0[38];
    uint64_t v14 = v0[33];
    uint64_t v15 = v0[29];
    uint64_t v32 = (int *)v0[30];
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v0[55] = v16;
    v0[56] = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v16(v10, v15, v14);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    v0[57] = sub_25A50F260();
    *uint64_t v9 = sub_25A50F120();
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v12 + 56);
    v0[58] = v17;
    v0[59] = (v12 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v17(v9, 0, 1, v13);
    swift_beginAccess();
    v0[60] = sub_25A50E990();
    sub_25A50E9E0();
    swift_endAccess();
    uint64_t v33 = (uint64_t (*)(uint64_t))((char *)v32 + *v32);
    uint64_t v18 = (void *)swift_task_alloc();
    v0[61] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_25A4DFD9C;
    uint64_t v19 = v0[41];
    return v33(v19);
  }
  else
  {
    uint64_t v21 = (uint64_t *)v0[50];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(void, uint64_t *, void))(v0[40] + 32))(v0[26], v21, v0[34]);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      BOOL v22 = (uint64_t (*)(void))v0[1];
      return v22();
    }
    else
    {
      uint64_t v23 = v0[32];
      uint64_t v24 = v0[28];
      uint64_t v25 = v0[29];
      uint64_t v26 = v0[27];
      uint64_t v27 = *v21;
      v0[63] = *v21;
      uint64_t v28 = (void *)swift_task_alloc();
      v0[64] = v28;
      os_log_t v28[2] = v23;
      v28[3] = v25;
      v28[4] = v27;
      uint64_t v29 = (void *)swift_task_alloc();
      v0[65] = v29;
      void *v29 = v0;
      v29[1] = sub_25A4E02CC;
      uint64_t v30 = v0[34];
      uint64_t v31 = v0[26];
      return MEMORY[0x270FA2360](v31, v26, v24, 0xD000000000000018, 0x800000025A5221E0, sub_25A4E1308, v28, v30);
    }
  }
}

uint64_t sub_25A4DFD9C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 496) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 416);
  uint64_t v4 = *(void *)(v2 + 408);
  if (v0) {
    uint64_t v5 = sub_25A4E04A4;
  }
  else {
    uint64_t v5 = sub_25A4DFED8;
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

uint64_t sub_25A4DFED8()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v6 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v7 = *(void *)(v0 + 232);
  swift_beginAccess();
  MEMORY[0x26113C9D0](v7, *(void *)(v6 + 16), v5, v3, v4);
  int v8 = v1(v2, 1, v3);
  uint64_t v9 = *(void *)(v0 + 384);
  uint64_t v11 = *(void *)(v0 + 360);
  uint64_t v10 = *(void *)(v0 + 368);
  if (v8)
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 384), *(void *)(v0 + 360));
    swift_endAccess();
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 304);
    uint64_t v12 = *(void *)(v0 + 312);
    uint64_t v14 = *(void *)(v0 + 296);
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 16))(v12, *(void *)(v0 + 384), v14);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_endAccess();
    uint64_t v34 = sub_25A4E0B4C(v14);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  uint64_t v29 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 464);
  uint64_t v31 = *(void (**)(uint64_t))(v0 + 440);
  uint64_t v15 = *(void *)(v0 + 392);
  uint64_t v16 = *(void *)(v0 + 352);
  uint64_t v18 = *(void *)(v0 + 328);
  uint64_t v17 = *(void *)(v0 + 336);
  uint64_t v19 = *(void *)(v0 + 320);
  uint64_t v20 = *(void *)(v0 + 296);
  uint64_t v33 = *(void *)(v0 + 288);
  uint64_t v21 = *(void *)(v0 + 264);
  uint64_t v32 = *(void *)(v0 + 256);
  uint64_t v30 = *(void *)(v0 + 232);
  long long v35 = *(_OWORD *)(v0 + 272);
  v31(v16);
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v15, v18);
  swift_storeEnumTagMultiPayload();
  v29(v15, 0, 1, v20);
  swift_beginAccess();
  sub_25A50E9E0();
  swift_endAccess();
  ((void (*)(uint64_t, uint64_t, uint64_t))v31)(v16, v30, v21);
  unint64_t v22 = (*(unsigned __int8 *)(v17 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v21;
  *(_OWORD *)(v23 + 24) = v35;
  *(void *)(v23 + 40) = v33;
  *(void *)(v23 + 48) = v32;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))(v23 + v22, v16, v21);
  swift_retain();
  IsolatedInvalidatable.onInvalidation(_:)((uint64_t)sub_25A4E1EF0, v23, v35, v33);
  swift_release();
  if (v34)
  {
    uint64_t v24 = *(void *)(v0 + 328);
    *(void *)(v0 + 200) = v34;
    uint64_t v25 = swift_task_alloc();
    long long v26 = *(_OWORD *)(v0 + 280);
    *(_OWORD *)(v25 + 16) = *(_OWORD *)(v0 + 264);
    *(_OWORD *)(v25 + 32) = v26;
    *(void *)(v25 + 48) = v24;
    sub_25A50F1E0();
    swift_getWitnessTable();
    sub_25A50EFF0();
    swift_task_dealloc();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 320) + 32))(*(void *)(v0 + 208), *(void *)(v0 + 328), *(void *)(v0 + 272));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_25A4E02CC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 528) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 408);
    uint64_t v4 = *(void *)(v2 + 416);
    uint64_t v5 = sub_25A4E0780;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 408);
    uint64_t v4 = *(void *)(v2 + 416);
    uint64_t v5 = sub_25A4E03F0;
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

uint64_t sub_25A4E03F0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A4E04A4()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 264);
  uint64_t v7 = *(void *)(v0 + 232);
  swift_beginAccess();
  MEMORY[0x26113C9D0](v7, *(void *)(v5 + 16), v6, v3, v4);
  int v8 = v1(v2, 1, v3);
  uint64_t v10 = *(void *)(v0 + 368);
  uint64_t v9 = *(void *)(v0 + 376);
  uint64_t v11 = *(void *)(v0 + 360);
  if (v8)
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 376), *(void *)(v0 + 360));
    swift_endAccess();
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 304);
    uint64_t v14 = *(void *)(v0 + 312);
    uint64_t v15 = *(void *)(v0 + 296);
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 16))(v14, *(void *)(v0 + 376), v15);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_endAccess();
    uint64_t v12 = sub_25A4E0B4C(v15);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  }
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 464);
  uint64_t v17 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 296);
  (*(void (**)(void, void, void))(v0 + 440))(*(void *)(v0 + 352), *(void *)(v0 + 232), *(void *)(v0 + 264));
  v16(v17, 1, 1, v18);
  swift_beginAccess();
  sub_25A50E9E0();
  swift_endAccess();
  if (v12)
  {
    uint64_t v19 = *(void *)(v0 + 496);
    *(void *)(v0 + 192) = v12;
    uint64_t v20 = swift_task_alloc();
    long long v21 = *(_OWORD *)(v0 + 280);
    *(_OWORD *)(v20 + 16) = *(_OWORD *)(v0 + 264);
    *(_OWORD *)(v20 + 32) = v21;
    *(void *)(v20 + 48) = v19;
    sub_25A50F1E0();
    swift_getWitnessTable();
    sub_25A50EFF0();
    swift_task_dealloc();
    swift_bridgeObjectRelease();
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_25A4E0780()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t IsolatedInvalidatableCache.snapshot.getter()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  type metadata accessor for IsolatedInvalidatableCache.ResourceStatus();
  uint64_t v0 = sub_25A50E8F0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t IsolatedInvalidatableCache.invalidate(file:line:column:function:trace:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t *a9)
{
  uint64_t v9 = *a9;
  *(void *)&long long v12 = a1;
  *((void *)&v12 + 1) = a2;
  char v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  char v18 = a8;
  uint64_t v11 = v9;
  return sub_25A4E1314(&v12, &v11);
}

uint64_t sub_25A4E09A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 56))(a2, 1, 1);
  }
}

uint64_t sub_25A4E0B4C(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v3);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return *(void *)v3;
  }
  (*(void (**)(char *))(*(void *)(*(void *)(a1 + 24) - 8) + 8))(v3);
  return 0;
}

uint64_t IsolatedInvalidatableCache.init()()
{
  type metadata accessor for IsolatedInvalidatableCache.ResourceStatus();
  *(void *)(v0 + 16) = sub_25A50E850();
  return v0;
}

uint64_t type metadata accessor for IsolatedInvalidatableCache.ResourceStatus()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A4E0CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(*(void *)a2 + 96);
  v14[0] = *(_OWORD *)(*(void *)a2 + 80);
  v14[1] = v4;
  _OWORD v14[2] = v14[0];
  v14[3] = v4;
  uint64_t v5 = type metadata accessor for IsolatedInvalidatableCache.ResourceStatus();
  uint64_t v6 = sub_25A50FA40();
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)v14 - v8;
  uint64_t v10 = *(void *)&v14[0];
  MEMORY[0x270FA5388](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v14 - v11, a3, v10);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v9, 1, 1, v5);
  swift_beginAccess();
  sub_25A50E990();
  sub_25A50E9E0();
  return swift_endAccess();
}

uint64_t sub_25A4E0EA0(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A50F260();
  return sub_25A50F250();
}

uint64_t sub_25A4E0F90(int a1, id a2)
{
  id v2 = a2;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A50F260();
  return sub_25A50F240();
}

uint64_t sub_25A4E1004(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v7 = *(void *)(*a2 + 88);
  uint64_t v21 = *(void *)(*a2 + 80);
  uint64_t v6 = v21;
  uint64_t v22 = v7;
  long long v20 = *(_OWORD *)(v5 + 96);
  long long v23 = v20;
  uint64_t v8 = type metadata accessor for IsolatedInvalidatableCache.ResourceStatus();
  uint64_t v9 = sub_25A50FA40();
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v20 - v11);
  MEMORY[0x270FA5388](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v20 - v13, a3, v6);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v15 = sub_25A50F260();
  sub_25A5102C0();
  uint64_t v16 = *(void *)(v15 - 8);
  swift_allocObject();
  sub_25A50F0C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v17, a1, v15);
  sub_25A3DFCA4();
  uint64_t v18 = sub_25A50F100();
  swift_bridgeObjectRelease();
  *uint64_t v12 = v18;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v12, 0, 1, v8);
  swift_beginAccess();
  sub_25A50E990();
  sub_25A50E9E0();
  return swift_endAccess();
}

uint64_t sub_25A4E1308(uint64_t a1)
{
  return sub_25A4E1004(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_25A4E1314(long long *a1, uint64_t *a2)
{
  uint64_t v5 = (void *)*v2;
  uint64_t v49 = *(void *)(*v2 + 88);
  uint64_t v37 = sub_25A50FA40();
  uint64_t v48 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v7 = (char *)v35 - v6;
  uint64_t v8 = v5[10];
  uint64_t v9 = v5[12];
  uint64_t v50 = v5[13];
  *(void *)&long long v52 = v8;
  *((void *)&v52 + 1) = v49;
  *(void *)&long long v53 = v9;
  *((void *)&v53 + 1) = v50;
  uint64_t v10 = type metadata accessor for IsolatedInvalidatableCache.ResourceStatus();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  char v46 = (char *)v35 - v15;
  long long v16 = a1[1];
  long long v52 = *a1;
  long long v53 = v16;
  v54[0] = a1[2];
  *(_OWORD *)((char *)v54 + 9) = *(long long *)((char *)a1 + 41);
  uint64_t v36 = *a2;
  swift_beginAccess();
  uint64_t v17 = j_nullsub_1(v2[2]);
  swift_beginAccess();
  uint64_t v39 = v8;
  uint64_t v38 = v9;
  sub_25A50E990();
  swift_bridgeObjectRetain();
  sub_25A50E980();
  swift_endAccess();
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v40 = v17 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(v17 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v41 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v45 = v11 + 16;
  uint64_t v44 = v11 + 32;
  uint64_t v43 = v49 - 8;
  v35[1] = v50 + 16;
  v35[0] = v48 + 8;
  uint64_t v47 = v11;
  uint64_t v42 = (uint64_t (**)(char *, uint64_t))(v11 + 8);
  uint64_t v48 = v17;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0;
  while (1)
  {
    if (v21)
    {
      unint64_t v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      uint64_t v26 = v49;
      goto LABEL_18;
    }
    BOOL v27 = __OFADD__(v23++, 1);
    uint64_t v26 = v49;
    if (v27)
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v23 >= v41) {
      goto LABEL_27;
    }
    unint64_t v28 = *(void *)(v40 + 8 * v23);
    if (!v28) {
      break;
    }
LABEL_17:
    unint64_t v21 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v23 << 6);
LABEL_18:
    uint64_t v30 = v47;
    uint64_t v31 = v46;
    (*(void (**)(char *, unint64_t, uint64_t))(v47 + 16))(v46, *(void *)(v48 + 56) + *(void *)(v47 + 72) * v25, v10);
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v14, v31, v10);
    sub_25A4E09A4(v10, (uint64_t)v7);
    uint64_t v32 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v7, 1, v26) == 1)
    {
      (*(void (**)(char *, uint64_t))v35[0])(v7, v37);
    }
    else
    {
      (*(void (**)(uint64_t))(v50 + 16))(v26);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v26);
      sub_25A483F28((uint64_t)&v52, v36);
      swift_release();
    }
    uint64_t v33 = sub_25A4E0B4C(v10);
    if (v33)
    {
      uint64_t v51 = v33;
      MEMORY[0x270FA5388](v33);
      v35[-4] = v39;
      v35[-3] = v26;
      uint64_t v34 = v50;
      v35[-2] = v38;
      v35[-1] = v34;
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
      sub_25A50F260();
      sub_25A50F1E0();
      swift_getWitnessTable();
      sub_25A50EFF0();
      swift_bridgeObjectRelease();
    }
    uint64_t result = (*v42)(v14, v10);
  }
  int64_t v29 = v23 + 1;
  if (v23 + 1 >= v41) {
    goto LABEL_27;
  }
  unint64_t v28 = *(void *)(v40 + 8 * v29);
  if (v28) {
    goto LABEL_16;
  }
  int64_t v29 = v23 + 2;
  if (v23 + 2 >= v41) {
    goto LABEL_27;
  }
  unint64_t v28 = *(void *)(v40 + 8 * v29);
  if (v28) {
    goto LABEL_16;
  }
  int64_t v29 = v23 + 3;
  if (v23 + 3 >= v41)
  {
LABEL_27:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  unint64_t v28 = *(void *)(v40 + 8 * v29);
  if (v28)
  {
LABEL_16:
    int64_t v23 = v29;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v23 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v23 >= v41) {
      goto LABEL_27;
    }
    unint64_t v28 = *(void *)(v40 + 8 * v23);
    ++v29;
    if (v28) {
      goto LABEL_17;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_25A4E1998()
{
  return sub_25A50F240();
}

uint64_t IsolatedInvalidatableCache.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t IsolatedInvalidatableCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t IsolatedOnDemand.init(create:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  type metadata accessor for IsolatedInvalidatableCache();
  uint64_t v6 = swift_allocObject();
  uint64_t result = IsolatedInvalidatableCache.init()();
  *a3 = v6;
  a3[1] = a1;
  a3[2] = a2;
  return result;
}

uint64_t IsolatedOnDemand.resource(on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a2;
  v4[4] = a3;
  uint64_t v8 = *(void *)(v3 + 8);
  uint64_t v9 = *(void *)(v3 + 16);
  _OWORD v4[2] = 0;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[5] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_25A4E1BF4;
  return IsolatedInvalidatableCache.resource(on:for:create:)(a1, a2, a3, (uint64_t)(v4 + 2), v8, v9);
}

uint64_t sub_25A4E1BF4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_getObjectType();
    uint64_t v4 = sub_25A50F220();
    return MEMORY[0x270FA2498](sub_25A492C24, v4, v3);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(void))(v2 + 8);
    return v5();
  }
}

uint64_t IsolatedOnDemand.invalidate(file:line:column:function:trace:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t *a9)
{
  uint64_t v9 = *a9;
  *(void *)&long long v12 = a1;
  *((void *)&v12 + 1) = a2;
  char v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  char v18 = a8;
  uint64_t v11 = v9;
  return sub_25A4E1314(&v12, &v11);
}

uint64_t IsolatedOnDemand.invalidate(callsite:trace:)(uint64_t a1, uint64_t *a2)
{
  char v2 = *(unsigned char *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 56);
  uint64_t v4 = *a2;
  long long v7 = *(_OWORD *)a1;
  char v8 = v2;
  long long v9 = *(_OWORD *)(a1 + 24);
  long long v10 = *(_OWORD *)(a1 + 40);
  char v11 = v3;
  uint64_t v6 = v4;
  return sub_25A4E1314(&v7, &v6);
}

uint64_t sub_25A4E1E08(int a1)
{
  return sub_25A4E0F90(a1, *(id *)(v1 + 48));
}

uint64_t sub_25A4E1E2C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A4E1EF0(uint64_t a1)
{
  return sub_25A4E0CD8(a1, *(void *)(v1 + 48), v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)));
}

uint64_t sub_25A4E1F30(uint64_t a1)
{
  return sub_25A4E0EA0(a1);
}

uint64_t sub_25A4E1F54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for IsolatedInvalidatableCache.ResourceStatus();
  return sub_25A4E09A4(v2, a1);
}

uint64_t type metadata accessor for IsolatedInvalidatableCache()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A4E1FC8()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for IsolatedInvalidatableCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IsolatedInvalidatableCache);
}

uint64_t dispatch thunk of IsolatedInvalidatableCache.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t type metadata accessor for IsolatedOnDemand()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4E2054()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_25A4E20F0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1)
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 1;
    }
    else
    {
      *a1 = *(void *)a2;
      *((unsigned char *)a1 + v5) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v3;
}

uint64_t sub_25A4E226C(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

void *sub_25A4E236C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 24) - 8) + 16))(a1);
    char v10 = 1;
  }
  else
  {
    *a1 = *(void *)a2;
    swift_bridgeObjectRetain();
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_25A4E24A8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      a1[v7] = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

void *sub_25A4E26C4(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 24) - 8) + 32))(a1);
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_25A4E27FC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_25A4E2A14(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void sub_25A4E2B48(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x25A4E2D10);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25A4E2D38(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v3 = 8;
  if (*(void *)(v2 + 64) > 8uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void sub_25A4E2DF0(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 8uLL) {
    size_t v4 = 8;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_25A4E2EC8()
{
  return sub_25A4E1998();
}

uint64_t sub_25A4E2EE8(void (*a1)(long long *__return_ptr, long long *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v43 = MEMORY[0x263F8EE78];
    sub_25A39A1B8(0, v5, 0);
    uint64_t v6 = v43;
    unsigned int v8 = (long long *)(a3 + 56);
    while (1)
    {
      uint64_t v9 = *((void *)v8 - 1);
      char v10 = *((unsigned char *)v8 + 16);
      uint64_t v11 = *((void *)v8 + 3);
      char v12 = *((unsigned char *)v8 + 48);
      long long v29 = *(long long *)((char *)v8 - 24);
      uint64_t v30 = v9;
      long long v31 = *v8;
      char v32 = v10;
      uint64_t v33 = v11;
      long long v34 = v8[2];
      char v35 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a1(&v36, &v29);
      if (v4) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v13 = v36;
      long long v14 = v37;
      uint64_t v15 = v38;
      char v16 = v39;
      long long v17 = v40;
      uint64_t v18 = v41;
      char v19 = v42;
      uint64_t v43 = v6;
      unint64_t v21 = *(void *)(v6 + 16);
      unint64_t v20 = *(void *)(v6 + 24);
      if (v21 >= v20 >> 1)
      {
        long long v26 = v37;
        long long v27 = v36;
        long long v25 = v40;
        char v23 = v42;
        sub_25A39A1B8(v20 > 1, v21 + 1, 1);
        char v19 = v23;
        long long v17 = v25;
        long long v14 = v26;
        long long v13 = v27;
        uint64_t v6 = v43;
      }
      v8 += 5;
      *(void *)(v6 + 16) = v21 + 1;
      uint64_t v22 = v6 + 80 * v21;
      *(_OWORD *)(v22 + 32) = v13;
      *(_OWORD *)(v22 + 48) = v14;
      *(void *)(v22 + 64) = v15;
      *(unsigned char *)(v22 + 72) = v16;
      *(_OWORD *)(v22 + 80) = v17;
      *(void *)(v22 + 96) = v18;
      *(unsigned char *)(v22 + 104) = v19;
      --v5;
      uint64_t v4 = 0;
      if (!v5) {
        return v6;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_25A4E30A8(void (*a1)(void *__return_ptr, void *))
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_25A50ED50();
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (!v3) {
    return v4;
  }
  uint64_t v5 = v3;
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t result = sub_25A39A248(0, v3 & ~(v3 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = v16;
    while (1)
    {
      v14[0] = sub_25A50EEB0();
      v14[1] = v7;
      a1(v15, v14);
      if (v2) {
        break;
      }
      uint64_t v2 = 0;
      swift_bridgeObjectRelease();
      uint64_t v9 = v15[0];
      uint64_t v8 = v15[1];
      uint64_t v16 = v4;
      unint64_t v11 = *(void *)(v4 + 16);
      unint64_t v10 = *(void *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_25A39A248(v10 > 1, v11 + 1, 1);
        uint64_t v4 = v16;
      }
      *(void *)(v4 + 16) = v11 + 1;
      uint64_t v12 = v4 + 16 * v11;
      *(void *)(v12 + 32) = v9;
      *(void *)(v12 + 40) = v8;
      sub_25A50ED60();
      if (!--v5) {
        return v4;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return v4;
  }
  __break(1u);
  return result;
}

Swift::String __swiftcall String.prefixingEachLine(with:startingOnLine:)(Swift::String with, Swift::UInt startingOnLine)
{
  uint64_t countAndFlagsBits = with._countAndFlagsBits;
  object = with._object;
  sub_25A39BE4C();
  uint64_t v3 = sub_25A50FB20();
  uint64_t v20 = MEMORY[0x263F8EE78];
  sub_25A39A068(0, 0, 0);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    Swift::UInt v5 = 0;
    uint64_t v6 = (void **)(v3 + 40);
    do
    {
      uint64_t v8 = (uint64_t)*(v6 - 1);
      uint64_t v7 = *v6;
      swift_bridgeObjectRetain();
      if (v5 >= startingOnLine)
      {
        swift_bridgeObjectRetain();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
        uint64_t v8 = countAndFlagsBits;
        uint64_t v7 = object;
      }
      unint64_t v10 = *(void *)(v20 + 16);
      unint64_t v9 = *(void *)(v20 + 24);
      if (v10 >= v9 >> 1) {
        sub_25A39A068(v9 > 1, v10 + 1, 1);
      }
      v6 += 2;
      ++v5;
      *(void *)(v20 + 16) = v10 + 1;
      uint64_t v11 = v20 + 16 * v10;
      *(void *)(v11 + 32) = v8;
      *(void *)(v11 + 40) = v7;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3BE718(qword_26A415DC8, &qword_26A415DC0);
  uint64_t v12 = sub_25A50EAD0();
  long long v14 = v13;
  swift_release();
  uint64_t v15 = v12;
  uint64_t v16 = v14;
  result._object = v16;
  result._uint64_t countAndFlagsBits = v15;
  return result;
}

void *sub_25A4E33F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v2 = (unsigned __int8 *)(swift_bridgeObjectRetain() + 56);
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  do
  {
    int v5 = *v2;
    if (v5 != 255)
    {
      uint64_t v6 = (void *)*((void *)v2 - 3);
      uint64_t v7 = *((void *)v2 - 2);
      uint64_t v8 = *((void *)v2 - 1);
      sub_25A3F4E98(v6, v7, v8, v5 & 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_25A38BA8C(0, v3[2] + 1, 1, v3);
      }
      unint64_t v10 = v3[2];
      unint64_t v9 = v3[3];
      if (v10 >= v9 >> 1) {
        uint64_t v3 = sub_25A38BA8C((void *)(v9 > 1), v10 + 1, 1, v3);
      }
      void v3[2] = v10 + 1;
      uint64_t v4 = &v3[4 * v10];
      v4[4] = v6;
      v4[5] = v7;
      v4[6] = v8;
      *((unsigned char *)v4 + 56) = v5 & 1;
    }
    v2 += 32;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

void *sub_25A4E3514(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v2 = (unsigned __int8 *)(swift_bridgeObjectRetain() + 48);
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  do
  {
    int v5 = *v2;
    if (v5 != 255)
    {
      uint64_t v6 = (void *)*((void *)v2 - 2);
      uint64_t v7 = *((void *)v2 - 1);
      sub_25A3F5150(v6, v7, v5 & 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_25A38BE14(0, v3[2] + 1, 1, v3);
      }
      unint64_t v9 = v3[2];
      unint64_t v8 = v3[3];
      if (v9 >= v8 >> 1) {
        uint64_t v3 = sub_25A38BE14((void *)(v8 > 1), v9 + 1, 1, v3);
      }
      void v3[2] = v9 + 1;
      uint64_t v4 = &v3[3 * v9];
      v4[4] = v6;
      v4[5] = v7;
      *((unsigned char *)v4 + 48) = v5 & 1;
    }
    v2 += 24;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

void *sub_25A4E3628(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v5 = *v2;
    if (*v2)
    {
      uint64_t v6 = *(v2 - 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_25A38A5A4(0, v3[2] + 1, 1, v3);
      }
      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1) {
        uint64_t v3 = sub_25A38A5A4((void *)(v7 > 1), v8 + 1, 1, v3);
      }
      void v3[2] = v8 + 1;
      uint64_t v4 = &v3[2 * v8];
      v4[4] = v6;
      v4[5] = v5;
    }
    v2 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_25A4E371C(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    sub_25A4E7990(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = sub_25A50FDA0();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        sub_25A50FE60();
      }
      unsigned int v5 = sub_25A50FE70();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

Swift::String __swiftcall String.uppercasingFirstLetter()()
{
  unint64_t v2 = sub_25A4E45F8(v0, v1, MEMORY[0x263F8D278]);
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t String.uv_sha256.getter()
{
  _OWORD v24[2] = *MEMORY[0x263EF8340];
  uint64_t v0 = sub_25A50E840();
  uint64_t v21 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  unint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_25A50E830();
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v20 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25A50EC80();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A50EC60();
  uint64_t v9 = sub_25A50EC30();
  unint64_t v11 = v10;
  uint64_t v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, v5);
  if (v11 >> 60 == 15)
  {
    sub_25A50EC70();
    uint64_t v13 = sub_25A50EC30();
    unint64_t v15 = v14;
    v12(v8, v5);
    if (v15 >> 60 == 15) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v13;
    }
    if (v15 >> 60 == 15) {
      unint64_t v11 = 0xC000000000000000;
    }
    else {
      unint64_t v11 = v15;
    }
  }
  sub_25A4E7E64();
  sub_25A50E810();
  switch(v11 >> 62)
  {
    case 1uLL:
      if (v9 >> 32 < (int)v9) {
        __break(1u);
      }
      sub_25A39375C(v9, v11);
      sub_25A4E7EBC((int)v9, v9 >> 32);
      goto LABEL_13;
    case 2uLL:
      uint64_t v16 = *(void *)(v9 + 16);
      uint64_t v17 = *(void *)(v9 + 24);
      sub_25A39375C(v9, v11);
      swift_retain();
      swift_retain();
      sub_25A4E7EBC(v16, v17);
      swift_release();
      swift_release();
LABEL_13:
      sub_25A3B9048(v9, v11);
      goto LABEL_16;
    case 3uLL:
      memset(v24, 0, 14);
      goto LABEL_15;
    default:
      v24[0] = v9;
      LOWORD(v24[1]) = v11;
      BYTE2(v24[1]) = BYTE2(v11);
      BYTE3(v24[1]) = BYTE3(v11);
      BYTE4(v24[1]) = BYTE4(v11);
      BYTE5(v24[1]) = BYTE5(v11);
LABEL_15:
      sub_25A50E7F0();
      sub_25A3B9048(v9, v11);
LABEL_16:
      uint64_t v18 = v20;
      sub_25A50E800();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v2, v0);
      sub_25A50E820();
      sub_25A3B9048(v9, v11);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v23);
      return v24[0];
  }
}

Swift::String __swiftcall String.deleting(prefix:)(Swift::String prefix)
{
  object = prefix._object;
  uint64_t countAndFlagsBits = prefix._countAndFlagsBits;
  unint64_t v3 = sub_25A50EEE0();
  uint64_t v5 = Substring.uv_deletingLeading(prefix:)(countAndFlagsBits, (uint64_t)object, v3, v4);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = MEMORY[0x26113CCD0](v5, v7, v9, v11);
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = v12;
  uint64_t v16 = v14;
  result._object = v16;
  result._uint64_t countAndFlagsBits = v15;
  return result;
}

uint64_t String.init(spaced:)(uint64_t a1)
{
  sub_25A4E3628(a1);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3BE718(qword_26A415DC8, &qword_26A415DC0);
  uint64_t v1 = sub_25A50EAD0();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t String.contains(anyCharactersFrom:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3)
  {
    char v12 = 0;
    return v12 & 1;
  }
  uint64_t v6 = a3 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i < v3; i += v11)
  {
    if ((a3 & 0x1000000000000000) != 0)
    {
      sub_25A50FDA0();
      uint64_t v11 = v10;
    }
    else
    {
      if ((a3 & 0x2000000000000000) == 0)
      {
        uint64_t v9 = v7;
        if ((a2 & 0x1000000000000000) == 0) {
          uint64_t v9 = sub_25A50FE60();
        }
        if (*(char *)(v9 + i) < 0)
        {
          switch(__clz(*(unsigned __int8 *)(v9 + i) ^ 0xFF))
          {
            case 0x1Au:
              goto LABEL_19;
            case 0x1Bu:
              goto LABEL_20;
            case 0x1Cu:
              goto LABEL_21;
            default:
              break;
          }
        }
LABEL_14:
        uint64_t v11 = 1;
        goto LABEL_15;
      }
      v14[0] = a2;
      v14[1] = v6;
      if ((*((char *)v14 + i) & 0x80000000) == 0) {
        goto LABEL_14;
      }
      switch(__clz(*((unsigned __int8 *)v14 + i) ^ 0xFF))
      {
        case 0x1Au:
LABEL_19:
          uint64_t v11 = 2;
          break;
        case 0x1Bu:
LABEL_20:
          uint64_t v11 = 3;
          break;
        case 0x1Cu:
LABEL_21:
          uint64_t v11 = 4;
          break;
        default:
          goto LABEL_14;
      }
    }
LABEL_15:
    char v12 = sub_25A50E0A0();
    if (v12) {
      break;
    }
  }
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t String.filteringCharacters(to:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    uint64_t v19 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v20 = a3 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n();
    uint64_t v6 = 0;
    while (1)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        unsigned int v9 = sub_25A50FDA0();
        uint64_t v12 = v11;
      }
      else
      {
        if ((a3 & 0x2000000000000000) != 0)
        {
          v21[0] = a2;
          v21[1] = v20;
          unsigned int v9 = *((unsigned __int8 *)v21 + v6);
          if (*((char *)v21 + v6) < 0)
          {
            switch(__clz(v9 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v10 = (char *)v21 + v6;
LABEL_25:
                unsigned int v9 = v10[1] & 0x3F | ((v9 & 0x1F) << 6);
                uint64_t v12 = 2;
                break;
              case 0x1Bu:
                unint64_t v14 = (char *)v21 + v6;
LABEL_29:
                unsigned int v9 = ((v9 & 0xF) << 12) | ((v14[1] & 0x3F) << 6) | v14[2] & 0x3F;
                uint64_t v12 = 3;
                break;
              case 0x1Cu:
                uint64_t v15 = (char *)v21 + v6;
LABEL_31:
                unsigned int v9 = ((v9 & 0xF) << 18) | ((v15[1] & 0x3F) << 12) | ((v15[2] & 0x3F) << 6) | v15[3] & 0x3F;
                uint64_t v12 = 4;
                break;
              default:
                goto LABEL_18;
            }
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v8 = v19;
          if ((a2 & 0x1000000000000000) == 0) {
            uint64_t v8 = sub_25A50FE60();
          }
          unsigned int v9 = *(unsigned __int8 *)(v8 + v6);
          if (*(char *)(v8 + v6) < 0)
          {
            switch(__clz(v9 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v10 = (char *)(v6 + v8);
                goto LABEL_25;
              case 0x1Bu:
                unint64_t v14 = (char *)(v6 + v8);
                goto LABEL_29;
              case 0x1Cu:
                uint64_t v15 = (char *)(v6 + v8);
                goto LABEL_31;
              default:
                break;
            }
          }
        }
LABEL_18:
        uint64_t v12 = 1;
      }
LABEL_19:
      if (sub_25A50E0A0())
      {
        if (v9 <= 0x7F)
        {
          unsigned int v7 = v9 + 1;
        }
        else
        {
          int v13 = (v9 & 0x3F) << 8;
          if (v9 >= 0x800)
          {
            int v16 = (v13 | (v9 >> 6) & 0x3F) << 8;
            int v17 = (((v16 | (v9 >> 12) & 0x3F) << 8) | (v9 >> 18)) - 2122219023;
            unsigned int v7 = (v16 | (v9 >> 12)) + 8487393;
            if (HIWORD(v9)) {
              unsigned int v7 = v17;
            }
          }
          else
          {
            unsigned int v7 = (v13 | (v9 >> 6)) + 33217;
          }
        }
        v21[0] = (v7 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v7) >> 3))));
        MEMORY[0x26113CD20](v21);
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
      }
      v6 += v12;
      if (v6 >= v4)
      {
        swift_bridgeObjectRelease_n();
        return v22;
      }
    }
  }
  return 0;
}

uint64_t String.replacingCharacters(in:with:)()
{
  sub_25A4E30A8((void (*)(void *__return_ptr, void *))sub_25A4E7F6C);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B688);
  sub_25A3BE718(&qword_26A41B690, &qword_26A41B688);
  return sub_25A50EEC0();
}

uint64_t sub_25A4E43F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  _OWORD v11[2] = a2;
  swift_bridgeObjectRetain();
  char v8 = sub_25A4E449C((uint64_t (*)(void *))sub_25A4E868C, (uint64_t)v11, v6, v7);
  swift_bridgeObjectRelease();
  if (v8) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = v6;
  }
  uint64_t result = swift_bridgeObjectRetain();
  *a4 = v9;
  a4[1] = result;
  return result;
}

uint64_t sub_25A4E449C(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  v17[3] = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v16 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = sub_25A50FDA0();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v17[0] = a3;
          v17[1] = v16;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          sub_25A50FE60();
        }
        int v10 = sub_25A50FE70();
      }
      uint64_t v12 = v11;
      LODWORD(v17[0]) = v10;
      char v13 = a1(v17);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return v14 & 1;
      }
      if (v13) {
        break;
      }
      v9 += v12;
      if (v9 >= v5)
      {
        swift_bridgeObjectRelease();
        char v14 = 0;
        return v14 & 1;
      }
    }
    swift_bridgeObjectRelease();
    char v14 = 1;
  }
  else
  {
    char v14 = 0;
  }
  return v14 & 1;
}

Swift::String __swiftcall String.lowercasingFirstLetter()()
{
  unint64_t v2 = sub_25A4E45F8(v0, v1, MEMORY[0x263F8D268]);
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

unint64_t sub_25A4E45F8(unint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t))
{
  v18[2] = a1;
  v18[3] = a2;
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t result = sub_25A4E371C(a1, a2);
  if ((result & 0x100000000) == 0)
  {
    unsigned int v8 = result;
    unint64_t result = sub_25A4E7D84(1uLL);
    if ((v8 & 0xFFFFFF80) != 0)
    {
      int v14 = (v8 & 0x3F) << 8;
      unsigned int v9 = (v14 | (v8 >> 6)) + 33217;
      int v15 = (v14 | (v8 >> 6) & 0x3F) << 8;
      int v16 = (((v15 | (v8 >> 12) & 0x3F) << 8) | (v8 >> 18)) - 2122219023;
      int v17 = (v15 | (v8 >> 12)) + 8487393;
      if (HIWORD(v8)) {
        int v17 = v16;
      }
      if (v8 >= 0x800) {
        unsigned int v9 = v17;
      }
      goto LABEL_8;
    }
    if (v8 <= 0xFF)
    {
      unsigned int v9 = (v8 + 1);
LABEL_8:
      v18[0] = (v9 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v9) >> 3)) & 7)));
      uint64_t v10 = MEMORY[0x26113CD20](v18);
      uint64_t v11 = a3(v10);
      uint64_t v13 = v12;
      swift_bridgeObjectRelease();
      v18[0] = v11;
      v18[1] = v13;
      swift_bridgeObjectRetain();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18[0];
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL String.firstCharacterIsUppercase.getter(uint64_t a1, unint64_t a2)
{
  return sub_25A4E47C8(a1, a2, MEMORY[0x263F06260]);
}

BOOL String.firstCharacterIsLowercase.getter(uint64_t a1, unint64_t a2)
{
  return sub_25A4E47C8(a1, a2, MEMORY[0x263F06258]);
}

BOOL sub_25A4E47C8(uint64_t a1, unint64_t a2, void (*a3)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = sub_25A50E0C0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unsigned int v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10) {
    return 0;
  }
  uint64_t v11 = sub_25A50ED60();
  v21[0] = sub_25A50EEE0();
  v21[1] = v12;
  void v21[2] = v13;
  v21[3] = v14;
  a3(v21[0], v12, v13, v14);
  sub_25A49EC84();
  unint64_t v15 = sub_25A50FB40();
  uint64_t v17 = v16;
  char v19 = v18;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  BOOL result = 0;
  if ((v19 & 1) == 0 && !(v15 >> 14)) {
    return (v17 ^ (unint64_t)v11) < 0x4000;
  }
  return result;
}

Swift::String __swiftcall String.strippingTrailingNewlines()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B698);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = sub_25A50EEE0();
  char v9 = sub_25A4E7504(10, 0xE100000000000000, v7, v8);
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v10 = sub_25A50E4F0();
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    while (1)
    {
      _OWORD v24[2] = v3;
      void v24[3] = v2;
      v24[0] = 10;
      v24[1] = 0xE100000000000000;
      v11(v6, 1, 1, v10);
      sub_25A39BE4C();
      sub_25A50FB70();
      char v13 = v12;
      sub_25A4E7F90((uint64_t)v6);
      uint64_t v14 = swift_bridgeObjectRelease();
      if (v13) {
        break;
      }
      unint64_t v16 = sub_25A50EEE0();
      char v18 = sub_25A4E7504(10, 0xE100000000000000, v16, v17);
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    uint64_t v19 = sub_25A50EEE0();
    uint64_t v20 = MEMORY[0x26113CCD0](v19);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v14 = v20;
    unint64_t v15 = v22;
  }
  result._object = v15;
  result._uint64_t countAndFlagsBits = v14;
  return result;
}

Swift::String __swiftcall String.describingDifference(from:)(Swift::String from)
{
  unint64_t v3 = (unint64_t)v2;
  uint64_t v4 = v1;
  object = from._object;
  uint64_t countAndFlagsBits = from._countAndFlagsBits;
  unint64_t v7 = 0x66666964206F4ELL;
  if (v1 == from._countAndFlagsBits && v2 == from._object || (uint64_t v8 = sub_25A510370(), (v8 & 1) != 0))
  {
    char v9 = (void *)0xE700000000000000;
LABEL_5:
    uint64_t v10 = v7;
  }
  else
  {
    unint64_t v39 = 10;
    unint64_t v40 = 0xE100000000000000;
    MEMORY[0x270FA5388](v8);
    long long v31 = &v39;
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_25A397498(0x7FFFFFFFFFFFFFFFLL, 1, sub_25A3E18D4, (uint64_t)v30, v4, v3);
    unint64_t v39 = 10;
    unint64_t v40 = 0xE100000000000000;
    MEMORY[0x270FA5388](v11);
    long long v31 = &v39;
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_25A397498(0x7FFFFFFFFFFFFFFFLL, 1, sub_25A4E8788, (uint64_t)v30, countAndFlagsBits, (unint64_t)object);
    unint64_t v36 = *(void *)(v11 + 16);
    uint64_t v13 = *(void *)(v12 + 16);
    uint64_t v33 = v11;
    uint64_t v34 = v13;
    uint64_t v32 = v11 + 32;
    swift_bridgeObjectRetain();
    uint64_t v10 = swift_bridgeObjectRetain();
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v35 = v12;
    for (uint64_t i = (uint64_t *)(v12 + 56); ; i += 4)
    {
      if (v15 == v36)
      {
        if (v34 == v14) {
          goto LABEL_30;
        }
        unint64_t v17 = 0;
        unint64_t v18 = 0;
        unint64_t v37 = 0;
        unint64_t v19 = 0;
        unint64_t v15 = v36;
      }
      else
      {
        if (v15 >= *(void *)(v33 + 16)) {
          goto LABEL_32;
        }
        uint64_t v20 = (unint64_t *)(v32 + 32 * v15);
        unint64_t v18 = v20[2];
        unint64_t v17 = v20[3];
        unint64_t v19 = *v20;
        unint64_t v37 = v20[1];
        uint64_t v10 = swift_bridgeObjectRetain();
        if (v34 == v14)
        {
          if (v17) {
            goto LABEL_28;
          }
LABEL_30:
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          unint64_t v7 = 0xD000000000000058;
          char v9 = (void *)0x800000025A522200;
          goto LABEL_5;
        }
        ++v15;
      }
      if (v14 >= *(void *)(v35 + 16)) {
        break;
      }
      uint64_t v22 = *(i - 1);
      uint64_t v21 = *i;
      unint64_t v23 = *(i - 3);
      unint64_t v24 = *(i - 2);
      swift_bridgeObjectRetain();
      if (!v17)
      {
        if (v21)
        {
LABEL_28:
          swift_bridgeObjectRelease();
          uint64_t v25 = v35;
          swift_bridgeObjectRelease();
          uint64_t v26 = v33;
          swift_bridgeObjectRelease();
          unint64_t v39 = 0;
          unint64_t v40 = 0xE000000000000000;
          sub_25A50FDB0();
          sub_25A50EDA0();
          unint64_t v27 = *(void *)(v26 + 16);
          swift_bridgeObjectRelease();
          unint64_t v38 = v27;
          sub_25A5102B0();
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
          sub_25A50EDA0();
          unint64_t v28 = *(void *)(v25 + 16);
          swift_bridgeObjectRelease();
          unint64_t v38 = v28;
          sub_25A5102B0();
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
          goto LABEL_29;
        }
        goto LABEL_30;
      }
      if (!v21) {
        goto LABEL_28;
      }
      if (v18 != v22 || v17 != v21 || v19 >> 16 != v23 >> 16 || v37 >> 16 != v24 >> 16)
      {
        LOBYTE(v31) = 0;
        if ((sub_25A510260() & 1) == 0)
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          unint64_t v39 = 0;
          unint64_t v40 = 0xE000000000000000;
          sub_25A50FDB0();
          swift_bridgeObjectRelease();
          unint64_t v39 = 0xD00000000000001CLL;
          unint64_t v40 = 0x800000025A5222B0;
          unint64_t v38 = v14;
          sub_25A5102B0();
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
          sub_25A50EDA0();
          MEMORY[0x26113CCD0](v23, v24, v22, v21);
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_25A50EDA0();
          MEMORY[0x26113CCD0](v19, v37, v18, v17);
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_29:
          sub_25A50EDA0();
          unint64_t v7 = v39;
          char v9 = (void *)v40;
          goto LABEL_5;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v10 = swift_bridgeObjectRelease();
      ++v14;
    }
    __break(1u);
LABEL_32:
    __break(1u);
  }
  result._object = v9;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

Swift::String __swiftcall String.indentingEachLine(startingOnLine:)(Swift::UInt startingOnLine)
{
  v2._uint64_t countAndFlagsBits = 2105376;
  v2._object = (void *)0xE300000000000000;
  Swift::String v5 = String.prefixingEachLine(with:startingOnLine:)(v2, startingOnLine);
  object = v5._object;
  uint64_t countAndFlagsBits = v5._countAndFlagsBits;
  result._object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

Swift::String __swiftcall String.uv_deletingTrailing(suffix:)(Swift::String suffix)
{
  object = suffix._object;
  uint64_t countAndFlagsBits = suffix._countAndFlagsBits;
  unint64_t v3 = sub_25A50EEE0();
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v10 = sub_25A4E7504(countAndFlagsBits, (unint64_t)object, v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t v11 = sub_25A50EE30();
  uint64_t v12 = -(uint64_t)v11;
  if (__OFSUB__(0, v11))
  {
    __break(1u);
    goto LABEL_7;
  }
  unint64_t v11 = sub_25A50FAC0();
  if (v11 >> 14 < v3 >> 14)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v3 = sub_25A50FAE0();
  unint64_t v5 = v13;
  uint64_t v7 = v14;
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v9 = v16;
LABEL_5:
  uint64_t v17 = MEMORY[0x26113CCD0](v3, v5, v7, v9);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  unint64_t v11 = v17;
  uint64_t v12 = v19;
LABEL_8:
  result._object = (void *)v12;
  result._uint64_t countAndFlagsBits = v11;
  return result;
}

unint64_t Substring.uv_deletingTrailing(suffix:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v8 = sub_25A4E7504(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    return a3;
  }
  unint64_t result = sub_25A50EE30();
  if (__OFSUB__(0, result))
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_25A50FAC0();
    if (result >> 14 >= a3 >> 14) {
      return sub_25A50FAE0();
    }
  }
  __break(1u);
  return result;
}

uint64_t Substring.uv_deletingLeading(prefix:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (sub_25A4E736C(a1, a2, a3, a4))
  {
    sub_25A50EE30();
    if (a4 >> 14 >= (unint64_t)sub_25A50FAC0() >> 14) {
      goto LABEL_5;
    }
    __break(1u);
  }
  uint64_t result = a3;
  if (a4 >> 14 < a3 >> 14)
  {
    __break(1u);
    return result;
  }
LABEL_5:

  return sub_25A50FAE0();
}

Swift::String __swiftcall String.unquoted()()
{
  Swift::String v2 = v1;
  uint64_t v3 = v0;
  if (sub_25A50EEB0() == 34 && v4 == 0xE100000000000000) {
    goto LABEL_8;
  }
  char v6 = sub_25A510370();
  swift_bridgeObjectRelease();
  if (v6) {
    goto LABEL_9;
  }
  if (sub_25A50EEB0() == 10322146 && v7 == 0xA300000000000000)
  {
LABEL_8:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v17 = sub_25A510370();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0) {
      goto LABEL_23;
    }
  }
LABEL_9:
  sub_25A50ED70();
  if (sub_25A50EEB0() == 34 && v8 == 0xE100000000000000) {
    goto LABEL_16;
  }
  char v10 = sub_25A510370();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    sub_25A50ED70();
    if (sub_25A50EEB0() == 10322146 && v11 == 0xA300000000000000)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    char v18 = sub_25A510370();
    swift_bridgeObjectRelease();
    if (v18) {
      goto LABEL_17;
    }
LABEL_23:
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
LABEL_17:
  unint64_t v12 = sub_25A50ED60();
  unint64_t v13 = sub_25A50ED70();
  if (v13 >> 14 < v12 >> 14)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v15 = sub_25A50EEE0();
  uint64_t v3 = MEMORY[0x26113CCD0](v15);
  Swift::String v2 = v16;
  swift_bridgeObjectRelease();
LABEL_19:
  unint64_t v13 = v3;
  uint64_t v14 = v2;
LABEL_25:
  result._object = v14;
  result._uint64_t countAndFlagsBits = v13;
  return result;
}

void sub_25A4E56C8()
{
  off_26A41B678 = &unk_27082C048;
}

uint64_t sub_25A4E56DC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B698);
  MEMORY[0x270FA5388](v4 - 8);
  char v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a1;
  unint64_t v48 = a2;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1;
  }
  uint64_t v8 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v8 = 11;
  }
  uint64_t v42 = v8 | (v7 << 16);
  uint64_t v9 = sub_25A50E4F0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(void, void, void, void))(v10 + 56);
  uint64_t v12 = v10 + 56;
  swift_bridgeObjectRetain();
  uint64_t v35 = 0;
  uint64_t v41 = 15;
  unint64_t v40 = 0x800000025A5222E0;
  uint64_t v13 = MEMORY[0x263F8D310];
  uint64_t v38 = v9;
  unint64_t v39 = 0x800000025A522300;
  unint64_t v36 = v11;
  uint64_t v37 = v12;
  while (1)
  {
    uint64_t v45 = a1;
    uint64_t v46 = a2;
    unint64_t v43 = 0xD000000000000018;
    unint64_t v44 = v40;
    v11(v6, 1, 1, v9);
    sub_25A39BE4C();
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_25A50FB70();
    char v16 = v15;
    sub_25A4E7F90((uint64_t)v6);
    swift_bridgeObjectRelease();
    uint64_t result = v47;
    if (v16) {
      return result;
    }
    uint64_t v45 = v47;
    uint64_t v46 = v48;
    unint64_t v43 = 0xD000000000000011;
    unint64_t v44 = v39;
    v11(v6, 1, 1, v9);
    swift_bridgeObjectRetain();
    uint64_t v18 = v13;
    sub_25A50FB70();
    char v20 = v19;
    sub_25A4E7F90((uint64_t)v6);
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_25A50EEE0();
    unint64_t v23 = v22;
    uint64_t v25 = v24;
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    if (!((v21 ^ v23) >> 14))
    {
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t v13 = v18;
      goto LABEL_8;
    }
    if ((v27 & 0x1000000000000000) != 0)
    {
      uint64_t v25 = sub_25A4E6FF8(v21, v23, v25, v27, 16);
      swift_bridgeObjectRelease();
      uint64_t v13 = v18;
      if ((v25 & 0x100000000) != 0) {
        goto LABEL_8;
      }
LABEL_18:
      if (WORD1(v25) > 0x10u || (v25 & 0xFFFFF800) == 0xD800) {
        goto LABEL_8;
      }
      uint64_t v45 = 0;
      uint64_t v46 = 0xE000000000000000;
      sub_25A510590();
      sub_25A4E8044();
      sub_25A50ECE0();
      uint64_t result = swift_bridgeObjectRelease();
      a1 = v47;
      a2 = v48;
      uint64_t v32 = HIBYTE(v48) & 0xF;
      if ((v48 & 0x2000000000000000) == 0) {
        uint64_t v32 = v47 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v33 = 7;
      if (((v48 >> 60) & ((v47 & 0x800000000000000) == 0)) != 0) {
        uint64_t v33 = 11;
      }
      uint64_t v41 = v14;
      uint64_t v42 = v33 | (v32 << 16);
      uint64_t v9 = v38;
      uint64_t v11 = v36;
      if (4 * v32 < v14 >> 14)
      {
        __break(1u);
        return result;
      }
    }
    else
    {
      if ((v27 & 0x2000000000000000) != 0)
      {
        uint64_t v45 = v25;
        uint64_t v46 = v27 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v28 = &v45;
      }
      else if ((v25 & 0x1000000000000000) != 0)
      {
        unint64_t v28 = (void *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        unint64_t v28 = (void *)sub_25A50FE60();
      }
      uint64_t v29 = v35;
      uint64_t v30 = sub_25A4E8210((uint64_t)v28, v21, v23, v25, v27, 16);
      LODWORD(v25) = v30;
      uint64_t v35 = v29;
      LOBYTE(v43) = BYTE4(v30) & 1;
      char v31 = BYTE4(v30) & 1;
      swift_bridgeObjectRelease();
      uint64_t v13 = v18;
      if ((v31 & 1) == 0) {
        goto LABEL_18;
      }
LABEL_8:
      a1 = v47;
      a2 = v48;
      uint64_t v9 = v38;
      uint64_t v11 = v36;
    }
  }
}

Swift::String __swiftcall String.unescaped()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  if (qword_26A4156A0 != -1) {
    swift_once();
  }
  uint64_t v4 = (char *)off_26A41B678;
  uint64_t v5 = *((void *)off_26A41B678 + 2);
  if (v5)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_25A39BE4C();
    char v6 = v4 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v3 = sub_25A50FB60();
      unint64_t v8 = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v2 = v8;
      v6 += 32;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = sub_25A4E56DC(v3, v2);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = v9;
  uint64_t v13 = v11;
  result._object = v13;
  result._uint64_t countAndFlagsBits = v12;
  return result;
}

Swift::String __swiftcall String.escapedAndQuotedString()()
{
  sub_25A50EDA0();
  sub_25A50EDA0();
  uint64_t v0 = 34;
  unint64_t v1 = (void *)0xE100000000000000;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.quotedCompilerArgumentAndEscaping()()
{
  sub_25A39BE4C();
  sub_25A50FB60();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25A50FB60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25A50FB60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B6A0);
  swift_arrayDestroy();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  uint64_t v0 = 34;
  unint64_t v1 = (void *)0xE100000000000000;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

BOOL static String.PaddingPosition.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t String.PaddingPosition.hash(into:)()
{
  return sub_25A5104F0();
}

uint64_t String.PaddingPosition.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t String.padded(toAtLeastLength:withPad:position:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (sub_25A50ED50() >= a1)
  {
    swift_bridgeObjectRetain();
    return a5;
  }
  uint64_t result = sub_25A50ED50();
  uint64_t v11 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = sub_25A50ED50();
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v11 == 0x8000000000000000 && result == -1) {
    goto LABEL_17;
  }
  uint64_t v12 = v11 / result;
  if (!(v11 % result) || (BOOL v13 = __OFADD__(v12, 1), ++v12, !v13))
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = MEMORY[0x26113CE90](a2, a3, v12);
    if (a4) {
      uint64_t v15 = a5;
    }
    else {
      uint64_t v15 = v14;
    }
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    return v15;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_25A4E606C@<X0>(uint64_t *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B6C8);
  sub_25A4E86C0();
  uint64_t v2 = sub_25A50EAD0();
  uint64_t v4 = v3;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_25A4E60FC@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = MEMORY[0x263F8E778];
  *(_OWORD *)(v4 + 16) = xmmword_25A5119F0;
  uint64_t v6 = MEMORY[0x263F8E7C0];
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = v6;
  *(unsigned char *)(v4 + 32) = v3;
  uint64_t result = sub_25A50EC50();
  *a2 = result;
  a2[1] = v8;
  return result;
}

Swift::String __swiftcall String.uv_escapingForRegex()()
{
  sub_25A4E7FF0();
  sub_25A4E8044();
  sub_25A50F740();
  sub_25A50F740();
  swift_bridgeObjectRelease();
  sub_25A50F740();
  swift_bridgeObjectRelease();
  sub_25A50F740();
  swift_bridgeObjectRelease();
  sub_25A50F740();
  swift_bridgeObjectRelease();
  sub_25A50F740();
  swift_bridgeObjectRelease();
  sub_25A50F740();
  swift_bridgeObjectRelease();
  sub_25A50F740();
  swift_bridgeObjectRelease();
  sub_25A50F740();
  swift_bridgeObjectRelease();
  sub_25A50F740();
  swift_bridgeObjectRelease();
  sub_25A50F740();
  swift_bridgeObjectRelease();
  uint64_t v0 = v3;
  unint64_t v1 = v4;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

id NSString.uv_sha256.getter()
{
  v22[3] = *MEMORY[0x263EF8340];
  uint64_t v1 = sub_25A50E840();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25A50E830();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(v0, sel_dataUsingEncoding_, 4);
  uint64_t v20 = v6;
  uint64_t v21 = v5;
  if (v9 || (id v9 = objc_msgSend(v0, sel_dataUsingEncoding_, 1)) != 0)
  {
    uint64_t v10 = sub_25A50E380();
    unint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v12 = 0xC000000000000000;
  }
  id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089D8]), sel_init);
  sub_25A4E7E64();
  sub_25A50E810();
  switch(v12 >> 62)
  {
    case 1uLL:
      if (v10 >> 32 < (int)v10) {
        __break(1u);
      }
      sub_25A39375C(v10, v12);
      sub_25A4E7EBC((int)v10, v10 >> 32);
      goto LABEL_9;
    case 2uLL:
      uint64_t v14 = *(void *)(v10 + 16);
      uint64_t v13 = *(void *)(v10 + 24);
      sub_25A39375C(v10, v12);
      swift_retain();
      swift_retain();
      sub_25A4E7EBC(v14, v13);
      swift_release();
      swift_release();
LABEL_9:
      sub_25A3B9048(v10, v12);
      goto LABEL_12;
    case 3uLL:
      memset(v22, 0, 14);
      goto LABEL_11;
    default:
      v22[0] = v10;
      LOWORD(v22[1]) = v12;
      BYTE2(v22[1]) = BYTE2(v12);
      BYTE3(v22[1]) = BYTE3(v12);
      BYTE4(v22[1]) = BYTE4(v12);
      BYTE5(v22[1]) = BYTE5(v12);
LABEL_11:
      sub_25A50E7F0();
      sub_25A3B9048(v10, v12);
LABEL_12:
      sub_25A50E800();
      uint64_t v15 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      MEMORY[0x270FA5388](v15);
      id v16 = v19;
      *(&v18 - 2) = (uint64_t)v19;
      sub_25A50E820();
      sub_25A3B9048(v10, v12);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v21);
      return v16;
  }
}

uint64_t sub_25A4E6968(uint64_t result, char *a2)
{
  uint64_t v3 = (char *)result;
  if (result)
  {
    if (a2) {
      goto LABEL_6;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v3 = 0;
  }
  do
  {
    do
    {
      char v4 = *v3++;
      sub_25A3D55F4();
      uint64_t v5 = (void *)sub_25A50F9B0();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
      uint64_t v6 = swift_allocObject();
      uint64_t v7 = MEMORY[0x263F8E778];
      *(_OWORD *)(v6 + 16) = xmmword_25A5119F0;
      uint64_t v8 = MEMORY[0x263F8E7C0];
      *(void *)(v6 + 56) = v7;
      *(void *)(v6 + 64) = v8;
      *(unsigned char *)(v6 + 32) = v4;
      sub_25A50F850();

      Swift::String result = swift_bridgeObjectRelease();
    }
    while (!a2);
LABEL_6:
    ;
  }
  while (v3 != a2);
  return result;
}

Swift::String __swiftcall Substring.uv_escapingForRegex()()
{
  MEMORY[0x26113CCD0]();
  Swift::String v0 = String.uv_escapingForRegex()();
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v0._countAndFlagsBits;
  object = v0._object;
  result._object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

void *sub_25A4E6AA4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158E0);
  char v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  _OWORD v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_25A4E6B0C()
{
  unint64_t v0 = sub_25A50EEE0();
  uint64_t v4 = sub_25A4E6B8C(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_25A4E6B8C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = sub_25A4E6CE4(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unint64_t v11 = sub_25A4E6AA4(v9, 0);
      unint64_t v12 = sub_25A4E6DE4((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_25A50FE60();
LABEL_4:
        JUMPOUT(0x26113CD20);
      }
    }
    else
    {
      unint64_t v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x26113CD20](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x26113CD20]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_25A4E6CE4(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    Swift::String result = sub_25A48B718(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    Swift::String result = sub_25A48B718(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return sub_25A50EE10();
}

unint64_t sub_25A4E6DE4(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    _OWORD v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    Swift::String result = v12;
    if (v17 == v15) {
      Swift::String result = sub_25A48B718(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      Swift::String result = sub_25A50EE20();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        Swift::String result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          Swift::String result = sub_25A50FE60();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    Swift::String result = sub_25A48B718(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_25A50EDE0();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_25A4E6FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_25A4E8638();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_25A50EED0();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_25A4E6B0C();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)sub_25A50FE60();
  }
LABEL_7:
  uint64_t v13 = sub_25A4E70EC(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 | ((((unint64_t)v13 >> 32) & 1) << 32);
}

unsigned __int8 *sub_25A4E70EC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            unint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            unint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_25A4E736C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 14;
  swift_bridgeObjectRetain();
  if (v5 == a3 >> 14)
  {
LABEL_10:
    sub_25A50EDC0();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    BOOL v15 = v14 == 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    while (1)
    {
      while (1)
      {
        uint64_t v7 = sub_25A50FAD0();
        uint64_t v9 = v8;
        unint64_t v10 = sub_25A50FAA0();
        uint64_t v11 = sub_25A50EDC0();
        if (!v12)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v15 = 1;
          goto LABEL_13;
        }
        if (v7 != v11 || v12 != v9) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v5 == v10 >> 14)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      char v6 = sub_25A510370();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        break;
      }
      if (v5 == v10 >> 14) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    BOOL v15 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_25A4E7504(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v6 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v6 = 11;
  }
  unint64_t v7 = v6 | (v5 << 16);
  unint64_t v8 = a3 >> 14;
  swift_bridgeObjectRetain();
  unint64_t v24 = v8;
  if (v8 != a4 >> 14)
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_25A50FAB0();
    uint64_t v10 = sub_25A50FAD0();
    uint64_t v12 = v11;
    if (!v5)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v22 = 1;
      goto LABEL_21;
    }
    uint64_t v13 = v10;
    unint64_t v7 = sub_25A50ED70();
    if (v13 == sub_25A50EEB0() && v12 == v14) {
      goto LABEL_13;
    }
LABEL_14:
    char v16 = sub_25A510370();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = 0;
      goto LABEL_21;
    }
    while (v24 != v9 >> 14)
    {
      unint64_t v9 = sub_25A50FAB0();
      uint64_t v17 = sub_25A50FAD0();
      uint64_t v19 = v18;
      if (v7 < 0x4000) {
        goto LABEL_22;
      }
      uint64_t v20 = v17;
      unint64_t v7 = sub_25A50ED70();
      if (v20 != sub_25A50EEB0() || v19 != v21) {
        goto LABEL_14;
      }
LABEL_13:
      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
  }
  if (v7 < 0x4000)
  {
    uint64_t v22 = 1;
  }
  else
  {
    sub_25A50ED70();
    sub_25A50EEB0();
    swift_bridgeObjectRelease();
    uint64_t v22 = 0;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return v22;
}

unint64_t sub_25A4E776C(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    Swift::String result = sub_25A4E780C(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_25A4E787C(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_25A4E780C(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    Swift::String result = sub_25A48B718(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_25A4E787C(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      _OWORD v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v10 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          unint64_t v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            int v7 = *(unsigned char *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = sub_25A50FE60();
        unint64_t v5 = v12;
        if (v12 != v9) {
          goto LABEL_9;
        }
      }
      return v5 << 16;
    }
    uint64_t v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v8)
    {
      return MEMORY[0x270F9E998]();
    }
  }
  return result;
}

unint64_t sub_25A4E7990(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    Swift::String result = sub_25A4E7D14(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_25A4E787C(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_25A4E7A30(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7 = a3;
  uint64_t v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = 4 << v10;
  if ((a3 & 0xC) == 4 << v10) {
LABEL_55:
  }
    unint64_t v7 = sub_25A48B718(v7, a4, a5);
  unint64_t v12 = a1;
  if ((a1 & 0xC) == v11) {
    unint64_t v12 = sub_25A48B718(a1, a4, a5);
  }
  unint64_t result = sub_25A4E776C(a1, a4, a5);
  v7 >>= 14;
  if (a2 < 0)
  {
    uint64_t v11 = 0;
    a1 = v12 >> 14;
    uint64_t v20 = (char *)&v28 + 6;
    while (a1 < v7 || v7 < result >> 14)
    {
      if (result < 0x10000)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        unsigned __int8 v27 = v20;
        unint64_t result = sub_25A50ED00();
        uint64_t v20 = v27;
      }
      else
      {
        unint64_t v21 = result >> 16;
        if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v29 = a4;
          uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v29 + v21 - 1) & 0xC0) == 0x80)
          {
            uint64_t v24 = 0;
            do
              int v25 = v20[v21 + v24--] & 0xC0;
            while (v25 == 128);
            uint64_t v26 = 1 - v24;
          }
          else
          {
            uint64_t v26 = 1;
          }
          v21 -= v26;
        }
        else
        {
          uint64_t v22 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0)
          {
            unsigned int v28 = v20;
            uint64_t v22 = sub_25A50FE60();
            uint64_t v20 = v28;
          }
          do
            int v23 = *(unsigned char *)(v22 - 1 + v21--) & 0xC0;
          while (v23 == 128);
        }
        unint64_t result = (v21 << 16) | 5;
      }
      if (--v11 <= a2)
      {
        if (a1 < v7 || result >> 14 >= v7) {
          return result;
        }
        return 0;
      }
    }
    return 0;
  }
  a1 = v12 >> 14;
  if (a2)
  {
    if ((a5 & 0x2000000000000000) != 0) {
      unint64_t v14 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v11 = a5 & 0xFFFFFFFFFFFFFFLL;
    while (v7 < a1 || result >> 14 < v7)
    {
      unint64_t v15 = result >> 16;
      if (result >> 16 >= v14)
      {
        __break(1u);
        goto LABEL_54;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_25A50ECF0();
        if (!--a2) {
          goto LABEL_26;
        }
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v29 = a4;
          uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          int v17 = *((unsigned __int8 *)&v29 + v15);
        }
        else
        {
          uint64_t v16 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0) {
            uint64_t v16 = sub_25A50FE60();
          }
          int v17 = *(unsigned __int8 *)(v16 + v15);
        }
        int v18 = (char)v17;
        unsigned int v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0) {
          LOBYTE(v19) = 1;
        }
        unint64_t result = ((v15 + v19) << 16) | 5;
        if (!--a2) {
          goto LABEL_26;
        }
      }
    }
    return 0;
  }
LABEL_26:
  if (v7 >= a1 && v7 < result >> 14) {
    return 0;
  }
  return result;
}

unint64_t sub_25A4E7D14(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = sub_25A48B718(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_25A4E7D84(unint64_t result)
{
  if (result)
  {
    unint64_t v2 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v3 = *v1;
      unint64_t v4 = v1[1];
      uint64_t v5 = HIBYTE(v4) & 0xF;
      if ((v4 & 0x2000000000000000) == 0) {
        uint64_t v5 = *v1;
      }
      uint64_t v6 = 7;
      if (((v4 >> 60) & ((v3 & 0x800000000000000) == 0)) != 0) {
        uint64_t v6 = 11;
      }
      unint64_t result = sub_25A4E7A30(0xFuLL, result, v6 | (v5 << 16), v3, v4);
      if ((v2 & 1) == 0)
      {
        unint64_t v7 = result;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B6E0);
        sub_25A3BE718(qword_26A41B6E8, &qword_26A41B6E0);
        unint64_t result = 15;
        unint64_t v2 = v7;
        return MEMORY[0x270F9D688](result, v2);
      }
    }
    __break(1u);
    return MEMORY[0x270F9D688](result, v2);
  }
  return result;
}

unint64_t sub_25A4E7E64()
{
  unint64_t result = qword_26A41B680;
  if (!qword_26A41B680)
  {
    sub_25A50E840();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B680);
  }
  return result;
}

uint64_t sub_25A4E7EBC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_25A50E110();
  if (!result || (uint64_t result = sub_25A50E140(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_25A50E130();
      sub_25A50E840();
      sub_25A4E7E64();
      return sub_25A50E7F0();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_25A4E7F6C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25A4E43F8(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_25A4E7F90(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B698);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_25A4E7FF0()
{
  unint64_t result = qword_26A41B6A8;
  if (!qword_26A41B6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B6A8);
  }
  return result;
}

unint64_t sub_25A4E8044()
{
  unint64_t result = qword_26A41B6B0;
  if (!qword_26A41B6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B6B0);
  }
  return result;
}

uint64_t sub_25A4E8098(uint64_t a1, char *a2)
{
  return sub_25A4E6968(a1, a2);
}

unint64_t sub_25A4E80B8()
{
  unint64_t result = qword_26A41B6B8;
  if (!qword_26A41B6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B6B8);
  }
  return result;
}

unsigned char *_s15PaddingPositionOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A4E81D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for String.PaddingPosition()
{
  return &type metadata for String.PaddingPosition;
}

uint64_t sub_25A4E8210(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = sub_25A48B718(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  unint64_t result = sub_25A50EE10();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = sub_25A48B718(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = sub_25A48B718(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  unint64_t result = sub_25A50EE10();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  unsigned int v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    unsigned int v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v34 = a6 + 55;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v34 = 65;
        }
        if (a6 <= 10) {
          unsigned __int8 v35 = a6 + 48;
        }
        else {
          unsigned __int8 v35 = 58;
        }
        if (v19)
        {
          unsigned int v24 = 0;
          unint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                unsigned int v29 = 0;
                unsigned __int8 v30 = 1;
                if (v38 < 0x61 || v38 >= v33) {
                  return v29 | ((unint64_t)v30 << 32);
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            unint64_t v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_96;
            }
            unsigned __int8 v41 = v38 + v39;
            unsigned int v24 = v40 + v41;
            if (__CFADD__(v40, v41)) {
              goto LABEL_96;
            }
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          unsigned __int8 v30 = 0;
          unsigned int v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v43 = a6 + 55;
      }
      else
      {
        unsigned __int8 v42 = 97;
        unsigned __int8 v43 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v44 = a6 + 48;
      }
      else {
        unsigned __int8 v44 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v45 < 0x61 || v45 >= v42) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          unint64_t v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v48 = v45 + v46;
          unsigned int v24 = v47 + v48;
          if (__CFADD__(v47, v48)) {
            goto LABEL_96;
          }
          ++v19;
          if (!--result) {
            goto LABEL_94;
          }
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    unsigned int v29 = 0;
    unsigned __int8 v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v22 = a6 + 55;
      }
      else
      {
        unsigned __int8 v21 = 97;
        unsigned __int8 v22 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v23 = a6 + 48;
      }
      else {
        unsigned __int8 v23 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        int v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v27 < 0x61 || v27 >= v21) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          unint64_t v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v32 = v27 + v28;
          unsigned int v24 = v31 - v32;
          if (v31 < v32) {
            goto LABEL_96;
          }
          ++v25;
          if (!--v26) {
            goto LABEL_94;
          }
        }
      }
LABEL_95:
      unsigned int v29 = 0;
      unsigned __int8 v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

unint64_t sub_25A4E8638()
{
  unint64_t result = qword_26A41B6C0;
  if (!qword_26A41B6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B6C0);
  }
  return result;
}

uint64_t sub_25A4E868C()
{
  return sub_25A50E0A0() & 1;
}

unint64_t sub_25A4E86C0()
{
  unint64_t result = qword_26A41B6D0;
  if (!qword_26A41B6D0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A41B6C8);
    sub_25A4E8734();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B6D0);
  }
  return result;
}

unint64_t sub_25A4E8734()
{
  unint64_t result = qword_26A41B6D8;
  if (!qword_26A41B6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B6D8);
  }
  return result;
}

uint64_t sub_25A4E8788(void *a1)
{
  return sub_25A3E18D4(a1) & 1;
}

uint64_t Sequence.firstMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_25A50FDF0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v13 - v9;
  MEMORY[0x26113CF80](a3, a5);
  swift_getWitnessTable();
  uint64_t v11 = sub_25A50EF30();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v13 = v11;
  sub_25A50F1E0();
  swift_getWitnessTable();
  sub_25A50F670();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25A4E8930(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  BOOL v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  long long v53 = (char *)&v40 - v13;
  int64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned __int8 v41 = (char *)&v40 - v17;
  uint64_t v18 = sub_25A50FA40();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  unsigned __int8 v23 = (char *)&v40 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  unint64_t v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x270FA5388](v26);
  char v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  long long v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  unsigned __int8 v30 = (char *)&v40 - v29;
  uint64_t v31 = sub_25A50EF00();
  uint64_t v61 = sub_25A50E860();
  uint64_t v56 = sub_25A50FF40();
  sub_25A50FEE0();
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  BOOL v59 = v30;
  uint64_t result = sub_25A50EEF0();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    unsigned __int8 v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    unsigned __int8 v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_25A50FAF0();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      sub_25A50FF20();
      if (!--v31)
      {
        uint64_t v35 = v54;
        unint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  unint64_t v36 = v51;
LABEL_9:
  sub_25A50FAF0();
  uint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    long long v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    unsigned int v38 = (void (**)(char *, uint64_t))(v35 + 8);
    char v39 = v41;
    uint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      sub_25A50FF20();
      sub_25A50FAF0();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

uint64_t Sequence.keyedMap<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v17[2] = a3;
  v17[3] = a4;
  void v17[4] = a5;
  v17[5] = a6;
  v17[6] = a7;
  v17[7] = a1;
  v17[8] = a2;
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  uint64_t result = sub_25A4E8930((void (*)(char *, char *))sub_25A4E95AC, (uint64_t)v17, a3, TupleTypeMetadata2, v11, a6, MEMORY[0x263F8E4E0], (uint64_t)&v18);
  if (!v7)
  {
    uint64_t v13 = result;
    uint64_t v14 = sub_25A50E990();
    uint64_t v18 = v13;
    uint64_t v15 = sub_25A50F1E0();
    uint64_t WitnessTable = swift_getWitnessTable();
    swift_getWitnessTable();
    KeyValueMap.init<A>(_:)((uint64_t)&v18, v14, v15, WitnessTable, (uint64_t)&v19);
    return v19;
  }
  return result;
}

uint64_t Sequence.compactKeyedMap<A, B>(_:)()
{
  swift_getTupleTypeMetadata2();
  uint64_t result = sub_25A50EF30();
  if (!v0)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_25A50E990();
    uint64_t v6 = v2;
    uint64_t v4 = sub_25A50F1E0();
    uint64_t WitnessTable = swift_getWitnessTable();
    swift_getWitnessTable();
    KeyValueMap.init<A>(_:)((uint64_t)&v6, v3, v4, WitnessTable, (uint64_t)&v7);
    return v7;
  }
  return result;
}

void Sequence.orderedKeyedMap<A, B>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  void v19[2] = a3;
  v19[3] = a4;
  v19[4] = a5;
  v19[5] = a6;
  v19[6] = a7;
  v19[7] = a1;
  v19[8] = a2;
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  uint64_t v17 = sub_25A4E8930((void (*)(char *, char *))sub_25A4E95AC, (uint64_t)v19, a3, TupleTypeMetadata2, v16, a6, MEMORY[0x263F8E4E0], (uint64_t)&v20);
  if (!v8)
  {
    uint64_t v20 = v17;
    uint64_t v18 = sub_25A50F1E0();
    swift_getWitnessTable();
    OrderedDictionary.init<A>(_:)((uint64_t)&v20, a4, a5, v18, a7, a8);
  }
}

uint64_t Sequence.coiterate<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v19, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  return sub_25A4EC320((uint64_t)v17, (uint64_t)v15, a2, a3, a4, a5, (uint64_t (*)(void, void *))type metadata accessor for Coiteration, a6);
}

uint64_t sub_25A4E95AC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_25A4EC4A4(a1, a2, a3);
}

uint64_t Sequence.identified<A>(by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  _OWORD v6[2] = a2;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = a1;
  return Sequence.keyedMap<A, B>(_:)((uint64_t)sub_25A4EC3F8, (uint64_t)v6, a2, *(void *)(v4 + *MEMORY[0x263F8EA20] + 8), *(void *)(v4 + *MEMORY[0x263F8EA20]), a3, a4);
}

void Sequence.orderedKeyedMap<A, B>(_:uniquingKeysWith:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v27 = a10;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  uint64_t v18 = sub_25A4E8930((void (*)(char *, char *))sub_25A4E95AC, (uint64_t)v22, a5, TupleTypeMetadata2, v17, a8, MEMORY[0x263F8E4E0], (uint64_t)&v30);
  if (!v10)
  {
    uint64_t v30 = v18;
    uint64_t v19 = sub_25A50F1E0();
    swift_getWitnessTable();
    OrderedDictionary.init<A>(_:uniquingKeysWith:)((uint64_t)&v30, a3, a4, a6, a7, v19, a10, a9);
  }
}

uint64_t Sequence.groupElements<A, B>(using:)(void (*a1)(char *, char *, char *), uint64_t a2, unsigned int (*a3)(char *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v93 = a7;
  uint64_t v62 = a4;
  uint64_t v90 = a1;
  uint64_t v91 = a2;
  uint64_t v11 = sub_25A50F1E0();
  swift_getWitnessTable();
  uint64_t v86 = v11;
  uint64_t v12 = type metadata accessor for Inhabited();
  uint64_t v72 = sub_25A50FA40();
  uint64_t v78 = *(void *)(v72 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v72);
  uint64_t v85 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v63 = (char *)&v61 - v16;
  uint64_t v81 = *(void (***)(char *, uint64_t))(v12 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v71 = (char *)&v61 - v18;
  uint64_t v76 = *(void *)(a5 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v70 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v61 - v22;
  uint64_t v80 = *(void (***)(char *, uint64_t))(a4 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v84 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v61 - v26;
  uint64_t v88 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v94 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v30 = (char *)&v61 - v29;
  uint64_t v31 = sub_25A50FA40();
  uint64_t v32 = MEMORY[0x270FA5388](v31 - 8);
  uint64_t v92 = (char *)&v61 - v33;
  uint64_t v34 = *((void *)a3 - 1);
  MEMORY[0x270FA5388](v32);
  unint64_t v36 = (char *)&v61 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  v95 = (char *)&v61 - v37;
  uint64_t v38 = v62;
  uint64_t v97 = sub_25A50E850();
  char v39 = *(void (**)(char *, uint64_t, unsigned int (*)(char *, uint64_t, uint64_t)))(v34 + 16);
  unint64_t v87 = a3;
  v39(v36, v89, a3);
  unint64_t v40 = v63;
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v42 = v92;
  uint64_t v89 = AssociatedConformanceWitness;
  sub_25A50FAF0();
  uint64_t v43 = v94;
  unint64_t v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48);
  uint64_t v88 = v94 + 48;
  if (v87(v42, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    uint64_t v82 = (unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 6);
    unint64_t v83 = v45;
    unint64_t v69 = (void (**)(char *, char *, uint64_t))(v81 + 4);
    uint64_t v74 = (void (**)(char *, char *, uint64_t))(v80 + 2);
    uint64_t v68 = (void (**)(uint64_t, char *, uint64_t))(v81 + 2);
    int64_t v73 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 7);
    uint64_t v67 = v81 + 1;
    ++v80;
    uint64_t v81 = (void (**)(char *, uint64_t))(v76 + 8);
    uint64_t v94 = v43 + 32;
    v79 = (void (**)(char *, uint64_t))(v43 + 8);
    BOOL v66 = (void (**)(char *, uint64_t))(v78 + 8);
    uint64_t v65 = (void (**)(char *, char *, uint64_t))(v76 + 16);
    uint64_t v78 = a5;
    uint64_t v76 = AssociatedTypeWitness;
    uint64_t v75 = v30;
    unint64_t v77 = v27;
    v45(v30, v42, AssociatedTypeWitness);
    while (1)
    {
      v90(v27, v23, v30);
      MEMORY[0x26113C9D0](v27, v97, v38, v12, v93);
      if ((*v82)(v40, 1, v12) == 1)
      {
        (*v66)(v40, v72);
        (*v74)(v84, v77, v38);
        uint64_t v46 = v23;
        uint64_t v47 = v70;
        (*v65)(v70, v46, a5);
        uint64_t v48 = sub_25A50F120();
        uint64_t v49 = v86;
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v51 = v40;
        uint64_t v52 = v85;
        uint64_t v53 = (uint64_t)v47;
        uint64_t v23 = v46;
        uint64_t v30 = v75;
        uint64_t v54 = v49;
        uint64_t v55 = v76;
        Inhabited<>.init(_:otherElements:)(v53, v48, v54, WitnessTable, v85);
        (*v73)(v52, 0, 1, v12);
        a5 = v78;
        sub_25A50E990();
        unint64_t v40 = v51;
        uint64_t v56 = v92;
        uint64_t v27 = v77;
        sub_25A50E9E0();
      }
      else
      {
        uint64_t v57 = v71;
        (*v69)(v71, v40, v12);
        uint64_t v58 = swift_getWitnessTable();
        Inhabited<>.append(_:)((uint64_t)v23, v12, v58);
        (*v74)(v84, v27, v38);
        uint64_t v59 = v85;
        (*v68)(v85, v57, v12);
        (*v73)(v59, 0, 1, v12);
        a5 = v78;
        sub_25A50E990();
        uint64_t v55 = v76;
        uint64_t v30 = v75;
        sub_25A50E9E0();
        uint64_t v60 = v57;
        uint64_t v56 = v92;
        (*v67)(v60, v12);
      }
      (*v81)(v23, a5);
      (*v80)(v27, v38);
      (*v79)(v30, v55);
      sub_25A50FAF0();
      if (v87(v56, 1, v55) == 1) {
        break;
      }
      v83(v30, v56, v55);
    }
  }
  (*(void (**)(char *, uint64_t))(v64 + 8))(v95, v96);
  return v97;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, unsigned int (*)(void, void, void));
  uint64_t AssociatedConformanceWitness;
  uint64_t v39;
  char *v40;
  void (*v42)(char *, char *, uint64_t);
  void (**v43)(char *, uint64_t);
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t WitnessTable;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  void (**v56)(char *, uint64_t);
  void (**v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (**v62)(char *, uint64_t);
  void (**v63)(char *, void, uint64_t, uint64_t);
  void (**v64)(char *, char *, uint64_t);
  void (**v65)(char *, char *, uint64_t);
  char *v66;
  void (**v67)(char *, uint64_t);
  void (**v68)(char *, uint64_t);
  unsigned int (**v69)(char *, uint64_t, uint64_t);
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  char *v72;
  unsigned int (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, char *);
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  uint64_t v80 = a7;
  uint64_t v76 = a2;
  unint64_t v77 = a1;
  uint64_t v10 = sub_25A50F1E0();
  swift_getWitnessTable();
  uint64_t v61 = v10;
  uint64_t v11 = type metadata accessor for Inhabited();
  uint64_t v60 = sub_25A50FA40();
  BOOL v66 = *(char **)(v60 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v60);
  uint64_t v72 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v55 - v15;
  uint64_t v68 = *(void (***)(char *, uint64_t))(v11 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v59 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v55 - v20;
  uint64_t v67 = *(void (***)(char *, uint64_t))(a4 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v71 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v55 - v24;
  uint64_t v74 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v81 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v78 = (char *)&v55 - v27;
  uint64_t v28 = sub_25A50FA40();
  uint64_t v29 = MEMORY[0x270FA5388](v28 - 8);
  uint64_t v31 = (char *)&v55 - v30;
  uint64_t v75 = *((void *)a3 - 1);
  MEMORY[0x270FA5388](v29);
  uint64_t v33 = (char *)&v55 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a3;
  uint64_t v82 = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  unint64_t v36 = (char *)&v55 - v35;
  unint64_t v83 = sub_25A50E850();
  uint64_t v37 = *(void (**)(char *, char *, unsigned int (*)(void, void, void)))(v75 + 16);
  int64_t v73 = v34;
  v37(v33, v79, (unsigned int (*)(void, void, void))v34);
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v79 = v36;
  uint64_t v75 = AssociatedConformanceWitness;
  sub_25A50FAF0();
  char v39 = v81;
  unint64_t v40 = v78;
  int64_t v73 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48);
  uint64_t v74 = v81 + 48;
  if (v73(v31, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    unint64_t v69 = (unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 6);
    uint64_t v70 = v42;
    uint64_t v57 = (void (**)(char *, char *, uint64_t))(v68 + 4);
    uint64_t v43 = v67;
    uint64_t v64 = (void (**)(char *, char *, uint64_t))(v68 + 2);
    uint64_t v65 = (void (**)(char *, char *, uint64_t))(v67 + 2);
    uint64_t v63 = (void (**)(char *, void, uint64_t, uint64_t))(v68 + 7);
    uint64_t v62 = v68 + 1;
    uint64_t v81 = v39 + 32;
    uint64_t v67 = (void (**)(char *, uint64_t))(v39 + 8);
    uint64_t v68 = v43 + 1;
    uint64_t v56 = (void (**)(char *, uint64_t))(v66 + 8);
    BOOL v66 = v31;
    uint64_t v58 = AssociatedTypeWitness;
    v42(v40, v31, AssociatedTypeWitness);
    while (1)
    {
      v77(v25, v21, v40);
      MEMORY[0x26113C9D0](v25, v83, a4, v11, v80);
      if ((*v69)(v16, 1, v11) == 1)
      {
        (*v56)(v16, v60);
        (*v65)(v71, v25, a4);
        uint64_t v44 = v72;
        (*v64)(v72, v21, v11);
        (*v63)(v44, 0, 1, v11);
        sub_25A50E990();
        unint64_t v40 = v78;
        uint64_t v45 = v66;
        sub_25A50E9E0();
        (*v62)(v21, v11);
      }
      else
      {
        uint64_t v46 = v25;
        uint64_t v47 = v59;
        (*v57)(v59, v16, v11);
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v49 = swift_getWitnessTable();
        Inhabited<>.append<A>(contentsOf:)((uint64_t)v21, v11, v11, WitnessTable, v49);
        (*v65)(v71, v46, a4);
        uint64_t v50 = v21;
        uint64_t v51 = v16;
        uint64_t v52 = v72;
        (*v64)(v72, v47, v11);
        (*v63)(v52, 0, 1, v11);
        sub_25A50E990();
        uint64_t v16 = v51;
        uint64_t v21 = v50;
        uint64_t v45 = v66;
        unint64_t v40 = v78;
        sub_25A50E9E0();
        uint64_t v53 = *v62;
        uint64_t v54 = v47;
        uint64_t v25 = v46;
        uint64_t AssociatedTypeWitness = v58;
        (*v62)(v54, v11);
        v53(v50, v11);
      }
      (*v68)(v25, a4);
      (*v67)(v40, AssociatedTypeWitness);
      sub_25A50FAF0();
      if (v73(v45, 1, AssociatedTypeWitness) == 1) {
        break;
      }
      v70(v40, v45, AssociatedTypeWitness);
    }
  }
  (*(void (**)(char *, uint64_t))(v55 + 8))(v79, v82);
  return v83;
}

uint64_t Sequence.compactGroupElements<A, B>(_:)(void (*a1)(char *), uint64_t a2, unsigned int (*a3)(char *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v97 = a7;
  uint64_t v106 = a1;
  uint64_t v12 = sub_25A50F1E0();
  swift_getWitnessTable();
  uint64_t v93 = v12;
  uint64_t v13 = type metadata accessor for Inhabited();
  uint64_t v79 = sub_25A50FA40();
  unint64_t v87 = *(void (***)(char *, uint64_t))(v79 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v79);
  uint64_t v92 = (uint64_t)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v102 = (char *)&v70 - v17;
  v98 = *(void (***)(char *, uint64_t))(v13 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v78 = (char *)&v70 - v18;
  uint64_t v19 = a4;
  uint64_t v96 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v94 = sub_25A50FA40();
  uint64_t v85 = *(void *)(v94 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v94);
  uint64_t v22 = (char *)&v70 - v21;
  uint64_t v110 = a5;
  uint64_t v84 = *(char **)(a5 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  unint64_t v77 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v103 = (uint64_t)&v70 - v26;
  uint64_t v80 = *(void (***)(char *, uint64_t))(v19 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v91 = (char *)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)&v70 - v29;
  uint64_t v105 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v107 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v111 = (char *)&v70 - v32;
  uint64_t v33 = sub_25A50FA40();
  uint64_t v34 = MEMORY[0x270FA5388](v33 - 8);
  unint64_t v36 = (char *)&v70 - v35;
  uint64_t v37 = *((void *)a3 - 1);
  MEMORY[0x270FA5388](v34);
  char v39 = (char *)&v70 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v40 = a3;
  uint64_t v108 = swift_getAssociatedTypeWitness();
  uint64_t v71 = *(void *)(v108 - 8);
  MEMORY[0x270FA5388](v108);
  uint64_t v42 = (char *)&v70 - v41;
  uint64_t v112 = sub_25A50E850();
  uint64_t v43 = *(void (**)(char *, uint64_t, unsigned int (*)(void, void, void)))(v37 + 16);
  uint64_t v104 = v40;
  v43(v39, v109, (unsigned int (*)(void, void, void))v40);
  uint64_t v44 = TupleTypeMetadata2;
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_25A50FAF0();
  uint64_t v46 = v107;
  uint64_t v104 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48);
  uint64_t v105 = v107 + 48;
  if (v104(v36, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
    uint64_t v100 = v44 - 8;
    v101 = v48;
    uint64_t v90 = (void (**)(char *, char *, uint64_t))(v80 + 4);
    uint64_t v89 = (void (**)(uint64_t, char *, uint64_t))(v84 + 32);
    uint64_t v88 = (unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 6);
    uint64_t v76 = (void (**)(char *, char *, uint64_t))(v98 + 4);
    unint64_t v83 = (void (**)(char *, char *, uint64_t))(v80 + 2);
    uint64_t v75 = (void (**)(uint64_t, char *, uint64_t))(v98 + 2);
    uint64_t v82 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v98 + 7);
    uint64_t v74 = v98 + 1;
    uint64_t v81 = (void (**)(uint64_t, uint64_t))(v84 + 8);
    ++v80;
    uint64_t v107 = v46 + 32;
    v98 = (void (**)(char *, uint64_t))(v46 + 8);
    int64_t v73 = v87 + 1;
    uint64_t v72 = (void (**)(char *, uint64_t, uint64_t))(v84 + 16);
    unint64_t v87 = (void (**)(char *, uint64_t))(v85 + 8);
    uint64_t v109 = v13;
    uint64_t v85 = AssociatedTypeWitness;
    uint64_t v84 = v42;
    uint64_t v86 = a2;
    unint64_t v99 = v36;
    do
    {
      uint64_t v49 = v36;
      uint64_t v50 = v111;
      v101(v111, v49, AssociatedTypeWitness);
      v106(v50);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v22, 1, v44) == 1)
      {
        (*v98)(v50, AssociatedTypeWitness);
        (*v87)(v22, v94);
      }
      else
      {
        uint64_t v51 = &v22[*(int *)(v44 + 48)];
        uint64_t v52 = v96;
        (*v90)(v30, v22, v96);
        (*v89)(v103, v51, v110);
        uint64_t v53 = v102;
        MEMORY[0x26113C9D0](v30, v112, v52, v13, v97);
        if ((*v88)(v53, 1, v13) == 1)
        {
          (*v73)(v102, v79);
          (*v83)(v91, v30, v52);
          uint64_t v54 = v22;
          uint64_t v55 = v103;
          uint64_t v56 = v77;
          (*v72)(v77, v103, v110);
          uint64_t v57 = sub_25A50F120();
          uint64_t v58 = v93;
          uint64_t WitnessTable = swift_getWitnessTable();
          uint64_t v60 = AssociatedConformanceWitness;
          uint64_t v61 = v92;
          uint64_t v62 = (uint64_t)v56;
          uint64_t v63 = v55;
          uint64_t v22 = v54;
          uint64_t AssociatedTypeWitness = v85;
          uint64_t v64 = v58;
          uint64_t v13 = v109;
          Inhabited<>.init(_:otherElements:)(v62, v57, v64, WitnessTable, v92);
          (*v82)(v61, 0, 1, v13);
          sub_25A50E990();
          uint64_t AssociatedConformanceWitness = v60;
          uint64_t v44 = TupleTypeMetadata2;
          sub_25A50E9E0();
        }
        else
        {
          uint64_t v65 = v78;
          (*v76)(v78, v102, v13);
          uint64_t v66 = swift_getWitnessTable();
          uint64_t v63 = v103;
          Inhabited<>.append(_:)(v103, v13, v66);
          (*v83)(v91, v30, v52);
          uint64_t v67 = v92;
          (*v75)(v92, v65, v109);
          (*v82)(v67, 0, 1, v109);
          uint64_t AssociatedTypeWitness = v85;
          sub_25A50E990();
          uint64_t v13 = v109;
          sub_25A50E9E0();
          uint64_t v68 = v65;
          uint64_t v44 = TupleTypeMetadata2;
          (*v74)(v68, v13);
        }
        uint64_t v69 = v63;
        uint64_t v42 = v84;
        (*v81)(v69, v110);
        (*v80)(v30, v52);
        (*v98)(v111, AssociatedTypeWitness);
      }
      unint64_t v36 = v99;
      sub_25A50FAF0();
    }
    while (v104(v36, 1, AssociatedTypeWitness) != 1);
  }
  (*(void (**)(char *, uint64_t))(v71 + 8))(v42, v108);
  return v112;
}

double Sequence.orderedGroupElements<A, B>(using:)@<D0>(void (*a1)(char *, char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  uint64_t v76 = a7;
  uint64_t v71 = a1;
  uint64_t v72 = a2;
  uint64_t v46 = a8;
  uint64_t v12 = sub_25A50F1E0();
  swift_getWitnessTable();
  uint64_t v66 = v12;
  uint64_t v13 = type metadata accessor for Inhabited();
  uint64_t v55 = sub_25A50FA40();
  uint64_t v58 = *(char **)(v55 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v55);
  uint64_t v65 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v61 = *(void *)(v13 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v54 = (char *)&v44 - v18;
  uint64_t v67 = a5;
  uint64_t v47 = *(void *)(a5 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v53 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v60 = *(void *)(a4 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v64 = (char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v79 = (char *)&v44 - v26;
  uint64_t v74 = a6;
  uint64_t v27 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v77 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v78 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int64_t v73 = (char *)&v44 - v29;
  uint64_t v30 = sub_25A50FA40();
  uint64_t v31 = MEMORY[0x270FA5388](v30 - 8);
  uint64_t v33 = (char *)&v44 - v32;
  uint64_t v34 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v31);
  unint64_t v36 = (char *)&v44 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  char v39 = (char *)&v44 - v38;
  OrderedDictionary.init()((uint64_t *)&v81);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, v75, v27);
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v74 = v39;
  uint64_t v75 = v37;
  uint64_t v70 = AssociatedConformanceWitness;
  sub_25A50FAF0();
  uint64_t v41 = v77;
  uint64_t v42 = v73;
  uint64_t v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
  uint64_t v69 = v77 + 48;
  if (v68(v33, 1, v78) != 1)
  {
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    uint64_t v62 = v61 + 48;
    uint64_t v51 = v61 + 32;
    uint64_t v57 = v60 + 16;
    uint64_t v50 = v61 + 16;
    uint64_t v56 = v61 + 56;
    uint64_t v49 = v61 + 8;
    uint64_t v61 = v47 + 8;
    v60 += 8;
    uint64_t v77 = v41 + 32;
    uint64_t v59 = v41 + 8;
    uint64_t v48 = v58 + 8;
    v47 += 16;
    uint64_t v58 = v33;
    uint64_t v52 = a4;
    v63(v42, v33, v78);
    v71(v79, v23, v42);
    long long v80 = v81;
    type metadata accessor for OrderedDictionary();
    OrderedDictionary.subscript.getter();
  }
  (*(void (**)(char *, uint64_t))(v45 + 8))(v74, v75);
  double result = *(double *)&v81;
  *uint64_t v46 = v81;
  return result;
}

void sub_25A4EBEC8()
{
  if ((**(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v5 - 272))(v0, 1, v3) != 1)
  {
    uint64_t v6 = *(void *)(v5 - 336);
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 360))(v6, v0, v3);
    uint64_t WitnessTable = swift_getWitnessTable();
    Inhabited<>.append(_:)(v2, v3, WitnessTable);
    uint64_t v8 = *(void *)(v5 - 256);
    (**(void (***)(uint64_t, void, uint64_t))(v5 - 312))(v8, *(void *)(v5 - 136), v4);
    uint64_t v9 = *(char **)(v5 - 248);
    (**(void (***)(char *, uint64_t, uint64_t))(v5 - 368))(v9, v6, v3);
    (**(void (***)(char *, void, uint64_t, uint64_t))(v5 - 320))(v9, 0, 1, v3);
    OrderedDictionary.subscript.setter(v9, v8, v1);
    (**(void (***)(uint64_t, uint64_t))(v5 - 376))(v6, v3);
    JUMPOUT(0x25A4EBDC4);
  }
  JUMPOUT(0x25A4EBC94);
}

uint64_t Coiteration.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v28 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v6 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v24 = (char *)&v23 - v10;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v23 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v3, v11);
  sub_25A50EEF0();
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v8, v3 + *(int *)(a1 + 52), v5);
  uint64_t v18 = (uint64_t)v24;
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v20 = AssociatedTypeWitness;
  uint64_t v21 = swift_getAssociatedConformanceWitness();
  return sub_25A4EC320((uint64_t)v17, v18, v15, v20, AssociatedConformanceWitness, v21, (uint64_t (*)(void, void *))type metadata accessor for Coiterator, v28);
}

uint64_t sub_25A4EC2F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return sub_25A4EC320(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, void *))type metadata accessor for Coiterator, a7);
}

uint64_t sub_25A4EC308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return sub_25A4EC320(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, void *))type metadata accessor for Coiteration, a7);
}

uint64_t sub_25A4EC320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, void *)@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a8, a1);
  v17[0] = a3;
  v17[1] = a4;
  void v17[2] = a5;
  v17[3] = a6;
  uint64_t v15 = a7(0, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a8 + *(int *)(v15 + 52), a2, a4);
}

uint64_t sub_25A4EC3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = **(void **)(v3 + 40);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v6 + *MEMORY[0x263F8EA20]) - 8) + 16))(a2, a3);
}

uint64_t sub_25A4EC4A4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 56);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = v8(a3, a3 + *(int *)(TupleTypeMetadata2 + 48), a1);
  if (v4) {
    *a2 = v4;
  }
  return result;
}

uint64_t sub_25A4EC520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Coiteration.makeIterator()(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t sub_25A4EC580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A4ED684(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t Coiterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v2 = *(void *)(a1 + 40);
  v22[1] = *(void *)(a1 + 24);
  v22[2] = v2;
  v22[0] = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_25A50FA40();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v22 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_25A50FA40();
  uint64_t v23 = *(void *)(v11 - 8);
  uint64_t v24 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v22 - v12;
  sub_25A50FAF0();
  sub_25A50FAF0();
  int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v13, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  if (v14 == 1 && (*(unsigned int (**)(char *, uint64_t))(*(void *)(v22[0] - 8) + 48))(v7, 1) == 1)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t))(v4 + 8);
    v15(v7, v3);
    v15(v9, v3);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v24);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v25, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v18 = v24;
    uint64_t v19 = swift_getTupleTypeMetadata2();
    uint64_t v20 = v25;
    uint64_t v21 = v25 + *(int *)(v19 + 48);
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v25, v13, v18);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v21, v9, v3);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v20, 0, 1, v19);
  }
}

uint64_t Sequence.stableSorted(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_25A5100D0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v22[-v11];
  MEMORY[0x26113CF40](a3, a4);
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  swift_getWitnessTable();
  uint64_t v13 = (uint64_t)v12;
  uint64_t v14 = sub_25A50EFD0();
  if (v4)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    uint64_t v15 = v14;
    uint64_t v16 = (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v27 = v15;
    MEMORY[0x270FA5388](v16);
    *(void *)&v22[-16] = a3;
    *(void *)&v22[-8] = a4;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_getTupleTypeMetadata2();
    uint64_t v18 = sub_25A50F1E0();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v13 = sub_25A39F5D4((void (*)(char *, char *))sub_25A4ED108, (uint64_t)&v22[-32], v18, AssociatedTypeWitness, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v20);
    swift_bridgeObjectRelease();
  }
  return v13;
}

uint64_t sub_25A4ECC1C(void *a1, uint64_t *a2, uint64_t (*a3)(char *, char *), uint64_t a4)
{
  uint64_t v58 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v56 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v48 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (uint64_t *)((char *)&v48 - v15);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (uint64_t *)((char *)&v48 - v18);
  uint64_t v20 = *(int *)(v17 + 48);
  uint64_t v54 = a2;
  uint64_t v55 = a1;
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = v57;
  char v23 = v58((char *)a1 + v20, (char *)a2 + v20);
  if (!v22)
  {
    uint64_t v50 = v13;
    uint64_t v51 = (uint64_t *)v10;
    uint64_t v52 = a4;
    uint64_t v57 = 0;
    char v25 = v23;
    uint64_t v26 = (uint64_t *)((char *)v19 + *(int *)(TupleTypeMetadata2 + 48));
    uint64_t v27 = AssociatedTypeWitness;
    *uint64_t v19 = *v54;
    uint64_t v49 = *(void *)(v27 - 8);
    uint64_t v28 = *(void (**)(void))(v49 + 16);
    uint64_t v54 = v26;
    v28();
    uint64_t v29 = (char *)v16 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v55 = (void *)*v55;
    *uint64_t v16 = v55;
    ((void (*)(char *, char *, uint64_t))v28)(v29, v21, v27);
    uint64_t v30 = v27;
    uint64_t v31 = v19;
    if (v25)
    {
      uint64_t v32 = *(void (**)(uint64_t *, uint64_t))(v56 + 8);
      v32(v16, TupleTypeMetadata2);
      v32(v19, TupleTypeMetadata2);
      char v24 = 1;
    }
    else
    {
      uint64_t v33 = v57;
      int v34 = v58((char *)v54, v29);
      uint64_t v35 = v56;
      uint64_t v57 = v33;
      if (v33)
      {
        unint64_t v36 = *(void (**)(uint64_t *, uint64_t))(v56 + 8);
        v36(v16, TupleTypeMetadata2);
        v36(v19, TupleTypeMetadata2);
      }
      else
      {
        uint64_t v37 = TupleTypeMetadata2;
        uint64_t v38 = *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v40 = v49;
        char v39 = v50;
        LODWORD(v58) = v34;
        uint64_t v41 = (char *)v50 + v38;
        *uint64_t v50 = v55;
        uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
        v42(v41, v29, v30);
        uint64_t v43 = *(void (**)(uint64_t *, uint64_t))(v35 + 8);
        v43(v39, TupleTypeMetadata2);
        uint64_t v44 = v51;
        uint64_t v45 = (char *)v51 + *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v46 = *v31;
        *uint64_t v51 = *v31;
        v42(v45, (char *)v54, v30);
        v43(v44, v37);
        char v24 = ((uint64_t)v55 < v46) & ~(_BYTE)v58;
      }
    }
  }
  return v24 & 1;
}

uint64_t sub_25A4ECFB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = *(int *)(MEMORY[0x270FA5388](TupleTypeMetadata2 - 8) + 56);
  uint64_t v8 = (char *)&v12 + v7 - v6;
  uint64_t v9 = a1 + v7;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, v9, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v8, AssociatedTypeWitness);
}

uint64_t sub_25A4ED0E4(void *a1, uint64_t *a2)
{
  return sub_25A4ECC1C(a1, a2, *(uint64_t (**)(char *, char *))(v2 + 32), *(void *)(v2 + 40)) & 1;
}

uint64_t sub_25A4ED108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A4ECFB4(a1, a2);
}

uint64_t sub_25A4ED128()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for Coiteration()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A4ED180(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_25A4ED378(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x25A4ED644);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          char v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          char v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for Coiterator()
{
  return swift_getGenericMetadata();
}

uint64_t Weak.__allocating_init(_:)()
{
  uint64_t v0 = sub_25A4ED9F8();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t Weak.wrapped.getter()
{
  swift_beginAccess();
  return MEMORY[0x26113F1A0](v0 + 16);
}

uint64_t Weak.init(_:)()
{
  uint64_t v0 = sub_25A4ED998();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t Weak.hash(into:)()
{
  swift_beginAccess();
  if (!MEMORY[0x26113F1A0](v0 + 16)) {
    return sub_25A5104F0();
  }
  sub_25A5104F0();
  return swift_unknownObjectRelease();
}

BOOL static Weak.== infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x26113F1A0](v3);
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x26113F1A0](a2 + 16);
  uint64_t v6 = v5;
  if (v4)
  {
    swift_unknownObjectRelease();
    if (v6)
    {
      swift_unknownObjectRelease();
      return v4 == v6;
    }
    return 0;
  }
  if (v5)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  return 1;
}

uint64_t Weak.deinit()
{
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t Weak.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t Weak.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t sub_25A4ED8EC()
{
  return Weak.hashValue.getter();
}

uint64_t sub_25A4ED910()
{
  return Weak.hash(into:)();
}

uint64_t sub_25A4ED934()
{
  return sub_25A510530();
}

BOOL sub_25A4ED974(uint64_t *a1, uint64_t *a2)
{
  return static Weak.== infix<A>(_:_:)(*a1, *a2);
}

uint64_t sub_25A4ED998()
{
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  return v0;
}

uint64_t sub_25A4ED9F8()
{
  return sub_25A4ED998();
}

uint64_t sub_25A4EDA34()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4EDA50@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x26113F1A0](v3);
  *a2 = result;
  return result;
}

uint64_t sub_25A4EDAA0()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_25A4EDAF0()
{
  return 8;
}

void *sub_25A4EDAFC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_25A4EDB08()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Weak()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for Weak(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Weak);
}

uint64_t dispatch thunk of Weak.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t AnyEquatable.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for AnyEquatableBoxImpl();
  uint64_t result = sub_25A4EDBEC(a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for AnyEquatableBoxImpl()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4EDBEC(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 104) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 120), a1);
  return v2;
}

uint64_t AnyEquatable.base.getter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t static AnyEquatable.== infix(_:_:)(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 80))(*a2) & 1;
}

uint64_t sub_25A4EDD10(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 80))(*a2) & 1;
}

ValueMetadata *type metadata accessor for AnyEquatable()
{
  return &type metadata for AnyEquatable;
}

void sub_25A4EDD6C()
{
}

void sub_25A4EDDC4()
{
}

uint64_t type metadata accessor for AnyEquatableBox()
{
  return self;
}

uint64_t sub_25A4EDE40()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_25A4EDED4()
{
  type metadata accessor for AnyEquatableBoxImpl();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = sub_25A50EBE0();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t sub_25A4EDFC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1 + *(void *)(*(void *)v1 + 120);
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  a1[3] = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  uint64_t v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v5(boxed_opaque_existential_1, v2, v3);
}

uint64_t sub_25A4EE05C()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 104) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 120));
}

uint64_t sub_25A4EE0B4()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 104) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 120));
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t Actor.verifyIsolated(_:file:line:)()
{
  return sub_25A50F230();
}

uint64_t Actor.makeIsolatedTask(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_25A50F2A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  _OWORD v13[2] = v4;
  v13[3] = a4;
  void v13[4] = a3;
  v13[5] = a4;
  v13[6] = a1;
  v13[7] = a2;
  v13[8] = v4;
  swift_unknownObjectRetain_n();
  swift_retain();
  return sub_25A38ED10((uint64_t)v11, (uint64_t)&unk_26A41B8F8, (uint64_t)v13);
}

uint64_t sub_25A4EE2D0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_25A3923B4;
  return v10(a6);
}

uint64_t sub_25A4EE3AC()
{
  return 0;
}

uint64_t sub_25A4EE3B8(uint64_t a1, void (*a2)(uint64_t))
{
  sub_25A50FDB0();
  sub_25A50EDA0();
  sub_25A510310();
  uint64_t v3 = sub_25A50EDA0();
  a2(v3);
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  return 0;
}

uint64_t sub_25A4EE490()
{
  return sub_25A4EE3B8(*(void *)(v0 + 32), *(void (**)(uint64_t))(v0 + 40));
}

uint64_t sub_25A4EE4A0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25A4EE4E8()
{
  uint64_t v2 = *(int **)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_25A38F608;
  unsigned int v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v5 = (void *)swift_task_alloc();
  _OWORD v4[2] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_25A3923B4;
  return v7(v3);
}

PreviewsFoundationOS::JITError __swiftcall JITError.init(additionalLinkErrorInformation:)(PreviewsFoundationOS::JITError additionalLinkErrorInformation)
{
  v1->additionalLinkErrorInformation._rawValue = additionalLinkErrorInformation.additionalLinkErrorInformation._rawValue;
  return additionalLinkErrorInformation;
}

uint64_t JITError.additionalLinkErrorInformation.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t JITError.additionalLinkErrorInformation.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*JITError.additionalLinkErrorInformation.modify())()
{
  return nullsub_1;
}

unint64_t JITError.lowValueTitle.getter()
{
  if (*(void *)(*(void *)v0 + 16)) {
    return 0xD000000000000017;
  }
  else {
    return 0;
  }
}

uint64_t JITError.additionalInfo.getter()
{
  return 0;
}

unint64_t JITError.additionalDiagnostics.getter()
{
  if (!*(void *)(*(void *)v0 + 16)) {
    return 0;
  }
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3A108C();
  sub_25A50EAD0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  return 0xD00000000000001DLL;
}

void JITError.options.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = qword_27082B9A8;
  *(unsigned char *)(a1 + 8) = 0;
}

unint64_t sub_25A4EE79C()
{
  if (*(void *)(*(void *)v0 + 16)) {
    return 0xD000000000000017;
  }
  else {
    return 0;
  }
}

void sub_25A4EE7D0(uint64_t a1@<X8>)
{
  *(void *)a1 = qword_27082B9A8;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t HumanReadableError.isJITRelated.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_1, v2, a1);
  while (1)
  {
    uint64_t v6 = v28;
    if (!v28) {
      goto LABEL_2;
    }
    uint64_t v7 = v29;
    uint64_t v8 = __swift_project_boxed_opaque_existential_1(v27, v28);
    uint64_t v9 = *(void *)(v6 - 8);
    MEMORY[0x270FA5388](v8);
    uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    HumanReadableError.unwrapped.getter(v6, v7, (uint64_t *)&v24);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v6);
    uint64_t v12 = *((void *)&v25 + 1);
    uint64_t v13 = v26;
    __swift_project_boxed_opaque_existential_1(&v24, *((uint64_t *)&v25 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v13 + 56))(&v22, v12, v13);
    char v14 = v22;
    LOBYTE(v7) = v23;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    if ((v7 & 1) == 0 && (v14 & 0x40) != 0) {
      break;
    }
    uint64_t v15 = v28;
    if (v28)
    {
      unsigned int v16 = __swift_project_boxed_opaque_existential_1(v27, v28);
      uint64_t v17 = *(void *)(v15 - 8);
      MEMORY[0x270FA5388](v16);
      int v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v17 + 16))(v19);
      double v20 = HumanReadableError.underlying.getter(v15, (uint64_t)&v24);
      (*(void (**)(char *, uint64_t, double))(v17 + 8))(v19, v15, v20);
      goto LABEL_3;
    }
LABEL_2:
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
LABEL_3:
    sub_25A4EEAA0((uint64_t)&v24, (uint64_t)v27);
    sub_25A4EEB08((uint64_t)v27, (uint64_t)&v24);
    uint64_t v5 = *((void *)&v25 + 1);
    sub_25A4BC0F0((uint64_t)&v24);
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v5 = 1;
LABEL_10:
  sub_25A4BC0F0((uint64_t)v27);
  return v5;
}

uint64_t sub_25A4EEAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417628);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A4EEB08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417628);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void JITRelatedError.options.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = qword_27082C1E8;
  *(unsigned char *)(a1 + 8) = 0;
}

unint64_t sub_25A4EEB84(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_25A4EEBB4();
  unint64_t result = sub_25A4EEC08();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_25A4EEBB4()
{
  unint64_t result = qword_26A41B900;
  if (!qword_26A41B900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B900);
  }
  return result;
}

unint64_t sub_25A4EEC08()
{
  unint64_t result = qword_26A41B908;
  if (!qword_26A41B908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B908);
  }
  return result;
}

unint64_t sub_25A4EEC60()
{
  unint64_t result = qword_26A41B910;
  if (!qword_26A41B910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41B910);
  }
  return result;
}

ValueMetadata *type metadata accessor for JITError()
{
  return &type metadata for JITError;
}

uint64_t sub_25A4EECC4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  uint64_t v5 = type metadata accessor for Future.Activity();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)&v18[-1] - v7);
  LOBYTE(v7) = *(unsigned char *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 56);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(unsigned char *)(v2 + 32) = v7;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 40);
  *(unsigned char *)(v2 + 72) = v9;
  *(void *)(v2 + 80) = mach_absolute_time();
  type metadata accessor for FutureTermination();
  swift_getFunctionTypeMetadata1();
  *uint64_t v8 = sub_25A50F120();
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = sub_25A3EF560(v8, v5);
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)(v2 + 88) = v10;
  uint64_t v19 = 0;
  type metadata accessor for Future();
  uint64_t v11 = sub_25A50FA40();
  uint64_t v12 = sub_25A3EF560(&v19, v11);
  *(void *)(v2 + 96) = v12;
  v18[1] = v12;
  uint64_t v17 = v4;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v18[0] = v2;
  uint64_t v14 = sub_25A50E5B0();
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncSetValue<A>(at:to:)(KeyPath, (uint64_t)v18, v14, WitnessTable);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v2;
}

uint64_t Future.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_25A4EEF28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Future.Activity();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v10 - v5;
  v10[1] = *(void *)(v1 + 88);
  uint64_t v7 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future.swift", 118, 2, 90, 22, (uint64_t)"recentStateSnapshot", 19, 2, v7, WitnessTable);
  sub_25A4EFAD0(v3, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t type metadata accessor for Future.Activity()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4EF098@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FutureState();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - v4;
  sub_25A4EEF28((uint64_t)&v7 - v4);
  FutureState.succeededValue.getter(v2, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

BOOL sub_25A4EF184()
{
  uint64_t v0 = type metadata accessor for FutureState();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - v2;
  sub_25A4EEF28((uint64_t)&v6 - v2);
  BOOL v4 = FutureState.isCanceled.getter(v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

BOOL sub_25A4EF268()
{
  uint64_t v0 = type metadata accessor for FutureState();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - v2;
  sub_25A4EEF28((uint64_t)&v6 - v2);
  BOOL v4 = (void *)FutureState.failedError.getter(v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v4) {

  }
  return v4 != 0;
}

uint64_t sub_25A4EF364()
{
  uint64_t v1 = *v0;
  uint64_t v8 = v0[11];
  uint64_t v7 = *(void *)(v1 + 80);
  type metadata accessor for Future.Activity();
  uint64_t v2 = sub_25A50E5B0();
  swift_retain();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41B918);
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncRead<A>(file:line:column:function:_:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future.swift", 118, 2, 108, 34, (uint64_t)"runningTime", 11, 2, (uint64_t)sub_25A4EFE50, (uint64_t)v6, v2, v3, WitnessTable);
  return swift_release();
}

uint64_t sub_25A4EF460(void (*a1)(void), uint64_t a2)
{
  uint64_t v5 = *(void *)(*v2 + 80);
  uint64_t v6 = type metadata accessor for FutureTermination();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v21 = (char *)&v21 - v8;
  uint64_t v9 = sub_25A50FA40();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v27 = v2[11];
  uint64_t v24 = v5;
  long long v25 = a1;
  uint64_t v22 = (void (*)(char *))a1;
  uint64_t v26 = a2;
  type metadata accessor for Future.Activity();
  uint64_t v16 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future.swift", 118, 2, 120, 56, (uint64_t)"_observeFinish(_:)", 18, 2, (uint64_t)sub_25A4F3AC8, (uint64_t)v23, v16, v9, WitnessTable);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
    v18(v15, v9);
    return ((uint64_t (*)(char *, uint64_t))v18)(v13, v9);
  }
  else
  {
    double v20 = v21;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v21, v13, v6);
    v22(v20);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
}

uint64_t sub_25A4EF780(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_25A4F1FD0(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_25A4EF7A8(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[10];
  uint64_t v5 = mach_absolute_time();
  uint64_t v20 = v1[11];
  uint64_t v15 = *(void *)(v3 + 80);
  uint64_t v16 = a1;
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  type metadata accessor for Future.Activity();
  uint64_t v6 = sub_25A50E5B0();
  type metadata accessor for FutureTermination();
  swift_getFunctionTypeMetadata1();
  sub_25A50F1E0();
  uint64_t v7 = sub_25A50FA40();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future.swift", 118, 2, 153, 44, (uint64_t)"didFinish(_:)", 13, 2, (uint64_t)sub_25A4F3688, (uint64_t)v14, v6, v7, WitnessTable);
  uint64_t v9 = swift_release();
  if (v21)
  {
    uint64_t v19 = v21;
    MEMORY[0x270FA5388](v9);
    swift_getWitnessTable();
    sub_25A50EFF0();
    uint64_t v9 = swift_bridgeObjectRelease();
  }
  uint64_t v20 = v1[12];
  MEMORY[0x270FA5388](v9);
  KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v19 = 0;
  type metadata accessor for Future();
  sub_25A50FA40();
  uint64_t v11 = sub_25A50E5B0();
  swift_retain();
  uint64_t v12 = swift_getWitnessTable();
  SynchronousAccessProviding.syncSetValue<A>(at:to:)(KeyPath, (uint64_t)&v19, v11, v12);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t Future<A>.init(dsoHandle:file:line:column:function:priority:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12 = sub_25A4F2028(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  swift_release();
  return v12;
}

uint64_t sub_25A4EFAD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for FutureTermination();
    uint64_t v8 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    uint64_t v10 = type metadata accessor for FutureTermination();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a2, 1, 1, v10);
  }
}

__n128 Future.initializationCallsite.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  char v3 = *(unsigned char *)(v1 + 72);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(unsigned char *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 40);
  __n128 result = *(__n128 *)(v1 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 56) = v3;
  return result;
}

void Future.initializationTime.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 80);
}

uint64_t sub_25A4EFCC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Future.Activity();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v10 - v6, a1, v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for FutureTermination();
    *(_OWORD *)a2 = *(_OWORD *)&v7[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    *(unsigned char *)(a2 + 16) = 0;
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t sub_25A4EFE50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A4EFCC8(a1, a2);
}

uint64_t sub_25A4EFE6C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Future.Activity();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (void *)((char *)v19 - v12);
  (*(void (**)(char *, void *, uint64_t))(v11 + 16))((char *)v19 - v12, a1, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for FutureTermination();
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v15 + 32))(a5, v13, v14);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a5, 0, 1, v14);
  }
  else
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(a1, v10);
    uint64_t v20 = *v13;
    uint64_t v17 = (void *)swift_allocObject();
    void v17[2] = a4;
    v17[3] = a2;
    void v17[4] = a3;
    v19[0] = sub_25A4BD98C;
    v19[1] = v17;
    type metadata accessor for FutureTermination();
    swift_getFunctionTypeMetadata1();
    sub_25A50F1E0();
    swift_retain();
    sub_25A50F180();
    *a1 = v20;
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = swift_checkMetadataState();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a5, 1, 1, v18);
  }
}

uint64_t sub_25A4F010C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Future.Activity();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (void *)((char *)v20 - v12);
  (*(void (**)(char *, uint64_t *, uint64_t))(v11 + 16))((char *)v20 - v12, a1, v10);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v15 = *(void (**)(uint64_t *, uint64_t))(v11 + 8);
  if (EnumCaseMultiPayload == 1)
  {
    v15(v13, v10);
    v20[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future.swift";
    v20[1] = 118;
    char v21 = 2;
    long long v22 = xmmword_25A511C30;
    char v23 = "didFinish(_:)";
    uint64_t v24 = 13;
    char v25 = 2;
    uint64_t result = sub_25A403498();
    uint64_t v17 = 0;
  }
  else
  {
    v15(a1, v10);
    uint64_t v17 = *v13;
    uint64_t v18 = type metadata accessor for FutureTermination();
    uint64_t v19 = (uint64_t *)((char *)a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
    *uint64_t v19 = a3;
    v19[1] = a4;
    uint64_t result = swift_storeEnumTagMultiPayload();
  }
  *a5 = v17;
  return result;
}

void sub_25A4F0314()
{
}

uint64_t Future.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0228](v0, 104, 7);
}

uint64_t Future<A>.termination.getter(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return MEMORY[0x270FA2498](sub_25A4F03E8, 0, 0);
}

uint64_t sub_25A4F03E8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  uint64_t v2 = type metadata accessor for FutureTermination();
  *uint64_t v1 = v0;
  v1[1] = sub_25A4F04CC;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  return MEMORY[0x270FA2318](v3, 0, 0, 0x74616E696D726574, 0xEB000000006E6F69, sub_25A4F20A0, v4, v2);
}

uint64_t sub_25A4F04CC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_25A4F05C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 80);
  uint64_t v3 = sub_25A4F0664(a1, v2);
  uint64_t v5 = v4;
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = v2;
  v6[3] = v3;
  v6[4] = v5;
  Future.observeFinish(_:)((uint64_t)sub_25A4F3764, (uint64_t)v6);

  return swift_release();
}

uint64_t (*sub_25A4F0664(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  type metadata accessor for FutureTermination();
  uint64_t v4 = sub_25A50F260();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v11 - v6, a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, v7, v4);
  return sub_25A4F3820;
}

uint64_t sub_25A4F07B4(uint64_t a1)
{
  sub_25A4F38C0(a1);
  uint64_t v2 = type metadata accessor for FutureTermination();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_25A4F0824(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v4 = type metadata accessor for FutureTermination();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v9 - v5, a1);
  return a2(v6);
}

uint64_t Future<A>.result.getter(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = *(void *)(*(void *)v1 + 80);
  v2[4] = type metadata accessor for FutureTermination();
  uint64_t v3 = swift_task_alloc();
  v2[5] = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[6] = v4;
  *uint64_t v4 = v2;
  _OWORD v4[2] = v3;
  v4[3] = v1;
  v4[1] = sub_25A4F0A14;
  v4[4] = *(void *)v1;
  return MEMORY[0x270FA2498](sub_25A4F03E8, 0, 0);
}

uint64_t sub_25A4F0A14()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A4F0B10, 0, 0);
}

uint64_t sub_25A4F0B10()
{
  uint64_t v1 = (void *)v0[5];
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(void, void *, void))(*(void *)(v0[3] - 8) + 32))(v0[2], v1, v0[3]);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    sub_25A510540();
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)v0[2] = *v1;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    sub_25A510540();
LABEL_5:
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    goto LABEL_7;
  }
  sub_25A50F270();
  sub_25A39210C();
  swift_allocError();
  sub_25A50E870();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
LABEL_7:
  return v3();
}

uint64_t Future<A>.value.getter(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return MEMORY[0x270FA2498](sub_25A4F0CD8, 0, 0);
}

uint64_t sub_25A4F0CD8()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  uint64_t v3 = *(void *)(v1 + 80);
  *uint64_t v2 = v0;
  v2[1] = sub_25A4F0DAC;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  return MEMORY[0x270FA2338](v4, &unk_26A41B940, v5, sub_25A4F2144, v5, 0, 0, v3);
}

uint64_t sub_25A4F0DAC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25A492C24, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_25A4F0EE0(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = *(void *)(*(void *)a2 + 80);
  v2[4] = type metadata accessor for FutureTermination();
  uint64_t v4 = swift_task_alloc();
  v2[5] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[6] = v5;
  *uint64_t v5 = v2;
  uint64_t v5[2] = v4;
  v5[3] = a2;
  v5[1] = sub_25A4F1004;
  v5[4] = *(void *)a2;
  return MEMORY[0x270FA2498](sub_25A4F03E8, 0, 0);
}

uint64_t sub_25A4F1004()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A4F1100, 0, 0);
}

uint64_t sub_25A4F1100()
{
  uint64_t v1 = v0[5];
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      sub_25A50F270();
      sub_25A39210C();
      swift_allocError();
      sub_25A50E870();
    }
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    (*(void (**)(void, uint64_t))(*(void *)(v0[3] - 8) + 32))(v0[2], v1);
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
  }
  return v3();
}

uint64_t Task<>.future.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Future();
  uint64_t v7 = sub_25A50F2A0();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a1;
  swift_retain();
  *(void *)&long long v15 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/Future.swift";
  *((void *)&v15 + 1) = 118;
  char v16 = 2;
  long long v17 = xmmword_25A51CAD0;
  uint64_t v18 = "future";
  uint64_t v19 = 6;
  char v20 = 2;
  uint64_t v12 = v6;
  uint64_t v13 = &unk_26A41B950;
  uint64_t v14 = v8;
  uint64_t v9 = sub_25A3BBFB0(&v15, sub_25A4F39AC, (uint64_t)v11);
  sub_25A391AF4((uint64_t)v6);
  swift_release();
  return v9;
}

uint64_t sub_25A4F138C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  *uint64_t v7 = v3;
  v7[1] = sub_25A38F608;
  uint64_t v9 = MEMORY[0x263F8E4E0];
  return MEMORY[0x270FA1FA8](a1, a2, a3, v8, v9);
}

void sub_25A4F1458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A489C78(a2, (uint64_t)v10);
  uint64_t v11 = (void *)swift_allocObject();
  _OWORD v11[2] = 0;
  v11[3] = 0;
  void v11[4] = a3;
  v11[5] = a4;
  void v11[6] = a1;
  swift_retain();
  swift_retain();
  uint64_t v12 = sub_25A38ED10((uint64_t)v10, (uint64_t)&unk_26A41BA68, (uint64_t)v11);
  long long v13 = 0uLL;
  swift_retain();
  Promise.observeCancelation(on:_:)(&v13, (uint64_t)sub_25A49A490, v12);
  swift_release_n();
  sub_25A3EE314(0);
}

uint64_t sub_25A4F1588(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6)
{
  v6[3] = a6;
  uint64_t v8 = *a6;
  uint64_t v9 = sub_25A50F270();
  v6[4] = v9;
  v6[5] = *(void *)(v9 - 8);
  v6[6] = swift_task_alloc();
  uint64_t v10 = *(void *)(v8 + 80);
  v6[7] = v10;
  void v6[8] = *(void *)(v10 - 8);
  uint64_t v11 = swift_task_alloc();
  v6[9] = v11;
  uint64_t v14 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v12 = (void *)swift_task_alloc();
  v6[10] = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_25A4F1740;
  return v14(v11);
}

uint64_t sub_25A4F1740()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25A4F18F4;
  }
  else {
    uint64_t v2 = sub_25A4F1854;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A4F1854()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  Promise.succeed(with:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_25A4F18F4()
{
  uint64_t v1 = *(void **)(v0 + 88);
  *(void *)(v0 + 16) = v1;
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  char v3 = swift_dynamicCast();
  uint64_t v4 = *(void **)(v0 + 88);
  if (v3)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 40) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
    sub_25A3BE494((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future.swift", 118, 2, 270, 39, (uint64_t)"init(dsoHandle:file:line:column:function:priority:operation:)", 61, 2);
  }
  else
  {
    Promise.fail(with:)(*(void **)(v0 + 88));
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_25A4F1A08()
{
  return sub_25A50F3A0();
}

uint64_t Sequence.select<A>()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_26A41B958);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 20) = 0;
  *(unsigned char *)(v6 + 16) = 0;
  type metadata accessor for Future();
  uint64_t v10 = a1;
  uint64_t v11 = a3;
  uint64_t v12 = v3;
  uint64_t v13 = v6;
  uint64_t v7 = sub_25A3BE3E4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future.swift", 118, 2, 290, 23, (uint64_t)"select()", 8, 2, (void (*)(uint64_t))sub_25A4F22BC, (uint64_t)v9);
  swift_release();
  return v7;
}

uint64_t sub_25A4F1B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, a4);
  sub_25A50EEF0();
  swift_getAssociatedConformanceWitness();
  sub_25A50FAF0();
  while (v19)
  {
    char v16 = (void *)swift_allocObject();
    v16[2] = a4;
    v16[3] = a5;
    v16[4] = a3;
    v16[5] = a1;
    swift_retain();
    swift_retain();
    swift_retain();
    Future.observeFinish(_:)((uint64_t)sub_25A4F3720, (uint64_t)v16);
    swift_release_n();
    swift_release();
    sub_25A50FAF0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v15, AssociatedTypeWitness);
}

void sub_25A4F1D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 80);
  uint64_t v18 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v8 = type metadata accessor for FutureTermination();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v17 - v10;
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 20));
  sub_25A4F1FB0((unsigned char *)(a2 + 16), &v19);
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 20));
  if (v19 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v13 = *(void **)v11;
        Promise.fail(with:)(*(void **)v11);
      }
      else
      {
        char v15 = v11[16];
        char v16 = v11[56];
        long long v19 = *(_OWORD *)v11;
        char v20 = v15;
        long long v21 = *(_OWORD *)(v11 + 24);
        long long v22 = *(_OWORD *)(v11 + 40);
        char v23 = v16;
        Promise.cancel(callsite:)(&v19);
      }
    }
    else
    {
      uint64_t v14 = v18;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v7, v11, v5);
      Promise.succeed(with:)((uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v5);
    }
  }
}

unsigned char *sub_25A4F1FB0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  if (*result)
  {
    *a2 = 0;
  }
  else
  {
    *uint64_t result = 1;
    *a2 = 1;
  }
  return result;
}

uint64_t sub_25A4F1FD0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  v10[0] = a1;
  v10[1] = a2;
  char v11 = a3;
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  uint64_t v15 = a7;
  char v16 = a8;
  return (*(uint64_t (**)(void *))(*(void *)v8 + 192))(v10);
}

uint64_t sub_25A4F2028(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)&long long v14 = a1;
  *((void *)&v14 + 1) = a2;
  char v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  char v20 = a8;
  _OWORD v13[2] = a9;
  v13[3] = a10;
  void v13[4] = a11;
  uint64_t v11 = sub_25A3BBFB0(&v14, sub_25A4F39AC, (uint64_t)v13);
  sub_25A391AF4(a9);
  return v11;
}

uint64_t sub_25A4F20A0(uint64_t a1)
{
  return sub_25A4F05C0(a1, v1);
}

uint64_t sub_25A4F20A8(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_25A38F608;
  return sub_25A4F0EE0(a1, v1);
}

uint64_t sub_25A4F2144()
{
  v2[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Future.swift";
  v2[1] = 118;
  char v3 = 2;
  long long v4 = xmmword_25A51CAE0;
  uint64_t v5 = "value";
  uint64_t v6 = 5;
  char v7 = 2;
  return (*(uint64_t (**)(void *))(*(void *)v0 + 192))(v2);
}

uint64_t type metadata accessor for Future()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4F21D8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A4F2210(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_25A3923B4;
  return sub_25A4F138C(a1, v4, v5);
}

uint64_t sub_25A4F22BC(uint64_t a1)
{
  return sub_25A4F1B00(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t sub_25A4F22C8()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for Future(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Future);
}

uint64_t dispatch thunk of Future.recentStateSnapshot.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of Future.succeededValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of Future.isCanceled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of Future.didFail.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of Future.runningTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of Future.cancel(dsoHandle:file:line:column:function:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t sub_25A4F2420()
{
  v2[4] = MEMORY[0x263F8CF50] + 64;
  uint64_t result = type metadata accessor for FutureTermination();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *sub_25A4F24D0(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = (char *)a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v5 + 64) <= 0x39uLL) {
    uint64_t v6 = 57;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if ((v6 & 0xFFFFFFFFFFFFFFF8) + 24 <= 8) {
    unint64_t v7 = 8;
  }
  else {
    unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  int v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || (v7 | 1) > 0x18)
  {
    uint64_t v10 = *(char **)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = &v10[(unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    unsigned int v11 = a2[v7];
    if ((v7 & 0xFFFFFFF8) != 0 && v11 >= 2) {
      unsigned int v11 = *(_DWORD *)a2 + 2;
    }
    if (v11 == 1)
    {
      unsigned int v13 = a2[v6];
      unsigned int v14 = v13 - 3;
      if (v13 >= 3)
      {
        if (v6 <= 3) {
          uint64_t v15 = v6;
        }
        else {
          uint64_t v15 = 4;
        }
        switch(v15)
        {
          case 1:
            int v16 = *a2;
            if (v6 < 4) {
              goto LABEL_31;
            }
            goto LABEL_33;
          case 2:
            int v16 = *(unsigned __int16 *)a2;
            if (v6 >= 4) {
              goto LABEL_33;
            }
            goto LABEL_31;
          case 3:
            int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            if (v6 < 4) {
              goto LABEL_31;
            }
            goto LABEL_33;
          case 4:
            int v16 = *(_DWORD *)a2;
            if (v6 < 4) {
LABEL_31:
            }
              unsigned int v13 = (v16 | (v14 << (8 * v6))) + 3;
            else {
LABEL_33:
            }
              unsigned int v13 = v16 + 3;
            break;
          default:
            break;
        }
      }
      if (v13 == 2)
      {
        long long v20 = *((_OWORD *)a2 + 1);
        *a1 = *(_OWORD *)a2;
        a1[1] = v20;
        a1[2] = *((_OWORD *)a2 + 2);
        *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)(a2 + 41);
        char v19 = 2;
      }
      else if (v13 == 1)
      {
        uint64_t v17 = *(void *)a2;
        id v18 = *(id *)a2;
        *(void *)uint64_t v4 = v17;
        char v19 = 1;
      }
      else
      {
        (*(void (**)(_OWORD *, unsigned __int8 *))(v5 + 16))(a1, a2);
        char v19 = 0;
      }
      v4[v6] = v19;
      *(_OWORD *)((unint64_t)&v4[v6 + 8] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v6 + 8] & 0xFFFFFFFFFFFFFFF8);
      v4[v7] = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *((unsigned char *)a1 + v7) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

void sub_25A4F2720(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x39) {
    unint64_t v2 = 57;
  }
  unint64_t v3 = 8;
  if ((v2 & 0xFFFFFFFFFFFFFFF8) + 24 > 8) {
    unint64_t v3 = (v2 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  unsigned int v4 = a1[v3];
  uint64_t v5 = v3 & 0xFFFFFFF8;
  if (v4 >= 2 && v5 != 0) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  if (v4 == 1)
  {
    unsigned int v7 = a1[v2];
    unsigned int v8 = v7 - 3;
    if (v7 >= 3)
    {
      if (v2 <= 3) {
        uint64_t v9 = v2;
      }
      else {
        uint64_t v9 = 4;
      }
      switch(v9)
      {
        case 1:
          int v10 = *a1;
          goto LABEL_21;
        case 2:
          int v10 = *(unsigned __int16 *)a1;
          goto LABEL_21;
        case 3:
          int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_21;
        case 4:
          int v10 = *(_DWORD *)a1;
LABEL_21:
          int v11 = (v10 | (v8 << (8 * v2))) + 3;
          unsigned int v7 = v10 + 3;
          if (v2 < 4) {
            unsigned int v7 = v11;
          }
          break;
        default:
          break;
      }
    }
    if (v7 != 2)
    {
      if (v7 == 1) {

      }
      else {
        (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

_OWORD *sub_25A4F286C(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x39uLL) {
    uint64_t v5 = 57;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if ((v5 & 0xFFFFFFFFFFFFFFF8) + 24 <= 8) {
    unint64_t v6 = 8;
  }
  else {
    unint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  unsigned int v7 = a2[v6];
  if (v7 >= 2 && (v6 & 0xFFFFFFF8) != 0) {
    unsigned int v7 = *(_DWORD *)a2 + 2;
  }
  if (v7 == 1)
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 3;
    if (v9 >= 3)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          if (v5 < 4) {
            goto LABEL_24;
          }
          goto LABEL_26;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          if (v5 >= 4) {
            goto LABEL_26;
          }
          goto LABEL_24;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v5 < 4) {
            goto LABEL_24;
          }
          goto LABEL_26;
        case 4:
          int v12 = *(_DWORD *)a2;
          if (v5 < 4) {
LABEL_24:
          }
            unsigned int v9 = (v12 | (v10 << (8 * v5))) + 3;
          else {
LABEL_26:
          }
            unsigned int v9 = v12 + 3;
          break;
        default:
          break;
      }
    }
    if (v9 == 2)
    {
      long long v16 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v16;
      a1[2] = *((_OWORD *)a2 + 2);
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)(a2 + 41);
      char v15 = 2;
    }
    else if (v9 == 1)
    {
      uint64_t v13 = *(void *)a2;
      id v14 = *(id *)a2;
      *(void *)a1 = v13;
      char v15 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, a2);
      char v15 = 0;
    }
    *((unsigned char *)a1 + v5) = v15;
    *(_OWORD *)(((unint64_t)a1 + v5 + 8) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v5 + 8] & 0xFFFFFFFFFFFFFFF8);
    *((unsigned char *)a1 + v6) = 1;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *((unsigned char *)a1 + v6) = 0;
    swift_bridgeObjectRetain();
  }
  return a1;
}

unsigned __int8 *sub_25A4F2A7C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x39uLL) {
      uint64_t v7 = 57;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    if ((v7 & 0xFFFFFFFFFFFFFFF8) + 24 <= 8) {
      unint64_t v8 = 8;
    }
    else {
      unint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    unsigned int v9 = a1[v8];
    if (v9 >= 2 && (v8 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = *(_DWORD *)a1 + 2;
    }
    if (v9 == 1)
    {
      unsigned int v11 = a1[v7];
      unsigned int v12 = v11 - 3;
      if (v11 >= 3)
      {
        if (v7 <= 3) {
          uint64_t v13 = v7;
        }
        else {
          uint64_t v13 = 4;
        }
        switch(v13)
        {
          case 1:
            int v14 = *a1;
            if (v7 < 4) {
              goto LABEL_25;
            }
            goto LABEL_27;
          case 2:
            int v14 = *(unsigned __int16 *)a1;
            if (v7 >= 4) {
              goto LABEL_27;
            }
            goto LABEL_25;
          case 3:
            int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v7 < 4) {
              goto LABEL_25;
            }
            goto LABEL_27;
          case 4:
            int v14 = *(_DWORD *)a1;
            if (v7 < 4) {
LABEL_25:
            }
              unsigned int v11 = (v14 | (v12 << (8 * v7))) + 3;
            else {
LABEL_27:
            }
              unsigned int v11 = v14 + 3;
            break;
          default:
            break;
        }
      }
      if (v11 != 2)
      {
        if (v11 == 1) {

        }
        else {
          (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v15 = a2[v8];
    if ((v8 & 0xFFFFFFF8) != 0 && v15 >= 2) {
      unsigned int v15 = *(_DWORD *)a2 + 2;
    }
    if (v15 == 1)
    {
      unsigned int v17 = a2[v7];
      unsigned int v18 = v17 - 3;
      if (v17 >= 3)
      {
        if (v7 <= 3) {
          uint64_t v19 = v7;
        }
        else {
          uint64_t v19 = 4;
        }
        switch(v19)
        {
          case 1:
            int v20 = *a2;
            if (v7 < 4) {
              goto LABEL_50;
            }
            goto LABEL_52;
          case 2:
            int v20 = *(unsigned __int16 *)a2;
            if (v7 >= 4) {
              goto LABEL_52;
            }
            goto LABEL_50;
          case 3:
            int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            if (v7 < 4) {
              goto LABEL_50;
            }
            goto LABEL_52;
          case 4:
            int v20 = *(_DWORD *)a2;
            if (v7 < 4) {
LABEL_50:
            }
              unsigned int v17 = (v20 | (v18 << (8 * v7))) + 3;
            else {
LABEL_52:
            }
              unsigned int v17 = v20 + 3;
            break;
          default:
            break;
        }
      }
      if (v17 == 2)
      {
        long long v24 = *(_OWORD *)a2;
        long long v25 = *((_OWORD *)a2 + 1);
        long long v26 = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
        *((_OWORD *)a1 + 1) = v25;
        *((_OWORD *)a1 + 2) = v26;
        *(_OWORD *)a1 = v24;
        char v23 = 2;
      }
      else if (v17 == 1)
      {
        uint64_t v21 = *(void *)a2;
        id v22 = *(id *)a2;
        *(void *)a1 = v21;
        char v23 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        char v23 = 0;
      }
      a1[v7] = v23;
      *(_OWORD *)((unint64_t)&a1[v7 + 8] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
      a1[v8] = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      a1[v8] = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

_OWORD *sub_25A4F2DA8(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x39uLL) {
    uint64_t v5 = 57;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if ((v5 & 0xFFFFFFFFFFFFFFF8) + 24 <= 8) {
    unint64_t v6 = 8;
  }
  else {
    unint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  unsigned int v7 = a2[v6];
  if (v7 >= 2 && (v6 & 0xFFFFFFF8) != 0) {
    unsigned int v7 = *(_DWORD *)a2 + 2;
  }
  if (v7 == 1)
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 3;
    if (v9 >= 3)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          if (v5 < 4) {
            goto LABEL_24;
          }
          goto LABEL_26;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          if (v5 >= 4) {
            goto LABEL_26;
          }
          goto LABEL_24;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v5 < 4) {
            goto LABEL_24;
          }
          goto LABEL_26;
        case 4:
          int v12 = *(_DWORD *)a2;
          if (v5 < 4) {
LABEL_24:
          }
            unsigned int v9 = (v12 | (v10 << (8 * v5))) + 3;
          else {
LABEL_26:
          }
            unsigned int v9 = v12 + 3;
          break;
        default:
          break;
      }
    }
    if (v9 == 2)
    {
      long long v15 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v15;
      a1[2] = *((_OWORD *)a2 + 2);
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)(a2 + 41);
      char v14 = 2;
    }
    else if (v9 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v14 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1, a2);
      char v14 = 0;
    }
    *((unsigned char *)a1 + v5) = v14;
    *(_OWORD *)(((unint64_t)a1 + v5 + 8) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v5 + 8] & 0xFFFFFFFFFFFFFFF8);
    char v13 = 1;
  }
  else
  {
    char v13 = 0;
    *(void *)a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v6) = v13;
  return a1;
}

unsigned __int8 *sub_25A4F2FAC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x39uLL) {
      uint64_t v7 = 57;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    if ((v7 & 0xFFFFFFFFFFFFFFF8) + 24 <= 8) {
      unint64_t v8 = 8;
    }
    else {
      unint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    unsigned int v9 = a1[v8];
    if (v9 >= 2 && (v8 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = *(_DWORD *)a1 + 2;
    }
    if (v9 == 1)
    {
      unsigned int v11 = a1[v7];
      unsigned int v12 = v11 - 3;
      if (v11 >= 3)
      {
        if (v7 <= 3) {
          uint64_t v13 = v7;
        }
        else {
          uint64_t v13 = 4;
        }
        switch(v13)
        {
          case 1:
            int v14 = *a1;
            if (v7 < 4) {
              goto LABEL_25;
            }
            goto LABEL_27;
          case 2:
            int v14 = *(unsigned __int16 *)a1;
            if (v7 >= 4) {
              goto LABEL_27;
            }
            goto LABEL_25;
          case 3:
            int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v7 < 4) {
              goto LABEL_25;
            }
            goto LABEL_27;
          case 4:
            int v14 = *(_DWORD *)a1;
            if (v7 < 4) {
LABEL_25:
            }
              unsigned int v11 = (v14 | (v12 << (8 * v7))) + 3;
            else {
LABEL_27:
            }
              unsigned int v11 = v14 + 3;
            break;
          default:
            break;
        }
      }
      if (v11 != 2)
      {
        if (v11 == 1) {

        }
        else {
          (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v15 = a2[v8];
    if ((v8 & 0xFFFFFFF8) != 0 && v15 >= 2) {
      unsigned int v15 = *(_DWORD *)a2 + 2;
    }
    if (v15 == 1)
    {
      unsigned int v17 = a2[v7];
      unsigned int v18 = v17 - 3;
      if (v17 >= 3)
      {
        if (v7 <= 3) {
          uint64_t v19 = v7;
        }
        else {
          uint64_t v19 = 4;
        }
        switch(v19)
        {
          case 1:
            int v20 = *a2;
            if (v7 < 4) {
              goto LABEL_50;
            }
            goto LABEL_52;
          case 2:
            int v20 = *(unsigned __int16 *)a2;
            if (v7 >= 4) {
              goto LABEL_52;
            }
            goto LABEL_50;
          case 3:
            int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            if (v7 < 4) {
              goto LABEL_50;
            }
            goto LABEL_52;
          case 4:
            int v20 = *(_DWORD *)a2;
            if (v7 < 4) {
LABEL_50:
            }
              unsigned int v17 = (v20 | (v18 << (8 * v7))) + 3;
            else {
LABEL_52:
            }
              unsigned int v17 = v20 + 3;
            break;
          default:
            break;
        }
      }
      if (v17 == 2)
      {
        long long v23 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v23;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
        char v22 = 2;
      }
      else if (v17 == 1)
      {
        *(void *)a1 = *(void *)a2;
        char v22 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        char v22 = 0;
      }
      a1[v7] = v22;
      *(_OWORD *)((unint64_t)&a1[v7 + 8] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
      char v21 = 1;
    }
    else
    {
      char v21 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v8] = v21;
  }
  return a1;
}

uint64_t sub_25A4F32CC(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v3 <= 0x39) {
    unint64_t v3 = 57;
  }
  unint64_t v4 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v4 <= 8) {
    unint64_t v4 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 | 1;
  char v6 = 8 * (v4 | 1);
  if ((v4 | 1) <= 3)
  {
    unsigned int v7 = (a2 + ~(-1 << v6) - 254) >> v6;
    if (v7 > 0xFFFE)
    {
      int v8 = *(_DWORD *)&a1[v5];
      if (!v8) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }
    if (v7 > 0xFE)
    {
      int v8 = *(unsigned __int16 *)&a1[v5];
      if (!*(_WORD *)&a1[v5]) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }
    if (!v7) {
      goto LABEL_22;
    }
  }
  int v8 = a1[v5];
  if (!a1[v5])
  {
LABEL_22:
    unsigned int v12 = a1[v4];
    if (v12 >= 2) {
      return (v12 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
LABEL_15:
  int v10 = (v8 - 1) << v6;
  if (v5 >= 4) {
    int v10 = 0;
  }
  if (v5 == 1) {
    int v11 = *a1;
  }
  else {
    int v11 = *(_DWORD *)a1;
  }
  return (v11 | v10) + 255;
}

void sub_25A4F33B8(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x39) {
    unint64_t v5 = 57;
  }
  unint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v6 <= 8) {
    unint64_t v6 = 8;
  }
  size_t v7 = v6 | 1;
  if (a3 < 0xFF)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = (a3 + ~(-1 << (8 * v7)) - 254) >> (8 * v7);
    if (v11 > 0xFFFE)
    {
      int v8 = 4;
    }
    else if (v11 >= 0xFF)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 != 0;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 <= 0xFE)
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_33;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          a1[v6] = -(char)a2;
        break;
    }
    return;
  }
  unsigned int v9 = a2 - 255;
  if (v7 < 4)
  {
    int v10 = (v9 >> (8 * v7)) + 1;
    v9 &= ~(-1 << (8 * v7));
    bzero(a1, v7);
    if (v7 == 1)
    {
      *a1 = v9;
      goto LABEL_22;
    }
  }
  else
  {
    bzero(a1, v6 | 1);
    int v10 = 1;
  }
  *(_DWORD *)a1 = v9;
LABEL_22:
  switch(v8)
  {
    case 1:
      a1[v7] = v10;
      break;
    case 2:
      *(_WORD *)&a1[v7] = v10;
      break;
    case 3:
LABEL_33:
      __break(1u);
      JUMPOUT(0x25A4F3574);
    case 4:
      *(_DWORD *)&a1[v7] = v10;
      break;
    default:
      return;
  }
}

uint64_t sub_25A4F359C(_DWORD *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x39) {
    unint64_t v2 = 57;
  }
  unint64_t v3 = (v2 & 0xFFFFFFFFFFFFFFF8) + 24;
  uint64_t v4 = 8;
  if (v3 > 8) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = *((unsigned __int8 *)a1 + v4);
  uint64_t v6 = v4 & 0xFFFFFFF8;
  if (v5 >= 2 && v6 != 0) {
    return (*a1 + 2);
  }
  return v5;
}

void sub_25A4F35F8(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v4 <= 0x39) {
    unint64_t v4 = 57;
  }
  size_t v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v5 <= 8) {
    size_t v5 = 8;
  }
  if (a2 > 1)
  {
    if (v5) {
      char v6 = 2;
    }
    else {
      char v6 = a2;
    }
    if (v5) {
      unsigned int v7 = a2 - 2;
    }
    else {
      unsigned int v7 = 0;
    }
    a1[v5] = v6;
    bzero(a1, v5);
    *(_DWORD *)a1 = v7;
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t sub_25A4F3688@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_25A4F010C(a1, v2[3], v2[4], v2[5], a2);
}

uint64_t sub_25A4F36A8(uint64_t (**a1)(void))
{
  return (*a1)(*(void *)(v1 + 24));
}

uint64_t sub_25A4F36E0()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

void sub_25A4F3720(uint64_t a1)
{
  sub_25A4F1D64(a1, *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_25A4F372C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A4F3764(uint64_t a1)
{
  return sub_25A4F0824(a1, *(uint64_t (**)(char *))(v1 + 24));
}

uint64_t sub_25A4F3770()
{
  type metadata accessor for FutureTermination();
  uint64_t v1 = sub_25A50F260();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A4F3820(uint64_t a1)
{
  type metadata accessor for FutureTermination();
  sub_25A50F260();

  return sub_25A4F07B4(a1);
}

uint64_t sub_25A4F38C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FutureTermination();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v6 - v3, a1, v2);
  sub_25A50F260();
  return sub_25A50F250();
}

void sub_25A4F39AC(uint64_t a1)
{
  sub_25A4F1458(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_25A4F39B8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A4F3A00(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  int v8 = (uint64_t *)v1[6];
  unsigned int v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *unsigned int v9 = v2;
  v9[1] = sub_25A38F608;
  return sub_25A4F1588(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_25A4F3AC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A4EFE6C(a1, v2[3], v2[4], v2[2], a2);
}

uint64_t WeakSet.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Weak();
  uint64_t v3 = sub_25A50F120();
  if (MEMORY[0x26113D1C0](v3, v2))
  {
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v5 = sub_25A4F443C(v3, v2, WitnessTable);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE88];
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v5;
  return result;
}

uint64_t WeakSet.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  void v14[2] = a2;
  void v14[3] = a3;
  _OWORD v14[4] = a4;
  unsigned int v9 = (char *)type metadata accessor for Weak();
  v14[6] = sub_25A4E8930((void (*)(char *, char *))sub_25A44021C, (uint64_t)v14, a3, v9, MEMORY[0x263F8E628], a4, MEMORY[0x263F8E658], v10);
  uint64_t v11 = sub_25A50F1E0();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v12 = Collection<>.uniqued()(v11);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  uint64_t result = swift_bridgeObjectRelease();
  *a5 = v12;
  return result;
}

uint64_t WeakSet.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = a1;
  uint64_t v5 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = WeakSet.init<A>(_:)((uint64_t)&v8, a2, v5, WitnessTable, &v9);
  *a3 = v9;
  return result;
}

uint64_t WeakSet.array.getter()
{
  type metadata accessor for Weak();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_25A50F530();
  swift_getWitnessTable();
  uint64_t v0 = sub_25A50EF30();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t WeakSet.startIndex.getter(uint64_t a1)
{
  return sub_25A4F3E64(a1, MEMORY[0x263F8D650]);
}

uint64_t WeakSet.endIndex.getter(uint64_t a1)
{
  return sub_25A4F3E64(a1, MEMORY[0x263F8D678]);
}

uint64_t sub_25A4F3E64(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for Weak();
  uint64_t WitnessTable = swift_getWitnessTable();
  return a2(v4, v5, WitnessTable);
}

uint64_t WeakSet.index(after:)()
{
  return sub_25A50F4A0();
}

uint64_t WeakSet.subscript.getter()
{
  type metadata accessor for Weak();
  swift_getWitnessTable();
  sub_25A50F550();
  swift_beginAccess();
  uint64_t v0 = MEMORY[0x26113F1A0](v2 + 16);
  swift_release();
  return v0;
}

uint64_t WeakSet.insert(_:)()
{
  return swift_release();
}

uint64_t WeakSet.remove(_:)()
{
  return swift_release();
}

uint64_t sub_25A4F4164@<X0>(uint64_t a1@<X8>)
{
  return sub_25A4F4194((uint64_t (*)(void))WeakSet.startIndex.getter, a1);
}

uint64_t sub_25A4F417C@<X0>(uint64_t a1@<X8>)
{
  return sub_25A4F4194((uint64_t (*)(void))WeakSet.endIndex.getter, a1);
}

uint64_t sub_25A4F4194@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5 & 1;
  return result;
}

void (*sub_25A4F41C8(uint64_t **a1))(void *a1)
{
  uint64_t v2 = (uint64_t *)malloc(0x30uLL);
  *a1 = v2;
  uint64_t v3 = sub_25A4F4240(v2);
  v2[4] = v4;
  v2[5] = (uint64_t)v3;
  return sub_25A440060;
}

uint64_t (*sub_25A4F4240(uint64_t *a1))()
{
  *a1 = WeakSet.subscript.getter();
  return sub_25A4400F4;
}

uint64_t sub_25A4F4298@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = WeakSet.index(after:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_25A4F42D8(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = WeakSet.index(after:)();
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t result = sub_25A3ACF28(v2, v3, v4);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v9 & 1;
  return result;
}

uint64_t sub_25A4F4354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t result = WeakSet.startIndex.getter(a1);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 24) = v7 & 1;
  return result;
}

uint64_t sub_25A4F4394(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_25A4F43E8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_25A4F443C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  char v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v51 = (char *)&v39 - v11;
  uint64_t v40 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  unsigned int v15 = (char *)&v39 - v14;
  if (MEMORY[0x26113D160](v13))
  {
    sub_25A50FD70();
    uint64_t v16 = sub_25A50FD60();
  }
  else
  {
    uint64_t v16 = MEMORY[0x263F8EE88];
  }
  uint64_t v44 = MEMORY[0x26113D1C0](v5, a2);
  if (!v44) {
    return v16;
  }
  uint64_t v17 = 0;
  uint64_t v49 = (void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
  uint64_t v50 = v16 + 56;
  uint64_t v46 = v6 + 32;
  uint64_t v48 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v41 = v6;
  uint64_t v42 = v5;
  uint64_t v43 = v15;
  while (1)
  {
    char v18 = sub_25A50F140();
    sub_25A50F0D0();
    if (v18)
    {
      uint64_t v19 = *(void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
      v19(v15, (uint64_t *)(v5+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v17), a2);
      BOOL v20 = __OFADD__(v17, 1);
      uint64_t v21 = v17 + 1;
      if (v20) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t result = sub_25A50FE20();
      if (v40 != 8) {
        goto LABEL_23;
      }
      uint64_t v52 = result;
      uint64_t v19 = *v49;
      (*v49)(v15, &v52, a2);
      swift_unknownObjectRelease();
      BOOL v20 = __OFADD__(v17, 1);
      uint64_t v21 = v17 + 1;
      if (v20)
      {
LABEL_20:
        __break(1u);
        return v16;
      }
    }
    uint64_t v47 = v21;
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v45(v51, v15, a2);
    uint64_t v22 = sub_25A50EA10();
    uint64_t v23 = v16;
    uint64_t v24 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v25 = v22 & ~v24;
    unint64_t v26 = v25 >> 6;
    uint64_t v27 = *(void *)(v50 + 8 * (v25 >> 6));
    uint64_t v28 = 1 << v25;
    uint64_t v29 = *(void *)(v6 + 72);
    if (((1 << v25) & v27) != 0)
    {
      uint64_t v30 = ~v24;
      do
      {
        v19(v9, (uint64_t *)(*(void *)(v23 + 48) + v29 * v25), a2);
        uint64_t v31 = a3;
        char v32 = sub_25A50EBE0();
        uint64_t v33 = *v48;
        (*v48)(v9, a2);
        if (v32)
        {
          v33(v51, a2);
          a3 = v31;
          uint64_t v6 = v41;
          uint64_t v5 = v42;
          uint64_t v16 = v23;
          goto LABEL_7;
        }
        unint64_t v25 = (v25 + 1) & v30;
        unint64_t v26 = v25 >> 6;
        uint64_t v27 = *(void *)(v50 + 8 * (v25 >> 6));
        uint64_t v28 = 1 << v25;
        a3 = v31;
      }
      while ((v27 & (1 << v25)) != 0);
      uint64_t v6 = v41;
      uint64_t v5 = v42;
    }
    int v34 = v51;
    *(void *)(v50 + 8 * v26) = v28 | v27;
    unint64_t v35 = *(void *)(v23 + 48) + v29 * v25;
    uint64_t v16 = v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v45)(v35, v34, a2);
    uint64_t v37 = *(void *)(v23 + 16);
    BOOL v20 = __OFADD__(v37, 1);
    uint64_t v38 = v37 + 1;
    if (v20) {
      break;
    }
    *(void *)(v23 + 16) = v38;
LABEL_7:
    unsigned int v15 = v43;
    uint64_t v17 = v47;
    if (v47 == v44) {
      return v16;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_25A4F47F8()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4F4814()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for WeakSet()
{
  return __swift_instantiateGenericMetadata();
}

void CrashReportError.ConditionInFileError.init(report:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CrashReportError.ConditionInFileError();
  uint64_t v65 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CrashReport(0);
  if (*(void *)(a1 + *(int *)(v7 + 36)))
  {
    uint64_t v8 = v7;
    uint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v10 = sub_25A4F4E34(v9);
    if (*(void *)(v10 + 16))
    {
      uint64_t v62 = 0;
      uint64_t v63 = v4;
      uint64_t v64 = a2;
      uint64_t v11 = *(void *)(v10 + 40);
      uint64_t v12 = *(void *)(v10 + 48);
      uint64_t v13 = *(void **)(v10 + 64);
      unsigned __int8 v14 = *(unsigned char *)(v10 + 56);
      id v15 = *(id *)(v10 + 32);
      sub_25A385D94(v11, v12, v14);
      id v16 = v13;
      swift_bridgeObjectRelease();
      uint64_t v17 = v15;
      swift_bridgeObjectRelease();
      char v18 = (void *)(a1 + *(int *)(v8 + 20));
      uint64_t v19 = v18[1];
      *(void *)uint64_t v6 = *v18;
      *((void *)v6 + 1) = v19;
      *((void *)v6 + 2) = v11;
      *((void *)v6 + 3) = v12;
      v6[32] = v14;
      swift_bridgeObjectRetain();
      BOOL v20 = (void *)sub_25A50EBF0();
      id v21 = objc_msgSend(v16, sel_rangeWithName_, v20);
      uint64_t v23 = v22;

      id v24 = objc_msgSend(v15, sel_substringWithRange_, v21, v23);
      uint64_t v25 = sub_25A50EC20();
      uint64_t v27 = v26;

      uint64_t v66 = v25;
      uint64_t v67 = v27;
      *((void *)v6 + 5) = sub_25A50EED0();
      *((void *)v6 + 6) = v28;
      uint64_t v29 = (void *)sub_25A50EBF0();
      id v30 = objc_msgSend(v16, sel_rangeWithName_, v29);
      uint64_t v32 = v31;

      id v33 = objc_msgSend(v15, sel_substringWithRange_, v30, v32);
      uint64_t v34 = sub_25A50EC20();
      unint64_t v36 = v35;

      uint64_t v37 = HIBYTE(v36) & 0xF;
      uint64_t v38 = v34 & 0xFFFFFFFFFFFFLL;
      if ((v36 & 0x2000000000000000) != 0) {
        uint64_t v39 = HIBYTE(v36) & 0xF;
      }
      else {
        uint64_t v39 = v34 & 0xFFFFFFFFFFFFLL;
      }
      if (!v39)
      {

        swift_bridgeObjectRelease();
        uint64_t v57 = 0;
        char v56 = 1;
        uint64_t v41 = v63;
        uint64_t v42 = v64;
LABEL_53:
        *((void *)v6 + 7) = v57;
        v6[64] = v56 & 1;
        sub_25A4F5B68(a1, (uint64_t)&v6[*(int *)(v41 + 32)], type metadata accessor for CrashReport);
        sub_25A4F5B68((uint64_t)v6, v42, (uint64_t (*)(void))type metadata accessor for CrashReportError.ConditionInFileError);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v42, 0, 1, v41);
        return;
      }
      uint64_t v40 = v16;
      uint64_t v41 = v63;
      uint64_t v42 = v64;
      if ((v36 & 0x1000000000000000) != 0)
      {
        uint64_t v44 = (uint64_t)sub_25A4F5A80(v34, v36, 10);
        LOBYTE(v34) = v61;
LABEL_50:

        swift_bridgeObjectRelease();
        char v56 = v34 & 1;
        if (v34) {
          uint64_t v57 = 0;
        }
        else {
          uint64_t v57 = v44;
        }
        goto LABEL_53;
      }
      if ((v36 & 0x2000000000000000) == 0)
      {
        if ((v34 & 0x1000000000000000) != 0) {
          uint64_t v43 = (unsigned __int8 *)((v36 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          uint64_t v43 = (unsigned __int8 *)sub_25A50FE60();
        }
        uint64_t v44 = (uint64_t)sub_25A4F5BD0(v43, v38, 10);
        LOBYTE(v34) = v45 & 1;
        goto LABEL_50;
      }
      uint64_t v66 = v34;
      uint64_t v67 = v36 & 0xFFFFFFFFFFFFFFLL;
      if (v34 == 43)
      {
        if (!v37)
        {
LABEL_64:
          __break(1u);
          return;
        }
        if (v37 == 1 || (BYTE1(v34) - 48) > 9u) {
          goto LABEL_37;
        }
        uint64_t v44 = (BYTE1(v34) - 48);
        if (v37 != 2)
        {
          if ((BYTE2(v34) - 48) > 9u) {
            goto LABEL_37;
          }
          uint64_t v44 = 10 * (BYTE1(v34) - 48) + (BYTE2(v34) - 48);
          uint64_t v47 = v37 - 3;
          if (v47)
          {
            uint64_t v48 = (unsigned __int8 *)&v66 + 3;
            while (1)
            {
              unsigned int v49 = *v48 - 48;
              if (v49 > 9) {
                goto LABEL_37;
              }
              uint64_t v50 = 10 * v44;
              if ((unsigned __int128)(v44 * (__int128)10) >> 64 != (10 * v44) >> 63) {
                goto LABEL_37;
              }
              uint64_t v44 = v50 + v49;
              if (__OFADD__(v50, v49)) {
                goto LABEL_37;
              }
              LOBYTE(v34) = 0;
              ++v48;
              if (!--v47) {
                goto LABEL_50;
              }
            }
          }
        }
      }
      else
      {
        if (v34 == 45)
        {
          if (v37)
          {
            if (v37 != 1 && (BYTE1(v34) - 48) <= 9u)
            {
              if (v37 == 2)
              {
                LOBYTE(v34) = 0;
                uint64_t v44 = -(uint64_t)(BYTE1(v34) - 48);
                goto LABEL_50;
              }
              if ((BYTE2(v34) - 48) <= 9u)
              {
                uint64_t v44 = -10 * (BYTE1(v34) - 48) - (BYTE2(v34) - 48);
                uint64_t v55 = v37 - 3;
                if (!v55) {
                  goto LABEL_49;
                }
                uint64_t v58 = (unsigned __int8 *)&v66 + 3;
                while (1)
                {
                  unsigned int v59 = *v58 - 48;
                  if (v59 > 9) {
                    break;
                  }
                  uint64_t v60 = 10 * v44;
                  if ((unsigned __int128)(v44 * (__int128)10) >> 64 != (10 * v44) >> 63) {
                    break;
                  }
                  uint64_t v44 = v60 - v59;
                  if (__OFSUB__(v60, v59)) {
                    break;
                  }
                  LOBYTE(v34) = 0;
                  ++v58;
                  if (!--v55) {
                    goto LABEL_50;
                  }
                }
              }
            }
LABEL_37:
            uint64_t v44 = 0;
            LOBYTE(v34) = 1;
            goto LABEL_50;
          }
          __break(1u);
          goto LABEL_64;
        }
        if (!v37 || (v34 - 48) > 9u) {
          goto LABEL_37;
        }
        uint64_t v44 = (v34 - 48);
        if (v37 != 1)
        {
          if ((BYTE1(v34) - 48) > 9u) {
            goto LABEL_37;
          }
          uint64_t v44 = 10 * (v34 - 48) + (BYTE1(v34) - 48);
          uint64_t v51 = v37 - 2;
          if (v51)
          {
            uint64_t v52 = (unsigned __int8 *)&v66 + 2;
            while (1)
            {
              unsigned int v53 = *v52 - 48;
              if (v53 > 9) {
                goto LABEL_37;
              }
              uint64_t v54 = 10 * v44;
              if ((unsigned __int128)(v44 * (__int128)10) >> 64 != (10 * v44) >> 63) {
                goto LABEL_37;
              }
              uint64_t v44 = v54 + v53;
              if (__OFADD__(v54, v53)) {
                goto LABEL_37;
              }
              LOBYTE(v34) = 0;
              ++v52;
              if (!--v51) {
                goto LABEL_50;
              }
            }
          }
        }
      }
LABEL_49:
      LOBYTE(v34) = 0;
      goto LABEL_50;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_25A3ECEE4(a1);
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56);

  v46(a2, 1, 1, v4);
}

uint64_t sub_25A4F4E34(uint64_t a1)
{
  uint64_t v55 = a1 + 64;
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v56 = (unint64_t)(v1 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v5 = 0;
  uint64_t v6 = &unk_26A41B000;
  uint64_t v54 = (void *)MEMORY[0x263F8EE78];
  if (!v3) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v7 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  for (unint64_t i = v7 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v10)) + (v5 << 6))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      unint64_t v58 = v3;
      swift_bridgeObjectRetain_n();
      uint64_t v14 = v12 + 40;
      id v15 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        swift_bridgeObjectRetain();
        id v16 = (void *)sub_25A50EBF0();
        if (qword_26A4156A8 == -1)
        {
          uint64_t v17 = (void *)v6[350];
          if (!v17) {
            goto LABEL_25;
          }
        }
        else
        {
          swift_once();
          uint64_t v17 = (void *)v6[350];
          if (!v17)
          {
LABEL_25:
            swift_bridgeObjectRelease();

            goto LABEL_26;
          }
        }
        id v18 = v17;
        uint64_t v19 = (void *)sub_25A50EBF0();
        id v20 = objc_msgSend(v18, sel_firstMatchInString_options_range_, v19, 0, 0, sub_25A50ED50());

        if (v20)
        {
          uint64_t v63 = v18;
          uint64_t v65 = v16;
          uint64_t v64 = v15;
          id v21 = (void *)sub_25A50EBF0();
          id v22 = objc_msgSend(v20, sel_rangeWithName_, v21);
          uint64_t v24 = v23;

          if (v24 <= 0)
          {
            uint64_t v61 = 0;
            uint64_t v62 = 0;
          }
          else
          {
            id v25 = objc_msgSend(v65, sel_substringWithRange_, v22, v24);
            sub_25A50EC20();

            uint64_t v61 = sub_25A50EED0();
            uint64_t v62 = v26;
          }
          uint64_t v27 = (void *)sub_25A50EBF0();
          id v28 = objc_msgSend(v20, sel_rangeWithName_, v27);
          uint64_t v30 = v29;

          id v31 = objc_msgSend(v65, sel_substringWithRange_, v28, v30);
          sub_25A50EC20();

          uint64_t v32 = sub_25A50EED0();
          uint64_t v34 = sub_25A4F5E4C(v32, v33, v61, v62);
          uint64_t v36 = v35;
          char v38 = v37;
          int v39 = ~v37;
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v39)
          {

            uint64_t v6 = (void *)&unk_26A41B000;
            id v15 = v64;
            goto LABEL_26;
          }
          id v15 = v64;
          uint64_t v40 = v34;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v15 = sub_25A38A7DC(0, v64[2] + 1, 1, v64);
          }
          unint64_t v42 = v15[2];
          unint64_t v41 = v15[3];
          if (v42 >= v41 >> 1) {
            id v15 = sub_25A38A7DC((void *)(v41 > 1), v42 + 1, 1, v15);
          }
          void v15[2] = v42 + 1;
          uint64_t v43 = &v15[5 * v42];
          v43[4] = v65;
          v43[5] = v40;
          v43[6] = v36;
          *((unsigned char *)v43 + 56) = v38;
          v43[8] = v20;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v6 = (void *)&unk_26A41B000;
LABEL_26:
        v14 += 16;
        if (!--v13)
        {
          swift_bridgeObjectRelease_n();
          unint64_t v3 = v58;
          if (!v15[2]) {
            goto LABEL_6;
          }
LABEL_45:
          unint64_t v59 = v3;
          int64_t v60 = v5;
          uint64_t v44 = (void *)v15[4];
          uint64_t v45 = v15[5];
          uint64_t v46 = v15[6];
          unsigned __int8 v47 = *((unsigned char *)v15 + 56);
          uint64_t v48 = (void *)v15[8];
          id v49 = v44;
          sub_25A385D94(v45, v46, v47);
          id v50 = v48;
          swift_bridgeObjectRelease();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_25A38A7DC(0, v54[2] + 1, 1, v54);
            uint64_t v54 = (void *)result;
          }
          unint64_t v52 = v54[2];
          unint64_t v51 = v54[3];
          if (v52 >= v51 >> 1)
          {
            uint64_t result = (uint64_t)sub_25A38A7DC((void *)(v51 > 1), v52 + 1, 1, v54);
            uint64_t v54 = (void *)result;
          }
          _OWORD v54[2] = v52 + 1;
          unsigned int v53 = &v54[5 * v52];
          void v53[4] = v49;
          v53[5] = v45;
          v53[6] = v46;
          *((unsigned char *)v53 + 56) = v47;
          v53[8] = v50;
          unint64_t v3 = v59;
          int64_t v5 = v60;
          if (!v59) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
      }
    }
    id v15 = (void *)MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_45;
    }
LABEL_6:
    uint64_t result = swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    if (v9 >= v56) {
      goto LABEL_51;
    }
    unint64_t v10 = *(void *)(v55 + 8 * v9);
    ++v5;
    if (!v10)
    {
      int64_t v5 = v9 + 1;
      if (v9 + 1 >= v56) {
        goto LABEL_51;
      }
      unint64_t v10 = *(void *)(v55 + 8 * v5);
      if (!v10)
      {
        int64_t v5 = v9 + 2;
        if (v9 + 2 >= v56) {
          goto LABEL_51;
        }
        unint64_t v10 = *(void *)(v55 + 8 * v5);
        if (!v10)
        {
          int64_t v5 = v9 + 3;
          if (v9 + 3 >= v56) {
            goto LABEL_51;
          }
          unint64_t v10 = *(void *)(v55 + 8 * v5);
          if (!v10)
          {
            int64_t v11 = v9 + 4;
            if (v11 >= v56)
            {
LABEL_51:
              swift_release();
              return (uint64_t)v54;
            }
            unint64_t v10 = *(void *)(v55 + 8 * v11);
            int64_t v5 = v11;
            if (!v10) {
              break;
            }
          }
        }
      }
    }
LABEL_22:
    unint64_t v3 = (v10 - 1) & v10;
  }
  while (1)
  {
    int64_t v5 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v5 >= v56) {
      goto LABEL_51;
    }
    unint64_t v10 = *(void *)(v55 + 8 * v5);
    ++v11;
    if (v10) {
      goto LABEL_22;
    }
  }
LABEL_53:
  __break(1u);
  return result;
}

uint64_t CrashReportError.ConditionInFileError.processName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReportError.ConditionInFileError.kind.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_25A385D94(v1, *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  return v1;
}

uint64_t CrashReportError.ConditionInFileError.file.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReportError.ConditionInFileError.line.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t CrashReportError.ConditionInFileError.crashReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CrashReportError.ConditionInFileError() + 32);

  return sub_25A3C635C(v3, a1);
}

uint64_t sub_25A4F5534(uint64_t a1, uint64_t a2)
{
  return _s20PreviewsFoundationOS16CrashReportErrorV015ConditionInFileF0V4KindO2eeoiySbAG_AGtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

unint64_t CrashReportError.ConditionInFileError.highValueTitle.getter()
{
  switch(*(unsigned char *)(v0 + 32))
  {
    case 1:
      sub_25A50FDB0();
      swift_bridgeObjectRelease();
      unint64_t v1 = 0xD000000000000010;
      break;
    case 2:
      sub_25A50FDB0();
      swift_bridgeObjectRelease();
      unint64_t v1 = 0x7245206C61746146;
      break;
    case 3:
      sub_25A50FDB0();
      swift_bridgeObjectRelease();
      unint64_t v1 = 0xD000000000000022;
      break;
    default:
      unint64_t v1 = 0x6920747265737341;
      break;
  }
  unint64_t v3 = v1;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t CrashReportError.ConditionInFileError.additionalInfo.getter()
{
  sub_25A50FDB0();
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = v1;
  sub_25A50EDA0();
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  unsigned int v4 = *((unsigned __int8 *)v0 + 32);
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  if ((v0[8] & 1) == 0)
  {
    sub_25A5102B0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  if (v4 <= 2 && v3)
  {
    sub_25A385D94(v2, v3, v4);
    sub_25A50EDA0();
    sub_25A386064(v2, v3, v4);
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6;
}

id sub_25A4F5938()
{
  id v0 = objc_allocWithZone(MEMORY[0x263F08AE8]);
  id result = sub_25A4B2F48(0xD000000000000048, 0x800000025A5225E0, 0);
  qword_26A41BAF0 = (uint64_t)result;
  return result;
}

void sub_25A4F59F0()
{
  off_26A41BAF8 = &unk_27082B820;
}

uint64_t sub_25A4F5A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3C635C(v2 + *(int *)(a1 + 32), a2);
}

unsigned __int8 *sub_25A4F5A1C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4F5BD0(a1, a2, a3);
}

uint64_t type metadata accessor for CrashReportError.ConditionInFileError()
{
  uint64_t result = qword_26A41BB00;
  if (!qword_26A41BB00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unsigned __int8 *sub_25A4F5A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_25A50EED0();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_25A4E6B0C();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)sub_25A50FE60();
  }
LABEL_7:
  int64_t v11 = sub_25A4F5BD0(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_25A4F5B68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned __int8 *sub_25A4F5BD0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  id v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_25A4F5E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v15)(void *__return_ptr, uint64_t *);
  void (*v16)(char *__return_ptr, void *, uint64_t *);
  uint64_t v18;
  void v19[2];
  char v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v6 = sub_25A50EA40();
  uint64_t v8 = v7;
  if (a4)
  {
    uint64_t v9 = sub_25A50EA40();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v9 = a3;
  }
  if (qword_26A4156B0 != -1) {
    swift_once();
  }
  char v12 = (char *)off_26A41BAF8;
  uint64_t v13 = *((void *)off_26A41BAF8 + 2);
  if (v13)
  {
    id v18 = a4;
    swift_bridgeObjectRetain_n();
    uint64_t v14 = v12 + 56;
    while (1)
    {
      unsigned __int8 v15 = (void (*)(void *__return_ptr, uint64_t *))*((void *)v14 - 1);
      unsigned __int8 v16 = (void (*)(char *__return_ptr, void *, uint64_t *))*((void *)v14 - 3);
      v19[0] = v6;
      v19[1] = v8;
      uint64_t v21 = v9;
      unsigned __int8 v22 = v11;
      swift_retain();
      swift_retain();
      v16(&v20, v19, &v21);
      if (v20) {
        break;
      }
      swift_release();
      swift_release();
      v14 += 32;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_12;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v21 = a3;
    unsigned __int8 v22 = v18;
    v15(v19, &v21);
    swift_release();
    return v19[0];
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t _s20PreviewsFoundationOS16CrashReportErrorV015ConditionInFileF0V4KindO2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        return 0;
      }
      if (a2) {
        return a5 && (a1 == a4 && a2 == a5 || (sub_25A510370() & 1) != 0);
      }
      if (!a5) {
        return 1;
      }
      unsigned __int8 v6 = 1;
      goto LABEL_22;
    case 2:
      if (a6 != 2) {
        return 0;
      }
      if (a2) {
        return a5 && (a1 == a4 && a2 == a5 || (sub_25A510370() & 1) != 0);
      }
      if (!a5) {
        return 1;
      }
      unsigned __int8 v6 = 2;
      goto LABEL_22;
    case 3:
      return a6 == 3 && !(a5 | a4);
    default:
      if (a6) {
        return 0;
      }
      if (!a2)
      {
        if (a5)
        {
          unsigned __int8 v6 = 0;
LABEL_22:
          sub_25A386064(a1, 0, v6);
          return 0;
        }
        return 1;
      }
      return a5 && (a1 == a4 && a2 == a5 || (sub_25A510370() & 1) != 0);
  }
}

uint64_t _s20ConditionInFileErrorVwCP(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v35 = *a2;
    *(void *)a1 = *a2;
    a1 = v35 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[3];
    unsigned __int8 v10 = *((unsigned char *)a2 + 32);
    swift_bridgeObjectRetain();
    sub_25A385D94(v8, v9, v10);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v9;
    *(unsigned char *)(a1 + 32) = v10;
    uint64_t v11 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = a2[7];
    char v12 = *((unsigned char *)a2 + 64);
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    *(unsigned char *)(a1 + 64) = v12;
    uint64_t v16 = sub_25A50E4C0();
    unsigned __int8 v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
    id v18 = (int *)type metadata accessor for CrashReport(0);
    uint64_t v19 = v18[5];
    char v20 = (void *)(v14 + v19);
    uint64_t v21 = (void *)(v15 + v19);
    uint64_t v22 = v21[1];
    *char v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = v18[6];
    unsigned __int8 v24 = (void *)(v14 + v23);
    uint64_t v25 = (void *)(v15 + v23);
    uint64_t v26 = v25[1];
    *unsigned __int8 v24 = *v25;
    v24[1] = v26;
    *(_DWORD *)(v14 + v18[7]) = *(_DWORD *)(v15 + v18[7]);
    uint64_t v27 = v18[8];
    uint64_t v37 = v14 + v27;
    uint64_t v28 = v15 + v27;
    uint64_t v29 = sub_25A50E470();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30(v37, v28, v29);
    *(void *)(v14 + v18[9]) = *(void *)(v15 + v18[9]);
    *(void *)(v14 + v18[10]) = *(void *)(v15 + v18[10]);
    *(void *)(v14 + v18[11]) = *(void *)(v15 + v18[11]);
    uint64_t v31 = v18[12];
    uint64_t v32 = (void *)(v14 + v31);
    uint64_t v33 = (void *)(v15 + v31);
    uint64_t v34 = v33[1];
    void *v32 = *v33;
    v32[1] = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s20ConditionInFileErrorVwxx(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_25A386064(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = type metadata accessor for CrashReport(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v4 + *(int *)(v6 + 32);
  uint64_t v8 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s20ConditionInFileErrorVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_25A385D94(v7, v8, v9);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(unsigned char *)(a1 + 64) = v11;
  uint64_t v15 = sub_25A50E4C0();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  v16(v13, v14, v15);
  unsigned __int8 v17 = (int *)type metadata accessor for CrashReport(0);
  uint64_t v18 = v17[5];
  uint64_t v19 = (void *)(v13 + v18);
  char v20 = (void *)(v14 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = v17[6];
  uint64_t v23 = (void *)(v13 + v22);
  unsigned __int8 v24 = (void *)(v14 + v22);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  *(_DWORD *)(v13 + v17[7]) = *(_DWORD *)(v14 + v17[7]);
  uint64_t v26 = v17[8];
  uint64_t v35 = v13 + v26;
  uint64_t v27 = v14 + v26;
  uint64_t v28 = sub_25A50E470();
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29(v35, v27, v28);
  *(void *)(v13 + v17[9]) = *(void *)(v14 + v17[9]);
  *(void *)(v13 + v17[10]) = *(void *)(v14 + v17[10]);
  *(void *)(v13 + v17[11]) = *(void *)(v14 + v17[11]);
  uint64_t v30 = v17[12];
  uint64_t v31 = (void *)(v13 + v30);
  uint64_t v32 = (void *)(v14 + v30);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s20ConditionInFileErrorVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  sub_25A385D94(v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  unsigned __int8 v11 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v8;
  sub_25A386064(v9, v10, v11);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v12;
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  unsigned __int8 v17 = (int *)type metadata accessor for CrashReport(0);
  uint64_t v18 = v17[5];
  uint64_t v19 = (void *)(v14 + v18);
  char v20 = (void *)(v15 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v17[6];
  uint64_t v22 = (void *)(v14 + v21);
  uint64_t v23 = (void *)(v15 + v21);
  void *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v14 + v17[7]) = *(_DWORD *)(v15 + v17[7]);
  uint64_t v24 = v17[8];
  uint64_t v25 = v14 + v24;
  uint64_t v26 = v15 + v24;
  uint64_t v27 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 24))(v25, v26, v27);
  *(void *)(v14 + v17[9]) = *(void *)(v15 + v17[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + v17[10]) = *(void *)(v15 + v17[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + v17[11]) = *(void *)(v15 + v17[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = v17[12];
  uint64_t v29 = (void *)(v14 + v28);
  uint64_t v30 = (void *)(v15 + v28);
  void *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s20ConditionInFileErrorVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v8 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, v6, v8);
  uint64_t v9 = (int *)type metadata accessor for CrashReport(0);
  *(_OWORD *)(v7 + v9[5]) = *(_OWORD *)(v6 + v9[5]);
  *(_OWORD *)(v7 + v9[6]) = *(_OWORD *)(v6 + v9[6]);
  *(_DWORD *)(v7 + v9[7]) = *(_DWORD *)(v6 + v9[7]);
  uint64_t v10 = v9[8];
  uint64_t v11 = v7 + v10;
  uint64_t v12 = v6 + v10;
  uint64_t v13 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  *(void *)(v7 + v9[9]) = *(void *)(v6 + v9[9]);
  *(void *)(v7 + v9[10]) = *(void *)(v6 + v9[10]);
  *(void *)(v7 + v9[11]) = *(void *)(v6 + v9[11]);
  *(_OWORD *)(v7 + v9[12]) = *(_OWORD *)(v6 + v9[12]);
  return a1;
}

uint64_t _s20ConditionInFileErrorVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  char v7 = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  unsigned __int8 v10 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_25A386064(v8, v9, v10);
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = (int *)type metadata accessor for CrashReport(0);
  uint64_t v17 = v16[5];
  uint64_t v18 = (void *)(v13 + v17);
  uint64_t v19 = (uint64_t *)(v14 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = v16[6];
  uint64_t v23 = (void *)(v13 + v22);
  uint64_t v24 = (uint64_t *)(v14 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v13 + v16[7]) = *(_DWORD *)(v14 + v16[7]);
  uint64_t v27 = v16[8];
  uint64_t v28 = v13 + v27;
  uint64_t v29 = v14 + v27;
  uint64_t v30 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 40))(v28, v29, v30);
  *(void *)(v13 + v16[9]) = *(void *)(v14 + v16[9]);
  swift_bridgeObjectRelease();
  *(void *)(v13 + v16[10]) = *(void *)(v14 + v16[10]);
  swift_bridgeObjectRelease();
  *(void *)(v13 + v16[11]) = *(void *)(v14 + v16[11]);
  swift_bridgeObjectRelease();
  uint64_t v31 = v16[12];
  uint64_t v32 = (void *)(v13 + v31);
  uint64_t v33 = (uint64_t *)(v14 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s20ConditionInFileErrorVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A4F6B94);
}

uint64_t sub_25A4F6B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CrashReport(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t _s20ConditionInFileErrorVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A4F6C58);
}

uint64_t sub_25A4F6C58(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CrashReport(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_25A4F6D00()
{
  uint64_t result = type metadata accessor for CrashReport(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s20ConditionInFileErrorV4KindOwxx(uint64_t a1)
{
  return sub_25A386064(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s20ConditionInFileErrorV4KindOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_25A385D94(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s20ConditionInFileErrorV4KindOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_25A385D94(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_25A386064(v6, v7, v8);
  return a1;
}

uint64_t _s20ConditionInFileErrorV4KindOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_25A386064(v4, v5, v6);
  return a1;
}

uint64_t _s20ConditionInFileErrorV4KindOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s20ConditionInFileErrorV4KindOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_25A4F6F38(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_25A4F6F50(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CrashReportError.ConditionInFileError.Kind()
{
  return &type metadata for CrashReportError.ConditionInFileError.Kind;
}

uint64_t sub_25A4F6F78(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  sub_25A39BE4C();
  if (sub_25A50FB90()) {
    char v2 = sub_25A50FB90();
  }
  else {
    char v2 = 0;
  }
  return v2 & 1;
}

double sub_25A4F7054(uint64_t a1)
{
  return *(double *)&a1;
}

uint64_t RepeatedInvocation.__allocating_init(scheduler:callback:cadences:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v8 = swift_allocObject();
  RepeatedInvocation.init(scheduler:callback:cadences:)(a1, a2, a3, a4);
  return v8;
}

uint64_t *RepeatedInvocation.init(scheduler:callback:cadences:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v8 = *v4;
  long long v15 = *a4;
  uint64_t v9 = *((void *)a4 + 2);
  char v10 = *((unsigned char *)a4 + 24);
  *(uint64_t *)((char *)v4 + *(void *)(v8 + 128)) = 0;
  uint64_t v11 = *(void *)(v8 + 80);
  uint64_t v12 = (uint64_t)v4 + *(void *)(*v4 + 136);
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v12, 1, 1, TupleTypeMetadata2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 120), a1, v11);
  v4[6] = a2;
  v4[7] = a3;
  *((_OWORD *)v4 + 1) = v15;
  v4[4] = v9;
  *((unsigned char *)v4 + 40) = v10;
  return v4;
}

Swift::Void __swiftcall RepeatedInvocation.start()()
{
  uint64_t v1 = *v0;
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v3 = sub_25A50FA40();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unsigned __int8 v6 = (char *)&v8 - v5;
  uint64_t v7 = (char *)v0 + *(void *)(v1 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v7, v3);
  LODWORD(v7) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v6, 1, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (v7 == 1) {
    RepeatedInvocation.restart()();
  }
}

Swift::Void __swiftcall RepeatedInvocation.restart()()
{
  RepeatedInvocation.cancel()();
  type metadata accessor for RepeatedInvocation.Cadence();
  sub_25A50F1E0();
  swift_getWitnessTable();
  type metadata accessor for Inhabited();
  Inhabited.first.getter((uint64_t)v0);
  sub_25A4F7714(v0[0], v0[1], v1, 0);
}

Swift::Void __swiftcall RepeatedInvocation.cancel()()
{
  unsigned __int8 v1 = v0;
  uint64_t v2 = *v0;
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v4 = sub_25A50FA40();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - v6;
  uint64_t v8 = *(void *)((char *)v1 + *(void *)(v2 + 128));
  if (v8)
  {
    uint64_t v9 = *(void (**)(uint64_t))(**(void **)(v8 + 16) + 112);
    uint64_t v10 = swift_retain();
    v9(v10);
    swift_release();
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v7, 1, 1, TupleTypeMetadata2);
  uint64_t v11 = (char *)v1 + *(void *)(*v1 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v11, v7, v4);
  swift_endAccess();
}

uint64_t type metadata accessor for RepeatedInvocation.Cadence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4F7714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v37 = a4;
  double v32 = *(double *)&a1;
  uint64_t v6 = *(void *)v4;
  uint64_t v36 = *(void *)(*(void *)v4 + 88);
  uint64_t v38 = *(void *)(v6 + 80);
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = sub_25A50FA40();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v33 = (uint64_t *)((char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v14 = (char *)(v4 + *(void *)(v6 + 136));
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v14, v8);
  uint64_t v15 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v13, 1, TupleTypeMetadata2);
  uint64_t v34 = v9;
  uint64_t v35 = v8;
  uint64_t v18 = v13;
  uint64_t v19 = v36;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  BOOL v20 = v17 == 1;
  uint64_t v21 = v37;
  if (v20 || v16(v14, 1, TupleTypeMetadata2) || *(void *)v14 != v21)
  {
    uint64_t v22 = v33;
    *uint64_t v33 = v21;
    (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v38, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v22, 0, 1, TupleTypeMetadata2);
    swift_beginAccess();
    (*(void (**)(char *, void *, uint64_t))(v34 + 40))(v14, v22, v35);
    swift_endAccess();
  }
  type metadata accessor for DelayedInvocation();
  uint64_t v23 = v5 + *(void *)(*(void *)v5 + 120);
  swift_retain();
  uint64_t v24 = sub_25A41F534(v23, (uint64_t)sub_25A4F8868, v5);
  uint64_t v25 = *(void *)(*(void *)v5 + 128);
  *(void *)(v5 + v25) = v24;
  uint64_t result = swift_release();
  uint64_t v27 = *(void *)(v5 + v25);
  if (v27)
  {
    double v28 = v32;
    uint64_t v29 = *(void (**)(uint64_t, double))(**(void **)(v27 + 16) + 104);
    uint64_t v30 = swift_retain();
    v29(v30, v28);
    return swift_release();
  }
  return result;
}

uint64_t sub_25A4F7AC8()
{
  unsigned __int8 v1 = v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v46 = v2;
  uint64_t v3 = v2[10];
  uint64_t v49 = v2[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v43 = (char *)&v41 - v8;
  uint64_t v48 = v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = sub_25A50FA40();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v51 = (uint64_t *)((char *)&v41 - v17);
  uint64_t v18 = *(void *)((char *)v1 + v2[16]);
  uint64_t v47 = v3;
  uint64_t v44 = v7;
  if (v18)
  {
    uint64_t v19 = **(void **)(v18 + 16);
    uint64_t v45 = TupleTypeMetadata2;
    BOOL v20 = *(void (**)(uint64_t))(v19 + 112);
    uint64_t v21 = swift_retain();
    v20(v21);
    TupleTypeMetadata2 = v45;
    swift_release();
    uint64_t v2 = (void *)*v1;
  }
  uint64_t v22 = (char *)v1 + v2[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v22, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, TupleTypeMetadata2) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  uint64_t v24 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v25 = v51;
  uint64_t v26 = (char *)v51 + v24;
  uint64_t v27 = *(void *)v15;
  *unint64_t v51 = *(void *)v15;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v26, &v15[v24], v48);
  char v28 = *((unsigned char *)v1 + 40);
  uint64_t v54 = v1[2];
  long long v55 = *(_OWORD *)(v1 + 3);
  char v56 = v28;
  uint64_t v29 = v47;
  uint64_t v46 = (void *)v46[12];
  type metadata accessor for RepeatedInvocation.Cadence();
  sub_25A50F1E0();
  swift_getWitnessTable();
  uint64_t v30 = type metadata accessor for Inhabited();
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(v30, WitnessTable, (uint64_t)&v57);
  uint64_t v52 = v27;
  uint64_t v53 = v57;
  swift_getWitnessTable();
  RandomAccessCollection.subscript.getter((uint64_t)&v54);
  swift_bridgeObjectRelease();
  if (BYTE8(v55) == 255) {
    return (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v25, TupleTypeMetadata2);
  }
  if (!BYTE8(v55))
  {
    sub_25A4F80E4();
    return (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v51, TupleTypeMetadata2);
  }
  if (BYTE8(v55) != 1)
  {
    sub_25A4F7714(v54, v55);
    return (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v51, TupleTypeMetadata2);
  }
  uint64_t v42 = v54;
  uint64_t v45 = v16;
  uint64_t v41 = v55;
  double v32 = *(double *)&v55;
  uint64_t v33 = v48;
  uint64_t v34 = v49;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v36 = v43;
  (*(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 8))(v33, AssociatedConformanceWitness, v32);
  uint64_t v37 = v44;
  (*(void (**)(uint64_t, uint64_t))(v34 + 24))(v29, v34);
  char v38 = sub_25A50EB10();
  int v39 = *(void (**)(char *, uint64_t))(v50 + 8);
  v39(v37, v33);
  v39(v36, v33);
  if (v38)
  {
    sub_25A4F80E4();
    uint64_t v16 = v45;
    return (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v51, TupleTypeMetadata2);
  }
  uint64_t v40 = v51;
  sub_25A4F7714(v42, v41);
  return (*(uint64_t (**)(void *, uint64_t))(v45 + 8))(v40, TupleTypeMetadata2);
}

uint64_t sub_25A4F80E4()
{
  unsigned __int8 v1 = v0;
  v21[0] = *v0;
  uint64_t v2 = v21[0];
  v21[1] = *(void *)(v21[0] + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5 = sub_25A50FA40();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v21 - v8;
  uint64_t v10 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)v21 - v11;
  uint64_t v13 = (char *)v1 + *(void *)(v2 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v13, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, TupleTypeMetadata2) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v15 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v16 = *(void *)v9;
  *(void *)uint64_t v12 = *(void *)v9;
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(&v12[v15], &v9[v15], AssociatedTypeWitness);
  uint64_t v17 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
  }
  else
  {
    char v18 = *((unsigned char *)v1 + 40);
    uint64_t v22 = v1[2];
    long long v23 = *(_OWORD *)(v1 + 3);
    char v24 = v18;
    type metadata accessor for RepeatedInvocation.Cadence();
    sub_25A50F1E0();
    swift_getWitnessTable();
    uint64_t v19 = type metadata accessor for Inhabited();
    uint64_t WitnessTable = swift_getWitnessTable();
    PredicatedWrapper.value.getter(v19, WitnessTable, (uint64_t)&v25);
    void v21[2] = v17;
    v21[3] = v25;
    swift_getWitnessTable();
    RandomAccessCollection.subscript.getter((uint64_t)&v22);
    swift_bridgeObjectRelease();
    if (BYTE8(v23) != 255) {
      sub_25A4F7714(v22, v23);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, TupleTypeMetadata2);
  }
  return result;
}

uint64_t *RepeatedInvocation.deinit()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 120), *(void *)(v1 + 80));
  swift_release();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 136);
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  uint64_t v3 = sub_25A50FA40();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t RepeatedInvocation.__deallocating_deinit()
{
  RepeatedInvocation.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_25A4F8648()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getTupleTypeMetadata2();
    uint64_t v0 = sub_25A50FA40();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return v0;
}

uint64_t type metadata accessor for RepeatedInvocation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for RepeatedInvocation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RepeatedInvocation);
}

uint64_t dispatch thunk of RepeatedInvocation.__allocating_init(scheduler:callback:cadences:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t sub_25A4F87CC(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_25A4F8814(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_25A4F8858(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_25A4F8860(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t sub_25A4F8868()
{
  (*(void (**)(void))(v0 + 48))();

  return sub_25A4F7AC8();
}

uint64_t Predicated.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_25A50FA40();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v10);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  char v18 = (char *)&v25 - v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(a1, a2, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v19 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    uint64_t v20 = type metadata accessor for Predicated();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v26, 1, 1, v20);
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v22(v18, v12, AssociatedTypeWitness);
    v22(v16, v18, AssociatedTypeWitness);
    uint64_t v23 = v26;
    sub_25A4F8E74(a1, (uint64_t)v16, v26);
    uint64_t v24 = type metadata accessor for Predicated();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 0, 1, v24);
  }
}

uint64_t type metadata accessor for Predicated()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static Predicated.unverified(value:proof:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)&v15 - v11, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, AssociatedTypeWitness);
  return sub_25A4F8E74((uint64_t)v12, (uint64_t)v9, a3);
}

uint64_t Predicated.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t Predicated.proof.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t sub_25A4F8E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, a1, AssociatedTypeWitness);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for Predicated() + 36);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);

  return v9(v7, a2, v8);
}

uint64_t sub_25A4F8F7C()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_25A4F9080(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v6 + v9) & (unint64_t)~v9) + *(void *)(*(void *)(v7 - 8) + 64) > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    uint64_t v15 = v7;
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v16, ((unint64_t)a2 + v10) & v16, v15);
  }
  return a1;
}

uint64_t sub_25A4F9228(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = v5;
  unint64_t v9 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t sub_25A4F931C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_25A4F9414(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_25A4F950C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_25A4F9604(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_25A4F96FC(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v6) {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(v5 + 64) + v11;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v12 & ~v11) + *(void *)(*(void *)(v7 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v9)
        {
          uint64_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
          return v22(a1, v6, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v20 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v20(((unint64_t)a1 + v12) & ~v11);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_25A4F99D8(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v7 + 64) + v13;
  size_t v15 = (v14 & ~v13) + *(void *)(v9 + 64);
  if (a3 <= v12)
  {
    int v16 = 0;
  }
  else if (v15 <= 3)
  {
    unsigned int v19 = ((a3 - v12 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v19))
    {
      int v16 = 4;
    }
    else if (v19 >= 0x100)
    {
      int v16 = 2;
    }
    else
    {
      int v16 = v19 > 1;
    }
  }
  else
  {
    int v16 = 1;
  }
  if (v12 < a2)
  {
    unsigned int v17 = ~v12 + a2;
    if (v15 < 4)
    {
      int v18 = (v17 >> (8 * v15)) + 1;
      if (v15)
      {
        int v20 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        a1[v15] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v18;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v15] = v18;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x25A4F9D24);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v8 >= v11)
        {
          uint64_t v22 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
          v22(a1, a2, v8, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v21 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
          v21((unint64_t)&a1[v14] & ~v13, a2);
        }
      }
      return;
  }
}

uint64_t sub_25A4F9D4C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for IOPowerSource.Observer();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v8);
  unsigned int v12 = (char *)v20 - v11;
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0;
    uint64_t v15 = MEMORY[0x263F8EE78];
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void *)(v24 + 72);
      sub_25A4FD038(a3 + v16 + v13 * v14, (uint64_t)v12);
      char v17 = a1(v12);
      if (v3)
      {
        sub_25A4FC674((uint64_t)v12);
        swift_release();
        swift_bridgeObjectRelease();
        return v13;
      }
      if (v17)
      {
        sub_25A4FD0E8((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_25A39A268(0, *(void *)(v15 + 16) + 1, 1);
        }
        uint64_t v15 = v25;
        unint64_t v19 = *(void *)(v25 + 16);
        unint64_t v18 = *(void *)(v25 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_25A39A268(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v25;
        }
        *(void *)(v15 + 16) = v19 + 1;
        uint64_t result = sub_25A4FD0E8(v23, v15 + v16 + v19 * v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = sub_25A4FC674((uint64_t)v12);
      }
      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t IOPowerSource.State.BatteryInfo.lowPowerMode.getter()
{
  return *v0;
}

uint64_t IOPowerSource.State.BatteryInfo.lowPowerMode.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*IOPowerSource.State.BatteryInfo.lowPowerMode.modify())()
{
  return nullsub_1;
}

uint64_t IOPowerSource.State.BatteryInfo.status.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t IOPowerSource.State.BatteryInfo.status.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*IOPowerSource.State.BatteryInfo.status.modify())()
{
  return nullsub_1;
}

double IOPowerSource.State.BatteryInfo.level.getter()
{
  return *(double *)(v0 + 8);
}

void IOPowerSource.State.BatteryInfo.level.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*IOPowerSource.State.BatteryInfo.level.modify())()
{
  return nullsub_1;
}

PreviewsFoundationOS::IOPowerSource::State::BatteryInfo __swiftcall IOPowerSource.State.BatteryInfo.init(lowPowerMode:status:level:)(Swift::Bool lowPowerMode, PreviewsFoundationOS::IOPowerSource::State::BatteryInfo::Status status, Swift::Double level)
{
  *(unsigned char *)uint64_t v3 = lowPowerMode;
  *(unsigned char *)(v3 + 1) = status;
  *(Swift::Double *)(v3 + 8) = level;
  result.level = level;
  result.lowPowerMode = lowPowerMode;
  return result;
}

uint64_t IOPowerSource.State.BatteryInfo.Status.hash(into:)()
{
  return sub_25A5104F0();
}

BOOL static IOPowerSource.State.BatteryInfo.Status.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t IOPowerSource.State.BatteryInfo.Status.hashValue.getter()
{
  return sub_25A510530();
}

BOOL static IOPowerSource.State.BatteryInfo.== infix(_:_:)(double *a1, double *a2)
{
  return *(unsigned __int8 *)a1 == *(unsigned __int8 *)a2
      && *((unsigned __int8 *)a1 + 1) == *((unsigned __int8 *)a2 + 1)
      && a1[1] == a2[1];
}

BOOL sub_25A4FA0D8(double *a1, double *a2)
{
  return *(unsigned __int8 *)a1 == *(unsigned __int8 *)a2
      && *((unsigned __int8 *)a1 + 1) == *((unsigned __int8 *)a2 + 1)
      && a1[1] == a2[1];
}

CFRunLoopSourceRef sub_25A4FA118()
{
  id v0 = objc_msgSend(self, sel_mainRunLoop);
  type metadata accessor for IOPowerSource();
  uint64_t v1 = swift_allocObject();
  CFRunLoopSourceRef result = IOPowerSource.init(observeOn:)(v0);
  qword_26A41BC90 = v1;
  return result;
}

uint64_t IOPowerSource.__allocating_init(observeOn:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  IOPowerSource.init(observeOn:)(a1);
  return v2;
}

uint64_t static IOPowerSource.shared.getter()
{
  if (qword_26A4156B8 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t IOPowerSource.currentState.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  swift_retain();
  os_unfair_lock_lock(v3 + 10);
  sub_25A3EF3C4((uint64_t)&v3[4], (uint64_t)v7);
  os_unfair_lock_unlock(v3 + 10);
  swift_release();
  uint64_t v4 = v7[0];
  uint64_t v5 = v7[1];
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t IOPowerSource.addObserver(_:)@<X0>(void (*a1)(__n128 *)@<X0>, void (*a2)(__n128 *)@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v5 = sub_25A50E4C0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = type metadata accessor for IOPowerSource.Observer();
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  _s20PreviewsFoundationOS11CrashReportV2IDVAEycfC_0();
  unint64_t v16 = (void (**)(__n128 *))&v15[*(int *)(v13 + 28)];
  *unint64_t v16 = a1;
  v16[1] = a2;
  char v17 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v26 = v11;
  v17(v11, v15, v5);
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  v17(v9, v11, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v9, v5);
  *(void *)&long long v31 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/IOPowerSource.swift";
  *((void *)&v31 + 1) = 125;
  char v32 = 2;
  long long v33 = xmmword_25A51CF30;
  uint64_t v34 = "addObserver(_:)";
  uint64_t v35 = 15;
  char v36 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t v21 = sub_25A3B7704(&v31, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  uint64_t v22 = *(void *)(v28 + 24);
  uint64_t v29 = v15;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v22 + 40));
  sub_25A4FC658((__n128 *)(v22 + 16), &v30);
  os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 40));
  swift_release();
  (*v16)(&v30);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v26, v5);
  uint64_t result = sub_25A4FC674((uint64_t)v15);
  uint64_t v24 = v27;
  *uint64_t v27 = sub_25A4FC5F4;
  v24[1] = (uint64_t (*)())v20;
  _OWORD v24[2] = (uint64_t (*)())v21;
  return result;
}

uint64_t sub_25A4FA5E0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(os_unfair_lock_s **)(result + 24);
    MEMORY[0x270FA5388](result);
    swift_retain();
    os_unfair_lock_lock(v1 + 10);
    sub_25A4FD14C((uint64_t)&v1[4]);
    os_unfair_lock_unlock(v1 + 10);
    swift_release();
    return swift_release();
  }
  return result;
}

__n128 sub_25A4FA6AC@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for IOPowerSource.Observer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A4FD038(a2, (uint64_t)v9);
  unint64_t v10 = a1[1].n128_u64[0];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v10 = sub_25A38C2E8(0, *(void *)(v10 + 16) + 1, 1, v10);
  }
  unint64_t v12 = *(void *)(v10 + 16);
  unint64_t v11 = *(void *)(v10 + 24);
  if (v12 >= v11 >> 1) {
    unint64_t v10 = sub_25A38C2E8(v11 > 1, v12 + 1, 1, v10);
  }
  *(void *)(v10 + 16) = v12 + 1;
  sub_25A4FD0E8((uint64_t)v9, v10+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v12);
  a1[1].n128_u64[0] = v10;
  __n128 result = *a1;
  *a3 = *a1;
  return result;
}

CFRunLoopSourceRef IOPowerSource.init(observeOn:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v27 = a1;
  uint64_t v3 = sub_25A50F870();
  MEMORY[0x270FA5388](v3);
  uint64_t v26 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25A50E790();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = sub_25A50E760();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_25A50F8C0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41BC98);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 40) = 0;
  *(_OWORD *)(v14 + 16) = xmmword_25A518040;
  *(void *)(v14 + 32) = MEMORY[0x263F8EE78];
  *(void *)(v2 + 24) = v14;
  sub_25A4A37DC(0, (unint64_t *)&qword_26A417448);
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 32) = 0;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x263F8F138], v10);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F080], v6);
  sub_25A50F900();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_25A50E770();
  aBlock[0] = MEMORY[0x263F8EE78];
  sub_25A4FD188(&qword_26A418498, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4184A0);
  sub_25A46F758(&qword_26A4184A8, &qword_26A4184A0);
  sub_25A50FC90();
  *(void *)(v2 + 56) = sub_25A50F8F0();
  uint64_t v15 = v27;
  *(void *)(v2 + 16) = v27;
  id v16 = v15;
  sub_25A4FAD30();
  type metadata accessor for IOPowerSource.NotificationCallbackWrapper();
  char v17 = (void *)swift_allocObject();
  swift_weakInit();
  swift_weakAssign();
  *(void *)(v2 + 48) = v17;
  swift_retain();
  CFRunLoopSourceRef result = IOPSNotificationCreateRunLoopSource((IOPowerSourceCallbackType)sub_25A4FB094, v17);
  if (result)
  {
    unint64_t v19 = *(void **)(v2 + 32);
    *(void *)(v2 + 32) = result;

    uint64_t v20 = (__CFRunLoop *)objc_msgSend(v16, sel_getCFRunLoop);
    CFRunLoopAddSource(v20, *(CFRunLoopSourceRef *)(v2 + 32), (CFRunLoopMode)*MEMORY[0x263EFFE88]);

    id v21 = objc_msgSend(self, sel_defaultCenter);
    uint64_t v22 = *MEMORY[0x263F08450];
    uint64_t v23 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = sub_25A4FC6F4;
    aBlock[5] = v23;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_25A4FB150;
    aBlock[3] = &block_descriptor_13;
    uint64_t v24 = _Block_copy(aBlock);
    swift_release();
    id v25 = objc_msgSend(v21, sel_addObserverForName_object_queue_usingBlock_, v22, 0, 0, v24);
    swift_release();

    _Block_release(v24);
    *(void *)(v2 + 40) = v25;
    swift_unknownObjectRelease();
    return (CFRunLoopSourceRef)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_25A4FAD30()
{
  sub_25A4FB244((double *)&v3);
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 40));
  sub_25A4FD09C((__n128 *)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 40));
  return swift_release();
}

uint64_t sub_25A4FADD4()
{
  uint64_t v1 = sub_25A50E750();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_25A50E790();
  uint64_t v5 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[1] = *(void *)(v0 + 56);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_25A4FD030;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25A3BE05C;
  aBlock[3] = &block_descriptor_33_0;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  sub_25A50E770();
  uint64_t v13 = MEMORY[0x263F8EE78];
  sub_25A4FD188((unint64_t *)&qword_26A4168D0, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
  sub_25A46F758(qword_26A4168E0, &qword_26A4168D8);
  sub_25A50FC90();
  MEMORY[0x26113D8E0](0, v7, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v12);
  swift_release();
  return swift_release();
}

uint64_t sub_25A4FB094(uint64_t result)
{
  if (result)
  {
    swift_retain();
    if (swift_weakLoadStrong())
    {
      sub_25A4FADD4();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_25A4FB0F8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_25A4FADD4();
    return swift_release();
  }
  return result;
}

uint64_t sub_25A4FB150(uint64_t a1)
{
  uint64_t v2 = sub_25A50E0E0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *))(a1 + 32);
  sub_25A50E0D0();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_25A4FB244(double *a1@<X8>)
{
  void (*v14)(void **__return_ptr, _OWORD *);
  void *v15;
  void (*v16)(long long *__return_ptr, void *);
  void *v17;
  id v18;
  char v19;
  CFArrayRef v20;
  CFArrayRef v21;
  id v22;
  unsigned __int8 v23;
  id v24;
  void *v25;
  double v26;
  double v27;
  id v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  id v33;
  unsigned int v34;
  double *v35;
  uint64_t v36;
  CFArrayRef v37;
  CFTypeRef v38;
  double *v39;
  uint64_t v40;
  void *v41;
  _OWORD v42[2];
  long long v43;
  long long v44;
  void v45[3];
  uint64_t v46;
  void *v47;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41BCB8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CFTypeRef v5 = IOPSCopyPowerSourcesInfo();
  if (!v5) {
    goto LABEL_21;
  }
  CFTypeRef v6 = v5;
  CFArrayRef v7 = IOPSCopyPowerSourcesList(v5);
  if (!v7)
  {
    swift_unknownObjectRelease();
LABEL_21:
    *(_OWORD *)a1 = xmmword_25A51CF40;
    return;
  }
  CFArrayRef v8 = v7;
  int v39 = a1;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v6;
  CFArrayRef v10 = v8;
  char v38 = v6;
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v37 = v10;
  sub_25A50F960();
  uint64_t v11 = &v4[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A41BCC0) + 44)];
  *(void *)uint64_t v11 = sub_25A4FD0E0;
  *((void *)v11 + 1) = v9;
  char v36 = v9;
  uint64_t v12 = &v4[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A41BCC8) + 36)];
  *(void *)uint64_t v12 = sub_25A4FC3F8;
  *((void *)v12 + 1) = 0;
  uint64_t v13 = &v4[*(int *)(v2 + 44)];
  *(void *)uint64_t v13 = sub_25A4FC408;
  *((void *)v13 + 1) = 0;
  sub_25A50E250();
  sub_25A4FD188(&qword_26A41BCD0, MEMORY[0x263F06DC0]);
  sub_25A50FAF0();
  uint64_t v14 = *(void (**)(void **__return_ptr, _OWORD *))v11;
  sub_25A3C90EC((uint64_t)v45, (uint64_t)&v43);
  if (!*((void *)&v44 + 1))
  {
LABEL_19:
    sub_25A384BCC((uint64_t)v4, &qword_26A41BCB8);
    swift_unknownObjectRelease();
    swift_release();
    uint64_t v20 = v37;

    *(_OWORD *)int v39 = xmmword_25A518050;
    return;
  }
  uint64_t v40 = MEMORY[0x263F8EE58] + 8;
  while (1)
  {
    sub_25A3936C4(&v43, v42);
    v14(&v41, v42);
    uint64_t v15 = v41;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    uint64_t v47 = v15;
    if ((*(uint64_t (**)(void **))v12)(&v47)) {
      break;
    }

LABEL_6:
    sub_25A50FAF0();
    uint64_t v14 = *(void (**)(void **__return_ptr, _OWORD *))v11;
    sub_25A3C90EC((uint64_t)v45, (uint64_t)&v43);
    if (!*((void *)&v44 + 1)) {
      goto LABEL_19;
    }
  }
  id v16 = *(void (**)(long long *__return_ptr, void *))v13;
  v45[0] = v15;
  v16(&v43, v45);

  char v17 = (void *)v43;
  *(void *)&uint64_t v43 = 1701869908;
  *((void *)&v43 + 1) = 0xE400000000000000;
  uint64_t v18 = objc_msgSend(v17, sel___swift_objectForKeyedSubscript_, sub_25A510400());
  swift_unknownObjectRelease();
  if (v18)
  {
    sub_25A50FC10();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v43 = 0u;
    uint64_t v44 = 0u;
  }
  sub_25A3C90EC((uint64_t)&v43, (uint64_t)v45);
  if (!v46)
  {
    sub_25A384BCC((uint64_t)v45, &qword_26A416C28);
    goto LABEL_18;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_18:

    goto LABEL_6;
  }
  if (v42[0] != __PAIR128__(0xEF79726574746142, 0x6C616E7265746E49))
  {
    unint64_t v19 = sub_25A510370();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
LABEL_22:
  sub_25A384BCC((uint64_t)v4, &qword_26A41BCB8);
  swift_release();
  id v21 = v37;

  uint64_t v22 = v17;
  uint64_t v23 = sub_25A4FC150(v22);
  *(void *)&uint64_t v43 = 0xD000000000000010;
  *((void *)&v43 + 1) = 0x800000025A522900;
  uint64_t v24 = objc_msgSend(v22, sel___swift_objectForKeyedSubscript_, sub_25A510400());
  swift_unknownObjectRelease();
  if (v24)
  {
    sub_25A50FC10();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v43 = 0u;
    uint64_t v44 = 0u;
  }
  sub_25A3C90EC((uint64_t)&v43, (uint64_t)v45);
  if (v46)
  {
    sub_25A4A37DC(0, qword_26A41A748);
    if (swift_dynamicCast())
    {
      id v25 = *(void **)&v42[0];
      objc_msgSend(*(id *)&v42[0], sel_doubleValue);
      uint64_t v27 = v26;

      goto LABEL_30;
    }
  }
  else
  {
    sub_25A384BCC((uint64_t)v45, &qword_26A416C28);
  }
  uint64_t v27 = 1.0;
LABEL_30:
  strcpy((char *)&v43, "Max Capacity");
  BYTE13(v43) = 0;
  HIWORD(v43) = -5120;
  uint64_t v28 = objc_msgSend(v22, sel___swift_objectForKeyedSubscript_, sub_25A510400());
  swift_unknownObjectRelease();
  if (v28)
  {
    sub_25A50FC10();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v43 = 0u;
    uint64_t v44 = 0u;
  }
  sub_25A3C90EC((uint64_t)&v43, (uint64_t)v45);
  if (v46)
  {
    sub_25A4A37DC(0, qword_26A41A748);
    if (swift_dynamicCast())
    {
      uint64_t v29 = *(void **)&v42[0];
      objc_msgSend(*(id *)&v42[0], sel_doubleValue);
      long long v31 = v30;

      char v32 = 0.0;
      if (v31 != 0.0)
      {
        char v32 = 1.0;
        if (v27 / v31 <= 1.0)
        {
          if (v27 / v31 > 0.0) {
            char v32 = v27 / v31;
          }
          else {
            char v32 = 0.0;
          }
        }
      }
      goto LABEL_45;
    }
  }
  else
  {
    sub_25A384BCC((uint64_t)v45, &qword_26A416C28);
  }
  char v32 = 1.0;
  if (v27 <= 1.0)
  {
    if (v27 > 0.0) {
      char v32 = v27;
    }
    else {
      char v32 = 0.0;
    }
  }
LABEL_45:
  long long v33 = objc_msgSend(self, sel_processInfo);
  uint64_t v34 = objc_msgSend(v33, sel_isLowPowerModeEnabled);

  swift_unknownObjectRelease();
  uint64_t v35 = v39;
  *(void *)int v39 = v34 & 0xFFFF00FF | ((unint64_t)v23 << 8);
  v35[1] = v32;
}

uint64_t sub_25A4FB954()
{
  uint64_t v0 = type metadata accessor for IOPowerSource.Observer();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    CFTypeRef v6 = *(os_unfair_lock_s **)(result + 24);
    swift_retain();
    os_unfair_lock_lock(v6 + 10);
    sub_25A3EF3C4((uint64_t)&v6[4], (uint64_t)&v17);
    os_unfair_lock_unlock(v6 + 10);
    swift_release();
    unsigned __int16 v7 = v17;
    double v8 = v18;
    swift_bridgeObjectRelease();
    sub_25A4FAD30();
    uint64_t v9 = *(os_unfair_lock_s **)(v5 + 24);
    swift_retain();
    os_unfair_lock_lock(v9 + 10);
    sub_25A3EF3C4((uint64_t)&v9[4], (uint64_t)&v17);
    os_unfair_lock_unlock(v9 + 10);
    swift_release();
    uint64_t v10 = v17;
    double v11 = v18;
    if (v17 == 2)
    {
      if (v7 == 2) {
        goto LABEL_12;
      }
    }
    else if (v17 == 3)
    {
      if (v7 == 3)
      {
LABEL_12:
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    else if ((v7 & 0xFE) != 2 {
           && (v7 & 1) != ((v17 & 1) == 0)
    }
           && (((unsigned __int16)v17 ^ v7) & 0xFF00) == 0
           && v8 == v18)
    {
      goto LABEL_12;
    }
    uint64_t v12 = *(void *)(v19 + 16);
    if (v12)
    {
      uint64_t v13 = v19 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
      uint64_t v14 = *(void *)(v1 + 72);
      do
      {
        sub_25A4FD038(v13, (uint64_t)v3);
        uint64_t v15 = *(void (**)(uint64_t *))&v3[*(int *)(v0 + 20)];
        uint64_t v17 = v10;
        double v18 = v11;
        v15(&v17);
        sub_25A4FC674((uint64_t)v3);
        v13 += v14;
        --v12;
      }
      while (v12);
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_25A4FBBCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  _OWORD v6[2] = a2;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_25A4F9D4C((uint64_t (*)(char *))sub_25A4FD168, (uint64_t)v6, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v4;
  return result;
}

BOOL sub_25A4FBC44(uint64_t a1)
{
  uint64_t v2 = sub_25A50E4C0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  sub_25A4FD188(qword_26A41BCD8, MEMORY[0x263F07508]);
  char v6 = sub_25A50EBE0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (v6 & 1) == 0;
}

uint64_t sub_25A4FBD8C()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_25A4FBDC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_25A50E4C0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

id *IOPowerSource.deinit()
{
  swift_release();
  swift_unknownObjectRelease();

  return v0;
}

uint64_t IOPowerSource.__deallocating_deinit()
{
  swift_release();
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0228](v0, 64, 7);
}

void IOPowerSource.State.description.getter()
{
  int v1 = *(void *)v0;
  if (v1 != 2 && v1 != 3)
  {
    double v2 = *(double *)(v0 + 8) * 100.0;
    if ((~*(void *)&v2 & 0x7FF0000000000000) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        if (v2 < 9.22337204e18)
        {
          sub_25A5102B0();
          sub_25A50EDA0();
          sub_25A50FDB0();
          sub_25A50EDA0();
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
          sub_25A50EDA0();
          sub_25A50FFB0();
          sub_25A50EDA0();
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
          sub_25A50EDA0();
          return;
        }
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
}

const __CFDictionary *sub_25A4FC0E8@<X0>(void *a1@<X0>, const void *a2@<X1>, CFDictionaryRef *a3@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v5 = (const void *)sub_25A510350();
  CFDictionaryRef v6 = IOPSGetPowerSourceDescription(a2, v5);
  CFDictionaryRef result = (const __CFDictionary *)swift_unknownObjectRelease();
  if (v6) {
    CFDictionaryRef result = v6;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_25A4FC150(void *a1)
{
  uint64_t v18 = 0x6772616843207349;
  unint64_t v19 = 0xEB00000000676E69;
  id v2 = objc_msgSend(a1, sel___swift_objectForKeyedSubscript_, sub_25A510400());
  swift_unknownObjectRelease();
  if (v2)
  {
    sub_25A50FC10();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  sub_25A3C90EC((uint64_t)&v16, (uint64_t)&v18);
  if (v20)
  {
    sub_25A4A37DC(0, qword_26A41A748);
    if (swift_dynamicCast()) {
      uint64_t v3 = v15;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    sub_25A384BCC((uint64_t)&v18, &qword_26A416C28);
    uint64_t v3 = 0;
  }
  uint64_t v18 = 0x6772616843207349;
  unint64_t v19 = 0xEA00000000006465;
  id v4 = objc_msgSend(a1, sel___swift_objectForKeyedSubscript_, sub_25A510400());
  swift_unknownObjectRelease();
  if (v4)
  {
    sub_25A50FC10();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  sub_25A3C90EC((uint64_t)&v16, (uint64_t)&v18);
  if (v20)
  {
    sub_25A4A37DC(0, qword_26A41A748);
    if (swift_dynamicCast())
    {
      uint64_t v5 = v15;
      goto LABEL_17;
    }
  }
  else
  {
    sub_25A384BCC((uint64_t)&v18, &qword_26A416C28);
  }
  uint64_t v5 = 0;
LABEL_17:
  sub_25A4A37DC(0, qword_26A41A748);
  CFDictionaryRef v6 = (void *)sub_25A50F990();
  unsigned __int16 v7 = v6;
  if (v5)
  {
    id v8 = v5;
    char v9 = sub_25A50F9A0();

    if (v9)
    {

      return 2;
    }
  }
  else
  {
  }
  double v11 = (void *)sub_25A50F990();
  uint64_t v12 = v11;
  if (v3)
  {
    id v13 = v3;
    char v14 = sub_25A50F9A0();

    if (v14) {
      return 1;
    }
  }
  else
  {
  }
  return 0;
}

BOOL sub_25A4FC3F8(void *a1)
{
  return *a1 != 0;
}

id sub_25A4FC408@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = *a1;
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL _s20PreviewsFoundationOS13IOPowerSourceC5StateO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(void *)a1;
  if (v2 == 2) {
    return *(void *)a2 == 2;
  }
  if (v2 == 3) {
    return *(void *)a2 == 3;
  }
  if ((*(void *)a2 & 0xFELL) == 2) {
    return 0;
  }
  if (*(double *)(a1 + 8) == *(double *)(a2 + 8)) {
    return (((*(void *)a1 & 1) == 0) ^ *(void *)a2) & ((((unsigned __int16)*(void *)a2 ^ (unsigned __int16)*(void *)a1) & 0xFF00) == 0);
  }
  else {
    return 0;
  }
}

uint64_t type metadata accessor for IOPowerSource.Observer()
{
  uint64_t result = qword_26A41BCA8;
  if (!qword_26A41BCA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25A4FC4F0()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A4FC528()
{
  uint64_t v1 = sub_25A50E4C0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A4FC5F4()
{
  sub_25A50E4C0();

  return sub_25A4FA5E0();
}

double sub_25A4FC658@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = sub_25A4FA6AC(a1, *(void *)(v2 + 16), a2).n128_u64[0];
  return result;
}

uint64_t sub_25A4FC674(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IOPowerSource.Observer();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for IOPowerSource.NotificationCallbackWrapper()
{
  return self;
}

uint64_t sub_25A4FC6F4()
{
  return sub_25A4FB0F8();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

unint64_t sub_25A4FC718()
{
  unint64_t result = qword_26A41BCA0;
  if (!qword_26A41BCA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41BCA0);
  }
  return result;
}

uint64_t type metadata accessor for IOPowerSource()
{
  return self;
}

uint64_t method lookup function for IOPowerSource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IOPowerSource);
}

uint64_t dispatch thunk of IOPowerSource.__allocating_init(observeOn:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t getEnumTagSinglePayload for IOPowerSource.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[16]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  if (v3 < 2) {
    return 0;
  }
  unsigned int v4 = (v3 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v4 - 1;
  if (v4 <= 1) {
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for IOPowerSource.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 3;
    }
  }
  return result;
}

uint64_t sub_25A4FC848(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

void *sub_25A4FC864(void *result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *uint64_t result = a2 - 255;
    result[1] = 0;
  }
  else if (a2)
  {
    *(unsigned char *)uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for IOPowerSource.State()
{
  return &type metadata for IOPowerSource.State;
}

uint64_t getEnumTagSinglePayload for IOPowerSource.State.BatteryInfo(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IOPowerSource.State.BatteryInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IOPowerSource.State.BatteryInfo()
{
  return &type metadata for IOPowerSource.State.BatteryInfo;
}

unsigned char *storeEnumTagSinglePayload for IOPowerSource.State.BatteryInfo.Status(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A4FCA08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IOPowerSource.State.BatteryInfo.Status()
{
  return &type metadata for IOPowerSource.State.BatteryInfo.Status;
}

uint64_t *sub_25A4FCA40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_25A50E4C0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    char v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *char v9 = *v10;
    v9[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t sub_25A4FCB14(uint64_t a1)
{
  uint64_t v2 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_25A4FCB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  char v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

uint64_t sub_25A4FCC14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  char v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_25A4FCCA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_25A4FCD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_25A4FCDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A4FCDC0);
}

uint64_t sub_25A4FCDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E4C0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_25A4FCE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A4FCE94);
}

uint64_t sub_25A4FCE94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_25A50E4C0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_25A4FCF50()
{
  uint64_t result = sub_25A50E4C0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_25A4FCFE8()
{
  return sub_25A4FD188((unint64_t *)&qword_26A417EB8, MEMORY[0x263F07508]);
}

uint64_t sub_25A4FD030()
{
  return sub_25A4FB954();
}

uint64_t sub_25A4FD038(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IOPowerSource.Observer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

__n128 sub_25A4FD09C(__n128 *a1)
{
  __n128 result = v1[1];
  *a1 = result;
  return result;
}

uint64_t sub_25A4FD0A8()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

const __CFDictionary *sub_25A4FD0E0@<X0>(void *a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  return sub_25A4FC0E8(a1, *(const void **)(v2 + 16), a2);
}

uint64_t sub_25A4FD0E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IOPowerSource.Observer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A4FD14C(uint64_t a1)
{
  return sub_25A4FBBCC(a1, *(void *)(v1 + 16));
}

BOOL sub_25A4FD168(uint64_t a1)
{
  return sub_25A4FBC44(a1);
}

uint64_t sub_25A4FD188(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL static Staleable.Discriminant.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t Staleable.Discriminant.hash(into:)()
{
  return sub_25A5104F0();
}

uint64_t Staleable.Discriminant.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t sub_25A4FD270()
{
  return sub_25A510530();
}

uint64_t Staleable.discriminant.getter@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  *a2 = swift_getEnumCaseMultiPayload() == 1;
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
}

uint64_t Staleable.currentValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v6, v8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
}

uint64_t Staleable.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a2, v5);
}

BOOL Staleable.isCurrent.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t Staleable.map<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v23[1] = a4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)v23 - v11;
  MEMORY[0x270FA5388](v10);
  char v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  unint64_t v19 = (uint64_t (**)(char *, uint64_t))(v6 + 8);
  if (EnumCaseMultiPayload == 1)
  {
    v18(v12, v14, v5);
    uint64_t v20 = v24;
    a1(v12);
    uint64_t result = (*v19)(v12, v5);
    if (v20) {
      return result;
    }
  }
  else
  {
    v18(v9, v14, v5);
    uint64_t v22 = v24;
    a1(v9);
    uint64_t result = (*v19)(v9, v5);
    if (v22) {
      return result;
    }
  }
  type metadata accessor for Staleable();
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for Staleable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Staleable.flattenedMap<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v24 = a3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v11;
  uint64_t v12 = sub_25A50FA40();
  uint64_t v21 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  char v14 = (char *)&v21 - v13;
  uint64_t v22 = v4;
  Staleable.value.getter(a2, (uint64_t)v10);
  uint64_t v15 = v25;
  a1(v10);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (!v15)
  {
    MEMORY[0x270FA5388](result);
    uint64_t v18 = v22;
    uint64_t v17 = v23;
    *(&v21 - 4) = v7;
    *(&v21 - 3) = v17;
    *(&v21 - 2) = v18;
    uint64_t v19 = type metadata accessor for Staleable();
    sub_25A3F60F8((void (*)(char *, char *))sub_25A4FDB90, (uint64_t)(&v21 - 6), MEMORY[0x263F8E628], v19, v20, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v14, v12);
  }
  return result;
}

uint64_t sub_25A4FDB90(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v5[2] = *(void *)(v1 + 16);
  v5[3] = v2;
  v5[4] = a1;
  uint64_t v3 = type metadata accessor for Staleable();
  return Staleable.map<A>(_:)((void (*)(char *))sub_25A4FE8B8, (uint64_t)v5, v3, v2);
}

uint64_t sub_25A4FDC08()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4FDC24()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_25A4FDCB0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    unsigned int v10 = a2[v5];
    if (v10 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_18;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_18;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_18;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_18:
          int v13 = (v12 | ((v10 - 2) << (8 * v5))) + 2;
          unsigned int v14 = v12 + 2;
          if (v5 >= 4) {
            unsigned int v10 = v14;
          }
          else {
            unsigned int v10 = v13;
          }
          break;
        default:
          break;
      }
    }
    (*(void (**)(void *))(v4 + 16))(a1);
    *((unsigned char *)v3 + v5) = v10 == 1;
  }
  else
  {
    uint64_t v9 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return v3;
}

uint64_t sub_25A4FDE18(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_10;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_10:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  BOOL v10 = v5 == 1;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
  *(unsigned char *)(a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_25A4FDF38(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v9 = a2[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_11:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    BOOL v14 = v9 == 1;
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
    a1[v8] = v14;
  }
  return a1;
}

uint64_t sub_25A4FE0A0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_10;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_10:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  BOOL v10 = v5 == 1;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
  *(unsigned char *)(a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_25A4FE1C0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v9 = a2[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_11:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    BOOL v14 = v9 == 1;
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
    a1[v8] = v14;
  }
  return a1;
}

uint64_t sub_25A4FE328(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_20;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_20:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_20;
  }
LABEL_12:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_25A4FE450(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_32:
        __break(1u);
        JUMPOUT(0x25A4FE60CLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_20;
      case 3:
        goto LABEL_32;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      default:
LABEL_20:
        if (a2) {
LABEL_21:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25A4FE634(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_10;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_10;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_10;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_10:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_25A4FE6E0(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

unsigned char *sub_25A4FE7AC(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A4FE878);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for Staleable.Discriminant()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4FE8B8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 24) - 8) + 16))(a1, *(void *)(v1 + 32));
}

uint64_t Future.then<A>(dsoHandle:file:line:column:function:on:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, long long *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)&long long v15 = a2;
  *((void *)&v15 + 1) = a3;
  char v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  uint64_t v20 = a8;
  char v21 = a9;
  long long v14 = *a10;
  return sub_25A4FEC38(&v15, &v14, a11, a12, a13);
}

uint64_t Future.flatMap<A>(dsoHandle:file:line:column:function:on:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *a10;
  uint64_t v12 = a10[1];
  v17[0] = a2;
  v17[1] = a3;
  char v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  uint64_t v22 = a8;
  char v23 = a9;
  v16[0] = v13;
  v16[1] = v12;
  v15[0] = v13;
  v15[1] = v12;
  return sub_25A4FE9CC((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, a11, a12);
}

uint64_t sub_25A4FE9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  long long v17 = *(_OWORD *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  char v16 = *(unsigned char *)(a1 + 56);
  int v11 = *(void **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v13 = *(void **)a3;
  uint64_t v14 = *(void *)(a3 + 8);
  type metadata accessor for FlatMapFuture();
  v22[0] = v6;
  v22[1] = v7;
  char v23 = v8;
  long long v24 = v17;
  uint64_t v25 = v9;
  uint64_t v26 = v10;
  char v27 = v16;
  *(void *)&long long v21 = v11;
  *((void *)&v21 + 1) = v12;
  *(void *)&long long v20 = v13;
  *((void *)&v20 + 1) = v14;
  swift_retain();
  sub_25A3EE304(v11);
  sub_25A3EE304(v13);
  swift_allocObject();
  swift_retain();
  return sub_25A4FFC14(v22, v5, &v21, &v20, a4, a5);
}

uint64_t Future.tryFlatMap<A>(dsoHandle:file:line:column:function:on:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = *v13;
  uint64_t v16 = *a10;
  uint64_t v15 = a10[1];
  v22[0] = a2;
  v22[1] = a3;
  char v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  char v28 = a9;
  v21[0] = v16;
  v21[1] = v15;
  v20[0] = v16;
  v20[1] = v15;
  long long v17 = (void *)swift_allocObject();
  void v17[2] = *(void *)(v14 + 80);
  v17[3] = a13;
  void v17[4] = a11;
  v17[5] = a12;
  swift_retain();
  uint64_t v18 = sub_25A4FE9CC((uint64_t)v22, (uint64_t)v21, (uint64_t)v20, (uint64_t)sub_25A4FED68, (uint64_t)v17);
  swift_release();
  return v18;
}

uint64_t sub_25A4FEBBC(uint64_t *a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  return sub_25A4FFC14(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_25A4FEC38(long long *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *v5;
  char v10 = *((unsigned char *)a1 + 56);
  long long v11 = *a1;
  char v18 = *((unsigned char *)a1 + 16);
  long long v19 = *(long long *)((char *)a1 + 24);
  long long v20 = *(long long *)((char *)a1 + 40);
  char v21 = v10;
  long long v16 = *a2;
  long long v17 = v11;
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = *(void *)(v9 + 80);
  v12[3] = a5;
  v12[4] = a3;
  uint64_t v12[5] = a4;
  v15[0] = 0;
  v15[1] = 0;
  swift_retain();
  uint64_t v13 = sub_25A4FE9CC((uint64_t)&v17, (uint64_t)&v16, (uint64_t)v15, (uint64_t)sub_25A50185C, (uint64_t)v12);
  swift_release();
  sub_25A3EE314(0);
  return v13;
}

uint64_t sub_25A4FED30()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A4FED68(uint64_t a1)
{
  return sub_25A4FFAE0(a1, *(uint64_t (**)(void))(v1 + 32));
}

uint64_t Future.then<A>(dsoHandle:file:line:column:function:priority:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v34 = a11;
  uint64_t v35 = a12;
  uint64_t v29 = a10;
  uint64_t v32 = *v13;
  uint64_t v33 = a13;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  MEMORY[0x270FA5388](v19 - 8);
  *(void *)&long long v37 = a2;
  *((void *)&v37 + 1) = a3;
  char v38 = a4;
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = v30;
  uint64_t v42 = v31;
  char v43 = a9;
  long long v36 = 0uLL;
  sub_25A489C78(a10, (uint64_t)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v22 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v33;
  *(void *)(v23 + 16) = *(void *)(v32 + 80);
  *(void *)(v23 + 24) = v24;
  sub_25A4FF298((uint64_t)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22);
  uint64_t v25 = (void *)(v23 + ((v21 + v22 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v26 = v35;
  void *v25 = v34;
  v25[1] = v26;
  swift_retain();
  uint64_t v27 = sub_25A4FEC38(&v37, &v36, (uint64_t)sub_25A4FF300, v23, v24);
  swift_release();
  sub_25A3EE314((id)v36);
  return v27;
}

uint64_t sub_25A4FEF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = a3;
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v14 - 8);
  long long v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Future();
  sub_25A489C78(a2, (uint64_t)v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a5);
  unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  char v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = a5;
  *((void *)v18 + 3) = a6;
  *((void *)v18 + 4) = v22;
  *((void *)v18 + 5) = a4;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v18[v17], v13, a5);
  swift_retain();
  uint64_t v19 = sub_25A4F2028((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FlatMapFuture.swift", 125, 2, 142, 22, (uint64_t)"then(dsoHandle:file:line:column:function:priority:transform:)", 61, 2, (uint64_t)v16, (uint64_t)&unk_26A41BEE8, (uint64_t)v18);
  swift_release();
  return v19;
}

uint64_t sub_25A4FF158()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = sub_25A50F2A0();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_25A4FF298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A4FF300(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v1 + v6;
  char v8 = (uint64_t *)(v1 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];

  return sub_25A4FEF58(a1, v7, v9, v10, v3, v4);
}

uint64_t sub_25A4FF3B8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_25A38F608;
  return v9(a1, a4);
}

uint64_t sub_25A4FF4A4(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v10 = sub_25A510540();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (void **)((char *)&v17 - v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v17 - v11, a1, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = *v12;
    type metadata accessor for Future();
    uint64_t v15 = sub_25A39F124((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FlatMapFuture.swift", 125, 2, 156, 31, (uint64_t)"then(callsite:on:transform:)", 28, 2, v14);
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v7 + 32))(v9, v12, a4);
    uint64_t v15 = a2(v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a4);
  }
  return v15;
}

uint64_t Future.flatMapFailure(dsoHandle:file:line:column:function:on:resultCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, long long *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *v12;
  v19[0] = a2;
  v19[1] = a3;
  char v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  char v25 = a9;
  long long v18 = *a10;
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = *(void *)(v13 + 80);
  void v14[3] = a11;
  _OWORD v14[4] = a12;
  v17[0] = 0;
  v17[1] = 0;
  swift_retain();
  uint64_t v15 = sub_25A4FE9CC((uint64_t)v19, (uint64_t)v17, (uint64_t)&v18, (uint64_t)sub_25A4FFA00, (uint64_t)v14);
  swift_release();
  sub_25A3EE314(0);
  return v15;
}

uint64_t sub_25A4FF7B0(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v10 = sub_25A510540();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (uint64_t *)((char *)&v17 - v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v17 - v11, a1, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = (void *)*v12;
    uint64_t v15 = a2(*v12);
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v7 + 32))(v9, v12, a4);
    type metadata accessor for Future();
    uint64_t v15 = sub_25A39EF9C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FlatMapFuture.swift", 125, 2, 178, 34, (uint64_t)"flatMapFailure(dsoHandle:file:line:column:function:on:resultCallback:)", 70, 2, (uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a4);
  }
  return v15;
}

uint64_t sub_25A4FF9C8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A4FFA00(uint64_t a1)
{
  return sub_25A4FF7B0(a1, *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 16));
}

uint64_t Future.tryThen<A>(dsoHandle:file:line:column:function:on:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, long long *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = *v13;
  *(void *)&long long v19 = a2;
  *((void *)&v19 + 1) = a3;
  char v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  char v25 = a9;
  long long v18 = *a10;
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = *(void *)(v14 + 80);
  v15[3] = a13;
  v15[4] = a11;
  v15[5] = a12;
  swift_retain();
  uint64_t v16 = sub_25A4FEC38(&v19, &v18, (uint64_t)sub_25A4FFB84, (uint64_t)v15, a13);
  swift_release();
  return v16;
}

uint64_t sub_25A4FFAE0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_25A4FFB84(uint64_t a1)
{
  return sub_25A4FFAE0(a1, *(uint64_t (**)(void))(v1 + 32));
}

uint64_t sub_25A4FFBB4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_25A4FFC14(uint64_t *a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  char v9 = *((unsigned char *)a1 + 16);
  long long v16 = *(_OWORD *)(a1 + 3);
  uint64_t v10 = a1[5];
  uint64_t v11 = a1[6];
  char v12 = *((unsigned char *)a1 + 56);
  *(void *)(v6 + 104) = a5;
  *(void *)(v6 + 112) = a6;
  *(_OWORD *)(v6 + 120) = *a3;
  *(_OWORD *)(v6 + 136) = *a4;
  v17[0] = a2;
  uint64_t v13 = type metadata accessor for FlatMapFuture.Activity();
  swift_retain();
  swift_retain();
  *(void *)(v6 + 152) = sub_25A3EF560(v17, v13);
  swift_release();
  v17[0] = v7;
  v17[1] = v8;
  char v18 = v9;
  long long v19 = v16;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  char v22 = v12;
  uint64_t v14 = sub_25A4EECC4((uint64_t)v17);
  swift_retain_n();
  Future.observeCompletion(_:)((uint64_t)sub_25A501374, v14);
  swift_release();
  swift_retain();
  Future.observeCancelation(_:)((uint64_t)sub_25A50136C, v14);
  swift_release_n();
  swift_release();
  swift_release();
  return v14;
}

void sub_25A4FFD88(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v74 = a1;
  uint64_t v3 = *v1;
  uint64_t v69 = sub_25A50E750();
  uint64_t v68 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  uint64_t v65 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_25A50E790();
  uint64_t v66 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v64 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v3 + 200);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v7 = sub_25A510540();
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v76 + 64);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v72 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  int64_t v73 = (char *)&v58 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v71 = (char *)&v58 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v75 = (char *)&v58 - v14;
  uint64_t v15 = *(void *)(v3 + 208);
  type metadata accessor for Promise();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v17 = sub_25A50FA40();
  uint64_t v77 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  char v22 = (char *)&v58 - v21;
  uint64_t v89 = *(void *)(v2 + 152);
  uint64_t v79 = v6;
  uint64_t v80 = v15;
  uint64_t v81 = v74;
  uint64_t v74 = v6;
  uint64_t v70 = v15;
  type metadata accessor for FlatMapFuture.Activity();
  uint64_t v23 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FlatMapFuture.swift", 125, 2, 306, 55, (uint64_t)"firstCompleted(_:)", 18, 2, (uint64_t)sub_25A501378, (uint64_t)v78, v23, v17, WitnessTable);
  uint64_t v25 = v77;
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v20, v22, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v20, 1, TupleTypeMetadata2) == 1)
  {
    uint64_t v26 = *(void (**)(char *, uint64_t))(v25 + 8);
    v26(v22, v17);
    v26(v20, v17);
    return;
  }
  uint64_t v61 = v22;
  uint64_t v62 = v17;
  uint64_t v63 = *(void *)&v20[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v27 = v76;
  int64_t v60 = *(void (**)(char *, char *, uint64_t))(v76 + 32);
  char v28 = v75;
  v60(v75, v20, v7);
  Result.analyze<A>(success:failure:)((void (*)(char *))sub_25A501398, v2, (void (*)(char *))sub_25A5013A4, v2, v7);
  uint64_t v29 = v84;
  uint64_t v59 = aBlock;
  uint64_t v30 = v27 + 16;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  uint64_t v32 = v71;
  v31(v71, v28, v7);
  uint64_t v33 = (uint64_t)v73;
  v31(v73, v32, v7);
  uint64_t v34 = (uint64_t)v72;
  v31(v72, v32, v7);
  unint64_t v35 = (*(unsigned __int8 *)(v30 + 64) + 40) & ~(unint64_t)*(unsigned __int8 *)(v30 + 64);
  unint64_t v36 = (v8 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v37 = (char *)swift_allocObject();
  uint64_t v38 = v70;
  *((void *)v37 + 2) = v74;
  *((void *)v37 + 3) = v38;
  *((void *)v37 + 4) = v2;
  v60(&v37[v35], v32, v7);
  *(void *)&v37[v36] = v63;
  uint64_t v39 = v59;
  uint64_t aBlock = v59;
  uint64_t v84 = v29;
  uint64_t v74 = v29;
  swift_retain_n();
  swift_retain_n();
  uint64_t v40 = v2;
  if (ExecutionLane.isCurrentLane.getter())
  {
    uint64_t v41 = v34;
    sub_25A500DAC(v40, v33);
    swift_release();
    swift_release();
    uint64_t v42 = v76;
    char v43 = (char *)v33;
  }
  else
  {
    if (v39)
    {
      uint64_t v41 = v34;
      uint64_t v71 = (char *)v7;
      uint64_t v42 = v76;
      if (v39 == 1)
      {
        sub_25A3DD980();
        uint64_t v70 = sub_25A50F8D0();
        unint64_t v87 = sub_25A5014F4;
        uint64_t v88 = v37;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v84 = 1107296256;
        uint64_t v85 = sub_25A3BE05C;
        uint64_t v86 = &block_descriptor_16;
        int64_t v60 = (void (*)(char *, char *, uint64_t))_Block_copy(&aBlock);
        swift_retain();
        swift_release();
        uint64_t v44 = v64;
        sub_25A50E770();
        uint64_t aBlock = MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3DDB54();
        uint64_t v45 = v65;
        uint64_t v46 = v69;
        uint64_t v39 = 1;
        sub_25A50FC90();
        uint64_t v47 = v60;
        uint64_t v48 = (void *)v70;
        MEMORY[0x26113D8E0](0, v44, v45, v60);
        _Block_release(v47);

        (*(void (**)(char *, uint64_t))(v68 + 8))(v45, v46);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v44, v67);
      }
      else
      {
        unint64_t v87 = sub_25A5014F4;
        uint64_t v88 = v37;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v84 = 1107296256;
        uint64_t v85 = sub_25A3BE05C;
        uint64_t v86 = &block_descriptor_14;
        uint64_t v70 = (uint64_t)_Block_copy(&aBlock);
        swift_retain();
        sub_25A3EE304((id)v39);
        unint64_t v51 = v64;
        sub_25A50E770();
        uint64_t v82 = MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3DDB54();
        uint64_t v52 = v65;
        uint64_t v53 = (void *)v39;
        uint64_t v54 = v69;
        sub_25A50FC90();
        long long v55 = (const void *)v70;
        MEMORY[0x26113D8E0](0, v51, v52, v70);
        _Block_release(v55);
        sub_25A3EE314(v53);
        uint64_t v56 = v54;
        uint64_t v39 = (uint64_t)v53;
        (*(void (**)(char *, uint64_t))(v68 + 8))(v52, v56);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v51, v67);
        swift_release();
      }
      swift_release();
      swift_release();
      char v43 = v73;
      uint64_t v50 = v75;
      uint64_t v7 = (uint64_t)v71;
      goto LABEL_12;
    }
    uint64_t v49 = v2;
    uint64_t v41 = v34;
    sub_25A500DAC(v49, v34);
    swift_release();
    swift_release();
    uint64_t v42 = v76;
    char v43 = v73;
  }
  uint64_t v50 = v75;
LABEL_12:
  uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  v57(v41, v7);
  swift_release();
  swift_release();
  v57((uint64_t)v43, v7);
  swift_release_n();
  v57((uint64_t)v50, v7);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v61, v62);
  sub_25A3EE314((id)v39);
}

uint64_t sub_25A500820(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 16);
  char v2 = *(unsigned char *)(a1 + 56);
  long long v4 = *(_OWORD *)a1;
  char v5 = v1;
  long long v6 = *(_OWORD *)(a1 + 24);
  long long v7 = *(_OWORD *)(a1 + 40);
  char v8 = v2;
  return sub_25A500878(&v4);
}

uint64_t sub_25A500878(long long *a1)
{
  char v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 208);
  uint64_t v6 = type metadata accessor for FutureTermination();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (_OWORD *)((char *)&v27 - v8);
  long long v10 = a1[1];
  long long v37 = *a1;
  long long v38 = v10;
  v39[0] = a1[2];
  *(_OWORD *)((char *)v39 + 9) = *(long long *)((char *)a1 + 41);
  uint64_t v34 = v2[19];
  uint64_t v11 = *(void *)(v4 + 200);
  uint64_t v32 = v11;
  uint64_t v33 = v5;
  type metadata accessor for FlatMapFuture.Activity();
  uint64_t v12 = sub_25A50E5B0();
  type metadata accessor for Future();
  type metadata accessor for Future();
  uint64_t v13 = type metadata accessor for Either();
  uint64_t v14 = sub_25A50FA40();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FlatMapFuture.swift", 125, 2, 350, 42, (uint64_t)"cancel(callsite:)", 17, 2, (uint64_t)sub_25A46F024, (uint64_t)v31, v12, v14, WitnessTable);
  uint64_t result = swift_release();
  char v17 = v36;
  if (v36 != 255)
  {
    uint64_t v30 = &v27;
    uint64_t v18 = v35;
    v36 &= 1u;
    uint64_t v19 = MEMORY[0x270FA5388](result);
    uint64_t v28 = v13;
    MEMORY[0x270FA5388](v19);
    uint64_t v29 = v6;
    uint64_t v24 = v11;
    uint64_t v25 = v5;
    uint64_t v26 = v20;
    swift_retain();
    Either.analyze<A>(left:right:)((void (*)(char *))sub_25A5012FC, (uint64_t)v23, (void (*)(char *))sub_25A5012FC, (uint64_t)v23, v28);
    uint64_t v21 = v29;
    long long v22 = v38;
    *uint64_t v9 = v37;
    v9[1] = v22;
    _OWORD v9[2] = v39[0];
    *(_OWORD *)((char *)v9 + 41) = *(_OWORD *)((char *)v39 + 9);
    swift_storeEnumTagMultiPayload();
    sub_25A4EF7A8((uint64_t)v9);
    sub_25A46FAA0(v18, v17);
    sub_25A46FAA0(v18, v17);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v7 + 8))(v9, v21);
  }
  return result;
}

uint64_t sub_25A500BC4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *a1;
  if (v5 >> 62)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    sub_25A510540();
    type metadata accessor for Promise();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(a3, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    sub_25A46FA68(v5);
    type metadata accessor for Future();
    uint64_t v7 = sub_25A3BE428((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FlatMapFuture.swift", 125, 2, 312, 77, (uint64_t)"firstCompleted(_:)", 18, 2);
    uint64_t v9 = v8;
    *a1 = v7 | 0x4000000000000000;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    uint64_t v10 = sub_25A510540();
    type metadata accessor for Promise();
    uint64_t v11 = swift_getTupleTypeMetadata2();
    uint64_t v12 = *(int *)(v11 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a3, a2, v10);
    *(void *)(a3 + v12) = v9;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a3, 0, 1, v11);
  }
}

unint64_t sub_25A500DAC(uint64_t a1, uint64_t a2)
{
  v9[0] = *(void *)(a1 + 152);
  type metadata accessor for FlatMapFuture.Activity();
  uint64_t v4 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FlatMapFuture.swift", 125, 2, 325, 42, (uint64_t)"firstCompleted(_:)", 18, 2, v4, WitnessTable);
  unint64_t result = sub_25A46FA68(v10[0]);
  if (v10[0] != 0x8000000000000008)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(a1 + 104))(a2);
    sub_25A41B150(v10);
    uint64_t v8 = (void *)v10[0];
    v9[0] = v10[0];
    v9[1] = v10[1];
    Promise.track(future:on:)(v7, v9);
    sub_25A3EE314(v8);
    swift_retain();
    Future.observeFinish(_:)((uint64_t)sub_25A5015C4, a1);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_25A500F2C(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v10 = v1[19];
  uint64_t v8 = *(void *)(v3 + 200);
  uint64_t v9 = *(void *)(v3 + 208);
  type metadata accessor for FlatMapFuture.Activity();
  uint64_t v4 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FlatMapFuture.swift", 125, 2, 335, 47, (uint64_t)"secondFinished(_:)", 18, 2, (uint64_t)sub_25A5015C8, (uint64_t)v7, v4, MEMORY[0x263F8D4F8], WitnessTable);
  uint64_t result = swift_release();
  if (v11 == 1) {
    return sub_25A4EF7A8(a1);
  }
  return result;
}

uint64_t sub_25A501064()
{
  swift_release();
  sub_25A3EE314(*(id *)(v0 + 120));
  sub_25A3EE314(*(id *)(v0 + 136));

  return swift_release();
}

uint64_t sub_25A5010A4()
{
  uint64_t v0 = Future.deinit();
  swift_release();
  sub_25A3EE314(*(id *)(v0 + 120));
  sub_25A3EE314(*(id *)(v0 + 136));
  swift_release();
  return v0;
}

uint64_t sub_25A5010EC()
{
  uint64_t v0 = sub_25A5010A4();

  return MEMORY[0x270FA0228](v0, 160, 7);
}

uint64_t type metadata accessor for FlatMapFuture()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t *sub_25A501134(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_25A46FA84(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_25A501168(unint64_t *a1)
{
  return sub_25A46FA68(*a1);
}

unint64_t *sub_25A501170(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_25A46FA84(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_25A46FA68(v4);
  return a1;
}

unint64_t *sub_25A5011AC(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_25A46FA68(v3);
  return a1;
}

uint64_t sub_25A5011E0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_25A50123C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_25A50128C(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *sub_25A5012A8(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_25A5012B8(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *uint64_t result = v2 | v3;
  return result;
}

uint64_t type metadata accessor for FlatMapFuture.Activity()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A501300(uint64_t *a1)
{
  uint64_t v2 = *(_OWORD **)(v1 + 32);
  uint64_t v3 = *a1;
  long long v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  v7[0] = v2[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)v2 + 41);
  return (*(uint64_t (**)(_OWORD *))(*(void *)v3 + 192))(v6);
}

uint64_t sub_25A50136C(uint64_t a1)
{
  return sub_25A500820(a1);
}

uint64_t sub_25A501378@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A500BC4(a1, *(void *)(v2 + 32), a2);
}

id sub_25A501398@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 120);
  uint64_t v3 = *(void *)(v1 + 128);
  *a1 = v2;
  a1[1] = v3;
  return sub_25A3EE304(v2);
}

id sub_25A5013A4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 136);
  uint64_t v3 = *(void *)(v1 + 144);
  *a1 = v2;
  a1[1] = v3;
  return sub_25A3EE304(v2);
}

uint64_t sub_25A5013B0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v2 = *(void *)(sub_25A510540() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1) {

  }
  else {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

unint64_t sub_25A5014F4()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v1 = *(void *)(sub_25A510540() - 8);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_25A500DAC(v2, v3);
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

unint64_t sub_25A5015C8@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  unint64_t result = *a1;
  if (result >> 62 == 1)
  {
    unint64_t result = sub_25A46FA68(result);
    *a1 = 0x8000000000000000;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t sub_25A501628()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A5016EC(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(int **)(v1 + 32);
  uint64_t v6 = v1
     + ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_25A38F608;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
  uint64_t v8 = (void *)swift_task_alloc();
  _OWORD v7[2] = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_25A38F608;
  return v10(a1, v6);
}

uint64_t sub_25A50185C(uint64_t a1)
{
  return sub_25A4FF4A4(a1, *(uint64_t (**)(char *))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16));
}

uint64_t sub_25A50187C(long long *a1)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 16);
  char v3 = *((unsigned char *)a1 + 56);
  uint64_t v4 = *(void *)(v1 + 16);
  long long v8 = *a1;
  uint64_t v9 = v2;
  long long v10 = *(long long *)((char *)a1 + 24);
  long long v11 = *(long long *)((char *)a1 + 40);
  char v12 = v3;
  char v13 = 2;
  uint64_t v5 = *(void *)(v4 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 76));
  sub_25A3BE6FC((void *)(v5 + 16), (BOOL *)&v14);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 76));
  char v6 = v14;
  uint64_t result = swift_release();
  if (v6)
  {
    sub_25A39F4F8((uint64_t)&v8, (uint64_t)&v14, &qword_26A415D90);
    return sub_25A39E1AC((uint64_t)&v14);
  }
  return result;
}

uint64_t sub_25A5019A8(long long *a1)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 16);
  char v3 = *((unsigned char *)a1 + 56);
  uint64_t v4 = *(void *)(v1 + 16);
  long long v8 = *a1;
  uint64_t v9 = v2;
  long long v10 = *(long long *)((char *)a1 + 24);
  long long v11 = *(long long *)((char *)a1 + 40);
  char v12 = v3;
  char v13 = 2;
  uint64_t v5 = *(void *)(v4 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 76));
  sub_25A3BE4D8((void *)(v5 + 16), (BOOL *)&v14);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 76));
  char v6 = v14;
  uint64_t result = swift_release();
  if (v6)
  {
    sub_25A39F4F8((uint64_t)&v8, (uint64_t)&v14, &qword_26A415DA8);
    return sub_25A39DAE0((uint64_t)&v14);
  }
  return result;
}

uint64_t sub_25A501AD4@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  v21[1] = sub_25A50526C;
  void v21[2] = v9;
  uint64_t v10 = qword_26A4154C0;
  swift_retain();
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  long long v11 = (void *)(qword_26A418748 + 16);
  char v12 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v12);
  sub_25A42091C(v11, v21);
  os_unfair_lock_unlock(v12);
  uint64_t v13 = v21[0];
  uint64_t v14 = swift_release();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  long long v16 = *(os_unfair_lock_s **)(v5 + 16);
  MEMORY[0x270FA5388](v15);
  swift_retain();
  os_unfair_lock_lock(v16 + 8);
  sub_25A505570();
  os_unfair_lock_unlock(v16 + 8);
  swift_release();
  char v17 = (uint64_t (*)())swift_allocObject();
  *((void *)v17 + 2) = sub_25A505560;
  *((void *)v17 + 3) = v5;
  *((void *)v17 + 4) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t v18 = sub_25A3B7704(a1, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  uint64_t result = swift_release();
  *a4 = sub_25A5055D0;
  a4[1] = v17;
  a4[2] = (uint64_t (*)())v18;
  return result;
}

uint64_t sub_25A501D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = *(os_unfair_lock_s **)(a3 + 16);
  swift_retain();
  os_unfair_lock_lock(v3 + 8);
  sub_25A5056A4();
  os_unfair_lock_unlock(v3 + 8);
  return swift_release();
}

uint64_t SingleFireEvent.__allocating_init(description:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  SingleFireEvent.init(description:)(a1, a2);
  return v4;
}

BOOL SingleFireEvent.hasFired.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A4C4AE4((unint64_t *)(v1 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  unint64_t v2 = v4;
  swift_release();
  sub_25A4C5098(v2);
  return v2 == 0;
}

void sub_25A501E7C(uint64_t a1@<X0>, void (**a2)(void)@<X1>, void *a3@<X8>)
{
  *(void *)(swift_allocObject() + 16) = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  _Block_copy(a2);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 32));
  sub_25A50568C((void *)(v6 + 16), (uint64_t)v10);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 32));
  swift_release();
  uint64_t v7 = v10[0];
  if (v10[0])
  {
    uint64_t v8 = v10[1];
    uint64_t v9 = v10[2];
    swift_release();
    _Block_release(a2);
    *a3 = v7;
    a3[1] = v8;
    a3[2] = v9;
  }
  else
  {
    if (v11) {
      a2[2](a2);
    }
    swift_release();
    _Block_release(a2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

uint64_t SingleFireEvent.observe(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
  sub_25A3C5BDC((void *)(v5 + 16), (uint64_t)&v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
  uint64_t result = swift_release();
  if ((void)v8)
  {
    uint64_t v7 = v9;
    *(_OWORD *)a2 = v8;
    *(void *)(a2 + 16) = v7;
  }
  else
  {
    if (v10) {
      uint64_t result = a1(result);
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t sub_25A50207C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A503E78((unint64_t *)(v1 + 16), (unint64_t *)v24);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  uint64_t v3 = *((void *)&v24[0] + 1);
  uint64_t v2 = *(void *)&v24[0];
  uint64_t result = swift_release();
  if (v2)
  {
    uint64_t v5 = *(void *)(v2 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
    sub_25A3EF390((void *)(v5 + 16), v24);
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
    uint64_t v6 = swift_release();
    long long v7 = v24[0];
    MEMORY[0x270FA5388](v6);
    sub_25A4BC158((uint64_t)sub_25A5050BC, (uint64_t)v14, v7, *((uint64_t *)&v7 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memset(v24, 0, 58);
    sub_25A3BC604((uint64_t)v24);
    uint64_t v8 = *(void *)(v3 + 16);
    if (v8)
    {
      uint64_t v15 = v2;
      v18[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation"
               "/SingleFireEvent.swift";
      v18[1] = 127;
      char v19 = 2;
      long long v20 = xmmword_25A51D2C0;
      uint64_t v21 = "fire(inside:)";
      uint64_t v22 = 13;
      char v23 = 2;
      uint64_t v9 = swift_bridgeObjectRetain();
      v14[5] = v3;
      char v10 = (uint64_t *)(v3 + 48);
      do
      {
        long long v16 = (void (*)(uint64_t))*(v10 - 2);
        uint64_t v11 = *v10;
        uint64_t v12 = *(void *)(*v10 + 144);
        MEMORY[0x270FA5388](v9);
        v14[0] = v18;
        v14[1] = v11;
        void v14[2] = sub_25A3B1EC4;
        void v14[3] = 0;
        swift_retain();
        swift_retain();
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v12 + 76));
        sub_25A3B8530((long long *)(v12 + 16), v17);
        os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 76));
        uint64_t v13 = swift_release();
        if ((v17[0] & 1) == 0) {
          v16(v13);
        }
        swift_release();
        uint64_t v9 = swift_release();
        v10 += 3;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      uint64_t v2 = v15;
    }
    sub_25A5050C4(v2);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_25A502340(void (*a1)(uint64_t (*)(), void *))
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  sub_25A503E78((unint64_t *)(v3 + 16), (unint64_t *)&v20);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  uint64_t v4 = (uint64_t)v20;
  uint64_t v5 = v21;
  uint64_t result = swift_release();
  if (v4)
  {
    MEMORY[0x270FA5388](result);
    uint64_t v14 = (unint64_t (*)(uint64_t, long long *))v4;
    uint64_t v15 = v1;
    swift_retain();
    swift_bridgeObjectRetain();
    a1(sub_25A505104, v13);
    uint64_t v7 = *(void *)(v5 + 16);
    if (v7)
    {
      uint64_t v17 = v4;
      long long v20 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Si"
            "ngleFireEvent.swift";
      uint64_t v21 = 127;
      char v22 = 2;
      long long v23 = xmmword_25A51D2C0;
      uint64_t v24 = "fire(inside:)";
      uint64_t v25 = 13;
      char v26 = 2;
      uint64_t v8 = swift_bridgeObjectRetain();
      uint64_t v16 = v5;
      uint64_t v9 = v5 + 48;
      do
      {
        uint64_t v18 = *(void (**)(uint64_t))(v9 - 16);
        uint64_t v10 = *(void *)v9;
        uint64_t v11 = *(void *)(*(void *)v9 + 144);
        MEMORY[0x270FA5388](v8);
        v13[0] = &v20;
        v13[1] = v10;
        uint64_t v14 = sub_25A3B1EC4;
        uint64_t v15 = 0;
        swift_retain();
        swift_retain();
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v11 + 76));
        sub_25A3B8530((long long *)(v11 + 16), v19);
        os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 76));
        uint64_t v12 = swift_release();
        if ((v19[0] & 1) == 0) {
          v18(v12);
        }
        swift_release();
        uint64_t v8 = swift_release();
        v9 += 24;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
      uint64_t v4 = v17;
    }
    sub_25A5050C4(v4);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t SingleFireEvent.observeUntilFiredOrCanceled(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  sub_25A50568C((void *)(v3 + 16), (uint64_t)&v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  uint64_t result = swift_release();
  uint64_t v5 = v6;
  if (v6)
  {
    sub_25A502680((uint64_t)&v6);
    return sub_25A3901A8(v5);
  }
  else if (v7)
  {
    return a1(result);
  }
  return result;
}

uint64_t sub_25A502680(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))a1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v4 + 8);
  sub_25A505540((uint64_t)&v4[4], (char *)v9);
  os_unfair_lock_unlock(v4 + 8);
  char v5 = v9[0];
  uint64_t result = swift_release();
  if ((v5 & 1) == 0)
  {
    v9[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Si"
            "ngleFireEvent.swift";
    v9[1] = 127;
    uint64_t v12 = "manage(_:)";
    uint64_t v13 = 10;
    char v10 = 2;
    long long v11 = xmmword_25A51D2D0;
    char v14 = 2;
    uint64_t v7 = *(void *)(v3 + 144);
    MEMORY[0x270FA5388](result);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 76));
    sub_25A3B8530((long long *)(v7 + 16), v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 76));
    uint64_t result = swift_release();
    if ((v8[0] & 1) == 0) {
      return v2(result);
    }
  }
  return result;
}

uint64_t sub_25A5027F8(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void **), uint64_t a5)
{
  uint64_t v10 = sub_25A50E750();
  uint64_t v25 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_25A50E790();
  uint64_t v23 = *(void *)(v13 - 8);
  uint64_t v24 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A39F4F8(a1, (uint64_t)v33, &qword_26A415DA8);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  sub_25A39F4F8((uint64_t)v33, v16 + 32, &qword_26A415DA8);
  uint64_t aBlock = a2;
  uint64_t v28 = a3;
  swift_retain();
  sub_25A5051C4(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_25A39F590);
  swift_retain();
  sub_25A5051C4(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_25A39F590);
  swift_retain();
  sub_25A5051C4(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_25A39F590);
  if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !a2)
  {
    sub_25A39F4F8(a1, (uint64_t)&aBlock, &qword_26A415DA8);
    a4(&aBlock);
  }
  else
  {
    if (a2 != (void *)1)
    {
      uint64_t v31 = sub_25A50516C;
      uint64_t v32 = v16;
      uint64_t aBlock = (void *)MEMORY[0x263EF8330];
      uint64_t v28 = 1107296256;
      uint64_t v29 = sub_25A3BE05C;
      uint64_t v30 = &block_descriptor_15;
      uint64_t v22 = (uint64_t)_Block_copy(&aBlock);
      swift_retain();
      sub_25A3EE304(a2);
      sub_25A50E770();
      uint64_t v26 = MEMORY[0x263F8EE78];
      v21[1] = sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
      sub_25A50FC90();
      long long v20 = (const void *)v22;
      MEMORY[0x26113D8E0](0, v15, v12, v22);
      _Block_release(v20);
      sub_25A3EE314(a2);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v24);
      swift_release();
      swift_release();
      goto LABEL_7;
    }
    sub_25A3DD980();
    uint64_t v22 = sub_25A50F8D0();
    uint64_t v31 = sub_25A50516C;
    uint64_t v32 = v16;
    uint64_t aBlock = (void *)MEMORY[0x263EF8330];
    uint64_t v28 = 1107296256;
    uint64_t v29 = sub_25A3BE05C;
    uint64_t v30 = &block_descriptor_18_0;
    uint64_t v17 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    sub_25A50E770();
    uint64_t aBlock = (void *)MEMORY[0x263F8EE78];
    sub_25A3BE558();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
    sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
    sub_25A50FC90();
    uint64_t v18 = (void *)v22;
    MEMORY[0x26113D8E0](0, v15, v12, v17);
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v24);
  }
  swift_release();
LABEL_7:
  swift_release();
  sub_25A5051C4(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_25A504DFC);
  swift_release();
  return sub_25A5051C4(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_25A504DFC);
}

uint64_t sub_25A502D24(uint64_t a1, void *a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v48 = a5;
  uint64_t v9 = sub_25A50E750();
  uint64_t v45 = *(void *)(v9 - 8);
  uint64_t v46 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v42 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25A50E790();
  uint64_t v43 = *(void *)(v11 - 8);
  uint64_t v44 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v41 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  char v19 = (char *)&v40 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v40 - v20;
  sub_25A393828(a1, (uint64_t)&v40 - v20, &qword_26A415D20);
  sub_25A393828((uint64_t)v21, (uint64_t)v19, &qword_26A415D20);
  uint64_t v47 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A393828((uint64_t)v21, (uint64_t)v47, &qword_26A415D20);
  unint64_t v22 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v23 = a2;
  uint64_t v24 = a4;
  uint64_t v25 = v48;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v24;
  *(void *)(v26 + 24) = v25;
  sub_25A39F4F8((uint64_t)v21, v26 + v22, &qword_26A415D20);
  uint64_t aBlock = v23;
  uint64_t v51 = a3;
  swift_retain_n();
  if (ExecutionLane.isCurrentLane.getter())
  {
    v24(v19);
    swift_release();
    swift_release();
    uint64_t v27 = (uint64_t)v47;
LABEL_7:
    uint64_t v28 = (uint64_t)v19;
    goto LABEL_10;
  }
  if (!v23)
  {
    uint64_t v27 = (uint64_t)v47;
    v24(v47);
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  uint64_t v28 = (uint64_t)v19;
  if (v23 == (void *)1)
  {
    sub_25A3DD980();
    uint64_t v29 = (void *)sub_25A50F8D0();
    uint64_t v54 = sub_25A50544C;
    uint64_t v55 = v26;
    uint64_t aBlock = (void *)MEMORY[0x263EF8330];
    uint64_t v51 = 1107296256;
    uint64_t v52 = sub_25A3BE05C;
    uint64_t v53 = &block_descriptor_33_1;
    uint64_t v30 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    uint64_t v31 = v41;
    sub_25A50E770();
    uint64_t aBlock = (void *)MEMORY[0x263F8EE78];
    sub_25A3BE558();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
    sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
    uint64_t v32 = v42;
    uint64_t v33 = v46;
    sub_25A50FC90();
    MEMORY[0x26113D8E0](0, v31, v32, v30);
    _Block_release(v30);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v44);
  }
  else
  {
    uint64_t v54 = sub_25A50544C;
    uint64_t v55 = v26;
    uint64_t aBlock = (void *)MEMORY[0x263EF8330];
    uint64_t v51 = 1107296256;
    uint64_t v52 = sub_25A3BE05C;
    uint64_t v53 = &block_descriptor_30_0;
    uint64_t v34 = _Block_copy(&aBlock);
    swift_retain();
    sub_25A3EE304(v23);
    uint64_t v35 = v41;
    sub_25A50E770();
    uint64_t v49 = MEMORY[0x263F8EE78];
    sub_25A3BE558();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
    unsigned __int8 v36 = v23;
    sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
    long long v37 = v42;
    uint64_t v38 = v46;
    sub_25A50FC90();
    MEMORY[0x26113D8E0](0, v35, v37, v34);
    _Block_release(v34);
    sub_25A3EE314(v36);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v44);
    swift_release();
  }
  swift_release();
  swift_release();
  uint64_t v27 = (uint64_t)v47;
LABEL_10:
  sub_25A384BCC(v27, &qword_26A415D20);
  swift_release();
  return sub_25A384BCC(v28, &qword_26A415D20);
}

uint64_t sub_25A503344@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D10);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_25A393828((uint64_t)a1, (uint64_t)v10, &qword_26A415D10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_25A39F4F8((uint64_t)v10, a4, &qword_26A415D20);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a4, 0, 1, v11);
  }
  else
  {
    sub_25A384BCC((uint64_t)a1, &qword_26A415D10);
    uint64_t v13 = (void *)*v10;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a2;
    *(void *)(v14 + 24) = a3;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_25A38B830(0, v13[2] + 1, 1, v13);
    }
    unint64_t v16 = v13[2];
    unint64_t v15 = v13[3];
    if (v16 >= v15 >> 1) {
      uint64_t v13 = sub_25A38B830((void *)(v15 > 1), v16 + 1, 1, v13);
    }
    void v13[2] = v16 + 1;
    uint64_t v17 = &v13[2 * v16];
    void v17[4] = sub_25A50526C;
    v17[5] = v14;
    *a1 = v13;
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a4, 1, 1, v18);
  }
}

double sub_25A503560@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_25A5035A8(a1, a2, a3, (uint64_t (*)(BOOL, unint64_t, uint64_t, void *))sub_25A38B83C, (uint64_t)sub_25A505268, a4);
}

double sub_25A5035A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(BOOL, unint64_t, uint64_t, void *)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8 = *(void **)a1;
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16);
    uint64_t v14 = *(void *)(a1 + 24);
    uint64_t v15 = *(void *)(a1 + 8);
    *(void *)a6 = v8;
    *(void *)(a6 + 8) = v15;
    *(void *)(a6 + 16) = v13;
    *(void *)(a6 + 24) = v14;
    *(void *)(a6 + 32) = v11;
    *(void *)(a6 + 40) = v12;
    *(void *)(a6 + 48) = v9;
    *(_WORD *)(a6 + 56) = v10 | (unsigned __int16)((unsigned __int16)(v10 >> 8) << 8);
    sub_25A39F434(v8, v15, v13, v14, v11, v12, v9, v10, SBYTE1(v10));
  }
  else
  {
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = a2;
    *(void *)(v21 + 24) = a3;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = (void *)a4(0, v8[2] + 1, 1, v8);
    }
    unint64_t v22 = a4;
    unint64_t v24 = v8[2];
    unint64_t v23 = v8[3];
    if (v24 >= v23 >> 1) {
      uint64_t v8 = (void *)v22(v23 > 1, v24 + 1, 1, v8);
    }
    v8[2] = v24 + 1;
    uint64_t v25 = &v8[2 * v24];
    v25[4] = a5;
    v25[5] = v21;
    *(void *)a1 = v8;
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 65) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(void *)(a6 + 48) = 0;
    *(_WORD *)(a6 + 56) = -256;
  }
  return result;
}

double sub_25A503718@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_25A503774(a1, a2, a3, (void (*)(uint64_t))sub_25A39F484, (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))sub_25A38B848, (uint64_t)sub_25A505268, a4);
}

double sub_25A503774@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X4>, uint64_t (*a5)(BOOL, unint64_t, uint64_t, uint64_t)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v9 = *(void *)a1;
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 16);
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 8);
    unsigned int v17 = *(void *)(a1 + 56) | ((*(void *)(a1 + 56) >> 8) << 8);
    *(void *)a7 = v9;
    *(void *)(a7 + 8) = v16;
    *(void *)(a7 + 16) = v14;
    *(void *)(a7 + 24) = v15;
    *(void *)(a7 + 32) = v12;
    *(void *)(a7 + 40) = v13;
    *(void *)(a7 + 48) = v11;
    *(_WORD *)(a7 + 56) = v17;
    a4(v9);
  }
  else
  {
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = a2;
    *(void *)(v23 + 24) = a3;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = a5(0, *(void *)(v9 + 16) + 1, 1, v9);
    }
    unint64_t v24 = a5;
    unint64_t v26 = *(void *)(v9 + 16);
    unint64_t v25 = *(void *)(v9 + 24);
    if (v26 >= v25 >> 1) {
      uint64_t v9 = v24(v25 > 1, v26 + 1, 1, v9);
    }
    *(void *)(v9 + 16) = v26 + 1;
    uint64_t v27 = v9 + 16 * v26;
    *(void *)(v27 + 32) = a6;
    *(void *)(v27 + 40) = v23;
    *(void *)a1 = v9;
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 65) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(void *)(a7 + 48) = 0;
    *(_WORD *)(a7 + 56) = -256;
  }
  return result;
}

double sub_25A5038EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_25A5035A8(a1, a2, a3, (uint64_t (*)(BOOL, unint64_t, uint64_t, void *))sub_25A38BCEC, (uint64_t)sub_25A505268, a4);
}

double sub_25A503934@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_25A503774(a1, a2, a3, (void (*)(uint64_t))sub_25A39F4D8, (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))sub_25A38BCF8, (uint64_t)sub_25A505268, a4);
}

uint64_t SingleFireEvent.future.getter()
{
  return swift_retain();
}

void *SingleFireEvent.init(description:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41BEF0);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = MEMORY[0x263F8EE78];
  unint64_t v6 = sub_25A3932E0(MEMORY[0x263F8EE78]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41BEF8);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 32) = 0;
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  *(void *)(v4 + 16) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41BF00);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 32) = 0;
  *(void *)(v8 + 16) = v4;
  *(void *)(v8 + 24) = v5;
  void v3[2] = v8;
  *(void *)&long long v45 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/SingleFireEvent.swift";
  *((void *)&v45 + 1) = 127;
  char v46 = 2;
  long long v47 = xmmword_25A51D2E0;
  uint64_t v48 = "init(description:)";
  uint64_t v49 = 18;
  char v50 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41BF08);
  uint64_t v9 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41BF10);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 76) = 0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(void *)(v10 + 64) = 0;
  *(_WORD *)(v10 + 72) = -256;
  *(void *)(v9 + 104) = v10;
  uint64_t v11 = sub_25A39D1C0(&v45);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41BF18);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  uint64_t v28 = v3;
  v3[3] = v12;
  *(void *)&long long v39 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/SingleFireEvent.swift";
  *((void *)&v39 + 1) = 127;
  char v40 = 2;
  long long v41 = xmmword_25A51D2F0;
  uint64_t v42 = "init(description:)";
  uint64_t v43 = 18;
  char v44 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41BF20);
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  uint64_t v13 = sub_25A39D1C0(&v39);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  void v14[3] = 0;
  _OWORD v14[4] = sub_25A504C8C;
  v14[5] = v13;
  uint64_t v15 = *(os_unfair_lock_s **)(v11 + 88);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v15 + 25);
  sub_25A504D64((uint64_t)&v15[4], (uint64_t)&v29);
  os_unfair_lock_unlock(v15 + 25);
  swift_release();
  uint64_t v16 = v36;
  if (HIBYTE(v36) <= 0xFEu)
  {
    uint64_t v18 = v34;
    uint64_t v17 = v35;
    uint64_t v19 = v32;
    uint64_t v20 = v33;
    uint64_t v21 = v30;
    uint64_t v22 = v31;
    uint64_t v23 = v29;
    v37[0] = v29;
    v37[1] = v30;
    v37[2] = v31;
    v37[3] = v32;
    v37[4] = v33;
    v37[5] = v34;
    v37[6] = v35;
    uint64_t v25 = v35;
    unsigned __int16 v38 = v36;
    swift_retain();
    sub_25A3BE75C(v23, v21, v22, v19, v20, v18, v17, v16);
    sub_25A39DAE0((uint64_t)v37);
    sub_25A504DC4(v23, v21, v22, v19, v20, v18, v25, v16);
    swift_release();
    sub_25A504DC4(v23, v21, v22, v19, v20, v18, v25, v16);
  }
  swift_release();
  swift_release();
  swift_release_n();
  swift_release();
  swift_release();
  double result = v28;
  v28[4] = a1;
  v28[5] = a2;
  v28[6] = v13;
  return result;
}

uint64_t SingleFireEvent.deinit()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A4C4AE4((unint64_t *)(v1 + 16), v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  unint64_t v2 = v4[0];
  swift_release();
  if (v2 >= 2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    v4[0] = (unint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Pre"
                              "viewsFoundation/SingleFireEvent.swift";
    v4[1] = 127;
    char v5 = 2;
    long long v6 = xmmword_25A51D300;
    uint64_t v7 = "deinit";
    uint64_t v8 = 6;
    char v9 = 2;
    sub_25A403498();
  }
  else
  {
    sub_25A4C5098(v2);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t SingleFireEvent.__deallocating_deinit()
{
  SingleFireEvent.deinit();

  return MEMORY[0x270FA0228](v0, 56, 7);
}

Swift::Void __swiftcall SingleFireEvent.fire()()
{
  sub_25A50207C(v0);
}

unint64_t *sub_25A503E78@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result;
  if (*result >= 2)
  {
    char v5 = result;
    unint64_t v4 = result[1];
    swift_retain();
    swift_bridgeObjectRetain();
    double result = (unint64_t *)sub_25A4C5098(v3);
    *char v5 = 0;
    v5[1] = 0;
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0;
  }
  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t sub_25A503EF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A3EF390((void *)(v1 + 16), v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  swift_release();
  sub_25A4BC158((uint64_t)sub_25A505660, (uint64_t)&v3, *(uint64_t *)&v4[0], *((uint64_t *)&v4[0] + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memset(v4, 0, 58);
  return sub_25A3BC604((uint64_t)v4);
}

Swift::Void __swiftcall SingleFireEvent.cancel()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A5041F8((unint64_t *)(v1 + 16), v15);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  unint64_t v2 = v15[0];
  swift_release();
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      v15[0] = (unint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/"
                                 "PreviewsFoundation/SingleFireEvent.swift";
      v15[1] = 127;
      char v16 = 2;
      long long v17 = xmmword_25A51D310;
      uint64_t v18 = "cancel()";
      uint64_t v19 = 8;
      char v20 = 2;
      uint64_t v4 = swift_bridgeObjectRetain();
      unint64_t v5 = v2 + 48;
      do
      {
        uint64_t v8 = *(void (**)(uint64_t))(v5 - 16);
        uint64_t v6 = *(void *)(*(void *)v5 + 144);
        MEMORY[0x270FA5388](v4);
        swift_retain();
        swift_retain();
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v6 + 76));
        sub_25A3B8530((long long *)(v6 + 16), &v9);
        os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 76));
        uint64_t v7 = swift_release();
        if ((v9 & 1) == 0) {
          v8(v7);
        }
        swift_release();
        uint64_t v4 = swift_release();
        v5 += 24;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  *(void *)&long long v9 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFounda"
                   "tion/SingleFireEvent.swift";
  *((void *)&v9 + 1) = 127;
  char v10 = 2;
  long long v11 = xmmword_25A51D320;
  uint64_t v12 = "cancel()";
  uint64_t v13 = 8;
  char v14 = 2;
  sub_25A5019A8(&v9);
}

unint64_t *sub_25A5041F8@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result;
  if (*result >= 2)
  {
    unint64_t v5 = result;
    unint64_t v4 = result[1];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_25A4C5098(v3);
    double result = (unint64_t *)swift_release();
    *(_OWORD *)unint64_t v5 = xmmword_25A511960;
  }
  else
  {
    unint64_t v4 = 0;
  }
  *a2 = v4;
  return result;
}

double sub_25A504280@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1)
  {
    if (*a1 == 1)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(unsigned char *)(a4 + 24) = 0;
      *(void *)(a4 + 16) = 0;
    }
    else
    {
      swift_retain();
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = a2;
      *(void *)(v7 + 24) = a3;
      *(void *)&long long v12 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsF"
                        "oundation/SingleFireEvent.swift";
      *((void *)&v12 + 1) = 127;
      char v13 = 2;
      long long v14 = xmmword_25A51D330;
      uint64_t v15 = "observe(_:)";
      uint64_t v16 = 11;
      char v17 = 2;
      swift_retain();
      swift_retain();
      sub_25A501AD4(&v12, (uint64_t)sub_25A3FADB8, v7, (uint64_t (**)())&v10);
      swift_release_n();
      swift_release();
      uint64_t v8 = v11;
      double result = *(double *)&v10;
      *(_OWORD *)a4 = v10;
      *(void *)(a4 + 16) = v8;
      *(unsigned char *)(a4 + 24) = 0;
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(unsigned char *)(a4 + 24) = 1;
  }
  return result;
}

uint64_t sub_25A5043B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v6 = *(void *)result;
  if (*(void *)result >= 2uLL)
  {
    long long v10 = (void *)result;
    uint64_t v11 = *(void **)(result + 8);
    swift_retain();
    swift_retain();
    double result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      double result = (uint64_t)sub_25A38AC5C(0, v11[2] + 1, 1, v11);
      uint64_t v11 = (void *)result;
    }
    unint64_t v13 = v11[2];
    unint64_t v12 = v11[3];
    if (v13 >= v12 >> 1)
    {
      double result = (uint64_t)sub_25A38AC5C((void *)(v12 > 1), v13 + 1, 1, v11);
      uint64_t v11 = (void *)result;
    }
    void v11[2] = v13 + 1;
    long long v14 = &v11[3 * v13];
    _OWORD v14[4] = a2;
    v14[5] = a3;
    void v14[6] = a4;
    *long long v10 = v6;
    v10[1] = v11;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  *a5 = v7;
  return result;
}

Swift::Void __swiftcall ObjcSingleFireEvent.fire()()
{
  sub_25A50207C(*(void *)(v0 + OBJC_IVAR____TtC20PreviewsFoundationOS19ObjcSingleFireEvent_event));
}

Swift::Void __swiftcall ObjcSingleFireEvent.cancel()()
{
}

uint64_t ObjcSingleFireEvent.addObserver(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC20PreviewsFoundationOS19ObjcSingleFireEvent_event) + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  sub_25A50568C((void *)(v3 + 16), (uint64_t)&v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  uint64_t result = swift_release();
  uint64_t v5 = v6;
  if (v6)
  {
    sub_25A502680((uint64_t)&v6);
    return sub_25A3901A8(v5);
  }
  else if (v7)
  {
    return a1(result);
  }
  return result;
}

BOOL ObjcSingleFireEvent.hasFired.getter()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + OBJC_IVAR____TtC20PreviewsFoundationOS19ObjcSingleFireEvent_event) + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A4C4AE4((unint64_t *)(v1 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  unint64_t v2 = v4;
  swift_release();
  sub_25A4C5098(v2);
  return v2 == 0;
}

id ObjcSingleFireEvent.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id ObjcSingleFireEvent.init()()
{
  id v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = OBJC_IVAR____TtC20PreviewsFoundationOS19ObjcSingleFireEvent_event;
  type metadata accessor for SingleFireEvent();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = v1;
  SingleFireEvent.init(description:)(0, 0);
  *(void *)&v1[v3] = v4;

  v7.receiver = v5;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

id ObjcSingleFireEvent.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *sub_25A504A38@<X0>(void *result@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  int v11 = *(unsigned __int8 *)(a2 + 56);
  int v12 = *(unsigned __int8 *)(a2 + 57);
  unsigned int v13 = *((unsigned __int16 *)result + 28);
  unsigned int v14 = v13 >> 8;
  if (v13 >> 8 < 0xFF)
  {
    if (v14 != 2 && v12 != 2)
    {
      uint64_t v16 = (void *)*result;
      uint64_t v25 = (void *)result[1];
      uint64_t v23 = result[3];
      uint64_t v24 = result[2];
      uint64_t v21 = result[5];
      uint64_t v22 = result[4];
      uint64_t v20 = result[6];
      int v19 = *(unsigned __int8 *)(a2 + 56);
      uint64_t v17 = *(void *)(a2 + 40);
      uint64_t v18 = *(void *)(a2 + 48);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A41BF30);
      sub_25A3BE718(qword_26A41BF38, &qword_26A41BF30);
      swift_allocError();
      *(void *)uint64_t v15 = v16;
      *(void *)(v15 + 8) = v25;
      *(void *)(v15 + 16) = v24;
      *(void *)(v15 + 24) = v23;
      *(void *)(v15 + 32) = v22;
      *(void *)(v15 + 40) = v21;
      *(void *)(v15 + 48) = v20;
      *(_WORD *)(v15 + 56) = v13;
      *(void *)(v15 + 64) = v5;
      *(void *)(v15 + 72) = v4;
      *(void *)(v15 + 80) = v7;
      *(void *)(v15 + 88) = v6;
      *(void *)(v15 + 96) = v9;
      *(void *)(v15 + 104) = v17;
      *(void *)(v15 + 112) = v18;
      *(unsigned char *)(v15 + 120) = v19;
      *(unsigned char *)(v15 + 121) = v12;
      sub_25A39F4D8(v5, v4, v7, v6, v9, v17, v18, v19, v12);
      sub_25A505508(v16, v25, v24, v23, v22, v21, v20, v13);
      return (void *)swift_willThrow();
    }
  }
  else
  {
    *uint64_t result = v5;
    result[1] = v4;
    result[2] = v7;
    result[3] = v6;
    result[4] = v9;
    result[5] = v8;
    result[6] = v10;
    *((_WORD *)result + 28) = v11 | ((_WORD)v12 << 8);
    uint64_t result = sub_25A39F4D8(v5, v4, v7, v6, v9, v8, v10, v11, v12);
  }
  *a3 = v14 > 0xFE;
  return result;
}

uint64_t sub_25A504C2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  swift_retain();
  uint64_t v6 = sub_25A3CC690(v4, v5, a2);
  sub_25A393228(v6);

  return swift_release();
}

uint64_t sub_25A504C8C(uint64_t a1)
{
  sub_25A39F4F8(a1, (uint64_t)v2, &qword_26A415DA8);
  return sub_25A39DAE0((uint64_t)v2);
}

uint64_t sub_25A504CC0()
{
  id v1 = *(void **)(v0 + 16);
  if ((unint64_t)v1 >= 2) {

  }
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A504D08(uint64_t a1)
{
  objc_super v2 = (void *)v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = (void (*)(void **))v1[4];
  uint64_t v4 = v1[5];
  sub_25A39F4F8(a1, (uint64_t)v7, &qword_26A415DA8);
  return sub_25A5027F8((uint64_t)v7, v2, v3, v5, v4);
}

double sub_25A504D64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A503774(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), (void (*)(uint64_t))sub_25A39F590, (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))sub_25A38AD84, (uint64_t)sub_25A505268, a2);
}

void sub_25A504DC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (BYTE1(a8) != 255) {
    sub_25A504DFC(a1, a2, a3, a4, a5, a6, a7, a8, SBYTE1(a8));
  }
}

void sub_25A504DFC(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 1) {
}
  }

uint64_t type metadata accessor for SingleFireEvent()
{
  return self;
}

uint64_t method lookup function for SingleFireEvent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SingleFireEvent);
}

uint64_t dispatch thunk of SingleFireEvent.__allocating_init(description:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for ObjcSingleFireEvent()
{
  return self;
}

unint64_t destroy for SingleFireEvent.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s20PreviewsFoundationOS15SingleFireEventC5StateOwCP_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t *assignWithCopy for SingleFireEvent.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_retain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for SingleFireEvent.State(void *a1, uint64_t a2)
{
  if (*a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *(void *)a2;
  swift_release();
  a1[1] = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SingleFireEvent.State()
{
  return &type metadata for SingleFireEvent.State;
}

uint64_t sub_25A505074()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A5050AC()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_25A5050BC(uint64_t (**a1)(void))
{
  return sub_25A4BD608(a1);
}

uint64_t sub_25A5050C4(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A505104()
{
  return sub_25A503EF4(*(void *)(v0 + 16));
}

uint64_t sub_25A50510C()
{
  swift_release();
  sub_25A504DFC(*(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned __int8 *)(v0 + 88), *(unsigned char *)(v0 + 89));

  return MEMORY[0x270FA0238](v0, 90, 7);
}

uint64_t sub_25A50516C()
{
  id v1 = *(uint64_t (**)(_OWORD *))(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 80);
  __int16 v3 = *(_WORD *)(v0 + 88);
  long long v4 = *(_OWORD *)(v0 + 48);
  v6[0] = *(_OWORD *)(v0 + 32);
  v6[1] = v4;
  _OWORD v6[2] = *(_OWORD *)(v0 + 64);
  uint64_t v7 = v2;
  __int16 v8 = v3;
  return v1(v6);
}

uint64_t sub_25A5051C4(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 57);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), v4);
  return a1;
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t sub_25A505230()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A50526C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_25A505294()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  unint64_t v5 = (id *)(v0 + v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = sub_25A50E4C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v3, v7);
    uint64_t v8 = type metadata accessor for CrashReport(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = (char *)v5 + *(int *)(v8 + 32);
    uint64_t v10 = sub_25A50E470();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t sub_25A50544C()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20) - 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_25A4C6C44(v2, v3, v4);
}

uint64_t sub_25A5054B4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  uint64_t v3 = *(void *)(a1 + 48);
  __int16 v4 = *(_WORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  uint64_t v8 = v3;
  __int16 v9 = v4;
  return v2(v7);
}

id sub_25A505508(id result, void *a2, int a3, int a4, int a5, int a6, int a7, __int16 a8)
{
  if (HIBYTE(a8) != 255) {
    return sub_25A39F4D8(result, a2, a3, a4, a5, a6, a7, a8, SHIBYTE(a8));
  }
  return result;
}

uint64_t sub_25A505540@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_25A5043B4(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_25A505560(uint64_t a1, uint64_t a2)
{
  return sub_25A501D38(a1, a2, v2);
}

uint64_t sub_25A505568(uint64_t a1)
{
  return sub_25A504C2C(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_25A505570()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_25A505598()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A5055D0()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t (*)(), void *))(v0 + 16);
  void v3[2] = *(void *)(v0 + 32);
  return v1(sub_25A505624, v3);
}

uint64_t sub_25A505624()
{
  uint64_t v1 = sub_25A3CC970(*(void *)(v0 + 16));

  return sub_25A393228(v1);
}

double sub_25A50568C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3C5BDC(a1, a2);
}

uint64_t sub_25A5056A4()
{
  return sub_25A505570();
}

uint64_t CancelationToken.cancel(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  char v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  uint64_t v20 = a8;
  char v21 = a9;
  uint64_t v11 = *(void *)(*(void *)(v10 + *(int *)(a10 + 36)) + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 76));
  sub_25A3B8530((long long *)(v11 + 16), &v13);
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 76));
  uint64_t result = swift_release();
  if ((v13 & 1) == 0) {
    return (*(uint64_t (**)(void))(*(void *)(a10 + 24) + 8))(*(void *)(a10 + 16));
  }
  return result;
}

__n128 CancelationToken<>.init(dsoHandle:file:line:column:function:on:_:)@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, __n128 *a8@<X8>, char a9, __n128 a10, unint64_t a11, unint64_t a12)
{
  *(void *)&long long v15 = a1;
  *((void *)&v15 + 1) = a2;
  char v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  char v21 = a9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t v13 = sub_25A3B7704(&v15, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  __n128 result = a10;
  *a8 = a10;
  a8[1].n128_u64[0] = a11;
  a8[1].n128_u64[1] = a12;
  a8[2].n128_u64[0] = v13;
  return result;
}

uint64_t CancelationToken<>.init(dsoHandle:file:line:column:function:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, char a9, uint64_t a10, uint64_t a11)
{
  *(void *)&long long v13 = a1;
  *((void *)&v13 + 1) = a2;
  char v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  char v19 = a9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t result = sub_25A3B7704(&v13, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  *a8 = a10;
  a8[1] = a11;
  a8[2] = result;
  return result;
}

Swift::Void __swiftcall IsolatedTokenCallback.invoke()()
{
  uint64_t v1 = (void (*)(void))v0[2];
  if (*v0)
  {
    swift_getObjectType();
    Actor.verifyIsolated(_:file:line:)();
  }
  v1();
}

uint64_t sub_25A5059BC()
{
  uint64_t v1 = (uint64_t (*)(void))v0[2];
  if (*v0)
  {
    swift_getObjectType();
    Actor.verifyIsolated(_:file:line:)();
  }
  return v1();
}

Swift::Void __swiftcall ConcurrentTokenCallback.invoke()()
{
  (*v0)();
}

uint64_t sub_25A505A68()
{
  return (*v0)();
}

uint64_t Actor.wrap(token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5 = v4;
  long long v10 = *(_OWORD *)(a1 + 16);
  v22[0] = *(_OWORD *)a1;
  v22[1] = v10;
  uint64_t v23 = *(void *)(a1 + 32);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  *(void *)(v11 + 32) = v5;
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 56) = v12;
  *(void *)(v11 + 72) = *(void *)(a1 + 32);
  long long v13 = (uint64_t (*)())swift_allocObject();
  *((void *)v13 + 2) = a2;
  *((void *)v13 + 3) = a3;
  *((void *)v13 + 4) = sub_25A505FF0;
  *((void *)v13 + 5) = v11;
  *((void *)v13 + 6) = v5;
  *(void *)&long long v16 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/CancelationToken.swift";
  *((void *)&v16 + 1) = 128;
  char v17 = 2;
  long long v18 = xmmword_25A51D3E0;
  char v19 = "wrap(token:)";
  uint64_t v20 = 12;
  char v21 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t v14 = sub_25A3B7704(&v16, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  *a4 = sub_25A506040;
  a4[1] = v13;
  a4[2] = (uint64_t (*)())v14;
  swift_unknownObjectRetain_n();
  return sub_25A49AD3C((uint64_t)v22);
}

uint64_t sub_25A505C18()
{
  return sub_25A50693C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/CancelationToken.swift", 128, 2, 118, 25, (uint64_t)"wrap(token:)", 12, 2);
}

uint64_t sub_25A505CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v10 - 8);
  long long v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_25A50F2A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  void v14[3] = 0;
  _OWORD v14[4] = a4;
  v14[5] = a5;
  void v14[6] = a1;
  v14[7] = a2;
  void v14[8] = a3;
  swift_retain();
  swift_unknownObjectRetain();
  sub_25A38ED10((uint64_t)v12, (uint64_t)&unk_26A41BFC8, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_25A505DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v6[3] = a5;
  void v6[4] = a6;
  _OWORD v6[2] = a4;
  uint64_t v8 = sub_25A50F220();
  return MEMORY[0x270FA2498](sub_25A505E54, v8, v7);
}

uint64_t sub_25A505E54()
{
  (*(void (**)(void))(v0 + 16))(*(void *)(v0 + 32));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t *Actor.wrap(token:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = result[2];
  if (v5)
  {
    uint64_t v9 = result[3];
    uint64_t v8 = result[4];
    uint64_t v11 = *result;
    uint64_t v10 = result[1];
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    v12[0] = v11;
    v12[1] = v10;
    void v12[2] = v5;
    v12[3] = v9;
    v12[4] = v8;
    Actor.wrap(token:)((uint64_t)v12, a2, a3, (uint64_t (**)())a4);
    return (uint64_t *)sub_25A484F74(v11, v10, v5);
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t sub_25A505FA0()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_25A505FF0()
{
  return sub_25A505C18();
}

uint64_t sub_25A506000()
{
  swift_release();
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A506040()
{
  return sub_25A505CA4(v0[4], v0[5], v0[6], v0[2], v0[3]);
}

uint64_t dispatch thunk of CancelationTokenCallback.invoke()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_25A506064()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25A506100(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t sub_25A5061F8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t sub_25A506268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t sub_25A5062E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_25A506374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_25A5063F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_25A506474(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x25A5065C0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_25A5065D4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x25A5067B0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          long long v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *long long v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for CancelationToken()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for IsolatedTokenCallback()
{
  return &type metadata for IsolatedTokenCallback;
}

ValueMetadata *type metadata accessor for ConcurrentTokenCallback()
{
  return &type metadata for ConcurrentTokenCallback;
}

uint64_t sub_25A506810()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25A506858()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_25A38F608;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  uint64_t v6 = sub_25A50F220();
  return MEMORY[0x270FA2498](sub_25A505E54, v6, v5);
}

uint64_t sub_25A50693C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  char v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  char v23 = a8;
  uint64_t v9 = *(void *)(*((void *)v8 + 4) + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 76));
  sub_25A3B8530((long long *)(v9 + 16), &v13);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 76));
  uint64_t result = swift_release();
  if ((v13 & 1) == 0)
  {
    long long v11 = v8[1];
    long long v13 = *v8;
    long long v14 = v11;
    sub_25A506A7C((uint64_t)&v13, (uint64_t)v15);
    uint64_t v12 = sub_25A506A7C((uint64_t)v15, (uint64_t)&v24);
    if (v24)
    {
      swift_getObjectType();
      uint64_t v12 = Actor.verifyIsolated(_:file:line:)();
    }
    return ((uint64_t (*)(uint64_t))v14)(v12);
  }
  return result;
}

uint64_t sub_25A506A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_26A41BFD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A506AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  long long v12 = *(_OWORD *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  char v10 = *(unsigned char *)(a1 + 56);
  type metadata accessor for ZipFuture();
  v13[0] = v5;
  v13[1] = v6;
  char v14 = v7;
  long long v15 = v12;
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  char v18 = v10;
  swift_allocObject();
  swift_retain();
  swift_retain();
  return sub_25A507970(v13, a2, a3);
}

uint64_t sub_25A506BC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_25A507970(a1, a2, a3);
}

uint64_t static Future<A>.zip<A, B>(dsoHandle:file:line:column:function:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  v12[0] = a2;
  v12[1] = a3;
  char v13 = a4;
  uint64_t v14 = a5;
  uint64_t v15 = a6;
  uint64_t v16 = a7;
  uint64_t v17 = a8;
  char v18 = a9;
  return sub_25A506AE4((uint64_t)v12, a10, a11);
}

uint64_t static Future<A>.zip<A, B, C>(dsoHandle:file:line:column:function:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v12 = *a10;
  uint64_t v13 = *a11;
  uint64_t v14 = *a12;
  *(void *)&long long v32 = a2;
  *((void *)&v32 + 1) = a3;
  char v33 = a4;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  char v38 = a9;
  *(void *)&long long v25 = a2;
  *((void *)&v25 + 1) = a3;
  char v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  char v31 = a9;
  uint64_t v15 = sub_25A506AE4((uint64_t)&v25, (uint64_t)a10, (uint64_t)a11);
  sub_25A506AE4((uint64_t)&v32, v15, (uint64_t)a12);
  swift_release();
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = *(void *)(v12 + 80);
  void v16[2] = v17;
  uint64_t v18 = *(void *)(v13 + 80);
  v16[3] = v18;
  uint64_t v19 = *(void *)(v14 + 80);
  v16[4] = v19;
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = v17;
  v20[3] = v18;
  v20[4] = v19;
  v20[5] = sub_25A5070A4;
  v20[6] = v16;
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  sub_25A41B150(&v32);
  uint64_t v22 = (void *)v32;
  long long v25 = v32;
  uint64_t v23 = sub_25A47E74C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ZipFuture.swift", 121, 2, 77, 25, (uint64_t)"zip(dsoHandle:file:line:column:function:_:_:_:)", 47, 2, &v25, (uint64_t)sub_25A5071E8, (uint64_t)v20, TupleTypeMetadata3);
  swift_release();
  swift_release();
  sub_25A3EE314(v22);
  return v23;
}

uint64_t sub_25A506E7C(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v29 = a3;
  uint64_t v30 = a6;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = TupleTypeMetadata2 - 8;
  uint64_t v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v27 - v18;
  uint64_t v20 = (char *)&v27 + *(int *)(v14 + 56) - v18;
  uint64_t v21 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)&v27 - v18, a4, a7);
  uint64_t v22 = *(void *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v20, a5, a8);
  uint64_t v23 = &v17[*(int *)(v14 + 56)];
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v24(v17, v19, a7);
  long long v25 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v25(v23, v20, a8);
  v24(v27, v17, a7);
  v25(v28, v23, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a9 - 8) + 16))(v29, v30, a9);
}

uint64_t sub_25A507094()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A5070A4(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_25A506E7C(a1, a2, a3, a4, a5, a6, v6[2], v6[3], v6[4]);
}

uint64_t sub_25A5070D0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v7 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  return a2(a3, a3 + *(int *)(TupleTypeMetadata3 + 48), a3 + *(int *)(TupleTypeMetadata3 + 64), a1, v6, v7);
}

uint64_t sub_25A5071B0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A5071E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A5070D0(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 40), a2);
}

uint64_t static Future<A>.zip<A, B, C, D>(dsoHandle:file:line:column:function:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13)
{
  uint64_t v32 = *a10;
  uint64_t v33 = *a11;
  uint64_t v34 = *a12;
  uint64_t v35 = *a13;
  *(void *)&long long v43 = a2;
  *((void *)&v43 + 1) = a3;
  LOBYTE(v44) = a4;
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  uint64_t v47 = a7;
  uint64_t v48 = a8;
  char v49 = a9;
  *(void *)&long long v36 = a2;
  *((void *)&v36 + 1) = a3;
  char v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  uint64_t v41 = a8;
  char v42 = a9;
  uint64_t v20 = sub_25A506AE4((uint64_t)&v36, (uint64_t)a10, (uint64_t)a11);
  *(void *)&long long v36 = a2;
  *((void *)&v36 + 1) = a3;
  char v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  uint64_t v41 = a8;
  char v42 = a9;
  uint64_t v21 = sub_25A506AE4((uint64_t)&v36, (uint64_t)a12, (uint64_t)a13);
  sub_25A506AE4((uint64_t)&v43, v20, v21);
  swift_release();
  swift_release();
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v23 = *(void *)(v32 + 80);
  _OWORD v22[2] = v23;
  uint64_t v24 = *(void *)(v33 + 80);
  void v22[3] = v24;
  uint64_t v25 = *(void *)(v34 + 80);
  void v22[4] = v25;
  uint64_t v26 = *(void *)(v35 + 80);
  v22[5] = v26;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v23;
  uint64_t v27[3] = v24;
  v27[4] = v25;
  v27[5] = v26;
  v27[6] = sub_25A508EFC;
  v27[7] = v22;
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  *(void *)&long long v43 = v23;
  *((void *)&v43 + 1) = v24;
  uint64_t v44 = v25;
  uint64_t v45 = v26;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  sub_25A41B150(&v43);
  uint64_t v29 = (void *)v43;
  long long v36 = v43;
  uint64_t v30 = sub_25A47E74C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ZipFuture.swift", 121, 2, 105, 25, (uint64_t)"zip(dsoHandle:file:line:column:function:_:_:_:_:)", 49, 2, &v36, (uint64_t)sub_25A508F64, (uint64_t)v27, TupleTypeMetadata);
  swift_release();
  swift_release();
  sub_25A3EE314(v29);
  return v30;
}

uint64_t sub_25A5074C4(char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v48 = a7;
  uint64_t v49 = a8;
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v55 = a11;
  uint64_t v56 = a12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = TupleTypeMetadata2 - 8;
  uint64_t v45 = TupleTypeMetadata2 - 8;
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  char v50 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v18 = swift_getTupleTypeMetadata2();
  uint64_t v19 = v18 - 8;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v43 - v23;
  long long v43 = (char *)&v43 + *(int *)(v19 + 56) - v23;
  uint64_t v25 = v43;
  uint64_t v26 = *(void *)(a9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))((char *)&v43 - v23, v46, a9);
  uint64_t v27 = *(void *)(a10 - 8);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v25, v47, a10);
  uint64_t v28 = *(int *)(v13 + 56);
  uint64_t v29 = v17;
  uint64_t v44 = v17;
  uint64_t v30 = &v17[v28];
  uint64_t v47 = &v17[v28];
  uint64_t v31 = *(void *)(v55 - 8);
  (*(void (**)(char *, uint64_t))(v31 + 16))(v29, v48);
  uint64_t v32 = *(void *)(v56 - 8);
  (*(void (**)(char *, uint64_t))(v32 + 16))(v30, v49);
  uint64_t v33 = &v22[*(int *)(v19 + 56)];
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v34(v22, v24, a9);
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v35(v33, v43, a10);
  v34(v51, v22, a9);
  v35(v52, v33, a10);
  long long v36 = v50;
  char v37 = &v50[*(int *)(v45 + 56)];
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
  uint64_t v39 = v55;
  v38(v50, v44, v55);
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  uint64_t v41 = v56;
  v40(v37, v47, v56);
  v38(v53, v36, v39);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v40)(v54, v37, v41);
}

uint64_t sub_25A50784C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v8 = v7 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  return a2(a3, a3 + TupleTypeMetadata[12], a3 + TupleTypeMetadata[16], a3 + TupleTypeMetadata[20], a1, v5, v7, v8);
}

uint64_t sub_25A507970(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for ZipFuture.Activity();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  char v13 = *((unsigned char *)a1 + 16);
  long long v22 = *(_OWORD *)(a1 + 3);
  uint64_t v14 = a1[5];
  uint64_t v20 = a1[6];
  uint64_t v21 = v14;
  int v19 = *((unsigned __int8 *)a1 + 56);
  v3[14] = a2;
  v3[15] = a3;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v15 = sub_25A3EF560(v10, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v3[13] = v15;
  swift_release();
  v23[0] = v11;
  v23[1] = v12;
  char v24 = v13;
  long long v25 = v22;
  uint64_t v26 = v21;
  uint64_t v27 = v20;
  char v28 = v19;
  uint64_t v16 = sub_25A4EECC4((uint64_t)v23);
  swift_retain_n();
  Future.observeSuccess(_:)((uint64_t)sub_25A50AA68, v16);
  swift_release();
  swift_retain();
  Future.observeSuccess(_:)((uint64_t)sub_25A50AA10, v16);
  swift_release();
  swift_retain();
  Future.observeFailure(_:)((uint64_t)sub_25A50AA0C, v16);
  swift_release();
  swift_retain();
  Future.observeFailure(_:)((uint64_t)sub_25A50AAC0, v16);
  swift_release();
  swift_retain();
  Future.observeCancelation(_:)((uint64_t)sub_25A50A9F0, v16);
  swift_release();
  swift_retain();
  Future.observeCancelation(_:)((uint64_t)sub_25A50A9F0, v16);
  swift_release_n();
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_25A507C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = (char *)a4;
  uint64_t v45 = (void *)a2;
  uint64_t v46 = a3;
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(*v5 + 200);
  uint64_t v8 = *(void *)(*v5 + 208);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = type metadata accessor for FutureTermination();
  uint64_t v42 = *(void *)(v10 - 8);
  uint64_t v43 = v10;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v41 = (char *)&v38 - v12;
  uint64_t v47 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v39 = (char *)&v38 - v13;
  uint64_t v14 = sub_25A50FA40();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v52 = v5[13];
  uint64_t v49 = v7;
  uint64_t v50 = v8;
  uint64_t v51 = a1;
  uint64_t v38 = v7;
  uint64_t v40 = v8;
  type metadata accessor for ZipFuture.Activity();
  uint64_t v21 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ZipFuture.swift", 121, 2, (uint64_t)v45, 40, v46, 14, 2, (uint64_t)v44, (uint64_t)v48, v21, v14, WitnessTable);
  swift_release();
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v46 = v14;
  v23(v18, v20, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v18, 1, TupleTypeMetadata2) == 1)
  {
    char v24 = *(void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v25 = v46;
    v24(v20, v46);
    return ((uint64_t (*)(char *, uint64_t))v24)(v18, v25);
  }
  else
  {
    uint64_t v27 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v29 = v38;
    char v28 = v39;
    uint64_t v30 = &v39[v27];
    uint64_t v44 = &v39[v27];
    uint64_t v45 = v5;
    uint64_t v31 = &v18[v27];
    uint64_t v32 = *(void *)(v38 - 8);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v39, v18, v38);
    uint64_t v33 = v40;
    uint64_t v34 = *(void *)(v40 - 8);
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v30, v31, v40);
    uint64_t v35 = (uint64_t)v41;
    long long v36 = &v41[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v41, v28, v29);
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v36, v44, v33);
    uint64_t v37 = v43;
    swift_storeEnumTagMultiPayload();
    sub_25A4EF7A8(v35);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v35, v37);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v28, TupleTypeMetadata2);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v46);
  }
}

uint64_t sub_25A50811C(void *a1)
{
  swift_getTupleTypeMetadata2();
  uint64_t v2 = type metadata accessor for FutureTermination();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v8 - v4);
  uint64_t result = sub_25A508BA8();
  if (result)
  {
    *uint64_t v5 = a1;
    swift_storeEnumTagMultiPayload();
    id v7 = a1;
    sub_25A4EF7A8((uint64_t)v5);
    return (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

uint64_t sub_25A508248(uint64_t *a1)
{
  uint64_t v2 = v1;
  swift_getTupleTypeMetadata2();
  uint64_t v4 = type metadata accessor for FutureTermination();
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v25 - v5;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  int v9 = *((unsigned __int8 *)a1 + 16);
  uint64_t v10 = a1[3];
  uint64_t v32 = a1[4];
  uint64_t v12 = a1[5];
  uint64_t v11 = a1[6];
  char v13 = *((unsigned char *)a1 + 56);
  uint64_t result = sub_25A508BA8();
  if (result)
  {
    uint64_t v15 = *(void *)(v2 + 112);
    uint64_t v27 = v8;
    uint64_t v28 = v7;
    uint64_t v33 = v7;
    uint64_t v34 = v8;
    int v26 = v9;
    char v35 = v9;
    uint64_t v29 = v10;
    uint64_t v36 = v10;
    uint64_t v37 = v32;
    uint64_t v16 = v12;
    uint64_t v38 = v12;
    uint64_t v39 = v11;
    uint64_t v17 = v11;
    char v18 = v13;
    char v40 = v13;
    (*(void (**)(uint64_t *))(*(void *)v15 + 192))(&v33);
    uint64_t v19 = *(void *)(v2 + 120);
    uint64_t v21 = v27;
    uint64_t v20 = v28;
    uint64_t v33 = v28;
    uint64_t v34 = v27;
    char v22 = v26;
    char v35 = v26;
    uint64_t v23 = v32;
    uint64_t v36 = v29;
    uint64_t v37 = v32;
    uint64_t v38 = v16;
    uint64_t v39 = v17;
    char v40 = v18;
    (*(void (**)(uint64_t *))(*(void *)v19 + 192))(&v33);
    *(void *)uint64_t v6 = v20;
    *((void *)v6 + 1) = v21;
    unsigned char v6[16] = v22;
    *((void *)v6 + 3) = v29;
    *((void *)v6 + 4) = v23;
    *((void *)v6 + 5) = v16;
    *((void *)v6 + 6) = v17;
    v6[56] = v18;
    uint64_t v24 = v31;
    swift_storeEnumTagMultiPayload();
    sub_25A4EF7A8((uint64_t)v6);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v6, v24);
  }
  return result;
}

uint64_t sub_25A508468(long long *a1)
{
  char v1 = *((unsigned char *)a1 + 16);
  char v2 = *((unsigned char *)a1 + 56);
  long long v4 = *a1;
  char v5 = v1;
  long long v6 = *(long long *)((char *)a1 + 24);
  long long v7 = *(long long *)((char *)a1 + 40);
  char v8 = v2;
  return sub_25A508248((uint64_t *)&v4);
}

uint64_t sub_25A5084C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for ZipFuture.Activity();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)v18 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v18 - v12, a1, v10);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(TupleTypeMetadata2 + 48), v13, a4);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a2, a3);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(a5, 0, 1, TupleTypeMetadata2);
      break;
    case 2u:
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a1, a2, a3);
      swift_storeEnumTagMultiPayload();
      goto LABEL_4;
    case 3u:
LABEL_4:
      uint64_t v16 = swift_getTupleTypeMetadata2();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a5, 1, 1, v16);
      break;
    default:
      v18[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation"
               "/ZipFuture.swift";
      v18[1] = 121;
      char v19 = 2;
      long long v20 = xmmword_25A51D4C0;
      uint64_t v21 = "aSucceeded(_:)";
      uint64_t v22 = 14;
      char v23 = 2;
      sub_25A403498();
      uint64_t v14 = swift_getTupleTypeMetadata2();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a5, 1, 1, v14);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      break;
  }
  return result;
}

uint64_t sub_25A508834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for ZipFuture.Activity();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)v18 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v18 - v12, a1, v10);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v18[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation"
               "/ZipFuture.swift";
      v18[1] = 121;
      char v19 = 2;
      long long v20 = xmmword_25A51D4D0;
      uint64_t v21 = "bSucceeded(_:)";
      uint64_t v22 = 14;
      char v23 = 2;
      sub_25A403498();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(a5, 1, 1, TupleTypeMetadata2);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      break;
    case 2u:
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a1, a2, a4);
      swift_storeEnumTagMultiPayload();
      goto LABEL_4;
    case 3u:
LABEL_4:
      uint64_t v16 = swift_getTupleTypeMetadata2();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a5, 1, 1, v16);
      break;
    default:
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a3 - 8) + 32))(a5, v13, a3);
      swift_storeEnumTagMultiPayload();
      uint64_t v14 = swift_getTupleTypeMetadata2();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5 + *(int *)(v14 + 48), a2, a4);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a5, 0, 1, v14);
      break;
  }
  return result;
}

uint64_t sub_25A508BA8()
{
  uint64_t v1 = *v0;
  uint64_t v8 = v0[13];
  uint64_t v6 = *(void *)(v1 + 200);
  uint64_t v7 = *(void *)(v1 + 208);
  type metadata accessor for ZipFuture.Activity();
  uint64_t v2 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ZipFuture.swift", 121, 2, 206, 28, (uint64_t)"checkIfRunningAndMarkFinished()", 31, 2, (uint64_t)sub_25A50A9D4, (uint64_t)v5, v2, MEMORY[0x263F8D4F8], WitnessTable);
  swift_release();
  return v9;
}

uint64_t sub_25A508CC4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ZipFuture.Activity();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v11 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v11 - v6, a1, v4);
  uint64_t result = swift_getEnumCaseMultiPayload();
  char v9 = 0;
  switch((int)result)
  {
    case 2:
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
      goto LABEL_4;
    case 3:
      break;
    default:
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v10(a1, v4);
      v10((uint64_t)v7, v4);
LABEL_4:
      uint64_t result = swift_storeEnumTagMultiPayload();
      char v9 = 1;
      break;
  }
  *a2 = v9;
  return result;
}

uint64_t sub_25A508E44()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_25A508E7C()
{
  uint64_t v0 = Future.deinit();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_25A508EBC()
{
  uint64_t v0 = sub_25A508E7C();

  return MEMORY[0x270FA0228](v0, 128, 7);
}

uint64_t sub_25A508EEC()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A508EFC(char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8)
{
  return sub_25A5074C4(a1, a2, a3, a4, a5, a6, a7, a8, v8[2], v8[3], v8[4], v8[5]);
}

uint64_t sub_25A508F2C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_25A508F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A50784C(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 48), a2);
}

uint64_t sub_25A508F74()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ZipFuture()
{
  return __swift_instantiateGenericMetadata();
}

void *sub_25A508FD8(void *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = __dst;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  if (v6 > 3) {
    goto LABEL_8;
  }
  unsigned int v7 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  uint64_t v8 = 2;
  if (v7 > 0xFFFD) {
    uint64_t v8 = 4;
  }
  if (v7 <= 0xFD) {
LABEL_8:
  }
    uint64_t v8 = 1;
  unint64_t v9 = v8 + v6;
  uint64_t v10 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v10 > 7 || v9 > 0x18 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
    return v3;
  }
  if (v6 > 3) {
    goto LABEL_18;
  }
  unsigned int v15 = ((1 << (8 * v6)) + 1) >> (8 * v6);
  if (v15 > 0xFFFD)
  {
    unsigned int v14 = *(_DWORD *)&a2[v6];
  }
  else
  {
    if (v15 <= 0xFD)
    {
LABEL_18:
      unsigned int v14 = a2[v6];
      goto LABEL_23;
    }
    unsigned int v14 = *(unsigned __int16 *)&a2[v6];
  }
LABEL_23:
  unsigned int v16 = v14 - 2;
  if (v14 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v17 = v6;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *a2;
        if (v6 >= 4) {
          goto LABEL_47;
        }
        goto LABEL_33;
      case 2:
        int v18 = *(unsigned __int16 *)a2;
        if (v6 >= 4) {
          goto LABEL_47;
        }
        goto LABEL_33;
      case 3:
        int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v6 < 4) {
          goto LABEL_33;
        }
        goto LABEL_47;
      case 4:
        int v18 = *(_DWORD *)a2;
        if (v6 < 4)
        {
LABEL_33:
          unsigned int v14 = (v18 | (v16 << (8 * v6))) + 2;
          break;
        }
LABEL_47:
        unsigned int v14 = v18 + 2;
        if (v14 == 1) {
          goto LABEL_48;
        }
        goto LABEL_35;
      default:
        break;
    }
  }
  if (v14 == 1)
  {
LABEL_48:
    (*(void (**)(void *))(v5 + 16))(__dst);
    if (v6 > 3) {
      goto LABEL_49;
    }
    unsigned int v22 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v22 > 0xFFFD)
    {
      *(_DWORD *)((char *)v3 + v6) = 1;
      return v3;
    }
    if (v22 <= 0xFD) {
LABEL_49:
    }
      *((unsigned char *)v3 + v6) = 1;
    else {
      *(_WORD *)((char *)v3 + v6) = 1;
    }
  }
  else
  {
LABEL_35:
    if (v14)
    {
      if (v6 > 3) {
        goto LABEL_44;
      }
      unsigned int v20 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      uint64_t v21 = 2;
      if (v20 > 0xFFFD) {
        uint64_t v21 = 4;
      }
      if (v20 <= 0xFD) {
LABEL_44:
      }
        uint64_t v21 = 1;
      memcpy(__dst, a2, v21 + v6);
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(__dst);
      if (v6 <= 3)
      {
        unsigned int v19 = ((1 << (8 * v6)) + 1) >> (8 * v6);
        if (v19 > 0xFFFD)
        {
          *(_DWORD *)((char *)v3 + v6) = 0;
          return v3;
        }
        if (v19 > 0xFD)
        {
          *(_WORD *)((char *)v3 + v6) = 0;
          return v3;
        }
      }
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  return v3;
}

unsigned __int8 *sub_25A509314(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v3 <= *(void *)(v2 + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  if (v3 > 3) {
    goto LABEL_4;
  }
  unsigned int v5 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v5 > 0xFFFD)
  {
    unsigned int v4 = *(_DWORD *)&result[v3];
  }
  else
  {
    if (v5 <= 0xFD)
    {
LABEL_4:
      unsigned int v4 = result[v3];
      goto LABEL_9;
    }
    unsigned int v4 = *(unsigned __int16 *)&result[v3];
  }
LABEL_9:
  unsigned int v6 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *result;
        goto LABEL_18;
      case 2:
        int v8 = *(unsigned __int16 *)result;
        goto LABEL_18;
      case 3:
        int v8 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_18;
      case 4:
        int v8 = *(_DWORD *)result;
LABEL_18:
        int v9 = (v8 | (v6 << (8 * v3))) + 2;
        unsigned int v4 = v8 + 2;
        if (v3 < 4) {
          unsigned int v4 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v4)
  {
    if (v4 != 1) {
      return result;
    }
    uint64_t v2 = *(void *)(*(void *)(a2 + 24) - 8);
  }
  return (unsigned __int8 *)(*(uint64_t (**)(void))(v2 + 8))();
}

unsigned char *sub_25A5094A4(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  if (v5 > 3) {
    goto LABEL_5;
  }
  unsigned int v7 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v7 > 0xFFFD)
  {
    unsigned int v6 = *(_DWORD *)&a2[v5];
  }
  else
  {
    if (v7 <= 0xFD)
    {
LABEL_5:
      unsigned int v6 = a2[v5];
      goto LABEL_10;
    }
    unsigned int v6 = *(unsigned __int16 *)&a2[v5];
  }
LABEL_10:
  unsigned int v8 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_19;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_19;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_19;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_19:
        int v11 = (v10 | (v8 << (8 * v5))) + 2;
        unsigned int v6 = v10 + 2;
        if (v5 < 4) {
          unsigned int v6 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    (*(void (**)(unsigned char *))(v4 + 16))(__dst);
    if (v5 > 3) {
      goto LABEL_28;
    }
    unsigned int v15 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v15 > 0xFFFD)
    {
      *(_DWORD *)&__dst[v5] = 1;
      return __dst;
    }
    if (v15 <= 0xFD) {
LABEL_28:
    }
      __dst[v5] = 1;
    else {
      *(_WORD *)&__dst[v5] = 1;
    }
  }
  else if (v6)
  {
    if (v5 > 3) {
      goto LABEL_33;
    }
    unsigned int v13 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    uint64_t v14 = 2;
    if (v13 > 0xFFFD) {
      uint64_t v14 = 4;
    }
    if (v13 <= 0xFD) {
LABEL_33:
    }
      uint64_t v14 = 1;
    memcpy(__dst, a2, v14 + v5);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(__dst);
    if (v5 <= 3)
    {
      unsigned int v12 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v12 > 0xFFFD)
      {
        *(_DWORD *)&__dst[v5] = 0;
        return __dst;
      }
      if (v12 > 0xFD)
      {
        *(_WORD *)&__dst[v5] = 0;
        return __dst;
      }
    }
    __dst[v5] = 0;
  }
  return __dst;
}

char *sub_25A509744(char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst == (char *)__src) {
    return __dst;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v6 - 8);
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  if (v9 > 3) {
    goto LABEL_6;
  }
  unsigned int v11 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v11 > 0xFFFD)
  {
    unsigned int v10 = *(_DWORD *)&__dst[v9];
  }
  else
  {
    if (v11 <= 0xFD)
    {
LABEL_6:
      unsigned int v10 = __dst[v9];
      goto LABEL_11;
    }
    unsigned int v10 = *(unsigned __int16 *)&__dst[v9];
  }
LABEL_11:
  unsigned int v12 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *__dst;
        if (v9 < 4) {
          goto LABEL_23;
        }
        goto LABEL_24;
      case 2:
        int v14 = *(unsigned __int16 *)__dst;
        if (v9 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 3:
        int v14 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
        if (v9 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 4:
        int v14 = *(_DWORD *)__dst;
        if (v9 < 4) {
LABEL_23:
        }
          v14 |= v12 << (8 * v9);
LABEL_24:
        unsigned int v10 = v14 + 2;
        break;
      default:
        break;
    }
  }
  if (v10)
  {
    if (v10 != 1) {
      goto LABEL_30;
    }
    uint64_t v15 = *(void *)(v6 - 8);
    uint64_t v16 = *(void *)(a3 + 24);
  }
  else
  {
    uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v16 = *(void *)(a3 + 16);
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(__dst, v16);
LABEL_30:
  if (v9 > 3)
  {
LABEL_31:
    unsigned int v17 = __src[v9];
    goto LABEL_36;
  }
  unsigned int v18 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v18 > 0xFFFD)
  {
    unsigned int v17 = *(_DWORD *)&__src[v9];
  }
  else
  {
    if (v18 <= 0xFD) {
      goto LABEL_31;
    }
    unsigned int v17 = *(unsigned __int16 *)&__src[v9];
  }
LABEL_36:
  unsigned int v19 = v17 - 2;
  if (v17 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v20 = v9;
    }
    else {
      uint64_t v20 = 4;
    }
    switch(v20)
    {
      case 1:
        int v21 = *__src;
        if (v9 >= 4) {
          goto LABEL_60;
        }
        goto LABEL_46;
      case 2:
        int v21 = *(unsigned __int16 *)__src;
        if (v9 >= 4) {
          goto LABEL_60;
        }
        goto LABEL_46;
      case 3:
        int v21 = *(unsigned __int16 *)__src | (__src[2] << 16);
        if (v9 < 4) {
          goto LABEL_46;
        }
        goto LABEL_60;
      case 4:
        int v21 = *(_DWORD *)__src;
        if (v9 < 4)
        {
LABEL_46:
          unsigned int v17 = (v21 | (v19 << (8 * v9))) + 2;
          break;
        }
LABEL_60:
        unsigned int v17 = v21 + 2;
        if (v17 == 1) {
          goto LABEL_61;
        }
        goto LABEL_48;
      default:
        break;
    }
  }
  if (v17 == 1)
  {
LABEL_61:
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v8 + 16))(__dst, __src, v6);
    if (v9 > 3) {
      goto LABEL_62;
    }
    unsigned int v25 = ((1 << (8 * v9)) + 1) >> (8 * v9);
    if (v25 > 0xFFFD)
    {
      *(_DWORD *)&__dst[v9] = 1;
      return __dst;
    }
    if (v25 <= 0xFD) {
LABEL_62:
    }
      __dst[v9] = 1;
    else {
      *(_WORD *)&__dst[v9] = 1;
    }
  }
  else
  {
LABEL_48:
    if (v17)
    {
      if (v9 > 3) {
        goto LABEL_57;
      }
      unsigned int v23 = ((1 << (8 * v9)) + 1) >> (8 * v9);
      uint64_t v24 = 2;
      if (v23 > 0xFFFD) {
        uint64_t v24 = 4;
      }
      if (v23 <= 0xFD) {
LABEL_57:
      }
        uint64_t v24 = 1;
      memcpy(__dst, __src, v24 + v9);
    }
    else
    {
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v7 + 16))(__dst, __src, v5);
      if (v9 <= 3)
      {
        unsigned int v22 = ((1 << (8 * v9)) + 1) >> (8 * v9);
        if (v22 > 0xFFFD)
        {
          *(_DWORD *)&__dst[v9] = 0;
          return __dst;
        }
        if (v22 > 0xFD)
        {
          *(_WORD *)&__dst[v9] = 0;
          return __dst;
        }
      }
      __dst[v9] = 0;
    }
  }
  return __dst;
}

unsigned char *sub_25A509B40(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  if (v5 > 3) {
    goto LABEL_5;
  }
  unsigned int v7 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v7 > 0xFFFD)
  {
    unsigned int v6 = *(_DWORD *)&a2[v5];
  }
  else
  {
    if (v7 <= 0xFD)
    {
LABEL_5:
      unsigned int v6 = a2[v5];
      goto LABEL_10;
    }
    unsigned int v6 = *(unsigned __int16 *)&a2[v5];
  }
LABEL_10:
  unsigned int v8 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_19;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_19;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_19;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_19:
        int v11 = (v10 | (v8 << (8 * v5))) + 2;
        unsigned int v6 = v10 + 2;
        if (v5 < 4) {
          unsigned int v6 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    (*(void (**)(unsigned char *))(v4 + 32))(__dst);
    if (v5 > 3) {
      goto LABEL_28;
    }
    unsigned int v15 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v15 > 0xFFFD)
    {
      *(_DWORD *)&__dst[v5] = 1;
      return __dst;
    }
    if (v15 <= 0xFD) {
LABEL_28:
    }
      __dst[v5] = 1;
    else {
      *(_WORD *)&__dst[v5] = 1;
    }
  }
  else if (v6)
  {
    if (v5 > 3) {
      goto LABEL_33;
    }
    unsigned int v13 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    uint64_t v14 = 2;
    if (v13 > 0xFFFD) {
      uint64_t v14 = 4;
    }
    if (v13 <= 0xFD) {
LABEL_33:
    }
      uint64_t v14 = 1;
    memcpy(__dst, a2, v14 + v5);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(__dst);
    if (v5 <= 3)
    {
      unsigned int v12 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v12 > 0xFFFD)
      {
        *(_DWORD *)&__dst[v5] = 0;
        return __dst;
      }
      if (v12 > 0xFD)
      {
        *(_WORD *)&__dst[v5] = 0;
        return __dst;
      }
    }
    __dst[v5] = 0;
  }
  return __dst;
}

char *sub_25A509DE0(char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst == (char *)__src) {
    return __dst;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v6 - 8);
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  if (v9 > 3) {
    goto LABEL_6;
  }
  unsigned int v11 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v11 > 0xFFFD)
  {
    unsigned int v10 = *(_DWORD *)&__dst[v9];
  }
  else
  {
    if (v11 <= 0xFD)
    {
LABEL_6:
      unsigned int v10 = __dst[v9];
      goto LABEL_11;
    }
    unsigned int v10 = *(unsigned __int16 *)&__dst[v9];
  }
LABEL_11:
  unsigned int v12 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *__dst;
        if (v9 < 4) {
          goto LABEL_23;
        }
        goto LABEL_24;
      case 2:
        int v14 = *(unsigned __int16 *)__dst;
        if (v9 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 3:
        int v14 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
        if (v9 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 4:
        int v14 = *(_DWORD *)__dst;
        if (v9 < 4) {
LABEL_23:
        }
          v14 |= v12 << (8 * v9);
LABEL_24:
        unsigned int v10 = v14 + 2;
        break;
      default:
        break;
    }
  }
  if (v10)
  {
    if (v10 != 1) {
      goto LABEL_30;
    }
    uint64_t v15 = *(void *)(v6 - 8);
    uint64_t v16 = *(void *)(a3 + 24);
  }
  else
  {
    uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v16 = *(void *)(a3 + 16);
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(__dst, v16);
LABEL_30:
  if (v9 > 3)
  {
LABEL_31:
    unsigned int v17 = __src[v9];
    goto LABEL_36;
  }
  unsigned int v18 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v18 > 0xFFFD)
  {
    unsigned int v17 = *(_DWORD *)&__src[v9];
  }
  else
  {
    if (v18 <= 0xFD) {
      goto LABEL_31;
    }
    unsigned int v17 = *(unsigned __int16 *)&__src[v9];
  }
LABEL_36:
  unsigned int v19 = v17 - 2;
  if (v17 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v20 = v9;
    }
    else {
      uint64_t v20 = 4;
    }
    switch(v20)
    {
      case 1:
        int v21 = *__src;
        if (v9 >= 4) {
          goto LABEL_60;
        }
        goto LABEL_46;
      case 2:
        int v21 = *(unsigned __int16 *)__src;
        if (v9 >= 4) {
          goto LABEL_60;
        }
        goto LABEL_46;
      case 3:
        int v21 = *(unsigned __int16 *)__src | (__src[2] << 16);
        if (v9 < 4) {
          goto LABEL_46;
        }
        goto LABEL_60;
      case 4:
        int v21 = *(_DWORD *)__src;
        if (v9 < 4)
        {
LABEL_46:
          unsigned int v17 = (v21 | (v19 << (8 * v9))) + 2;
          break;
        }
LABEL_60:
        unsigned int v17 = v21 + 2;
        if (v17 == 1) {
          goto LABEL_61;
        }
        goto LABEL_48;
      default:
        break;
    }
  }
  if (v17 == 1)
  {
LABEL_61:
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v8 + 32))(__dst, __src, v6);
    if (v9 > 3) {
      goto LABEL_62;
    }
    unsigned int v25 = ((1 << (8 * v9)) + 1) >> (8 * v9);
    if (v25 > 0xFFFD)
    {
      *(_DWORD *)&__dst[v9] = 1;
      return __dst;
    }
    if (v25 <= 0xFD) {
LABEL_62:
    }
      __dst[v9] = 1;
    else {
      *(_WORD *)&__dst[v9] = 1;
    }
  }
  else
  {
LABEL_48:
    if (v17)
    {
      if (v9 > 3) {
        goto LABEL_57;
      }
      unsigned int v23 = ((1 << (8 * v9)) + 1) >> (8 * v9);
      uint64_t v24 = 2;
      if (v23 > 0xFFFD) {
        uint64_t v24 = 4;
      }
      if (v23 <= 0xFD) {
LABEL_57:
      }
        uint64_t v24 = 1;
      memcpy(__dst, __src, v24 + v9);
    }
    else
    {
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v7 + 32))(__dst, __src, v5);
      if (v9 <= 3)
      {
        unsigned int v22 = ((1 << (8 * v9)) + 1) >> (8 * v9);
        if (v22 > 0xFFFD)
        {
          *(_DWORD *)&__dst[v9] = 0;
          return __dst;
        }
        if (v22 > 0xFD)
        {
          *(_WORD *)&__dst[v9] = 0;
          return __dst;
        }
      }
      __dst[v9] = 0;
    }
  }
  return __dst;
}

uint64_t sub_25A50A1DC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  if (v3 > 3)
  {
    int v5 = 3;
LABEL_7:
    char v7 = 8;
    goto LABEL_8;
  }
  unsigned int v6 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v6 > 0xFFFD) {
    goto LABEL_11;
  }
  int v5 = v6 + 2;
  if (v6 <= 0xFD) {
    goto LABEL_7;
  }
  char v7 = 16;
LABEL_8:
  unsigned int v8 = (1 << v7) - v5;
  if ((v8 & 0x80000000) == 0)
  {
    if (v3 > 3) {
      goto LABEL_15;
    }
LABEL_12:
    unsigned int v9 = ((1 << (8 * v3)) + 1) >> (8 * v3);
    uint64_t v10 = 2;
    if (v9 > 0xFFFD) {
      uint64_t v10 = 4;
    }
    if (v9 > 0xFD) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_11:
  unsigned int v8 = 0x7FFFFFFF;
  if (v3 <= 3) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v10 = 1;
LABEL_16:
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_35;
  }
  unint64_t v11 = v10 + v3;
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v14 = ((a2 - v8 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_35;
      }
      goto LABEL_27;
    }
    if (v14 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_35;
      }
      goto LABEL_27;
    }
    if (v14 < 2)
    {
LABEL_35:
      if (v8)
      {
        if (v3 <= 3)
        {
          unsigned int v22 = ((1 << (8 * v3)) + 1) >> (8 * v3);
          if (v22 > 0xFFFD)
          {
            unsigned int v17 = *(_DWORD *)((char *)a1 + v3);
            unsigned int v18 = ~v17;
LABEL_45:
            unsigned int v25 = 0x7FFFFFFF;
LABEL_46:
            if (v25 > v18) {
              return -v17;
            }
            else {
              return 0;
            }
          }
          int v20 = v22 + 2;
          if (v22 > 0xFD)
          {
            int v24 = *(unsigned __int16 *)((char *)a1 + v3);
            unsigned int v17 = v24 | 0xFFFF0000;
            unsigned int v18 = v24 ^ 0xFFFF;
            char v19 = 16;
          }
          else
          {
            int v23 = *((unsigned __int8 *)a1 + v3);
            unsigned int v17 = v23 | 0xFFFFFF00;
            unsigned int v18 = v23 ^ 0xFF;
            char v19 = 8;
          }
        }
        else
        {
          int v16 = *((unsigned __int8 *)a1 + v3);
          unsigned int v17 = v16 | 0xFFFFFF00;
          unsigned int v18 = v16 ^ 0xFF;
          char v19 = 8;
          int v20 = 3;
        }
        unsigned int v25 = (1 << v19) - v20;
        if ((v25 & 0x80000000) == 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      }
      return 0;
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_35;
  }
LABEL_27:
  int v15 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v15 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v11 | v15) + 1;
}

void sub_25A50A450(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  char v6 = 8 * v5;
  if (v5 > 3)
  {
    int v7 = 3;
LABEL_5:
    char v8 = 8;
    goto LABEL_6;
  }
  unsigned int v10 = ((1 << v6) + 1) >> v6;
  if (v10 > 0xFFFD) {
    goto LABEL_12;
  }
  int v7 = v10 + 2;
  if (v10 <= 0xFD) {
    goto LABEL_5;
  }
  char v8 = 16;
LABEL_6:
  unsigned int v9 = (1 << v8) - v7;
  if ((v9 & 0x80000000) == 0)
  {
    if (v5 > 3) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
LABEL_12:
  unsigned int v9 = 0x7FFFFFFF;
  if (v5 > 3)
  {
LABEL_16:
    uint64_t v12 = 1;
    goto LABEL_17;
  }
LABEL_13:
  unsigned int v11 = ((1 << v6) + 1) >> v6;
  uint64_t v12 = 2;
  if (v11 > 0xFFFD) {
    uint64_t v12 = 4;
  }
  if (v11 <= 0xFD) {
    goto LABEL_16;
  }
LABEL_17:
  size_t v13 = v12 + v5;
  if (a3 <= v9)
  {
    int v14 = 0;
  }
  else if (v13 <= 3)
  {
    unsigned int v17 = ((a3 - v9 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v17))
    {
      int v14 = 4;
    }
    else if (v17 >= 0x100)
    {
      int v14 = 2;
    }
    else
    {
      int v14 = v17 > 1;
    }
  }
  else
  {
    int v14 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v15 = ~v9 + a2;
    if (v13 < 4)
    {
      int v16 = (v15 >> (8 * v13)) + 1;
      if (v13)
      {
        int v18 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v13] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v16;
        return;
      case 3:
        goto LABEL_53;
      case 4:
        *(_DWORD *)&a1[v13] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x25A50A700);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (!a2) {
        return;
      }
LABEL_37:
      int v19 = -a2;
      if (v5 > 3) {
        goto LABEL_38;
      }
      unsigned int v20 = ((1 << v6) + 1) >> v6;
      if (v20 > 0xFFFD)
      {
        *(_DWORD *)&a1[v5] = v19;
      }
      else if (v20 <= 0xFD)
      {
LABEL_38:
        a1[v5] = v19;
      }
      else
      {
        *(_WORD *)&a1[v5] = v19;
      }
      return;
  }
}

uint64_t sub_25A50A728(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  if (v2 > 3) {
    goto LABEL_4;
  }
  unsigned int v4 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v4 > 0xFFFD)
  {
    uint64_t v3 = *(unsigned int *)&a1[v2];
  }
  else
  {
    if (v4 <= 0xFD)
    {
LABEL_4:
      uint64_t v3 = a1[v2];
      goto LABEL_9;
    }
    uint64_t v3 = *(unsigned __int16 *)&a1[v2];
  }
LABEL_9:
  int v5 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_18;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_18;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_18;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_18:
        unsigned int v8 = (v7 | (v5 << (8 * v2))) + 2;
        LODWORD(v3) = v7 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v8;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_25A50A830(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8)
                                                                                + 64))
    size_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  else {
    size_t v5 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v6 = a2 - 2;
    if (v5 < 4)
    {
      int v8 = (v6 >> (8 * v5)) + 2;
      v6 &= ~(-1 << (8 * v5));
      unsigned int v9 = (int *)&a1[v5];
      unsigned int v10 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v10 > 0xFFFD)
      {
        *unsigned int v9 = v8;
      }
      else if (v10 > 0xFD)
      {
        *(_WORD *)unsigned int v9 = v8;
      }
      else
      {
        *(unsigned char *)unsigned int v9 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
    }
    if (v5 <= 3) {
      int v11 = v5;
    }
    else {
      int v11 = 4;
    }
    bzero(a1, v5);
    switch(v11)
    {
      case 2:
        *(_WORD *)a1 = v6;
        break;
      case 3:
        *(_WORD *)a1 = v6;
        a1[2] = BYTE2(v6);
        break;
      case 4:
        *(_DWORD *)a1 = v6;
        break;
      default:
        *a1 = v6;
        break;
    }
  }
  else
  {
    if (v5 > 3)
    {
LABEL_6:
      a1[v5] = a2;
      return;
    }
    unsigned int v7 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v7 > 0xFFFD)
    {
      *(_DWORD *)&a1[v5] = a2;
    }
    else
    {
      if (v7 <= 0xFD) {
        goto LABEL_6;
      }
      *(_WORD *)&a1[v5] = a2;
    }
  }
}

uint64_t type metadata accessor for ZipFuture.Activity()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A50A9D4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_25A508CC4(a1, a2);
}

uint64_t sub_25A50A9F0(long long *a1)
{
  return sub_25A508468(a1);
}

uint64_t sub_25A50AA10(uint64_t a1)
{
  return sub_25A507C4C(a1, 164, (uint64_t)"bSucceeded(_:)", (uint64_t)sub_25A50AA48);
}

uint64_t sub_25A50AA48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A508834(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t sub_25A50AA68(uint64_t a1)
{
  return sub_25A507C4C(a1, 141, (uint64_t)"aSucceeded(_:)", (uint64_t)sub_25A50AAA0);
}

uint64_t sub_25A50AAA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A5084C0(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t BinaryInteger.numberOfSetBits.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t v55 = *(void *)(a2 + 24);
  uint64_t v61 = *(void *)(v55 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v59 = (char *)&v48 - v6;
  uint64_t v7 = *(void *)(a1 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v54 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v53 = (char *)&v48 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v52 = (char *)&v48 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v49 = (char *)&v48 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  int v18 = (char *)&v48 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  int v21 = (char *)&v48 - v20;
  MEMORY[0x270FA5388](v19);
  int v23 = (char *)&v48 - v22;
  unsigned int v25 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v7 += 16;
  int v24 = v25;
  v25((char *)&v48 - v22, (char *)v2, a1);
  uint64_t v26 = 0;
  uint64_t v56 = (void (**)(char *, uint64_t))(v7 - 8);
  uint64_t v57 = v23;
  uint64_t v64 = v7;
  uint64_t v50 = (uint64_t (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v51 = v21;
  uint64_t v58 = v25;
  do
  {
    v24(v21, v23, a1);
    char v37 = sub_25A50FBF0();
    uint64_t v63 = v26;
    if (v37)
    {
      if (sub_25A50FBE0() < 64)
      {
        uint64_t v27 = sub_25A50FBD0();
        uint64_t v62 = *v56;
        v62(v21, a1);
        if (!v27) {
          goto LABEL_20;
        }
        goto LABEL_3;
      }
LABEL_9:
      uint64_t v65 = 0;
      sub_25A3FD308();
      sub_25A50FBB0();
      char v40 = sub_25A50EBE0();
      uint64_t v41 = *v56;
      (*v56)(v18, a1);
LABEL_17:
      uint64_t v62 = v41;
      v41(v21, a1);
      if (v40)
      {
LABEL_20:
        v62(v23, a1);
        return v63;
      }
      goto LABEL_3;
    }
    char v38 = sub_25A50FBF0();
    uint64_t v39 = sub_25A50FBE0();
    if ((v38 & 1) == 0)
    {
      uint64_t v42 = v56;
      if (v39 < 64)
      {
        uint64_t v43 = sub_25A50FBD0();
        uint64_t v62 = *v42;
        v62(v21, a1);
        if (!v43) {
          goto LABEL_20;
        }
        goto LABEL_3;
      }
      uint64_t v65 = 0;
      sub_25A3FD308();
      sub_25A50FBB0();
      char v40 = sub_25A50EBE0();
      uint64_t v41 = *v42;
      (*v42)(v18, a1);
      goto LABEL_17;
    }
    if (v39 > 64) {
      goto LABEL_9;
    }
    swift_getAssociatedConformanceWitness();
    sub_25A5103F0();
    int v24 = v58;
    sub_25A510340();
    char v44 = sub_25A50EB00();
    uint64_t v45 = *v56;
    (*v56)(v18, a1);
    v24(v49, v21, a1);
    uint64_t v62 = v45;
    if (v44)
    {
      uint64_t v46 = v49;
      uint64_t v47 = sub_25A50FBD0();
      v45(v46, a1);
      v45(v21, a1);
      int v23 = v57;
      if (!v47) {
        goto LABEL_20;
      }
    }
    else
    {
      v45(v49, a1);
      v45(v21, a1);
      int v23 = v57;
    }
LABEL_3:
    uint64_t v28 = v52;
    v24(v52, v23, a1);
    swift_getAssociatedConformanceWitness();
    sub_25A5103F0();
    uint64_t v29 = v18;
    uint64_t v30 = v3;
    uint64_t v31 = v54;
    int v23 = v57;
    sub_25A510340();
    uint64_t v32 = v53;
    sub_25A510090();
    uint64_t v33 = v31;
    uint64_t v3 = v30;
    int v18 = v29;
    int v24 = v58;
    uint64_t v34 = v62;
    v62(v33, a1);
    sub_25A50FBC0();
    v34(v32, a1);
    char v35 = v28;
    int v21 = v51;
    v34(v35, a1);
    v34(v23, a1);
    uint64_t result = (*v50)(v23, v18, a1);
    uint64_t v26 = v63 + 1;
  }
  while (!__OFADD__(v63, 1));
  __break(1u);
  return result;
}

uint64_t static FutureTermination.completed(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v6 = sub_25A510540();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v11 - v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v11 - v7, a1, v6);
  if (swift_getEnumCaseMultiPayload() == 1) {
    *a3 = *v8;
  }
  else {
    (*(void (**)(void *, void *, uint64_t))(*(void *)(a2 - 8) + 32))(a3, v8, a2);
  }
  type metadata accessor for FutureTermination();
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for FutureTermination()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A50B2F4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void *))(v6 + 16))(v5);
  if (swift_getEnumCaseMultiPayload() == 1) {
    *a2 = *v5;
  }
  else {
    (*(void (**)(void *, void *, void))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a2, v5, *(void *)(a1 + 16));
  }
  type metadata accessor for FutureTermination();
  return swift_storeEnumTagMultiPayload();
}

BOOL FutureTermination.isCompleted.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload <= 1) {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  return EnumCaseMultiPayload < 2;
}

uint64_t FutureTermination.map<A>(_:)@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  char v35 = a5;
  uint64_t v8 = *(void *)(a3 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v9 = sub_25A510540();
  uint64_t v31 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v30 - v10);
  uint64_t v30 = a4;
  uint64_t v12 = sub_25A510540();
  uint64_t v34 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v16 = *(void *)(v8 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v13);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  int v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v21, v5, a3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v8);
    (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v11, v19, v8);
    swift_storeEnumTagMultiPayload();
    v33(v11);
    (*(void (**)(void *, uint64_t))(v31 + 8))(v11, v9);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v8);
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    int v24 = *(void **)v21;
    *uint64_t v11 = *(void *)v21;
    swift_storeEnumTagMultiPayload();
    id v25 = v24;
    v33(v11);

    (*(void (**)(void *, uint64_t))(v31 + 8))(v11, v9);
LABEL_5:
    sub_25A50B2F4(v12, v35);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v15, v12);
  }
  char v27 = v21[16];
  char v28 = v21[56];
  uint64_t v29 = v35;
  *(_OWORD *)char v35 = *(_OWORD *)v21;
  *((unsigned char *)v29 + 16) = v27;
  *(_OWORD *)(v29 + 3) = *(_OWORD *)(v21 + 24);
  *(_OWORD *)(v29 + 5) = *(_OWORD *)(v21 + 40);
  *((unsigned char *)v29 + 56) = v28;
  type metadata accessor for FutureTermination();
  return swift_storeEnumTagMultiPayload();
}

uint64_t FutureTermination.succeededValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1) {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 1, 1);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(v9 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v6, v9);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
  }
}

uint64_t FutureTermination.failedError.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1) {
      return *(void *)v4;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  return 0;
}

uint64_t FutureTermination.completedResult.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void *))(v6 + 16))(v5);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(void *, void *, void))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a2, v5, *(void *)(a1 + 16));
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    uint64_t v8 = sub_25A510540();
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *a2 = *v5;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    uint64_t v8 = sub_25A510540();
LABEL_5:
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 0, 1, v8);
  }
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v10 = sub_25A510540();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a2, 1, 1, v10);
}

uint64_t FutureTermination.description.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (id *)((char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(id *))(v2 + 16))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {

      return 0x64656C696166;
    }
    else
    {
      return 0x64656C65636E6163;
    }
  }
  else
  {
    v8[0] = 0x6564656563637573;
    v8[1] = 0xEA00000000003C64;
    sub_25A5105D0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    uint64_t v6 = v8[0];
    (*(void (**)(id *, uint64_t))(v2 + 8))(v4, a1);
  }
  return v6;
}

BOOL FutureTermination.isCanceled.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload <= 1) {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  return EnumCaseMultiPayload > 1;
}

uint64_t FutureTermination.result.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return FutureTermination.resultMappingCancelation(_:)((uint64_t (*)(long long *))sub_25A50C574, a1, a2);
}

uint64_t FutureTermination.mapSuccess<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v12 + 16))(v11, v13);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)a3 = *(void *)v11;
    }
    else
    {
      char v15 = v11[16];
      char v16 = v11[56];
      *(_OWORD *)a3 = *(_OWORD *)v11;
      *(unsigned char *)(a3 + 16) = v15;
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(v11 + 24);
      *(_OWORD *)(a3 + 40) = *(_OWORD *)(v11 + 40);
      *(unsigned char *)(a3 + 56) = v16;
    }
    type metadata accessor for FutureTermination();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
    a1(v9);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    type metadata accessor for FutureTermination();
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t FutureTermination.resultMappingCancelation(_:)@<X0>(uint64_t (*a1)(long long *)@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      *a3 = *(void *)v7;
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
      sub_25A510540();
      return swift_storeEnumTagMultiPayload();
    }
    else
    {
      char v12 = v7[16];
      char v13 = v7[56];
      long long v14 = *(_OWORD *)v7;
      char v15 = v12;
      long long v16 = *(_OWORD *)(v7 + 24);
      long long v17 = *(_OWORD *)(v7 + 40);
      char v18 = v13;
      return a1(&v14);
    }
  }
  else
  {
    (*(void (**)(void *, char *, void))(*(void *)(*(void *)(a2 + 16) - 8) + 32))(a3, v7, *(void *)(a2 + 16));
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    sub_25A510540();
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t sub_25A50C478@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = *((unsigned char *)a1 + 16);
  long long v12 = *(_OWORD *)(a1 + 3);
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  char v8 = *((unsigned char *)a1 + 56);
  type metadata accessor for FutureTermination.FutureCanceled();
  swift_getWitnessTable();
  uint64_t v9 = swift_allocError();
  *(void *)uint64_t v10 = v3;
  *(void *)(v10 + 8) = v4;
  *(unsigned char *)(v10 + 16) = v5;
  *(_OWORD *)(v10 + 24) = v12;
  *(void *)(v10 + 40) = v6;
  *(void *)(v10 + 48) = v7;
  *(unsigned char *)(v10 + 56) = v8;
  *a2 = v9;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25A50C574@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25A50C478(a1, a2);
}

unint64_t sub_25A50C57C()
{
  return 0xD000000000000016;
}

unint64_t sub_25A50C640()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_25A50C660(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return HumanReadableError.errorDescription.getter(a1, WitnessTable);
}

uint64_t sub_25A50C6B4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return HumanReadableError.description.getter(a1, WitnessTable);
}

uint64_t FutureTermination.isFailed.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1) {
      return 0;
    }
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v6;
}

uint64_t FutureTermination.detailedDescription.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  char v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = *(void **)v7;
      *(void *)&long long v15 = 0;
      *((void *)&v15 + 1) = 0xE000000000000000;
      sub_25A50EDA0();
      uint64_t v20 = (uint64_t)v10;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
      sub_25A50FFB0();

      return v15;
    }
    else
    {
      char v12 = v7[16];
      char v13 = v7[56];
      uint64_t v20 = 0x64656C65636E6163;
      unint64_t v21 = 0xEA0000000000203ALL;
      long long v15 = *(_OWORD *)v7;
      char v16 = v12;
      long long v17 = *(_OWORD *)(v7 + 24);
      long long v18 = *(_OWORD *)(v7 + 40);
      char v19 = v13;
      Callsite.description.getter();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      return v20;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v7, v1);
    *(void *)&long long v15 = 0;
    *((void *)&v15 + 1) = 0xE000000000000000;
    sub_25A50EDA0();
    sub_25A510310();
    uint64_t v11 = v15;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  return v11;
}

uint64_t Logger.logOutcome<A>(of:at:operation:)(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a3;
  HIDWORD(v16) = a2;
  uint64_t v6 = *a1;
  uint64_t v7 = sub_25A50E5E0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, v7);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = v11 + v9;
  uint64_t v13 = swift_allocObject();
  unint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + v13;
  *(void *)(v13 + 16) = *(void *)(v6 + 80);
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v11, v10, v7);
  *(unsigned char *)(v13 + v12) = BYTE4(v16);
  *(void *)(v14 + 8) = v17;
  *(void *)(v14 + 16) = a4;
  swift_retain();
  Future.observeFinish(_:)((uint64_t)sub_25A50CFBC, v13);
  return swift_release();
}

void sub_25A50CC34(uint64_t a1, uint64_t a2, os_log_type_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = type metadata accessor for FutureTermination();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unint64_t v11 = (char *)&v23 - v10;
  if (FutureTermination.isFailed.getter(v9)) {
    a3 = sub_25A50F830();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  swift_retain_n();
  uint64_t v12 = sub_25A50E5C0();
  os_log_type_t v13 = a3;
  if (os_log_type_enabled(v12, a3))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v26 = v24;
    *(_DWORD *)uint64_t v14 = 136315650;
    uint64_t v15 = sub_25A5105D0();
    int v23 = a4;
    uint64_t v25 = sub_25A3A36A4(v15, v16, &v26);
    sub_25A50FB00();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2082;
    uint64_t v17 = FutureTermination.detailedDescription.getter(v7);
    uint64_t v25 = sub_25A3A36A4(v17, v18, &v26);
    sub_25A50FB00();
    swift_bridgeObjectRelease();
    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    *(_WORD *)(v14 + 22) = 2082;
    uint64_t v20 = v23(v19);
    uint64_t v25 = sub_25A3A36A4(v20, v21, &v26);
    sub_25A50FB00();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25A380000, v12, v13, "Future<%s> %{public}s\nOperation: %{public}s", (uint8_t *)v14, 0x20u);
    uint64_t v22 = v24;
    swift_arrayDestroy();
    MEMORY[0x26113F070](v22, -1, -1);
    MEMORY[0x26113F070](v14, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    swift_release_n();
  }
}

uint64_t sub_25A50CF18()
{
  uint64_t v1 = sub_25A50E5E0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 24;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

void sub_25A50CFBC(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_25A50E5E0() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  unint64_t v6 = *(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 8);
  os_log_type_t v7 = *(unsigned char *)(v1 + v5);

  sub_25A50CC34(a1, v1 + v4, v7, v6);
}

uint64_t sub_25A50D06C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *sub_25A50D10C(_OWORD *a1, char **a2, uint64_t a3)
{
  uint64_t v3 = (char *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x39uLL) {
    uint64_t v5 = 57;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *a2;
    *(void *)uint64_t v3 = *a2;
    uint64_t v3 = &v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    unsigned int v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 3) {
      unsigned int v9 = *(_DWORD *)a2 + 3;
    }
    if (v9 == 2)
    {
      long long v12 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v12;
      a1[2] = *((_OWORD *)a2 + 2);
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      *((unsigned char *)a1 + v5) = 2;
    }
    else if (v9 == 1)
    {
      uint64_t v10 = *a2;
      unint64_t v11 = *a2;
      *(void *)uint64_t v3 = v10;
      v3[v5] = 1;
    }
    else
    {
      (*(void (**)(_OWORD *))(v4 + 16))(a1);
      v3[v5] = 0;
    }
  }
  return v3;
}

void sub_25A50D244(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x39) {
    unint64_t v2 = 57;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 3;
  if (v3 >= 3)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 3;
        unsigned int v3 = v6 + 3;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 != 2)
  {
    if (v3 == 1) {

    }
    else {
      (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
    }
  }
}

_OWORD *sub_25A50D350(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x39uLL) {
    uint64_t v4 = 57;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 3;
  if (v5 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 3;
        unsigned int v5 = v8 + 3;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 2)
  {
    long long v13 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v13;
    a1[2] = *((_OWORD *)a2 + 2);
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)(a2 + 41);
    char v12 = 2;
  }
  else if (v5 == 1)
  {
    uint64_t v10 = *(void *)a2;
    id v11 = *(id *)a2;
    *(void *)a1 = v10;
    char v12 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v12 = 0;
  }
  *((unsigned char *)a1 + v4) = v12;
  return a1;
}

unsigned __int8 *sub_25A50D4C0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x39uLL) {
      uint64_t v7 = 57;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 3;
    if (v8 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 3;
          unsigned int v8 = v11 + 3;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 != 2)
    {
      if (v8 == 1) {

      }
      else {
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      }
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_29:
          int v17 = (v16 | (v14 << (8 * v7))) + 3;
          unsigned int v13 = v16 + 3;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
      long long v21 = *(_OWORD *)a2;
      long long v22 = *((_OWORD *)a2 + 1);
      long long v23 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      *((_OWORD *)a1 + 1) = v22;
      *((_OWORD *)a1 + 2) = v23;
      *(_OWORD *)a1 = v21;
      char v20 = 2;
    }
    else if (v13 == 1)
    {
      unint64_t v18 = *(void **)a2;
      id v19 = v18;
      *(void *)a1 = v18;
      char v20 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v20 = 0;
    }
    a1[v7] = v20;
  }
  return a1;
}

_OWORD *sub_25A50D710(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x39uLL) {
    uint64_t v4 = 57;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 3;
  if (v5 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 3;
        unsigned int v5 = v8 + 3;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 2)
  {
    long long v11 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v11;
    a1[2] = *((_OWORD *)a2 + 2);
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)(a2 + 41);
    char v10 = 2;
  }
  else if (v5 == 1)
  {
    *(void *)a1 = *(void *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_25A50D870(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x39uLL) {
      uint64_t v7 = 57;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 3;
    if (v8 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 3;
          unsigned int v8 = v11 + 3;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 != 2)
    {
      if (v8 == 1) {

      }
      else {
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      }
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_29:
          int v17 = (v16 | (v14 << (8 * v7))) + 3;
          unsigned int v13 = v16 + 3;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
      long long v19 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v19;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      char v18 = 2;
    }
    else if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_25A50DAB8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 57;
  if (*(void *)(v3 + 64) > 0x39uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 3) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 254;
}

void sub_25A50DBEC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x39) {
    unint64_t v5 = 57;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x25A50DDB4);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25A50DDDC(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 57;
  if (*(void *)(v2 + 64) > 0x39uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 3;
  if (v4 >= 3)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 3;
        LODWORD(v4) = v7 + 3;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void sub_25A50DE94(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x39uLL) {
    size_t v4 = 57;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 2)
  {
    unsigned int v5 = a2 - 3;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for FutureTermination.FutureCanceled()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A50DF84()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A50DFA0(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_25A50E000()
{
  return MEMORY[0x270EEDDD0]();
}

uint64_t sub_25A50E010()
{
  return MEMORY[0x270EEDE10]();
}

uint64_t sub_25A50E020()
{
  return MEMORY[0x270EEDE18]();
}

uint64_t sub_25A50E030()
{
  return MEMORY[0x270EEDEE8]();
}

uint64_t sub_25A50E040()
{
  return MEMORY[0x270EEDF30]();
}

uint64_t sub_25A50E050()
{
  return MEMORY[0x270EEDF38]();
}

uint64_t sub_25A50E060()
{
  return MEMORY[0x270EEE0B0]();
}

uint64_t sub_25A50E070()
{
  return MEMORY[0x270EEE0C0]();
}

uint64_t sub_25A50E080()
{
  return MEMORY[0x270EEE1A8]();
}

uint64_t sub_25A50E090()
{
  return MEMORY[0x270EEE1E8]();
}

uint64_t sub_25A50E0A0()
{
  return MEMORY[0x270EEE200]();
}

uint64_t sub_25A50E0B0()
{
  return MEMORY[0x270EEE248]();
}

uint64_t sub_25A50E0C0()
{
  return MEMORY[0x270EEE258]();
}

uint64_t sub_25A50E0D0()
{
  return MEMORY[0x270EEE378]();
}

uint64_t sub_25A50E0E0()
{
  return MEMORY[0x270EEE3D0]();
}

uint64_t sub_25A50E0F0()
{
  return MEMORY[0x270EEE618]();
}

uint64_t sub_25A50E100()
{
  return MEMORY[0x270EEE628]();
}

uint64_t sub_25A50E110()
{
  return MEMORY[0x270EEE638]();
}

uint64_t sub_25A50E120()
{
  return MEMORY[0x270EEE648]();
}

uint64_t sub_25A50E130()
{
  return MEMORY[0x270EEE658]();
}

uint64_t sub_25A50E140()
{
  return MEMORY[0x270EEE670]();
}

uint64_t sub_25A50E150()
{
  return MEMORY[0x270EEE688]();
}

uint64_t sub_25A50E160()
{
  return MEMORY[0x270EEE920]();
}

uint64_t sub_25A50E170()
{
  return MEMORY[0x270EEE930]();
}

uint64_t sub_25A50E180()
{
  return MEMORY[0x270EEE950]();
}

uint64_t sub_25A50E190()
{
  return MEMORY[0x270EEEA60]();
}

uint64_t sub_25A50E1A0()
{
  return MEMORY[0x270EEEF08]();
}

uint64_t sub_25A50E1B0()
{
  return MEMORY[0x270EEEF18]();
}

uint64_t sub_25A50E1C0()
{
  return MEMORY[0x270EEEFF8]();
}

uint64_t sub_25A50E1D0()
{
  return MEMORY[0x270EEF238]();
}

uint64_t sub_25A50E1E0()
{
  return MEMORY[0x270EEF250]();
}

uint64_t sub_25A50E1F0()
{
  return MEMORY[0x270EEF268]();
}

uint64_t sub_25A50E200()
{
  return MEMORY[0x270EEF288]();
}

uint64_t sub_25A50E210()
{
  return MEMORY[0x270EEF2A8]();
}

uint64_t sub_25A50E220()
{
  return MEMORY[0x270EEF2B8]();
}

uint64_t sub_25A50E230()
{
  return MEMORY[0x270EEF830]();
}

uint64_t sub_25A50E240()
{
  return MEMORY[0x270EEF840]();
}

uint64_t sub_25A50E250()
{
  return MEMORY[0x270EEFA18]();
}

uint64_t sub_25A50E260()
{
  return MEMORY[0x270EEFC10]();
}

uint64_t sub_25A50E270()
{
  return MEMORY[0x270EEFC88]();
}

uint64_t sub_25A50E280()
{
  return MEMORY[0x270EEFCA0]();
}

uint64_t sub_25A50E290()
{
  return MEMORY[0x270EEFCB0]();
}

uint64_t sub_25A50E2A0()
{
  return MEMORY[0x270EEFCE0]();
}

uint64_t sub_25A50E2B0()
{
  return MEMORY[0x270EEFD28]();
}

uint64_t sub_25A50E2C0()
{
  return MEMORY[0x270EEFD70]();
}

uint64_t sub_25A50E2D0()
{
  return MEMORY[0x270EEFD90]();
}

uint64_t sub_25A50E2E0()
{
  return MEMORY[0x270EEFE20]();
}

uint64_t sub_25A50E2F0()
{
  return MEMORY[0x270EEFE68]();
}

uint64_t sub_25A50E300()
{
  return MEMORY[0x270EEFE80]();
}

uint64_t sub_25A50E310()
{
  return MEMORY[0x270EEFF40]();
}

uint64_t sub_25A50E320()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t sub_25A50E330()
{
  return MEMORY[0x270EEFFB0]();
}

uint64_t sub_25A50E340()
{
  return MEMORY[0x270EF0070]();
}

uint64_t sub_25A50E350()
{
  return MEMORY[0x270EF0090]();
}

uint64_t sub_25A50E360()
{
  return MEMORY[0x270EF00B0]();
}

uint64_t sub_25A50E370()
{
  return MEMORY[0x270EF0120]();
}

uint64_t sub_25A50E380()
{
  return MEMORY[0x270EF0178]();
}

uint64_t sub_25A50E390()
{
  return MEMORY[0x270EF0220]();
}

uint64_t sub_25A50E3A0()
{
  return MEMORY[0x270EF0238]();
}

uint64_t sub_25A50E3B0()
{
  return MEMORY[0x270EF0248]();
}

uint64_t sub_25A50E3C0()
{
  return MEMORY[0x270EF02B0]();
}

uint64_t sub_25A50E3D0()
{
  return MEMORY[0x270EF02C8]();
}

uint64_t sub_25A50E3E0()
{
  return MEMORY[0x270EF07A0]();
}

uint64_t sub_25A50E3F0()
{
  return MEMORY[0x270EF0898]();
}

uint64_t sub_25A50E400()
{
  return MEMORY[0x270EF0998]();
}

uint64_t sub_25A50E410()
{
  return MEMORY[0x270EF09A8]();
}

uint64_t _s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0()
{
  return MEMORY[0x270EF09B8]();
}

uint64_t sub_25A50E430()
{
  return MEMORY[0x270EF09D8]();
}

uint64_t _s20PreviewsFoundationOS12TimingRecordV5PointV2eeoiySbAE_AEtFZ_0()
{
  return MEMORY[0x270EF0B88]();
}

uint64_t _s20PreviewsFoundationOS12TimingRecordV5PointV3nowAEvgZ_0()
{
  return MEMORY[0x270EF0BB8]();
}

uint64_t sub_25A50E460()
{
  return MEMORY[0x270EF0C30]();
}

uint64_t sub_25A50E470()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t sub_25A50E480()
{
  return MEMORY[0x270EF0C58]();
}

uint64_t _s10Foundation4UUIDV08PreviewsA2OSE17propertyListValueSSvg_0()
{
  return MEMORY[0x270EF0C68]();
}

uint64_t _s20PreviewsFoundationOS11CrashReportV2IDV2eeoiySbAE_AEtFZ_0()
{
  return MEMORY[0x270EF0CB0]();
}

uint64_t _s20PreviewsFoundationOS11CrashReportV2IDVAEycfC_0()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t sub_25A50E4C0()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t sub_25A50E4D0()
{
  return MEMORY[0x270EF0D78]();
}

uint64_t sub_25A50E4E0()
{
  return MEMORY[0x270EF0EE0]();
}

uint64_t sub_25A50E4F0()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t sub_25A50E500()
{
  return MEMORY[0x270EF15A8]();
}

uint64_t sub_25A50E510()
{
  return MEMORY[0x270EF15C8]();
}

uint64_t sub_25A50E520()
{
  return MEMORY[0x270EF1600]();
}

uint64_t sub_25A50E530()
{
  return MEMORY[0x270EF1608]();
}

uint64_t sub_25A50E540()
{
  return MEMORY[0x270FA2C68]();
}

uint64_t sub_25A50E550()
{
  return MEMORY[0x270FA2C98]();
}

uint64_t sub_25A50E560()
{
  return MEMORY[0x270FA2CF8]();
}

uint64_t sub_25A50E570()
{
  return MEMORY[0x270FA2D00]();
}

uint64_t sub_25A50E580()
{
  return MEMORY[0x270FA2D30]();
}

uint64_t sub_25A50E5A0()
{
  return MEMORY[0x270FA2D88]();
}

uint64_t sub_25A50E5B0()
{
  return MEMORY[0x270FA2DA0]();
}

uint64_t sub_25A50E5C0()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_25A50E5D0()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t sub_25A50E5E0()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_25A50E5F0()
{
  return MEMORY[0x270FA2E30]();
}

uint64_t sub_25A50E600()
{
  return MEMORY[0x270FA2C30]();
}

uint64_t sub_25A50E610()
{
  return MEMORY[0x270FA2C58]();
}

uint64_t sub_25A50E620()
{
  return MEMORY[0x270FA2C60]();
}

uint64_t sub_25A50E630()
{
  return MEMORY[0x270EE3AC0]();
}

uint64_t sub_25A50E640()
{
  return MEMORY[0x270EE3B50]();
}

uint64_t sub_25A50E650()
{
  return MEMORY[0x270EE3BA8]();
}

uint64_t sub_25A50E660()
{
  return MEMORY[0x270EE3C70]();
}

uint64_t sub_25A50E670()
{
  return MEMORY[0x270EE3C88]();
}

uint64_t sub_25A50E680()
{
  return MEMORY[0x270EE3CB8]();
}

uint64_t sub_25A50E690()
{
  return MEMORY[0x270EE3D68]();
}

uint64_t sub_25A50E6A0()
{
  return MEMORY[0x270EE3D70]();
}

uint64_t sub_25A50E6B0()
{
  return MEMORY[0x270EE3E08]();
}

uint64_t sub_25A50E6C0()
{
  return MEMORY[0x270EE3E78]();
}

uint64_t sub_25A50E6D0()
{
  return MEMORY[0x270EE3EC0]();
}

uint64_t sub_25A50E6E0()
{
  return MEMORY[0x270EE3F78]();
}

uint64_t sub_25A50E6F0()
{
  return MEMORY[0x270EE3FC0]();
}

uint64_t sub_25A50E700()
{
  return MEMORY[0x270EE3FC8]();
}

uint64_t sub_25A50E710()
{
  return MEMORY[0x270EE3FE0]();
}

uint64_t sub_25A50E720()
{
  return MEMORY[0x270EE4008]();
}

uint64_t sub_25A50E730()
{
  return MEMORY[0x270EE4030]();
}

uint64_t sub_25A50E740()
{
  return MEMORY[0x270FA0968]();
}

uint64_t sub_25A50E750()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t sub_25A50E760()
{
  return MEMORY[0x270FA09D0]();
}

uint64_t sub_25A50E770()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t sub_25A50E780()
{
  return MEMORY[0x270FA0A00]();
}

uint64_t sub_25A50E790()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t _s20PreviewsFoundationOS17DispatchSchedulerV8DeadlineV1loiySbAE_AEtFZ_0()
{
  return MEMORY[0x270FA0AA8]();
}

uint64_t _s20PreviewsFoundationOS17DispatchSchedulerV8DeadlineV2eeoiySbAE_AEtFZ_0()
{
  return MEMORY[0x270FA0AB0]();
}

uint64_t _s20PreviewsFoundationOS17DispatchSchedulerV8DeadlineV3nowAEyFZ_0()
{
  return MEMORY[0x270FA0AC0]();
}

uint64_t sub_25A50E7D0()
{
  return MEMORY[0x270FA0B00]();
}

uint64_t sub_25A50E7E0()
{
  return MEMORY[0x270FA0BC8]();
}

uint64_t sub_25A50E7F0()
{
  return MEMORY[0x270EEAA78]();
}

uint64_t sub_25A50E800()
{
  return MEMORY[0x270EEAA80]();
}

uint64_t sub_25A50E810()
{
  return MEMORY[0x270EEAA98]();
}

uint64_t sub_25A50E820()
{
  return MEMORY[0x270EEAAA0]();
}

uint64_t sub_25A50E830()
{
  return MEMORY[0x270EEAAA8]();
}

uint64_t sub_25A50E840()
{
  return MEMORY[0x270EEB090]();
}

uint64_t sub_25A50E850()
{
  return MEMORY[0x270F9CFB0]();
}

uint64_t sub_25A50E860()
{
  return MEMORY[0x270F9CFC0]();
}

uint64_t sub_25A50E870()
{
  return MEMORY[0x270FA1DF0]();
}

uint64_t sub_25A50E880()
{
  return MEMORY[0x270F9CFC8]();
}

uint64_t sub_25A50E890()
{
  return MEMORY[0x270EF1818]();
}

uint64_t sub_25A50E8A0()
{
  return MEMORY[0x270EF1840]();
}

uint64_t sub_25A50E8B0()
{
  return MEMORY[0x270F9D060]();
}

uint64_t sub_25A50E8C0()
{
  return MEMORY[0x270F9D068]();
}

uint64_t sub_25A50E8D0()
{
  return MEMORY[0x270F9D070]();
}

uint64_t sub_25A50E8E0()
{
  return MEMORY[0x270F9D088]();
}

uint64_t sub_25A50E8F0()
{
  return MEMORY[0x270F9D098]();
}

uint64_t sub_25A50E900()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t sub_25A50E910()
{
  return MEMORY[0x270F9D0E8]();
}

uint64_t sub_25A50E920()
{
  return MEMORY[0x270F9D120]();
}

uint64_t sub_25A50E930()
{
  return MEMORY[0x270F9D128]();
}

uint64_t sub_25A50E940()
{
  return MEMORY[0x270F9D130]();
}

uint64_t sub_25A50E950()
{
  return MEMORY[0x270F9D148]();
}

uint64_t sub_25A50E960()
{
  return MEMORY[0x270F9D168]();
}

uint64_t sub_25A50E970()
{
  return MEMORY[0x270F9D1C0]();
}

uint64_t sub_25A50E980()
{
  return MEMORY[0x270F9D1C8]();
}

uint64_t sub_25A50E990()
{
  return MEMORY[0x270F9D1D0]();
}

uint64_t sub_25A50E9A0()
{
  return MEMORY[0x270F9D1E8]();
}

uint64_t sub_25A50E9B0()
{
  return MEMORY[0x270F9D1F0]();
}

uint64_t sub_25A50E9C0()
{
  return MEMORY[0x270F9D200]();
}

uint64_t sub_25A50E9D0()
{
  return MEMORY[0x270F9D208]();
}

uint64_t sub_25A50E9E0()
{
  return MEMORY[0x270F9D210]();
}

uint64_t sub_25A50E9F0()
{
  return MEMORY[0x270F9D218]();
}

uint64_t sub_25A50EA00()
{
  return MEMORY[0x270F9D220]();
}

uint64_t sub_25A50EA10()
{
  return MEMORY[0x270F9D318]();
}

uint64_t sub_25A50EA20()
{
  return MEMORY[0x270F9D320]();
}

uint64_t sub_25A50EA30()
{
  return MEMORY[0x270F9D328]();
}

uint64_t sub_25A50EA40()
{
  return MEMORY[0x270F9D360]();
}

uint64_t sub_25A50EA50()
{
  return MEMORY[0x270F9D368]();
}

uint64_t sub_25A50EA60()
{
  return MEMORY[0x270F9D3D8]();
}

uint64_t sub_25A50EA70()
{
  return MEMORY[0x270F9D3F8]();
}

uint64_t sub_25A50EA80()
{
  return MEMORY[0x270F9D428]();
}

uint64_t sub_25A50EA90()
{
  return MEMORY[0x270F9D430]();
}

uint64_t sub_25A50EAA0()
{
  return MEMORY[0x270F9D438]();
}

uint64_t sub_25A50EAB0()
{
  return MEMORY[0x270F9D448]();
}

uint64_t sub_25A50EAC0()
{
  return MEMORY[0x270F9D458]();
}

uint64_t sub_25A50EAD0()
{
  return MEMORY[0x270F9D478]();
}

uint64_t sub_25A50EAE0()
{
  return MEMORY[0x270F9D480]();
}

uint64_t sub_25A50EAF0()
{
  return MEMORY[0x270F9D488]();
}

uint64_t sub_25A50EB00()
{
  return MEMORY[0x270F9D490]();
}

uint64_t sub_25A50EB10()
{
  return MEMORY[0x270F9D498]();
}

uint64_t sub_25A50EB20()
{
  return MEMORY[0x270F9D4A0]();
}

uint64_t sub_25A50EB30()
{
  return MEMORY[0x270F9D4A8]();
}

uint64_t sub_25A50EB40()
{
  return MEMORY[0x270F9D4B0]();
}

uint64_t sub_25A50EB50()
{
  return MEMORY[0x270F9D4C8]();
}

uint64_t sub_25A50EB60()
{
  return MEMORY[0x270F9D4D0]();
}

uint64_t sub_25A50EB70()
{
  return MEMORY[0x270F9D4D8]();
}

uint64_t sub_25A50EB80()
{
  return MEMORY[0x270F9D4E0]();
}

uint64_t sub_25A50EB90()
{
  return MEMORY[0x270F9D510]();
}

uint64_t sub_25A50EBA0()
{
  return MEMORY[0x270F9D520]();
}

uint64_t sub_25A50EBB0()
{
  return MEMORY[0x270F9D530]();
}

uint64_t sub_25A50EBC0()
{
  return MEMORY[0x270F9D550]();
}

uint64_t sub_25A50EBD0()
{
  return MEMORY[0x270F9D578]();
}

uint64_t sub_25A50EBE0()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_25A50EBF0()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_25A50EC00()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t sub_25A50EC10()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t sub_25A50EC20()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_25A50EC30()
{
  return MEMORY[0x270EF19F8]();
}

uint64_t sub_25A50EC40()
{
  return MEMORY[0x270EF1A10]();
}

uint64_t sub_25A50EC50()
{
  return MEMORY[0x270EF1A50]();
}

uint64_t sub_25A50EC60()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t sub_25A50EC70()
{
  return MEMORY[0x270EF1AB8]();
}

uint64_t sub_25A50EC80()
{
  return MEMORY[0x270EF1AD0]();
}

uint64_t sub_25A50EC90()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_25A50ECA0()
{
  return MEMORY[0x270F9D5F8]();
}

uint64_t sub_25A50ECB0()
{
  return MEMORY[0x270F9D610]();
}

uint64_t sub_25A50ECC0()
{
  return MEMORY[0x270F9D620]();
}

uint64_t sub_25A50ECD0()
{
  return MEMORY[0x270F9D648]();
}

uint64_t sub_25A50ECE0()
{
  return MEMORY[0x270F9D660]();
}

uint64_t sub_25A50ECF0()
{
  return MEMORY[0x270F9D678]();
}

uint64_t sub_25A50ED00()
{
  return MEMORY[0x270F9D680]();
}

uint64_t sub_25A50ED20()
{
  return MEMORY[0x270F9D6B8]();
}

uint64_t sub_25A50ED30()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_25A50ED40()
{
  return MEMORY[0x270F9D728]();
}

uint64_t sub_25A50ED50()
{
  return MEMORY[0x270F9D740]();
}

uint64_t sub_25A50ED60()
{
  return MEMORY[0x270F9D748]();
}

uint64_t sub_25A50ED70()
{
  return MEMORY[0x270F9D750]();
}

uint64_t sub_25A50ED80()
{
  return MEMORY[0x270F9D760]();
}

uint64_t sub_25A50ED90()
{
  return MEMORY[0x270F9D790]();
}

uint64_t sub_25A50EDA0()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_25A50EDB0()
{
  return MEMORY[0x270F9D7C0]();
}

uint64_t sub_25A50EDC0()
{
  return MEMORY[0x270F9D7D8]();
}

uint64_t sub_25A50EDD0()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_25A50EDE0()
{
  return MEMORY[0x270F9D7E8]();
}

uint64_t sub_25A50EDF0()
{
  return MEMORY[0x270F9D7F8]();
}

uint64_t sub_25A50EE00()
{
  return MEMORY[0x270F9D800]();
}

uint64_t sub_25A50EE10()
{
  return MEMORY[0x270F9D808]();
}

uint64_t sub_25A50EE20()
{
  return MEMORY[0x270F9D810]();
}

uint64_t sub_25A50EE30()
{
  return MEMORY[0x270F9D820]();
}

uint64_t sub_25A50EE40()
{
  return MEMORY[0x270F9D830]();
}

uint64_t sub_25A50EE50()
{
  return MEMORY[0x270F9D840]();
}

uint64_t sub_25A50EE60()
{
  return MEMORY[0x270F9D850]();
}

uint64_t sub_25A50EE70()
{
  return MEMORY[0x270F9D860]();
}

uint64_t sub_25A50EE80()
{
  return MEMORY[0x270F9D878]();
}

uint64_t sub_25A50EE90()
{
  return MEMORY[0x270F9D898]();
}

uint64_t sub_25A50EEA0()
{
  return MEMORY[0x270F9D8A8]();
}

uint64_t sub_25A50EEB0()
{
  return MEMORY[0x270F9D8B0]();
}

uint64_t sub_25A50EEC0()
{
  return MEMORY[0x270F9D8D8]();
}

uint64_t sub_25A50EED0()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t sub_25A50EEE0()
{
  return MEMORY[0x270F9D8F0]();
}

uint64_t sub_25A50EEF0()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t sub_25A50EF00()
{
  return MEMORY[0x270F9D908]();
}

uint64_t sub_25A50EF10()
{
  return MEMORY[0x270F9D920]();
}

uint64_t sub_25A50EF20()
{
  return MEMORY[0x270F9D930]();
}

uint64_t sub_25A50EF30()
{
  return MEMORY[0x270F9D938]();
}

uint64_t sub_25A50EF40()
{
  return MEMORY[0x270F9D940]();
}

uint64_t sub_25A50EF50()
{
  return MEMORY[0x270F9D948]();
}

uint64_t sub_25A50EF60()
{
  return MEMORY[0x270F9D960]();
}

uint64_t sub_25A50EF70()
{
  return MEMORY[0x270F9D968]();
}

uint64_t sub_25A50EF80()
{
  return MEMORY[0x270F9D980]();
}

uint64_t sub_25A50EF90()
{
  return MEMORY[0x270F9D988]();
}

uint64_t sub_25A50EFA0()
{
  return MEMORY[0x270F9D990]();
}

uint64_t sub_25A50EFB0()
{
  return MEMORY[0x270F9D9A0]();
}

uint64_t sub_25A50EFC0()
{
  return MEMORY[0x270F9D9A8]();
}

uint64_t sub_25A50EFD0()
{
  return MEMORY[0x270F9D9B0]();
}

uint64_t sub_25A50EFE0()
{
  return MEMORY[0x270F9D9C0]();
}

uint64_t sub_25A50EFF0()
{
  return MEMORY[0x270F9D9D0]();
}

uint64_t sub_25A50F000()
{
  return MEMORY[0x270F9D9E0]();
}

uint64_t sub_25A50F010()
{
  return MEMORY[0x270F9DA28]();
}

uint64_t sub_25A50F020()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t sub_25A50F030()
{
  return MEMORY[0x270F9DA78]();
}

uint64_t sub_25A50F070()
{
  return MEMORY[0x270F9DBA0]();
}

uint64_t sub_25A50F080()
{
  return MEMORY[0x270EF1B88]();
}

uint64_t sub_25A50F090()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t sub_25A50F0A0()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t sub_25A50F0B0()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t sub_25A50F0C0()
{
  return MEMORY[0x270F9DBC8]();
}

uint64_t sub_25A50F0D0()
{
  return MEMORY[0x270F9DBD0]();
}

uint64_t sub_25A50F0E0()
{
  return MEMORY[0x270F9DBE0]();
}

uint64_t sub_25A50F0F0()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t sub_25A50F100()
{
  return MEMORY[0x270F9DC00]();
}

uint64_t sub_25A50F110()
{
  return MEMORY[0x270F9DC08]();
}

uint64_t sub_25A50F120()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t sub_25A50F130()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t sub_25A50F140()
{
  return MEMORY[0x270F9DC30]();
}

uint64_t sub_25A50F150()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t sub_25A50F160()
{
  return MEMORY[0x270F9DC60]();
}

uint64_t sub_25A50F170()
{
  return MEMORY[0x270F9DC80]();
}

uint64_t sub_25A50F180()
{
  return MEMORY[0x270F9DC88]();
}

uint64_t sub_25A50F190()
{
  return MEMORY[0x270F9DC90]();
}

uint64_t sub_25A50F1A0()
{
  return MEMORY[0x270F9DC98]();
}

uint64_t sub_25A50F1B0()
{
  return MEMORY[0x270F9DCA8]();
}

uint64_t sub_25A50F1C0()
{
  return MEMORY[0x270F9DCB0]();
}

uint64_t sub_25A50F1D0()
{
  return MEMORY[0x270F9DCC8]();
}

uint64_t sub_25A50F1E0()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t sub_25A50F200()
{
  return MEMORY[0x270F9DD08]();
}

uint64_t sub_25A50F210()
{
  return MEMORY[0x270F9DD28]();
}

uint64_t sub_25A50F220()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t sub_25A50F230()
{
  return MEMORY[0x270FA1E08]();
}

uint64_t sub_25A50F240()
{
  return MEMORY[0x270FA1E18]();
}

uint64_t sub_25A50F250()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t sub_25A50F260()
{
  return MEMORY[0x270FA1E28]();
}

uint64_t sub_25A50F270()
{
  return MEMORY[0x270FA1E30]();
}

uint64_t sub_25A50F290()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t sub_25A50F2A0()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t sub_25A50F2B0()
{
  return MEMORY[0x270FA1F18]();
}

uint64_t sub_25A50F2C0()
{
  return MEMORY[0x270FA1F28]();
}

uint64_t sub_25A50F2D0()
{
  return MEMORY[0x270FA1F30]();
}

uint64_t sub_25A50F2E0()
{
  return MEMORY[0x270FA1F38]();
}

uint64_t _sScS20PreviewsFoundationOSE4SinkV5yieldScS12ContinuationV11YieldResultOyyt__GyytRszlF_0()
{
  return MEMORY[0x270FA1F40]();
}

uint64_t sub_25A50F300()
{
  return MEMORY[0x270FA1F48]();
}

uint64_t sub_25A50F310()
{
  return MEMORY[0x270FA1F50]();
}

uint64_t sub_25A50F320()
{
  return MEMORY[0x270FA1F58]();
}

uint64_t sub_25A50F330()
{
  return MEMORY[0x270FA1F60]();
}

uint64_t sub_25A50F350()
{
  return MEMORY[0x270FA1F78]();
}

uint64_t sub_25A50F360()
{
  return MEMORY[0x270FA1F80]();
}

uint64_t sub_25A50F370()
{
  return MEMORY[0x270FA1F88]();
}

uint64_t sub_25A50F380()
{
  return MEMORY[0x270FA1F90]();
}

uint64_t sub_25A50F3A0()
{
  return MEMORY[0x270FA1FB0]();
}

uint64_t sub_25A50F3C0()
{
  return MEMORY[0x270FA1FC0]();
}

uint64_t sub_25A50F3E0()
{
  return MEMORY[0x270FA1FD8]();
}

uint64_t sub_25A50F3F0()
{
  return MEMORY[0x270FA1FE8]();
}

uint64_t sub_25A50F410()
{
  return MEMORY[0x270FA2068]();
}

uint64_t sub_25A50F420()
{
  return MEMORY[0x270FA2070]();
}

uint64_t sub_25A50F430()
{
  return MEMORY[0x270FA2080]();
}

uint64_t sub_25A50F440()
{
  return MEMORY[0x270FA2088]();
}

uint64_t sub_25A50F450()
{
  return MEMORY[0x270F9DDA0]();
}

uint64_t sub_25A50F460()
{
  return MEMORY[0x270F9DEA8]();
}

uint64_t sub_25A50F470()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t sub_25A50F480()
{
  return MEMORY[0x270F9DEF8]();
}

uint64_t sub_25A50F490()
{
  return MEMORY[0x270F9DF08]();
}

uint64_t sub_25A50F4A0()
{
  return MEMORY[0x270F9DF40]();
}

uint64_t sub_25A50F4B0()
{
  return MEMORY[0x270F9DF48]();
}

uint64_t sub_25A50F4C0()
{
  return MEMORY[0x270F9DF58]();
}

uint64_t sub_25A50F4D0()
{
  return MEMORY[0x270F9DF60]();
}

uint64_t sub_25A50F4E0()
{
  return MEMORY[0x270F9DF80]();
}

uint64_t sub_25A50F4F0()
{
  return MEMORY[0x270F9DF90]();
}

uint64_t sub_25A50F500()
{
  return MEMORY[0x270F9DFB0]();
}

uint64_t sub_25A50F510()
{
  return MEMORY[0x270F9DFB8]();
}

uint64_t sub_25A50F520()
{
  return MEMORY[0x270F9DFC8]();
}

uint64_t sub_25A50F530()
{
  return MEMORY[0x270F9DFD0]();
}

uint64_t sub_25A50F540()
{
  return MEMORY[0x270F9DFE8]();
}

uint64_t sub_25A50F550()
{
  return MEMORY[0x270F9DFF0]();
}

uint64_t sub_25A50F560()
{
  return MEMORY[0x270F9E040]();
}

uint64_t sub_25A50F570()
{
  return MEMORY[0x270F9E048]();
}

uint64_t sub_25A50F580()
{
  return MEMORY[0x270F9E050]();
}

uint64_t sub_25A50F5E0()
{
  return MEMORY[0x270F9E080]();
}

uint64_t sub_25A50F5F0()
{
  return MEMORY[0x270F9E0A0]();
}

uint64_t sub_25A50F600()
{
  return MEMORY[0x270F9E0A8]();
}

uint64_t sub_25A50F610()
{
  return MEMORY[0x270F9E0C8]();
}

uint64_t sub_25A50F620()
{
  return MEMORY[0x270F9E0D8]();
}

uint64_t sub_25A50F630()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t sub_25A50F660()
{
  return MEMORY[0x270F9E138]();
}

uint64_t sub_25A50F670()
{
  return MEMORY[0x270F9E140]();
}

uint64_t sub_25A50F680()
{
  return MEMORY[0x270F9E148]();
}

uint64_t sub_25A50F690()
{
  return MEMORY[0x270F9E150]();
}

uint64_t sub_25A50F6A0()
{
  return MEMORY[0x270F9E158]();
}

uint64_t sub_25A50F6B0()
{
  return MEMORY[0x270F9E170]();
}

uint64_t sub_25A50F6C0()
{
  return MEMORY[0x270F9E178]();
}

uint64_t sub_25A50F6D0()
{
  return MEMORY[0x270F9E180]();
}

uint64_t sub_25A50F6E0()
{
  return MEMORY[0x270F9E190]();
}

uint64_t sub_25A50F6F0()
{
  return MEMORY[0x270F9E1B8]();
}

uint64_t sub_25A50F700()
{
  return MEMORY[0x270F9E1C0]();
}

uint64_t sub_25A50F710()
{
  return MEMORY[0x270F9E1D0]();
}

uint64_t sub_25A50F720()
{
  return MEMORY[0x270F9E1D8]();
}

uint64_t sub_25A50F730()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t sub_25A50F740()
{
  return MEMORY[0x270FA2BC8]();
}

uint64_t sub_25A50F750()
{
  return MEMORY[0x270F9E210]();
}

uint64_t sub_25A50F760()
{
  return MEMORY[0x270F9E218]();
}

uint64_t sub_25A50F770()
{
  return MEMORY[0x270F9E220]();
}

uint64_t sub_25A50F780()
{
  return MEMORY[0x270F9E228]();
}

uint64_t sub_25A50F790()
{
  return MEMORY[0x270F9E240]();
}

uint64_t sub_25A50F7A0()
{
  return MEMORY[0x270F9E2D8]();
}

uint64_t sub_25A50F7B0()
{
  return MEMORY[0x270F9E2E8]();
}

uint64_t sub_25A50F7C0()
{
  return MEMORY[0x270F9E2F0]();
}

uint64_t sub_25A50F7D0()
{
  return MEMORY[0x270F9E2F8]();
}

uint64_t sub_25A50F7E0()
{
  return MEMORY[0x270F9E320]();
}

uint64_t sub_25A50F7F0()
{
  return MEMORY[0x270F9E330]();
}

uint64_t sub_25A50F800()
{
  return MEMORY[0x270EF1EE8]();
}

uint64_t sub_25A50F810()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t sub_25A50F820()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t sub_25A50F830()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_25A50F840()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t sub_25A50F850()
{
  return MEMORY[0x270EF1F28]();
}

uint64_t sub_25A50F860()
{
  return MEMORY[0x270FA0C38]();
}

uint64_t sub_25A50F870()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t sub_25A50F880()
{
  return MEMORY[0x270FA0C78]();
}

uint64_t sub_25A50F890()
{
  return MEMORY[0x270FA0CB0]();
}

uint64_t sub_25A50F8A0()
{
  return MEMORY[0x270FA0CC0]();
}

uint64_t sub_25A50F8B0()
{
  return MEMORY[0x270FA0CD0]();
}

uint64_t sub_25A50F8C0()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t sub_25A50F8D0()
{
  return MEMORY[0x270FA0D70]();
}

uint64_t sub_25A50F8E0()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t sub_25A50F8F0()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t sub_25A50F900()
{
  return MEMORY[0x270FA0DD0]();
}

uint64_t sub_25A50F910()
{
  return MEMORY[0x270FA2E90]();
}

uint64_t sub_25A50F920()
{
  return MEMORY[0x270FA2EA8]();
}

uint64_t sub_25A50F930()
{
  return MEMORY[0x270FA2EB8]();
}

uint64_t sub_25A50F940()
{
  return MEMORY[0x270FA0F10]();
}

uint64_t sub_25A50F950()
{
  return MEMORY[0x270FA0F28]();
}

uint64_t sub_25A50F960()
{
  return MEMORY[0x270EF20D8]();
}

uint64_t sub_25A50F970()
{
  return MEMORY[0x270EF2170]();
}

uint64_t sub_25A50F980()
{
  return MEMORY[0x270EF2180]();
}

uint64_t sub_25A50F990()
{
  return MEMORY[0x270EF2198]();
}

uint64_t sub_25A50F9A0()
{
  return MEMORY[0x270FA1180]();
}

uint64_t sub_25A50F9B0()
{
  return MEMORY[0x270EF21A8]();
}

uint64_t sub_25A50F9C0()
{
  return MEMORY[0x270EF2350]();
}

uint64_t sub_25A50F9D0()
{
  return MEMORY[0x270EF2360]();
}

uint64_t sub_25A50F9E0()
{
  return MEMORY[0x270EF2370]();
}

uint64_t sub_25A50F9F0()
{
  return MEMORY[0x270EF2390]();
}

uint64_t sub_25A50FA00()
{
  return MEMORY[0x270EF2398]();
}

uint64_t sub_25A50FA10()
{
  return MEMORY[0x270FA2F00]();
}

uint64_t sub_25A50FA20()
{
  return MEMORY[0x270F9E378]();
}

uint64_t sub_25A50FA30()
{
  return MEMORY[0x270F9E390]();
}

uint64_t sub_25A50FA40()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_25A50FA50()
{
  return MEMORY[0x270F9E3E0]();
}

uint64_t sub_25A50FA60()
{
  return MEMORY[0x270F9E400]();
}

uint64_t sub_25A50FA70()
{
  return MEMORY[0x270F9E430]();
}

uint64_t sub_25A50FA80()
{
  return MEMORY[0x270F9E450]();
}

uint64_t sub_25A50FA90()
{
  return MEMORY[0x270F9E470]();
}

uint64_t sub_25A50FAA0()
{
  return MEMORY[0x270F9E4A0]();
}

uint64_t sub_25A50FAB0()
{
  return MEMORY[0x270F9E4A8]();
}

uint64_t sub_25A50FAC0()
{
  return MEMORY[0x270F9E4B8]();
}

uint64_t sub_25A50FAD0()
{
  return MEMORY[0x270F9E4F8]();
}

uint64_t sub_25A50FAE0()
{
  return MEMORY[0x270F9E508]();
}

uint64_t sub_25A50FAF0()
{
  return MEMORY[0x270F9E518]();
}

uint64_t sub_25A50FB00()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_25A50FB10()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_25A50FB20()
{
  return MEMORY[0x270EF23E8]();
}

uint64_t sub_25A50FB30()
{
  return MEMORY[0x270EF2410]();
}

uint64_t sub_25A50FB40()
{
  return MEMORY[0x270EF2448]();
}

uint64_t sub_25A50FB50()
{
  return MEMORY[0x270EF2478]();
}

uint64_t sub_25A50FB60()
{
  return MEMORY[0x270EF24A0]();
}

uint64_t sub_25A50FB70()
{
  return MEMORY[0x270EF2560]();
}

uint64_t sub_25A50FB80()
{
  return MEMORY[0x270EF2568]();
}

uint64_t sub_25A50FB90()
{
  return MEMORY[0x270EF25B0]();
}

uint64_t sub_25A50FBA0()
{
  return MEMORY[0x270F9E598]();
}

uint64_t sub_25A50FBB0()
{
  return MEMORY[0x270F9E5B8]();
}

uint64_t sub_25A50FBC0()
{
  return MEMORY[0x270F9E5C0]();
}

uint64_t sub_25A50FBD0()
{
  return MEMORY[0x270F9E640]();
}

uint64_t sub_25A50FBE0()
{
  return MEMORY[0x270F9E648]();
}

uint64_t sub_25A50FBF0()
{
  return MEMORY[0x270F9E650]();
}

uint64_t sub_25A50FC00()
{
  return MEMORY[0x270F9E658]();
}

uint64_t sub_25A50FC10()
{
  return MEMORY[0x270F9E670]();
}

uint64_t sub_25A50FC20()
{
  return MEMORY[0x270F9E6C0]();
}

uint64_t sub_25A50FC30()
{
  return MEMORY[0x270F9E6E0]();
}

uint64_t sub_25A50FC40()
{
  return MEMORY[0x270F9E700]();
}

uint64_t sub_25A50FC50()
{
  return MEMORY[0x270F9E708]();
}

uint64_t sub_25A50FC60()
{
  return MEMORY[0x270F9E758]();
}

uint64_t sub_25A50FC80()
{
  return MEMORY[0x270F9E7E0]();
}

uint64_t sub_25A50FC90()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t sub_25A50FCA0()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t sub_25A50FCB0()
{
  return MEMORY[0x270F9E818]();
}

uint64_t sub_25A50FCC0()
{
  return MEMORY[0x270F9E870]();
}

uint64_t sub_25A50FCD0()
{
  return MEMORY[0x270F9E8C0]();
}

uint64_t sub_25A50FCE0()
{
  return MEMORY[0x270F9E8C8]();
}

uint64_t sub_25A50FCF0()
{
  return MEMORY[0x270F9E8E8]();
}

uint64_t sub_25A50FD00()
{
  return MEMORY[0x270F9E8F0]();
}

uint64_t sub_25A50FD10()
{
  return MEMORY[0x270F9E900]();
}

uint64_t sub_25A50FD30()
{
  return MEMORY[0x270F9E930]();
}

uint64_t sub_25A50FD40()
{
  return MEMORY[0x270F9E958]();
}

uint64_t sub_25A50FD50()
{
  return MEMORY[0x270F9E960]();
}

uint64_t sub_25A50FD60()
{
  return MEMORY[0x270F9E970]();
}

uint64_t sub_25A50FD70()
{
  return MEMORY[0x270F9E978]();
}

uint64_t sub_25A50FD80()
{
  return MEMORY[0x270F9E988]();
}

uint64_t sub_25A50FDA0()
{
  return MEMORY[0x270F9E9A0]();
}

uint64_t sub_25A50FDB0()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_25A50FDC0()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_25A50FDD0()
{
  return MEMORY[0x270F9E9C8]();
}

uint64_t sub_25A50FDE0()
{
  return MEMORY[0x270F9E9D0]();
}

uint64_t sub_25A50FDF0()
{
  return MEMORY[0x270F9E9E0]();
}

uint64_t sub_25A50FE00()
{
  return MEMORY[0x270F9E9E8]();
}

uint64_t sub_25A50FE10()
{
  return MEMORY[0x270F9EA08]();
}

uint64_t sub_25A50FE20()
{
  return MEMORY[0x270F9EA38]();
}

uint64_t sub_25A50FE30()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_25A50FE40()
{
  return MEMORY[0x270F9EAD0]();
}

uint64_t sub_25A50FE50()
{
  return MEMORY[0x270F9EAE0]();
}

uint64_t sub_25A50FE60()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_25A50FE70()
{
  return MEMORY[0x270F9EB30]();
}

uint64_t sub_25A50FE80()
{
  return MEMORY[0x270F9EB40]();
}

uint64_t sub_25A50FE90()
{
  return MEMORY[0x270F9EB48]();
}

uint64_t sub_25A50FEA0()
{
  return MEMORY[0x270F9EB70]();
}

uint64_t sub_25A50FEB0()
{
  return MEMORY[0x270F9EB80]();
}

uint64_t sub_25A50FEC0()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t sub_25A50FED0()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t sub_25A50FEE0()
{
  return MEMORY[0x270F9EBD8]();
}

uint64_t sub_25A50FEF0()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t sub_25A50FF00()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t sub_25A50FF10()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t sub_25A50FF20()
{
  return MEMORY[0x270F9EC48]();
}

uint64_t sub_25A50FF30()
{
  return MEMORY[0x270F9EC88]();
}

uint64_t sub_25A50FF40()
{
  return MEMORY[0x270F9EC90]();
}

uint64_t sub_25A50FF50()
{
  return MEMORY[0x270FA21A0]();
}

uint64_t sub_25A50FF60()
{
  return MEMORY[0x270FA21A8]();
}

uint64_t sub_25A50FF70()
{
  return MEMORY[0x270FA21B0]();
}

uint64_t sub_25A50FF80()
{
  return MEMORY[0x270F9ECD8]();
}

uint64_t sub_25A50FF90()
{
  return MEMORY[0x270F9ED00]();
}

uint64_t sub_25A50FFA0()
{
  return MEMORY[0x270F9ED68]();
}

uint64_t sub_25A50FFB0()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t sub_25A50FFC0()
{
  return MEMORY[0x270F9ED90]();
}

uint64_t sub_25A50FFD0()
{
  return MEMORY[0x270F9EE48]();
}

uint64_t sub_25A50FFE0()
{
  return MEMORY[0x270F9EE50]();
}

uint64_t sub_25A50FFF0()
{
  return MEMORY[0x270F9EE58]();
}

uint64_t sub_25A510000()
{
  return MEMORY[0x270F9EF08]();
}

uint64_t sub_25A510010()
{
  return MEMORY[0x270F9EF28]();
}

uint64_t sub_25A510020()
{
  return MEMORY[0x270F9EF40]();
}

uint64_t sub_25A510030()
{
  return MEMORY[0x270F9EF50]();
}

uint64_t sub_25A510040()
{
  return MEMORY[0x270F9EFC0]();
}

uint64_t sub_25A510050()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_25A510060()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t sub_25A510070()
{
  return MEMORY[0x270F9F008]();
}

uint64_t sub_25A510080()
{
  return MEMORY[0x270F9F010]();
}

uint64_t sub_25A510090()
{
  return MEMORY[0x270F9F018]();
}

uint64_t sub_25A5100A0()
{
  return MEMORY[0x270F9F038]();
}

uint64_t sub_25A5100B0()
{
  return MEMORY[0x270F9F040]();
}

uint64_t sub_25A5100C0()
{
  return MEMORY[0x270F9F048]();
}

uint64_t sub_25A5100D0()
{
  return MEMORY[0x270F9F050]();
}

uint64_t sub_25A5100E0()
{
  return MEMORY[0x270F9F060]();
}

uint64_t sub_25A5100F0()
{
  return MEMORY[0x270F9F078]();
}

uint64_t sub_25A510100()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_25A510110()
{
  return MEMORY[0x270F9F098]();
}

uint64_t sub_25A510120()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t sub_25A510130()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_25A510140()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_25A510150()
{
  return MEMORY[0x270F9F138]();
}

uint64_t sub_25A510160()
{
  return MEMORY[0x270F9F140]();
}

uint64_t sub_25A510170()
{
  return MEMORY[0x270F9F148]();
}

uint64_t sub_25A510190()
{
  return MEMORY[0x270F9F230]();
}

uint64_t sub_25A5101B0()
{
  return MEMORY[0x270F9F270]();
}

uint64_t sub_25A5101C0()
{
  return MEMORY[0x270F9F290]();
}

uint64_t sub_25A5101D0()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t sub_25A5101E0()
{
  return MEMORY[0x270F9F2E8]();
}

uint64_t sub_25A5101F0()
{
  return MEMORY[0x270F9F308]();
}

uint64_t sub_25A510200()
{
  return MEMORY[0x270F9F318]();
}

uint64_t sub_25A510210()
{
  return MEMORY[0x270F9F330]();
}

uint64_t sub_25A510220()
{
  return MEMORY[0x270F9F358]();
}

uint64_t sub_25A510230()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t sub_25A510240()
{
  return MEMORY[0x270F9F498]();
}

uint64_t sub_25A510250()
{
  return MEMORY[0x270F9F4C8]();
}

uint64_t sub_25A510260()
{
  return MEMORY[0x270F9F4D0]();
}

uint64_t sub_25A510270()
{
  return MEMORY[0x270FA22C8]();
}

uint64_t sub_25A510290()
{
  return MEMORY[0x270FA22F0]();
}

uint64_t sub_25A5102A0()
{
  return MEMORY[0x270FA2308]();
}

uint64_t sub_25A5102B0()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_25A5102C0()
{
  return MEMORY[0x270F9F4F8]();
}

uint64_t sub_25A5102E0()
{
  return MEMORY[0x270F9F730]();
}

uint64_t sub_25A5102F0()
{
  return MEMORY[0x270F9F758]();
}

uint64_t sub_25A510300()
{
  return MEMORY[0x270F9F768]();
}

uint64_t sub_25A510310()
{
  return MEMORY[0x270F9F770]();
}

uint64_t sub_25A510320()
{
  return MEMORY[0x270F9F778]();
}

uint64_t sub_25A510330()
{
  return MEMORY[0x270F9F7A8]();
}

uint64_t sub_25A510340()
{
  return MEMORY[0x270F9F7B0]();
}

uint64_t sub_25A510350()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t sub_25A510360()
{
  return MEMORY[0x270F9F7C8]();
}

uint64_t sub_25A510370()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_25A510390()
{
  return MEMORY[0x270F9F818]();
}

uint64_t sub_25A5103A0()
{
  return MEMORY[0x270F9F920]();
}

uint64_t sub_25A5103C0()
{
  return MEMORY[0x270F9FA28]();
}

uint64_t sub_25A5103E0()
{
  return MEMORY[0x270F9FA60]();
}

uint64_t sub_25A5103F0()
{
  return MEMORY[0x270F9FA80]();
}

uint64_t sub_25A510400()
{
  return MEMORY[0x270F9FA88]();
}

uint64_t sub_25A510410()
{
  return MEMORY[0x270F9FAB8]();
}

uint64_t sub_25A510420()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t sub_25A510430()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_25A510440()
{
  return MEMORY[0x270FA2378]();
}

uint64_t sub_25A510460()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t sub_25A510470()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t sub_25A510480()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t sub_25A510490()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t sub_25A5104A0()
{
  return MEMORY[0x270F9FBD8]();
}

uint64_t sub_25A5104B0()
{
  return MEMORY[0x270F9FC28]();
}

uint64_t sub_25A5104C0()
{
  return MEMORY[0x270F9FC30]();
}

uint64_t sub_25A5104D0()
{
  return MEMORY[0x270F9FC40]();
}

uint64_t sub_25A5104E0()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_25A5104F0()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_25A510500()
{
  return MEMORY[0x270F9FC68]();
}

uint64_t sub_25A510510()
{
  return MEMORY[0x270F9FC78]();
}

uint64_t sub_25A510520()
{
  return MEMORY[0x270F9FC80]();
}

uint64_t sub_25A510530()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t sub_25A510540()
{
  return MEMORY[0x270F9FCF8]();
}

uint64_t sub_25A510550()
{
  return MEMORY[0x270F9FD60]();
}

uint64_t sub_25A510560()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t sub_25A510570()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t sub_25A510580()
{
  return MEMORY[0x270F9FDD0]();
}

uint64_t sub_25A510590()
{
  return MEMORY[0x270F9FF40]();
}

uint64_t sub_25A5105A0()
{
  return MEMORY[0x270F9FFE8]();
}

uint64_t sub_25A5105D0()
{
  return MEMORY[0x270FA0128]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x270F18A48]();
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

uint64_t CSArchitectureGetArchitectureForName()
{
  return MEMORY[0x270F23690]();
}

uint64_t CSIsNull()
{
  return MEMORY[0x270F236B0]();
}

uint64_t CSRelease()
{
  return MEMORY[0x270F236D8]();
}

uint64_t CSSourceInfoGetLineNumber()
{
  return MEMORY[0x270F23700]();
}

uint64_t CSSourceInfoGetPath()
{
  return MEMORY[0x270F23708]();
}

uint64_t CSSymbolOwnerForEachStackFrameAtAddress()
{
  return MEMORY[0x270F23768]();
}

uint64_t CSSymbolOwnerGetBaseAddress()
{
  return MEMORY[0x270F23790]();
}

uint64_t CSSymbolOwnerGetSymbolWithAddress()
{
  return MEMORY[0x270F237C0]();
}

uint64_t CSSymbolicatorCreateWithPathAndArchitecture()
{
  return MEMORY[0x270F23828]();
}

uint64_t CSSymbolicatorGetSymbolOwner()
{
  return MEMORY[0x270F238C8]();
}

CFTypeRef IOPSCopyPowerSourcesInfo(void)
{
  return (CFTypeRef)MEMORY[0x270EF4910]();
}

CFArrayRef IOPSCopyPowerSourcesList(CFTypeRef blob)
{
  return (CFArrayRef)MEMORY[0x270EF4918](blob);
}

CFDictionaryRef IOPSGetPowerSourceDescription(CFTypeRef blob, CFTypeRef ps)
{
  return (CFDictionaryRef)MEMORY[0x270EF4950](blob, ps);
}

CFRunLoopSourceRef IOPSNotificationCreateRunLoopSource(IOPowerSourceCallbackType callback, void *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x270EF4988](callback, context);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFCopyServerVersionDictionary()
{
  return MEMORY[0x270EE55E0]();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x270EE55F0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x270FA0150]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x270FA0170]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x270ED85F8](*(void *)&__upper_bound);
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x270F98178](atoken);
}

void bzero(void *a1, size_t a2)
{
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return (dispatch_queue_t)MEMORY[0x270ED9310]();
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x270ED9470](queue);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

int dup2(int a1, int a2)
{
  return MEMORY[0x270ED9680](*(void *)&a1, *(void *)&a2);
}

void exit(int a1)
{
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x270ED9978](a1);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x270ED9A20](a1, a2);
}

void free(void *a1)
{
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x270ED9E58](__x, __y);
  return result;
}

int isatty(int a1)
{
  return MEMORY[0x270ED9EF0](*(void *)&a1);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x270EDA138]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_end_catch(void)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return MEMORY[0x270EDB068](a1, a2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x270FA0218]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x270FA2420]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x270FA2428]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x270FA0330]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x270FA0348]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x270FA0390]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x270FA03C8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x270FA0420]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x270FA0430]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x270FA0490]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_modifyAtReferenceWritableKeyPath()
{
  return MEMORY[0x270FA04E0]();
}

uint64_t swift_modifyAtWritableKeyPath()
{
  return MEMORY[0x270FA04E8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x270FA04F8]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x270FA0500]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return MEMORY[0x270FA0540]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x270FA0548]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x270FA0570]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x270FA0598]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x270FA05D0]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x270FA05D8]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x270FA05E0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x270FA0600]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x270FA0608]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x270FA0630]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x270FA0678]();
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x270EDB868](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}