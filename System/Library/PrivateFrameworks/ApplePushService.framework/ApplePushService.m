BOOL sub_100004D98(void *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t v12;
  PSChannelUpdate *v13;

  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        v12 = PBReaderReadString();
        v13 = (PSChannelUpdate *)a1[1];
        a1[1] = v12;
LABEL_23:

        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_25:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    v13 = objc_alloc_init(PSChannelUpdate);
    [a1 addChannelUpdates:v13];
    if (!PBReaderPlaceMark() || (sub_10004062C((uint64_t)v13, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_23;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100005ADC(void *a1)
{
  v2 = *(void **)(a1[4] + 8);
  if (!v2)
  {
    id v3 = [objc_alloc((Class)CUTWeakLinkClass()) initWithQueue:*(void *)(a1[4] + 16)];
    uint64_t v4 = a1[4];
    v5 = *(void **)(v4 + 8);
    *(void *)(v4 + 8) = v3;

    BOOL v6 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG);
    if (v6) {
      sub_1000C7480(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    v2 = *(void **)(a1[4] + 8);
  }
  v14 = [v2 signatureWithDomain:@"ApplePushService" type:a1[5] subType:a1[6] detectedProcess:@"apsd" triggerThresholdValues:0];
  unsigned __int8 v15 = [*(id *)(a1[4] + 8) snapshotWithSignature:v14 duration:0 event:0 payload:&stru_100129B40 reply:0.0];
  BOOL v16 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG);
  if (v15)
  {
    if (v16) {
      sub_1000C7408(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  else if (v16)
  {
    sub_1000C7444(v16, v17, v18, v19, v20, v21, v22, v23);
  }
}

void sub_100005BDC(id a1, NSDictionary *a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
    sub_1000C74BC((uint64_t)a2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_100005C8C(uint64_t a1)
{
  if (qword_10015A740 != -1) {
    dispatch_once(&qword_10015A740, &stru_100129BA8);
  }
  if (qword_10015A748 != -1) {
    dispatch_once(&qword_10015A748, &stru_100129BC8);
  }
  if (qword_10015A750 != -1) {
    dispatch_once(&qword_10015A750, &stru_100129BE8);
  }
  if (off_10015A798 && off_10015A7A0 && off_10015A7A8)
  {
    uint64_t v2 = off_10015A798("com.apple.apsd.connection-failure");
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = (unint64_t *)(a1 + 32);
    off_10015A7A0(v2, v4, 0);
    off_10015A7A8(v2);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      sub_1000C7530(v3);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000C75C0();
  }
}

void sub_100005DBC(id a1)
{
  off_10015A798 = (uint64_t (*)(void))CUTWeakLinkSymbol();
}

void sub_100005DEC(id a1)
{
  off_10015A7A0 = (uint64_t (*)(void, void, void))CUTWeakLinkSymbol();
}

void sub_100005E1C(id a1)
{
  off_10015A7A8 = (uint64_t (*)(void))CUTWeakLinkSymbol();
}

void sub_100005EBC(uint64_t a1)
{
  if (qword_10015A758 != -1) {
    dispatch_once(&qword_10015A758, &stru_100129C28);
  }
  if (qword_10015A760 != -1) {
    dispatch_once(&qword_10015A760, &stru_100129C48);
  }
  if (qword_10015A768 != -1) {
    dispatch_once(&qword_10015A768, &stru_100129C68);
  }
  if (off_10015A7B0 && off_10015A7B8 && off_10015A7C0)
  {
    uint64_t v2 = off_10015A7B0("com.apple.apsd.connection-ok");
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = (unint64_t *)(a1 + 32);
    off_10015A7B8(v2, v4, 0);
    off_10015A7C0(v2);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      sub_1000C764C(v3);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000C76DC();
  }
}

void sub_100005FEC(id a1)
{
  off_10015A7B0 = (uint64_t (*)(void))CUTWeakLinkSymbol();
}

void sub_10000601C(id a1)
{
  off_10015A7B8 = (uint64_t (*)(void, void, void))CUTWeakLinkSymbol();
}

void sub_10000604C(id a1)
{
  off_10015A7C0 = (uint64_t (*)(void))CUTWeakLinkSymbol();
}

void sub_100006140(uint64_t a1)
{
  if (qword_10015A770 != -1) {
    dispatch_once(&qword_10015A770, &stru_100129C88);
  }
  if (qword_10015A778 != -1) {
    dispatch_once(&qword_10015A778, &stru_100129CA8);
  }
  if (qword_10015A788 != -1) {
    dispatch_once(&qword_10015A788, &stru_100129CC8);
  }
  if (qword_10015A790 != -1) {
    dispatch_once(&qword_10015A790, &stru_100129CE8);
  }
  uint64_t v2 = (uint64_t (*)(const char *))off_10015A7C8;
  if (off_10015A7C8 && off_10015A7D0 && off_10015A7D8 && off_10015A780)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      [v3 UTF8String];
      uint64_t v4 = nw_interface_create_with_name();
      nw_interface_type_t type = nw_interface_get_type(v4);
      if (type > nw_interface_type_loopback) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = qword_10010E6D8[type];
      }

      uint64_t v2 = (uint64_t (*)(const char *))off_10015A7C8;
    }
    else
    {
      uint64_t v6 = 1000;
    }
    uint64_t v7 = v2("com.apple.apsd.public-ip");
    off_10015A7D0(v7, v6, 0);
    ((void (*)(uint64_t, void, id, id))off_10015A780)(v7, 0, [*(id *)(a1 + 40) length], objc_msgSend(*(id *)(a1 + 40), "bytes"));
    off_10015A7D8(v7);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      sub_1000C7768((uint64_t *)(a1 + 32), v6);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000C77F8();
  }
}

void sub_100006338(id a1)
{
  off_10015A7C8 = (_UNKNOWN *)CUTWeakLinkSymbol();
}

void sub_100006368(id a1)
{
  off_10015A7D0 = (uint64_t (*)(void, void, void))CUTWeakLinkSymbol();
}

void sub_100006398(id a1)
{
  off_10015A780 = (_UNKNOWN *)CUTWeakLinkSymbol();
}

void sub_1000063C8(id a1)
{
  off_10015A7D8 = (uint64_t (*)(void))CUTWeakLinkSymbol();
}

void sub_10000645C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_100006478(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

__CFString *sub_100006494(unint64_t a1)
{
  if (a1 >= 3)
  {
    v1 = +[NSString stringWithFormat:@"UnknownConnectionType %ld", a1];
  }
  else
  {
    v1 = off_100129D30[a1];
  }
  return v1;
}

BOOL sub_1000064F8(unint64_t a1)
{
  return a1 < 3;
}

CFStringRef sub_100006504(uint64_t a1)
{
  CFStringRef v1 = @"<unknown>";
  if (a1 == 1) {
    CFStringRef v1 = @"Sent";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"NotSent";
  }
}

CFStringRef sub_100006530(unint64_t a1)
{
  if (a1 > 2) {
    return @"<unknown>";
  }
  else {
    return off_100129D70[a1];
  }
}

CFStringRef sub_100006554(unint64_t a1)
{
  if (a1 > 4) {
    return @"<unknown>";
  }
  else {
    return off_100129D48[a1];
  }
}

uint64_t sub_10000952C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100009794(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100009850;
  v3[3] = &unk_100129DB8;
  v3[4] = &v4;
  v3[5] = a1;
  sub_1000A6B08(v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100009838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100009850(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t v1 = result;
    CSDBRecordStoreAddRecord();
    uint64_t result = CSDBRecordSaveStore();
    *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
  }
  return result;
}

void *sub_100009898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t valuePtr = a6;
  pthread_once(&stru_100159220, (void (*)(void))sub_10000A800);
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v11 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0;
    *(void *)(Instance + 24) = 0;
    *(_DWORD *)(Instance + 16) = 0;
    sub_1000A6804();
    uint64_t v12 = CSDBRecordCreate();
    if (v12)
    {
      uint64_t v13 = (const void *)v12;
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      uint64_t v15 = 0;
      uint64_t v23 = a2;
      uint64_t v24 = a3;
      uint64_t v25 = a4;
      uint64_t v26 = a5;
      CFNumberRef v27 = v14;
      do
      {
        CSDBRecordSetProperty();
        ++v15;
      }
      while (v15 != 5);
      if (sub_100009794((uint64_t)v13))
      {
        v11[3] = (int)CSDBRecordGetID();
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = v11[3];
          *(_DWORD *)buf = 138412546;
          uint64_t v20 = v11;
          __int16 v21 = 2048;
          uint64_t v22 = v16;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - New message record [%@] has ID [%lld].", buf, 0x16u);
        }
      }
      else
      {
        CFRelease(v11);
        uint64_t v11 = 0;
      }
      CFRelease(v13);
      if (v14) {
        CFRelease(v14);
      }
    }
    else
    {
      CFRelease(v11);
      return 0;
    }
  }
  return v11;
}

void sub_100009A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138413058;
    uint64_t v10 = a1;
    __int16 v11 = 2112;
    uint64_t v12 = a2;
    __int16 v13 = 2112;
    uint64_t v14 = a3;
    __int16 v15 = 2112;
    uint64_t v16 = a4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - APSChannelRecordDeleteMessageForChannelID %@ channelTopic %@ environment %@ tokenName %@", buf, 0x2Au);
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100009B9C;
  v8[3] = &unk_100129E78;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  v8[7] = a4;
  sub_1000A6CC8(@"SELECT ROWID, channel_id, channel_topic, environment, token_name, checkpoint FROM channel WHERE channel_id = ? AND channel_topic = ? AND environment = ? AND token_name = ? ORDER BY ROWID ASC", v8);
}

uint64_t sub_100009B9C(uint64_t a1, uint64_t a2)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v3 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  CFIndex Count = CFArrayGetCount(v3);
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    for (CFIndex i = 0; i != v5; ++i)
    {
      CFArrayGetValueAtIndex(v3, i);
      CSDBRecordStoreRemoveRecord();
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  CSDBRecordSaveStore();
  return _CSDBRecordStoreInvalidateCachesWithStore(a2);
}

uint64_t sub_100009C7C(uint64_t a1)
{
  uint64_t v4 = 0;
  CFIndex v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100009D38;
  v3[3] = &unk_100129DB8;
  v3[4] = &v4;
  v3[5] = a1;
  sub_1000A6B08(v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100009D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100009D38(uint64_t a1)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_100009D7C(uint64_t a1)
{
  uint64_t v4 = 0;
  CFIndex v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100009E38;
  v3[3] = &unk_100129DB8;
  v3[4] = &v4;
  v3[5] = a1;
  sub_1000A6B78(v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100009E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100009E38(uint64_t a1)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

const void *sub_100009E7C(uint64_t a1, uint64_t a2)
{
  pthread_once(&stru_100159220, (void (*)(void))sub_10000A800);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 0;
  }
  uint64_t v4 = (const void *)Instance;
  *(void *)(Instance + 16) = 0;
  *(void *)(Instance + 24) = a2;
  *(_DWORD *)(Instance + 16) = 0;
  CFIndex v5 = (const void *)sub_100009D7C(a2);
  if (v5)
  {
    uint64_t v6 = v4;
  }
  else
  {
    CFIndex v5 = v4;
    uint64_t v6 = 0;
  }
  CFRelease(v5);
  return v6;
}

uint64_t sub_100009F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138413058;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = a2;
    *(_WORD *)&buf[22] = 2112;
    uint64_t v12 = a3;
    __int16 v13 = 2112;
    uint64_t v14 = a4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - APSChannelRecordCopyChannelForChannelIDAndPushTopic %@ %@ environment %@ tokenName %@", buf, 0x2Au);
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  uint64_t v12 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10000A080;
  v10[3] = &unk_100129EA0;
  v10[6] = a2;
  v10[7] = a3;
  v10[8] = a4;
  v10[4] = buf;
  v10[5] = a1;
  sub_1000A6CC8(@"SELECT ROWID, channel_id, channel_topic, environment, token_name, checkpoint FROM channel WHERE channel_id = ? AND channel_topic = ? AND environment = ? AND token_name = ? ORDER BY ROWID ASC", v10);
  uint64_t v8 = *(void *)(*(void *)&buf[8] + 24);
  _Block_object_dispose(buf, 8);
  return v8;
}

void sub_10000A068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000A080(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  CFIndex Count = CFArrayGetCount(v2);
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    for (CFIndex i = 0; i != v4; ++i)
    {
      CFArrayGetValueAtIndex(v2, i);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_100009E7C((uint64_t)kCFAllocatorDefault, ID);
    }
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

CFMutableArrayRef sub_10000A188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFAllocatorRef Default = CFAllocatorGetDefault();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(Default, 0, &kCFTypeArrayCallBacks);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10000A238;
  v9[3] = &unk_100129E78;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  v9[7] = Mutable;
  sub_1000A6CC8(@"SELECT ROWID, channel_id, channel_topic, environment, token_name, checkpoint FROM channel WHERE channel_topic = ? AND environment = ? AND token_name = ? ORDER BY ROWID ASC", v9);
  return Mutable;
}

void sub_10000A238(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFArrayGetValueAtIndex(v3, i);
        int ID = CSDBRecordGetID();
        uint64_t v8 = sub_100009E7C((uint64_t)kCFAllocatorDefault, ID);
        if (v8)
        {
          uint64_t v9 = v8;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v8);
          CFRelease(v9);
        }
      }
    }
    CFRelease(v3);
  }
}

CFMutableArrayRef sub_10000A344(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef Default = CFAllocatorGetDefault();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(Default, 0, &kCFTypeArrayCallBacks);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10000A3F0;
  v7[3] = &unk_100129EC0;
  v7[4] = a1;
  v7[5] = a2;
  v7[6] = Mutable;
  sub_1000A6CC8(@"SELECT ROWID, channel_id, channel_topic, environment, token_name, checkpoint FROM channel WHERE environment = ? AND token_name = ? ORDER BY ROWID ASC", v7);
  return Mutable;
}

void sub_10000A3F0(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFArrayGetValueAtIndex(v3, i);
        int ID = CSDBRecordGetID();
        uint64_t v8 = sub_100009E7C((uint64_t)kCFAllocatorDefault, ID);
        if (v8)
        {
          uint64_t v9 = v8;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), v8);
          CFRelease(v9);
        }
      }
    }
    CFRelease(v3);
  }
}

CFMutableArrayRef sub_10000A4F0()
{
  CFAllocatorRef Default = CFAllocatorGetDefault();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(Default, 0, &kCFTypeArrayCallBacks);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10000A588;
  v3[3] = &unk_100129EE0;
  v3[4] = Mutable;
  sub_1000A6CC8(@"select * from channel", v3);
  return Mutable;
}

void sub_10000A588(uint64_t a1)
{
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFArrayGetValueAtIndex(v3, i);
        int ID = CSDBRecordGetID();
        uint64_t v8 = sub_100009E7C((uint64_t)kCFAllocatorDefault, ID);
        if (v8)
        {
          uint64_t v9 = v8;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v8);
          CFRelease(v9);
        }
      }
    }
    CFRelease(v3);
  }
}

void sub_10000A66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10000A70C;
    v6[3] = &unk_100129F00;
    v6[4] = a1;
    v6[5] = a2;
    v6[6] = a3;
    v6[7] = a4;
    v6[8] = a5;
    v6[9] = a6;
    sub_1000A6A24(a1 + 16, v6);
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000C7898();
  }
}

void sub_10000A70C(uint64_t a1)
{
  uint64_t v2 = sub_100009D7C(*(void *)(*(void *)(a1 + 32) + 24));
  if (v2)
  {
    CFArrayRef v3 = (const void *)v2;
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 48) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 56)) {
      **(void **)(a1 + 56) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + 64) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 72)) {
      **(void **)(a1 + 72) = CSDBRecordCopyProperty();
    }
    CFRelease(v3);
  }
}

uint64_t sub_10000A800()
{
  uint64_t v0 = 0;
  qword_10015A7E0 = _CFRuntimeRegisterClass();
  uint64_t v1 = &off_100129F80;
  do
  {
    v1 += 5;
    uint64_t result = CSDBRecordIndexOfPropertyNamed();
    dword_10015A7E8[v0++] = result;
  }
  while (v0 != 5);
  return result;
}

uint64_t sub_10000A870(uint64_t result)
{
  *(void *)(result + 24) = -1;
  return result;
}

void sub_10000A87C(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(void *)(a1 + 24) = -1;
  os_unfair_lock_unlock(v2);
}

BOOL sub_10000A8C4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

uint64_t sub_10000A8D8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

CFStringRef sub_10000A8E0(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringRef v5 = CFStringCreateWithFormat(v3, 0, @"<APSChannelRecord %p [%p]>{}", a1, v4);
  os_unfair_lock_unlock(v2);
  return v5;
}

CFDataRef *sub_10000A958(CFDataRef *a1, const UInt8 *a2, CFIndex a3)
{
  *a1 = CFDataCreate(0, a2, a3);
  return a1;
}

CFDataRef sub_10000A988(UInt8 *bytes, CFIndex length)
{
  return CFDataCreate(0, bytes, length);
}

CFDataRef *sub_10000A998(CFDataRef *a1, uint64_t a2)
{
  *a1 = CFDataCreate(0, *(const UInt8 **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return a1;
}

CFStringRef *sub_10000A9D4(CFStringRef *a1, const UInt8 *a2)
{
  CFIndex v3 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v4 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v4 = v3;
  }
  *a1 = CFStringCreateWithBytes(0, a2, v4, 0x8000100u, 0);
  return a1;
}

CFStringRef sub_10000AA28(UInt8 *bytes, CFIndex numBytes)
{
  return CFStringCreateWithBytes(0, bytes, numBytes, 0x8000100u, 0);
}

CFStringRef *sub_10000AA44(CFStringRef *a1, char *__s)
{
  *a1 = 0;
  CFIndex v4 = strlen(__s);
  *a1 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  return a1;
}

CFNumberRef *sub_10000AA98(CFNumberRef *a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  *a1 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  return a1;
}

CFNumberRef sub_10000AADC(uint64_t a1)
{
  uint64_t valuePtr = a1;
  return CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
}

CFBooleanRef *sub_10000AB0C(CFBooleanRef *result, int a2)
{
  uint64_t v2 = &kCFBooleanTrue;
  if (!a2) {
    uint64_t v2 = &kCFBooleanFalse;
  }
  *uint64_t result = *v2;
  return result;
}

__CFDictionary **sub_10000AB30(__CFDictionary **a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFStringRef v5 = *(uint64_t ***)(a2 + 16);
  if (v5)
  {
    while (1)
    {
      int v6 = *((char *)v5 + 39);
      uint64_t v7 = v6 >= 0 ? (const UInt8 *)(v5 + 2) : (const UInt8 *)v5[2];
      CFIndex v8 = v6 >= 0 ? *((unsigned __int8 *)v5 + 39) : (CFIndex)v5[3];
      CFStringRef v9 = CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
      CFStringRef v12 = v9;
      if (!v9) {
        break;
      }
      uint64_t v10 = v5[5];
      if (!v10) {
        break;
      }
      CFDictionaryAddValue(Mutable, v9, v10);
      sub_10000B4E8((const void **)&v12);
      CFStringRef v5 = (uint64_t **)*v5;
      if (!v5) {
        goto LABEL_13;
      }
    }
    CFRelease(Mutable);
    sub_10000B4E8((const void **)&v12);
    CFMutableArrayRef Mutable = 0;
  }
LABEL_13:
  *a1 = Mutable;
  return a1;
}

void sub_10000AC0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

CFMutableArrayRef *sub_10000AC28(CFMutableArrayRef *a1, const void ***a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, a2[1] - *a2, &kCFTypeArrayCallBacks);
  for (CFIndex i = *a2; i != a2[1]; ++i)
  {
    if (!*i)
    {
      CFRelease(Mutable);
      CFMutableArrayRef Mutable = 0;
      break;
    }
    CFArrayAppendValue(Mutable, *i);
  }
  *a1 = Mutable;
  return a1;
}

void sub_10000ACB4(CFDataRef *a1, void *a2, uint64_t a3)
{
  CFDataRef v5 = *a1;
  if (!v5)
  {
    uint64_t v10 = "<<null>>";
    __int16 v11 = a2;
    uint64_t v12 = 8;
    goto LABEL_7;
  }
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 == CFDataGetTypeID())
  {
    BytePtr = CFDataGetBytePtr(*a1);
    CFIndex Length = CFDataGetLength(*a1);
    if (Length <= 0)
    {
      uint64_t valuePtr = 0;
      v32 = 0;
      uint64_t v33 = 0;
      sub_1000239E8(a2, (unint64_t *)&valuePtr);
      goto LABEL_23;
    }
    if (BytePtr)
    {
      uint64_t valuePtr = 0;
      v32 = 0;
      uint64_t v33 = 0;
      sub_10000BA44(&valuePtr, BytePtr, (uint64_t)&BytePtr[Length], Length);
      values[0] = valuePtr;
      v30 = v32;
      sub_10002344C(a2, (unint64_t *)values, (unint64_t *)&v30, a3);
LABEL_23:
      __int16 v15 = valuePtr;
      if (!valuePtr) {
        return;
      }
      v32 = valuePtr;
      goto LABEL_36;
    }
    uint64_t v10 = "<<invalid data>>";
    __int16 v11 = a2;
    uint64_t v12 = 16;
    goto LABEL_7;
  }
  if (v7 != CFStringGetTypeID())
  {
    if (v7 == CFNumberGetTypeID())
    {
      uint64_t valuePtr = 0;
      if (CFNumberGetValue(*a1, kCFNumberSInt64Type, &valuePtr))
      {
        std::ostream::operator<<();
        return;
      }
      __int16 v21 = "<<invalid number>>";
      uint64_t v22 = a2;
      uint64_t v23 = 18;
      goto LABEL_61;
    }
    if (v7 == CFBooleanGetTypeID())
    {
      int Value = CFBooleanGetValue(*a1);
      if (Value) {
        uint64_t v10 = "true";
      }
      else {
        uint64_t v10 = "false";
      }
      if (Value) {
        uint64_t v12 = 4;
      }
      else {
        uint64_t v12 = 5;
      }
      __int16 v11 = a2;
    }
    else
    {
      if (v7 == CFDictionaryGetTypeID())
      {
        sub_10000B534(a2, (uint64_t)"{ ", 2);
        CFIndex Count = CFDictionaryGetCount(*a1);
        values[0] = 0;
        sub_10000BAC0(&valuePtr, Count, values);
        v30 = 0;
        sub_10000BAC0(values, Count, &v30);
        CFDictionaryGetKeysAndValues(*a1, (const void **)valuePtr, (const void **)values[0]);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            uint64_t v19 = (void **)valuePtr[i];
            v30 = v19;
            if (v19) {
              CFRetain(v19);
            }
            sub_10000ACB4(&v30, a2, a3);
            sub_10000B4E8((const void **)&v30);
            sub_10000B534(a2, (uint64_t)": ", 2);
            uint64_t v20 = (void **)values[0][i];
            v30 = v20;
            if (v20) {
              CFRetain(v20);
            }
            sub_10000ACB4(&v30, a2, a3);
            sub_10000B4E8((const void **)&v30);
            if (Count - 1 > i) {
              sub_10000B534(a2, (uint64_t)", ", 2);
            }
          }
        }
        sub_10000B534(a2, (uint64_t)" }", 2);
        if (values[0])
        {
          values[1] = values[0];
          operator delete(values[0]);
        }
        goto LABEL_23;
      }
      if (v7 == CFArrayGetTypeID())
      {
        sub_10000B534(a2, (uint64_t)"[ ", 2);
        CFIndex v24 = CFArrayGetCount(*a1);
        CFIndex v25 = v24 - 1;
        if (v24 >= 1)
        {
          CFIndex v26 = v24;
          for (CFIndex j = 0; j != v26; ++j)
          {
            ValueAtIndex = (void **)CFArrayGetValueAtIndex(*a1, j);
            uint64_t valuePtr = ValueAtIndex;
            if (ValueAtIndex) {
              CFRetain(ValueAtIndex);
            }
            sub_10000ACB4(&valuePtr, a2, a3);
            sub_10000B4E8((const void **)&valuePtr);
            if (v25 > j) {
              sub_10000B534(a2, (uint64_t)", ", 2);
            }
          }
        }
        __int16 v21 = " ]";
        uint64_t v22 = a2;
        uint64_t v23 = 2;
LABEL_61:
        sub_10000B534(v22, (uint64_t)v21, v23);
        return;
      }
      sub_10000B534(a2, (uint64_t)"<<unknown type ", 15);
      __int16 v11 = (void *)std::ostream::operator<<();
      uint64_t v10 = ">>";
      uint64_t v12 = 2;
    }
LABEL_7:
    sub_10000B534(v11, (uint64_t)v10, v12);
    return;
  }
  uint64_t valuePtr = 0;
  v32 = 0;
  uint64_t v33 = 0;
  if (sub_10000B16C((CFStringRef *)a1, (uint64_t)&valuePtr))
  {
    if (v33 >= 0) {
      p_uint64_t valuePtr = &valuePtr;
    }
    else {
      p_uint64_t valuePtr = (void ***)valuePtr;
    }
    if (v33 >= 0) {
      uint64_t v14 = HIBYTE(v33);
    }
    else {
      uint64_t v14 = (uint64_t)v32;
    }
    sub_10000B534(a2, (uint64_t)p_valuePtr, v14);
  }
  else
  {
    sub_10000B534(a2, (uint64_t)"<<invalid string>>", 18);
  }
  if (SHIBYTE(v33) < 0)
  {
    __int16 v15 = valuePtr;
LABEL_36:
    operator delete(v15);
  }
}

void sub_10000B0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10000B16C(CFStringRef *a1, uint64_t a2)
{
  CFStringRef v3 = *a1;
  if (!v3) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 != CFStringGetTypeID()) {
    return 0;
  }
  CFStringRef v6 = *a1;
  unint64_t Length = CFStringGetLength(*a1);
  if (Length > 0x4000) {
    return 0;
  }
  CFIndex v10 = Length;
  CFIndex usedBufLen = 0;
  std::string::resize((std::string *)a2, 4 * Length, 0);
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = (UInt8 *)a2;
  }
  else {
    uint64_t v12 = *(UInt8 **)a2;
  }
  if (v11 >= 0) {
    CFIndex v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    CFIndex v13 = *(void *)(a2 + 8);
  }
  v16.location = 0;
  v16.length = v10;
  BOOL v14 = CFStringGetBytes(v6, v16, 0x8000100u, 0, 0, v12, v13, &usedBufLen) == v10;
  BOOL v8 = v14;
  if (v14) {
    std::string::resize((std::string *)a2, usedBufLen, 0);
  }
  return v8;
}

void *sub_10000B250(void *a1, CFDataRef *a2)
{
  return a1;
}

CFDataRef sub_10000B284(CFPropertyListRef *a1, CFTypeRef *a2)
{
  if (!*a1) {
    return 0;
  }
  CFDataRef result = CFPropertyListCreateData(0, *a1, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (result)
  {
    CFIndex v4 = result;
    CFStringRef v6 = result;
    CFRetain(result);
    if (&v6 != a2)
    {
      CFTypeID v5 = v4;
      if (*a2)
      {
        CFRelease(*a2);
        CFTypeID v5 = v6;
      }
      *a2 = v5;
      CFStringRef v6 = 0;
    }
    sub_10000B4E8(&v6);
    CFRelease(v4);
    return (CFDataRef)1;
  }
  return result;
}

void sub_10000B31C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B330(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t result = *a1;
  if (result)
  {
    CFTypeID v5 = CFGetTypeID((CFTypeRef)result);
    if (v5 == CFDataGetTypeID()
      && (CFDataRef v6 = (const __CFData *)*a1, CFDataGetLength(v6) >= 8)
      && *(void *)CFDataGetBytePtr(v6) == 0x30307473696C7062)
    {
      uint64_t result = (uint64_t)CFPropertyListCreateWithData(0, v6, 0, 0, 0);
      if (result)
      {
        CFTypeID v7 = (const void *)result;
        CFStringRef v9 = (const void *)result;
        CFRetain((CFTypeRef)result);
        if (&v9 != a2)
        {
          BOOL v8 = v7;
          if (*a2)
          {
            CFRelease(*a2);
            BOOL v8 = v9;
          }
          *a2 = v8;
          CFStringRef v9 = 0;
        }
        sub_10000B4E8(&v9);
        CFRelease(v7);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_10000B424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_10000B438@<X0>(CFPropertyListRef *a1@<X0>, void *a2@<X8>)
{
  CFDataRef theData = 0;
  if ((sub_10000B284(a1, (CFTypeRef *)&theData) & 1) == 0
    || ((CFDataRef v3 = theData, BytePtr = CFDataGetBytePtr(theData), Length = CFDataGetLength(v3), Length >= 1)
      ? (BOOL v6 = BytePtr == 0)
      : (BOOL v6 = 1),
        v6))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_10000BA44(a2, BytePtr, (uint64_t)&BytePtr[Length], Length);
  }
  return sub_10000B4E8((const void **)&theData);
}

void sub_10000B4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_10000B4E8(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void sub_10000B520(void *a1)
{
}

void *sub_10000B534(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v13)
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      CFIndex v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_10000B6D8(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_10000B670(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x10000B650);
}

void sub_10000B6C4(_Unwind_Exception *a1)
{
}

uint64_t sub_10000B6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_10000B860(__p, v12, __c);
      char v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_10000B844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10000B860(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_10000B90C();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_10000B90C()
{
}

void sub_10000B924(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10000B980(exception, a1);
}

void sub_10000B96C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10000B980(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_10000B9B4()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

char *sub_10000B9E8(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    sub_10000BA2C();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_10000BA2C()
{
}

void *sub_10000BA44(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10000B9E8(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10000BAA4(_Unwind_Exception *exception_object)
{
  CFDataRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10000BAC0(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10000BB44(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_10000BB28(_Unwind_Exception *exception_object)
{
  CFDataRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10000BB44(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10000BA2C();
  }
  uint64_t result = (char *)sub_10000BB88((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_10000BB88(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10000B9B4();
  }
  return operator new(8 * a2);
}

uint64_t sub_10000BC60()
{
  id v0 = [(id)objc_opt_class() _getMultiUserMode];
  qword_10015A808 = -[APSMultiUserMode initWithIsMultiUserMode:loggedInUser:]([APSMultiUserMode alloc], "initWithIsMultiUserMode:loggedInUser:", v0, [(id)objc_opt_class() _getIsCurrentlyLoggedIn]);
  return _objc_release_x1();
}

void *sub_10000BE08(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void *sub_10000BE14(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = 0;
  return result;
}

BOOL sub_10000BE20(void *a1, unsigned char *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 + 1 <= v2) {
    *a2 = *(unsigned char *)(*a1 + v3);
  }
  return v3 + 1 <= v2;
}

BOOL sub_10000BE48(uint64_t *a1, unsigned char *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 + 1;
  if (v3 + 1 <= v2)
  {
    uint64_t v5 = *a1;
    a1[2] = v4;
    *a2 = *(unsigned char *)(v5 + v3);
  }
  return v4 <= v2;
}

BOOL sub_10000BE74(void *a1, _WORD *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 + 2;
  if (v3 + 2 <= v2)
  {
    *a2 = bswap32(*(unsigned __int16 *)(*a1 + v3)) >> 16;
    a1[2] = v4;
  }
  return v4 <= v2;
}

BOOL sub_10000BEA8(void *a1, _DWORD *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 + 4;
  if (v3 + 4 <= v2)
  {
    *a2 = bswap32(*(_DWORD *)(*a1 + v3));
    a1[2] = v4;
  }
  return v4 <= v2;
}

BOOL sub_10000BED8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) + a2;
  if (v3 <= v2) {
    *(void *)(a1 + 16) = v3;
  }
  return v3 <= v2;
}

void sub_10000EFF4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

uint64_t sub_10000F014(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  sub_100022CBC((void *)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)a1 = off_10012A088;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return a1;
}

void sub_10000F0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1000C7BA0(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10000F0D0(void *a1)
{
  *a1 = off_10012A088;
  sub_10000F130((uint64_t)a1);
  sub_10000F650(a1 + 3);
  return sub_100022CE8(a1);
}

uint64_t sub_10000F130(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 16) + 4) -= (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  unint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
  return v2();
}

void sub_10000F1E8(void *a1)
{
  sub_10000F0D0(a1);
  operator delete();
}

unint64_t sub_10000F220(void *a1, unint64_t a2)
{
  if (a1[8] <= a2) {
    return 0;
  }
  else {
    return *(void *)(a1[4] + 8 * ((a1[7] + a2) / 0xAA)) + 24 * ((a1[7] + a2) % 0xAA);
  }
}

uint64_t sub_10000F268(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

double sub_10000F270(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_10000F278(a1 + 24, a2).u64[0];
  return result;
}

int64x2_t sub_10000F278(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_10000F7F8((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0xAA));
  unint64_t v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 == *v6) {
    uint64_t v8 = *(v6 - 1) + 4080;
  }
  *(void *)(v8 - 24) = 0;
  *(void *)(v8 - 16) = 0;
  int v9 = (void *)(v8 - 24);
  v9[2] = 0;
  sub_10000FE64(v9, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_10010E740);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

BOOL sub_10000F31C(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[8];
  if (v2)
  {
    unint64_t v3 = a1 + 3;
    sub_10000FEE0(a2, (__n128 *)(*(void *)(a1[4] + 8 * ((v2 + a1[7] - 1) / 0xAAuLL)) + 24 * ((v2 + a1[7] - 1) % 0xAAuLL)));
    sub_10000F394(v3);
  }
  return v2 != 0;
}

uint64_t sub_10000F394(void *a1)
{
  uint64_t v2 = a1[5] - 1;
  unint64_t v3 = v2 + a1[4];
  uint64_t v4 = *(void *)(a1[1] + 8 * (v3 / 0xAA));
  unint64_t v5 = v3 % 0xAA;
  uint64_t v6 = *(void **)(v4 + 24 * v5);
  if (v6)
  {
    *(void *)(v4 + 24 * v5 + 8) = v6;
    operator delete(v6);
    uint64_t v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return sub_10000FF34(a1, 1);
}

void sub_10000F424(void *a1)
{
  uint64_t v2 = (void **)a1[4];
  unint64_t v3 = (void **)a1[5];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 8;
    unint64_t v3 = (void **)a1[4];
  }
  else
  {
    uint64_t v4 = a1 + 8;
    unint64_t v5 = a1[7];
    uint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[8] + v5) / 0xAA] + 24 * ((a1[8] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        CFIndex v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + 8) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[4];
      unint64_t v3 = (void **)a1[5];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v13 = a1[5];
      uint64_t v2 = (void **)(a1[4] + 8);
      a1[4] = v2;
      unint64_t v12 = v13 - (void)v2;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 85;
  }
  else
  {
    if (v12 >> 3 != 2) {
      return;
    }
    uint64_t v14 = 170;
  }
  a1[7] = v14;
}

uint64_t sub_10000F54C(void *a1, uint64_t a2)
{
  sub_10000FFAC((uint64_t *)a2);
  unint64_t v4 = a1[7];
  uint64_t v5 = a1[4];
  uint64_t v6 = (char ***)(v5 + 8 * (v4 / 0xAA));
  if (a1[5] == v5)
  {
    unint64_t v7 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = a1[8];
    unint64_t v8 = a1 + 8;
    unint64_t v11 = (void *)(v5 + 8 * ((v13 + v4) / 0xAA));
  }
  else
  {
    unint64_t v7 = (char **)(*(void *)(v5 + 8 * (v4 / 0xAA)) + 24 * (v4 % 0xAA));
    uint64_t v9 = a1[8];
    unint64_t v8 = a1 + 8;
    unint64_t v10 = v9 + v4;
    unint64_t v11 = (void *)(v5 + 8 * (v10 / 0xAA));
    uint64_t v12 = *v11 + 24 * (v10 % 0xAA);
  }
  sub_10000F600((uint64_t *)a2, *(__n128 **)(a2 + 8), v6, v7, v11, v12);
  return *v8;
}

__n128 *sub_10000F600(uint64_t *a1, __n128 *a2, char ***a3, char **a4, void *a5, uint64_t a6)
{
  if ((char **)a6 == a4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 170 * ((char ***)a5 - a3) - 0x5555555555555555 * ((a6 - *a5) >> 3) + 0x5555555555555555 * (a4 - *a3);
  }
  return sub_100010004(a1, a2, a3, a4, (int)a5, a6, v6);
}

uint64_t sub_10000F650(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        unint64_t v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + 8) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 85;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 170;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v15 = *v2++;
    operator delete(v15);
  }
  return sub_10000F7A8((uint64_t)a1);
}

uint64_t sub_10000F7A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void sub_10000F7F8(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 170 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0xAA)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    unint64_t v8 = a1[3];
    unint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      v46 = a1 + 3;
      __p = sub_10000BB88(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFF0uLL);
      sub_10000FD4C(&__p, &v41);
      unint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              CFIndex v24 = (char *)sub_10000BB88((uint64_t)v46, v23);
              CFIndex v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 85;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF0uLL);
        sub_10000FC34(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFF0uLL);
      }
      sub_10000FB14((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 85;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 170;
    __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_10000FB14((uint64_t)a1, &__p);
  }
}

void sub_10000FAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10000FB14(uint64_t a1, void *a2)
{
  unint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    unint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_10000BB88(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v16 = *(uint64_t **)(a1 + 8);
      BOOL v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        BOOL v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      uint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        unint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_10000FC34(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_10000BB88(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      uint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        uint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)uint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      BOOL v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_10000FD4C(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      BOOL v17 = (char *)sub_10000BB88(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void *sub_10000FE64(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    int64x2_t result = sub_10000B9E8(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      int64x2_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10000FEC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10000FEE0(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_10000FF34(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 170 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA) {
    a2 = 1;
  }
  if (v5 < 0x154) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_10000FFAC(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

__n128 *sub_100010004(uint64_t *a1, __n128 *a2, char ***a3, char **a4, int a5, uint64_t a6, uint64_t a7)
{
  int v7 = a2;
  if (a7 >= 1)
  {
    uint64_t v13 = (uint64_t)(a1 + 2);
    uint64_t v12 = a1[2];
    unint64_t v14 = a1[1];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3)) >= a7)
    {
      uint64_t v27 = a3;
      uint64_t v28 = a4;
      sub_1000103D0(&v27, a7);
      uint64_t v24 = a1[1] - (void)v7;
      uint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 3);
      if (v25 >= a7
        || (uint64_t v27 = a3,
            uint64_t v28 = a4,
            sub_1000103D0(&v27, v25),
            a1[1] = (uint64_t)sub_10001046C(v13, v27, (uint64_t)v28, a5, a6, (void *)a1[1]),
            v24 >= 1))
      {
        sub_10001021C((uint64_t)a1, v7, v14, (uint64_t)v7 + 24 * a7);
        uint64_t v32 = v7;
        sub_10001061C(a3, a4, v27, v28, (char ***)&v32);
      }
    }
    else
    {
      uint64_t v15 = *a1;
      unint64_t v16 = a7 - 0x5555555555555555 * ((uint64_t)(v14 - *a1) >> 3);
      if (v16 > 0xAAAAAAAAAAAAAAALL) {
        sub_10000BA2C();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v15) >> 3);
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v15) >> 3);
      uint64_t v19 = 2 * v18;
      if (2 * v18 <= v16) {
        uint64_t v19 = v16;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v19;
      }
      v31 = a1 + 2;
      if (v20) {
        uint64_t v21 = (char ***)sub_100010844((uint64_t)(a1 + 2), v20);
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v27 = v21;
      uint64_t v28 = (char **)&v21[3 * v17];
      v29 = v28;
      uint64_t v30 = &v21[3 * v20];
      sub_100010280(&v27, a3, (uint64_t)a4, a7);
      int v7 = (__n128 *)sub_10001031C(a1, &v27, v7);
      sub_100010A40((uint64_t)&v27);
    }
  }
  return v7;
}

void sub_1000101FC(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

__n128 *sub_10001021C(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = (__n128 *)((char *)a2 + v6 - a4);
  size_t v8 = (__n128 *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    size_t v8 = *(__n128 **)(a1 + 8);
    do
    {
      v8->n128_u64[0] = 0;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      *size_t v8 = *v9;
      v8[1].n128_u64[0] = v9[1].n128_u64[0];
      v9->n128_u64[0] = 0;
      v9->n128_u64[1] = 0;
      v9[1].n128_u64[0] = 0;
      size_t v8 = (__n128 *)((char *)v8 + 24);
      uint64_t v9 = (__n128 *)((char *)v9 + 24);
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1000105BC(a2, v7, v6);
}

void *sub_100010280(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = result;
  unint64_t v5 = (void *)result[2];
  if (a4)
  {
    size_t v8 = &v5[3 * a4];
    uint64_t v9 = 24 * a4;
    do
    {
      void *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
      __n128 result = sub_10000FE64(v5, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
      a3 += 24;
      if (a3 - *a2 == 4080)
      {
        uint64_t v10 = a2[1];
        ++a2;
        a3 = v10;
      }
      v5 += 3;
      v9 -= 24;
    }
    while (v9);
    unint64_t v5 = v8;
  }
  v4[2] = v5;
  return result;
}

void sub_100010314(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10001031C(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_10001088C((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_100010930(v7, (uint64_t)a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *sub_1000103D0(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 169 - v3;
      uint64_t v6 = &v2[-(v5 / 0xAA)];
      *__n128 result = v6;
      unint64_t v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }
    else
    {
      *__n128 result = &v2[v3 / 0xAA];
      unint64_t v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }
    result[1] = v4;
  }
  return result;
}

void *sub_10001046C(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, void *a6)
{
  uint64_t v6 = a6;
  unint64_t v14 = a6;
  uint64_t v15 = a6;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 != a5)
  {
    uint64_t v8 = a3;
    do
    {
      *uint64_t v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      sub_10000FE64(v6, *(const void **)v8, *(void *)(v8 + 8), *(void *)(v8 + 8) - *(void *)v8);
      v8 += 24;
      if (v8 - *a2 == 4080)
      {
        uint64_t v10 = a2[1];
        ++a2;
        uint64_t v8 = v10;
      }
      uint64_t v6 = v15 + 3;
      v15 += 3;
    }
    while (v8 != a5);
  }
  char v13 = 1;
  sub_100010534((uint64_t)v12);
  return v6;
}

void sub_100010520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100010534(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10001056C(a1);
  }
  return a1;
}

void sub_10001056C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      unint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

__n128 *sub_1000105BC(__n128 *a1, __n128 *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v6 = (__n128 *)((char *)v6 - 24);
      a3 -= 24;
      sub_10000FEE0(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

char **sub_10001061C(char ***a1, char **a2, char ***a3, char **a4, char ***a5)
{
  uint64_t v7 = *a5;
  if (a1 == a3)
  {
    unint64_t v14 = &v17;
  }
  else
  {
    uint64_t v9 = a1 + 1;
    uint64_t v10 = *a1 + 510;
    for (CFIndex i = &v18; ; CFIndex i = &v19)
    {
      sub_1000106C8((int)i, a2, v10, v7);
      uint64_t v7 = v12;
      *a5 = v12;
      if (v9 == a3) {
        break;
      }
      char v13 = *v9++;
      a2 = v13;
      uint64_t v10 = v13 + 510;
    }
    a2 = *a3;
    unint64_t v14 = &v20;
  }
  __n128 result = sub_1000106C8((int)v14, a2, a4, v7);
  *a5 = v16;
  return result;
}

char **sub_1000106C8(int a1, char **a2, char **a3, char **a4)
{
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4) {
        sub_100010734(a4, *v5, v5[1], v5[1] - *v5);
      }
      v5 += 3;
      a4 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_100010734(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_10000BA2C();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    __n128 result = sub_10000B9E8(v7, v11);
    uint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  uint64_t v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      __n128 result = memmove(v9, __src, v16);
    }
    uint64_t v15 = &v9[v16];
    goto LABEL_20;
  }
  unint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v13);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    __n128 result = memmove(v9, v14, a3 - v14);
  }
  uint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void *sub_100010844(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_10000B9B4();
  }
  return operator new(24 * a2);
}

uint64_t sub_10001088C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1000109C0((uint64_t)v11);
  return v9;
}

void *sub_100010930(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v9 = a4;
  long long v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
      v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  sub_100010534((uint64_t)v6);
  return v4;
}

uint64_t sub_1000109C0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000109F8(a1);
  }
  return a1;
}

void sub_1000109F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_100010A40(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100010A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    unint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void sub_100010AD8()
{
}

void sub_100010B38(_Unwind_Exception *a1)
{
  sub_10000F0D0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100010B54(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void *a5)
{
  if (*(_DWORD *)(a1 + 184)) {
    return 0;
  }
  sub_10000BE14(v14, a2, a3);
  unint64_t v13 = 0;
  int v9 = sub_100010C90(v14, 8, &v13);
  if (v9 == 1) {
    return 0;
  }
  if (v9 == 2)
  {
    sub_100014374(&__str, "invalid frame size");
    sub_100010CF4(a1, 8, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v10 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_11:
      operator delete(v10);
    }
  }
  else
  {
    if (v13 <= *(void *)(a1 + 168))
    {
      *a4 = v13;
      *a5 = v14[2];
      return 1;
    }
    sub_100014374(&__p, "frame is too large");
    sub_100010CF4(a1, 2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_11;
    }
  }
  return 0;
}

void sub_100010C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100010C80(uint64_t a1)
{
  return *(_DWORD *)(a1 + 184) != 0;
}

uint64_t sub_100010C90(uint64_t *a1, char a2, void *a3)
{
  unsigned __int8 v7 = 0;
  if (sub_10000BE48(a1, &v7)) {
    return sub_100012404(a1, v7, a2, a3);
  }
  else {
    return 1;
  }
}

uint64_t sub_100010CF4(uint64_t result, int a2, std::string *__str)
{
  if (!*(_DWORD *)(result + 184))
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 184) = a2;
    uint64_t v4 = result + 192;
    std::string::operator=((std::string *)(result + 192), __str);
    if (qword_10015AD50)
    {
      return sub_10001324C((uint64_t)&unk_10015AD38, v3, *(void *)(v3 + 216));
    }
    else
    {
      unint64_t v5 = sub_10000B534(&std::cerr, (uint64_t)"Decoder error: ", 15);
      int v6 = *(char *)(v3 + 215);
      if (v6 >= 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = *(void *)(v3 + 192);
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(v3 + 215);
      }
      else {
        uint64_t v8 = *(void *)(v3 + 200);
      }
      int v9 = sub_10000B534(v5, v7, v8);
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
      uint64_t v10 = std::locale::use_facet(&v11, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale(&v11);
      std::ostream::put();
      return std::ostream::flush();
    }
  }
  return result;
}

BOOL sub_100010E54(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(_DWORD *)(a1 + 184)) {
    return 0;
  }
  sub_10000BE14(&v30, a3, a4);
  unint64_t v9 = 0;
  while (1)
  {
    BOOL v4 = v31 == v32;
    if (v31 == v32) {
      break;
    }
    unsigned __int8 v29 = 0;
    if (!sub_100011128(a1, &v30, &v29)) {
      return v4;
    }
    std::string __p = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    if ((sub_1000111B4((void *)a1, &v30, v29, (uint64_t)&__p, 0) & 1) == 0) {
      goto LABEL_20;
    }
    if (v27 - (unsigned char *)__p == 1)
    {
      char v10 = *(unsigned char *)__p;
      v22[0] = off_10012A2C8;
      v22[1] = a2;
      char v23 = v10;
      unint64_t v24 = 0;
      if (sub_100011684(a1, &v30, v29, (uint64_t)v22, 0))
      {
        if (v24 <= *(void *)(a1 + 176))
        {
          v9 += v24 + 3;
          if (v9 <= *(void *)(a1 + 168))
          {
            int v13 = 0;
            goto LABEL_21;
          }
          sub_100014374(&v20, "unpacked frame is too large");
          sub_100010CF4(a1, 2, &v20);
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          {
            p_str = &v20;
LABEL_18:
            char v12 = (void *)p_str->__r_.__value_.__r.__words[0];
LABEL_19:
            operator delete(v12);
          }
        }
        else
        {
          sub_100014374(&__str, "unpacked attribute is too large");
          sub_100010CF4(a1, 1, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            p_str = &__str;
            goto LABEL_18;
          }
        }
      }
    }
    else
    {
      sub_100014374(&v25, "top-level key is longer than 1 byte");
      sub_100010CF4(a1, 3, &v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      {
        char v12 = (void *)v25.__r_.__value_.__r.__words[0];
        goto LABEL_19;
      }
    }
LABEL_20:
    int v13 = 1;
LABEL_21:
    if (__p)
    {
      uint64_t v27 = __p;
      operator delete(__p);
    }
    if (v13) {
      return v4;
    }
  }
  unint64_t v14 = v9 + 5;
  uint64_t v15 = 2;
  uint64_t v16 = 3;
  uint64_t v17 = 4;
  if (a4 >= 0x40FE) {
    uint64_t v17 = 5;
  }
  if (a4 >= 0x17E) {
    uint64_t v16 = v17;
  }
  if (a4 >= 0xFF) {
    uint64_t v15 = v16;
  }
  unint64_t v18 = v15 + a4;
  unint64_t v19 = *(void *)(a1 + 152) + v14;
  ++*(void *)(a1 + 144);
  *(void *)(a1 + 152) = v19;
  *(void *)(a1 + 160) += v18;
  ++qword_10015AD00;
  *(void *)algn_10015AD08 += v14;
  qword_10015AD10 += v18;
  return v4;
}

void sub_1000110C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100011128(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  BOOL v4 = sub_10000BE48(a2, a3);
  if (!v4)
  {
    sub_100014374(&__p, "read overflow while reading attribute metadata");
    sub_100010CF4(a1, 11, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return v4;
}

void sub_100011198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000111B4(void *a1, uint64_t *a2, unsigned int a3, uint64_t a4, int a5)
{
  int v8 = (a3 >> 4) & 3;
  if ((v8 - 2) < 2)
  {
    if (a5)
    {
      std::to_string(&v37, a3 & 0x1F);
      unint64_t v9 = std::string::insert(&v37, 0, "KEY[");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::locale v11 = std::string::append(&v38, "]");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      int64_t v45 = v11->__r_.__value_.__r.__words[2];
      long long v44 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (v45 >= 0) {
        int v13 = (char *)&v44;
      }
      else {
        int v13 = (char *)v44;
      }
      if (v45 >= 0) {
        uint64_t v14 = HIBYTE(v45);
      }
      else {
        uint64_t v14 = *((void *)&v44 + 1);
      }
      sub_1000146FC((char **)a4, *(char **)(a4 + 8), v13, &v13[v14], v14);
      if ((SHIBYTE(v45) & 0x80000000) == 0) {
        return 1;
      }
      uint64_t v15 = (void *)v44;
      goto LABEL_22;
    }
    unint64_t v18 = (char **)sub_10000F220(a1, a3 & 0x1F);
    if (v18)
    {
      if (v18 != (char **)a4) {
        sub_100010734((void *)a4, *v18, v18[1], v18[1] - *v18);
      }
      return 1;
    }
    sub_100014374(&v39, "key not found");
    sub_100010CF4((uint64_t)a1, 4, &v39);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v25 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_37:
      operator delete(v25);
    }
    return 0;
  }
  if (v8 == 1)
  {
    v38.__r_.__value_.__r.__words[0] = 0;
    if (sub_100012404(a2, a3, 4, &v38))
    {
      sub_100014374(&__str, "read overflow while reading key length");
      sub_100010CF4((uint64_t)a1, 11, &__str);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
      p_str = &__str;
    }
    else
    {
      std::string::size_type v19 = v38.__r_.__value_.__r.__words[0] + 1;
      if (sub_1000189E4(v38.__r_.__value_.__r.__words[0] + 1))
      {
        uint64_t v20 = a2[2];
        if (a2[1] - v20 >= v19)
        {
          if (a5)
          {
            uint64_t v33 = (const void *)(*a2 + v20);
            int64_t v45 = 0;
            long long v44 = 0uLL;
            sub_10000BA44(&v44, v33, (uint64_t)v33 + v19, v19);
            sub_1000121F4((char **)a4, (char **)&v44);
            if ((void)v44)
            {
              *((void *)&v44 + 1) = v44;
              operator delete((void *)v44);
            }
          }
          else
          {
            sub_100014974(a4, *(char **)(a4 + 8), (char *)(*a2 + v20), (char *)(*a2 + v20 + v19), v19);
            if ((sub_1000124C4((uint64_t)a1, a4) & 1) == 0)
            {
              sub_100014374(&v40, "key indexing failed");
              sub_100010CF4((uint64_t)a1, 5, &v40);
              if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return 0;
              }
              p_str = &v40;
              goto LABEL_36;
            }
          }
          sub_10000BED8((uint64_t)a2, v19);
          return 1;
        }
        sub_100014374(&v41, "read overflow while reading key");
        sub_100010CF4((uint64_t)a1, 11, &v41);
        if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        p_str = &v41;
      }
      else
      {
        sub_100014374(&v42, "key length is invalid");
        sub_100010CF4((uint64_t)a1, 3, &v42);
        if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        p_str = &v42;
      }
    }
LABEL_36:
    std::string v25 = (void *)p_str->__r_.__value_.__r.__words[0];
    goto LABEL_37;
  }
  if (!a5)
  {
    char v21 = a3 & 0xF;
    char v23 = *(char **)(a4 + 8);
    unint64_t v22 = *(void *)(a4 + 16);
    if ((unint64_t)v23 >= v22)
    {
      uint64_t v27 = *(char **)a4;
      uint64_t v28 = &v23[-*(void *)a4];
      unint64_t v29 = (unint64_t)(v28 + 1);
      if ((uint64_t)(v28 + 1) < 0) {
        sub_10000BA2C();
      }
      unint64_t v30 = v22 - (void)v27;
      if (2 * v30 > v29) {
        unint64_t v29 = 2 * v30;
      }
      if (v30 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v31 = v29;
      }
      if (v31) {
        uint64_t v32 = (char *)operator new(v31);
      }
      else {
        uint64_t v32 = 0;
      }
      v34 = &v32[v31];
      v28[(void)v32] = v21;
      uint64_t v24 = (uint64_t)&v28[(void)v32 + 1];
      if (v23 == v27)
      {
        uint64_t v32 = &v28[(void)v32];
      }
      else
      {
        uint64_t v35 = &v23[~(unint64_t)v27];
        do
        {
          char v36 = *--v23;
          (v35--)[(void)v32] = v36;
        }
        while (v23 != v27);
        char v23 = *(char **)a4;
      }
      *(void *)a4 = v32;
      *(void *)(a4 + 8) = v24;
      *(void *)(a4 + 16) = v34;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *char v23 = v21;
      uint64_t v24 = (uint64_t)(v23 + 1);
    }
    *(void *)(a4 + 8) = v24;
    return 1;
  }
  v38.__r_.__value_.__s.__data_[0] = a3 & 0xF;
  sub_1000148F4(&v44, 1uLL, &v38);
  sub_1000121F4((char **)a4, (char **)&v44);
  uint64_t v15 = (void *)v44;
  if ((void)v44)
  {
    *((void *)&v44 + 1) = v44;
LABEL_22:
    operator delete(v15);
  }
  return 1;
}

void sub_1000115C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100011684(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  int v5 = a5;
  switch(a3 >> 6)
  {
    case 1u:
      uint64_t v13 = *a2;
      uint64_t v14 = a2[2];
      uint64_t result = sub_100012568(a1, a2, a4, a5);
      if (result)
      {
        if (v5) {
          return 1;
        }
        uint64_t v16 = *a2 + a2[2];
        long long v28 = 0uLL;
        std::string::size_type v29 = 0;
        sub_10000BA44(&v28, (const void *)(v13 + v14), v16, v16 - (v13 + v14));
        char v17 = sub_1000124C4(a1 + 72, (uint64_t)&v28);
        if ((void)v28)
        {
          *((void *)&v28 + 1) = v28;
          operator delete((void *)v28);
        }
        if (v17) {
          return 1;
        }
        sub_100014374(&__str, "value indexing failed");
        sub_100010CF4(a1, 10, &__str);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        unint64_t v18 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_24;
      }
      return result;
    case 2u:
      unint64_t v26 = 0;
      if (sub_100010C90(a2, 8, &v26) || v26 >> 24)
      {
        sub_100014374(&__p, "value index is invalid");
        sub_100010CF4(a1, 6, &__p);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        unint64_t v18 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_24;
      }
      if (v5)
      {
        std::to_string(&v21, v26);
        unint64_t v9 = std::string::insert(&v21, 0, "VALUE[");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::locale v11 = std::string::append(&v22, "]");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        std::string::size_type v29 = v11->__r_.__value_.__r.__words[2];
        long long v28 = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        (*(void (**)(uint64_t, long long *))(*(void *)a4 + 24))(a4, &v28);
        if (SHIBYTE(v29) < 0) {
          operator delete((void *)v28);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
        return 1;
      }
      std::string::size_type v19 = (uint64_t *)sub_10000F220((void *)(a1 + 72), v26);
      if (v19)
      {
        sub_10000BE14(&v28, *v19, v19[1] - *v19);
        if (!sub_100012568(a1, (uint64_t *)&v28, a4, 0)) {
          return 0;
        }
        if (*((void *)&v28 + 1) == v29) {
          return 1;
        }
        sub_100014374(&v23, "indexed value has leftover bytes");
        sub_100010CF4(a1, 8, &v23);
        if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        unint64_t v18 = (void *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        sub_100014374(&v24, "value not found");
        sub_100010CF4(a1, 7, &v24);
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        unint64_t v18 = (void *)v24.__r_.__value_.__r.__words[0];
      }
      goto LABEL_24;
    case 3u:
      sub_100014374(&v20, "value metadata cannot be 11");
      sub_100010CF4(a1, 12, &v20);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v18 = (void *)v20.__r_.__value_.__r.__words[0];
LABEL_24:
        operator delete(v18);
      }
      return 0;
    default:
      return (sub_100012568(a1, a2, a4, a5) & 1) != 0;
  }
}

void sub_1000119A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100011A7C(unint64_t a1)
{
  if (a1 < 0x40FE) {
    int v1 = 3;
  }
  else {
    int v1 = 4;
  }
  if (a1 >= 0x17E) {
    unsigned int v2 = v1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (a1 >= 0xFF) {
    return v2;
  }
  else {
    return 1;
  }
}

void sub_100011AA8()
{
}

void sub_100011DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::locale::~locale((std::locale *)(v4 - 72));
  sub_1000120D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100011E28()
{
}

void sub_10001206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

void *sub_1000120D0(uint64_t a1)
{
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  sub_10000F0D0((void *)(a1 + 72));
  return sub_10000F0D0((void *)a1);
}

uint64_t sub_10001211C(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v12 = 0;
  BOOL v10 = sub_100011128((uint64_t)a1, a2, &v12);
  uint64_t result = 0;
  if (v10)
  {
    uint64_t result = sub_1000111B4(a1, a2, v12, a3, a5);
    if (result) {
      return sub_100011684((uint64_t)a1, a2, v12, a4, a5);
    }
  }
  return result;
}

uint64_t sub_1000121B0(uint64_t a1)
{
  *(void *)a1 = off_10012A330;
  sub_10000B4E8((const void **)(a1 + 8));
  return a1;
}

char *sub_1000121F4(char **a1, char **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
LABEL_8:
    BOOL v10 = a1[1];
    return sub_100014110((uint64_t)a1, v10, v3, v4, v5);
  }
  else
  {
    if (v5 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v4 - *a2;
    }
    int v8 = *a2;
    while (1)
    {
      int v9 = *v8++;
      if ((v9 - 126) < 0xFFFFFFAA) {
        break;
      }
      if (!--v7) {
        goto LABEL_8;
      }
    }
    sub_100013E74((uint64_t)v18);
    unint64_t v12 = (unint64_t)a2[1];
    __p[0] = *a2;
    unint64_t v17 = v12;
    sub_10002344C(v18, (unint64_t *)__p, &v17, 64);
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v13 = (char *)__p;
    }
    else {
      uint64_t v13 = (char *)__p[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v14 = v16;
    }
    else {
      uint64_t v14 = (uint64_t)__p[1];
    }
    sub_1000146FC(a1, a1[1], v13, &v13[v14], v14);
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (char *)std::ios::~ios();
  }
}

void sub_1000123D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10001400C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100012404(uint64_t *a1, int a2, char a3, void *a4)
{
  uint64_t v5 = 0xFFu >> (8 - a3);
  uint64_t v6 = v5 & a2;
  if (v5 == v6)
  {
    uint64_t v8 = 0;
    unsigned int v9 = -7;
    while (1)
    {
      char v11 = 0;
      if (!sub_10000BE48(a1, &v11)) {
        return 1;
      }
      v8 |= (v11 & 0x7F) << (v9 + 7);
      if ((v11 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      if (v9 >= 0x39) {
        return 2;
      }
    }
    uint64_t result = 0;
    uint64_t v6 = v8 + v5;
  }
  else
  {
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

uint64_t sub_1000124C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a1, a2);
  if (v4)
  {
    ++*(_DWORD *)(*(void *)(a1 + 16) + 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2);
  }
  return v4;
}

uint64_t sub_100012568(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v60 = 0;
  if (sub_10000BE20(a2, &v60))
  {
    switch(v60 >> 6)
    {
      case 1:
        std::string v41 = 0;
        if ((v60 & 0x20) != 0)
        {
          std::to_string((std::string *)v43, v60);
          unsigned __int8 v16 = std::string::insert((std::string *)v43, 0, "invalid value prefix ");
          long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v54.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v17;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          sub_100010CF4(a1, 12, &v54);
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_79;
          }
          unint64_t v18 = (void *)v54.__r_.__value_.__r.__words[0];
          goto LABEL_78;
        }
        if (sub_100010C90(a2, 5, &v41))
        {
          sub_100014374(&v53, "invalid string length");
          sub_100010CF4(a1, 8, &v53);
          if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return 0;
          }
          unsigned int v9 = (void *)v53.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string v21 = v41;
          if ((unint64_t)v41 <= *(void *)(a1 + 176))
          {
            uint64_t v31 = a2[2];
            if (a2[1] - v31 >= (unint64_t)v41)
            {
              sub_100014B60(v43, (char *)(*a2 + v31), (char *)v41 + *a2 + v31, (unint64_t)v41);
              char v33 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a3 + 24))(a3, v43);
              if ((v43[23] & 0x80000000) != 0) {
                operator delete(*(void **)v43);
              }
              if (v33) {
                goto LABEL_101;
              }
              sub_100014374(&v50, "invalid string value");
              sub_100010CF4(a1, 8, &v50);
              if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return 0;
              }
              unsigned int v9 = (void *)v50.__r_.__value_.__r.__words[0];
            }
            else
            {
              sub_100014374(&v51, "read overflow while reading string");
              sub_100010CF4(a1, 11, &v51);
              if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return 0;
              }
              unsigned int v9 = (void *)v51.__r_.__value_.__r.__words[0];
            }
          }
          else
          {
            sub_100014374(&v52, "string is too large");
            sub_100010CF4(a1, 9, &v52);
            if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              return 0;
            }
            unsigned int v9 = (void *)v52.__r_.__value_.__r.__words[0];
          }
        }
        goto LABEL_8;
      case 2:
        sub_10000BED8((uint64_t)a2, 1);
        unsigned __int8 v12 = v60;
        if ((v60 & 0x20) == 0)
        {
          uint64_t v13 = v60 & 0x1F;
          goto LABEL_17;
        }
        if ((v60 & 0x30) != 0x20)
        {
          std::to_string((std::string *)v43, v60);
          unint64_t v26 = std::string::insert((std::string *)v43, 0, "invalid value prefix ");
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          sub_100010CF4(a1, 12, &v48);
          if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_79;
          }
          unint64_t v18 = (void *)v48.__r_.__value_.__r.__words[0];
LABEL_78:
          operator delete(v18);
          goto LABEL_79;
        }
        unint64_t v19 = 0;
        int v20 = (v60 & 7) + 2;
        while (1)
        {
          v43[0] = 0;
          if (!sub_10000BE48(a2, v43)) {
            break;
          }
          unint64_t v19 = v43[0] | (v19 << 8);
          if (--v20 <= 1)
          {
            if ((v12 & 8) != 0) {
              uint64_t v13 = -(uint64_t)v19;
            }
            else {
              uint64_t v13 = v19;
            }
LABEL_17:
            if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v13)) {
              goto LABEL_18;
            }
            sub_100014374(&v47, "invalid number value");
            sub_100010CF4(a1, 8, &v47);
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            {
              unsigned int v9 = (void *)v47.__r_.__value_.__r.__words[0];
              goto LABEL_8;
            }
            return 0;
          }
        }
        sub_100014374(&v49, "read overflow while reading integer");
        sub_100010CF4(a1, 11, &v49);
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        unsigned int v9 = (void *)v49.__r_.__value_.__r.__words[0];
        goto LABEL_8;
      case 3:
        if ((v60 & 0xF0) == 0xD0)
        {
          __p.__r_.__value_.__r.__words[0] = 0;
          if (!sub_100010C90(a2, 4, &__p))
          {
            std::string::size_type v22 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0] < 0x401)
            {
              memset(v43, 0, 24);
              sub_100013164((uint64_t *)v43, __p.__r_.__value_.__r.__words[0]);
              if (v22)
              {
                while (1)
                {
                  std::string v41 = off_10012A330;
                  cf[0] = 0;
                  if ((sub_100012568(a1, a2, &v41, a4) & 1) == 0) {
                    break;
                  }
                  uint64_t v23 = *(void *)&v43[8];
                  if (*(void *)&v43[8] >= *(void *)&v43[16])
                  {
                    uint64_t v25 = sub_100015A94((uint64_t *)v43, cf);
                  }
                  else
                  {
                    CFTypeRef v24 = cf[0];
                    **(void **)&v43[8] = cf[0];
                    if (v24) {
                      CFRetain(v24);
                    }
                    uint64_t v25 = v23 + 8;
                  }
                  *(void *)&v43[8] = v25;
                  std::string v41 = off_10012A330;
                  sub_10000B4E8(cf);
                  if (!--v22) {
                    goto LABEL_54;
                  }
                }
                std::string v41 = off_10012A330;
                sub_10000B4E8(cf);
              }
              else
              {
LABEL_54:
                if ((*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a3 + 56))(a3, v43))
                {
                  std::string v41 = v43;
                  sub_1000158AC((void ***)&v41);
                  goto LABEL_18;
                }
                sub_100014374(&v35, "invalid array");
                sub_100010CF4(a1, 8, &v35);
                if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v35.__r_.__value_.__l.__data_);
                }
              }
              std::string v41 = v43;
              sub_1000158AC((void ***)&v41);
              return 0;
            }
          }
          sub_100014374(&v36, "invalid array size");
          sub_100010CF4(a1, 8, &v36);
          if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return 0;
          }
          unsigned int v9 = (void *)v36.__r_.__value_.__r.__words[0];
          goto LABEL_8;
        }
        if ((v60 & 0xF0) != 0xC0)
        {
          if (v60 == 225)
          {
            uint64_t v10 = 1;
            sub_10000BED8((uint64_t)a2, 1);
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, 1);
            return v10;
          }
          if (v60 == 224)
          {
            uint64_t v10 = 1;
            sub_10000BED8((uint64_t)a2, 1);
            (*(void (**)(uint64_t, void))(*(void *)a3 + 40))(a3, 0);
            return v10;
          }
          std::to_string((std::string *)v43, v60);
          std::string::size_type v29 = std::string::insert((std::string *)v43, 0, "invalid value prefix ");
          long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          v34.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          sub_100010CF4(a1, 12, &v34);
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          {
            unint64_t v18 = (void *)v34.__r_.__value_.__r.__words[0];
            goto LABEL_78;
          }
LABEL_79:
          if ((v43[23] & 0x80000000) != 0)
          {
            unsigned int v9 = *(void **)v43;
            goto LABEL_8;
          }
          return 0;
        }
        unint64_t v46 = 0;
        if (!sub_100010C90(a2, 4, &v46))
        {
          unint64_t v14 = v46;
          if (v46 < 0x401)
          {
            memset(v43, 0, sizeof(v43));
            int v44 = 1065353216;
            sub_100014CD8((uint64_t)v43, (unint64_t)(float)v46);
            if (v14)
            {
              while (1)
              {
                std::string v41 = 0;
                cf[0] = 0;
                cf[1] = 0;
                std::string v39 = off_10012A330;
                std::string v40 = 0;
                if ((sub_10001211C(a1, a2, &v41, &v39, a4) & 1) == 0) {
                  break;
                }
                memset(&__p, 0, sizeof(__p));
                sub_100014428(&__p, (uint64_t)&__p, (std::string::value_type *)v41, (std::string::value_type *)cf[0], (char *)cf[0] - (char *)v41);
                p_p = &__p;
                uint64_t v15 = sub_100014F24((uint64_t)v43, (unsigned __int8 *)&__p, (uint64_t)&unk_10010E887, (long long **)&p_p);
                sub_100013114((CFTypeRef *)v15 + 5, &v40);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                std::string v39 = off_10012A330;
                sub_10000B4E8(&v40);
                if (v41)
                {
                  cf[0] = v41;
                  operator delete(v41);
                }
                if (!--v14) {
                  goto LABEL_30;
                }
              }
              std::string v39 = off_10012A330;
              sub_10000B4E8(&v40);
              uint64_t v32 = v41;
              if (!v41) {
                goto LABEL_97;
              }
              cf[0] = v41;
            }
            else
            {
LABEL_30:
              if ((*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a3 + 48))(a3, v43))
              {
                sub_100014C08((uint64_t)v43);
                goto LABEL_18;
              }
              sub_100014374(&v37, "invalid dictionary");
              sub_100010CF4(a1, 8, &v37);
              if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_97;
              }
              uint64_t v32 = (void *)v37.__r_.__value_.__r.__words[0];
            }
            operator delete(v32);
LABEL_97:
            sub_100014C08((uint64_t)v43);
            return 0;
          }
        }
        sub_100014374(&v45, "invalid dictionary size");
        sub_100010CF4(a1, 8, &v45);
        if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        unsigned int v9 = (void *)v45.__r_.__value_.__r.__words[0];
        goto LABEL_8;
      default:
        *(void *)v43 = 0;
        if (sub_100010C90(a2, 6, v43))
        {
          sub_100014374(&__str, "invalid byte array length");
          sub_100010CF4(a1, 8, &__str);
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return 0;
          }
          p_str = &__str;
LABEL_87:
          unsigned int v9 = (void *)p_str->__r_.__value_.__r.__words[0];
          goto LABEL_8;
        }
        std::string v21 = *(void **)v43;
        if (*(void *)v43 > *(void *)(a1 + 176))
        {
          sub_100014374(&v57, "byte array is too large");
          sub_100010CF4(a1, 9, &v57);
          if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return 0;
          }
          p_str = &v57;
          goto LABEL_87;
        }
        uint64_t v28 = a2[2];
        if ((unint64_t)(a2[1] - v28) < *(void *)v43)
        {
          sub_100014374(&v56, "read overflow while reading byte array");
          sub_100010CF4(a1, 11, &v56);
          if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return 0;
          }
          p_str = &v56;
          goto LABEL_87;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 16))(a3, *a2 + v28, *(void *)v43) & 1) == 0)
        {
          sub_100014374(&v55, "invalid byte array value");
          sub_100010CF4(a1, 8, &v55);
          if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return 0;
          }
          p_str = &v55;
          goto LABEL_87;
        }
LABEL_101:
        sub_10000BED8((uint64_t)a2, (uint64_t)v21);
LABEL_18:
        uint64_t v10 = 1;
        break;
    }
  }
  else
  {
    sub_100014374(&v59, "read overflow while reading value's first byte");
    sub_100010CF4(a1, 11, &v59);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    {
      unsigned int v9 = (void *)v59.__r_.__value_.__r.__words[0];
LABEL_8:
      operator delete(v9);
    }
    return 0;
  }
  return v10;
}

void sub_100012EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

CFTypeRef *sub_100013114(CFTypeRef *a1, CFTypeRef *a2)
{
  if (a2 != a1)
  {
    if (*a2) {
      CFRetain(*a2);
    }
    if (*a1) {
      CFRelease(*a1);
    }
    *a1 = *a2;
  }
  return a1;
}

uint64_t sub_100013164(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_10000BA2C();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10000BB88(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 8 * v6;
    sub_100015930(a1, v7);
    return sub_100015A44((uint64_t)v7);
  }
  return result;
}

void sub_1000131E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100015A44((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_1000131F8(uint64_t a1)
{
  sub_10000F130(a1);
  sub_10000F130(a1 + 72);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  return std::string::assign((std::string *)(a1 + 192), "");
}

uint64_t sub_10001324C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100015B80();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t sub_1000132A0(uint64_t a1)
{
  return a1 + 192;
}

uint64_t sub_1000132A8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184);
}

void *sub_1000132B0(uint64_t a1)
{
  return sub_1000132C0(qword_10015AD38, a1);
}

void *sub_1000132C0(void *a1, uint64_t a2)
{
  sub_100015C08((uint64_t)v4, a2);
  sub_100015CA0(v4, a1);
  sub_1000142F0(v4);
  return a1;
}

uint64_t sub_100013334(uint64_t result, uint64_t a2)
{
  *(void *)(result + 216) = a2;
  return result;
}

uint64_t sub_100013340(uint64_t a1)
{
  return a1 + 72;
}

uint64_t sub_100013348(uint64_t a1)
{
  return a1 + 144;
}

uint64_t *sub_100013350()
{
  return &qword_10015AD00;
}

void *sub_10001335C()
{
  return &unk_10015AD18;
}

void *sub_100013368()
{
  return &unk_10015AD28;
}

void sub_10001337C()
{
}

void sub_100013440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1000C7BA0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001345C(void *a1)
{
  sub_10000F0D0(a1);
  operator delete();
}

void sub_100013498()
{
  nullsub_2();
  operator delete();
}

uint64_t sub_1000134D0(uint64_t a1, void *a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if ((unint64_t)(*(uint64_t (**)(void *))(*a2 + 16))(a2) < 0x20) {
    return 1;
  }
  uint64_t v3 = sub_100013580(a2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_10001355C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100013580(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  if (v4)
  {
    uint64_t v5 = a1[1];
    --*(_DWORD *)(a1[2] + 4);
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v5 + 24))(v5, a1, a2);
  }
  return v4;
}

void sub_100013618()
{
}

void sub_1000136E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1000C7BA0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100013704(void *a1)
{
  sub_10000F0D0(a1);
  operator delete();
}

void sub_100013740()
{
  nullsub_2();
  operator delete();
}

uint64_t sub_100013778(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = a3[1] - *a3 + 32;
  if (v3 > *(void *)(a1 + 16)) {
    return 0;
  }
  while (1)
  {
    unint64_t v6 = *(void *)(a1 + 8) + v3;
    if (v6 <= *(void *)(a1 + 16)) {
      break;
    }
    std::string __p = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    char v7 = sub_100013580((void *)a2, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v10 = __p;
      operator delete(__p);
    }
    if ((v7 & 1) == 0) {
      return 0;
    }
  }
  *(void *)(a1 + 8) = v6;
  **(_DWORD **)(a2 + 16) += v3;
  return 1;
}

void sub_100013820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001383C(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[1] - *a3 + 32;
  **(_DWORD **)(a2 + 16) -= v3;
  *(void *)(result + 8) -= v3;
  return result;
}

uint64_t sub_100013868(uint64_t result, uint64_t a2)
{
  **(_DWORD **)(a2 + 16) -= *(_DWORD *)(result + 8);
  *(void *)(result + 8) = 0;
  return result;
}

void sub_100013884()
{
}

uint64_t sub_100013898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = a3;
  return 1;
}

uint64_t sub_1000138F8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), a2);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  *(void *)(a1 + 24) = v4;
  return 1;
}

uint64_t sub_100013968(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 8;
  return 1;
}

uint64_t sub_1000139C4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 8;
  return 1;
}

CFDataRef sub_100013A20(uint64_t a1, uint64_t a2)
{
  sub_10000AC24(&v9, a2);
  if (v9)
  {
    CFDataRef theData = 0;
    CFDataRef v3 = sub_10000B284((CFPropertyListRef *)&v9, (CFTypeRef *)&theData);
    if (v3)
    {
      CFDataRef v4 = theData;
      BytePtr = CFDataGetBytePtr(theData);
      CFIndex Length = CFDataGetLength(v4);
      *(void *)(a1 + 24) = Length;
      (*(void (**)(void, void, const UInt8 *, CFIndex))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), BytePtr, Length);
    }
    sub_10000B4E8((const void **)&theData);
  }
  else
  {
    CFDataRef v3 = 0;
  }
  sub_10000B4E8((const void **)&v9);
  return v3;
}

void sub_100013AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_100013B08()
{
  return 0;
}

void sub_100013B10(uint64_t a1)
{
  *(void *)a1 = off_10012A330;
  sub_10000B4E8((const void **)(a1 + 8));
  operator delete();
}

BOOL sub_100013B74(uint64_t a1, const UInt8 *a2, CFIndex a3)
{
  sub_10000A958((CFDataRef *)&v6, a2, a3);
  CFDataRef v4 = (CFTypeRef *)(a1 + 8);
  if (&v6 != v4)
  {
    if (*v4) {
      CFRelease(*v4);
    }
    *CFDataRef v4 = v6;
    unint64_t v6 = 0;
  }
  sub_10000B4E8(&v6);
  return *v4 != 0;
}

void sub_100013BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_100013BF4(uint64_t a1, const UInt8 *a2)
{
  sub_10000A9D4((CFStringRef *)&v5, a2);
  CFDataRef v3 = (CFTypeRef *)(a1 + 8);
  if (&v5 != v3)
  {
    if (*v3) {
      CFRelease(*v3);
    }
    *CFDataRef v3 = v5;
    uint64_t v5 = 0;
  }
  sub_10000B4E8(&v5);
  return *v3 != 0;
}

void sub_100013C60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_100013C74(uint64_t a1, uint64_t a2)
{
  sub_10000AA98((CFNumberRef *)&v5, a2);
  CFDataRef v3 = (CFTypeRef *)(a1 + 8);
  if (&v5 != v3)
  {
    if (*v3) {
      CFRelease(*v3);
    }
    *CFDataRef v3 = v5;
    uint64_t v5 = 0;
  }
  sub_10000B4E8(&v5);
  return *v3 != 0;
}

void sub_100013CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_100013CF4(uint64_t a1, int a2)
{
  sub_10000AB0C((CFBooleanRef *)&v5, a2);
  CFDataRef v3 = (CFTypeRef *)(a1 + 8);
  if (&v5 != v3)
  {
    if (*v3) {
      CFRelease(*v3);
    }
    *CFDataRef v3 = v5;
    uint64_t v5 = 0;
  }
  sub_10000B4E8(&v5);
  return *v3 != 0;
}

void sub_100013D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_100013D74(uint64_t a1, uint64_t a2)
{
  sub_10000AC24(&v5, a2);
  CFDataRef v3 = (CFTypeRef *)(a1 + 8);
  if (&v5 != (__CFDictionary **)v3)
  {
    if (*v3) {
      CFRelease(*v3);
    }
    *CFDataRef v3 = v5;
    uint64_t v5 = 0;
  }
  sub_10000B4E8((const void **)&v5);
  return *v3 != 0;
}

void sub_100013DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_100013DF4(uint64_t a1, const void ***a2)
{
  sub_10000ACB0((CFMutableArrayRef *)&v5, a2);
  CFDataRef v3 = (CFTypeRef *)(a1 + 8);
  if (&v5 != v3)
  {
    if (*v3) {
      CFRelease(*v3);
    }
    *CFDataRef v3 = v5;
    uint64_t v5 = 0;
  }
  sub_10000B4E8(&v5);
  return *v3 != 0;
}

void sub_100013E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100013E74(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v2;
  CFDataRef v4 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v4, (void *)(a1 + 8));
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_100013FE4(_Unwind_Exception *a1)
{
}

uint64_t sub_10001400C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

char *sub_100014110(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  char v7 = __src;
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_10000BA2C();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      unsigned __int8 v16 = operator new(v15);
    }
    else {
      unsigned __int8 v16 = 0;
    }
    unint64_t v26 = &v13[(void)v16];
    long long v27 = &v13[(void)v16 + v6];
    uint64_t v28 = v26;
    do
    {
      char v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    long long v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      uint64_t v32 = v26;
    }
    else
    {
      uint64_t v31 = v5;
      uint64_t v32 = v26;
      do
      {
        char v33 = *--v31;
        *--uint64_t v32 = v33;
      }
      while (v31 != v30);
      uint64_t v10 = *(char **)(a1 + 8);
    }
    std::string v34 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v27, v5, v10 - v5);
    }
    std::string v35 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[v10 - v5];
    *(void *)(a1 + 16) = v34;
    if (v35) {
      operator delete(v35);
    }
    return v26;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    unint64_t v18 = &__src[a5];
    int v20 = *(char **)(a1 + 8);
LABEL_17:
    std::string v21 = &v5[v6];
    std::string::size_type v22 = &v20[-v6];
    uint64_t v23 = v20;
    if (&v20[-v6] < v10)
    {
      int64_t v24 = &v10[v6] - v20;
      uint64_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v5[v6], v5, v20 - v21);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
    return v5;
  }
  unint64_t v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  int v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void *sub_1000142F0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100014374(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10000B90C();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_100014428(std::string *this, uint64_t a2, std::string::value_type *a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  uint64_t v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  std::string::size_type v7 = a2 - (void)this;
  if (!__n_add) {
    return (uint64_t)v6 + v7;
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  uint64_t v9 = this;
LABEL_6:
  if (v9 <= (std::string *)a3 && (char *)&v9->__r_.__value_.__l.__data_ + size + 1 > a3)
  {
    sub_100014674(&__p, a3, a4);
    std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = sub_100014558(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v12;
  }
  return sub_100014558(this, __n_add, v7, a3, a4);
}

void sub_10001453C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100014558(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  uint64_t v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    size_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

void sub_100014674(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    size_t v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_1000146CC(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_1000146E8(_Unwind_Exception *a1)
{
}

char *sub_1000146FC(char **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  size_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  std::string::size_type v7 = __src;
  std::string::size_type v10 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 - v10 >= a5)
  {
    uint64_t v17 = v10 - __dst;
    if (v10 - __dst >= a5)
    {
      unint64_t v18 = &__src[a5];
      int v20 = a1[1];
    }
    else
    {
      unint64_t v18 = &__src[v17];
      if (&__src[v17] == a4)
      {
        int v20 = a1[1];
      }
      else
      {
        int64_t v19 = __src - __dst;
        int v20 = a1[1];
        std::string v21 = v20;
        do
          *v21++ = (v20++)[v19];
        while (&v20[v19] != a4);
      }
      a1[1] = v20;
      if (v17 < 1) {
        return v5;
      }
    }
    uint64_t v32 = &__dst[a5];
    char v33 = &v20[-a5];
    std::string v34 = v20;
    if (&v20[-a5] < v10)
    {
      uint64_t v35 = &v10[a5] - v20;
      std::string v34 = v20;
      do
      {
        char v36 = *v33++;
        *v34++ = v36;
        --v35;
      }
      while (v35);
    }
    a1[1] = v34;
    if (v20 != v32) {
      memmove(&__dst[a5], __dst, v20 - v32);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
  }
  else
  {
    std::string::size_type v11 = *a1;
    uint64_t v12 = v10 - *a1 + a5;
    if (v12 < 0) {
      sub_10000BA2C();
    }
    size_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      char v16 = operator new(v15);
    }
    else {
      char v16 = 0;
    }
    std::string::size_type v22 = &v13[(void)v16];
    uint64_t v23 = &v13[(void)v16 + v6];
    int64_t v24 = v22;
    do
    {
      char v25 = *v7++;
      *v24++ = v25;
      --v6;
    }
    while (v6);
    unint64_t v26 = *a1;
    if (*a1 == v5)
    {
      uint64_t v28 = v22;
    }
    else
    {
      long long v27 = v5;
      uint64_t v28 = v22;
      do
      {
        char v29 = *--v27;
        *--uint64_t v28 = v29;
      }
      while (v27 != v26);
      std::string::size_type v10 = a1[1];
    }
    long long v30 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v23, v5, v10 - v5);
    }
    uint64_t v31 = *a1;
    *a1 = v28;
    a1[1] = &v23[v10 - v5];
    a1[2] = v30;
    if (v31) {
      operator delete(v31);
    }
    return v22;
  }
  return v5;
}

void *sub_1000148F4(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    sub_10000B9E8(a1, a2);
    uint64_t v6 = (unsigned char *)a1[1];
    std::string::size_type v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_100014958(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100014974(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  size_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  std::string::size_type v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    std::string::size_type v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_10000BA2C();
    }
    size_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      uint64_t v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      uint64_t v17 = 0;
    }
    long long v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    uint64_t v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      std::string::size_type v10 = *(char **)(a1 + 8);
      uint64_t v28 = v17;
    }
    long long v30 = &v27[a5];
    uint64_t v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    uint64_t v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    int64_t v19 = &__src[a5];
    std::string v21 = *(char **)(a1 + 8);
LABEL_17:
    std::string::size_type v22 = &v5[a5];
    uint64_t v23 = &v21[-a5];
    int64_t v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      int64_t v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  int64_t v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  std::string v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void *sub_100014B60(void *result, char *a2, char *a3, unint64_t a4)
{
  size_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10000B90C();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *size_t v4 = result;
    size_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)size_t v4 = v10;
    size_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)size_t v4 = 0;
  return result;
}

uint64_t sub_100014C08(uint64_t a1)
{
  sub_100014C44(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100014C44(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100014C88((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100014C88(uint64_t a1)
{
  sub_10000B4E8((const void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100014CD8(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_100014DC8(a1, prime);
    }
  }
}

void sub_100014DC8(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_10000B9B4();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      std::string::size_type v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *std::string::size_type v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            std::string::size_type v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          std::string::size_type v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    char v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unsigned __int8 *sub_100014F24(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_100015260(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (CFIndex i = *v14; i; CFIndex i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_10001570C(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_1000151C0(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100014CD8(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  CFIndex i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_100015854((uint64_t)v26, 0);
  return i;
}

void sub_1000151A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100015854((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_1000151C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_1000157B4(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100015248(_Unwind_Exception *a1)
{
  sub_100015854(v1, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_100015260(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_1000152A0((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_1000152A0(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      size_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_10001564C(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_1000155A0(a2, a3);
  }
  else
  {
    return sub_1000154A8(a2, a3);
  }
}

unint64_t sub_1000154A8(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_1000155A0(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_10001564C(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_10001570C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void *sub_1000157B4(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_10000B90C();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_100015854(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100014C88((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_1000158AC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    uint64_t v4 = (const void **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_10000B4E8(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100015930(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000159A8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000159A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      int v12 = *(const void **)(a3 + v11 - 8);
      *(void *)(a7 - 8 + v11) = v12;
      if (v12) {
        CFRetain(v12);
      }
      v11 -= 8;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_100015A24(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 8)
    sub_10000B4E8((const void **)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t sub_100015A44(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_10000B4E8((const void **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100015A94(uint64_t *a1, const void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    sub_10000BA2C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_10000BB88(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = (const void **)&v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  uint64_t v17 = &v10[8 * v9];
  int v12 = *a2;
  *uint64_t v11 = *a2;
  if (v12)
  {
    CFRetain(v12);
    uint64_t v11 = v16;
  }
  unint64_t v16 = v11 + 1;
  sub_100015930(a1, v15);
  uint64_t v13 = a1[1];
  sub_100015A44((uint64_t)v15);
  return v13;
}

void sub_100015B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100015A44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100015B80()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_10012A3B0;
}

void sub_100015BD0(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

uint64_t sub_100015C08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100015CA0(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100015F00(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10000B520(a1);
}

uint64_t sub_100015F0C()
{
  qword_10015AD50 = 0;
  return __cxa_atexit((void (*)(void *))sub_100010AD4, qword_10015AD38, (void *)&_mh_execute_header);
}

uint64_t sub_100015F34(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  sub_100022CBC((void *)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)a1 = off_10012A3D8;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_10000FE64((void *)(a1 + 24), 0, 0, 0);
  *(void *)(a1 + 48) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 56) = a1 + 24;
  *(void *)(a1 + 64) = a1 + 24;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  return a1;
}

void sub_100016018(_Unwind_Exception *a1)
{
  sub_100022CE8(v1);
  _Unwind_Resume(a1);
}

void *sub_100016048(void *a1)
{
  *a1 = off_10012A3D8;
  sub_10000F130((uint64_t)a1);
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return sub_100022CE8(a1);
}

void sub_1000160B4(void *a1)
{
  sub_100016048(a1);
  operator delete();
}

uint64_t sub_1000160EC(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    do
    {
      int v6 = *v3++;
      unsigned int v5 = v6 - v5 + 32 * v5;
    }
    while (v3 != v4);
  }
  uint64_t v7 = sub_1000161AC(a1, (uint64_t)a2, v5);
  if (!v7)
  {
    uint64_t result = 0xFFFFFFFFLL;
    goto LABEL_10;
  }
  int v8 = *(_DWORD *)(v7 + 28);
  int v9 = *(_DWORD *)(*(void *)(a1 + 56) + 28);
  uint64_t result = (v8 - v9);
  if (v8 - v9 < 0)
  {
LABEL_10:
    uint64_t v11 = (_DWORD *)(*(void *)(a1 + 16) + 12);
    goto LABEL_11;
  }
  uint64_t v11 = (_DWORD *)(*(void *)(a1 + 16) + 8);
LABEL_11:
  ++*v11;
  return result;
}

uint64_t sub_10001617C(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    int v4 = *v1++;
    uint64_t result = (v4 - result + 32 * result);
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_1000161AC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 8 * (a3 % 0x11) + 80);
  if (v3)
  {
    unsigned int v5 = *(const void **)a2;
    size_t v6 = *(void *)(a2 + 8) - *(void *)a2;
    do
    {
      if (*(_DWORD *)(v3 + 24) == a3
        && *(void *)(v3 + 8) - *(void *)v3 == v6
        && !memcmp(*(const void **)v3, v5, v6))
      {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 48);
    }
    while (v3);
  }
  return v3;
}

uint64_t sub_100016238(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(_DWORD *)(a2 + 28) - *(_DWORD *)(*(void *)(a1 + 56) + 28));
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100016258(uint64_t a1)
{
  return *(void *)(a1 + 216);
}

void sub_100016260(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    int v4 = 0;
    do
    {
      int v5 = *v2++;
      int v4 = v5 - v4 + 32 * v4;
    }
    while (v2 != v3);
  }
  operator new();
}

void sub_100016354()
{
}

uint64_t sub_100016378(unsigned int a1)
{
  return a1 % 0x11;
}

uint64_t sub_100016394(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  *(void *)(result + 32) = v2;
  *(void *)(result + 40) = a2;
  *(void *)(v2 + 40) = result;
  *(void *)(*(void *)(result + 40) + 32) = result;
  return result;
}

uint64_t sub_1000163AC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 216);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v5 = a1 + 8 * (*(_DWORD *)(v4 + 24) % 0x11u);
    uint64_t v8 = *(void *)(v5 + 80);
    size_t v6 = (void *)(v5 + 80);
    uint64_t v7 = v8;
    uint64_t v9 = v8;
    while (v9)
    {
      uint64_t v10 = v7;
      uint64_t v11 = *(void *)(v9 + 48);
      uint64_t v7 = v9;
      BOOL v12 = v9 == v4;
      uint64_t v9 = v11;
      if (v12)
      {
        if (v10 != v4) {
          size_t v6 = (void *)(v10 + 48);
        }
        *size_t v6 = v11;
        uint64_t v13 = *(void *)(v4 + 32);
        *(void *)(v13 + 40) = *(void *)(v4 + 40);
        *(void *)(*(void *)(v4 + 40) + 32) = v13;
        if ((void *)v4 != a2)
        {
          sub_100010734(a2, *(char **)v4, *(char **)(v4 + 8), *(void *)(v4 + 8) - *(void *)v4);
          uint64_t v2 = *(void *)(a1 + 216);
        }
        *(void *)(a1 + 216) = v2 - 1;
        BOOL v14 = *(char **)v4;
        if (*(void *)v4)
        {
          *(void *)(v4 + 8) = v14;
          operator delete(v14);
        }
        operator delete();
      }
    }
  }
  return 0;
}

uint64_t sub_100016498(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(void *)(v1 + 40) = *(void *)(result + 40);
  *(void *)(*(void *)(result + 40) + 32) = v1;
  return result;
}

uint64_t sub_1000164AC(uint64_t result)
{
  *(void *)(result + 208) = 0;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  uint64_t v1 = *(void *)(result + 64);
  if (v1 != result + 24)
  {
    uint64_t v2 = *(void *)(v1 + 32);
    *(void *)(v2 + 40) = *(void *)(v1 + 40);
    *(void *)(*(void *)(v1 + 40) + 32) = v2;
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    operator delete();
  }
  *(void *)(result + 216) = 0;
  return result;
}

uint64_t sub_100016540(uint64_t a1, uint64_t *a2)
{
  sub_10000FFAC(a2);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 != a1 + 24)
  {
    unint64_t v5 = a2[1];
    do
    {
      if (v5 >= a2[2])
      {
        unint64_t v5 = sub_10001661C(a2, v4);
      }
      else
      {
        sub_1000165CC((uint64_t)a2, v4);
        v5 += 24;
      }
      a2[1] = v5;
      uint64_t v4 = *(void *)(v4 + 32);
    }
    while (v4 != a1 + 24);
  }
  return *(void *)(a1 + 216);
}

void *sub_1000165CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = sub_10000FE64(v3, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_100016614(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10001661C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_10000BA2C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100010844(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_10000FE64(v11, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  v15 += 24;
  sub_100016730(a1, v14);
  uint64_t v12 = a1[1];
  sub_100010A40((uint64_t)v14);
  return v12;
}

void sub_10001671C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100010A40((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100016730(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10001088C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100016A94(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = objc_alloc_init(PSAppChannelSubscriptionResponse);
      [a1 addAppChannelSubscriptionResponse:v12];
      if (!PBReaderPlaceMark() || !sub_100072E04(v12, a2))
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100018610(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10001862C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

void sub_100018654()
{
}

void sub_1000186B4(_Unwind_Exception *a1)
{
  sub_100016048(v1);
  _Unwind_Resume(a1);
}

void sub_1000186D0(uint64_t a1)
{
  if ((long long *)a1 != &xmmword_10015ADB0)
  {
    dword_10015ADD0 = *(_DWORD *)(a1 + 32);
    sub_10001B324(&xmmword_10015ADB0, *(uint64_t **)(a1 + 16), 0);
  }
}

void *sub_1000186FC(uint64_t a1)
{
  return sub_10001870C(qword_10015AD90, a1);
}

void *sub_10001870C(void *a1, uint64_t a2)
{
  sub_10001BB1C((uint64_t)v4, a2);
  sub_10001BBB4(v4, a1);
  sub_10001B218(v4);
  return a1;
}

uint64_t sub_100018780(uint64_t result, uint64_t a2)
{
  *(void *)(result + 520) = a2;
  return result;
}

uint64_t sub_100018788(uint64_t result, int a2, std::string *__str)
{
  if (!*(_DWORD *)(result + 488))
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 488) = a2;
    uint64_t v4 = result + 496;
    std::string::operator=((std::string *)(result + 496), __str);
    if (qword_10015ADA8)
    {
      return sub_1000188E8((uint64_t)qword_10015AD90, v3, *(void *)(v3 + 520));
    }
    else
    {
      unsigned int v5 = sub_10000B534(&std::cerr, (uint64_t)"Encoder error: ", 15);
      int v6 = *(char *)(v3 + 519);
      if (v6 >= 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = *(void *)(v3 + 496);
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(v3 + 519);
      }
      else {
        uint64_t v8 = *(void *)(v3 + 504);
      }
      uint64_t v9 = sub_10000B534(v5, v7, v8);
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
      int v10 = std::locale::use_facet(&v11, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale(&v11);
      std::ostream::put();
      return std::ostream::flush();
    }
  }
  return result;
}

uint64_t sub_1000188E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100015B80();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t sub_10001893C(uint64_t a1)
{
  return a1 + 496;
}

uint64_t sub_100018944(uint64_t a1)
{
  return a1 + 448;
}

uint64_t *sub_10001894C()
{
  return &qword_10015AD58;
}

void *sub_100018958()
{
  return &unk_10015AD70;
}

void *sub_100018964()
{
  return &unk_10015AD80;
}

BOOL sub_100018970(uint64_t a1)
{
  return *(_DWORD *)(a1 + 488) != 0;
}

uint64_t sub_100018980(uint64_t a1)
{
  return *(unsigned int *)(a1 + 488);
}

uint64_t sub_100018988(uint64_t a1)
{
  return a1 + 224;
}

std::string *sub_100018990(uint64_t a1)
{
  sub_10000F130(a1);
  sub_10000F130(a1 + 224);
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  return std::string::assign((std::string *)(a1 + 496), "");
}

BOOL sub_1000189E4(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0x40;
}

void sub_1000189F4(uint64_t a1, unint64_t *a2, char *a3, unint64_t a4)
{
  sub_100018A70(a2, 0, a4, 6);
  if (a4)
  {
    uint64_t v7 = (char *)a2[1];
    sub_100014974((uint64_t)a2, v7, a3, &a3[a4], a4);
  }
}

void sub_100018A70(unint64_t *a1, char a2, unint64_t a3, char a4)
{
  unint64_t v5 = 0xFFu >> (8 - a4);
  uint64_t v7 = (unsigned char *)a1[1];
  unint64_t v6 = a1[2];
  unint64_t v8 = a3 - v5;
  if (a3 >= v5)
  {
    char v11 = v5 | a2;
    if ((unint64_t)v7 >= v6)
    {
      unint64_t v19 = *a1;
      uint64_t v20 = &v7[-*a1];
      unint64_t v21 = (unint64_t)(v20 + 1);
      if ((uint64_t)(v20 + 1) < 0) {
        goto LABEL_78;
      }
      unint64_t v22 = v6 - v19;
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        unint64_t v24 = (unint64_t)operator new(v23);
      }
      else {
        unint64_t v24 = 0;
      }
      uint64_t v29 = (char *)(v24 + v23);
      v20[v24] = v11;
      uint64_t v12 = &v20[v24 + 1];
      if (v7 == (unsigned char *)v19)
      {
        v24 += (unint64_t)v20;
      }
      else
      {
        uint64_t v30 = &v7[~v19];
        do
        {
          char v31 = *--v7;
          (v30--)[v24] = v31;
        }
        while (v7 != (unsigned char *)v19);
        uint64_t v7 = (unsigned char *)*a1;
      }
      *a1 = v24;
      a1[1] = (unint64_t)v12;
      a1[2] = (unint64_t)v29;
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *uint64_t v7 = v11;
      uint64_t v12 = v7 + 1;
    }
    a1[1] = (unint64_t)v12;
    if (v8 < 0x80)
    {
      uint64_t v7 = v12;
      LOBYTE(v32) = v8;
LABEL_57:
      unint64_t v45 = a1[2];
      if ((unint64_t)v7 < v45)
      {
        *uint64_t v7 = v32;
        int v10 = v7 + 1;
        goto LABEL_59;
      }
      unint64_t v46 = *a1;
      std::string v47 = &v7[-*a1];
      unint64_t v48 = (unint64_t)(v47 + 1);
      if ((uint64_t)(v47 + 1) >= 0)
      {
        unint64_t v49 = v45 - v46;
        if (2 * v49 > v48) {
          unint64_t v48 = 2 * v49;
        }
        if (v49 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v50 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v50 = v48;
        }
        if (v50) {
          unint64_t v18 = (unint64_t)operator new(v50);
        }
        else {
          unint64_t v18 = 0;
        }
        uint64_t v25 = (char *)(v18 + v50);
        v47[v18] = v32;
        uint64_t v26 = (uint64_t)&v47[v18 + 1];
        if (v7 == (unsigned char *)v46)
        {
          *a1 = (unint64_t)&v47[v18];
          a1[1] = v26;
          a1[2] = (unint64_t)v25;
LABEL_76:
          operator delete(v7);
          goto LABEL_77;
        }
        std::string v51 = &v7[~v46];
        do
        {
          char v52 = *--v7;
          (v51--)[v18] = v52;
        }
        while (v7 != (unsigned char *)v46);
        goto LABEL_72;
      }
LABEL_78:
      sub_10000BA2C();
    }
    while (1)
    {
      char v33 = v8 | 0x80;
      unint64_t v34 = a1[2];
      if ((unint64_t)v12 >= v34)
      {
        unint64_t v35 = *a1;
        uint64_t v36 = &v12[-*a1];
        unint64_t v37 = (unint64_t)(v36 + 1);
        if ((uint64_t)(v36 + 1) < 0) {
          goto LABEL_78;
        }
        unint64_t v38 = v34 - v35;
        if (2 * v38 > v37) {
          unint64_t v37 = 2 * v38;
        }
        if (v38 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v39 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v39 = v37;
        }
        if (v39) {
          unint64_t v40 = (unint64_t)operator new(v39);
        }
        else {
          unint64_t v40 = 0;
        }
        unint64_t v41 = (char *)(v40 + v39);
        v36[v40] = v33;
        uint64_t v7 = &v36[v40 + 1];
        if (v12 == (unsigned char *)v35)
        {
          *a1 = (unint64_t)&v36[v40];
          a1[1] = (unint64_t)v7;
          a1[2] = (unint64_t)v41;
        }
        else
        {
          std::string v42 = &v12[~v35];
          do
          {
            char v43 = *--v12;
            (v42--)[v40] = v43;
          }
          while (v12 != (unsigned char *)v35);
          uint64_t v12 = (unsigned char *)*a1;
          *a1 = v40;
          a1[1] = (unint64_t)v7;
          a1[2] = (unint64_t)v41;
          if (!v12) {
            goto LABEL_56;
          }
        }
        operator delete(v12);
      }
      else
      {
        *uint64_t v12 = v33;
        uint64_t v7 = v12 + 1;
      }
LABEL_56:
      a1[1] = (unint64_t)v7;
      unint64_t v32 = v8 >> 7;
      uint64_t v12 = v7;
      BOOL v44 = v8 >= 0x4000;
      v8 >>= 7;
      if (!v44) {
        goto LABEL_57;
      }
    }
  }
  char v9 = a3 | a2;
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v13 = *a1;
    BOOL v14 = &v7[-*a1];
    unint64_t v15 = (unint64_t)(v14 + 1);
    if ((uint64_t)(v14 + 1) >= 0)
    {
      unint64_t v16 = v6 - v13;
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v15;
      }
      if (v17) {
        unint64_t v18 = (unint64_t)operator new(v17);
      }
      else {
        unint64_t v18 = 0;
      }
      uint64_t v25 = (char *)(v18 + v17);
      v14[v18] = v9;
      uint64_t v26 = (uint64_t)&v14[v18 + 1];
      if (v7 == (unsigned char *)v13)
      {
        v18 += (unint64_t)v14;
        goto LABEL_73;
      }
      uint64_t v27 = &v7[~v13];
      do
      {
        char v28 = *--v7;
        (v27--)[v18] = v28;
      }
      while (v7 != (unsigned char *)v13);
LABEL_72:
      uint64_t v7 = (unsigned char *)*a1;
LABEL_73:
      *a1 = v18;
      a1[1] = v26;
      a1[2] = (unint64_t)v25;
      if (!v7) {
        goto LABEL_77;
      }
      goto LABEL_76;
    }
    goto LABEL_78;
  }
  *uint64_t v7 = v9;
  int v10 = v7 + 1;
LABEL_59:
  uint64_t v26 = (uint64_t)v10;
LABEL_77:
  a1[1] = v26;
}

uint64_t sub_100018DBC(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, char *a4, unint64_t a5, int a6)
{
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v11 = sub_100018E44(a1, (uint64_t)a2, a3, &v15, &v14);
  uint64_t v12 = v11;
  if (v11)
  {
    sub_1000189F4(v11, a2, a4, a5);
    if (a6) {
      sub_10001921C(a1, a2, v15, v14);
    }
  }
  return v12;
}

uint64_t sub_100018E44(uint64_t a1, uint64_t a2, unsigned __int8 **a3, void *a4, void *a5)
{
  unint64_t v7 = *(void *)a2;
  unint64_t v6 = *(unsigned char **)(a2 + 8);
  unint64_t v8 = &v6[-*(void *)a2];
  *a4 = v8;
  unint64_t v9 = a3[1] - *a3;
  if (v9 - 1 >= 0x40)
  {
    std::to_string(&v49, v9);
    unint64_t v16 = std::string::insert(&v49, 0, "key has invalid length ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    sub_100018788(a1, 1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    unint64_t v18 = (void *)v49.__r_.__value_.__r.__words[0];
    goto LABEL_10;
  }
  if (v9 == 1)
  {
    unsigned int v13 = **a3;
    if (v13 <= 0xF)
    {
      unint64_t v14 = *(void *)(a2 + 16);
      if ((unint64_t)v6 < v14)
      {
        *unint64_t v6 = v13;
        uint64_t v15 = (uint64_t)(v6 + 1);
LABEL_56:
        *(void *)(a2 + 8) = v15;
        goto LABEL_57;
      }
      unint64_t v28 = (unint64_t)(v8 + 1);
      if ((uint64_t)(v8 + 1) >= 0)
      {
        unint64_t v29 = v14 - v7;
        if (2 * v29 > v28) {
          unint64_t v28 = 2 * v29;
        }
        if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v30 = v28;
        }
        if (v30) {
          char v31 = operator new(v30);
        }
        else {
          char v31 = 0;
        }
        unint64_t v38 = &v31[v30];
        v8[(void)v31] = v13;
        uint64_t v15 = (uint64_t)&v8[(void)v31 + 1];
        if (v6 == (unsigned char *)v7)
        {
          char v31 = &v8[(void)v31];
        }
        else
        {
          size_t v39 = &v6[~v7];
          do
          {
            char v40 = *--v6;
            (v39--)[(void)v31] = v40;
          }
          while (v6 != (unsigned char *)v7);
          unint64_t v6 = *(unsigned char **)a2;
        }
        *(void *)a2 = v31;
        *(void *)(a2 + 8) = v15;
        *(void *)(a2 + 16) = v38;
        if (!v6) {
          goto LABEL_56;
        }
        unint64_t v41 = v6;
        goto LABEL_55;
      }
      goto LABEL_59;
    }
  }
  unsigned int v19 = sub_1000160EC(a1, a3);
  if ((v19 & 0x80000000) == 0)
  {
    if (v19 < 0x20)
    {
      char v25 = v19 | 0x20;
      uint64_t v27 = *(unsigned char **)(a2 + 8);
      unint64_t v26 = *(void *)(a2 + 16);
      if ((unint64_t)v27 < v26)
      {
        *uint64_t v27 = v25;
        uint64_t v15 = (uint64_t)(v27 + 1);
        goto LABEL_56;
      }
      unint64_t v32 = *(void *)a2;
      char v33 = &v27[-*(void *)a2];
      unint64_t v34 = (unint64_t)(v33 + 1);
      if ((uint64_t)(v33 + 1) >= 0)
      {
        unint64_t v35 = v26 - v32;
        if (2 * v35 > v34) {
          unint64_t v34 = 2 * v35;
        }
        if (v35 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v36 = v34;
        }
        if (v36) {
          unint64_t v37 = operator new(v36);
        }
        else {
          unint64_t v37 = 0;
        }
        std::string v42 = &v33[(void)v37];
        char v43 = (char *)v37 + v36;
        BOOL v44 = &v33[(void)v37];
        unsigned char *v44 = v25;
        uint64_t v15 = (uint64_t)(v44 + 1);
        if (v27 == (unsigned char *)v32)
        {
          unint64_t v37 = v42;
        }
        else
        {
          unint64_t v45 = &v27[~v32];
          do
          {
            char v46 = *--v27;
            (v45--)[(void)v37] = v46;
          }
          while (v27 != (unsigned char *)v32);
          uint64_t v27 = *(unsigned char **)a2;
        }
        *(void *)a2 = v37;
        *(void *)(a2 + 8) = v15;
        *(void *)(a2 + 16) = v43;
        if (!v27) {
          goto LABEL_56;
        }
        unint64_t v41 = v27;
LABEL_55:
        operator delete(v41);
        goto LABEL_56;
      }
LABEL_59:
      sub_10000BA2C();
    }
    std::to_string(&v47, v19);
    uint64_t v20 = std::string::insert(&v47, 0, "key index ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    unint64_t v22 = std::string::append(&v49, " is greater than 32");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    sub_100018788(a1, 6, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    unint64_t v18 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_10:
    operator delete(v18);
    return 0;
  }
  sub_1000124C4(a1, (uint64_t)a3);
  sub_100018A70((unint64_t *)a2, 16, (unint64_t)&a3[1][~(unint64_t)*a3], 4);
  sub_100014110(a2, *(char **)(a2 + 8), (char *)*a3, (char *)a3[1], a3[1] - *a3);
  uint64_t v15 = *(void *)(a2 + 8);
LABEL_57:
  *a5 = v15 - *(void *)a2;
  return 1;
}

void sub_1000191A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001921C(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = (char *)a2[1];
  unint64_t v6 = (char *)(*a2 + a4);
  if ((unint64_t)(v5 - v6) >= 2)
  {
    std::string __p = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_100014110((uint64_t)&__p, 0, v6, v5, v5 - v6);
    uint64_t v10 = a1 + 224;
    unsigned int v11 = sub_1000160EC(a1 + 224, (unsigned __int8 **)&__p);
    if ((v11 & 0x80000000) != 0)
    {
      if (sub_1000124C4(v10, (uint64_t)&__p)) {
        *(unsigned char *)(*a2 + a3) |= 0x40u;
      }
    }
    else
    {
      *(unsigned char *)(*a2 + a3) |= 0x80u;
      unint64_t v12 = a2[1] - *a2;
      if (a4 <= v12)
      {
        if (a4 < v12) {
          a2[1] = *a2 + a4;
        }
      }
      else
      {
        sub_10001BF24(a2, a4 - v12);
      }
      sub_100018A70(a2, 0, v11, 8);
    }
    if (__p)
    {
      unint64_t v14 = __p;
      operator delete(__p);
    }
  }
}

void sub_100019324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100019344(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  if (*((char *)a3 + 23) >= 0) {
    unint64_t v5 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    unint64_t v5 = a3[1];
  }
  sub_100018A70(a2, 64, v5, 5);
  if (*((char *)v3 + 23) < 0)
  {
    uint64_t v6 = v3[1];
    if (!v6) {
      return;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  else
  {
    uint64_t v6 = *((unsigned __int8 *)v3 + 23);
    if (!*((unsigned char *)v3 + 23)) {
      return;
    }
  }
  unint64_t v7 = (char *)a2[1];
  sub_1000146FC((char **)a2, v7, (char *)v3, (char *)v3 + v6, v6);
}

uint64_t sub_1000193D8(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, uint64_t *a4, int a5)
{
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v9 = sub_100018E44(a1, (uint64_t)a2, a3, &v13, &v12);
  uint64_t v10 = v9;
  if (v9)
  {
    sub_100019344(v9, a2, a4);
    if (a5) {
      sub_10001921C(a1, a2, v13, v12);
    }
  }
  return v10;
}

void sub_100019458(int a1, void *a2, uint64_t a3)
{
  if ((unint64_t)a3 <= 0x1F)
  {
    char v4 = a3 | 0x80;
    uint64_t v6 = (char *)a2[1];
    unint64_t v5 = a2[2];
    if ((unint64_t)v6 < v5)
    {
      *uint64_t v6 = v4;
      uint64_t v7 = (uint64_t)(v6 + 1);
LABEL_45:
      a2[1] = v7;
      return;
    }
    unint64_t v16 = (char *)*a2;
    long long v17 = &v6[-*a2];
    unint64_t v18 = (unint64_t)(v17 + 1);
    if ((uint64_t)(v17 + 1) >= 0)
    {
      unint64_t v19 = v5 - (void)v16;
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v20 = v18;
      }
      if (v20) {
        long long v21 = (char *)operator new(v20);
      }
      else {
        long long v21 = 0;
      }
      unint64_t v28 = &v21[v20];
      v17[(void)v21] = v4;
      uint64_t v7 = (uint64_t)&v17[(void)v21 + 1];
      if (v6 == v16)
      {
        long long v21 = &v17[(void)v21];
      }
      else
      {
        unint64_t v29 = &v6[~(unint64_t)v16];
        do
        {
          char v30 = *--v6;
          (v29--)[(void)v21] = v30;
        }
        while (v6 != v16);
        uint64_t v6 = (char *)*a2;
      }
      *a2 = v21;
      a2[1] = v7;
      a2[2] = v28;
      if (v6) {
        operator delete(v6);
      }
      goto LABEL_45;
    }
LABEL_51:
    sub_10000BA2C();
  }
  uint64_t v8 = 0;
  if (a3 >= 0) {
    unint64_t v9 = a3;
  }
  else {
    unint64_t v9 = -a3;
  }
  if (a3 >= 0) {
    char v10 = -96;
  }
  else {
    char v10 = -88;
  }
  while (1)
  {
    v34[v8 + 7] = v9;
    if (v9 < 0x100) {
      break;
    }
    v9 >>= 8;
    if (--v8 == -8)
    {
      int v11 = 8;
      goto LABEL_14;
    }
  }
  int v11 = -(int)v8;
LABEL_14:
  char v12 = v11 | v10;
  unint64_t v14 = (char *)a2[1];
  unint64_t v13 = a2[2];
  if ((unint64_t)v14 >= v13)
  {
    unint64_t v22 = (char *)*a2;
    long long v23 = &v14[-*a2];
    unint64_t v24 = (unint64_t)(v23 + 1);
    if ((uint64_t)(v23 + 1) < 0) {
      goto LABEL_51;
    }
    unint64_t v25 = v13 - (void)v22;
    if (2 * v25 > v24) {
      unint64_t v24 = 2 * v25;
    }
    if (v25 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v26 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v26 = v24;
    }
    if (v26) {
      uint64_t v27 = (char *)operator new(v26);
    }
    else {
      uint64_t v27 = 0;
    }
    char v31 = &v27[v26];
    v23[(void)v27] = v12;
    uint64_t v15 = &v23[(void)v27 + 1];
    if (v14 == v22)
    {
      uint64_t v27 = &v23[(void)v27];
    }
    else
    {
      unint64_t v32 = &v14[~(unint64_t)v22];
      do
      {
        char v33 = *--v14;
        (v32--)[(void)v27] = v33;
      }
      while (v14 != v22);
      unint64_t v14 = (char *)*a2;
    }
    *a2 = v27;
    a2[1] = v15;
    a2[2] = v31;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    char *v14 = v12;
    uint64_t v15 = v14 + 1;
  }
  a2[1] = v15;
  sub_100014974((uint64_t)a2, v15, &v34[-v11 + 7], (char *)&v35, (char *)&v35 - &v34[-v11 + 7]);
}

uint64_t sub_1000196B4(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, uint64_t a4, int a5)
{
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v9 = sub_100018E44(a1, (uint64_t)a2, a3, &v13, &v12);
  uint64_t v10 = v9;
  if (v9)
  {
    sub_100019458(v9, a2, a4);
    if (a5) {
      sub_10001921C(a1, a2, v13, v12);
    }
  }
  return v10;
}

void sub_100019734(uint64_t a1, void *a2, int a3)
{
  if (a3) {
    char v4 = -31;
  }
  else {
    char v4 = -32;
  }
  uint64_t v6 = (char *)a2[1];
  unint64_t v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (char *)*a2;
    uint64_t v9 = &v6[-*a2];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      sub_10000BA2C();
    }
    unint64_t v11 = v5 - (void)v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      uint64_t v13 = (char *)operator new(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[v12];
    v9[(void)v13] = v4;
    uint64_t v7 = (uint64_t)&v9[(void)v13 + 1];
    if (v6 == v8)
    {
      uint64_t v13 = &v9[(void)v13];
    }
    else
    {
      uint64_t v15 = &v6[~(unint64_t)v8];
      do
      {
        char v16 = *--v6;
        (v15--)[(void)v13] = v16;
      }
      while (v6 != v8);
      uint64_t v6 = (char *)*a2;
    }
    *a2 = v13;
    a2[1] = v7;
    a2[2] = v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  a2[1] = v7;
}

uint64_t sub_10001982C(uint64_t a1, void *a2, unsigned __int8 **a3, int a4)
{
  uint64_t v6 = sub_100018E44(a1, (uint64_t)a2, a3, &v10, &v9);
  uint64_t v7 = v6;
  if (v6) {
    sub_100019734(v6, a2, a4);
  }
  return v7;
}

uint64_t sub_100019884(uint64_t a1, unint64_t *a2, CFDataRef theData)
{
  CFIndex Length = CFDataGetLength(theData);
  BytePtr = (char *)CFDataGetBytePtr(theData);
  if (Length < 0 || !BytePtr && Length)
  {
    sub_100014374(&__p, "invalid CFData value");
    sub_100018788(a1, 2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  else
  {
    sub_1000189F4((uint64_t)BytePtr, a2, BytePtr, Length);
    return 1;
  }
}

void sub_100019928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100019944(uint64_t a1, unint64_t *a2, CFTypeRef cf)
{
  size_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v11 = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (sub_10000B16C((CFStringRef *)&v11, (uint64_t)&v12))
  {
    if (v14 >= 0) {
      unint64_t v5 = HIBYTE(v14);
    }
    else {
      unint64_t v5 = v13;
    }
    unint64_t v6 = *(void *)(a1 + 480);
    uint64_t v7 = sub_10000B4E8(&v11);
    if (v5 <= v6)
    {
      sub_100019344((uint64_t)v7, a2, (uint64_t *)&v12);
      uint64_t v8 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    sub_10000B4E8(&v11);
  }
  sub_100014374(&__p, "invalid CFString value");
  sub_100018788(a1, 2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = 0;
LABEL_13:
  if (SHIBYTE(v14) < 0) {
    operator delete(v12);
  }
  return v8;
}

void sub_100019A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100019A74(uint64_t a1, void *a2, CFNumberRef number)
{
  uint64_t valuePtr = 0;
  if (CFNumberIsFloatType(number) || (int Value = CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr)) == 0)
  {
    sub_100014374(&__p, "invalid number");
    sub_100018788(a1, 2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  else
  {
    sub_100019458(Value, a2, valuePtr);
    return 1;
  }
}

void sub_100019B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100019B34(int a1, void *a2, CFBooleanRef BOOLean)
{
  uint64_t Value = CFBooleanGetValue(BOOLean);
  sub_100019734(Value, a2, Value != 0);
  return 1;
}

BOOL sub_100019B70(uint64_t a1, unint64_t *a2, CFDictionaryRef theDict, int a4)
{
  if (a4 >= 5)
  {
    sub_100014374(&__str, "dictionary is too deep");
    sub_100018788(a1, 3, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v5 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_7:
      operator delete(v5);
      return 0;
    }
    return 0;
  }
  unint64_t Count = CFDictionaryGetCount(theDict);
  if (Count >= 0x401)
  {
    sub_100014374(&v35, "dictionary is too large");
    sub_100018788(a1, 2, &v35);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v5 = (void *)v35.__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
    return 0;
  }
  int64_t v12 = Count;
  sub_100018A70(a2, 192, Count, 4);
  values[0] = 0;
  sub_10000BAC0(keys, v12, values);
  unint64_t v29 = 0;
  sub_10000BAC0(values, v12, &v29);
  CFDictionaryGetKeysAndValues(theDict, (const void **)keys[0], (const void **)values[0]);
  if (!v12)
  {
    BOOL v10 = 1;
    goto LABEL_40;
  }
  uint64_t v13 = 0;
  BOOL v10 = 0;
  uint64_t v14 = (a4 + 1);
  while (1)
  {
    CFTypeID v15 = CFGetTypeID(keys[0][v13]);
    if (v15 != CFStringGetTypeID()) {
      break;
    }
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    char v16 = keys[0][v13];
    std::string __p = v16;
    if (v16) {
      CFRetain(v16);
    }
    if (!sub_10000B16C((CFStringRef *)&__p, (uint64_t)&v29))
    {
      sub_10000B4E8((const void **)&__p);
LABEL_29:
      sub_100014374(&v28, "dictionary has invalid key");
      sub_100018788(a1, 2, &v28);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      int v24 = 1;
      goto LABEL_32;
    }
    uint64_t v17 = HIBYTE(v31);
    if (v31 < 0) {
      uint64_t v17 = v30;
    }
    unint64_t v18 = v17 - 1;
    sub_10000B4E8((const void **)&__p);
    if (v18 >= 0x40) {
      goto LABEL_29;
    }
    std::string __p = 0;
    size_t v26 = 0;
    uint64_t v27 = 0;
    if (v31 >= 0) {
      unint64_t v19 = (char *)&v29;
    }
    else {
      unint64_t v19 = (char *)v29;
    }
    if (v31 >= 0) {
      uint64_t v20 = HIBYTE(v31);
    }
    else {
      uint64_t v20 = v30;
    }
    sub_1000146FC((char **)&__p, 0, v19, &v19[v20], v20);
    long long v21 = values[0][v13];
    BOOL v22 = sub_10001BE20(&xmmword_10015ADB0, (unsigned __int8 *)&v29) != 0;
    int v23 = sub_100019F38(a1, a2, &__p, v21, v14, v22);
    if (__p)
    {
      size_t v26 = __p;
      operator delete(__p);
    }
    int v24 = v23 ^ 1;
LABEL_32:
    if (SHIBYTE(v31) < 0) {
      operator delete(v29);
    }
    if (!v24)
    {
      BOOL v10 = v12 <= ++v13;
      if (v12 != v13) {
        continue;
      }
    }
    goto LABEL_40;
  }
  sub_100014374(&v32, "dictionary has non-string key");
  sub_100018788(a1, 2, &v32);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
LABEL_40:
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }
  if (keys[0])
  {
    keys[1] = keys[0];
    operator delete(keys[0]);
  }
  return v10;
}

void sub_100019E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100019F38(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, const void *a4, int a5, int a6)
{
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  if (!sub_100018E44(a1, (uint64_t)a2, a3, &v15, &v14)) {
    return 0;
  }
  char v13 = 0;
  uint64_t v11 = sub_10001A170(a1, a2, a4, a5, &v13);
  if (v11 && v13 && a6) {
    sub_10001921C(a1, a2, v15, v14);
  }
  return v11;
}

uint64_t sub_100019FE0(uint64_t a1, unint64_t *a2, CFArrayRef theArray, int a4)
{
  if (a4 >= 5)
  {
    sub_100014374(&__str, "array is too deep");
    sub_100018788(a1, 3, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      p_str = &__str;
LABEL_7:
      operator delete(p_str->__r_.__value_.__l.__data_);
      return 0;
    }
    return 0;
  }
  unint64_t Count = CFArrayGetCount(theArray);
  if (Count >= 0x401)
  {
    sub_100014374(&v16, "array is too large");
    sub_100018788(a1, 2, &v16);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      p_str = &v16;
      goto LABEL_7;
    }
    return 0;
  }
  int64_t v10 = Count;
  sub_100018A70(a2, 208, Count, 4);
  if (!v10) {
    return 1;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  uint64_t result = sub_10001A170(a1, (int)a2, ValueAtIndex);
  if (result)
  {
    CFIndex v12 = 1;
    do
    {
      CFIndex v13 = v12;
      if (v10 == v12) {
        break;
      }
      unint64_t v14 = CFArrayGetValueAtIndex(theArray, v12);
      char v15 = sub_10001A170(a1, (int)a2, v14);
      CFIndex v12 = v13 + 1;
    }
    while ((v15 & 1) != 0);
    return v13 >= v10;
  }
  return result;
}

void sub_10001A13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001A170(uint64_t a1, unint64_t *a2, CFTypeRef cf, int a4, unsigned char *a5)
{
  if (!cf)
  {
    sub_100014374(&__p, "value is null");
    sub_100018788(a1, 6, &__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    CFIndex v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_8:
    operator delete(v12);
    return 0;
  }
  CFTypeID v10 = CFGetTypeID(cf);
  if (v10 == CFDataGetTypeID())
  {
    *a5 = 1;
    return sub_100019884(a1, a2, (CFDataRef)cf);
  }
  if (v10 == CFStringGetTypeID())
  {
    *a5 = 1;
    return sub_100019944(a1, a2, cf);
  }
  if (v10 == CFNumberGetTypeID())
  {
    *a5 = 1;
    return sub_100019A74(a1, a2, (CFNumberRef)cf);
  }
  if (v10 == CFBooleanGetTypeID())
  {
    uint64_t v13 = 1;
    *a5 = 1;
    uint64_t Value = CFBooleanGetValue((CFBooleanRef)cf);
    sub_100019734(Value, a2, Value != 0);
    return v13;
  }
  if (v10 == CFArrayGetTypeID())
  {
    *a5 = 0;
    return sub_100019FE0(a1, a2, (CFArrayRef)cf, a4);
  }
  if (v10 != CFDictionaryGetTypeID())
  {
    std::to_string(&v17, v10);
    char v15 = std::string::insert(&v17, 0, "CoreFoundation value with unsupported type ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    sub_100018788(a1, 2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    CFIndex v12 = (void *)v17.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  *a5 = 0;
  return sub_100019B70(a1, a2, (CFDictionaryRef)cf, a4);
}

void sub_10001A400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001A448(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(unsigned char *)(result + 8) = -1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 5;
  return result;
}

uint64_t sub_10001A464(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t sub_10001A46C(uint64_t *a1, unint64_t __val)
{
  uint64_t v3 = *a1;
  if (*(void *)(*a1 + 480) < __val)
  {
    std::to_string(&v25, __val);
    char v4 = std::string::insert(&v25, 0, "attribute is too large, ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    unint64_t v6 = std::string::append(&v26, " > ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v24, *(void *)(*a1 + 480));
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v24;
    }
    else {
      uint64_t v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    CFTypeID v10 = std::string::append(&v27, (const std::string::value_type *)v8, size);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    sub_100018788(v3, 5, &__str);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    CFIndex v12 = (void *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }
  unint64_t v13 = __val + a1[5] + 3;
  a1[5] = v13;
  if (v13 <= *(void *)(v3 + 472)) {
    return 1;
  }
  std::to_string(&v25, v13);
  unint64_t v14 = std::string::insert(&v25, 0, "frame is too large, ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  long long v16 = std::string::append(&v26, " > ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v24, *(void *)(*a1 + 472));
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v18 = &v24;
  }
  else {
    unint64_t v18 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = v24.__r_.__value_.__l.__size_;
  }
  uint64_t v20 = std::string::append(&v27, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  sub_100018788(v3, 4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    CFIndex v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_19:
    operator delete(v12);
  }
LABEL_20:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_10001A6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001A740(uint64_t a1, char a2, char *a3, unint64_t __val, int a5)
{
  char v12 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 488))
  {
    if (sub_10001A46C((uint64_t *)a1, __val))
    {
      uint64_t v9 = *(void *)a1;
      sub_1000148F4(__p, 1uLL, &v12);
      sub_100018DBC(v9, (unint64_t *)(a1 + 16), (unsigned __int8 **)__p, a3, __val, a5);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  return a1;
}

void sub_10001A7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001A808(uint64_t a1, char a2, uint64_t a3, int a4)
{
  char v11 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 488))
  {
    if (*(char *)(a3 + 23) >= 0) {
      unint64_t v7 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      unint64_t v7 = *(void *)(a3 + 8);
    }
    if (sub_10001A46C((uint64_t *)a1, v7))
    {
      uint64_t v8 = *(void *)a1;
      sub_1000148F4(__p, 1uLL, &v11);
      sub_1000193D8(v8, (unint64_t *)(a1 + 16), (unsigned __int8 **)__p, (uint64_t *)a3, a4);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  return a1;
}

void sub_10001A8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001A8D8(uint64_t a1, char a2, char a3, int a4)
{
  return sub_10001A8E0(a1, a2, a3, a4);
}

uint64_t sub_10001A8E0(uint64_t a1, char a2, int a3, int a4)
{
  char v10 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 488))
  {
    if (sub_10001A46C((uint64_t *)a1, 1uLL))
    {
      uint64_t v7 = *(void *)a1;
      sub_1000148F4(__p, 1uLL, &v10);
      sub_1000196B4(v7, (unint64_t *)(a1 + 16), (unsigned __int8 **)__p, a3, a4);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  return a1;
}

void sub_10001A984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001A9A0(uint64_t a1, char a2, __int16 a3, int a4)
{
  return sub_10001A9A8(a1, a2, a3, a4);
}

uint64_t sub_10001A9A8(uint64_t a1, char a2, int a3, int a4)
{
  char v10 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 488))
  {
    if (sub_10001A46C((uint64_t *)a1, 2uLL))
    {
      uint64_t v7 = *(void *)a1;
      sub_1000148F4(__p, 1uLL, &v10);
      sub_1000196B4(v7, (unint64_t *)(a1 + 16), (unsigned __int8 **)__p, a3, a4);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  return a1;
}

void sub_10001AA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001AA6C(uint64_t a1, char a2, int a3, int a4)
{
  char v10 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 488))
  {
    if (sub_10001A46C((uint64_t *)a1, 4uLL))
    {
      uint64_t v7 = *(void *)a1;
      sub_1000148F4(__p, 1uLL, &v10);
      sub_1000196B4(v7, (unint64_t *)(a1 + 16), (unsigned __int8 **)__p, a3, a4);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  return a1;
}

void sub_10001AB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001AB30(uint64_t a1, char a2, uint64_t a3, int a4)
{
  char v10 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 488))
  {
    if (sub_10001A46C((uint64_t *)a1, 8uLL))
    {
      uint64_t v7 = *(void *)a1;
      sub_1000148F4(__p, 1uLL, &v10);
      sub_1000196B4(v7, (unint64_t *)(a1 + 16), (unsigned __int8 **)__p, a3, a4);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  return a1;
}

void sub_10001ABD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10001ABF0(uint64_t *a1, char a2, int a3)
{
  char v8 = a2;
  if (!*(_DWORD *)(*a1 + 488))
  {
    if (sub_10001A46C(a1, 1uLL))
    {
      uint64_t v5 = *a1;
      sub_1000148F4(__p, 1uLL, &v8);
      sub_10001982C(v5, a1 + 2, (unsigned __int8 **)__p, a3);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  return a1;
}

void sub_10001AC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_10001ACA0(unint64_t *a1, char a2, const UInt8 *a3, unint64_t __val)
{
  char v19 = a2;
  if (!*(_DWORD *)(*a1 + 488) && sub_10001A46C((uint64_t *)a1, __val))
  {
    uint64_t v7 = (uint64_t *)sub_10000A958(&v18, a3, __val);
    long long v17 = 0;
    if (sub_10000B330(v7, &v17))
    {
      CFTypeID v8 = CFGetTypeID(v17);
      Typeint ID = CFDictionaryGetTypeID();
      uint64_t v10 = *a1;
      if (v8 == TypeID)
      {
        sub_1000148F4(v14, 1uLL, &v19);
        sub_100019F38(v10, a1 + 2, v14, v17, 0, 0);
        char v11 = v14[0];
        if (v14[0])
        {
          v14[1] = v14[0];
LABEL_11:
          operator delete(v11);
        }
      }
      else
      {
        sub_100014374(&__p, "bplist is not a dictionary");
        sub_100018788(v10, 2, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          char v11 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_11;
        }
      }
    }
    else
    {
      uint64_t v12 = *a1;
      sub_100014374(&__str, "invalid bplist");
      sub_100018788(v12, 2, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        char v11 = (unsigned __int8 *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_11;
      }
    }
    sub_10000B4E8(&v17);
    sub_10000B4E8((const void **)&v18);
  }
  return a1;
}

void sub_10001ADE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10000B4E8((const void **)(v23 - 56));
  sub_10000B4E8((const void **)(v23 - 48));
  _Unwind_Resume(a1);
}

BOOL sub_10001AE48(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)a1 + 488);
  if (!v2)
  {
    unint64_t v6 = *(void *)a2;
    uint64_t v5 = *(unsigned char **)(a2 + 8);
    uint64_t v7 = &v5[-*(void *)a2];
    unint64_t v8 = *(void *)(a2 + 16);
    if ((unint64_t)v5 >= v8)
    {
      unint64_t v10 = (unint64_t)(v7 + 1);
      if ((uint64_t)(v7 + 1) < 0) {
        sub_10000BA2C();
      }
      unint64_t v11 = v8 - v6;
      if (2 * v11 > v10) {
        unint64_t v10 = 2 * v11;
      }
      if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v12 = v10;
      }
      if (v12) {
        unint64_t v13 = operator new(v12);
      }
      else {
        unint64_t v13 = 0;
      }
      unint64_t v14 = &v13[v12];
      v7[(void)v13] = *(unsigned char *)(a1 + 8);
      uint64_t v9 = (uint64_t)&v7[(void)v13 + 1];
      if (v5 == (unsigned char *)v6)
      {
        unint64_t v13 = &v7[(void)v13];
      }
      else
      {
        long long v15 = &v5[~v6];
        do
        {
          char v16 = *--v5;
          (v15--)[(void)v13] = v16;
        }
        while (v5 != (unsigned char *)v6);
        uint64_t v5 = *(unsigned char **)a2;
      }
      *(void *)a2 = v13;
      *(void *)(a2 + 8) = v9;
      *(void *)(a2 + 16) = v14;
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      unsigned char *v5 = *(unsigned char *)(a1 + 8);
      uint64_t v9 = (uint64_t)(v5 + 1);
    }
    *(void *)(a2 + 8) = v9;
    sub_100018A70((unint64_t *)a2, 0, *(void *)(a1 + 24) - *(void *)(a1 + 16), 8);
    sub_100014110(a2, *(char **)(a2 + 8), *(char **)(a1 + 16), *(char **)(a1 + 24), *(void *)(a1 + 24) - *(void *)(a1 + 16));
    long long v17 = *(void **)a1;
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = *(void *)(a2 + 8) - (void)&v7[*(void *)a2];
    uint64_t v20 = *(void *)(*(void *)a1 + 456) + v18;
    v17[56] = *(void *)(*(void *)a1 + 448) + 1;
    v17[57] = v20;
    v17[58] += v19;
    ++qword_10015AD58;
    unk_10015AD60 += v18;
    qword_10015AD68 += v19;
  }
  return v2 == 0;
}

void sub_10001AFDC()
{
}

void sub_10001B0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1000C7BA0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001B0BC(void *a1)
{
  sub_100016048(a1);
  operator delete();
}

void sub_10001B0F4()
{
}

void sub_10001B1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1000C7BA0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001B1E0(void *a1)
{
  sub_100016048(a1);
  operator delete();
}

void *sub_10001B218(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10001B29C(uint64_t a1)
{
  sub_10001B2D8(a1, *(void ***)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10001B2D8(int a1, void **__p)
{
  if (__p)
  {
    int v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void sub_10001B324(void *a1, uint64_t *a2, uint64_t *a3)
{
  char v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        unint64_t v10 = (void **)*v8;
        sub_10001B420(a1, v8);
        char v4 = (uint64_t *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        unint64_t v8 = v10;
      }
      while (!v11);
    }
    sub_10001B2D8((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_10001B9A0(a1, (uint64_t)(v4 + 2));
    char v4 = (uint64_t *)*v4;
  }
}

void sub_10001B3F0(void *a1)
{
  __cxa_begin_catch(a1);
  sub_10001B2D8(v1, v2);
  __cxa_rethrow();
}

void sub_10001B40C(_Unwind_Exception *a1)
{
}

void *sub_10001B420(void *a1, void *a2)
{
  char v4 = (unsigned __int8 *)(a2 + 2);
  unint64_t v5 = sub_100015260((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  uint64_t v6 = sub_10001B484((uint64_t)a1, v5, v4);
  sub_10001B5F8(a1, a2, v6);
  return a2;
}

unsigned __int8 *sub_10001B484(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_10001B6E0(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }
  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }
  long long v17 = *(unsigned __int8 **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    uint64_t v18 = *(unsigned __int8 **)v17;
    if (*(void *)v17)
    {
      int v19 = 0;
      do
      {
        unint64_t v20 = *((void *)v18 + 1);
        if (v15 > 1)
        {
          unint64_t v21 = *((void *)v18 + 1);
          if (v20 >= v8) {
            unint64_t v21 = v20 % v8;
          }
        }
        else
        {
          unint64_t v21 = v20 & (v8 - 1);
        }
        if (v21 != v16) {
          break;
        }
        int v22 = v20 == a2 ? sub_10001570C(v6, v18 + 16, a3) : 0;
        if (v19 & (v22 ^ 1)) {
          break;
        }
        v19 |= v22;
        long long v17 = *(unsigned __int8 **)v17;
        uint64_t v18 = *(unsigned __int8 **)v17;
      }
      while (*(void *)v17);
    }
  }
  return v17;
}

void *sub_10001B5F8(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void sub_10001B6E0(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_10001B7D0(a1, prime);
    }
  }
}

void sub_10001B7D0(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_10000B9B4();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v12 = *v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            uint64_t v7 = (unsigned __int8 **)v12;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            uint8x8_t v14 = *(unsigned __int8 **)v12;
            if (*(void *)v12)
            {
              unint64_t v15 = v12;
              while (1)
              {
                int v16 = sub_10001570C(a1 + 32, v12 + 16, v14 + 16);
                long long v17 = *(unsigned __int8 **)v15;
                if (!v16) {
                  break;
                }
                uint8x8_t v14 = *(unsigned __int8 **)v17;
                unint64_t v15 = *(unsigned __int8 **)v15;
                if (!*(void *)v17) {
                  goto LABEL_32;
                }
              }
              uint8x8_t v14 = *(unsigned __int8 **)v15;
              long long v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }
            else
            {
              long long v17 = v12;
            }
            *uint64_t v7 = v14;
            *(void *)long long v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (unsigned __int8 **)v12;
            unint64_t v8 = v13;
          }
          unint64_t v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_10001B9A0(void *a1, uint64_t a2)
{
  sub_10001BA00((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_10001B420(a1, v4);
}

void sub_10001B9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10001BABC((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10001BA00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x28uLL);
  unint64_t v8 = v7;
  *(void *)(a3 + 8) = v6;
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 16) = 0;
  uint8x8_t v9 = v7 + 16;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000157B4(v7 + 16, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *uint8x8_t v9 = *(_OWORD *)a2;
    *((void *)v7 + 4) = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = sub_100015260(a1 + 24, (uint64_t)v9);
  *((void *)v8 + 1) = result;
  return result;
}

void sub_10001BAA0(_Unwind_Exception *a1)
{
  void *v2 = 0;
  sub_10001BABC(v3, v1);
  _Unwind_Resume(a1);
}

void sub_10001BABC(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_10001BB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10001BBB4(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    int8x8_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        unint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10001BE14(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10000B520(a1);
}

unsigned __int8 *sub_10001BE20(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_100015260((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (sub_10001570C(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_10001BF24(unint64_t *a1, size_t a2)
{
  int8x8_t v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint8x8_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_10000BA2C();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    unint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      uint8x8_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      int8x8_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_10001C060()
{
  qword_10015ADA8 = 0;
  __cxa_atexit((void (*)(void *))sub_10001864C, qword_10015AD90, (void *)&_mh_execute_header);
  xmmword_10015ADB0 = 0u;
  unk_10015ADC0 = 0u;
  dword_10015ADD0 = 1065353216;
  return __cxa_atexit((void (*)(void *))sub_100018650, &xmmword_10015ADB0, (void *)&_mh_execute_header);
}

uint64_t sub_10001C0E4(uint64_t result)
{
  *(unsigned char *)unint64_t result = -1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 8) = 0;
  return result;
}

uint64_t sub_10001C0F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    if (v5 - v4 == *((void *)a2 + 2) - *((void *)a2 + 1))
    {
      if (v5 == v4) {
        return 1;
      }
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      while (1)
      {
        uint64_t v8 = *((void *)a2 + 1);
        if (*(unsigned __int8 *)(v4 + v6) != *(unsigned __int8 *)(v8 + v6)
          || (*(unsigned char *)(v4 + v6 + 16) != 0) != (*(unsigned char *)(v8 + v6 + 16) != 0))
        {
          break;
        }
        if (*(unsigned char *)(v4 + v6 + 16))
        {
          unint64_t v11 = 0;
          uint64_t v12 = 0;
          if (!sub_10000B330((uint64_t *)(v4 + v6 + 8), &v12)
            || (sub_10000B330((uint64_t *)(*((void *)a2 + 1) + v6 + 8), &v11) & 1) == 0)
          {
            sub_10000B4E8(&v11);
            sub_10000B4E8(&v12);
            return 0;
          }
          int v9 = CFEqual(v12, v11);
          sub_10000B4E8(&v11);
          sub_10000B4E8(&v12);
          if (!v9) {
            return 0;
          }
        }
        else
        {
          uint64_t result = CFEqual(*(CFTypeRef *)(v4 + v6 + 8), *(CFTypeRef *)(v8 + v6 + 8));
          if (!result) {
            return result;
          }
        }
        ++v7;
        uint64_t v4 = *((void *)a1 + 1);
        v6 += 24;
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 2) - v4) >> 3) <= v7) {
          return 1;
        }
      }
    }
  }
  return 0;
}

void sub_10001C25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_10001C278(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10000B534(a2, (uint64_t)"command ", 8);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  unint64_t v7 = std::locale::use_facet(&v14, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v14);
  std::ostream::put();
  uint64_t result = std::ostream::flush();
  if (*(void *)(a1 + 16) != *(void *)(a1 + 8))
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      sub_10000B534(a2, (uint64_t)"  [", 3);
      unint64_t v11 = (void *)std::ostream::operator<<();
      sub_10000B534(v11, (uint64_t)"] ", 2);
      uint64_t v12 = *(void *)(a1 + 8) + v9;
      if (*(unsigned char *)(v12 + 16))
      {
        v14.__locale_ = 0;
        if (sub_10000B330((uint64_t *)(v12 + 8), (CFTypeRef *)&v14.__locale_)) {
          sub_10000B250(a2, &v14.__locale_);
        }
        else {
          sub_10000B534(a2, (uint64_t)"[invalid bplist]", 16);
        }
        sub_10000B4E8((const void **)&v14.__locale_);
      }
      else
      {
        sub_10000ACB4((CFDataRef *)(v12 + 8), a2, a3);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
      unint64_t v13 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v14);
      std::ostream::put();
      uint64_t result = std::ostream::flush();
      ++v10;
      v9 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) > v10);
  }
  return result;
}

void sub_10001C4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *sub_10001C4DC(void *a1, uint64_t a2)
{
  return a1;
}

void sub_10001C510(void *a1)
{
  *a1 = off_10012A4F8;
  a1[1] = 0;
  operator new();
}

void sub_10001C5A4(_Unwind_Exception *a1)
{
  sub_10001C980(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C5C0(uint64_t result, char a2)
{
  **(unsigned char **)(result + 8) = a2;
  return result;
}

uint64_t sub_10001C5CC(uint64_t a1, char a2, const void **a3, char a4)
{
  uint64_t v5 = *a3;
  if (*a3)
  {
    uint64_t v8 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *a3;
    *a3 = 0;
    v13[0] = a2;
    std::locale v14 = v5;
    CFRetain(v5);
    char v15 = a4;
    unint64_t v9 = v8[2];
    if (v9 >= v8[3])
    {
      uint64_t v10 = sub_10001CA60(v8 + 1, v13);
    }
    else
    {
      *(unsigned char *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = v5;
      CFRetain(v5);
      *(unsigned char *)(v9 + 16) = v15;
      uint64_t v10 = v9 + 24;
      v8[2] = v9 + 24;
    }
    v8[2] = v10;
    sub_10000B4E8(&v14);
    sub_10000B4E8(&v12);
  }
  return a1;
}

void sub_10001C690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_10000B4E8(v9);
  sub_10000B4E8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C6C0(uint64_t a1, char a2, const UInt8 *a3, CFIndex a4)
{
  sub_10000A958((CFDataRef *)&v7, a3, a4);
  sub_10001C5CC(a1, a2, &v7, 0);
  sub_10000B4E8(&v7);
  return a1;
}

void sub_10001C71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C730(uint64_t a1, char a2, const UInt8 *a3)
{
  sub_10000A9D4((CFStringRef *)&v6, a3);
  sub_10001C5CC(a1, a2, &v6, 0);
  sub_10000B4E8(&v6);
  return a1;
}

void sub_10001C788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C79C(uint64_t a1, char a2, uint64_t a3)
{
  sub_10000AA98((CFNumberRef *)&v6, a3);
  sub_10001C5CC(a1, a2, &v6, 0);
  sub_10000B4E8(&v6);
  return a1;
}

void sub_10001C7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C808(uint64_t a1, char a2, int a3)
{
  sub_10000AB0C((CFBooleanRef *)&v6, a3);
  sub_10001C5CC(a1, a2, &v6, 0);
  sub_10000B4E8(&v6);
  return a1;
}

void sub_10001C860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C874(uint64_t a1, char a2, const UInt8 *a3, CFIndex a4)
{
  sub_10000A958((CFDataRef *)&v7, a3, a4);
  sub_10001C5CC(a1, a2, &v7, 1);
  sub_10000B4E8(&v7);
  return a1;
}

void sub_10001C8D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000B4E8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C8E4(uint64_t a1, char a2, const UInt8 *a3, CFIndex a4)
{
  return 1;
}

uint64_t sub_10001C900(uint64_t a1, char a2, const UInt8 *a3)
{
  return 1;
}

uint64_t sub_10001C91C(uint64_t a1, char a2, uint64_t a3)
{
  return 1;
}

uint64_t sub_10001C938(uint64_t a1, char a2, int a3)
{
  return 1;
}

uint64_t sub_10001C954(uint64_t a1, char a2, const UInt8 *a3, CFIndex a4)
{
  return 1;
}

uint64_t sub_10001C970@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *a2 = v2;
  return result;
}

uint64_t *sub_10001C980(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = (void **)(v2 + 8);
    sub_10001C9D8(&v3);
    operator delete();
  }
  return result;
}

void sub_10001C9D8(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    uint64_t v4 = (const void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 3;
        sub_10000B4E8(v4 - 2);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10001CA60(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_10000BA2C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = sub_100010844(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  int v16 = v11;
  long long v17 = &v10[24 * v9];
  *unint64_t v11 = *a2;
  uint64_t v12 = (const void *)*((void *)a2 + 1);
  *((void *)v11 + 1) = v12;
  if (v12)
  {
    CFRetain(v12);
    unint64_t v11 = v16;
  }
  v10[24 * v4 + 16] = a2[16];
  int v16 = v11 + 24;
  sub_10001CB88(a1, v15);
  uint64_t v13 = a1[1];
  sub_10001CCB8((uint64_t)v15);
  return v13;
}

void sub_10001CB74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001CCB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001CB88(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10001CC00((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10001CC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(unsigned char *)(v12 - 24) = *(unsigned char *)(a3 + v11 - 24);
      uint64_t v13 = *(const void **)(a3 + v11 - 16);
      *(void *)(v12 - 16) = v13;
      if (v13) {
        CFRetain(v13);
      }
      *(unsigned char *)(v12 - 8) = *(unsigned char *)(a3 + v11 - 8);
      v11 -= 24;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_10001CC94(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 8;
    do
    {
      sub_10000B4E8((const void **)(v4 + v2));
      v2 += 24;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001CCB8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_10000B4E8((const void **)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10001D6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_10001D6FC(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  uint64_t v8 = [v7 first];
  id v19 = [v8 copy];

  unint64_t v9 = [v7 second];
  id v10 = [v9 copy];

  uint64_t v11 = +[NSDate date];
  uint64_t v12 = [v7 second];

  if (!v12)
  {
    id v13 = v11;

    id v10 = v13;
  }
  [v11 timeIntervalSinceDate:v10];
  if (v14 <= 86400.0)
  {
    [v11 timeIntervalSinceDate:v19];
    if (v15 <= 86400.0)
    {
      id v17 = v19;
    }
    else
    {
      uint64_t v16 = +[NSDate dateWithTimeInterval:v11 sinceDate:-86400.0];

      id v17 = (id)v16;
    }
    id v19 = v17;
    [v10 timeIntervalSinceDate:v17];
    *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v18
                                                                + *(double *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                            + 24);
  }
  else
  {
    *a4 = 1;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
  }
}

id sub_10001DA9C()
{
  if (qword_10015A818 != -1) {
    dispatch_once(&qword_10015A818, &stru_10012A570);
  }
  id v0 = (void *)qword_10015A810;
  return v0;
}

void sub_10001DBC8(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  uint64_t v2 = (void *)qword_10015A810;
  qword_10015A810 = (uint64_t)v1;

  [(id)qword_10015A810 setDateStyle:2];
  uint64_t v3 = (void *)qword_10015A810;
  _[v3 setTimeStyle:2];
}

uint64_t sub_10001FBAC(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0;
      *(unsigned char *)(a1 + 28) |= 1u;
      while (1)
      {
        unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          goto LABEL_38;
        }
        v15 += 7;
        BOOL v9 = v16++ >= 9;
        if (v9)
        {
          uint64_t v17 = 0;
          goto LABEL_40;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v17 = 0;
      }
LABEL_40:
      *(void *)(a1 + 8) = v17;
    }
    else if (v12 == 2)
    {
      char v20 = 0;
      unsigned int v21 = 0;
      uint64_t v22 = 0;
      *(unsigned char *)(a1 + 28) |= 2u;
      while (1)
      {
        unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
        v22 |= (unint64_t)(v24 & 0x7F) << v20;
        if ((v24 & 0x80) == 0) {
          goto LABEL_42;
        }
        v20 += 7;
        BOOL v9 = v21++ >= 9;
        if (v9)
        {
          LODWORD(v22) = 0;
          goto LABEL_44;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v22) = 0;
      }
LABEL_44:
      *(_DWORD *)(a1 + 24) = v22;
    }
    else if (v12 == 1)
    {
      uint64_t v13 = PBReaderReadData();
      double v14 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000211FC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_34;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_34:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_36:
        *(_DWORD *)(a1 + 32) = v14;
        goto LABEL_37;
      case 2u:
        unint64_t v18 = objc_alloc_init(TASKIPAddress);
        [(id)a1 addIpv4:v18];
        goto LABEL_29;
      case 3u:
        unint64_t v18 = objc_alloc_init(TASKIPAddress);
        [(id)a1 addIpv6:v18];
LABEL_29:
        if PBReaderPlaceMark() && (sub_1000A8914((uint64_t)v18, a2))
        {
          PBReaderRecallMark();

LABEL_37:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      case 4u:
        uint64_t v19 = PBReaderReadString();
        char v20 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v19;

        goto LABEL_37;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_37;
    }
  }
}

void sub_100022318(id a1)
{
  qword_10015A820 = +[NSSet setWithArray:&off_100137A08];
  _objc_release_x1();
}

void sub_100022714(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) object];
  [v1 _performEvictionSweep];
}

void sub_100022AEC(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  unint64_t v6 = [v5 evictionDate];
  id v7 = [v6 compare:*(void *)(a1 + 32)];

  if (v7 == (id)-1)
  {
    char v8 = +[APSTTLCollection suppressedTTRTopics];
    if (!v8) {
      goto LABEL_6;
    }
    uint64_t v9 = [v5 topic];
    if (!v9) {
      goto LABEL_6;
    }
    int v10 = (void *)v9;
    uint64_t v11 = [v5 topic];
    unsigned int v12 = [v8 containsObject:v11];

    if (v12)
    {
      [*(id *)(a1 + 40) addObject:v15];
    }
    else
    {
LABEL_6:
      [*(id *)(a1 + 48) addObject:v15];
      unsigned int v13 = *(void **)(a1 + 56);
      uint64_t v14 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v5 itemState]);
      [v13 addObject:v14];
    }
  }
}

void *sub_100022CBC(void *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *uint64_t result = &off_10012A638;
  result[1] = v3;
  result[2] = a3;
  return result;
}

void *sub_100022CE8(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &off_10012A638;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_100022D58(uint64_t a1, uint64_t *a2)
{
  memset(v14, 0, 24);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 24))(a1, v14);
  uint64_t v4 = *a2;
  int v5 = *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 8);
  if (v3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v14[0];
      sub_10000B534(a2, (uint64_t)"  [", 3);
      uint64_t v9 = (void *)std::ostream::operator<<();
      int v10 = sub_10000B534(v9, (uint64_t)"]: ", 3);
      uint64_t v11 = sub_1000239E8(v10, (unint64_t *)(v8 + v6));
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
      unsigned int v12 = std::locale::use_facet(&v15, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(&v15);
      std::ostream::put();
      std::ostream::flush();
      ++v7;
      v6 += 24;
    }
    while (v3 != v7);
    uint64_t v4 = *a2;
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(v4 - 24)));
  unsigned int v13 = std::locale::use_facet(&v15, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 8) = v5;
  v15.__locale_ = (std::locale::__imp *)v14;
  sub_100022FE0((void ***)&v15);
}

void sub_100022F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, std::locale a14)
{
  a13 = &a10;
  sub_100022FE0((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_100022FB0(uint64_t *a1, uint64_t a2)
{
  return a1;
}

void sub_100022FE0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10000FFAC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_10002344C(void *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8 = a1 + 3;
  uint64_t v9 = (char *)a1 + *(void *)(*a1 - 24);
  int v10 = *((_DWORD *)v9 + 2);
  *((_DWORD *)v9 + 2) = v10 & 0xFFFFFFB5 | 8;
  char v14 = 48;
  sub_10002360C(a1, &v14);
  sub_10000B534(a1, (uint64_t)"( ", 2);
  unint64_t v11 = *a2;
  if (*a3 <= *a2)
  {
LABEL_4:
    uint64_t result = (uint64_t)sub_10000B534(a1, (uint64_t)")", 1);
  }
  else
  {
    while (v11 < *a2 + a4)
    {
      *(void *)((char *)v8 + *(void *)(*a1 - 24)) = 2;
      ++v11;
      std::ostream::operator<<();
      sub_10000B534(a1, (uint64_t)" ", 1);
      if (v11 >= *a3) {
        goto LABEL_4;
      }
    }
    sub_10000B534(a1, (uint64_t)"... ", 4);
    sub_10000B534(a1, (uint64_t)")", 1);
    unsigned int v13 = sub_10000B534(a1, (uint64_t)" sz=", 4);
    *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 2;
    uint64_t result = std::ostream::operator<<();
  }
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v10;
  return result;
}

void *sub_10002360C(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    int v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1000236C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *sub_1000236D4(void *result, uint64_t *a2, void *a3)
{
  uint64_t v3 = result;
  int v5 = result + 3;
  uint64_t v4 = *result;
  int v6 = *(_DWORD *)((char *)result + *(void *)(*result - 24) + 8);
  uint64_t v7 = *a3 - *a2;
  if (v7 >= 1)
  {
    int v23 = *(_DWORD *)((char *)result + *(void *)(*result - 24) + 8);
    uint64_t v8 = 0;
    uint64_t v24 = *a3 - *a2;
    std::string v25 = result + 1;
    uint64_t v9 = 16;
    do
    {
      uint64_t v28 = v9;
      if (v9 >= v7) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v9;
      }
      uint64_t v11 = *a2;
      uint64_t v27 = v8 + 16;
      if (v7 >= v8 + 16) {
        uint64_t v12 = v8 + 16;
      }
      else {
        uint64_t v12 = v7;
      }
      uint64_t v13 = *v3;
      *(_DWORD *)((char *)v25 + *(void *)(*v3 - 24)) = *(_DWORD *)((unsigned char *)v25 + *(void *)(*v3 - 24)) & 0xFFFFFFB5 | 8;
      uint64_t v29 = v12;
      unint64_t v14 = v11 + v12;
      *(void *)((char *)v5 + *(void *)(v13 - 24)) = 8;
      char v30 = 48;
      sub_10002360C(v3, &v30);
      std::locale v15 = (void *)std::ostream::operator<<();
      sub_10000B534(v15, (uint64_t)"   ", 3);
      for (uint64_t i = 0; i != 16; ++i)
      {
        if (v11 + v8 + i >= v14)
        {
          uint64_t v17 = v3;
          unint64_t v18 = "   ";
          uint64_t v19 = 3;
        }
        else
        {
          *(void *)((char *)v5 + *(void *)(*v3 - 24)) = 2;
          uint64_t v17 = (void *)std::ostream::operator<<();
          unint64_t v18 = " ";
          uint64_t v19 = 1;
        }
        sub_10000B534(v17, (uint64_t)v18, v19);
        if ((~(_BYTE)i & 7) == 0) {
          sub_10000B534(v3, (uint64_t)" ", 1);
        }
      }
      sub_10000B534(v3, (uint64_t)" |", 2);
      if (v8 != v29)
      {
        do
        {
          int v20 = *(unsigned __int8 *)(v11 + v8);
          if ((v20 - 127) < 0xFFFFFFA1) {
            LOBYTE(v20) = 46;
          }
          char v31 = v20;
          sub_10000B534(v3, (uint64_t)&v31, 1);
          ++v11;
          --v10;
        }
        while (v8 != v10);
      }
      unsigned int v21 = sub_10000B534(v3, (uint64_t)"|", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
      uint64_t v22 = std::locale::use_facet(&v32, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v32);
      std::ostream::put();
      uint64_t result = (void *)std::ostream::flush();
      uint64_t v9 = v28 + 16;
      v8 += 16;
      uint64_t v7 = v24;
    }
    while (v27 < v24);
    uint64_t v4 = *v3;
    int v6 = v23;
  }
  *(_DWORD *)((char *)v3 + *(void *)(v4 - 24) + 8) = v6;
  return result;
}

void sub_1000239D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18)
{
}

void *sub_1000239E8(void *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v5 = a2[1];
  unint64_t v6 = v3;
  sub_10002344C(a1, &v6, &v5, 64);
  return a1;
}

uint64_t sub_100023A2C()
{
  if (qword_10015A838 != -1) {
    dispatch_once(&qword_10015A838, &stru_10012A788);
  }
  return byte_10015A830;
}

void sub_100023A70(id a1)
{
  byte_10015A830 = CFPreferencesGetAppBooleanValue(@"supportsCriticalReliabilityFlushes", @"com.apple.apsd.overrides", 0) != 0;
}

void sub_10002453C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 184));
  _Unwind_Resume(a1);
}

void sub_100024574(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _processPotentialIdentityChanged];
    id WeakRetained = v2;
  }
}

id sub_1000245B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) rollTokensForAllBAAEnvironments];
}

void sub_1000249A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000249BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  uint64_t v4 = [*(id *)(a1 + 32) stateForProtocolConnection:a2];
  id v5 = [v4 userState];

  if (v3 >= (unint64_t)v5) {
    unint64_t v6 = (unint64_t)v5;
  }
  else {
    unint64_t v6 = v3;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
}

void sub_100025524(id a1)
{
  id v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    id v2 = v1;
    if (CFEqual(v1, @"AudioAccessory")) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = CFEqual(v2, @"AppleTV") != 0;
    }
    byte_10015A848 = v3;
    CFRelease(v2);
  }
}

void sub_1000277B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000277EC(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  if ([v5 isPowerEfficientToUse] && objc_msgSend(v5, "linkQuality") == -2)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
}

void sub_100027860(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  if ([v5 isPowerEfficientToUse] && objc_msgSend(v5, "linkQuality") == -2)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
}

id sub_100028700(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "__performIdleCheck");
}

id sub_100028CA8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _sendPresenceMessageOnProtocolConnection:a2 serverTime:0];
}

void sub_10002B678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002B6DC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002B6EC(uint64_t a1)
{
}

void sub_10002B6F4(void *a1, void *a2, unsigned char *a3)
{
  BOOL v3 = a2;
  id v5 = a2;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v6 = *(id *)(a1[4] + 280);
  id v7 = [v6 countByEnumeratingWithState:&v31 objects:v41 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v32;
    id v30 = v6;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v32 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = [*(id *)(a1[4] + 280) objectForKey:*(void *)(*((void *)&v31 + 1) + 8 * i)];
        uint64_t v12 = [v5 identifier];
        unsigned int v13 = [v11 needsToConnectOnInterface:v12];

        if (v13)
        {
          if (!*(void *)(*(void *)(a1[5] + 8) + 40))
          {
            uint64_t v14 = [v11 lastPresence];
            [v14 timeIntervalSinceNow];
            double v16 = fabs(v15);

            if (v16 > 240.0)
            {
              uint64_t v24 = +[APSLog courier];
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                std::string v25 = v3;
                uint64_t v26 = a1[4];
                uint64_t v27 = [v11 publicToken];
                *(_DWORD *)buf = 138412802;
                uint64_t v36 = v26;
                BOOL v3 = v25;
                id v6 = v30;
                __int16 v37 = 2112;
                unint64_t v38 = v27;
                __int16 v39 = 2048;
                double v40 = v16;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%@: Cannot send client connect message with token '%@' presence age %f because it is too old. Instead, tell the client to retry by sending a expired nonce message", buf, 0x20u);
              }
              [v11 handleExpiredNonceWithServerTime:0 shouldRollToken:0];
            }
            else
            {
              objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v3);
              objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), v11);
            }
          }
        }
        else
        {
          uint64_t v17 = [v5 identifier];
          unsigned int v18 = [v11 needsToDisconnectOnInterface:v17];

          if (v18)
          {
            uint64_t v19 = *(void *)(a1[7] + 8);
            if (!*(void *)(v19 + 40))
            {
              *(void *)(v19 + 40) = v11;
              id v28 = v11;

              objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v3);
              *a3 = 1;
              goto LABEL_22;
            }
          }
          else
          {
            int v20 = [v5 identifier];
            unsigned int v21 = [v11 isConnectedOnInterface:v20];

            if (v21)
            {
              uint64_t v22 = +[APSLog courier];
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v23 = a1[4];
                *(_DWORD *)buf = 138412546;
                uint64_t v36 = v23;
                __int16 v37 = 2112;
                unint64_t v38 = v11;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%@: Client device may think its disconnected, sending a note that its connected.  Client %@", buf, 0x16u);
              }

              [v11 noteIsConnected];
            }
          }
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v31 objects:v41 count:16];
    }
    while (v8);
  }
LABEL_22:
}

id sub_10002BA80(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) receivedConnectedResponseWithParameters:a2 onProtocolConnection:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

id sub_10002BA98(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) receivedConnectedResponseWithParameters:a2 onProtocolConnection:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

id sub_10002C058(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) receivedFilterResponseWithParameters:a2 onProtocolConnection:*(void *)(a1 + 40)];
}

void sub_10002C358(uint64_t a1, void *a2)
{
  id v12 = a2;
  BOOL v3 = [*(id *)(a1 + 32) preferredProtocolConnection];
  unsigned __int8 v4 = [v12 isEqual:v3];

  id v5 = [*(id *)(a1 + 40) filterVersionStateMachine];
  id v6 = [v12 identifier];
  unsigned __int8 v7 = [v5 everSentFilterOn:v6];

  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = [*(id *)(a1 + 32) preferredProtocolConnection];
  uint64_t v10 = [v9 identifier];
  id v11 = [v8 stateOnInterface:v10];

  if ((v4 & 1) == 0 && (v7 & 1) == 0 && v11 == (id)2) {
    [*(id *)(a1 + 32) _sendClientFilter:*(void *)(a1 + 40) onProtocolConnection:v12];
  }
}

void sub_10002C458(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = *(void **)(a1 + 32);
  id v7 = v3;
  id v5 = [v3 identifier];
  id v6 = [v4 stateOnInterface:v5];

  if (v6 == (id)2) {
    [*(id *)(a1 + 40) _sendClientFilter:*(void *)(a1 + 32) onProtocolConnection:v7];
  }
}

void sub_10002C7A0(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  unsigned int v6 = [v5 generationMatches:*(void *)(a1 + 72)];
  id v7 = +[APSLog courier];
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = [*(id *)(a1 + 48) integerValue];
      uint64_t v12 = *(void *)(a1 + 56);
      int v15 = 138413058;
      uint64_t v16 = v9;
      __int16 v17 = 2112;
      uint64_t v18 = v10;
      __int16 v19 = 2048;
      id v20 = v11;
      __int16 v21 = 2112;
      uint64_t v22 = v12;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@: Sending %@ proxied acknowledgement message with response %ld and messageId %@", (uint8_t *)&v15, 0x2Au);
    }

    objc_msgSend(v5, "sendMessageAcknowledgeMessageWithResponse:messageId:generation:token:", objc_msgSend(*(id *)(a1 + 48), "integerValue"), *(void *)(a1 + 56), *(void *)(a1 + 72), *(void *)(a1 + 64));
  }
  else
  {
    if (v8)
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138412546;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@: ignoring a proxied push ack response that is no longer relevant. (generation) %@", (uint8_t *)&v15, 0x16u);
    }
  }
  *a3 = 1;
}

id sub_10002CF4C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) preferredProtocolConnection];
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    unsigned __int16 v5 = (unsigned __int16)[*(id *)(a1 + 56) unsignedIntegerValue];
    id v6 = [*(id *)(a1 + 64) unsignedIntValue];
    uint64_t v7 = *(void *)(a1 + 72);
    id v8 = [*(id *)(a1 + 80) unsignedIntegerValue];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10002D074;
    void v11[3] = &unk_10012A8C0;
    v11[4] = *(void *)(a1 + 32);
    id v12 = v2;
    [v12 sendTokenGenerateMessageWithTopicHash:v3 baseToken:v4 appId:v5 expirationTTL:v6 vapidPublicKeyHash:v7 type:v8 withCompletion:v11];
  }
  uint64_t v9 = [v2 identifier];

  return v9;
}

id sub_10002D074(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleAppTokenGenerateResponse:a2 onProtocolConnection:*(void *)(a1 + 40)];
}

void sub_10002D084(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[APSLog courier];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    int v14 = 138413570;
    uint64_t v15 = v8;
    __int16 v16 = 2112;
    id v17 = v5;
    __int16 v18 = 2112;
    id v19 = v6;
    __int16 v20 = 2112;
    uint64_t v21 = v9;
    __int16 v22 = 2112;
    uint64_t v23 = v10;
    __int16 v24 = 2112;
    uint64_t v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@ Received response %@ and error %@ for token request for %@ topic %@ appId %@", (uint8_t *)&v14, 0x3Eu);
  }

  id v12 = [v5 objectForKey:@"APSProtocolAppTokenGenerateResponseToken"];
  if (!v12)
  {
    uint64_t v13 = +[APSLog courier];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
      sub_1000C7EB0((void *)a1, v13);
    }
  }
  [*(id *)(a1 + 40) handleAppTokenGenerateResponse:v5 error:v6];
}

void sub_10002D484(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) stateByInterfaceIdentifier];
  id v5 = [v3 identifier];
  id v6 = [v4 objectForKeyedSubscript:v5];
  id v7 = [v6 unsignedIntegerValue];

  if (v7 == (id)2)
  {
    objc_msgSend(*(id *)(a1 + 40), "_sendProxyChannelList:onConnectionType:", *(void *)(a1 + 48), objc_msgSend(v3, "connectionType"));
  }
  else
  {
    uint64_t v8 = +[APSLog courier];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = [v3 identifier];
      int v11 = 138412802;
      uint64_t v12 = v9;
      __int16 v13 = 2048;
      int v14 = v10;
      __int16 v15 = 2048;
      id v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@ Received a pubsub channel list and client isnt connected on interface %ld.  Client State: %ld", (uint8_t *)&v11, 0x20u);
    }
  }
}

void sub_10002D820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002D83C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    BOOL v10 = [v12 count]
       && [v7 length]
       && (unint64_t)([v8 length] != 0);
    [WeakRetained setCertificates:v12];
    [WeakRetained setNonce:v7];
    [WeakRetained setSignature:v8];
    uint64_t v11 = *(void *)(a1 + 32);
    if (v11) {
      (*(void (**)(uint64_t, BOOL))(v11 + 16))(v11, v10);
    }
  }
}

void sub_10002DAD0(uint64_t a1, __SecKey *a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2 && v5)
  {
    id v7 = +[NSMutableArray array];
    [v7 addObjectsFromArray:v6];
    id v17 = 0;
    id v18 = 0;
    BOOL v8 = sub_10007ECC0(0, a2, 0, (uint64_t *)&v18, &v17, *(void **)(a1 + 32), 0);
    id v9 = v18;
    BOOL v10 = v17;
    uint64_t v11 = +[APSLog courier];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v12 = @"NO";
      uint64_t v13 = *(void *)(a1 + 40);
      if (v8) {
        CFStringRef v12 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v20 = v13;
      __int16 v21 = 2112;
      CFStringRef v22 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@ generate nonce and sig success? %@", buf, 0x16u);
    }

    if (!v8) {
      [*(id *)(a1 + 40) _deleteClientIdentityRequestingReplacement];
    }
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14) {
      (*(void (**)(uint64_t, void *, id, void *))(v14 + 16))(v14, v7, v9, v10);
    }
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 48);
    id v16 = +[NSMutableArray array];
    (*(void (**)(uint64_t, void *, void, void))(v15 + 16))(v15, v16, 0, 0);
  }
}

uint64_t sub_10002DD68(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10002DEF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[APSLog courier];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@ - systemDidLock and we're connected via noncellular, sending inactive ping to the server", (uint8_t *)&v6, 0xCu);
  }

  [v3 sendSetActiveState:0 forInterval:0];
}

void sub_10002E03C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[APSLog courier];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@ - systemDidUnlock and we're connected via noncellular, sending active ping to the server", (uint8_t *)&v6, 0xCu);
  }

  [v3 sendSetActiveState:1 forInterval:600];
}

void sub_10002E274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10002E290(uint64_t a1, void *a2, unsigned char *a3)
{
  id result = [a2 interfaceConstraint];
  if (result == (id)1)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

void sub_10002E43C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_10002E46C(uint64_t a1, void *a2, unsigned char *a3)
{
  id result = [a2 isPowerEfficientToUse];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

id sub_10002E4B0(uint64_t a1, void *a2, unsigned char *a3)
{
  id result = [a2 isPowerEfficientToUse];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

void sub_10002EE0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10002EEA8;
  void v6[3] = &unk_10012A8E8;
  v6[4] = v4;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateConnectedProtocolConnectionsOfType:2 block:v6];
}

id sub_10002EEA8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  id result = [*(id *)(a1 + 32) _sendOutgoingMessage:*(void *)(a1 + 40) onProtocolConnection:a2];
  *a3 = 1;
  return result;
}

void sub_10002EEE0(id a1, APSProtocolConnection *a2, BOOL *a3)
{
}

void sub_10002EEEC(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 432);
  id v3 = [a2 identifier];
  [v2 handleConnectionClosedOnInterface:v3];
}

void sub_10002F00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    id v4 = [*(id *)(a1 + 32) delegate];
    [v4 courierIdentityBecameAvailable:*(void *)(a1 + 32)];
  }
}

void sub_10002F64C(id a1, APSProtocolConnection *a2, BOOL *a3)
{
}

id sub_100030274(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _disconnectTokenWithReason:100 onProtocolConnection:a2];
}

id sub_10003084C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _sendPresenceMessageOnProtocolConnection:a2 serverTime:0];
}

void sub_100032D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100032D90(uint64_t a1, void *a2, unsigned char *a3)
{
  id v9 = a2;
  id v5 = objc_msgSend(*(id *)(a1 + 32), "stateForProtocolConnection:");
  if ([v5 filterMode] == (id)2
    || ([*(id *)(a1 + 32) filterVersionStateMachine],
        int v6 = objc_claimAutoreleasedReturnValue(),
        [v9 identifier],
        id v7 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v8 = [v6 everHadAckOn:v7],
        v7,
        v6,
        (v8 & 1) == 0))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    *a3 = 1;
  }
}

void sub_100032FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100033014(uint64_t a1, void *a2, unsigned char *a3)
{
  id v9 = a2;
  id v5 = [*(id *)(a1 + 32) identifier];
  int v6 = [v9 identifier];
  unsigned __int8 v7 = [v5 isEqualToString:v6];

  if ((v7 & 1) == 0)
  {
    unsigned __int8 v8 = [*(id *)(a1 + 40) stateForProtocolConnection:v9];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v8 filterMode] == (id)2;

    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
      *a3 = 1;
    }
  }
}

void sub_10003323C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100033254(uint64_t a1, void *a2, unsigned char *a3)
{
  id v10 = a2;
  id v5 = [*(id *)(a1 + 32) identifier];
  int v6 = [v10 identifier];
  unsigned __int8 v7 = [v5 isEqualToString:v6];

  if ((v7 & 1) == 0)
  {
    unsigned __int8 v8 = *(void **)(a1 + 40);
    id v9 = [v10 identifier];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v8 filterModeOnInterface:v9] == (id)2;

    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
      *a3 = 1;
    }
  }
}

void sub_100033584(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [*(id *)(a1 + 32) filterVersionStateMachine];
  id v4 = [v6 identifier];
  unsigned int v5 = [v3 isOutOfDateOn:v4];

  if (v5) {
    [*(id *)(a1 + 32) _sendFilterMessageOnProtocolConnection:v6 withReason:7];
  }
}

void sub_100034A08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(id *)(a1 + 32) != v3)
  {
    unsigned int v5 = [v3 identifier];
    id v6 = [*(id *)(a1 + 32) identifier];
    unsigned __int8 v7 = [v5 isEqualToString:v6];

    if ((v7 & 1) == 0)
    {
      unsigned __int8 v8 = +[APSLog courier];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        int v11 = 138412802;
        uint64_t v12 = v9;
        __int16 v13 = 2112;
        uint64_t v14 = v10;
        __int16 v15 = 2112;
        id v16 = v4;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: Got connect message for new interface %@, disconnecting from old interface %@", (uint8_t *)&v11, 0x20u);
      }

      [v4 disconnectWithReason:7];
    }
  }
}

void sub_100034B3C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  [WeakRetained didConnectOrDisconnectTokenForCourier:*(void *)(a1 + 32) onProtocolConnection:*(void *)(a1 + 40)];
}

id sub_100034E18(uint64_t a1, void *a2)
{
  return [a2 noteConnectionFailureWithReason:*(unsigned int *)(a1 + 32)];
}

void sub_10003695C(uint64_t a1)
{
  id v2 = +[APSLog courier];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    unsigned int v5 = *(void **)(a1 + 64);
    id v6 = *(void **)(a1 + 72);
    int v20 = 138413058;
    uint64_t v21 = v3;
    __int16 v22 = 2048;
    uint64_t v23 = v5;
    __int16 v24 = 2112;
    uint64_t v25 = v4;
    __int16 v26 = 2048;
    uint64_t v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Sending acknowledgement message with response %ld and messageId %@ (%lu)", (uint8_t *)&v20, 0x2Au);
  }

  [*(id *)(a1 + 48) sendMessageAcknowledgeMessageWithResponse:*(void *)(a1 + 64) messageId:*(void *)(a1 + 40) generation:*(void *)(a1 + 80) token:0];
  if ([*(id *)(a1 + 56) isTracingEnabled])
  {
    unsigned __int8 v7 = [*(id *)(a1 + 56) tracingUUID];

    if (v7)
    {
      unsigned __int8 v8 = *(void **)(*(void *)(a1 + 32) + 480);
      uint64_t v9 = [*(id *)(a1 + 56) tracingUUID];
      uint64_t v10 = [*(id *)(a1 + 56) topic];
      [v8 addItem:v9 withInitialState:3 withTopic:v10];

      int v11 = +[APSLog courier];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        __int16 v13 = *(void **)(v12 + 480);
        uint64_t v14 = [*(id *)(a1 + 56) tracingUUID];
        __int16 v15 = +[NSNumber numberWithUnsignedInt:3];
        id v16 = [*(id *)(a1 + 56) topic];
        int v20 = 138413314;
        uint64_t v21 = v12;
        __int16 v22 = 2112;
        uint64_t v23 = v13;
        __int16 v24 = 2112;
        uint64_t v25 = v14;
        __int16 v26 = 2112;
        uint64_t v27 = v15;
        __int16 v28 = 2112;
        uint64_t v29 = v16;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@ Added tracing enabled message into collection. {Collection:%@; UUID:%@; State:%@; topic:%@}",
          (uint8_t *)&v20,
          0x34u);
      }
    }
  }
  id v17 = +[APSLog PUSHTRACE];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = [*(id *)(a1 + 56) tracingUUID];
    int v20 = 138412546;
    uint64_t v21 = v18;
    __int16 v22 = 2112;
    uint64_t v23 = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%@: Sending Push ACK. UUID: %@", (uint8_t *)&v20, 0x16u);
  }
}

id sub_100036C00(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = *(void (**)(uint64_t))(v3 + 16);
  id v5 = a2;
  v4(v3);
  [*(id *)(a1 + 32) setGuid:v5];

  uint64_t v7 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  return [v6 _notifyForIncomingMessage:v7];
}

void sub_100036E50(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);

    uint64_t v3 = +[APSLog courier];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1000C86FC();
    }

    objc_end_catch();
    JUMPOUT(0x100036E08);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000376B0(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v3 = [v10 identifier];
  id v4 = [*(id *)(a1 + 32) identifier];
  unsigned __int8 v5 = [v3 isEqualToString:v4];

  if ((v5 & 1) == 0)
  {
    id v6 = [*(id *)(a1 + 40) filterVersionStateMachine];
    uint64_t v7 = [v10 identifier];
    unsigned __int8 v8 = [*(id *)(a1 + 32) identifier];
    unsigned int v9 = [v6 hasStaleStateOn:v7 comparedTo:v8];

    if (v9)
    {
      [*(id *)(a1 + 40) logStateWithReason:@"DroppedInterfaceFilter"];
      [*(id *)(a1 + 40) _sendFilterMessageOnProtocolConnection:v10 withReason:8];
    }
  }
}

void sub_1000377B0(id a1, APSOutgoingMessage *a2, APSOutgoingMessageOriginator *a3)
{
  id v4 = a3;
  unsigned __int8 v5 = a2;
  [(APSOutgoingMessage *)v5 setCancelled:1];
  APSError();
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  [(APSOutgoingMessageOriginator *)v4 handleResult:v6 forSendingOutgoingMessage:v5];
}

void sub_100037AAC(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [v4 connectionType];
  if (v3 != [*(id *)(a1 + 32) connectionType]) {
    [*(id *)(a1 + 40) _sendFilterMessageOnProtocolConnection:v4 withReason:1];
  }
}

void sub_100037D78(uint64_t a1, char a2)
{
  id v4 = [*(id *)(a1 + 32) stateForProtocolConnection:*(void *)(a1 + 40)];
  [v4 setUserState:1];

  if (a2)
  {
    if ([*(id *)(a1 + 32) locallyDisabledFilterOptimization]) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = 0x2000;
    }
    if (sub_10007F1B4() && (uint64_t v5 = v5 | 0x5000, sub_10007F114()))
    {
      id v6 = [*(id *)(a1 + 32) clientIdentityProvider];
      uint64_t v7 = [*(id *)(a1 + 32) nonce];
      id v27 = 0;
      unsigned __int8 v8 = [v6 fetchHostVMCertAndSignNonce:v7 error:&v27];
      id v9 = v27;

      if (v9)
      {
        id v10 = +[APSLog courier];
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412546;
          uint64_t v29 = v11;
          __int16 v30 = 2112;
          id v31 = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@ Host identity signing failed!: %@", buf, 0x16u);
        }

        [*(id *)(a1 + 40) disconnectWithReason:14];
LABEL_31:

        return;
      }
    }
    else
    {
      unsigned __int8 v8 = 0;
    }
    id v14 = objc_alloc_init((Class)NSDate);
    [*(id *)(a1 + 32) setLastPresence:v14];

    uint64_t v23 = *(void *)(a1 + 48);
    __int16 v24 = *(void **)(a1 + 40);
    int v15 = *(unsigned __int8 *)(a1 + 56);
    if (*(unsigned char *)(a1 + 56))
    {
      id v16 = [*(id *)(a1 + 32) certificates];
      if (*(unsigned char *)(a1 + 56))
      {
        id v17 = [*(id *)(a1 + 32) nonce];
        if (*(unsigned char *)(a1 + 56))
        {
          uint64_t v18 = [*(id *)(a1 + 32) signature];
          char v19 = 0;
          char v20 = 0;
          if (*(unsigned char *)(a1 + 56)) {
            uint64_t v21 = v8;
          }
          else {
            uint64_t v21 = 0;
          }
        }
        else
        {
          uint64_t v21 = 0;
          char v20 = 0;
          uint64_t v18 = 0;
          char v19 = 1;
        }
        goto LABEL_24;
      }
      uint64_t v21 = 0;
      id v17 = 0;
    }
    else
    {
      uint64_t v21 = 0;
      id v17 = 0;
      id v16 = 0;
    }
    uint64_t v18 = 0;
    char v19 = 1;
    char v20 = 1;
LABEL_24:
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000380E4;
    v25[3] = &unk_10012A8C0;
    __int16 v22 = *(void **)(a1 + 40);
    v25[4] = *(void *)(a1 + 32);
    id v26 = v22;
    [v24 sendConnectMessageWithToken:v23 presenceFlags:v5 certificates:v16 nonce:v17 signature:v18 hostCertificateInfo:v21 withCompletion:v25];
    if ((v19 & 1) == 0) {

    }
    if ((v20 & 1) == 0) {
    if (v15)
    }

    goto LABEL_31;
  }
  uint64_t v12 = +[APSLog courier];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v29 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%@ Refreshing cert/nonce/sig failed, not sending a presence", buf, 0xCu);
  }

  [*(id *)(a1 + 40) disconnectWithReason:14];
}

id sub_1000380E4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) receivedConnectedResponseWithParameters:a2 onProtocolConnection:*(void *)(a1 + 40)];
}

void sub_1000381D8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setReason:2];
  [*(id *)(a1 + 40) _sendFilterMessageOnProtocolConnection:v4 withChange:*(void *)(a1 + 32)];
}

void sub_100038864(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  v63 = v13;
  v64 = [a1[4] _topicsByHashFromTopicStateDictionary:v13];
  v66 = [a1[4] _topicsByHashFromTopicStateDictionary:v14];
  v68 = [a1[4] _topicsByHashFromTopicStateDictionary:v15];
  v69 = [a1[4] _topicsByHashFromTopicStateDictionary:v16];
  v70 = [a1[4] _topicsByHashFromTopicStateDictionary:v17];
  char v20 = [a1[4] filterVersionStateMachine];
  uint64_t v21 = [a1[5] identifier];
  id v73 = 0;
  id v22 = [v20 versionToSendFor:v21 error:&v73];
  id v23 = v73;

  if (v23)
  {
    __int16 v24 = +[APSLog courier];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v75 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Error fetching filter version; disconnecting {versionError: %@}",
        buf,
        0xCu);
    }

    [a1[5] disconnectWithReason:6];
  }
  else
  {
    id v59 = v22;
    id v61 = v18;
    uint64_t v25 = +[APSLog courierOversized];
    id v60 = v17;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      id v55 = a1[4];
      unint64_t v26 = (unint64_t)[a1[6] reason];
      id v57 = v15;
      id v58 = v14;
      id v56 = v16;
      if (v26 > 8) {
        std::string v54 = 0;
      }
      else {
        std::string v54 = off_10012ACB0[v26];
      }
      id v27 = [a1[6] triggeringTopic];
      __int16 v28 = [a1[7] debugDescription];
      id v53 = a1[5];
      uint64_t v29 = APSPrettyPrintCollection();
      __int16 v30 = APSPrettyPrintCollection();
      id v31 = APSPrettyPrintCollection();
      long long v32 = APSPrettyPrintCollection();
      long long v33 = APSPrettyPrintCollection();
      *(_DWORD *)buf = 138414850;
      id v75 = v55;
      __int16 v76 = 2048;
      id v77 = v59;
      __int16 v78 = 2112;
      v79 = v54;
      __int16 v80 = 2112;
      v81 = v27;
      __int16 v82 = 2112;
      v83 = v28;
      __int16 v84 = 2114;
      id v85 = v53;
      __int16 v86 = 2112;
      v87 = v29;
      __int16 v88 = 2112;
      v89 = v30;
      __int16 v90 = 2112;
      v91 = v31;
      __int16 v92 = 2112;
      v93 = v32;
      __int16 v94 = 2112;
      v95 = v33;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%@: Sending filter message for version: %llu reason %@ triggeringTopic %@ with token %@ on interface %{public}@ with enabled topics = %@, opportunistic topics = %@, non-waking topics = %@, paused topics = %@, ignored topics = %@", buf, 0x70u);

      id v15 = v57;
      id v14 = v58;
      id v16 = v56;
      id v17 = v60;
    }

    unsigned int v34 = [a1[5] isConnected];
    id v35 = a1[4];
    if (v34)
    {
      uint64_t v36 = [v35 filterVersionStateMachine];
      __int16 v37 = [a1[5] identifier];
      unsigned __int8 v38 = [v36 everSentFilterOn:v37];

      if ((v38 & 1) == 0)
      {
        ++*((void *)a1[4] + 25);
        [*((id *)a1[4] + 28) hold];
      }
      unsigned __int8 v39 = [a1[4] expectsResponseForFilterMessageOnProtocolConnection:a1[5]];
      if (_os_feature_enabled_impl() && [a1[5] interfaceConstraint] == (id)1)
      {
        uint64_t v40 = [a1[4] _ultraConstrainedTopicsFromTopicDictionary:v64];

        uint64_t v65 = [a1[4] _ultraConstrainedTopicsFromTopicDictionary:v66];

        uint64_t v67 = [a1[4] _ultraConstrainedTopicsFromTopicDictionary:v68];

        [a1[4] _ultraConstrainedTopicsFromTopicDictionary:v69];
        v42 = id v41 = v15;

        [a1[4] _ultraConstrainedTopicsFromTopicDictionary:v70];
        uint64_t v44 = v43 = v16;

        v69 = (void *)v42;
        v70 = (void *)v44;
        id v16 = v43;
        id v15 = v41;
        unint64_t v45 = (void *)v67;
        v66 = (void *)v65;
        v68 = v45;
        v64 = (void *)v40;
      }
      id v17 = v60;
      id v46 = a1[7];
      v71[0] = _NSConcreteStackBlock;
      v71[1] = 3221225472;
      v71[2] = sub_100038F1C;
      v71[3] = &unk_10012A8C0;
      id v47 = a1[5];
      v71[4] = a1[4];
      id v72 = v47;
      LOBYTE(v52) = v39;
      [v72 sendFilterMessageWithEnabledTopicsByHash:v64 ignoredTopicsByHash:v66 opportunisticTopicsByHash:v68 nonWakingTopicsByHash:v69 pausedTopicsByHash:v70 saltsByTopic:v61 token:v46 version:v59 expectsResponse:v52 withCompletion:v71];
      if ((v39 & 1) == 0)
      {
        unint64_t v48 = [a1[4] filterVersionStateMachine];
        std::string v49 = [a1[5] identifier];
        [v48 noteAckedWithVersion:v59 on:v49];
      }
      size_t v50 = [a1[4] filterVersionStateMachine];
      std::string v51 = [a1[5] identifier];
      [v50 noteSentWithVersion:v59 on:v51];

      [a1[4] logStateWithReason:0];
      [a1[4] setHasFilterChanged:0];
      +[APSMetricLogger filterSent:connectionType:](APSMetricLogger, "filterSent:connectionType:", a1[6], [a1[5] connectionType]);
    }
    else
    {
      [v35 logStateWithReason:0];
    }
    id v18 = v61;
  }
}

id sub_100038F1C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) receivedFilterResponseWithParameters:a2 onProtocolConnection:*(void *)(a1 + 40)];
}

id sub_1000391D4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) receivedConnectedResponseWithParameters:a2 onProtocolConnection:*(void *)(a1 + 40)];
}

id sub_100039558(uint64_t a1, void *a2)
{
  return [a2 sendSetActiveState:1 forInterval:*(unsigned int *)(a1 + 32)];
}

id sub_100039AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return [*(id *)(*(void *)(a1 + 32) + 424) handleErrorSendingOutgoingMessage:*(void *)(a1 + 40) error:a3];
  }
  else {
    return _[*(id *)(a1 + 32) _handleOutgoingMessageAcknowledgment:a2 onProtocolConnection:*(void *)(a1 + 48)];
  }
}

void sub_100039EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose((const void *)(v8 - 64), 8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100039F24(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (![v6 connectionType])
  {
    uint64_t v5 = (unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    id v4 = v6;
    goto LABEL_6;
  }
  BOOL v3 = [v6 connectionType] == (id)1;
  id v4 = v6;
  if (v3)
  {
    uint64_t v5 = (unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
LABEL_6:
    unsigned char *v5 = 1;
  }
}

Class sub_10003A444(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_10015A878)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_10003A570;
    v3[4] = &unk_100129C08;
    void v3[5] = v3;
    long long v4 = off_10012AC98;
    uint64_t v5 = 0;
    qword_10015A878 = _sl_dlopen();
  }
  if (!qword_10015A878) {
    sub_1000C8764(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("SafetyAlerts");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000C87E4();
  }
  qword_10015A870 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10003A570()
{
  uint64_t result = _sl_dlopen();
  qword_10015A878 = result;
  return result;
}

void sub_10003A964(uint64_t a1, uint64_t a2)
{
  id v2 = [*(id *)(a1 + 32) stateForProtocolConnection:a2];
  [v2 setTrackingState:0];
}

id sub_10003A9B0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) sendPresenceTrackingRequestOnProtocolConnection:a2];
}

uint64_t sub_10003B2F0(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = objc_alloc_init(TASKRequest);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark() || (sub_10006EDB8((uint64_t)v12, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10003B7EC(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = objc_alloc_init(TASKEdgeDnsInput);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark() || (sub_10007646C((uint64_t)v12, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10003BCB4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_10003BCD0(uint64_t a1, void *a2)
{
  BOOL v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    int v10 = +[APSLog courier];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v11 = @"YES";
      if (!v3) {
        CFStringRef v11 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      CFStringRef v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Got called to checkpoint app token cleanup run state with non null activity %@", buf, 0xCu);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10003BF28;
    block[3] = &unk_10012A5E0;
    block[4] = WeakRetained;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  else if (!state)
  {
    unint64_t v6 = +[APSLog courier];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Told to check in for app token cleanup activity", buf, 2u);
    }

    xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v7, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_int64(v7, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_4_HOURS);
    xpc_dictionary_set_int64(v7, XPC_ACTIVITY_INTERVAL, 43200);
    xpc_object_t v8 = xpc_activity_copy_criteria(v3);
    id v9 = v8;
    if (!v8 || !xpc_equal(v8, v7)) {
      xpc_activity_set_criteria(v3, v7);
    }
  }
}

id sub_10003BF28(uint64_t a1)
{
  return _[*(id *)(a1 + 32) performAppTokenCleanup];
}

void sub_10003CACC(id *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    char v4 = [a1[5] publicToken];
    [a1[4] setBaseToken:v4];

    [a1[5] saveToken:v3 forInfo:a1[4] connection:a1[6]];
    unsigned int v5 = +[APSLog courier];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = a1[4];
      id v6 = a1[5];
      int v8 = 138412802;
      id v9 = v6;
      __int16 v10 = 2112;
      id v11 = v3;
      __int16 v12 = 2112;
      id v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@ handleReceivedToken: %@ forInfo %@", (uint8_t *)&v8, 0x20u);
    }

    [a1[6] handleReceivedToken:v3 forInfo:a1[4]];
  }
}

id sub_10003CBE8(id *a1, void *a2)
{
  char v4 = a1 + 4;
  id v5 = [a1[4] type];
  id v6 = v4[1];
  id v7 = (void *)v6[5];
  int v8 = (void *)v6[39];
  id v9 = [*v4 topic];
  __int16 v10 = [v4[1] courierUser];
  id v11 = [v8 createTopicHashForTopic:v9 user:v10 shouldSalt:0];
  __int16 v12 = [v7 hasTopicHash:v11 includeRecentlyRemoved:0];

  if (v5 != (id)2 || !v12)
  {
    id v16 = (void *)*((void *)a1[5] + 39);
    id v17 = [a1[4] topic];
    id v18 = [a1[5] courierUser];
    [v16 createTopicHashForTopic:v17 user:v18 shouldSalt:v5 == (id)2];
    id v14 = (id)objc_claimAutoreleasedReturnValue();

    char v19 = [a1[4] vapidPublicKey];

    if (v19)
    {
      char v20 = [*v4 vapidPublicKey];
      char v19 = sub_10007E944(v20);

      BOOL v21 = v19 == 0;
      if (!v14) {
        goto LABEL_15;
      }
    }
    else
    {
      BOOL v21 = 0;
      if (!v14) {
        goto LABEL_15;
      }
    }
    if (!v21)
    {
      id v22 = [*v4 identifier];

      if (v22)
      {
        id v23 = [a1[5] userAppIDManager];
        __int16 v24 = [*((id *)a1[5] + 2) name];
        uint64_t v25 = [a1[4] topic];
        unint64_t v26 = [a1[4] identifier];
        id v27 = [v23 loadOrCreateAppIdForEnvironmentName:v24 topic:v25 identifier:v26];

        if (!v27)
        {
          id v41 = +[APSLog courier];
          if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT)) {
            sub_1000C8964(v4, v41);
          }

          if (a2)
          {
            APSError();
            id v15 = 0;
            *a2 = (id)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            id v15 = 0;
          }
          goto LABEL_30;
        }
        id v28 = [v27 unsignedShortValue];
      }
      else
      {
        id v28 = 0;
      }
      __int16 v30 = [*v4 expirationDate];
      if (v30)
      {
        id v31 = [*v4 expirationDate];
        [v31 timeIntervalSinceNow];
        uint64_t v33 = v32;
      }
      else
      {
        uint64_t v33 = 0;
      }

      id v35 = +[APSLog courier];
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        id v36 = a1[5];
        __int16 v37 = [a1[4] identifier];
        *(_DWORD *)buf = 138412802;
        id v51 = v36;
        __int16 v52 = 1024;
        int v53 = (int)v28;
        __int16 v54 = 2112;
        id v55 = v37;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%@ generated appId %d for identifier %@", buf, 0x1Cu);
      }
      id v29 = [a1[5] preferredProtocolConnection];
      if (v29)
      {
        unsigned __int8 v38 = [a1[6] publicToken];
        id v39 = [a1[4] type];
        uint64_t v44 = _NSConcreteStackBlock;
        uint64_t v45 = 3221225472;
        id v46 = sub_10003D15C;
        id v47 = &unk_10012A8C0;
        id v48 = a1[5];
        id v29 = v29;
        id v49 = v29;
        [v29 sendTokenGenerateMessageWithTopicHash:v14 baseToken:v38 appId:v28 expirationTTL:v33 vapidPublicKeyHash:v19 type:v39 withCompletion:&v44];
      }
LABEL_29:
      id v15 = objc_msgSend(v29, "identifier", v42, v43, v44, v45, v46, v47, v48);

LABEL_30:
      goto LABEL_31;
    }
LABEL_15:
    if (a2)
    {
      if (v5 == (id)2)
      {
        APSURLTokenError();
        id v29 = 0;
        *a2 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_29;
      }
      unsigned int v34 = [*v4 topic];
      [*v4 identifier];
      v43 = uint64_t v42 = v34;
      APSError();
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    id v29 = 0;
    goto LABEL_29;
  }
  id v13 = +[APSLog courier];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
    sub_1000C88E8((uint64_t *)v4, v13);
  }

  APSURLTokenError();
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  [a1[6] handleReceivedTokenError:v14 forInfo:a1[4]];
  if (a2)
  {
    id v14 = v14;
    id v15 = 0;
    *a2 = v14;
  }
  else
  {
    id v15 = 0;
  }
LABEL_31:

  return v15;
}

id sub_10003D15C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleAppTokenGenerateResponse:a2 onProtocolConnection:*(void *)(a1 + 40)];
}

void sub_10003D16C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[APSLog courier];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = [*(id *)(a1 + 40) topic];
    __int16 v10 = [*(id *)(a1 + 40) identifier];
    int v19 = 138413314;
    uint64_t v20 = v8;
    __int16 v21 = 2112;
    id v22 = v5;
    __int16 v23 = 2112;
    id v24 = v6;
    __int16 v25 = 2112;
    unint64_t v26 = v9;
    __int16 v27 = 2112;
    id v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@ Received response %@ and error %@ for token request for topic %@ identifier %@", (uint8_t *)&v19, 0x34u);
  }
  id v11 = [v5 objectForKey:@"APSProtocolAppTokenGenerateResponse"];
  __int16 v12 = [v5 objectForKey:@"APSProtocolAppTokenGenerateResponseToken"];
  if (v11)
  {
    id v13 = [v5 objectForKey:@"APSProtocolAppTokenGenerateResponseTopicHash"];
    id v14 = [v5 objectForKey:@"APSProtocolAppTokenGenerateResponseAppId"];
    if (!v14)
    {
      id v14 = +[NSNumber numberWithInt:0];
    }
    switch([v11 intValue])
    {
      case 0u:
        if ((int)[v14 intValue] >= 0x10000 || v13 == 0 || v12 == 0)
        {
          id v17 = +[APSLog courier];
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            sub_1000C8B28((uint64_t)v5, v17);
          }
          goto LABEL_29;
        }
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        goto LABEL_30;
      case 1u:
        id v17 = +[APSLog courier];
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_1000C8BA0();
        }
        goto LABEL_29;
      case 2u:
        id v17 = +[APSLog courier];
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_1000C8BD4();
        }
        goto LABEL_29;
      case 4u:
        id v17 = +[APSLog courier];
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_1000C8C08();
        }
        goto LABEL_29;
      case 5u:
        id v17 = +[APSLog courier];
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_1000C8C3C();
        }
        goto LABEL_29;
      default:
        id v17 = +[APSLog courier];
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_1000C8AF4();
        }
LABEL_29:

LABEL_30:
        break;
    }
  }
  else
  {
    id v13 = +[APSLog courier];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
      sub_1000C8AB4();
    }
  }

  if (!v12)
  {
    id v18 = +[APSLog courier];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT)) {
      sub_1000C8A2C(a1, v18);
    }

    [*(id *)(a1 + 48) handleReceivedTokenError:v6 forInfo:*(void *)(a1 + 40)];
  }
}

void sub_10003DD30(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

APSProcessModeUserTracker *sub_10003DD58()
{
  id v0 = [APSProcessModeUserTracker alloc];
  uint64_t v1 = +[APSMultiUserMode sharedInstance];
  uint64_t v2 = [(APSProcessModeUserTracker *)v0 initWithMultiUserMode:v1];

  return v2;
}

BOOL sub_10003DE70(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
      return v3 == 0;
    }
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      int v3 = 1;
      return v3 == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LOBYTE(v6) = 0;
    }
LABEL_13:
    if (v3) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = (v6 & 7) == 4;
    }
    if (v10) {
      return v3 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

void sub_10003E29C(id a1, NSString *a2, BOOL a3, BOOL a4, NSNumber *a5, NSNumber *a6)
{
  BOOL v7 = a4;
  BOOL v8 = a3;
  uint64_t v9 = a5;
  BOOL v10 = a6;
  id v11 = +[APSLog telemetry];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v12 = @"NO";
    int v14 = 138413058;
    if (v8) {
      CFStringRef v13 = @"YES";
    }
    else {
      CFStringRef v13 = @"NO";
    }
    CFStringRef v15 = v13;
    __int16 v16 = 2112;
    if (v7) {
      CFStringRef v12 = @"YES";
    }
    CFStringRef v17 = v12;
    __int16 v18 = 2112;
    int v19 = v9;
    __int16 v20 = 2112;
    __int16 v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reporting wake-to-live metric {connectedOnWake: %@, everConnected: %@, timeToFullyConnect: %@, timeToLastFromStorage: %@}", (uint8_t *)&v14, 0x2Au);
  }
}

uint64_t sub_10003EFDC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_45;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_47:
        uint64_t v28 = 28;
        goto LABEL_52;
      case 2u:
        __int16 v18 = objc_alloc_init(PSAppChannelSubscriptions);
        [(id)a1 addAppChannelSubscriptions:v18];
        if (PBReaderPlaceMark() && sub_10006A528(v18, a2))
        {
          PBReaderRecallMark();

LABEL_57:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v14 |= (unint64_t)(v22 & 0x7F) << v19;
            if (v22 < 0)
            {
              v19 += 7;
              BOOL v9 = v20++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_51:
        uint64_t v28 = 24;
LABEL_52:
        *(_DWORD *)(a1 + v28) = v14;
        goto LABEL_57;
      case 4u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (2)
        {
          unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1 || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if (v27 < 0)
            {
              v23 += 7;
              BOOL v9 = v24++ >= 9;
              if (v9)
              {
                uint64_t v25 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v25 = 0;
        }
LABEL_56:
        *(void *)(a1 + 8) = v25;
        goto LABEL_57;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_57;
    }
  }
}

uint64_t sub_10004062C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0;
      *(unsigned char *)(a1 + 28) |= 1u;
      while (1)
      {
        unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          goto LABEL_38;
        }
        v15 += 7;
        BOOL v9 = v16++ >= 9;
        if (v9)
        {
          uint64_t v17 = 0;
          goto LABEL_40;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v17 = 0;
      }
LABEL_40:
      *(void *)(a1 + 8) = v17;
    }
    else if (v12 == 2)
    {
      char v20 = 0;
      unsigned int v21 = 0;
      uint64_t v22 = 0;
      *(unsigned char *)(a1 + 28) |= 2u;
      while (1)
      {
        unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
        v22 |= (unint64_t)(v24 & 0x7F) << v20;
        if ((v24 & 0x80) == 0) {
          goto LABEL_42;
        }
        v20 += 7;
        BOOL v9 = v21++ >= 9;
        if (v9)
        {
          LODWORD(v22) = 0;
          goto LABEL_44;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v22) = 0;
      }
LABEL_44:
      *(_DWORD *)(a1 + 24) = v22;
    }
    else if (v12 == 1)
    {
      uint64_t v13 = PBReaderReadData();
      uint64_t v14 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100040D80(unint64_t a1)
{
  if (a1 >= 4)
  {
    uint64_t v1 = +[NSString stringWithFormat:@"UnknownInterface %ld", a1];
  }
  else
  {
    uint64_t v1 = (void *)*((void *)&off_10012ADD8 + a1);
  }
  return v1;
}

uint64_t sub_100040DE4()
{
  id v0 = (void *)qword_10015ADD8;
  qword_10015ADD8 = (uint64_t)&off_100137968;

  uint64_t v1 = (void *)qword_10015ADE0;
  qword_10015ADE0 = (uint64_t)&off_100137990;

  uint64_t v2 = (void *)qword_10015ADE8;
  qword_10015ADE8 = (uint64_t)&off_1001379B8;

  int v3 = (void *)qword_10015ADF0;
  qword_10015ADF0 = (uint64_t)&off_1001379E0;

  qword_10015A880 = objc_alloc_init(APSWakeStateManager);
  return _objc_release_x1();
}

uint64_t start()
{
  _set_user_dir_suffix();
  uint64_t v2 = objc_alloc_init(APSDaemon);
  if (v2)
  {
    int v3 = +[NSRunLoop currentRunLoop];
    [v3 run];
  }
  return 0;
}

id sub_100041950(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)NSMutableSet);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  char v4 = objc_msgSend(v1, "allValues", 0);
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        BOOL v9 = [*(id *)(*((void *)&v11 + 1) + 8 * i) topicName];
        [v2 addObject:v9];
      }
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }

  return v2;
}

id sub_100043A2C(unint64_t a1)
{
  if (a1 >= 0xC)
  {
    id v1 = +[NSString stringWithFormat:@"UnknownChange %ld", a1];
  }
  else
  {
    id v1 = *(&off_10012AE18 + a1);
  }
  return v1;
}

void sub_1000467CC(id a1)
{
}

void sub_1000467E0(uint64_t a1)
{
  id v2 = +[APSLog daemon];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = [*(id *)(a1 + 32) object];
    char v4 = [v3 _connectionsDebuggingState];
    int v5 = 138412290;
    id v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Printing all couriers and connection servers in response to USR1 signal: %@", (uint8_t *)&v5, 0xCu);
  }
}

id sub_1000468B8(uint64_t a1, void *a2)
{
  return _[a2 _receivedShutdownNotification];
}

void sub_1000468C0(id a1, OS_xpc_object *a2)
{
  id v2 = +[APSLog daemon];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received waking signal from IDS.", v3, 2u);
  }
}

void sub_100046930(id a1, OS_xpc_object *a2, OS_xpc_object *a3, OS_xpc_object *a4)
{
  int v10 = a2;
  id v6 = a3;
  uint64_t v7 = a4;
  BOOL v9 = APSGetXPCConnectionContext();
  aps_peer_event_handler(v6, v7, v9, 0);
}

void sub_1000469D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v22[0] = 0;
  v22[1] = 0;
  pthread_main_thread_np();
  pthread_dependency_init_np();
  qos_class_t v10 = qos_class_self();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100046B1C;
  block[3] = &unk_10012AF20;
  id v11 = *(id *)(a1 + 32);
  id v17 = v7;
  id v18 = v8;
  id v19 = v9;
  id v20 = v11;
  unsigned int v21 = v22;
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_block_t v15 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v10, 0, block);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v15);

  pthread_dependency_wait_np();
}

uint64_t sub_100046B1C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  uint64_t v2 = *(void *)(a1 + 64);
  return _pthread_dependency_fulfill_np(v2, 0);
}

void sub_100047254(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) object];
  [v1 updateSafeToSendFilterForce:0];
}

id sub_10004729C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateSafeToSendFilterForce:1];
}

void sub_10004891C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  int v5 = a3;
  id v6 = +[APSLog daemon];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    id v8 = v4;
    __int16 v9 = 2112;
    qos_class_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting connection %@ on peer: %@", (uint8_t *)&v7, 0x16u);
  }

  xpc_connection_set_context(v5, v4);
}

void sub_1000499F8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) object];
  [v1 _performPeriodicSignal];
}

id sub_100049CC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _performPeriodicSignal];
}

BOOL sub_10004AC5C(_OWORD *a1, void *a2)
{
  int v3 = a2;
  long long v4 = a1[1];
  *(_OWORD *)cf.val = *a1;
  *(_OWORD *)&cf.val[4] = v4;
  int v5 = SecTaskCreateWithAuditToken(0, &cf);
  if (v5)
  {
    id v6 = v5;
    *(void *)cf.val = 0;
    CFBooleanRef v7 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v5, v3, (CFErrorRef *)&cf);
    if (v7)
    {
      CFBooleanRef v8 = v7;
      CFTypeID v9 = CFGetTypeID(v7);
      BOOL v10 = v9 == CFBooleanGetTypeID() && CFBooleanGetValue(v8) != 0;
      CFRelease(v8);
    }
    else
    {
      BOOL v10 = 0;
    }
    if (*(void *)cf.val)
    {
      id v12 = +[APSLog daemon];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
        sub_1000C8E1C((uint64_t *)&cf, v12);
      }

      CFRelease(*(CFTypeRef *)cf.val);
    }
    CFRelease(v6);
  }
  else
  {
    id v11 = +[APSLog daemon];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      sub_1000C8DD8(v11);
    }

    BOOL v10 = 0;
  }

  return v10;
}

uint64_t sub_10004B518(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        BOOL v9 = v5++ >= 9;
        if (v9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((v6 >> 3) == 1) {
        break;
      }
      if (v12 != 3)
      {
        if (v12 != 2)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_46;
        }
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v25 = 20;
        goto LABEL_45;
      }
      uint64_t v22 = PBReaderReadString();
      unint64_t v23 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v22;

LABEL_46:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    char v18 = 0;
    unsigned int v19 = 0;
    uint64_t v15 = 0;
    while (1)
    {
      unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0) {
        goto LABEL_42;
      }
      v18 += 7;
      BOOL v9 = v19++ >= 9;
      if (v9)
      {
        LODWORD(v15) = 0;
        goto LABEL_44;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v15) = 0;
    }
LABEL_44:
    uint64_t v25 = 16;
LABEL_45:
    *(_DWORD *)(a1 + v25) = v15;
    goto LABEL_46;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10004D8E4(_Unwind_Exception *a1)
{
}

BOOL sub_10004D9A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 72) + 8);
  unint64_t v2 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = v2 + 1;
  unint64_t v3 = *(void *)(a1 + 88);
  if (v2 >= v3)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 80) + 8);
    if (!*(unsigned char *)(v5 + 24))
    {
      *(unsigned char *)(v5 + 24) = 1;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) - 1;
        uint64_t v7 = *(void *)(a1 + 32);
        id v8 = [*(id *)(a1 + 40) count];
        id v9 = [*(id *)(a1 + 48) count];
        id v10 = [*(id *)(a1 + 56) count];
        id v11 = [*(id *)(a1 + 64) count];
        int v13 = 134219266;
        uint64_t v14 = v6;
        __int16 v15 = 2112;
        uint64_t v16 = v7;
        __int16 v17 = 2048;
        id v18 = v8;
        __int16 v19 = 2048;
        id v20 = v9;
        __int16 v21 = 2048;
        id v22 = v10;
        __int16 v23 = 2048;
        id v24 = v11;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Stopped indexing hashes at index %lu {token: %@, enabledHashes.count: %lu, ignoredHashes.count: %lu, opportunisticHashes.count: %lu, pausedHashes.count: %lu}", (uint8_t *)&v13, 0x3Eu);
      }
    }
  }
  return v2 < v3;
}

void sub_10004DB08(uint64_t a1, void *a2, unsigned __int8 a3, void *a4)
{
  id v8 = a2;
  id v7 = a4;
  if ((unint64_t)[v8 length] > 0x1F)
  {
    [v7 addObject:v8];
  }
  else
  {
    [*(id *)(a1 + 32) appendItem:a3 data:v8];
    [*(id *)(*(void *)(a1 + 40) + 16) addDataWithAttributeId:a3 data:v8 isIndexable:(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))()];
  }
}

void sub_10004DBC4(void *a1, void *a2, unsigned __int8 a3)
{
  uint64_t v5 = (void *)a1[4];
  id v6 = a2;
  [v5 appendItem:a3 data:v6];
  [*(id *)(a1[5] + 16) addDataWithAttributeId:a3 data:v6 isIndexable:(*(uint64_t (**)(void))(a1[6] + 16))()];
}

void sub_10005285C(uint64_t a1)
{
  unint64_t v2 = [*(id *)(a1 + 32) object];
  unint64_t v3 = v2;
  if (v2)
  {
    objc_sync_enter(v2);
    --v3[34];
    objc_sync_exit(v3);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000529F8;
  v10[3] = &unk_10012B398;
  id v11 = *(id *)(a1 + 32);
  id v4 = *(id *)(a1 + 48);
  char v15 = *(unsigned char *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 40);
  id v13 = v4;
  id v14 = *(id *)(a1 + 56);
  uint64_t v5 = objc_retainBlock(v10);
  id v6 = v5;
  if (*(unsigned char *)(a1 + 65))
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100052C18;
    v8[3] = &unk_10012B3C0;
    id v9 = v5;
    dispatch_block_t v7 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INITIATED, 0, v8);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);
  }
  else
  {
    ((void (*)(void *))v5[2])(v5);
  }
}

void sub_1000529F8(uint64_t a1)
{
  unint64_t v2 = [*(id *)(a1 + 32) object];
  unint64_t v3 = [(atomic_ullong *)v2 connection];
  if (v3)
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    int v5 = *(unsigned __int8 *)(a1 + 64);
    id v6 = +[APSLog connectionServer];
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dispatching high priority message on server: %@", buf, 0xCu);
      }

      if (*(void *)(a1 + 56))
      {
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_100052C08;
        handler[3] = &unk_10012B370;
        id v12 = *(id *)(a1 + 56);
        xpc_connection_send_message_with_reply(v3, v4, (dispatch_queue_t)&_dispatch_main_q, handler);
      }
      else
      {
        xpc_connection_send_message(v3, v4);
      }
    }
    else
    {
      if (v7)
      {
        uint64_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dispatching low priority message on server: %@", buf, 0xCu);
      }

      xpc_connection_send_notification();
    }
    atomic_fetch_add(v2 + 23, 1uLL);
    +[NSDate timeIntervalSinceReferenceDate];
    v2[24] = v10;
  }
}

uint64_t sub_100052C08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100052C18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100052C28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000536B0(uint64_t a1, void *a2, void *a3)
{
  id v23 = a2;
  id v4 = a3;
  id v25 = objc_alloc_init((Class)NSMutableDictionary);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  obCFIndex j = v4;
  id v26 = [obj countByEnumeratingWithState:&v28 objects:v36 count:16];
  if (v26)
  {
    uint64_t v24 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v26; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v29 != v24) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v28 + 1) + 8 * i);
        BOOL v7 = [obj objectForKeyedSubscript:v6];
        v34[0] = @"total";
        uint64_t v8 = [v7 total];
        uint64_t v9 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v8 count]);
        v35[0] = v9;
        v34[1] = @"prevHour";
        atomic_ullong v10 = [v7 total];
        id v11 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v10 sumOfBucketType:0]);
        v35[1] = v11;
        v34[2] = @"prevDay";
        id v12 = [v7 total];
        id v13 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v12 sumOfBucketType:1]);
        v35[2] = v13;
        uint64_t v14 = +[NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:3];
        [v25 setObject:v14 forKeyedSubscript:v6];
      }
      id v26 = [obj countByEnumeratingWithState:&v28 objects:v36 count:16];
    }
    while (v26);
  }

  v32[0] = @"lastMsg";
  char v15 = [v23 total];
  [v15 lastMessageTime];
  uint64_t v16 = +[APSDatePrinter dateStringFromInterval:](APSDatePrinter, "dateStringFromInterval:");
  v33[0] = v16;
  v32[1] = @"prevHour";
  __int16 v17 = [v23 total];
  id v18 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v17 sumOfBucketType:0]);
  v33[1] = v18;
  v32[2] = @"prevDay";
  __int16 v19 = [v23 total];
  id v20 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v19 sumOfBucketType:1]);
  v32[3] = @"byTopic";
  v33[2] = v20;
  v33[3] = v25;
  __int16 v21 = +[NSDictionary dictionaryWithObjects:v33 forKeys:v32 count:4];

  return v21;
}

void sub_1000540C4(uint64_t a1, void *a2)
{
  unint64_t v2 = (void *)APSXPCMessageTypeKey;
  id v3 = a2;
  [v2 UTF8String];
  APSInsertIntsToXPCDictionary();
  APSInsertBoolsToXPCDictionary();
}

void sub_1000543CC(uint64_t a1)
{
  int v2 = sub_1000B5B00(*(_DWORD *)(a1 + 40), 0x3A98u);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100054460;
  v3[3] = &unk_10012B430;
  int v4 = v2;
  v3[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
}

void sub_100054460(uint64_t a1)
{
  int v2 = (mach_error_t *)(a1 + 40);
  int v3 = *(_DWORD *)(a1 + 40);
  int v4 = +[APSLog connectionServer];
  id WeakRetained = v4;
  if (!v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Successfully pinged client", (uint8_t *)&v17, 2u);
    }
    goto LABEL_10;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1000C9064(a1, v2, WeakRetained);
  }

  if (*v2 == 268435460)
  {
    uint64_t v6 = +[APSLog connectionServer];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v17 = 138412290;
      uint64_t v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@ ping client timed out", (uint8_t *)&v17, 0xCu);
    }

    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = +[NSSet set];
    atomic_ullong v10 = +[NSSet set];
    id v11 = +[NSSet set];
    id v12 = +[NSSet set];
    [v8 setEnabledTopics:v9 ignoredTopics:v10 opportunisticTopics:v11 nonWakingTopics:v12];

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
    [WeakRetained connectionWasClosed:*(void *)(a1 + 32)];
LABEL_10:

    return;
  }
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 283))
  {
    id v13 = +[APSLog connectionServer];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      int v17 = 138412290;
      uint64_t v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%@: Forcing a fresh mach port", (uint8_t *)&v17, 0xCu);
    }

    char v15 = *(_DWORD **)(a1 + 32);
    mach_port_name_t v16 = v15[8];
    if (v16)
    {
      mach_port_deallocate(mach_task_self_, v16);
      *(_DWORD *)(*(void *)(a1 + 32) + 32) = 0;
      char v15 = *(_DWORD **)(a1 + 32);
    }
    [v15 _initiateConnectionIfNecessary];
  }
}

void sub_1000546CC(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  int v3 = +[NSSet set];
  int v4 = +[NSSet set];
  int v5 = +[NSSet set];
  uint64_t v6 = +[NSSet set];
  [v2 setEnabledTopics:v3 ignoredTopics:v4 opportunisticTopics:v5 nonWakingTopics:v6];

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  [WeakRetained connectionWasClosed:*(void *)(a1 + 32)];
}

void sub_1000548FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [APSXPCMessageTypeKey UTF8String];
  APSInsertIntsToXPCDictionary();
  int v5 = *(void **)(a1 + 32);
  int v4 = (id *)(a1 + 32);
  uint64_t v6 = objc_msgSend(v5, "dictionaryRepresentation", 43, 0);
  uint64_t v7 = APSCreateXPCObjectFromDictionary();

  if (v7)
  {
    xpc_dictionary_set_value(v3, "message", v7);
  }
  else
  {
    uint64_t v8 = +[APSLog connectionServer];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1000C9108(v4, v8);
    }
  }
}

void sub_100054B30(uint64_t a1, void *a2)
{
  id v3 = (void *)APSXPCMessageTypeKey;
  id v4 = a2;
  [v3 UTF8String];
  APSInsertIntsToXPCDictionary();
  id v5 = objc_msgSend(*(id *)(a1 + 32), "code", 41, 0);
  uint64_t v9 = *(void *)(a1 + 48);
  id v8 = v5;
  APSInsertIntsToXPCDictionary();
  uint64_t v6 = *(void *)(a1 + 56);
  APSInsertNSUIntegersToXPCDictionary();
  uint64_t v7 = objc_msgSend(*(id *)(a1 + 32), "localizedDescription", v6, 0, v8, "sendRTT", v9, 0);
  APSInsertNSStringsToXPCDictionary();
}

void sub_10005523C(uint64_t a1, void *a2)
{
  id v3 = (void *)APSXPCMessageTypeKey;
  id v4 = a2;
  [v3 UTF8String];
  APSInsertIntsToXPCDictionary();
  id v5 = objc_msgSend(*(id *)(a1 + 32), "dictionaryRepresentation", 54, 0);
  APSCreateXPCObjectFromDictionary();
  xpc_object_t value = (xpc_object_t)objc_claimAutoreleasedReturnValue();

  xpc_dictionary_set_value(v4, "info", value);
  uint64_t v6 = +[NSKeyedArchiver archivedDataWithRootObject:*(void *)(a1 + 40) requiringSecureCoding:1 error:0];
  APSInsertDatasToXPCDictionary();
}

void sub_1000555F4(uint64_t a1, void *a2)
{
  id v3 = (void *)APSXPCMessageTypeKey;
  id v6 = a2;
  [v3 UTF8String];
  APSInsertIntsToXPCDictionary();
  id v4 = objc_msgSend(*(id *)(a1 + 32), "identifier", 46, 0);
  id v5 = [*(id *)(a1 + 32) topic];
  APSInsertNSStringsToXPCDictionary();

  APSInsertDatasToXPCDictionary();
}

void sub_1000556C8(uint64_t a1, void *a2)
{
  id v3 = (void *)APSXPCMessageTypeKey;
  id v4 = a2;
  [v3 UTF8String];
  APSInsertIntsToXPCDictionary();
  id v5 = objc_msgSend(*(id *)(a1 + 32), "dictionaryRepresentation", 47, 0);
  APSCreateXPCObjectFromDictionary();
  xpc_object_t value = (xpc_object_t)objc_claimAutoreleasedReturnValue();

  xpc_dictionary_set_value(v4, "info", value);
  APSInsertDatasToXPCDictionary();
}

void sub_10005578C(uint64_t a1, void *a2)
{
  id v3 = (void *)APSXPCMessageTypeKey;
  id v4 = a2;
  [v3 UTF8String];
  APSInsertIntsToXPCDictionary();
  id v5 = objc_msgSend(*(id *)(a1 + 32), "dictionaryRepresentation", 48, 0);
  APSCreateXPCObjectFromDictionary();
  xpc_object_t value = (xpc_object_t)objc_claimAutoreleasedReturnValue();

  xpc_dictionary_set_value(v4, "info", value);
  id v6 = [*(id *)(a1 + 40) dictionaryRepresentation];
  uint64_t v7 = APSCreateXPCObjectFromDictionary();

  xpc_dictionary_set_value(v4, "token", v7);
}

void sub_100055F08(uint64_t a1, void *a2)
{
  id v3 = a2;
  [APSXPCMessageTypeKey UTF8String];
  APSInsertIntsToXPCDictionary();
  if (*(void *)(a1 + 32)) {
    APSInsertDatasToXPCDictionary();
  }
}

void sub_100055F8C(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 object];
  [v4 handlePublicTokenDeliveryReply:v3];
}

void sub_1000566C4(uint64_t a1, void *a2)
{
  int v2 = (void *)APSXPCMessageTypeKey;
  id v3 = a2;
  [v2 UTF8String];
  APSInsertIntsToXPCDictionary();
  APSInsertIntsToXPCDictionary();
  APSInsertIntsToXPCDictionary();
}

void sub_100056890(uint64_t a1, void *a2)
{
  int v2 = (void *)APSXPCMessageTypeKey;
  id v3 = a2;
  [v2 UTF8String];
  APSInsertIntsToXPCDictionary();
  APSInsertIntsToXPCDictionary();
  APSInsertIntsToXPCDictionary();
}

void sub_100056A84(uint64_t a1, void *a2)
{
  int v2 = (void *)APSXPCMessageTypeKey;
  id v3 = a2;
  [v2 UTF8String];
  APSInsertIntsToXPCDictionary();
  APSInsertNSStringsToXPCDictionary();
  APSInsertNSArraysToXPCDictionary();
}

void sub_100059F6C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 8u);
}

void sub_10005A0B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005A18C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005A954(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[APSLog stream];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v8 + 58)) {
      CFStringRef v9 = @"YES";
    }
    else {
      CFStringRef v9 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    CFStringRef v29 = (const __CFString *)v8;
    __int16 v30 = 2112;
    CFStringRef v31 = v5;
    __int16 v32 = 2112;
    CFStringRef v33 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "APSTCPStream %@ got config %@  -- opened? %@", buf, 0x20u);
  }

  if (*(unsigned char *)(*(void *)(a1 + 32) + 58))
  {
    if (v5 && !v6)
    {
      if (!+[APSSimulatorSupport isSimulator]
        || ([(__CFString *)v5 simulatorConnectionEnabled],
            uint64_t v10 = objc_claimAutoreleasedReturnValue(),
            v10,
            v10))
      {
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
        [WeakRetained tcpStream:*(void *)(a1 + 32) receivedServerBag:v5];

        id v12 = [(__CFString *)v5 nagleEnabled];
        id v13 = v12;
        if (v12)
        {
          *(unsigned char *)(*(void *)(a1 + 32) + 132) = [v12 BOOLValue];
          uint64_t v14 = +[APSLog stream];
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v15 = *(void *)(a1 + 32);
            CFStringRef v16 = @"YES";
            if (!*(unsigned char *)(v15 + 132)) {
              CFStringRef v16 = @"NO";
            }
            *(_DWORD *)buf = 138412546;
            CFStringRef v29 = (const __CFString *)v15;
            __int16 v30 = 2112;
            CFStringRef v31 = v16;
            int v17 = "%@: nagleEnabled is %@ from config bag";
LABEL_27:
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v17, buf, 0x16u);
          }
        }
        else
        {
          uint64_t v14 = +[APSLog stream];
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = *(void *)(a1 + 32);
            CFStringRef v23 = @"YES";
            if (!*(unsigned char *)(v22 + 132)) {
              CFStringRef v23 = @"NO";
            }
            *(_DWORD *)buf = 138412546;
            CFStringRef v29 = (const __CFString *)v22;
            __int16 v30 = 2112;
            CFStringRef v31 = v23;
            int v17 = "%@: nagleEnabled is not available from config bag, default %@";
            goto LABEL_27;
          }
        }

        [*(id *)(a1 + 32) _connectToServerWithConfiguration:v5];
LABEL_35:

        goto LABEL_36;
      }
      uint64_t v24 = +[APSLog stream];
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        id v25 = [(__CFString *)v5 simulatorConnectionEnabled];
        CFStringRef v26 = @"YES";
        if (!v25) {
          CFStringRef v26 = @"NO";
        }
        *(_DWORD *)buf = 138412290;
        CFStringRef v29 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Simulator connection not enabled {simulatorConnectionEnabled:%@} - disconnecting", buf, 0xCu);
      }
      [*(id *)(a1 + 32) close];
      id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
      uint64_t v19 = *(void *)(a1 + 32);
LABEL_34:
      char v27 = APSError();
      [v13 tcpStream:v19 errorOccured:v27];

      goto LABEL_35;
    }
    uint64_t v18 = +[APSLog stream];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFStringRef v29 = v6;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Failed to load config bag: %@", buf, 0xCu);
    }

    if (+[APSSimulatorSupport isSimulator])
    {
      [*(id *)(a1 + 32) close];
      id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
      uint64_t v19 = *(void *)(a1 + 32);
      goto LABEL_34;
    }
    id v20 = +[APSLog stream];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v21 = [*(id *)(*(void *)(a1 + 32) + 8) name];
      *(_DWORD *)buf = 138412290;
      CFStringRef v29 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Using DNS TXT record lookup to determine load balance count for %@", buf, 0xCu);
    }
    [*(id *)(a1 + 32) _openWithTXTLookup];
  }
LABEL_36:
}

id sub_10005B0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, void *a11)
{
  return _[a11 _queryRecordReply:a9 length:a8 ttl:a10 errorCode:a4];
}

void *sub_10005CE1C(char *a1)
{
  memset(v5, 0, sizeof(v5));
  if (inet_pton(2, a1, (char *)v5 + 4) || inet_pton(30, a1, (char *)v5 + 8))
  {
    int v2 = malloc_type_malloc(0x80uLL, 0x1000040AE2C30F4uLL);
    __memcpy_chk();
  }
  else
  {
    id v4 = +[APSLog stream];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000C9B64();
    }

    return 0;
  }
  return v2;
}

id sub_10005D368(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 stream:a1 handleEvent:a2];
}

void sub_10005DBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005DC04(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005DC14(uint64_t a1)
{
}

void sub_10005DC1C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v11 = a2;
  id v8 = a3;
  if (v11) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 136), a2);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a4 = 1;
}

int64_t sub_10005E3D0(id a1, APSPushRecord *a2, APSPushRecord *a3)
{
  id v4 = a3;
  id v5 = [(APSPushRecord *)a2 timestamp];
  id v6 = [(APSPushRecord *)v4 timestamp];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_10005EC08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100060B80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100061BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100061BB8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 isEager];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_100062428(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_45;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_47:
        uint64_t v28 = 24;
        goto LABEL_52;
      case 2u:
        uint64_t v18 = objc_alloc_init(TASKOutput);
        objc_storeStrong((id *)(a1 + 16), v18);
        if PBReaderPlaceMark() && (sub_100077F6C((uint64_t)v18, a2))
        {
          PBReaderRecallMark();

LABEL_57:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v14 |= (unint64_t)(v22 & 0x7F) << v19;
            if (v22 < 0)
            {
              v19 += 7;
              BOOL v9 = v20++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_51:
        uint64_t v28 = 8;
LABEL_52:
        *(_DWORD *)(a1 + v2_Block_object_dispose(&STACK[0x400], 8) = v14;
        goto LABEL_57;
      case 4u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (2)
        {
          unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1 || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if (v27 < 0)
            {
              v23 += 7;
              BOOL v9 = v24++ >= 9;
              if (v9)
              {
                uint64_t v25 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v25 = 0;
        }
LABEL_56:
        *(unsigned char *)(a1 + 2_Block_object_dispose(&STACK[0x400], 8) = v25 != 0;
        goto LABEL_57;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_57;
    }
  }
}

void sub_100062EC8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) object];
  [v1 clear];
}

id sub_100062FB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clear];
}

id sub_100063030(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _hold];
}

id sub_1000635F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clear];
}

void sub_100063824(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&STACK[0x400], 8) = a1;
}

void sub_100063830(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

CFStringRef sub_100063864(unint64_t a1)
{
  if (a1 > 3) {
    return @"unknown";
  }
  else {
    return off_10012B680[a1];
  }
}

void sub_1000648A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000648BC(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id result = [a3 unsignedIntegerValue];
  if (result == (id)2)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

void sub_100065714(id a1, NSDictionary *a2, NSMutableSet *a3)
{
  char v4 = a3;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  unsigned int v5 = [(NSDictionary *)a2 allValues];
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        int v10 = [*(id *)(*((void *)&v11 + 1) + 8 * (void)v9) topicName];
        [(NSMutableSet *)v4 addObject:v10];

        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v7);
  }
}

void sub_100065834(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  long long v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  id v14 = a5;
  id v12 = a4;
  id v13 = a3;
  v11(v9, a2, v10);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();

  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100065918(void *a1, void *a2)
{
  id v3 = a2;
  [v3 removeTopics:a1[4] connectionServer:0 filter:1];
  [v3 removeTopics:a1[5] connectionServer:0 filter:3];
  [v3 removeTopics:a1[6] connectionServer:0 filter:2];
  [v3 removeTopics:a1[7] connectionServer:0 filter:4];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100065A58;
  void v6[3] = &unk_10012B638;
  id v7 = v3;
  id v4 = v3;
  unsigned int v5 = objc_retainBlock(v6);
  ((void (*)(void *, uint64_t, void))v5[2])(v5, 1, a1[8]);
  ((void (*)(void *, uint64_t, void))v5[2])(v5, 3, a1[9]);
  ((void (*)(void *, uint64_t, void))v5[2])(v5, 2, a1[10]);
  ((void (*)(void *, uint64_t, void))v5[2])(v5, 4, a1[11]);
}

void sub_100065A58(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = +[NSMutableDictionary dictionary];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v15 = a1;
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)v17;
    do
    {
      id v12 = 0;
      id v13 = v10;
      do
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v7);
        }
        uint64_t v14 = *(void *)(*((void *)&v16 + 1) + 8 * (void)v12);
        uint64_t v10 = +[APSTopicAttributes topicAttributesWithFilter:a2 darkWakeEnabled:0 pushWakeEnabled:0 criticalWakeEnabled:0 ultraConstrainedEnabled:0];

        [v6 setObject:v10 forKey:v14];
        id v12 = (char *)v12 + 1;
        id v13 = v10;
      }
      while (v9 != v12);
      id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v9);

    a1 = v15;
  }

  [*(id *)(a1 + 32) addTopicsAndAttributes:v6 connectionServer:0];
}

CFStringRef sub_100067094(unint64_t a1)
{
  if (a1 > 5) {
    return @"UNKNOWN";
  }
  else {
    return off_10012B6A0[a1];
  }
}

void sub_100067588()
{
}

void sub_100067724()
{
}

void sub_1000677C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006785C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10006795C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100067AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100067B68(uint64_t a1)
{
  int v2 = +[NSMutableArray array];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, &v8);
  if (v9 != v8)
  {
    unint64_t v3 = 0;
    do
    {
      id v4 = objc_alloc_init((Class)NSMutableData);
      uint64_t v5 = *(void *)(v8 + 24 * v3);
      if ((unint64_t)(*(void *)(v8 + 24 * v3 + 8) - v5) >= 2)
      {
        unint64_t v6 = 1;
        do
        {
          [v4 appendBytes:v5 + v6++ length:1];
          uint64_t v5 = *(void *)(v8 + 24 * v3);
        }
        while (*(void *)(v8 + 24 * v3 + 8) - v5 > v6);
      }
      [v2 addObject:v4];

      ++v3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) > v3);
  }
  uint64_t v11 = (void **)&v8;
  sub_100022FE0(&v11);
  return v2;
}

void sub_100067CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100022FE0(&a12);

  _Unwind_Resume(a1);
}

id sub_100067D14(uint64_t a1)
{
  int v2 = +[NSMutableArray array];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, &v8);
  if (v9 != v8)
  {
    unint64_t v3 = 0;
    do
    {
      id v4 = objc_alloc_init((Class)NSMutableData);
      uint64_t v5 = *(void *)(v8 + 24 * v3);
      if ((unint64_t)(*(void *)(v8 + 24 * v3 + 8) - v5) >= 2)
      {
        unint64_t v6 = 1;
        do
        {
          [v4 appendBytes:v5 + v6++ length:1];
          uint64_t v5 = *(void *)(v8 + 24 * v3);
        }
        while (*(void *)(v8 + 24 * v3 + 8) - v5 > v6);
      }
      [v2 addObject:v4];

      ++v3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) > v3);
  }
  uint64_t v11 = (void **)&v8;
  sub_100022FE0(&v11);
  return v2;
}

void sub_100067E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100022FE0(&a12);

  _Unwind_Resume(a1);
}

void sub_100068018()
{
}

void sub_1000682FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100068C50((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_100068348(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 24) = a2;
  int v2 = *(void **)(a1 + 8);
  unint64_t v3 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:");
  [v2 setObject:v3 forKey:@"APSProtocolCommand"];

  return 1;
}

void sub_1000683A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100068440(uint64_t a1)
{
  int v2 = +[NSMutableArray array];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, &v8);
  if (v9 != v8)
  {
    unint64_t v3 = 0;
    do
    {
      id v4 = objc_alloc_init((Class)NSMutableData);
      uint64_t v5 = *(void *)(v8 + 24 * v3);
      if ((unint64_t)(*(void *)(v8 + 24 * v3 + 8) - v5) >= 2)
      {
        unint64_t v6 = 1;
        do
        {
          [v4 appendBytes:v5 + v6++ length:1];
          uint64_t v5 = *(void *)(v8 + 24 * v3);
        }
        while (*(void *)(v8 + 24 * v3 + 8) - v5 > v6);
      }
      [v2 addObject:v4];

      ++v3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) > v3);
  }
  uint64_t v11 = (void **)&v8;
  sub_100022FE0(&v11);
  return v2;
}

void sub_10006858C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100022FE0(&a12);

  _Unwind_Resume(a1);
}

id sub_1000685EC(uint64_t a1)
{
  int v2 = +[NSMutableArray array];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, &v8);
  if (v9 != v8)
  {
    unint64_t v3 = 0;
    do
    {
      id v4 = objc_alloc_init((Class)NSMutableData);
      uint64_t v5 = *(void *)(v8 + 24 * v3);
      if ((unint64_t)(*(void *)(v8 + 24 * v3 + 8) - v5) >= 2)
      {
        unint64_t v6 = 1;
        do
        {
          [v4 appendBytes:v5 + v6++ length:1];
          uint64_t v5 = *(void *)(v8 + 24 * v3);
        }
        while (*(void *)(v8 + 24 * v3 + 8) - v5 > v6);
      }
      [v2 addObject:v4];

      ++v3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) > v3);
  }
  uint64_t v11 = (void **)&v8;
  sub_100022FE0(&v11);
  return v2;
}

void sub_100068738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100022FE0(&a12);

  _Unwind_Resume(a1);
}

void sub_100068888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006891C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1000689C4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  a1[1] = v6;
  a1[2] = 0;
  *a1 = off_10012B6E0;
  id v7 = v6;
  uint64_t v8 = (void *)a1[2];
  a1[2] = v5;

  return a1;
}

uint64_t sub_100068A38(uint64_t a1, unsigned int a2)
{
  id v4 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:");
  [*(id *)(a1 + 16) setSerialItemInParameters:*(void *)(a1 + 8) commandID:*(void *)(a1 + 24) itemID:a2 itemData:v4];

  return 1;
}

void sub_100068A94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100068AA4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) >= 0) {
    id v5 = (const char *)a3;
  }
  else {
    id v5 = *(const char **)a3;
  }
  id v6 = +[NSData dataWithBytes:v5 length:strlen(v5)];
  [*(id *)(a1 + 16) setSerialItemInParameters:*(void *)(a1 + 8) commandID:*(void *)(a1 + 24) itemID:a2 itemData:v6];

  return 1;
}

void sub_100068B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100068B34(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return 1;
}

uint64_t sub_100068B64(uint64_t a1, unsigned int a2, char a3)
{
  char v7 = a3;
  id v5 = +[NSData dataWithBytes:&v7 length:1];
  [*(id *)(a1 + 16) setSerialItemInParameters:*(void *)(a1 + 8) commandID:*(void *)(a1 + 24) itemID:a2 itemData:v5];

  return 1;
}

void sub_100068BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100068BE4(uint64_t a1, unsigned int a2)
{
  id v4 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:");
  [*(id *)(a1 + 16) setSerialItemInParameters:*(void *)(a1 + 8) commandID:*(void *)(a1 + 24) itemID:a2 itemData:v4];

  return 1;
}

void sub_100068C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100068C50(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  *(void *)a1 = off_10012B6E0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x400], 8) = 0;

  unint64_t v3 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;

  return a1;
}

uint64_t sub_100068CB4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      sub_100068D30(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_100068D1C(_Unwind_Exception *a1)
{
  sub_10001B29C(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100068D30(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100015260(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    id v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_10001570C(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100068FB0(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100014CD8(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  char v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *char v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_100068F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10001BABC((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100068FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + _Block_object_dispose(&STACK[0x400], 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  id result = v8 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    id result = sub_1000157B4(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)id result = *(_OWORD *)a3;
    result[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100069038(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10001BABC(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100069D3C(id a1)
{
  uint64_t v1 = +[APSMultiUserMode sharedInstance];
  id v2 = [v1 isMultiUser];

  uint64_t v3 = [[APSMultiUserFS alloc] initWithIsMultiUserMode:v2];
  uint64_t v4 = qword_10015A8B8;
  qword_10015A8B8 = (uint64_t)v3;
  _objc_release_x1(v3, v4);
}

BOOL sub_10006A528(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v12 = PBReaderReadString();
        id v13 = (PSChannelSubscription *)a1[1];
        a1[1] = v12;
        goto LABEL_30;
      case 2u:
        id v13 = objc_alloc_init(PSChannelSubscription);
        [a1 addSubscriptionChannels:v13];
        if (!PBReaderPlaceMark() || (sub_100077128((uint64_t)v13, a2) & 1) == 0) {
          goto LABEL_33;
        }
        goto LABEL_29;
      case 3u:
        id v13 = objc_alloc_init(PSChannelUnsubscription);
        [a1 addUnsubscriptionChannels:v13];
        if (!PBReaderPlaceMark() || (sub_1000852B8((uint64_t)v13, a2) & 1) == 0) {
          goto LABEL_33;
        }
        goto LABEL_29;
      case 4u:
        id v13 = objc_alloc_init(PSAttribute);
        [a1 addAttributes:v13];
        if (PBReaderPlaceMark() && sub_1000B0A0C((uint64_t)v13, a2))
        {
LABEL_29:
          PBReaderRecallMark();
LABEL_30:

LABEL_31:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_33:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_31;
    }
  }
}

id sub_10006B508(uint64_t a1)
{
  if (qword_10015A8C8 != -1) {
    dispatch_once(&qword_10015A8C8, &stru_10012B830);
  }
  id v2 = (void *)qword_10015A8C0;
  uint64_t v3 = +[NSNumber numberWithInteger:a1];
  id v4 = [v2 objectForKeyedSubscript:v3];

  if (!v4)
  {
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    unsigned int v5 = (void *)qword_10015A8C0;
    unint64_t v6 = +[NSNumber numberWithInteger:a1];
    [v5 setObject:v4 forKeyedSubscript:v6];
  }
  return v4;
}

uint64_t sub_10006B770(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10006B780(uint64_t a1)
{
}

uint64_t sub_10006B788(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 48), "_onQueue_configurationForEnvironment:connectionType:", *(void *)(a1 + 32), *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_10006B9C0(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 48), "_onQueue_configurationForEnvironment:connectionType:", *(void *)(a1 + 32), *(void *)(a1 + 56));
  if (!v2)
  {
    unsigned int v5 = [[APSConfiguration alloc] initWithEnvironment:*(void *)(a1 + 32) connectionType:*(void *)(a1 + 56)];
    uint64_t v3 = sub_10006B508(*(void *)(a1 + 56));
    uint64_t v4 = [*(id *)(a1 + 32) name];
    [v3 setObject:v5 forKey:v4];

    uint64_t v2 = v5;
  }
  id v6 = v2;
  [v2 addCompletionBlock:*(void *)(a1 + 40)];
}

void sub_10006BC2C(uint64_t a1)
{
  uint64_t v2 = sub_10006B508(*(void *)(a1 + 40));
  uint64_t v3 = [*(id *)(a1 + 32) name];
  uint64_t v4 = [v2 objectForKey:v3];

  if (v4)
  {
    sub_10006B508(*(void *)(a1 + 40));
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    unsigned int v5 = [*(id *)(a1 + 32) name];
    [v6 removeObjectForKey:v5];
  }
}

void sub_10006C0C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  int v10 = sub_10006D278();
  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472;
  float v16 = sub_10006C1DC;
  float v17 = &unk_10012B7C0;
  id v18 = v9;
  id v19 = *(id *)(a1 + 32);
  id v20 = v8;
  id v21 = v7;
  id v11 = v7;
  id v12 = v8;
  id v13 = v9;
  dispatch_async(v10, &v14);

  objc_msgSend(*(id *)(a1 + 40), "finishTasksAndInvalidate", v14, v15, v16, v17);
}

void sub_10006C1DC(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(a1 + 40), "_failWithError:");
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2 && *(void *)(a1 + 56))
    {
      uint64_t v3 = *(id **)(a1 + 40);
      id v5 = [v3[7] host];
      objc_msgSend(v3, "_finishLoadWithResponse:urlHost:data:", v2);
    }
    else
    {
      uint64_t v4 = *(void **)(a1 + 40);
      APSError();
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "_failWithError:");
    }
  }
}

void *sub_10006C3D0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 64);
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 64);
    *(void *)(v4 + 64) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 64);
  }
  id v6 = [*(id *)(a1 + 40) copy];
  [v2 addObject:v6];

  id result = *(void **)(a1 + 32);
  uint64_t v8 = result[5];
  if (!v8)
  {
    if (!*((unsigned char *)result + 48)) {
      return result;
    }
    uint64_t v8 = 0;
  }
  return [result _callCompletionBlocksWithError:v8];
}

void sub_10006C5E0(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

id sub_10006C78C(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 40), *(id *)(a1 + 40));
  id v2 = sub_10006B508(*(void *)(*(void *)(a1 + 32) + 72));
  [v2 removeObjectForKey:*(void *)(*(void *)(a1 + 32) + 8)];

  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  return [v3 _callCompletionBlocksWithError:v4];
}

void sub_10006C9F0(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 72);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(APSConfiguration **)(a1 + 32);
    int v9 = 138412802;
    int v10 = v4;
    __int16 v11 = 2112;
    uint64_t v12 = (uint64_t)v2;
    __int16 v13 = 2048;
    uint64_t v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%@ APS server bag expired for environment %@ on interface %ld", (uint8_t *)&v9, 0x20u);
  }
  id v5 = +[APSEnvironment environmentForName:v2];
  long long v6 = +[APSConfiguration _onQueue_configurationForEnvironment:v5 connectionType:v3];
  if (!v6)
  {
    long long v6 = [[APSConfiguration alloc] initWithEnvironment:v5 connectionType:v3];
    long long v7 = sub_10006B508(v3);
    long long v8 = [v5 name];
    [v7 setObject:v6 forKey:v8];

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412802;
      int v10 = v6;
      __int16 v11 = 2048;
      uint64_t v12 = v3;
      __int16 v13 = 2112;
      uint64_t v14 = (uint64_t)v5;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%@ Created new config for interface %ld environment %@", (uint8_t *)&v9, 0x20u);
    }
  }
}

void sub_10006D0FC(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 80));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 80);
  *(void *)(v2 + 80) = 0;
}

void sub_10006D238(id a1)
{
  uint64_t v1 = +[NSMutableDictionary dictionary];
  uint64_t v2 = qword_10015A8C0;
  qword_10015A8C0 = v1;
  _objc_release_x1(v1, v2);
}

id sub_10006D278()
{
  if (qword_10015A8D8 != -1) {
    dispatch_once(&qword_10015A8D8, &stru_10012B850);
  }
  id v0 = (void *)qword_10015A8D0;
  return v0;
}

void sub_10006D2CC(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.apsd.APSConfigurationQueue", 0);
  uint64_t v2 = qword_10015A8D0;
  qword_10015A8D0 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_10006D30C(id a1)
{
  uint64_t v1 = MGCopyAnswer();
  uint64_t v2 = (void *)qword_10015A8E0;
  qword_10015A8E0 = v1;

  uint64_t v3 = MGCopyAnswer();
  uint64_t v4 = (void *)qword_10015A8E8;
  qword_10015A8E8 = v3;

  uint64_t v5 = MGCopyAnswer();
  uint64_t v6 = qword_10015A8F0;
  qword_10015A8F0 = v5;
  _objc_release_x1(v5, v6);
}

void sub_10006D8AC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_10006D8DC(uint64_t a1)
{
  uint64_t v2 = +[APSLog taskManager];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v6[0] = 67109120;
    v6[1] = [WeakRetained processIdentifier];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "APS task server xpc connection from pid got invalidated: %d", (uint8_t *)v6, 8u);
  }
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = objc_loadWeakRetained((id *)(a1 + 40));
  [v4 _cleanupConnection:v5];
}

void sub_10006D9C4(uint64_t a1)
{
  uint64_t v2 = +[APSLog taskManager];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v6[0] = 67109120;
    v6[1] = [WeakRetained processIdentifier];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "APS task server xpc connection from pid received an interruption: %d", (uint8_t *)v6, 8u);
  }
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = objc_loadWeakRetained((id *)(a1 + 40));
  [v4 _cleanupConnection:v5];
}

void sub_10006DBB4(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = MGGetBoolAnswer();
    CFStringRef v4 = @"NO";
    if (v3) {
      CFStringRef v4 = @"YES";
    }
    int v5 = 138412546;
    id v6 = v2;
    __int16 v7 = 2112;
    CFStringRef v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%@ Notified of _lockdownIdentityChange, adjusting connection. (Is hacktivated? %@)", (uint8_t *)&v5, 0x16u);
  }
  [v2 _processPotentialIdentityChanged];
}

void sub_10006E440(uint64_t a1, const void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  int v9 = v8;
  if (a2 && !v8 && [v7 count] == (id)2)
  {
    int v10 = +[APSLog courier];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "APSBAAClientIdentityProvider obtained BAA certs!", (uint8_t *)&v20, 2u);
    }

    __int16 v11 = +[NSMutableArray array];
    if ([v7 count])
    {
      unint64_t v12 = 0;
      do
      {
        __int16 v13 = [v7 objectAtIndexedSubscript:v12];

        CFDataRef v14 = SecCertificateCopyData((SecCertificateRef)v13);
        [v11 addObject:v14];

        ++v12;
      }
      while (v12 < (unint64_t)[v7 count]);
    }
    if (*(void *)(a1 + 40))
    {
      if (*(unsigned char *)(a1 + 48))
      {
        uint64_t v15 = +[APSLog courier];
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v20) = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "APSBAAClientIdentityProvider BAA certs may have refreshed, notifying all environments", (uint8_t *)&v20, 2u);
        }

        float v16 = [*(id *)(a1 + 32) baaIdentityRefreshedBlock];

        if (v16)
        {
          float v17 = [*(id *)(a1 + 32) baaIdentityRefreshedBlock];
          v17[2]();
        }
      }
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    CFRelease(a2);
  }
  else
  {
    id v18 = +[APSLog courier];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 138412290;
      id v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "APSBAAClientIdentityProvider failed to obtain a BAA cert, error: %@", (uint8_t *)&v20, 0xCu);
    }

    if (a2) {
      CFRelease(a2);
    }
    uint64_t v19 = *(void *)(a1 + 40);
    if (v19) {
      (*(void (**)(uint64_t, void, void))(v19 + 16))(v19, 0, 0);
    }
  }
}

uint64_t sub_10006EDB8(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      unint64_t v12 = objc_alloc_init(TASKInput);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark() || (sub_10003B7EC((uint64_t)v12, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10006F264(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006F33C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006FAF4(uint64_t a1, void *a2, void *a3)
{
  unsigned int v5 = a2;
  unint64_t v6 = a3;
  unint64_t v7 = +[APSLog stream];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v8 + 42)) {
      CFStringRef v9 = @"YES";
    }
    else {
      CFStringRef v9 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    CFStringRef v29 = (const __CFString *)v8;
    __int16 v30 = 2112;
    CFStringRef v31 = v5;
    __int16 v32 = 2112;
    CFStringRef v33 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "APSNWTCPStream %@ got config %@  -- opened? %@", buf, 0x20u);
  }

  if (*(unsigned char *)(*(void *)(a1 + 32) + 42))
  {
    if (v5 && !v6)
    {
      if (!+[APSSimulatorSupport isSimulator]
        || ([(__CFString *)v5 simulatorConnectionEnabled],
            int v10 = objc_claimAutoreleasedReturnValue(),
            v10,
            v10))
      {
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
        [WeakRetained tcpStream:*(void *)(a1 + 32) receivedServerBag:v5];

        unint64_t v12 = [(__CFString *)v5 nagleEnabled];
        id v13 = v12;
        if (v12)
        {
          *(unsigned char *)(*(void *)(a1 + 32) + 122) = [v12 BOOLValue];
          CFDataRef v14 = +[APSLog stream];
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v15 = *(void *)(a1 + 32);
            CFStringRef v16 = @"YES";
            if (!*(unsigned char *)(v15 + 122)) {
              CFStringRef v16 = @"NO";
            }
            *(_DWORD *)buf = 138412546;
            CFStringRef v29 = (const __CFString *)v15;
            __int16 v30 = 2112;
            CFStringRef v31 = v16;
            float v17 = "%@: nagleEnabled is %@ from config bag";
LABEL_27:
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v17, buf, 0x16u);
          }
        }
        else
        {
          CFDataRef v14 = +[APSLog stream];
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = *(void *)(a1 + 32);
            CFStringRef v23 = @"YES";
            if (!*(unsigned char *)(v22 + 122)) {
              CFStringRef v23 = @"NO";
            }
            *(_DWORD *)buf = 138412546;
            CFStringRef v29 = (const __CFString *)v22;
            __int16 v30 = 2112;
            CFStringRef v31 = v23;
            float v17 = "%@: nagleEnabled is not available from config bag, default %@";
            goto LABEL_27;
          }
        }

        [*(id *)(a1 + 32) _connectToServerWithConfiguration:v5];
LABEL_35:

        goto LABEL_36;
      }
      unsigned int v24 = +[APSLog stream];
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = [(__CFString *)v5 simulatorConnectionEnabled];
        CFStringRef v26 = @"YES";
        if (!v25) {
          CFStringRef v26 = @"NO";
        }
        *(_DWORD *)buf = 138412290;
        CFStringRef v29 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Simulator connection not enabled {simulatorConnectionEnabled:%@} - disconnecting", buf, 0xCu);
      }
      [*(id *)(a1 + 32) close];
      id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
      uint64_t v19 = *(void *)(a1 + 32);
LABEL_34:
      char v27 = APSError();
      [v13 tcpStream:v19 errorOccured:v27];

      goto LABEL_35;
    }
    id v18 = +[APSLog stream];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFStringRef v29 = v6;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Failed to load config bag: %@", buf, 0xCu);
    }

    if (+[APSSimulatorSupport isSimulator])
    {
      [*(id *)(a1 + 32) close];
      id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
      uint64_t v19 = *(void *)(a1 + 32);
      goto LABEL_34;
    }
    int v20 = +[APSLog stream];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      id v21 = [*(id *)(*(void *)(a1 + 32) + 8) name];
      *(_DWORD *)buf = 138412290;
      CFStringRef v29 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Using DNS TXT record lookup to determine load balance count for %@", buf, 0xCu);
    }
    [*(id *)(a1 + 32) _openWithTXTLookup];
  }
LABEL_36:
}

id sub_10007027C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, void *a11)
{
  return _[a11 _queryRecordReply:a9 length:a8 ttl:a10 errorCode:a4];
}

void sub_100070D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v10 - 184));
  _Unwind_Resume(a1);
}

void sub_100070D70(uint64_t a1, void *a2)
{
  int v3 = a2;
  char v4 = nw_tls_copy_sec_protocol_options(v3);
  sec_protocol_options_add_tls_application_protocol(v4, "apns-security-v3");
  sec_protocol_options_add_tls_application_protocol(v4, "apns-pack-v1");
  sec_protocol_options_set_min_tls_protocol_version(v4, tls_protocol_version_TLSv13);
  sec_protocol_options_set_tls_server_name(v4, (const char *)[*(id *)(a1 + 32) UTF8String]);
  verify_block[0] = _NSConcreteStackBlock;
  verify_block[1] = 3221225472;
  verify_block[2] = sub_100070E8C;
  verify_block[3] = &unk_10012B8E8;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  id v5 = &_dispatch_main_q;
  sec_protocol_options_set_verify_block(v4, verify_block, (dispatch_queue_t)&_dispatch_main_q);

  objc_destroyWeak(&v7);
}

void sub_100070E78(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100070E8C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  trust = a3;
  unint64_t v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    SecTrustRef v8 = sec_trust_copy_ref(trust);
    SecTrustSetPinningPolicyName();
    v6[2](v6, [WeakRetained isPeerTrustedForTrust:v8]);
    if (v8) {
      CFRelease(v8);
    }
  }
  else
  {
    v6[2](v6, 0);
  }
}

void sub_100070F5C(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    int v3 = a2;
    char v4 = +[APSLog stream];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      CFStringRef v6 = @"NO";
      if (!*(unsigned char *)(a1 + 40)) {
        CFStringRef v6 = @"YES";
      }
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      CFStringRef v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@ Set nw_tcp_options_set_no_delay = %@", (uint8_t *)&v7, 0x16u);
    }

    nw_tcp_options_set_no_delay(v3, 1);
  }
}

void sub_100071060(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  CFStringRef v6 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained handleState:a2 error:v7];
  }
}

void sub_1000710CC(uint64_t a1, int a2)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && a2)
  {
    uint64_t v8 = WeakRetained;
    [WeakRetained close];
    id v5 = objc_loadWeakRetained(v8 + 4);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = APSError();
    [v5 tcpStream:v6 errorOccured:v7];

    id WeakRetained = v8;
  }
}

void sub_10007218C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000721A8(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  id v25 = a2;
  id v9 = a3;
  CFStringRef v10 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v12 = WeakRetained;
  if (WeakRetained)
  {
    if (v25)
    {
      id v13 = (void *)WeakRetained[8];
      if (v13)
      {
        objc_msgSend(v13, "appendData:");
      }
      else
      {
        id v14 = [objc_alloc((Class)NSMutableData) initWithData:v25];
        uint64_t v15 = (void *)*((void *)v12 + 8);
        *((void *)v12 + _Block_object_dispose(&STACK[0x400], 8) = v14;
      }
      id v16 = [*((id *)v12 + 8) length];
      if (v16
        && (id v17 = v16,
            uint64_t is_wake_packet = nw_content_context_get_is_wake_packet(),
            id v19 = objc_loadWeakRetained((id *)v12 + 4),
            id v20 = [v19 tcpStream:*(void *)(a1 + 32) dataReceived:*((void *)v12 + 8) isWakingMessage:is_wake_packet], v19, v20 != v17))
      {
        if (v20)
        {
          if (v20 >= v17) {
            id v22 = v17;
          }
          else {
            id v22 = v20;
          }
          objc_msgSend(*((id *)v12 + 8), "replaceBytesInRange:withBytes:length:", 0, v22, 0, 0);
        }
      }
      else
      {
        id v21 = (void *)*((void *)v12 + 8);
        *((void *)v12 + _Block_object_dispose(&STACK[0x400], 8) = 0;
      }
    }
    if (a4)
    {
      [v12 close];
      CFStringRef v23 = objc_loadWeakRetained((id *)v12 + 4);
      [v23 tcpStreamEndEncountered:v12 withReason:21];
LABEL_18:

      goto LABEL_19;
    }
    if (v10)
    {
      *((unsigned char *)v12 + 123) = 1;
      CFStringRef v23 = nw_error_copy_cf_error(v10);
      [v12 close];
      id v24 = objc_loadWeakRetained((id *)v12 + 4);
      [v24 tcpStream:v12 errorOccured:v23];

      goto LABEL_18;
    }
    [v12 _receiveData];
  }
LABEL_19:
}

void sub_100072490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000724A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000724B8(uint64_t a1)
{
}

void sub_1000724C0(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v11 = a2;
  id v8 = a3;
  if (v11) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 128), a2);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  CFStringRef v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a4 = 1;
}

BOOL sub_100072E04(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((v6 >> 3) == 3) {
        break;
      }
      if (v12 == 2)
      {
        id v14 = objc_alloc_init(PSChannelResponse);
        [a1 addSubscriptionChannelResponse:v14];
LABEL_23:
        if (!PBReaderPlaceMark() || (sub_10001FBAC((uint64_t)v14, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_26;
      }
      if (v12 == 1)
      {
        uint64_t v13 = PBReaderReadString();
        id v14 = (PSChannelResponse *)a1[1];
        a1[1] = v13;
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_28:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    id v14 = objc_alloc_init(PSChannelResponse);
    [a1 addUnsubscriptionChannelResponse:v14];
    goto LABEL_23;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100073CD4(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 138412290;
    id v4 = v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%@ Notified of _lockdownIdentityChange, adjusting connection", (uint8_t *)&v3, 0xCu);
  }
  [v2 _processPotentialIdentityChanged];
}

const void *sub_100074054(void *a1)
{
  id v2 = (const void *)MAECopyLegacyDeviceIdentityWithError();
  id v3 = 0;
  if (v3)
  {
    if (v2) {
      CFRelease(v2);
    }
    id v2 = 0;
    if (a1) {
      *a1 = v3;
    }
  }

  return v2;
}

uint64_t sub_100074C9C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x400], 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL APSDProtoHostCertificateInfoReadFrom(char *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((v6 >> 3) == 3) {
        break;
      }
      if (v12 == 2)
      {
        uint64_t v14 = PBReaderReadData();
        uint64_t v15 = 16;
        goto LABEL_24;
      }
      if (v12 == 1)
      {
        unsigned int v13 = PBReaderReadData();
        if (v13) {
          [a1 addCertificates:v13];
        }
        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v14 = PBReaderReadData();
    uint64_t v15 = 24;
LABEL_24:
    unsigned int v13 = *(void **)&a1[v15];
    *(void *)&a1[v15] = v14;
LABEL_25:

    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

__CFString *APSIncomingMessagePriorityString(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      id v2 = @"low";
      break;
    case 10:
      id v2 = @"high";
      break;
    case 5:
      id v2 = @"medium";
      break;
    default:
      id v2 = +[NSString stringWithFormat:@"%d", a1];
      break;
  }
  return v2;
}

uint64_t sub_100075C00(uint64_t a1)
{
  if (a1) {
    return 2 * (a1 == 1);
  }
  else {
    return 1;
  }
}

uint64_t sub_10007646C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v14 = 0;
      unsigned int v15 = 0;
      uint64_t v16 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 == -1 || v17 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          goto LABEL_30;
        }
        v14 += 7;
        BOOL v9 = v15++ >= 9;
        if (v9)
        {
          LODWORD(v16) = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v16) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v16;
    }
    else if ((v6 >> 3) == 1)
    {
      uint64_t v12 = PBReaderReadString();
      unsigned int v13 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x400], 8) = v12;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100077128(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 0u:
        unsigned int v12 = 0;
        do
        {
          unint64_t v13 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v13 == -1 || v13 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            goto LABEL_55;
          }
          unint64_t v14 = v13 + 1;
          int v15 = *(char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14;
          if ((v15 & 0x80000000) == 0) {
            break;
          }
        }
        while (v12++ <= 8);
        goto LABEL_55;
      case 1u:
        uint64_t v18 = PBReaderReadData();
        id v19 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v18;

        goto LABEL_55;
      case 2u:
        [(id)a1 clearOneofValuesForSubscriptionInfo];
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 44) |= 4u;
        *(_DWORD *)(a1 + 40) = 1;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v22 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_49:
        uint64_t v30 = 8;
        goto LABEL_54;
      case 3u:
        id v25 = objc_alloc_init(PSAttribute);
        [(id)a1 addAttributes:v25];
        if (PBReaderPlaceMark() && sub_1000B0A0C((uint64_t)v25, a2))
        {
          PBReaderRecallMark();

LABEL_55:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      case 4u:
        [(id)a1 clearOneofValuesForSubscriptionInfo];
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 44) |= 4u;
        *(_DWORD *)(a1 + 40) = 2;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v22 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_53:
        uint64_t v30 = 16;
LABEL_54:
        *(void *)(a1 + v30) = v22;
        goto LABEL_55;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_55;
    }
  }
}

uint64_t sub_100077F6C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      unsigned int v12 = objc_alloc_init(TASKEdgeDnsOutput);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark() || (sub_1000211FC((uint64_t)v12, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000796C4(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 noteReachabilityChange:a2];
}

id sub_100079A4C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) raiseReachabilityChange];
}

uint64_t sub_100079D0C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v14 = 0;
      unsigned int v15 = 0;
      uint64_t v16 = 0;
      *(unsigned char *)(a1 + 24) |= 1u;
      while (1)
      {
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 == -1 || v17 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          goto LABEL_30;
        }
        v14 += 7;
        BOOL v9 = v15++ >= 9;
        if (v9)
        {
          uint64_t v16 = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v16 = 0;
      }
LABEL_32:
      *(void *)(a1 + _Block_object_dispose(&STACK[0x400], 8) = v16;
    }
    else if ((v6 >> 3) == 1)
    {
      uint64_t v12 = PBReaderReadData();
      unint64_t v13 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v12;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10007A468(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007A740(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007A98C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007AA9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007AB98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007AC70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007AD60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007AED8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007B090(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007B14C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007B1E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007B2A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007B378(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B38C(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

void sub_10007B614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
}

void sub_10007B8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void aps_peer_event_handler(void *a1, void *a2, void *a3, int a4)
{
  unint64_t v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (!+[NSThread isMainThread]
    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
  {
    sub_1000CAD58();
  }
  xpc_type_t type = xpc_get_type(v8);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (v8 == &_xpc_error_connection_invalid)
    {
      if (xpc_connection_get_context(v7) && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(v7);
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "peer(%d) received XPC_ERROR_CONNECTION_INVALID", buf, 8u);
      }
      id v25 = xpc_connection_get_context(v7);
      id v11 = v25;
      if (v25)
      {
        [v25 connectionInvalidated];
LABEL_196:

        goto LABEL_197;
      }
      goto LABEL_41;
    }
    if (v8 == &_xpc_error_connection_interrupted)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_197;
      }
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(v7);
      unint64_t v23 = "peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED";
    }
    else
    {
      BOOL v22 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
      if (v8 != &_xpc_error_termination_imminent)
      {
        if (!v22) {
          goto LABEL_197;
        }
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v8;
        unint64_t v23 = "Unidentified error: %@";
        uint32_t v24 = 12;
LABEL_45:
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v23, buf, v24);
        goto LABEL_197;
      }
      if (!v22) {
        goto LABEL_197;
      }
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(v7);
      unint64_t v23 = "peer(%d) received XPC_ERROR_TERMINATION_IMMINENT";
    }
    uint32_t v24 = 8;
    goto LABEL_45;
  }
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    id v11 = v8;
    unsigned int int64 = xpc_dictionary_get_int64(v11, (const char *)[APSXPCMessageTypeKey UTF8String]);
    unsigned int v13 = int64;
    if (int64 > 0x22) {
      goto LABEL_50;
    }
    if (((1 << int64) & 0x5E0803701) != 0)
    {
      if (a4 && (sub_10007E748() & 1) != 0
        || (memset(buf, 0, 32), xpc_connection_get_audit_token(), sub_10004AC5C(buf, APSConnectionInitiateEntitlement)))
      {
        char v14 = 0;
LABEL_12:
        switch(v13)
        {
          case 0u:
            if ((_os_feature_enabled_impl() & 1) == 0) {
              [v9 receivedClientConnection];
            }
            unsigned int v15 = APSGetXPCStringFromDictionary();
            uint64_t v16 = APSGetXPCStringFromDictionary();
            unint64_t v17 = APSGetXPCStringFromDictionary();
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              *(void *)&uint8_t buf[4] = v15;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v16;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "SetupConnection: env=%@ portName=%@", buf, 0x16u);
            }
            unsigned int v18 = [v16 isEqualToString:APSConnectionOverrideNamedDelegatePort];
            if (v18)
            {

              uint64_t v16 = 0;
            }
            buf[0] = 0;
            id v19 = [v9 getConnectionServerForEnvironment:v15 connectionPortName:v16 processName:v17 enableDarkWake:APSGetXPCBoolFromDictionary() peerConnection:v7 isNewConnection:buf];

            if (((v18 | _os_feature_enabled_impl() ^ 1) & 1) == 0 && buf[0]) {
              [v9 receivedClientConnection];
            }
            [v19 setProcessName:v17];
            xpc_object_t reply = xpc_dictionary_create_reply(v11);
            if (reply)
            {
              sub_10007D44C(v19, v11, reply);
              sub_10007D698(v19, (uint64_t)v11, reply);
              sub_10007D728(v19, (uint64_t)v11, reply);
              sub_10007D7B8(v19);
              unsigned int v21 = [v19 publicToken];

              if (v21)
              {
                uint64_t v86 = [v19 publicToken];
                uint64_t v90 = 0;
                APSInsertDatasToXPCDictionary();
              }
              id v87 = objc_msgSend(v19, "messageSize", v86, v90);
              APSInsertIntsToXPCDictionary();
              id v88 = objc_msgSend(v19, "largeMessageSize", v87, 0);
              APSInsertIntsToXPCDictionary();
              uint64_t v89 = objc_msgSend(v19, "isConnected", v88, 0);
              APSInsertBoolsToXPCDictionary();
              xpc_connection_send_message(v7, reply);
              objc_msgSend(v19, "connectionHandshakeDidComplete", v89, 0);
            }

            char v14 = v19;
            goto LABEL_195;
          case 1u:
            unsigned int v27 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v27) {
              goto LABEL_194;
            }
            sub_10007D44C(v14, v11, v27);
            goto LABEL_127;
          case 2u:
            unsigned int v27 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v27) {
              goto LABEL_194;
            }
            sub_10007D698(v14, (uint64_t)v11, v27);
            goto LABEL_127;
          case 3u:
            unsigned int v27 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v27) {
              goto LABEL_194;
            }
            sub_10007D728(v14, (uint64_t)v11, v27);
            goto LABEL_127;
          case 4u:
            unsigned int v27 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v27) {
              goto LABEL_194;
            }
            sub_10007D84C(v14, (uint64_t)v11, v27);
            goto LABEL_127;
          case 5u:
            goto LABEL_56;
          case 6u:
            xpc_dictionary_get_value(v11, "message");
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            APSCreateDictionaryFromXPCObject();
            uint64_t v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
            CFStringRef v31 = xpc_dictionary_create_reply(v11);
            if (v31)
            {
              uint64_t v86 = v30 != 0;
              uint64_t v90 = 0;
              APSInsertBoolsToXPCDictionary();
              xpc_connection_send_message(v7, v31);
            }
            if (v30)
            {
              id v32 = [objc_alloc((Class)APSOutgoingMessage) initWithDictionary:v30];
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v94 = [v32 topic];
                sub_10008D708(v30, v94);
                CFStringRef v33 = v96 = v27;
                *(_DWORD *)buf = 138412290;
                *(void *)&uint8_t buf[4] = v33;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSXPCSendOutgoingMessageEvent constructing apsMessage with dict %@", buf, 0xCu);

                unsigned int v27 = v96;
              }
              objc_msgSend(v14, "handleSendOutgoingMessage:", v32, v86, v90);
              goto LABEL_78;
            }
            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_192;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            __int16 v80 = "APSXPCSendOutgoingMessageEvent requestMessage %@ failed!";
            goto LABEL_191;
          case 7u:
            if (!os_variant_allows_internal_security_policies())
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                sub_1000CAC04();
              }
              goto LABEL_195;
            }
            xpc_dictionary_get_value(v11, "message");
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            APSCreateDictionaryFromXPCObject();
            uint64_t v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
            CFStringRef v31 = xpc_dictionary_create_reply(v11);
            if (v31)
            {
              APSInsertBoolsToXPCDictionary();
              xpc_connection_send_message(v7, v31);
            }
            if (v30)
            {
              id v32 = [objc_alloc((Class)APSOutgoingMessage) initWithDictionary:v30];
              [v14 handleFakeMessage:v32];
LABEL_78:
            }
            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v11;
              __int16 v80 = "APSXPCSendFakeMessageEvent requestMessage %@ failed!";
LABEL_191:
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v80, buf, 0xCu);
            }
LABEL_192:

            goto LABEL_193;
          case 8u:
            unsigned int v27 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v27) {
              goto LABEL_194;
            }
            APSGetXPCStringFromDictionary();
            uint64_t v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
            CFStringRef v31 = [v9 courierForEnvironmentName:v30];
            [v31 hasIdentity];
            APSInsertBoolsToXPCDictionary();
            goto LABEL_87;
          case 9u:
            unsigned int v27 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v27) {
              goto LABEL_194;
            }
            unsigned int v34 = [v9 courierForEnvironmentName:APSEnvironmentProduction];
            uint64_t v30 = v34;
            if (v34)
            {
              [(__CFString *)v34 serverTimeInNanoSeconds];
            }
            else
            {
              id v85 = +[NSDate date];
              [v85 timeIntervalSince1970];
            }
            APSInsertUnsignedLongLongsToXPCDictionary();
            goto LABEL_187;
          case 0xAu:
            unsigned int v27 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v27) {
              goto LABEL_194;
            }
            uint64_t v30 = [v9 courierForEnvironmentName:APSEnvironmentProduction];
            CFStringRef v31 = [(__CFString *)v30 latestGeoRegion];
            if (v31) {
              APSInsertNSStringsToXPCDictionary();
            }
LABEL_87:
            xpc_connection_send_message(v7, v27);
            goto LABEL_192;
          case 0xBu:
            [v14 handleCancelOutgoingMessageWithID:(int)APSGetXPCIntFromDictionary()];
            goto LABEL_195;
          case 0xCu:
            unsigned int v27 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v27) {
              goto LABEL_194;
            }
            APSGetXPCStringFromDictionary();
            uint64_t v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
            [v9 keepAliveIntervalForEnvironment:v30];
            APSInsertDoublesToXPCDictionary();
            goto LABEL_187;
          case 0xDu:
            unsigned int v27 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v27) {
              goto LABEL_194;
            }
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Requesting courier connections", buf, 2u);
            }
            [v9 requestCourierConnections];
            goto LABEL_127;
          case 0xEu:
            APSGetXPCStringFromDictionary();
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            uint64_t v35 = APSGetXPCStringFromDictionary();
            uint64_t v30 = (__CFString *)v35;
            if (v27 && v35)
            {
              [v14 handleRequestPerAppTokenForTopic:v27 identifier:v35];
              goto LABEL_193;
            }
            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_193;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v79 = "APSXPCRequestAppTokenEvent requestMessage %@ failed";
            goto LABEL_171;
          case 0xFu:
            xpc_dictionary_get_value(v11, "info");
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            id v36 = objc_alloc((Class)APSAppTokenInfo);
            __int16 v37 = APSCreateDictionaryFromXPCObject();
            uint64_t v30 = (__CFString *)[v36 initWithDictionary:v37];

            if (v30)
            {
              uint64_t v38 = [(__CFString *)v30 topic];
              if (v38)
              {
                id v39 = (void *)v38;
                uint64_t v40 = [(__CFString *)v30 identifier];

                if (v40)
                {
                  [v14 handleRequestTokenForInfo:v30];
                  goto LABEL_193;
                }
              }
            }
            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_193;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v79 = "APSXPCRequestExtendedAppTokenEvent requestMessage %@ failed";
            goto LABEL_171;
          case 0x10u:
            xpc_dictionary_get_value(v11, "info");
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            id v41 = objc_alloc((Class)APSURLTokenInfo);
            uint64_t v42 = APSCreateDictionaryFromXPCObject();
            uint64_t v30 = (__CFString *)[v41 initWithDictionary:v42];

            if (v30)
            {
              uint64_t v43 = [(__CFString *)v30 topic];
              if (v43)
              {
                uint64_t v44 = (void *)v43;
                uint64_t v45 = [(__CFString *)v30 vapidPublicKey];

                if (v45)
                {
                  [v14 handleRequestURLTokenForInfo:v30];
                  goto LABEL_193;
                }
              }
            }
            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_193;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v79 = "APSXPCRequestURLTokenEvent requestMessage %@ failed";
            goto LABEL_171;
          case 0x11u:
            APSGetXPCStringFromDictionary();
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            uint64_t v46 = APSGetXPCStringFromDictionary();
            uint64_t v30 = (__CFString *)v46;
            if (v27 && v46)
            {
              [v14 handleInvalidatePerAppTokenForTopic:v27 identifier:v46];
              goto LABEL_193;
            }
            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_193;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v79 = "APSXPCInvalidateAppTokenEvent requestMessage %@ failed";
            goto LABEL_171;
          case 0x12u:
            xpc_dictionary_get_value(v11, "info");
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            id v47 = objc_alloc((Class)APSAppTokenInfo);
            id v48 = APSCreateDictionaryFromXPCObject();
            uint64_t v30 = (__CFString *)[v47 initWithDictionary:v48];

            if (v30)
            {
              uint64_t v49 = [(__CFString *)v30 topic];
              if (v49)
              {
                size_t v50 = (void *)v49;
                id v51 = [(__CFString *)v30 identifier];

                if (v51)
                {
                  [v14 handleInvalidatePerAppTokenForInfo:v30];
                  goto LABEL_193;
                }
              }
            }
            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_193;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v79 = "APSXPCInvalidateExtendedAppTokenEvent requestMessage %@ failed";
            goto LABEL_171;
          case 0x13u:
            APSGetXPCStringFromDictionary();
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            if (v27)
            {
              [v14 handleInvalidateURLTokenForTopic:v27];
            }
            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v11;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSXPCInvalidateURLTokenEvent requestMessage %@ failed", buf, 0xCu);
            }
            uint64_t v30 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v30) {
              goto LABEL_193;
            }
            v81 = v7;
            __int16 v82 = v30;
            goto LABEL_188;
          case 0x14u:
            xpc_dictionary_get_value(v11, "info");
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            id v52 = objc_alloc((Class)APSAppTokenInfo);
            int v53 = APSCreateDictionaryFromXPCObject();
            uint64_t v30 = (__CFString *)[v52 initWithDictionary:v53];

            if (v30)
            {
              uint64_t v54 = [(__CFString *)v30 topic];
              if (v54)
              {
                id v55 = (void *)v54;
                id v56 = [(__CFString *)v30 identifier];

                if (v56)
                {
                  [v14 handleCurrentTokenForInfo:v30];
                  goto LABEL_193;
                }
              }
            }
            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_193;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v79 = "APSXPCCurrentExtendedAppTokenEvent requestMessage %@ failed";
            goto LABEL_171;
          case 0x15u:
            xpc_dictionary_get_value(v11, "info");
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            id v57 = objc_alloc((Class)APSURLTokenInfo);
            id v58 = APSCreateDictionaryFromXPCObject();
            uint64_t v30 = (__CFString *)[v57 initWithDictionary:v58];

            if (v30
              && ([(__CFString *)v30 topic],
                  id v59 = objc_claimAutoreleasedReturnValue(),
                  v59,
                  v59))
            {
              [v14 handleCurrentURLTokenForInfo:v30];
            }
            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v11;
              v79 = "APSXPCCurrentURLTokenEvent requestMessage %@ failed";
LABEL_171:
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v79, buf, 0xCu);
            }
            break;
          case 0x16u:
            APSGetXPCStringFromDictionary();
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            APSGetXPCDataFromDictionary();
            uint64_t v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
            CFStringRef v31 = APSGetXPCStringFromDictionary();
            [v14 handleAckIncomingMessageWithGuid:v27 topic:v31 tracingUUID:v30];
            goto LABEL_192;
          case 0x17u:
            unsigned int v27 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v27) {
              goto LABEL_194;
            }
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Processing invalid identity.", buf, 2u);
            }
            [v9 invalidateDeviceIdentity];
LABEL_127:
            xpc_connection_send_message(v7, v27);
            goto LABEL_194;
          case 0x18u:
            APSGetXPCDataFromDictionary();
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            APSGetXPCStringFromDictionary();
            uint64_t v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
            [v14 handleIncomingMessageReceiptWithTopic:v30 tracingUUID:v27];
            goto LABEL_193;
          case 0x19u:
            sub_10007D7B8(v14);
            goto LABEL_195;
          case 0x1Au:
            APSGetXPCDataFromDictionary();
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            uint64_t v60 = APSGetXPCUnsignedLongLongFromDictionary();
            id v61 = [v14 environmentName];
            uint64_t v30 = [v9 courierForEnvironmentName:v61];

            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSXPCSignDataWithIdentityEvent, requesting push identity", buf, 2u);
            }
            xpc_object_t v62 = xpc_dictionary_create_reply(v11);
            if (v62)
            {
              v101[0] = _NSConcreteStackBlock;
              v101[1] = 3221225472;
              v101[2] = sub_10007D9E0;
              v101[3] = &unk_10012BA98;
              uint64_t v105 = v60;
              v102 = v27;
              id v103 = v62;
              v104 = v7;
              [(__CFString *)v30 fetchUserCourierIdentityWithCompletion:v101];
            }
            goto LABEL_193;
          case 0x1Bu:
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSXPCRollBAACertEvent, attempting to fetch a new BAA cert for all environments", buf, 2u);
            }
            v63 = [v14 environmentName];
            unsigned int v27 = [v9 courierForEnvironmentName:v63];

            v64 = (__CFString *)xpc_dictionary_create_reply(v11);
            uint64_t v30 = v64;
            if (v64)
            {
              v98[0] = _NSConcreteStackBlock;
              v98[1] = 3221225472;
              v98[2] = sub_10007DB68;
              v98[3] = &unk_10012BAC0;
              v99 = v64;
              v100 = v7;
              [(__CFString *)v27 forceBAAIdentityRefreshWithCompletion:v98];
            }
            goto LABEL_193;
          case 0x1Cu:
            sub_10007D978(v14);
            goto LABEL_195;
          case 0x21u:
            [v14 handleNotificationAcknowledged];
            goto LABEL_195;
          case 0x26u:
            sub_10007D8DC(v14);
            goto LABEL_195;
          case 0x31u:
            unsigned int v27 = [v9 courierForEnvironmentName:APSEnvironmentProduction];
            [(__CFString *)v27 performKeepAlive];
            goto LABEL_194;
          case 0x32u:
            APSGetXPCArrayFromDictionary();
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            APSGetXPCStringFromDictionary();
            uint64_t v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
            [v14 handleSubscribeToChannels:v27 forTopic:v30];
            goto LABEL_193;
          case 0x33u:
            APSGetXPCArrayFromDictionary();
            unsigned int v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
            APSGetXPCStringFromDictionary();
            uint64_t v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
            [v14 handleUnsubscribeFromChannels:v27 forTopic:v30];
            goto LABEL_193;
          case 0x34u:
            uint64_t v65 = APSGetXPCStringFromDictionary();
            v66 = [v14 environmentName];
            uint64_t v67 = [v9 courierForEnvironmentName:v66];

            v68 = [v14 user];
            v69 = [v67 allRegisteredChannelsForTopic:v65 user:v68];

            xpc_object_t v70 = xpc_dictionary_create_reply(v11);
            v71 = v70;
            if (v70)
            {
              v91 = v70;
              v93 = v67;
              v95 = v65;
              v97 = v14;
              id v72 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v69 count]);
              long long v106 = 0u;
              long long v107 = 0u;
              long long v108 = 0u;
              long long v109 = 0u;
              __int16 v92 = v69;
              id v73 = v69;
              id v74 = [v73 countByEnumeratingWithState:&v106 objects:v112 count:16];
              if (v74)
              {
                id v75 = v74;
                uint64_t v76 = *(void *)v107;
                do
                {
                  for (uint64_t i = 0; i != v75; uint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v107 != v76) {
                      objc_enumerationMutation(v73);
                    }
                    __int16 v78 = [*(id *)(*((void *)&v106 + 1) + 8 * i) dictionaryRepresentation];
                    [v72 addObject:v78];
                  }
                  id v75 = [v73 countByEnumeratingWithState:&v106 objects:v112 count:16];
                }
                while (v75);
              }

              v71 = v91;
              APSInsertNSArraysToXPCDictionary();
              xpc_connection_send_message(v7, v91);

              uint64_t v65 = v95;
              char v14 = v97;
              v69 = v92;
              uint64_t v67 = v93;
            }

            goto LABEL_195;
          default:
            goto LABEL_195;
        }
        goto LABEL_193;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
        sub_1000CAC4C(v7);
      }
      goto LABEL_41;
    }
    if (int64 == 5)
    {
      memset(buf, 0, 32);
      xpc_connection_get_audit_token();
      long long v110 = 0u;
      long long v111 = 0u;
      if (!sandbox_check_by_audit_token())
      {
        char v14 = 0;
LABEL_56:
        int v26 = APSGetXPCIntFromDictionary();
        unsigned int v27 = (__CFString *)xpc_dictionary_create_reply(v11);
        if (!v27)
        {
LABEL_194:

LABEL_195:
          goto LABEL_196;
        }
        uint64_t v28 = 0;
        switch(v26)
        {
          case 1:
            uint64_t v29 = objc_msgSend(v9, "prettyStatus", 0);
            goto LABEL_182;
          case 2:
            uint64_t v29 = objc_msgSend(v9, "_connectionsDebuggingState", 0);
            goto LABEL_182;
          case 3:
            uint64_t v28 = 1;
            goto LABEL_181;
          case 4:
LABEL_181:
            uint64_t v29 = [v9 JSONDebugString:v28];
LABEL_182:
            uint64_t v30 = (__CFString *)v29;
            break;
          case 5:
            v83 = objc_msgSend(v9, "_connectionsDebuggingState", 0);
            __int16 v84 = [v9 prettyStatus];
            uint64_t v30 = +[NSString stringWithFormat:@"iOS Dump State\n%@\nMac OS Dump State\n%@\n", v83, v84];

            break;
          default:
            uint64_t v30 = @"unknown style";
            break;
        }
        APSInsertNSStringsToXPCDictionary();
LABEL_187:
        v81 = v7;
        __int16 v82 = v27;
LABEL_188:
        xpc_connection_send_message(v81, v82);
LABEL_193:

        goto LABEL_194;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
        sub_1000CACD0(v7);
      }
    }
    else
    {
LABEL_50:
      char v14 = xpc_connection_get_context(v7);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v7;
        *(_WORD *)&buf[8] = 2112;
        *(void *)&buf[10] = v14;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Looking up connection on peer: %x   found %@", buf, 0x12u);
      }
      if (v14) {
        goto LABEL_12;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000CAB80(v7);
      }
    }
LABEL_41:
    xpc_connection_cancel(v7);
    goto LABEL_196;
  }
LABEL_197:
}

void sub_10007D44C(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = a1;
  APSGetEnabledTopicsFromXPCDictionary();
  id v26 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = APSGetIgnoredTopicsFromXPCDictionary();
  id v9 = APSGetOpportunisticTopicsFromXPCDictionary();
  int v10 = APSGetNonWakingTopicsFromXPCDictionary();

  if (v26)
  {
    uint64_t v11 = +[NSSet setWithArray:](NSSet, "setWithArray:");
    if (v8) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v12 = 0;
    if (v9) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v11 = 0;
  if (!v8) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v12 = +[NSSet setWithArray:v8];
  if (v9)
  {
LABEL_4:
    unsigned int v13 = +[NSSet setWithArray:v9];
    goto LABEL_8;
  }
LABEL_7:
  unsigned int v13 = 0;
LABEL_8:
  uint64_t v24 = v8;
  if (v10)
  {
    char v14 = +[NSSet setWithArray:](NSSet, "setWithArray:", v10, v8);
  }
  else
  {
    char v14 = 0;
  }
  objc_msgSend(v7, "setEnabledTopics:ignoredTopics:opportunisticTopics:nonWakingTopics:", v11, v12, v13, v14, v24);
  [v7 enabledTopics];
  v16 = unsigned int v15 = (void *)v11;
  unint64_t v17 = [v16 allObjects];
  APSInsertEnabledTopicsToXPCDictionary();

  unsigned int v18 = [v7 ignoredTopics];
  id v19 = [v18 allObjects];
  APSInsertIgnoredTopicsToXPCDictionary();

  char v20 = [v7 opportunisticTopics];
  unsigned int v21 = [v20 allObjects];
  APSInsertOpportunisticTopicsToXPCDictionary();

  BOOL v22 = [v7 nonWakingTopics];

  unint64_t v23 = [v22 allObjects];
  APSInsertNonWakingTopicsToXPCDictionary();
}

void sub_10007D698(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = a3;
  APSGetEnableCriticalReliability();
  [v4 enableCriticalReliability];
  APSInsertBoolsToXPCDictionary();
}

void sub_10007D728(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = a3;
  APSGetEnableStatusNotifications();
  [v4 enableStatusChangeNotifications];
  APSInsertBoolsToXPCDictionary();
}

void sub_10007D7B8(void *a1)
{
  id v4 = a1;
  uint64_t v1 = APSGetUltraConstrainedTopicsFromXPCDictionary();
  id v2 = APSSafeArrayOfStrings();

  if (v2)
  {
    id v3 = +[NSSet setWithArray:v2];
    [v4 setUltraConstrainedTopics:v3];
  }
}

void sub_10007D84C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = a3;
  APSGetTrackActivityPresence();
  [v4 trackActivityPresence];
  APSInsertBoolsToXPCDictionary();
}

void sub_10007D8DC(void *a1)
{
  id v4 = a1;
  uint64_t v1 = APSGetXPCArrayFromDictionary();
  id v2 = APSSafeArrayOfStrings();

  if (v2)
  {
    id v3 = +[NSSet setWithArray:v2];
    [v4 setPushWakeTopics:v3];
  }
}

void sub_10007D978(void *a1)
{
  id v2 = a1;
  int v1 = APSGetXPCIntFromDictionary();
  [v2 setKeepAliveConfiguration:sub_10007F250(v1)];
}

void sub_10007D9E0(uint64_t a1, __SecKey *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    if (*(void *)(a1 + 56))
    {
      id v6 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
    }
    else
    {
      id v6 = 0;
    }
    id v7 = *(void **)(a1 + 32);
    uint64_t v12 = 0;
    id v13 = 0;
    BOOL v8 = sub_10007ECC0(0, a2, v7, (uint64_t *)&v13, &v12, v6, 1);
    id v9 = v13;
    int v10 = v12;
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSXPCSignDataWithIdentityEvent obtained cert/nonce/sig", buf, 2u);
      }
      APSInsertNSArraysToXPCDictionary();
      APSInsertDatasToXPCDictionary();
      APSInsertDatasToXPCDictionary();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSXPCSignDataWithIdentityEvent failed to obtain private key, can't sign data", buf, 2u);
  }
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 48), *(xpc_object_t *)(a1 + 40));
}

void sub_10007DB68(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSXPCRollBAACertEvent obtained refreshed certs", buf, 2u);
  }
  APSInsertNSArraysToXPCDictionary();
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), *(xpc_object_t *)(a1 + 32));
}

CFRunLoopSourceRef sub_10007DBF8(uint64_t a1, int a2, CFIndex a3)
{
  return sub_10007DC00(a1, a2, a3, 0);
}

CFRunLoopSourceRef sub_10007DC00(uint64_t a1, int a2, CFIndex a3, uint64_t a4)
{
  pthread_once(&stru_100159DD0, (void (*)(void))sub_10007DD10);
  BOOL v8 = malloc_type_malloc(0x18uLL, 0x10A0040FC6C5850uLL);
  *(_DWORD *)BOOL v8 = a2;
  v8[1] = a1;
  v8[2] = a4;
  context.version = 1;
  context.info = v8;
  context.retain = 0;
  context.release = (void (__cdecl *)(const void *))&_free;
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))sub_10007DD20;
  context.equal = (Boolean (__cdecl *)(const void *, const void *))sub_10007DD60;
  context.hash = (CFHashCode (__cdecl *)(const void *))sub_10007DD74;
  context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))sub_10007DD7C;
  context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))sub_10007DD84;
  CFRunLoopSourceRef v9 = CFRunLoopSourceCreate(0, a3, &context);
  if (!v9) {
    free(v8);
  }
  return v9;
}

uint64_t sub_10007DD10()
{
  return pthread_key_create((pthread_key_t *)&qword_10015A908, 0);
}

CFStringRef sub_10007DD20(unsigned int *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<CFRunLoopSource MIG Server> {port = %u, subsystem = %p, CFRunLoopSourceContext context = %p}", *a1, *((void *)a1 + 1), *((void *)a1 + 2));
}

BOOL sub_10007DD60(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10007DD74(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_10007DD7C(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_10007DD84(mach_msg_header_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mach_msg_return_t v21;
  FILE *v23;
  char *v24;

  uint64_t v6 = *(void *)(a4 + 8);
  mach_msg_id_t msgh_id = a1->msgh_id;
  int v8 = *(_DWORD *)(v6 + 8);
  BOOL v9 = __OFSUB__(msgh_id, v8);
  int v10 = msgh_id - v8;
  if (v10 < 0 != v9 || msgh_id >= *(_DWORD *)(v6 + 12))
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = *(void (**)(mach_msg_header_t *, mach_msg_header_t *))(v6 + 40 * v10 + 40);
    if (v11)
    {
      char v12 = 0;
      size_t v13 = *(unsigned int *)(v6 + 40 * v10 + 64);
      goto LABEL_7;
    }
  }
  char v12 = 1;
  size_t v13 = 36;
LABEL_7:
  char v14 = (mach_msg_header_t *)malloc_type_malloc(v13, 0x1C5E0787uLL);
  if (v14)
  {
    unsigned int v15 = v14;
    mach_port_t msgh_remote_port = a1->msgh_remote_port;
    v14->mach_msg_bits_t msgh_bits = a1->msgh_bits & 0x1F;
    v14->msgh_std::string::size_type size = 36;
    *(void *)&v14->mach_port_t msgh_remote_port = msgh_remote_port;
    v14->mach_msg_id_t msgh_id = a1->msgh_id + 100;
    if (v12)
    {
      *(NDR_record_t *)&v14[1].mach_msg_bits_t msgh_bits = NDR_record;
      v14[1].mach_port_t msgh_remote_port = -303;
    }
    else
    {
      unint64_t v17 = *(const void **)(a4 + 16);
      if (v17)
      {
        pthread_setspecific(qword_10015A908, v17);
        v11(a1, v15);
        pthread_setspecific(qword_10015A908, 0);
      }
      else
      {
        v11(a1, v14);
      }
    }
    mach_msg_bits_t msgh_bits = v15->msgh_bits;
    if ((v15->msgh_bits & 0x80000000) == 0)
    {
      mach_port_t v19 = v15[1].msgh_remote_port;
      if (v19 == -305)
      {
LABEL_31:
        free(v15);
        return 0;
      }
      if (v19 && (a1->msgh_bits & 0x80000000) != 0)
      {
        a1->mach_port_t msgh_remote_port = 0;
        mach_msg_destroy(a1);
        mach_msg_bits_t msgh_bits = v15->msgh_bits;
      }
    }
    if (v15->msgh_remote_port)
    {
      if ((msgh_bits & 0x1F) == 0x12) {
        mach_msg_option_t v20 = 1;
      }
      else {
        mach_msg_option_t v20 = 17;
      }
      unsigned int v21 = mach_msg(v15, v20, v15->msgh_size, 0, 0, 0, 0);
      if ((v21 - 268435459) >= 2 && v21 != 0)
      {
        unint64_t v23 = __stderrp;
        uint64_t v24 = mach_error_string(v21);
        fprintf(v23, "<CFRunLoopSource MIG Server> mach_msg send error in reply: %s\n", v24);
        goto LABEL_31;
      }
      if ((v21 - 268435459) > 1) {
        goto LABEL_31;
      }
      mach_msg_bits_t msgh_bits = v15->msgh_bits;
    }
    if ((msgh_bits & 0x80000000) != 0) {
      mach_msg_destroy(v15);
    }
    goto LABEL_31;
  }
  return 0;
}

uint64_t sub_10007DF70(__CFRunLoopSource *a1)
{
  memset(&context.info, 0, 64);
  context.version = 1;
  CFRunLoopSourceGetContext(a1, &context);
  return *(unsigned int *)context.info;
}

void *sub_10007DFB0()
{
  return pthread_getspecific(qword_10015A908);
}

uint64_t sub_10007DFBC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 == v4) {
    goto LABEL_8;
  }
  if (!v3)
  {
    if ([v4 count])
    {
      if (v5)
      {
        uint64_t v6 = 0;
        goto LABEL_10;
      }
LABEL_9:
      uint64_t v6 = [v3 count] == 0;
      goto LABEL_10;
    }
LABEL_8:
    uint64_t v6 = 1;
    goto LABEL_10;
  }
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = (uint64_t)[v3 isEqualToSet:v4];
LABEL_10:

  return v6;
}

uint64_t sub_10007E054(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 == v4) {
    goto LABEL_8;
  }
  if (!v3)
  {
    if ([v4 count])
    {
      if (v5)
      {
        uint64_t v6 = 0;
        goto LABEL_10;
      }
LABEL_9:
      uint64_t v6 = [v3 count] == 0;
      goto LABEL_10;
    }
LABEL_8:
    uint64_t v6 = 1;
    goto LABEL_10;
  }
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = (uint64_t)[v3 isEqualToArray:v4];
LABEL_10:

  return v6;
}

uint64_t sub_10007E0EC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 == v4) {
    goto LABEL_8;
  }
  if (!v3)
  {
    if ([v4 count])
    {
      if (v5)
      {
        uint64_t v6 = 0;
        goto LABEL_10;
      }
LABEL_9:
      uint64_t v6 = [v3 count] == 0;
      goto LABEL_10;
    }
LABEL_8:
    uint64_t v6 = 1;
    goto LABEL_10;
  }
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = (uint64_t)[v3 isEqualToDictionary:v4];
LABEL_10:

  return v6;
}

uint64_t sub_10007E184(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 == v4) {
    goto LABEL_8;
  }
  if (!v3)
  {
    if ([v4 length])
    {
      if (v5)
      {
        uint64_t v6 = 0;
        goto LABEL_10;
      }
LABEL_9:
      uint64_t v6 = [v3 length] == 0;
      goto LABEL_10;
    }
LABEL_8:
    uint64_t v6 = 1;
    goto LABEL_10;
  }
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = (uint64_t)[v3 isEqualToData:v4];
LABEL_10:

  return v6;
}

uint64_t sub_10007E21C(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  int v9 = sub_10007DFBC(v7, v8);
  if ((v9 & 1) == 0)
  {
    if (v7)
    {
      if (v8)
      {
LABEL_4:
        id v10 = [v7 mutableCopy];
        *a4 = v10;
        [v10 minusSet:v8];
        id v11 = [v8 mutableCopy];
        *a3 = v11;
        [v11 minusSet:v7];
        goto LABEL_5;
      }
    }
    else
    {
      id v7 = +[NSMutableSet setWithCapacity:0];
      if (v8) {
        goto LABEL_4;
      }
    }
    id v8 = +[NSMutableSet setWithCapacity:0];
    goto LABEL_4;
  }
LABEL_5:

  return v9 ^ 1u;
}

BOOL sub_10007E2F8(const __CFString *a1)
{
  id v2 = +[APSMultiUserMode sharedInstance];
  unsigned int v3 = [v2 isMultiUser];

  if (v3)
  {
    id v4 = +[APSMultiUserFS sharedInstance];
    id v5 = [v4 systemPath];
    [v5 stringByAppendingString:@"/"];
    uint64_t v6 = (const void *)_CFPreferencesCopyValueWithContainer();

    if (v6)
    {
      CFTypeID v7 = CFGetTypeID(v6);
      if (v7 == CFBooleanGetTypeID()) {
        int Value = CFBooleanGetValue((CFBooleanRef)v6);
      }
      else {
        int Value = 0;
      }
      CFRelease(v6);
    }
    else
    {
      int Value = 0;
    }
  }
  else
  {
    int Value = CFPreferencesGetAppBooleanValue(a1, APSBundleIdentifier, 0);
  }
  return Value != 0;
}

CFPropertyListRef sub_10007E420(const __CFString *a1, int a2)
{
  id v4 = +[APSMultiUserMode sharedInstance];
  unsigned int v5 = [v4 isMultiUser];

  if (v5) {
    BOOL v6 = a2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    CFStringRef v7 = (const __CFString *)APSBundleIdentifier;
    return CFPreferencesCopyAppValue(a1, v7);
  }
  else
  {
    id v8 = +[APSMultiUserFS sharedInstance];
    int v9 = [v8 systemPath];
    [v9 stringByAppendingString:@"/"];
    uint64_t v10 = _CFPreferencesCopyValueWithContainer();

    return (CFPropertyListRef)v10;
  }
}

void sub_10007E524(const __CFString *a1, const void *a2, int a3)
{
  BOOL v6 = +[APSMultiUserMode sharedInstance];
  unsigned int v7 = [v6 isMultiUser];

  if (v7) {
    BOOL v8 = a3 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    CFStringRef v9 = (const __CFString *)APSBundleIdentifier;
    CFPreferencesSetAppValue(a1, a2, v9);
  }
  else
  {
    id v11 = +[APSMultiUserFS sharedInstance];
    uint64_t v10 = [v11 systemPath];
    [v10 stringByAppendingString:@"/"];
    _CFPreferencesSetValueWithContainer();
  }
}

void sub_10007E648(int a1)
{
  id v2 = +[APSMultiUserMode sharedInstance];
  unsigned int v3 = [v2 isMultiUser];

  if (v3) {
    BOOL v4 = a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    CFStringRef v5 = (const __CFString *)APSBundleIdentifier;
    CFPreferencesAppSynchronize(v5);
  }
  else
  {
    id v7 = +[APSMultiUserFS sharedInstance];
    BOOL v6 = [v7 systemPath];
    [v6 stringByAppendingString:@"/"];
    _CFPreferencesSynchronizeWithContainer();
  }
}

uint64_t sub_10007E748()
{
  uint64_t result = os_variant_has_internal_content();
  if (result) {
    return !sub_10007E2F8(@"ForceProductionConfiguration");
  }
  return result;
}

BOOL sub_10007E77C()
{
  return MGGetSInt32Answer() == 7;
}

__CFString *sub_10007E7A8(void *a1)
{
  id v1 = [a1 code];
  if ((unint64_t)v1 + 9886 > 0x56) {
    return 0;
  }
  else {
    return off_10012BB00[(void)v1 + 9886];
  }
}

id sub_10007E7E4(void *a1)
{
  id v1 = [a1 base64EncodedStringWithOptions:0];
  id v2 = [v1 stringByReplacingOccurrencesOfString:@"+" withString:@"-"];

  unsigned int v3 = [v2 stringByReplacingOccurrencesOfString:@"/" withString:@"_"];

  BOOL v4 = [v3 stringByReplacingOccurrencesOfString:@"=" withString:&stru_10012F350];

  return v4;
}

id sub_10007E88C(void *a1)
{
  id v1 = a1;
  id v2 = [v1 bytes];
  CC_LONG v3 = [v1 length];

  CC_SHA1(v2, v3, md);
  id v4 = [objc_alloc((Class)NSData) initWithBytes:md length:20];
  return v4;
}

id sub_10007E944(void *a1)
{
  id v1 = a1;
  id v2 = [v1 bytes];
  CC_LONG v3 = [v1 length];

  CC_SHA256(v2, v3, md);
  id v4 = [objc_alloc((Class)NSData) initWithBytes:md length:32];
  return v4;
}

id sub_10007E9FC(void *a1)
{
  id v1 = [a1 dataUsingEncoding:4];
  id v2 = sub_10007E88C(v1);

  return v2;
}

id sub_10007EA4C(void *a1)
{
  id v1 = a1;
  id v2 = [v1 length];
  id v3 = v1;
  id v4 = (char *)[v3 bytes];
  for (id i = [objc_alloc((Class)NSMutableString) initWithCapacity:2 * (void)v2];
        v2;
        id v2 = (char *)v2 - 1)
  {
    uint64_t v6 = *v4++;
    objc_msgSend(i, "appendFormat:", @"%02x", v6);
  }

  return i;
}

id sub_10007EAFC(void *a1)
{
  id v1 = sub_10007E9FC(a1);
  id v2 = sub_10007EA4C(v1);

  return v2;
}

id sub_10007EB48(void *a1, id *a2)
{
  id v3 = [a1 dataUsingEncoding:4];
  if (a2 && [*a2 length])
  {
    id v4 = *a2;
  }
  else
  {
    arc4random_buf(&__buf, 8uLL);
    CFStringRef v5 = +[NSData dataWithBytes:&__buf length:8];
    id v4 = v5;
    if (a2) {
      *a2 = v5;
    }
  }
  memset(&__buf, 0, sizeof(__buf));
  CC_SHA256_Init(&__buf);
  id v6 = v3;
  CC_SHA256_Update(&__buf, [v6 bytes], (CC_LONG)objc_msgSend(v6, "length"));
  id v7 = v4;
  CC_SHA256_Update(&__buf, [v7 bytes], (CC_LONG)objc_msgSend(v7, "length"));
  CC_SHA256_Final(v10, &__buf);
  BOOL v8 = +[NSData dataWithBytes:v10 length:32];

  return v8;
}

BOOL sub_10007ECC0(__SecKey *a1, __SecKey *a2, void *a3, uint64_t *a4, void **a5, void *a6, int a7)
{
  id v13 = a3;
  id v14 = a6;
  BOOL v15 = 0;
  if (a2 && a4 && a5)
  {
    uint64_t v16 = +[NSDate date];
    [v16 timeIntervalSince1970];
    double v18 = v17;

    if (v14)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Generating nonce with time override.", buf, 2u);
      }
      unint64_t v19 = (unint64_t)[v14 unsignedLongLongValue];
    }
    else
    {
      unint64_t v19 = 1000 * (unint64_t)v18;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)id v41 = v19;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Generating nonce with timestamp %llu", buf, 0xCu);
    }
    char v42 = a7;
    unint64_t v43 = bswap64(v19);
    arc4random_buf(&v44, 8uLL);
    *a4 = +[NSData dataWithBytes:&v42 length:17];
    id v20 = objc_alloc_init((Class)NSMutableData);
    unsigned int v21 = v20;
    if (*a4 && a7) {
      objc_msgSend(v20, "appendData:");
    }
    if (v13) {
      [v21 appendData:v13];
    }
    if (*a4 && (a7 & 1) == 0) {
      objc_msgSend(v21, "appendData:");
    }
    BOOL v22 = +[APSLog nonce];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v23 = [v21 length];
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)id v41 = v23;
      *(_WORD *)&v41[4] = 2112;
      *(void *)&v41[6] = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Signature input is %d bytes (%@)", buf, 0x12u);
    }

    int v24 = sub_10007F1B4();
    if (v24) {
      char v25 = 3;
    }
    else {
      char v25 = 1;
    }
    v39[0] = 1;
    v39[1] = v25;
    id v26 = &kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1;
    if (v24) {
      id v26 = &kSecKeyAlgorithmECDSASignatureMessageX962SHA256;
    }
    CFStringRef v27 = *v26;
    CFErrorRef v38 = 0;
    CFDataRef v28 = SecKeyCreateSignature(a2, v27, (CFDataRef)v21, &v38);
    if (v28)
    {
      if (a1)
      {
        int v29 = SecKeyVerifySignature(a1, v27, (CFDataRef)v21, v28, &v38);
        uint64_t v30 = +[APSLog nonce];
        CFStringRef v31 = v30;
        if (!v29)
        {
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            sub_1000CADA0(a4, (uint64_t *)&v38, v31);
          }

          BOOL v15 = 0;
          *a5 = 0;
          goto LABEL_42;
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v32 = *a4;
          *(_DWORD *)buf = 138412290;
          *(void *)id v41 = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Succeeded verifying signature for: %@", buf, 0xCu);
        }
      }
      CFStringRef v33 = +[NSMutableData dataWithBytes:v39 length:2];
      [v33 appendData:v28];
      *a5 = [v33 copy];

      unsigned int v34 = *a5;
    }
    else
    {
      uint64_t v35 = +[APSLog nonce];
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = *a4;
        *(_DWORD *)buf = 138412546;
        *(void *)id v41 = v36;
        *(_WORD *)&v41[8] = 2112;
        *(void *)&v41[10] = v38;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Failed signing nonce: %@   with error: %@", buf, 0x16u);
      }

      unsigned int v34 = 0;
      *a5 = 0;
    }
    if ([v34 length]) {
      BOOL v15 = [(id)*a4 length] != 0;
    }
    else {
      BOOL v15 = 0;
    }
LABEL_42:
  }
  return v15;
}

uint64_t sub_10007F114()
{
  if (qword_10015A918 != -1) {
    dispatch_once(&qword_10015A918, &stru_10012BAE0);
  }
  return byte_10015A910;
}

void sub_10007F158(id a1)
{
  int v2 = 0;
  size_t v1 = 4;
  if (!sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0)) {
    byte_10015A910 = v2 != 0;
  }
}

uint64_t sub_10007F1B4()
{
  int IsSupported = DeviceIdentityIsSupported();
  unsigned int v1 = _os_feature_enabled_impl();
  char v2 = _os_feature_enabled_impl();
  uint64_t result = IsSupported & v1;
  if (result == 1 && (v2 & 1) == 0)
  {
    if (qword_10015A918 != -1) {
      dispatch_once(&qword_10015A918, &stru_10012BAE0);
    }
    return byte_10015A910;
  }
  return result;
}

BOOL sub_10007F250(uint64_t a1)
{
  return a1 != 0;
}

BOOL sub_10007F700(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = objc_alloc_init(PSAppChannelUpdates);
        [a1 addAppChannelUpdates:v12];
        if (!PBReaderPlaceMark() || !sub_100004D98(v12, a2)) {
          goto LABEL_28;
        }
LABEL_24:
        PBReaderRecallMark();

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    char v12 = objc_alloc_init(PSSubscriptionUpdate);
    [a1 addSubscriptionUpdates:v12];
    if (!PBReaderPlaceMark() || (sub_100074C9C((uint64_t)v12, a2) & 1) == 0)
    {
LABEL_28:

      return 0;
    }
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100080138(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("APS-IDSSendQueue", 0);
  uint64_t v2 = qword_10015A920;
  qword_10015A920 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_100080284(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 40)) initWithService:@"com.apple.private.alloy.pushproxy"];
  id v3 = [v2 linkedDevicesWithRelationship:3];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 8), v2);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%@ created IDSService", (uint8_t *)&v5, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_checkNearbyDevices:", v3);
  [v2 addDelegate:*(void *)(a1 + 32) queue:&_dispatch_main_q];
}

void sub_1000808F0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _recipientDevice];
  if (v2)
  {
    if (!qword_10015A930)
    {
      id v3 = (void **)CUTWeakLinkSymbol();
      if (v3) {
        uint64_t v4 = *v3;
      }
      else {
        uint64_t v4 = 0;
      }
      objc_storeStrong((id *)&qword_10015A930, v4);
    }
    if (!qword_10015A938)
    {
      unint64_t v7 = (void **)CUTWeakLinkSymbol();
      if (v7) {
        char v8 = *v7;
      }
      else {
        char v8 = 0;
      }
      objc_storeStrong((id *)&qword_10015A938, v8);
    }
    if (!qword_10015A940)
    {
      CFStringRef v9 = (void **)CUTWeakLinkSymbol();
      if (v9) {
        int v10 = *v9;
      }
      else {
        int v10 = 0;
      }
      objc_storeStrong((id *)&qword_10015A940, v10);
    }
    if (!qword_10015A948)
    {
      id v11 = (void **)CUTWeakLinkSymbol();
      if (v11) {
        char v12 = *v11;
      }
      else {
        char v12 = 0;
      }
      objc_storeStrong((id *)&qword_10015A948, v12);
    }
    id v13 = objc_alloc_init((Class)NSMutableDictionary);
    id v14 = v13;
    if (qword_10015A938) {
      objc_msgSend(v13, "setObject:forKey:", &__kCFBooleanTrue);
    }
    if (qword_10015A940) {
      objc_msgSend(v14, "setObject:forKey:", &__kCFBooleanTrue);
    }
    if (qword_10015A948) {
      objc_msgSend(v14, "setObject:forKey:", &__kCFBooleanFalse);
    }
    BOOL v15 = *(void **)(*(void *)(a1 + 32) + 8);
    uint64_t v16 = *(void *)(a1 + 48);
    double v17 = +[NSSet setWithObject:qword_10015A930];
    id v30 = 0;
    id v31 = 0;
    unsigned int v18 = [v15 sendData:v16 toDestinations:v17 priority:300 options:v14 identifier:&v31 error:&v30];
    id v5 = v31;
    id v19 = v30;

    id v20 = [*(id *)(a1 + 40) objectForKey:@"c"];
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      CFStringRef v22 = @"NO";
      uint64_t v23 = *(void *)(v21 + 8);
      *(_DWORD *)buf = 138413570;
      if (v18) {
        CFStringRef v22 = @"YES";
      }
      uint64_t v33 = v21;
      __int16 v34 = 2112;
      uint64_t v35 = v20;
      __int16 v36 = 2112;
      CFStringRef v37 = v22;
      __int16 v38 = 2112;
      id v39 = v5;
      __int16 v40 = 2112;
      id v41 = v19;
      __int16 v42 = 2112;
      uint64_t v43 = v23;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%@ sent data command %@ success %@ with identifier %@  error %@ on service %@", buf, 0x3Eu);
    }
    if ([v20 isEqual:&off_100137638])
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100080DA8;
      block[3] = &unk_100129D10;
      void block[4] = *(void *)(a1 + 32);
      id v29 = v5;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
    if (v5) {
      unsigned int v24 = v18;
    }
    else {
      unsigned int v24 = 0;
    }
    if (v24 == 1 && *(void *)(a1 + 56))
    {
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_100080DB4;
      void v25[3] = &unk_100129B68;
      v25[4] = *(void *)(a1 + 32);
      id v26 = *(id *)(a1 + 56);
      id v27 = v5;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v25);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Couldn't find recipient IDSDevice when asked to send -- queuing message.", buf, 2u);
    }
    id v5 = [*(id *)(a1 + 32) deviceNotFoundMessageQueue];
    objc_sync_enter(v5);
    uint64_t v6 = [*(id *)(a1 + 32) deviceNotFoundMessageQueue];
    [v6 addObject:*(void *)(a1 + 40)];

    [*(id *)(a1 + 32) _scheduleDeviceNotFoundTimer];
    objc_sync_exit(v5);
  }
}

void sub_100080D8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100080DA8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setRecentDaemonAliveGuid:*(void *)(a1 + 40)];
}

void sub_100080DB4(void *a1)
{
  id v2 = *(void **)(a1[4] + 48);
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v4 = a1[4];
    id v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(&STACK[0x400], 8) = v3;

    id v2 = *(void **)(a1[4] + 48);
  }
  [v2 setObject:a1[5] forKey:a1[6]];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[5];
    uint64_t v6 = a1[6];
    uint64_t v8 = a1[4];
    int v9 = 138412802;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    __int16 v13 = 2112;
    uint64_t v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%@ mapping guid %@ with %@", (uint8_t *)&v9, 0x20u);
  }
}

void sub_1000812B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id sub_10008477C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_checkNearbyDevices:", *(void *)(a1 + 40));
}

void sub_100084914(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    CFStringRef v3 = @"YES";
    if (*(unsigned char *)(v2 + 32)) {
      CFStringRef v4 = @"YES";
    }
    else {
      CFStringRef v4 = @"NO";
    }
    if (!*(unsigned char *)(a1 + 40)) {
      CFStringRef v3 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    uint64_t v27 = v2;
    __int16 v28 = 2112;
    CFStringRef v29 = v4;
    __int16 v30 = 2112;
    CFStringRef v31 = v3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%@ isNearby changed from %@ to %@", buf, 0x20u);
  }
  unsigned int v5 = [*(id *)(a1 + 32) canUseProxy];
  int v6 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  if (v6 != *(unsigned __int8 *)(v7 + 32))
  {
    unsigned int v8 = v5;
    *(unsigned char *)(v7 + 32) = v6;
    [*(id *)(a1 + 32) _assertWiFiIfPossible];
    uint64_t v9 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v9 + 32))
    {
      [(id)v9 _sendDaemonAliveMessage];
      uint64_t v9 = *(void *)(a1 + 32);
    }
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v10 = *(id *)(v9 + 24);
    id v11 = [v10 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v22;
      do
      {
        for (id i = 0; i != v12; id i = (char *)i + 1)
        {
          if (*(void *)v22 != v13) {
            objc_enumerationMutation(v10);
          }
          BOOL v15 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKey:", *(void *)(*((void *)&v21 + 1) + 8 * i), (void)v21);
          [v15 proxyManager:*(void *)(a1 + 32) isNearbyChanged:*(unsigned __int8 *)(a1 + 40)];
        }
        id v12 = [v10 countByEnumeratingWithState:&v21 objects:v25 count:16];
      }
      while (v12);
    }

    id v16 = [*(id *)(a1 + 32) canUseProxy];
    if (v8 != v16)
    {
      id v17 = v16;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v18 = @"NO";
        uint64_t v19 = *(void *)(a1 + 32);
        if (v17) {
          CFStringRef v18 = @"YES";
        }
        *(_DWORD *)buf = 138412546;
        uint64_t v27 = v19;
        __int16 v28 = 2112;
        CFStringRef v29 = v18;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%@ canUseProxy changed to %@", buf, 0x16u);
      }
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
      [WeakRetained proxyManager:*(void *)(a1 + 32) canUseProxyChanged:v17];
    }
  }
}

void sub_100084C64(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) linkedDevicesWithRelationship:3];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100084D20;
  v5[3] = &unk_10012BE30;
  id v3 = *(id *)(a1 + 40);
  id v6 = v2;
  id v7 = v3;
  id v4 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);
}

uint64_t sub_100084D20(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_100084DA4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _checkNearbyDevices:v4];
  [*(id *)(a1 + 32) _updateTimerIfNecessaryWithDevices:v4];

  unsigned int v5 = *(void **)(a1 + 32);
  return _[v5 _flushDeviceNotFoundMessageQueue];
}

id sub_100084E74(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _checkNearbyDevices:a2];
}

void sub_100084EEC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _checkNearbyDevices:v4];
  [*(id *)(a1 + 32) _updateTimerIfNecessaryWithDevices:v4];
}

void sub_100085004(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100085098;
  block[3] = &unk_10012A5E0;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_100085098(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendDaemonAliveMessage];
}

uint64_t sub_1000852B8(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = PBReaderReadData();
      uint64_t v13 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x400], 8) = v12;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100085674(id a1)
{
  id v1 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:4];
  uint64_t v2 = qword_10015A950;
  qword_10015A950 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_100085E2C(id a1)
{
  qword_100159E48 = sysconf(71);
}

void sub_10008CD48(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  if (([v7 sent] & 1) == 0 && (objc_msgSend(v7, "hasTimedOut") & 1) == 0)
  {
    char v8 = [v7 sendBlock];
    id v13 = 0;
    uint64_t v9 = ((void (**)(void, id *))v8)[2](v8, &v13);
    id v10 = v13;
    if (v10)
    {
      [*(id *)(a1 + 32) addIndex:a3];
      uint64_t v11 = [v7 completionBlock];
      uint64_t v12 = (void *)v11;
      if (v11) {
        (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0, v10);
      }
    }
    if (v9)
    {
      [v7 setSent:1];
      [v7 setSendInterface:v9];
    }
    else
    {
      *a4 = 1;
    }
  }
}

BOOL sub_10008D6AC(void *a1)
{
  id v1 = a1;
  BOOL v2 = os_variant_has_internal_content()
    && ([v1 isEqualToString:@"com.tinyspeck.chatlyio"] & 1) != 0;

  return v2;
}

id sub_10008D708(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  unsigned int v5 = v4;
  if (!v3)
  {
    id v7 = 0;
    goto LABEL_15;
  }
  if (sub_10008D6AC(v4))
  {
    uint64_t v14 = objc_opt_class();
  }
  else
  {
    if (!sub_10008D918() || !sub_10008D9E8()) {
      goto LABEL_13;
    }
    id v8 = v5;
    uint64_t v9 = (uint64_t (*)(id))sub_10008D9E8();
    if (!v9) {
      sub_1000CB128();
    }
    char v10 = v9(v8);

    if ((v10 & 1) == 0)
    {
LABEL_13:
      uint64_t v6 = [v3 description];
      goto LABEL_14;
    }
    if (objc_opt_respondsToSelector())
    {
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<redacted %@ count:%llu>", objc_opt_class(), [v3 count]);
      goto LABEL_5;
    }
    char v12 = objc_opt_respondsToSelector();
    uint64_t v13 = objc_opt_class();
    if (v12)
    {
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<redacted %@ length:%llu>", v13, [v3 length]);
      goto LABEL_5;
    }
    uint64_t v14 = v13;
  }
  +[NSString stringWithFormat:@"<redacted %@>", v14, v15];
  uint64_t v6 = LABEL_5:;
LABEL_14:
  id v7 = (void *)v6;
LABEL_15:

  return v7;
}

id sub_10008D88C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  if (dlopen("/System/Library/PrivateFrameworks/IDSFoundation.framework/IDSFoundation", 16)) {
    sub_10008D708(v4, v3);
  }
  else {
  unsigned int v5 = [v4 description];
  }

  return v5;
}

uint64_t sub_10008D918()
{
  if (!qword_10015A968) {
    qword_10015A968 = _sl_dlopen();
  }
  return qword_10015A968;
}

uint64_t sub_10008D9E8()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_10015A970;
  uint64_t v6 = qword_10015A970;
  if (!qword_10015A970)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10008DB28;
    v2[3] = &unk_10012AC78;
    v2[4] = &v3;
    sub_10008DB28((uint64_t)v2);
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10008DA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008DAB4()
{
  uint64_t result = _sl_dlopen();
  qword_10015A968 = result;
  return result;
}

void *sub_10008DB28(uint64_t a1)
{
  id v4 = 0;
  BOOL v2 = (void *)sub_10008D918();
  if (!v2) {
    sub_1000CB1A0(&v4);
  }
  uint64_t result = dlsym(v2, "IDSShouldUseRestrictedLoggingForService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_10015A970 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10008DC00(id a1)
{
  if (sub_10007E748())
  {
    id v1 = objc_alloc_init(APSDiagnostic);
    uint64_t v2 = qword_10015A978;
    qword_10015A978 = (uint64_t)v1;
    _objc_release_x1(v1, v2);
  }
}

void sub_10008DD7C(uint64_t a1)
{
  v11[0] = @"Push Problem Detected";
  v10[0] = kCFUserNotificationAlertHeaderKey;
  v10[1] = kCFUserNotificationAlertMessageKey;
  uint64_t v2 = +[NSString stringWithFormat:@"A problem has been detected with CloudKit Push Ack"];
  v11[1] = v2;
  v11[2] = @"File a radar";
  v10[2] = kCFUserNotificationDefaultButtonTitleKey;
  v10[3] = kCFUserNotificationAlternateButtonTitleKey;
  void v11[3] = @"Not now";
  CFDictionaryRef v3 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:4];

  SInt32 error = 0;
  id v4 = CFUserNotificationCreate(0, 0.0, 3uLL, &error, v3);
  if (v4)
  {
    uint64_t v5 = v4;
    *(void *)responseFlags = 0;
    CFUserNotificationReceiveResponse(v4, 86400.0, (CFOptionFlags *)responseFlags);
    if ((responseFlags[0] & 3) == 0)
    {
      uint64_t v6 = +[LSApplicationWorkspace defaultWorkspace];
      [v6 openURL:*(void *)(a1 + 32) configuration:0 completionHandler:0];
    }
    CFRelease(v5);
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = +[NSNumber numberWithInt:error];
    *(_DWORD *)responseFlags = 138412290;
    *(void *)&responseFlags[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Failed to create notification error %@", responseFlags, 0xCu);
  }
}

uint64_t sub_10008E09C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = objc_alloc_init(TASKResponse);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark() || (sub_10004B518((uint64_t)v12, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10008E4B4(id a1)
{
  id v1 = objc_alloc_init(APSMessageStore);
  uint64_t v2 = qword_10015A990;
  qword_10015A990 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_10008E54C(id a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Performing initial database housekeeping", buf, 2u);
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore -   => Setting cache size", v2, 2u);
  }
  sub_1000A752C(3);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore -   => Invalidating caches", v1, 2u);
  }
  sub_1000A74D0();
}

void sub_10008E6A4(uint64_t a1)
{
  sub_1000A70F8();
  *(unsigned char *)(*(void *)(a1 + 32) + _Block_object_dispose(&STACK[0x400], 8) = 0;
  int v2 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 9);
  BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v3)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Reopening database", buf, 2u);
    }
    [*(id *)(a1 + 32) openDatabase];
  }
  else if (v3)
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Leaving database closed", v4, 2u);
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 9) = 0;
}

id sub_10008E884(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(unsigned char *)(v1 + 8))
  {
    *(unsigned char *)(v1 + 9) = 0;
    return _objc_msgSend(*((id *)result + 4), "__closeDatabase");
  }
  return result;
}

id sub_10008E914(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(unsigned char *)(v1 + 8))
  {
    *(unsigned char *)(v1 + _Block_object_dispose(&STACK[0x400], 8) = 1;
    return [*((id *)result + 4) performBlock:&stru_10012BF70];
  }
  return result;
}

void sub_10008E9D8(uint64_t a1)
{
  sub_1000A6804();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  sub_1000A74D0();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008EA74;
  block[3] = &unk_10012A5E0;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_10008EA74(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setDatabaseCloseTimer];
}

void sub_10008EB20(uint64_t a1)
{
  sub_1000A6804();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  sub_1000A74D0();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008EBBC;
  block[3] = &unk_10012A5E0;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_10008EBBC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setDatabaseCloseTimer];
}

void sub_10008EC68(uint64_t a1)
{
  sub_1000A6804();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  sub_1000A74D0();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008ED04;
  block[3] = &unk_10012A5E0;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_10008ED04(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setDatabaseCloseTimer];
}

void sub_10008EEB4(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) userInfo];
  BOOL v3 = APSEncodeDictionary();

  if (v3)
  {
    if ([*(id *)(a1 + 32) priority] == (id)1)
    {
      char v4 = *(void **)(a1 + 40);
      unsigned int v5 = [*(id *)(a1 + 32) topic];
      uint64_t v6 = *(void *)(a1 + 48);
      unint64_t v7 = [*(id *)(a1 + 32) token];
      long long v21 = v7;
      char v8 = +[NSArray arrayWithObjects:&v21 count:1];
      [v4 _onQueueDeleteLowPriorityIncomingMessagesForTopic:v5 environment:v6 pushTokens:v8];
    }
    uint64_t v20 = *(void *)(a1 + 56);
    id v19 = [*(id *)(a1 + 32) token];
    id v18 = [*(id *)(a1 + 32) topic];
    id v17 = [*(id *)(a1 + 48) name];
    id v16 = [*(id *)(a1 + 32) correlationIdentifier];
    unsigned int v15 = [*(id *)(a1 + 32) wasFromStorage];
    unsigned __int8 v9 = [*(id *)(a1 + 32) wasLastMessageFromStorage];
    id v10 = [*(id *)(a1 + 32) identifier];
    id v11 = [*(id *)(a1 + 32) priority];
    char v12 = [*(id *)(a1 + 32) timestamp];
    [v12 timeIntervalSinceReferenceDate];
    uint64_t v14 = sub_1000AABE8(0, v20, (uint64_t)v19, (uint64_t)v18, (uint64_t)v17, (uint64_t)v16, (uint64_t)v3, v15, v9, (uint64_t)v10, (uint64_t)v11, (uint64_t)v13, [*(id *)(a1 + 32) isTracingEnabled], (uint64_t)objc_msgSend(*(id *)(a1 + 32), "tracingUUID"), (unsigned __int16)objc_msgSend(*(id *)(a1 + 32), "pushType"), objc_msgSend(*(id *)(a1 + 32), "pushFlags"));

    if (v14) {
      CFRelease(v14);
    }
  }
}

void sub_10008F154(uint64_t a1)
{
}

id sub_10008F3F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onQueueDeleteLowPriorityIncomingMessagesForTopic:*(void *)(a1 + 40) environment:*(void *)(a1 + 48) pushTokens:*(void *)(a1 + 56)];
}

void sub_10008F498(uint64_t a1)
{
  int v2 = +[NSDate dateWithTimeIntervalSinceNow:-2592000.0];
  [v2 timeIntervalSinceReferenceDate];
  uint64_t v4 = (uint64_t)v3;

  CFStringRef v5 = (const __CFString *)[*(id *)(a1 + 32) name];
  sub_1000AB50C(v5, 1, v4);
}

void sub_10008F650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008F668(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10008F678(uint64_t a1)
{
}

void sub_10008F680(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        unint64_t v7 = (void *)sub_1000AB6A4(1, (uint64_t)objc_msgSend(*(id *)(a1 + 40), "name", (void)v8), *(void *)(*((void *)&v8 + 1) + 8 * (void)v6));
        [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObjectsFromArray:v7];

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_10008FD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_10008FD84(uint64_t a1)
{
  CFMutableArrayRef v2 = sub_1000AB828(*(void *)(a1 + 64), *(void *)(a1 + 32), (uint64_t)[*(id *)(a1 + 40) name]);
  uint64_t v3 = [*(id *)(a1 + 48) _onQueueIncomingMessagesFromRecords:v2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_10008FFBC(uint64_t a1)
{
  CFMutableArrayRef v2 = [*(id *)(a1 + 32) userInfo];
  uint64_t v3 = APSEncodeDictionary();

  if (v3)
  {
    uint64_t v15 = *(void *)(a1 + 40);
    id v14 = [*(id *)(a1 + 32) topic];
    id v4 = [*(id *)(a1 + 48) name];
    unsigned int v5 = [*(id *)(a1 + 32) wasSent];
    id v6 = [*(id *)(a1 + 32) messageID];
    id v7 = [*(id *)(a1 + 32) identifier];
    id v8 = [*(id *)(a1 + 32) priority];
    id v9 = [*(id *)(a1 + 32) payloadFormat];
    id v10 = [*(id *)(a1 + 32) timeout];
    long long v11 = [*(id *)(a1 + 32) timestamp];
    [v11 timeIntervalSinceReferenceDate];
    double v13 = sub_1000A94E8(0, v15, 0, (uint64_t)v14, (uint64_t)v4, (uint64_t)v3, v5, (uint64_t)v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v12);

    if (v13)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        id v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Got message record %p", buf, 0xCu);
      }
      CFRelease(v13);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Dropping message - no payload data", buf, 2u);
  }
}

void sub_1000902C8(uint64_t a1)
{
}

void sub_100090424(uint64_t a1)
{
  CFMutableArrayRef v2 = (uint64_t *)(a1 + 32);
  CFStringRef v3 = sub_1000A9F7C(*(const __CFString **)(a1 + 32));
  if (v3)
  {
    CFStringRef v4 = v3;
    sub_1000AA19C((uint64_t)v3, *(unsigned char *)(a1 + 40));
    CFRelease(v4);
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
  {
    sub_1000CB220(v2);
  }
}

void sub_1000905DC(uint64_t a1)
{
  CFMutableArrayRef v2 = [*(id *)(a1 + 32) channelID];
  CFStringRef v3 = [*(id *)(a1 + 32) channelTopic];
  CFStringRef v4 = [*(id *)(a1 + 32) environment];
  unsigned int v5 = [*(id *)(a1 + 32) tokenName];
  id v6 = sub_100009898(0, (uint64_t)v2, (uint64_t)v3, (uint64_t)v4, (uint64_t)v5, (uint64_t)[*(id *)(a1 + 32) checkpoint]);

  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 134217984;
      id v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Got channel record %p", (uint8_t *)&v7, 0xCu);
    }
    CFRelease(v6);
  }
}

void sub_1000908BC(uint64_t *a1)
{
}

void sub_100090C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100090C70(uint64_t a1)
{
  CFMutableArrayRef v2 = (const void *)sub_100009F08(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v3 = [*(id *)(a1 + 64) _onQueueSubscribedChannelsForRecord:v2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 72) + 8);
  unsigned int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_100090F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100090F74(uint64_t a1)
{
  CFMutableArrayRef v2 = sub_10000A188(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v3 = [*(id *)(a1 + 56) _onQueueSubscribedChannelsForRecords:v2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8);
  unsigned int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_1000911B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000911D8(uint64_t a1)
{
  CFMutableArrayRef v2 = sub_10000A344(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v3 = [*(id *)(a1 + 48) _onQueueSubscribedChannelsForRecords:v2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  unsigned int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_1000913BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1000913DC(uint64_t a1)
{
  CFMutableArrayRef v2 = sub_10000A4F0();
  uint64_t v3 = [*(id *)(a1 + 32) _onQueueSubscribedChannelsForRecords:v2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (v2)
  {
    CFRelease(v2);
  }
}

__CFString *sub_100091740()
{
  CFUUIDRef v0 = CFUUIDCreate(0);
  uint64_t v1 = (__CFString *)CFUUIDCreateString(0, v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

id sub_100092D7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _disconnectStreamForInterface:*(void *)(a1 + 40) withReason:*(unsigned int *)(a1 + 48)];
}

id sub_100092D8C(uint64_t a1, void *a2)
{
  return _[a2 failedToConnectOnProtocolConnection:*(void *)(a1 + 32)];
}

id sub_1000933CC(uint64_t a1, void *a2)
{
  return _[a2 protocolConnection:*(void *)(a1 + 32) didDisconnectWithConnectionState:*(void *)(a1 + 40) reason:*(unsigned int *)(a1 + 48)];
}

void sub_100094E44(id a1)
{
  uint64_t v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    CFMutableArrayRef v2 = v1;
    if (CFEqual(v1, @"AudioAccessory")) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = CFEqual(v2, @"AppleTV") != 0;
    }
    byte_10015A998 = v3;
    CFRelease(v2);
  }
}

void sub_1000953AC(uint64_t a1)
{
  unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 192) keepAliveV2SupportedOnInterface:0];
  unsigned int v3 = [*(id *)(*(void *)(a1 + 32) + 200) BOOLValueFromPushBundleForKey:APSForceKeepAliveV1Key error:0];
  if (v2 == v3)
  {
    unsigned int v4 = v3;
    [*(id *)(*(void *)(a1 + 32) + 192) setKeepAliveV2Supported:v3 ^ 1 onInterface:0];
    id v5 = [*(id *)(a1 + 32) copyOperatorName];
    id v6 = +[APSLog courier];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v7 = @"in";
      if (v4) {
        CFStringRef v7 = @"out of";
      }
      int v8 = 138412546;
      id v9 = v5;
      __int16 v10 = 2112;
      CFStringRef v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@ opts %@ Keep Alive 2.0", (uint8_t *)&v8, 0x16u);
    }

    [*(id *)(a1 + 32) _performKeepAliveOnInterface:0 shortInterval:0 withAction:2];
  }
}

id sub_1000965E4(uint64_t a1, void *a2)
{
  return _[a2 outgoingDataAboutToSendForProtocolConnection:*(void *)(a1 + 32)];
}

void sub_100099488(_Unwind_Exception *a1)
{
}

id sub_100099528(void *a1, void *a2)
{
  id result = [a2 protocolConnection:a1[4] receivedOfflinePresencekWithParameters:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  return result;
}

void sub_100099564(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  if ([v5 shouldHandleIncomingPush:*(void *)(a1 + 32) forProtocolConnection:*(void *)(a1 + 40)])
  {
    [v5 protocolConnection:*(void *)(a1 + 40) receivedMessageWithParameters:*(void *)(a1 + 32) generation:*(void *)(a1 + 56) isWaking:*(unsigned __int8 *)(a1 + 64)];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    *a3 = 1;
  }
}

id sub_1000995E0(void *a1, void *a2)
{
  id result = [a2 protocolConnection:a1[4] receivedTaskControlWithParameters:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  return result;
}

id sub_10009961C(void *a1, void *a2)
{
  id result = [a2 protocolConnection:a1[4] receivedTaskNotificationWithParameters:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  return result;
}

void sub_100099658(void *a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  if ([v5 shouldHandleIncomingPush:a1[4] forProtocolConnection:a1[5]])
  {
    [v5 protocolConnection:a1[5] receivedPubSubChannelListWithParameters:a1[4]];
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    *a3 = 1;
  }
}

void sub_1000996CC(void *a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  if ([v5 shouldHandleIncomingPush:a1[4] forProtocolConnection:a1[5]])
  {
    [v5 protocolConnection:a1[5] receivedPubSubChannelUpdateWithParameters:a1[4]];
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    *a3 = 1;
  }
}

id sub_100099740(void *a1, void *a2)
{
  id result = [a2 protocolConnection:a1[4] receivedPresenceTrackingRequestWithParameters:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  return result;
}

id sub_10009977C(void *a1, void *a2)
{
  id result = [a2 protocolConnection:a1[4] receivedFilterUpdateWithParameters:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  return result;
}

id sub_10009A0BC(uint64_t a1, void *a2)
{
  return _[a2 didSuspendProtocolConnection:*(void *)(a1 + 32)];
}

id sub_10009A5C8(uint64_t a1, void *a2)
{
  return _[a2 didRecoverFromSuspensionOnProtocolConnection:*(void *)(a1 + 32)];
}

void sub_10009B378(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = +[APSLog courier];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Core Telephony acknowledged keep alive event with error %@", (uint8_t *)&v6, 0x16u);
  }
}

id sub_10009C5D0(uint64_t a1, void *a2)
{
  return _[a2 efficientToUseChangedForProtocolConnection:*(void *)(a1 + 32)];
}

void sub_10009D64C(_Unwind_Exception *a1)
{
}

id sub_10009D84C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) courierConnection];
  [v2 sendTokenGenerateMessageWithTopicHash:*(void *)(a1 + 40) baseToken:*(void *)(a1 + 48) appId:*(unsigned __int16 *)(a1 + 84) expirationTTL:*(unsigned int *)(a1 + 80) vapidPublicKeyHash:*(void *)(a1 + 56) type:*(void *)(a1 + 64) onInterface:*(void *)(a1 + 72)];

  unint64_t v3 = *(void *)(a1 + 72);
  return sub_100040D80(v3);
}

id sub_10009DCB4(uint64_t a1)
{
  return sub_100040D80(*(void *)(a1 + 32));
}

uint64_t sub_10009DCBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10009DF58(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) courierConnection];
  [v2 sendFilterMessageWithEnabledHashes:*(void *)(a1 + 40) ignoredHashes:*(void *)(a1 + 48) opportunisticHashes:*(void *)(a1 + 56) nonWakingHashes:*(void *)(a1 + 64) pausedHashes:*(void *)(a1 + 72) token:*(void *)(a1 + 80) version:*(void *)(a1 + 88) onInterface:*(void *)(a1 + 96)];

  unint64_t v3 = *(void *)(a1 + 96);
  return sub_100040D80(v3);
}

id sub_10009E164(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) courierConnection];
  LOBYTE(v5) = *(unsigned char *)(a1 + 108);
  [v2 sendConnectMessageWithToken:*(void *)(a1 + 40) state:*(unsigned int *)(a1 + 96) presenceFlags:*(unsigned int *)(a1 + 100) interface:*(void *)(a1 + 80) activeInterval:*(unsigned int *)(a1 + 104) metadata:*(void *)(a1 + 48) certificates:*(void *)(a1 + 56) nonce:*(void *)(a1 + 64) signature:*(void *)(a1 + 72) redirectCount:v5 onInterface:*(void *)(a1 + 88)];

  unint64_t v3 = *(void *)(a1 + 88);
  return sub_100040D80(v3);
}

id sub_10009E3E8(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) courierConnection];
  LOBYTE(v5) = *(unsigned char *)(a1 + 144);
  [v2 sendConnectMessageWithToken:*(void *)(a1 + 40) interface:*(void *)(a1 + 96) activeInterval:*(unsigned int *)(a1 + 136) presenceFlags:*(unsigned int *)(a1 + 140) metadata:*(void *)(a1 + 48) certificates:*(void *)(a1 + 56) nonce:*(double *)(a1 + 104) signature:*(double *)(a1 + 112) hostCertificateInfo:*(double *)(a1 + 120) redirectCount:*(void *)(a1 + 64) tcpHandshakeTimeMilliseconds:*(void *)(a1 + 72) dnsResolveTimeMilliseconds:*(void *)(a1 + 80) tlsHandshakeTimeMilliseconds:v5 consecutiveConnectionFailureReason:*(void *)(a1 + 88) onInterface:*(void *)(a1 + 128)];

  unint64_t v3 = *(void *)(a1 + 128);
  return sub_100040D80(v3);
}

id sub_10009E628(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) courierConnection];
  LOBYTE(v5) = *(unsigned char *)(a1 + 104);
  [v2 sendConnectMessageWithToken:*(void *)(a1 + 40) state:*(unsigned int *)(a1 + 96) presenceFlags:*(unsigned int *)(a1 + 100) metadata:*(void *)(a1 + 48) certificates:*(void *)(a1 + 56) nonce:*(void *)(a1 + 64) signature:*(void *)(a1 + 72) hostCertificateInfo:*(void *)(a1 + 80) redirectCount:v5 onInterface:*(void *)(a1 + 88)];

  unint64_t v3 = *(void *)(a1 + 88);
  return sub_100040D80(v3);
}

void sub_1000A3328(uint64_t a1, void *a2)
{
  unint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 environment];
  +[APSConfiguration configurationForEnvironment:connectionType:](APSConfiguration, "configurationForEnvironment:connectionType:", v5, [v4 connectionType]);
  id v22 = (id)objc_claimAutoreleasedReturnValue();

  int v6 = [v22 pubSubRetryAttemptsCount];
  id v7 = [v6 unsignedIntegerValue];
  if (v7) {
    uint64_t v8 = (uint64_t)v7;
  }
  else {
    uint64_t v8 = 3;
  }

  id v9 = [APSPubSubRequest alloc];
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  double v12 = [*(id *)(a1 + 32) _getNextMessageID];
  double v13 = [*(id *)(a1 + 40) firstObject];
  id v14 = [v13 tokenName];
  uint64_t v15 = -[APSPubSubRequest initWithSubscriptionChannels:unsubscriptionChannels:messageID:userName:token:subscriptionType:connectionType:retryCount:](v9, "initWithSubscriptionChannels:unsubscriptionChannels:messageID:userName:token:subscriptionType:connectionType:retryCount:", v11, v10, v12, v14, *(void *)(a1 + 56), 0, [v4 connectionType], v8);

  id v16 = [v4 connectionType];
  if (v16 == (id)2) {
    [(APSPubSubRequest *)v15 setRetryCount:0];
  }
  id v17 = [*(id *)(a1 + 32) subscriptionRequests];

  if (v17)
  {
    if (!v15) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  long long v21 = +[NSMutableArray array];
  [*(id *)(a1 + 32) setSubscriptionRequests:v21];

  if (v15)
  {
LABEL_8:
    id v18 = [*(id *)(a1 + 32) subscriptionRequests];
    [v18 addObject:v15];
  }
LABEL_9:
  id v19 = [(APSPubSubRequest *)v15 messageID];
  id v20 = [v19 unsignedIntValue];

  objc_msgSend(*(id *)(a1 + 32), "_writePubSubMessagetoConnection:messageID:token:connectionType:", v15, v20, *(void *)(a1 + 56), -[APSPubSubRequest connectionType](v15, "connectionType"));
  [*(id *)(a1 + 32) _retryRequestAfterDelay:v15];
}

void sub_1000A38E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_1000A3924(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  id v3 = objc_loadWeakRetained(a1 + 6);
  if (v3 && WeakRetained)
  {
    id v4 = [a1[4] messageID];
    id v5 = [v4 unsignedIntValue];

    int v6 = +[APSLog pubSub];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = a1[4];
      int v10 = 138412546;
      id v11 = v7;
      __int16 v12 = 2048;
      id v13 = [v7 retryCount];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Retrying pubsub request %@ Retries left: %lu", (uint8_t *)&v10, 0x16u);
    }

    id v8 = a1[4];
    id v9 = [v8 token];
    objc_msgSend(v3, "_writePubSubMessagetoConnection:messageID:token:connectionType:", v8, v5, v9, objc_msgSend(a1[4], "connectionType"));

    [v3 _retryRequestAfterDelay:WeakRetained];
  }
}

void sub_1000A3E94(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  if ([v3 subscriptionType] == 1)
  {
    id v18 = 0;
    uint64_t v5 = 2;
    goto LABEL_11;
  }
  uint64_t v6 = [*(id *)(a1 + 32) subscriptionChannels];
  if (v6
    && (id v7 = (void *)v6,
        [*(id *)(a1 + 32) unsubscriptionChannels],
        id v8 = objc_claimAutoreleasedReturnValue(),
        v8,
        v7,
        !v8))
  {
    id v11 = [*(id *)(a1 + 32) subscriptionChannels];
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v9 = [*(id *)(a1 + 32) unsubscriptionChannels];
    if (!v9
      || (int v10 = (void *)v9,
          [*(id *)(a1 + 32) subscriptionChannels],
          uint64_t v5 = objc_claimAutoreleasedReturnValue(),
          (id)v5,
          v10,
          v5))
    {
      id v18 = 0;
      uint64_t v5 = 1;
      goto LABEL_11;
    }
    id v11 = [*(id *)(a1 + 32) unsubscriptionChannels];
  }
  __int16 v12 = [v11 firstObject];
  id v18 = [v12 channelTopic];

LABEL_11:
  id v13 = +[NSMutableDictionary dictionary];
  [v13 setObject:v18 forKeyedSubscript:@"Topic"];
  id v14 = [*(id *)(a1 + 40) environment];
  uint64_t v15 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v14 environmentType]);
  [v13 setObject:v15 forKeyedSubscript:@"Environment"];

  id v16 = +[NSNumber numberWithInteger:v5];
  [v13 setObject:v16 forKeyedSubscript:@"MessageType"];

  id v17 = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
  [v13 setObject:v17 forKeyedSubscript:@"ConnectionType"];

  APSPubSubPowerLog();
  [v4 sendPubSubChannelListWithMetadata:*(void *)(a1 + 48) baseToken:*(void *)(a1 + 56) messageID:*(unsigned int *)(a1 + 72)];
}

void sub_1000A4CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A4CEC(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  uint64_t v6 = [*(id *)(a1 + 32) _getCurrentTokens];
  id v7 = v6;
  if (*(void *)(a1 + 40))
  {
    if ((objc_msgSend(v6, "containsObject:") & 1) == 0)
    {
      uint64_t v8 = [*(id *)(a1 + 32) _findConnectedClientWithToken:*(void *)(a1 + 40) onProtocolConnection:v5];
      if (v8)
      {
        uint64_t v9 = (void *)v8;
        int v10 = +[APSLog pubSub];
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(void *)(a1 + 32);
          uint64_t v12 = *(void *)(a1 + 40);
          int v13 = 138413058;
          uint64_t v14 = v11;
          __int16 v15 = 2112;
          id v16 = v9;
          __int16 v17 = 2112;
          uint64_t v18 = v12;
          __int16 v19 = 2112;
          id v20 = v7;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@ incoming pubsub response is for a proxy client %@ baseToken %@ publicTokens %@", (uint8_t *)&v13, 0x2Au);
        }

        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
        *a3 = 1;
      }
    }
  }
}

id sub_1000A6418(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 subscriptionRequests];

  if (!v5)
  {
    uint64_t v6 = +[NSMutableArray array];
    [*(id *)(a1 + 32) setSubscriptionRequests:v6];
  }
  id v7 = [*(id *)(a1 + 32) subscriptionRequests];
  [v7 addObject:*(void *)(a1 + 40)];

  uint64_t v8 = [*(id *)(a1 + 40) messageID];
  id v9 = [v8 unsignedIntValue];

  int v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void **)(a1 + 40);
  uint64_t v12 = [v11 token];
  id v13 = [v4 connectionType];

  [v10 _writePubSubMessagetoConnection:v11 messageID:v9 token:v12 connectionType:v13];
  uint64_t v14 = *(void **)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  return [v14 _retryRequestAfterDelay:v15];
}

id sub_1000A6650()
{
  if (qword_10015A9B0 != -1) {
    dispatch_once(&qword_10015A9B0, &stru_10012C360);
  }
  CFUUIDRef v0 = (void *)qword_10015A9A8;
  return v0;
}

void sub_1000A66A4(id a1)
{
  uint64_t v1 = CSDBCreateThreadedRecordStore();
  uint64_t v2 = qword_10015A9A8;
  qword_10015A9A8 = v1;
  _objc_release_x1(v1, v2);
}

void sub_1000A66E0()
{
  CFUUIDRef v0 = sub_1000A6650();
  CSDBThreadedRecordStoreOwnsCurrentThread();

  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    uint64_t v2 = +[APSMultiUserMode sharedInstance];
    [v2 isMultiUser];

    id v4 = sub_1000A6650();
    CSDBThreadedRecordStoreEnsureDatabaseSetup();
  }
}

void sub_1000A6804()
{
  CFUUIDRef v0 = sub_1000A6650();

  if (v0)
  {
    sub_1000A66E0();
  }
}

void sub_1000A6854(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    uint64_t v2 = sub_1000A6650();
    CSDBPerformBlock();
  }
}

void sub_1000A68C8(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    uint64_t v2 = sub_1000A6650();
    CSDBPerformBlockAfterDelay();
  }
}

void sub_1000A6944(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    sub_1000A6804();
    uint64_t v2 = sub_1000A6650();
    CSDBPerformLocked();
  }
}

void sub_1000A69B4(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    sub_1000A6804();
    uint64_t v2 = sub_1000A6650();
    CSDBPerformUnlocked();
  }
}

void sub_1000A6A24(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v2 = sub_1000A6650();

  if (v2)
  {
    sub_1000A6804();
    id v3 = sub_1000A6650();
    CSDBPerformLockedSectionUsingUnfairLock();
  }
}

void sub_1000A6A9C(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    uint64_t v2 = sub_1000A6650();
    CSDBPerformLockedSectionForRecordStoreWithoutInitialize();
  }
}

void sub_1000A6B08(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    sub_1000A6804();
    uint64_t v2 = sub_1000A6650();
    CSDBPerformLockedSectionForRecordStore();
  }
}

void sub_1000A6B78(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    sub_1000A6804();
    uint64_t v2 = sub_1000A6650();
    CSDBPerformUnlockedSectionForRecordStore();
  }
}

void sub_1000A6BE8(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    sub_1000A6804();
    uint64_t v2 = sub_1000A6650();
    CSDBPerformLockedSectionForDatabase();
  }
}

void sub_1000A6C58(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    sub_1000A6804();
    uint64_t v2 = sub_1000A6650();
    CSDBPerformUnlockedSectionForDatabase();
  }
}

void sub_1000A6CC8(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v2 = sub_1000A6650();

  if (v2)
  {
    sub_1000A6804();
    id v3 = sub_1000A6650();
    CSDBPerformLockedSectionForQueryForReading();
  }
}

void sub_1000A6D40(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v2 = sub_1000A6650();

  if (v2)
  {
    sub_1000A6804();
    id v3 = sub_1000A6650();
    CSDBPerformLockedSectionForQueryForWriting();
  }
}

void sub_1000A6DB8(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    sub_1000A6804();
    uint64_t v2 = sub_1000A6650();
    CSDBPerformLockedSectionForConnectionForReading();
  }
}

void sub_1000A6E28(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    sub_1000A6804();
    uint64_t v2 = sub_1000A6650();
    CSDBPerformLockedSectionForConnectionForWriting();
  }
}

void sub_1000A6E98(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    sub_1000A6804();
    uint64_t v2 = sub_1000A6650();
    CSDBPerformUnlockedSectionForConnectionForReading();
  }
}

void sub_1000A6F08(void *a1)
{
  id v3 = a1;
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    sub_1000A6804();
    uint64_t v2 = sub_1000A6650();
    CSDBPerformUnlockedSectionForConnectionForWriting();
  }
}

void sub_1000A6F78(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v2 = sub_1000A6650();

  if (v2)
  {
    sub_1000A6804();
    id v3 = sub_1000A6650();
    CSDBPerformUnlockedSectionForQueryForReading();
  }
}

void sub_1000A6FF0(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v2 = sub_1000A6650();

  if (v2)
  {
    sub_1000A6804();
    id v3 = sub_1000A6650();
    CSDBPerformUnlockedSectionForQueryForWriting();
  }
}

void sub_1000A7068()
{
  CFUUIDRef v0 = sub_1000A6650();

  if (v0)
  {
    sub_1000A6B08(&stru_10012C3A0);
  }
}

void sub_1000A70BC(id a1, CSDBRecordStore *a2)
{
  CSDBRecordSaveStore();
  _CSDBRecordStoreInvalidateCachesWithStore(a2);
}

void sub_1000A70F8()
{
  CFUUIDRef v0 = +[APSLog database];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Saving database.", buf, 2u);
  }

  sub_1000A7068();
  uint64_t v1 = sub_1000A6650();

  if (v1)
  {
    uint64_t v2 = +[APSLog database];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Destroying database.", v6, 2u);
    }

    id v3 = sub_1000A6650();
    CSDBThreadedRecordStoreTeardownDatabase();

    id v4 = +[APSLog database];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Closed database.", v5, 2u);
    }
  }
}

uint64_t sub_1000A7224()
{
  CFUUIDRef v0 = sub_1000A6650();

  if (!v0) {
    return 0;
  }
  uint64_t v1 = sub_1000A72D8();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)v1;
  id v3 = (const char *)CSDBCreateUTF8StringFromCFString();
  if (v3)
  {
    id v4 = (char *)v3;
    memset(&v7, 0, sizeof(v7));
    if (stat(v3, &v7)) {
      uint64_t SchemaVersionAtPath = 0;
    }
    else {
      uint64_t SchemaVersionAtPath = CSDBSqliteUtilitiesGetSchemaVersionAtPath();
    }
    free(v4);
  }
  else
  {
    uint64_t SchemaVersionAtPath = 0;
  }
  CFRelease(v2);
  return SchemaVersionAtPath;
}

uint64_t sub_1000A72D8()
{
  uint64_t v1 = +[APSMultiUserMode sharedInstance];
  unsigned int v2 = [v1 isMultiUser];

  if (!v2)
  {
    id v4 = +[NSString stringWithUTF8String:CSDBGetMobileUserDirectory()];
    if (v4) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v13 = 0;
    goto LABEL_10;
  }
  id v3 = +[APSMultiUserFS sharedInstance];
  id v4 = [v3 systemPath];

  if (!v4) {
    goto LABEL_9;
  }
LABEL_3:
  id v5 = +[NSArray arrayWithObjects:v4, @"/Library/ApplePushService/", @"aps.db", 0];
  uint64_t v6 = +[NSString pathWithComponents:v5];

  id v7 = v6;
  [v7 fileSystemRepresentation];
  CSDBGetMobileUserUID();
  CSDBGetMobileUserGID();
  CSDBCreateDirectoriesToPathWithOwnership();
  uint64_t v8 = [v7 stringByExpandingTildeInPath];
  id v9 = [v8 stringByStandardizingPath];

  int v10 = [v9 stringByResolvingSymlinksInPath];

  id v11 = v10;
  uint64_t v12 = +[NSURL fileURLWithPath:v11 isDirectory:0];
  uint64_t v13 = (uint64_t)v11;
  if (v12)
  {
    uint64_t v14 = +[NSURL URLByResolvingAliasFileAtURL:v12 options:0 error:0];
    uint64_t v15 = v14;
    uint64_t v13 = (uint64_t)v11;
    if (v14)
    {
      uint64_t v13 = [v14 path];
    }
  }

LABEL_10:
  return v13;
}

void sub_1000A74D0()
{
  CFUUIDRef v0 = sub_1000A6650();

  if (v0)
  {
    sub_1000A6A9C(&stru_10012C3C0);
  }
}

void sub_1000A7524(id a1, CSDBRecordStore *a2)
{
}

void sub_1000A752C(uint64_t a1)
{
  unsigned int v2 = sub_1000A6650();

  if (v2)
  {
    _CSDBSqliteSetDefaultPageCacheSize(a1);
  }
}

__CFString *__cdecl sub_1000A7580(id a1)
{
  uint64_t v1 = +[APSLog database];
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v2 = +[NSThread currentThread];
    int v4 = 138412290;
    id v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Initializing database on thread: %@", (uint8_t *)&v4, 0xCu);
  }
  return (__CFString *)sub_1000A72D8();
}

void sub_1000A7644(id a1, CSDBThreadedRecordStore *a2)
{
  unsigned int v2 = a2;
  CSDBThreadedRecordStoreRegisterClass();
  CSDBThreadedRecordStoreRegisterClass();
  CSDBThreadedRecordStoreRegisterClass();
}

uint64_t sub_1000A76A8()
{
  CSDBRecordStoreCreateTablesForClass();
  CSDBRecordStoreCreateTablesForClass();
  return CSDBRecordStoreCreateTablesForClass();
}

uint64_t sub_1000A770C()
{
  CFUUIDRef v0 = +[APSLog database];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Enabling auto vacuum.", buf, 2u);
  }

  CSDBSqliteConnectionPerformSQL();
  uint64_t v1 = +[APSLog database];
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Enabling WAL journal mode.", v5, 2u);
  }

  CSDBSqliteConnectionPerformSQL();
  unsigned int v2 = +[APSLog database];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Enabling Foreign Key support.", v4, 2u);
  }

  return CSDBSqliteConnectionPerformSQL();
}

BOOL sub_1000A7848(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = +[APSLog database];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109376;
    v7[1] = a3;
    __int16 v8 = 1024;
    int v9 = 15002;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "APSMessageStore - The current APS database is v%d.  The current schema version is v%d", (uint8_t *)v7, 0xEu);
  }

  if (a3 <= 0x3A99)
  {
    id v5 = +[APSLog database];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "APSMessageStore - This DB can be migrated.", (uint8_t *)v7, 2u);
    }
  }
  return a3 < 0x3A9A;
}

uint64_t sub_1000A796C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  id v5 = +[NSDate date];
  uint64_t v6 = +[APSLog database];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v49 = 67109376;
    *(_DWORD *)&v49[4] = a3;
    *(_WORD *)&v49[8] = 1024;
    *(_DWORD *)&v49[10] = 15002;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Beginning migration.  The APS db is currently at v%d, upgrading to v%d.", v49, 0xEu);
  }

  CSDBSqliteConnectionCommit();
  if (CSDBSqliteDatabaseCheckIntegrity())
  {
    id v7 = +[APSLog database];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    *(_WORD *)uint64_t v49 = 0;
    __int16 v8 = "APSMessageStore - Initial integrity check success";
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, v49, 2u);
    goto LABEL_27;
  }
  int v9 = CSDBSqliteConnectionPerformSQL();
  if (v9 != 101 && (int v10 = v9) != 0)
  {
    id v11 = +[APSLog database];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1000CBA38(v10, v11);
    }
  }
  else
  {
    id v11 = +[APSLog database];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Reindexing the DB worked.", v49, 2u);
    }
  }

  if (CSDBSqliteDatabaseCheckIntegrity())
  {
    id v7 = +[APSLog database];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    *(_WORD *)uint64_t v49 = 0;
    __int16 v8 = "APSMessageStore - Post-reindex integrity check success";
    goto LABEL_24;
  }
  int v12 = CSDBSqliteDatabaseVacuum();
  if (v12 != 101 && v12)
  {
    uint64_t v13 = +[APSLog database];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1000CBA04();
    }
  }
  else
  {
    uint64_t v13 = +[APSLog database];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Database vacuum success", v49, 2u);
    }
  }

  char v14 = CSDBSqliteDatabaseCheckIntegrity();
  uint64_t v15 = +[APSLog database];
  id v7 = v15;
  if (v14)
  {
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    *(_WORD *)uint64_t v49 = 0;
    __int16 v8 = "APSMessageStore - Final integrity check success";
    goto LABEL_24;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
    sub_1000CB9D0();
  }
LABEL_27:

  CSDBSqliteConnectionBegin();
  if (a3 > 0x3A9A)
  {
    __int16 v17 = +[APSLog database];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_1000CB99C();
    }

    uint64_t v18 = 2;
    goto LABEL_36;
  }
  CSDBSqliteConnectionBeginTransactionType();
  if (a3 == 7000)
  {
    CSDBSqliteDatabaseSetVersion();
    id v16 = +[APSLog database];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Deleting high/normal priority messages we no longer own.", v49, 2u);
    }

    if (!sub_1000A85F8(a2, @"Unable delete normal/high priority outgoing messages.", @"Successfully deleted messages we shouldn't resend.", @"DELETE FROM outgoing_message where priority != 1;")) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion();
  }
  else if (a3 >> 1 != 3500)
  {
    unsigned int v24 = a3 - 7000;
    if (a3 - 7000 > 2) {
      goto LABEL_49;
    }
    goto LABEL_45;
  }
  CSDBSqliteDatabaseSetVersion();
  id v22 = +[APSLog database];
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Adding priority to incoming messages.", v49, 2u);
  }

  int v23 = sub_1000A85F8(a2, @"Unable to drop legacy table", @"Successfully dropped legacy table", @"DROP TABLE incoming_message");
  CSDBRecordStoreCreateTablesForClass();
  if (!v23) {
    goto LABEL_99;
  }
  CSDBSqliteDatabaseSetVersion();
  unsigned int v24 = a3 - 7000;
LABEL_45:
  CSDBSqliteDatabaseSetVersion();
  char v25 = +[APSLog database];
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Adding identifier to outgoing messages.", v49, 2u);
  }

  int v26 = sub_1000A85F8(a2, @"Unable to drop legacy table", @"Successfully dropped legacy table", @"DROP TABLE outgoing_message");
  CSDBRecordStoreCreateTablesForClass();
  if (!v26) {
    goto LABEL_99;
  }
  CSDBSqliteDatabaseSetVersion();
LABEL_49:
  if (a3 >> 2 == 1750)
  {
    CSDBSqliteDatabaseSetVersion();
    uint64_t v27 = +[APSLog database];
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Flushing deprecated storage of outgoing messages.", v49, 2u);
    }

    int v28 = sub_1000A85F8(a2, @"Unable to drop legacy table", @"Successfully dropped legacy table", @"DROP TABLE outgoing_message");
    CSDBRecordStoreCreateTablesForClass();
    if (!v28) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion();
  }
  if (v24 <= 4)
  {
    CSDBSqliteDatabaseSetVersion();
    CFStringRef v29 = +[APSLog database];
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Unifying iOS and OS X schemas.", v49, 2u);
    }

    int v30 = sub_1000A85F8(a2, @"Unable to drop legacy table", @"Successfully dropped legacy table", @"DROP TABLE incoming_message");
    CSDBRecordStoreCreateTablesForClass();
    int v31 = sub_1000A85F8(a2, @"Unable to drop legacy table", @"Successfully dropped legacy table", @"DROP TABLE outgoing_message");
    CSDBRecordStoreCreateTablesForClass();
    if (!v30 || !v31) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_61;
  }
  if (v24 <= 0x3E8)
  {
LABEL_61:
    CSDBSqliteDatabaseSetVersion();
    uint64_t v32 = +[APSLog database];
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "APSMessageStore - adding correlation identifier.", v49, 2u);
    }

    int v33 = sub_1000A85F8(a2, @"Unable to drop legacy table", @"Successfully dropped legacy table", @"DROP TABLE incoming_message");
    CSDBRecordStoreCreateTablesForClass();
    if (!v33) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_66;
  }
  if (v24 <= 0xBB9)
  {
LABEL_66:
    CSDBSqliteDatabaseSetVersion();
    __int16 v34 = +[APSLog database];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "APSMessageStore - adding tracing enabled and tracing uuid.", v49, 2u);
    }

    int v35 = sub_1000A85F8(a2, @"Unable to drop legacy table", @"Successfully dropped legacy table", @"DROP TABLE incoming_message");
    CSDBRecordStoreCreateTablesForClass();
    if (!v35) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_71;
  }
  if (v24 == 3002)
  {
LABEL_71:
    CSDBSqliteDatabaseSetVersion();
    __int16 v36 = +[APSLog database];
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "APSMessageStore - adding push type.", v49, 2u);
    }

    int v37 = sub_1000A85F8(a2, @"Unable to drop legacy table", @"Successfully dropped legacy table", @"DROP TABLE incoming_message");
    CSDBRecordStoreCreateTablesForClass();
    if (!v37) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_76;
  }
  if (v24 > 0xBBB)
  {
    if (v24 != 3004) {
      goto LABEL_85;
    }
    goto LABEL_80;
  }
LABEL_76:
  CSDBSqliteDatabaseSetVersion();
  __int16 v38 = +[APSLog database];
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "APSMessageStore - adding push flags.", v49, 2u);
  }

  int v39 = sub_1000A85F8(a2, @"Unable to drop legacy table", @"Successfully dropped legacy table", @"DROP TABLE incoming_message");
  CSDBRecordStoreCreateTablesForClass();
  if (!v39) {
    goto LABEL_99;
  }
  CSDBSqliteDatabaseSetVersion();
LABEL_80:
  CSDBSqliteDatabaseSetVersion();
  __int16 v40 = +[APSLog database];
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "APSMessageStore - adding channel table.", v49, 2u);
  }

  CSDBRecordStoreCreateTablesForClass();
  if (!sub_1000A85F8(a2, @"Unable to create index on push topic", @"Successfully created index on push topic", @"CREATE INDEX push_topic_idx ON channel(channel_topic)"))goto LABEL_99; {
  CSDBSqliteDatabaseSetVersion();
  }
LABEL_85:
  if ((a3 - 10005) >> 2 <= 0x4E0)
  {
    CSDBSqliteDatabaseSetVersion();
    id v41 = +[APSLog database];
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "APSMessageStore - removing channel name column", v49, 2u);
    }

    int v42 = sub_1000A85F8(a2, @"Unable to drop legacy channels table", @"Removed legacy channel table", @"DROP TABLE channel");
    CSDBRecordStoreCreateTablesForClass();
    if (!v42) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion();
  }
  if (a3 >> 3 >= 0x753)
  {
    uint64_t v43 = +[APSLog database];
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Adding Token Namne and Environment columns", v49, 2u);
    }

    int v44 = sub_1000A85F8(a2, @"Unable to drop legacy channels table", @"Removed legacy channel table", @"DROP TABLE channel");
    CSDBRecordStoreCreateTablesForClass();
    int v45 = sub_1000A85F8(a2, @"Unable to create index on environmnet", @"Successfully created index on environment", @"CREATE INDEX environment_idx ON channel(environment)");
    int v46 = sub_1000A85F8(a2, @"Unable to create index on token name", @"Successfully created index on token name", @"CREATE INDEX token_name_idx ON channel(token_name)");
    int v47 = sub_1000A85F8(a2, @"Unable to create index on channel topic", @"Successfully created index on channel topic", @"CREATE INDEX channel_topic_idx ON channel(channel_topic)");
    if (v44 && v45 && v46 && v47)
    {
      CSDBSqliteDatabaseSetVersion();
      goto LABEL_98;
    }
LABEL_99:
    CSDBSqliteConnectionCommit();
    uint64_t v18 = 2;
    goto LABEL_100;
  }
LABEL_98:
  CSDBSqliteConnectionCommit();
  CSDBSqliteConnectionPerformSQL();
  uint64_t v18 = 0;
LABEL_36:
  __int16 v19 = +[APSLog database];
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    id v20 = +[NSDate date];
    [v20 timeIntervalSinceDate:v5];
    *(_DWORD *)uint64_t v49 = 134217984;
    *(void *)&v49[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "APSMessageStore - APS DB migration took %f seconds.", v49, 0xCu);
  }
LABEL_100:

  return v18;
}

uint64_t sub_1000A85F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  if ([v8 length])
  {
    int v9 = CSDBSqliteConnectionPerformSQL();
    if (v9) {
      BOOL v10 = v9 == 101;
    }
    else {
      BOOL v10 = 1;
    }
    uint64_t v11 = v10;
    if (v9 && (int v12 = v9, v9 != 101))
    {
      uint64_t v13 = +[APSLog database];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v15 = 138412802;
        id v16 = v6;
        __int16 v17 = 1024;
        int v18 = v12;
        __int16 v19 = 2080;
        uint64_t v20 = CSDBSqliteErrMsg();
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "APSMessageStore - %@ SQLiteResult: %d SQLite Message: %s", (uint8_t *)&v15, 0x1Cu);
      }
    }
    else
    {
      uint64_t v13 = +[APSLog database];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 138412290;
        id v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "APSMessageStore - %@", (uint8_t *)&v15, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v13 = +[APSLog database];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1000CBAB0();
    }
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t sub_1000A8914(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v17 = PBReaderReadData();
      int v18 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x400], 8) = v17;
    }
    else if ((v6 >> 3) == 2)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_30;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000A8EFC(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 138412290;
    id v4 = v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%@ Notified of significant time change", (uint8_t *)&v3, 0xCu);
  }
  [v2 _handleSignificantTimeChange];
}

void *sub_1000A94E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  pthread_once(&stru_10015A1C8, (void (*)(void))sub_1000AAA90);
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v21 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0;
    *(void *)(Instance + 24) = 0;
    *(_DWORD *)(Instance + 16) = 0;
    sub_1000A6804();
    uint64_t v22 = CSDBRecordCreate();
    if (v22)
    {
      int v23 = (const void *)v22;
      uint64_t v24 = 0;
      uint64_t v31 = a2;
      uint64_t v32 = a3;
      uint64_t v33 = a4;
      uint64_t v34 = a5;
      uint64_t v35 = a6;
      uint64_t v36 = a7;
      uint64_t v37 = a8;
      uint64_t v38 = a9;
      uint64_t v39 = a10;
      uint64_t v40 = a11;
      uint64_t v41 = a12;
      uint64_t v42 = a13;
      do
      {
        CSDBRecordSetProperty();
        ++v24;
      }
      while (v24 != 12);
      if (sub_1000A96CC((uint64_t)v23))
      {
        v21[3] = (int)CSDBRecordGetID();
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = v21[3];
          int v27 = 138412546;
          int v28 = v21;
          __int16 v29 = 2048;
          uint64_t v30 = v25;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - New message record [%@] has ID [%lld].", (uint8_t *)&v27, 0x16u);
        }
      }
      else
      {
        CFRelease(v21);
        uint64_t v21 = 0;
      }
      CFRelease(v23);
    }
    else
    {
      CFRelease(v21);
      return 0;
    }
  }
  return v21;
}

uint64_t sub_1000A96CC(uint64_t a1)
{
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000A983C;
  v3[3] = &unk_100129DB8;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_1000A6B08(v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000A9770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *sub_1000A9788(uint64_t a1, uint64_t a2)
{
  return sub_1000A9790(a1, a2, 1);
}

const void *sub_1000A9790(uint64_t a1, uint64_t a2, int a3)
{
  pthread_once(&stru_10015A1C8, (void (*)(void))sub_1000AAA90);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 0;
  }
  uint64_t v6 = (const void *)Instance;
  *(void *)(Instance + 16) = 0;
  *(void *)(Instance + 24) = a2;
  *(_DWORD *)(Instance + 16) = 0;
  if (a3) {
    char v7 = (const void *)sub_1000A9884(a2);
  }
  else {
    char v7 = (const void *)sub_1000A9984(a2);
  }
  if (v7)
  {
    char v8 = v6;
  }
  else
  {
    char v7 = v6;
    char v8 = 0;
  }
  CFRelease(v7);
  return v8;
}

const void *sub_1000A9834(uint64_t a1, uint64_t a2)
{
  return sub_1000A9790(a1, a2, 0);
}

uint64_t sub_1000A983C(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t v1 = result;
    CSDBRecordStoreAddRecord();
    uint64_t result = CSDBRecordSaveStore();
    *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t sub_1000A9884(uint64_t a1)
{
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000A9940;
  v3[3] = &unk_100129DB8;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_1000A6B08(v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000A9928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A9940(uint64_t a1)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1000A9984(uint64_t a1)
{
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000A9A40;
  v3[3] = &unk_100129DB8;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_1000A6B78(v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000A9A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A9A40(uint64_t a1)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1000A9A84(const __CFString *a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    CFStringRef v4 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - APSOutgoingMessageRecordDeleteMessageForGUID %@", buf, 0xCu);
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      v2[0] = _NSConcreteStackBlock;
      v2[1] = 3221225472;
      v2[2] = sub_1000A9B8C;
      v2[3] = &unk_100129EE0;
      v2[4] = a1;
      sub_1000A6CC8(@"SELECT ROWID, guid, sender_token_name, topic, environment, payload, is_sent, message_id, identifier, priority, payload_format, timeout, date FROM outgoing_message WHERE guid = ? ORDER BY ROWID ASC", v2);
    }
  }
}

uint64_t sub_1000A9B8C(uint64_t a1, uint64_t a2)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v3 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  CFIndex Count = CFArrayGetCount(v3);
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    for (CFIndex i = 0; i != v5; ++i)
    {
      CFArrayGetValueAtIndex(v3, i);
      CSDBRecordStoreRemoveRecord();
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  CSDBRecordSaveStore();
  return _CSDBRecordStoreInvalidateCachesWithStore(a2);
}

CFMutableArrayRef sub_1000A9C44(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  CFAllocatorRef Default = CFAllocatorGetDefault();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(Default, 0, &kCFTypeArrayCallBacks);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000A9D04;
  void v11[3] = &unk_10012CBE0;
  char v12 = a3;
  void v11[4] = a1;
  void v11[5] = a4;
  v11[6] = a2;
  v11[7] = Mutable;
  sub_1000A6CC8(@"SELECT ROWID, guid, sender_token_name, topic, environment, payload, is_sent, message_id, identifier, priority, payload_format, timeout, date FROM outgoing_message WHERE is_sent = ? AND priority = ? AND environment = ? ORDER BY ROWID ASC LIMIT ?", v11);
  return Mutable;
}

void sub_1000A9D04(uint64_t a1)
{
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFArrayGetValueAtIndex(v3, i);
        int ID = CSDBRecordGetID();
        char v8 = sub_1000A9790((uint64_t)kCFAllocatorDefault, ID, 0);
        if (v8)
        {
          BOOL v9 = v8;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v8);
          CFRelease(v9);
        }
      }
    }
    CFRelease(v3);
  }
}

uint64_t sub_1000A9E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000A9EE8;
  v5[3] = &unk_10012CC08;
  void v5[4] = &v6;
  v5[5] = a1;
  v5[6] = a2;
  v5[7] = a3;
  sub_1000A6CC8(@"SELECT MIN(timeout+date), COUNT(*) FROM outgoing_message WHERE priority = ? AND environment = ? AND is_sent = 0", v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1000A9ED0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A9EE8(uint64_t a1)
{
  CSDBSqliteBindInt64();
  CSDBSqliteBindTextFromCFString();
  uint64_t result = CSDBSqliteStep();
  if (result)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBSqliteStatementInteger64ResultColumn();
    uint64_t result = CSDBSqliteStatementInteger64ResultColumn();
    uint64_t v3 = *(uint64_t **)(a1 + 56);
    if (v3) {
      *uint64_t v3 = result;
    }
  }
  return result;
}

void sub_1000A9F60()
{
  sub_1000A6D40(@"UPDATE outgoing_message SET is_sent = 0", &stru_10012CC48);
}

void sub_1000A9F74(id a1, CSDBRecordStore *a2, CSDBSqliteDatabase *a3, CSDBSqliteStatement *a4)
{
}

CFStringRef sub_1000A9F7C(const __CFString *a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSOutgoingMessageRecordCopyMessageForGUID [%@]", (uint8_t *)&buf, 0xCu);
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v5 = 0x2020000000;
      uint64_t v6 = 0;
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472;
      v3[2] = sub_1000AA0DC;
      v3[3] = &unk_10012CC70;
      v3[4] = &buf;
      void v3[5] = a1;
      sub_1000A6CC8(@"SELECT ROWID, guid, sender_token_name, topic, environment, payload, is_sent, message_id, identifier, priority, payload_format, timeout, date FROM outgoing_message WHERE guid = ? ORDER BY ROWID ASC;",
        v3);
      a1 = *(const __CFString **)(*((void *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void sub_1000AA0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000AA0DC(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_1000A9790((uint64_t)kCFAllocatorDefault, ID, 0);
    }
    CFRelease(v3);
  }
}

void sub_1000AA19C(uint64_t a1, char a2)
{
  if (a1)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1000AA238;
    v2[3] = &unk_10012CCB0;
    v2[4] = a1;
    char v3 = a2;
    sub_1000A6A24(a1 + 16, v2);
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000CBAE4();
  }
}

void sub_1000AA238(uint64_t a1)
{
  uint64_t v1 = sub_1000A9984(*(void *)(*(void *)(a1 + 32) + 24));
  if (v1)
  {
    CFArrayRef v2 = (const void *)v1;
    CSDBRecordSetProperty();
    sub_1000A6B78(&stru_10012CC90);
    CFRelease(v2);
  }
}

void sub_1000AA2A8(id a1, CSDBRecordStore *a2)
{
}

uint64_t sub_1000AA2B0(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 24);
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 138412290;
    uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Attempted to get record identifier for NULL message record: %@", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

uint64_t sub_1000AA354(uint64_t a1)
{
  if (a1) {
    return (int)CSDBRecordGetID();
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 138412290;
    uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Attempted to get record identifier for NULL record: %@", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

uint64_t sub_1000AA3FC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000AA4E4;
    void v12[3] = &unk_10012CCD8;
    v12[4] = &v13;
    v12[5] = a2;
    sub_1000A6A24(a2 + 16, v12);
    uint64_t v2 = v14[3];
    _Block_object_dispose(&v13, 8);
  }
  else
  {
    BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v3) {
      sub_1000CBB2C(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0;
  }
  return v2;
}

void sub_1000AA4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000AA4E4(uint64_t a1)
{
  uint64_t v2 = sub_1000A9984(*(void *)(*(void *)(a1 + 40) + 24));
  if (v2)
  {
    BOOL v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t sub_1000AA550(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000AA634;
    void v12[3] = &unk_10012CCD8;
    v12[4] = &v13;
    v12[5] = a2;
    sub_1000A69B4(v12);
    uint64_t v2 = v14[3];
    _Block_object_dispose(&v13, 8);
  }
  else
  {
    BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v3) {
      sub_1000CBBA8(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0;
  }
  return v2;
}

void sub_1000AA61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000AA634(uint64_t a1)
{
  uint64_t v2 = sub_1000A9984(*(void *)(*(void *)(a1 + 40) + 24));
  if (v2)
  {
    BOOL v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t sub_1000AA6A0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2020000000;
    uint64_t v15 = 0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000AA78C;
    void v11[3] = &unk_10012CCD8;
    void v11[4] = &v12;
    void v11[5] = a1;
    sub_1000A6A24(a1 + 16, v11);
    uint64_t v1 = v13[3];
    _Block_object_dispose(&v12, 8);
  }
  else
  {
    BOOL v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2) {
      sub_1000CBC24(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    return 0;
  }
  return v1;
}

void sub_1000AA774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000AA78C(uint64_t a1)
{
  uint64_t v2 = sub_1000A9984(*(void *)(*(void *)(a1 + 40) + 24));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (int)CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

void sub_1000AA7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a1)
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_1000AA8B8;
    v22[3] = &unk_10012CCF8;
    v22[4] = a1;
    v22[5] = a2;
    v22[6] = a3;
    v22[7] = a4;
    v22[8] = a5;
    v22[9] = a7;
    v22[10] = a8;
    v22[11] = a9;
    v22[12] = a10;
    v22[13] = a11;
    v22[14] = a12;
    v22[15] = a13;
    v22[16] = a14;
    sub_1000A6A24(a1 + 16, v22);
  }
  else
  {
    BOOL v14 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v14) {
      sub_1000CBCA0(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

void sub_1000AA8B8(uint64_t a1)
{
  uint64_t v2 = sub_1000A9984(*(void *)(*(void *)(a1 + 32) + 24));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = (int)CSDBRecordGetID();
    }
    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 4_Block_object_dispose(&STACK[0x400], 8) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 56)) {
      **(void **)(a1 + 56) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + 64) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 72)) {
      **(void **)(a1 + 72) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 80)) {
      **(unsigned char **)(a1 + 80) = CSDBRecordGetProperty() != 0;
    }
    if (*(void *)(a1 + 88)) {
      **(void **)(a1 + 8_Block_object_dispose(&STACK[0x400], 8) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 96)) {
      **(void **)(a1 + 96) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 104)) {
      **(void **)(a1 + 104) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 112)) {
      **(void **)(a1 + 112) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 120)) {
      **(void **)(a1 + 120) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 128)) {
      **(void **)(a1 + 12_Block_object_dispose(&STACK[0x400], 8) = CSDBRecordGetProperty();
    }
    CFRelease(v3);
  }
}

uint64_t sub_1000AAA90()
{
  uint64_t v0 = 0;
  qword_10015A9B8 = _CFRuntimeRegisterClass();
  uint64_t v1 = &off_10012CD78;
  do
  {
    v1 += 5;
    uint64_t result = CSDBRecordIndexOfPropertyNamed();
    dword_10015A9C0[v0++] = result;
  }
  while (v0 != 12);
  return result;
}

uint64_t sub_1000AAB00(uint64_t result)
{
  *(void *)(result + 24) = -1;
  return result;
}

void sub_1000AAB0C(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(void *)(a1 + 24) = -1;
  os_unfair_lock_unlock(v2);
}

BOOL sub_1000AAB54(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

uint64_t sub_1000AAB68(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

CFStringRef sub_1000AAB70(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringRef v5 = CFStringCreateWithFormat(v3, 0, @"<APSOutgoingMessageRecord %p [%p]>{}", a1, v4);
  os_unfair_lock_unlock(v2);
  return v5;
}

void *sub_1000AABE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, unsigned __int16 a15, unsigned int a16)
{
  pthread_once(&stru_10015A1D8, (void (*)(void))sub_1000AC374);
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v24 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0;
    *(void *)(Instance + 24) = 0;
    *(_DWORD *)(Instance + 16) = 0;
    sub_1000A6804();
    uint64_t v25 = CSDBRecordCreate();
    if (v25)
    {
      int v26 = (const void *)v25;
      uint64_t v27 = 0;
      uint64_t v34 = a2;
      uint64_t v35 = a3;
      uint64_t v36 = a4;
      uint64_t v37 = a5;
      uint64_t v38 = a6;
      uint64_t v39 = a7;
      uint64_t v40 = a8;
      uint64_t v41 = a9;
      uint64_t v42 = a10;
      uint64_t v43 = a11;
      uint64_t v44 = a12;
      uint64_t v45 = a13;
      uint64_t v46 = a14;
      uint64_t v47 = a15;
      uint64_t v48 = a16;
      do
      {
        CSDBRecordSetProperty();
        ++v27;
      }
      while (v27 != 15);
      if (sub_1000AADE4((uint64_t)v26))
      {
        v24[3] = (int)CSDBRecordGetID();
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = v24[3];
          int v30 = 138412546;
          uint64_t v31 = v24;
          __int16 v32 = 2048;
          uint64_t v33 = v28;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - New message record [%@] has ID [%lld].", (uint8_t *)&v30, 0x16u);
        }
      }
      else
      {
        CFRelease(v24);
        uint64_t v24 = 0;
      }
      CFRelease(v26);
    }
    else
    {
      CFRelease(v24);
      return 0;
    }
  }
  return v24;
}

uint64_t sub_1000AADE4(uint64_t a1)
{
  uint64_t v4 = 0;
  CFStringRef v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000AAF54;
  v3[3] = &unk_100129DB8;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_1000A6B08(v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000AAE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *sub_1000AAEA0(uint64_t a1, uint64_t a2)
{
  return sub_1000AAEA8(a1, a2, 1);
}

const void *sub_1000AAEA8(uint64_t a1, uint64_t a2, int a3)
{
  pthread_once(&stru_10015A1D8, (void (*)(void))sub_1000AC374);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 0;
  }
  uint64_t v6 = (const void *)Instance;
  *(void *)(Instance + 16) = 0;
  *(void *)(Instance + 24) = a2;
  *(_DWORD *)(Instance + 16) = 0;
  if (a3) {
    char v7 = (const void *)sub_1000AAF9C(a2);
  }
  else {
    char v7 = (const void *)sub_1000AB09C(a2);
  }
  if (v7)
  {
    uint64_t v8 = v6;
  }
  else
  {
    char v7 = v6;
    uint64_t v8 = 0;
  }
  CFRelease(v7);
  return v8;
}

const void *sub_1000AAF4C(uint64_t a1, uint64_t a2)
{
  return sub_1000AAEA8(a1, a2, 0);
}

uint64_t sub_1000AAF54(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t v1 = result;
    CSDBRecordStoreAddRecord();
    uint64_t result = CSDBRecordSaveStore();
    *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t sub_1000AAF9C(uint64_t a1)
{
  uint64_t v4 = 0;
  CFStringRef v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000AB058;
  v3[3] = &unk_100129DB8;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_1000A6B08(v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000AB040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AB058(uint64_t a1)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1000AB09C(uint64_t a1)
{
  uint64_t v4 = 0;
  CFStringRef v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000AB158;
  v3[3] = &unk_100129DB8;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_1000A6B78(v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000AB140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AB158(uint64_t a1)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1000AB19C(const __CFString *a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    CFStringRef v4 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - APSIncomingMessageRecordDeleteMessageForGUID %@", buf, 0xCu);
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      v2[0] = _NSConcreteStackBlock;
      v2[1] = 3221225472;
      v2[2] = sub_1000AB2A4;
      v2[3] = &unk_100129EE0;
      v2[4] = a1;
      sub_1000A6CC8(@"SELECT ROWID, guid, token, topic, environment, correlation_identifier, payload, from_storage, last_from_storage, message_id, priority, date, tracing_enabled, tracing_uuid, push_type, push_flags FROM incoming_message WHERE guid = ? ORDER BY ROWID ASC", v2);
    }
  }
}

uint64_t sub_1000AB2A4(uint64_t a1, uint64_t a2)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v3 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  CFIndex Count = CFArrayGetCount(v3);
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    for (CFIndex i = 0; i != v5; ++i)
    {
      CFArrayGetValueAtIndex(v3, i);
      CSDBRecordStoreRemoveRecord();
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  CSDBRecordSaveStore();
  return _CSDBRecordStoreInvalidateCachesWithStore(a2);
}

void sub_1000AB35C(const __CFString *a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412802;
    CFStringRef v11 = a1;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    __int16 v14 = 2112;
    CFStringRef v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - APSIncomingMessageRecordDeleteMessagesForTopic %@ %lld environment %@", buf, 0x20u);
  }
  if (a1)
  {
    CFIndex Length = CFStringGetLength(a1);
    if (a3)
    {
      if (Length)
      {
        if (CFStringGetLength(a3))
        {
          v9[0] = _NSConcreteStackBlock;
          v9[1] = 3221225472;
          v9[2] = sub_1000AB4A4;
          v9[3] = &unk_100129E78;
          v9[4] = a2;
          v9[5] = a1;
          v9[6] = a3;
          v9[7] = a4;
          sub_1000A6D40(@"DELETE FROM incoming_message WHERE priority = ? AND topic = ? AND environment = ? AND token = ?", v9);
        }
      }
    }
  }
}

uint64_t sub_1000AB4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSDBSqliteBindInt64();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindBlobFromCFData();
  return _CSDBSqliteStatementPerform(a4, v5, v6);
}

void sub_1000AB50C(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412802;
    CFStringRef v8 = a1;
    __int16 v9 = 2048;
    uint64_t v10 = a2;
    __int16 v11 = 2048;
    uint64_t v12 = a3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSMessageStore - APSIncomingMessageRecordDeleteMessagesOlderThanDate environment %@  %lld timeThreshold %lld", buf, 0x20u);
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      _DWORD v6[2] = sub_1000AB63C;
      void v6[3] = &unk_100129EC0;
      void v6[4] = a2;
      void v6[5] = a1;
      v6[6] = a3;
      sub_1000A6D40(@"DELETE FROM incoming_message WHERE priority = ? AND ROWID < IFNULL(  (  SELECT MAX(m.ROWID) FROM incoming_message m   WHERE m.environment = ?   AND m.priority = ?   AND m.date < ?  ), 0) ", v6);
    }
  }
}

uint64_t sub_1000AB63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSDBSqliteBindInt64();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  return _CSDBSqliteStatementPerform(a4, v5, v6);
}

uint64_t sub_1000AB6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000AB76C;
  v5[3] = &unk_10012CC08;
  v5[6] = a2;
  v5[7] = a3;
  void v5[4] = &v6;
  v5[5] = a1;
  sub_1000A6CC8(@"SELECT topic FROM incoming_message WHERE priority = ? AND environment = ? AND token = ? ", v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1000AB754(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AB76C(uint64_t a1)
{
  CSDBSqliteBindInt64();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindBlobFromCFData();
  while (1)
  {
    uint64_t result = CSDBSqliteStatementCopyStringResult();
    if (!result) {
      break;
    }
    uint64_t v3 = (const void *)result;
    CFStringRef v4 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (!v4)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      CFStringRef v4 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
    CFArrayAppendValue(v4, v3);
    CFRelease(v3);
  }
  return result;
}

CFMutableArrayRef sub_1000AB828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_alloc((Class)NSString);
  CFStringRef v7 = @"AND topic = ?";
  if (!a2) {
    CFStringRef v7 = &stru_10012F350;
  }
  id v8 = [v6 initWithFormat:@"%s WHERE environment = ? AND priority = ? %@ ORDER BY ROWID ASC LIMIT 100", "SELECT ROWID, guid, token, topic, environment, correlation_identifier, payload, from_storage, last_from_storage, message_id, priority, date, tracing_enabled, tracing_uuid, push_type, push_flags FROM incoming_message ", v7];
  CFAllocatorRef Default = CFAllocatorGetDefault();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(Default, 0, &kCFTypeArrayCallBacks);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000AB920;
  void v12[3] = &unk_100129E78;
  v12[4] = a3;
  v12[5] = a1;
  void v12[6] = a2;
  v12[7] = Mutable;
  sub_1000A6CC8((uint64_t)v8, v12);

  return Mutable;
}

void sub_1000AB920(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  if (*(void *)(a1 + 48)) {
    CSDBSqliteBindTextFromCFString();
  }
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFArrayGetValueAtIndex(v3, i);
        int ID = CSDBRecordGetID();
        id v8 = sub_1000AAEA8((uint64_t)kCFAllocatorDefault, ID, 0);
        if (v8)
        {
          uint64_t v9 = v8;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v8);
          CFRelease(v9);
        }
      }
    }
    CFRelease(v3);
  }
}

CFStringRef sub_1000ABA34(const __CFString *a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "APSIncomingMessageRecordCopyMessageForGUID [%@]", (uint8_t *)&buf, 0xCu);
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v5 = 0x2020000000;
      uint64_t v6 = 0;
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472;
      v3[2] = sub_1000ABB94;
      v3[3] = &unk_10012CC70;
      v3[4] = &buf;
      void v3[5] = a1;
      sub_1000A6CC8(@"SELECT ROWID, guid, token, topic, environment, correlation_identifier, payload, from_storage, last_from_storage, message_id, priority, date, tracing_enabled, tracing_uuid, push_type, push_flags FROM incoming_message WHERE guid = ? ORDER BY ROWID ASC;",
        v3);
      a1 = *(const __CFString **)(*((void *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void sub_1000ABB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000ABB94(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_1000AAEA8((uint64_t)kCFAllocatorDefault, ID, 0);
    }
    CFRelease(v3);
  }
}

uint64_t sub_1000ABC54(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v13 = 0;
    __int16 v14 = &v13;
    uint64_t v15 = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000ABD3C;
    void v12[3] = &unk_10012CCD8;
    v12[4] = &v13;
    v12[5] = a2;
    sub_1000A6A24(a2 + 16, v12);
    uint64_t v2 = v14[3];
    _Block_object_dispose(&v13, 8);
  }
  else
  {
    BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v3) {
      sub_1000CBD1C(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0;
  }
  return v2;
}

void sub_1000ABD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000ABD3C(uint64_t a1)
{
  uint64_t v2 = sub_1000AB09C(*(void *)(*(void *)(a1 + 40) + 24));
  if (v2)
  {
    BOOL v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t sub_1000ABDA8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v13 = 0;
    __int16 v14 = &v13;
    uint64_t v15 = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000ABE8C;
    void v12[3] = &unk_10012CCD8;
    v12[4] = &v13;
    v12[5] = a2;
    sub_1000A69B4(v12);
    uint64_t v2 = v14[3];
    _Block_object_dispose(&v13, 8);
  }
  else
  {
    BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v3) {
      sub_1000CBD98(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0;
  }
  return v2;
}

void sub_1000ABE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000ABE8C(uint64_t a1)
{
  uint64_t v2 = sub_1000AB09C(*(void *)(*(void *)(a1 + 40) + 24));
  if (v2)
  {
    BOOL v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t sub_1000ABEF8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2020000000;
    uint64_t v15 = 0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000ABFE4;
    void v11[3] = &unk_10012CCD8;
    void v11[4] = &v12;
    void v11[5] = a1;
    sub_1000A6A24(a1 + 16, v11);
    uint64_t v1 = v13[3];
    _Block_object_dispose(&v12, 8);
  }
  else
  {
    BOOL v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2) {
      sub_1000CBE14(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    return 0;
  }
  return v1;
}

void sub_1000ABFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000ABFE4(uint64_t a1)
{
  uint64_t v2 = sub_1000AB09C(*(void *)(*(void *)(a1 + 40) + 24));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (int)CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

void sub_1000AC054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a1)
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000AC12C;
    void v25[3] = &unk_10012CFF8;
    v25[4] = a1;
    void v25[5] = a2;
    v25[6] = a3;
    v25[7] = a4;
    v25[8] = a5;
    v25[9] = a7;
    v25[10] = a8;
    v25[11] = a9;
    v25[12] = a10;
    v25[13] = a11;
    v25[14] = a12;
    v25[15] = a13;
    v25[16] = a14;
    v25[17] = a15;
    v25[18] = a16;
    v25[19] = a17;
    sub_1000A6A24(a1 + 16, v25);
  }
  else
  {
    BOOL v17 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v17) {
      sub_1000CBE90(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
}

void sub_1000AC12C(uint64_t a1)
{
  uint64_t v2 = sub_1000AB09C(*(void *)(*(void *)(a1 + 32) + 24));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = (int)CSDBRecordGetID();
    }
    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 4_Block_object_dispose(&STACK[0x400], 8) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 56)) {
      **(void **)(a1 + 56) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + 64) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 72)) {
      **(void **)(a1 + 72) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 80)) {
      **(void **)(a1 + 80) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 88)) {
      **(unsigned char **)(a1 + 8_Block_object_dispose(&STACK[0x400], 8) = CSDBRecordGetProperty() != 0;
    }
    if (*(void *)(a1 + 96)) {
      **(unsigned char **)(a1 + 96) = CSDBRecordGetProperty() != 0;
    }
    if (*(void *)(a1 + 104)) {
      **(void **)(a1 + 104) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 112)) {
      **(void **)(a1 + 112) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 120)) {
      **(void **)(a1 + 120) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 128)) {
      **(unsigned char **)(a1 + 12_Block_object_dispose(&STACK[0x400], 8) = CSDBRecordGetProperty() != 0;
    }
    if (*(void *)(a1 + 136)) {
      **(void **)(a1 + 136) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 144)) {
      **(void **)(a1 + 144) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 152)) {
      **(_DWORD **)(a1 + 152) = CSDBRecordGetProperty();
    }
    CFRelease(v3);
  }
}

uint64_t sub_1000AC374()
{
  uint64_t v0 = 0;
  qword_10015A9F0 = _CFRuntimeRegisterClass();
  uint64_t v1 = &off_10012D078;
  do
  {
    v1 += 5;
    uint64_t result = CSDBRecordIndexOfPropertyNamed();
    dword_10015A9F8[v0++] = result;
  }
  while (v0 != 15);
  return result;
}

uint64_t sub_1000AC3E4(uint64_t result)
{
  *(void *)(result + 24) = -1;
  return result;
}

void sub_1000AC3F0(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(void *)(a1 + 24) = -1;
  os_unfair_lock_unlock(v2);
}

BOOL sub_1000AC438(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

uint64_t sub_1000AC44C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

CFStringRef sub_1000AC454(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringRef v5 = CFStringCreateWithFormat(v3, 0, @"<APSIncomingMessageRecord %p [%p]>{}", a1, v4);
  os_unfair_lock_unlock(v2);
  return v5;
}

void sub_1000AC520(id a1)
{
  uint64_t v1 = objc_alloc_init(APSSystemMonitor);
  uint64_t v2 = qword_10015AA38;
  qword_10015AA38 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1000AC66C()
{
  if (dword_10015AA48)
  {
    IONotificationPortSetDispatchQueue((IONotificationPortRef)qword_10015AA50, 0);
    IODeregisterForSystemPower(dword_10015AA58);
    IOServiceClose(dword_10015AA48);
    IONotificationPortDestroy((IONotificationPortRef)qword_10015AA50);
    dword_10015AA48 = 0;
  }
}

void sub_1000AC6C4(const char *a1, void *a2)
{
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v13;
    *(void *)&long long v5 = 138412546;
    long long v11 = v5;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void **)(*((void *)&v12 + 1) + 8 * (void)v8);
        if (objc_opt_respondsToSelector())
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = NSStringFromSelector(a1);
            *(_DWORD *)long long buf = v11;
            BOOL v17 = v10;
            __int16 v18 = 2112;
            uint64_t v19 = v9;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Delivering %@ to %@", buf, 0x16u);
          }
          objc_msgSend(v9, "performSelector:withObject:", a1, 0, v11);
        }
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v3 countByEnumeratingWithState:&v12 objects:v20 count:16];
    }
    while (v6);
  }
}

void sub_1000AC8F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ACEA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ACF24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ACFD8(id a1, int a2)
{
  uint64_t state64 = 0;
  notify_get_state(a2, &state64);
  uint64_t v2 = +[APSSystemMonitor sharedInstance];
  [v2 _setSystemLockState:state64 != 0];
}

void sub_1000AD034(id a1, int a2)
{
  uint64_t state64 = 0;
  notify_get_state(a2, &state64);
  uint64_t v2 = +[APSSystemMonitor sharedInstance];
  [v2 _setSystemScreenState:state64 == 0];
}

void sub_1000AD090(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  if (a3 == -536870288)
  {
LABEL_7:
    IOReturn v8 = IOAllowPowerChange(dword_10015AA48, a4);
    if (v8)
    {
      int v9 = v8;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
        sub_1000CBF54(v9);
      }
    }
    goto LABEL_13;
  }
  if (a3 != -536870144)
  {
    if (a3 != -536870272) {
      goto LABEL_13;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "SLEEP -- going to sleep now", buf, 2u);
    }
    uint64_t v7 = +[APSSystemMonitor sharedInstance];
    [v7 _systemWillSleep];

    goto LABEL_7;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "WAKE -- just woke up!", v10, 2u);
  }
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_10012D350);
LABEL_13:
}

void sub_1000AD200(id a1)
{
  id v1 = +[APSSystemMonitor sharedInstance];
  [v1 _systemDidWake];
}

void sub_1000AD52C(id a1)
{
  off_10015AA60 = (uint64_t (*)(void, void))CUTWeakLinkSymbol();
}

void sub_1000AD55C(id a1)
{
  off_10015AA70 = (uint64_t (*)(void, void, void))CUTWeakLinkSymbol();
}

void sub_1000AD58C(uint64_t a1, int a2, void *a3)
{
  if (!qword_10015AAB0)
  {
    id v6 = (void **)CUTWeakLinkSymbol();
    if (v6) {
      uint64_t v7 = *v6;
    }
    else {
      uint64_t v7 = 0;
    }
    objc_storeStrong((id *)&qword_10015AAB0, v7);
  }
  if (qword_10015AAC0 != -1) {
    dispatch_once(&qword_10015AAC0, &stru_10012D410);
  }
  IOReturn v8 = (__CFString *)off_10015AAB8(a1);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v9 = @"YES";
    *(_DWORD *)long long buf = 136315650;
    int v26 = "_WiFiManagerClientWoWStateChangedCallback";
    __int16 v27 = 2112;
    if (!a2) {
      CFStringRef v9 = @"NO";
    }
    uint64_t v28 = (const char *)v9;
    __int16 v29 = 2112;
    CFStringRef v30 = v8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s WoW isEnabled %@ WoW state %@", buf, 0x20u);
  }
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2020000000;
  char v24 = 0;
  pid_t v10 = getpid();
  long long v11 = [(__CFString *)v8 objectForKey:qword_10015AAB0];
  id v12 = [v11 count];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1000B0864;
  v19[3] = &unk_10012D438;
  pid_t v20 = v10;
  v19[4] = &v21;
  [v11 enumerateObjectsUsingBlock:v19];
  if (a2)
  {
    if (*((unsigned char *)v22 + 24))
    {
      if (v12 == (id)1)
      {
        a2 = 0;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          int v26 = "_WiFiManagerClientWoWStateChangedCallback";
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%s APSD is the only WoW subscriber. Preventing WoW from enabling dual mode!", buf, 0xCu);
          a2 = 0;
        }
      }
    }
  }
  id v13 = a3;
  if (a2 != [v13 isWoWEnabled])
  {
    [v13 setIsWoWEnabled:a2 != 0];
    id v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = [v13 shouldUseDualMode];
      unsigned int v16 = [v13 isWoWEnabled];
      CFStringRef v17 = @"NO";
      __int16 v27 = 2080;
      uint64_t v28 = "_WiFiManagerClientWoWStateChangedCallback";
      if (v15) {
        CFStringRef v18 = @"YES";
      }
      else {
        CFStringRef v18 = @"NO";
      }
      *(_DWORD *)long long buf = 134218754;
      int v26 = (const char *)v13;
      __int16 v29 = 2112;
      if (v16) {
        CFStringRef v17 = @"YES";
      }
      CFStringRef v30 = v18;
      __int16 v31 = 2112;
      CFStringRef v32 = v17;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%p %s shouldUseDualMode %@ isWoWEnabled %@", buf, 0x2Au);
    }

    [v13 _toggleWiFiAutoAssociateIfNecessary];
  }

  _Block_object_dispose(&v21, 8);
}

void sub_1000AD8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000AD92C(id a1)
{
  off_10015AA80 = (_UNKNOWN *)CUTWeakLinkSymbol();
}

void sub_1000ADABC(id a1)
{
  off_10015AA90 = (uint64_t (*)(void, void, void))CUTWeakLinkSymbol();
}

void sub_1000ADAEC(id a1)
{
  off_10015AAA0 = (_UNKNOWN *)CUTWeakLinkSymbol();
}

void sub_1000ADCE0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 138412290;
    id v4 = v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%@ Notified of significant time change", (uint8_t *)&v3, 0xCu);
  }
  [v2 _handleSignificantTimeChange];
}

id sub_1000ADD90(uint64_t a1, void *a2)
{
  return [a2 _reloadDualMode];
}

void sub_1000B0834(id a1)
{
  off_10015AAB8 = (uint64_t (*)(void))CUTWeakLinkSymbol();
}

id sub_1000B0864(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 intValue];
  if (result == *(_DWORD *)(a1 + 40))
  {
    *a4 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

BOOL sub_1000B0A0C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 8;
LABEL_21:
        id v14 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v12 = PBReaderReadString();
    uint64_t v13 = 16;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000B1DD4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

id sub_1000B2674(uint64_t a1, void *a2)
{
  return _[a2 protocolConnection:*(void *)(a1 + 32) didDisconnectWithConnectionState:2 reason:0];
}

id sub_1000B27FC(uint64_t a1, void *a2)
{
  return _[a2 protocolConnection:*(void *)(a1 + 32) didDisconnectWithConnectionState:2 reason:0];
}

void sub_1000B3464(void *a1, void *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = (void *)a1[6];
  id v5 = a2;
  objc_msgSend(v5, "protocolConnection:receivedMessageWithParameters:generation:isWaking:", v2, v3, objc_msgSend(v4, "unsignedIntegerValue"), 0);
}

uint64_t sub_1000B34D4(unint64_t a1)
{
  if (a1 > 6) {
    return 255;
  }
  else {
    return qword_10010EC60[a1];
  }
}

void sub_1000B3A00(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48) || *(void *)(a1 + 32))
  {
    CFStringRef v8 = @"APSProtocolConnectedResponse";
    CFStringRef v9 = &off_1001378C0;
    uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    id v3 = [v2 mutableCopy];

    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      [v3 setObject:v4 forKeyedSubscript:@"APSProtocolServerTimeForBadNonce"];
    }
    id v5 = [*(id *)(a1 + 40) presenceCompletion];

    if (v5)
    {
      unint64_t v6 = [*(id *)(a1 + 40) presenceCompletion];
      ((void (**)(void, id, void))v6)[2](v6, v3, 0);
    }
    [*(id *)(a1 + 40) setQueuedPresenceSend:0];
  }
  else
  {
    unint64_t v7 = *(void **)(a1 + 40);
    [v7 _markDisconnectedIsPermanent:0];
  }
}

id sub_1000B3F38(uint64_t a1, void *a2)
{
  return [a2 protocolConnection:*(void *)(a1 + 32) receivedPubSubChannelListWithParameters:*(void *)(a1 + 40)];
}

id sub_1000B4108(uint64_t a1, void *a2)
{
  return [a2 protocolConnection:*(void *)(a1 + 32) receivedPubSubChannelUpdateWithParameters:*(void *)(a1 + 40)];
}

void sub_1000B498C(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)a2[2];
  id v3 = (void *)a2[3];
  id v5 = a2;
  id v12 = [v4 name];
  uint64_t v6 = v5[5];

  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = [*(id *)(a1 + 64) firstObject];
  [v3 sendPresenceWithEnvironmentName:v12 guid:v6 token:v7 hwVersion:v8 swVersion:v9 swBuild:v10 certificate:v11 nonce:*(void *)(a1 + 72) signature:*(void *)(a1 + 80) hostCertificateInfo:*(void *)(a1 + 88)];
}

uint64_t sub_1000B5B00(mach_port_t a1, mach_msg_timeout_t timeout)
{
  msg.msgh_std::string::size_type size = 0;
  msg.mach_msg_bits_t msgh_bits = 19;
  msg.mach_port_t msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  *(void *)&msg.msgh_voucher_port = 0x737A800000000;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set(&msg);
  }
  uint64_t v3 = mach_msg(&msg, 17, 0x18u, 0, 0, timeout, 0);
  if (v3 == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(mach_task_self_, msg.msgh_local_port);
    }
    mach_msg_destroy(&msg);
  }
  return v3;
}

unint64_t sub_1000B5BF4()
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin();
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(void))&swift_isaMask;
  uint64_t v9 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x78);
  if (((uint64_t (*)(uint64_t))v9)(v5))
  {
    __uint64_t v1 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    uint64_t v8 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x90);
    uint64_t v2 = (swift_isaMask & *v0) + 144;
    if (v8() < v1)
    {
      unint64_t result = v8();
      __uint64_t v11 = v1 - result;
      if (v1 >= result)
      {
        unint64_t result = v9();
        unint64_t v12 = result + v11;
        if (!__CFADD__(result, v11))
        {
          sub_1000B6160();
          uint64_t v13 = v0;
          id v14 = static OS_os_log.default.getter();
          os_log_type_t v15 = static os_log_type_t.default.getter();
          int v16 = v15;
          if (os_log_type_enabled(v14, v15))
          {
            CFStringRef v17 = (_DWORD *)swift_slowAlloc();
            uint64_t v35 = v8;
            unint64_t v36 = v12;
            CFStringRef v18 = v17;
            *CFStringRef v17 = 134219008;
            unint64_t v34 = v11;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *((_WORD *)v18 + 6) = 2048;
            unint64_t v36 = v1;
            uint64_t v19 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *((_WORD *)v18 + 11) = 2048;
            LODWORD(v33) = v16;
            unint64_t v36 = ((uint64_t (*)(uint64_t))v35)(v19);
            uint64_t v20 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *((_WORD *)v18 + 16) = 2048;
            uint64_t v21 = ((uint64_t (*)(uint64_t))v9)(v20);

            unint64_t v36 = v21;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            *((_WORD *)v18 + 21) = 2048;
            unint64_t v36 = v34 / 0x3B9ACA00;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v33, "Calculated server time in nanoseconds %llu {currentMonotonicTimeInNanoSeconds: %llu, alignedMonotonicTimeInNanoSeconds: %llu, mostRecentServerTimeInNanoSeconds: %llu, changeInSeconds: %llu}", (uint8_t *)v18, 0x34u);
            swift_slowDealloc();
          }
          else
          {
          }
          return v12;
        }
        goto LABEL_24;
      }
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v23 = v22;
  char v24 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  v4 += 8;
  unint64_t result = v24(v7, v3);
  double v25 = v23 * 1000000000.0;
  if ((~COERCE__INT64(v23 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v25 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v25 < 1.84467441e19) {
    return (unint64_t)v25;
  }
  __break(1u);
LABEL_12:
  unint64_t v34 = v2;
  uint64_t v35 = v8;
  sub_1000B6160();
  int v26 = v0;
  __int16 v27 = static OS_os_log.default.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 134218240;
    unint64_t v36 = v1;
    uint64_t v30 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 12) = 2048;
    uint64_t v33 = v29 + 14;
    unint64_t v36 = ((uint64_t (*)(uint64_t))v35)(v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Monotonic time has rolled back -- reverting to system clock time! {currentMonotonicTimeInNanoSeconds: %llu, alignedMonotonicTimeInNanoSeconds: %llu}", (uint8_t *)v29, 0x16u);
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(void))((swift_isaMask & *v26) + 0x80))(0);
  (*(void (**)(void))((swift_isaMask & *v26) + 0x98))(0);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v32 = v31;
  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  double v25 = v32 * 1000000000.0;
  if ((~COERCE__INT64(v32 * 1000000000.0) & 0x7FF0000000000000) == 0) {
    goto LABEL_25;
  }
  if (v25 <= -1.0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v25 < 1.84467441e19) {
    return (unint64_t)v25;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_1000B6160()
{
  unint64_t result = qword_10015A540;
  if (!qword_10015A540)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10015A540);
  }
  return result;
}

void sub_1000B61A0(unint64_t a1)
{
  if (is_mul_ok(a1, 0xF4240uLL))
  {
    unint64_t v2 = 1000000 * a1;
    __uint64_t v3 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    if (v2 >= v3)
    {
      (*(void (**)(unint64_t))((swift_isaMask & *v1) + 0x80))(v2);
      (*(void (**)(__uint64_t))((swift_isaMask & *v1) + 0x98))(v3);
      sub_1000B6160();
      oslog = static OS_os_log.default.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v4))
      {
        uint64_t v5 = swift_slowAlloc();
        *(_DWORD *)uint64_t v5 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v5 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v6 = "Updated stored server time {serverTime: %llu, localTime: %llu}";
        goto LABEL_7;
      }
    }
    else
    {
      sub_1000B6160();
      oslog = static OS_os_log.default.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v4))
      {
        uint64_t v5 = swift_slowAlloc();
        *(_DWORD *)uint64_t v5 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v5 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v6 = "Did not update stored server time, nonsensical values! {serverTime: %llu, localTime: %llu}";
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, oslog, v4, v6, (uint8_t *)v5, 0x16u);
        swift_slowDealloc();

        return;
      }
    }
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_1000B64A8()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin();
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x78);
  if (((uint64_t (*)(uint64_t))v6)(v3))
  {
    __uint64_t v7 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    uint64_t v8 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x90);
    unint64_t result = v8();
    __uint64_t v10 = v7 - result;
    if (v7 < result)
    {
      __break(1u);
    }
    else
    {
      unint64_t result = v6();
      if (!__CFADD__(result, v10))
      {
        unint64_t v31 = result + v10;
        unint64_t v33 = 0;
        unint64_t v34 = 0xE000000000000000;
        _StringGuts.grow(_:)(206);
        v11._countAndFlagsBits = 0xD000000000000019;
        v11._object = (void *)0x800000010010D6E0;
        String.append(_:)(v11);
        unint64_t v32 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x60))();
        __uint64_t v30 = v10;
        v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v12);
        swift_bridgeObjectRelease();
        v13._object = (void *)0x800000010010D700;
        v13._countAndFlagsBits = 0xD000000000000024;
        String.append(_:)(v13);
        unint64_t v32 = v7;
        v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        v15._object = (void *)0x800000010010D730;
        v15._countAndFlagsBits = 0xD000000000000024;
        String.append(_:)(v15);
        unint64_t v32 = v8();
        v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._object = (void *)0x800000010010D760;
        v17._countAndFlagsBits = 0xD000000000000024;
        String.append(_:)(v17);
        unint64_t v32 = v6();
        v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 0xD000000000000012;
        v19._object = (void *)0x800000010010D790;
        String.append(_:)(v19);
        unint64_t v32 = v30 / 0x3B9ACA00;
        v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._countAndFlagsBits = 0xD00000000000002ALL;
        v21._object = (void *)0x800000010010D7B0;
        String.append(_:)(v21);
        unint64_t v32 = v31;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 62;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        return v33;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v25 = v24;
  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  double v26 = v25 * 1000000000.0;
  if ((~COERCE__INT64(v25 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v26 <= -1.0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v26 < 1.84467441e19)
  {
    unint64_t v27 = (unint64_t)v26;
    unint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    unint64_t v33 = 0xD00000000000002DLL;
    unint64_t v34 = 0x800000010010D6B0;
    unint64_t v32 = v27;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    return v33;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1000B694C()
{
  return 0;
}

uint64_t sub_1000B6954()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSServerTimeTracker__mostRecentServerTimeInNanoSeconds;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1000B699C(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___APSServerTimeTracker__mostRecentServerTimeInNanoSeconds);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000B69E8())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000B6A48()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSServerTimeTracker__alignedMonotonicTimeInNanoSeconds;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1000B6A90(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___APSServerTimeTracker__alignedMonotonicTimeInNanoSeconds);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000B6ADC())()
{
  return j_j__swift_endAccess;
}

id sub_1000B6B38()
{
  id v1 = objc_allocWithZone(v0);
  return [v1 init];
}

id sub_1000B6B6C()
{
  *(void *)&v0[OBJC_IVAR___APSServerTimeTracker__mostRecentServerTimeInNanoSeconds] = 0;
  *(void *)&v0[OBJC_IVAR___APSServerTimeTracker__alignedMonotonicTimeInNanoSeconds] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServerTimeTracker();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1000B6C10()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServerTimeTracker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ServerTimeTracker()
{
  return self;
}

double sub_1000B6C6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    a2 = a1;
  }
  return *(double *)&a2;
}

BOOL sub_1000B6C7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  BOOL v8 = *(double *)&a1 == *(double *)&a5;
  if ((a8 & 1) == 0) {
    BOOL v8 = 0;
  }
  BOOL v9 = *(double *)&a1 == *(double *)&a5;
  if (*(double *)&a2 != *(double *)&a6) {
    BOOL v9 = 0;
  }
  if (a3 != a7) {
    BOOL v9 = 0;
  }
  if (a8) {
    BOOL v9 = 0;
  }
  if (a4) {
    return v8;
  }
  else {
    return v9;
  }
}

BOOL sub_1000B6CCC(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  if (*(unsigned char *)(a1 + 24)) {
    return (*(unsigned char *)(a2 + 24) & 1) != 0 && v2 == v3;
  }
  if (*(unsigned char *)(a2 + 24)) {
    return 0;
  }
  BOOL v5 = v2 == v3;
  if (*(double *)(a1 + 8) != *(double *)(a2 + 8)) {
    BOOL v5 = 0;
  }
  return *(void *)(a1 + 16) == *(void *)(a2 + 16) && v5;
}

uint64_t sub_1000B6D3C()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000B6D4C()
{
  return 0;
}

uint64_t sub_1000B6D60()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_currentPhase;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1000B6DB0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = v4 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_currentPhase;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + _Block_object_dispose(&STACK[0x400], 8) = a2;
  *(void *)(v9 + 16) = a3;
  *(unsigned char *)(v9 + 24) = a4;
  return result;
}

uint64_t (*sub_1000B6E20())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000B6E7C()
{
  return swift_retain();
}

uint64_t sub_1000B6EC8(uint64_t a1)
{
  double v3 = (void *)(v1 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPhases);
  swift_beginAccess();
  *double v3 = a1;
  return swift_release();
}

uint64_t (*sub_1000B6F1C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000B6F78()
{
  return 0;
}

uint64_t sub_1000B6F84()
{
  return sub_1000B7004(&OBJC_IVAR___APSDefaultConnectionRetryStateManager_timeRemainingInPhase);
}

uint64_t sub_1000B6F90(uint64_t a1, char a2)
{
  return sub_1000B7058(a1, a2, &OBJC_IVAR___APSDefaultConnectionRetryStateManager_timeRemainingInPhase);
}

uint64_t (*sub_1000B6F9C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000B6FF8()
{
  return sub_1000B7004(&OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPresences);
}

uint64_t sub_1000B7004(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess();
  return *(void *)v2;
}

uint64_t sub_1000B704C(uint64_t a1, char a2)
{
  return sub_1000B7058(a1, a2, &OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPresences);
}

uint64_t sub_1000B7058(uint64_t a1, char a2, void *a3)
{
  uint64_t v6 = v3 + *a3;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + _Block_object_dispose(&STACK[0x400], 8) = a2 & 1;
  return result;
}

uint64_t (*sub_1000B70B4())()
{
  return j_j__swift_endAccess;
}

_UNKNOWN **sub_1000B7110()
{
  return &off_10012D570;
}

uint64_t sub_1000B711C()
{
  return swift_bridgeObjectRetain();
}

void sub_1000B7168(uint64_t a1)
{
  uint64_t v3 = (void *)((char *)v1 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease();
  uint64_t v4 = *v3;
  unint64_t v5 = *(void *)(*v3 + 16);
  if (v5)
  {
    sub_1000B8E78(&qword_10015A318);
    uint64_t v6 = (void *)swift_allocObject();
    int64_t v7 = j__malloc_size(v6);
    uint64_t v8 = v7 - 40;
    if (v7 < 40) {
      uint64_t v8 = v7 - 9;
    }
    _DWORD v6[2] = v8 >> 5;
    void v6[3] = 0;
    void v6[4] = 0;
    sub_1000B9060((uint64_t)(v6 + 2), v6 + 5, v5, v4);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = *(void **)_emptyDequeStorage.unsafeMutableAddressor();
    swift_retain();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void *))((swift_isaMask & *v1) + 0xA8))(v6);
  sub_1000B8C20();
}

void (*sub_1000B7284(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return sub_1000B72F0;
}

void sub_1000B72F0(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = *(void *)(v3[3] + v3[4]);
    unint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      sub_1000B8E78(&qword_10015A318);
      uint64_t v6 = (void *)swift_allocObject();
      int64_t v7 = j__malloc_size(v6);
      uint64_t v8 = v7 - 40;
      if (v7 < 40) {
        uint64_t v8 = v7 - 9;
      }
      _DWORD v6[2] = v8 >> 5;
      void v6[3] = 0;
      void v6[4] = 0;
      sub_1000B9060((uint64_t)(v6 + 2), v6 + 5, v5, v4);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = *(void **)_emptyDequeStorage.unsafeMutableAddressor();
      swift_retain();
      swift_bridgeObjectRelease();
    }
    (*(void (**)(void *))((swift_isaMask & *(void *)v3[3]) + 0xA8))(v6);
    sub_1000B8C20();
  }
  free(v3);
}

uint64_t sub_1000B740C()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_connectionAttemptTime;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1000B7454(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_connectionAttemptTime);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000B74A0())()
{
  return j_j__swift_endAccess;
}

double sub_1000B759C()
{
  double v1 = COERCE_DOUBLE((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))());
  if (v3 == -1) {
    return 0.0;
  }
  if (v3) {
    return v1;
  }
  return v2;
}

BOOL sub_1000B76F8()
{
  *(double *)&uint64_t v1 = COERCE_DOUBLE((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))());
  if (v3 == -1)
  {
    sub_1000B6160();
    uint64_t v6 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    return 0;
  }
  else
  {
    if (v3) {
      double v4 = *(double *)&v1;
    }
    else {
      double v4 = v2;
    }
    return v4 > 0.0;
  }
}

void sub_1000B77B8()
{
  BYTE5(qword_10015AE00) = 0;
  HIWORD(qword_10015AE00) = -5120;
}

uint64_t *sub_1000B77E4()
{
  if (qword_10015AAD0 != -1) {
    swift_once();
  }
  return &qword_10015ADF8;
}

uint64_t sub_1000B7830()
{
  return sub_1000B7AC0(&qword_10015AAD0, &qword_10015ADF8);
}

void sub_1000B7858()
{
  qword_10015AE08 = 0x68702D6C616E6966;
  qword_10015AE10 = 0xEB00000000657361;
}

uint64_t *sub_1000B7884()
{
  if (qword_10015AAD8 != -1) {
    swift_once();
  }
  return &qword_10015AE08;
}

uint64_t sub_1000B78D0()
{
  return sub_1000B7AC0(&qword_10015AAD8, &qword_10015AE08);
}

void sub_1000B78F8()
{
  qword_10015AE18 = 0x6E6F697461727564;
  qword_10015AE20 = 0xE800000000000000;
}

uint64_t *sub_1000B791C()
{
  if (qword_10015AAE0 != -1) {
    swift_once();
  }
  return &qword_10015AE18;
}

uint64_t sub_1000B7968()
{
  return sub_1000B7AC0(&qword_10015AAE0, &qword_10015AE18);
}

void sub_1000B7990()
{
  qword_10015AE28 = 0x79616C6564;
  qword_10015AE30 = 0xE500000000000000;
}

uint64_t *sub_1000B79B0()
{
  if (qword_10015AAE8 != -1) {
    swift_once();
  }
  return &qword_10015AE28;
}

uint64_t sub_1000B79FC()
{
  return sub_1000B7AC0(&qword_10015AAE8, &qword_10015AE28);
}

void sub_1000B7A24()
{
  qword_10015AE38 = 0x65636E6573657270;
  qword_10015AE40 = 0xE900000000000073;
}

uint64_t *sub_1000B7A4C()
{
  if (qword_10015AAF0 != -1) {
    swift_once();
  }
  return &qword_10015AE38;
}

uint64_t sub_1000B7A98()
{
  return sub_1000B7AC0(qword_10015AAF0, &qword_10015AE38);
}

uint64_t sub_1000B7AC0(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1000B7B14()
{
  uint64_t ObjectType = swift_getObjectType();
  type metadata accessor for DefaultsDebugOverrides();
  id v1 = sub_1000B6B38();
  uint64_t v2 = (*(uint64_t (**)(id))(ObjectType + 296))(v1);
  swift_deallocPartialClassInstance();
  return v2;
}

void *sub_1000B7C00(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1000B7C34(a1);
}

void *sub_1000B7C34(void *a1)
{
  id v3 = &v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_currentPhase];
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)id v3 = 0;
  v3[24] = -1;
  *(void *)&v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPhases] = 0;
  double v4 = &v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_timeRemainingInPhase];
  *(void *)double v4 = 0;
  v4[8] = 1;
  unint64_t v5 = &v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPresences];
  *(void *)unint64_t v5 = 0;
  void v5[8] = 1;
  *(void *)&v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases] = &off_10012D610;
  *(void *)&v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_connectionAttemptTime] = 0;
  *(void *)&v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_defaults] = a1;
  v20.receiver = v1;
  v20.super_class = (Class)type metadata accessor for DefaultConnectionRetryStateManager();
  swift_unknownObjectRetain();
  uint64_t v6 = objc_msgSendSuper2(&v20, "init");
  id v7 = [a1 connectionRetryPhases];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v6) + 0x130))(v9);
    swift_bridgeObjectRelease();
    Swift::String v11 = (void *)((char *)v6 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases);
    swift_beginAccess();
    *Swift::String v11 = v10;
    swift_bridgeObjectRelease();
  }
  Swift::String v12 = (void *)((char *)v6 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases);
  swift_beginAccess();
  uint64_t v13 = *v12;
  unint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    sub_1000B8E78(&qword_10015A318);
    Swift::String v15 = (void *)swift_allocObject();
    int64_t v16 = j__malloc_size(v15);
    uint64_t v17 = v16 - 40;
    if (v16 < 40) {
      uint64_t v17 = v16 - 9;
    }
    void v15[2] = v17 >> 5;
    v15[3] = 0;
    v15[4] = 0;
    sub_1000B9060((uint64_t)(v15 + 2), v15 + 5, v14, v13);
  }
  else
  {
    swift_bridgeObjectRetain();
    Swift::String v15 = *(void **)_emptyDequeStorage.unsafeMutableAddressor();
    swift_retain();
    swift_bridgeObjectRelease();
  }
  Swift::String v18 = (void *)((char *)v6 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPhases);
  swift_beginAccess();
  *Swift::String v18 = v15;
  swift_release();
  sub_1000B8C20();

  swift_unknownObjectRelease();
  return v6;
}

uint64_t sub_1000B7EBC(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_10015AAD0 == -1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_56:
    long long v49 = 0u;
    long long v50 = 0u;
    goto LABEL_57;
  }
  swift_once();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_56;
  }
LABEL_3:
  uint64_t v4 = qword_10015AE00;
  uint64_t v5 = qword_10015ADF8;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000B9150(v5, v4);
  if ((v7 & 1) == 0)
  {
    long long v49 = 0u;
    long long v50 = 0u;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  sub_1000B9228(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  if (!*((void *)&v50 + 1))
  {
LABEL_57:
    uint64_t v8 = sub_1000B91C8((uint64_t)&v49);
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xE8))(v8);
  }
  sub_1000B8E78(&qword_10015A330);
  uint64_t v8 = swift_dynamicCast();
  if ((v8 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xE8))(v8);
  }
  if (qword_10015AAD8 == -1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_8;
    }
    goto LABEL_61;
  }
  swift_once();
  if (!*(void *)(a1 + 16))
  {
LABEL_61:
    long long v49 = 0u;
    long long v50 = 0u;
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v9 = qword_10015AE10;
  uint64_t v10 = qword_10015AE08;
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_1000B9150(v10, v9);
  if (v12)
  {
    sub_1000B9228(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v49);
  }
  else
  {
    long long v49 = 0u;
    long long v50 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v50 + 1)) {
    goto LABEL_11;
  }
  sub_1000B8E78(&qword_10015A338);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_54:
    uint64_t v8 = swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xE8))(v8);
  }
  uint64_t v13 = v48;
  uint64_t v14 = *(void *)(v48 + 16);
  if (v14)
  {
    uint64_t v15 = 0;
    int64_t v16 = (char *)&_swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v17 = *(void *)(v48 + 8 * v15 + 32);
      uint64_t v18 = qword_10015AAE0;
      swift_bridgeObjectRetain();
      if (v18 == -1)
      {
        if (!*(void *)(v17 + 16)) {
          goto LABEL_52;
        }
      }
      else
      {
        swift_once();
        if (!*(void *)(v17 + 16)) {
          goto LABEL_52;
        }
      }
      uint64_t v19 = qword_10015AE20;
      uint64_t v20 = qword_10015AE18;
      swift_bridgeObjectRetain();
      unint64_t v21 = sub_1000B9150(v20, v19);
      if ((v22 & 1) == 0) {
        goto LABEL_48;
      }
      uint64_t v23 = *(void *)(*(void *)(v17 + 56) + 8 * v21);
      swift_bridgeObjectRelease();
      if (qword_10015AAE8 == -1)
      {
        if (!*(void *)(v17 + 16)) {
          goto LABEL_52;
        }
      }
      else
      {
        swift_once();
        if (!*(void *)(v17 + 16)) {
          goto LABEL_52;
        }
      }
      uint64_t v24 = qword_10015AE30;
      uint64_t v25 = qword_10015AE28;
      swift_bridgeObjectRetain();
      unint64_t v26 = sub_1000B9150(v25, v24);
      if ((v27 & 1) == 0)
      {
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_53;
      }
      uint64_t v28 = *(void *)(*(void *)(v17 + 56) + 8 * v26);
      swift_bridgeObjectRelease();
      if (qword_10015AAF0[0] == -1)
      {
        if (!*(void *)(v17 + 16)) {
          goto LABEL_52;
        }
      }
      else
      {
        swift_once();
        if (!*(void *)(v17 + 16)) {
          goto LABEL_52;
        }
      }
      uint64_t v29 = qword_10015AE40;
      uint64_t v30 = qword_10015AE38;
      swift_bridgeObjectRetain();
      unint64_t v31 = sub_1000B9150(v30, v29);
      if ((v32 & 1) == 0) {
        break;
      }
      uint64_t v33 = *(void *)(*(void *)(v17 + 56) + 8 * v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v16 = sub_1000B8F50(0, *((void *)v16 + 2) + 1, 1, v16);
      }
      unint64_t v35 = *((void *)v16 + 2);
      unint64_t v34 = *((void *)v16 + 3);
      if (v35 >= v34 >> 1) {
        int64_t v16 = sub_1000B8F50((char *)(v34 > 1), v35 + 1, 1, v16);
      }
      ++v15;
      *((void *)v16 + 2) = v35 + 1;
      unint64_t v36 = &v16[32 * v35];
      *((double *)v36 + 4) = (double)v23;
      *((double *)v36 + 5) = (double)v28;
      *((void *)v36 + 6) = v33;
      v36[56] = 0;
      if (v14 == v15)
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = v48;
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
LABEL_52:
    swift_bridgeObjectRelease();
LABEL_53:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  swift_bridgeObjectRelease();
  int64_t v16 = (char *)&_swiftEmptyArrayStorage;
LABEL_39:
  if (qword_10015AAE8 == -1)
  {
    if (!*(void *)(v13 + 16))
    {
LABEL_50:
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
  }
  else
  {
    swift_once();
    if (!*(void *)(v13 + 16)) {
      goto LABEL_50;
    }
  }
  uint64_t v37 = qword_10015AE30;
  uint64_t v38 = qword_10015AE28;
  swift_bridgeObjectRetain();
  unint64_t v39 = sub_1000B9150(v38, v37);
  if ((v40 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  uint64_t v41 = *(void *)(*(void *)(v13 + 56) + 8 * v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v16 = sub_1000B8F50(0, *((void *)v16 + 2) + 1, 1, v16);
  }
  double v42 = (double)v41;
  unint64_t v44 = *((void *)v16 + 2);
  unint64_t v43 = *((void *)v16 + 3);
  if (v44 >= v43 >> 1) {
    int64_t v16 = sub_1000B8F50((char *)(v43 > 1), v44 + 1, 1, v16);
  }
  *((void *)v16 + 2) = v44 + 1;
  uint64_t v45 = &v16[32 * v44];
  *((double *)v45 + 4) = v42;
  *((void *)v45 + 5) = 0;
  *((void *)v45 + 6) = 0;
  v45[56] = 1;
  sub_1000B6160();
  uint64_t v46 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return (uint64_t)v16;
}

uint64_t sub_1000B84F4()
{
  __uint64_t v1 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  uint64_t v2 = *(uint64_t (**)(__uint64_t))((swift_isaMask & *v0) + 0x108);
  return v2(v1);
}

uint64_t sub_1000B85F4()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x108))(0);
}

void sub_1000B86C4()
{
  __uint64_t v1 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x100);
  if (v2())
  {
    if (v2() < v1)
    {
      uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8))();
      if ((v4 & 1) == 0)
      {
        double v5 = *(double *)&v3;
        unint64_t v6 = v2();
        if (v1 < v6)
        {
          __break(1u);
        }
        else
        {
          double v7 = (double)(v1 - v6) / 1000000000.0;
          if (v7 >= v5)
          {
            sub_1000B8C20();
          }
          else
          {
            uint64_t v8 = *(void (**)(double, void))((swift_isaMask & *v0) + 0xC0);
            ((void (*)(void, void))v8)(v5 - v7, 0);
          }
        }
      }
    }
  }
}

void sub_1000B8880()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8))();
  unint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    sub_1000B8E78(&qword_10015A318);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = j__malloc_size(v3);
    uint64_t v5 = v4 - 40;
    if (v4 < 40) {
      uint64_t v5 = v4 - 9;
    }
    v3[2] = v5 >> 5;
    v3[3] = 0;
    v3[4] = 0;
    sub_1000B9060((uint64_t)(v3 + 2), v3 + 5, v2, v1);
  }
  else
  {
    uint64_t v3 = *(void **)_emptyDequeStorage.unsafeMutableAddressor();
    swift_retain();
  }
  swift_bridgeObjectRelease();
  (*(void (**)(void *))((swift_isaMask & *v0) + 0xA8))(v3);
  sub_1000B8C20();
}

void sub_1000B89EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xD0))();
  if ((v3 & 1) == 0)
  {
    uint64_t v8 = v2;
    sub_1000B6160();
    int64_t v4 = static OS_os_log.default.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v6 = 134217984;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Noting a presence failure, remaining presences %ld", v6, 0xCu);
      swift_slowDealloc();
    }

    swift_beginAccess();
    if (__OFSUB__(v8, 1))
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(uint64_t, void))((swift_isaMask & *v1) + 0xD8))(v8 - 1, 0);
      if (v8 - 1 <= 0)
      {
        double v7 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        sub_1000B8C20();
      }
    }
  }
}

void sub_1000B8C20()
{
  uint64_t v1 = v0;
  char v3 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((swift_isaMask & *v0) + 0xB0))(v16);
  if (!*(void *)v2) {
    goto LABEL_16;
  }
  if (*(uint64_t *)(*(void *)v2 + 24) < 1)
  {
    v3(v16, 0);
    sub_1000B6160();
    uint64_t v15 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    return;
  }
  uint64_t v4 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1000B9478();
  }
  os_log_type_t v5 = *(void **)v4;
  uint64_t v6 = *(void *)(*(void *)v4 + 32);
  uint64_t v7 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  uint64_t v8 = &v5[4 * v6];
  uint64_t v10 = v8[5];
  uint64_t v9 = v8[6];
  uint64_t v11 = v8[7];
  uint64_t v12 = *((unsigned __int8 *)v8 + 64);
  uint64_t v13 = v5[3];
  if (v7 >= v5[2]) {
    uint64_t v7 = 0;
  }
  void v5[4] = v7;
  if (__OFSUB__(v13, 1)) {
    goto LABEL_15;
  }
  v5[3] = v13 - 1;
  v3(v16, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((swift_isaMask & *v1) + 0x90))(v10, v9, v11, v12);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & *v1) + 0xC0);
  if (v12)
  {
    v14(0, 1);
    (*(void (**)(void, uint64_t))((swift_isaMask & *v1) + 0xD8))(0, 1);
  }
  else
  {
    v14(v10, 0);
    (*(void (**)(uint64_t, void))((swift_isaMask & *v1) + 0xD8))(v11, 0);
  }
}

uint64_t sub_1000B8E78(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

id sub_1000B8EC0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultConnectionRetryStateManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

char *sub_1000B8F50(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000B8E78(&qword_10015A368);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[32 * v8 + 32]) {
          memmove(v13, a4 + 32, 32 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000B967C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B9060(uint64_t result, void *__dst, unint64_t a3, uint64_t a4)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(a4 + 16);
  if (!v6)
  {
LABEL_9:
    *(void *)(v5 + _Block_object_dispose(&STACK[0x400], 8) = a3;
    return result;
  }
  if (v6 > a3) {
    goto LABEL_11;
  }
  if (a4 + 32 >= (unint64_t)__dst + 32 * v6 || a4 + 32 + 32 * v6 <= (unint64_t)__dst)
  {
    uint64_t result = (uint64_t)memcpy(__dst, (const void *)(a4 + 32), 32 * v6);
    goto LABEL_9;
  }
LABEL_12:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DefaultConnectionRetryStateManager()
{
  return self;
}

unint64_t sub_1000B9150(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return sub_1000B9394(a1, a2, v4);
}

uint64_t sub_1000B91C8(uint64_t a1)
{
  uint64_t v2 = sub_1000B8E78(&qword_10015A328);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B9228(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for RetryPhase(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithCopy for RetryPhase(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RetryPhase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RetryPhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x400], 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000B9360(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1000B9368(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RetryPhase()
{
  return &type metadata for RetryPhase;
}

ValueMetadata *type metadata accessor for DefaultConnectionRetryStateManager.DictionaryRepresentation()
{
  return &type metadata for DefaultConnectionRetryStateManager.DictionaryRepresentation;
}

unint64_t sub_1000B9394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1000B9478()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t *)(*v0 + 16);
  uint64_t v3 = *v2;
  sub_1000B8E78(&qword_10015A318);
  uint64_t v4 = swift_allocObject();
  long long v5 = *(_OWORD *)(v1 + 24);
  *(void *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  if ((uint64_t)v5 >= 1) {
    sub_1000B9510(v4 + 16, (char *)(v4 + 40), v2, (char *)(v1 + 40));
  }
  uint64_t result = swift_release();
  *uint64_t v0 = v4;
  return result;
}

void sub_1000B9510(int a1, char *__dst, void *a3, char *__src)
{
  uint64_t v4 = a3[2];
  uint64_t v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v7 = a3[1];
  if (v5 >= v7)
  {
    uint64_t v10 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = a3[1];
    if (v7 < 1) {
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  uint64_t v8 = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v9 = *a3 - v4;
  uint64_t v10 = __src;
  if (v5 < 1) {
    goto LABEL_14;
  }
LABEL_7:
  if (!__src)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v11 = 32 * v4;
  uint64_t v12 = &__src[v11];
  uint64_t v13 = &__dst[v11];
  size_t v14 = 32 * v9;
  uint64_t v15 = &__dst[32 * v9 + v11];
  int64_t v16 = &v12[32 * v9];
  if (v12 < v15 && v13 < v16) {
    goto LABEL_30;
  }
  memcpy(v13, v12, v14);
LABEL_14:
  if (v5 < v7 && v8 >= 1)
  {
    if (v10)
    {
      size_t v19 = 32 * v8;
      if (&__dst[32 * v8] <= v10 || &v10[v19] <= __dst)
      {
        memcpy(__dst, v10, v19);
        return;
      }
LABEL_30:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
}

char *sub_1000B967C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B979C()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000B97E0()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000B9824()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000B9868()
{
  return swift_unknownObjectRetain();
}

id sub_1000B9878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (char *)objc_allocWithZone(v4);
  *(void *)&v9[OBJC_IVAR___APSUserDependencies_clientIdentityProvider] = a1;
  *(void *)&v9[OBJC_IVAR___APSUserDependencies_systemTokenStorage] = a2;
  *(void *)&v9[OBJC_IVAR___APSUserDependencies_userPreferences] = a3;
  *(void *)&v9[OBJC_IVAR___APSUserDependencies_userAppIDManager] = a4;
  v11.receiver = v9;
  v11.super_class = v4;
  return objc_msgSendSuper2(&v11, "init");
}

id sub_1000B9908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&v4[OBJC_IVAR___APSUserDependencies_clientIdentityProvider] = a1;
  *(void *)&v4[OBJC_IVAR___APSUserDependencies_systemTokenStorage] = a2;
  *(void *)&v4[OBJC_IVAR___APSUserDependencies_userPreferences] = a3;
  *(void *)&v4[OBJC_IVAR___APSUserDependencies_userAppIDManager] = a4;
  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for UserDependencies();
  return objc_msgSendSuper2(&v6, "init");
}

uint64_t type metadata accessor for UserDependencies()
{
  return self;
}

uint64_t sub_1000B9AAC()
{
  uint64_t v12 = 0;
  unint64_t v13 = 0xE000000000000000;
  _StringGuts.grow(_:)(96);
  v1._countAndFlagsBits = 0xD000000000000019;
  v1._object = (void *)0x800000010010DC80;
  String.append(_:)(v1);
  uint64_t v11 = *(void *)(v0 + OBJC_IVAR___APSUserDependencies_clientIdentityProvider);
  sub_1000B8E78(&qword_10015A3F0);
  v2._countAndFlagsBits = sub_1000BBB90((uint64_t)&v11);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0xD000000000000016;
  v3._object = (void *)0x800000010010DCA0;
  String.append(_:)(v3);
  uint64_t v11 = *(void *)(v0 + OBJC_IVAR___APSUserDependencies_systemTokenStorage);
  sub_1000B8E78(&qword_10015A3F8);
  v4._countAndFlagsBits = sub_1000BBB90((uint64_t)&v11);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x800000010010DCC0;
  v5._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v5);
  uint64_t v11 = *(void *)(v0 + OBJC_IVAR___APSUserDependencies_userPreferences);
  sub_1000B8E78(&qword_10015A460);
  v6._countAndFlagsBits = sub_1000BBB90((uint64_t)&v11);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0xD000000000000014;
  v7._object = (void *)0x800000010010DCE0;
  String.append(_:)(v7);
  uint64_t v11 = *(void *)(v0 + OBJC_IVAR___APSUserDependencies_userAppIDManager);
  sub_1000B8E78(&qword_10015A468);
  v8._countAndFlagsBits = sub_1000BBB90((uint64_t)&v11);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 15931;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  return v12;
}

void sub_1000B9C78()
{
}

id sub_1000B9CD8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UserDependencies();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_1000B9D78()
{
  id v1 = [self standardUserDefaults];
  id v2 = [v0 initWithUserDefaults:v1];

  return v2;
}

id sub_1000B9E3C(uint64_t a1)
{
  Swift::String v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

id sub_1000B9E8C(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DefaultsDebugOverrides();
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t type metadata accessor for DefaultsDebugOverrides()
{
  return self;
}

id sub_1000B9F48()
{
  return *(id *)(v0 + OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults);
}

id sub_1000B9F58()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultsDebugOverrides();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void *sub_1000B9F9C()
{
  return &unk_10012D760;
}

unint64_t sub_1000B9FA8()
{
  return 0xD00000000000001CLL;
}

void *sub_1000B9FC4()
{
  return &unk_10012D770;
}

unint64_t sub_1000B9FD0()
{
  return 0xD00000000000001FLL;
}

void *sub_1000B9FEC()
{
  return &unk_10012D780;
}

unint64_t sub_1000B9FF8()
{
  return 0xD000000000000017;
}

void *sub_1000BA014()
{
  return &unk_10012D790;
}

unint64_t sub_1000BA020()
{
  return 0xD000000000000017;
}

void *sub_1000BA03C()
{
  return &unk_10012D7A0;
}

unint64_t sub_1000BA048()
{
  return 0xD000000000000017;
}

id sub_1000BA0E0()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 BOOLForKey:v2];

  return v3;
}

__CFString *sub_1000BA148(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v16 = 45;
  unint64_t v17 = 0xE100000000000000;
  uint64_t result = sub_100006494(a1);
  if (result)
  {
    Swift::String v4 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Swift::String v5 = String.lowercased()();
    swift_bridgeObjectRelease();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = v16;
    Swift::String v7 = (void *)v17;
    uint64_t v16 = 0xD00000000000001FLL;
    unint64_t v17 = 0x800000010010E010;
    v6._object = v7;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    Swift::String v8 = *(void **)(v2 + OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults);
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v10 = [v8 objectForKey:v9];

    if (v10)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v14 = 0u;
      long long v15 = 0u;
    }
    sub_1000BA384((uint64_t)&v14, (uint64_t)&v16);
    if (v18)
    {
      if (swift_dynamicCast()) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_1000B91C8((uint64_t)&v16);
    }
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v8 objectForKey:v11];

    if (v12)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v14 = 0u;
      long long v15 = 0u;
    }
    sub_1000BA384((uint64_t)&v14, (uint64_t)&v16);
    if (v18)
    {
      if (swift_dynamicCast())
      {
LABEL_14:
        sub_1000BA3EC();
        return (__CFString *)NSNumber.init(integerLiteral:)(v13).super.super.isa;
      }
    }
    else
    {
      sub_1000B91C8((uint64_t)&v16);
    }
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BA384(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B8E78(&qword_10015A328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000BA3EC()
{
  unint64_t result = qword_10015A508;
  if (!qword_10015A508)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10015A508);
  }
  return result;
}

NSNumber sub_1000BA4CC()
{
  return sub_1000BA6F4();
}

uint64_t sub_1000BA5E4()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 dictionaryForKey:v2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

NSNumber sub_1000BA6E0()
{
  return sub_1000BA6F4();
}

NSNumber sub_1000BA6F4()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 objectForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1000BA384((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    if (swift_dynamicCast())
    {
      sub_1000BA3EC();
      return NSNumber.init(integerLiteral:)(v5);
    }
  }
  else
  {
    sub_1000B91C8((uint64_t)v7);
  }
  return 0;
}

ValueMetadata *type metadata accessor for DefaultsDebugOverrides.DefaultsKeys()
{
  return &type metadata for DefaultsDebugOverrides.DefaultsKeys;
}

id sub_1000BA7F4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NoOpClientIdentityProvider();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for NoOpClientIdentityProvider()
{
  return self;
}

id sub_1000BA88C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NoOpClientIdentityProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_1000BA8C0()
{
  sub_1000B6160();
  uint64_t v0 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  id result = [objc_allocWithZone((Class)APSDProtoHostCertificateInfo) init];
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BAA34(uint64_t a1, uint64_t (*a2)(void, void *))
{
  if (a2) {
    return a2(0, &_swiftEmptyArrayStorage);
  }
  return result;
}

uint64_t sub_1000BAB28()
{
  return 0;
}

uint64_t sub_1000BAB70(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000BAB88()
{
  return 1;
}

uint64_t sub_1000BAB94()
{
  return 0;
}

uint64_t sub_1000BABA4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

const char *sub_1000BABFC()
{
  return "APS";
}

const char *sub_1000BAC10()
{
  return "BAASupport";
}

void sub_1000BAC24()
{
}

Swift::Int sub_1000BAC4C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BAC90()
{
  return Hasher._finalize()();
}

uint64_t sub_1000BAD2C()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_1000BADCC()
{
  return swift_unknownObjectRelease();
}

void (*sub_1000BAE28(void *a1))(void **a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___APSProcessModeUserTracker_responder;
  v3[4] = v1;
  void v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return sub_1000BAEAC;
}

void sub_1000BAEAC(void **a1, char a2)
{
  id v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

id sub_1000BAF2C(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1000BB6FC(a1);

  return v4;
}

id sub_1000BAF6C(void *a1)
{
  id v2 = sub_1000BB6FC(a1);

  return v2;
}

id sub_1000BAF9C()
{
  id v0 = objc_allocWithZone((Class)APSUser);
  return [v0 initUserWithSystemMode:0];
}

id sub_1000BAFD8()
{
  id v0 = objc_allocWithZone((Class)APSUser);
  return [v0 initUserWithSystemMode:1];
}

void sub_1000BB04C()
{
}

id sub_1000BB0AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProcessModeUserTracker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000BB1B4()
{
  unsigned int v1 = [*(id *)&v0[OBJC_IVAR___APSProcessModeUserTracker_multiUserMode] isMultiUser];
  sub_1000B8E78(&qword_10015A590);
  if (v1)
  {
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_10010EE40;
    id v3 = *(void **)&v0[OBJC_IVAR___APSProcessModeUserTracker_systemModeUser];
    *(void *)(v2 + 32) = v3;
    id v4 = v3;
    *(void *)(v2 + 40) = [v0 defaultUser];
    specialized Array._endMutation()();
  }
  else
  {
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_10010EE30;
    Swift::String v6 = *(void **)&v0[OBJC_IVAR___APSProcessModeUserTracker_systemModeUser];
    *(void *)(v5 + 32) = v6;
    uint64_t v9 = v5;
    specialized Array._endMutation()();
    uint64_t v2 = v9;
    id v7 = v6;
  }
  return v2;
}

void sub_1000BB2B4()
{
  id v1 = [v0 sortedLoggedInUsers];
  sub_1000B8E78(&qword_10015A598);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3)
    {
LABEL_3:
      id v4 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x70);
      if (v3 >= 1)
      {
        uint64_t v5 = 0;
        while (1)
        {
          if ((v2 & 0xC000000000000001) != 0)
          {
            uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            id v7 = (void *)v4();
            if (!v7) {
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t v6 = *(void *)(v2 + 8 * v5 + 32);
            uint64_t v8 = swift_unknownObjectRetain();
            id v7 = (void *)((uint64_t (*)(uint64_t))v4)(v8);
            if (!v7) {
              goto LABEL_6;
            }
          }
          [v7 setupUser:v6];
          swift_unknownObjectRelease();
LABEL_6:
          swift_unknownObjectRelease();
          if (v3 == ++v5) {
            goto LABEL_13;
          }
        }
      }
      __break(1u);
      goto LABEL_29;
    }
  }
LABEL_13:
  swift_bridgeObjectRelease();
  id v9 = [v0 sortedLoggedInUsers];
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11)
    {
LABEL_15:
      id v12 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x70);
      if (v11 < 1)
      {
LABEL_29:
        __break(1u);
        return;
      }
      for (uint64_t i = 0; v11 != i; ++i)
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          long long v15 = (void *)v12();
          if (!v15) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v14 = *(void *)(v10 + 8 * i + 32);
          uint64_t v16 = swift_unknownObjectRetain();
          long long v15 = (void *)((uint64_t (*)(uint64_t))v12)(v16);
          if (!v15) {
            goto LABEL_18;
          }
        }
        [v15 loginForUser:v14];
        swift_unknownObjectRelease();
LABEL_18:
        swift_unknownObjectRelease();
      }
    }
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_1000BB5C8()
{
  sub_1000BB820();
  return swift_unknownObjectRetain();
}

id sub_1000BB66C()
{
  return *(id *)(v0 + OBJC_IVAR___APSProcessModeUserTracker_systemModeUser);
}

id sub_1000BB6FC(void *a1)
{
  swift_unknownObjectWeakInit();
  uint64_t v3 = OBJC_IVAR___APSProcessModeUserTracker_systemModeUser;
  id v4 = objc_allocWithZone((Class)APSUser);
  uint64_t v5 = v1;
  *(void *)&v1[v3] = [v4 initUserWithSystemMode:0];
  uint64_t v6 = OBJC_IVAR___APSProcessModeUserTracker_userModeUser;
  *(void *)&v5[v6] = [objc_allocWithZone((Class)APSUser) initUserWithSystemMode:1];
  *(void *)&v5[OBJC_IVAR___APSProcessModeUserTracker_multiUserMode] = a1;
  id v7 = a1;

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for ProcessModeUserTracker();
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t type metadata accessor for ProcessModeUserTracker()
{
  return self;
}

uint64_t sub_1000BB7F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BB820()
{
  if ([*(id *)(v0 + OBJC_IVAR___APSProcessModeUserTracker_multiUserMode) isMultiUser])
  {
    memset(v5, 0, sizeof(v5));
    xpc_connection_get_audit_token();
    BOOL v1 = sub_10004AC5C(v5, APSConnectionSystemProcessEntitlement);
    unint64_t v2 = &OBJC_IVAR___APSProcessModeUserTracker_systemModeUser;
    if (!v1) {
      unint64_t v2 = &OBJC_IVAR___APSProcessModeUserTracker_userModeUser;
    }
    uint64_t v3 = *v2;
  }
  else
  {
    uint64_t v3 = OBJC_IVAR___APSProcessModeUserTracker_systemModeUser;
  }
  return *(void *)(v0 + v3);
}

id sub_1000BB8E4(void *a1)
{
  int v2 = sub_10007F1B4();
  uint64_t v3 = off_100129488;
  if (!v2) {
    uint64_t v3 = &off_100129490;
  }
  id v4 = [objc_allocWithZone((Class)*v3) init];
  if ([a1 isDefaultUser])
  {
    swift_unknownObjectRetain();
    id v5 = v4;
  }
  else
  {
    type metadata accessor for NoOpClientIdentityProvider();
    id v5 = sub_1000B6B38();
  }
  type metadata accessor for UserDependencies();
  id v6 = sub_1000B9878((uint64_t)v5, (uint64_t)[objc_allocWithZone((Class)APSProcessModeTokenStorage) initWithUser:a1], (uint64_t)objc_msgSend(objc_allocWithZone((Class)APSProcessModePreferences), "initWithUser:", a1), (uint64_t)objc_msgSend(objc_allocWithZone((Class)APSHashingAppIDManager), "init"));
  swift_unknownObjectRelease();
  return v6;
}

unint64_t sub_1000BBA10()
{
  unint64_t result = qword_10015A5A0;
  if (!qword_10015A5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015A5A0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for APSFeatureFlag(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for APSFeatureFlag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000BBB54);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for APSFeatureFlag()
{
  return &type metadata for APSFeatureFlag;
}

uint64_t sub_1000BBB90(uint64_t a1)
{
  __chkstk_darwin(a1, a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return String.init<A>(reflecting:)();
}

uint64_t sub_1000BBCD4()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___APSFilterChange_triggeringTopic);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000BBDA8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR___APSFilterChange_triggeringTopic);
  swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BBE50()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSFilterChange_topicGroupChange;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1000BBEE4(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR___APSFilterChange_topicGroupChange);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t sub_1000BBF78()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSFilterChange_reason;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1000BC00C(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR___APSFilterChange_reason);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t (*sub_1000BC058())()
{
  return j__swift_endAccess;
}

id sub_1000BC0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = (char *)objc_allocWithZone(v3);
  uint64_t v8 = &v7[OBJC_IVAR___APSFilterChange_triggeringTopic];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  objc_super v9 = &v7[OBJC_IVAR___APSFilterChange_topicGroupChange];
  *(void *)&v7[OBJC_IVAR___APSFilterChange_topicGroupChange] = 0;
  *(void *)&v7[OBJC_IVAR___APSFilterChange_reason] = 0;
  swift_beginAccess();
  *(void *)objc_super v9 = a1;
  swift_beginAccess();
  *(void *)uint64_t v8 = a2;
  *((void *)v8 + 1) = a3;
  swift_bridgeObjectRelease();
  v11.receiver = v7;
  v11.super_class = v3;
  return objc_msgSendSuper2(&v11, "init");
}

id sub_1000BC180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = &v3[OBJC_IVAR___APSFilterChange_triggeringTopic];
  *(void *)id v7 = 0;
  *((void *)v7 + 1) = 0;
  uint64_t v8 = &v3[OBJC_IVAR___APSFilterChange_topicGroupChange];
  *(void *)&v3[OBJC_IVAR___APSFilterChange_topicGroupChange] = 0;
  *(void *)&v3[OBJC_IVAR___APSFilterChange_reason] = 0;
  swift_beginAccess();
  *(void *)uint64_t v8 = a1;
  swift_beginAccess();
  *(void *)id v7 = a2;
  *((void *)v7 + 1) = a3;
  swift_bridgeObjectRelease();
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for FilterChange();
  return objc_msgSendSuper2(&v10, "init");
}

uint64_t type metadata accessor for FilterChange()
{
  return self;
}

id sub_1000BC2A4()
{
  uint64_t v1 = &v0[OBJC_IVAR___APSFilterChange_triggeringTopic];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  *(void *)&v0[OBJC_IVAR___APSFilterChange_topicGroupChange] = 0;
  *(void *)&v0[OBJC_IVAR___APSFilterChange_reason] = 0;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for FilterChange();
  return objc_msgSendSuper2(&v3, "init");
}

id sub_1000BC368()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FilterChange();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void type metadata accessor for APSFilterReason(uint64_t a1)
{
}

void type metadata accessor for APSTopicGroupChange(uint64_t a1)
{
}

void sub_1000BC3D8(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void sub_1000BC420()
{
}

id sub_1000BC434(uint64_t a1)
{
  id v4 = 0;
  id v2 = [v1 versionToSendFor:a1 error:&v4];
  if (v4)
  {
    v4;
    swift_willThrow();
  }
  return v2;
}

id sub_1000BC4D0(uint64_t a1)
{
  objc_super v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion] = a1;
  *(void *)&v3[OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion] = a1;
  id v4 = v3;
  *(void *)&v4[OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface] = sub_1000BC5C8((uint64_t)&_swiftEmptyArrayStorage);

  v6.receiver = v4;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, "init");
}

id sub_1000BC550(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion] = a1;
  *(void *)&v1[OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion] = a1;
  id v2 = v1;
  *(void *)&v2[OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface] = sub_1000BC5C8((uint64_t)&_swiftEmptyArrayStorage);

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for FilterVersionStateMachine();
  return objc_msgSendSuper2(&v4, "init");
}

unint64_t sub_1000BC5C8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000B8E78((uint64_t *)&unk_10015A730);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  objc_super v4 = (char *)(a1 + 57);
  while (1)
  {
    uint64_t v5 = *(void *)(v4 - 17);
    uint64_t v6 = *(void *)(v4 - 9);
    char v7 = *(v4 - 1);
    char v8 = *v4;
    id v9 = *(id *)(v4 - 25);
    unint64_t result = sub_1000BD8FC((uint64_t)v9);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v9;
    uint64_t v12 = v2[7] + 24 * result;
    *(void *)uint64_t v12 = v5;
    *(void *)(v12 + _Block_object_dispose(&STACK[0x400], 8) = v6;
    *(unsigned char *)(v12 + 16) = v7;
    *(unsigned char *)(v12 + 17) = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 32;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for FilterVersionStateMachine()
{
  return self;
}

id sub_1000BC798()
{
  return [v0 initWithInitialVersion:0];
}

uint64_t sub_1000BC7BC()
{
  _StringGuts.grow(_:)(71);
  v0._countAndFlagsBits = 0xD000000000000015;
  v0._object = (void *)0x800000010010E440;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0xD000000000000017;
  v2._object = (void *)0x800000010010E460;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x800000010010E480;
  v4._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v4);
  swift_beginAccess();
  sub_1000BC96C();
  sub_1000BC9AC();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

unint64_t sub_1000BC96C()
{
  unint64_t result = qword_10015A6F8;
  if (!qword_10015A6F8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10015A6F8);
  }
  return result;
}

unint64_t sub_1000BC9AC()
{
  unint64_t result = qword_10015A700;
  if (!qword_10015A700)
  {
    sub_1000BC96C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015A700);
  }
  return result;
}

id sub_1000BCA6C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FilterVersionStateMachine();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_1000BCAB0(void *a1, void *a2)
{
  uint64_t v3 = v2;
  Swift::String v6 = (uint64_t *)(v2 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*(void *)(*v6 + 16))
  {
    id v8 = a1;
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_1000BD8FC((uint64_t)v8);
    if (v10)
    {
      uint64_t v11 = *(void *)(v7 + 56) + 24 * v9;
      unint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(v11 + 8);
      __int16 v14 = *(unsigned __int8 *)(v11 + 16);
      int v15 = *(unsigned __int8 *)(v11 + 17);

      swift_bridgeObjectRelease();
      if (v15) {
        __int16 v16 = 256;
      }
      else {
        __int16 v16 = 0;
      }
      goto LABEL_8;
    }

    swift_bridgeObjectRelease();
  }
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  __int16 v14 = 0;
  __int16 v16 = 0;
LABEL_8:
  uint64_t v17 = OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion;
  if (*(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion) <= v12)
  {
    unint64_t v20 = v12 + 1;
    if (v12 == -1)
    {
      *(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion) = 0;
      *(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion) = 0;
      *Swift::String v6 = (uint64_t)&_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      if (a2)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v21 = objc_allocWithZone((Class)NSError);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v21 initWithDomain:v22 code:-1000 userInfo:0];

        id v24 = v23;
        unint64_t v20 = 0;
        *a2 = v23;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      swift_beginAccess();
      id v25 = a1;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v29 = *v6;
      *Swift::String v6 = 0x8000000000000000;
      sub_1000BE028(v12, v13, v16 | v14, v25, isUniquelyReferenced_nonNull_native);
      *Swift::String v6 = v29;

      swift_bridgeObjectRelease();
      swift_endAccess();
    }
  }
  else
  {
    swift_beginAccess();
    id v18 = a1;
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v6;
    *Swift::String v6 = 0x8000000000000000;
    sub_1000BE028(v12, v13, v16 | v14, v18, v19);
    *Swift::String v6 = v28;

    swift_bridgeObjectRelease();
    swift_endAccess();
    return *(void *)(v3 + v17);
  }
  return v20;
}

uint64_t sub_1000BCDA0(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  Swift::String v6 = (uint64_t *)(v2 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *v6;
  if (*(void *)(*v6 + 16))
  {
    id v9 = a2;
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_1000BD8FC((uint64_t)v9);
    if (v11)
    {
      uint64_t v12 = *(void *)(v8 + 56) + 24 * v10;
      uint64_t v13 = *(void *)(v12 + 8);
      int v14 = *(unsigned __int8 *)(v12 + 17);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v18 = *v6;
      *Swift::String v6 = 0x8000000000000000;
      if (v14) {
        __int16 v16 = 257;
      }
      else {
        __int16 v16 = 1;
      }
      sub_1000BE028(a1, v13, v16, v9, isUniquelyReferenced_nonNull_native);
      *Swift::String v6 = v18;

      swift_bridgeObjectRelease();
      uint64_t result = swift_endAccess();
      unint64_t v17 = *(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion);
      if (v17 <= a1) {
        unint64_t v17 = a1;
      }
      *(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion) = v17;
    }
    else
    {

      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1000BCF54(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  Swift::String v6 = (uint64_t *)(v2 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *v6;
  if (*(void *)(*v6 + 16))
  {
    id v9 = a2;
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_1000BD8FC((uint64_t)v9);
    if (v11)
    {
      uint64_t v12 = *(void *)(*(void *)(v8 + 56) + 24 * v10);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v15 = *v6;
      *Swift::String v6 = 0x8000000000000000;
      sub_1000BE028(v12, a1, 257, v9, isUniquelyReferenced_nonNull_native);
      *Swift::String v6 = v15;

      swift_bridgeObjectRelease();
      uint64_t result = swift_endAccess();
      unint64_t v14 = *(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion);
      if (v14 <= a1) {
        unint64_t v14 = a1;
      }
      *(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion) = v14;
    }
    else
    {

      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

id sub_1000BD0F4(unint64_t a1)
{
  if (a1 < 0xFFFFFFFFFFFFFF9CLL)
  {
    id v5 = 0;
    *(void *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion) = a1 + 100;
  }
  else
  {
    *(void *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion) = 0;
    *(void *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion) = 0;
    uint64_t v2 = (void *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
    swift_beginAccess();
    void *v2 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v3 = objc_allocWithZone((Class)NSError);
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v5 = [v3 initWithDomain:v4 code:-1000 userInfo:0];
  }
  return v5;
}

BOOL sub_1000BD23C(void *a1)
{
  uint64_t v2 = v1;
  NSString v4 = (uint64_t *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (*(void *)(v5 + 16))
  {
    id v6 = a1;
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1000BD8FC((uint64_t)v6);
    if (v8)
    {
      unint64_t v9 = *(void *)(*(void *)(v5 + 56) + 24 * v7);

      swift_bridgeObjectRelease();
      return v9 < *(void *)(v2 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion);
    }

    swift_bridgeObjectRelease();
  }
  return 1;
}

uint64_t sub_1000BD34C(void *a1)
{
  id v3 = (uint64_t *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (!*(void *)(v4 + 16)) {
    return 0;
  }
  id v5 = a1;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000BD8FC((uint64_t)v5);
  if (v7) {
    uint64_t v8 = *(unsigned __int8 *)(*(void *)(v4 + 56) + 24 * v6 + 17);
  }
  else {
    uint64_t v8 = 0;
  }

  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1000BD444(void *a1)
{
  id v3 = (uint64_t *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (!*(void *)(v4 + 16)) {
    return 0;
  }
  id v5 = a1;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000BD8FC((uint64_t)v5);
  if (v7) {
    uint64_t v8 = *(unsigned __int8 *)(*(void *)(v4 + 56) + 24 * v6 + 16);
  }
  else {
    uint64_t v8 = 0;
  }

  swift_bridgeObjectRelease();
  return v8;
}

BOOL sub_1000BD53C(void *a1)
{
  id v3 = (uint64_t *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*(void *)(v4 + 16))
  {
    id v5 = a1;
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_1000BD8FC((uint64_t)v5);
    if (v7)
    {
      uint64_t v8 = (unint64_t *)(*(void *)(v4 + 56) + 24 * v6);
      unint64_t v9 = *v8;
      unint64_t v10 = v8[1];

      swift_bridgeObjectRelease();
      return v10 < v9;
    }

    swift_bridgeObjectRelease();
  }
  return 0;
}

BOOL sub_1000BD63C(void *a1, void *a2)
{
  id v5 = (uint64_t *)(v2 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16)) {
    return 0;
  }
  id v7 = a1;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000BD8FC((uint64_t)v7);
  if ((v9 & 1) == 0)
  {

LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = *(void *)(*(void *)(v6 + 56) + 24 * v8 + 8);

  swift_bridgeObjectRelease();
  uint64_t v11 = *v5;
  if (!*(void *)(*v5 + 16)) {
    return 0;
  }
  id v12 = a2;
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_1000BD8FC((uint64_t)v12);
  if ((v14 & 1) == 0)
  {

    goto LABEL_13;
  }
  uint64_t v15 = (unint64_t *)(*(void *)(v11 + 56) + 24 * v13);
  unint64_t v16 = *v15;
  unint64_t v17 = v15[1];

  swift_bridgeObjectRelease();
  return v17 < v16 && v10 == v17;
}

uint64_t sub_1000BD7AC(uint64_t a1)
{
  id v3 = (uint64_t *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000BD8FC(a1);
  char v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t v10 = *v3;
    *id v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000BE1E0();
      uint64_t v8 = v10;
    }

    sub_1000BDE54(v4, v8);
    *id v3 = v8;
    swift_bridgeObjectRelease();
  }
  return swift_endAccess();
}

unint64_t sub_1000BD8FC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000BD940(a1, v4);
}

unint64_t sub_1000BD940(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1000BC96C();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_1000BDA4C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000BD8FC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000BE1E0();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 24 * v4);
  sub_1000BDE54(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1000BDB4C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000B8E78((uint64_t *)&unk_10015A730);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    NSString v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v20);
    uint64_t v30 = *(void *)(v5 + 56) + 24 * v20;
    long long v38 = *(_OWORD *)v30;
    char v31 = *(unsigned char *)(v30 + 16);
    char v32 = *(unsigned char *)(v30 + 17);
    if ((v37 & 1) == 0) {
      id v33 = v29;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(void *)(*(void *)(v7 + 48) + 8 * v17) = v29;
    uint64_t v18 = *(void *)(v7 + 56) + 24 * v17;
    *(_OWORD *)uint64_t v18 = v38;
    *(unsigned char *)(v18 + 16) = v31;
    *(unsigned char *)(v18 + 17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  NSString v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *NSString v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void sub_1000BDE54(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v11 = *(void *)(a2 + 40);
        id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v13 = NSObject._rawHashValue(seed:)(v11);

        Swift::Int v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v3 >= v14)
          {
LABEL_16:
            uint64_t v17 = *(void *)(a2 + 48);
            uint64_t v18 = (void *)(v17 + 8 * v3);
            unint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || v18 >= v19 + 1) {
              *uint64_t v18 = *v19;
            }
            uint64_t v20 = *(void *)(a2 + 56);
            unint64_t v21 = v20 + 24 * v3;
            NSString v22 = (long long *)(v20 + 24 * v6);
            if (24 * v3 < (uint64_t)(24 * v6) || v21 >= (unint64_t)v22 + 24 || (v23 = v3 == v6, int64_t v3 = v6, !v23))
            {
              long long v10 = *v22;
              *(void *)(v21 + 16) = *((void *)v22 + 2);
              *(_OWORD *)unint64_t v21 = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v14 >= v9 || v3 >= v14)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *int64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

id sub_1000BE028(uint64_t a1, uint64_t a2, __int16 a3, void *a4, char a5)
{
  unint64_t v6 = (void **)v5;
  Swift::Int v11 = (void *)*v5;
  unint64_t v13 = sub_1000BD8FC((uint64_t)a4);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  id result = (id)(v14 + v15);
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= (uint64_t)result && (a5 & 1) != 0)
  {
LABEL_7:
    unint64_t v19 = *v6;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 24 * v13;
      *(void *)uint64_t v20 = a1;
      *(void *)(v20 + _Block_object_dispose(&STACK[0x400], 8) = a2;
      *(unsigned char *)(v20 + 16) = a3 & 1;
      *(unsigned char *)(v20 + 17) = HIBYTE(a3) & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= (uint64_t)result && (a5 & 1) == 0)
  {
    id result = sub_1000BE1E0();
    goto LABEL_7;
  }
  sub_1000BDB4C((uint64_t)result, a5 & 1);
  id result = (id)sub_1000BD8FC((uint64_t)a4);
  if ((v17 & 1) != (v21 & 1))
  {
LABEL_15:
    sub_1000BC96C();
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = (unint64_t)result;
  unint64_t v19 = *v6;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1000BE184(v13, (uint64_t)a4, a1, a2, a3 & 0x101, v19);
  return a4;
}

unint64_t sub_1000BE184(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  uint64_t v6 = a6[7] + 24 * result;
  *(void *)uint64_t v6 = a3;
  *(void *)(v6 + _Block_object_dispose(&STACK[0x400], 8) = a4;
  *(unsigned char *)(v6 + 16) = a5 & 1;
  *(unsigned char *)(v6 + 17) = HIBYTE(a5) & 1;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

id sub_1000BE1E0()
{
  uint64_t v1 = v0;
  sub_1000B8E78((uint64_t *)&unk_10015A730);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    char v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 24 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    char v20 = *(unsigned char *)(v19 + 16);
    char v21 = *(unsigned char *)(v19 + 17);
    long long v22 = *(_OWORD *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v23 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)uint64_t v23 = v22;
    *(unsigned char *)(v23 + 16) = v20;
    *(unsigned char *)(v23 + 17) = v21;
    id result = v17;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for FilterVersionStateMachine.InterfaceState(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FilterVersionStateMachine.InterfaceState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterVersionStateMachine.InterfaceState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose(&STACK[0x400], 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 1_Block_object_dispose(&STACK[0x400], 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 1_Block_object_dispose(&STACK[0x400], 8) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FilterVersionStateMachine.InterfaceState()
{
  return &type metadata for FilterVersionStateMachine.InterfaceState;
}

uint64_t X509PolicySetFlagsForCommonNames(uint64_t a1)
{
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  v4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = X509CertificateSubjectNameGetCommonName((unint64_t *)(a1 + 104), v4);
  if (!result)
  {
    uint64_t result = compare_octet_string((uint64_t)&iPhoneCAName, (uint64_t)v4);
    if (result)
    {
      uint64_t result = compare_octet_string((uint64_t)&CodeSigningCAName, (uint64_t)v4);
      if (result)
      {
        uint64_t result = compare_octet_string_partial((uint64_t)&MFi4AccessoryCAName, (uint64_t)v4);
        if (result)
        {
          uint64_t result = compare_octet_string_partial((uint64_t)&MFi4AttestationCAName, (uint64_t)v4);
          if (result)
          {
            uint64_t result = compare_octet_string_partial((uint64_t)&MFi4ProvisioningCAName, (uint64_t)v4);
            if (result) {
              return result;
            }
            uint64_t v3 = 0x1000000000;
          }
          else
          {
            uint64_t v3 = 0x800000000;
          }
        }
        else
        {
          uint64_t v3 = 0x400000000;
        }
      }
      else
      {
        uint64_t v3 = 8;
      }
    }
    else
    {
      uint64_t v3 = 3840;
    }
    *(void *)(a1 + 240) |= v3;
  }
  return result;
}

double X509PolicySetFlagsForMFI(uint64_t a1)
{
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  if (!X509CertificateSubjectNameGetCommonName((unint64_t *)(a1 + 104), v6))
  {
    if (compare_octet_string_partial((uint64_t)&MFICommonNamePrefix, (uint64_t)v6)) {
      goto LABEL_3;
    }
    time_t v5 = 0;
    if (!X509CertificateGetNotBefore(a1, &v5))
    {
      memset(&v4, 0, sizeof(v4));
      strptime("2006-05-31", "%F", &v4);
      time_t v3 = timegm(&v4);
      double result = difftime(v3, v5);
      if (result < 0.0)
      {
        *(void *)(a1 + 240) |= 0x8000000uLL;
LABEL_3:
        if (!compare_octet_string_partial((uint64_t)&MFi4ProvisioningHostNamePrefix, (uint64_t)v6)) {
          *(void *)(a1 + 240) |= 0x1000000000uLL;
        }
      }
    }
  }
  return result;
}

uint64_t X509PolicySetFlagsForRoots(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 16))
  {
    double result = compare_octet_string(a2 + 88, (uint64_t)&AppleRootCASPKI);
    if (!result
      || (double result = compare_octet_string(a2 + 88, (uint64_t)&AppleRootG2SPKI), !result)
      || (double result = compare_octet_string(a2 + 88, (uint64_t)&AppleRootG3SPKI), !result))
    {
      uint64_t v5 = *(void *)(a2 + 240) | 0x58E30653FFF8;
      goto LABEL_11;
    }
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if ((v4 & 0x1000000) != 0)
  {
    double result = compare_octet_string(a2 + 88, (uint64_t)&UcrtRootSpki);
    if (!result)
    {
      uint64_t v5 = *(void *)(a2 + 240) | 0x1000000;
      goto LABEL_11;
    }
LABEL_13:
    if (*(unsigned char *)(v3 + 17)) {
      double result = sub_1000BE800((void *)v3, a2);
    }
    goto LABEL_15;
  }
  if ((v4 & 0x1C00000000) == 0) {
    goto LABEL_15;
  }
  double result = compare_octet_string(a2 + 88, (uint64_t)&MFi4RootSpki);
  if (result) {
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(a2 + 240) | 0x1C00000000;
LABEL_11:
  *(void *)(a2 + 240) = v5;
LABEL_15:
  if (*(unsigned char *)(v3 + 16))
  {
    if (*(unsigned char *)(v3 + 17))
    {
      double result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootCASPKI);
      if (!result
        || (double result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootG2SPKI), !result)
        || (double result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootG3SPKI), !result))
      {
        *(void *)(a2 + 240) |= 0x58E30653FFF8uLL;
      }
    }
    if (*(unsigned char *)(v3 + 16) && *(unsigned char *)(v3 + 17))
    {
      double result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootECCSPKI);
      if (!result) {
        *(void *)(a2 + 240) |= 0x6400000uLL;
      }
    }
  }
  return result;
}

uint64_t sub_1000BE800(void *a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = X509CertificateParseSPKI((unint64_t *)(a2 + 88), v6, 0, v5);
  if (!result)
  {
    uint64_t result = compare_octet_string(a1[4], (uint64_t)v6);
    if (!result)
    {
      uint64_t result = compare_octet_string(a1[3], (uint64_t)v5);
      if (!result) {
        *(void *)(a2 + 240) |= a1[1];
      }
    }
  }
  return result;
}

uint64_t X509PolicyCheckForBlockedKeys(uint64_t a1)
{
  uint64_t result = compare_octet_string(a1 + 88, (uint64_t)&BlockedYonkersSPKI);
  if (!result) {
    *(void *)(a1 + 240) &= 0xFFFFFFFFFFF3FFFFLL;
  }
  return result;
}

int *find_digest(uint64_t a1)
{
  unint64_t v2 = 0;
  while (1)
  {
    uint64_t result = (int *)compare_octet_string_raw((uint64_t)&dword_10012E9F8[v2 / 4 + 2], *(const void **)a1, *(void *)(a1 + 8));
    if (!result) {
      break;
    }
    v2 += 32;
    if (v2 == 160) {
      return 0;
    }
  }
  if (v2 <= ~(unint64_t)dword_10012E9F8) {
    return &dword_10012E9F8[v2 / 4];
  }
  __break(0x5513u);
  return result;
}

int *find_digest_by_type(int *result)
{
  unint64_t v1 = 0;
  while (dword_10012E9F8[v1 / 4] != result)
  {
    v1 += 32;
    if (v1 == 160) {
      return 0;
    }
  }
  if (v1 <= ~(unint64_t)dword_10012E9F8) {
    return &dword_10012E9F8[v1 / 4];
  }
  __break(0x5513u);
  return result;
}

uint64_t find_digestOID_for_signingOID(uint64_t a1, void *a2)
{
  if (!compare_octet_string_raw(a1, &sha1WithRSA_oid, 9uLL)
    || !compare_octet_string_raw(a1, &sha1WithECDSA_oid, 7uLL))
  {
    uint64_t v6 = &CTOidSha1;
    uint64_t v4 = 5;
    goto LABEL_11;
  }
  uint64_t v4 = 9;
  if (!compare_octet_string_raw(a1, &sha256WithRSA_oid, 9uLL))
  {
    uint64_t v6 = &CTOidSha256;
    goto LABEL_11;
  }
  if (!compare_octet_string_raw(a1, &sha256WithECDSA_oid, 8uLL))
  {
    uint64_t v6 = &CTOidSha256;
LABEL_18:
    uint64_t v4 = 9;
    goto LABEL_11;
  }
  uint64_t v4 = 9;
  if (!compare_octet_string_raw(a1, &sha384WithRSA_oid, 9uLL))
  {
    uint64_t v6 = &CTOidSha384;
    goto LABEL_11;
  }
  if (!compare_octet_string_raw(a1, &sha384WithECDSA_oid, 8uLL))
  {
    uint64_t v6 = &CTOidSha384;
    goto LABEL_18;
  }
  uint64_t v4 = 9;
  if (compare_octet_string_raw(a1, &sha512WithRSA_oid, 9uLL))
  {
    if (compare_octet_string_raw(a1, &sha512WithECDSA_oid, 8uLL)) {
      return 0;
    }
    uint64_t v6 = &CTOidSha512;
    goto LABEL_18;
  }
  uint64_t v6 = &CTOidSha512;
LABEL_11:
  *a2 = v6;
  a2[1] = v4;
  return 1;
}

unint64_t validateSignatureRSA(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  unint64_t result = 0;
  char v24 = 0;
  if (a1)
  {
    if (a2)
    {
      unint64_t result = 0;
      if (a3)
      {
        if (a4)
        {
          if (a5)
          {
            unint64_t result = compare_octet_string((uint64_t)&rsaEncryption, (uint64_t)(a5 + 7));
            if (!result
              || (unint64_t result = sub_1000BED4C((uint64_t)&off_10012EAE8, (uint64_t)(a5 + 3), (uint64_t)(a5 + 7)), result))
            {
              unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
              unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
              unint64_t v10 = a5[9];
              uint64_t v9 = a5[10];
              if (__CFADD__(v10, v9)) {
                goto LABEL_31;
              }
              if (v10 > v10 + v9) {
                goto LABEL_32;
              }
              unint64_t v22 = a5[9];
              unint64_t v23 = v10 + v9;
              if (!v9 || (unint64_t result = ccder_blob_check_null(), result))
              {
                if (!__CFADD__(a1, a2))
                {
                  if (a1 + a2 >= a1)
                  {
                    unint64_t result = ccder_decode_rsa_pub_n();
                    if (!result) {
                      return result;
                    }
                    unint64_t v11 = result;
                    if (result >> 58)
                    {
LABEL_33:
                      __break(0x550Cu);
                      return result;
                    }
                    unint64_t v12 = result << 6;
                    if (result << 6 < 0x400) {
                      return 0;
                    }
                    unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
                    __int16 v27 = -21846;
                    char v25 = 6;
                    if (&vars0 != (uint64_t *)82)
                    {
                      unint64_t v13 = a5[4];
                      LOBYTE(v26) = v13;
                      if ((unint64_t)&v25 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        if (v13 <= 9)
                        {
                          uint64_t v14 = __memcpy_chk();
                          if (v12 > 0x1068) {
                            return 0;
                          }
                          unint64_t result = __chkstk_darwin(v14, v15);
                          char v17 = (unint64_t *)((char *)&v21 - v16);
                          unint64_t v18 = 0;
                          *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
                          *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
                          do
                          {
                            char v20 = &v17[v18 / 8];
                            *(_OWORD *)char v20 = v19;
                            *((_OWORD *)v20 + 1) = v19;
                            v18 += 32;
                          }
                          while (v16 != v18);
                          if (v16 >= 1)
                          {
                            *char v17 = v11;
                            if (ccrsa_import_pub()) {
                              return 0;
                            }
                            if (!ccrsa_verify_pkcs1v15_allowshortsigs()) {
                              return v24 != 0;
                            }
                            unint64_t result = 0;
                            char v24 = 0;
                            return result;
                          }
                        }
                        goto LABEL_32;
                      }
                    }
                    goto LABEL_31;
                  }
LABEL_32:
                  __break(0x5519u);
                  goto LABEL_33;
                }
LABEL_31:
                __break(0x5513u);
                goto LABEL_32;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1000BED4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0;
  BOOL v7 = 1;
  do
  {
    if (!compare_octet_string(a1, a2) && !compare_octet_string(a1 + 16, a3)) {
      break;
    }
    BOOL v7 = v6 < 3;
    a1 += 32;
    ++v6;
  }
  while (v6 != 4);
  return v7;
}

_UNKNOWN **oidForPubKeyLength()
{
  uint64_t v0 = ccec_x963_import_pub_size();
  int is_supported = ccec_keysize_is_supported();
  unint64_t v2 = &CTOidSECP256r1;
  uint64_t v3 = &CTOidSECP521r1;
  uint64_t v4 = &CTOidSECP384r1;
  if (v0 != 384) {
    uint64_t v4 = 0;
  }
  if (v0 != 521) {
    uint64_t v3 = v4;
  }
  if (v0 != 256) {
    unint64_t v2 = v3;
  }
  if (is_supported) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t validateSignatureEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0;
  HIBYTE(v1_Block_object_dispose(&STACK[0x400], 8) = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      if (a3)
      {
        if (a4)
        {
          if (a5)
          {
            if (!compare_octet_string((uint64_t)&ecPublicKey, a5 + 56)
              || (uint64_t result = sub_1000BED4C((uint64_t)&off_10012EB68, a5 + 24, a5 + 56), result))
            {
              uint64_t result = sub_1000BF038((int **)(a5 + 72));
              if (result)
              {
                uint64_t v9 = *(void *)result;
                if (*(void *)result >> 61 || !is_mul_ok(8 * v9, 3uLL))
                {
                  __break(0x550Cu);
                }
                else
                {
                  uint64_t v10 = 24 * v9;
                  BOOL v11 = __CFADD__(v10, 16);
                  unint64_t v12 = v10 + 16;
                  if (!v11 && v12 < 0xFFFFFFFFFFFFFFF0)
                  {
                    uint64_t result = __chkstk_darwin(result, v8);
                    uint64_t v15 = (uint64_t *)((char *)&v18 - v13);
                    unint64_t v16 = 0;
                    do
                    {
                      char v17 = &v15[v16 / 8];
                      *char v17 = 0xAAAAAAAAAAAAAAAALL;
                      v17[1] = 0xAAAAAAAAAAAAAAAALL;
                      v16 += 16;
                    }
                    while (v13 != v16);
                    if (v14 >= 0x10)
                    {
                      *uint64_t v15 = result;
                      if (v13 >= 1)
                      {
                        if (!ccec_import_pub())
                        {
                          uint64_t result = ccec_x963_import_pub_size();
                          if (result == 256 && *(void *)(a5 + 96) == 64)
                          {
                            if (*(void *)(a5 + 88) < 0xFFFFFFFFFFFFFFE0)
                            {
                              if (!ccec_verify_composite()) {
                                return HIBYTE(v18) != 0;
                              }
                              goto LABEL_24;
                            }
LABEL_31:
                            __break(0x5513u);
                            return result;
                          }
                          if (ccec_verify()) {
LABEL_24:
                          }
                            HIBYTE(v1_Block_object_dispose(&STACK[0x400], 8) = 0;
                        }
                        return HIBYTE(v18) != 0;
                      }
LABEL_30:
                      __break(0x5519u);
                      goto LABEL_31;
                    }
LABEL_29:
                    __break(1u);
                    goto LABEL_30;
                  }
                }
                __break(0x5500u);
                goto LABEL_29;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000BF038(int **a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v1 = a1[1];
  if (v1 != (int *)7)
  {
    if (v1 == (int *)10 && *(void *)*a1 == 0x33DCE48862A0806 && *((_WORD *)*a1 + 4) == 1793) {
      return _ccec_cp_256();
    }
    return 0;
  }
  uint64_t v3 = *a1;
  if (**a1 == -2127887098 && *(int *)((char *)*a1 + 3) == 570426497) {
    return _ccec_cp_384();
  }
  int v5 = *v3;
  int v6 = *(int *)((char *)v3 + 3);
  if (v5 != -2127887098 || v6 != 587203713) {
    return 0;
  }
  return _ccec_cp_521();
}

uint64_t compressECPublicKey(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  int v6 = (void *)sub_1000BF038(a2);
  if (!v6) {
    return 655366;
  }
  uint64_t v8 = v6;
  uint64_t v9 = *v6;
  if (*v6 >> 61 || !is_mul_ok(8 * v9, 3uLL))
  {
    __break(0x550Cu);
    goto LABEL_19;
  }
  uint64_t v10 = 24 * v9;
  BOOL v11 = __CFADD__(v10, 16);
  unint64_t v12 = v10 + 16;
  if (v11 || v12 >= 0xFFFFFFFFFFFFFFF0) {
LABEL_19:
  }
    __break(0x5500u);
  uint64_t result = __chkstk_darwin(v6, v7);
  unint64_t v16 = (uint64_t *)((char *)&v19 - v14);
  unint64_t v17 = 0;
  do
  {
    uint64_t v18 = &v16[v17 / 8];
    *uint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
    v18[1] = 0xAAAAAAAAAAAAAAAALL;
    v17 += 16;
  }
  while (v14 != v17);
  if (v15 < 0x10) {
    goto LABEL_21;
  }
  *unint64_t v16 = v8;
  if (v14 < 1)
  {
LABEL_20:
    __break(0x5519u);
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t result = ccec_import_pub();
  if (!result)
  {
    uint64_t result = ccec_compressed_x962_export_pub_size();
    if (result == a4)
    {
      if (!a3 || a4) {
        return ccec_compressed_x962_export_pub();
      }
      goto LABEL_20;
    }
    return 393220;
  }
  return result;
}

unint64_t decompressECPublicKey(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  int v6 = (uint64_t *)sub_1000BF038(a2);
  if (!v6) {
    return 655366;
  }
  uint64_t v8 = *v6;
  if ((unint64_t)*v6 >> 61 || !is_mul_ok(8 * v8, 3uLL)) {
LABEL_22:
  }
    __break(0x550Cu);
  uint64_t v9 = 24 * v8;
  BOOL v10 = __CFADD__(v9, 16);
  unint64_t v11 = v9 + 16;
  if (v10 || v11 >= 0xFFFFFFFFFFFFFFF0)
  {
LABEL_21:
    __break(0x5500u);
    goto LABEL_22;
  }
  unint64_t result = __chkstk_darwin(v6, v7);
  unint64_t v15 = (unint64_t *)((char *)&v19 - v13);
  unint64_t v16 = 0;
  do
  {
    unint64_t v17 = &v15[v16 / 8];
    *unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    v17[1] = 0xAAAAAAAAAAAAAAAALL;
    v16 += 16;
  }
  while (v13 != v16);
  if (v14 < 0x10) {
    goto LABEL_24;
  }
  *unint64_t v15 = result;
  if (v13 >= 1)
  {
    uint64_t v18 = ccec_compressed_x962_import_pub();
    if (!v18)
    {
      unint64_t result = cczp_bitlen();
      if (result < 0xFFFFFFFFFFFFFFF9)
      {
        if (!a3 || a4)
        {
          if ((((result + 7) >> 2) | 1) == a4) {
            uint64_t v18 = 0;
          }
          else {
            uint64_t v18 = 393220;
          }
          ccec_export_pub();
          return v18;
        }
        goto LABEL_23;
      }
      goto LABEL_21;
    }
    return v18;
  }
LABEL_23:
  __break(0x5519u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t CMSParseContentInfoSignedDataWithOptions(unsigned __int8 *a1, uint64_t a2, unint64_t *a3, char a4)
{
  BOOL v28 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v29 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(a1, a2)) {
    goto LABEL_114;
  }
  if (&a1[a2] < a1) {
    goto LABEL_112;
  }
  int v4 = 65537;
  BOOL v28 = a1;
  uint64_t v29 = &a1[a2];
  __int16 v27 = 0;
  size_t v26 = 0xAAAAAAAAAAAAAAAALL;
  int v7 = sub_1000BFA88(&v28, 0x2000000000000010, (unsigned char *)&v27 + 1, &v26);
  uint64_t result = 65537;
  if (v7)
  {
    char v24 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
    char v25 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
    if (__CFADD__(v28, v26)) {
      goto LABEL_114;
    }
    if (v28 > &v28[v26] || &v28[v26] > v29) {
      goto LABEL_112;
    }
    char v24 = v28;
    char v25 = &v28[v26];
    if (ccder_blob_decode_tl())
    {
      if (v25 < v24 || v26 > v25 - v24) {
        goto LABEL_112;
      }
      if (compare_octet_string_raw((uint64_t)&off_10012EBE8, v24, v26)) {
        return 65539;
      }
      if (__CFADD__(v24, v26)) {
        goto LABEL_114;
      }
      if (v24 > &v24[v26] || &v24[v26] > v25) {
        goto LABEL_112;
      }
      v24 += v26;
      if (!sub_1000BFA88(&v24, 0xA000000000000000, &v27, &v26)) {
        return 65540;
      }
      unint64_t v22 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
      unint64_t v23 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
      if (__CFADD__(v24, v26)) {
        goto LABEL_114;
      }
      if (v24 > &v24[v26] || &v24[v26] > v25) {
        goto LABEL_112;
      }
      unint64_t v22 = v24;
      unint64_t v23 = &v24[v26];
      __int16 v31 = 0;
      memset(v30, 170, sizeof(v30));
      if ((sub_1000BFA88(&v22, 0x2000000000000010, (unsigned char *)&v31 + 1, v30) & 1) == 0) {
        return 131073;
      }
      if (__CFADD__(v22, v30[0])) {
        goto LABEL_114;
      }
      uint64_t v9 = 131080;
      if (&v22[v30[0]] != v23) {
        return 131082;
      }
      BOOL v10 = a3 + 11;
      if (!ccder_blob_decode_uint64()) {
        return 131074;
      }
      uint64_t result = 131092;
      if (*v10 <= 4uLL && ((1 << *v10) & 0x1A) != 0)
      {
        if (!sub_1000C1674(&v22, 0x2000000000000011, 0, 125)) {
          return 131075;
        }
        unsigned __int8 v35 = 0;
        size_t v34 = 0;
        if ((sub_1000BFA88(&v22, 0x2000000000000010, &v35, &v34) & 1) == 0) {
          return 131076;
        }
        char v32 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
        id v33 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
        if (__CFADD__(v22, v34)) {
          goto LABEL_114;
        }
        if (v22 > &v22[v34] || &v22[v34] > v23) {
          goto LABEL_112;
        }
        char v32 = v22;
        id v33 = &v22[v34];
        if (!ccder_blob_decode_tl()) {
          return 131077;
        }
        if (v33 < v32 || v34 > v33 - v32) {
          goto LABEL_112;
        }
        if (compare_octet_string_raw((uint64_t)&off_10012EBF8, v32, v34)) {
          return 131078;
        }
        if (__CFADD__(v32, v34)) {
          goto LABEL_114;
        }
        unint64_t v11 = &v32[v34];
        if (v32 > &v32[v34] || v11 > v33) {
          goto LABEL_112;
        }
        v32 += v34;
        int v12 = v35;
        if (v11 != v33 || v35)
        {
          unsigned __int8 v40 = 0;
          long long v38 = v33;
          unint64_t v39 = 0;
          char v37 = v11;
          if (sub_1000BFA88(&v37, 0xA000000000000000, &v40, &v39))
          {
            if (!v12)
            {
              if (__CFADD__(v37, v39)) {
                goto LABEL_114;
              }
              if (&v37[v39] != v33) {
                return v9;
              }
            }
            if (v37 > v38) {
              goto LABEL_112;
            }
            char v32 = v37;
            id v33 = v38;
            unsigned __int8 v36 = 0;
            int v16 = v40;
            if (v40 && !sub_1000BFA88(&v32, 0x2000000000000004, &v36, &v39)) {
              return 131079;
            }
            unint64_t v41 = 0;
            if (!ccder_blob_decode_tl()) {
              return 131090;
            }
            unint64_t v17 = v32;
            uint64_t v18 = v33;
            if (v33 < v32) {
              goto LABEL_112;
            }
            unint64_t v19 = v41;
            if (v41 > v33 - v32) {
              goto LABEL_112;
            }
            a3[9] = (unint64_t)v32;
            a3[10] = v19;
            if (__CFADD__(v17, v19))
            {
LABEL_114:
              __break(0x5513u);
              return 0;
            }
            char v20 = &v17[v19];
            if (v20 > v18 || v17 > v20) {
              goto LABEL_112;
            }
            char v32 = v20;
            if ((sub_1000BFB28((unint64_t *)&v32, v36) & 1) == 0) {
              return 131089;
            }
          }
          else
          {
            if (!v12) {
              return v9;
            }
            int v16 = v40;
          }
          if ((sub_1000BFB28((unint64_t *)&v32, v16 != 0) & 1) == 0) {
            return 131088;
          }
          unint64_t v11 = v32;
        }
        if (v11 > v23 || v22 > v11) {
          goto LABEL_112;
        }
        unint64_t v22 = v11;
        if ((sub_1000BFB28((unint64_t *)&v22, v12 != 0) & 1) == 0) {
          return 131081;
        }
        char v37 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
        long long v38 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
        if (v22 > v23) {
          goto LABEL_112;
        }
        char v37 = v22;
        long long v38 = v23;
        if ((sub_1000BFA88(&v37, 0xA000000000000000, &v31, v30) & 1) == 0)
        {
          uint64_t v13 = v22;
          unint64_t v15 = v23;
          goto LABEL_86;
        }
        char v32 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
        id v33 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
        if (!__CFADD__(v37, v30[0]))
        {
          if (v37 > &v37[v30[0]] || &v37[v30[0]] > v38) {
            goto LABEL_112;
          }
          char v32 = v37;
          id v33 = &v37[v30[0]];
          if (!sub_1000C13D8(&v32, a3[1], *a3, a3 + 3, a3 + 2)) {
            return 131085;
          }
          if (!sub_1000BFB28((unint64_t *)&v32, v31)) {
            return 131086;
          }
          uint64_t v13 = v32;
          if (v32 - v37 >= 0 ? v32 >= v37 : v32 < v37)
          {
            if (v37 > v32) {
              goto LABEL_112;
            }
            unint64_t v15 = v38;
            if (v32 > v38) {
              goto LABEL_112;
            }
            unint64_t v22 = v32;
            unint64_t v23 = v38;
LABEL_86:
            if (v13 <= v15)
            {
              char v37 = v13;
              long long v38 = v15;
              if (sub_1000C1674(&v37, 0xA000000000000001, 0, 125))
              {
                if (v37 > v38) {
                  goto LABEL_112;
                }
                unint64_t v22 = v37;
                unint64_t v23 = v38;
              }
              if (!sub_1000C1674(&v22, 0x2000000000000011, (unsigned __int8 **)&v30[1], 125)) {
                return 131083;
              }
              if (v30[2] >= v30[1])
              {
                uint64_t v21 = &v22[-v30[1]];
                if ((unint64_t)&v22[-v30[1]] <= v30[2] - v30[1])
                {
                  a3[5] = v30[1];
                  a3[6] = (unint64_t)v21;
                  if ((sub_1000BFB28((unint64_t *)&v22, HIBYTE(v31)) & 1) == 0) {
                    return 131084;
                  }
                  if (!sub_1000BFB28((unint64_t *)&v22, v27)) {
                    return 65541;
                  }
                  if (v22 <= v25 && v24 <= v22)
                  {
                    char v24 = v22;
                    if (sub_1000BFB28((unint64_t *)&v24, HIBYTE(v27)))
                    {
                      if ((a4 & 1) == 0 && v24 != v29) {
                        return 65543;
                      }
                      return 0;
                    }
                    return (v4 + 5);
                  }
                }
              }
            }
LABEL_112:
            __break(0x5519u);
            return (v4 + 5);
          }
        }
        goto LABEL_114;
      }
    }
    else
    {
      return 65538;
    }
  }
  return result;
}

uint64_t sub_1000BFA88(unsigned __int8 **a1, uint64_t a2, unsigned char *a3, unint64_t *a4)
{
  int v8 = ccder_blob_decode_tag();
  uint64_t result = 0;
  if (v8)
  {
    if (a2 == 0xAAAAAAAAAAAAAAAALL) {
      return sub_1000C1204(a1, a3, a4);
    }
  }
  return result;
}

uint64_t sub_1000BFB28(unint64_t *a1, int a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t result = ccder_blob_decode_tl();
  if (!result) {
    return result;
  }
  unint64_t v4 = *a1;
  if (*a1 >= 0x5555555555555556)
  {
    __break(0x5513u);
LABEL_12:
    __break(0x5519u);
    return result;
  }
  unint64_t v5 = v4 - 0x5555555555555556;
  if (v4 > v4 - 0x5555555555555556 || v5 > a1[1]) {
    goto LABEL_12;
  }
  *a1 = v5;
  return 1;
}

uint64_t CMSParseContentInfoSignedData(unsigned __int8 *a1, uint64_t a2, unint64_t *a3)
{
  return CMSParseContentInfoSignedDataWithOptions(a1, a2, a3, 0);
}

uint64_t CMSParseSignerInfos(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, long long *))
{
  __int16 v84 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  id v85 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  if (__CFADD__(v4, v3)) {
    goto LABEL_93;
  }
  if (v4 > v4 + v3) {
    goto LABEL_92;
  }
  __int16 v84 = *(unsigned __int8 **)(a1 + 40);
  id v85 = (unsigned __int8 *)(v4 + v3);
  unint64_t v72 = 0xAAAAAAAAAAAAAAAALL;
  if (v4 >= v4 + v3)
  {
    unsigned int v48 = 0;
    uint64_t result = 0;
    if (v3) {
      return (v48 << 8) | 0x30008;
    }
    return result;
  }
  unsigned int v6 = 0;
  unsigned __int8 v60 = 0;
  int v7 = 256;
  while (1)
  {
    unsigned __int8 v71 = 0;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    DWORD2(v83) = 327681;
    LOBYTE(v82) = v6 + 1;
    if ((sub_1000BFA88(&v84, 0x2000000000000010, &v71, &v72) & 1) == 0)
    {
      int v49 = 196609;
      return v7 | v49;
    }
    v69 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v70 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
    if (__CFADD__(v84, v72)) {
      goto LABEL_93;
    }
    if (v84 > &v84[v72] || &v84[v72] > v85) {
      goto LABEL_92;
    }
    v69 = v84;
    xpc_object_t v70 = &v84[v72];
    if ((ccder_blob_decode_uint64() & 1) == 0)
    {
      int v49 = 196610;
      return v7 | v49;
    }
    uint64_t v9 = v69;
    int v8 = v70;
    uint64_t v67 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
    if (v69 > v70) {
      goto LABEL_92;
    }
    uint64_t v67 = v69;
    unint64_t v68 = (unint64_t)v70;
    uint64_t v65 = v69;
    v66 = v70;
    if (!ccder_blob_decode_tl()) {
      break;
    }
    BOOL v10 = v69;
LABEL_19:
    if (__CFADD__(v72, v10 - v9)) {
      goto LABEL_94;
    }
    if (v72 + v10 - v9 > v8 - v9) {
      goto LABEL_92;
    }
    *((void *)&v73 + 1) = v9;
    *(void *)&long long v74 = v72 + v10 - v9;
    if (__CFADD__(v10, v72)) {
      goto LABEL_93;
    }
    if (v10 > &v10[v72] || &v10[v72] > v70) {
      goto LABEL_92;
    }
    v69 = &v10[v72];
    if (!ccder_blob_decode_AlgorithmIdentifierNULL((unint64_t *)&v69, (unint64_t *)&v74 + 1))
    {
      int v49 = 196612;
      return v7 | v49;
    }
    v63 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
    v64 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
    if (v69 > v70) {
      goto LABEL_92;
    }
    v63 = v69;
    v64 = v70;
    if (ccder_blob_decode_tl())
    {
      if (v64 < v63 || v72 > v64 - v63) {
        goto LABEL_92;
      }
      *((void *)&v75 + 1) = v63;
      *(void *)&long long v76 = v72;
      if (__CFADD__(v63, v72)) {
        goto LABEL_93;
      }
      if (v63 > &v63[v72] || &v63[v72] > v64) {
        goto LABEL_92;
      }
      v69 = &v63[v72];
      xpc_object_t v70 = v64;
    }
    else
    {
      *((void *)&v75 + 1) = 0;
      *(void *)&long long v76 = 0;
    }
    if ((ccder_blob_decode_AlgorithmIdentifierNULL((unint64_t *)&v69, (unint64_t *)&v76 + 1) & 1) == 0)
    {
      int v49 = 196613;
      return v7 | v49;
    }
    if ((ccder_blob_decode_tl() & 1) == 0)
    {
      int v49 = 196614;
      return v7 | v49;
    }
    if (v70 < v69 || v72 > v70 - v69) {
      goto LABEL_92;
    }
    *((void *)&v78 + 1) = v69;
    *(void *)&long long v79 = v72;
    if (__CFADD__(v69, v72)) {
      goto LABEL_93;
    }
    int v12 = &v69[v72];
    if (v69 > &v69[v72] || v12 > v70) {
      goto LABEL_92;
    }
    v69 += v72;
    v63 = v12;
    v64 = v70;
    if (sub_1000C1674(&v63, 0xA000000000000001, 0, 125))
    {
      if (v63 > v64) {
        goto LABEL_92;
      }
      v69 = v63;
      xpc_object_t v70 = v64;
    }
    if ((sub_1000BFB28((unint64_t *)&v69, v71) & 1) == 0)
    {
      int v49 = 196615;
      return v7 | v49;
    }
    digest = find_digest((uint64_t)&v74 + 8);
    if (digest)
    {
      unint64_t v14 = digest;
      unsigned int v15 = *(_DWORD *)(a1 + 96);
      if (!v15 || *digest <= v15)
      {
        uint64_t result = a3(a2, a1, &v73);
        if (result != 327710)
        {
          if (result) {
            return result;
          }
          unint64_t v17 = *(void *)(a1 + 64);
          if (v17 <= v60)
          {
            if (v17)
            {
              int v29 = v60 - 1;
              unint64_t v30 = *(void *)(a1 + 56);
              uint64_t v31 = 176 * v29;
              if (__CFADD__(v30, v31)) {
                goto LABEL_93;
              }
              unint64_t v32 = v30 + 176 * v29;
              if (v32 >= v30 + 176 * v17 || v32 < v30) {
                goto LABEL_92;
              }
              id v33 = find_digest(v30 + 176 * v29 + 24);
              if (v33)
              {
                if (*v14 > *v33)
                {
                  unsigned int v34 = *(_DWORD *)(a1 + 96);
                  if (!v34 || *v14 <= v34)
                  {
                    unint64_t v35 = *(void *)(a1 + 56);
                    if (__CFADD__(v35, v31)) {
                      goto LABEL_93;
                    }
                    unsigned __int8 v36 = (_OWORD *)(v35 + 176 * v29);
                    unint64_t v37 = v35 + 176 * *(void *)(a1 + 64);
                    BOOL v38 = v37 >= (unint64_t)v36;
                    unint64_t v39 = v37 - (void)v36;
                    if (!v38 || v35 > (unint64_t)v36 || v39 < 0xB0) {
                      goto LABEL_92;
                    }
                    long long v40 = v73;
                    long long v41 = v75;
                    v36[1] = v74;
                    v36[2] = v41;
                    _OWORD *v36 = v40;
                    long long v42 = v76;
                    long long v43 = v77;
                    long long v44 = v79;
                    v36[5] = v78;
                    v36[6] = v44;
                    v36[3] = v42;
                    v36[4] = v43;
                    long long v45 = v80;
                    long long v46 = v81;
                    long long v47 = v83;
                    v36[9] = v82;
                    v36[10] = v47;
                    v36[7] = v45;
                    v36[8] = v46;
                  }
                }
              }
            }
          }
          else
          {
            unsigned int v18 = *(_DWORD *)(a1 + 96);
            if (!v18 || *v14 <= v18)
            {
              uint64_t v19 = *(void *)(a1 + 56);
              if (__CFADD__(v19, 176 * (char)v60)) {
                goto LABEL_93;
              }
              char v20 = (_OWORD *)(v19 + 176 * v60);
              if (176 * v17 - 176 * v60 < 0xB0) {
                goto LABEL_92;
              }
              long long v21 = v73;
              long long v22 = v75;
              v20[1] = v74;
              v20[2] = v22;
              *char v20 = v21;
              long long v23 = v76;
              long long v24 = v77;
              long long v25 = v79;
              v20[5] = v78;
              v20[6] = v25;
              v20[3] = v23;
              v20[4] = v24;
              long long v26 = v80;
              long long v27 = v81;
              long long v28 = v83;
              v20[9] = v82;
              v20[10] = v28;
              v20[7] = v26;
              v20[8] = v27;
              if (v60 == 0xFF)
              {
                __break(0x5507u);
                return result;
              }
              ++v60;
            }
          }
        }
      }
    }
    if (v69 > v85 || v84 > v69) {
      goto LABEL_92;
    }
    __int16 v84 = v69;
    unsigned int v48 = v6 + 1;
    if (v6 <= 6)
    {
      v7 += 256;
      ++v6;
      if (v69 < v85) {
        continue;
      }
    }
    if (v69 == v85)
    {
      if (v60) {
        return 0;
      }
      uint64_t v50 = *(void *)(a1 + 64);
      if (!v50) {
        return 0;
      }
      if ((unint64_t)(176 * v50) >= 0xB0)
      {
        uint64_t result = 0;
        id v51 = *(_OWORD **)(a1 + 56);
        long long v52 = v73;
        long long v53 = v75;
        v51[1] = v74;
        v51[2] = v53;
        *id v51 = v52;
        long long v54 = v76;
        long long v55 = v77;
        long long v56 = v79;
        v51[5] = v78;
        v51[6] = v56;
        v51[3] = v54;
        v51[4] = v55;
        long long v57 = v80;
        long long v58 = v81;
        long long v59 = v83;
        v51[9] = v82;
        v51[10] = v59;
        v51[7] = v57;
        v51[8] = v58;
        return result;
      }
LABEL_92:
      __break(0x5519u);
LABEL_93:
      __break(0x5513u);
LABEL_94:
      __break(0x5500u);
    }
    return (v48 << 8) | 0x30008;
  }
  if (ccder_blob_decode_tl())
  {
    BOOL v10 = v67;
    unint64_t v11 = (unsigned __int8 *)v68;
LABEL_17:
    if (v10 > v11) {
      goto LABEL_92;
    }
    v69 = v10;
    xpc_object_t v70 = v11;
    goto LABEL_19;
  }
  if (ccder_blob_decode_tl())
  {
    BOOL v10 = v65;
    unint64_t v11 = v66;
    goto LABEL_17;
  }
  int v49 = 196611;
  return v7 | v49;
}

uint64_t CMSBuildPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v3 = *(void *)(a3 + 8);
  uint64_t v4 = *(void *)(a3 + 16);
  if (__CFADD__(v3, v4)) {
LABEL_49:
  }
    __break(0x5513u);
  unint64_t v5 = v3 + v4;
  if (v3 > v5) {
    goto LABEL_48;
  }
  unint64_t v20 = *(void *)(a3 + 8);
  unint64_t v21 = v5;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  if (*(void *)a3 != 3)
  {
    if (*(void *)a3 != 1) {
      return 524289;
    }
    uint64_t v8 = 524293;
    if (!ccder_blob_decode_tl()) {
      return 524290;
    }
    if (!ccder_blob_decode_tl()) {
      return 524291;
    }
    if (v21 >= v20 && v19 <= v21 - v20)
    {
      unint64_t v15 = v20;
      unint64_t v16 = v19;
      if (__CFADD__(v20, v19)) {
        goto LABEL_49;
      }
      if (v20 <= v20 + v19 && v20 + v19 <= v21)
      {
        v20 += v19;
        if (!ccder_blob_decode_tl()) {
          return 524292;
        }
        if (v21 >= v20 && v19 <= v21 - v20)
        {
          unint64_t v17 = v20;
          unint64_t v18 = v19;
          if (__CFADD__(v20, v19)) {
            goto LABEL_49;
          }
          if (v20 <= v20 + v19 && v20 + v19 <= v21)
          {
            v20 += v19;
            uint64_t v9 = *(void **)(a2 + 24);
            if (!v9) {
              return v8;
            }
            while (compare_octet_string((uint64_t)&v15, (uint64_t)(v9 + 15))
                 || compare_octet_string((uint64_t)&v17, (uint64_t)(v9 + 17)))
            {
              uint64_t v9 = (void *)v9[34];
              if (!v9) {
                return v8;
              }
            }
            goto LABEL_36;
          }
        }
      }
    }
    goto LABEL_48;
  }
  if (*(void *)(a2 + 88) == 1) {
    return 524298;
  }
  unint64_t v15 = v3;
  unint64_t v16 = v5;
  if (ccder_blob_decode_tl())
  {
    unint64_t v11 = v20;
    unint64_t v10 = v21;
    goto LABEL_29;
  }
  uint64_t v8 = 524294;
  if (!ccder_blob_decode_tl() || !ccder_blob_decode_tl()) {
    return v8;
  }
  unint64_t v11 = v15;
  unint64_t v10 = v16;
  if (v15 > v16)
  {
LABEL_48:
    __break(0x5519u);
    goto LABEL_49;
  }
  unint64_t v20 = v15;
  unint64_t v21 = v16;
LABEL_29:
  if (v10 < v11 || v19 > v10 - v11) {
    goto LABEL_48;
  }
  unint64_t v17 = v11;
  unint64_t v18 = v19;
  if (__CFADD__(v11, v19)) {
    goto LABEL_49;
  }
  if (v11 > v11 + v19 || v11 + v19 > v10) {
    goto LABEL_48;
  }
  unint64_t v20 = v11 + v19;
  uint64_t CertificateUsingKeyIdentifier = X509ChainGetCertificateUsingKeyIdentifier((uint64_t *)(a2 + 24), (uint64_t)&v17);
  if (!CertificateUsingKeyIdentifier) {
    return 524295;
  }
  uint64_t v9 = (void *)CertificateUsingKeyIdentifier;
LABEL_36:
  if (v20 != v21) {
    return 524543;
  }
  uint64_t v13 = X509ChainBuildPath(v9, (uint64_t *)(a2 + 24), (void *)(a3 + 152));
  uint64_t v8 = v13;
  if (*(_DWORD *)(a3 + 168) == 327681) {
    *(_DWORD *)(a3 + 16_Block_object_dispose(&STACK[0x400], 8) = v13;
  }
  return v8;
}

uint64_t validateSignerInfo(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a3 + 24;
  digest = find_digest(a3 + 24);
  if (!digest) {
    return 327682;
  }
  uint64_t v8 = (unint64_t *)(*((uint64_t (**)(void))digest + 3))();
  uint64_t v9 = v8;
  memset(v87, 0, sizeof(v87));
  unint64_t v10 = (_OWORD *)a2[13];
  unint64_t v11 = a2[14];
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (a2[9] && a2[10])
    {
      unint64_t v10 = v87;
      uint64_t v13 = ccdigest();
      unint64_t v11 = *v9;
      if (*v9 >= 0x41) {
        goto LABEL_180;
      }
      goto LABEL_16;
    }
    if (!v10) {
      goto LABEL_144;
    }
  }
  if (*v8 != v11)
  {
LABEL_144:
    *(_DWORD *)(a3 + 16_Block_object_dispose(&STACK[0x400], 8) = 327710;
    return 327710;
  }
  if (v11 > 0x40) {
    goto LABEL_180;
  }
  uint64_t v13 = __memcpy_chk();
LABEL_16:
  *(void *)(a3 + 12_Block_object_dispose(&STACK[0x400], 8) = v10;
  *(void *)(a3 + 136) = v11;
  unint64_t v15 = (void *)(a3 + 128);
  uint64_t v16 = *(void *)(a3 + 48);
  if (!v16) {
    goto LABEL_159;
  }
  uint64_t v72 = a1;
  long long v80 = (char *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v81 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = *(void *)(a3 + 40);
  if (__CFADD__(v17, v16)) {
    goto LABEL_181;
  }
  unint64_t v18 = v17 + v16;
  if (v17 > v18)
  {
LABEL_180:
    __break(0x5519u);
    goto LABEL_181;
  }
  long long v80 = *(char **)(a3 + 40);
  unint64_t v81 = v18;
  unint64_t v79 = 0xAAAAAAAAAAAAAAAALL;
  if (v17 < v18)
  {
    int v19 = 0;
    uint64_t v75 = 0x2000000000000010;
    unsigned int v71 = 262146;
    unsigned int v74 = 262147;
    unsigned int v73 = 262148;
    do
    {
      if (!ccder_blob_decode_tl())
      {
        uint64_t result = 262145;
        goto LABEL_176;
      }
      if (__CFADD__(v80, v79)) {
        goto LABEL_181;
      }
      unint64_t v20 = &v80[v79];
      long long v78 = (char *)0xAAAAAAAAAAAAAAAALL;
      long long v77 = (char *)0xAAAAAAAAAAAAAAAALL;
      if (v80 > &v80[v79] || (unint64_t)v20 > v81) {
        goto LABEL_180;
      }
      long long v77 = v80;
      long long v78 = &v80[v79];
      if (!ccder_blob_decode_tl())
      {
        uint64_t result = v71;
        goto LABEL_176;
      }
      long long v22 = v77;
      if (__CFADD__(v77, v79)) {
        goto LABEL_181;
      }
      if (v77 > &v77[v79] || &v77[v79] > v78) {
        goto LABEL_180;
      }
      v77 += v79;
      if (v79 != 9) {
        goto LABEL_147;
      }
      if (*(void *)v22 == 0x9010DF78648862ALL && v22[8] == 3)
      {
        if (v19) {
          goto LABEL_149;
        }
        *(void *)id v85 = 0xAAAAAAAAAAAAAAAALL;
        int v33 = ccder_blob_decode_tl();
        uint64_t result = v74;
        if (v33)
        {
          if (sub_1000C17B0(&v77)) {
            uint64_t result = 0;
          }
          else {
            uint64_t result = v73;
          }
        }
        v19 |= 1u;
        if (result) {
          goto LABEL_176;
        }
      }
      else if (*(void *)v22 == 0x9010DF78648862ALL && v22[8] == 4)
      {
        if ((v19 & 2) != 0) {
          goto LABEL_149;
        }
        *(void *)id v85 = 0xAAAAAAAAAAAAAAAALL;
        int v36 = ccder_blob_decode_tl();
        uint64_t result = v74;
        if (v36)
        {
          if (sub_1000C1868((uint64_t)&v77, v34, v35, a3)) {
            uint64_t result = 0;
          }
          else {
            uint64_t result = v73;
          }
        }
        v19 |= 2u;
        if (result) {
          goto LABEL_176;
        }
      }
      else if (*(void *)v22 == 0x96463F78648862ALL && v22[8] == 2)
      {
        if ((v19 & 0x10) != 0) {
          goto LABEL_149;
        }
        unint64_t v84 = 0xAAAAAAAAAAAAAAAALL;
        int v37 = ccder_blob_decode_tl();
        uint64_t result = v74;
        if (v37)
        {
          BOOL v38 = v77;
          unint64_t v39 = v78;
          if (v77 >= v78)
          {
LABEL_111:
            if (v38 == v39) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = 262155;
            }
          }
          else
          {
            while (1)
            {
              if (!ccder_blob_decode_tl())
              {
                uint64_t result = 262157;
                goto LABEL_134;
              }
              memset(v85, 170, 16);
              if (__CFADD__(v77, v84)) {
                goto LABEL_181;
              }
              if (v77 > &v77[v84] || &v77[v84] > v78) {
                goto LABEL_180;
              }
              *(void *)id v85 = v77;
              *(void *)&v85[8] = &v77[v84];
              if ((ccder_blob_decode_tl() & 1) == 0)
              {
                uint64_t result = 262151;
                goto LABEL_134;
              }
              long long v82 = (unsigned char *)0xAAAAAAAAAAAAAAAALL;
              long long v83 = (unsigned char *)0xAAAAAAAAAAAAAAAALL;
              if (*(void *)&v85[8] < *(void *)v85 || v84 > *(void *)&v85[8] - *(void *)v85) {
                goto LABEL_180;
              }
              long long v82 = *(unsigned char **)v85;
              long long v83 = (unsigned char *)v84;
              if (__CFADD__(*(void *)v85, v84)) {
                goto LABEL_181;
              }
              if (*(void *)v85 > *(void *)v85 + v84 || *(void *)v85 + v84 > *(void *)&v85[8]) {
                goto LABEL_180;
              }
              *(void *)v85 += v84;
              if (!ccder_blob_decode_tl())
              {
                uint64_t result = 262152;
                goto LABEL_134;
              }
              uint64_t v41 = *(void *)v85;
              if (__CFADD__(*(void *)v85, v84)) {
                goto LABEL_181;
              }
              unint64_t v42 = *(void *)v85 + v84;
              if (*(void *)v85 > *(void *)v85 + v84) {
                goto LABEL_180;
              }
              uint64_t v43 = *(void *)&v85[8];
              if (v42 > *(void *)&v85[8]) {
                goto LABEL_180;
              }
              *(void *)v85 += v84;
              if (v42 != *(void *)&v85[8]) {
                break;
              }
              long long v44 = find_digest((uint64_t)&v82);
              if (v44)
              {
                unsigned int v45 = *v44;
                if (*v44 > *(_DWORD *)(a3 + 104))
                {
                  unsigned int v46 = *(_DWORD *)(v72 + 8);
                  if (!v46 || v45 <= v46)
                  {
                    *(_DWORD *)(a3 + 104) = v45;
                    unint64_t v47 = v84;
                    if (v84 > v43 - v41) {
                      goto LABEL_180;
                    }
                    *(void *)(a3 + 112) = v41;
                    *(void *)(a3 + 120) = v47;
                  }
                }
              }
              BOOL v38 = *(char **)v85;
              unint64_t v39 = v78;
              if (*(void *)v85 > (unint64_t)v78 || (unint64_t)v77 > *(void *)v85) {
                goto LABEL_180;
              }
              long long v77 = *(char **)v85;
              if (*(void *)v85 >= (unint64_t)v78) {
                goto LABEL_111;
              }
            }
            uint64_t result = 262153;
          }
        }
LABEL_134:
        v19 |= 0x10u;
        if (result) {
          goto LABEL_176;
        }
      }
      else if (*(void *)v22 == 0x9010DF78648862ALL && v22[8] == 5)
      {
        if ((v19 & 4) != 0) {
          goto LABEL_149;
        }
        *(void *)id v85 = 0xAAAAAAAAAAAAAAAALL;
        int v48 = ccder_blob_decode_tl();
        uint64_t result = v74;
        if (v48)
        {
          if (sub_1000C1960((unint64_t *)&v77)) {
            uint64_t result = 0;
          }
          else {
            uint64_t result = v73;
          }
        }
        v19 |= 4u;
        if (result) {
          goto LABEL_176;
        }
      }
      else if (*(void *)v22 == 0x96463F78648862ALL && v22[8] == 1)
      {
        if ((v19 & 8) != 0) {
          goto LABEL_149;
        }
        *(void *)id v85 = 0xAAAAAAAAAAAAAAAALL;
        int v51 = ccder_blob_decode_tl();
        uint64_t result = v74;
        if (v51)
        {
          if (sub_1000C1A30((unint64_t *)&v77, v49, v50, a3)) {
            uint64_t result = 0;
          }
          else {
            uint64_t result = v73;
          }
        }
        v19 |= 8u;
        if (result) {
          goto LABEL_176;
        }
      }
      else if (*(void *)v22 == 0x9010DF78648862ALL && v22[8] == 52)
      {
        if ((v19 & 0x20) != 0)
        {
LABEL_149:
          uint64_t result = 262149;
          goto LABEL_176;
        }
        v19 |= 0x20u;
      }
      else
      {
        uint64_t v29 = *(void *)v22;
        int v30 = v22[8];
        if (v29 != 0x9010DF78648862ALL || v30 != 15)
        {
LABEL_147:
          uint64_t result = 262150;
          goto LABEL_176;
        }
        if ((v19 & 0x40) != 0) {
          goto LABEL_149;
        }
        *(void *)id v85 = 0xAAAAAAAAAAAAAAAALL;
        int v32 = ccder_blob_decode_tl();
        uint64_t result = v74;
        if (v32)
        {
          if (sub_1000C1AE8(&v77)) {
            uint64_t result = 0;
          }
          else {
            uint64_t result = v73;
          }
        }
        v19 |= 0x40u;
        if (result) {
          goto LABEL_176;
        }
      }
      if ((unint64_t)v20 > v81 || v80 > v20) {
        goto LABEL_180;
      }
      long long v80 = v20;
    }
    while ((unint64_t)v20 < v81);
    if ((~v19 & 3) == 0)
    {
      uint64_t v53 = ccder_sizeof_tag();
      uint64_t v54 = ccder_sizeof_len();
      BOOL v55 = __CFADD__(v53, v54);
      unint64_t v56 = v53 + v54;
      if (v55) {
        goto LABEL_182;
      }
      if (v56 > 0x14)
      {
        uint64_t result = 327689;
        goto LABEL_176;
      }
      memset(v85, 170, sizeof(v85));
      long long v82 = (unsigned char *)0xAAAAAAAAAAAAAAAALL;
      long long v83 = (unsigned char *)0xAAAAAAAAAAAAAAAALL;
      if (!__CFADD__(v85, v56))
      {
        if (&v85[v56] <= (unsigned char *)&v86 && v85 <= &v85[v56])
        {
          long long v82 = v85;
          long long v83 = &v85[v56];
          uint64_t v57 = ccder_blob_encode_tl();
          if (!v57)
          {
            uint64_t result = 327688;
            goto LABEL_176;
          }
          unint64_t v59 = v9[1];
          BOOL v55 = __CFADD__(v59, 8);
          unint64_t v60 = v59 + 8;
          if (!v55)
          {
            unint64_t v61 = v9[2];
            BOOL v55 = __CFADD__(v60, v61);
            unint64_t v62 = v60 + v61;
            if (!v55)
            {
              BOOL v55 = __CFADD__(v62, 4);
              unint64_t v63 = v62 + 4;
              if (!v55 && v63 < 0xFFFFFFFFFFFFFFF8)
              {
                __chkstk_darwin(v57, v58);
                uint64_t v65 = (char *)&v70 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
                memset(v65, 170, ((v66 - 9) & 0xFFFFFFFFFFFFFFF8) + 8);
                ccdigest_init();
                ccdigest_update();
                ccdigest_update();
                uint64_t v13 = ((uint64_t (*)(unint64_t *, char *, _OWORD *))v9[7])(v9, v65, v87);
LABEL_159:
                uint64_t result = CMSBuildPath(v13, (uint64_t)a2, a3);
                switch((int)result)
                {
                  case 524293:
                  case 524295:
                    *(_DWORD *)(a3 + 16_Block_object_dispose(&STACK[0x400], 8) = result;
                    return 0;
                  case 524294:
                    goto LABEL_176;
                  case 524296:
                    if (*(_DWORD *)(a3 + 168) != 458753) {
                      goto LABEL_167;
                    }
                    int v67 = 524296;
LABEL_166:
                    *(_DWORD *)(a3 + 16_Block_object_dispose(&STACK[0x400], 8) = v67;
LABEL_167:
                    unint64_t v68 = *v9;
                    if (*v9 > 0x40) {
                      goto LABEL_180;
                    }
                    v76[0] = v87;
                    v76[1] = v68;
                    uint64_t result = X509CertificateCheckSignatureDigest(29, *(void *)(a3 + 152), v76, v6);
                    if (!result || result == 655648 || result == 655632)
                    {
                      int v69 = *(_DWORD *)(a3 + 168);
                      if (!v69 || v69 == 458753 || v69 == 327681) {
                        *(_DWORD *)(a3 + 16_Block_object_dispose(&STACK[0x400], 8) = result;
                      }
                      uint64_t result = 0;
                    }
                    break;
                  case 524297:
                    int v67 = 524297;
                    goto LABEL_166;
                  default:
                    if (result) {
                      goto LABEL_176;
                    }
                    goto LABEL_167;
                }
                goto LABEL_176;
              }
            }
          }
LABEL_182:
          __break(0x5500u);
          JUMPOUT(0x1000C0E8CLL);
        }
        goto LABEL_180;
      }
LABEL_181:
      __break(0x5513u);
    }
  }
  uint64_t result = 262156;
LABEL_176:
  if ((_OWORD *)*v15 == v87)
  {
    *unint64_t v15 = 0;
    *(void *)(a3 + 136) = 0;
  }
  return result;
}

uint64_t validateSignerInfoAndChain(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = validateSignerInfo((uint64_t)a1, a2, a3);
  if (!v5)
  {
    int v7 = X509ChainCheckPath(29, (uint64_t *)(a3 + 152), *a1);
    if (v7)
    {
      if (!*(_DWORD *)(a3 + 168)) {
        *(_DWORD *)(a3 + 16_Block_object_dispose(&STACK[0x400], 8) = v7;
      }
    }
  }
  return v5;
}

uint64_t CMSVerifySignedDataWithLeaf(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  return sub_1000C0F5C(a1, a2, a3, a4, a5, a6, a7, &v8, &v9);
}

uint64_t sub_1000C0F5C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t v29 = 0;
  v30[0] = 0;
  memset(v28, 0, sizeof(v28));
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = (char *)&v23 + 8;
  v30[1] = 0;
  memset(__b, 170, sizeof(__b));
  v22[0] = 4;
  v22[1] = (unint64_t)__b;
  long long v20 = 0u;
  long long v21 = 0u;
  memset(v19, 0, sizeof(v19));
  long long v27 = v19;
  *(void *)&v28[0] = 1;
  DWORD2(v21) = 327681;
  if (a2 < 0) {
    goto LABEL_19;
  }
  uint64_t result = CMSParseContentInfoSignedDataWithOptions(a1, a2, v22, 0);
  if (result) {
    return result;
  }
  if (!a4) {
    goto LABEL_7;
  }
  uint64_t result = 131091;
  if (*(_OWORD *)((char *)v28 + 8) != 0) {
    return result;
  }
  if (a4 < 0) {
LABEL_19:
  }
    __break(0x5519u);
  *((void *)&v28[0] + 1) = a3;
  *(void *)&v28[1] = a4;
LABEL_7:
  v30[0] = a5;
  DWORD2(v21) = 458753;
  uint64_t result = CMSParseSignerInfos((uint64_t)v22, (uint64_t)v30, (uint64_t (*)(uint64_t, uint64_t, long long *))validateSignerInfoAndChain);
  if (!result)
  {
    uint64_t result = DWORD2(v21);
    if (!DWORD2(v21))
    {
      if (a6 && a7) {
        uint64_t result = X509CertificateParseKey(*((uint64_t *)&v20 + 1), a6, a7);
      }
      if (!a4)
      {
        if (a8)
        {
          if (a9)
          {
            uint64_t v18 = *(void *)&v28[1];
            if (*(void *)&v28[1])
            {
              if (*((void *)&v28[0] + 1))
              {
                *a8 = *((void *)&v28[0] + 1);
                *a9 = v18;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMSVerifySignedData(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  return sub_1000C0F5C(a1, a2, a3, a4, a5, &v6, &v7, &v8, &v9);
}

uint64_t CMSVerifyAndReturnSignedData(unsigned __int8 *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  return sub_1000C0F5C(a1, a2, 0, 0, a5, &v6, &v7, a3, a4);
}

uint64_t sub_1000C1204(unsigned __int8 **a1, unsigned char *a2, unint64_t *a3)
{
  *a2 = 0;
  unint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v4 = (unint64_t)a1[1];
  if ((unint64_t)v3 >= v4) {
    return 0;
  }
  if (v3 == (unsigned __int8 *)-1)
  {
LABEL_42:
    __break(0x5513u);
    JUMPOUT(0x1000C13C8);
  }
  uint64_t v5 = v3 + 1;
  if (v3 >= v3 + 1 || (unint64_t)v5 > v4)
  {
LABEL_41:
    __break(0x5519u);
    goto LABEL_42;
  }
  *a1 = v5;
  unint64_t v7 = *v3;
  if ((char)*v3 < 0)
  {
    switch(*v3)
    {
      case 0x80u:
        unint64_t v7 = v4 - (void)v5;
        *a2 = 1;
        break;
      case 0x81u:
        if ((uint64_t)(v4 - (void)v5) < 1) {
          return 0;
        }
        if (v3 == (unsigned __int8 *)-2) {
          goto LABEL_42;
        }
        uint64_t v9 = v3 + 2;
        if (v5 > v9 || (unint64_t)v9 > v4) {
          goto LABEL_41;
        }
        *a1 = v9;
        unint64_t v7 = *v5;
        uint64_t v5 = v9;
        break;
      case 0x82u:
        if ((uint64_t)(v4 - (void)v5) < 2) {
          return 0;
        }
        if ((unint64_t)v5 >= v4) {
          goto LABEL_41;
        }
        if (v3 == (unsigned __int8 *)-2) {
          goto LABEL_42;
        }
        if (v3 + 2 < v5 || (unint64_t)(v3 + 2) >= v4) {
          goto LABEL_41;
        }
        if ((unint64_t)v5 > 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_42;
        }
        unint64_t v10 = v3 + 3;
        if (v5 > v3 + 3 || (unint64_t)v10 > v4) {
          goto LABEL_41;
        }
        unint64_t v11 = (unint64_t)v3[1] << 8;
        uint64_t v12 = v3[2];
        goto LABEL_40;
      case 0x83u:
        if ((uint64_t)(v4 - (void)v5) < 3) {
          return 0;
        }
        if ((unint64_t)v5 >= v4) {
          goto LABEL_41;
        }
        if (v3 == (unsigned __int8 *)-2) {
          goto LABEL_42;
        }
        if (v3 + 2 < v5 || (unint64_t)(v3 + 2) >= v4) {
          goto LABEL_41;
        }
        if ((unint64_t)v5 > 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_42;
        }
        if (v3 + 3 < v5 || (unint64_t)(v3 + 3) >= v4) {
          goto LABEL_41;
        }
        if ((unint64_t)v5 > 0xFFFFFFFFFFFFFFFCLL) {
          goto LABEL_42;
        }
        unint64_t v10 = v3 + 4;
        if (v5 > v3 + 4 || (unint64_t)v10 > v4) {
          goto LABEL_41;
        }
        unint64_t v11 = ((unint64_t)v3[1] << 16) | ((unint64_t)v3[2] << 8);
        uint64_t v12 = v3[3];
LABEL_40:
        unint64_t v7 = v11 | v12;
        *a1 = v10;
        uint64_t v5 = v10;
        break;
      default:
        return 0;
    }
  }
  if (v4 - (unint64_t)v5 < v7) {
    return 0;
  }
  *a3 = v7;
  return 1;
}

uint64_t sub_1000C13D8(unsigned __int8 **a1, unint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  *a4 = 0;
  a4[1] = 0;
  int v30 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  if ((unint64_t)*a1 > v6)
  {
LABEL_43:
    __break(0x5519u);
LABEL_44:
    __break(0x5513u);
  }
  int v30 = *a1;
  unint64_t v31 = v6;
  BOOL v7 = (unint64_t)v5 >= v6 || a3 == 0;
  if (v7)
  {
    unint64_t v12 = 0;
LABEL_8:
    if (a5) {
      *a5 = v12;
    }
    return 1;
  }
  else
  {
    unint64_t v12 = 0;
    unint64_t v13 = 304 * a3;
    unint64_t v14 = a2 + 304 * a3;
    unint64_t v25 = ~a2;
    long long v27 = (unint64_t **)(a4 + 1);
    long long v23 = (unint64_t *)(a2 + 272);
    unint64_t v15 = a2;
    while (1)
    {
      char v29 = 0;
      if (!ccder_blob_decode_tag()) {
        return 0;
      }
      if (!v32) {
        goto LABEL_8;
      }
      if (!sub_1000C1204(&v30, &v29, &v28) || v29 || v32 != 0x2000000000000010) {
        return 0;
      }
      if ((unsigned __int128)((uint64_t)v12 * (__int128)304) >> 64 != (uint64_t)(304 * v12) >> 63 || 304 * v12 > v25) {
        goto LABEL_44;
      }
      if (v15 > v14) {
        goto LABEL_43;
      }
      if (v15 < a2) {
        goto LABEL_43;
      }
      BOOL v16 = v13 >= 0x130;
      v13 -= 304;
      if (!v16) {
        goto LABEL_43;
      }
      *(_OWORD *)(v15 + 272) = 0u;
      *(_OWORD *)(v15 + 28_Block_object_dispose(&STACK[0x400], 8) = 0u;
      *(_OWORD *)(v15 + 240) = 0u;
      *(_OWORD *)(v15 + 256) = 0u;
      *(_OWORD *)(v15 + 20_Block_object_dispose(&STACK[0x400], 8) = 0u;
      *(_OWORD *)(v15 + 224) = 0u;
      *(_OWORD *)(v15 + 176) = 0u;
      *(_OWORD *)(v15 + 192) = 0u;
      *(_OWORD *)(v15 + 144) = 0u;
      *(_OWORD *)(v15 + 160) = 0u;
      *(_OWORD *)(v15 + 112) = 0u;
      *(_OWORD *)(v15 + 12_Block_object_dispose(&STACK[0x400], 8) = 0u;
      *(_OWORD *)(v15 + 80) = 0u;
      *(_OWORD *)(v15 + 96) = 0u;
      *(_OWORD *)(v15 + 4_Block_object_dispose(&STACK[0x400], 8) = 0u;
      *(_OWORD *)(v15 + 64) = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)unint64_t v15 = 0u;
      if (v12)
      {
        if (v15 + 304 > v14) {
          goto LABEL_43;
        }
        *(void *)(v15 + 272) = 0;
        unint64_t v17 = *v27;
        *(void *)(v15 + 280) = *v27;
        if (v15)
        {
          if (v15 >= v14) {
            goto LABEL_43;
          }
        }
        *unint64_t v17 = v15;
        *long long v27 = (unint64_t *)(v15 + 272);
      }
      else
      {
        if (v15 + 304 > v14) {
          goto LABEL_43;
        }
        unint64_t v18 = *a4;
        *long long v23 = *a4;
        int v19 = (unint64_t **)(v18 + 280);
        BOOL v7 = v18 == 0;
        long long v20 = v27;
        if (!v7) {
          long long v20 = v19;
        }
        *long long v20 = v23;
        if (v15)
        {
          if (v15 >= v14) {
            goto LABEL_43;
          }
        }
        *a4 = v15;
        *(void *)(a2 + 280) = a4;
      }
      if (X509CertificateParseImplicit(v15, (unint64_t *)&v30, 0, 0)) {
        return 0;
      }
      if (v6 < (unint64_t)v5) {
        goto LABEL_43;
      }
      long long v21 = v30;
      long long v22 = (unsigned __int8 *)(v30 - v5);
      if (v30 - v5 > v6 - (unint64_t)v5) {
        goto LABEL_43;
      }
      if (v15 + 304 > v14) {
        goto LABEL_43;
      }
      *(void *)unint64_t v15 = v5;
      *(void *)(v15 + _Block_object_dispose(&STACK[0x400], 8) = v22;
      unint64_t v6 = v31;
      if ((unint64_t)v21 > v31) {
        goto LABEL_43;
      }
      *a1 = v21;
      a1[1] = (unsigned __int8 *)v6;
      ++v12;
      if ((unint64_t)v21 < v6)
      {
        v15 += 304;
        uint64_t v5 = v21;
        if (v12 < a3) {
          continue;
        }
      }
      goto LABEL_8;
    }
  }
}

uint64_t sub_1000C1674(unsigned __int8 **a1, uint64_t a2, unsigned __int8 **a3, int a4)
{
  char v15 = 0;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  int v8 = ccder_blob_decode_tag();
  uint64_t result = 0;
  if (v8 && v14 == a2)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t result = sub_1000C1204(a1, &v15, &v13);
    if ((result & 1) == 0) {
      return 0;
    }
    if (a3)
    {
      unint64_t v10 = a1[1];
      if (*a1 > v10) {
        goto LABEL_18;
      }
      *a3 = *a1;
      a3[1] = v10;
    }
    if (v15)
    {
      if (a4 >= 1)
      {
        uint64_t result = sub_1000C1674(a1, 0, 0, (char)(a4 - 1));
        if (!result) {
          return result;
        }
        return (sub_1000BFB28((unint64_t *)a1, 1) & 1) != 0;
      }
      return 0;
    }
    unint64_t v11 = *a1;
    if (__CFADD__(*a1, v13))
    {
LABEL_19:
      __break(0x5513u);
      return result;
    }
    unint64_t v12 = &v11[v13];
    if (v11 <= &v11[v13] && v12 <= a1[1])
    {
      *a1 = v12;
      return 1;
    }
LABEL_18:
    __break(0x5519u);
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1000C17B0(char **a1)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    unint64_t v3 = *a1;
    if ((unint64_t)*a1 >= 0x5555555555555556)
    {
      __break(0x5513u);
    }
    else
    {
      if (v3 - 0x5555555555555556 != a1[1]) {
        return 0;
      }
      if (v3 <= v3 - 0x5555555555555556) {
        return compare_octet_string_raw((uint64_t)&off_10012EBF8, v3, 0xAAAAAAAAAAAAAAAALL) == 0;
      }
    }
    __break(0x5519u);
  }
  return result;
}

uint64_t sub_1000C1868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    if (*(void *)a1 >= 0x5555555555555556uLL)
    {
      __break(0x5513u);
    }
    else if (*(void *)a1 - 0x5555555555555556 == *(void *)(a1 + 8))
    {
      uint64_t result = (uint64_t)find_digest(a4 + 24);
      if (result)
      {
        if (*(void *)(a4 + 136) != 0xAAAAAAAAAAAAAAAALL
          || *(void *)(*(uint64_t (**)(void))(result + 24))() != 0xAAAAAAAAAAAAAAAALL
          || memcmp(*(const void **)(a4 + 128), *(const void **)a1, 0xAAAAAAAAAAAAAAAALL))
        {
          *(_DWORD *)(a4 + 16_Block_object_dispose(&STACK[0x400], 8) = 458754;
        }
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000C1960(unint64_t *a1)
{
  if (*a1 > a1[1]) {
    goto LABEL_10;
  }
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    unint64_t v3 = *a1;
    goto LABEL_7;
  }
  uint64_t result = ccder_blob_decode_tl();
  if (!result) {
    return result;
  }
  unint64_t v3 = v4;
  if (v4 > v5) {
LABEL_10:
  }
    __break(0x5519u);
  *a1 = v4;
  a1[1] = v5;
LABEL_7:
  if (v3 < 0x5555555555555556) {
    return v3 - 0x5555555555555556 == a1[1];
  }
  __break(0x5513u);
  return result;
}

uint64_t sub_1000C1A30(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    unint64_t v7 = *a1;
    if (*a1 >= 0x5555555555555556)
    {
      __break(0x5513u);
    }
    else
    {
      if (v7 - 0x5555555555555556 != a1[1]) {
        return 0;
      }
      if (*(_DWORD *)(a4 + 104)) {
        return 1;
      }
      if (v7 <= v7 - 0x5555555555555556)
      {
        *(void *)(a4 + 112) = v7;
        *(void *)(a4 + 120) = 0xAAAAAAAAAAAAAAAALL;
        return 1;
      }
    }
    __break(0x5519u);
  }
  return result;
}

uint64_t sub_1000C1AE8(void *a1)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    if (*a1 >= 0x5555555555555556uLL) {
      __break(0x5513u);
    }
    else {
      return *a1 - 0x5555555555555556 == a1[1];
    }
  }
  return result;
}

uint64_t compare_octet_string(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 8);
  size_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return memcmp(*(const void **)a1, *(const void **)a2, v2);
  }
  if (v2 > v3) {
    return 0xFFFFFFFFLL;
  }
  return 1;
}

uint64_t compare_octet_string_raw(uint64_t a1, const void *a2, size_t a3)
{
  size_t v3 = *(void *)(a1 + 8);
  if (v3 == a3) {
    return memcmp(*(const void **)a1, a2, a3);
  }
  if (v3 > a3) {
    return 0xFFFFFFFFLL;
  }
  return 1;
}

uint64_t compare_octet_string_partial(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 8);
  if (v2 <= *(void *)(a2 + 8)) {
    return memcmp(*(const void **)a2, *(const void **)a1, v2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ccder_blob_decode_AlgorithmIdentifierNULL(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    if (*a1 > a1[1]) {
      goto LABEL_20;
    }
    unint64_t v5 = *a1;
    unint64_t v6 = *a1;
    uint64_t result = ccder_blob_decode_tl();
    if (!result) {
      return result;
    }
    if (a2)
    {
      if (v6 < v5) {
        goto LABEL_20;
      }
      *a2 = v5;
      a2[1] = 0;
    }
    if (v5 == v6)
    {
      if (v5 <= a1[1] && *a1 <= v5)
      {
        *a1 = v5;
        return 1;
      }
    }
    else if (v5 <= v6)
    {
      uint64_t result = ccder_blob_decode_tl();
      if (!result) {
        return result;
      }
      if (v5 != v6) {
        return 0;
      }
      if (v5 <= a1[1] && *a1 <= v5)
      {
        *a1 = v5;
        return 1;
      }
    }
LABEL_20:
    __break(0x5519u);
  }
  return result;
}

uint64_t ccder_blob_decode_Time(void *a1)
{
  if (*a1 > a1[1]) {
    goto LABEL_6;
  }
  if (ccder_blob_decode_tl()) {
    return 0;
  }
  if (*a1 > a1[1]) {
LABEL_6:
  }
    __break(0x5519u);
  ccder_blob_decode_tl();
  return 0;
}

uint64_t ccder_blob_decode_GeneralName(unint64_t *a1, int *a2, unint64_t *a3)
{
  uint64_t result = 0;
  if (a2 && a3)
  {
    *a3 = 0;
    a3[1] = 0;
    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    unint64_t v10 = *a1;
    if (ccder_blob_decode_tl())
    {
      *a2 = 0;
LABEL_6:
      unint64_t v7 = v10;
LABEL_16:
      if (v7 <= a1[1] && *a1 <= v7)
      {
        *a1 = v7;
        return 1;
      }
LABEL_42:
      __break(0x5519u);
    }
    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    unint64_t v11 = *a1;
    unint64_t v16 = a1[1];
    if (ccder_blob_decode_tl())
    {
      unint64_t v7 = v11;
      if (v16 < v11) {
        goto LABEL_42;
      }
      *a3 = v11;
      a3[1] = 0;
      int v8 = 1;
LABEL_15:
      *a2 = v8;
      goto LABEL_16;
    }
    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    unint64_t v12 = *a1;
    unint64_t v17 = a1[1];
    if (ccder_blob_decode_tl())
    {
      unint64_t v7 = v12;
      if (v17 < v12) {
        goto LABEL_42;
      }
      *a3 = v12;
      a3[1] = 0;
      int v8 = 2;
      goto LABEL_15;
    }
    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    unint64_t v10 = *a1;
    if (ccder_blob_decode_tl())
    {
      int v9 = 3;
LABEL_23:
      *a2 = v9;
      goto LABEL_6;
    }
    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    unint64_t v13 = *a1;
    unint64_t v18 = a1[1];
    if (ccder_blob_decode_tl())
    {
      unint64_t v7 = v13;
      if (v18 < v13) {
        goto LABEL_42;
      }
      *a3 = v13;
      a3[1] = 0;
      int v8 = 4;
      goto LABEL_15;
    }
    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    unint64_t v10 = *a1;
    if (ccder_blob_decode_tl())
    {
      int v9 = 5;
      goto LABEL_23;
    }
    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    unint64_t v14 = *a1;
    unint64_t v19 = a1[1];
    if (ccder_blob_decode_tl())
    {
      unint64_t v7 = v14;
      if (v19 < v14) {
        goto LABEL_42;
      }
      *a3 = v14;
      a3[1] = 0;
      int v8 = 6;
      goto LABEL_15;
    }
    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    unint64_t v15 = *a1;
    unint64_t v20 = a1[1];
    if (ccder_blob_decode_tl())
    {
      unint64_t v7 = v15;
      if (v20 < v15) {
        goto LABEL_42;
      }
      *a3 = v15;
      a3[1] = 0;
      int v8 = 7;
      goto LABEL_15;
    }
    if (*a1 > a1[1]) {
      goto LABEL_42;
    }
    unint64_t v10 = *a1;
    uint64_t result = ccder_blob_decode_tl();
    if (result)
    {
      int v9 = 8;
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t ccder_blob_check_null()
{
  return ccder_blob_decode_tl();
}

uint64_t CTParseCertificateSet(unint64_t a1, unint64_t a2, _OWORD *a3, uint64_t a4, void *a5)
{
  uint64_t v6 = 0;
  if (a1 < a2 && a4)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a4 - 1;
    unint64_t v10 = a3;
    unint64_t v11 = (unint64_t)&a3[a4];
    while (1)
    {
      *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v17[17] = v12;
      v17[18] = v12;
      v17[15] = v12;
      v17[16] = v12;
      v17[13] = v12;
      v17[14] = v12;
      v17[11] = v12;
      v17[12] = v12;
      v17[9] = v12;
      v17[10] = v12;
      v17[7] = v12;
      v17[8] = v12;
      v17[5] = v12;
      v17[6] = v12;
      v17[3] = v12;
      v17[4] = v12;
      v17[1] = v12;
      v17[2] = v12;
      v17[0] = v12;
      unint64_t v15 = a1;
      unint64_t v16 = a2;
      uint64_t result = X509CertificateParse((unint64_t *)v17, &v15);
      if (result) {
        break;
      }
      a1 = v15;
      a2 = v16;
      if (v15 > v16 || (unint64_t)v10 >= v11 || v10 < a3) {
        __break(0x5519u);
      }
      *unint64_t v10 = v17[0];
      uint64_t v6 = v8 + 1;
      if (a1 < a2)
      {
        ++v10;
        if (v9 != v8++) {
          continue;
        }
      }
      goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    uint64_t result = 0;
    if (a5) {
      *a5 = v6;
    }
  }
  return result;
}

uint64_t CTParseExtensionValue(unint64_t a1, uint64_t a2, const void *a3, size_t a4, void *a5, void *a6)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v11, 0, sizeof(v11));
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_11:
    __break(0x5519u);
  }
  if (a1 + a2 < a1) {
    goto LABEL_11;
  }
  v10[0] = a1;
  v10[1] = a1 + a2;
  uint64_t result = X509CertificateParseWithExtension((unint64_t *)v11, v10, a3, a4);
  if (!result)
  {
    uint64_t result = 720914;
    if (*((void *)&v12 + 1))
    {
      uint64_t v9 = v13;
      if ((void)v13)
      {
        uint64_t result = 0;
        if (a5)
        {
          if (a6)
          {
            uint64_t result = 0;
            *a5 = *((void *)&v12 + 1);
            *a6 = v9;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CTParseKey(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  memset(v8, 0, sizeof(v8));
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_7:
    __break(0x5519u);
  }
  if (a1 + a2 < a1) {
    goto LABEL_7;
  }
  v7[0] = a1;
  v7[1] = a1 + a2;
  uint64_t result = X509CertificateParse((unint64_t *)v8, v7);
  if (!result) {
    return X509CertificateParseKey((uint64_t)v8, a3, a4);
  }
  return result;
}

uint64_t CTEvaluateSavageCertsWithUID(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, unsigned char *a7, uint64_t a8, BOOL *a9)
{
  return sub_1000C2528(a1, a2, a3, a4, a5, a6, a7, a8, 0, 0, a9, (uint64_t)&unk_10012EC58, 2);
}

uint64_t sub_1000C2528(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, unsigned char *a7, uint64_t a8, const void *a9, size_t a10, BOOL *a11, uint64_t a12, uint64_t a13)
{
  uint64_t result = (uint64_t)memset(__b, 170, sizeof(__b));
  memset(v33, 170, sizeof(v33));
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v32 = 0;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(a1, a2)) {
    goto LABEL_34;
  }
  if (a1 + a2 < a1) {
    goto LABEL_35;
  }
  unint64_t v30 = a1;
  unint64_t v31 = a1 + a2;
  uint64_t result = (uint64_t)X509ChainParseCertificateSet(&v30, (unint64_t)__b, 4, &v33[2], &v32);
  if (result) {
    return result;
  }
  uint64_t result = 327690;
  if (v30 != v31) {
    return result;
  }
  if (v32 != 2) {
    return 327692;
  }
  X509ChainResetChain(v33, &v33[2]);
  __b[74] = v33[0];
  long long v22 = v33[0] ? (uint64_t *)(v33[0] + 296) : &v33[1];
  *long long v22 = (uint64_t)&__b[74];
  if ((void *)((char *)&__b[38] + 1) != 0 && (unint64_t)__b >= 0xFFFFFFFFFFFFFECFLL) {
LABEL_34:
  }
    __break(0x5513u);
  v33[0] = (uint64_t)&__b[38];
  __b[75] = v33;
  __b[36] = 0;
  __b[37] = v33[1];
  *(void *)v33[1] = __b;
  v33[1] = (uint64_t)&__b[36];
  uint64_t result = X509ChainCheckPathWithOptions(12, v33, a12, 0);
  if (result) {
    return result;
  }
  uint64_t v23 = **(void **)(v33[1] + 8);
  uint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  if ((a4 & 0x8000000000000000) != 0) {
    goto LABEL_35;
  }
  uint64_t v28 = a3;
  unint64_t v29 = a4;
  long long v24 = oidForPubKeyLength();
  uint64_t result = X509CertificateCheckSignatureWithPublicKey(&v28, (uint64_t)&ecPublicKey, (uint64_t)v24, v23 + 16, v23 + 40);
  if (result) {
    return result;
  }
  if (a9 && a10)
  {
    if ((a10 & 0x8000000000000000) != 0) {
      goto LABEL_35;
    }
    if (compare_octet_string_raw(v23 + 248, a9, a10)) {
      return 590085;
    }
  }
  unint64_t v25 = v33[0];
  LODWORD(result) = X509CertificateParseKey(v33[0], a5, a6);
  int v26 = result;
  if (result) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 327691;
  }
  if (!v25 || v26) {
    return result;
  }
  if (a11) {
    *a11 = (*(void *)(v25 + 240) & a13) != 0;
  }
  if (!a7 || !a8) {
    return 0;
  }
  v27[0] = 0;
  v27[1] = 0;
  if (v25 >= v25 + 304) {
    goto LABEL_35;
  }
  uint64_t result = X509CertificateSubjectNameGetCommonName((unint64_t *)(v25 + 104), v27);
  if (result) {
    return result;
  }
  if (a8 < 0)
  {
LABEL_35:
    __break(0x5519u);
    return result;
  }
  uint64_t result = sub_1000C3468((uint64_t)v27, a7, a8);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t CTEvaluateSavageCerts(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, BOOL *a7)
{
  return sub_1000C2528(a1, a2, a3, a4, a5, a6, 0, 0, 0, 0, a7, (uint64_t)&unk_10012EC58, 2);
}

uint64_t CTEvaluateYonkersCerts(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, unsigned char *a7, uint64_t a8, BOOL *a9)
{
  return sub_1000C2528(a1, a2, a3, a4, a5, a6, a7, a8, 0, 0, a9, (uint64_t)&unk_10012EC90, 0x80000);
}

uint64_t CTEvaluateSensorCerts(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5, size_t a6, void *a7, void *a8, unsigned char *a9, uint64_t a10, BOOL *a11)
{
  return sub_1000C2528(a1, a2, a3, a4, a7, a8, a9, a10, a5, a6, a11, (uint64_t)&unk_10012ECC8, 0x10000000000);
}

uint64_t CTEvaluateCertsForPolicy(unint64_t a1, uint64_t a2, char a3, int a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9, void *a10, long long *a11)
{
  memset(v38, 170, sizeof(v38));
  bzero(v39, 0x4C0uLL);
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_42:
    __break(0x5519u);
  }
  if (a1 + a2 < a1) {
    goto LABEL_42;
  }
  uint64_t v36 = a1 + a2;
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v35 = a1;
  uint64_t result = (uint64_t)X509ChainParseCertificateSet(&v35, (unint64_t)v39, 4, &v38[2], &v37);
  if (result) {
    return result;
  }
  if (v35 != v36) {
    return 327690;
  }
  if ((a4 & 1) == 0 && !v40)
  {
    X509ChainResetChain(v38, &v38[2]);
    uint64_t v20 = v38[0];
    long long v21 = (uint64_t *)(v38[0] + 296);
    if (!v38[0]) {
      long long v21 = &v38[1];
    }
    *long long v21 = (uint64_t)v41;
    v38[0] = (uint64_t)v39;
    v41[0] = v20;
    v41[1] = v38;
LABEL_20:
    v34[0] = a7;
    v34[1] = a8;
    if (a7) {
      BOOL v23 = a8 == 0;
    }
    else {
      BOOL v23 = 1;
    }
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)uint64_t v32 = v24;
    *(_OWORD *)&v32[16] = v24;
    long long v31 = *a11;
    v32[0] = *((unsigned char *)a11 + 16);
    if (v23) {
      char v25 = a3;
    }
    else {
      char v25 = 1;
    }
    v32[1] = v25;
    *(_WORD *)&v32[2] = *((_WORD *)a11 + 9);
    if (v23)
    {
      *(_OWORD *)&v32[8] = *(long long *)((char *)a11 + 24);
      long long v27 = (_UNKNOWN **)*((void *)a11 + 5);
    }
    else
    {
      uint64_t v26 = *((void *)a11 + 4);
      *(void *)&v32[8] = v34;
      *(void *)&v32[16] = v26;
      long long v27 = oidForPubKeyLength();
    }
    uint64_t v28 = *((void *)a11 + 6);
    *(void *)&v32[24] = v27;
    uint64_t v33 = v28;
    uint64_t result = X509ChainCheckPathWithOptions(12, v38, (uint64_t)&v31, 0);
    if (!result)
    {
      unint64_t v29 = (void *)v38[0];
      if (!a5 || !a6 || !v38[0] || (uint64_t result = X509CertificateParseKey(v38[0], a5, a6), !result))
      {
        if (a10 && v29)
        {
          uint64_t v30 = v29[32];
          *a10 = v29[31];
          a10[1] = v30;
        }
        uint64_t result = 0;
        if (a9)
        {
          if (v29)
          {
            uint64_t result = 0;
            *a9 = v29[30];
          }
        }
      }
    }
    return result;
  }
  if (v39[265])
  {
    if (v38[2])
    {
      long long v22 = (unsigned char *)v38[2];
      while (v22[265])
      {
        long long v22 = (unsigned char *)*((void *)v22 + 34);
        if (!v22)
        {
          long long v22 = (unsigned char *)v38[2];
          break;
        }
      }
    }
    else
    {
      long long v22 = 0;
    }
  }
  else
  {
    long long v22 = v39;
  }
  uint64_t result = X509ChainBuildPathPartial(v22, &v38[2], v38, a4 ^ 1u);
  if (!result) {
    goto LABEL_20;
  }
  return result;
}

uint64_t CTEvaluateSatori(unint64_t a1, uint64_t a2, char a3, void *a4, void *a5)
{
  return CTEvaluateCertsForPolicy(a1, a2, a3, 1, a4, a5, 0, 0, 0, 0, &xmmword_10012ED00);
}

uint64_t CTEvaluateAcrt(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  return CTEvaluateCertsForPolicy(a1, a2, 0, 0, a3, a4, 0, 0, 0, 0, &xmmword_10012ED38);
}

uint64_t CTEvaluateUcrt(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  return CTEvaluateCertsForPolicy(a1, a2, 0, 1, a3, a4, 0, 0, 0, 0, &xmmword_10012ED70);
}

uint64_t CTEvaluateUcrtTestRoot(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  return CTEvaluateCertsForPolicy(a1, a2, 1, 1, a5, a6, a3, a4, 0, 0, &xmmword_10012ED70);
}

uint64_t CTEvaluatePragueSignatureCMS(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7)
{
  unint64_t v9 = 0xAAAAAAAA0000AA01;
  long long v8 = xmmword_100110120;
  BYTE1(v9) = a5;
  long long v10 = 0u;
  long long v11 = 0u;
  return CMSVerifySignedDataWithLeaf(a1, a2, a3, a4, (uint64_t)&v8, a6, a7);
}

uint64_t CTEvaluateKDLSignatureCMS(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7)
{
  unint64_t v9 = 0xAAAAAAAA0000AA01;
  long long v8 = xmmword_100110130;
  BYTE1(v9) = a5;
  long long v10 = 0u;
  long long v11 = 0u;
  return CMSVerifySignedDataWithLeaf(a1, a2, a3, a4, (uint64_t)&v8, a6, a7);
}

uint64_t CTVerifyAppleMarkerExtension(void *a1, uint64_t a2)
{
  uint64_t result = 327700;
  unint64_t v4 = a1[31];
  unint64_t v5 = a1[32];
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return 327707;
  }
  uint64_t v7 = a1[30];
  if ((v7 & 0x100000000) == 0)
  {
    if ((v7 & 0x200000000) == 0) {
      return result;
    }
    if (!__CFADD__(v4, v5))
    {
      unint64_t v11 = v4 + v5;
      if (v4 + v5 != -1)
      {
        if (v5 > 0x13) {
          return 327704;
        }
        unint64_t v16 = (unsigned __int8 *)(v11 - 1);
        if (v11 - 1 >= v4)
        {
          uint64_t v10 = 0;
          uint64_t v17 = 0;
          while ((unint64_t)v16 < v11)
          {
            int v18 = *v16;
            if ((v18 - 58) < 0xFFFFFFF6) {
              return 327705;
            }
            if (v17 == 20) {
              break;
            }
            if ((v17 & 0x1FFFFFFFFFFFFFFFLL) == 0x14) {
              goto LABEL_39;
            }
            unint64_t v19 = (v18 - 48);
            unint64_t v20 = powersOfTen[v17];
            if (!is_mul_ok(v19, v20)) {
              goto LABEL_40;
            }
            unint64_t v21 = v19 * v20;
            BOOL v15 = __CFADD__(v10, v21);
            v10 += v21;
            if (v15) {
              goto LABEL_38;
            }
            ++v17;
            if ((unint64_t)--v16 < v4) {
              goto LABEL_23;
            }
          }
LABEL_37:
          __break(0x5519u);
LABEL_38:
          __break(0x5500u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(0x550Cu);
          goto LABEL_41;
        }
        goto LABEL_13;
      }
    }
LABEL_41:
    __break(0x5513u);
    return result;
  }
  if (__CFADD__(v4, v5)) {
    goto LABEL_41;
  }
  unint64_t v8 = v4 + v5;
  if (v4 + v5 == -1) {
    goto LABEL_41;
  }
  unint64_t v9 = (unsigned char *)(v8 - 1);
  if (v8 - 1 >= v4)
  {
    char v12 = 0;
    unint64_t v13 = 0;
    uint64_t v10 = 0;
    while ((unint64_t)v9 < v8)
    {
      unint64_t v14 = (unint64_t)(*v9 & 0x7F) << v12;
      BOOL v15 = __CFADD__(v10, v14);
      v10 += v14;
      if (v15) {
        goto LABEL_38;
      }
      if (v13 <= 7)
      {
        ++v13;
        --v9;
        v12 += 7;
        if ((unint64_t)v9 >= v4) {
          continue;
        }
      }
      goto LABEL_23;
    }
    goto LABEL_37;
  }
LABEL_13:
  uint64_t v10 = 0;
LABEL_23:
  if (v10 == a2) {
    return 0;
  }
  else {
    return 589829;
  }
}

uint64_t CTVerifyHostname(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 327702;
  if (*(void *)(a1 + 232) && *(void *)(a1 + 224))
  {
    v7[1] = a3;
    unint64_t v8 = 0xAAAAAAAAAAAAAA00;
    v7[0] = a2;
    unsigned int v4 = X509CertificateParseGeneralNamesContent(a1, (uint64_t (*)(void, int *, uint64_t))sub_1000C2F30, (uint64_t)v7);
    if ((_BYTE)v8) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = 327706;
    }
    if (v4) {
      return v4;
    }
    else {
      return v5;
    }
  }
  return v3;
}

uint64_t sub_1000C2F30(uint64_t result, void *a2, unint64_t a3)
{
  if (result != 2) {
    return 1;
  }
  unsigned int v4 = *(char **)a3;
  size_t v5 = *(void *)(a3 + 8);
  size_t v6 = ~*(void *)a3;
  if (v5 > v6) {
    goto LABEL_50;
  }
  uint64_t v7 = &v4[v5];
  if (&v4[v5] == (char *)-1) {
    goto LABEL_50;
  }
  unint64_t v8 = v7 - 1;
  if (v7) {
    BOOL v9 = v8 >= v4;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9 || a3 + 24 < a3) {
    goto LABEL_49;
  }
  int v11 = *v8;
  uint64_t result = compare_octet_string((uint64_t)a2, a3);
  if (!result) {
    goto LABEL_48;
  }
  if (v11 != 46) {
    goto LABEL_15;
  }
  size_t v12 = v5 - 1;
  if (v5)
  {
    if (v12 <= v5)
    {
      uint64_t result = compare_octet_string_raw((uint64_t)a2, v4, v12);
      if (result)
      {
LABEL_15:
        unint64_t v13 = a2[1];
        if (v13 < 3) {
          return 1;
        }
        unint64_t v14 = (unsigned char *)*a2;
        if (*(unsigned char *)*a2 != 42) {
          return 1;
        }
        if (v14 != (unsigned char *)-1)
        {
          BOOL v15 = v14 + 1;
          if (v14[1] == 46)
          {
            uint64_t v16 = -2;
            if ((unint64_t)v14 < 0xFFFFFFFFFFFFFFFELL) {
              uint64_t v16 = (uint64_t)v14;
            }
            uint64_t v17 = -v16;
            uint64_t v18 = 2;
            uint64_t result = 1;
            while (v17 != v18)
            {
              if (&v14[v18] < v14) {
                goto LABEL_49;
              }
              if (v14[v18] == 46)
              {
                if (v13 == v18) {
                  return 1;
                }
                size_t v19 = 0;
                if (v5)
                {
                  while (1)
                  {
                    unint64_t v20 = &v4[v19];
                    if (&v4[v19] >= v7 || v20 < v4) {
                      goto LABEL_49;
                    }
                    if (*v20 == 46) {
                      break;
                    }
                    if (v5 == ++v19)
                    {
                      size_t v19 = v5;
                      break;
                    }
                  }
                }
                size_t v22 = v13 - 1;
                BOOL v9 = v5 >= v19;
                size_t v23 = v5 - v19;
                if (!v9) {
                  goto LABEL_51;
                }
                if (v22 == v23)
                {
                  if (v19 > v6) {
                    goto LABEL_50;
                  }
                  uint64_t result = memcmp(v15, &v4[v19], v13 - 1);
                  if (!result) {
                    goto LABEL_48;
                  }
                }
                if (v11 != 46) {
                  return 1;
                }
                if (!v23) {
                  goto LABEL_51;
                }
                if (v22 != v23 - 1) {
                  return 1;
                }
                if (v19 <= v6)
                {
                  if (!memcmp(v15, &v4[v19], v22)) {
                    goto LABEL_48;
                  }
                  return 1;
                }
                goto LABEL_50;
              }
              if (v13 == ++v18) {
                return result;
              }
            }
            goto LABEL_50;
          }
          return 1;
        }
LABEL_50:
        __break(0x5513u);
        goto LABEL_51;
      }
LABEL_48:
      uint64_t result = 0;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
LABEL_49:
    __break(0x5519u);
    goto LABEL_50;
  }
LABEL_51:
  __break(0x5515u);
  return result;
}

uint64_t CTEvaluateAppleSSLWithOptionalTemporalCheck(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  unint64_t v20 = 0xAAAAAAAA00AAAA01;
  unint64_t v21 = &null_octet;
  long long v19 = xmmword_100110140;
  BYTE1(v20) = a6;
  BYTE2(v20) = a7;
  size_t v22 = &null_octet;
  size_t v23 = &null_octet;
  long long v24 = &CTOctetServerAuthEKU;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t result = CTEvaluateCertsForPolicy(a1, a2, a6, 1, &v17, &v18, 0, 0, 0, 0, &v19);
  if (!result)
  {
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[17] = v13;
    v16[18] = v13;
    v16[15] = v13;
    v16[16] = v13;
    v16[13] = v13;
    v16[14] = v13;
    v16[11] = v13;
    v16[12] = v13;
    v16[9] = v13;
    v16[10] = v13;
    v16[7] = v13;
    v16[8] = v13;
    v16[6] = v13;
    v16[4] = v13;
    v16[5] = v13;
    v16[2] = v13;
    v16[3] = v13;
    v16[0] = v13;
    v16[1] = v13;
    memset(v15, 170, sizeof(v15));
    if (__CFADD__(a1, a2))
    {
      __break(0x5513u);
    }
    else
    {
      v14[0] = a1;
      v14[1] = a1 + a2;
      uint64_t result = (uint64_t)X509ChainParseCertificateSet(v14, (unint64_t)v16, 1, &v15[1], v15);
      if (!result)
      {
        uint64_t result = CTVerifyAppleMarkerExtension(v16, a5);
        if (!result) {
          return CTVerifyHostname((uint64_t)v16, a3, a4);
        }
      }
    }
  }
  return result;
}

uint64_t CTEvaluateAppleSSL(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return CTEvaluateAppleSSLWithOptionalTemporalCheck(a1, a2, a3, a4, a5, a6, 1);
}

uint64_t CTGetSEKType(unint64_t a1, uint64_t a2)
{
  memset(v4, 0, sizeof(v4));
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_10:
    __break(0x5519u);
  }
  if (a1 + a2 < a1) {
    goto LABEL_10;
  }
  v3[0] = a1;
  v3[1] = a1 + a2;
  if (X509CertificateParse((unint64_t *)v4, v3)) {
    return 0;
  }
  if (compare_octet_string((uint64_t)&v4[10] + 8, (uint64_t)&SEKTestRootSKID)) {
    return compare_octet_string((uint64_t)&v4[10] + 8, (uint64_t)&SEKProdRootSKID) == 0;
  }
  return 2;
}

uint64_t CTEvaluateSEK(char a1, unint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t result = 327712;
  if ((a1 & 3) != 0)
  {
    if ((a1 & 1) == 0
      || (uint64_t result = CTEvaluateCertsForPolicy(a2, a3, 0, 1, a4, a5, 0, 0, 0, 0, &xmmword_10012EDA8), result))
    {
      if ((a1 & 2) != 0) {
        return CTEvaluateCertsForPolicy(a2, a3, 0, 1, a4, a5, (uint64_t)&unk_10010FE4A, 97, 0, 0, &xmmword_10012EDA8);
      }
    }
  }
  return result;
}

uint64_t sub_1000C3468(uint64_t result, unsigned char *a2, uint64_t a3)
{
  unint64_t v5 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  if (__CFADD__(*(void *)result, v4)) {
    goto LABEL_31;
  }
  unint64_t v6 = v5 + v4;
  uint64_t v7 = *(unsigned __int8 **)result;
  if (v5 < v6)
  {
    while ((unint64_t)v7 >= v5)
    {
      int v3 = *v7;
      if (v3 != 45 && (unint64_t)++v7 < v6) {
        continue;
      }
      goto LABEL_6;
    }
    goto LABEL_34;
  }
LABEL_6:
  if (v7 == (unsigned __int8 *)-1) {
    goto LABEL_31;
  }
  unint64_t v8 = v7 + 1;
  int v3 = 327693;
  uint64_t result = 327693;
  if ((unint64_t)(v7 + 1) >= v6) {
    return result;
  }
  if (a3 < 0 || v5 > (unint64_t)v8)
  {
LABEL_34:
    __break(0x5519u);
    return result;
  }
  if (__CFADD__(v8, v6 - (void)v8)) {
    goto LABEL_31;
  }
  if (v6 - (void)v8 != 2 * a3) {
    return (v3 + 1);
  }
  if (__CFADD__(a2, a3) || v7 == (unsigned __int8 *)-2)
  {
LABEL_31:
    __break(0x5513u);
    return (v3 + 1);
  }
  BOOL v9 = v7 + 2;
  uint64_t v10 = a2;
  while (1)
  {
    uint64_t result = 0;
    if ((unint64_t)v9 >= v6 || v10 >= &a2[a3]) {
      return result;
    }
    int v11 = v9 - 1;
    if ((unint64_t)(v9 - 1) >= v6 || v11 < v8) {
      goto LABEL_34;
    }
    size_t v12 = &asciiNibbleToByte[*v11];
    uint64_t result = (uint64_t)&CTOidAppleImg4Manifest;
    if (v12 >= (unsigned __int8 *)&CTOidAppleImg4Manifest || v12 < asciiNibbleToByte) {
      goto LABEL_34;
    }
    if (v11 < v7) {
      goto LABEL_34;
    }
    unint64_t v14 = &asciiNibbleToByte[*v9];
    uint64_t result = (uint64_t)&CTOidAppleImg4Manifest;
    if (v14 >= (unsigned __int8 *)&CTOidAppleImg4Manifest || v14 < asciiNibbleToByte) {
      goto LABEL_34;
    }
    unsigned int v15 = *v12;
    uint64_t result = 327695;
    if (v15 > 0xF) {
      return result;
    }
    unsigned int v16 = *v14;
    if (v16 > 0xF) {
      return result;
    }
    if (v10 < a2) {
      goto LABEL_34;
    }
    *v10++ = v16 | (16 * v15);
    v9 += 2;
    if (!v9) {
      goto LABEL_31;
    }
  }
}

uint64_t X509CertificateParseImplicit(uint64_t a1, unint64_t *a2, const void *a3, size_t a4)
{
  unint64_t v68 = 0;
  uint64_t v69 = 0;
  unint64_t v66 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 > v5) {
    goto LABEL_186;
  }
  uint64_t v10 = 720915;
  unint64_t v66 = *a2;
  unint64_t v67 = v5;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x400], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x400], 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x400], 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x400], 8) = 0u;
  uint64_t result = ccder_blob_decode_tl();
  if (!result) {
    return v10;
  }
  uint64_t v12 = v69;
  unint64_t v13 = v66;
  unint64_t v14 = v69 + v66 - v4;
  if (__CFADD__(v69, v66 - v4)) {
    goto LABEL_188;
  }
  if (v14 > v5 - v4) {
    goto LABEL_186;
  }
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v14;
  unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v65 = 0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(v13, v12)) {
    goto LABEL_187;
  }
  unint64_t v15 = v13 + v12;
  if (v13 > v15 || v15 > v67) {
    goto LABEL_186;
  }
  unint64_t v64 = v13;
  unint64_t v65 = v15;
  unint64_t v62 = v13;
  unint64_t v63 = v15;
  if (ccder_blob_decode_tl())
  {
    if (__CFADD__(v62, v68)) {
      goto LABEL_187;
    }
    uint64_t v16 = 720916;
    if (ccder_blob_decode_uint64() && v62 == v62 + v68)
    {
      if (v62 + v68 > v63) {
        goto LABEL_186;
      }
      unint64_t v64 = v62 + v68;
      unint64_t v65 = v63;
      goto LABEL_14;
    }
    return v16;
  }
LABEL_14:
  if (!ccder_blob_decode_tl()) {
    return 720917;
  }
  unint64_t v18 = v64;
  unint64_t v17 = v65;
  if (v65 < v64) {
    goto LABEL_186;
  }
  unint64_t v19 = v68;
  if (v68 > v65 - v64) {
    goto LABEL_186;
  }
  *(void *)(a1 + 136) = v64;
  *(void *)(a1 + 144) = v19;
  if (__CFADD__(v18, v19)) {
    goto LABEL_187;
  }
  unint64_t v20 = v18 + v19;
  if (v18 > v20 || v20 > v17) {
    goto LABEL_186;
  }
  unint64_t v64 = v20;
  if (!ccder_blob_decode_AlgorithmIdentifierNULL(&v64, (unint64_t *)(a1 + 152))) {
    return 720918;
  }
  if (!ccder_blob_decode_tl()) {
    return 720919;
  }
  unint64_t v22 = v64;
  unint64_t v21 = v65;
  if (v65 < v64) {
    goto LABEL_186;
  }
  unint64_t v23 = v68;
  if (v68 > v65 - v64) {
    goto LABEL_186;
  }
  *(void *)(a1 + 120) = v64;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x400], 8) = v23;
  if (__CFADD__(v22, v23)) {
    goto LABEL_187;
  }
  unint64_t v24 = v22 + v23;
  if (v22 > v24 || v24 > v21) {
    goto LABEL_186;
  }
  unint64_t v64 = v24;
  if (!ccder_blob_decode_tl()) {
    return 720920;
  }
  unint64_t v26 = v64;
  unint64_t v25 = v65;
  if (v65 < v64) {
    goto LABEL_186;
  }
  unint64_t v27 = v68;
  if (v68 > v65 - v64) {
    goto LABEL_186;
  }
  *(void *)(a1 + 72) = v64;
  *(void *)(a1 + 80) = v27;
  if (__CFADD__(v26, v27)) {
    goto LABEL_187;
  }
  unint64_t v28 = v26 + v27;
  if (v26 > v28 || v28 > v25) {
    goto LABEL_186;
  }
  unint64_t v64 = v28;
  if (!ccder_blob_decode_tl()) {
    return 720921;
  }
  unint64_t v29 = v64;
  unint64_t v30 = v65;
  if (v65 < v64) {
    goto LABEL_186;
  }
  unint64_t v31 = v68;
  if (v68 > v65 - v64) {
    goto LABEL_186;
  }
  *(void *)(a1 + 104) = v64;
  *(void *)(a1 + 112) = v31;
  if (__CFADD__(v29, v31)) {
    goto LABEL_187;
  }
  unint64_t v32 = v29 + v31;
  if (v29 > v29 + v31 || v32 > v30) {
    goto LABEL_186;
  }
  unint64_t v64 = v29 + v31;
  uint64_t result = ccder_blob_decode_tl();
  if (!result) {
    return 720922;
  }
  unint64_t v33 = v64;
  unint64_t v34 = v68;
  unint64_t v35 = v64 - v32 + v68;
  if (!__CFADD__(v64 - v32, v68))
  {
    if (v35 > v30 - v32) {
      goto LABEL_186;
    }
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x400], 8) = v32;
    *(void *)(a1 + 96) = v35;
    if (__CFADD__(v33, v34)) {
      goto LABEL_187;
    }
    unint64_t v36 = v33 + v34;
    if (v33 > v36 || v36 > v65) {
      goto LABEL_186;
    }
    unint64_t v63 = v65;
    unint64_t v64 = v36;
    unint64_t v62 = v36;
    if (ccder_blob_decode_tl()) {
      return 720923;
    }
    if (v64 > v65) {
      goto LABEL_186;
    }
    unint64_t v62 = v64;
    unint64_t v63 = v65;
    if (ccder_blob_decode_tl()) {
      return 720924;
    }
    if (v64 > v65) {
      goto LABEL_186;
    }
    unint64_t v62 = v64;
    unint64_t v63 = v65;
    if (ccder_blob_decode_tl())
    {
      unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
      if (__CFADD__(v62, v68)) {
        goto LABEL_187;
      }
      if (v62 > v62 + v68 || v62 + v68 > v63) {
        goto LABEL_186;
      }
      unint64_t v60 = v62;
      unint64_t v61 = v62 + v68;
      if (!ccder_blob_decode_tl() || !v68) {
        return 720925;
      }
      unint64_t v37 = v60;
      if (__CFADD__(v60, v68)) {
LABEL_187:
      }
        __break(0x5513u);
      unint64_t v38 = v60 + v68;
      if (v60 > v60 + v68 || v38 > v61) {
        goto LABEL_186;
      }
      unint64_t v61 = v60 + v68;
      *(unsigned char *)(a1 + 266) = 0;
      memset(&v70[2], 0, 128);
      if (a3) {
        BOOL v39 = a4 == 0;
      }
      else {
        BOOL v39 = 1;
      }
      int v40 = !v39;
      memset(v70, 0, 32);
      if (v37 < v38)
      {
        unsigned __int8 v53 = 0;
        int v41 = 0;
        do
        {
          unint64_t v58 = 0xAAAAAAAAAAAAAAAALL;
          unint64_t v59 = 0xAAAAAAAAAAAAAAAALL;
          char v57 = 0;
          uint64_t v56 = 0;
          if ((ccder_blob_decode_tl() & 1) == 0) {
            return 720926;
          }
          unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
          unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
          if (__CFADD__(v60, v56)) {
            goto LABEL_187;
          }
          if (v60 > v60 + v56 || v60 + v56 > v61) {
            goto LABEL_186;
          }
          unint64_t v54 = v60;
          unint64_t v55 = v60 + v56;
          if (!ccder_blob_decode_tl()) {
            return 720927;
          }
          if (v55 < v54 || v68 > v55 - v54) {
            goto LABEL_186;
          }
          unint64_t v58 = v54;
          unint64_t v59 = v68;
          if (__CFADD__(v54, v68)) {
            goto LABEL_187;
          }
          if (v54 > v54 + v68 || v54 + v68 > v55) {
            goto LABEL_186;
          }
          v54 += v68;
          if (!sub_1000C3F74(&v54, 1, &v57)) {
            return 720928;
          }
          if (!ccder_blob_decode_tl()) {
            return 720929;
          }
          if (__CFADD__(v54, v68)) {
            goto LABEL_187;
          }
          if (v55 != v54 + v68) {
            return 720929;
          }
          if (v40 && !compare_octet_string_raw((uint64_t)&v58, a3, a4))
          {
            if (v55 < v54) {
              goto LABEL_186;
            }
            unint64_t v43 = v68;
            if (v68 > v55 - v54) {
              goto LABEL_186;
            }
            *(void *)(a1 + 24_Block_object_dispose(&STACK[0x400], 8) = v54;
            *(void *)(a1 + 256) = v43;
          }
          if (v59 == 3)
          {
            if (*(_WORD *)v58 == 7509 && *(unsigned char *)(v58 + 2) == 15)
            {
              uint64_t v16 = 720930;
              if ((v41 & 1) != 0 || (sub_1000C408C() & 1) == 0) {
                return v16;
              }
              v41 |= 1u;
              goto LABEL_155;
            }
            if (*(_WORD *)v58 == 7509 && *(unsigned char *)(v58 + 2) == 19)
            {
              uint64_t v16 = 720931;
              if ((v41 & 2) != 0 || (sub_1000C415C(&v54, (void *)(a1 + 200), (unsigned char *)(a1 + 265)) & 1) == 0) {
                return v16;
              }
              v41 |= 2u;
              goto LABEL_155;
            }
            if (*(_WORD *)v58 == 7509 && *(unsigned char *)(v58 + 2) == 35)
            {
              uint64_t v16 = 720932;
              if ((v41 & 4) != 0
                || (sub_1000C422C(&v54, (unint64_t *)(a1 + 168), (void *)(a1 + 176)) & 1) == 0)
              {
                return v16;
              }
              v41 |= 4u;
              goto LABEL_155;
            }
            if (*(_WORD *)v58 == 7509 && *(unsigned char *)(v58 + 2) == 14)
            {
              uint64_t v16 = 720933;
              if ((v41 & 8) != 0
                || (sub_1000C4354(&v54, (unint64_t *)(a1 + 184), (void *)(a1 + 192)) & 1) == 0)
              {
                return v16;
              }
              v41 |= 8u;
              goto LABEL_155;
            }
            if (*(_WORD *)v58 == 7509 && *(unsigned char *)(v58 + 2) == 37)
            {
              uint64_t v16 = 720934;
              if ((v41 & 0x10) != 0
                || (sub_1000C4418(&v54, (unint64_t *)(a1 + 208), (void *)(a1 + 216)) & 1) == 0)
              {
                return v16;
              }
              v41 |= 0x10u;
              goto LABEL_155;
            }
            if (*(_WORD *)v58 == 7509 && *(unsigned char *)(v58 + 2) == 17)
            {
              uint64_t v16 = 720935;
              if ((v41 & 0x20) != 0
                || (sub_1000C4528(&v54, (unint64_t *)(a1 + 224), (void *)(a1 + 232)) & 1) == 0)
              {
                return v16;
              }
              v41 |= 0x20u;
              goto LABEL_155;
            }
          }
          else if (v59 >= 8 && *(_DWORD *)v58 == -2042067414 && *(_DWORD *)(v58 + 3) == 1684273030)
          {
            uint64_t v16 = 720936;
            if (!sub_1000C45FC((uint64_t)&v58, (uint64_t)v70, v53)) {
              return v16;
            }
            uint64_t result = sub_1000C4688((uint64_t)&v54, v58, v59, (uint64_t *)(a1 + 240), (unint64_t *)(a1 + 248), v40);
            if (!result) {
              return v16;
            }
            if (v53 == 0xFF) {
              goto LABEL_189;
            }
            ++v53;
            goto LABEL_155;
          }
          if (__CFADD__(v54, v68)) {
            goto LABEL_187;
          }
          if (v54 > v54 + v68 || v54 + v68 > v55) {
            goto LABEL_186;
          }
          v54 += v68;
          if (v57) {
            *(unsigned char *)(a1 + 266) = 1;
          }
LABEL_155:
          if (v54 != v55) {
            return 720926;
          }
          if (__CFADD__(v60, v56)) {
            goto LABEL_187;
          }
          unint64_t v37 = v60 + v56;
          if (v60 > v60 + v56) {
            goto LABEL_186;
          }
          unint64_t v38 = v61;
          if (v37 > v61) {
            goto LABEL_186;
          }
          v60 += v56;
        }
        while (v37 < v61);
      }
      if (v37 != v38) {
        return 720925;
      }
      if (v37 > v65 || v64 > v37) {
        goto LABEL_186;
      }
      unint64_t v64 = v37;
    }
    if (*(void *)(a1 + 32) < 3uLL)
    {
      uint64_t v16 = 720915;
      if (v64 != v65) {
        return v16;
      }
LABEL_170:
      if (__CFADD__(v66, v69)) {
        goto LABEL_187;
      }
      if (v66 > v66 + v69 || v66 + v69 > v67) {
        goto LABEL_186;
      }
      v66 += v69;
      if (!ccder_blob_decode_AlgorithmIdentifierNULL(&v66, (unint64_t *)(a1 + 40))) {
        return 720937;
      }
      *(void *)&v70[0] = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v70[0] + 1) = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v60 = 0;
      uint64_t result = ccder_blob_decode_bitstring();
      if (!result) {
        return 720938;
      }
      if (v60 < 0xFFFFFFFFFFFFFFF9)
      {
        if (*((void *)&v70[0] + 1) >= *(void *)&v70[0])
        {
          unint64_t v51 = (v60 + 7) >> 3;
          if (v51 <= *((void *)&v70[0] + 1) - *(void *)&v70[0])
          {
            *(void *)(a1 + 56) = *(void *)&v70[0];
            *(void *)(a1 + 64) = v51;
            unint64_t v52 = v67;
            if (v66 <= v67)
            {
              uint64_t v16 = 0;
              *a2 = v66;
              a2[1] = v52;
              return v16;
            }
          }
        }
        goto LABEL_186;
      }
      goto LABEL_188;
    }
    if (v65 <= a2[1] && *a2 <= v65)
    {
      *a2 = v65;
      goto LABEL_170;
    }
LABEL_186:
    __break(0x5519u);
    goto LABEL_187;
  }
LABEL_188:
  __break(0x5500u);
LABEL_189:
  __break(0x5507u);
  return result;
}

uint64_t sub_1000C3F74(void *a1, int a2, unsigned char *a3)
{
  if (*a1 > a1[1]) {
    __break(0x5519u);
  }
  if ((ccder_blob_decode_tl() & 1) != 0 || !a2) {
    return 0;
  }
  if (a3) {
    *a3 = 0;
  }
  return 1;
}

uint64_t sub_1000C408C()
{
  uint64_t result = ccder_blob_decode_bitstring();
  if (result) {
    return 0;
  }
  return result;
}

uint64_t sub_1000C415C(void *a1, void *a2, unsigned char *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    uint64_t result = sub_1000C3F74(a1, 1, a3);
    if (result)
    {
      if (ccder_blob_decode_uint64())
      {
        if (!*a3) {
          return 0;
        }
        *a2 = 0xAAAAAAAAAAAAAAAALL;
        *a2 = 0xAAAAAAAAAAAAAAABLL;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_1000C422C(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    unint64_t v7 = *a1;
    if (*a1 >= 0x5555555555555556) {
      goto LABEL_15;
    }
    if (v7 - 0x5555555555555556 != a1[1]) {
      return 0;
    }
    if (v7 > v7 - 0x5555555555555556) {
      goto LABEL_16;
    }
    unint64_t v10 = *a1;
    unint64_t v11 = v7 - 0x5555555555555556;
    uint64_t result = ccder_blob_decode_tl();
    if (result)
    {
      if (v11 < v10 || v11 - v10 < 0xAAAAAAAAAAAAAAAALL) {
        goto LABEL_16;
      }
      *a2 = v10;
      *a3 = 0xAAAAAAAAAAAAAAAALL;
    }
    unint64_t v8 = *a1;
    if (*a1 >= 0x5555555555555556)
    {
LABEL_15:
      __break(0x5513u);
    }
    else
    {
      unint64_t v9 = v8 - 0x5555555555555556;
      if (v8 <= v8 - 0x5555555555555556 && v9 <= a1[1])
      {
        *a1 = v9;
        return 1;
      }
    }
LABEL_16:
    __break(0x5519u);
  }
  return result;
}

uint64_t sub_1000C4354(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    unint64_t v7 = a1[1];
    BOOL v8 = v7 >= *a1;
    unint64_t v9 = v7 - *a1;
    if (!v8 || v9 < 0xAAAAAAAAAAAAAAAALL) {
      goto LABEL_13;
    }
    *a2 = *a1;
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v11 = *a1;
    if (*a1 >= 0x5555555555555556)
    {
      __break(0x5513u);
      return result;
    }
    unint64_t v12 = v11 - 0x5555555555555556;
    if (v11 > v11 - 0x5555555555555556 || v12 > a1[1]) {
LABEL_13:
    }
      __break(0x5519u);
    *a1 = v12;
  }
  return result;
}

uint64_t sub_1000C4418(unint64_t *a1, unint64_t *a2, void *a3)
{
  int v6 = ccder_blob_decode_tl();
  uint64_t result = 0;
  if (v6)
  {
    if (*a1 > a1[1]) {
      goto LABEL_11;
    }
    unint64_t v10 = *a1;
    unint64_t v11 = a1[1];
    uint64_t result = ccder_blob_decode_tl();
    if (!result) {
      return result;
    }
    if (v11 < v10 || v11 - v10 < 0xAAAAAAAAAAAAAAAALL) {
      goto LABEL_11;
    }
    *a2 = v10;
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v8 = *a1;
    if (*a1 >= 0x5555555555555556)
    {
      __break(0x5513u);
      return result;
    }
    unint64_t v9 = v8 - 0x5555555555555556;
    if (v8 > v8 - 0x5555555555555556 || v9 > a1[1]) {
LABEL_11:
    }
      __break(0x5519u);
    *a1 = v9;
  }
  return result;
}

uint64_t sub_1000C4528(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result == 1)
  {
    unint64_t v7 = a1[1];
    BOOL v8 = v7 >= *a1;
    unint64_t v9 = v7 - *a1;
    if (!v8 || v9 < 0xAAAAAAAAAAAAAAAALL) {
      goto LABEL_13;
    }
    *a2 = *a1;
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v11 = *a1;
    if (*a1 >= 0x5555555555555556)
    {
      __break(0x5513u);
      return result;
    }
    unint64_t v12 = v11 - 0x5555555555555556;
    if (v11 > v11 - 0x5555555555555556 || v12 > a1[1]) {
LABEL_13:
    }
      __break(0x5519u);
    *a1 = v12;
  }
  return result;
}

uint64_t sub_1000C45FC(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 > 9) {
    return 0;
  }
  unint64_t v5 = (void *)result;
  unsigned __int8 v6 = 0;
  unint64_t v7 = ~a2;
  while (v7 >= 16 * (char)v6)
  {
    uint64_t result = compare_octet_string((uint64_t)v5, a2 + 16 * v6);
    if (!result) {
      return result;
    }
    if (a3 <= v6++)
    {
      uint64_t v9 = v5[1];
      unint64_t v10 = (void *)(a2 + 16 * a3);
      *unint64_t v10 = *v5;
      v10[1] = v9;
      return 1;
    }
  }
  __break(0x5513u);
  return result;
}

uint64_t sub_1000C4688(uint64_t result, unint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, int a6)
{
  if (a6) {
    a5 = 0;
  }
  if (a3 == 11)
  {
    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x10901066463F786)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x400000000000;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x10301066463F786)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x200;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x10601066463F786)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x800;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x11801066463F786)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x2000;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x12401066463F786)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x100000000000;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x11901066463F786)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x4000;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x21901066463F786)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x8000;
      goto LABEL_275;
    }
LABEL_159:
    int v44 = 0;
LABEL_160:
    if (*(void *)a2 == 0x66463F78648862ALL && *(unsigned char *)(a2 + 8) == 27)
    {
      return sub_1000C6824(result, a2, a3, a4, a5);
    }
    if (v44)
    {
      if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 832)
      {
        uint64_t result = ccder_blob_check_null();
        if (!result) {
          return result;
        }
        uint64_t v24 = *a4 | 0x400000;
        goto LABEL_275;
      }
      if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3586)
      {
        uint64_t result = ccder_blob_check_null();
        if (!result) {
          return result;
        }
        uint64_t v54 = *a4;
        uint64_t v55 = 37748736;
        goto LABEL_205;
      }
      if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 4354)
      {
        uint64_t result = ccder_blob_check_null();
        if (!result) {
          return result;
        }
        uint64_t v54 = *a4;
        uint64_t v55 = 0x8004000000;
        goto LABEL_205;
      }
      if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 327)
      {
        return (uint64_t)sub_1000C6A48((unint64_t *)result, a4, a5);
      }
      if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3841)
      {
        unint64_t v52 = *(void *)result;
        unint64_t v51 = *(void *)(result + 8);
        if (a5)
        {
          if (v52 > v51) {
            goto LABEL_281;
          }
          *a5 = v52;
          a5[1] = v51 - v52;
        }
        *a4 |= 0x80000000uLL;
LABEL_243:
        if (v52 <= v51)
        {
          *(void *)uint64_t result = v51;
          return 1;
        }
LABEL_281:
        __break(0x5519u);
        return result;
      }
    }
LABEL_242:
    unint64_t v52 = *(void *)result;
    unint64_t v51 = *(void *)(result + 8);
    goto LABEL_243;
  }
  if (a3 == 10)
  {
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 5122)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x100000;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 258)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v54 = *a4;
      uint64_t v55 = 0x58600003F0D0;
LABEL_205:
      uint64_t v24 = v54 | v55;
LABEL_275:
      *a4 = v24;
      return 1;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 1538) {
      goto LABEL_209;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 4610)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0xF00;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3073)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x10;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 1793)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x20000;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3329)
    {
LABEL_209:
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x20;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 2305)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x40;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 513)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x80;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 1025)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x10000;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 769)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x100;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 1537)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x400;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 6145)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x1000;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 9217)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x80000000000;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 8193)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x2000000000;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 8705)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x4000000000;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 315)
    {
      return sub_1000C65B4((unint64_t *)result, a4, a5);
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3074)
    {
      uint64_t result = ccder_blob_check_null();
      if (!result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x300000000;
      goto LABEL_275;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 304)
    {
      return sub_1000C6698();
    }
    int v44 = 1;
    goto LABEL_160;
  }
  if (a3 != 9)
  {
    if (a3 < 0xA) {
      goto LABEL_242;
    }
    goto LABEL_159;
  }
  if (*(void *)a2 == 0xB6463F78648862ALL && *(unsigned char *)(a2 + 8) == 1)
  {
    return sub_1000C61F4((unint64_t *)result, a4, a5);
  }
  if (*(void *)a2 == 0x66463F78648862ALL && *(unsigned char *)(a2 + 8) == 49)
  {
    char v56 = 0;
    uint64_t result = sub_1000C3F74((void *)result, 0, &v56);
    if (result)
    {
      uint64_t v53 = 0x10000080002;
      if (!v56) {
        uint64_t v53 = 0x20000040001;
      }
      *a4 |= v53;
    }
    return result;
  }
  if (*(void *)a2 == 0x66463F78648862ALL && *(unsigned char *)(a2 + 8) == 44)
  {
    return sub_1000C6330((unint64_t *)result, a4, a5);
  }
  if (*(void *)a2 == 0x66463F78648862ALL && *(unsigned char *)(a2 + 8) == 36)
  {
    return sub_1000C64C8((unint64_t *)result);
  }
  if (*(void *)a2 == 0x66463F78648862ALL && *(unsigned char *)(a2 + 8) == 22)
  {
    uint64_t result = ccder_blob_check_null();
    if (!result) {
      return result;
    }
    uint64_t v54 = *a4;
    uint64_t v55 = 1048584;
    goto LABEL_205;
  }
  if (*(void *)a2 == 0xC6463F78648862ALL && *(unsigned char *)(a2 + 8) == 19)
  {
    uint64_t result = ccder_blob_check_null();
    if (!result) {
      return result;
    }
    uint64_t v24 = *a4 | 0x8000000000;
    goto LABEL_275;
  }
  if (*(void *)a2 == 0xA6463F78648862ALL && *(unsigned char *)(a2 + 8) == 1)
  {
    *a4 |= 0x1000000uLL;
    goto LABEL_242;
  }
  if (*(void *)a2 == 0x66463F78648862ALL && *(unsigned char *)(a2 + 8) == 29)
  {
    uint64_t result = ccder_blob_check_null();
    if (!result) {
      return result;
    }
    uint64_t v24 = *a4 | 0x2000000;
    goto LABEL_275;
  }
  if (*(void *)a2 == 0xC6463F78648862ALL && *(unsigned char *)(a2 + 8) == 14)
  {
    uint64_t result = ccder_blob_check_null();
    if (!result) {
      return result;
    }
    uint64_t v24 = *a4 | 0x4000000;
    goto LABEL_275;
  }
  if (*(void *)a2 != 0x86463F78648862ALL || *(unsigned char *)(a2 + 8) != 3) {
    goto LABEL_242;
  }
  return sub_1000C68F4((unint64_t *)result, a4, a5);
}

uint64_t X509CertificateParseWithExtension(unint64_t *a1, unint64_t *a2, const void *a3, size_t a4)
{
  uint64_t v8 = 720939;
  unint64_t v9 = *a2;
  unint64_t v10 = a2[1];
  if (!ccder_blob_decode_tl()) {
    return v8;
  }
  unint64_t v11 = *a2;
  uint64_t result = X509CertificateParseImplicit((uint64_t)a1, a2, a3, a4);
  uint64_t v8 = result;
  if (result) {
    return v8;
  }
  if (v11 >= 0x5555555555555556)
  {
    __break(0x5513u);
LABEL_11:
    __break(0x5500u);
    goto LABEL_12;
  }
  uint64_t v8 = 720939;
  if (*a2 != v11 - 0x5555555555555556) {
    return v8;
  }
  unint64_t v13 = v11 - v9 - 0x5555555555555556;
  if (v11 - v9 >= 0x5555555555555556) {
    goto LABEL_11;
  }
  if (v10 >= v9 && v13 <= v10 - v9)
  {
    *a1 = v9;
    a1[1] = v13;
    X509PolicyCheckForBlockedKeys((uint64_t)a1);
    return 0;
  }
LABEL_12:
  __break(0x5519u);
  return result;
}

uint64_t X509CertificateParse(unint64_t *a1, unint64_t *a2)
{
  return X509CertificateParseWithExtension(a1, a2, 0, 0);
}

uint64_t X509CertificateParseSPKI(unint64_t *a1, unint64_t *a2, unint64_t *a3, void *a4)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (__CFADD__(*a1, v5)) {
    goto LABEL_31;
  }
  unint64_t v6 = v4 + v5;
  if (v4 > v6) {
    goto LABEL_30;
  }
  uint64_t v10 = 655361;
  unint64_t v14 = *a1;
  unint64_t v15 = v6;
  if (!ccder_blob_decode_tl()) {
    return v10;
  }
  if (!ccder_blob_decode_tl()) {
    return 655363;
  }
  if (v14 >= 0x5555555555555556) {
LABEL_31:
  }
    __break(0x5513u);
  if (v14 > v14 - 0x5555555555555556 || v14 - 0x5555555555555556 > v15) {
    goto LABEL_30;
  }
  unint64_t v13 = v14 - 0x5555555555555556;
  if (!ccder_blob_decode_tl()) {
    return 655362;
  }
  if (a2)
  {
    if (v13 >= v14)
    {
      *a2 = v14;
      a2[1] = 0xAAAAAAAAAAAAAAAALL;
      goto LABEL_12;
    }
LABEL_30:
    __break(0x5519u);
    goto LABEL_31;
  }
LABEL_12:
  unint64_t v11 = v14 - 0x5555555555555556;
  if (v14 > v14 - 0x5555555555555556 || v11 > v13) {
    goto LABEL_30;
  }
  if (v11 == v13)
  {
    if (a3)
    {
      *a3 = 0;
      a3[1] = 0;
    }
  }
  else if (a3)
  {
    *a3 = v11;
    a3[1] = v13 - v11;
  }
  if (v13 > v15 || v14 > v13) {
    goto LABEL_30;
  }
  if (!ccder_blob_decode_bitstring()) {
    return 655364;
  }
  *a4 = 0;
  a4[1] = 0;
  if (v13 == v15) {
    return 0;
  }
  else {
    return 655365;
  }
}

uint64_t X509CertificateParseKey(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = 327691;
  if (a1)
  {
    if (*(void *)(a1 + 96))
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t result = X509CertificateParseSPKI((unint64_t *)(a1 + 88), 0, 0, &v8);
      if (!result)
      {
        if (a2)
        {
          if (a3)
          {
            uint64_t v7 = v9;
            *a2 = v8;
            *a3 = v7;
          }
        }
      }
    }
  }
  return result;
}

uint64_t X509CertificateCheckSignatureDigest(char a1, uint64_t a2, void *a3, uint64_t a4)
{
  long long v16 = 0uLL;
  long long v15 = 0uLL;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v7 = X509CertificateParseSPKI((unint64_t *)(a2 + 88), (unint64_t *)&v16, (unint64_t *)&v15, &v13);
  if (v7) {
    return v7;
  }
  uint64_t v7 = 655632;
  int v9 = compare_octet_string((uint64_t)&v16, (uint64_t)&rsaEncryption);
  uint64_t v10 = (unsigned int (*)(uint64_t))validateSignatureRSA;
  if (v9)
  {
    int v11 = compare_octet_string((uint64_t)&v16, (uint64_t)&ecPublicKey);
    uint64_t v10 = (unsigned int (*)(uint64_t))validateSignatureEC;
    if (v11) {
      return 655617;
    }
  }
  unint64_t v12 = v10;
  if (((a1 & 1) == 0 || compare_octet_string_raw(a4, &CTOidSha1, 5uLL))
    && ((a1 & 4) == 0 || compare_octet_string_raw(a4, &CTOidSha256, 9uLL))
    && ((a1 & 8) == 0 || compare_octet_string_raw(a4, &CTOidSha384, 9uLL))
    && ((a1 & 0x10) == 0 || compare_octet_string_raw(a4, &CTOidSha512, 9uLL)))
  {
    return v7;
  }
  uint64_t result = v13;
  if ((v14 || !v13) && (a3[1] || !*a3))
  {
    if (v12(v13)) {
      return 0;
    }
    else {
      return 655648;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t X509CertificateCheckSignature(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v10[2] = v6;
  v10[3] = v6;
  v10[0] = v6;
  v10[1] = v6;
  v9[0] = v10;
  v9[1] = 64;
  v8[0] = 0;
  v8[1] = 0;
  uint64_t result = sub_1000C5748(a3, a4, (uint64_t)v9, v8);
  if (!result) {
    return X509CertificateCheckSignatureDigest(a1, a2, v9, (uint64_t)v8);
  }
  return result;
}

uint64_t sub_1000C5748(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = compare_octet_string_raw(a2, &sha1WithRSA_oid, 9uLL);
  if (!result) {
    goto LABEL_8;
  }
  uint64_t result = compare_octet_string_raw(a2, &sha256WithRSA_oid, 9uLL);
  if (!result)
  {
LABEL_10:
    *a4 = &CTOidSha256;
    a4[1] = 9;
    if (*(void *)(a3 + 8) < 0x20uLL) {
      goto LABEL_15;
    }
    *(void *)(a3 + _Block_object_dispose(&STACK[0x400], 8) = 32;
    ccsha256_di();
    goto LABEL_14;
  }
  uint64_t result = compare_octet_string_raw(a2, &sha384WithRSA_oid, 9uLL);
  if (!result) {
    goto LABEL_12;
  }
  uint64_t result = compare_octet_string_raw(a2, &sha1WithECDSA_oid, 7uLL);
  if (!result)
  {
LABEL_8:
    *a4 = &CTOidSha1;
    a4[1] = 5;
    if (*(void *)(a3 + 8) < 0x14uLL) {
      goto LABEL_15;
    }
    *(void *)(a3 + _Block_object_dispose(&STACK[0x400], 8) = 20;
    ccsha1_di();
LABEL_14:
    ccdigest();
    return 0;
  }
  uint64_t result = compare_octet_string_raw(a2, &sha256WithECDSA_oid, 8uLL);
  if (!result) {
    goto LABEL_10;
  }
  uint64_t result = compare_octet_string_raw(a2, &sha384WithECDSA_oid, 8uLL);
  if (result) {
    return 656640;
  }
LABEL_12:
  *a4 = &CTOidSha384;
  a4[1] = 9;
  if (*(void *)(a3 + 8) >= 0x30uLL)
  {
    *(void *)(a3 + _Block_object_dispose(&STACK[0x400], 8) = 48;
    ccsha384_di();
    goto LABEL_14;
  }
LABEL_15:
  __break(0x5519u);
  return result;
}

uint64_t X509CertificateCheckSignatureWithPublicKey(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[2] = v7;
  v16[3] = v7;
  v16[0] = v7;
  v16[1] = v7;
  uint64_t v14 = v16;
  uint64_t v15 = 64;
  long long v13 = 0uLL;
  uint64_t v8 = sub_1000C5748(a4, a5, (uint64_t)&v14, &v13);
  if (v8) {
    return v8;
  }
  uint64_t v8 = 655617;
  int v9 = compare_octet_string(a2, (uint64_t)&rsaEncryption);
  uint64_t v10 = (unsigned int (*)(uint64_t))validateSignatureRSA;
  if (v9)
  {
    int v11 = compare_octet_string(a2, (uint64_t)&ecPublicKey);
    uint64_t v10 = (unsigned int (*)(uint64_t))validateSignatureEC;
    if (v11) {
      return v8;
    }
  }
  uint64_t result = *a1;
  if ((a1[1] || !result) && (!v14 || v15))
  {
    if (v10(result)) {
      return 0;
    }
    else {
      return 655648;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t X509CertificateParseGeneralNamesContent(uint64_t a1, uint64_t (*a2)(void, int *, uint64_t), uint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 224);
  uint64_t v4 = *(void *)(a1 + 232);
  if (__CFADD__(v3, v4))
  {
    __break(0x5513u);
LABEL_11:
    __break(0x5519u);
  }
  unint64_t v5 = v3 + v4;
  if (v3 > v5) {
    goto LABEL_11;
  }
  unint64_t v10 = *(void *)(a1 + 224);
  unint64_t v11 = v5;
  while (1)
  {
    if (v10 >= v11) {
      return 0;
    }
    memset(v9, 170, sizeof(v9));
    if ((ccder_blob_decode_GeneralName(&v10, v9, (unint64_t *)&v9[1]) & 1) == 0) {
      break;
    }
    if ((a2(v9[0], &v9[1], a3) & 1) == 0) {
      return 0;
    }
  }
  return 720912;
}

uint64_t X509CertificateSubjectNameGetCommonName(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v20 = v3;
  if (__CFADD__(*a1, v3)) {
    goto LABEL_59;
  }
  unint64_t v4 = v2 + v3;
  if (v2 > v4)
  {
LABEL_58:
    __break(0x5519u);
    goto LABEL_59;
  }
  uint64_t v6 = 720901;
  unint64_t v18 = *a1;
  unint64_t v19 = v4;
  *a2 = 0;
  a2[1] = 0;
  if (v2 < v4)
  {
    while (1)
    {
      if (!ccder_blob_decode_tl() || !v20) {
        return 720898;
      }
      unint64_t v2 = v18;
      if (__CFADD__(v18, v20)) {
        break;
      }
      unint64_t v7 = v18 + v20;
      if (v18 > v18 + v20 || v7 > v19) {
        goto LABEL_58;
      }
      unint64_t v16 = v18;
      unint64_t v17 = v18 + v20;
      while (v2 < v7)
      {
        if (!ccder_blob_decode_tl()) {
          return 720899;
        }
        if (__CFADD__(v16, v20)) {
          goto LABEL_59;
        }
        if (v16 > v16 + v20 || v16 + v20 > v17) {
          goto LABEL_58;
        }
        unint64_t v15 = v16 + v20;
        if (!ccder_blob_decode_tl()) {
          return 720900;
        }
        unint64_t v2 = v16 + v20;
        if (v16 > v15) {
          goto LABEL_58;
        }
        if (__CFADD__(v16, v20)) {
          goto LABEL_59;
        }
        if (v16 > v16 + v20) {
          goto LABEL_58;
        }
        unint64_t v14 = v16 + v20;
        if (v20 == 3 && *(_WORD *)v16 == 1109 && *(unsigned char *)(v16 + 2) == 3)
        {
          unint64_t v12 = v16 + v20;
          unint64_t v13 = v16 + v20;
          if ((ccder_blob_decode_tl() & 1) == 0)
          {
            if (v14 > v15) {
              goto LABEL_58;
            }
            unint64_t v12 = v16 + v20;
            unint64_t v13 = v16 + v20;
            if ((ccder_blob_decode_tl() & 1) == 0)
            {
              if (v14 > v15) {
                goto LABEL_58;
              }
              unint64_t v12 = v16 + v20;
              unint64_t v13 = v16 + v20;
              if (!ccder_blob_decode_tl()) {
                return v6;
              }
            }
          }
          if (__CFADD__(v12, v20)) {
            goto LABEL_59;
          }
          unint64_t v2 = v12 + v20;
          if (v15 != v12 + v20) {
            return 720902;
          }
          if (v13 < v12 || v20 > v13 - v12) {
            goto LABEL_58;
          }
          *a2 = v12;
          a2[1] = v20;
        }
        unint64_t v7 = v18 + v20;
        if (v2 > v17 || v16 > v2) {
          goto LABEL_58;
        }
        unint64_t v16 = v2;
      }
      if (v2 != v7) {
        return 720903;
      }
      unint64_t v4 = v19;
      if (v2 > v19 || v18 > v2) {
        goto LABEL_58;
      }
      unint64_t v18 = v2;
      if (v2 >= v19) {
        goto LABEL_46;
      }
    }
LABEL_59:
    __break(0x5513u);
  }
LABEL_46:
  if (v2 != v4) {
    return 720904;
  }
  if (a2[1] && *a2) {
    return 0;
  }
  *a2 = 0;
  a2[1] = 0;
  return 720905;
}

BOOL X509CertificateValidAtTime(uint64_t a1, time_t a2)
{
  BOOL result = 0;
  time_t v5 = 0;
  time_t v6 = 0;
  if (a1 && a2 != -1) {
    return !X509CertificateGetNotBefore(a1, &v6)
  }
        && !X509CertificateGetNotAfter(a1, &v5)
        && difftime(a2, v6) >= 0.0
        && difftime(a2, v5) <= 0.0;
  return result;
}

uint64_t X509CertificateGetNotBefore(uint64_t a1, time_t *a2)
{
  v4[0] = (const char *)0xAAAAAAAAAAAAAAAALL;
  v4[1] = (const char *)0xAAAAAAAAAAAAAAAALL;
  uint64_t result = X509CertificateParseValidity(a1);
  if (!result) {
    return sub_1000C60D0(v4, a2);
  }
  return result;
}

uint64_t X509CertificateGetNotAfter(uint64_t a1, time_t *a2)
{
  v4[0] = (const char *)0xAAAAAAAAAAAAAAAALL;
  v4[1] = (const char *)0xAAAAAAAAAAAAAAAALL;
  uint64_t result = X509CertificateParseValidity(a1);
  if (!result) {
    return sub_1000C60D0(v4, a2);
  }
  return result;
}

BOOL X509CertificateIsValid(uint64_t a1)
{
  time_t v2 = time(0);
  return X509CertificateValidAtTime(a1, v2);
}

uint64_t X509CertificateParseValidity(uint64_t result)
{
  uint64_t v1 = 720906;
  if (!result) {
    return v1;
  }
  unint64_t v2 = *(void *)(result + 72);
  uint64_t v3 = *(void *)(result + 80);
  if (!v2 || v3 == 0) {
    return v1;
  }
  if (__CFADD__(v2, v3))
  {
    __break(0x5513u);
  }
  else
  {
    unint64_t v5 = v2 + v3;
    if (v2 <= v5)
    {
      v6[0] = *(void *)(result + 72);
      v6[1] = v5;
      if (!ccder_blob_decode_Time(v6)) {
        return 720907;
      }
      if (ccder_blob_decode_Time(v6)) {
        return 0;
      }
      return 720908;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t sub_1000C60D0(const char **a1, time_t *a2)
{
  uint64_t v2 = 720909;
  if (!a1) {
    return v2;
  }
  unint64_t v4 = a1[1];
  if (((unint64_t)v4 | 2) != 0xF) {
    return v2;
  }
  v11.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v11.tm_mon = v6;
  *(_OWORD *)&v11.tm_isdst = v6;
  *(_OWORD *)&v11.tm_sec = v6;
  unint64_t v7 = *a1;
  if (v4 == (const char *)13)
  {
    uint64_t result = (uint64_t)strptime(v7, "%y%m%d%H%M%SZ", &v11);
    if (result && v11.tm_year >= 150) {
      v11.tm_year -= 100;
    }
  }
  else
  {
    uint64_t result = (uint64_t)strptime(v7, "%Y%m%d%H%M%SZ", &v11);
  }
  int v9 = a1[1];
  if (!__CFADD__(*a1, v9))
  {
    if ((const char *)result != &v9[(void)*a1]) {
      return 720910;
    }
    time_t v10 = timegm(&v11);
    if (v10 == -1) {
      return 720911;
    }
    uint64_t v2 = 0;
    if (a2) {
      *a2 = v10;
    }
    return v2;
  }
  __break(0x5513u);
  return result;
}

BOOL sub_1000C61F4(unint64_t *a1, void *a2, unint64_t *a3)
{
  unint64_t v3 = a1[1];
  if (*a1 > v3) {
    goto LABEL_19;
  }
  unint64_t v12 = *a1;
  unint64_t v13 = a1[1];
  unint64_t v11 = v3 - *a1;
  if (ccder_blob_decode_tl()) {
    goto LABEL_5;
  }
  if (*a1 > a1[1]) {
    goto LABEL_19;
  }
  unint64_t v12 = *a1;
  unint64_t v13 = a1[1];
  if (ccder_blob_decode_tl())
  {
LABEL_5:
    unint64_t v8 = v12;
    unint64_t v7 = v13;
    if (v12 > v13) {
      goto LABEL_19;
    }
    *a1 = v12;
    a1[1] = v13;
    unint64_t v9 = v11;
  }
  else
  {
    unint64_t v8 = *a1;
    unint64_t v7 = a1[1];
    unint64_t v9 = v7 - *a1;
  }
  if (__CFADD__(v8, v9)) {
    goto LABEL_20;
  }
  if (v7 == v8 + v9)
  {
    if (!v9) {
      goto LABEL_16;
    }
    if (!a3)
    {
LABEL_15:
      *a2 |= 0x40000000uLL;
LABEL_16:
      if (v8 <= v7)
      {
        *a1 = v7;
        return v7 == v8 + v9;
      }
      goto LABEL_19;
    }
    if (v8 <= v7 && v9 <= v7 - v8)
    {
      *a3 = v8;
      a3[1] = v9;
      goto LABEL_15;
    }
LABEL_19:
    __break(0x5519u);
LABEL_20:
    __break(0x5513u);
  }
  return v7 == v8 + v9;
}

uint64_t sub_1000C6330(unint64_t *a1, void *a2, unint64_t *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    unint64_t v7 = *a1;
    if (*a1 >= 0x5555555555555556)
    {
      __break(0x5513u);
      goto LABEL_12;
    }
    unint64_t v8 = v7 - 0x5555555555555556;
    if (a1[1] != v7 - 0x5555555555555556) {
      return 0;
    }
    *a2 |= 0x30000000000uLL;
    if (a3)
    {
      if (v7 > v8) {
        goto LABEL_12;
      }
      *a3 = v7;
      a3[1] = 0xAAAAAAAAAAAAAAAALL;
    }
    if (v7 <= v8)
    {
      *a1 = v8;
      return 1;
    }
LABEL_12:
    __break(0x5519u);
  }
  return result;
}

uint64_t sub_1000C64C8(unint64_t *a1)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    unint64_t v3 = *a1;
    if (*a1 >= 0x5555555555555556)
    {
      __break(0x5513u);
    }
    else
    {
      unint64_t v4 = a1[1];
      if (v4 != v3 - 0x5555555555555556) {
        return 0;
      }
      if (v3 <= v4)
      {
        *a1 = v4;
        return 1;
      }
    }
    __break(0x5519u);
  }
  return result;
}

uint64_t sub_1000C65B4(unint64_t *a1, void *a2, unint64_t *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    unint64_t v7 = *a1;
    if (*a1 >= 0x5555555555555556)
    {
      __break(0x5513u);
    }
    else
    {
      unint64_t v8 = a1[1];
      if (v8 != v7 - 0x5555555555555556) {
        return 0;
      }
      if (a3)
      {
        if (v8 < v7 || v8 - v7 < 0xAAAAAAAAAAAAAAAALL) {
          goto LABEL_13;
        }
        *a3 = v7;
        a3[1] = 0xAAAAAAAAAAAAAAAALL;
      }
      *a2 |= 0x30000000uLL;
      if (v7 <= v8)
      {
        *a1 = v8;
        return 1;
      }
    }
LABEL_13:
    __break(0x5519u);
  }
  return result;
}

uint64_t sub_1000C6698()
{
  return 0;
}

uint64_t sub_1000C6824(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, unint64_t *a5)
{
  uint64_t result = ccder_blob_check_null();
  if (result)
  {
    if (a2 > 0xFFFFFFFFFFFFFFF6) {
      goto LABEL_26;
    }
    if (__CFADD__(a2, a3)) {
      goto LABEL_26;
    }
    unint64_t v10 = a2 + a3;
    if (a2 + a3 == -1) {
      goto LABEL_26;
    }
    unint64_t v11 = a2 + 9;
    unint64_t v12 = (char *)(a2 + 9);
    while (1)
    {
      BOOL v13 = (unint64_t)v12 < v10 && (unint64_t)v12 >= a2;
      BOOL v14 = v13;
      if ((unint64_t)v12 >= v10 - 1) {
        break;
      }
      if (!v14) {
        goto LABEL_25;
      }
      int v15 = *v12++;
      if ((v15 & 0x80000000) == 0) {
        return 0;
      }
    }
    if (!v14)
    {
LABEL_25:
      __break(0x5519u);
LABEL_26:
      __break(0x5513u);
      return result;
    }
    if ((*v12 & 0x80000000) == 0)
    {
      if (!a5)
      {
LABEL_22:
        *a4 |= (unint64_t)&_mh_execute_header;
        return 1;
      }
      if (v11 >= a2 && v11 <= v10)
      {
        *a5 = v11;
        a5[1] = a3 - 9;
        goto LABEL_22;
      }
      goto LABEL_25;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1000C68F4(unint64_t *a1, void *a2, unint64_t *a3)
{
  uint64_t result = ccder_blob_decode_tl();
  if (result)
  {
    unint64_t v7 = *a1;
    if (*a1 >= 0x5555555555555556) {
      goto LABEL_17;
    }
    if (a1[1] != v7 - 0x5555555555555556) {
      return 0;
    }
    if (v7 > v7 - 0x5555555555555556) {
      goto LABEL_18;
    }
    unint64_t v10 = *a1;
    unint64_t v11 = v7 - 0x5555555555555556;
    uint64_t result = ccder_blob_decode_tl();
    if (result)
    {
      uint64_t result = ccder_blob_decode_tl();
      if (result)
      {
        if (a3)
        {
          if (v11 < v10 || v11 - v10 < 0xAAAAAAAAAAAAAAAALL) {
            goto LABEL_18;
          }
          *a3 = v10;
          a3[1] = 0xAAAAAAAAAAAAAAAALL;
        }
        *a2 |= 0x240000800000uLL;
        unint64_t v8 = *a1;
        if (*a1 < 0x5555555555555556)
        {
          unint64_t v9 = v8 - 0x5555555555555556;
          if (v8 <= v8 - 0x5555555555555556 && v9 <= a1[1])
          {
            *a1 = v9;
            return 1;
          }
LABEL_18:
          __break(0x5519u);
          return result;
        }
LABEL_17:
        __break(0x5513u);
        goto LABEL_18;
      }
    }
  }
  return result;
}

unint64_t *sub_1000C6A48(unint64_t *result, void *a2, unint64_t *a3)
{
  unint64_t v4 = *result;
  unint64_t v3 = result[1];
  unint64_t v5 = v3 - *result;
  if (v5 != 32) {
    return (unint64_t *)(v5 == 32);
  }
  if (a3)
  {
    if (v4 > v3)
    {
LABEL_12:
      __break(0x5519u);
      goto LABEL_13;
    }
    *a3 = v4;
    a3[1] = 32;
  }
  *a2 |= 0xC00000000uLL;
  if (v4 < 0xFFFFFFFFFFFFFFE0)
  {
    unint64_t v6 = v4 + 32;
    if (v4 + 32 <= v3 && v4 <= v6)
    {
      *uint64_t result = v6;
      return (unint64_t *)(v5 == 32);
    }
    goto LABEL_12;
  }
LABEL_13:
  __break(0x5513u);
  return result;
}

unint64_t *X509ChainParseCertificateSet(unint64_t *result, unint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5 = 0;
  *a4 = 0;
  a4[1] = 0;
  BOOL v6 = *result >= result[1] || a3 == 0;
  if (v6)
  {
LABEL_6:
    if (a5)
    {
      uint64_t result = 0;
      *a5 = v5;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unint64_t v9 = result;
    uint64_t v10 = 0;
    unint64_t v11 = a2 + 304 * a3;
    unint64_t v12 = ~a2;
    BOOL v13 = a4 + 1;
    BOOL v14 = (void *)(a2 + 272);
    uint64_t v15 = a3 - 1;
    unint64_t v21 = a2 + 272;
    while ((unsigned __int128)(v10 * (__int128)304) >> 64 == (304 * v10) >> 63 && 304 * v10 <= v12)
    {
      unint64_t v16 = v14 - 34;
      if (v14 != (void *)272 && ((unint64_t)v16 >= v11 || (unint64_t)v16 < a2))
      {
LABEL_30:
        __break(0x5519u);
        break;
      }
      uint64_t result = (unint64_t *)X509CertificateParse(v14 - 34, v9);
      if (result) {
        return result;
      }
      if (v10)
      {
        if ((unint64_t)v16 < a2) {
          goto LABEL_30;
        }
        if ((unint64_t)(v14 + 4) > v11) {
          goto LABEL_30;
        }
        unint64_t v17 = (void *)*v13;
        void *v14 = 0;
        v14[1] = v17;
        if (v14 != (void *)272 && (unint64_t)v16 >= v11) {
          goto LABEL_30;
        }
        *unint64_t v17 = v16;
        *BOOL v13 = (unint64_t)v14;
      }
      else
      {
        uint64_t v18 = *a4;
        *(void *)(a2 + 272) = *a4;
        if (v18) {
          unint64_t v19 = (unint64_t *)(v18 + 280);
        }
        else {
          unint64_t v19 = v13;
        }
        *unint64_t v19 = v21;
        *a4 = v16;
        *(void *)(a2 + 280) = a4;
      }
      uint64_t v5 = v10 + 1;
      if (*v9 < v9[1])
      {
        v14 += 38;
        BOOL v6 = v15 == v10++;
        if (!v6) {
          continue;
        }
      }
      goto LABEL_6;
    }
    __break(0x5513u);
  }
  return result;
}

uint64_t X509ChainGetCertificateUsingKeyIdentifier(uint64_t *a1, uint64_t a2)
{
  for (uint64_t i = *a1; i; uint64_t i = *(void *)(i + 272))
  {
    if (*(void *)(i + 192) && !compare_octet_string(a2, i + 184)) {
      break;
    }
  }
  return i;
}

void *X509ChainResetChain(void *result, void *a2)
{
  *uint64_t result = 0;
  result[1] = result;
  uint64_t v2 = (void *)*a2;
  if (*a2)
  {
    do
    {
      v2[36] = 0;
      v2[37] = 0;
      uint64_t v2 = (void *)v2[34];
    }
    while (v2);
  }
  return result;
}

uint64_t X509ChainBuildPathPartial(void *a1, uint64_t *a2, void *a3, int a4)
{
  if (!a1) {
    return 327691;
  }
  unint64_t v7 = a1;
  *a3 = a1;
  a3[1] = a1 + 36;
  a1[36] = 0;
  a1[37] = a3;
  uint64_t v8 = (uint64_t)(a1 + 15);
  uint64_t result = compare_octet_string((uint64_t)(a1 + 15), (uint64_t)(a1 + 13));
  if (result)
  {
    while (1)
    {
      uint64_t v10 = (uint64_t)(v7 + 21);
      if (!v7[22]
        || (uint64_t CertificateUsingKeyIdentifier = X509ChainGetCertificateUsingKeyIdentifier(a2, (uint64_t)(v7 + 21))) == 0
        || (unint64_t v7 = (void *)CertificateUsingKeyIdentifier,
            compare_octet_string(CertificateUsingKeyIdentifier + 104, v8)))
      {
        unint64_t v7 = (void *)*a2;
        if (!*a2)
        {
LABEL_16:
          if (sub_1000C6DD0(v10, 1)) {
            return 0;
          }
          uint64_t v15 = sub_1000C6E68(v10);
          if (a4) {
            unsigned int v16 = 0;
          }
          else {
            unsigned int v16 = 524296;
          }
          if (v15) {
            return 0;
          }
          else {
            return v16;
          }
        }
        while (compare_octet_string(v8, (uint64_t)(v7 + 13)))
        {
          unint64_t v7 = (void *)v7[34];
          if (!v7) {
            goto LABEL_16;
          }
        }
      }
      unint64_t v12 = (void *)*a3;
      if (*a3) {
        break;
      }
LABEL_13:
      BOOL v13 = (void *)a3[1];
      v7[36] = 0;
      v7[37] = v13;
      *BOOL v13 = v7;
      a3[1] = v7 + 36;
      uint64_t v8 = (uint64_t)(v7 + 15);
      int v14 = compare_octet_string((uint64_t)(v7 + 15), (uint64_t)(v7 + 13));
      uint64_t result = 0;
      if (!v14) {
        return result;
      }
    }
    while (v12 != v7)
    {
      unint64_t v12 = (void *)v12[36];
      if (!v12) {
        goto LABEL_13;
      }
    }
    return 524297;
  }
  return result;
}

uint64_t sub_1000C6DD0(uint64_t result, int a2)
{
  uint64_t v2 = &numAppleRoots;
  if (!a2) {
    uint64_t v2 = &numAppleProdRoots;
  }
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = result;
    for (uint64_t i = (uint64_t *)&AppleRoots; i < (uint64_t *)&UcrtRootPublicKey && i >= (uint64_t *)&AppleRoots; ++i)
    {
      uint64_t v7 = *i;
      uint64_t result = compare_octet_string(v4, *i + 184);
      if (!result) {
        return v7;
      }
      if (!--v3) {
        return 0;
      }
    }
    __break(0x5519u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_1000C6E68(uint64_t result)
{
  uint64_t v1 = numBAARoots;
  if (numBAARoots)
  {
    uint64_t v2 = result;
    for (uint64_t i = (uint64_t *)&BAARoots; i < (uint64_t *)&SEKTestRootPublicKey && i >= (uint64_t *)&BAARoots; ++i)
    {
      uint64_t v5 = *i;
      uint64_t result = compare_octet_string(v2, *i + 184);
      if (!result) {
        return v5;
      }
      if (!--v1) {
        return 0;
      }
    }
    __break(0x5519u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t X509ChainBuildPath(void *a1, uint64_t *a2, void *a3)
{
  return X509ChainBuildPathPartial(a1, a2, a3, 0);
}

uint64_t X509ChainCheckPathWithOptions(char a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  BOOL v6 = a2;
  uint64_t v8 = *a2;
  if (a3)
  {
    uint64_t v9 = *(void *)(a3 + 48);
    if (v9)
    {
      if (*(void *)(v9 + 8))
      {
        if (compare_octet_string(v9, v8 + 208)) {
          return 327701;
        }
        uint64_t v8 = *v6;
      }
    }
  }
  if (v8)
  {
    unint64_t v31 = v6;
    unint64_t v32 = a4;
    unint64_t v11 = 0;
    int v12 = 0;
    char v33 = 0;
    uint64_t v13 = -1;
    while (1)
    {
      unint64_t v14 = *(void *)(v8 + 288);
      unint64_t v15 = v14 + 304;
      if (v14)
      {
LABEL_10:
        char v16 = 0;
        goto LABEL_11;
      }
      if (!compare_octet_string(v8 + 120, v8 + 104))
      {
        char v16 = 0;
        unint64_t v15 = v8 + 304;
        unint64_t v14 = v8;
        goto LABEL_11;
      }
      if (!a3) {
        return v12 | 0x9000Du;
      }
      if (*(unsigned char *)(a3 + 16))
      {
        uint64_t v20 = sub_1000C6DD0(v8 + 168, *(unsigned __int8 *)(a3 + 17));
      }
      else
      {
        if (!*(void *)(a3 + 24)) {
          goto LABEL_58;
        }
        uint64_t v20 = sub_1000C6E68(v8 + 168);
      }
      unint64_t v14 = v20;
      v33 |= v20 != 0;
      unint64_t v15 = v20 + 304;
      if (v20) {
        goto LABEL_10;
      }
LABEL_58:
      if (!*(unsigned char *)(a3 + 19)) {
        return v12 | 0x9000Du;
      }
      unint64_t v14 = 0;
      char v16 = 1;
LABEL_11:
      if (v11 && *(void *)(v8 + 32) >= 2uLL)
      {
        if (!*(unsigned char *)(v8 + 265))
        {
          int v30 = 589825;
          return v12 | v30;
        }
        if ((*(unsigned char *)(v8 + 264) & 4) == 0)
        {
          int v30 = 589826;
          return v12 | v30;
        }
      }
      unint64_t v17 = *(void *)(v8 + 200);
      if (v17) {
        BOOL v18 = v17 >= v11;
      }
      else {
        BOOL v18 = 1;
      }
      if (!v18)
      {
        int v30 = 589827;
        return v12 | v30;
      }
      if (*(unsigned char *)(v8 + 266))
      {
        int v30 = 589831;
        return v12 | v30;
      }
      if (compare_octet_string(v8 + 40, v8 + 152))
      {
        int v30 = 589828;
        return v12 | v30;
      }
      if ((v16 & 1) == 0 && *(void *)(v8 + 168) && *(void *)(v8 + 176))
      {
        if (v14 >= v15) {
          goto LABEL_100;
        }
        if (compare_octet_string(v8 + 168, v14 + 184)) {
          return v12 | 0x9000Au;
        }
      }
      if (a3 && v11 && (*(void *)(v8 + 240) & *(void *)(a3 + 8)) == 0) {
        X509PolicySetFlagsForCommonNames(v8);
      }
      if (v14 == v8 && !*(void *)(v8 + 240))
      {
        X509PolicySetFlagsForRoots(a3, v8);
        if (a3)
        {
LABEL_34:
          if (*(unsigned char *)(a3 + 18) && !X509CertificateIsValid(v8)) {
            return v12 | 0x90009u;
          }
          uint64_t v19 = *(void *)(a3 + 8);
          if (!v11 && (*(void *)(v8 + 240) & v19) == 0)
          {
            X509PolicySetFlagsForMFI(v8);
            uint64_t v19 = *(void *)(a3 + 8);
          }
          v13 &= *(void *)(v8 + 240);
          if (v19 && (v19 & v13) == 0)
          {
            int v30 = 589829;
            return v12 | v30;
          }
          goto LABEL_49;
        }
      }
      else if (a3)
      {
        goto LABEL_34;
      }
      v13 &= *(void *)(v8 + 240);
LABEL_49:
      a1 |= v14 == v8;
      if ((v16 & 1) == 0)
      {
        if (v14 >= v15) {
          goto LABEL_100;
        }
        uint64_t result = X509CertificateCheckSignature(a1, v14, v8 + 16, v8 + 40);
        if (result) {
          return result;
        }
      }
      unint64_t v21 = v11 + 1;
      if (v11 == -1) {
        goto LABEL_99;
      }
      uint64_t v8 = *(void *)(v8 + 288);
      v12 += 256;
      ++v11;
      if (!v8)
      {
        BOOL v6 = v31;
        a4 = v32;
        LOBYTE(v_Block_object_dispose(&STACK[0x400], 8) = v33;
        if (a3) {
          goto LABEL_61;
        }
        goto LABEL_87;
      }
    }
  }
  unint64_t v21 = 0;
  uint64_t v13 = -1;
  if (!a3) {
    goto LABEL_87;
  }
LABEL_61:
  if (*(void *)a3)
  {
    unint64_t v22 = v21;
    if (v8)
    {
      unint64_t v22 = v21 + 1;
      if (v21 == -1)
      {
LABEL_99:
        __break(0x5500u);
LABEL_100:
        __break(0x5519u);
      }
    }
    if (*(void *)a3 != v22) {
      return (v22 << 8) | 0x90006u;
    }
  }
  uint64_t v23 = *(void *)(a3 + 24);
  if (!v23 || !*(void *)(v23 + 8))
  {
    if (!*(unsigned char *)(a3 + 16)) {
      goto LABEL_87;
    }
    int v24 = v21 << 8;
    uint64_t v25 = **(void **)(v6[1] + 8);
LABEL_75:
    uint64_t v27 = 184;
    if (v8) {
      uint64_t v27 = 168;
    }
    uint64_t v28 = sub_1000C6DD0(v25 + v27, *(unsigned __int8 *)(a3 + 17));
    if (!v28) {
      return v24 | 0x9000Bu;
    }
    uint64_t v29 = v28;
    if ((v8 & 1) == 0 && !compare_octet_string(v25 + 88, v28 + 88)
      || !X509CertificateCheckSignature(29, v29, v25 + 16, v25 + 40))
    {
      goto LABEL_87;
    }
    int v26 = 589836;
    return v24 | v26;
  }
  int v24 = v21 << 8;
  uint64_t v25 = **(void **)(v6[1] + 8);
  if (*(unsigned char *)(a3 + 16)) {
    goto LABEL_75;
  }
  memset(v35, 170, sizeof(v35));
  v34[0] = 0xAAAAAAAAAAAAAAAALL;
  v34[1] = 0xAAAAAAAAAAAAAAAALL;
  if (X509CertificateParseSPKI((unint64_t *)(v25 + 88), &v35[2], v34, v35))
  {
LABEL_72:
    int v26 = 589832;
    return v24 | v26;
  }
  if (compare_octet_string((uint64_t)&v35[2], *(void *)(a3 + 32))
    || compare_octet_string((uint64_t)v35, *(void *)(a3 + 24)))
  {
    if (X509CertificateCheckSignatureWithPublicKey(*(uint64_t **)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), v25 + 16, v25 + 40))goto LABEL_72; {
  }
    }
  else if (!compare_octet_string(*(void *)(a3 + 32), (uint64_t)&ecPublicKey))
  {
    compare_octet_string((uint64_t)v34, *(void *)(a3 + 40));
  }
LABEL_87:
  uint64_t result = 0;
  if (a4) {
    *a4 = v13;
  }
  return result;
}

uint64_t X509ChainCheckPath(char a1, uint64_t *a2, uint64_t a3)
{
  return X509ChainCheckPathWithOptions(a1, a2, a3, 0);
}

void sub_1000C7408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C7444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C7480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C74BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C7530(unint64_t *a1)
{
  uint64_t v1 = sub_100006494(*a1);
  sub_100006478((void *)&_mh_execute_header, &_os_log_default, v2, "Posted connection failure to symptom over interface %@", v3, v4, v5, v6, 2u);
}

void sub_1000C75C0()
{
  sub_10000643C();
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "reportConnectionFailureOnConnectionType - Couldn't link symptoms -- bailing {_symptom_create: %p, _symptom_set_qualifier: %p, _symptom_send: %p}", v0, 0x20u);
}

void sub_1000C764C(unint64_t *a1)
{
  uint64_t v1 = sub_100006494(*a1);
  sub_100006478((void *)&_mh_execute_header, &_os_log_default, v2, "Posted connection success to symptom over interface %@", v3, v4, v5, v6, 2u);
}

void sub_1000C76DC()
{
  sub_10000643C();
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "reportConnectionSuccessOnConnectionType - Couldn't link symptoms -- bailing {_symptom_create: %p, _symptom_set_qualifier: %p, _symptom_send: %p}", v0, 0x20u);
}

void sub_1000C7768(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412546;
  uint64_t v4 = v2;
  __int16 v5 = 2048;
  uint64_t v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "Posted ip address to symptom over interface %@ (%llu)", (uint8_t *)&v3, 0x16u);
}

void sub_1000C77F8()
{
  sub_10000643C();
  __int16 v2 = v0;
  int v3 = &symptom_set_additional_qualifier;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "reportClientIPAddress - Couldn't link symptoms -- bailing {_symptom_create: %p, _symptom_set_qualifier: %p, _symptom_send: %p, symptom_set_additional_qualifier: %p}", v1, 0x2Au);
}

void sub_1000C7898()
{
  int v0 = 136315138;
  uint64_t v1 = "void APSChannelRecordBulkCopy(APSChannelRecordRef, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *, CFNumberRef *)";
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "APSMessageStore - NULL message passed to %s", (uint8_t *)&v0, 0xCu);
}

void sub_1000C7920(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "%@: Tokens can only be saved with a system token attached!", (uint8_t *)&v2, 0xCu);
}

void sub_1000C7998()
{
  sub_10000EFD8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@: SecItemCopyMatching() failed: %ld - isAppSpecificTokenValid");
}

void sub_1000C7A00()
{
  sub_10000EFD8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@: SecItemDelete() failed: %ld - setTokenForDomain");
}

void sub_1000C7A68()
{
  sub_10000EFD8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@: SecItemAdd()/SecItemUpdate() failed: %ld - setTokenForDomain");
}

void sub_1000C7AD0()
{
  sub_10000EFD8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@: SecItemDelete() failed: %ld - deleteAppSpecificTokens");
}

void sub_1000C7B38()
{
  sub_10000EFD8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@: SecItemCopyMatching() failed: %ld - copyTokenForDomain");
}

uint64_t sub_1000C7BA0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_1000C7BD8()
{
  sub_1000185E8();
  sub_10001862C((void *)&_mh_execute_header, v0, v1, "KeychainDict key not a string %@ - _deserializeSaltStoreKeychainData %@");
}

void sub_1000C7C40()
{
  sub_1000185E8();
  sub_10001862C((void *)&_mh_execute_header, v0, v1, "KeychainDict not a dictionary %@ - _deserializeSaltStoreKeychainData %@");
}

void sub_1000C7CA8()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "Plist deserialization failed %@ - _deserializeSaltStoreKeychainData %@");
}

void sub_1000C7D10()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "Plist serialization failed %@ - _serializeSaltStoreKeychainDict %@");
}

void sub_1000C7D78()
{
  sub_100018600();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "SecItemCopyMatching() failed: %ld - _loadSaltStoreKeychainData", v2, v3, v4, v5, v6);
}

void sub_1000C7DE0()
{
  sub_100018600();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "SecItemDelete() failed: %ld - _saveSaltStoreKeychainData", v2, v3, v4, v5, v6);
}

void sub_1000C7E48()
{
  sub_100018600();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "SecItemAdd()/SecItemUpdate() failed: %ld - _saveSaltStoreKeychainData", v2, v3, v4, v5, v6);
}

void sub_1000C7EB0(void *a1, NSObject *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  int v6 = 138413058;
  uint64_t v7 = v2;
  __int16 v8 = 2112;
  uint64_t v9 = v3;
  __int16 v10 = 2112;
  uint64_t v11 = v4;
  __int16 v12 = 2112;
  uint64_t v13 = v5;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "%@ Didn't receive app-specific token for %@ topicHash %@ appId %@!!", (uint8_t *)&v6, 0x2Au);
}

void sub_1000C7F4C()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@ trying to send message tracing ack from proxy %@ but we currently don't have connected interface.");
}

void sub_1000C7FB4(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 protocolConnectionEstablisher];
  int v5 = 138412546;
  int v6 = a1;
  __int16 v7 = 2048;
  id v8 = [v4 countConnectedInterfaces];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@: Terminating connection, deleting identity and clearing public token. Connected on %lu interfaces", (uint8_t *)&v5, 0x16u);
}

void sub_1000C8068()
{
  sub_10003A5F0();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%@: Returning connected %@ on ultra constrained interface", v1, 0x16u);
}

void sub_1000C8100()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "Received incoming push notification for topic: %@ but for a completely unknown token %@");
}

void sub_1000C8168()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "Received response for unknown task with message dictionary %@", v2, v3, v4, v5, v6);
}

void sub_1000C81D0()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "Received notification for unknown task with message parameters %@", v2, v3, v4, v5, v6);
}

void sub_1000C8238(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "We received a filter update message from the server but filter optimization is not enabled - this shouldn't happen.", v1, 2u);
}

void sub_1000C827C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "We received a filter update message from the server but we don't expected responses - this shouldn't happen.", v1, 2u);
}

void sub_1000C82C0()
{
  sub_10003A5E4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "%@ invalid presence without server timestamp.  Rolling token...", v1, 0xCu);
}

void sub_1000C8334()
{
  sub_10003A5F0();
  sub_10001862C((void *)&_mh_execute_header, v0, v1, "%@ invalid presence without server timestamp.  Telling client %@ to roll token...");
}

void sub_1000C83A0()
{
  sub_10003A5E4();
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "%@: Invalid presence override set, overriding presence response of %u, treating as invalid", v2, 0x12u);
}

void sub_1000C8424()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "%@: Received a presence response for a client that's no longer connected.  Dropping...", v2, v3, v4, v5, v6);
}

void sub_1000C848C()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@: Ignoring duplicate message received with topic: '%@'");
}

void sub_1000C84F4()
{
  sub_1000185E8();
  sub_10001862C((void *)&_mh_execute_header, v0, v1, "%@: Failed to parse JSON message payload for topic '%@'");
}

void sub_1000C855C()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@: Received message for unknown topic hash '%@'");
}

void sub_1000C85C4()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@: Received message for recently removed topic '%@'");
}

void sub_1000C862C()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@: Received message for ignored topic '%@'");
}

void sub_1000C8694()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "Unable to deserialize payload; error %@", v2, v3, v4, v5, v6);
}

void sub_1000C86FC()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "Unable to deserialize payload; exception %@", v2, v3, v4, v5, v6);
}

void sub_1000C8764(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *SafetyAlertsLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"APSUserCourier.m", 77, @"%s", *a1);

  __break(1u);
}

void sub_1000C87E4()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getSafetyAlertsClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"APSUserCourier.m", 78, @"Unable to find class %s", "SafetyAlerts");

  __break(1u);
}

void sub_1000C8860(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Asked to send tracking message on invalid interface", v1, 2u);
}

void sub_1000C88A4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Asked to mark tracking message on invalid interface", v1, 2u);
}

void sub_1000C88E8(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Generating salted token when unsalted hash is in filter %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000C8964(id *a1, NSObject *a2)
{
  uint64_t v4 = [*a1 topic];
  uint64_t v5 = [*a1 identifier];
  int v6 = 138412546;
  __int16 v7 = v4;
  __int16 v8 = 2112;
  uint64_t v9 = v5;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Failed to obtain or create per-app token appId for topic %@ identifier %@", (uint8_t *)&v6, 0x16u);
}

void sub_1000C8A2C(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = 138412546;
  uint64_t v5 = v2;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "%@ Didn't receive app-specific token for %@!!", (uint8_t *)&v4, 0x16u);
}

void sub_1000C8AB4()
{
  sub_10003DD4C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Didn't receive app-specific token response code", v1, 2u);
}

void sub_1000C8AF4()
{
  sub_10003DD4C();
  sub_10003DD30((void *)&_mh_execute_header, v0, v1, "Internal error in token generate response", v2, v3, v4, v5, v6);
}

void sub_1000C8B28(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid app-specific token generate response: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C8BA0()
{
  sub_10003DD4C();
  sub_10003DD30((void *)&_mh_execute_header, v0, v1, "Missing topic error in token generate response", v2, v3, v4, v5, v6);
}

void sub_1000C8BD4()
{
  sub_10003DD4C();
  sub_10003DD30((void *)&_mh_execute_header, v0, v1, "Unknown identity error in token generate response", v2, v3, v4, v5, v6);
}

void sub_1000C8C08()
{
  sub_10003DD4C();
  sub_10003DD30((void *)&_mh_execute_header, v0, v1, "Invalid flag error in token generate response", v2, v3, v4, v5, v6);
}

void sub_1000C8C3C()
{
  sub_10003DD4C();
  sub_10003DD30((void *)&_mh_execute_header, v0, v1, "Invalid vapid hash error in token generate response", v2, v3, v4, v5, v6);
}

void sub_1000C8C70(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "APSDaemon exception caught on main thread: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C8CE8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed generating JSON for debug output {error: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_1000C8D60(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Failed to register notify token with status %d", (uint8_t *)v2, 8u);
}

void sub_1000C8DD8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Unable to create security task from audit token.", v1, 2u);
}

void sub_1000C8E1C(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Unable to get entitlements for client task. Error: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000C8E98(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = 134218240;
  uint64_t v6 = v4;
  __int16 v7 = 2048;
  id v8 = [a2 length];
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "P%04llu <out:msgTransportAck>  -- data.len: %llu", (uint8_t *)&v5, 0x16u);
}

void sub_1000C8F38(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "nil _connection and nil port name!! This is a bug!!", v1, 2u);
}

void sub_1000C8F7C()
{
  sub_10003A5E4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Unexpected nilling of connection via setter in %@", v1, 0xCu);
}

void sub_1000C8FF0()
{
  sub_10003A5E4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Unexpected replacement of connection in %@", v1, 0xCu);
}

void sub_1000C9064(uint64_t a1, mach_error_t *a2, NSObject *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 40);
  int v5 = mach_error_string(*a2);
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 2080;
  uint64_t v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed sending message to client %@: %s", (uint8_t *)&v6, 0x16u);
}

void sub_1000C9108(id *a1, NSObject *a2)
{
  int v3 = [*a1 dictionaryRepresentation];
  sub_10003A5E4();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "handleReceivedMessage %@ could not convert to XPC object!", v4, 0xCu);
}

void sub_1000C91A0(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unrecognized token received from %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000C921C(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_100059F5C();
  sub_10001862C((void *)&_mh_execute_header, v1, v2, "Failed to set nonWaking topics to {nonWaking: %@, unentitledNonWakingTopics: %@}", (void)v3, DWORD2(v3));
}

void sub_1000C928C(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = *(void *)(a1 + 120);
  sub_100059F5C();
}

void sub_1000C9300(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_100059F5C();
  sub_10001862C((void *)&_mh_execute_header, v1, v2, "Failed to set ignored topics to {ignoredTopics: %@, unentitledIgnoredTopics: %@}", (void)v3, DWORD2(v3));
}

void sub_1000C9370(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = *(void *)(a1 + 120);
  sub_100059F5C();
}

void sub_1000C93E4(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_100059F5C();
  sub_10001862C((void *)&_mh_execute_header, v1, v2, "Failed to set opportunistic topics to {opportunisticTopics: %@, unentitledOpportunisticTopics: %@}", (void)v3, DWORD2(v3));
}

void sub_1000C9454(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = *(void *)(a1 + 120);
  sub_100059F5C();
}

void sub_1000C94C8(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_100059F5C();
  sub_10001862C((void *)&_mh_execute_header, v1, v2, "Failed to set enabled topics to {enabledTopics: %@, unentitledEnabledTopics: %@}", (void)v3, DWORD2(v3));
}

void sub_1000C9538(uint64_t a1, NSObject *a2)
{
  long long v3 = APSPrettyPrintCollection();
  sub_10003A5E4();
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Attempt to set push wake topics without dark wake enabled: %@", v4, 0xCu);
}

void sub_1000C95D8(_xpc_connection_s *a1)
{
  xpc_connection_get_pid(a1);
  sub_100059F6C((void *)&_mh_execute_header, v1, v2, "Peer [pid=%d] attempts to set push wake topics without push wake enabled entitlement", v3, v4, v5, v6, 0);
}

void sub_1000C9654(_xpc_connection_s *a1)
{
  xpc_connection_get_pid(a1);
  sub_100059F6C((void *)&_mh_execute_header, v1, v2, "Peer [pid=%d] attempts to set ultra constrained topics without ultra constrained enabled entitlement", v3, v4, v5, v6, 0);
}

void sub_1000C96D0()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "%@: Closed unexpectedly, skipping connect", v2, v3, v4, v5, v6);
}

void sub_1000C9738(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = +[NSThread callStackSymbols];
  int v5 = 138412546;
  uint64_t v6 = a1;
  __int16 v7 = 2112;
  __int16 v8 = v4;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "%@: Attempt to re-create the streams at %@", (uint8_t *)&v5, 0x16u);
}

void sub_1000C97F0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Trust evluation failed with error nil", v1, 2u);
}

void sub_1000C9834()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "Trust evaluation failed: %@", v2, v3, v4, v5, v6);
}

void sub_1000C989C()
{
  sub_10003A5E4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Unable to set trust policies for %@.", v1, 0xCu);
}

void sub_1000C9910(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Failed to create policy with peername %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000C998C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C99FC(id *a1, NSObject *a2)
{
  int v3 = [*a1 name];
  sub_10003A5E4();
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Production device set to invalid push environment: %@", v4, 0xCu);
}

void sub_1000C9A94()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "%@: Data received on stream that is not open", v2, v3, v4, v5, v6);
}

void sub_1000C9AFC()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "%@ Unable to get interface name after stream is opened", v2, v3, v4, v5, v6);
}

void sub_1000C9B64()
{
  sub_10003A5E4();
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Unable to copy sockaddr {address: %s, port: %d}", v2, 0x12u);
}

void sub_1000C9BEC()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@ got error when stream is opened %@");
}

void sub_1000C9C54()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@ didBecomeInvalidWithError: Received error: %@ when the stream is not open");
}

void sub_1000C9CBC()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@ didBecomeInvalidWithError: Received error on the session task: %@");
}

void sub_1000C9D24()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@ didCompleteWithError: Received error %@ when the stream is not open");
}

void sub_1000C9D8C()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@ didCompleteWithError: Received error on the session task: %@");
}

void sub_1000C9DF4(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Failed to get tcp info data", v1, 2u);
}

void sub_1000C9E38(uint64_t a1, void *a2)
{
  int v2 = 138412546;
  uint64_t v3 = a1;
  __int16 v4 = 2048;
  id v5 = [a2 messageID];
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%@: Dropping outgoing message %lu because queue is full", (uint8_t *)&v2, 0x16u);
}

void sub_1000C9ED8(uint64_t a1)
{
  int v2 = +[NSThread callStackSymbols];
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint8_t v6 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "%@: told that we sent an already sent message. Dumping logs! %@", (uint8_t *)&v3, 0x16u);
}

void sub_1000C9F88(uint64_t a1, uint64_t a2)
{
  int v2 = 138412546;
  uint64_t v3 = a1;
  __int16 v4 = 2048;
  uint64_t v5 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "%@: Outgoing message %lu with send error not found", (uint8_t *)&v2, 0x16u);
}

void sub_1000CA014(uint64_t a1)
{
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "%@: Received ack from courier with no outgoing message in flight. Queue count: 0", (uint8_t *)&v1, 0xCu);
}

void sub_1000CA094(uint64_t a1, id *a2)
{
  id v4 = [*a2 count];
  uint64_t v5 = [*a2 objectAtIndex:0];
  unsigned int v6 = [v5 wasSent];
  __int16 v7 = "N";
  int v8 = 138412802;
  uint64_t v9 = a1;
  if (v6) {
    __int16 v7 = "Y";
  }
  __int16 v10 = 2048;
  id v11 = v4;
  __int16 v12 = 2080;
  uint64_t v13 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%@: Received ack from courier with no outgoing message in flight. Queue count: %lu. Head of queue sent flag: %s", (uint8_t *)&v8, 0x20u);
}

void sub_1000CA184()
{
  sub_100063824(__stack_chk_guard);
  sub_10006380C();
  __int16 v4 = v0;
  uint64_t v5 = v1;
  _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%@: Power assertion %@ is reverting sleep using %@", v3, 0x20u);
}

void sub_1000CA208()
{
  sub_100063824(__stack_chk_guard);
  sub_10006380C();
  __int16 v3 = 2048;
  uint64_t v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%@: Power assertion %@ will automatically time out in %f seconds", v2, 0x20u);
}

void sub_1000CA28C()
{
  sub_10006384C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%@: Power assertion count now %d", v1, 0x12u);
}

void sub_1000CA308()
{
  sub_100063824(__stack_chk_guard);
  sub_10003A5F0();
  sub_100063830((void *)&_mh_execute_header, v0, v1, "%@: Holding power assertion %@", v2, v3, v4, v5, v6);
}

void sub_1000CA370()
{
  sub_100063824(__stack_chk_guard);
  sub_10003A5F0();
  sub_100063830((void *)&_mh_execute_header, v0, v1, "%@: Re-holding power assertion %@", v2, v3, v4, v5, v6);
}

void sub_1000CA3D8()
{
  sub_10006384C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%@: Sleep has been reverted %d times sequentially", v1, 0x12u);
}

void sub_1000CA454(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CA4C0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CA52C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CA598()
{
  sub_100063824(__stack_chk_guard);
  sub_10003A5F0();
  sub_100063830((void *)&_mh_execute_header, v0, v1, "%@: Disabling timeout of power assertion %@", v2, v3, v4, v5, v6);
}

void sub_1000CA600()
{
  sub_100063824(__stack_chk_guard);
  sub_10006380C();
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%@: Releasing power assertion %@ with powerAssertionCount now = %d", v2, 0x1Cu);
}

void sub_1000CA688()
{
  sub_100063824(__stack_chk_guard);
  sub_10003A5F0();
  sub_100063830((void *)&_mh_execute_header, v0, v1, "%@: Releasing power assertion %@", v2, v3, v4, v5, v6);
}

void sub_1000CA6F0(void *a1, NSObject *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 processIdentifier];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed task initiate entitlement check on XPC from pid:%d\n", (uint8_t *)v3, 8u);
}

void sub_1000CA77C(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = +[NSThread callStackSymbols];
  int v5 = 138412546;
  uint64_t v6 = a1;
  __int16 v7 = 2112;
  int v8 = v4;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "%@: Attempt to re-create the connection at %@", (uint8_t *)&v5, 0x16u);
}

void sub_1000CA838()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "%@: state change received, but no connection", v2, v3, v4, v5, v6);
}

void sub_1000CA8A0(int a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SecItemCopyMatching() failed: %ld", (uint8_t *)&v2, 0xCu);
}

void sub_1000CA91C(int a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SecItemAdd() failed: %ld", (uint8_t *)&v2, 0xCu);
}

void sub_1000CA998(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SecItemAdd() returned errSecSuccess, but the kSecReturnPersistentRef is NULL", v1, 2u);
}

void sub_1000CA9DC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  CFStringRef v3 = @"YES";
  if ((a2 & 1) == 0) {
    CFStringRef v3 = @"NO";
  }
  *(_DWORD *)uint64_t v4 = 138412546;
  *(void *)&void v4[4] = a1;
  *(_WORD *)&v4[12] = 2112;
  *(void *)&v4[14] = v3;
  sub_10000EFF4((void *)&_mh_execute_header, a2, a3, "Unable to copy activation identity: _APSCopyActivationIdentity() failed. Device is probably unactivated. Do you need to hacktivate? {error: %@, shouldHacktivate: %@}", *(void *)v4, *(void *)&v4[8], *(void *)&v4[16]);
}

void sub_1000CAA6C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)CFStringRef v3 = 138412546;
  *(void *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2048;
  *(void *)&v3[14] = (int)a2;
  sub_10000EFF4((void *)&_mh_execute_header, a2, a3, "%@ SecItemDelete() failed: %ld", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16]);
}

void sub_1000CAAE8(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = 138412802;
  uint64_t v6 = a1;
  __int16 v7 = 2112;
  uint64_t v8 = v3;
  __int16 v9 = 2112;
  uint64_t v10 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%@ device lost mobile activation identity from lockdown keychain. {apsKeychainIdentity %@; apsCachedIdentity %@}",
    (uint8_t *)&v5,
    0x20u);
}

void sub_1000CAB80(_xpc_connection_s *a1)
{
  v1[0] = 67109120;
  v1[1] = xpc_connection_get_pid(a1);
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Peer connection [pid=%d] missing server", (uint8_t *)v1, 8u);
}

void sub_1000CAC04()
{
  *(_WORD *)int v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "APSXPCSendFakeMessageEvent not allowed on non-internal build", v0, 2u);
}

void sub_1000CAC4C(_xpc_connection_s *a1)
{
  v1[0] = 67109120;
  v1[1] = xpc_connection_get_pid(a1);
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Peer connection [pid=%d] lacks APSConnectionInitiateEntitlement", (uint8_t *)v1, 8u);
}

void sub_1000CACD0(_xpc_connection_s *a1)
{
  int v1 = 134217984;
  uint64_t pid = xpc_connection_get_pid(a1);
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Rejecting status request from sandboxed peer: %lld", (uint8_t *)&v1, 0xCu);
}

void sub_1000CAD58()
{
  *(_WORD *)int v0 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "aps_peer_event_handler is being called from the wrong queue!", v0, 2u);
}

void sub_1000CADA0(uint64_t *a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  int v5 = 138412546;
  uint64_t v6 = v3;
  __int16 v7 = 2112;
  uint64_t v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed verifying signature for: %@   with error: %@", (uint8_t *)&v5, 0x16u);
}

void sub_1000CAE30(uint64_t a1)
{
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "%@ Device changed was not called after 2 minutes, dropping pending messages", (uint8_t *)&v1, 0xCu);
}

void sub_1000CAEB0(uint64_t a1)
{
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "APSIDSProxyManager %@ received invalid object via IDS!", (uint8_t *)&v1, 0xCu);
}

void sub_1000CAF30(int a1)
{
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Unable to determine if user with uid %d is a role user", (uint8_t *)v1, 8u);
}

void sub_1000CAFB0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "tcp_info: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000CB028(uint64_t a1)
{
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%@: ignoring empty sendBlock!", (uint8_t *)&v1, 0xCu);
}

void sub_1000CB0A8(uint64_t a1)
{
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%@: Dropping outgoing item because queue is full", (uint8_t *)&v1, 0xCu);
}

void sub_1000CB128()
{
  int v0 = +[NSAssertionHandler currentHandler];
  int v1 = +[NSString stringWithUTF8String:"BOOL aps_IDSShouldUseRestrictedLoggingForService(NSString * _Nullable __strong)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"APSPrivateLogging.m", 16, @"%s", dlerror());

  __break(1u);
}

void sub_1000CB1A0(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *IDSFoundationLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"APSPrivateLogging.m", 15, @"%s", *a1);

  __break(1u);
}

void sub_1000CB220(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v2 = 138412290;
  uint64_t v3 = v1;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Unable to find outgoing message record for guid %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000CB2A4()
{
  sub_10003A5E4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "%@ Neither interface is usable but we have stopped trying to connect. This code is not reachable. Please dump Messages logs and file a radar.", v1, 0xCu);
}

void sub_1000CB318()
{
  sub_10003A5E4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "%@ Neither interface is usable but we have stopped trying to connect. This code is not reachable.", v1, 0xCu);
}

void sub_1000CB38C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No identity, can't connect", v1, 2u);
}

void sub_1000CB3D0()
{
  sub_10003A5E4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "tcp_info: %@", v1, 0xCu);
}

void sub_1000CB444(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 courierConnection];
  uint64_t v4 = [v3 tcpInfoDescription];
  sub_10003A5E4();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "tcp_info: %@", v5, 0xCu);
}

void sub_1000CB4F4(void *a1, uint64_t a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)long long buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Unable to deserialize message userInfo %@  exception %@", buf, 0x16u);
}

void sub_1000CB55C(void *a1, NSObject *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 interface];
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Invalid interface type {interface: %d}", (uint8_t *)v3, 8u);
}

void sub_1000CB5E8()
{
  sub_1000185E8();
  sub_10001862C((void *)&_mh_execute_header, v0, v1, "%@ The PubSub request %@ was told to retry with no timeout interval!");
}

void sub_1000CB650()
{
  sub_1000185E8();
  sub_10001862C((void *)&_mh_execute_header, v0, v1, "%@ The PubSub request %@ failed with a no retry response.  Aborting!");
}

void sub_1000CB6B8()
{
  sub_1000185E8();
  sub_10001862C((void *)&_mh_execute_header, v0, v1, "%@ The PubSub request %@ was formatted incorrectly.  Aborting!");
}

void sub_1000CB720()
{
  sub_10003A5E4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "%@ We received a response for a request which we aren't aware of.  Aborting!", v1, 0xCu);
}

void sub_1000CB794()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "%@ We received an invalid command 29 response. Rejecting message...", v2, v3, v4, v5, v6);
}

void sub_1000CB7FC()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@ found no listeners for PubSub response message with push topic %@!");
}

void sub_1000CB864()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "%@: Received invalid command 30. Rejecting...", v2, v3, v4, v5, v6);
}

void sub_1000CB8CC()
{
  sub_1000185E8();
  sub_10000EFF4((void *)&_mh_execute_header, v0, v1, "%@ We received a pubsub message for a channel we arent subscribed to %@, dropping...");
}

void sub_1000CB934()
{
  sub_10003A5E4();
  sub_100018610((void *)&_mh_execute_header, v0, v1, "%@: Ignoring pubsub message with checkpoint lower than ours.", v2, v3, v4, v5, v6);
}

void sub_1000CB99C()
{
  sub_10003DD4C();
  sub_10003DD30((void *)&_mh_execute_header, v0, v1, "APSMessageStore - Downgrading to a build with a different APS database version is unsupported :(", v2, v3, v4, v5, v6);
}

void sub_1000CB9D0()
{
  sub_10003DD4C();
  sub_10003DD30((void *)&_mh_execute_header, v0, v1, "APSMessageStore - final integrity check failed!", v2, v3, v4, v5, v6);
}

void sub_1000CBA04()
{
  sub_10003DD4C();
  sub_10003DD30((void *)&_mh_execute_header, v0, v1, "APSMessageStore - vacuum failed!", v2, v3, v4, v5, v6);
}

void sub_1000CBA38(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "APSMessageStore - Reindexing the DB failed with SQLite result: %d", (uint8_t *)v2, 8u);
}

void sub_1000CBAB0()
{
  sub_10003DD4C();
  sub_10003DD30((void *)&_mh_execute_header, v0, v1, "APSMessageStore - No migration block to execute!", v2, v3, v4, v5, v6);
}

void sub_1000CBAE4()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "NULL message passed when trying to set property isSent", v0, 2u);
}

void sub_1000CBB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CBBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CBC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CBCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CBD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CBD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CBE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CBE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CBF0C()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "IORegisterForSystemPower failed", v0, 2u);
}

void sub_1000CBF54(int a1)
{
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "IOAllowPowerChange failed!  Error: %d", (uint8_t *)v1, 8u);
}

void sub_1000CBFD4(void *a1)
{
  id v1 = objc_begin_catch(a1);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v2 = 138412290;
    id v3 = v1;
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Exception raised during sleep callback: %@", (uint8_t *)&v2, 0xCu);
  }
  objc_end_catch();
}

void sub_1000CC080()
{
  sub_1000185E8();
  sub_1000B1DD4((void *)&_mh_execute_header, v0, v1, "%@ not downgrading %@, topic is ultra constrained enabled");
}

void sub_1000CC0E8()
{
  sub_1000185E8();
  sub_1000B1DD4((void *)&_mh_execute_header, v0, v1, "%@ not downgrading %@, topic is push wake enabled");
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t _emptyDequeStorage.unsafeMutableAddressor()
{
  return _emptyDequeStorage.unsafeMutableAddressor();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return os_log(_:dso:log:type:_:)();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return String.init<A>(reflecting:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t static OS_os_log.default.getter()
{
  return static OS_os_log.default.getter();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t APSAlert()
{
  return _APSAlert();
}

uint64_t APSCreateDictionaryFromXPCObject()
{
  return _APSCreateDictionaryFromXPCObject();
}

uint64_t APSCreateXPCObjectFromDictionary()
{
  return _APSCreateXPCObjectFromDictionary();
}

uint64_t APSDecodeDictionary()
{
  return _APSDecodeDictionary();
}

uint64_t APSEncodeDictionary()
{
  return _APSEncodeDictionary();
}

uint64_t APSError()
{
  return _APSError();
}

uint64_t APSGetEnableCriticalReliability()
{
  return _APSGetEnableCriticalReliability();
}

uint64_t APSGetEnableStatusNotifications()
{
  return _APSGetEnableStatusNotifications();
}

uint64_t APSGetEnabledTopicsFromXPCDictionary()
{
  return _APSGetEnabledTopicsFromXPCDictionary();
}

uint64_t APSGetIgnoredTopicsFromXPCDictionary()
{
  return _APSGetIgnoredTopicsFromXPCDictionary();
}

uint64_t APSGetNonWakingTopicsFromXPCDictionary()
{
  return _APSGetNonWakingTopicsFromXPCDictionary();
}

uint64_t APSGetOpportunisticTopicsFromXPCDictionary()
{
  return _APSGetOpportunisticTopicsFromXPCDictionary();
}

uint64_t APSGetTrackActivityPresence()
{
  return _APSGetTrackActivityPresence();
}

uint64_t APSGetUltraConstrainedTopicsFromXPCDictionary()
{
  return _APSGetUltraConstrainedTopicsFromXPCDictionary();
}

uint64_t APSGetXPCArrayFromDictionary()
{
  return _APSGetXPCArrayFromDictionary();
}

uint64_t APSGetXPCBoolFromDictionary()
{
  return _APSGetXPCBoolFromDictionary();
}

uint64_t APSGetXPCConnectionContext()
{
  return _APSGetXPCConnectionContext();
}

uint64_t APSGetXPCDataFromDictionary()
{
  return _APSGetXPCDataFromDictionary();
}

uint64_t APSGetXPCIntFromDictionary()
{
  return _APSGetXPCIntFromDictionary();
}

uint64_t APSGetXPCStringFromDictionary()
{
  return _APSGetXPCStringFromDictionary();
}

uint64_t APSGetXPCUnsignedLongLongFromDictionary()
{
  return _APSGetXPCUnsignedLongLongFromDictionary();
}

uint64_t APSInsertBoolsToXPCDictionary()
{
  return _APSInsertBoolsToXPCDictionary();
}

uint64_t APSInsertDatasToXPCDictionary()
{
  return _APSInsertDatasToXPCDictionary();
}

uint64_t APSInsertDoublesToXPCDictionary()
{
  return _APSInsertDoublesToXPCDictionary();
}

uint64_t APSInsertEnabledTopicsToXPCDictionary()
{
  return _APSInsertEnabledTopicsToXPCDictionary();
}

uint64_t APSInsertIgnoredTopicsToXPCDictionary()
{
  return _APSInsertIgnoredTopicsToXPCDictionary();
}

uint64_t APSInsertIntsToXPCDictionary()
{
  return _APSInsertIntsToXPCDictionary();
}

uint64_t APSInsertNSArraysToXPCDictionary()
{
  return _APSInsertNSArraysToXPCDictionary();
}

uint64_t APSInsertNSStringsToXPCDictionary()
{
  return _APSInsertNSStringsToXPCDictionary();
}

uint64_t APSInsertNSUIntegersToXPCDictionary()
{
  return _APSInsertNSUIntegersToXPCDictionary();
}

uint64_t APSInsertNonWakingTopicsToXPCDictionary()
{
  return _APSInsertNonWakingTopicsToXPCDictionary();
}

uint64_t APSInsertOpportunisticTopicsToXPCDictionary()
{
  return _APSInsertOpportunisticTopicsToXPCDictionary();
}

uint64_t APSInsertUnsignedLongLongsToXPCDictionary()
{
  return _APSInsertUnsignedLongLongsToXPCDictionary();
}

uint64_t APSPowerLog()
{
  return _APSPowerLog();
}

uint64_t APSPrettyPrintCollection()
{
  return _APSPrettyPrintCollection();
}

uint64_t APSPrettyPrintObject()
{
  return _APSPrettyPrintObject();
}

uint64_t APSPubSubPowerLog()
{
  return _APSPubSubPowerLog();
}

uint64_t APSSafeArrayOfStrings()
{
  return _APSSafeArrayOfStrings();
}

uint64_t APSSetXPCConnectionContext()
{
  return _APSSetXPCConnectionContext();
}

uint64_t APSURLTokenError()
{
  return _APSURLTokenError();
}

uint64_t APSUnderlyingError()
{
  return _APSUnderlyingError();
}

uint64_t APSXPCCreateServerConnection()
{
  return _APSXPCCreateServerConnection();
}

uint64_t AnalyticsSendEvent()
{
  return _AnalyticsSendEvent();
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA1(data, len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return _CC_SHA256_Final(md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return _CC_SHA256_Init(c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA256_Update(c, data, len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return _CFAllocatorGetDefault();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return _CFGetAllocator(cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, CFOptionFlags options)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return _CFNumberIsFloatType(number);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppIntegerValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return _CFPropertyListCreateData(allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return _CFPropertyListCreateWithData(allocator, data, options, format, error);
}

void CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

Boolean CFReadStreamSetClient(CFReadStreamRef stream, CFOptionFlags streamEvents, CFReadStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return _CFReadStreamSetClient(stream, streamEvents, clientCB, clientContext);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return _CFRunLoopGetMain();
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return _CFRunLoopSourceCreate(allocator, order, context);
}

void CFRunLoopSourceGetContext(CFRunLoopSourceRef source, CFRunLoopSourceContext *context)
{
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return _CFStringCreateWithBytes(alloc, bytes, numBytes, encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return _CFStringCreateWithFormat(alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return _CFStringGetBytes(theString, range, encoding, lossByte, isExternalRepresentation, buffer, maxBufLen, usedBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return _CFUUIDCreate(alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return _CFUUIDCreateString(alloc, uuid);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

void CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

uint64_t CSDBCreateDirectoriesToPathWithOwnership()
{
  return _CSDBCreateDirectoriesToPathWithOwnership();
}

uint64_t CSDBCreateThreadedRecordStore()
{
  return _CSDBCreateThreadedRecordStore();
}

uint64_t CSDBCreateUTF8StringFromCFString()
{
  return _CSDBCreateUTF8StringFromCFString();
}

uint64_t CSDBGetMobileUserDirectory()
{
  return _CSDBGetMobileUserDirectory();
}

uint64_t CSDBGetMobileUserGID()
{
  return _CSDBGetMobileUserGID();
}

uint64_t CSDBGetMobileUserUID()
{
  return _CSDBGetMobileUserUID();
}

uint64_t CSDBPerformBlock()
{
  return _CSDBPerformBlock();
}

uint64_t CSDBPerformBlockAfterDelay()
{
  return _CSDBPerformBlockAfterDelay();
}

uint64_t CSDBPerformLocked()
{
  return _CSDBPerformLocked();
}

uint64_t CSDBPerformLockedSectionForConnectionForReading()
{
  return _CSDBPerformLockedSectionForConnectionForReading();
}

uint64_t CSDBPerformLockedSectionForConnectionForWriting()
{
  return _CSDBPerformLockedSectionForConnectionForWriting();
}

uint64_t CSDBPerformLockedSectionForDatabase()
{
  return _CSDBPerformLockedSectionForDatabase();
}

uint64_t CSDBPerformLockedSectionForQueryForReading()
{
  return _CSDBPerformLockedSectionForQueryForReading();
}

uint64_t CSDBPerformLockedSectionForQueryForWriting()
{
  return _CSDBPerformLockedSectionForQueryForWriting();
}

uint64_t CSDBPerformLockedSectionForRecordStore()
{
  return _CSDBPerformLockedSectionForRecordStore();
}

uint64_t CSDBPerformLockedSectionForRecordStoreWithoutInitialize()
{
  return _CSDBPerformLockedSectionForRecordStoreWithoutInitialize();
}

uint64_t CSDBPerformLockedSectionUsingUnfairLock()
{
  return _CSDBPerformLockedSectionUsingUnfairLock();
}

uint64_t CSDBPerformUnlocked()
{
  return _CSDBPerformUnlocked();
}

uint64_t CSDBPerformUnlockedSectionForConnectionForReading()
{
  return _CSDBPerformUnlockedSectionForConnectionForReading();
}

uint64_t CSDBPerformUnlockedSectionForConnectionForWriting()
{
  return _CSDBPerformUnlockedSectionForConnectionForWriting();
}

uint64_t CSDBPerformUnlockedSectionForDatabase()
{
  return _CSDBPerformUnlockedSectionForDatabase();
}

uint64_t CSDBPerformUnlockedSectionForQueryForReading()
{
  return _CSDBPerformUnlockedSectionForQueryForReading();
}

uint64_t CSDBPerformUnlockedSectionForQueryForWriting()
{
  return _CSDBPerformUnlockedSectionForQueryForWriting();
}

uint64_t CSDBPerformUnlockedSectionForRecordStore()
{
  return _CSDBPerformUnlockedSectionForRecordStore();
}

uint64_t CSDBRecordCopyProperty()
{
  return _CSDBRecordCopyProperty();
}

uint64_t CSDBRecordCreate()
{
  return _CSDBRecordCreate();
}

uint64_t CSDBRecordGetID()
{
  return _CSDBRecordGetID();
}

uint64_t CSDBRecordGetProperty()
{
  return _CSDBRecordGetProperty();
}

uint64_t CSDBRecordIndexOfPropertyNamed()
{
  return _CSDBRecordIndexOfPropertyNamed();
}

uint64_t CSDBRecordSaveStore()
{
  return _CSDBRecordSaveStore();
}

uint64_t CSDBRecordSetProperty()
{
  return _CSDBRecordSetProperty();
}

uint64_t CSDBRecordStoreAddRecord()
{
  return _CSDBRecordStoreAddRecord();
}

uint64_t CSDBRecordStoreCopyInstanceOfClassWithUID()
{
  return _CSDBRecordStoreCopyInstanceOfClassWithUID();
}

uint64_t CSDBRecordStoreCreateTablesForClass()
{
  return _CSDBRecordStoreCreateTablesForClass();
}

uint64_t CSDBRecordStoreProcessStatement()
{
  return _CSDBRecordStoreProcessStatement();
}

uint64_t CSDBRecordStoreRemoveRecord()
{
  return _CSDBRecordStoreRemoveRecord();
}

uint64_t CSDBSqliteBindBlobFromCFData()
{
  return _CSDBSqliteBindBlobFromCFData();
}

uint64_t CSDBSqliteBindInt64()
{
  return _CSDBSqliteBindInt64();
}

uint64_t CSDBSqliteBindTextFromCFString()
{
  return _CSDBSqliteBindTextFromCFString();
}

uint64_t CSDBSqliteConnectionBegin()
{
  return _CSDBSqliteConnectionBegin();
}

uint64_t CSDBSqliteConnectionBeginTransactionType()
{
  return _CSDBSqliteConnectionBeginTransactionType();
}

uint64_t CSDBSqliteConnectionCommit()
{
  return _CSDBSqliteConnectionCommit();
}

uint64_t CSDBSqliteConnectionPerformSQL()
{
  return _CSDBSqliteConnectionPerformSQL();
}

uint64_t CSDBSqliteDatabaseCheckIntegrity()
{
  return _CSDBSqliteDatabaseCheckIntegrity();
}

uint64_t CSDBSqliteDatabaseSetVersion()
{
  return _CSDBSqliteDatabaseSetVersion();
}

uint64_t CSDBSqliteDatabaseVacuum()
{
  return _CSDBSqliteDatabaseVacuum();
}

uint64_t CSDBSqliteErrMsg()
{
  return _CSDBSqliteErrMsg();
}

uint64_t CSDBSqliteStatementCopyStringResult()
{
  return _CSDBSqliteStatementCopyStringResult();
}

uint64_t CSDBSqliteStatementInteger64ResultColumn()
{
  return _CSDBSqliteStatementInteger64ResultColumn();
}

uint64_t CSDBSqliteStep()
{
  return _CSDBSqliteStep();
}

uint64_t CSDBSqliteUtilitiesGetSchemaVersionAtPath()
{
  return _CSDBSqliteUtilitiesGetSchemaVersionAtPath();
}

uint64_t CSDBThreadedRecordStoreEnsureDatabaseSetup()
{
  return _CSDBThreadedRecordStoreEnsureDatabaseSetup();
}

uint64_t CSDBThreadedRecordStoreOwnsCurrentThread()
{
  return _CSDBThreadedRecordStoreOwnsCurrentThread();
}

uint64_t CSDBThreadedRecordStoreRegisterClass()
{
  return _CSDBThreadedRecordStoreRegisterClass();
}

uint64_t CSDBThreadedRecordStoreTeardownDatabase()
{
  return _CSDBThreadedRecordStoreTeardownDatabase();
}

uint64_t CUTWeakLinkClass()
{
  return _CUTWeakLinkClass();
}

uint64_t CUTWeakLinkSymbol()
{
  return _CUTWeakLinkSymbol();
}

DNSServiceErrorType DNSServiceQueryRecord(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *fullname, uint16_t rrtype, uint16_t rrclass, DNSServiceQueryRecordReply callBack, void *context)
{
  return _DNSServiceQueryRecord(sdRef, flags, interfaceIndex, fullname, rrtype, rrclass, callBack, context);
}

void DNSServiceRefDeallocate(DNSServiceRef sdRef)
{
}

DNSServiceErrorType DNSServiceSetDispatchQueue(DNSServiceRef service, dispatch_queue_t queue)
{
  return _DNSServiceSetDispatchQueue(service, queue);
}

uint64_t DeviceIdentityCreateHostSignature()
{
  return _DeviceIdentityCreateHostSignature();
}

uint64_t DeviceIdentityIsSupported()
{
  return _DeviceIdentityIsSupported();
}

uint64_t DeviceIdentityIssueClientCertificateWithCompletion()
{
  return _DeviceIdentityIssueClientCertificateWithCompletion();
}

uint64_t DeviceIdentityUCRTAttestationSupported()
{
  return _DeviceIdentityUCRTAttestationSupported();
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return _IOAllowPowerChange(kernelPort, notificationID);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return _IODeregisterForSystemPower(notifier);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

IOReturn IOPMAssertionCreateWithProperties(CFDictionaryRef AssertionProperties, IOPMAssertionID *AssertionID)
{
  return _IOPMAssertionCreateWithProperties(AssertionProperties, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return _IOPMAssertionRelease(AssertionID);
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return _IORegisterForSystemPower(refcon, thePortRef, callback, notifier);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

uint64_t MAECopyLegacyDeviceIdentityWithError()
{
  return _MAECopyLegacyDeviceIdentityWithError();
}

uint64_t MAEGetActivationStateWithError()
{
  return _MAEGetActivationStateWithError();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MGGetSInt32Answer()
{
  return _MGGetSInt32Answer();
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

uint64_t PBDataWriterWriteBOOLField()
{
  return _PBDataWriterWriteBOOLField();
}

uint64_t PBDataWriterWriteDataField()
{
  return _PBDataWriterWriteDataField();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return _PBDataWriterWriteInt32Field();
}

uint64_t PBDataWriterWriteStringField()
{
  return _PBDataWriterWriteStringField();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return _PBDataWriterWriteSubmessage();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return _PBDataWriterWriteUint32Field();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return _PBDataWriterWriteUint64Field();
}

uint64_t PBReaderPlaceMark()
{
  return _PBReaderPlaceMark();
}

uint64_t PBReaderReadData()
{
  return _PBReaderReadData();
}

uint64_t PBReaderReadString()
{
  return _PBReaderReadString();
}

uint64_t PBReaderRecallMark()
{
  return _PBReaderRecallMark();
}

uint64_t PBReaderSkipValueWithTag()
{
  return _PBReaderSkipValueWithTag();
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithName(CFAllocatorRef allocator, const char *nodename)
{
  return _SCNetworkReachabilityCreateWithName(allocator, nodename);
}

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  return _SCNetworkReachabilityGetFlags(target, flags);
}

Boolean SCNetworkReachabilityScheduleWithRunLoop(SCNetworkReachabilityRef target, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  return _SCNetworkReachabilityScheduleWithRunLoop(target, runLoop, runLoopMode);
}

Boolean SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityCallBack callout, SCNetworkReachabilityContext *context)
{
  return _SCNetworkReachabilitySetCallback(target, callout, context);
}

Boolean SCNetworkReachabilityUnscheduleFromRunLoop(SCNetworkReachabilityRef target, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  return _SCNetworkReachabilityUnscheduleFromRunLoop(target, runLoop, runLoopMode);
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return _SecAccessControlCreateWithFlags(allocator, protection, flags, error);
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return _SecCertificateCopyData(certificate);
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return _SecIdentityCopyCertificate(identityRef, certificateRef);
}

OSStatus SecIdentityCopyPrivateKey(SecIdentityRef identityRef, SecKeyRef *privateKeyRef)
{
  return _SecIdentityCopyPrivateKey(identityRef, privateKeyRef);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return _SecItemUpdate(query, attributesToUpdate);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return _SecKeyCreateSignature(key, algorithm, dataToSign, error);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return _SecKeyVerifySignature(key, algorithm, signedData, signature, error);
}

uint64_t SecPolicyCreateApplePushService()
{
  return _SecPolicyCreateApplePushService();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return _SecTrustEvaluateWithError(trust, error);
}

uint64_t SecTrustSetPinningPolicyName()
{
  return _SecTrustSetPinningPolicyName();
}

OSStatus SecTrustSetPolicies(SecTrustRef trust, CFTypeRef policies)
{
  return _SecTrustSetPolicies(trust, policies);
}

uint64_t TMSetAuthenticatedSourceTime()
{
  return _TMSetAuthenticatedSourceTime();
}

const void *__cdecl TXTRecordGetValuePtr(uint16_t txtLen, const void *txtRecord, const char *key, uint8_t *valueLen)
{
  return _TXTRecordGetValuePtr(txtLen, txtRecord, key, valueLen);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFCopySystemVersionDictionary()
{
  return __CFCopySystemVersionDictionary();
}

uint64_t _CFPreferencesCopyValueWithContainer()
{
  return __CFPreferencesCopyValueWithContainer();
}

uint64_t _CFPreferencesSetValueWithContainer()
{
  return __CFPreferencesSetValueWithContainer();
}

uint64_t _CFPreferencesSynchronizeWithContainer()
{
  return __CFPreferencesSynchronizeWithContainer();
}

uint64_t _CFRuntimeCreateInstance()
{
  return __CFRuntimeCreateInstance();
}

uint64_t _CFRuntimeRegisterClass()
{
  return __CFRuntimeRegisterClass();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return __CFXPCCreateCFObjectFromXPCObject();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t std::stringbuf::str()
{
  return std::stringbuf::str();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return std::locale::use_facet(this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

size_t std::__next_prime(size_t __n)
{
  return std::__next_prime(__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return std::string::append(this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::append(this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return std::string::assign(this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return std::string::insert(this, __pos, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return std::string::operator=(this, __str);
}

uint64_t std::ostream::put()
{
  return std::ostream::put();
}

uint64_t std::ostream::flush()
{
  return std::ostream::flush();
}

uint64_t std::ostream::sentry::sentry()
{
  return std::ostream::sentry::sentry();
}

uint64_t std::ostream::sentry::~sentry()
{
  return std::ostream::sentry::~sentry();
}

uint64_t std::ostream::~ostream()
{
  return std::ostream::~ostream();
}

uint64_t std::ostream::operator<<()
{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

uint64_t std::streambuf::basic_streambuf()
{
  return std::streambuf::basic_streambuf();
}

uint64_t std::streambuf::~streambuf()
{
  return std::streambuf::~streambuf();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return std::ios::~ios();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return std::to_string(retstr, __val);
}

{
  return std::to_string(retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return ___cxa_atexit(lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return _bootstrap_look_up(bp, service_name, sp);
}

const char *__cdecl bootstrap_strerror(kern_return_t r)
{
  return _bootstrap_strerror(r);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t ccder_blob_decode_bitstring()
{
  return _ccder_blob_decode_bitstring();
}

uint64_t ccder_blob_decode_tag()
{
  return _ccder_blob_decode_tag();
}

uint64_t ccder_blob_decode_tl()
{
  return _ccder_blob_decode_tl();
}

uint64_t ccder_blob_decode_uint64()
{
  return _ccder_blob_decode_uint64();
}

uint64_t ccder_blob_encode_tl()
{
  return _ccder_blob_encode_tl();
}

uint64_t ccder_decode_rsa_pub_n()
{
  return _ccder_decode_rsa_pub_n();
}

uint64_t ccder_sizeof_len()
{
  return _ccder_sizeof_len();
}

uint64_t ccder_sizeof_tag()
{
  return _ccder_sizeof_tag();
}

uint64_t ccdigest()
{
  return _ccdigest();
}

uint64_t ccdigest_init()
{
  return _ccdigest_init();
}

uint64_t ccdigest_update()
{
  return _ccdigest_update();
}

uint64_t ccec_compressed_x962_export_pub()
{
  return _ccec_compressed_x962_export_pub();
}

uint64_t ccec_compressed_x962_export_pub_size()
{
  return _ccec_compressed_x962_export_pub_size();
}

uint64_t ccec_compressed_x962_import_pub()
{
  return _ccec_compressed_x962_import_pub();
}

uint64_t ccec_export_pub()
{
  return _ccec_export_pub();
}

uint64_t ccec_import_pub()
{
  return _ccec_import_pub();
}

uint64_t ccec_keysize_is_supported()
{
  return _ccec_keysize_is_supported();
}

uint64_t ccec_verify()
{
  return _ccec_verify();
}

uint64_t ccec_verify_composite()
{
  return _ccec_verify_composite();
}

uint64_t ccec_x963_import_pub_size()
{
  return _ccec_x963_import_pub_size();
}

uint64_t ccrsa_import_pub()
{
  return _ccrsa_import_pub();
}

uint64_t ccrsa_verify_pkcs1v15_allowshortsigs()
{
  return _ccrsa_verify_pkcs1v15_allowshortsigs();
}

uint64_t ccsha1_di()
{
  return _ccsha1_di();
}

uint64_t ccsha256_di()
{
  return _ccsha256_di();
}

uint64_t ccsha384_di()
{
  return _ccsha384_di();
}

uint64_t cczp_bitlen()
{
  return _cczp_bitlen();
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return _clock_gettime_nsec_np(__clock_id);
}

uint64_t container_system_path_for_identifier()
{
  return _container_system_path_for_identifier();
}

double difftime(time_t a1, time_t a2)
{
  return _difftime(a1, a2);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return _dispatch_block_create_with_qos_class(flags, qos_class, relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void exit(int a1)
{
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return _getpid();
}

int getpwuid_r(uid_t a1, passwd *a2, char *a3, size_t a4, passwd **a5)
{
  return _getpwuid_r(a1, a2, a3, a4, a5);
}

unsigned int if_nametoindex(const char *a1)
{
  return _if_nametoindex(a1);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return _inet_ntop(a1, a2, a3, a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return _inet_pton(a1, a2, a3);
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return _mach_error_string(error_value);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return _mach_msg(msg, option, send_size, rcv_size, rcv_name, timeout, notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return _mach_port_deallocate(task, name);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

uint64_t network_config_set_persistent_interface()
{
  return _network_config_set_persistent_interface();
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

void nw_connection_cancel(nw_connection_t connection)
{
}

uint64_t nw_connection_copy_connected_local_endpoint()
{
  return _nw_connection_copy_connected_local_endpoint();
}

uint64_t nw_connection_copy_connected_path()
{
  return _nw_connection_copy_connected_path();
}

uint64_t nw_connection_copy_connected_remote_endpoint()
{
  return _nw_connection_copy_connected_remote_endpoint();
}

nw_protocol_metadata_t nw_connection_copy_protocol_metadata(nw_connection_t connection, nw_protocol_definition_t definition)
{
  return _nw_connection_copy_protocol_metadata(connection, definition);
}

uint64_t nw_connection_copy_tcp_info()
{
  return _nw_connection_copy_tcp_info();
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return _nw_connection_create(endpoint, parameters);
}

uint64_t nw_connection_fillout_tcp_statistics()
{
  return _nw_connection_fillout_tcp_statistics();
}

void nw_connection_receive(nw_connection_t connection, uint32_t minimum_incomplete_length, uint32_t maximum_length, nw_connection_receive_completion_t completion)
{
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
}

void nw_connection_set_better_path_available_handler(nw_connection_t connection, nw_connection_BOOLean_event_handler_t handler)
{
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
}

void nw_connection_start(nw_connection_t connection)
{
}

uint64_t nw_content_context_get_is_wake_packet()
{
  return _nw_content_context_get_is_wake_packet();
}

uint64_t nw_endpoint_create_host_with_numeric_port()
{
  return _nw_endpoint_create_host_with_numeric_port();
}

const sockaddr *__cdecl nw_endpoint_get_address(nw_endpoint_t endpoint)
{
  return _nw_endpoint_get_address(endpoint);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return _nw_endpoint_get_hostname(endpoint);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  return _nw_endpoint_get_port(endpoint);
}

CFErrorRef nw_error_copy_cf_error(nw_error_t error)
{
  return _nw_error_copy_cf_error(error);
}

uint64_t nw_interface_create_with_name()
{
  return _nw_interface_create_with_name();
}

const char *__cdecl nw_interface_get_name(nw_interface_t interface)
{
  return _nw_interface_get_name(interface);
}

nw_interface_type_t nw_interface_get_type(nw_interface_t interface)
{
  return _nw_interface_get_type(interface);
}

uint64_t nw_interface_is_ultra_constrained()
{
  return _nw_interface_is_ultra_constrained();
}

void nw_ip_options_set_local_address_preference(nw_protocol_options_t options, nw_ip_local_address_preference_t preference)
{
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return _nw_parameters_copy_default_protocol_stack(parameters);
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return _nw_parameters_create_secure_tcp(configure_tls, configure_tcp);
}

void nw_parameters_prohibit_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
}

uint64_t nw_parameters_set_allow_ultra_constrained()
{
  return _nw_parameters_set_allow_ultra_constrained();
}

void nw_parameters_set_prefer_no_proxy(nw_parameters_t parameters, BOOL prefer_no_proxy)
{
}

uint64_t nw_parameters_set_prohibited_interface_subtypes()
{
  return _nw_parameters_set_prohibited_interface_subtypes();
}

void nw_parameters_set_required_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
}

void nw_parameters_set_service_class(nw_parameters_t parameters, nw_service_class_t service_class)
{
}

uint64_t nw_path_copy_interface()
{
  return _nw_path_copy_interface();
}

nw_protocol_definition_t nw_protocol_copy_tls_definition(void)
{
  return _nw_protocol_copy_tls_definition();
}

BOOL nw_protocol_metadata_is_tls(nw_protocol_metadata_t metadata)
{
  return _nw_protocol_metadata_is_tls(metadata);
}

nw_protocol_options_t nw_protocol_stack_copy_internet_protocol(nw_protocol_stack_t stack)
{
  return _nw_protocol_stack_copy_internet_protocol(stack);
}

void nw_tcp_options_set_no_delay(nw_protocol_options_t options, BOOL no_delay)
{
}

sec_protocol_metadata_t nw_tls_copy_sec_protocol_metadata(nw_protocol_metadata_t metadata)
{
  return _nw_tls_copy_sec_protocol_metadata(metadata);
}

sec_protocol_options_t nw_tls_copy_sec_protocol_options(nw_protocol_options_t options)
{
  return _nw_tls_copy_sec_protocol_options(options);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_allows_internal_security_policies()
{
  return _os_variant_allows_internal_security_policies();
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

uint64_t pthread_dependency_init_np()
{
  return _pthread_dependency_init_np();
}

uint64_t pthread_dependency_wait_np()
{
  return _pthread_dependency_wait_np();
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return _pthread_getspecific(a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return _pthread_key_create(a1, a2);
}

uint64_t pthread_main_thread_np()
{
  return _pthread_main_thread_np();
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return _pthread_once(a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return _pthread_setspecific(a1, a2);
}

qos_class_t qos_class_self(void)
{
  return _qos_class_self();
}

uint64_t sandbox_check()
{
  return _sandbox_check();
}

uint64_t sandbox_check_by_audit_token()
{
  return _sandbox_check_by_audit_token();
}

const char *__cdecl sec_protocol_metadata_get_negotiated_protocol(sec_protocol_metadata_t metadata)
{
  return _sec_protocol_metadata_get_negotiated_protocol(metadata);
}

void sec_protocol_options_add_tls_application_protocol(sec_protocol_options_t options, const char *application_protocol)
{
}

void sec_protocol_options_set_min_tls_protocol_version(sec_protocol_options_t options, tls_protocol_version_t version)
{
}

void sec_protocol_options_set_tls_server_name(sec_protocol_options_t options, const char *server_name)
{
}

void sec_protocol_options_set_verify_block(sec_protocol_options_t options, sec_protocol_verify_t verify_block, dispatch_queue_t verify_block_queue)
{
}

SecTrustRef sec_trust_copy_ref(sec_trust_t trust)
{
  return _sec_trust_copy_ref(trust);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return _strptime(a1, a2, a3);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return _strtol(__str, __endptr, __base);
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_deletedMethodError()
{
  return _swift_deletedMethodError();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t sysconf(int a1)
{
  return _sysconf(a1);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

time_t time(time_t *a1)
{
  return _time(a1);
}

time_t timegm(tm *const a1)
{
  return _timegm(a1);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return _voucher_mach_msg_set(msg);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return _xpc_activity_copy_criteria(activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

xpc_object_t xpc_array_create_empty(void)
{
  return _xpc_array_create_empty();
}

void xpc_array_set_uint64(xpc_object_t xarray, size_t index, uint64_t value)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

uint64_t xpc_connection_get_audit_token()
{
  return _xpc_connection_get_audit_token();
}

void *__cdecl xpc_connection_get_context(xpc_connection_t connection)
{
  return _xpc_connection_get_context(connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return _xpc_connection_get_pid(connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

uint64_t xpc_connection_send_notification()
{
  return _xpc_connection_send_notification();
}

void xpc_connection_set_context(xpc_connection_t connection, void *context)
{
}

uint64_t xpc_copy_entitlements_for_self()
{
  return _xpc_copy_entitlements_for_self();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return _xpc_dictionary_create_reply(original);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_BOOL(xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_int64(xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_value(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return _xpc_equal(object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

id objc_msgSend_APNSPackDecoder_ReceivedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "APNSPackDecoder:ReceivedError:");
}

id objc_msgSend_APNSPackEncoder_receivedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "APNSPackEncoder:receivedError:");
}

id objc_msgSend_JSONDebugState(void *a1, const char *a2, ...)
{
  return _[a1 JSONDebugState];
}

id objc_msgSend_JSONDebugString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONDebugString:");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_PUSHTRACE(void *a1, const char *a2, ...)
{
  return _[a1 PUSHTRACE];
}

id objc_msgSend_TCPStreamWithEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "TCPStreamWithEnvironment:");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByResolvingAliasFileAtURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByResolvingAliasFileAtURL:options:error:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend_WWANInterfaceName(void *a1, const char *a2, ...)
{
  return _[a1 WWANInterfaceName];
}

id objc_msgSend___delayedPerformKeepAliveOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__delayedPerformKeepAliveOnInterface:");
}

id objc_msgSend__accumulatedAwakePercentage(void *a1, const char *a2, ...)
{
  return _[a1 _accumulatedAwakePercentage];
}

id objc_msgSend__addProtocolConnectionsToUserCourier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addProtocolConnectionsToUserCourier:");
}

id objc_msgSend__addTopic_connectionServer_attributes_change_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addTopic:connectionServer:attributes:change:");
}

id objc_msgSend__adjustConnectedStateWithInterfaceHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustConnectedStateWithInterfaceHint:");
}

id objc_msgSend__adjustConnection(void *a1, const char *a2, ...)
{
  return _[a1 _adjustConnection];
}

id objc_msgSend__adjustConnectionWithInterfacePreference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustConnectionWithInterfacePreference:");
}

id objc_msgSend__adjustIsConnectedToService(void *a1, const char *a2, ...)
{
  return _[a1 _adjustIsConnectedToService];
}

id objc_msgSend__appendOneByte_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendOneByte:");
}

id objc_msgSend__appendPrettyStatusToStatusPrinter_time_type_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendPrettyStatusToStatusPrinter:time:type:direction:");
}

id objc_msgSend__appendTwoBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendTwoBytes:");
}

id objc_msgSend__assertWiFiIfPossible(void *a1, const char *a2, ...)
{
  return _[a1 _assertWiFiIfPossible];
}

id objc_msgSend__cacheIPAddress_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheIPAddress:onInterface:");
}

id objc_msgSend__cachedTokensForUser_andService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedTokensForUser:andService:");
}

id objc_msgSend__callCompletionBlocksWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callCompletionBlocksWithError:");
}

id objc_msgSend__cancelRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelRequest:");
}

id objc_msgSend__changeFromFilter_toFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_changeFromFilter:toFilter:");
}

id objc_msgSend__checkIsExpired(void *a1, const char *a2, ...)
{
  return _[a1 _checkIsExpired];
}

id objc_msgSend__checkNearbyDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkNearbyDevices:");
}

id objc_msgSend__checkPiggybackBudget(void *a1, const char *a2, ...)
{
  return _[a1 _checkPiggybackBudget];
}

id objc_msgSend__cleanupConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupConnection:");
}

id objc_msgSend__clearCacheForUser_andService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearCacheForUser:andService:");
}

id objc_msgSend__clearCachedSigNonceCert(void *a1, const char *a2, ...)
{
  return _[a1 _clearCachedSigNonceCert];
}

id objc_msgSend__clearConnectionEstablishTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearConnectionEstablishTimerOnInterface:");
}

id objc_msgSend__clearConnectionThrottleTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearConnectionThrottleTimer];
}

id objc_msgSend__clearCourierConnectTimerAndPowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _clearCourierConnectTimerAndPowerAssertion];
}

id objc_msgSend__clearCriticalMessageKeepAliveTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearCriticalMessageKeepAliveTimer];
}

id objc_msgSend__clearCriticalMessageKeepAliveTimerIfAppropriate(void *a1, const char *a2, ...)
{
  return _[a1 _clearCriticalMessageKeepAliveTimerIfAppropriate];
}

id objc_msgSend__clearDatabaseCloseTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearDatabaseCloseTimer];
}

id objc_msgSend__clearDecayTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearDecayTimer];
}

id objc_msgSend__clearDelayedReconnectTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearDelayedReconnectTimer];
}

id objc_msgSend__clearFilterMessageTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearFilterMessageTimerOnInterface:");
}

id objc_msgSend__clearInactivityTerminationTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearInactivityTerminationTimer];
}

id objc_msgSend__clearKeepAliveResponseTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearKeepAliveResponseTimerOnInterface:");
}

id objc_msgSend__clearPendingFilterTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearPendingFilterTimer];
}

id objc_msgSend__clearPendingProxyPresence(void *a1, const char *a2, ...)
{
  return _[a1 _clearPendingProxyPresence];
}

id objc_msgSend__clearPiggybackConnectionTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearPiggybackConnectionTimer];
}

id objc_msgSend__clearPostSuspensionFlushState(void *a1, const char *a2, ...)
{
  return _[a1 _clearPostSuspensionFlushState];
}

id objc_msgSend__clearResetInterfacePreferenceTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearResetInterfacePreferenceTimer];
}

id objc_msgSend__clearState(void *a1, const char *a2, ...)
{
  return _[a1 _clearState];
}

id objc_msgSend__clearTopicsForGuestUser(void *a1, const char *a2, ...)
{
  return _[a1 _clearTopicsForGuestUser];
}

id objc_msgSend__closeQuery(void *a1, const char *a2, ...)
{
  return _[a1 _closeQuery];
}

id objc_msgSend__connectStreamWithInterfacePreference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectStreamWithInterfacePreference:");
}

id objc_msgSend__connectToServerWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectToServerWithConfiguration:");
}

id objc_msgSend__connectToServerWithCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectToServerWithCount:");
}

id objc_msgSend__connectToServerWithPeerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectToServerWithPeerName:");
}

id objc_msgSend__connectionsDebuggingState(void *a1, const char *a2, ...)
{
  return _[a1 _connectionsDebuggingState];
}

id objc_msgSend__containsInvalidTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_containsInvalidTopic:");
}

id objc_msgSend__copyClientIdentityFromKeychain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyClientIdentityFromKeychain:");
}

id objc_msgSend__copyHashForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyHashForString:");
}

id objc_msgSend__copyLocalSockAddr(void *a1, const char *a2, ...)
{
  return _[a1 _copyLocalSockAddr];
}

id objc_msgSend__copyParsedPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyParsedPayload:");
}

id objc_msgSend__copyServerIPAddressString(void *a1, const char *a2, ...)
{
  return _[a1 _copyServerIPAddressString];
}

id objc_msgSend__copyTokenForDomain_appSpecificIdentifier_tokenServiceSuffix_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyTokenForDomain:appSpecificIdentifier:tokenServiceSuffix:user:");
}

id objc_msgSend__countActiveClients(void *a1, const char *a2, ...)
{
  return _[a1 _countActiveClients];
}

id objc_msgSend__createDispatchData(void *a1, const char *a2, ...)
{
  return _[a1 _createDispatchData];
}

id objc_msgSend__createRequestForPubSubData_messageID_connectionType_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createRequestForPubSubData:messageID:connectionType:environment:");
}

id objc_msgSend__currentStream(void *a1, const char *a2, ...)
{
  return _[a1 _currentStream];
}

id objc_msgSend__decayCost(void *a1, const char *a2, ...)
{
  return _[a1 _decayCost];
}

id objc_msgSend__delayedPerformKeepAliveOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_delayedPerformKeepAliveOnInterface:");
}

id objc_msgSend__delayedPerformKeepAliveOnInterface_withDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_delayedPerformKeepAliveOnInterface:withDelay:");
}

id objc_msgSend__deleteClientIdentityRequestingReplacement(void *a1, const char *a2, ...)
{
  return _[a1 _deleteClientIdentityRequestingReplacement];
}

id objc_msgSend__deliverNotificationSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deliverNotificationSelector:");
}

id objc_msgSend__deliverResult_forMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deliverResult:forMessage:");
}

id objc_msgSend__deregisterFromWoWNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _deregisterFromWoWNotifications];
}

id objc_msgSend__deserializeKeychainData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deserializeKeychainData:");
}

id objc_msgSend__didFinishAssertingAllPresences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didFinishAssertingAllPresences:");
}

id objc_msgSend__disconnectAllStreamsWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disconnectAllStreamsWithReason:");
}

id objc_msgSend__disconnectStreamForInterface_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disconnectStreamForInterface:withReason:");
}

id objc_msgSend__disconnectTokenWithReason_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disconnectTokenWithReason:onProtocolConnection:");
}

id objc_msgSend__domain(void *a1, const char *a2, ...)
{
  return _[a1 _domain];
}

id objc_msgSend__dumpLogsForInconsistencyIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _dumpLogsForInconsistencyIfNecessary];
}

id objc_msgSend__enableAllCouriers(void *a1, const char *a2, ...)
{
  return _[a1 _enableAllCouriers];
}

id objc_msgSend__enqueueMessage_forOriginator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueMessage:forOriginator:");
}

id objc_msgSend__enqueueXPCMessage_wakingClient_highPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueXPCMessage:wakingClient:highPriority:");
}

id objc_msgSend__enqueueXPCMessage_wakingClient_highPriority_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueXPCMessage:wakingClient:highPriority:withReply:");
}

id objc_msgSend__failAllPendingMessages(void *a1, const char *a2, ...)
{
  return _[a1 _failAllPendingMessages];
}

id objc_msgSend__failWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_failWithError:");
}

id objc_msgSend__findClientWithToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findClientWithToken:");
}

id objc_msgSend__findConnectedClientWithToken_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findConnectedClientWithToken:onProtocolConnection:");
}

id objc_msgSend__finishDisconnectForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishDisconnectForInterface:");
}

id objc_msgSend__finishLoadWithResponse_urlHost_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishLoadWithResponse:urlHost:data:");
}

id objc_msgSend__flushStaleWiFiMeasurements(void *a1, const char *a2, ...)
{
  return _[a1 _flushStaleWiFiMeasurements];
}

id objc_msgSend__forceReconnectionsWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceReconnectionsWithReason:");
}

id objc_msgSend__forgetRedListTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forgetRedListTopic:");
}

id objc_msgSend__generateSalt(void *a1, const char *a2, ...)
{
  return _[a1 _generateSalt];
}

id objc_msgSend__getCacheEntryForHostname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCacheEntryForHostname:");
}

id objc_msgSend__getCourierForEnvironmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCourierForEnvironmentName:");
}

id objc_msgSend__getCurrentTokens(void *a1, const char *a2, ...)
{
  return _[a1 _getCurrentTokens];
}

id objc_msgSend__getIsCurrentlyLoggedIn(void *a1, const char *a2, ...)
{
  return _[a1 _getIsCurrentlyLoggedIn];
}

id objc_msgSend__getMultiUserMode(void *a1, const char *a2, ...)
{
  return _[a1 _getMultiUserMode];
}

id objc_msgSend__getNextMessageID(void *a1, const char *a2, ...)
{
  return _[a1 _getNextMessageID];
}

id objc_msgSend__getTCPInfoData(void *a1, const char *a2, ...)
{
  return _[a1 _getTCPInfoData];
}

id objc_msgSend__handleChannelUpdateCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleChannelUpdateCommand:");
}

id objc_msgSend__handleConnectedMessage_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConnectedMessage:onProtocolConnection:");
}

id objc_msgSend__handleConnectionAfterSuspensionRecoveryOnInterface_withKeepAlive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConnectionAfterSuspensionRecoveryOnInterface:withKeepAlive:");
}

id objc_msgSend__handleConnectionFailureOnInterface_forceDelayedReconnect_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConnectionFailureOnInterface:forceDelayedReconnect:withReason:");
}

id objc_msgSend__handleConnectionRecoverFromSuspensionOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConnectionRecoverFromSuspensionOnInterface:");
}

id objc_msgSend__handleConnectionSuspendedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConnectionSuspendedOnInterface:");
}

id objc_msgSend__handleDelayKeepAliveCancelMessageOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDelayKeepAliveCancelMessageOnInterface:");
}

id objc_msgSend__handleFlushMessage_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFlushMessage:onInterface:");
}

id objc_msgSend__handleInvalidateTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleInvalidateTokenForInfo:");
}

id objc_msgSend__handleKeepAliveAckMessage_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleKeepAliveAckMessage:onInterface:");
}

id objc_msgSend__handleKeepAliveResponseMessage_onInterface_didWake_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleKeepAliveResponseMessage:onInterface:didWake:");
}

id objc_msgSend__handleLostPushTokens(void *a1, const char *a2, ...)
{
  return _[a1 _handleLostPushTokens];
}

id objc_msgSend__handlePubSubRequest_unsubscriptionChannels_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePubSubRequest:unsubscriptionChannels:token:");
}

id objc_msgSend__handleRedirectMessage_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRedirectMessage:onInterface:");
}

id objc_msgSend__handleRequestTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRequestTokenForInfo:");
}

id objc_msgSend__handleSignificantTimeChange(void *a1, const char *a2, ...)
{
  return _[a1 _handleSignificantTimeChange];
}

id objc_msgSend__handleSubscriptionUpdateCommand_token_protocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSubscriptionUpdateCommand:token:protocolConnection:");
}

id objc_msgSend__handleTaskControlResponse_controlResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTaskControlResponse:controlResponse:error:");
}

id objc_msgSend__hasBytesAvailable(void *a1, const char *a2, ...)
{
  return _[a1 _hasBytesAvailable];
}

id objc_msgSend__hasListeningTopics(void *a1, const char *a2, ...)
{
  return _[a1 _hasListeningTopics];
}

id objc_msgSend__hasSpaceAvailable(void *a1, const char *a2, ...)
{
  return _[a1 _hasSpaceAvailable];
}

id objc_msgSend__hasTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasTopic:");
}

id objc_msgSend__identifierForTopic_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_identifierForTopic:user:");
}

id objc_msgSend__idsSendQueue(void *a1, const char *a2, ...)
{
  return _[a1 _idsSendQueue];
}

id objc_msgSend__incompleteCurrentTaskTransactionMetrics(void *a1, const char *a2, ...)
{
  return _[a1 _incompleteCurrentTaskTransactionMetrics];
}

id objc_msgSend__informTopicManagerOfChangedFilter_newTopics_oldTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_informTopicManagerOfChangedFilter:newTopics:oldTopics:");
}

id objc_msgSend__initiateConnectionIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _initiateConnectionIfNecessary];
}

id objc_msgSend__interfaceForConnectionManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interfaceForConnectionManager:");
}

id objc_msgSend__interfaceForProtocolParser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interfaceForProtocolParser:");
}

id objc_msgSend__interfaceForStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interfaceForStream:");
}

id objc_msgSend__invokeInFailureHandlingContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invokeInFailureHandlingContext:");
}

id objc_msgSend__isExpired(void *a1, const char *a2, ...)
{
  return _[a1 _isExpired];
}

id objc_msgSend__isIdentityAvailable(void *a1, const char *a2, ...)
{
  return _[a1 _isIdentityAvailable];
}

id objc_msgSend__isInteractivePushDuringSleepEnabledForConnectionServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInteractivePushDuringSleepEnabledForConnectionServer:");
}

id objc_msgSend__isInternetReachableOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInternetReachableOnInterface:");
}

id objc_msgSend__isResponseForProxyDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isResponseForProxyDevice:");
}

id objc_msgSend__isValidEnvironmentToTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isValidEnvironmentToTopics:");
}

id objc_msgSend__isWiFiLinkQualityBetter(void *a1, const char *a2, ...)
{
  return _[a1 _isWiFiLinkQualityBetter];
}

id objc_msgSend__keyForTopic_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyForTopic:token:");
}

id objc_msgSend__keychainService(void *a1, const char *a2, ...)
{
  return _[a1 _keychainService];
}

id objc_msgSend__lingerAfterLastPowerAssertionIsReleased(void *a1, const char *a2, ...)
{
  return _[a1 _lingerAfterLastPowerAssertionIsReleased];
}

id objc_msgSend__linkQualityForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_linkQualityForInterface:");
}

id objc_msgSend__loadCachedProperties(void *a1, const char *a2, ...)
{
  return _[a1 _loadCachedProperties];
}

id objc_msgSend__loadIdentifiersToSaltsFromKeychainForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadIdentifiersToSaltsFromKeychainForUser:");
}

id objc_msgSend__loadKeychainDataForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadKeychainDataForUser:");
}

id objc_msgSend__logTopics(void *a1, const char *a2, ...)
{
  return _[a1 _logTopics];
}

id objc_msgSend__lookUpMachPort(void *a1, const char *a2, ...)
{
  return _[a1 _lookUpMachPort];
}

id objc_msgSend__markDisconnectedIsPermanent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markDisconnectedIsPermanent:");
}

id objc_msgSend__migratePersistentTopicsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _migratePersistentTopicsIfNeeded];
}

id objc_msgSend__neededToSwitchToKeepAliveProxyInterface(void *a1, const char *a2, ...)
{
  return _[a1 _neededToSwitchToKeepAliveProxyInterface];
}

id objc_msgSend__noteConnection(void *a1, const char *a2, ...)
{
  return _[a1 _noteConnection];
}

id objc_msgSend__notifyForIncomingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyForIncomingMessage:");
}

id objc_msgSend__notifyForIncomingMessage_forConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyForIncomingMessage:forConnection:");
}

id objc_msgSend__onQueueDeleteLowPriorityIncomingMessagesForTopic_environment_pushTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueueDeleteLowPriorityIncomingMessagesForTopic:environment:pushTokens:");
}

id objc_msgSend__onQueueIncomingMessagesFromRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueueIncomingMessagesFromRecords:");
}

id objc_msgSend__onQueueSubscribedChannelsForRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueueSubscribedChannelsForRecord:");
}

id objc_msgSend__onQueueSubscribedChannelsForRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueueSubscribedChannelsForRecords:");
}

id objc_msgSend__onQueue_checkNearbyDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueue_checkNearbyDevices:");
}

id objc_msgSend__onQueue_configurationForEnvironment_connectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueue_configurationForEnvironment:connectionType:");
}

id objc_msgSend__openWithTXTLookup(void *a1, const char *a2, ...)
{
  return _[a1 _openWithTXTLookup];
}

id objc_msgSend__outgoingMessageIsLateCriticalMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outgoingMessageIsLateCriticalMessage:");
}

id objc_msgSend__parseDERCertificatesFromChain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseDERCertificatesFromChain:");
}

id objc_msgSend__parseSerialMessage_parameters_isInvalid_lengthParsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseSerialMessage:parameters:isInvalid:lengthParsed:");
}

id objc_msgSend__pendingFilterTimerFired(void *a1, const char *a2, ...)
{
  return _[a1 _pendingFilterTimerFired];
}

id objc_msgSend__performEvictionSweep(void *a1, const char *a2, ...)
{
  return _[a1 _performEvictionSweep];
}

id objc_msgSend__performIdleCheck(void *a1, const char *a2, ...)
{
  return _[a1 _performIdleCheck];
}

id objc_msgSend__performKeepAliveOnInterface_shortInterval_withAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performKeepAliveOnInterface:shortInterval:withAction:");
}

id objc_msgSend__performPeriodicSignal(void *a1, const char *a2, ...)
{
  return _[a1 _performPeriodicSignal];
}

id objc_msgSend__potentiallyChangeChosenTopicStateForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_potentiallyChangeChosenTopicStateForTopic:");
}

id objc_msgSend__prepareToParseOutgoingDataOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareToParseOutgoingDataOnInterface:");
}

id objc_msgSend__processInvalidIdentity(void *a1, const char *a2, ...)
{
  return _[a1 _processInvalidIdentity];
}

id objc_msgSend__processPendingChangeIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _processPendingChangeIfNeeded];
}

id objc_msgSend__processPendingProxyPresences(void *a1, const char *a2, ...)
{
  return _[a1 _processPendingProxyPresences];
}

id objc_msgSend__processPotentialIdentityChanged(void *a1, const char *a2, ...)
{
  return _[a1 _processPotentialIdentityChanged];
}

id objc_msgSend__processSSIDChangeWithSSID_querySSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processSSIDChangeWithSSID:querySSID:");
}

id objc_msgSend__processShouldRunChangeIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _processShouldRunChangeIfNecessary];
}

id objc_msgSend__processShouldUseInternetChangeIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _processShouldUseInternetChangeIfNecessary];
}

id objc_msgSend__processStoredIncomingMessages(void *a1, const char *a2, ...)
{
  return _[a1 _processStoredIncomingMessages];
}

id objc_msgSend__processStoredIncomingMessagesForConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processStoredIncomingMessagesForConnection:");
}

id objc_msgSend__processStoredOutgoingMessages(void *a1, const char *a2, ...)
{
  return _[a1 _processStoredOutgoingMessages];
}

id objc_msgSend__processTopicChange_immediately_alertDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processTopicChange:immediately:alertDelegate:");
}

id objc_msgSend__protoSubscriptionFailureToReadableFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_protoSubscriptionFailureToReadableFailure:");
}

id objc_msgSend__protoUpdateFailureToReadableFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_protoUpdateFailureToReadableFailure:");
}

id objc_msgSend__proxyManager(void *a1, const char *a2, ...)
{
  return _[a1 _proxyManager];
}

id objc_msgSend__pruneHistory(void *a1, const char *a2, ...)
{
  return _[a1 _pruneHistory];
}

id objc_msgSend__queueChanged(void *a1, const char *a2, ...)
{
  return _[a1 _queueChanged];
}

id objc_msgSend__recalculatePowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _recalculatePowerAssertion];
}

id objc_msgSend__recalculateTimer(void *a1, const char *a2, ...)
{
  return _[a1 _recalculateTimer];
}

id objc_msgSend__recategorizeTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recategorizeTopic:");
}

id objc_msgSend__receiveData(void *a1, const char *a2, ...)
{
  return _[a1 _receiveData];
}

id objc_msgSend__recipientDevice(void *a1, const char *a2, ...)
{
  return _[a1 _recipientDevice];
}

id objc_msgSend__recreateCacheDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 _recreateCacheDictionaries];
}

id objc_msgSend__registerAppTokenCleanup(void *a1, const char *a2, ...)
{
  return _[a1 _registerAppTokenCleanup];
}

id objc_msgSend__registerForWoWNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _registerForWoWNotifications];
}

id objc_msgSend__reloadDualMode(void *a1, const char *a2, ...)
{
  return _[a1 _reloadDualMode];
}

id objc_msgSend__rememberRedListTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rememberRedListTopic:");
}

id objc_msgSend__removeCourierForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeCourierForEnvironment:");
}

id objc_msgSend__removePendingRequestsForProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removePendingRequestsForProtocolConnection:");
}

id objc_msgSend__removeTopic_connectionServer_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeTopic:connectionServer:filter:");
}

id objc_msgSend__reportAPSConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 _reportAPSConnectivity];
}

id objc_msgSend__requestClientPubSubChannelList_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestClientPubSubChannelList:onProtocolConnection:");
}

id objc_msgSend__requestKeepAlive_orConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestKeepAlive:orConnection:");
}

id objc_msgSend__requestKeepAlive_orConnection_shortInterval_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestKeepAlive:orConnection:shortInterval:onInterface:");
}

id objc_msgSend__requestKeepAliveProxy(void *a1, const char *a2, ...)
{
  return _[a1 _requestKeepAliveProxy];
}

id objc_msgSend__requestToSendFilterOnTopicManager_change_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestToSendFilterOnTopicManager:change:");
}

id objc_msgSend__resetCheckpointForIgnoredTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetCheckpointForIgnoredTopics:");
}

id objc_msgSend__resetKeepAliveOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetKeepAliveOnInterface:");
}

id objc_msgSend__resetServerKeepAliveStatsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetServerKeepAliveStatsOnInterface:");
}

id objc_msgSend__resumeQueue(void *a1, const char *a2, ...)
{
  return _[a1 _resumeQueue];
}

id objc_msgSend__retrieveAllDevicesAndDo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retrieveAllDevicesAndDo:");
}

id objc_msgSend__retryRequestAfterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryRequestAfterDelay:");
}

id objc_msgSend__retryRequestAfterDelay_withDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryRequestAfterDelay:withDelay:");
}

id objc_msgSend__saltStoreForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saltStoreForUser:");
}

id objc_msgSend__saveIdentifiersToSalts_toKeychainForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveIdentifiersToSalts:toKeychainForUser:");
}

id objc_msgSend__saveKeychainData_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveKeychainData:forUser:");
}

id objc_msgSend__savePersistentConnectionTopics(void *a1, const char *a2, ...)
{
  return _[a1 _savePersistentConnectionTopics];
}

id objc_msgSend__scheduleDeviceNotFoundTimer(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleDeviceNotFoundTimer];
}

id objc_msgSend__schedulePeriodicSignal(void *a1, const char *a2, ...)
{
  return _[a1 _schedulePeriodicSignal];
}

id objc_msgSend__scheduleServerUpdateWithChange_timer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleServerUpdateWithChange:timer:");
}

id objc_msgSend__scheduleServerUpdateWithChange_timer_shortInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleServerUpdateWithChange:timer:shortInterval:");
}

id objc_msgSend__sendActiveStateMessageWithSendAllBlueListMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendActiveStateMessageWithSendAllBlueListMessages:");
}

id objc_msgSend__sendClientFilter_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendClientFilter:onProtocolConnection:");
}

id objc_msgSend__sendClientToken_forInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendClientToken:forInfo:");
}

id objc_msgSend__sendDaemonAliveMessage(void *a1, const char *a2, ...)
{
  return _[a1 _sendDaemonAliveMessage];
}

id objc_msgSend__sendFilterMessageOnProtocolConnection_withChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendFilterMessageOnProtocolConnection:withChange:");
}

id objc_msgSend__sendFilterMessageOnProtocolConnection_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendFilterMessageOnProtocolConnection:withReason:");
}

id objc_msgSend__sendInactiveMessage(void *a1, const char *a2, ...)
{
  return _[a1 _sendInactiveMessage];
}

id objc_msgSend__sendOutgoingMessage_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendOutgoingMessage:onProtocolConnection:");
}

id objc_msgSend__sendOutgoingMessage_topicHash_lastRTT_token_onInterface_ultraConstrainedAllowed_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendOutgoingMessage:topicHash:lastRTT:token:onInterface:ultraConstrainedAllowed:withCompletion:");
}

id objc_msgSend__sendPresenceMessageOnProtocolConnection_serverTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendPresenceMessageOnProtocolConnection:serverTime:");
}

id objc_msgSend__sendProxyChannelList_onConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendProxyChannelList:onConnectionType:");
}

id objc_msgSend__sendPubsubConnectMessageOnProtocolConnection_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendPubsubConnectMessageOnProtocolConnection:token:");
}

id objc_msgSend__sendQueuedOutgoingMessages(void *a1, const char *a2, ...)
{
  return _[a1 _sendQueuedOutgoingMessages];
}

id objc_msgSend__serializeKeychainDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serializeKeychainDict:");
}

id objc_msgSend__setActivePushConnectionState(void *a1, const char *a2, ...)
{
  return _[a1 _setActivePushConnectionState];
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__setSaltStore_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSaltStore:forUser:");
}

id objc_msgSend__setSystemLockState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSystemLockState:");
}

id objc_msgSend__setSystemScreenState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSystemScreenState:");
}

id objc_msgSend__setToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setToken:");
}

id objc_msgSend__setupNotifyToken(void *a1, const char *a2, ...)
{
  return _[a1 _setupNotifyToken];
}

id objc_msgSend__startConnectionEstablishTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startConnectionEstablishTimerOnInterface:");
}

id objc_msgSend__startCriticalMessageFlushTimerSendingFlush(void *a1, const char *a2, ...)
{
  return _[a1 _startCriticalMessageFlushTimerSendingFlush];
}

id objc_msgSend__startEvictionTimerIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _startEvictionTimerIfNeeded];
}

id objc_msgSend__startFilterMessageTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startFilterMessageTimerOnInterface:");
}

id objc_msgSend__startInactivityTerminationTimerIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _startInactivityTerminationTimerIfNecessary];
}

id objc_msgSend__startKeepAliveResponseTimerOnInterface_shortInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startKeepAliveResponseTimerOnInterface:shortInterval:");
}

id objc_msgSend__startResetInterfacePreferenceTimer(void *a1, const char *a2, ...)
{
  return _[a1 _startResetInterfacePreferenceTimer];
}

id objc_msgSend__stopEvictionTimer(void *a1, const char *a2, ...)
{
  return _[a1 _stopEvictionTimer];
}

id objc_msgSend__stopEvictionTimerIfEmpty(void *a1, const char *a2, ...)
{
  return _[a1 _stopEvictionTimerIfEmpty];
}

id objc_msgSend__submitKeepAliveFailedAWDonInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitKeepAliveFailedAWDonInterface:");
}

id objc_msgSend__submitKeepAliveSucceededAWDonInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitKeepAliveSucceededAWDonInterface:");
}

id objc_msgSend__suspendQueue(void *a1, const char *a2, ...)
{
  return _[a1 _suspendQueue];
}

id objc_msgSend__systemDidWake(void *a1, const char *a2, ...)
{
  return _[a1 _systemDidWake];
}

id objc_msgSend__systemIsReady(void *a1, const char *a2, ...)
{
  return _[a1 _systemIsReady];
}

id objc_msgSend__systemWillSleep(void *a1, const char *a2, ...)
{
  return _[a1 _systemWillSleep];
}

id objc_msgSend__toggleWiFiAutoAssociateIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _toggleWiFiAutoAssociateIfNecessary];
}

id objc_msgSend__tokenStoreForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tokenStoreForEnvironment:");
}

id objc_msgSend__topicStateForTopic_connectionServer_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_topicStateForTopic:connectionServer:filter:");
}

id objc_msgSend__topicsByHashFromTopicStateDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_topicsByHashFromTopicStateDictionary:");
}

id objc_msgSend__triggerAutoBugCaptureForInvalidPresence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_triggerAutoBugCaptureForInvalidPresence:");
}

id objc_msgSend__triggerAutoBugCaptureIfMessageIsRetried_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_triggerAutoBugCaptureIfMessageIsRetried:");
}

id objc_msgSend__ultraConstrainedTopicsFromTopicDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ultraConstrainedTopicsFromTopicDictionary:");
}

id objc_msgSend__updateCourierConnectTimerAndPowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _updateCourierConnectTimerAndPowerAssertion];
}

id objc_msgSend__updateNetworkGuidance(void *a1, const char *a2, ...)
{
  return _[a1 _updateNetworkGuidance];
}

id objc_msgSend__updateTimerIfNecessaryWithDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTimerIfNecessaryWithDevices:");
}

id objc_msgSend__useCachedLastIPIfPossible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useCachedLastIPIfPossible:");
}

id objc_msgSend__useInteractivePowerAssertionIfNeededForConnectionServer_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useInteractivePowerAssertionIfNeededForConnectionServer:withReason:");
}

id objc_msgSend__useInteractivePowerAssertionIfNeededWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useInteractivePowerAssertionIfNeededWithReason:");
}

id objc_msgSend__useShortKeepAliveInterval(void *a1, const char *a2, ...)
{
  return _[a1 _useShortKeepAliveInterval];
}

id objc_msgSend__useSystemSaltStoreForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useSystemSaltStoreForUser:");
}

id objc_msgSend__wakeCausedByTopic_interface_priorityVal_inAllowlist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wakeCausedByTopic:interface:priorityVal:inAllowlist:");
}

id objc_msgSend__warnIfOverlappingTopics_againstTopics_string_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_warnIfOverlappingTopics:againstTopics:string:");
}

id objc_msgSend__wifiIsHistoricallyCheap(void *a1, const char *a2, ...)
{
  return _[a1 _wifiIsHistoricallyCheap];
}

id objc_msgSend__writePubSubMessagetoConnection_messageID_token_connectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writePubSubMessagetoConnection:messageID:token:connectionType:");
}

id objc_msgSend_ackTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 ackTimestamp];
}

id objc_msgSend_acknowledgeDidReceivePublicToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgeDidReceivePublicToken:");
}

id objc_msgSend_activeProtocolConnections(void *a1, const char *a2, ...)
{
  return _[a1 activeProtocolConnections];
}

id objc_msgSend_activityTracking(void *a1, const char *a2, ...)
{
  return _[a1 activityTracking];
}

id objc_msgSend_addAppChannelSubscriptionResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAppChannelSubscriptionResponse:");
}

id objc_msgSend_addAppChannelSubscriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAppChannelSubscriptions:");
}

id objc_msgSend_addAppChannelUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAppChannelUpdates:");
}

id objc_msgSend_addAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributes:");
}

id objc_msgSend_addBinaryPropertyListWithAttributeId_data_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBinaryPropertyListWithAttributeId:data:isIndexable:");
}

id objc_msgSend_addCacheIPAddress_addressFamily_timeToLive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCacheIPAddress:addressFamily:timeToLive:");
}

id objc_msgSend_addCertificates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCertificates:");
}

id objc_msgSend_addChannelUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChannelUpdates:");
}

id objc_msgSend_addCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCompletionBlock:");
}

id objc_msgSend_addConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConnection:");
}

id objc_msgSend_addConnection_forUser_dependencies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConnection:forUser:dependencies:");
}

id objc_msgSend_addCost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCost:");
}

id objc_msgSend_addDataListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDataListener:");
}

id objc_msgSend_addDataWithAttributeId_data_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDataWithAttributeId:data:isIndexable:");
}

id objc_msgSend_addDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addFastDormancyDisableToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFastDormancyDisableToken:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addInt16WithAttributeId_number_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInt16WithAttributeId:number:isIndexable:");
}

id objc_msgSend_addInt32WithAttributeId_number_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInt32WithAttributeId:number:isIndexable:");
}

id objc_msgSend_addInt64WithAttributeId_number_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInt64WithAttributeId:number:isIndexable:");
}

id objc_msgSend_addInt8WithAttributeId_number_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInt8WithAttributeId:number:isIndexable:");
}

id objc_msgSend_addIpv4_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIpv4:");
}

id objc_msgSend_addIpv6_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIpv6:");
}

id objc_msgSend_addItem_withInitialState_withTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItem:withInitialState:withTopic:");
}

id objc_msgSend_addListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addListener:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addStateListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStateListener:");
}

id objc_msgSend_addStringWithAttributId_string_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStringWithAttributId:string:isIndexable:");
}

id objc_msgSend_addSubscriptionChannelResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubscriptionChannelResponse:");
}

id objc_msgSend_addSubscriptionChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubscriptionChannels:");
}

id objc_msgSend_addSubscriptionUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubscriptionUpdates:");
}

id objc_msgSend_addTaskServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTaskServer:");
}

id objc_msgSend_addTimer_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTimer:forMode:");
}

id objc_msgSend_addTopicsAndAttributes_connectionServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTopicsAndAttributes:connectionServer:");
}

id objc_msgSend_addUnsubscriptionChannelResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addUnsubscriptionChannelResponse:");
}

id objc_msgSend_addUnsubscriptionChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addUnsubscriptionChannels:");
}

id objc_msgSend_addressFamily(void *a1, const char *a2, ...)
{
  return _[a1 addressFamily];
}

id objc_msgSend_adjustConnectionsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 adjustConnectionsIfNeeded];
}

id objc_msgSend_adjustQualityOfConnectionOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustQualityOfConnectionOnInterface:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allRegisteredChannelsForEnvironment_userName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allRegisteredChannelsForEnvironment:userName:");
}

id objc_msgSend_allRegisteredChannelsForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allRegisteredChannelsForTopic:");
}

id objc_msgSend_allRegisteredChannelsForTopic_environment_userName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allRegisteredChannelsForTopic:environment:userName:");
}

id objc_msgSend_allRegisteredChannelsForTopic_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allRegisteredChannelsForTopic:user:");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowBindingToWWAN(void *a1, const char *a2, ...)
{
  return _[a1 allowBindingToWWAN];
}

id objc_msgSend_allowedToHaveMultipleOpenInterfaces(void *a1, const char *a2, ...)
{
  return _[a1 allowedToHaveMultipleOpenInterfaces];
}

id objc_msgSend_alternatePort(void *a1, const char *a2, ...)
{
  return _[a1 alternatePort];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appChannelSubscriptionResponseAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appChannelSubscriptionResponseAtIndex:");
}

id objc_msgSend_appChannelSubscriptionResponses(void *a1, const char *a2, ...)
{
  return _[a1 appChannelSubscriptionResponses];
}

id objc_msgSend_appChannelSubscriptionResponsesCount(void *a1, const char *a2, ...)
{
  return _[a1 appChannelSubscriptionResponsesCount];
}

id objc_msgSend_appChannelSubscriptionsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appChannelSubscriptionsAtIndex:");
}

id objc_msgSend_appChannelSubscriptionsCount(void *a1, const char *a2, ...)
{
  return _[a1 appChannelSubscriptionsCount];
}

id objc_msgSend_appChannelUpdates(void *a1, const char *a2, ...)
{
  return _[a1 appChannelUpdates];
}

id objc_msgSend_appChannelUpdatesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appChannelUpdatesAtIndex:");
}

id objc_msgSend_appChannelUpdatesCount(void *a1, const char *a2, ...)
{
  return _[a1 appChannelUpdatesCount];
}

id objc_msgSend_appId(void *a1, const char *a2, ...)
{
  return _[a1 appId];
}

id objc_msgSend_appTokenGenerateCompletions(void *a1, const char *a2, ...)
{
  return _[a1 appTokenGenerateCompletions];
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendDescription_BOOLValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:BOOLValue:");
}

id objc_msgSend_appendDescription_dateValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:dateValue:");
}

id objc_msgSend_appendDescription_enabledValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:enabledValue:");
}

id objc_msgSend_appendDescription_stringValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:stringValue:");
}

id objc_msgSend_appendDescription_successRateWithSuccessCount_failureCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:successRateWithSuccessCount:failureCount:");
}

id objc_msgSend_appendDescription_timeIntervalValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:timeIntervalValue:");
}

id objc_msgSend_appendDescription_unsignedIntegerValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:unsignedIntegerValue:");
}

id objc_msgSend_appendDescription_unsignedLongLongValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:unsignedLongLongValue:");
}

id objc_msgSend_appendEightByteItem_bytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendEightByteItem:bytes:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendFourByteItem_bytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFourByteItem:bytes:");
}

id objc_msgSend_appendItem_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendItem:data:");
}

id objc_msgSend_appendItem_string_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendItem:string:");
}

id objc_msgSend_appendLine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendLine:");
}

id objc_msgSend_appendOneByteItem_byte_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendOneByteItem:byte:");
}

id objc_msgSend_appendPrettyStatusToStatusPrinter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendPrettyStatusToStatusPrinter:");
}

id objc_msgSend_appendPrettyStatusToStatusPrinter_forTopics_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendPrettyStatusToStatusPrinter:forTopics:type:");
}

id objc_msgSend_appendPrettyStatusToStatusPrinter_total_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendPrettyStatusToStatusPrinter:total:direction:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appendTwoByteItem_bytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendTwoByteItem:bytes:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_attemptToRollSalt(void *a1, const char *a2, ...)
{
  return _[a1 attemptToRollSalt];
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _[a1 attributes];
}

id objc_msgSend_attributesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesAtIndex:");
}

id objc_msgSend_attributesCount(void *a1, const char *a2, ...)
{
  return _[a1 attributesCount];
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return _[a1 authenticationMethod];
}

id objc_msgSend_baaIdentityRefreshedBlock(void *a1, const char *a2, ...)
{
  return _[a1 baaIdentityRefreshedBlock];
}

id objc_msgSend_bagExpiryInterval(void *a1, const char *a2, ...)
{
  return _[a1 bagExpiryInterval];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseToken(void *a1, const char *a2, ...)
{
  return _[a1 baseToken];
}

id objc_msgSend_beginTrackingProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTrackingProtocolConnection:");
}

id objc_msgSend_beginTransaction(void *a1, const char *a2, ...)
{
  return _[a1 beginTransaction];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_BOOLValueFromPushBundleForKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValueFromPushBundleForKey:error:");
}

id objc_msgSend_bootstrapLookupForPortName_outConnectionPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bootstrapLookupForPortName:outConnectionPort:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cachedServerCountForDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedServerCountForDomain:");
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return _[a1 callStackSymbols];
}

id objc_msgSend_canAttemptConnection(void *a1, const char *a2, ...)
{
  return _[a1 canAttemptConnection];
}

id objc_msgSend_canUseProxy(void *a1, const char *a2, ...)
{
  return _[a1 canUseProxy];
}

id objc_msgSend_canUseProxyChanged(void *a1, const char *a2, ...)
{
  return _[a1 canUseProxyChanged];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelOutgoingMessageWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelOutgoingMessageWithID:");
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:selector:object:");
}

id objc_msgSend_captureStreams(void *a1, const char *a2, ...)
{
  return _[a1 captureStreams];
}

id objc_msgSend_carrier(void *a1, const char *a2, ...)
{
  return _[a1 carrier];
}

id objc_msgSend_certificate(void *a1, const char *a2, ...)
{
  return _[a1 certificate];
}

id objc_msgSend_certificates(void *a1, const char *a2, ...)
{
  return _[a1 certificates];
}

id objc_msgSend_certificatesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "certificatesAtIndex:");
}

id objc_msgSend_certificatesCount(void *a1, const char *a2, ...)
{
  return _[a1 certificatesCount];
}

id objc_msgSend_channelID(void *a1, const char *a2, ...)
{
  return _[a1 channelID];
}

id objc_msgSend_channelId(void *a1, const char *a2, ...)
{
  return _[a1 channelId];
}

id objc_msgSend_channelStatus(void *a1, const char *a2, ...)
{
  return _[a1 channelStatus];
}

id objc_msgSend_channelSubscriptionCheckpoint(void *a1, const char *a2, ...)
{
  return _[a1 channelSubscriptionCheckpoint];
}

id objc_msgSend_channelTopic(void *a1, const char *a2, ...)
{
  return _[a1 channelTopic];
}

id objc_msgSend_channelUpdates(void *a1, const char *a2, ...)
{
  return _[a1 channelUpdates];
}

id objc_msgSend_channelUpdatesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelUpdatesAtIndex:");
}

id objc_msgSend_channelUpdatesCount(void *a1, const char *a2, ...)
{
  return _[a1 channelUpdatesCount];
}

id objc_msgSend_checkpoint(void *a1, const char *a2, ...)
{
  return _[a1 checkpoint];
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return _[a1 clear];
}

id objc_msgSend_clearAppChannelSubscriptionResponses(void *a1, const char *a2, ...)
{
  return _[a1 clearAppChannelSubscriptionResponses];
}

id objc_msgSend_clearAppChannelSubscriptions(void *a1, const char *a2, ...)
{
  return _[a1 clearAppChannelSubscriptions];
}

id objc_msgSend_clearAppChannelUpdates(void *a1, const char *a2, ...)
{
  return _[a1 clearAppChannelUpdates];
}

id objc_msgSend_clearAttributes(void *a1, const char *a2, ...)
{
  return _[a1 clearAttributes];
}

id objc_msgSend_clearCertificates(void *a1, const char *a2, ...)
{
  return _[a1 clearCertificates];
}

id objc_msgSend_clearChannelUpdates(void *a1, const char *a2, ...)
{
  return _[a1 clearChannelUpdates];
}

id objc_msgSend_clearConnectionEstablishTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearConnectionEstablishTimerOnInterface:");
}

id objc_msgSend_clearConsecutiveConnectionFailureReasonOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearConsecutiveConnectionFailureReasonOnInterface:");
}

id objc_msgSend_clearDNSResolutionAndTLSHandshakeOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDNSResolutionAndTLSHandshakeOnInterface:");
}

id objc_msgSend_clearEnqueuedSendsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearEnqueuedSendsOnInterface:");
}

id objc_msgSend_clearInfoFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearInfoFor:");
}

id objc_msgSend_clearIpv4s(void *a1, const char *a2, ...)
{
  return _[a1 clearIpv4s];
}

id objc_msgSend_clearIpv6s(void *a1, const char *a2, ...)
{
  return _[a1 clearIpv6s];
}

id objc_msgSend_clearKeepAliveResponseTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearKeepAliveResponseTimerOnInterface:");
}

id objc_msgSend_clearOneofValuesForSubscriptionInfo(void *a1, const char *a2, ...)
{
  return _[a1 clearOneofValuesForSubscriptionInfo];
}

id objc_msgSend_clearProtocolConnectionForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearProtocolConnectionForInterface:");
}

id objc_msgSend_clearRedirectCount(void *a1, const char *a2, ...)
{
  return _[a1 clearRedirectCount];
}

id objc_msgSend_clearSaltForTopic_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearSaltForTopic:user:");
}

id objc_msgSend_clearSubscriptionChannelResponses(void *a1, const char *a2, ...)
{
  return _[a1 clearSubscriptionChannelResponses];
}

id objc_msgSend_clearSubscriptionChannels(void *a1, const char *a2, ...)
{
  return _[a1 clearSubscriptionChannels];
}

id objc_msgSend_clearSubscriptionUpdates(void *a1, const char *a2, ...)
{
  return _[a1 clearSubscriptionUpdates];
}

id objc_msgSend_clearUnsubscriptionChannelResponses(void *a1, const char *a2, ...)
{
  return _[a1 clearUnsubscriptionChannelResponses];
}

id objc_msgSend_clearUnsubscriptionChannels(void *a1, const char *a2, ...)
{
  return _[a1 clearUnsubscriptionChannels];
}

id objc_msgSend_client_messageTracingWithStatus_topic_tracingUUID_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:messageTracingWithStatus:topic:tracingUUID:token:");
}

id objc_msgSend_client_requestPushAckResponse_messageId_token_connectionType_generation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:requestPushAckResponse:messageId:token:connectionType:generation:");
}

id objc_msgSend_client_requestSendOutgoingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:requestSendOutgoingMessage:");
}

id objc_msgSend_client_requestTokenGenerateWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:requestTokenGenerateWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:");
}

id objc_msgSend_client_sendPubSubChannelList_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:sendPubSubChannelList:token:");
}

id objc_msgSend_clientBecameInactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientBecameInactive:");
}

id objc_msgSend_clientIdentity(void *a1, const char *a2, ...)
{
  return _[a1 clientIdentity];
}

id objc_msgSend_clientIdentityProvider(void *a1, const char *a2, ...)
{
  return _[a1 clientIdentityProvider];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_closeStreamForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeStreamForInterface:");
}

id objc_msgSend_closedSecondChannel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closedSecondChannel:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return _[a1 completionBlock];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_configurationClass(void *a1, const char *a2, ...)
{
  return _[a1 configurationClass];
}

id objc_msgSend_configurationForEnvironment_connectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationForEnvironment:connectionType:");
}

id objc_msgSend_configurationURL(void *a1, const char *a2, ...)
{
  return _[a1 configurationURL];
}

id objc_msgSend_configureWhetherPeerIsTrustedFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWhetherPeerIsTrustedFor:");
}

id objc_msgSend_connectToEnvironment_onInterface_allowedInterfaceConstraint_useAlternatePort_keepAliveProxyMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToEnvironment:onInterface:allowedInterfaceConstraint:useAlternatePort:keepAliveProxyMode:");
}

id objc_msgSend_connectedInterfaceForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedInterfaceForIdentifier:");
}

id objc_msgSend_connectedTimeInPastOneDayOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedTimeInPastOneDayOnInterface:");
}

id objc_msgSend_connectingInterface(void *a1, const char *a2, ...)
{
  return _[a1 connectingInterface];
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _[a1 connection];
}

id objc_msgSend_connection_createURLTokenForToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:createURLTokenForToken:");
}

id objc_msgSend_connection_didInvalidateTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didInvalidateTokenForInfo:");
}

id objc_msgSend_connection_didReceiveCancellationForOutgoingMessageWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceiveCancellationForOutgoingMessageWithID:");
}

id objc_msgSend_connection_didReceiveFakeMessageToSend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceiveFakeMessageToSend:");
}

id objc_msgSend_connection_didReceiveIncomingMessageReceiptWithTopic_tracingUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceiveIncomingMessageReceiptWithTopic:tracingUUID:");
}

id objc_msgSend_connection_didReceiveOutgoingMessageToSend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceiveOutgoingMessageToSend:");
}

id objc_msgSend_connection_didReceiveSubscribeToChannels_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceiveSubscribeToChannels:forTopic:");
}

id objc_msgSend_connection_didReceiveUnsubscribeToChannels_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceiveUnsubscribeToChannels:forTopic:");
}

id objc_msgSend_connection_didRequestCurrentTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didRequestCurrentTokenForInfo:");
}

id objc_msgSend_connection_didRequestTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didRequestTokenForInfo:");
}

id objc_msgSend_connection_handleAckIncomingMessageWithGuid_topic_tracingUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:handleAckIncomingMessageWithGuid:topic:tracingUUID:");
}

id objc_msgSend_connection_setKeepAliveConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:setKeepAliveConfiguration:");
}

id objc_msgSend_connection_subscribeToPreviouslyIgnoredTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:subscribeToPreviouslyIgnoredTopics:");
}

id objc_msgSend_connectionChangedCriticalReliability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionChangedCriticalReliability:");
}

id objc_msgSend_connectionChangedTrackActivityPresence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionChangedTrackActivityPresence:");
}

id objc_msgSend_connectionConnectedWithDuration_interface_linkQuality_dualChannelState_dnsResolutionTimeMilliseconds_tlsHandshakeTimeMilliseconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionConnectedWithDuration:interface:linkQuality:dualChannelState:dnsResolutionTimeMilliseconds:tlsHandshakeTimeMilliseconds:");
}

id objc_msgSend_connectionDebugInfo(void *a1, const char *a2, ...)
{
  return _[a1 connectionDebugInfo];
}

id objc_msgSend_connectionDelegateHasConnectedUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionDelegateHasConnectedUser:");
}

id objc_msgSend_connectionDelegateIsConnectedToService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionDelegateIsConnectedToService:");
}

id objc_msgSend_connectionDisconnected_linkQuality_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionDisconnected:linkQuality:reason:");
}

id objc_msgSend_connectionEncounteredSSLError_interface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionEncounteredSSLError:interface:");
}

id objc_msgSend_connectionForConnectionPortName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionForConnectionPortName:");
}

id objc_msgSend_connectionForConnectionPortName_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionForConnectionPortName:user:");
}

id objc_msgSend_connectionHandshakeDidComplete(void *a1, const char *a2, ...)
{
  return _[a1 connectionHandshakeDidComplete];
}

id objc_msgSend_connectionInvalidated(void *a1, const char *a2, ...)
{
  return _[a1 connectionInvalidated];
}

id objc_msgSend_connectionManager(void *a1, const char *a2, ...)
{
  return _[a1 connectionManager];
}

id objc_msgSend_connectionPortName(void *a1, const char *a2, ...)
{
  return _[a1 connectionPortName];
}

id objc_msgSend_connectionQualityOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionQualityOnInterface:");
}

id objc_msgSend_connectionRetryManager(void *a1, const char *a2, ...)
{
  return _[a1 connectionRetryManager];
}

id objc_msgSend_connectionServer(void *a1, const char *a2, ...)
{
  return _[a1 connectionServer];
}

id objc_msgSend_connectionServerDelegateForUser_dependencies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionServerDelegateForUser:dependencies:");
}

id objc_msgSend_connectionServers(void *a1, const char *a2, ...)
{
  return _[a1 connectionServers];
}

id objc_msgSend_connectionServersForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionServersForUser:");
}

id objc_msgSend_connectionSetupComplete(void *a1, const char *a2, ...)
{
  return _[a1 connectionSetupComplete];
}

id objc_msgSend_connectionTimeForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionTimeForInterface:");
}

id objc_msgSend_connectionTopicsChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionTopicsChanged:");
}

id objc_msgSend_connectionType(void *a1, const char *a2, ...)
{
  return _[a1 connectionType];
}

id objc_msgSend_connectionTypeByMessageID(void *a1, const char *a2, ...)
{
  return _[a1 connectionTypeByMessageID];
}

id objc_msgSend_connectionWasClosed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionWasClosed:");
}

id objc_msgSend_connectionWasOpened_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionWasOpened:");
}

id objc_msgSend_consecutiveConnectionFailureReasonOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consecutiveConnectionFailureReasonOnInterface:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyAppSpecificIdentifierWithTopic_identifier_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyAppSpecificIdentifierWithTopic:identifier:user:");
}

id objc_msgSend_copyAppSpecificTokensWithDomain_forTopic_tokenServiceSuffix_user_returnRef_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyAppSpecificTokensWithDomain:forTopic:tokenServiceSuffix:user:returnRef:error:");
}

id objc_msgSend_copyAppSpecificTokensWithDomain_forTopic_user_returnRef_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyAppSpecificTokensWithDomain:forTopic:user:returnRef:error:");
}

id objc_msgSend_copyConnectMessageWithToken_interface_interfaceConstraint_presenceFlags_activeInterval_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_tcpHandshakeTimeMilliseconds_dnsResolveTimeMilliseconds_tlsHandshakeTimeMilliseconds_consecutiveConnectionFailureReason_lastConnected_disconnectReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyConnectMessageWithToken:interface:interfaceConstraint:presenceFlags:activeInterval:metadata:certificates:nonce:signature:hostCertificateInfo:redirectCount:tcpHandshakeTimeMilliseconds:dnsResolveTimeMilliseconds:tlsHandshakeTimeMilliseconds:consecutiveConnectionFailureReason:lastConnected:disconnectReason:");
}

id objc_msgSend_copyConnectMessageWithToken_state_presenceFlags_interface_interfaceConstraint_activeInterval_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_tcpHandshakeTimeMilliseconds_dnsResolveTimeMilliseconds_tlsHandshakeTimeMilliseconds_consecutiveConnectionFailureReason_lastConnected_disconnectReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyConnectMessageWithToken:state:presenceFlags:interface:interfaceConstraint:activeInterval:metadata:certificates:nonce:signature:hostCertificateInfo:redirectCount:tcpHandshakeTimeMilliseconds:dnsResolveTimeMilliseconds:tlsHandshakeTimeMilliseconds:consecutiveConnectionFailureReason:lastConnected:disconnectReason:");
}

id objc_msgSend_copyConnectMessageWithToken_state_presenceFlags_interface_interfaceConstraint_activeInterval_metadata_certificates_nonce_signature_redirectCount_lastConnected_disconnectReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyConnectMessageWithToken:state:presenceFlags:interface:interfaceConstraint:activeInterval:metadata:certificates:nonce:signature:redirectCount:lastConnected:disconnectReason:");
}

id objc_msgSend_copyConnectMessageWithToken_state_presenceFlags_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_lastConnected_disconnectReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyConnectMessageWithToken:state:presenceFlags:metadata:certificates:nonce:signature:hostCertificateInfo:redirectCount:lastConnected:disconnectReason:");
}

id objc_msgSend_copyFilterMessageWithEnabledHashes_ignoredHashes_opportunisticHashes_nonWakingHashes_pausedHashes_token_version_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyFilterMessageWithEnabledHashes:ignoredHashes:opportunisticHashes:nonWakingHashes:pausedHashes:token:version:");
}

id objc_msgSend_copyFlushMessageWithWantPaddingLength_paddingLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyFlushMessageWithWantPaddingLength:paddingLength:");
}

id objc_msgSend_copyFlushResponseMessageWithPaddingLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyFlushResponseMessageWithPaddingLength:");
}

id objc_msgSend_copyKeepAliveMessageWithMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyKeepAliveMessageWithMetadata:");
}

id objc_msgSend_copyMessage(void *a1, const char *a2, ...)
{
  return _[a1 copyMessage];
}

id objc_msgSend_copyMessageAcknowledgeMessageWithResponse_messageId_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMessageAcknowledgeMessageWithResponse:messageId:token:");
}

id objc_msgSend_copyMessageData(void *a1, const char *a2, ...)
{
  return _[a1 copyMessageData];
}

id objc_msgSend_copyMessageTracingAckWithTopicHash_status_tracingUUID_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMessageTracingAckWithTopicHash:status:tracingUUID:token:");
}

id objc_msgSend_copyMessageTransportAcknowledgeMessage(void *a1, const char *a2, ...)
{
  return _[a1 copyMessageTransportAcknowledgeMessage];
}

id objc_msgSend_copyMessageWithTopicHash_identifier_payload_token_isPlistFormat_lastRTT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMessageWithTopicHash:identifier:payload:token:isPlistFormat:lastRTT:");
}

id objc_msgSend_copyOperatorName(void *a1, const char *a2, ...)
{
  return _[a1 copyOperatorName];
}

id objc_msgSend_copyPresenceTrackingRequestWithMessageID_pushToken_salt_trackingFlag_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPresenceTrackingRequestWithMessageID:pushToken:salt:trackingFlag:timestamp:");
}

id objc_msgSend_copyPubSubChannelListWithInput_baseToken_messageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPubSubChannelListWithInput:baseToken:messageID:");
}

id objc_msgSend_copySetActiveIntervalMessageWithInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copySetActiveIntervalMessageWithInterval:");
}

id objc_msgSend_copySetActiveState_forInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copySetActiveState:forInterval:");
}

id objc_msgSend_copyTaskControlMessageWithInput_messageId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyTaskControlMessageWithInput:messageId:");
}

id objc_msgSend_copyTokenForDomain_appSpecificIdentifier_tokenServiceSuffix_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyTokenForDomain:appSpecificIdentifier:tokenServiceSuffix:user:");
}

id objc_msgSend_copyTokenGenerateMessageWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyTokenGenerateMessageWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:");
}

id objc_msgSend_copyValueForKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyValueForKey:error:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_correlationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 correlationIdentifier];
}

id objc_msgSend_costDrivenDualChannelAttempts(void *a1, const char *a2, ...)
{
  return _[a1 costDrivenDualChannelAttempts];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countConnectedInterfaces(void *a1, const char *a2, ...)
{
  return _[a1 countConnectedInterfaces];
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_countOfConnectedInterface(void *a1, const char *a2, ...)
{
  return _[a1 countOfConnectedInterface];
}

id objc_msgSend_countOfGrowthActionsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOfGrowthActionsOnInterface:");
}

id objc_msgSend_countOpenConnections(void *a1, const char *a2, ...)
{
  return _[a1 countOpenConnections];
}

id objc_msgSend_countTopic_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countTopic:now:");
}

id objc_msgSend_courier(void *a1, const char *a2, ...)
{
  return _[a1 courier];
}

id objc_msgSend_courierByUser(void *a1, const char *a2, ...)
{
  return _[a1 courierByUser];
}

id objc_msgSend_courierConnection(void *a1, const char *a2, ...)
{
  return _[a1 courierConnection];
}

id objc_msgSend_courierConnection_aboutToWriteDataOnConnectedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:aboutToWriteDataOnConnectedInterface:");
}

id objc_msgSend_courierConnection_connectionEstablishTimerFiredOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:connectionEstablishTimerFiredOnInterface:");
}

id objc_msgSend_courierConnection_connectionManager_handleEvent_context_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:connectionManager:handleEvent:context:onInterface:");
}

id objc_msgSend_courierConnection_dataReceived_onInterface_withGeneration_isWakingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:dataReceived:onInterface:withGeneration:isWakingMessage:");
}

id objc_msgSend_courierConnection_disconnectStreamOnInterface_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:disconnectStreamOnInterface:withReason:");
}

id objc_msgSend_courierConnection_errorOccured_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:errorOccured:onInterface:");
}

id objc_msgSend_courierConnection_hasDeterminedServerHostname_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:hasDeterminedServerHostname:onInterface:");
}

id objc_msgSend_courierConnection_keepAliveResponseTimerFiredOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:keepAliveResponseTimerFiredOnInterface:");
}

id objc_msgSend_courierConnection_parserErrorMessage_OnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:parserErrorMessage:OnInterface:");
}

id objc_msgSend_courierConnectionHasConnected_context_enabledPackedFormat_secureHandshakeEnabled_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnectionHasConnected:context:enabledPackedFormat:secureHandshakeEnabled:onInterface:");
}

id objc_msgSend_courierConnectionManager_openedNewProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnectionManager:openedNewProtocolConnection:");
}

id objc_msgSend_courierConnectionManager_receivedServerBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnectionManager:receivedServerBag:");
}

id objc_msgSend_courierConnectionManagerClientsCanConnectRightNow(void *a1, const char *a2, ...)
{
  return _[a1 courierConnectionManagerClientsCanConnectRightNow];
}

id objc_msgSend_courierConnectionManagerClientsHaveEagerMessages(void *a1, const char *a2, ...)
{
  return _[a1 courierConnectionManagerClientsHaveEagerMessages];
}

id objc_msgSend_courierConnectionManagerClientsHaveInteractivePushDuringSleepEnabled(void *a1, const char *a2, ...)
{
  return _[a1 courierConnectionManagerClientsHaveInteractivePushDuringSleepEnabled];
}

id objc_msgSend_courierConnectionManagerClientsWantsCriticalReliability(void *a1, const char *a2, ...)
{
  return _[a1 courierConnectionManagerClientsWantsCriticalReliability];
}

id objc_msgSend_courierConnectionManagerClientsWillBeAbleToConnect(void *a1, const char *a2, ...)
{
  return _[a1 courierConnectionManagerClientsWillBeAbleToConnect];
}

id objc_msgSend_courierConnectionStatusDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnectionStatusDidChange:");
}

id objc_msgSend_courierFilterChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierFilterChanged:");
}

id objc_msgSend_courierForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierForEnvironment:");
}

id objc_msgSend_courierForEnvironmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierForEnvironmentName:");
}

id objc_msgSend_courierHasNoConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierHasNoConnections:");
}

id objc_msgSend_courierIdentityBecameAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierIdentityBecameAvailable:");
}

id objc_msgSend_courierIsIdle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierIsIdle:");
}

id objc_msgSend_courierOversized(void *a1, const char *a2, ...)
{
  return _[a1 courierOversized];
}

id objc_msgSend_courierShouldRollBAAEnvironmentTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierShouldRollBAAEnvironmentTokens:");
}

id objc_msgSend_courierUser(void *a1, const char *a2, ...)
{
  return _[a1 courierUser];
}

id objc_msgSend_create(void *a1, const char *a2, ...)
{
  return _[a1 create];
}

id objc_msgSend_createCourierForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCourierForEnvironment:");
}

id objc_msgSend_createPayloadForSubscriptionChannels_unsubscriptionChannels_subscriptionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPayloadForSubscriptionChannels:unsubscriptionChannels:subscriptionType:");
}

id objc_msgSend_createTopicHashForTopic_user_shouldSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createTopicHashForTopic:user:shouldSalt:");
}

id objc_msgSend_credentialForTrust_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialForTrust:");
}

id objc_msgSend_ctClient(void *a1, const char *a2, ...)
{
  return _[a1 ctClient];
}

id objc_msgSend_currentCost(void *a1, const char *a2, ...)
{
  return _[a1 currentCost];
}

id objc_msgSend_currentDelay(void *a1, const char *a2, ...)
{
  return _[a1 currentDelay];
}

id objc_msgSend_currentFilter(void *a1, const char *a2, ...)
{
  return _[a1 currentFilter];
}

id objc_msgSend_currentFilterForTopicState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentFilterForTopicState:");
}

id objc_msgSend_currentGrowthStageOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentGrowthStageOnInterface:");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentKeepAliveInterval(void *a1, const char *a2, ...)
{
  return _[a1 currentKeepAliveInterval];
}

id objc_msgSend_currentKeepAliveIntervalOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentKeepAliveIntervalOnInterface:");
}

id objc_msgSend_currentKeepAliveState(void *a1, const char *a2, ...)
{
  return _[a1 currentKeepAliveState];
}

id objc_msgSend_currentKeepAliveStateOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentKeepAliveStateOnInterface:");
}

id objc_msgSend_currentLinkQualityString(void *a1, const char *a2, ...)
{
  return _[a1 currentLinkQualityString];
}

id objc_msgSend_currentMessageID(void *a1, const char *a2, ...)
{
  return _[a1 currentMessageID];
}

id objc_msgSend_currentRAT(void *a1, const char *a2, ...)
{
  return _[a1 currentRAT];
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 currentRunLoop];
}

id objc_msgSend_currentSSID(void *a1, const char *a2, ...)
{
  return _[a1 currentSSID];
}

id objc_msgSend_currentThread(void *a1, const char *a2, ...)
{
  return _[a1 currentThread];
}

id objc_msgSend_currentUser(void *a1, const char *a2, ...)
{
  return _[a1 currentUser];
}

id objc_msgSend_daemon(void *a1, const char *a2, ...)
{
  return _[a1 daemon];
}

id objc_msgSend_dailySuspendToggleRateLimiter(void *a1, const char *a2, ...)
{
  return _[a1 dailySuspendToggleRateLimiter];
}

id objc_msgSend_darkWake(void *a1, const char *a2, ...)
{
  return _[a1 darkWake];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataListeners(void *a1, const char *a2, ...)
{
  return _[a1 dataListeners];
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_database(void *a1, const char *a2, ...)
{
  return _[a1 database];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateStringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateStringFromDate:");
}

id objc_msgSend_dateStringFromInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateStringFromInterval:");
}

id objc_msgSend_dateWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeInterval:sinceDate:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _[a1 debugDescription];
}

id objc_msgSend_debugHostname(void *a1, const char *a2, ...)
{
  return _[a1 debugHostname];
}

id objc_msgSend_debugOverrides(void *a1, const char *a2, ...)
{
  return _[a1 debugOverrides];
}

id objc_msgSend_decayTimerFired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decayTimerFired:");
}

id objc_msgSend_decodeMessage_parser_parameters_isInvalid_lengthParsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeMessage:parser:parameters:isInvalid:lengthParsed:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decoder(void *a1, const char *a2, ...)
{
  return _[a1 decoder];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultSessionConfiguration];
}

id objc_msgSend_defaultUser(void *a1, const char *a2, ...)
{
  return _[a1 defaultUser];
}

id objc_msgSend_defaultUserPersistentTopics(void *a1, const char *a2, ...)
{
  return _[a1 defaultUserPersistentTopics];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_delayedReconnectTLSInterval(void *a1, const char *a2, ...)
{
  return _[a1 delayedReconnectTLSInterval];
}

id objc_msgSend_delayedReconnectTLSIntervalTrigger(void *a1, const char *a2, ...)
{
  return _[a1 delayedReconnectTLSIntervalTrigger];
}

id objc_msgSend_delayedResponseInterval(void *a1, const char *a2, ...)
{
  return _[a1 delayedResponseInterval];
}

id objc_msgSend_delayedSuspendKeepAliveInterval(void *a1, const char *a2, ...)
{
  return _[a1 delayedSuspendKeepAliveInterval];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteAppSpecificTokensWithDomain_forTopic_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAppSpecificTokensWithDomain:forTopic:user:");
}

id objc_msgSend_deleteAppSpecificTokensWithDomain_tokenServiceSuffix_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAppSpecificTokensWithDomain:tokenServiceSuffix:user:");
}

id objc_msgSend_deleteAppSpecificTokensWithRefArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAppSpecificTokensWithRefArray:");
}

id objc_msgSend_deleteAppTokensForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAppTokensForUser:");
}

id objc_msgSend_deleteChannelID_forTopic_environment_userName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteChannelID:forTopic:environment:userName:");
}

id objc_msgSend_deleteClientIdentityRequestingReplacement(void *a1, const char *a2, ...)
{
  return _[a1 deleteClientIdentityRequestingReplacement];
}

id objc_msgSend_deleteIncomingMessageWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteIncomingMessageWithGUID:");
}

id objc_msgSend_deleteLowPriorityIncomingMessagesForTopic_environment_pushTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteLowPriorityIncomingMessagesForTopic:environment:pushTokens:");
}

id objc_msgSend_deleteStaleIncomingLowPriorityMessagesForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteStaleIncomingLowPriorityMessagesForEnvironment:");
}

id objc_msgSend_dependenciesForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dependenciesForUser:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_deserializedPersistedData_forInfo_outPersistedInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deserializedPersistedData:forInfo:outPersistedInfo:");
}

id objc_msgSend_deserializedPersistedData_withType_outPersistedInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deserializedPersistedData:withType:outPersistedInfo:");
}

id objc_msgSend_desiredFilter(void *a1, const char *a2, ...)
{
  return _[a1 desiredFilter];
}

id objc_msgSend_deviceNotFoundMessageQueue(void *a1, const char *a2, ...)
{
  return _[a1 deviceNotFoundMessageQueue];
}

id objc_msgSend_deviceNotFoundTimer(void *a1, const char *a2, ...)
{
  return _[a1 deviceNotFoundTimer];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didConnectOrDisconnectTokenForCourier_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didConnectOrDisconnectTokenForCourier:onProtocolConnection:");
}

id objc_msgSend_didPushCauseWake(void *a1, const char *a2, ...)
{
  return _[a1 didPushCauseWake];
}

id objc_msgSend_didPushCauseWakeOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didPushCauseWakeOnInterface:");
}

id objc_msgSend_disable(void *a1, const char *a2, ...)
{
  return _[a1 disable];
}

id objc_msgSend_disableCostDrivenDualChannelAttempts(void *a1, const char *a2, ...)
{
  return _[a1 disableCostDrivenDualChannelAttempts];
}

id objc_msgSend_disableDualModePiggybackTimer(void *a1, const char *a2, ...)
{
  return _[a1 disableDualModePiggybackTimer];
}

id objc_msgSend_disableFilterOptimization(void *a1, const char *a2, ...)
{
  return _[a1 disableFilterOptimization];
}

id objc_msgSend_disconnectAllStreamsWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectAllStreamsWithReason:");
}

id objc_msgSend_disconnectReason(void *a1, const char *a2, ...)
{
  return _[a1 disconnectReason];
}

id objc_msgSend_disconnectStreamForInterface_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectStreamForInterface:withReason:");
}

id objc_msgSend_disconnectWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectWithReason:");
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return _[a1 distantFuture];
}

id objc_msgSend_dnsRequest(void *a1, const char *a2, ...)
{
  return _[a1 dnsRequest];
}

id objc_msgSend_dnsResolutionTimeMillisecondsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dnsResolutionTimeMillisecondsOnInterface:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_dualChannelStateFrom_isPiggyBacking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dualChannelStateFrom:isPiggyBacking:");
}

id objc_msgSend_eagernessTimeoutTime(void *a1, const char *a2, ...)
{
  return _[a1 eagernessTimeoutTime];
}

id objc_msgSend_edgeDNS(void *a1, const char *a2, ...)
{
  return _[a1 edgeDNS];
}

id objc_msgSend_enableCriticalReliability(void *a1, const char *a2, ...)
{
  return _[a1 enableCriticalReliability];
}

id objc_msgSend_enableStatusChangeNotifications(void *a1, const char *a2, ...)
{
  return _[a1 enableStatusChangeNotifications];
}

id objc_msgSend_enableWakeOnWiFi_forDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableWakeOnWiFi:forDelegate:");
}

id objc_msgSend_enableWiFiAutoAssociation_forDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableWiFiAutoAssociation:forDelegate:");
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return _[a1 enabled];
}

id objc_msgSend_enabledTopics(void *a1, const char *a2, ...)
{
  return _[a1 enabledTopics];
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encoder(void *a1, const char *a2, ...)
{
  return _[a1 encoder];
}

id objc_msgSend_endTransaction(void *a1, const char *a2, ...)
{
  return _[a1 endTransaction];
}

id objc_msgSend_enqueueOutgoingMessage_forOriginator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueOutgoingMessage:forOriginator:");
}

id objc_msgSend_enqueueSendBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueSendBlock:completionBlock:");
}

id objc_msgSend_entitledTopicsFromSet_unentitledTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entitledTopicsFromSet:unentitledTopics:");
}

id objc_msgSend_enumerateAllProtocolConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAllProtocolConnections:");
}

id objc_msgSend_enumerateConnectedProtocolConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateConnectedProtocolConnections:");
}

id objc_msgSend_enumerateConnectedProtocolConnectionsOfType_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateConnectedProtocolConnectionsOfType:block:");
}

id objc_msgSend_enumerateDataRecipient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDataRecipient:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsWithOptions:usingBlock:");
}

id objc_msgSend_enumerateStateListeners_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateStateListeners:");
}

id objc_msgSend_enumerateTokensUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateTokensUsingBlock:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _[a1 environment];
}

id objc_msgSend_environmentForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environmentForName:");
}

id objc_msgSend_environmentForNamedPort_userPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environmentForNamedPort:userPreferences:");
}

id objc_msgSend_environmentName(void *a1, const char *a2, ...)
{
  return _[a1 environmentName];
}

id objc_msgSend_environmentType(void *a1, const char *a2, ...)
{
  return _[a1 environmentType];
}

id objc_msgSend_ephemeralSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 ephemeralSessionConfiguration];
}

id objc_msgSend_errorCode(void *a1, const char *a2, ...)
{
  return _[a1 errorCode];
}

id objc_msgSend_errorMessage(void *a1, const char *a2, ...)
{
  return _[a1 errorMessage];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_everHadAckOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "everHadAckOn:");
}

id objc_msgSend_everSentFilterOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "everSentFilterOn:");
}

id objc_msgSend_evictionDate(void *a1, const char *a2, ...)
{
  return _[a1 evictionDate];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_expectsResponseForFilterMessageOnProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectsResponseForFilterMessageOnProtocolConnection:");
}

id objc_msgSend_expectsResponseForFilterMessageOnProtocolConnection_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectsResponseForFilterMessageOnProtocolConnection:forClient:");
}

id objc_msgSend_expensiveConditionsBackOffInterval(void *a1, const char *a2, ...)
{
  return _[a1 expensiveConditionsBackOffInterval];
}

id objc_msgSend_expirationDate(void *a1, const char *a2, ...)
{
  return _[a1 expirationDate];
}

id objc_msgSend_expirationTime(void *a1, const char *a2, ...)
{
  return _[a1 expirationTime];
}

id objc_msgSend_fetchClientIdentityForcingNewCert_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchClientIdentityForcingNewCert:withCompletion:");
}

id objc_msgSend_fetchHostVMCertAndSignNonce_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHostVMCertAndSignNonce:error:");
}

id objc_msgSend_fetchUserCourierIdentityWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserCourierIdentityWithCompletion:");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_filter(void *a1, const char *a2, ...)
{
  return _[a1 filter];
}

id objc_msgSend_filterChosenByPolicyForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterChosenByPolicyForTopic:");
}

id objc_msgSend_filterMessageTimeout(void *a1, const char *a2, ...)
{
  return _[a1 filterMessageTimeout];
}

id objc_msgSend_filterMode(void *a1, const char *a2, ...)
{
  return _[a1 filterMode];
}

id objc_msgSend_filterModeByInterfaceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 filterModeByInterfaceIdentifier];
}

id objc_msgSend_filterModeOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterModeOnInterface:");
}

id objc_msgSend_filterOptimizationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 filterOptimizationEnabled];
}

id objc_msgSend_filterSent_connectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterSent:connectionType:");
}

id objc_msgSend_filterVersionStateMachine(void *a1, const char *a2, ...)
{
  return _[a1 filterVersionStateMachine];
}

id objc_msgSend_filtersWillPotentiallyBeChangedBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filtersWillPotentiallyBeChangedBy:");
}

id objc_msgSend_filtersWillPotentiallyBeChangedByPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filtersWillPotentiallyBeChangedByPolicy:");
}

id objc_msgSend_finishTasksAndInvalidate(void *a1, const char *a2, ...)
{
  return _[a1 finishTasksAndInvalidate];
}

id objc_msgSend_first(void *a1, const char *a2, ...)
{
  return _[a1 first];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_flag(void *a1, const char *a2, ...)
{
  return _[a1 flag];
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _[a1 flush];
}

id objc_msgSend_flushUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushUser:");
}

id objc_msgSend_forceAdjustConnections(void *a1, const char *a2, ...)
{
  return _[a1 forceAdjustConnections];
}

id objc_msgSend_forceBAAIdentityRefreshWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceBAAIdentityRefreshWithCompletion:");
}

id objc_msgSend_forceTimerFire(void *a1, const char *a2, ...)
{
  return _[a1 forceTimerFire];
}

id objc_msgSend_forcedInvalidPresences(void *a1, const char *a2, ...)
{
  return _[a1 forcedInvalidPresences];
}

id objc_msgSend_fullWake(void *a1, const char *a2, ...)
{
  return _[a1 fullWake];
}

id objc_msgSend_generateCertWithServerTime_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateCertWithServerTime:completionBlock:");
}

id objc_msgSend_generateCerts_nonce_sig_time_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateCerts:nonce:sig:time:");
}

id objc_msgSend_generation(void *a1, const char *a2, ...)
{
  return _[a1 generation];
}

id objc_msgSend_generationMatches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generationMatches:");
}

id objc_msgSend_generationMatches_forInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generationMatches:forInterface:");
}

id objc_msgSend_getAddressListForHostname_now_addressFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAddressListForHostname:now:addressFamily:");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getCFRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 getCFRunLoop];
}

id objc_msgSend_getClientIdentityForcingRefresh_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getClientIdentityForcingRefresh:withCompletion:");
}

id objc_msgSend_getConnectionServerForEnvironment_connectionPortName_processName_enableDarkWake_peerConnection_isNewConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getConnectionServerForEnvironment:connectionPortName:processName:enableDarkWake:peerConnection:isNewConnection:");
}

id objc_msgSend_getConnectionTypeFromProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getConnectionTypeFromProtocolConnection:");
}

id objc_msgSend_getNextTaskMessageId(void *a1, const char *a2, ...)
{
  return _[a1 getNextTaskMessageId];
}

id objc_msgSend_getTaskWithMessageId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTaskWithMessageId:");
}

id objc_msgSend_getTaskWithTaskId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTaskWithTaskId:");
}

id objc_msgSend_gotNewToken(void *a1, const char *a2, ...)
{
  return _[a1 gotNewToken];
}

id objc_msgSend_group(void *a1, const char *a2, ...)
{
  return _[a1 group];
}

id objc_msgSend_guid(void *a1, const char *a2, ...)
{
  return _[a1 guid];
}

id objc_msgSend_handleAckIncomingMessageWithGuid_topic_tracingUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAckIncomingMessageWithGuid:topic:tracingUUID:");
}

id objc_msgSend_handleAcknowledgmentForOutgoingMessageWithResult_ackTimestamp_linkQuality_connectionType_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAcknowledgmentForOutgoingMessageWithResult:ackTimestamp:linkQuality:connectionType:onInterface:");
}

id objc_msgSend_handleAppTokenGenerateResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAppTokenGenerateResponse:error:");
}

id objc_msgSend_handleCancelOutgoingMessageWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCancelOutgoingMessageWithID:");
}

id objc_msgSend_handleChannelSubscriptionFailures_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleChannelSubscriptionFailures:forTopic:");
}

id objc_msgSend_handleConnectionClosedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnectionClosedOnInterface:");
}

id objc_msgSend_handleConnectionFailureOnInterface_forceDelayedReconnect_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnectionFailureOnInterface:forceDelayedReconnect:withReason:");
}

id objc_msgSend_handleConnectionOpened(void *a1, const char *a2, ...)
{
  return _[a1 handleConnectionOpened];
}

id objc_msgSend_handleConnectionOpenedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnectionOpenedOnInterface:");
}

id objc_msgSend_handleConnectionStatusChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnectionStatusChanged:");
}

id objc_msgSend_handleCurrentTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCurrentTokenForInfo:");
}

id objc_msgSend_handleCurrentURLTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCurrentURLTokenForInfo:");
}

id objc_msgSend_handleErrorSendingOutgoingMessage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleErrorSendingOutgoingMessage:error:");
}

id objc_msgSend_handleExpiredNonceWithServerTime_shouldRollToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleExpiredNonceWithServerTime:shouldRollToken:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleFakeMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFakeMessage:");
}

id objc_msgSend_handleIgnoredTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleIgnoredTopics:");
}

id objc_msgSend_handleIncomingMessageReceiptWithTopic_tracingUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleIncomingMessageReceiptWithTopic:tracingUUID:");
}

id objc_msgSend_handleInvalidatePerAppTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInvalidatePerAppTokenForInfo:");
}

id objc_msgSend_handleInvalidatePerAppTokenForTopic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInvalidatePerAppTokenForTopic:identifier:");
}

id objc_msgSend_handleInvalidateURLTokenForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInvalidateURLTokenForTopic:");
}

id objc_msgSend_handleNotificationAcknowledged(void *a1, const char *a2, ...)
{
  return _[a1 handleNotificationAcknowledged];
}

id objc_msgSend_handlePublicTokenDeliveryReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePublicTokenDeliveryReply:");
}

id objc_msgSend_handleReceivedMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleReceivedMessage:");
}

id objc_msgSend_handleReceivedToken_forInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleReceivedToken:forInfo:");
}

id objc_msgSend_handleReceivedTokenError_forInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleReceivedTokenError:forInfo:");
}

id objc_msgSend_handleRequestPerAppTokenForTopic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRequestPerAppTokenForTopic:identifier:");
}

id objc_msgSend_handleRequestTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRequestTokenForInfo:");
}

id objc_msgSend_handleRequestURLTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRequestURLTokenForInfo:");
}

id objc_msgSend_handleResponseForPendingItem_error_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResponseForPendingItem:error:onInterface:");
}

id objc_msgSend_handleResult_forSendingOutgoingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResult:forSendingOutgoingMessage:");
}

id objc_msgSend_handleResult_forSendingOutgoingMessageWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResult:forSendingOutgoingMessageWithID:");
}

id objc_msgSend_handleResult_forSendingOutgoingMessageWithID_sendRTT_ackTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResult:forSendingOutgoingMessageWithID:sendRTT:ackTimestamp:");
}

id objc_msgSend_handleSendOutgoingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSendOutgoingMessage:");
}

id objc_msgSend_handleSentOutgoingMessage_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSentOutgoingMessage:onInterface:");
}

id objc_msgSend_handleState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleState:error:");
}

id objc_msgSend_handleSubscribeToChannels_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSubscribeToChannels:forTopic:");
}

id objc_msgSend_handleTaskControlResponseMessage_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTaskControlResponseMessage:message:");
}

id objc_msgSend_handleTaskNotificationMessage_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTaskNotificationMessage:message:");
}

id objc_msgSend_handleUnsubscribeFromChannels_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUnsubscribeFromChannels:forTopic:");
}

id objc_msgSend_handlingFailure(void *a1, const char *a2, ...)
{
  return _[a1 handlingFailure];
}

id objc_msgSend_hardwareVersion(void *a1, const char *a2, ...)
{
  return _[a1 hardwareVersion];
}

id objc_msgSend_hasActiveConnection(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveConnection];
}

id objc_msgSend_hasConnectedInterface(void *a1, const char *a2, ...)
{
  return _[a1 hasConnectedInterface];
}

id objc_msgSend_hasConnectedInterfaceForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasConnectedInterfaceForIdentifier:");
}

id objc_msgSend_hasConnectedInterfaceOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasConnectedInterfaceOfType:");
}

id objc_msgSend_hasConnectionEstablishTimer(void *a1, const char *a2, ...)
{
  return _[a1 hasConnectionEstablishTimer];
}

id objc_msgSend_hasConnectionEstablishTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasConnectionEstablishTimerOnInterface:");
}

id objc_msgSend_hasEagerMessages(void *a1, const char *a2, ...)
{
  return _[a1 hasEagerMessages];
}

id objc_msgSend_hasEnabledTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasEnabledTopicHash:");
}

id objc_msgSend_hasError(void *a1, const char *a2, ...)
{
  return _[a1 hasError];
}

id objc_msgSend_hasIdentity(void *a1, const char *a2, ...)
{
  return _[a1 hasIdentity];
}

id objc_msgSend_hasIgnoredTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasIgnoredTopicHash:");
}

id objc_msgSend_hasIsLast(void *a1, const char *a2, ...)
{
  return _[a1 hasIsLast];
}

id objc_msgSend_hasKeepAliveResponseTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasKeepAliveResponseTimerOnInterface:");
}

id objc_msgSend_hasListeningTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasListeningTopic:");
}

id objc_msgSend_hasListeningTopics(void *a1, const char *a2, ...)
{
  return _[a1 hasListeningTopics];
}

id objc_msgSend_hasMissingTokens(void *a1, const char *a2, ...)
{
  return _[a1 hasMissingTokens];
}

id objc_msgSend_hasNonWakingTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNonWakingTopicHash:");
}

id objc_msgSend_hasOpenConnection(void *a1, const char *a2, ...)
{
  return _[a1 hasOpenConnection];
}

id objc_msgSend_hasOpenConnectionOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOpenConnectionOnInterface:");
}

id objc_msgSend_hasOpportunisticTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOpportunisticTopicHash:");
}

id objc_msgSend_hasOutOfDateFilterOnProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOutOfDateFilterOnProtocolConnection:");
}

id objc_msgSend_hasPausedTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPausedTopicHash:");
}

id objc_msgSend_hasPausedTopics(void *a1, const char *a2, ...)
{
  return _[a1 hasPausedTopics];
}

id objc_msgSend_hasPayload_forTopic_tokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPayload:forTopic:tokens:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasProtocolConnectionInterfaceOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasProtocolConnectionInterfaceOfType:");
}

id objc_msgSend_hasReasonToConnect(void *a1, const char *a2, ...)
{
  return _[a1 hasReasonToConnect];
}

id objc_msgSend_hasRecentlyRemovedTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRecentlyRemovedTopicHash:");
}

id objc_msgSend_hasSendingTopics(void *a1, const char *a2, ...)
{
  return _[a1 hasSendingTopics];
}

id objc_msgSend_hasSpaceAvailable(void *a1, const char *a2, ...)
{
  return _[a1 hasSpaceAvailable];
}

id objc_msgSend_hasStaleStateOn_comparedTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStaleStateOn:comparedTo:");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasTimedOut(void *a1, const char *a2, ...)
{
  return _[a1 hasTimedOut];
}

id objc_msgSend_hasTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTopicHash:");
}

id objc_msgSend_hasTopicHash_includeRecentlyRemoved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTopicHash:includeRecentlyRemoved:");
}

id objc_msgSend_hasUltraConstrainedPermissionForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasUltraConstrainedPermissionForTopic:");
}

id objc_msgSend_hasUnAckedVersionOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasUnAckedVersionOn:");
}

id objc_msgSend_hasUnderlyingIdentityChanged(void *a1, const char *a2, ...)
{
  return _[a1 hasUnderlyingIdentityChanged];
}

id objc_msgSend_hasWWANStatusIndicator(void *a1, const char *a2, ...)
{
  return _[a1 hasWWANStatusIndicator];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hashTableWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashTableWithOptions:");
}

id objc_msgSend_hashesToEnabledTopics(void *a1, const char *a2, ...)
{
  return _[a1 hashesToEnabledTopics];
}

id objc_msgSend_hashesToIgnoredTopics(void *a1, const char *a2, ...)
{
  return _[a1 hashesToIgnoredTopics];
}

id objc_msgSend_hashesToNonWakingTopics(void *a1, const char *a2, ...)
{
  return _[a1 hashesToNonWakingTopics];
}

id objc_msgSend_hashesToOpportunisticTopics(void *a1, const char *a2, ...)
{
  return _[a1 hashesToOpportunisticTopics];
}

id objc_msgSend_hashesToPausedTopics(void *a1, const char *a2, ...)
{
  return _[a1 hashesToPausedTopics];
}

id objc_msgSend_helper(void *a1, const char *a2, ...)
{
  return _[a1 helper];
}

id objc_msgSend_highQualityThresholdConnectedTime(void *a1, const char *a2, ...)
{
  return _[a1 highQualityThresholdConnectedTime];
}

id objc_msgSend_hold(void *a1, const char *a2, ...)
{
  return _[a1 hold];
}

id objc_msgSend_holdPowerAssertionUntilStreamQuiesces(void *a1, const char *a2, ...)
{
  return _[a1 holdPowerAssertionUntilStreamQuiesces];
}

id objc_msgSend_holdPowerAssertionUntilStreamsQuiesce(void *a1, const char *a2, ...)
{
  return _[a1 holdPowerAssertionUntilStreamsQuiesce];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_hostname(void *a1, const char *a2, ...)
{
  return _[a1 hostname];
}

id objc_msgSend_hourlySuspendToggleRateLimiter(void *a1, const char *a2, ...)
{
  return _[a1 hourlySuspendToggleRateLimiter];
}

id objc_msgSend_hwVersion(void *a1, const char *a2, ...)
{
  return _[a1 hwVersion];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identifierToSalt(void *a1, const char *a2, ...)
{
  return _[a1 identifierToSalt];
}

id objc_msgSend_identifiersToSaltsSystem(void *a1, const char *a2, ...)
{
  return _[a1 identifiersToSaltsSystem];
}

id objc_msgSend_identifiersToSaltsUser(void *a1, const char *a2, ...)
{
  return _[a1 identifiersToSaltsUser];
}

id objc_msgSend_identityAvailabilityDidChangeBlock(void *a1, const char *a2, ...)
{
  return _[a1 identityAvailabilityDidChangeBlock];
}

id objc_msgSend_ifname(void *a1, const char *a2, ...)
{
  return _[a1 ifname];
}

id objc_msgSend_ignoredTopics(void *a1, const char *a2, ...)
{
  return _[a1 ignoredTopics];
}

id objc_msgSend_inDarkWake(void *a1, const char *a2, ...)
{
  return _[a1 inDarkWake];
}

id objc_msgSend_inFullWake(void *a1, const char *a2, ...)
{
  return _[a1 inFullWake];
}

id objc_msgSend_inTransaction(void *a1, const char *a2, ...)
{
  return _[a1 inTransaction];
}

id objc_msgSend_incomingCounts(void *a1, const char *a2, ...)
{
  return _[a1 incomingCounts];
}

id objc_msgSend_incomingCountsByTopic(void *a1, const char *a2, ...)
{
  return _[a1 incomingCountsByTopic];
}

id objc_msgSend_incomingCountsForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incomingCountsForTopic:");
}

id objc_msgSend_incomingHighPriorityMessagesForEnvironment_pushTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incomingHighPriorityMessagesForEnvironment:pushTokens:");
}

id objc_msgSend_incomingMessagesForTopic_priority_environment_pushTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incomingMessagesForTopic:priority:environment:pushTokens:");
}

id objc_msgSend_incomingPresenceWithCertificate_nonce_signature_token_hwVersion_swVersion_swBuild_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incomingPresenceWithCertificate:nonce:signature:token:hwVersion:swVersion:swBuild:");
}

id objc_msgSend_incomingPresenceWithGuid_token_hwVersion_swVersion_swBuild_certificate_nonce_signature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incomingPresenceWithGuid:token:hwVersion:swVersion:swBuild:certificate:nonce:signature:");
}

id objc_msgSend_increaseLengthBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "increaseLengthBy:");
}

id objc_msgSend_incrementRedirectCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementRedirectCount];
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _[a1 indexSet];
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return _[a1 info];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initResponseForHostname_ipv4Address_ipv6Address_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initResponseForHostname:ipv4Address:ipv6Address:");
}

id objc_msgSend_initShouldDowngradeWhenLocked_systemMonitor_ultraConstrainedProvider_withDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initShouldDowngradeWhenLocked:systemMonitor:ultraConstrainedProvider:withDelegate:");
}

id objc_msgSend_initUnextendedAppTokenWithTopic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initUnextendedAppTokenWithTopic:identifier:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithCString_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCString:encoding:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithChange_triggeringTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChange:triggeringTopic:");
}

id objc_msgSend_initWithChannelID_channelTopic_environment_tokenName_checkpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChannelID:channelTopic:environment:tokenName:checkpoint:");
}

id objc_msgSend_initWithCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCommand:");
}

id objc_msgSend_initWithConnection_queue_apsDaemon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnection:queue:apsDaemon:");
}

id objc_msgSend_initWithConnectionClass_interfaceIdentifier_guidancePriority_delegate_serviceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnectionClass:interfaceIdentifier:guidancePriority:delegate:serviceIdentifier:");
}

id objc_msgSend_initWithDNSTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDNSTask:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDecoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDecoder:");
}

id objc_msgSend_initWithDelegate_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:environment:");
}

id objc_msgSend_initWithDelegate_ultraConstrainedProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:ultraConstrainedProvider:");
}

id objc_msgSend_initWithDelegate_user_userPreferences_enableDarkWake_environmentName_connectionPortName_processName_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:user:userPreferences:enableDarkWake:environmentName:connectionPortName:processName:connection:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionary_copyItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:copyItems:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithEncoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEncoder:");
}

id objc_msgSend_initWithEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:");
}

id objc_msgSend_initWithEnvironment_allowInMemoryCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:allowInMemoryCache:");
}

id objc_msgSend_initWithEnvironment_connectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:connectionType:");
}

id objc_msgSend_initWithEnvironment_courierConnection_carrierBundleHelper_networkMonitor_connectionRetryManager_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:courierConnection:carrierBundleHelper:networkMonitor:connectionRetryManager:delegate:");
}

id objc_msgSend_initWithEnvironment_courierUser_userPreferences_clientIdentityProvider_userAppIDManager_systemTokenStorage_delegate_withConnectionEstablisher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:courierUser:userPreferences:clientIdentityProvider:userAppIDManager:systemTokenStorage:delegate:withConnectionEstablisher:");
}

id objc_msgSend_initWithEnvironment_courierUser_userPreferences_clientIdentityProvider_userAppIDManager_systemTokenStorage_filterVersionStateMachine_debugOverrides_delegate_withConnectionEstablisher_tokenStore_tokenRequestQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:courierUser:userPreferences:clientIdentityProvider:userAppIDManager:systemTokenStorage:filterVersionStateMachine:debugOverrides:delegate:withConnectionEstablisher:tokenStore:tokenRequestQueue:");
}

id objc_msgSend_initWithEnvironment_defaultUser_userDependencies_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:defaultUser:userDependencies:delegate:");
}

id objc_msgSend_initWithEnvironment_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:delegate:");
}

id objc_msgSend_initWithEnvironment_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:guid:");
}

id objc_msgSend_initWithEnvironment_multiUserMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:multiUserMode:");
}

id objc_msgSend_initWithEnvironment_topicHasher_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:topicHasher:user:");
}

id objc_msgSend_initWithEnvironment_topicHasher_user_userPreferences_ultraConstrainedProvider_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:topicHasher:user:userPreferences:ultraConstrainedProvider:delegate:");
}

id objc_msgSend_initWithFilter_darkWakeEnabled_pushWakeEnabled_criticalWakeEnabled_ultraConstrainedEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFilter:darkWakeEnabled:pushWakeEnabled:criticalWakeEnabled:ultraConstrainedEnabled:");
}

id objc_msgSend_initWithFireDate_interval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFireDate:interval:target:selector:userInfo:repeats:");
}

id objc_msgSend_initWithFirst_second_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFirst:second:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithHostname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHostname:");
}

id objc_msgSend_initWithHourlyCostThreshold_costMaximum_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHourlyCostThreshold:costMaximum:identifier:");
}

id objc_msgSend_initWithIPAddress_addressFamily_timeToLive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIPAddress:addressFamily:timeToLive:");
}

id objc_msgSend_initWithInitialVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInitialVersion:");
}

id objc_msgSend_initWithIsMultiUserMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIsMultiUserMode:");
}

id objc_msgSend_initWithIsMultiUserMode_loggedInUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIsMultiUserMode:loggedInUser:");
}

id objc_msgSend_initWithLimit_timeLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLimit:timeLimit:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMaxTableSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMaxTableSize:");
}

id objc_msgSend_initWithMemoryCapacity_diskCapacity_diskPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMemoryCapacity:diskCapacity:diskPath:");
}

id objc_msgSend_initWithMetadata_messageID_userName_token_subscriptionType_connectionType_retryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMetadata:messageID:userName:token:subscriptionType:connectionType:retryCount:");
}

id objc_msgSend_initWithMultiUserMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMultiUserMode:");
}

id objc_msgSend_initWithName_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:category:");
}

id objc_msgSend_initWithName_category_holdDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:category:holdDuration:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithQueue_apsDaemon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:apsDaemon:");
}

id objc_msgSend_initWithQueue_ttlInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:ttlInSeconds:");
}

id objc_msgSend_initWithSendBlock_completionBlock_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSendBlock:completionBlock:timeout:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithSubscriptionChannels_unsubscriptionChannels_messageID_userName_token_subscriptionType_connectionType_retryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubscriptionChannels:unsubscriptionChannels:messageID:userName:token:subscriptionType:connectionType:retryCount:");
}

id objc_msgSend_initWithTTLInSeconds_state_withTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTTLInSeconds:state:withTopic:");
}

id objc_msgSend_initWithTimeInterval_serviceIdentifier_target_selector_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:serviceIdentifier:target:selector:userInfo:");
}

id objc_msgSend_initWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeIntervalSinceNow:");
}

id objc_msgSend_initWithToken_timestamp_payloadHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithToken:timestamp:payloadHash:");
}

id objc_msgSend_initWithTokenURL_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTokenURL:token:");
}

id objc_msgSend_initWithTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTopic:");
}

id objc_msgSend_initWithTopic_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTopic:userInfo:");
}

id objc_msgSend_initWithTopicName_connectionServer_attributes_topicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTopicName:connectionServer:attributes:topicHash:");
}

id objc_msgSend_initWithTopicSaltStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTopicSaltStore:");
}

id objc_msgSend_initWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedInteger:");
}

id objc_msgSend_initWithUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserID:");
}

id objc_msgSend_initWithUsingWWAN_keepAliveInterval_delayedResponseInterval_usingServerStats_keepAliveState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUsingWWAN:keepAliveInterval:delayedResponseInterval:usingServerStats:keepAliveState:");
}

id objc_msgSend_initWithUsingWWAN_keepAliveInterval_delayedResponseInterval_usingServerStats_keepAliveState_hwVersion_swVersion_swBuild_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUsingWWAN:keepAliveInterval:delayedResponseInterval:usingServerStats:keepAliveState:hwVersion:swVersion:swBuild:");
}

id objc_msgSend_initWithUsingWWAN_keepAliveInterval_keepAliveState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUsingWWAN:keepAliveInterval:keepAliveState:");
}

id objc_msgSend_initWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValue:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _[a1 interface];
}

id objc_msgSend_interface5GMode(void *a1, const char *a2, ...)
{
  return _[a1 interface5GMode];
}

id objc_msgSend_interfaceConstraint(void *a1, const char *a2, ...)
{
  return _[a1 interfaceConstraint];
}

id objc_msgSend_interfaceConstraintForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceConstraintForInterface:");
}

id objc_msgSend_interfaceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 interfaceIdentifier];
}

id objc_msgSend_interfaceMonitor(void *a1, const char *a2, ...)
{
  return _[a1 interfaceMonitor];
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return _[a1 interfaceName];
}

id objc_msgSend_interfaceNameForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceNameForInterface:");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateDeviceIdentity(void *a1, const char *a2, ...)
{
  return _[a1 invalidateDeviceIdentity];
}

id objc_msgSend_ipAddress(void *a1, const char *a2, ...)
{
  return _[a1 ipAddress];
}

id objc_msgSend_ipAddressFamily(void *a1, const char *a2, ...)
{
  return _[a1 ipAddressFamily];
}

id objc_msgSend_ipv4AtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ipv4AtIndex:");
}

id objc_msgSend_ipv4sCount(void *a1, const char *a2, ...)
{
  return _[a1 ipv4sCount];
}

id objc_msgSend_ipv6AtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ipv6AtIndex:");
}

id objc_msgSend_ipv6sCount(void *a1, const char *a2, ...)
{
  return _[a1 ipv6sCount];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isAppSpecificTokenValidWithDomain_token_tokenServiceSuffix_user_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppSpecificTokenValidWithDomain:token:tokenServiceSuffix:user:error:");
}

id objc_msgSend_isAppSpecificTokenValidWithDomain_token_user_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppSpecificTokenValidWithDomain:token:user:error:");
}

id objc_msgSend_isAttemptingToReconnect(void *a1, const char *a2, ...)
{
  return _[a1 isAttemptingToReconnect];
}

id objc_msgSend_isBuildSupported(void *a1, const char *a2, ...)
{
  return _[a1 isBuildSupported];
}

id objc_msgSend_isCellularWatch(void *a1, const char *a2, ...)
{
  return _[a1 isCellularWatch];
}

id objc_msgSend_isCertificateValidated(void *a1, const char *a2, ...)
{
  return _[a1 isCertificateValidated];
}

id objc_msgSend_isClosed(void *a1, const char *a2, ...)
{
  return _[a1 isClosed];
}

id objc_msgSend_isConnectableRightNow(void *a1, const char *a2, ...)
{
  return _[a1 isConnectableRightNow];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _[a1 isConnected];
}

id objc_msgSend_isConnectedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConnectedOnInterface:");
}

id objc_msgSend_isConnectedOnUltraConstrainedInterface(void *a1, const char *a2, ...)
{
  return _[a1 isConnectedOnUltraConstrainedInterface];
}

id objc_msgSend_isConnectedToService(void *a1, const char *a2, ...)
{
  return _[a1 isConnectedToService];
}

id objc_msgSend_isConnectingOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConnectingOnInterface:");
}

id objc_msgSend_isCritical(void *a1, const char *a2, ...)
{
  return _[a1 isCritical];
}

id objc_msgSend_isCriticalWakeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCriticalWakeEnabled];
}

id objc_msgSend_isDaemonUser(void *a1, const char *a2, ...)
{
  return _[a1 isDaemonUser];
}

id objc_msgSend_isDarkWakeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isDarkWakeEnabled];
}

id objc_msgSend_isDefaultUser(void *a1, const char *a2, ...)
{
  return _[a1 isDefaultUser];
}

id objc_msgSend_isDualChannelAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isDualChannelAllowed];
}

id objc_msgSend_isEager(void *a1, const char *a2, ...)
{
  return _[a1 isEager];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExpensiveToUseInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExpensiveToUseInterface:");
}

id objc_msgSend_isGoingToSleep(void *a1, const char *a2, ...)
{
  return _[a1 isGoingToSleep];
}

id objc_msgSend_isGuestUser(void *a1, const char *a2, ...)
{
  return _[a1 isGuestUser];
}

id objc_msgSend_isIdentityAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isIdentityAvailable];
}

id objc_msgSend_isIdle(void *a1, const char *a2, ...)
{
  return _[a1 isIdle];
}

id objc_msgSend_isInteractivePushDuringSleepEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isInteractivePushDuringSleepEnabled];
}

id objc_msgSend_isInterfaceHistoricallyUsable(void *a1, const char *a2, ...)
{
  return _[a1 isInterfaceHistoricallyUsable];
}

id objc_msgSend_isInterfaceUsable(void *a1, const char *a2, ...)
{
  return _[a1 isInterfaceUsable];
}

id objc_msgSend_isInternetReachable(void *a1, const char *a2, ...)
{
  return _[a1 isInternetReachable];
}

id objc_msgSend_isInvalid(void *a1, const char *a2, ...)
{
  return _[a1 isInvalid];
}

id objc_msgSend_isKeepAliveProxyConfigured(void *a1, const char *a2, ...)
{
  return _[a1 isKeepAliveProxyConfigured];
}

id objc_msgSend_isKeepAliveProxyConfiguredOnAnyConnection(void *a1, const char *a2, ...)
{
  return _[a1 isKeepAliveProxyConfiguredOnAnyConnection];
}

id objc_msgSend_isKeepAliveProxyConfiguredOnAnyInterface(void *a1, const char *a2, ...)
{
  return _[a1 isKeepAliveProxyConfiguredOnAnyInterface];
}

id objc_msgSend_isKeepAliveProxyConfiguredOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKeepAliveProxyConfiguredOnInterface:");
}

id objc_msgSend_isKeepAliveProxyFeatureEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isKeepAliveProxyFeatureEnabled];
}

id objc_msgSend_isLTEWithCDRX(void *a1, const char *a2, ...)
{
  return _[a1 isLTEWithCDRX];
}

id objc_msgSend_isLast(void *a1, const char *a2, ...)
{
  return _[a1 isLast];
}

id objc_msgSend_isLoadBalanced(void *a1, const char *a2, ...)
{
  return _[a1 isLoadBalanced];
}

id objc_msgSend_isLoggedInUser(void *a1, const char *a2, ...)
{
  return _[a1 isLoggedInUser];
}

id objc_msgSend_isLoggedOut(void *a1, const char *a2, ...)
{
  return _[a1 isLoggedOut];
}

id objc_msgSend_isLoginUser(void *a1, const char *a2, ...)
{
  return _[a1 isLoginUser];
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _[a1 isMainThread];
}

id objc_msgSend_isMatchingTokenInKeychain_user_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMatchingTokenInKeychain:user:error:");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMultiUser(void *a1, const char *a2, ...)
{
  return _[a1 isMultiUser];
}

id objc_msgSend_isNearby(void *a1, const char *a2, ...)
{
  return _[a1 isNearby];
}

id objc_msgSend_isNetworkingPowerExpensiveToUse(void *a1, const char *a2, ...)
{
  return _[a1 isNetworkingPowerExpensiveToUse];
}

id objc_msgSend_isOutOfDateOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOutOfDateOn:");
}

id objc_msgSend_isPeerTrustedForTrust_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPeerTrustedForTrust:");
}

id objc_msgSend_isPiggybacking(void *a1, const char *a2, ...)
{
  return _[a1 isPiggybacking];
}

id objc_msgSend_isPoorLinkQuality(void *a1, const char *a2, ...)
{
  return _[a1 isPoorLinkQuality];
}

id objc_msgSend_isPoorLinkQuality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPoorLinkQuality:");
}

id objc_msgSend_isPowerEfficientToUse(void *a1, const char *a2, ...)
{
  return _[a1 isPowerEfficientToUse];
}

id objc_msgSend_isPreferredInterface(void *a1, const char *a2, ...)
{
  return _[a1 isPreferredInterface];
}

id objc_msgSend_isPublicTokenAcknowledged(void *a1, const char *a2, ...)
{
  return _[a1 isPublicTokenAcknowledged];
}

id objc_msgSend_isPushWakeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isPushWakeEnabled];
}

id objc_msgSend_isRadioHot(void *a1, const char *a2, ...)
{
  return _[a1 isRadioHot];
}

id objc_msgSend_isRunning(void *a1, const char *a2, ...)
{
  return _[a1 isRunning];
}

id objc_msgSend_isSimulator(void *a1, const char *a2, ...)
{
  return _[a1 isSimulator];
}

id objc_msgSend_isSuspended(void *a1, const char *a2, ...)
{
  return _[a1 isSuspended];
}

id objc_msgSend_isSuspendedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSuspendedOnInterface:");
}

id objc_msgSend_isSystemLocked(void *a1, const char *a2, ...)
{
  return _[a1 isSystemLocked];
}

id objc_msgSend_isTracingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isTracingEnabled];
}

id objc_msgSend_isTrust_validWithPolicy_forPeer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTrust:validWithPolicy:forPeer:");
}

id objc_msgSend_isUltraConstrainedEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isUltraConstrainedEnabled];
}

id objc_msgSend_isUnderLimit(void *a1, const char *a2, ...)
{
  return _[a1 isUnderLimit];
}

id objc_msgSend_isUnset(void *a1, const char *a2, ...)
{
  return _[a1 isUnset];
}

id objc_msgSend_isWWANInterfaceSuspended(void *a1, const char *a2, ...)
{
  return _[a1 isWWANInterfaceSuspended];
}

id objc_msgSend_isWWANInterfaceUp(void *a1, const char *a2, ...)
{
  return _[a1 isWWANInterfaceUp];
}

id objc_msgSend_isWakeOnWiFiSupported(void *a1, const char *a2, ...)
{
  return _[a1 isWakeOnWiFiSupported];
}

id objc_msgSend_isWiFiAssociated(void *a1, const char *a2, ...)
{
  return _[a1 isWiFiAssociated];
}

id objc_msgSend_isWoWEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isWoWEnabled];
}

id objc_msgSend_itemState(void *a1, const char *a2, ...)
{
  return _[a1 itemState];
}

id objc_msgSend_keepAliveInterval(void *a1, const char *a2, ...)
{
  return _[a1 keepAliveInterval];
}

id objc_msgSend_keepAliveIntervalForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keepAliveIntervalForEnvironment:");
}

id objc_msgSend_keepAliveState(void *a1, const char *a2, ...)
{
  return _[a1 keepAliveState];
}

id objc_msgSend_keepAliveV2SupportedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keepAliveV2SupportedOnInterface:");
}

id objc_msgSend_keepAliveV2TimeDriftMaximum(void *a1, const char *a2, ...)
{
  return _[a1 keepAliveV2TimeDriftMaximum];
}

id objc_msgSend_keysSortedByValueUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysSortedByValueUsingComparator:");
}

id objc_msgSend_kickstartProxyConnection(void *a1, const char *a2, ...)
{
  return _[a1 kickstartProxyConnection];
}

id objc_msgSend_largeMessageSize(void *a1, const char *a2, ...)
{
  return _[a1 largeMessageSize];
}

id objc_msgSend_lastConnected(void *a1, const char *a2, ...)
{
  return _[a1 lastConnected];
}

id objc_msgSend_lastIPCachingPercentage(void *a1, const char *a2, ...)
{
  return _[a1 lastIPCachingPercentage];
}

id objc_msgSend_lastIPCachingTTLMinutes(void *a1, const char *a2, ...)
{
  return _[a1 lastIPCachingTTLMinutes];
}

id objc_msgSend_lastIPCachingTTLMinutesV2(void *a1, const char *a2, ...)
{
  return _[a1 lastIPCachingTTLMinutesV2];
}

id objc_msgSend_lastKeepAliveActionOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastKeepAliveActionOnInterface:");
}

id objc_msgSend_lastMessageTime(void *a1, const char *a2, ...)
{
  return _[a1 lastMessageTime];
}

id objc_msgSend_lastMessageTopic(void *a1, const char *a2, ...)
{
  return _[a1 lastMessageTopic];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastPresence(void *a1, const char *a2, ...)
{
  return _[a1 lastPresence];
}

id objc_msgSend_lastReversePushRTTMillisecondsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastReversePushRTTMillisecondsOnInterface:");
}

id objc_msgSend_lastSystemWakeDate(void *a1, const char *a2, ...)
{
  return _[a1 lastSystemWakeDate];
}

id objc_msgSend_latestGeoRegion(void *a1, const char *a2, ...)
{
  return _[a1 latestGeoRegion];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_lineWithDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineWithDescription:");
}

id objc_msgSend_linkQuality(void *a1, const char *a2, ...)
{
  return _[a1 linkQuality];
}

id objc_msgSend_linkedDevicesWithRelationship_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkedDevicesWithRelationship:");
}

id objc_msgSend_loadConfigurationForEnvironment_connectionType_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadConfigurationForEnvironment:connectionType:block:");
}

id objc_msgSend_loadIdentifiersToSaltsForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadIdentifiersToSaltsForUser:");
}

id objc_msgSend_loadOrCreateAppIdForEnvironmentName_topic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadOrCreateAppIdForEnvironmentName:topic:identifier:");
}

id objc_msgSend_loadSaltForIdentifier_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadSaltForIdentifier:user:");
}

id objc_msgSend_localAddress(void *a1, const char *a2, ...)
{
  return _[a1 localAddress];
}

id objc_msgSend_localPort(void *a1, const char *a2, ...)
{
  return _[a1 localPort];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_locallyDisabledFilterOptimization(void *a1, const char *a2, ...)
{
  return _[a1 locallyDisabledFilterOptimization];
}

id objc_msgSend_logFilterPolicyInformation(void *a1, const char *a2, ...)
{
  return _[a1 logFilterPolicyInformation];
}

id objc_msgSend_logStateWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logStateWithReason:");
}

id objc_msgSend_logString(void *a1, const char *a2, ...)
{
  return _[a1 logString];
}

id objc_msgSend_logout(void *a1, const char *a2, ...)
{
  return _[a1 logout];
}

id objc_msgSend_logoutUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logoutUser:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_lookupChannelWithChannelID_andPushTopic_environment_userName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lookupChannelWithChannelID:andPushTopic:environment:userName:");
}

id objc_msgSend_lowQualityThresholdConnectedTime(void *a1, const char *a2, ...)
{
  return _[a1 lowQualityThresholdConnectedTime];
}

id objc_msgSend_mainCourier(void *a1, const char *a2, ...)
{
  return _[a1 mainCourier];
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _[a1 mainQueue];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 mainRunLoop];
}

id objc_msgSend_manuallyLoginUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manuallyLoginUser:");
}

id objc_msgSend_manuallySetupAndLoginUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manuallySetupAndLoginUser:");
}

id objc_msgSend_markInitiallyConnectedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markInitiallyConnectedOnInterface:");
}

id objc_msgSend_markProtocolConnectionDisconnectedForActivityTracking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markProtocolConnectionDisconnectedForActivityTracking:");
}

id objc_msgSend_maxExpensiveConditionsConnectionAttempts(void *a1, const char *a2, ...)
{
  return _[a1 maxExpensiveConditionsConnectionAttempts];
}

id objc_msgSend_maxLargeMessageSize(void *a1, const char *a2, ...)
{
  return _[a1 maxLargeMessageSize];
}

id objc_msgSend_maxLargeMessageSizeForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxLargeMessageSizeForInterface:");
}

id objc_msgSend_maxMessageSize(void *a1, const char *a2, ...)
{
  return _[a1 maxMessageSize];
}

id objc_msgSend_maxMessageSizeForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxMessageSizeForInterface:");
}

id objc_msgSend_maxTableSize(void *a1, const char *a2, ...)
{
  return _[a1 maxTableSize];
}

id objc_msgSend_mergeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFrom:");
}

id objc_msgSend_messageID(void *a1, const char *a2, ...)
{
  return _[a1 messageID];
}

id objc_msgSend_messageId(void *a1, const char *a2, ...)
{
  return _[a1 messageId];
}

id objc_msgSend_messageSize(void *a1, const char *a2, ...)
{
  return _[a1 messageSize];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_metricSubmissionBlock(void *a1, const char *a2, ...)
{
  return _[a1 metricSubmissionBlock];
}

id objc_msgSend_minPresenceSaltRotationInterval(void *a1, const char *a2, ...)
{
  return _[a1 minPresenceSaltRotationInterval];
}

id objc_msgSend_minimumIntervalFallbackEnabled(void *a1, const char *a2, ...)
{
  return _[a1 minimumIntervalFallbackEnabled];
}

id objc_msgSend_minimumKeepAliveInterval(void *a1, const char *a2, ...)
{
  return _[a1 minimumKeepAliveInterval];
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_moveUnknownToDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveUnknownToDestination:");
}

id objc_msgSend_multiUser(void *a1, const char *a2, ...)
{
  return _[a1 multiUser];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_nagleEnabled(void *a1, const char *a2, ...)
{
  return _[a1 nagleEnabled];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_needsToConnectOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToConnectOnInterface:");
}

id objc_msgSend_needsToDisconnect(void *a1, const char *a2, ...)
{
  return _[a1 needsToDisconnect];
}

id objc_msgSend_needsToDisconnectOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToDisconnectOnInterface:");
}

id objc_msgSend_networkCode(void *a1, const char *a2, ...)
{
  return _[a1 networkCode];
}

id objc_msgSend_networkMonitor(void *a1, const char *a2, ...)
{
  return _[a1 networkMonitor];
}

id objc_msgSend_networkMonitor_enableWiFiAssertionForPiggybackConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkMonitor:enableWiFiAssertionForPiggybackConnection:");
}

id objc_msgSend_networkMonitor_evaluateDualModeState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkMonitor:evaluateDualModeState:");
}

id objc_msgSend_networkMonitorWiFiBecameAssociated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkMonitorWiFiBecameAssociated:");
}

id objc_msgSend_networking(void *a1, const char *a2, ...)
{
  return _[a1 networking];
}

id objc_msgSend_nextConnectionAttemptInterface(void *a1, const char *a2, ...)
{
  return _[a1 nextConnectionAttemptInterface];
}

id objc_msgSend_nonWakingTopics(void *a1, const char *a2, ...)
{
  return _[a1 nonWakingTopics];
}

id objc_msgSend_nonce(void *a1, const char *a2, ...)
{
  return _[a1 nonce];
}

id objc_msgSend_note(void *a1, const char *a2, ...)
{
  return _[a1 note];
}

id objc_msgSend_noteAckedWithVersion_on_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteAckedWithVersion:on:");
}

id objc_msgSend_noteConnected(void *a1, const char *a2, ...)
{
  return _[a1 noteConnected];
}

id objc_msgSend_noteConnectionAttemptFailed(void *a1, const char *a2, ...)
{
  return _[a1 noteConnectionAttemptFailed];
}

id objc_msgSend_noteConnectionAttemptStart(void *a1, const char *a2, ...)
{
  return _[a1 noteConnectionAttemptStart];
}

id objc_msgSend_noteConnectionEstablished(void *a1, const char *a2, ...)
{
  return _[a1 noteConnectionEstablished];
}

id objc_msgSend_noteConnectionFailureWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteConnectionFailureWithReason:");
}

id objc_msgSend_noteInvalidPresence(void *a1, const char *a2, ...)
{
  return _[a1 noteInvalidPresence];
}

id objc_msgSend_noteInvalidWithVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteInvalidWithVersion:");
}

id objc_msgSend_noteIsConnected(void *a1, const char *a2, ...)
{
  return _[a1 noteIsConnected];
}

id objc_msgSend_notePresenceFailure(void *a1, const char *a2, ...)
{
  return _[a1 notePresenceFailure];
}

id objc_msgSend_notePresenceSuccess(void *a1, const char *a2, ...)
{
  return _[a1 notePresenceSuccess];
}

id objc_msgSend_notePush(void *a1, const char *a2, ...)
{
  return _[a1 notePush];
}

id objc_msgSend_notePushWithCost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notePushWithCost:");
}

id objc_msgSend_noteReachabilityChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteReachabilityChange:");
}

id objc_msgSend_noteReceivedLiveMessage(void *a1, const char *a2, ...)
{
  return _[a1 noteReceivedLiveMessage];
}

id objc_msgSend_noteReceivedStoredMessage(void *a1, const char *a2, ...)
{
  return _[a1 noteReceivedStoredMessage];
}

id objc_msgSend_noteSentWithVersion_on_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteSentWithVersion:on:");
}

id objc_msgSend_noteSystemDidFullWakeWhileConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteSystemDidFullWakeWhileConnected:");
}

id objc_msgSend_noteSystemWillSleep(void *a1, const char *a2, ...)
{
  return _[a1 noteSystemWillSleep];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_nwInterfaceTypeForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nwInterfaceTypeForInterface:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKey_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:onInterface:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_onAPSDConnectionChangeIsOverWiFi_isOverCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAPSDConnectionChangeIsOverWiFi:isOverCell:");
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return _[a1 open];
}

id objc_msgSend_openDatabase(void *a1, const char *a2, ...)
{
  return _[a1 openDatabase];
}

id objc_msgSend_openURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:configuration:completionHandler:");
}

id objc_msgSend_openedSecondChannel(void *a1, const char *a2, ...)
{
  return _[a1 openedSecondChannel];
}

id objc_msgSend_opportunisticTopics(void *a1, const char *a2, ...)
{
  return _[a1 opportunisticTopics];
}

id objc_msgSend_originator(void *a1, const char *a2, ...)
{
  return _[a1 originator];
}

id objc_msgSend_outgoingConnectMessageQueue(void *a1, const char *a2, ...)
{
  return _[a1 outgoingConnectMessageQueue];
}

id objc_msgSend_outgoingCounts(void *a1, const char *a2, ...)
{
  return _[a1 outgoingCounts];
}

id objc_msgSend_outgoingCountsByTopic(void *a1, const char *a2, ...)
{
  return _[a1 outgoingCountsByTopic];
}

id objc_msgSend_outgoingCountsForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outgoingCountsForTopic:");
}

id objc_msgSend_outgoingFilterQueue(void *a1, const char *a2, ...)
{
  return _[a1 outgoingFilterQueue];
}

id objc_msgSend_outgoingMessageQueue_lateAcknowledgmentForCriticalOutgoingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outgoingMessageQueue:lateAcknowledgmentForCriticalOutgoingMessage:");
}

id objc_msgSend_outgoingMessageQueue_requestCriticalMessageFlushWithPaddingLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outgoingMessageQueue:requestCriticalMessageFlushWithPaddingLength:");
}

id objc_msgSend_outgoingMessageQueueShortMessageTimeoutExceeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outgoingMessageQueueShortMessageTimeoutExceeded:");
}

id objc_msgSend_outgoingMessagesToSend(void *a1, const char *a2, ...)
{
  return _[a1 outgoingMessagesToSend];
}

id objc_msgSend_outgoingSendMessageQueue(void *a1, const char *a2, ...)
{
  return _[a1 outgoingSendMessageQueue];
}

id objc_msgSend_output(void *a1, const char *a2, ...)
{
  return _[a1 output];
}

id objc_msgSend_overallCourierStatus(void *a1, const char *a2, ...)
{
  return _[a1 overallCourierStatus];
}

id objc_msgSend_overrideFilterDisableResponseForConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideFilterDisableResponseForConnectionType:");
}

id objc_msgSend_overrideFilterVersion(void *a1, const char *a2, ...)
{
  return _[a1 overrideFilterVersion];
}

id objc_msgSend_pairWithFirst_second_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairWithFirst:second:");
}

id objc_msgSend_parseMessage_parameters_isInvalid_lengthParsed_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseMessage:parameters:isInvalid:lengthParsed:onInterface:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathWithComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathWithComponents:");
}

id objc_msgSend_payloadFormat(void *a1, const char *a2, ...)
{
  return _[a1 payloadFormat];
}

id objc_msgSend_payloadHash(void *a1, const char *a2, ...)
{
  return _[a1 payloadHash];
}

id objc_msgSend_payloadLength(void *a1, const char *a2, ...)
{
  return _[a1 payloadLength];
}

id objc_msgSend_payloadMessageReceived_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadMessageReceived:");
}

id objc_msgSend_payloadMessageSent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadMessageSent:");
}

id objc_msgSend_pcInterfaceMonitorNonCellular(void *a1, const char *a2, ...)
{
  return _[a1 pcInterfaceMonitorNonCellular];
}

id objc_msgSend_pcInterfaceMonitorOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pcInterfaceMonitorOnInterface:");
}

id objc_msgSend_pcInterfaceMonitorWWAN(void *a1, const char *a2, ...)
{
  return _[a1 pcInterfaceMonitorWWAN];
}

id objc_msgSend_pcPersistentInterfaceManager(void *a1, const char *a2, ...)
{
  return _[a1 pcPersistentInterfaceManager];
}

id objc_msgSend_pendingServerUpdate(void *a1, const char *a2, ...)
{
  return _[a1 pendingServerUpdate];
}

id objc_msgSend_perAppToken(void *a1, const char *a2, ...)
{
  return _[a1 perAppToken];
}

id objc_msgSend_performBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlock:");
}

id objc_msgSend_performBlock_waitUntilDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlock:waitUntilDone:");
}

id objc_msgSend_performDecay(void *a1, const char *a2, ...)
{
  return _[a1 performDecay];
}

id objc_msgSend_performFilterBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performFilterBlock:");
}

id objc_msgSend_performKeepAlive(void *a1, const char *a2, ...)
{
  return _[a1 performKeepAlive];
}

id objc_msgSend_performKeepAliveOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performKeepAliveOnInterface:");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_performSelector_withObject_afterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:afterDelay:");
}

id objc_msgSend_performTransactionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTransactionBlock:");
}

id objc_msgSend_periodicSignalFired(void *a1, const char *a2, ...)
{
  return _[a1 periodicSignalFired];
}

id objc_msgSend_persistentTopics(void *a1, const char *a2, ...)
{
  return _[a1 persistentTopics];
}

id objc_msgSend_piggybackDualChannelAttempts(void *a1, const char *a2, ...)
{
  return _[a1 piggybackDualChannelAttempts];
}

id objc_msgSend_policy(void *a1, const char *a2, ...)
{
  return _[a1 policy];
}

id objc_msgSend_popIndent(void *a1, const char *a2, ...)
{
  return _[a1 popIndent];
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return _[a1 port];
}

id objc_msgSend_power(void *a1, const char *a2, ...)
{
  return _[a1 power];
}

id objc_msgSend_powerCostForPushOnRAT_withLinkQuality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "powerCostForPushOnRAT:withLinkQuality:");
}

id objc_msgSend_powerOptimizationsForExpensiveNetworkingDisabled(void *a1, const char *a2, ...)
{
  return _[a1 powerOptimizationsForExpensiveNetworkingDisabled];
}

id objc_msgSend_preferredInterface(void *a1, const char *a2, ...)
{
  return _[a1 preferredInterface];
}

id objc_msgSend_preferredProtocolConnection(void *a1, const char *a2, ...)
{
  return _[a1 preferredProtocolConnection];
}

id objc_msgSend_prepareForDarkWake(void *a1, const char *a2, ...)
{
  return _[a1 prepareForDarkWake];
}

id objc_msgSend_prepareForFullWake(void *a1, const char *a2, ...)
{
  return _[a1 prepareForFullWake];
}

id objc_msgSend_prepareForSleep(void *a1, const char *a2, ...)
{
  return _[a1 prepareForSleep];
}

id objc_msgSend_presenceCompletion(void *a1, const char *a2, ...)
{
  return _[a1 presenceCompletion];
}

id objc_msgSend_prettyStatus(void *a1, const char *a2, ...)
{
  return _[a1 prettyStatus];
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processIsPowerEfficientToSendChange(void *a1, const char *a2, ...)
{
  return _[a1 processIsPowerEfficientToSendChange];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _[a1 processName];
}

id objc_msgSend_processNameWithLabels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processNameWithLabels:");
}

id objc_msgSend_promptTapToRadarWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promptTapToRadarWithURL:");
}

id objc_msgSend_propertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyForKey:");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_protectionSpace(void *a1, const char *a2, ...)
{
  return _[a1 protectionSpace];
}

id objc_msgSend_protocolConnection_receivedFilterUpdateWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedFilterUpdateWithParameters:");
}

id objc_msgSend_protocolConnection_receivedMessageWithParameters_generation_isWaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedMessageWithParameters:generation:isWaking:");
}

id objc_msgSend_protocolConnection_receivedOfflinePresencekWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedOfflinePresencekWithParameters:");
}

id objc_msgSend_protocolConnection_receivedPresenceTrackingRequestWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedPresenceTrackingRequestWithParameters:");
}

id objc_msgSend_protocolConnection_receivedPubSubChannelListWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedPubSubChannelListWithParameters:");
}

id objc_msgSend_protocolConnection_receivedPubSubChannelUpdateWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedPubSubChannelUpdateWithParameters:");
}

id objc_msgSend_protocolConnection_receivedTaskControlWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedTaskControlWithParameters:");
}

id objc_msgSend_protocolConnection_receivedTaskNotificationWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedTaskNotificationWithParameters:");
}

id objc_msgSend_protocolConnectionByIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 protocolConnectionByIdentifier];
}

id objc_msgSend_protocolConnectionEstablisher(void *a1, const char *a2, ...)
{
  return _[a1 protocolConnectionEstablisher];
}

id objc_msgSend_protocolConnectionForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnectionForInterface:");
}

id objc_msgSend_protocolConnectionHasSentActivityTrackingSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnectionHasSentActivityTrackingSalt:");
}

id objc_msgSend_protocolParser(void *a1, const char *a2, ...)
{
  return _[a1 protocolParser];
}

id objc_msgSend_protocolParser_receiveAPNSPackError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolParser:receiveAPNSPackError:");
}

id objc_msgSend_proxy(void *a1, const char *a2, ...)
{
  return _[a1 proxy];
}

id objc_msgSend_proxyAgent(void *a1, const char *a2, ...)
{
  return _[a1 proxyAgent];
}

id objc_msgSend_proxyAgent_openedNewProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyAgent:openedNewProtocolConnection:");
}

id objc_msgSend_proxyManager(void *a1, const char *a2, ...)
{
  return _[a1 proxyManager];
}

id objc_msgSend_proxyManager_appTokenGenerateResponse_error_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:appTokenGenerateResponse:error:guid:environmentName:");
}

id objc_msgSend_proxyManager_canUseProxyChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:canUseProxyChanged:");
}

id objc_msgSend_proxyManager_expiredNonceWithServerTime_shouldRollToken_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:expiredNonceWithServerTime:shouldRollToken:guid:environmentName:");
}

id objc_msgSend_proxyManager_handlePubSubChannelListRequest_envName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:handlePubSubChannelListRequest:envName:guid:");
}

id objc_msgSend_proxyManager_handlePubSubChannelListResponse_environmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:handlePubSubChannelListResponse:environmentName:guid:");
}

id objc_msgSend_proxyManager_handlePubSubUpdateMessage_connectionType_environmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:handlePubSubUpdateMessage:connectionType:environmentName:guid:");
}

id objc_msgSend_proxyManager_inactiveReceivedForGuid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:inactiveReceivedForGuid:environmentName:");
}

id objc_msgSend_proxyManager_incomingFilterForGuid_environmentName_enabledTopics_ignoredTopics_opportunisticTopics_nonWakingTopics_topicSalts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:incomingFilterForGuid:environmentName:enabledTopics:ignoredTopics:opportunisticTopics:nonWakingTopics:topicSalts:");
}

id objc_msgSend_proxyManager_incomingMessageSize_largeMessageSize_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:incomingMessageSize:largeMessageSize:guid:environmentName:");
}

id objc_msgSend_proxyManager_incomingPresenceWithGuid_token_hwVersion_swVersion_swBuild_certificate_nonce_signature_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:incomingPresenceWithGuid:token:hwVersion:swVersion:swBuild:certificate:nonce:signature:environmentName:");
}

id objc_msgSend_proxyManager_incomingPushToken_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:incomingPushToken:guid:environmentName:");
}

id objc_msgSend_proxyManager_isConnected_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:isConnected:guid:environmentName:");
}

id objc_msgSend_proxyManager_isNearbyChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:isNearbyChanged:");
}

id objc_msgSend_proxyManager_messageTracingWithStatus_topic_tracingUUID_token_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:messageTracingWithStatus:topic:tracingUUID:token:guid:environmentName:");
}

id objc_msgSend_proxyManager_receivedPush_connectionType_generation_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:receivedPush:connectionType:generation:guid:environmentName:");
}

id objc_msgSend_proxyManager_receivedPushAckResponse_messageId_token_connectionType_generation_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:receivedPushAckResponse:messageId:token:connectionType:generation:guid:environmentName:");
}

id objc_msgSend_proxyManager_reversePushResponse_messageGUID_messageId_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:reversePushResponse:messageGUID:messageId:guid:environmentName:");
}

id objc_msgSend_proxyManager_sendPubSubChannelList_messageID_token_connectionType_environmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:sendPubSubChannelList:messageID:token:connectionType:environmentName:guid:");
}

id objc_msgSend_proxyManager_sendReversePush_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:sendReversePush:guid:environmentName:");
}

id objc_msgSend_proxyManager_tokenGenerateWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:tokenGenerateWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:guid:environmentName:");
}

id objc_msgSend_proxyManagerReceivedDaemonAliveNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManagerReceivedDaemonAliveNotification:");
}

id objc_msgSend_pubSub(void *a1, const char *a2, ...)
{
  return _[a1 pubSub];
}

id objc_msgSend_pubSubDefaultTimeout(void *a1, const char *a2, ...)
{
  return _[a1 pubSubDefaultTimeout];
}

id objc_msgSend_pubSubName(void *a1, const char *a2, ...)
{
  return _[a1 pubSubName];
}

id objc_msgSend_pubSubRetryAttemptsCount(void *a1, const char *a2, ...)
{
  return _[a1 pubSubRetryAttemptsCount];
}

id objc_msgSend_publicToken(void *a1, const char *a2, ...)
{
  return _[a1 publicToken];
}

id objc_msgSend_publicTokenDeliveryDelay(void *a1, const char *a2, ...)
{
  return _[a1 publicTokenDeliveryDelay];
}

id objc_msgSend_publicTokenDeliveryRetries(void *a1, const char *a2, ...)
{
  return _[a1 publicTokenDeliveryRetries];
}

id objc_msgSend_publicTokenForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publicTokenForUser:");
}

id objc_msgSend_pushFlags(void *a1, const char *a2, ...)
{
  return _[a1 pushFlags];
}

id objc_msgSend_pushHistory(void *a1, const char *a2, ...)
{
  return _[a1 pushHistory];
}

id objc_msgSend_pushIndent(void *a1, const char *a2, ...)
{
  return _[a1 pushIndent];
}

id objc_msgSend_pushTokenBecameInvalidForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushTokenBecameInvalidForClient:");
}

id objc_msgSend_pushType(void *a1, const char *a2, ...)
{
  return _[a1 pushType];
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queuedPresenceSend(void *a1, const char *a2, ...)
{
  return _[a1 queuedPresenceSend];
}

id objc_msgSend_reachabilityBlock(void *a1, const char *a2, ...)
{
  return _[a1 reachabilityBlock];
}

id objc_msgSend_read_maxLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "read:maxLength:");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_recalculateCriticalReliability(void *a1, const char *a2, ...)
{
  return _[a1 recalculateCriticalReliability];
}

id objc_msgSend_recalculateTrackActivityPresence(void *a1, const char *a2, ...)
{
  return _[a1 recalculateTrackActivityPresence];
}

id objc_msgSend_receivedClientConnection(void *a1, const char *a2, ...)
{
  return _[a1 receivedClientConnection];
}

id objc_msgSend_receivedPush_onConnectionType_withGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedPush:onConnectionType:withGeneration:");
}

id objc_msgSend_receivedPushWithTopic_token_payload_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedPushWithTopic:token:payload:timestamp:");
}

id objc_msgSend_redirectCount(void *a1, const char *a2, ...)
{
  return _[a1 redirectCount];
}

id objc_msgSend_redirectHost(void *a1, const char *a2, ...)
{
  return _[a1 redirectHost];
}

id objc_msgSend_refreshCertNonceAndSignatureWithServerTime_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshCertNonceAndSignatureWithServerTime:withCompletion:");
}

id objc_msgSend_refreshCriticalReliability(void *a1, const char *a2, ...)
{
  return _[a1 refreshCriticalReliability];
}

id objc_msgSend_refreshCriticalReliabilityTimerWithShortKeepAlive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshCriticalReliabilityTimerWithShortKeepAlive:");
}

id objc_msgSend_refreshIdentityNextFetch(void *a1, const char *a2, ...)
{
  return _[a1 refreshIdentityNextFetch];
}

id objc_msgSend_remoteAddress(void *a1, const char *a2, ...)
{
  return _[a1 remoteAddress];
}

id objc_msgSend_remotePort(void *a1, const char *a2, ...)
{
  return _[a1 remotePort];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAllPendingAPSMessages(void *a1, const char *a2, ...)
{
  return _[a1 removeAllPendingAPSMessages];
}

id objc_msgSend_removeAllTopics(void *a1, const char *a2, ...)
{
  return _[a1 removeAllTopics];
}

id objc_msgSend_removeAppIdForEnvironmentName_topic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAppIdForEnvironmentName:topic:identifier:");
}

id objc_msgSend_removeConnectionForConnectionPortName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeConnectionForConnectionPortName:");
}

id objc_msgSend_removeConnectionForConnectionPortName_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeConnectionForConnectionPortName:user:");
}

id objc_msgSend_removeDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDelegate:");
}

id objc_msgSend_removeFastDormancyDisableToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFastDormancyDisableToken:");
}

id objc_msgSend_removeItem_withFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItem:withFlag:");
}

id objc_msgSend_removeListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeListener:");
}

id objc_msgSend_removeListener_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeListener:environment:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsAtIndexes:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeTaskServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTaskServer:");
}

id objc_msgSend_removeTopics_connectionServer_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTopics:connectionServer:filter:");
}

id objc_msgSend_removeTopicsForConnectionServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTopicsForConnectionServer:");
}

id objc_msgSend_replaceBytesInRange_withBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceBytesInRange:withBytes:length:");
}

id objc_msgSend_reportClientIPAddress_forInterfaceOfName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportClientIPAddress:forInterfaceOfName:");
}

id objc_msgSend_reportConnectionFailureOnConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportConnectionFailureOnConnectionType:");
}

id objc_msgSend_reportConnectionSuccessOnConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportConnectionSuccessOnConnectionType:");
}

id objc_msgSend_reportSymptomToAutoBugCapture_subType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportSymptomToAutoBugCapture:subType:");
}

id objc_msgSend_requestConnectionIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 requestConnectionIfNeeded];
}

id objc_msgSend_requestCourierConnections(void *a1, const char *a2, ...)
{
  return _[a1 requestCourierConnections];
}

id objc_msgSend_requestFilterForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestFilterForClient:");
}

id objc_msgSend_requestWithURL_cachePolicy_timeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:cachePolicy:timeoutInterval:");
}

id objc_msgSend_resetCheckpoint(void *a1, const char *a2, ...)
{
  return _[a1 resetCheckpoint];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_resumeManagerWithAction_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeManagerWithAction:onInterface:");
}

id objc_msgSend_retryCount(void *a1, const char *a2, ...)
{
  return _[a1 retryCount];
}

id objc_msgSend_rollTokenAndReconnect(void *a1, const char *a2, ...)
{
  return _[a1 rollTokenAndReconnect];
}

id objc_msgSend_rollTokensForAllBAAEnvironments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rollTokensForAllBAAEnvironments:");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_saveAndUpdateDelegate(void *a1, const char *a2, ...)
{
  return _[a1 saveAndUpdateDelegate];
}

id objc_msgSend_saveSalt_forIdentifier_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveSalt:forIdentifier:user:");
}

id objc_msgSend_saveToken_forInfo_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveToken:forInfo:connection:");
}

id objc_msgSend_scheduleInRunLoop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleInRunLoop:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_second(void *a1, const char *a2, ...)
{
  return _[a1 second];
}

id objc_msgSend_secondsBetweenPiggybacks(void *a1, const char *a2, ...)
{
  return _[a1 secondsBetweenPiggybacks];
}

id objc_msgSend_sendActivityTrackingRequestWithMessageID_pushToken_salt_trackingFlag_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendActivityTrackingRequestWithMessageID:pushToken:salt:trackingFlag:timestamp:");
}

id objc_msgSend_sendActivityTrackingRequestWithMessageID_pushToken_salt_trackingFlag_timestamp_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendActivityTrackingRequestWithMessageID:pushToken:salt:trackingFlag:timestamp:onInterface:");
}

id objc_msgSend_sendAppTokenGenerateResponse_error_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAppTokenGenerateResponse:error:guid:environmentName:");
}

id objc_msgSend_sendBlock(void *a1, const char *a2, ...)
{
  return _[a1 sendBlock];
}

id objc_msgSend_sendConnectMessageWithToken_interface_activeInterval_presenceFlags_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_tcpHandshakeTimeMilliseconds_dnsResolveTimeMilliseconds_tlsHandshakeTimeMilliseconds_consecutiveConnectionFailureReason_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendConnectMessageWithToken:interface:activeInterval:presenceFlags:metadata:certificates:nonce:signature:hostCertificateInfo:redirectCount:tcpHandshakeTimeMilliseconds:dnsResolveTimeMilliseconds:tlsHandshakeTimeMilliseconds:consecutiveConnectionFailureReason:onInterface:");
}

id objc_msgSend_sendConnectMessageWithToken_interface_activeInterval_presenceFlags_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_tcpHandshakeTimeMilliseconds_dnsResolveTimeMilliseconds_tlsHandshakeTimeMilliseconds_consecutiveConnectionFailureReason_withCompletion_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendConnectMessageWithToken:interface:activeInterval:presenceFlags:metadata:certificates:nonce:signature:hostCertificateInfo:redirectCount:tcpHandshakeTimeMilliseconds:dnsResolveTimeMilliseconds:tlsHandshakeTimeMilliseconds:consecutiveConnectionFailureReason:withCompletion:onInterface:");
}

id objc_msgSend_sendConnectMessageWithToken_presenceFlags_certificates_nonce_signature_hostCertificateInfo_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendConnectMessageWithToken:presenceFlags:certificates:nonce:signature:hostCertificateInfo:withCompletion:");
}

id objc_msgSend_sendConnectMessageWithToken_state_interface_activeInterval_presenceFlags_metadata_certificates_nonce_signature_redirectCount_withCompletion_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendConnectMessageWithToken:state:interface:activeInterval:presenceFlags:metadata:certificates:nonce:signature:redirectCount:withCompletion:onInterface:");
}

id objc_msgSend_sendConnectMessageWithToken_state_presenceFlags_hwVersion_swVersion_swBuild_certificates_nonce_signature_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendConnectMessageWithToken:state:presenceFlags:hwVersion:swVersion:swBuild:certificates:nonce:signature:withCompletion:");
}

id objc_msgSend_sendConnectMessageWithToken_state_presenceFlags_interface_activeInterval_metadata_certificates_nonce_signature_redirectCount_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendConnectMessageWithToken:state:presenceFlags:interface:activeInterval:metadata:certificates:nonce:signature:redirectCount:onInterface:");
}

id objc_msgSend_sendConnectMessageWithToken_state_presenceFlags_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendConnectMessageWithToken:state:presenceFlags:metadata:certificates:nonce:signature:hostCertificateInfo:redirectCount:onInterface:");
}

id objc_msgSend_sendConnectMessageWithToken_state_presenceFlags_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_withCompletion_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendConnectMessageWithToken:state:presenceFlags:metadata:certificates:nonce:signature:hostCertificateInfo:redirectCount:withCompletion:onInterface:");
}

id objc_msgSend_sendData_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendData:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendExpiredNonceWithServerTime_shouldRollToken_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendExpiredNonceWithServerTime:shouldRollToken:guid:environmentName:");
}

id objc_msgSend_sendFailuresToClient_pushTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFailuresToClient:pushTopic:");
}

id objc_msgSend_sendFilterMessageWithEnabledHashes_ignoredHashes_opportunisticHashes_nonWakingHashes_pausedHashes_token_version_expectsResponse_onInterface_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFilterMessageWithEnabledHashes:ignoredHashes:opportunisticHashes:nonWakingHashes:pausedHashes:token:version:expectsResponse:onInterface:withCompletion:");
}

id objc_msgSend_sendFilterMessageWithEnabledHashes_ignoredHashes_opportunisticHashes_nonWakingHashes_pausedHashes_token_version_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFilterMessageWithEnabledHashes:ignoredHashes:opportunisticHashes:nonWakingHashes:pausedHashes:token:version:onInterface:");
}

id objc_msgSend_sendFilterMessageWithEnabledTopicsByHash_ignoredTopicsByHash_opportunisticTopicsByHash_nonWakingTopicsByHash_pausedTopicsByHash_saltsByTopic_token_version_expectsResponse_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFilterMessageWithEnabledTopicsByHash:ignoredTopicsByHash:opportunisticTopicsByHash:nonWakingTopicsByHash:pausedTopicsByHash:saltsByTopic:token:version:expectsResponse:withCompletion:");
}

id objc_msgSend_sendFilterWithEnvironmentName_guid_enabledTopics_ignoredTopics_opportunisticTopics_nonWakingTopics_topicSalts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFilterWithEnvironmentName:guid:enabledTopics:ignoredTopics:opportunisticTopics:nonWakingTopics:topicSalts:");
}

id objc_msgSend_sendFlushMessageWithWantPaddingLength_paddingLength_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFlushMessageWithWantPaddingLength:paddingLength:onInterface:");
}

id objc_msgSend_sendFlushOnAllConnectionshWithPaddingLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFlushOnAllConnectionshWithPaddingLength:");
}

id objc_msgSend_sendFlushResponseMessageWithPaddingLength_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFlushResponseMessageWithPaddingLength:onInterface:");
}

id objc_msgSend_sendInactiveWithEnvironmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendInactiveWithEnvironmentName:guid:");
}

id objc_msgSend_sendInterface(void *a1, const char *a2, ...)
{
  return _[a1 sendInterface];
}

id objc_msgSend_sendInterfaceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sendInterfaceIdentifier];
}

id objc_msgSend_sendKeepAliveMessageWithMetadata_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendKeepAliveMessageWithMetadata:onInterface:");
}

id objc_msgSend_sendLargeMessageSize_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendLargeMessageSize:guid:environmentName:");
}

id objc_msgSend_sendMessage_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:guid:environmentName:");
}

id objc_msgSend_sendMessage_topicHash_lastRTT_token_ultraConstrainedAllowed_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:topicHash:lastRTT:token:ultraConstrainedAllowed:withCompletion:");
}

id objc_msgSend_sendMessageAcknowledgeMessageWithResponse_messageId_generation_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageAcknowledgeMessageWithResponse:messageId:generation:token:");
}

id objc_msgSend_sendMessageAcknowledgeMessageWithResponse_messageId_token_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageAcknowledgeMessageWithResponse:messageId:token:onInterface:");
}

id objc_msgSend_sendMessageSize_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageSize:guid:environmentName:");
}

id objc_msgSend_sendMessageTracingAckWithTopicHash_topic_tracingUUID_status_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageTracingAckWithTopicHash:topic:tracingUUID:status:token:");
}

id objc_msgSend_sendMessageTracingAckWithTopicHash_tracingUUID_status_token_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageTracingAckWithTopicHash:tracingUUID:status:token:onInterface:");
}

id objc_msgSend_sendMessageTracingStatus_topic_tracingUUID_token_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageTracingStatus:topic:tracingUUID:token:guid:environmentName:");
}

id objc_msgSend_sendMessageTransportAcknowledgeMessage(void *a1, const char *a2, ...)
{
  return _[a1 sendMessageTransportAcknowledgeMessage];
}

id objc_msgSend_sendMessageTransportAcknowledgeMessageOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageTransportAcknowledgeMessageOnInterface:");
}

id objc_msgSend_sendMessageWithTopicHash_identifier_payload_token_isPlistFormat_lastRTT_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageWithTopicHash:identifier:payload:token:isPlistFormat:lastRTT:onInterface:");
}

id objc_msgSend_sendMessageWithTopicHash_identifier_payload_token_isPlistFormat_lastRTT_onInterface_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageWithTopicHash:identifier:payload:token:isPlistFormat:lastRTT:onInterface:withCompletion:");
}

id objc_msgSend_sendPresenceTrackingRequestOnProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPresenceTrackingRequestOnProtocolConnection:");
}

id objc_msgSend_sendPresenceWithEnvironmentName_guid_token_hwVersion_swVersion_swBuild_certificate_nonce_signature_hostCertificateInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPresenceWithEnvironmentName:guid:token:hwVersion:swVersion:swBuild:certificate:nonce:signature:hostCertificateInfo:");
}

id objc_msgSend_sendProxyIsConnected_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProxyIsConnected:guid:environmentName:");
}

id objc_msgSend_sendProxyMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProxyMessage:");
}

id objc_msgSend_sendProxyMessage_forAPSMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProxyMessage:forAPSMessage:");
}

id objc_msgSend_sendPubSubChannelList_messageID_token_connectionType_environmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelList:messageID:token:connectionType:environmentName:guid:");
}

id objc_msgSend_sendPubSubChannelListRequest_environmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelListRequest:environmentName:guid:");
}

id objc_msgSend_sendPubSubChannelListRequestForConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelListRequestForConnectionType:");
}

id objc_msgSend_sendPubSubChannelListResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelListResponse:");
}

id objc_msgSend_sendPubSubChannelListResponse_environmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelListResponse:environmentName:guid:");
}

id objc_msgSend_sendPubSubChannelListWithMetadata_baseToken_messageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelListWithMetadata:baseToken:messageID:");
}

id objc_msgSend_sendPubSubChannelListWithMetadata_baseToken_messageID_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelListWithMetadata:baseToken:messageID:onInterface:");
}

id objc_msgSend_sendPubSubUpdateMessage_connectionType_environmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubUpdateMessage:connectionType:environmentName:guid:");
}

id objc_msgSend_sendPubSubUpdateMessage_forConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubUpdateMessage:forConnectionType:");
}

id objc_msgSend_sendPushToken_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPushToken:guid:environmentName:");
}

id objc_msgSend_sendRTT(void *a1, const char *a2, ...)
{
  return _[a1 sendRTT];
}

id objc_msgSend_sendReceivedPush_forConnectionType_generation_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendReceivedPush:forConnectionType:generation:guid:environmentName:");
}

id objc_msgSend_sendResponse_messageId_token_connectionType_generation_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendResponse:messageId:token:connectionType:generation:guid:environmentName:");
}

id objc_msgSend_sendRetried(void *a1, const char *a2, ...)
{
  return _[a1 sendRetried];
}

id objc_msgSend_sendReversePushResponse_messageGUID_messageId_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendReversePushResponse:messageGUID:messageId:guid:environmentName:");
}

id objc_msgSend_sendSetActiveState_forInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSetActiveState:forInterval:");
}

id objc_msgSend_sendSetActiveState_forInterval_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSetActiveState:forInterval:onInterface:");
}

id objc_msgSend_sendTaskControlMessageWithMetadata_messageId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTaskControlMessageWithMetadata:messageId:");
}

id objc_msgSend_sendTaskControlMessageWithMetadata_messageId_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTaskControlMessageWithMetadata:messageId:onInterface:");
}

id objc_msgSend_sendTimeoutTime(void *a1, const char *a2, ...)
{
  return _[a1 sendTimeoutTime];
}

id objc_msgSend_sendTokenGenerateMessageWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTokenGenerateMessageWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:guid:environmentName:");
}

id objc_msgSend_sendTokenGenerateMessageWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTokenGenerateMessageWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:onInterface:");
}

id objc_msgSend_sendTokenGenerateMessageWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTokenGenerateMessageWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:withCompletion:");
}

id objc_msgSend_sendTokenGenerateMessageWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_withCompletion_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTokenGenerateMessageWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:withCompletion:onInterface:");
}

id objc_msgSend_sent(void *a1, const char *a2, ...)
{
  return _[a1 sent];
}

id objc_msgSend_sentTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 sentTimestamp];
}

id objc_msgSend_serializeInfo_withToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeInfo:withToken:");
}

id objc_msgSend_serverAddressForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverAddressForInterface:");
}

id objc_msgSend_serverCount(void *a1, const char *a2, ...)
{
  return _[a1 serverCount];
}

id objc_msgSend_serverDisabledFilterOptimization(void *a1, const char *a2, ...)
{
  return _[a1 serverDisabledFilterOptimization];
}

id objc_msgSend_serverEnvironmentNamesForUserPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverEnvironmentNamesForUserPreferences:");
}

id objc_msgSend_serverGroup(void *a1, const char *a2, ...)
{
  return _[a1 serverGroup];
}

id objc_msgSend_serverHostname(void *a1, const char *a2, ...)
{
  return _[a1 serverHostname];
}

id objc_msgSend_serverHostnameForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverHostnameForInterface:");
}

id objc_msgSend_serverIPAddress(void *a1, const char *a2, ...)
{
  return _[a1 serverIPAddress];
}

id objc_msgSend_serverIPAddressForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverIPAddressForInterface:");
}

id objc_msgSend_serverPort(void *a1, const char *a2, ...)
{
  return _[a1 serverPort];
}

id objc_msgSend_serverPortForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverPortForInterface:");
}

id objc_msgSend_serverTimeInNanoSeconds(void *a1, const char *a2, ...)
{
  return _[a1 serverTimeInNanoSeconds];
}

id objc_msgSend_serverTimeTracker(void *a1, const char *a2, ...)
{
  return _[a1 serverTimeTracker];
}

id objc_msgSend_serverTrust(void *a1, const char *a2, ...)
{
  return _[a1 serverTrust];
}

id objc_msgSend_serversWithEnvironmentName_user_userPreferences_excludeServers_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serversWithEnvironmentName:user:userPreferences:excludeServers:delegate:");
}

id objc_msgSend_serversWithEnvironmentName_user_userPreferences_excludeServers_delegate_returnServers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serversWithEnvironmentName:user:userPreferences:excludeServers:delegate:returnServers:");
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_sessionWithConfiguration_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:delegate:delegateQueue:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAckReceived_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAckReceived:");
}

id objc_msgSend_setAckTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAckTimestamp:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setAllowedInterfaceConstraint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedInterfaceConstraint:");
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellularAccess:");
}

id objc_msgSend_setAlternatePort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlternatePort:");
}

id objc_msgSend_setAlwaysWantsInterfaceChangeCallbacks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlwaysWantsInterfaceChangeCallbacks:");
}

id objc_msgSend_setAppChannelSubscriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppChannelSubscriptions:");
}

id objc_msgSend_setAppId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppId:");
}

id objc_msgSend_setBaaIdentityRefreshedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBaaIdentityRefreshedBlock:");
}

id objc_msgSend_setBaseToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBaseToken:");
}

id objc_msgSend_setCachedIPAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedIPAddress:");
}

id objc_msgSend_setCachedServerCount_forDomain_ttl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedServerCount:forDomain:ttl:");
}

id objc_msgSend_setCanAttemptConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanAttemptConnection:");
}

id objc_msgSend_setCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancelled:");
}

id objc_msgSend_setCertificate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCertificate:");
}

id objc_msgSend_setCertificateValidated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCertificateValidated:");
}

id objc_msgSend_setCertificates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCertificates:");
}

id objc_msgSend_setChannelID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannelID:");
}

id objc_msgSend_setChannelId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannelId:");
}

id objc_msgSend_setChannelTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannelTopic:");
}

id objc_msgSend_setCheckpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCheckpoint:");
}

id objc_msgSend_setCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommand:");
}

id objc_msgSend_setConfigurationURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurationURL:");
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnection:");
}

id objc_msgSend_setConnectionFailure_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionFailure:onInterface:");
}

id objc_msgSend_setConnectionManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionManager:");
}

id objc_msgSend_setConnectionStatistics_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionStatistics:onInterface:");
}

id objc_msgSend_setConnectionTime_forInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionTime:forInterface:");
}

id objc_msgSend_setCorrelationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCorrelationIdentifier:");
}

id objc_msgSend_setCostDrivenDualChannelAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCostDrivenDualChannelAttempts:");
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCount:");
}

id objc_msgSend_setCourierConnectTimerPowerAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCourierConnectTimerPowerAssertion:");
}

id objc_msgSend_setCreate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreate:");
}

id objc_msgSend_setCriticalReliability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCriticalReliability:");
}

id objc_msgSend_setCurrentAddressFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentAddressFamily:");
}

id objc_msgSend_setCurrentFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentFilter:");
}

id objc_msgSend_setCurrentMessageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentMessageID:");
}

id objc_msgSend_setCurrentWiFiKeepAliveInterval_growAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentWiFiKeepAliveInterval:growAttempts:");
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateStyle:");
}

id objc_msgSend_setDebugHostname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDebugHostname:");
}

id objc_msgSend_setDefaultUserPersistentTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultUserPersistentTopics:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDesiredFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredFilter:");
}

id objc_msgSend_setDeviceNotFoundTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceNotFoundTimer:");
}

id objc_msgSend_setDisableCostDrivenDualChannelAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableCostDrivenDualChannelAttempts:");
}

id objc_msgSend_setDisableDualModePiggybackTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableDualModePiggybackTimer:");
}

id objc_msgSend_setDisableSystemWaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableSystemWaking:");
}

id objc_msgSend_setDisconnectReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisconnectReason:");
}

id objc_msgSend_setDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomain:");
}

id objc_msgSend_setEdgeDNS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEdgeDNS:");
}

id objc_msgSend_setEnableCriticalReliability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableCriticalReliability:");
}

id objc_msgSend_setEnableNonCellularConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableNonCellularConnections:");
}

id objc_msgSend_setEnableNonCellularOnConnectionManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableNonCellularOnConnectionManager:");
}

id objc_msgSend_setEnableStatusChangeNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableStatusChangeNotifications:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEnabledTopics_ignoredTopics_opportunisticTopics_nonWakingTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabledTopics:ignoredTopics:opportunisticTopics:nonWakingTopics:");
}

id objc_msgSend_setEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnvironment:");
}

id objc_msgSend_setEnvironmentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnvironmentType:");
}

id objc_msgSend_setErrorMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorMessage:");
}

id objc_msgSend_setExpensiveConditionsBackOffInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpensiveConditionsBackOffInterval:");
}

id objc_msgSend_setExpirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpirationDate:");
}

id objc_msgSend_setExpiryInterval_expirationBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpiryInterval:expirationBlock:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setFilterMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilterMode:");
}

id objc_msgSend_setFilterMode_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilterMode:onInterface:");
}

id objc_msgSend_setFireDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFireDate:");
}

id objc_msgSend_setFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlag:");
}

id objc_msgSend_setForceWWANInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceWWANInterface:");
}

id objc_msgSend_setFromStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFromStorage:");
}

id objc_msgSend_setGotNewToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGotNewToken:");
}

id objc_msgSend_setGuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGuid:");
}

id objc_msgSend_setHTTPShouldHandleCookies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPShouldHandleCookies:");
}

id objc_msgSend_setHandlingFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandlingFailure:");
}

id objc_msgSend_setHasActiveConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasActiveConnection:");
}

id objc_msgSend_setHasFilterChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasFilterChanged:");
}

id objc_msgSend_setHasTimedOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasTimedOut:");
}

id objc_msgSend_setHighQualityThresholdConnectedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighQualityThresholdConnectedTime:");
}

id objc_msgSend_setHostname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHostname:");
}

id objc_msgSend_setHwVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHwVersion:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdentifierToSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifierToSalt:");
}

id objc_msgSend_setIdentifiersToSaltsSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifiersToSaltsSystem:");
}

id objc_msgSend_setIdentifiersToSaltsUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifiersToSaltsUser:");
}

id objc_msgSend_setIdentityAvailabilityDidChangeBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentityAvailabilityDidChangeBlock:");
}

id objc_msgSend_setInTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInTransaction:");
}

id objc_msgSend_setIncomingInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncomingInterface:");
}

id objc_msgSend_setInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInfo:");
}

id objc_msgSend_setInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInput:");
}

id objc_msgSend_setInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterface:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIpAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIpAddress:");
}

id objc_msgSend_setIsConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnected:");
}

id objc_msgSend_setIsConnected_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnected:onInterface:");
}

id objc_msgSend_setIsConnected_onInterface_withDisconnectReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnected:onInterface:withDisconnectReason:");
}

id objc_msgSend_setIsConnecting_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnecting:onInterface:");
}

id objc_msgSend_setIsDualChannelAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsDualChannelAllowed:");
}

id objc_msgSend_setIsPackedFormat_maxEncoderTableSize_maxDecoderTableSize_interface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPackedFormat:maxEncoderTableSize:maxDecoderTableSize:interface:");
}

id objc_msgSend_setIsPowerEfficientToSendFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPowerEfficientToSendFilter:");
}

id objc_msgSend_setIsPublicTokenAcknowledged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPublicTokenAcknowledged:");
}

id objc_msgSend_setIsSuspended_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSuspended:onInterface:");
}

id objc_msgSend_setIsWoWEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsWoWEnabled:");
}

id objc_msgSend_setItemState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemState:");
}

id objc_msgSend_setKeepAliveConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepAliveConfiguration:");
}

id objc_msgSend_setKeepAliveGracePeriod_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepAliveGracePeriod:onInterface:");
}

id objc_msgSend_setKeepAliveOverrideOnInterface_interval_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepAliveOverrideOnInterface:interval:timeout:");
}

id objc_msgSend_setKeepAliveV2Supported_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepAliveV2Supported:onInterface:");
}

id objc_msgSend_setKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKey:");
}

id objc_msgSend_setLargeMessageSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLargeMessageSize:");
}

id objc_msgSend_setLastConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConnected:");
}

id objc_msgSend_setLastMessageFromStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastMessageFromStorage:");
}

id objc_msgSend_setLastMessageTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastMessageTime:");
}

id objc_msgSend_setLastMessageTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastMessageTopic:");
}

id objc_msgSend_setLastPresence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastPresence:");
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLength:");
}

id objc_msgSend_setListener_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListener:environment:");
}

id objc_msgSend_setLoadBalanced_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoadBalanced:");
}

id objc_msgSend_setLowQualityThresholdConnectedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLowQualityThresholdConnectedTime:");
}

id objc_msgSend_setMaxExpensiveConditionsConnectionAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxExpensiveConditionsConnectionAttempts:");
}

id objc_msgSend_setMaxLargeMessageSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxLargeMessageSize:");
}

id objc_msgSend_setMaxLargeMessageSize_forInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxLargeMessageSize:forInterface:");
}

id objc_msgSend_setMaxMessageSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxMessageSize:");
}

id objc_msgSend_setMaxMessageSize_forInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxMessageSize:forInterface:");
}

id objc_msgSend_setMessageId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageId:");
}

id objc_msgSend_setMessageReplayCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageReplayCount:");
}

id objc_msgSend_setMessageSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageSize:");
}

id objc_msgSend_setMinimumEarlyFireProportion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumEarlyFireProportion:");
}

id objc_msgSend_setMinimumIntervalFallbackEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumIntervalFallbackEnabled:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNetworkGuidanceString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkGuidanceString:");
}

id objc_msgSend_setNetworkServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkServiceType:");
}

id objc_msgSend_setNonce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNonce:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKey_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:onInterface:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOnlyAllowedStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnlyAllowedStyle:");
}

id objc_msgSend_setOriginator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginator:");
}

id objc_msgSend_setOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutput:");
}

id objc_msgSend_setPayloadLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadLength:");
}

id objc_msgSend_setPerAppToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerAppToken:");
}

id objc_msgSend_setPersistentTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentTopics:");
}

id objc_msgSend_setPiggybackDualChannelAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPiggybackDualChannelAttempts:");
}

id objc_msgSend_setPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPort:");
}

id objc_msgSend_setPowerOptimizationsForExpensiveNetworkingDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPowerOptimizationsForExpensiveNetworkingDisabled:");
}

id objc_msgSend_setPresenceCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresenceCompletion:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setProcessName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessName:");
}

id objc_msgSend_setProxyManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProxyManager:");
}

id objc_msgSend_setPublicToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicToken:");
}

id objc_msgSend_setPublicToken_fromServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicToken:fromServer:");
}

id objc_msgSend_setPublicToken_needsAck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicToken:needsAck:");
}

id objc_msgSend_setPushFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushFlags:");
}

id objc_msgSend_setPushType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushType:");
}

id objc_msgSend_setPushWakeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushWakeEnabled:");
}

id objc_msgSend_setPushWakeTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushWakeTopics:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setQueuedPresenceSend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueuedPresenceSend:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setRecordType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordType:");
}

id objc_msgSend_setRedirectHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRedirectHost:");
}

id objc_msgSend_setRedirectHostname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRedirectHostname:");
}

id objc_msgSend_setRefreshIdentityNextFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRefreshIdentityNextFetch:");
}

id objc_msgSend_setRemainsConnectedWhenWWANSuspends_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemainsConnectedWhenWWANSuspends:");
}

id objc_msgSend_setResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponder:");
}

id objc_msgSend_setRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryCount:");
}

id objc_msgSend_setSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecond:");
}

id objc_msgSend_setSecureHandshakeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecureHandshakeEnabled:");
}

id objc_msgSend_setSendInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendInterface:");
}

id objc_msgSend_setSendInterfaceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendInterfaceIdentifier:");
}

id objc_msgSend_setSendRTT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendRTT:");
}

id objc_msgSend_setSendRetried_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendRetried:");
}

id objc_msgSend_setSent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSent:");
}

id objc_msgSend_setSentTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSentTimestamp:");
}

id objc_msgSend_setSerialItemInParameters_commandID_itemID_itemData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSerialItemInParameters:commandID:itemID:itemData:");
}

id objc_msgSend_setSerialNumberInParameters_commandID_itemID_Integer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSerialNumberInParameters:commandID:itemID:Integer:");
}

id objc_msgSend_setServerCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerCount:");
}

id objc_msgSend_setServerGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerGroup:");
}

id objc_msgSend_setServerStatsExpectedKeepAlive_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerStatsExpectedKeepAlive:onInterface:");
}

id objc_msgSend_setServerStatsMaxKeepAlive_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerStatsMaxKeepAlive:onInterface:");
}

id objc_msgSend_setServerStatsMinKeepAlive_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerStatsMinKeepAlive:onInterface:");
}

id objc_msgSend_setServerSupportsDualMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerSupportsDualMode:");
}

id objc_msgSend_setSharedURLCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharedURLCache:");
}

id objc_msgSend_setShouldReportLastReversePushRTT_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldReportLastReversePushRTT:onInterface:");
}

id objc_msgSend_setSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSignature:");
}

id objc_msgSend_setState_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:onInterface:");
}

id objc_msgSend_setSubscriptionChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscriptionChannels:");
}

id objc_msgSend_setSubscriptionRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscriptionRequests:");
}

id objc_msgSend_setSubscriptionsType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscriptionsType:");
}

id objc_msgSend_setSwBuild_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwBuild:");
}

id objc_msgSend_setSwVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwVersion:");
}

id objc_msgSend_setSystemToken_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemToken:forUser:");
}

id objc_msgSend_setTLSMinimumSupportedProtocolVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTLSMinimumSupportedProtocolVersion:");
}

id objc_msgSend_setTaskId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaskId:");
}

id objc_msgSend_setTaskStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaskStatus:");
}

id objc_msgSend_setTimedOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimedOut:");
}

id objc_msgSend_setTimeoutSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutSource:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:");
}

id objc_msgSend_setToken_forEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:forEnvironment:");
}

id objc_msgSend_setToken_forInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:forInfo:");
}

id objc_msgSend_setToken_forInfo_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:forInfo:user:");
}

id objc_msgSend_setToken_withDomain_appSpecificIdentifier_tokenServiceSuffix_user_topic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:withDomain:appSpecificIdentifier:tokenServiceSuffix:user:topic:");
}

id objc_msgSend_setTokenName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTokenName:");
}

id objc_msgSend_setTokenTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTokenTopics:");
}

id objc_msgSend_setTolerance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTolerance:");
}

id objc_msgSend_setTopicsChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopicsChanged:");
}

id objc_msgSend_setTracingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTracingEnabled:");
}

id objc_msgSend_setTracingUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTracingUUID:");
}

id objc_msgSend_setTrackActivityPresence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackActivityPresence:");
}

id objc_msgSend_setTrackingState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackingState:");
}

id objc_msgSend_setTtlBegin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTtlBegin:");
}

id objc_msgSend_setTtlEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTtlEnd:");
}

id objc_msgSend_setUltraConstrainedEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUltraConstrainedEnabled:");
}

id objc_msgSend_setUltraConstrainedTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUltraConstrainedTopics:");
}

id objc_msgSend_setUnsubscriptionChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnsubscriptionChannels:");
}

id objc_msgSend_setUseAlternatePort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseAlternatePort:");
}

id objc_msgSend_setUseInteractivePowerAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseInteractivePowerAssertion:");
}

id objc_msgSend_setUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUser:");
}

id objc_msgSend_setUserState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserState:");
}

id objc_msgSend_setUsingCachedIPAddress_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsingCachedIPAddress:onInterface:");
}

id objc_msgSend_setUsingServerStatsAggressively_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsingServerStatsAggressively:onInterface:");
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersion:");
}

id objc_msgSend_setWatchesSystemLockState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWatchesSystemLockState:");
}

id objc_msgSend_setWifiKeepAliveEarlyFireConstantInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiKeepAliveEarlyFireConstantInterval:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_set_socketStreamProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_socketStreamProperties:");
}

id objc_msgSend_set_tlsTrustPinningPolicyName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_tlsTrustPinningPolicyName:");
}

id objc_msgSend_setupForUser_dependencies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupForUser:dependencies:");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedInstanceForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstanceForIdentifier:");
}

id objc_msgSend_sharedInterface(void *a1, const char *a2, ...)
{
  return _[a1 sharedInterface];
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_shiftBucketsBasedOnNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shiftBucketsBasedOnNow:");
}

id objc_msgSend_shouldAssertWiFi(void *a1, const char *a2, ...)
{
  return _[a1 shouldAssertWiFi];
}

id objc_msgSend_shouldClientScheduleReconnectDueToFailureOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldClientScheduleReconnectDueToFailureOnInterface:");
}

id objc_msgSend_shouldConnectOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldConnectOnInterface:");
}

id objc_msgSend_shouldDelayNextReconnect(void *a1, const char *a2, ...)
{
  return _[a1 shouldDelayNextReconnect];
}

id objc_msgSend_shouldDropPubSubMessageWithData_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDropPubSubMessageWithData:forTopic:");
}

id objc_msgSend_shouldForceShortTimeouts(void *a1, const char *a2, ...)
{
  return _[a1 shouldForceShortTimeouts];
}

id objc_msgSend_shouldHandleIncomingPush_forProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHandleIncomingPush:forProtocolConnection:");
}

id objc_msgSend_shouldOnlySendFilterOnPreferredInterface(void *a1, const char *a2, ...)
{
  return _[a1 shouldOnlySendFilterOnPreferredInterface];
}

id objc_msgSend_shouldPowerLogEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPowerLogEvent:");
}

id objc_msgSend_shouldRun(void *a1, const char *a2, ...)
{
  return _[a1 shouldRun];
}

id objc_msgSend_shouldUseDualMode(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseDualMode];
}

id objc_msgSend_shouldUseInternet(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseInternet];
}

id objc_msgSend_shouldUseInternetDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseInternetDidChange:");
}

id objc_msgSend_signature(void *a1, const char *a2, ...)
{
  return _[a1 signature];
}

id objc_msgSend_signatureWithDomain_type_subType_detectedProcess_triggerThresholdValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signatureWithDomain:type:subType:detectedProcess:triggerThresholdValues:");
}

id objc_msgSend_simulatorConnectionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 simulatorConnectionEnabled];
}

id objc_msgSend_snapshotWithSignature_duration_event_payload_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotWithSignature:duration:event:payload:reply:");
}

id objc_msgSend_softwareBuild(void *a1, const char *a2, ...)
{
  return _[a1 softwareBuild];
}

id objc_msgSend_softwareVersion(void *a1, const char *a2, ...)
{
  return _[a1 softwareVersion];
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sortedLoggedInUsers(void *a1, const char *a2, ...)
{
  return _[a1 sortedLoggedInUsers];
}

id objc_msgSend_sslErrorFromErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sslErrorFromErrorCode:");
}

id objc_msgSend_startSecureConnection(void *a1, const char *a2, ...)
{
  return _[a1 startSecureConnection];
}

id objc_msgSend_startup(void *a1, const char *a2, ...)
{
  return _[a1 startup];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stateByConnectionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 stateByConnectionIdentifier];
}

id objc_msgSend_stateByInterfaceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 stateByInterfaceIdentifier];
}

id objc_msgSend_stateForProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateForProtocolConnection:");
}

id objc_msgSend_stateListeners(void *a1, const char *a2, ...)
{
  return _[a1 stateListeners];
}

id objc_msgSend_stateOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateOnInterface:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusPrinter(void *a1, const char *a2, ...)
{
  return _[a1 statusPrinter];
}

id objc_msgSend_stopAndResetManager(void *a1, const char *a2, ...)
{
  return _[a1 stopAndResetManager];
}

id objc_msgSend_stopAndResetManagerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAndResetManagerOnInterface:");
}

id objc_msgSend_stopManager(void *a1, const char *a2, ...)
{
  return _[a1 stopManager];
}

id objc_msgSend_stopManagerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopManagerOnInterface:");
}

id objc_msgSend_stopManagers(void *a1, const char *a2, ...)
{
  return _[a1 stopManagers];
}

id objc_msgSend_storageName(void *a1, const char *a2, ...)
{
  return _[a1 storageName];
}

id objc_msgSend_storeChannel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeChannel:");
}

id objc_msgSend_storeIncomingMessage_environment_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeIncomingMessage:environment:completionBlock:");
}

id objc_msgSend_stream(void *a1, const char *a2, ...)
{
  return _[a1 stream];
}

id objc_msgSend_stream_handleEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stream:handleEvent:");
}

id objc_msgSend_streamError(void *a1, const char *a2, ...)
{
  return _[a1 streamError];
}

id objc_msgSend_streamForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "streamForInterface:");
}

id objc_msgSend_streamStatus(void *a1, const char *a2, ...)
{
  return _[a1 streamStatus];
}

id objc_msgSend_streamTaskWithHostName_port_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "streamTaskWithHostName:port:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByExpandingTildeInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByExpandingTildeInPath];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByResolvingSymlinksInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByResolvingSymlinksInPath];
}

id objc_msgSend_stringByStandardizingPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByStandardizingPath];
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strongToWeakObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToWeakObjectsMapTable];
}

id objc_msgSend_subState(void *a1, const char *a2, ...)
{
  return _[a1 subState];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_subscribeToChannels_forTopic_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribeToChannels:forTopic:token:");
}

id objc_msgSend_subscriptionChannelResponseAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionChannelResponseAtIndex:");
}

id objc_msgSend_subscriptionChannelResponses(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionChannelResponses];
}

id objc_msgSend_subscriptionChannelResponsesCount(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionChannelResponsesCount];
}

id objc_msgSend_subscriptionChannels(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionChannels];
}

id objc_msgSend_subscriptionChannelsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionChannelsAtIndex:");
}

id objc_msgSend_subscriptionChannelsCount(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionChannelsCount];
}

id objc_msgSend_subscriptionRequests(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionRequests];
}

id objc_msgSend_subscriptionType(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionType];
}

id objc_msgSend_subscriptionUpdates(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionUpdates];
}

id objc_msgSend_subscriptionUpdatesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionUpdatesAtIndex:");
}

id objc_msgSend_subscriptionUpdatesCount(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionUpdatesCount];
}

id objc_msgSend_subscriptionsStatus(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionsStatus];
}

id objc_msgSend_suffixForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suffixForInfo:");
}

id objc_msgSend_sumOfBucketType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sumOfBucketType:");
}

id objc_msgSend_suppressedTTRTopics(void *a1, const char *a2, ...)
{
  return _[a1 suppressedTTRTopics];
}

id objc_msgSend_suspendToggleDailyLimit(void *a1, const char *a2, ...)
{
  return _[a1 suspendToggleDailyLimit];
}

id objc_msgSend_suspendToggleHourlyLimit(void *a1, const char *a2, ...)
{
  return _[a1 suspendToggleHourlyLimit];
}

id objc_msgSend_swBuild(void *a1, const char *a2, ...)
{
  return _[a1 swBuild];
}

id objc_msgSend_swVersion(void *a1, const char *a2, ...)
{
  return _[a1 swVersion];
}

id objc_msgSend_systemMonitor(void *a1, const char *a2, ...)
{
  return _[a1 systemMonitor];
}

id objc_msgSend_systemPath(void *a1, const char *a2, ...)
{
  return _[a1 systemPath];
}

id objc_msgSend_systemTokenForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemTokenForUser:");
}

id objc_msgSend_systemTokenStorage(void *a1, const char *a2, ...)
{
  return _[a1 systemTokenStorage];
}

id objc_msgSend_systemUserWithUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemUserWithUserID:");
}

id objc_msgSend_taskId(void *a1, const char *a2, ...)
{
  return _[a1 taskId];
}

id objc_msgSend_taskManager(void *a1, const char *a2, ...)
{
  return _[a1 taskManager];
}

id objc_msgSend_taskStatus(void *a1, const char *a2, ...)
{
  return _[a1 taskStatus];
}

id objc_msgSend_taskTransactionMetrics(void *a1, const char *a2, ...)
{
  return _[a1 taskTransactionMetrics];
}

id objc_msgSend_taskType(void *a1, const char *a2, ...)
{
  return _[a1 taskType];
}

id objc_msgSend_tcpHandshakeTimeMillisecondsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpHandshakeTimeMillisecondsOnInterface:");
}

id objc_msgSend_tcpInfoDescription(void *a1, const char *a2, ...)
{
  return _[a1 tcpInfoDescription];
}

id objc_msgSend_tcpStream_dataReceived_isWakingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpStream:dataReceived:isWakingMessage:");
}

id objc_msgSend_tcpStream_errorOccured_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpStream:errorOccured:");
}

id objc_msgSend_tcpStream_hasDeterminedServerHostname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpStream:hasDeterminedServerHostname:");
}

id objc_msgSend_tcpStream_receivedServerBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpStream:receivedServerBag:");
}

id objc_msgSend_tcpStreamClass(void *a1, const char *a2, ...)
{
  return _[a1 tcpStreamClass];
}

id objc_msgSend_tcpStreamEndEncountered_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpStreamEndEncountered:withReason:");
}

id objc_msgSend_tcpStreamHasConnected_context_enabledPackedFormat_maxEncoderTableSize_maxDecoderTableSize_secureHandshakeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpStreamHasConnected:context:enabledPackedFormat:maxEncoderTableSize:maxDecoderTableSize:secureHandshakeEnabled:");
}

id objc_msgSend_telemetry(void *a1, const char *a2, ...)
{
  return _[a1 telemetry];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeLimit(void *a1, const char *a2, ...)
{
  return _[a1 timeLimit];
}

id objc_msgSend_timeout(void *a1, const char *a2, ...)
{
  return _[a1 timeout];
}

id objc_msgSend_timeoutSource(void *a1, const char *a2, ...)
{
  return _[a1 timeoutSource];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_timestampForTopic_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestampForTopic:token:");
}

id objc_msgSend_tlsHandshakeTimeMillisecondsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tlsHandshakeTimeMillisecondsOnInterface:");
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _[a1 token];
}

id objc_msgSend_tokenForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenForEnvironment:");
}

id objc_msgSend_tokenForInfo_user_persistedInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenForInfo:user:persistedInfo:");
}

id objc_msgSend_tokenGenerateResponseQueue(void *a1, const char *a2, ...)
{
  return _[a1 tokenGenerateResponseQueue];
}

id objc_msgSend_tokenInfoArrayForTopic_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenInfoArrayForTopic:user:");
}

id objc_msgSend_tokenName(void *a1, const char *a2, ...)
{
  return _[a1 tokenName];
}

id objc_msgSend_tokenTopics(void *a1, const char *a2, ...)
{
  return _[a1 tokenTopics];
}

id objc_msgSend_tokensForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokensForTopic:");
}

id objc_msgSend_tokensForTopic_user_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokensForTopic:user:error:");
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _[a1 topic];
}

id objc_msgSend_topicAttributesWithFilter_darkWakeEnabled_pushWakeEnabled_criticalWakeEnabled_ultraConstrainedEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicAttributesWithFilter:darkWakeEnabled:pushWakeEnabled:criticalWakeEnabled:ultraConstrainedEnabled:");
}

id objc_msgSend_topicChosenByPolicyFromTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicChosenByPolicyFromTopics:");
}

id objc_msgSend_topicGroupChange(void *a1, const char *a2, ...)
{
  return _[a1 topicGroupChange];
}

id objc_msgSend_topicHash(void *a1, const char *a2, ...)
{
  return _[a1 topicHash];
}

id objc_msgSend_topicHashForTopic_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicHashForTopic:user:");
}

id objc_msgSend_topicManager(void *a1, const char *a2, ...)
{
  return _[a1 topicManager];
}

id objc_msgSend_topicManagerRequestToSendFilter_change_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicManagerRequestToSendFilter:change:");
}

id objc_msgSend_topicName(void *a1, const char *a2, ...)
{
  return _[a1 topicName];
}

id objc_msgSend_topicSaltStore(void *a1, const char *a2, ...)
{
  return _[a1 topicSaltStore];
}

id objc_msgSend_topicStatesForConnectionServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicStatesForConnectionServer:");
}

id objc_msgSend_topics(void *a1, const char *a2, ...)
{
  return _[a1 topics];
}

id objc_msgSend_topicsChanged(void *a1, const char *a2, ...)
{
  return _[a1 topicsChanged];
}

id objc_msgSend_topicsToSaltsWithUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicsToSaltsWithUser:");
}

id objc_msgSend_total(void *a1, const char *a2, ...)
{
  return _[a1 total];
}

id objc_msgSend_tracingUUID(void *a1, const char *a2, ...)
{
  return _[a1 tracingUUID];
}

id objc_msgSend_trackActivityPresence(void *a1, const char *a2, ...)
{
  return _[a1 trackActivityPresence];
}

id objc_msgSend_trackingState(void *a1, const char *a2, ...)
{
  return _[a1 trackingState];
}

id objc_msgSend_transferOwnershipOfPendingMessagesToHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transferOwnershipOfPendingMessagesToHandler:");
}

id objc_msgSend_triggerCriticalReliability(void *a1, const char *a2, ...)
{
  return _[a1 triggerCriticalReliability];
}

id objc_msgSend_triggerKeepaliveWakeupEvent_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerKeepaliveWakeupEvent:completion:");
}

id objc_msgSend_triggeringTopic(void *a1, const char *a2, ...)
{
  return _[a1 triggeringTopic];
}

id objc_msgSend_ttl(void *a1, const char *a2, ...)
{
  return _[a1 ttl];
}

id objc_msgSend_ttlBegin(void *a1, const char *a2, ...)
{
  return _[a1 ttlBegin];
}

id objc_msgSend_ttlCollection(void *a1, const char *a2, ...)
{
  return _[a1 ttlCollection];
}

id objc_msgSend_ttlCollection_itemsDidExpire_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ttlCollection:itemsDidExpire:");
}

id objc_msgSend_ttlCollection_itemsDidExpire_withStates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ttlCollection:itemsDidExpire:withStates:");
}

id objc_msgSend_ttlEnd(void *a1, const char *a2, ...)
{
  return _[a1 ttlEnd];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_uid(void *a1, const char *a2, ...)
{
  return _[a1 uid];
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_unknown(void *a1, const char *a2, ...)
{
  return _[a1 unknown];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongValue];
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedShortValue];
}

id objc_msgSend_unsubscribeFromChannels_forTopic_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsubscribeFromChannels:forTopic:token:");
}

id objc_msgSend_unsubscriptionChannelResponseAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsubscriptionChannelResponseAtIndex:");
}

id objc_msgSend_unsubscriptionChannelResponses(void *a1, const char *a2, ...)
{
  return _[a1 unsubscriptionChannelResponses];
}

id objc_msgSend_unsubscriptionChannelResponsesCount(void *a1, const char *a2, ...)
{
  return _[a1 unsubscriptionChannelResponsesCount];
}

id objc_msgSend_unsubscriptionChannels(void *a1, const char *a2, ...)
{
  return _[a1 unsubscriptionChannels];
}

id objc_msgSend_unsubscriptionChannelsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsubscriptionChannelsAtIndex:");
}

id objc_msgSend_unsubscriptionChannelsCount(void *a1, const char *a2, ...)
{
  return _[a1 unsubscriptionChannelsCount];
}

id objc_msgSend_updateChannel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateChannel:");
}

id objc_msgSend_updateChannelForIncomingMessageWithData_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateChannelForIncomingMessageWithData:forTopic:");
}

id objc_msgSend_updateExpirationTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateExpirationTime:");
}

id objc_msgSend_updateForReceivedConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateForReceivedConfig:");
}

id objc_msgSend_updateKeepAliveInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateKeepAliveInterval:");
}

id objc_msgSend_updateSafeToSendFilterForce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSafeToSendFilterForce:");
}

id objc_msgSend_updateServerTimeWithTimeInMilliseconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateServerTimeWithTimeInMilliseconds:");
}

id objc_msgSend_urlPrefix(void *a1, const char *a2, ...)
{
  return _[a1 urlPrefix];
}

id objc_msgSend_urlTokenPrefix(void *a1, const char *a2, ...)
{
  return _[a1 urlTokenPrefix];
}

id objc_msgSend_useServerKeepAliveStatsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useServerKeepAliveStatsOnInterface:");
}

id objc_msgSend_user(void *a1, const char *a2, ...)
{
  return _[a1 user];
}

id objc_msgSend_userAppIDManager(void *a1, const char *a2, ...)
{
  return _[a1 userAppIDManager];
}

id objc_msgSend_userCourier_hasReasonToConnectChangedTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userCourier:hasReasonToConnectChangedTo:");
}

id objc_msgSend_userForConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userForConnection:");
}

id objc_msgSend_userID(void *a1, const char *a2, ...)
{
  return _[a1 userID];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userName(void *a1, const char *a2, ...)
{
  return _[a1 userName];
}

id objc_msgSend_userPreferences(void *a1, const char *a2, ...)
{
  return _[a1 userPreferences];
}

id objc_msgSend_userState(void *a1, const char *a2, ...)
{
  return _[a1 userState];
}

id objc_msgSend_userTracker(void *a1, const char *a2, ...)
{
  return _[a1 userTracker];
}

id objc_msgSend_usingCachedIPAddressOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usingCachedIPAddressOnInterface:");
}

id objc_msgSend_usingServerStats(void *a1, const char *a2, ...)
{
  return _[a1 usingServerStats];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_vapidPublicKey(void *a1, const char *a2, ...)
{
  return _[a1 vapidPublicKey];
}

id objc_msgSend_verboseDescription(void *a1, const char *a2, ...)
{
  return _[a1 verboseDescription];
}

id objc_msgSend_versionToSendFor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "versionToSendFor:error:");
}

id objc_msgSend_wakeStateManager(void *a1, const char *a2, ...)
{
  return _[a1 wakeStateManager];
}

id objc_msgSend_wantsCriticalReliability(void *a1, const char *a2, ...)
{
  return _[a1 wantsCriticalReliability];
}

id objc_msgSend_wasCancelled(void *a1, const char *a2, ...)
{
  return _[a1 wasCancelled];
}

id objc_msgSend_wasFromStorage(void *a1, const char *a2, ...)
{
  return _[a1 wasFromStorage];
}

id objc_msgSend_wasInDarkWake(void *a1, const char *a2, ...)
{
  return _[a1 wasInDarkWake];
}

id objc_msgSend_wasInFullWake(void *a1, const char *a2, ...)
{
  return _[a1 wasInFullWake];
}

id objc_msgSend_wasLastMessageFromStorage(void *a1, const char *a2, ...)
{
  return _[a1 wasLastMessageFromStorage];
}

id objc_msgSend_wasSent(void *a1, const char *a2, ...)
{
  return _[a1 wasSent];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_weakRefWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakRefWithObject:");
}

id objc_msgSend_wifiKeepAliveEarlyFireConstantInterval(void *a1, const char *a2, ...)
{
  return _[a1 wifiKeepAliveEarlyFireConstantInterval];
}

id objc_msgSend_wifiManager(void *a1, const char *a2, ...)
{
  return _[a1 wifiManager];
}

id objc_msgSend_willBeAbleToConnect(void *a1, const char *a2, ...)
{
  return _[a1 willBeAbleToConnect];
}

id objc_msgSend_write_maxLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "write:maxLength:");
}

id objc_msgSend_writeDataInBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeDataInBackground:");
}

id objc_msgSend_writeDataInBackground_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeDataInBackground:onInterface:");
}