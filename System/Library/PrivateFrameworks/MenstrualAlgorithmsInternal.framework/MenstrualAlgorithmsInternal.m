void sub_22F10FEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t *a44)
{
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a44);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&a9);

  _Unwind_Resume(a1);
}

void sub_22F11074C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

uint64_t ha_sensitive_logging_is_enabled()
{
  v0 = [MEMORY[0x263EFFA40] standardUserDefaults];
  uint64_t v1 = [v0 BOOLForKey:@"HKShowSensitiveLogItems"];

  return v1;
}

void sub_22F1108C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22F110C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_22F11104C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  a9.super_class = (Class)MAIDiagnosticLogger;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

id ha_get_log()
{
  if (ha_get_log_onceToken != -1) {
    dispatch_once(&ha_get_log_onceToken, &__block_literal_global);
  }
  v0 = (void *)ha_get_log_log;
  return v0;
}

void sub_22F1114F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HealthAlgorithms::deviationInput(void *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = a1;
  *a2 = 0;
  a2[4] = 0;
  a2[8] = 0;
  a2[12] = 0;
  a2[16] = 0;
  a2[20] = 0;
  a2[24] = 0;
  a2[28] = 0;
  a2[32] = 0;
  a2[36] = 0;
  a2[40] = 0;
  a2[44] = 0;
  a2[48] = 0;
  a2[52] = 0;
  a2[56] = 0;
  a2[60] = 0;
  if (v3)
  {
    id v28 = v3;
    v4 = [v3 julianDayMinAnalysisWindowStartIrregular];
    uint64_t v6 = HealthAlgorithms::julianDayMinAnalysisWindow(v4, v5);
    *(_DWORD *)a2 = v6;
    a2[4] = BYTE4(v6);

    v7 = [v28 julianDayMinAnalysisWindowEndIrregular];
    uint64_t v9 = HealthAlgorithms::julianDayMinAnalysisWindow(v7, v8);
    *((_DWORD *)a2 + 8) = v9;
    a2[36] = BYTE4(v9);

    v10 = [v28 julianDayMinAnalysisWindowStartInfrequent];
    uint64_t v12 = HealthAlgorithms::julianDayMinAnalysisWindow(v10, v11);
    *((_DWORD *)a2 + 2) = v12;
    a2[12] = BYTE4(v12);

    v13 = [v28 julianDayMinAnalysisWindowEndInfrequent];
    uint64_t v15 = HealthAlgorithms::julianDayMinAnalysisWindow(v13, v14);
    *((_DWORD *)a2 + 10) = v15;
    a2[44] = BYTE4(v15);

    v16 = [v28 julianDayMinAnalysisWindowStartProlonged];
    uint64_t v18 = HealthAlgorithms::julianDayMinAnalysisWindow(v16, v17);
    *((_DWORD *)a2 + 4) = v18;
    a2[20] = BYTE4(v18);

    v19 = [v28 julianDayMinAnalysisWindowEndProlonged];
    uint64_t v21 = HealthAlgorithms::julianDayMinAnalysisWindow(v19, v20);
    *((_DWORD *)a2 + 12) = v21;
    a2[52] = BYTE4(v21);

    v22 = [v28 julianDayMinAnalysisWindowStartSpotting];
    uint64_t v24 = HealthAlgorithms::julianDayMinAnalysisWindow(v22, v23);
    *((_DWORD *)a2 + 6) = v24;
    a2[28] = BYTE4(v24);

    v25 = [v28 julianDayMinAnalysisWindowEndSpotting];
    uint64_t v27 = HealthAlgorithms::julianDayMinAnalysisWindow(v25, v26);
    *((_DWORD *)a2 + 14) = v27;
    a2[60] = BYTE4(v27);

    id v3 = v28;
  }
}

void sub_22F111734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t HealthAlgorithms::julianDayMinAnalysisWindow(HealthAlgorithms *this, NSNumber *a2)
{
  v2 = this;
  id v3 = v2;
  if (v2)
  {
    int v4 = [(HealthAlgorithms *)v2 unsignedIntValue];
    unsigned int v5 = v4 & 0xFFFFFF00;
    int v6 = v4;
    uint64_t v7 = 0x100000000;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 0;
    unsigned int v5 = 0;
  }

  return v7 | v5 | v6;
}

void sub_22F1117EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22F1118E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HealthAlgorithms::PhaseCondenser>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<int,std::array<short,9ul>>,std::__map_value_compare<int,std::__value_type<int,std::array<short,9ul>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::array<short,9ul>>>>::destroy(v2, *(void **)(v2 + 8));
    JUMPOUT(0x230FB1C40);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<int,std::array<short,9ul>>,std::__map_value_compare<int,std::__value_type<int,std::array<short,9ul>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::array<short,9ul>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[7] = **a4;
    *((_WORD *)v11 + 24) = 0;
    *((void *)v11 + 4) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unsigned int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      id v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unsigned int v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              id v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            id v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            id v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          id v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

Nightingale::ngt_HistoricalAnalyzer *std::unique_ptr<Nightingale::ngt_HistoricalAnalyzer>::reset[abi:nn180100](Nightingale::ngt_HistoricalAnalyzer **a1, Nightingale::ngt_HistoricalAnalyzer *a2)
{
  result = *a1;
  *a1 = a2;
  if (result)
  {
    Nightingale::ngt_HistoricalAnalyzer::~ngt_HistoricalAnalyzer(result);
    JUMPOUT(0x230FB1C40);
  }
  return result;
}

Nightingale::ngt_DayStreamProcessor *std::unique_ptr<Nightingale::ngt_DayStreamProcessor>::reset[abi:nn180100](Nightingale::ngt_DayStreamProcessor **a1, Nightingale::ngt_DayStreamProcessor *a2)
{
  result = *a1;
  *a1 = a2;
  if (result)
  {
    Nightingale::ngt_DayStreamProcessor::~ngt_DayStreamProcessor(result);
    JUMPOUT(0x230FB1C40);
  }
  return result;
}

uint64_t **HealthAlgorithms::PhaseCondenser::begin_phase(uint64_t **a1, unsigned int a2, int a3)
{
  int v5 = a3;
  int v6 = &v5;
  result = std::__tree<std::__value_type<int,std::array<short,9ul>>,std::__map_value_compare<int,std::__value_type<int,std::array<short,9ul>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::array<short,9ul>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, &v5, (uint64_t)&std::piecewise_construct, &v6);
  if (a2 >= 9) {
    abort();
  }
  ++*((_WORD *)result + a2 + 16);
  return result;
}

Nightingale::ngt_HistoricalAnalyzer *Nightingale::ngt_HistoricalAnalyzer::ngt_HistoricalAnalyzer(Nightingale::ngt_HistoricalAnalyzer *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (ha_sensitive_logging_is_enabled())
  {
    log = ha_get_log();
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      char v5 = 6;
      strcpy((char *)__p, "4.11.5");
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = __p;
      _os_log_impl(&dword_22F10E000, log, OS_LOG_TYPE_DEFAULT, "\"HistoricalAnalyzer\": \"%s\",\n", buf, 0xCu);
      if (v5 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return this;
}

uint64_t Nightingale::ngt_DayStreamProcessor::ngt_DayStreamProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 132) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 156) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 164) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 172) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 168) = v5;
  *(_OWORD *)(a1 + 152) = v4;
  *(_OWORD *)(a1 + 136) = v3;
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 232) = v8;
  *(_OWORD *)(a1 + 216) = v7;
  *(_OWORD *)(a1 + 200) = v6;
  if (ha_sensitive_logging_is_enabled())
  {
    log = ha_get_log();
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      char v12 = 6;
      strcpy((char *)__p, "4.11.5");
      *(_DWORD *)buf = 136315138;
      v14 = __p;
      _os_log_impl(&dword_22F10E000, log, OS_LOG_TYPE_DEFAULT, "\"DayStreamProcessor\": \"%s\",\n", buf, 0xCu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return a1;
}

void Nightingale::ngt_DayStreamProcessor::~ngt_DayStreamProcessor(Nightingale::ngt_DayStreamProcessor *this)
{
  uint64_t v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 32);
  if (v3)
  {
    *((void *)this + 33) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 12);
  if (v4)
  {
    *((void *)this + 13) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)this + 9);
  if (v5)
  {
    *((void *)this + 10) = v5;
    operator delete(v5);
  }
  long long v6 = (void *)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 7) = v6;
    operator delete(v6);
  }
  long long v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
  long long v8 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v8;
    operator delete(v8);
  }
}

void Nightingale::ngt_DayStreamProcessor::appendDay(void **a1, long long *a2)
{
  long long v3 = (char *)*a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v2 - (unsigned char *)*a1) >> 2);
  if (v4 <= 0x2AC5)
  {
    unint64_t v9 = (unint64_t)a1[2];
    uint64_t v7 = (uint64_t)(a1 + 2);
    unint64_t v8 = v9;
    if ((unint64_t)v2 >= v9)
    {
      unint64_t v14 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v8 - (void)v3) >> 2);
      if (2 * v14 <= v4 + 1) {
        uint64_t v15 = v4 + 1;
      }
      else {
        uint64_t v15 = 2 * v14;
      }
      if (v14 >= 0x222222222222222) {
        unint64_t v16 = 0x444444444444444;
      }
      else {
        unint64_t v16 = v15;
      }
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_DayInput>>(v7, v16);
      uint64_t v18 = &v17[60 * v4];
      v20 = &v17[60 * v19];
      long long v21 = *a2;
      long long v22 = a2[1];
      long long v23 = a2[2];
      *(_OWORD *)(v18 + 44) = *(long long *)((char *)a2 + 44);
      *((_OWORD *)v18 + 1) = v22;
      *((_OWORD *)v18 + 2) = v23;
      *(_OWORD *)uint64_t v18 = v21;
      uint64_t v13 = v18 + 60;
      v25 = (char *)*a1;
      uint64_t v24 = (char *)a1[1];
      if (v24 != *a1)
      {
        do
        {
          long long v26 = *(_OWORD *)(v24 - 60);
          long long v27 = *(_OWORD *)(v24 - 44);
          long long v28 = *(_OWORD *)(v24 - 28);
          *((_OWORD *)v18 - 1) = *((_OWORD *)v24 - 1);
          *(_OWORD *)(v18 - 28) = v28;
          *(_OWORD *)(v18 - 44) = v27;
          *(_OWORD *)(v18 - 60) = v26;
          v18 -= 60;
          v24 -= 60;
        }
        while (v24 != v25);
        uint64_t v24 = (char *)*a1;
      }
      *a1 = v18;
      a1[1] = v13;
      a1[2] = v20;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      long long v10 = *a2;
      long long v11 = a2[1];
      long long v12 = a2[2];
      *(_OWORD *)((char *)v2 + 44) = *(long long *)((char *)a2 + 44);
      v2[1] = v11;
      v2[2] = v12;
      _OWORD *v2 = v10;
      uint64_t v13 = (char *)v2 + 60;
    }
    a1[1] = v13;
  }
}

void Nightingale::ngt_DayStreamProcessor::appendPhaseSet(std::vector<int> *a1, uint64_t a2, int a3)
{
  std::vector<int>::pointer begin = a1[1].__begin_;
  std::vector<int>::pointer end = a1[1].__end_;
  long long v5 = a1 + 1;
  uint64_t v7 = (char *)end - (char *)begin;
  if ((unint64_t)((char *)end - (char *)begin) <= 0xAB17)
  {
    uint64_t p_end_cap = (uint64_t)&a1[1].__end_cap_;
    unint64_t value = (unint64_t)a1[1].__end_cap_.__value_;
    if ((unint64_t)end >= value)
    {
      uint64_t v13 = v7 >> 2;
      uint64_t v14 = value - (void)begin;
      if (v14 >> 1 <= (unint64_t)((v7 >> 2) + 1)) {
        uint64_t v15 = v13 + 1;
      }
      else {
        uint64_t v15 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(p_end_cap, v16);
      std::vector<int>::pointer v18 = a1[1].__begin_;
      std::vector<int>::pointer v19 = a1[1].__end_;
      v20 = (int *)&v17[4 * v13];
      long long v22 = (int *)&v17[4 * v21];
      int *v20 = a3;
      long long v12 = v20 + 1;
      while (v19 != v18)
      {
        int v23 = *--v19;
        *--v20 = v23;
      }
      a1[1].__begin_ = v20;
      a1[1].__end_ = v12;
      a1[1].__end_cap_.__value_ = v22;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *std::vector<int>::pointer end = a3;
      long long v12 = end + 1;
    }
    unint64_t v24 = (unint64_t)a1[2].__end_cap_.__value_;
    a1[1].__end_ = v12;
    v25 = a1[2].__end_;
    if ((unint64_t)v25 >= v24)
    {
      std::vector<int>::pointer v27 = a1[2].__begin_;
      uint64_t v28 = ((char *)v25 - (char *)v27) >> 3;
      if ((unint64_t)(v28 + 1) >> 61) {
        abort();
      }
      uint64_t v29 = v24 - (void)v27;
      uint64_t v30 = v29 >> 2;
      if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
        uint64_t v30 = v28 + 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31) {
        v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)&a1[2].__end_cap_, v31);
      }
      else {
        v32 = 0;
      }
      v33 = &v32[8 * v28];
      v34 = (int *)&v32[8 * v31];
      *(void *)v33 = a2;
      long long v26 = (int *)(v33 + 8);
      std::vector<int>::pointer v36 = a1[2].__begin_;
      v35 = (char *)a1[2].__end_;
      if (v35 != (char *)v36)
      {
        do
        {
          uint64_t v37 = *((void *)v35 - 1);
          v35 -= 8;
          *((void *)v33 - 1) = v37;
          v33 -= 8;
        }
        while (v35 != (char *)v36);
        v35 = (char *)a1[2].__begin_;
      }
      a1[2].__begin_ = (std::vector<int>::pointer)v33;
      a1[2].__end_ = v26;
      a1[2].__end_cap_.__value_ = v34;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      void *v25 = a2;
      long long v26 = (int *)(v25 + 1);
    }
    a1[2].__end_ = v26;
  }
  std::vector<int>::vector(&__p, v5);
  std::vector<Nightingale::PhaseSet>::vector(&v41, (uint64_t)&a1[2]);
  v38 = a1[3].__begin_;
  if (v38)
  {
    a1[3].__end_ = v38;
    operator delete(v38);
  }
  a1[3] = __p;
  memset(&__p, 0, sizeof(__p));
  std::vector<int>::pointer v39 = a1[4].__begin_;
  if (v39)
  {
    a1[4].__end_ = v39;
    operator delete(v39);
    std::vector<int>::pointer v39 = __p.__begin_;
  }
  *(_OWORD *)&a1[4].__begin_ = v41;
  a1[4].__end_cap_.__value_ = v42;
  v42 = 0;
  long long v41 = 0uLL;
  if (v39)
  {
    __p.__end_ = v39;
    operator delete(v39);
  }
}

void Nightingale::ngt_DayStreamProcessor::analyze(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v186 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a4 + 52) = 0;
  *(unsigned char *)(a4 + 56) = 0;
  *(unsigned char *)(a4 + 60) = 0;
  *(unsigned char *)(a4 + 64) = 0;
  *(unsigned char *)(a4 + 68) = 0;
  *(unsigned char *)(a4 + 72) = 0;
  *(unsigned char *)(a4 + 76) = 0;
  *(unsigned char *)(a4 + 80) = 0;
  *(unsigned char *)(a4 + 84) = 0;
  *(unsigned char *)(a4 + 88) = 0;
  *(unsigned char *)(a4 + 92) = 0;
  *(unsigned char *)(a4 + 96) = 0;
  *(unsigned char *)(a4 + 100) = 0;
  *(unsigned char *)(a4 + 104) = 0;
  *(unsigned char *)(a4 + 108) = 0;
  *(unsigned char *)(a4 + 112) = 0;
  *(unsigned char *)(a4 + 116) = 0;
  *(unsigned char *)(a4 + 120) = 0;
  *(unsigned char *)(a4 + 256) = 0;
  *(unsigned char *)(a4 + 261) = 0;
  *(unsigned char *)(a4 + 264) = 0;
  *(unsigned char *)(a4 + 496) = 0;
  *(unsigned char *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  uint64_t is_enabled = ha_sensitive_logging_is_enabled();
  if (is_enabled)
  {
    log = ha_get_log();
    uint64_t is_enabled = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
    if (is_enabled) {
      Nightingale::ngt_DayStreamProcessor::analyze();
    }
  }
  Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc(is_enabled, (uint64_t *)a1, (void *)(a1 + 72), a1 + 120);
  *(unsigned char *)(a1 + 164) = BYTE4(a2);
  *(_DWORD *)(a1 + 160) = a2;
  Nightingale::uiLogProcessor::uiLogProcessor((uint64_t)v184, *(void *)(a1 + 168));
  Nightingale::uiLogProcessor::extractCycles(v184, a1, (uint64_t *)(a1 + 72), a1 + 120, (uint64_t)&v180);
  uint64_t v10 = a1 + 256;
  long long v11 = *(char **)(a1 + 256);
  *(void *)(a1 + 264) = v11;
  *(void *)(a1 + 288) = *(void *)(a1 + 280);
  if (v180 != v181 && v182 && *(unsigned char *)(a1 + 156))
  {
    int v12 = a3;
    uint64_t v13 = v185;
    memset(v174, 0, sizeof(v174));
    std::vector<Nightingale::cycleInfo>::__init_with_size[abi:nn180100]<Nightingale::cycleInfo*,Nightingale::cycleInfo*>(v174, (uint64_t)v180, (uint64_t)v181, 0xAAAAAAAAAAAAAAABLL * (((char *)v181 - (char *)v180) >> 5));
    Nightingale::ngt_DayStreamProcessor::compute_stats((uint64_t)v174, a1 + 120, (uint64_t *)(a1 + 72), v183, &v175);
    v120 = (void **)v174;
    std::vector<Nightingale::cycleInfo>::__destroy_vector::operator()[abi:nn180100](&v120);
    BOOL v41 = Nightingale::ngt_DayStreamProcessor::inactiveDetect(v14, (uint64_t)&v180, (uint64_t *)(a1 + 72), v175, *(void *)(a1 + 152));
    int v164 = 0;
    __int16 v165 = 0;
    memset(&v185[2], 255, 20);
    int v162 = 0;
    __int16 v163 = 0;
    int v160 = 0;
    __int16 v161 = 0;
    int v158 = 0;
    __int16 v159 = 0;
    if (*(unsigned char *)(a1 + 248))
    {
      Nightingale::ngt_deviationAnalyzer::ngt_deviationAnalyzer((Nightingale::ngt_deviationAnalyzer *)&v108);
      int v15 = v12;
      Nightingale::ngt_deviationAnalyzer::deviation_process((uint64_t)&v108, a1 + 120, a1, (uint64_t)&v180, (uint64_t *)(a1 + 72), v12, (uint64_t)&v120, v38);
      __int16 v172 = *(_WORD *)((char *)&v120 + 1);
      char v173 = BYTE3(v120);
      int v50 = HIDWORD(v120);
      int v51 = v121;
      LOBYTE(v40) = (_BYTE)v120;
      BYTE4(v40) = v122;
      __int16 v170 = v123;
      char v171 = v124;
      int v52 = v125;
      int v53 = v126;
      char v39 = v127;
      __int16 v168 = v128;
      char v169 = v129;
      int v54 = v130;
      int v55 = v131;
      char v61 = v132;
      char v167 = v134;
      __int16 v166 = v133;
      int v56 = v135;
      int v57 = v136;
      __int16 v165 = v138;
      int v164 = v137;
      *(void *)&v185[14] = *(void *)&v139[14];
      *(_OWORD *)v185 = *(_OWORD *)v139;
      __int16 v163 = v141;
      int v162 = v140;
      LOWORD(v13) = v142;
      int v48 = v143;
      int v49 = v144;
      int v60 = v145;
      __int16 v161 = v147;
      int v160 = v146;
      int v46 = v149;
      int v47 = v150;
      __int16 v159 = v153;
      int v158 = v152;
      __int16 v42 = v154;
      __int16 v43 = v148;
      int v44 = v155;
      int v45 = v156;
      int v58 = v151;
      int v59 = v157;
      Nightingale::ngt_deviationAnalyzer::~ngt_deviationAnalyzer((Nightingale::ngt_deviationAnalyzer *)&v108);
    }
    else
    {
      char v39 = 0;
      uint64_t v40 = 0;
      int v44 = -1;
      int v45 = -1;
      int v58 = -1;
      int v59 = -1;
      int v46 = -1;
      int v47 = -1;
      int v60 = -1;
      char v61 = 0;
      int v48 = -1;
      int v49 = -1;
      int v56 = -1;
      int v57 = -1;
      int v54 = -1;
      int v55 = -1;
      int v52 = -1;
      int v53 = -1;
      int v50 = -1;
      int v51 = -1;
      int v15 = v12;
    }
    Nightingale::ngtProjector::ngtProjector(&v120, a1, a1 + 120, &v180);
    BYTE8(v108) = 0;
    LOBYTE(v109) = 0;
    BYTE8(v109) = 0;
    LOBYTE(v110) = 0;
    BYTE8(v110) = 0;
    BYTE12(v110) = 0;
    LOBYTE(v111) = 0;
    BYTE4(v111) = 0;
    BYTE8(v111) = 0;
    LOBYTE(v112) = 0;
    BYTE8(v112) = 0;
    LOBYTE(v113) = 0;
    BYTE8(v113) = 0;
    BYTE12(v113) = 0;
    LOBYTE(v114) = 0;
    BYTE4(v114) = 0;
    BYTE8(v114) = 0;
    BYTE12(v114) = 0;
    v115[0] = 0;
    v115[4] = 0;
    *(_WORD *)&v115[8] = 0;
    *(void *)&v115[12] = -4294967291;
    *(_DWORD *)&v115[20] = 0;
    *(void *)&v115[24] = -1;
    *(void *)&long long v116 = -1;
    BYTE8(v116) = 0;
    BYTE12(v116) = 0;
    DWORD1(v117) = -1082130432;
    *((void *)&v117 + 1) = -1;
    *(void *)v118 = -1;
    __asm { FMOV            V0.4S, #-1.0 }
    *(_OWORD *)&v118[8] = _Q0;
    __asm { FMOV            V0.2S, #-1.0 }
    *(void *)&v118[24] = _Q0;
    *(_WORD *)v119 = 0;
    v119[2] = 0;
    *(_OWORD *)&v119[4] = xmmword_22F165D50;
    *(_DWORD *)&v119[20] = 9;
    Nightingale::ngtProjector::projector((Nightingale::ngtProjector *)&v120, (uint64_t *)(a1 + 256), (uint64_t *)(a1 + 280), (uint64_t)v184, (uint64_t *)(a1 + 72), v15, (uint64_t)&v108);
    Nightingale::uiLogProcessor::print_anUILog((uint64_t)v184, &v180);
    int v22 = *(unsigned __int8 *)(a4 + 496);
    long long v23 = *(_OWORD *)v119;
    *(_OWORD *)(a4 + 456) = *(_OWORD *)&v118[16];
    *(_OWORD *)(a4 + 472) = v23;
    *(void *)(a4 + 488) = *(void *)&v119[16];
    long long v24 = v116;
    *(_OWORD *)(a4 + 392) = *(_OWORD *)&v115[16];
    *(_OWORD *)(a4 + 408) = v24;
    long long v25 = *(_OWORD *)v118;
    *(_OWORD *)(a4 + 424) = v117;
    *(_OWORD *)(a4 + 440) = v25;
    long long v26 = v113;
    *(_OWORD *)(a4 + 328) = v112;
    *(_OWORD *)(a4 + 344) = v26;
    long long v27 = *(_OWORD *)v115;
    *(_OWORD *)(a4 + 360) = v114;
    *(_OWORD *)(a4 + 376) = v27;
    long long v28 = v109;
    *(_OWORD *)(a4 + 264) = v108;
    *(_OWORD *)(a4 + 280) = v28;
    long long v29 = v111;
    *(_OWORD *)(a4 + 296) = v110;
    *(_OWORD *)(a4 + 312) = v29;
    if (!v22) {
      *(unsigned char *)(a4 + 496) = 1;
    }
    long long v105 = v177;
    long long v106 = v178;
    uint64_t v107 = v179;
    long long v103 = v175;
    long long v104 = v176;
    Nightingale::ngt_DayStreamProcessor::printStats();
    char v62 = v40;
    __int16 v63 = v172;
    char v64 = v173;
    int v65 = v50;
    int v66 = v51;
    char v67 = BYTE4(v40);
    __int16 v68 = v170;
    char v69 = v171;
    int v70 = v52;
    int v71 = v53;
    char v72 = v39;
    char v74 = v169;
    __int16 v73 = v168;
    int v75 = v54;
    int v76 = v55;
    char v77 = v61;
    char v79 = v167;
    __int16 v78 = v166;
    int v80 = v56;
    int v81 = v57;
    __int16 v83 = v165;
    int v82 = v164;
    *(void *)&v84[14] = *(void *)&v185[14];
    *(_OWORD *)v84 = *(_OWORD *)v185;
    __int16 v86 = v163;
    int v85 = v162;
    __int16 v87 = (__int16)v13;
    int v88 = v48;
    int v89 = v49;
    __int16 v92 = v161;
    int v90 = v60;
    int v91 = v160;
    __int16 v93 = v43;
    int v94 = v46;
    int v95 = v47;
    __int16 v98 = v159;
    int v96 = v58;
    int v97 = v158;
    __int16 v99 = v42;
    int v100 = v44;
    int v101 = v45;
    int v102 = v59;
    Nightingale::ngt_DayStreamProcessor::printDeviations(v30, (uint64_t)&v62);
    if (ha_sensitive_logging_is_enabled())
    {
      unint64_t v31 = ha_get_log();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
        Nightingale::ngt_DayStreamProcessor::analyze();
      }
    }
    *(unsigned char *)(a4 + 260) = v183;
    if (v10 != a4) {
      std::vector<Nightingale::ngt_Prediction>::__assign_with_size[abi:nn180100]<Nightingale::ngt_Prediction*,Nightingale::ngt_Prediction*>((char *)a4, *(char **)(a1 + 256), *(void *)(a1 + 264), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 264) - *(void *)(a1 + 256)) >> 3));
    }
    if (a4 + 24 != a1 + 280) {
      std::vector<Nightingale::ngt_Prediction>::__assign_with_size[abi:nn180100]<Nightingale::ngt_Prediction*,Nightingale::ngt_Prediction*>((char *)(a4 + 24), *(char **)(a1 + 280), *(void *)(a1 + 288), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3));
    }
    long long v32 = v178;
    *(_OWORD *)(a4 + 80) = v177;
    *(_OWORD *)(a4 + 96) = v32;
    *(void *)(a4 + 112) = v179;
    long long v33 = v176;
    *(_OWORD *)(a4 + 48) = v175;
    *(_OWORD *)(a4 + 64) = v33;
    if (*(unsigned char *)(a1 + 248))
    {
      int v34 = *(unsigned __int8 *)(a4 + 256);
      *(unsigned char *)(a4 + 120) = v40;
      *(_WORD *)(a4 + 121) = v172;
      *(unsigned char *)(a4 + 123) = v173;
      *(_DWORD *)(a4 + 124) = v50;
      *(_DWORD *)(a4 + 128) = v51;
      *(unsigned char *)(a4 + 132) = BYTE4(v40);
      *(_WORD *)(a4 + 133) = v170;
      *(unsigned char *)(a4 + 135) = v171;
      *(_DWORD *)(a4 + 136) = v52;
      *(_DWORD *)(a4 + 140) = v53;
      *(unsigned char *)(a4 + 144) = v39;
      __int16 v35 = v168;
      *(unsigned char *)(a4 + 147) = v169;
      *(_WORD *)(a4 + 145) = v35;
      *(_DWORD *)(a4 + 148) = v54;
      *(_DWORD *)(a4 + 152) = v55;
      *(unsigned char *)(a4 + 156) = v61;
      *(_WORD *)(a4 + 157) = v166;
      *(unsigned char *)(a4 + 159) = v167;
      *(_DWORD *)(a4 + 160) = v56;
      *(_DWORD *)(a4 + 164) = v57;
      *(_DWORD *)(a4 + 168) = v164;
      *(_WORD *)(a4 + 172) = v165;
      *(void *)(a4 + 188) = *(void *)&v185[14];
      *(_OWORD *)(a4 + 174) = *(_OWORD *)v185;
      *(_WORD *)(a4 + 200) = v163;
      *(_DWORD *)(a4 + 196) = v162;
      *(_WORD *)(a4 + 202) = (_WORD)v13;
      *(_DWORD *)(a4 + 204) = v48;
      *(_DWORD *)(a4 + 208) = v49;
      *(_WORD *)(a4 + 220) = v161;
      int v36 = v160;
      *(_DWORD *)(a4 + 212) = v60;
      *(_DWORD *)(a4 + 216) = v36;
      *(_WORD *)(a4 + 222) = v43;
      *(_DWORD *)(a4 + 224) = v46;
      *(_DWORD *)(a4 + 228) = v47;
      int v37 = v158;
      *(_WORD *)(a4 + 240) = v159;
      *(_DWORD *)(a4 + 232) = v58;
      *(_DWORD *)(a4 + 236) = v37;
      *(_WORD *)(a4 + 242) = v42;
      *(_DWORD *)(a4 + 244) = v44;
      *(_DWORD *)(a4 + 248) = v45;
      *(_DWORD *)(a4 + 252) = v59;
      if (!v34) {
        *(unsigned char *)(a4 + 256) = 1;
      }
    }
    *(unsigned char *)(a4 + 261) = v41;
    Nightingale::ngtProjector::~ngtProjector((Nightingale::ngtProjector *)&v120);
  }
  else
  {
    *(unsigned char *)(a4 + 260) = 0;
    if (v10 != a4) {
      std::vector<Nightingale::ngt_Prediction>::__assign_with_size[abi:nn180100]<Nightingale::ngt_Prediction*,Nightingale::ngt_Prediction*>((char *)a4, v11, (uint64_t)v11, 0);
    }
    if (a4 + 24 != a1 + 280) {
      std::vector<Nightingale::ngt_Prediction>::__assign_with_size[abi:nn180100]<Nightingale::ngt_Prediction*,Nightingale::ngt_Prediction*>((char *)(a4 + 24), *(char **)(a1 + 280), *(void *)(a1 + 288), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3));
    }
    if (ha_sensitive_logging_is_enabled())
    {
      unint64_t v16 = ha_get_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        Nightingale::ngt_DayStreamProcessor::analyze();
      }
    }
  }
  v120 = (void **)&v180;
  std::vector<Nightingale::cycleInfo>::__destroy_vector::operator()[abi:nn180100](&v120);
  Nightingale::uiLogProcessor::~uiLogProcessor((Nightingale::uiLogProcessor *)v184);
}

void Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  if (ha_sensitive_logging_is_enabled())
  {
    log = ha_get_log();
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc();
    }
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  int is_enabled = ha_sensitive_logging_is_enabled();
  if (v6 != v7)
  {
    int v76 = a3;
    if (is_enabled)
    {
      unint64_t v9 = ha_get_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc();
      }
    }
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = v11 - *a2;
    if (v12 == 60)
    {
LABEL_9:
      int v14 = *(_DWORD *)(v11 - 60);
      int v13 = *(_DWORD *)(v11 - 56);
      char v15 = *(unsigned char *)(v11 - 52);
      int v16 = *(_DWORD *)(v11 - 48);
      float v17 = *(float *)(v11 - 44);
      int v18 = *(unsigned __int8 *)(v11 - 40);
      float v19 = *(float *)(v11 - 36);
      int v20 = *(unsigned __int8 *)(v11 - 32);
      int v21 = *(unsigned __int8 *)(v11 - 24);
      int v82 = *(_DWORD *)(v11 - 28);
      int v85 = *(_DWORD *)(v11 - 20);
      int v22 = *(unsigned __int8 *)(v11 - 16);
      unsigned __int8 v80 = *(unsigned char *)(v11 - 12);
      float v23 = *(float *)(v11 - 8);
      int v24 = *(unsigned __int8 *)(v11 - 4);
      if (ha_sensitive_logging_is_enabled())
      {
        long long v25 = ha_get_log();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)__int16 v87 = v14;
          *(_WORD *)&v87[4] = 1024;
          *(_DWORD *)&v87[6] = v13;
          *(_WORD *)&v87[10] = 1024;
          *(_DWORD *)&v87[12] = v15 & 1;
          *(_WORD *)&v87[16] = 1024;
          *(_DWORD *)int v88 = v16;
          _os_log_debug_impl(&dword_22F10E000, v25, OS_LOG_TYPE_DEBUG, "\t{\"jDay\": %d, \"flow\": %d, \"spotting\": %d, \"opk\": %d, ", buf, 0x1Au);
        }
      }
      if (ha_sensitive_logging_is_enabled())
      {
        long long v26 = ha_get_log();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          double v71 = v17;
          double v72 = -1.0;
          if (!v18) {
            double v71 = -1.0;
          }
          if (v20) {
            double v72 = v19;
          }
          *(_DWORD *)buf = 134218752;
          *(double *)__int16 v87 = v71;
          int v73 = v82;
          if (!v21) {
            int v73 = -1;
          }
          *(_WORD *)&v87[8] = 2048;
          *(double *)&v87[10] = v72;
          *(_WORD *)int v88 = 1024;
          *(_DWORD *)&v88[2] = v73;
          int v74 = v85;
          if (!v22) {
            int v74 = -1;
          }
          __int16 v89 = 1024;
          int v90 = v74;
          _os_log_debug_impl(&dword_22F10E000, v26, OS_LOG_TYPE_DEBUG, "\"sensor\": {\"aHR\": %5.2f, \"sHR\": %5.2f, \"aHRCnt\": %d, \"sHRCnt\": %d, ", buf, 0x22u);
        }
      }
      int v27 = ha_sensitive_logging_is_enabled();
      if (v24)
      {
        a3 = v76;
        if (v27)
        {
          long long v28 = ha_get_log();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
            Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc(v80, v28, v23);
          }
        }
      }
      else
      {
        a3 = v76;
        if (v27)
        {
          int v54 = ha_get_log();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG)) {
            Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc(v54);
          }
        }
      }
      if (ha_sensitive_logging_is_enabled())
      {
        int v55 = ha_get_log();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG)) {
          Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc();
        }
      }
      goto LABEL_53;
    }
    unint64_t v30 = 0;
    unint64_t v31 = 0xEEEEEEEEEEEEEEEFLL * (v12 >> 2);
    uint64_t v32 = 56;
    while (1)
    {
      if (v31 <= v30) {
LABEL_94:
      }
        abort();
      long long v33 = (unsigned __int8 *)(v10 + v32);
      int v35 = *((_DWORD *)v33 - 14);
      int v34 = *((_DWORD *)v33 - 13);
      char v36 = *(v33 - 48);
      int v37 = *((_DWORD *)v33 - 11);
      float v38 = *((float *)v33 - 10);
      int v39 = *(v33 - 36);
      float v40 = *((float *)v33 - 8);
      int v41 = *(v33 - 28);
      int v81 = *((_DWORD *)v33 - 6);
      int v83 = *((_DWORD *)v33 - 4);
      int v78 = *(v33 - 20);
      int v79 = *(v33 - 12);
      int v77 = *(v33 - 8);
      float v42 = *((float *)v33 - 1);
      int v43 = *v33;
      if (ha_sensitive_logging_is_enabled())
      {
        int v44 = ha_get_log();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)__int16 v87 = v35;
          *(_WORD *)&v87[4] = 1024;
          *(_DWORD *)&v87[6] = v34;
          *(_WORD *)&v87[10] = 1024;
          *(_DWORD *)&v87[12] = v36 & 1;
          *(_WORD *)&v87[16] = 1024;
          *(_DWORD *)int v88 = v37;
          _os_log_debug_impl(&dword_22F10E000, v44, OS_LOG_TYPE_DEBUG, "\t{\"jDay\": %d, \"flow\": %d, \"spotting\": %d, \"opk\": %d, ", buf, 0x1Au);
        }
      }
      if (ha_sensitive_logging_is_enabled())
      {
        int v45 = ha_get_log();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        {
          double v50 = v38;
          if (!v39) {
            double v50 = -1.0;
          }
          double v51 = v40;
          if (!v41) {
            double v51 = -1.0;
          }
          *(_DWORD *)buf = 134218752;
          *(double *)__int16 v87 = v50;
          int v52 = v81;
          if (!v78) {
            int v52 = -1;
          }
          *(_WORD *)&v87[8] = 2048;
          *(double *)&v87[10] = v51;
          *(_WORD *)int v88 = 1024;
          *(_DWORD *)&v88[2] = v52;
          int v53 = v83;
          if (!v79) {
            int v53 = -1;
          }
          __int16 v89 = 1024;
          int v90 = v53;
          _os_log_debug_impl(&dword_22F10E000, v45, OS_LOG_TYPE_DEBUG, "\"sensor\": {\"aHR\": %5.2f, \"sHR\": %5.2f, \"aHRCnt\": %d, \"sHRCnt\": %d,", buf, 0x22u);
        }
      }
      int v46 = ha_sensitive_logging_is_enabled();
      if (v43)
      {
        if (!v46) {
          goto LABEL_34;
        }
        int v47 = ha_get_log();
        if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_34;
        }
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)__int16 v87 = v77;
        *(_WORD *)&v87[4] = 2048;
        *(double *)&v87[6] = v42;
        int v48 = v47;
      }
      else
      {
        if (!v46) {
          goto LABEL_34;
        }
        int v49 = ha_get_log();
        if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_34;
        }
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)__int16 v87 = -1;
        *(_WORD *)&v87[4] = 2048;
        *(void *)&v87[6] = 0xBFF0000000000000;
        int v48 = v49;
      }
      _os_log_debug_impl(&dword_22F10E000, v48, OS_LOG_TYPE_DEBUG, "\"wTmp\": {\"watchID\": %d, \"tp\": %5.2f}}},\n", buf, 0x12u);
LABEL_34:
      ++v30;
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      unint64_t v31 = 0xEEEEEEEEEEEEEEEFLL * ((v11 - *a2) >> 2);
      v32 += 60;
      if (v31 - 1 <= v30) {
        goto LABEL_9;
      }
    }
  }
  if (is_enabled)
  {
    long long v29 = ha_get_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc();
    }
  }
LABEL_53:
  uint64_t v56 = *a3;
  uint64_t v57 = a3[1];
  int v58 = ha_sensitive_logging_is_enabled();
  if (v56 == v57)
  {
    if (v58)
    {
      char v62 = ha_get_log();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG)) {
        Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc();
      }
    }
  }
  else
  {
    if (v58)
    {
      int v59 = ha_get_log();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG)) {
        Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc();
      }
    }
    if (a3[1] - *a3 != 4)
    {
      for (unint64_t i = 0; ((uint64_t)(a3[1] - *a3) >> 2) - 1 > i; ++i)
      {
        if (ha_sensitive_logging_is_enabled())
        {
          char v67 = ha_get_log();
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
          {
            if (i >= (uint64_t)(a3[1] - *a3) >> 2) {
              goto LABEL_94;
            }
            uint64_t v68 = a3[3];
            if (i >= (a3[4] - v68) >> 3) {
              goto LABEL_94;
            }
            int v69 = *(_DWORD *)(*a3 + 4 * i);
            int v70 = (unsigned __int16)*(void *)(v68 + 8 * i);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)__int16 v87 = v69;
            *(_WORD *)&v87[4] = 1024;
            *(_DWORD *)&v87[6] = v70;
            _os_log_debug_impl(&dword_22F10E000, v67, OS_LOG_TYPE_DEBUG, "\t{\"jDay\": %d, \"phase\": %d}, \n", buf, 0xEu);
          }
        }
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      int v60 = ha_get_log();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG)) {
        Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc(a3 + 1, (uint64_t)a3, v60);
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      char v61 = ha_get_log();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG)) {
        Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc();
      }
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    __int16 v63 = ha_get_log();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc(a4, v63);
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    char v64 = ha_get_log();
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    int v65 = ha_get_log();
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc();
    }
  }
}

void Nightingale::ngt_DayStreamProcessor::compute_stats(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, char a4@<W4>, unsigned char *a5@<X8>)
{
  *a5 = 0;
  a5[4] = 0;
  a5[8] = 0;
  a5[12] = 0;
  a5[16] = 0;
  a5[20] = 0;
  a5[24] = 0;
  a5[28] = 0;
  a5[32] = 0;
  a5[36] = 0;
  a5[40] = 0;
  a5[44] = 0;
  a5[48] = 0;
  a5[52] = 0;
  a5[56] = 0;
  a5[60] = 0;
  a5[64] = 0;
  a5[68] = 0;
  int v85 = 0;
  __int16 v86 = 0;
  uint64_t v87 = 0;
  if (!*(unsigned char *)(a2 + 36)) {
    return;
  }
  uint64_t v7 = *(_DWORD **)a1;
  unint64_t v8 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 == v8) {
    return;
  }
  int v10 = *(_DWORD *)(a2 + 32);
  if (v10 < 365 || v10 < *(v8 - 24)) {
    return;
  }
  uint64_t v12 = 0;
  int v13 = 0;
  std::vector<int> __p = 0;
  int v83 = 0;
  v84 = 0;
  do
  {
    if (!*(unsigned char *)(a2 + 36))
    {
      uint64_t v71 = std::__throw_bad_optional_access[abi:nn180100]();
      Nightingale::ngt_DayStreamProcessor::inactiveDetect(v71);
      return;
    }
    if ((*(_DWORD *)(a2 + 32) - *v7) <= 0x16C)
    {
      if (v12 >= v84)
      {
        char v15 = (char *)__p;
        uint64_t v16 = (v12 - (unsigned char *)__p) >> 2;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
LABEL_101:
        }
          abort();
        uint64_t v18 = v84 - (unsigned char *)__p;
        if ((v84 - (unsigned char *)__p) >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          int v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v84, v19);
          char v15 = (char *)__p;
          uint64_t v12 = v83;
        }
        else
        {
          int v20 = 0;
        }
        int v21 = &v20[4 * v16];
        *(_DWORD *)int v21 = v13;
        int v14 = v21 + 4;
        while (v12 != v15)
        {
          int v22 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v21 - 1) = v22;
          v21 -= 4;
        }
        std::vector<int> __p = v21;
        int v83 = v14;
        v84 = &v20[4 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v12 = v13;
        int v14 = v12 + 4;
      }
      int v83 = v14;
      uint64_t v12 = v14;
    }
    ++v13;
    v7 += 24;
  }
  while (v7 != v8);
  float v23 = (char *)__p;
  if (__p != v12)
  {
    int v24 = *(_DWORD **)a1;
    uint64_t v25 = *(void *)(a1 + 8);
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *(void *)a1) >> 5);
    int v27 = (int *)__p;
    if (v26 - 1 == *((_DWORD *)v12 - 1))
    {
      *((_DWORD *)a5 + 16) = *(_DWORD *)(v25 - 96);
      a5[68] = 1;
      int v27 = (int *)v23;
    }
    while (1)
    {
      unint64_t v28 = *v27;
      if (v26 <= v28) {
        goto LABEL_101;
      }
      if (LOBYTE(v24[24 * (int)v28 + 6])) {
        break;
      }
      if (++v27 == (int *)v12) {
        goto LABEL_34;
      }
    }
    *((_DWORD *)a5 + 14) = v24[24 * (int)v28];
    a5[60] = 1;
LABEL_34:
    int v79 = 0;
    unsigned __int8 v80 = 0;
    int v81 = 0;
    int v76 = 0;
    int v77 = 0;
    int v78 = 0;
    do
    {
      unint64_t v29 = *(int *)v23;
      unint64_t v30 = *(_DWORD **)a1;
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5);
      if (v31 <= v29) {
        goto LABEL_101;
      }
      uint64_t v32 = &v30[24 * (int)v29];
      if (*((unsigned char *)v32 + 8))
      {
        int v33 = v32[1] - v30[24 * (int)v29] + 1;
        int v34 = v77;
        if (v77 >= v78)
        {
          char v36 = (int *)v76;
          uint64_t v37 = ((char *)v77 - (unsigned char *)v76) >> 2;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 62) {
            goto LABEL_101;
          }
          uint64_t v39 = (char *)v78 - (unsigned char *)v76;
          if (((char *)v78 - (unsigned char *)v76) >> 1 > v38) {
            unint64_t v38 = v39 >> 1;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            int v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v78, v40);
            char v36 = (int *)v76;
            int v34 = v77;
          }
          else
          {
            int v41 = 0;
          }
          float v42 = (int *)&v41[4 * v37];
          int *v42 = v33;
          int v35 = v42 + 1;
          while (v34 != v36)
          {
            int v43 = *--v34;
            *--float v42 = v43;
          }
          int v76 = v42;
          int v77 = v35;
          int v78 = (int *)&v41[4 * v40];
          if (v36) {
            operator delete(v36);
          }
        }
        else
        {
          *int v77 = v33;
          int v35 = v34 + 1;
        }
        int v77 = v35;
        unint64_t v29 = *(int *)v23;
        unint64_t v30 = *(_DWORD **)a1;
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5);
      }
      if (v31 <= v29) {
        goto LABEL_101;
      }
      int v44 = &v30[24 * (int)v29];
      if (*((unsigned char *)v44 + 24))
      {
        uint64_t v45 = v30[24 * (int)v29];
        uint64_t v46 = v44[5];
        int v47 = operator new(1uLL);
        int v73 = v47;
        *int v47 = 0;
        int v74 = v47 + 1;
        int v75 = v47 + 1;
        char v48 = Nightingale::phaseFactorProcessor::detectPhases((uint64_t)&v85, v45 | (v46 << 32), (uint64_t *)&v73, a3);
        if (v73)
        {
          int v74 = v73;
          operator delete(v73);
        }
        if (!v48)
        {
          int v49 = v46 - v45 + 1;
          double v50 = v80;
          if (v80 >= v81)
          {
            int v52 = (char *)v79;
            uint64_t v53 = (v80 - (unsigned char *)v79) >> 2;
            unint64_t v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62) {
              goto LABEL_101;
            }
            uint64_t v55 = v81 - (unsigned char *)v79;
            if ((v81 - (unsigned char *)v79) >> 1 > v54) {
              unint64_t v54 = v55 >> 1;
            }
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v54;
            }
            if (v56)
            {
              uint64_t v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v81, v56);
              int v52 = (char *)v79;
              double v50 = v80;
            }
            else
            {
              uint64_t v57 = 0;
            }
            int v58 = &v57[4 * v53];
            *(_DWORD *)int v58 = v49;
            double v51 = v58 + 4;
            while (v50 != v52)
            {
              int v59 = *((_DWORD *)v50 - 1);
              v50 -= 4;
              *((_DWORD *)v58 - 1) = v59;
              v58 -= 4;
            }
            int v79 = v58;
            unsigned __int8 v80 = v51;
            int v81 = &v57[4 * v56];
            if (v52) {
              operator delete(v52);
            }
          }
          else
          {
            *(_DWORD *)unsigned __int8 v80 = v49;
            double v51 = v50 + 4;
          }
          unsigned __int8 v80 = v51;
        }
      }
      v23 += 4;
    }
    while (v23 != v12);
    if ((a4 & 1) != 0 && v77 != v76) {
      --v77;
    }
    uint64_t v60 = v80 - (unsigned char *)v79;
    if (v80 != v79)
    {
      std::__sort<std::__less<int,int> &,int *>();
      unint64_t v61 = (unint64_t)(v60 >> 2) >> 1;
      char v62 = v79;
      if ((v60 & 4) != 0)
      {
        unsigned int v64 = *((_DWORD *)v79 + v61);
        a5[4] = 1;
      }
      else
      {
        float v63 = (float)(*((_DWORD *)v79 + v61) + *((_DWORD *)v79 + v61 - 1)) * 0.5;
        a5[4] = 1;
        unsigned int v64 = llroundf(v63);
      }
      double v65 = (double)(unint64_t)((v60 >> 2) - 1);
      *(_DWORD *)a5 = v64;
      *((_DWORD *)a5 + 8) = v62[llround(v65 * 0.125)];
      a5[36] = 1;
      *((_DWORD *)a5 + 10) = v62[llround(v65 * 0.875)];
      a5[44] = 1;
    }
    int v66 = v77;
    uint64_t v67 = (char *)v77 - (unsigned char *)v76;
    if (v77 == v76)
    {
      *((_DWORD *)a5 + 12) = (unint64_t)v60 >> 2;
      a5[52] = 1;
      if (!v66) {
        goto LABEL_93;
      }
    }
    else
    {
      std::__sort<std::__less<int,int> &,int *>();
      unint64_t v68 = (unint64_t)(v67 >> 2) >> 1;
      int v66 = (int *)v76;
      if ((v67 & 4) != 0)
      {
        *((_DWORD *)a5 + 2) = *((_DWORD *)v76 + v68);
        a5[12] = 1;
      }
      else
      {
        float v69 = (float)(*((_DWORD *)v76 + v68) + *((_DWORD *)v76 + v68 - 1)) * 0.5;
        a5[12] = 1;
        *((_DWORD *)a5 + 2) = llroundf(v69);
      }
      double v70 = (double)(unint64_t)((v67 >> 2) - 1);
      *((_DWORD *)a5 + 4) = v66[llround(v70 * 0.125)];
      a5[20] = 1;
      *((_DWORD *)a5 + 6) = v66[llround(v70 * 0.875)];
      a5[28] = 1;
      *((_DWORD *)a5 + 12) = (unint64_t)v60 >> 2;
      a5[52] = 1;
    }
    int v77 = v66;
    operator delete(v66);
LABEL_93:
    if (v79)
    {
      unsigned __int8 v80 = (char *)v79;
      operator delete(v79);
    }
    uint64_t v12 = (char *)__p;
  }
  if (v12)
  {
    int v83 = v12;
    operator delete(v12);
  }
  if (v85)
  {
    __int16 v86 = v85;
    operator delete(v85);
  }
}

BOOL Nightingale::ngt_DayStreamProcessor::inactiveDetect(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if ((a4 & 0xFF00000000) == 0) {
    return 0;
  }
  if (!*(unsigned char *)(a2 + 60) || (a5 & 0xFF00000000) == 0) {
    return 0;
  }
  int v8 = a4;
  int v10 = *(_DWORD *)(a2 + 56);
  unsigned int v11 = a5 - 181;
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  unsigned int v12 = a5 - 61;
  int v13 = operator new(1uLL);
  std::vector<int> __p = v13;
  unsigned char *v13 = 0;
  char v36 = v13 + 1;
  uint64_t v37 = v13 + 1;
  unsigned __int8 v14 = Nightingale::phaseFactorProcessor::detectPhases((uint64_t)&v38, (a5 + 4294967235) | 0xFFFFFFFF00000000, (uint64_t *)&__p, a3);
  if (__p)
  {
    char v36 = __p;
    operator delete(__p);
  }
  char v15 = operator new(1uLL);
  uint64_t v32 = v15;
  *char v15 = 1;
  int v33 = v15 + 1;
  int v34 = v15 + 1;
  char v16 = Nightingale::phaseFactorProcessor::detectPhases((uint64_t)&v38, v12 | ((unint64_t)a5 << 32), (uint64_t *)&v32, a3);
  if (v32)
  {
    int v33 = v32;
    operator delete(v32);
  }
  uint64_t v17 = a5 << 32;
  uint64_t v18 = operator new(1uLL);
  unint64_t v29 = v18;
  *uint64_t v18 = 1;
  unint64_t v30 = v18 + 1;
  unint64_t v31 = v18 + 1;
  unsigned __int8 v19 = Nightingale::phaseFactorProcessor::detectPhases((uint64_t)&v38, a5 | 0xFFFFFFFF00000000, (uint64_t *)&v29, a3);
  if (v29)
  {
    unint64_t v30 = v29;
    operator delete(v29);
  }
  int v20 = a5 - v10;
  int v21 = operator new(1uLL);
  unint64_t v26 = v21;
  *int v21 = 0;
  int v27 = v21 + 1;
  unint64_t v28 = v21 + 1;
  char v22 = Nightingale::phaseFactorProcessor::detectPhases((uint64_t)&v38, v11 | (unint64_t)v17, (uint64_t *)&v26, a3);
  if (v26)
  {
    int v27 = v26;
    operator delete(v26);
  }
  BOOL v23 = v16 == 0;
  if (!v22) {
    BOOL v23 = 1;
  }
  if (v19 | v14) {
    BOOL v24 = 1;
  }
  else {
    BOOL v24 = v20 < 2 * v8;
  }
  BOOL v7 = !v24 && v23;
  if (v38)
  {
    uint64_t v39 = v38;
    operator delete(v38);
  }
  return v7;
}

void Nightingale::ngt_DayStreamProcessor::printStats()
{
  if (ha_sensitive_logging_is_enabled())
  {
    log = ha_get_log();
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printStats();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    uint64_t v1 = ha_get_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printStats();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    uint64_t v2 = ha_get_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printStats();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    long long v3 = ha_get_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printStats();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    unint64_t v4 = ha_get_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printStats();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    long long v5 = ha_get_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printStats();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    uint64_t v6 = ha_get_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printStats();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    BOOL v7 = ha_get_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printStats();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    int v8 = ha_get_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printStats();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    unint64_t v9 = ha_get_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printStats();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    int v10 = ha_get_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printStats();
    }
  }
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "\n\t}, \n\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"julianDayOfCurrentCycleStart\": %d", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"julianDayOfFirstCompleteCycleStart\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"numberOfCompleteCyclesFound\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"upperCycleLengthPercentile\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"lowerCycleLengthPercentile\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"upperMenstruationLengthPercentile\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"lowerMenstruationLengthPercentile\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"medianMenstruationLength\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"medianCycleLength\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"stats\": {\n", v2, v3, v4, v5, v6);
}

void Nightingale::ngt_DayStreamProcessor::printDeviations(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  if (ha_sensitive_logging_is_enabled())
  {
    log = ha_get_log();
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printDeviations();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    unint64_t v4 = ha_get_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printDeviations();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    long long v5 = ha_get_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printDeviations();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    uint64_t v6 = ha_get_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printDeviations();
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    BOOL v7 = ha_get_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printDeviations();
    }
  }
  char v8 = *(unsigned char *)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 49);
  char v10 = *(unsigned char *)(a2 + 50);
  char v11 = *(unsigned char *)(a2 + 51);
  char v12 = *(unsigned char *)(a2 + 52);
  char v13 = *(unsigned char *)(a2 + 53);
  int v14 = *(_DWORD *)(a2 + 56);
  if (ha_sensitive_logging_is_enabled())
  {
    char v15 = ha_get_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      int v41 = *(_DWORD *)(a2 + 60);
      int v42 = *(_DWORD *)(a2 + 64);
      int v43 = *(_DWORD *)(a2 + 68);
      int v44 = *(_DWORD *)(a2 + 72);
      int v51 = 67111680;
      int v52 = v8 & 1;
      __int16 v53 = 1024;
      int v54 = v9 & 1;
      __int16 v55 = 1024;
      int v56 = v10 & 1;
      __int16 v57 = 1024;
      int v58 = v11 & 1;
      __int16 v59 = 1024;
      int v60 = v12 & 1;
      __int16 v61 = 1024;
      int v62 = v13 & 1;
      __int16 v63 = 1024;
      int v64 = v14;
      __int16 v65 = 1024;
      int v66 = v41;
      __int16 v67 = 1024;
      int v68 = v42;
      __int16 v69 = 1024;
      int v70 = v43;
      __int16 v71 = 1024;
      int v72 = v44;
      _os_log_debug_impl(&dword_22F10E000, v15, OS_LOG_TYPE_DEBUG, "\"irregMeta\": {\"common\": {\"bfrRule\": %d, \"minWS\": %d, \"minWE\": %d,\"enough\": %d, \"washout\": %d,\"inWin\": %d,\"age\": %d}, \"win1CycleLenDiff\": %d, \"win2CycleLenDiff\": %d, \"win1NumCycles\": %d, \"win2NumCycles\": %d},\n", (uint8_t *)&v51, 0x44u);
    }
  }
  char v16 = *(unsigned char *)(a2 + 76);
  char v17 = *(unsigned char *)(a2 + 77);
  char v18 = *(unsigned char *)(a2 + 78);
  char v19 = *(unsigned char *)(a2 + 79);
  char v20 = *(unsigned char *)(a2 + 80);
  char v21 = *(unsigned char *)(a2 + 81);
  int v22 = *(_DWORD *)(a2 + 84);
  if (ha_sensitive_logging_is_enabled())
  {
    BOOL v23 = ha_get_log();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      int v45 = *(_DWORD *)(a2 + 88);
      int v46 = *(_DWORD *)(a2 + 92);
      int v51 = 67111168;
      int v52 = v16 & 1;
      __int16 v53 = 1024;
      int v54 = v17 & 1;
      __int16 v55 = 1024;
      int v56 = v18 & 1;
      __int16 v57 = 1024;
      int v58 = v19 & 1;
      __int16 v59 = 1024;
      int v60 = v20 & 1;
      __int16 v61 = 1024;
      int v62 = v21 & 1;
      __int16 v63 = 1024;
      int v64 = v22;
      __int16 v65 = 1024;
      int v66 = v45;
      __int16 v67 = 1024;
      int v68 = v46;
      _os_log_debug_impl(&dword_22F10E000, v23, OS_LOG_TYPE_DEBUG, "\"infreqMeta\": {\"common\": {\"bfrRule\": %d, \"minWS\": %d, \"minWE\": %d,\"enough\": %d, \"washout\": %d,\"inWin\": %d,\"age\": %d}, \"win1NumPeriods\": %d, \"win2NumPeriods\": %d}, \n", (uint8_t *)&v51, 0x38u);
    }
  }
  char v24 = *(unsigned char *)(a2 + 96);
  char v25 = *(unsigned char *)(a2 + 97);
  char v26 = *(unsigned char *)(a2 + 98);
  char v27 = *(unsigned char *)(a2 + 99);
  char v28 = *(unsigned char *)(a2 + 100);
  char v29 = *(unsigned char *)(a2 + 101);
  int v30 = *(_DWORD *)(a2 + 104);
  if (ha_sensitive_logging_is_enabled())
  {
    unint64_t v31 = ha_get_log();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      int v48 = *(_DWORD *)(a2 + 108);
      int v47 = *(_DWORD *)(a2 + 112);
      int v51 = 67111168;
      int v52 = v24 & 1;
      __int16 v53 = 1024;
      int v54 = v25 & 1;
      __int16 v55 = 1024;
      int v56 = v26 & 1;
      __int16 v57 = 1024;
      int v58 = v27 & 1;
      __int16 v59 = 1024;
      int v60 = v28 & 1;
      __int16 v61 = 1024;
      int v62 = v29 & 1;
      __int16 v63 = 1024;
      int v64 = v30;
      __int16 v65 = 1024;
      int v66 = v47;
      __int16 v67 = 1024;
      int v68 = v48;
      _os_log_debug_impl(&dword_22F10E000, v31, OS_LOG_TYPE_DEBUG, "\"prolongMeta\": {\"common\": {\"bfrRule\": %d, \"minWS\": %d, \"minWE\": %d,\"enough\": %d, \"washout\": %d,\"inWin\": %d,\"age\": %d}, \"numLongPeriodsDetected\": %d, \"numPeriodsUsed\": %d}, \n", (uint8_t *)&v51, 0x38u);
    }
  }
  char v32 = *(unsigned char *)(a2 + 116);
  char v33 = *(unsigned char *)(a2 + 117);
  char v34 = *(unsigned char *)(a2 + 118);
  char v35 = *(unsigned char *)(a2 + 119);
  char v36 = *(unsigned char *)(a2 + 120);
  char v37 = *(unsigned char *)(a2 + 121);
  int v38 = *(_DWORD *)(a2 + 124);
  if (ha_sensitive_logging_is_enabled())
  {
    uint64_t v39 = ha_get_log();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      int v49 = *(_DWORD *)(a2 + 128);
      int v50 = *(_DWORD *)(a2 + 132);
      int v51 = 67111168;
      int v52 = v32 & 1;
      __int16 v53 = 1024;
      int v54 = v33 & 1;
      __int16 v55 = 1024;
      int v56 = v34 & 1;
      __int16 v57 = 1024;
      int v58 = v35 & 1;
      __int16 v59 = 1024;
      int v60 = v36 & 1;
      __int16 v61 = 1024;
      int v62 = v37 & 1;
      __int16 v63 = 1024;
      int v64 = v38;
      __int16 v65 = 1024;
      int v66 = v49;
      __int16 v67 = 1024;
      int v68 = v50;
      _os_log_debug_impl(&dword_22F10E000, v39, OS_LOG_TYPE_DEBUG, "\"spottingMeta\": {\"common\": {\"bfrRule\": %d, \"minWS\": %d, \"minWE\": %d,\"enough\": %d, \"washout\": %d,\"inWin\": %d,\"age\": %d}, \"win1NumSpottingDays\": %d, \"win2NumSpottingDays\": %d}", (uint8_t *)&v51, 0x38u);
    }
  }
  if (ha_sensitive_logging_is_enabled())
  {
    uint64_t v40 = ha_get_log();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_DayStreamProcessor::printDeviations();
    }
  }
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_DayInput>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x444444444444445) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(60 * a2);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a2);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(8 * a2);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, const std::vector<int> *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  std::vector<int>::pointer begin = __x->__begin_;
  std::vector<int>::pointer end = __x->__end_;
  int64_t v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    std::vector<int>::__vallocate[abi:nn180100](this, v5 >> 2);
    std::vector<int>::pointer v6 = this->__end_;
    memmove(v6, begin, v5);
    this->__end_ = (std::vector<int>::pointer)((char *)v6 + v5);
  }
  return this;
}

char *std::vector<int>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    abort();
  }
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::vector<Nightingale::PhaseSet>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<Nightingale::PhaseSet>::__vallocate[abi:nn180100](a1, v5 >> 3);
    std::vector<int>::pointer v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<Nightingale::PhaseSet>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

char *std::vector<Nightingale::ngt_Prediction>::__assign_with_size[abi:nn180100]<Nightingale::ngt_Prediction*,Nightingale::ngt_Prediction*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  BOOL v7 = result;
  uint64_t v8 = *((void *)result + 2);
  char v9 = *(char **)result;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x276276276276276) {
      abort();
    }
    unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x13B13B13B13B13BLL) {
      unint64_t v12 = 0x276276276276276;
    }
    else {
      unint64_t v12 = v11;
    }
    result = std::vector<Nightingale::ngt_Prediction>::__vallocate[abi:nn180100](v7, v12);
    int v14 = (char *)v7[1];
    char v13 = (void **)(v7 + 1);
    char v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      char v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  char v13 = (void **)(result + 8);
  char v15 = (unsigned char *)*((void *)result + 1);
  if (0x4EC4EC4EC4EC4EC5 * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  char v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    char v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    char v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  unsigned char *v13 = &v9[v17];
  return result;
}

char *std::vector<Nightingale::ngt_Prediction>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    abort();
  }
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_Prediction>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_Prediction>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(104 * a2);
}

void *std::vector<Nightingale::cycleInfo>::__init_with_size[abi:nn180100]<Nightingale::cycleInfo*,Nightingale::cycleInfo*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<int>::pointer v6 = result;
    result = std::vector<Nightingale::cycleInfo>::__vallocate[abi:nn180100](result, a4);
    uint64_t v7 = v6[1];
    while (a2 != a3)
    {
      result = (void *)std::construct_at[abi:nn180100]<Nightingale::cycleInfo,Nightingale::cycleInfo&,Nightingale::cycleInfo*>(v7, a2);
      a2 += 96;
      v7 += 96;
    }
    v6[1] = v7;
  }
  return result;
}

char *std::vector<Nightingale::cycleInfo>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    abort();
  }
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::cycleInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::cycleInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::construct_at[abi:nn180100]<Nightingale::cycleInfo,Nightingale::cycleInfo&,Nightingale::cycleInfo*>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 61) = *(void *)(a2 + 61);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 72) = 0;
  std::vector<int>::pointer v6 = (void *)(a1 + 72);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 72);
  uint64_t v7 = *(unsigned char **)(a2 + 80);
  size_t v9 = v7 - v8;
  if (v7 != v8)
  {
    std::vector<Nightingale::Phase>::__vallocate[abi:nn180100](v6, v7 - v8);
    unint64_t v10 = *(char **)(a1 + 80);
    memmove(v10, v8, v9);
    *(void *)(a1 + 80) = &v10[v9];
  }
  return a1;
}

char *std::vector<Nightingale::Phase>::__vallocate[abi:nn180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    abort();
  }
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<Nightingale::cycleInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Nightingale::cycleInfo>::__clear[abi:nn180100]((uint64_t *)v2);
    long long v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Nightingale::cycleInfo>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 96)
  {
    long long v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  return OUTLINED_FUNCTION_0();
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x14u);
}

uint64_t Nightingale::periodEstimatorCalendar::periodEstimatorCalendar(Nightingale::periodEstimatorBase *a1, uint64_t a2)
{
  uint64_t result = Nightingale::periodEstimatorBase::periodEstimatorBase(a1);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  if ((a2 - 18) < 0x1B || (a2 & 0xFF00000000) == 0) {
    int v5 = 16;
  }
  else {
    int v5 = 36;
  }
  *(_DWORD *)(result + 24) = v5;
  return result;
}

{
  uint64_t result;
  int v5;

  uint64_t result = Nightingale::periodEstimatorBase::periodEstimatorBase(a1);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  if ((a2 - 18) < 0x1B || (a2 & 0xFF00000000) == 0) {
    int v5 = 16;
  }
  else {
    int v5 = 36;
  }
  *(_DWORD *)(result + 24) = v5;
  return result;
}

float Nightingale::periodEstimatorCalendar::predict1stPeriodStartCal@<S0>(Nightingale::periodEstimatorCalendar *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  Nightingale::CGradient::CGradient(a6);
  if (*(unsigned char *)(a2 + 36) && *(unsigned char *)(a2 + 44))
  {
    if ((a3 & 0xFF00000000) != 0) {
      uint64_t v13 = (a3 + 1) | 0x100000000;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t NullPoint = Nightingale::periodEstimatorBase::getNullPoint((uint64_t)a1, v13, a4, *(_DWORD *)a2);
    if (*(unsigned char *)(a2 + 36) && *(unsigned char *)(a2 + 44))
    {
      float v15 = *(float *)(a2 + 40);
      float v16 = 0.0;
      if (a5 != -2) {
        float v16 = *(float *)(a2 + 40);
      }
      if ((a5 & 0xFF00000000) != 0) {
        float v15 = v16;
      }
      Nightingale::periodEstimatorCalendar::getCalBasedPeriodStartGradient(a1, NullPoint, (uint64_t)&v23, *(float *)(a2 + 32), v15);
      size_t v17 = *(void **)a6;
      if (*(void *)a6)
      {
        *(void *)(a6 + 8) = v17;
        operator delete(v17);
      }
      *(_OWORD *)a6 = v23;
      *(void *)(a6 + 16) = v24;
      *(_OWORD *)(a6 + 24) = v25[0];
      float result = *(float *)((char *)v25 + 9);
      *(_OWORD *)(a6 + 33) = *(_OWORD *)((char *)v25 + 9);
    }
    else
    {
      char v18 = (Nightingale::periodEstimatorCalendar *)std::__throw_bad_optional_access[abi:nn180100]();
      return Nightingale::periodEstimatorCalendar::getCalBasedPeriodStartGradient(v18, v19, v20, v21, v22);
    }
  }
  return result;
}

float Nightingale::periodEstimatorCalendar::getCalBasedPeriodStartGradient@<S0>(Nightingale::periodEstimatorCalendar *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  Nightingale::periodEstimatorCalendar::getPeriodStartGradient(a1, a4, a5, a3);
  if ((a2 & 0xFF00000000) != 0)
  {
    Nightingale::periodEstimatorCalendar::adjustForGradientNull(v9, a2, (Nightingale::CGradient *)a3, a4, a5);
  }
  else
  {
    *(float *)(a3 + 36) = a4;
    *(unsigned char *)(a3 + 40) = 1;
    float result = sqrtf(a5);
    *(float *)(a3 + 44) = result;
    *(unsigned char *)(a3 + 48) = 1;
  }
  return result;
}

double Nightingale::periodEstimatorCalendar::getPeriodStartGradient@<D0>(Nightingale::periodEstimatorCalendar *this@<X0>, float a2@<S0>, float a3@<S1>, uint64_t a4@<X8>)
{
  Nightingale::CGradient::CGradient(a4);
  int GradientLength = Nightingale::periodEstimatorCalendar::getGradientLength(this, a2, a3);
  Nightingale::periodEstimatorCalendar::getGradient(a2, a3, GradientLength, (Nightingale::CGradient *)&v11);
  int v9 = *(void **)a4;
  if (*(void *)a4)
  {
    *(void *)(a4 + 8) = v9;
    operator delete(v9);
  }
  *(_OWORD *)a4 = v11;
  *(void *)(a4 + 16) = v12;
  *(_OWORD *)(a4 + 24) = v13[0];
  double result = *(double *)((char *)v13 + 9);
  *(_OWORD *)(a4 + 33) = *(_OWORD *)((char *)v13 + 9);
  return result;
}

uint64_t Nightingale::periodEstimatorCalendar::adjustForGradientNull(int a1, uint64_t a2, Nightingale::CGradient *this, float a4, float a5)
{
  uint64_t result = Nightingale::CGradient::get_vGrad_empty(this);
  if ((result & 1) == 0 && (a2 & 0xFF00000000) != 0)
  {
    if ((int)a2 <= (int)llround(a4 + sqrtf(a5) * 1.64999998))
    {
      Nightingale::CGradient::annihilateEarly((char **)this, (int)a2 + 1);
      uint64_t result = Nightingale::CGradient::normalize((uint64_t)this);
      *((unsigned char *)this + 34) = 1;
    }
    else
    {
      *((unsigned char *)this + 33) = 1;
      *((void *)this + 1) = *(void *)this;
    }
  }
  return result;
}

uint64_t Nightingale::periodEstimatorCalendar::getGradientLength(Nightingale::periodEstimatorCalendar *this, float a2, float a3)
{
  double v5 = sqrtf(a3) * 10.0;
  if (v5 >= 20.0) {
    double v6 = v5;
  }
  else {
    double v6 = 20.0;
  }
  if (Nightingale::check2Real_t_equal(this, fabsf(a3), 0.0)) {
    double v6 = sqrt((double)*((int *)this + 6)) * 10.0;
  }
  return (int)(v6 + a2);
}

uint64_t Nightingale::periodEstimatorCalendar::getGradient@<X0>(float a1@<S0>, float a2@<S1>, int a3@<W1>, Nightingale::CGradient *a4@<X8>)
{
  int v9 = (Nightingale *)Nightingale::CGradient::CGradient((uint64_t)a4);
  if (a3 >= 1)
  {
    double v10 = a1;
    double v11 = a2;
    double v12 = 0.0;
    do
    {
      double v13 = Nightingale::gaussian_pdf(v9, v12, v10, v11);
      Nightingale::CGradient::push_back(a4, v13);
      double v12 = v12 + 1.0;
      --a3;
    }
    while (a3);
  }
  return Nightingale::CGradient::normalize((uint64_t)a4);
}

uint64_t Nightingale::periodEstimatorCalendarWithEnd::periodEstimatorCalendarWithEnd(Nightingale::periodEstimatorBase *a1, uint64_t a2)
{
  uint64_t result = Nightingale::periodEstimatorBase::periodEstimatorBase(a1);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  if ((a2 - 18) < 0x1B || (a2 & 0xFF00000000) == 0) {
    int v5 = 16;
  }
  else {
    int v5 = 36;
  }
  *(_DWORD *)(result + 24) = v5;
  return result;
}

{
  uint64_t result;
  int v5;

  uint64_t result = Nightingale::periodEstimatorBase::periodEstimatorBase(a1);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  if ((a2 - 18) < 0x1B || (a2 & 0xFF00000000) == 0) {
    int v5 = 16;
  }
  else {
    int v5 = 36;
  }
  *(_DWORD *)(result + 24) = v5;
  return result;
}

void Nightingale::periodEstimatorCalendarWithEnd::getPeriodEndProjection(uint64_t a1@<X1>, std::vector<int> *a2@<X2>, uint64_t a3@<X8>)
{
  Nightingale::CGradient::CGradient(a3);
  *(unsigned char *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 60) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 68) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 76) = 0;
  if (*(unsigned char *)(a1 + 60)) {
    BOOL v6 = *(unsigned char *)(a1 + 52) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    long long v7 = *(_OWORD *)(a1 + 48);
    v18[2] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)uint64_t v19 = v7;
    *(void *)&v19[13] = *(void *)(a1 + 61);
    long long v8 = *(_OWORD *)(a1 + 16);
    v18[0] = *(_OWORD *)a1;
    v18[1] = v8;
    float v21 = 0;
    float v22 = 0;
    uint64_t v20 = 0;
    double v10 = *(unsigned char **)(a1 + 72);
    int v9 = *(unsigned char **)(a1 + 80);
    size_t v11 = v9 - v10;
    if (v9 == v10)
    {
      Nightingale::periodEstimatorCalendarWithEnd::get_period_duration_pdf((uint64_t)v18, (uint64_t)&__x);
    }
    else
    {
      if (v9 - v10 < 0) {
        abort();
      }
      double v12 = (char *)operator new(v9 - v10);
      uint64_t v20 = v12;
      float v22 = &v12[v11];
      memmove(v12, v10, v11);
      float v21 = &v12[v11];
      Nightingale::periodEstimatorCalendarWithEnd::get_period_duration_pdf((uint64_t)v18, (uint64_t)&__x);
      operator delete(v12);
    }
    Nightingale::CGradient::get_list_reference(&__x, &v17);
    Nightingale::CGradient::get_list_reference(a2, &__p);
    Nightingale::periodEstimatorCalendarWithEnd::get_period_end_gradient((uint64_t)&v17, (uint64_t *)&__p, (uint64_t)&v14);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (&v14 != (void **)a3) {
      std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)a3, (char *)v14, (uint64_t)v15, (v15 - (unsigned char *)v14) >> 2);
    }
    *(_OWORD *)(a3 + 24) = v16[0];
    *(_OWORD *)(a3 + 33) = *(_OWORD *)((char *)v16 + 9);
    if (v14)
    {
      float v15 = v14;
      operator delete(v14);
    }
    if (v17.__begin_)
    {
      v17.__end_ = v17.__begin_;
      operator delete(v17.__begin_);
    }
    if (__x.__begin_)
    {
      __x.__end_ = __x.__begin_;
      operator delete(__x.__begin_);
    }
  }
}

void Nightingale::periodEstimatorCalendarWithEnd::get_period_duration_pdf(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  Nightingale::CGradient::CGradient(a2);
  if (*(unsigned char *)(a1 + 52) && *(unsigned char *)(a1 + 60))
  {
    Nightingale::periodEstimatorCalendar::getGradient(*(float *)(a1 + 48) + -1.0, *(float *)(a1 + 56), 60, (Nightingale::CGradient *)&v5);
    long long v4 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v4;
      operator delete(v4);
    }
    *(_OWORD *)a2 = v5;
    *(void *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 24) = v7[0];
    *(_OWORD *)(a2 + 33) = *(_OWORD *)((char *)v7 + 9);
  }
  else
  {
    *(unsigned char *)(a2 + 33) = 1;
    *(void *)(a2 + 8) = *(void *)a2;
  }
}

void Nightingale::periodEstimatorCalendarWithEnd::get_period_end_gradient(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  std::vector<int> __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  Nightingale::convolve_on_top(a2, a1, (uint64_t)&__p, 0);
  uint64_t v4 = Nightingale::CGradient::CGradient(a3, &__p);
  Nightingale::CGradient::normalize(v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

char *std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if (a4 >> 62) {
      abort();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<int>::__vallocate[abi:nn180100](v7, v11);
    double v13 = (char *)v7[1];
    double v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  double v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  float v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *double v12 = &v9[v17];
  return result;
}

uint64_t Nightingale::getLowRangeStartDur@<X0>(float a1@<S0>, float a2@<S1>, uint64_t a3@<X8>)
{
  LODWORD(a3) = llroundf(a1);
  LODWORD(v4) = llround((float)(a2 - a1) + 1.0);
  return a3 | (v4 << 32);
}

uint64_t Nightingale::getIdxOfMinValFromVec(__int32 **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  long long v3 = v1 + 1;
  if (v1 + 1 != v2)
  {
    __int32 v4 = *v1;
    long long v5 = v1 + 1;
    do
    {
      __int32 v7 = *v5++;
      __int32 v6 = v7;
      BOOL v9 = __OFSUB__(v7, v4);
      BOOL v8 = v7 - v4 < 0;
      if (v7 < v4) {
        __int32 v4 = v6;
      }
      if (v8 != v9) {
        uint64_t v1 = v3;
      }
      long long v3 = v5;
    }
    while (v5 != v2);
  }
  return Nightingale::getIdxOfValFromVec<int>(a1, *v1);
}

uint64_t Nightingale::getIdxOfValFromVec<int>(__int32 **a1, __int32 a2)
{
  long long v3 = *a1;
  __int32 v4 = a1[1];
  if (v3 == v4 || ((v5 = wmemchr(v3, a2, v4 - v3)) != 0 ? (__int32 v6 = v5) : (__int32 v6 = v4), v6 == a1[1]))
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = v6 - *a1;
    uint64_t v8 = v7 & 0xFFFFFF00;
    uint64_t v9 = v7;
    uint64_t v10 = 0x100000000;
  }
  return v9 | v10 | v8;
}

void Nightingale::getVarianceWin(std::vector<int> *__x, int a2)
{
  std::vector<int>::pointer begin = __x->__begin_;
  std::vector<int>::pointer end = __x->__end_;
  if ((std::vector<int>::pointer)((char *)end - (char *)__x->__begin_) == (std::vector<int>::pointer)4)
  {
    if (begin == end || *(float *)begin == (float)a2) {
      return;
    }
  }
  else if (begin == end)
  {
    return;
  }
  std::vector<int>::vector(&v17, __x);
  float Mean = Nightingale::getMeanWin<float>((float **)&v17, a2);
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
  std::vector<int>::pointer v9 = __x->__begin_;
  uint64_t v8 = __x->__end_;
  float v10 = (float)a2;
  if (v8 != __x->__begin_)
  {
    int v11 = 0;
    std::vector<int>::pointer v12 = __x->__begin_;
    do
    {
      float v13 = *(float *)v12++;
      if (v13 == v10) {
        ++v11;
      }
    }
    while (v12 != v8);
    if (((unint64_t)((char *)v8 - (char *)__x->__begin_) >> 2) != v11)
    {
      float v14 = 0.0;
      while (v9 != v8)
      {
        float v15 = *(float *)v9++;
        float v16 = v14 + (float)((float)(v15 - Mean) * (float)(v15 - Mean));
        if (vabds_f32(v15, v10) >= 1.0e-12) {
          float v14 = v16;
        }
      }
    }
  }
}

float Nightingale::getMeanWin<float>(float **a1, int a2)
{
  uint64_t v2 = *a1;
  long long v3 = a1[1];
  float result = (float)a2;
  if (*a1 != v3)
  {
    int v5 = 0;
    __int32 v6 = *a1;
    do
    {
      float v7 = *v6++;
      if (v7 == result) {
        ++v5;
      }
    }
    while (v6 != v3);
    uint64_t v8 = v3 - v2;
    if (v8 != v5)
    {
      std::vector<int>::pointer v9 = *a1;
      do
      {
        if (*v9 == result) {
          *std::vector<int>::pointer v9 = 0.0;
        }
        ++v9;
      }
      while (v9 != v3);
      double v10 = 0.0;
      do
      {
        float v11 = *v2++;
        double v10 = v10 + v11;
      }
      while (v2 != v3);
      return v10 / (double)(unint64_t)(v8 - v5);
    }
  }
  return result;
}

void Nightingale::pooledVar2Win(std::vector<int> *a1, std::vector<int> *a2, int a3)
{
  std::vector<int>::pointer begin = (float *)a1->__begin_;
  std::vector<int>::pointer end = (float *)a1->__end_;
  if ((float *)a1->__begin_ != end)
  {
    float v7 = (float *)a2->__begin_;
    uint64_t v8 = (float *)a2->__end_;
    if ((float *)a2->__begin_ != v8)
    {
      int v9 = 0;
      unint64_t v10 = (char *)end - (char *)begin;
      float v11 = (float)a3;
      do
      {
        float v12 = *begin++;
        if (v12 == v11) {
          ++v9;
        }
      }
      while (begin != end);
      int v13 = 0;
      unint64_t v14 = v10 >> 2;
      unint64_t v15 = (char *)v8 - (char *)v7;
      do
      {
        float v16 = *v7++;
        if (v16 == v11) {
          ++v13;
        }
      }
      while (v7 != v8);
      if (v14 != v9 && (v15 >> 2) != v13 && (int)((v15 >> 2) - v13 + v14 - v9) >= 3)
      {
        Nightingale::getVarianceWin(a1, a3);
        Nightingale::getVarianceWin(a2, a3);
      }
    }
  }
}

uint64_t Nightingale::getMeanDiffOf2Windows(std::vector<int> *__x, const std::vector<int> *a2, float a3)
{
  std::vector<int>::pointer end = __x->__end_;
  if (__x->__begin_ == end)
  {
    int v9 = 0;
  }
  else
  {
    double v6 = 0.0;
    std::vector<int>::pointer begin = __x->__begin_;
    do
    {
      float v8 = *(float *)begin++;
      double v6 = v6 + v8;
    }
    while (begin != end);
    int v9 = (int)v6;
  }
  unint64_t v10 = (float *)a2->__end_;
  if ((float *)a2->__begin_ == v10)
  {
    int v14 = 0;
  }
  else
  {
    double v11 = 0.0;
    float v12 = (float *)a2->__begin_;
    do
    {
      float v13 = *v12++;
      double v11 = v11 + v13;
    }
    while (v12 != v10);
    int v14 = (int)v11;
  }
  if (v9 == (int)(float)((float)(unint64_t)(end - __x->__begin_) * a3)
    || v14 == (int)(float)((float)(unint64_t)(((char *)v10 - (char *)a2->__begin_) >> 2) * a3))
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    std::vector<int>::vector(&v21, __x);
    float Mean = Nightingale::getMeanWin<float>((float **)&v21, (int)a3);
    if (v21.__begin_)
    {
      v21.__end_ = v21.__begin_;
      operator delete(v21.__begin_);
    }
    std::vector<int>::vector(&__p, a2);
    float v18 = Nightingale::getMeanWin<float>((float **)&__p, (int)a3);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    uint64_t v15 = 0x100000000;
    if (Mean != a3 && v18 != a3)
    {
      uint64_t v16 = COERCE_UNSIGNED_INT(v18 - Mean);
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
  }
  return v16 | v15;
}

float Nightingale::getSigmoid(Nightingale *this, float a2)
{
  return 1.0 / (float)(expf(-a2) + 1.0);
}

float Nightingale::getLogit(Nightingale *this, float a2)
{
  return -logf((float)(1.0 / a2) + -1.0);
}

BOOL Nightingale::check2Real_t_equal(Nightingale *this, float a2, float a3)
{
  return vabds_f32(a2, a3) < 1.0e-12;
}

float Nightingale::getSlidingWinScore(std::vector<int> *a1, const std::vector<int> *a2, float a3)
{
  float v3 = a3;
  uint64_t MeanDiffOf2Windows = Nightingale::getMeanDiffOf2Windows(a1, a2, a3);
  if ((MeanDiffOf2Windows & 0xFF00000000) != 0) {
    return 1.0 / (float)(expf(-*(float *)&MeanDiffOf2Windows) + 1.0);
  }
  return v3;
}

float Nightingale::getSmoothedPow_aSample(float **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  float v3 = **a1;
  float result = -1.0;
  if (v3 != -1.0)
  {
    float v5 = v2[1];
    if (v5 != -1.0)
    {
      float v6 = v2[2];
      if (v6 != -1.0)
      {
        float v7 = (float)(v5 * *(float *)(*(void *)a2 + 4)) + (float)(v3 * **(float **)a2);
        return (float)(v7 + (float)(v6 * *(float *)(*(void *)a2 + 8)))
             * (float)(v7 + (float)(v6 * *(float *)(*(void *)a2 + 8)));
      }
    }
  }
  return result;
}

uint64_t Nightingale::getMissingCnt(float **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    float v4 = *v1++;
    if (v4 >= 0.0) {
      uint64_t result = result;
    }
    else {
      uint64_t result = (result + 1);
    }
  }
  while (v1 != v2);
  return result;
}

BOOL Nightingale::passMissingRateASlice(float **a1, double a2, float a3)
{
  float v3 = a1[1];
  if (*a1 == v3) {
    return 0;
  }
  int v4 = 0;
  float v5 = *a1;
  do
  {
    float v6 = *v5++;
    if (v6 < 0.0) {
      ++v4;
    }
  }
  while (v5 != v3);
  return (float)((float)(unint64_t)(v3 - *a1) * a3) >= (float)v4;
}

uint64_t Nightingale::checkNumTmpSwitches(float **a1, int a2, float a3)
{
  float v3 = *a1;
  int v4 = a1[1];
  if (*a1 == v4) {
    return 0;
  }
  int v5 = 0;
  float v6 = *v3;
  while (1)
  {
    float v7 = v6;
    float v6 = *v3;
    if (vabds_f32(*v3, v7) >= a3) {
      break;
    }
LABEL_6:
    if (++v3 == v4) {
      return 0;
    }
  }
  if (v5 < a2)
  {
    ++v5;
    goto LABEL_6;
  }
  return 1;
}

long double Nightingale::gaussian_pdf(Nightingale *this, double a2, double a3, double a4)
{
  if (a4 != 0.0) {
    return 1.0 / sqrt(a4 * 6.28318531) * exp(-((a2 - a3) * (a2 - a3)) / (a4 + a4));
  }
  BOOL v4 = round(a3) == a2;
  long double result = 0.0;
  if (v4) {
    return 1.0;
  }
  return result;
}

long double Nightingale::gamma_pdf(Nightingale *this, long double a2, double a3, double a4)
{
  double v5 = a3 / a4;
  long double v6 = a3 * a3 / a4;
  double v7 = pow(a3 / a4, v6);
  long double v8 = v7 * pow(a2, v6 + -1.0);
  long double v9 = exp(-(v5 * a2)) * v8;
  return v9 / tgamma(v6);
}

void Nightingale::get_cdf(float **a1, uint64_t a2, char a3)
{
  long double v6 = *a1;
  double v5 = a1[1];
  unint64_t v7 = v5 - *a1;
  long double v8 = *(float **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  if (a3)
  {
    long double v9 = a1[1];
    double v10 = 0.0;
    if (v6 != v9)
    {
      double v11 = v6;
      do
      {
        float v12 = *v11++;
        double v10 = v10 + v12;
      }
      while (v11 != v9);
    }
    if (v5 != v6)
    {
      uint64_t v13 = 0;
      int v14 = (void *)(a2 + 16);
      if (v7 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = v7;
      }
      do
      {
        float v16 = v10;
        if ((unint64_t)v8 >= *v14)
        {
          float v18 = *(float **)a2;
          uint64_t v19 = ((uint64_t)v8 - *(void *)a2) >> 2;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62) {
            goto LABEL_50;
          }
          uint64_t v21 = *v14 - (void)v18;
          if (v21 >> 1 > v20) {
            unint64_t v20 = v21 >> 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            long long v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a2 + 16, v22);
            float v18 = *(float **)a2;
            long double v8 = *(float **)(a2 + 8);
          }
          else
          {
            long long v23 = 0;
          }
          uint64_t v24 = (float *)&v23[4 * v19];
          float *v24 = v16;
          std::vector<int> v17 = v24 + 1;
          while (v8 != v18)
          {
            int v25 = *((_DWORD *)v8-- - 1);
            *((_DWORD *)v24-- - 1) = v25;
          }
          *(void *)a2 = v24;
          *(void *)(a2 + 8) = v17;
          *(void *)(a2 + 16) = &v23[4 * v22];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          float *v8 = v16;
          std::vector<int> v17 = v8 + 1;
        }
        float v26 = (*a1)[v13];
        *(void *)(a2 + 8) = v17;
        double v10 = v10 - v26;
        ++v13;
        long double v8 = v17;
      }
      while (v13 != v15);
    }
  }
  else if (v5 != v6)
  {
    uint64_t v27 = 0;
    char v28 = (void *)(a2 + 16);
    if (v7 <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v7;
    }
    double v30 = 0.0;
    do
    {
      double v30 = v30 + (*a1)[v27];
      float v31 = v30;
      if ((unint64_t)v8 >= *v28)
      {
        char v33 = *(float **)a2;
        uint64_t v34 = ((uint64_t)v8 - *(void *)a2) >> 2;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62) {
LABEL_50:
        }
          abort();
        uint64_t v36 = *v28 - (void)v33;
        if (v36 >> 1 > v35) {
          unint64_t v35 = v36 >> 1;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37)
        {
          int v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a2 + 16, v37);
          char v33 = *(float **)a2;
          long double v8 = *(float **)(a2 + 8);
        }
        else
        {
          int v38 = 0;
        }
        uint64_t v39 = (float *)&v38[4 * v34];
        *uint64_t v39 = v31;
        char v32 = v39 + 1;
        while (v8 != v33)
        {
          int v40 = *((_DWORD *)v8-- - 1);
          *((_DWORD *)v39-- - 1) = v40;
        }
        *(void *)a2 = v39;
        *(void *)(a2 + 8) = v32;
        *(void *)(a2 + 16) = &v38[4 * v37];
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        float *v8 = v31;
        char v32 = v8 + 1;
      }
      *(void *)(a2 + 8) = v32;
      ++v27;
      long double v8 = v32;
    }
    while (v27 != v29);
  }
}

double Nightingale::get_mad(std::vector<int> *__x, int a2)
{
  int64_t v2 = (char *)__x->__end_ - (char *)__x->__begin_;
  if (!v2) {
    return 0.0;
  }
  unint64_t v4 = v2 >> 2;
  if (a2)
  {
    std::vector<int>::vector(&v39, __x);
    if (v39.__end_ == v39.__begin_)
    {
      double v8 = 0.0;
      if (!v39.__begin_) {
        goto LABEL_8;
      }
    }
    else
    {
      double v5 = 0.0;
      std::vector<int>::pointer begin = v39.__begin_;
      do
      {
        float v7 = *(float *)begin++;
        double v5 = v5 + v7;
      }
      while (begin != v39.__end_);
      double v8 = v5 / (double)(unint64_t)(v39.__end_ - v39.__begin_);
      if (!v39.__begin_)
      {
LABEL_8:
        std::vector<int>::pointer v9 = __x->__begin_;
        if (v4 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v4;
        }
        double v11 = 0.0;
        do
        {
          float v12 = *(float *)v9++;
          double v11 = v11 + vabdd_f64(v12, v8);
          --v10;
        }
        while (v10);
        return v11 / (double)v4;
      }
    }
    v39.__end_ = v39.__begin_;
    operator delete(v39.__begin_);
    goto LABEL_8;
  }
  std::vector<int>::vector(&v38, __x);
  double v14 = Nightingale::vMedian((float **)&v38);
  if (v38.__begin_)
  {
    v38.__end_ = v38.__begin_;
    operator delete(v38.__begin_);
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = 0;
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  do
  {
    float v17 = *(float *)&__x->__begin_[v16] - v14;
    float v18 = fabsf(v17);
    if (v15 >= v37)
    {
      uint64_t v19 = (float *)__p;
      uint64_t v20 = ((char *)v15 - (unsigned char *)__p) >> 2;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        abort();
      }
      uint64_t v22 = (char *)v37 - (unsigned char *)__p;
      if (((char *)v37 - (unsigned char *)__p) >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        uint64_t v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v37, v23);
        uint64_t v19 = (float *)__p;
        uint64_t v15 = v36;
      }
      else
      {
        uint64_t v24 = 0;
      }
      int v25 = (float *)&v24[4 * v20];
      float *v25 = v18;
      float v26 = v25 + 1;
      while (v15 != v19)
      {
        int v27 = *((_DWORD *)v15-- - 1);
        *((_DWORD *)v25-- - 1) = v27;
      }
      std::vector<int> __p = v25;
      uint64_t v36 = v26;
      unint64_t v37 = (float *)&v24[4 * v23];
      if (v19) {
        operator delete(v19);
      }
      uint64_t v15 = v26;
    }
    else
    {
      *v15++ = v18;
    }
    uint64_t v36 = v15;
    ++v16;
  }
  while (v16 != v4);
  char v28 = __p;
  __dst = 0;
  uint64_t v34 = 0;
  char v32 = 0;
  int64_t v29 = (char *)v15 - (unsigned char *)__p;
  if (v15 != __p)
  {
    std::vector<int>::__vallocate[abi:nn180100](&v32, v29 >> 2);
    double v30 = (char *)__dst;
    memmove(__dst, v28, v29);
    __dst = &v30[v29];
  }
  double v13 = Nightingale::vMedian((float **)&v32);
  if (v32)
  {
    __dst = v32;
    operator delete(v32);
  }
  if (__p)
  {
    uint64_t v36 = (float *)__p;
    operator delete(__p);
  }
  return v13;
}

double Nightingale::vMean(float **a1)
{
  int64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 0.0;
  }
  double v3 = 0.0;
  do
  {
    float v4 = *v2++;
    double v3 = v3 + v4;
  }
  while (v2 != v1);
  return v3 / (double)(unint64_t)(v1 - *a1);
}

double Nightingale::vMedian(float **a1)
{
  int64_t v2 = *a1;
  double v3 = a1[1];
  uint64_t v5 = (char *)v3 - (char *)v2;
  if (v3 == v2) {
    return 0.0;
  }
  unint64_t v6 = (unint64_t)(v5 >> 2) >> 1;
  float v7 = &v2[v6 + 1];
  if (v2 != v7)
  {
    std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v2, v7, v3, (uint64_t)&v10);
    int64_t v2 = *a1;
    uint64_t v5 = (char *)a1[1] - (char *)*a1;
  }
  if ((v5 & 4) != 0) {
    return v2[v6];
  }
  else {
    return (float)((float)(v2[v6 - 1] + v2[v6]) * 0.5);
  }
}

void Nightingale::vVar(std::vector<int> *__x)
{
  if (__x->__end_ == __x->__begin_) {
    return;
  }
  std::vector<int>::vector(&v12, __x);
  if (v12.__end_ == v12.__begin_)
  {
    double v5 = 0.0;
    if (v12.__begin_)
    {
LABEL_6:
      v12.__end_ = v12.__begin_;
      operator delete(v12.__begin_);
    }
  }
  else
  {
    double v2 = 0.0;
    std::vector<int>::pointer begin = v12.__begin_;
    do
    {
      float v4 = *(float *)begin++;
      double v2 = v2 + v4;
    }
    while (begin != v12.__end_);
    double v5 = v2 / (double)(unint64_t)(v12.__end_ - v12.__begin_);
    if (v12.__begin_) {
      goto LABEL_6;
    }
  }
  std::vector<int>::pointer v7 = __x->__begin_;
  std::vector<int>::pointer end = __x->__end_;
  uint64_t v8 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    if ((unint64_t)(v8 >> 2) <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8 >> 2;
    }
    double v10 = 0.0;
    do
    {
      float v11 = *(float *)v7++;
      double v10 = v10 + (v11 - v5) * (v11 - v5);
      --v9;
    }
    while (v9);
  }
}

void Nightingale::convolve(void *a1, float **a2, uint64_t a3)
{
  uint64_t v3 = (a1[1] - *a1) >> 2;
  double v5 = *a2;
  float v4 = a2[1];
  unint64_t v6 = *(float **)a3;
  *(void *)(a3 + 8) = *(void *)a3;
  if (v3)
  {
    unsigned int v10 = 0;
    unint64_t v11 = (unint64_t)((char *)v4 - (char *)v5) >> 2;
    std::vector<int> v12 = (void *)(a3 + 16);
    unint64_t v13 = 1;
    do
    {
      unsigned int v14 = v10 + 1;
      if (v13 >= v11) {
        unint64_t v15 = v11;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v14 < v11) {
        unsigned int v16 = v10 + 1;
      }
      else {
        unsigned int v16 = v11;
      }
      if (v16)
      {
        float v17 = *a2;
        double v18 = 0.0;
        do
        {
          float v19 = *v17++;
          double v18 = v18 + (float)(*(float *)(*a1 + 4 * v10--) * v19);
          --v15;
        }
        while (v15);
      }
      else
      {
        double v18 = 0.0;
      }
      float v20 = v18;
      if ((unint64_t)v6 >= *v12)
      {
        uint64_t v22 = *(float **)a3;
        uint64_t v23 = ((uint64_t)v6 - *(void *)a3) >> 2;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62) {
          abort();
        }
        uint64_t v25 = *v12 - (void)v22;
        if (v25 >> 1 > v24) {
          unint64_t v24 = v25 >> 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          int v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)v12, v26);
          uint64_t v22 = *(float **)a3;
          unint64_t v6 = *(float **)(a3 + 8);
        }
        else
        {
          int v27 = 0;
        }
        char v28 = (float *)&v27[4 * v23];
        *char v28 = v20;
        unint64_t v21 = v28 + 1;
        while (v6 != v22)
        {
          int v29 = *((_DWORD *)v6-- - 1);
          *((_DWORD *)v28-- - 1) = v29;
        }
        *(void *)a3 = v28;
        *(void *)(a3 + 8) = v21;
        *(void *)(a3 + 16) = &v27[4 * v26];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *unint64_t v6 = v20;
        unint64_t v21 = v6 + 1;
      }
      *(void *)(a3 + 8) = v21;
      ++v13;
      unint64_t v6 = v21;
      unsigned int v10 = v14;
    }
    while (v14 != v3);
  }
}

void Nightingale::convolve_on_top(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = *(float **)a3;
  *(void *)(a3 + 8) = *(void *)a3;
  uint64_t v7 = v4 - v5;
  if (v7)
  {
    uint64_t v11 = v7 >> 2;
    std::vector<int> v12 = (void *)(a3 + 16);
    if ((unint64_t)(v7 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v7 >> 2;
    }
    if (a4)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      unint64_t v16 = v7 >> 2;
      do
      {
        uint64_t v17 = v11 - v15;
        double v18 = *(float **)a2;
        unint64_t v19 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
        if (v19 < v11 - v15) {
          uint64_t v17 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
        }
        if (v17)
        {
          if (v19 >= v16) {
            unint64_t v19 = v16;
          }
          float v20 = (float *)(*a1 + v14);
          double v21 = 0.0;
          do
          {
            float v22 = *v20++;
            float v23 = v22;
            float v24 = *v18++;
            double v21 = v21 + (float)(v23 * v24);
            --v19;
          }
          while (v19);
        }
        else
        {
          double v21 = 0.0;
        }
        float v25 = v21;
        if ((unint64_t)v6 >= *v12)
        {
          int v27 = *(float **)a3;
          uint64_t v28 = ((uint64_t)v6 - *(void *)a3) >> 2;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62) {
            goto LABEL_63;
          }
          uint64_t v30 = *v12 - (void)v27;
          if (v30 >> 1 > v29) {
            unint64_t v29 = v30 >> 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            char v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)v12, v31);
            int v27 = *(float **)a3;
            unint64_t v6 = *(float **)(a3 + 8);
          }
          else
          {
            char v32 = 0;
          }
          char v33 = (float *)&v32[4 * v28];
          float *v33 = v25;
          unint64_t v26 = v33 + 1;
          while (v6 != v27)
          {
            int v34 = *((_DWORD *)v6-- - 1);
            *((_DWORD *)v33-- - 1) = v34;
          }
          *(void *)a3 = v33;
          *(void *)(a3 + 8) = v26;
          *(void *)(a3 + 16) = &v32[4 * v31];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *unint64_t v6 = v25;
          unint64_t v26 = v6 + 1;
        }
        ++v15;
        *(void *)(a3 + 8) = v26;
        --v16;
        v14 += 4;
        unint64_t v6 = v26;
      }
      while (v15 != v13);
    }
    else
    {
      uint64_t v35 = 0;
      unint64_t v36 = 0;
      unint64_t v37 = 1;
      do
      {
        unint64_t v38 = v36++;
        std::vector<int> v39 = *(float **)a2;
        unint64_t v40 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
        if (v40 >= v36) {
          uint64_t v41 = v38 + 1;
        }
        else {
          uint64_t v41 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
        }
        if (v41)
        {
          if (v40 >= v37) {
            unint64_t v40 = v37;
          }
          int v42 = (float *)(*a1 + v35);
          double v43 = 0.0;
          do
          {
            float v44 = *v42--;
            float v45 = v44;
            float v46 = *v39++;
            double v43 = v43 + (float)(v45 * v46);
            --v40;
          }
          while (v40);
        }
        else
        {
          double v43 = 0.0;
        }
        float v47 = v43;
        if ((unint64_t)v6 >= *v12)
        {
          int v49 = *(float **)a3;
          uint64_t v50 = ((uint64_t)v6 - *(void *)a3) >> 2;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62) {
LABEL_63:
          }
            abort();
          uint64_t v52 = *v12 - (void)v49;
          if (v52 >> 1 > v51) {
            unint64_t v51 = v52 >> 1;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            int v54 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)v12, v53);
            int v49 = *(float **)a3;
            unint64_t v6 = *(float **)(a3 + 8);
          }
          else
          {
            int v54 = 0;
          }
          __int16 v55 = (float *)&v54[4 * v50];
          *__int16 v55 = v47;
          int v48 = v55 + 1;
          while (v6 != v49)
          {
            int v56 = *((_DWORD *)v6-- - 1);
            *((_DWORD *)v55-- - 1) = v56;
          }
          *(void *)a3 = v55;
          *(void *)(a3 + 8) = v48;
          *(void *)(a3 + 16) = &v54[4 * v53];
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *unint64_t v6 = v47;
          int v48 = v6 + 1;
        }
        *(void *)(a3 + 8) = v48;
        ++v37;
        v35 += 4;
        unint64_t v6 = v48;
      }
      while (v36 != v13);
    }
  }
}

BOOL Nightingale::checkOffsetGetSegFromVector(Nightingale *this, int a2, int a3)
{
  return (int)this >= 0 && (int)this <= a3 && a2 >= (int)this && a2 <= a3;
}

uint64_t Nightingale::assertVectorOfVectors(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  double v2 = *(void **)(a1 + 8);
  if (*(void **)a1 != v2)
  {
    uint64_t v3 = v1[1];
    if (*v1 != v3)
    {
      uint64_t v4 = (int)((v3 - *v1) >> 2);
      while (1)
      {
        uint64_t v5 = v1[1];
        if (*v1 == v5 || v4 != (v5 - *v1) >> 2) {
          break;
        }
        v1 += 3;
        if (v1 == v2) {
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t Nightingale::getSubVecLenVecOfVecs(uint64_t a1)
{
  uint64_t result = Nightingale::assertVectorOfVectors(a1);
  if (result) {
    return (*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2;
  }
  return result;
}

unint64_t Nightingale::getFWFromPeriodStart(Nightingale *this)
{
  return (int)(float)((float)(int)this + -18.0) | ((unint64_t)(int)(float)((float)(int)this + -13.0) << 32);
}

unint64_t Nightingale::lutealPhaseCheck(Nightingale *this, float a2, float a3)
{
  float v3 = roundf(a2) - (float)(int)this;
  return ((int)a3 <= (int)v3) | ((unint64_t)COERCE_UNSIGNED_INT((float)(int)v3) << 32);
}

BOOL Nightingale::passLutealPhaseCheck(Nightingale *this, float a2, float a3)
{
  return (float)(roundf(a2) - (float)(int)this) >= (float)(int)a3;
}

unint64_t Nightingale::follicularPhaseCheck(Nightingale *this, int a2, int a3)
{
  BOOL v4 = (int)this >= a2 && (int)this <= a3;
  return v4 | ((unint64_t)COERCE_UNSIGNED_INT((float)(int)this) << 32);
}

uint64_t Nightingale::CGradient::CGradient(uint64_t this)
{
  *(_WORD *)(this + 32) = 0;
  *(unsigned char *)(this + 34) = 0;
  *(unsigned char *)(this + 36) = 0;
  *(unsigned char *)(this + 40) = 0;
  *(unsigned char *)(this + 44) = 0;
  *(unsigned char *)(this + 48) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = 0;
  return this;
}

{
  *(_WORD *)(this + 32) = 0;
  *(unsigned char *)(this + 34) = 0;
  *(unsigned char *)(this + 36) = 0;
  *(unsigned char *)(this + 40) = 0;
  *(unsigned char *)(this + 44) = 0;
  *(unsigned char *)(this + 48) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = 0;
  return this;
}

uint64_t Nightingale::CGradient::CGradient(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (a1 != a2) {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return a1;
}

void Nightingale::CGradient::set_delta_at(Nightingale::CGradient *this, uint64_t a2)
{
  uint64_t v5 = *(_DWORD **)this;
  uint64_t v4 = *((void *)this + 1);
  if (*(void *)this == v4)
  {
    if (a2 != -1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = (void *)((char *)this + 16);
      do
      {
        if ((unint64_t)v5 >= *v7)
        {
          uint64_t v9 = *(_DWORD **)this;
          uint64_t v10 = ((uint64_t)v5 - *(void *)this) >> 2;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62) {
            abort();
          }
          uint64_t v12 = *v7 - (void)v9;
          if (v12 >> 1 > v11) {
            unint64_t v11 = v12 >> 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)this + 16, v13);
            uint64_t v9 = *(_DWORD **)this;
            uint64_t v5 = (_DWORD *)*((void *)this + 1);
          }
          else
          {
            uint64_t v14 = 0;
          }
          uint64_t v15 = &v14[4 * v10];
          *(_DWORD *)uint64_t v15 = 0;
          uint64_t v8 = v15 + 4;
          while (v5 != v9)
          {
            int v16 = *--v5;
            *((_DWORD *)v15 - 1) = v16;
            v15 -= 4;
          }
          *(void *)this = v15;
          *((void *)this + 1) = v8;
          *((void *)this + 2) = &v14[4 * v13];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          _DWORD *v5 = 0;
          uint64_t v8 = v5 + 1;
        }
        *((void *)this + 1) = v8;
        uint64_t v5 = v8;
      }
      while (v6++ != a2);
    }
  }
  else
  {
    int v18 = 0;
    std::vector<float>::assign((char **)this, (v4 - (uint64_t)v5) >> 2, &v18);
  }
  *(_DWORD *)(*(void *)this + 4 * a2) = 1065353216;
  *((unsigned char *)this + 32) = 1;
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    unint64_t v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 2;
    }
    if (v15)
    {
      int v16 = result;
      do
      {
        *(_DWORD *)int v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      uint64_t v17 = &v13[4 * (a2 - v14)];
      uint64_t v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)unint64_t v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62) {
      abort();
    }
    uint64_t v8 = v6 >> 1;
    if (v6 >> 1 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = std::vector<int>::__vallocate[abi:nn180100](a1, v9);
    uint64_t v10 = a1[1];
    unint64_t v11 = &v10[4 * a2];
    uint64_t v12 = 4 * a2;
    do
    {
      *(_DWORD *)uint64_t v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void Nightingale::CGradient::push_back(Nightingale::CGradient *this, double a2)
{
  float v3 = (float *)*((void *)this + 1);
  if (*((unsigned char *)this + 32))
  {
    uint64_t v4 = *(float **)this;
    if (v3 != *(float **)this)
    {
      unint64_t v5 = ((uint64_t)v3 - *(void *)this) >> 2;
      double v6 = *((double *)this + 3);
      if (v5 <= 1) {
        unint64_t v5 = 1;
      }
      do
      {
        float v7 = v6 * *v4;
        *v4++ = v7;
        --v5;
      }
      while (v5);
    }
    *((unsigned char *)this + 32) = 0;
  }
  float v8 = a2;
  unint64_t v9 = *((void *)this + 2);
  if ((unint64_t)v3 >= v9)
  {
    unint64_t v11 = *(float **)this;
    uint64_t v12 = ((uint64_t)v3 - *(void *)this) >> 2;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62) {
      abort();
    }
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      int v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)this + 16, v15);
      unint64_t v11 = *(float **)this;
      float v3 = (float *)*((void *)this + 1);
    }
    else
    {
      int v16 = 0;
    }
    uint64_t v17 = (float *)&v16[4 * v12];
    uint64_t v18 = &v16[4 * v15];
    float *v17 = v8;
    uint64_t v10 = v17 + 1;
    while (v3 != v11)
    {
      int v19 = *((_DWORD *)v3-- - 1);
      *((_DWORD *)v17-- - 1) = v19;
    }
    *(void *)this = v17;
    *((void *)this + 1) = v10;
    *((void *)this + 2) = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    float *v3 = v8;
    uint64_t v10 = v3 + 1;
  }
  *((void *)this + 1) = v10;
}

void Nightingale::CGradient::annihilateEarly(char **this, unint64_t a2)
{
  float v3 = *this;
  if (a2 <= (this[1] - v3) >> 2)
  {
    if (a2) {
      bzero(v3, 4 * a2);
    }
  }
  else
  {
    int v5 = 0;
    std::vector<float>::assign(this, a2, &v5);
  }
  *((unsigned char *)this + 32) = 0;
}

uint64_t Nightingale::CGradient::normalize(uint64_t this)
{
  if (!*(unsigned char *)(this + 32))
  {
    uint64_t v1 = *(float **)this;
    double v2 = *(float **)(this + 8);
    if (*(float **)this == v2)
    {
      *(void *)(this + 24) = 0;
    }
    else
    {
      double v3 = 0.0;
      uint64_t v4 = *(float **)this;
      do
      {
        float v5 = *v4++;
        double v3 = v3 + v5;
      }
      while (v4 != v2);
      *(double *)(this + 24) = v3;
      if (v3 > 0.0)
      {
        unint64_t v6 = v2 - v1;
        if (v6 <= 1) {
          unint64_t v6 = 1;
        }
        do
        {
          float v7 = *v1 / v3;
          *v1++ = v7;
          --v6;
        }
        while (v6);
      }
    }
    *(unsigned char *)(this + 32) = 1;
  }
  return this;
}

std::vector<int> *Nightingale::CGradient::get_list_reference@<X0>(std::vector<int> *__x@<X0>, std::vector<int> *a2@<X8>)
{
  return std::vector<int>::vector(a2, __x);
}

char *Nightingale::CGradient::set_vGrad(char *result, uint64_t a2)
{
  double v2 = result;
  if (result != (char *)a2) {
    uint64_t result = std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  v2[32] = 0;
  return result;
}

uint64_t Nightingale::CGradient::get_isNull(Nightingale::CGradient *this)
{
  return *((unsigned __int8 *)this + 33);
}

uint64_t Nightingale::CGradient::get_adjusted(Nightingale::CGradient *this)
{
  return *((unsigned __int8 *)this + 34);
}

uint64_t Nightingale::CGradient::set_isNull_if_grad_allZeros(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  if (*(void *)this == v1)
  {
    BOOL v4 = 1;
  }
  else
  {
    uint64_t v2 = *(void *)this + 4;
    do
    {
      float v3 = fabsf(*(float *)(v2 - 4));
      BOOL v4 = v3 < 1.0e-12;
      BOOL v5 = v3 >= 1.0e-12 || v2 == v1;
      v2 += 4;
    }
    while (!v5);
  }
  *(unsigned char *)(this + 33) = v4;
  return this;
}

double Nightingale::CGradient::get_expectation(float **this)
{
  uint64_t v2 = *this;
  uint64_t v1 = this[1];
  if (v1 == *this)
  {
    double v5 = 0.0;
    double v6 = 0.0;
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v4 = v1 - *this;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    double v5 = 0.0;
    do
    {
      double v5 = v5 + (float)(v2[v3] * (float)v3);
      ++v3;
    }
    while (v4 != v3);
    double v6 = 0.0;
    do
    {
      float v7 = *v2++;
      double v6 = v6 + v7;
    }
    while (v2 != v1);
  }
  if (v6 <= 0.0) {
    double v6 = 1.0;
  }
  return v5 / v6;
}

double Nightingale::CGradient::get_variance(float **this)
{
  double expectation = Nightingale::CGradient::get_expectation(this);
  unint64_t v3 = this[1];
  uint64_t v4 = (char *)v3 - (char *)*this;
  if (v3 == *this) {
    return 0.0;
  }
  unint64_t v5 = 0;
  unint64_t v6 = v4 >> 2;
  if (v6 <= 1) {
    unint64_t v6 = 1;
  }
  double v7 = 0.0;
  do
  {
    double v7 = v7 + ((double)v5 - expectation) * ((double)v5 - expectation) * (*this)[v5];
    ++v5;
  }
  while (v6 != v5);
  return v7;
}

double Nightingale::CGradient::get_std(float **this)
{
  return sqrt(Nightingale::CGradient::get_variance(this));
}

BOOL Nightingale::CGradient::get_vGrad_empty(Nightingale::CGradient *this)
{
  return *(void *)this == *((void *)this + 1);
}

uint64_t Nightingale::CGradient::get_vGrad_len(Nightingale::CGradient *this)
{
  return (*((void *)this + 1) - *(void *)this) >> 2;
}

float Nightingale::cumsum@<S0>(std::vector<int> *__x@<X0>, std::vector<int> *a2@<X8>)
{
  unint64_t v3 = std::vector<int>::vector(a2, __x);
  if (__x->__begin_ != __x->__end_)
  {
    uint64_t v5 = (char *)v3->__end_ - (char *)v3->__begin_;
    if ((unint64_t)v5 >= 5)
    {
      unint64_t v6 = v5 >> 2;
      uint64_t v7 = 2;
      if (v6 > 2) {
        uint64_t v7 = v6;
      }
      float v8 = (float *)(v3->__begin_ + 1);
      uint64_t v9 = v7 - 1;
      do
      {
        if (!v6) {
          abort();
        }
        float result = *(v8 - 1) + *v8;
        *v8++ = result;
        --v6;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

unint64_t Nightingale::argquantile(std::vector<int> *a1, float a2)
{
  Nightingale::cumsum(a1, &__p);
  if (a1->__begin_ == a1->__end_ || __p.__begin_ == __p.__end_)
  {
    float v11 = 0.0;
    uint64_t v12 = 1;
    if (!__p.__begin_) {
      return v12 | ((unint64_t)LODWORD(v11) << 32);
    }
  }
  else
  {
    std::vector<int>::pointer begin = __p.__begin_;
    while (*(float *)begin < a2)
    {
      if (++begin == __p.__end_)
      {
        std::vector<int>::pointer begin = __p.__end_;
        break;
      }
    }
    uint64_t v5 = (char *)begin - (char *)__p.__begin_;
    unint64_t v6 = (unint64_t)v5 >> 2;
    unint64_t v7 = __p.__end_ - __p.__begin_;
    if (v7 <= (int)((unint64_t)v5 >> 2) || (int v8 = v6 - 1, v7 <= (int)v6 - 1)) {
      abort();
    }
    float v9 = *(float *)&__p.__begin_[(int)(v5 >> 2)];
    float v10 = *(float *)&__p.__begin_[v8];
    if (v9 == v10)
    {
      float v11 = 0.0;
      uint64_t v12 = 1;
    }
    else
    {
      uint64_t v12 = 0;
      float v11 = (float)((float)(a2 - v10) / (float)(v9 - v10)) + (float)v8;
    }
  }
  __p.__end_ = __p.__begin_;
  operator delete(__p.__begin_);
  return v12 | ((unint64_t)LODWORD(v11) << 32);
}

float Nightingale::getPercentile(uint64_t *a1, int a2, float a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = ((v4 - *a1) >> 2) - 1;
  float v6 = (float)(unint64_t)v5 * a3;
  if (a2)
  {
    int v7 = (int)v6;
    float v8 = v6 - (float)(int)v6;
    if (v8 == 0.0) {
      return *(float *)(v3 + 4 * v7);
    }
    else {
      return *(float *)(v3 + 4 * v7)
    }
           + (float)((float)(*(float *)(v3 + 4 * v7 + 4) - *(float *)(v3 + 4 * v7)) * v8);
  }
  else
  {
    unint64_t v10 = (unint64_t)((1.0 - a3) * (double)(unint64_t)v5);
    float result = *(float *)(v3 + 4 * (unint64_t)v6);
    float v11 = *(float *)(v4 - 4 * v10 - 4);
    if (result != v11) {
      return (float)(result + v11) * 0.5;
    }
  }
  return result;
}

uint64_t *Nightingale::removeNANFromVector(uint64_t *result)
{
  uint64_t v2 = *result;
  uint64_t v1 = result[1];
  if (*result != v1)
  {
    do
      v2 += 4;
    while (v2 != v1);
  }
  return result;
}

uint64_t Nightingale::getIdxOfDailyInFromJDay(uint64_t a1, int a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  uint64_t v3 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 == v3 || *(v3 - 15) < a2)
  {
LABEL_6:
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    int v7 = 0;
  }
  else
  {
    int v4 = 0;
    while (*v2 != a2)
    {
      ++v4;
      v2 += 15;
      if (v2 == v3) {
        goto LABEL_6;
      }
    }
    int v7 = v4 & 0x7FFFFF00;
    unsigned int v6 = v4;
    uint64_t v5 = 0x100000000;
  }
  return v5 | v7 | v6;
}

uint64_t Nightingale::getIdxOfDailyInGreaterThanJayDay(uint64_t a1, int a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  uint64_t v3 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 == v3 || *(v3 - 15) < a2)
  {
LABEL_6:
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    int v7 = 0;
  }
  else
  {
    int v4 = 0;
    while (*v2 < a2)
    {
      ++v4;
      v2 += 15;
      if (v2 == v3) {
        goto LABEL_6;
      }
    }
    int v7 = v4 & 0x7FFFFF00;
    unsigned int v6 = v4;
    uint64_t v5 = 0x100000000;
  }
  return v5 | v7 | v6;
}

float *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unsigned int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      unint64_t v13 = v6;
      do
      {
        float v14 = *v13;
        if (*v13 < *a1)
        {
          float *v13 = *a1;
          *a1 = v14;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((uint64_t)a1, a4, v9, a1);
        }
        ++v13;
      }
      while (v13 != a3);
    }
    if (v8 >= 5)
    {
      uint64_t v15 = (unint64_t)v8 >> 2;
      do
      {
        uint64_t v16 = 0;
        float v17 = *a1;
        uint64_t v18 = a1;
        do
        {
          int v19 = v18;
          v18 += v16 + 1;
          uint64_t v20 = 2 * v16;
          uint64_t v16 = (2 * v16) | 1;
          uint64_t v21 = v20 + 2;
          if (v21 < v15 && *v18 < v18[1])
          {
            ++v18;
            uint64_t v16 = v21;
          }
          float *v19 = *v18;
        }
        while (v16 <= (uint64_t)((unint64_t)(v15 - 2) >> 1));
        if (v18 != --v6)
        {
          *uint64_t v18 = *v6;
          *unsigned int v6 = v17;
          uint64_t v22 = (char *)v18 - (char *)a1 + 4;
          if (v22 < 5) {
            continue;
          }
          unint64_t v23 = (((unint64_t)v22 >> 2) - 2) >> 1;
          float v24 = &a1[v23];
          float v25 = *v24;
          float v17 = *v18;
          if (*v24 >= *v18) {
            continue;
          }
          do
          {
            *uint64_t v18 = v25;
            uint64_t v18 = v24;
            if (!v23) {
              break;
            }
            unint64_t v23 = (v23 - 1) >> 1;
            float v24 = &a1[v23];
            float v25 = *v24;
          }
          while (*v24 < v17);
        }
        *uint64_t v18 = v17;
      }
      while (v15-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) | 1;
      uint64_t v8 = (float *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[1])
      {
        ++v8;
        uint64_t v7 = v9;
      }
      float v10 = *v8;
      float v11 = *a4;
      if (*v8 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v12 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (float *)(result + 4 * v7);
          uint64_t v13 = v12 + 2;
          if (v13 < a3 && *v8 < v8[1])
          {
            ++v8;
            uint64_t v7 = v13;
          }
          float v10 = *v8;
        }
        while (*v8 >= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

unsigned char *Nightingale::heartRateInputAcquisition::heartRateInputAcquisition(Nightingale::heartRateInputAcquisition *this)
{
  float result = (unsigned char *)Nightingale::sensorInputProcessBase::sensorInputProcessBase(this);
  unsigned char *result = 0;
  result[4] = 0;
  result[8] = 0;
  result[12] = 0;
  return result;
}

{
  unsigned char *result;

  float result = (unsigned char *)Nightingale::sensorInputProcessBase::sensorInputProcessBase(this);
  unsigned char *result = 0;
  result[4] = 0;
  result[8] = 0;
  result[12] = 0;
  return result;
}

void Nightingale::heartRateInputAcquisition::acquireSlicesFwDayStream(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DailyJDayIdx1stHr = Nightingale::heartRateInputAcquisition::getDailyJDayIdx1stHr(a1, (uint64_t)a2);
  *(_DWORD *)a1 = DailyJDayIdx1stHr;
  *(unsigned char *)(a1 + 4) = BYTE4(DailyJDayIdx1stHr);
  *(_DWORD *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 12) = BYTE4(v11);
  if ((DailyJDayIdx1stHr & 0xFF00000000) != 0 && (v11 & 0xFF00000000) != 0)
  {
    uint64_t JDayHrSlicesStartEnd = Nightingale::heartRateInputAcquisition::getJDayHrSlicesStartEnd(a1, a3, a4);
    if ((JDayHrSlicesStartEnd & 0xFF00000000) != 0 && (v13 & 0xFF00000000) != 0)
    {
      Nightingale::heartRateInputAcquisition::acquireSlicesJDayRange(a1, a2, JDayHrSlicesStartEnd, v13, a5);
    }
  }
}

uint64_t Nightingale::heartRateInputAcquisition::getDailyJDayIdx1stHr(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a2;
  uint64_t v3 = *(unsigned char **)(a2 + 8);
  if (*(unsigned char **)a2 == v3)
  {
LABEL_8:
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    int v4 = 0;
    while ((!v2[20] || !v2[36]) && (!v2[28] || !v2[44]))
    {
      ++v4;
      v2 += 60;
      if (v2 == v3) {
        goto LABEL_8;
      }
    }
    uint64_t v6 = *(unsigned int *)v2;
    uint64_t v5 = 0x100000000;
  }
  return v6 | v5;
}

uint64_t Nightingale::heartRateInputAcquisition::getJDayHrSlicesStartEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0xFF00000000) != 0 && *(unsigned char *)(a1 + 4) && *(unsigned char *)(a1 + 12))
  {
    if ((int)a3 <= 39) {
      int v3 = 39;
    }
    else {
      int v3 = a3;
    }
    int v4 = v3 - 39;
    if (v4 <= *(_DWORD *)a1) {
      int v4 = *(_DWORD *)a1;
    }
    uint64_t v5 = v4 & 0x7FFFFF00;
    uint64_t v6 = v4;
    uint64_t v7 = 0x100000000;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  return v6 | v5 | v7;
}

void Nightingale::heartRateInputAcquisition::acquireSlicesJDayRange(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5)
{
  uint64_t IdxOfDailyInGreaterThanJayDay = Nightingale::getIdxOfDailyInGreaterThanJayDay((uint64_t)a2, a3);
  uint64_t IdxOfDailyInFromJDay = Nightingale::getIdxOfDailyInFromJDay((uint64_t)a2, a4);
  if ((IdxOfDailyInGreaterThanJayDay & 0xFF00000000) != 0 && *(unsigned char *)(a1 + 12))
  {
    if ((IdxOfDailyInFromJDay & 0xFF00000000) == 0) {
      LODWORD(IdxOfDailyInFromJDay) = -286331153 * ((unint64_t)(a2[1] - *a2) >> 2) - 1;
    }
    int v11 = *(_DWORD *)(a1 + 8) <= (int)IdxOfDailyInGreaterThanJayDay
        ? IdxOfDailyInGreaterThanJayDay
        : *(_DWORD *)(a1 + 8);
    if (v11 <= (int)IdxOfDailyInFromJDay)
    {
      uint64_t v12 = *a2;
      unint64_t v13 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 2);
      if (v13 <= v11 || v13 <= (int)IdxOfDailyInFromJDay) {
LABEL_157:
      }
        abort();
      float v14 = (unsigned char *)(v12 + 60 * v11);
      int v15 = *(_DWORD *)v14;
      uint64_t v16 = (_DWORD *)(v12 + 60 * (int)IdxOfDailyInFromJDay);
      int v19 = *v16;
      float v17 = v16 + 15;
      int v18 = v19;
      if (v19 <= a4) {
        int v20 = a4;
      }
      else {
        int v20 = v18;
      }
      std::vector<Nightingale::ngt_DayInput>::vector<std::__wrap_iter<Nightingale::ngt_DayInput const*>,0>((uint64_t)&__p, v14, v17);
      __int16 v21 = v20 - v15;
      uint64_t v22 = __p;
      if (v20 - v15 >= 44 && __p != v147)
      {
        if (v20 >= v15)
        {
          __int16 v140 = v20 - v15;
          int v141 = v15;
          int v23 = 0;
          uint64_t v144 = a5 + 64;
          uint64_t v145 = a5 + 16;
          uint64_t v142 = a5 + 88;
          uint64_t v143 = a5 + 40;
          do
          {
            if (0xEEEEEEEEEEEEEEEFLL * ((v147 - (unsigned char *)__p) >> 2) > v23 && *((_DWORD *)__p + 15 * v23) == v15)
            {
              float v24 = (char *)__p + 60 * v23;
              uint64_t v25 = v24[2];
              uint64_t v26 = v24[3];
              uint64_t v28 = v24[4];
              uint64_t v27 = v24[5];
              uint64_t v30 = *(void **)(a5 + 8);
              unint64_t v29 = *(void *)(a5 + 16);
              if ((unint64_t)v30 >= v29)
              {
                uint64_t v87 = ((uint64_t)v30 - *(void *)a5) >> 3;
                if ((unint64_t)(v87 + 1) >> 61) {
                  goto LABEL_157;
                }
                uint64_t v88 = v29 - *(void *)a5;
                uint64_t v89 = v88 >> 2;
                if (v88 >> 2 <= (unint64_t)(v87 + 1)) {
                  uint64_t v89 = v87 + 1;
                }
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v90 = v89;
                }
                if (v90) {
                  uint64_t v91 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(v145, v90);
                }
                else {
                  uint64_t v91 = 0;
                }
                __int16 v92 = &v91[8 * v87];
                *(void *)__int16 v92 = v25;
                unint64_t v31 = v92 + 8;
                int v94 = *(unsigned char **)a5;
                __int16 v93 = *(unsigned char **)(a5 + 8);
                if (v93 != *(unsigned char **)a5)
                {
                  do
                  {
                    int v95 = *((_DWORD *)v93 - 2);
                    v93 -= 8;
                    char v96 = v93[4];
                    *((_DWORD *)v92 - 2) = v95;
                    v92 -= 8;
                    v92[4] = v96;
                  }
                  while (v93 != v94);
                  __int16 v93 = *(unsigned char **)a5;
                }
                *(void *)a5 = v92;
                *(void *)(a5 + 8) = v31;
                *(void *)(a5 + 16) = &v91[8 * v90];
                if (v93) {
                  operator delete(v93);
                }
              }
              else
              {
                *uint64_t v30 = v25;
                unint64_t v31 = v30 + 1;
              }
              *(void *)(a5 + 8) = v31;
              __int16 v98 = *(void **)(a5 + 56);
              unint64_t v97 = *(void *)(a5 + 64);
              if ((unint64_t)v98 >= v97)
              {
                uint64_t v100 = *(void *)(a5 + 48);
                uint64_t v101 = ((uint64_t)v98 - v100) >> 3;
                if ((unint64_t)(v101 + 1) >> 61) {
                  goto LABEL_157;
                }
                uint64_t v102 = v97 - v100;
                uint64_t v103 = v102 >> 2;
                if (v102 >> 2 <= (unint64_t)(v101 + 1)) {
                  uint64_t v103 = v101 + 1;
                }
                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v104 = v103;
                }
                if (v104) {
                  long long v105 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(v144, v104);
                }
                else {
                  long long v105 = 0;
                }
                long long v106 = &v105[8 * v101];
                *(void *)long long v106 = v28;
                __int16 v99 = v106 + 8;
                long long v108 = *(unsigned char **)(a5 + 48);
                uint64_t v107 = *(unsigned char **)(a5 + 56);
                if (v107 != v108)
                {
                  do
                  {
                    int v109 = *((_DWORD *)v107 - 2);
                    v107 -= 8;
                    char v110 = v107[4];
                    *((_DWORD *)v106 - 2) = v109;
                    v106 -= 8;
                    v106[4] = v110;
                  }
                  while (v107 != v108);
                  uint64_t v107 = *(unsigned char **)(a5 + 48);
                }
                *(void *)(a5 + 48) = v106;
                *(void *)(a5 + 56) = v99;
                *(void *)(a5 + 64) = &v105[8 * v104];
                if (v107) {
                  operator delete(v107);
                }
              }
              else
              {
                *__int16 v98 = v28;
                __int16 v99 = v98 + 1;
              }
              *(void *)(a5 + 56) = v99;
              long long v112 = *(void **)(a5 + 32);
              unint64_t v111 = *(void *)(a5 + 40);
              if ((unint64_t)v112 >= v111)
              {
                uint64_t v114 = *(void *)(a5 + 24);
                uint64_t v115 = ((uint64_t)v112 - v114) >> 3;
                if ((unint64_t)(v115 + 1) >> 61) {
                  goto LABEL_157;
                }
                uint64_t v116 = v111 - v114;
                uint64_t v117 = v116 >> 2;
                if (v116 >> 2 <= (unint64_t)(v115 + 1)) {
                  uint64_t v117 = v115 + 1;
                }
                if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v118 = v117;
                }
                if (v118) {
                  v119 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(v143, v118);
                }
                else {
                  v119 = 0;
                }
                v120 = &v119[8 * v115];
                *(void *)v120 = v26;
                long long v113 = v120 + 8;
                char v122 = *(unsigned char **)(a5 + 24);
                int v121 = *(unsigned char **)(a5 + 32);
                if (v121 != v122)
                {
                  do
                  {
                    int v123 = *((_DWORD *)v121 - 2);
                    v121 -= 8;
                    char v124 = v121[4];
                    *((_DWORD *)v120 - 2) = v123;
                    v120 -= 8;
                    v120[4] = v124;
                  }
                  while (v121 != v122);
                  int v121 = *(unsigned char **)(a5 + 24);
                }
                *(void *)(a5 + 24) = v120;
                *(void *)(a5 + 32) = v113;
                *(void *)(a5 + 40) = &v119[8 * v118];
                if (v121) {
                  operator delete(v121);
                }
              }
              else
              {
                *long long v112 = v26;
                long long v113 = v112 + 1;
              }
              *(void *)(a5 + 32) = v113;
              int v126 = *(void **)(a5 + 80);
              unint64_t v125 = *(void *)(a5 + 88);
              if ((unint64_t)v126 >= v125)
              {
                uint64_t v128 = *(void *)(a5 + 72);
                uint64_t v129 = ((uint64_t)v126 - v128) >> 3;
                if ((unint64_t)(v129 + 1) >> 61) {
                  goto LABEL_157;
                }
                uint64_t v130 = v125 - v128;
                uint64_t v131 = v130 >> 2;
                if (v130 >> 2 <= (unint64_t)(v129 + 1)) {
                  uint64_t v131 = v129 + 1;
                }
                if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v132 = v131;
                }
                if (v132) {
                  __int16 v133 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(v142, v132);
                }
                else {
                  __int16 v133 = 0;
                }
                char v134 = &v133[8 * v129];
                *(void *)char v134 = v27;
                char v127 = v134 + 8;
                int v136 = *(unsigned char **)(a5 + 72);
                int v135 = *(unsigned char **)(a5 + 80);
                if (v135 != v136)
                {
                  do
                  {
                    int v137 = *((_DWORD *)v135 - 2);
                    v135 -= 8;
                    char v138 = v135[4];
                    *((_DWORD *)v134 - 2) = v137;
                    v134 -= 8;
                    v134[4] = v138;
                  }
                  while (v135 != v136);
                  int v135 = *(unsigned char **)(a5 + 72);
                }
                *(void *)(a5 + 72) = v134;
                *(void *)(a5 + 80) = v127;
                *(void *)(a5 + 88) = &v133[8 * v132];
                if (v135) {
                  operator delete(v135);
                }
              }
              else
              {
                *int v126 = v27;
                char v127 = v126 + 1;
              }
              *(void *)(a5 + 80) = v127;
              ++v23;
            }
            else
            {
              char v33 = *(void **)(a5 + 8);
              unint64_t v32 = *(void *)(a5 + 16);
              if ((unint64_t)v33 >= v32)
              {
                uint64_t v35 = ((uint64_t)v33 - *(void *)a5) >> 3;
                if ((unint64_t)(v35 + 1) >> 61) {
                  goto LABEL_157;
                }
                uint64_t v36 = v32 - *(void *)a5;
                uint64_t v37 = v36 >> 2;
                if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
                  uint64_t v37 = v35 + 1;
                }
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v38 = v37;
                }
                if (v38) {
                  std::vector<int> v39 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(v145, v38);
                }
                else {
                  std::vector<int> v39 = 0;
                }
                unint64_t v40 = &v39[8 * v35];
                *(void *)unint64_t v40 = 0;
                int v34 = v40 + 8;
                int v42 = *(unsigned char **)a5;
                uint64_t v41 = *(unsigned char **)(a5 + 8);
                if (v41 != *(unsigned char **)a5)
                {
                  do
                  {
                    int v43 = *((_DWORD *)v41 - 2);
                    v41 -= 8;
                    char v44 = v41[4];
                    *((_DWORD *)v40 - 2) = v43;
                    v40 -= 8;
                    v40[4] = v44;
                  }
                  while (v41 != v42);
                  uint64_t v41 = *(unsigned char **)a5;
                }
                *(void *)a5 = v40;
                *(void *)(a5 + 8) = v34;
                *(void *)(a5 + 16) = &v39[8 * v38];
                if (v41) {
                  operator delete(v41);
                }
              }
              else
              {
                void *v33 = 0;
                int v34 = v33 + 1;
              }
              *(void *)(a5 + 8) = v34;
              float v46 = *(void **)(a5 + 56);
              unint64_t v45 = *(void *)(a5 + 64);
              if ((unint64_t)v46 >= v45)
              {
                uint64_t v48 = *(void *)(a5 + 48);
                uint64_t v49 = ((uint64_t)v46 - v48) >> 3;
                if ((unint64_t)(v49 + 1) >> 61) {
                  goto LABEL_157;
                }
                uint64_t v50 = v45 - v48;
                uint64_t v51 = v50 >> 2;
                if (v50 >> 2 <= (unint64_t)(v49 + 1)) {
                  uint64_t v51 = v49 + 1;
                }
                if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v52 = v51;
                }
                if (v52) {
                  unint64_t v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(v144, v52);
                }
                else {
                  unint64_t v53 = 0;
                }
                int v54 = &v53[8 * v49];
                *(void *)int v54 = 0;
                float v47 = v54 + 8;
                int v56 = *(unsigned char **)(a5 + 48);
                __int16 v55 = *(unsigned char **)(a5 + 56);
                if (v55 != v56)
                {
                  do
                  {
                    int v57 = *((_DWORD *)v55 - 2);
                    v55 -= 8;
                    char v58 = v55[4];
                    *((_DWORD *)v54 - 2) = v57;
                    v54 -= 8;
                    v54[4] = v58;
                  }
                  while (v55 != v56);
                  __int16 v55 = *(unsigned char **)(a5 + 48);
                }
                *(void *)(a5 + 48) = v54;
                *(void *)(a5 + 56) = v47;
                *(void *)(a5 + 64) = &v53[8 * v52];
                if (v55) {
                  operator delete(v55);
                }
              }
              else
              {
                *float v46 = 0;
                float v47 = v46 + 1;
              }
              *(void *)(a5 + 56) = v47;
              int v60 = *(void **)(a5 + 32);
              unint64_t v59 = *(void *)(a5 + 40);
              if ((unint64_t)v60 >= v59)
              {
                uint64_t v62 = *(void *)(a5 + 24);
                uint64_t v63 = ((uint64_t)v60 - v62) >> 3;
                if ((unint64_t)(v63 + 1) >> 61) {
                  goto LABEL_157;
                }
                uint64_t v64 = v59 - v62;
                uint64_t v65 = v64 >> 2;
                if (v64 >> 2 <= (unint64_t)(v63 + 1)) {
                  uint64_t v65 = v63 + 1;
                }
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v66 = v65;
                }
                if (v66) {
                  __int16 v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(v143, v66);
                }
                else {
                  __int16 v67 = 0;
                }
                int v68 = &v67[8 * v63];
                *(void *)int v68 = 0;
                __int16 v61 = v68 + 8;
                int v70 = *(unsigned char **)(a5 + 24);
                __int16 v69 = *(unsigned char **)(a5 + 32);
                if (v69 != v70)
                {
                  do
                  {
                    int v71 = *((_DWORD *)v69 - 2);
                    v69 -= 8;
                    char v72 = v69[4];
                    *((_DWORD *)v68 - 2) = v71;
                    v68 -= 8;
                    v68[4] = v72;
                  }
                  while (v69 != v70);
                  __int16 v69 = *(unsigned char **)(a5 + 24);
                }
                *(void *)(a5 + 24) = v68;
                *(void *)(a5 + 32) = v61;
                *(void *)(a5 + 40) = &v67[8 * v66];
                if (v69) {
                  operator delete(v69);
                }
              }
              else
              {
                *int v60 = 0;
                __int16 v61 = v60 + 1;
              }
              *(void *)(a5 + 32) = v61;
              int v74 = *(void **)(a5 + 80);
              unint64_t v73 = *(void *)(a5 + 88);
              if ((unint64_t)v74 >= v73)
              {
                uint64_t v76 = *(void *)(a5 + 72);
                uint64_t v77 = ((uint64_t)v74 - v76) >> 3;
                if ((unint64_t)(v77 + 1) >> 61) {
                  goto LABEL_157;
                }
                uint64_t v78 = v73 - v76;
                uint64_t v79 = v78 >> 2;
                if (v78 >> 2 <= (unint64_t)(v77 + 1)) {
                  uint64_t v79 = v77 + 1;
                }
                if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v80 = v79;
                }
                if (v80) {
                  int v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(v142, v80);
                }
                else {
                  int v81 = 0;
                }
                int v82 = &v81[8 * v77];
                *(void *)int v82 = 0;
                int v75 = v82 + 8;
                v84 = *(unsigned char **)(a5 + 72);
                int v83 = *(unsigned char **)(a5 + 80);
                if (v83 != v84)
                {
                  do
                  {
                    int v85 = *((_DWORD *)v83 - 2);
                    v83 -= 8;
                    char v86 = v83[4];
                    *((_DWORD *)v82 - 2) = v85;
                    v82 -= 8;
                    v82[4] = v86;
                  }
                  while (v83 != v84);
                  int v83 = *(unsigned char **)(a5 + 72);
                }
                *(void *)(a5 + 72) = v82;
                *(void *)(a5 + 80) = v75;
                *(void *)(a5 + 88) = &v81[8 * v80];
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                *int v74 = 0;
                int v75 = v74 + 1;
              }
              *(void *)(a5 + 80) = v75;
            }
          }
          while (v15++ != v20);
          uint64_t v22 = __p;
          __int16 v21 = v140;
          int v15 = v141;
        }
        *(_DWORD *)(a5 + 96) = v15;
        *(unsigned char *)(a5 + 100) = 1;
        *(_DWORD *)(a5 + 104) = v20;
        *(unsigned char *)(a5 + 108) = 1;
        *(_WORD *)(a5 + 112) = v21 - 43;
      }
      if (v22)
      {
        __int16 v147 = v22;
        operator delete(v22);
      }
    }
  }
}

uint64_t Nightingale::heartRateInputAcquisition::get1stJDayDailyIdx(Nightingale::heartRateInputAcquisition *this)
{
  return *(void *)this;
}

void Nightingale::heartRateInputAcquisition::acquireSlicesPeriodDayStream(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t DailyJDayIdx1stHr = Nightingale::heartRateInputAcquisition::getDailyJDayIdx1stHr(a1, (uint64_t)a2);
  *(_DWORD *)a1 = DailyJDayIdx1stHr;
  *(unsigned char *)(a1 + 4) = BYTE4(DailyJDayIdx1stHr);
  *(_DWORD *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 12) = BYTE4(v9);
  if ((DailyJDayIdx1stHr & 0xFF00000000) != 0 && (v9 & 0xFF00000000) != 0)
  {
    Nightingale::heartRateInputAcquisition::acquireSlicesJDayRange(a1, a2, a3 - 44, a3, a4);
  }
}

_WORD *Nightingale::heartRateInputValidation::heartRateInputValidation(Nightingale::heartRateInputValidation *this)
{
  float result = (_WORD *)Nightingale::sensorInputProcessBase::sensorInputProcessBase(this);
  _WORD *result = 0;
  return result;
}

{
  _WORD *result;

  float result = (_WORD *)Nightingale::sensorInputProcessBase::sensorInputProcessBase(this);
  _WORD *result = 0;
  return result;
}

void Nightingale::heartRateInputValidation::process(uint64_t a1, void *a2, void *a3, int a4)
{
  BOOL v7 = Nightingale::heartRateInputValidation::validateSizeOfSlices(a1, (uint64_t)a2);
  if (v7)
  {
    Nightingale::heartRateInputValidation::validateHrSamples(v7, a2);
    if (a4)
    {
      Nightingale::heartRateInputValidation::validateHrSlices(v8, (uint64_t)a2, a3);
    }
  }
}

BOOL Nightingale::heartRateInputValidation::validateSizeOfSlices(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56);
  if (v2 == v3) {
    return 0;
  }
  BOOL v4 = !*(_WORD *)(a2 + 112) || *(unsigned char *)(a2 + 100) == 0;
  if (v4 || *(unsigned char *)(a2 + 108) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 80);
  if (v8 == v9) {
    return 0;
  }
  uint64_t v10 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
  return v10 == (v7 - v6) >> 3 && v10 == (v3 - v2) >> 3 && v10 == (v9 - v8) >> 3;
}

void Nightingale::heartRateInputValidation::validateHrSamples(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[6];
  uint64_t v3 = a2[7];
  if (v2 != v3)
  {
    BOOL v4 = (unsigned char *)(*a2 + 4);
    do
    {
      if (!*(unsigned char *)(v2 + 4) || *(int *)v2 <= 23)
      {
        if (*v4) {
          unsigned char *v4 = 0;
        }
        if (*(unsigned char *)(v2 + 4)) {
          *(unsigned char *)(v2 + 4) = 0;
        }
      }
      v2 += 8;
      v4 += 8;
    }
    while (v2 != v3);
  }
  uint64_t v5 = a2[9];
  uint64_t v6 = a2[10];
  if (v5 != v6)
  {
    uint64_t v7 = (unsigned char *)(a2[3] + 4);
    do
    {
      if (!*(unsigned char *)(v5 + 4) || *(int *)v5 <= 23)
      {
        if (*v7) {
          unsigned char *v7 = 0;
        }
        if (*(unsigned char *)(v5 + 4)) {
          *(unsigned char *)(v5 + 4) = 0;
        }
      }
      v5 += 8;
      v7 += 8;
    }
    while (v5 != v6);
  }
}

void Nightingale::heartRateInputValidation::validateHrSlices(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_WORD *)(a2 + 112))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = 0;
      memset(__p, 0, sizeof(__p));
      for (uint64_t i = 4; i != 364; i += 8)
      {
        if (!*(unsigned char *)(*(void *)(a2 + 48) + v5 + i)) {
          ++v7;
        }
      }
      BOOL v13 = (float)((float)v7 / 45.0) < 0.7;
      std::vector<BOOL>::push_back((uint64_t)__p, &v13);
      uint64_t v9 = 0;
      for (uint64_t j = 4; j != 364; j += 8)
      {
        if (!*(unsigned char *)(*(void *)(a2 + 72) + v5 + j)) {
          ++v9;
        }
      }
      BOOL v13 = (float)((float)v9 / 45.0) < 1.0;
      std::vector<BOOL>::push_back((uint64_t)__p, &v13);
      uint64_t v11 = 0;
      for (uint64_t k = 4; k != 364; k += 8)
      {
        if (!*(unsigned char *)(*(void *)(a2 + 48) + v5 + k)) {
          ++v11;
        }
      }
      BOOL v13 = (float)((float)v11 / 45.0) < 0.5;
      std::vector<BOOL>::push_back((uint64_t)__p, &v13);
      std::vector<std::vector<BOOL>>::push_back[abi:nn180100](a3, (uint64_t)__p);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      ++v6;
      v5 += 8;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 112));
  }
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      abort();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  uint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

BOOL Nightingale::heartRateInputValidation::validateASlice(float a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = 0;
  for (uint64_t i = 4; i != 364; i += 8)
  {
    if (!*(unsigned char *)(*a3 + 8 * a4 + i)) {
      ++v5;
    }
  }
  return (float)((float)v5 / (float)a5) < a1;
}

void *std::vector<std::vector<BOOL>>::push_back[abi:nn180100](void *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      float v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<BOOL>>>(v4, v13);
    }
    else {
      float v14 = 0;
    }
    int v15 = v14;
    uint64_t v16 = &v14[24 * v10];
    int v18 = &v14[24 * v13];
    std::vector<BOOL>::vector(v16, a2);
    float v17 = v16 + 24;
    std::vector<std::vector<BOOL>>::__swap_out_circular_buffer(a1, &v15);
    unint64_t v9 = a1[1];
    float result = std::__split_buffer<std::vector<BOOL>>::~__split_buffer(&v15);
  }
  else
  {
    float result = std::vector<BOOL>::vector(*(void **)(v4 - 8), a2);
    unint64_t v9 = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

uint64_t Nightingale::heartRateInputPreCondition::heartRateInputPreCondition(Nightingale::sensorInputProcessBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Nightingale::sensorInputProcessBase::sensorInputProcessBase(a1);
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

{
  uint64_t result;

  uint64_t result = Nightingale::sensorInputProcessBase::sensorInputProcessBase(a1);
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

BOOL Nightingale::heartRateInputPreCondition::preConditionHr(unsigned int ***this)
{
  unint64_t v3 = Nightingale::heartRateInputPreCondition::find1stHrSampleDayStreamLstmHr((Nightingale::heartRateInputPreCondition *)this);
  BOOL result = (v2 & 0xFF00000000) != 0 && (v3 & 0xFF00000000) != 0;
  if (result)
  {
    unint64_t v5 = this[2];
    unint64_t v6 = *v5;
    unint64_t v7 = v5[1];
    if (*v5 != v7)
    {
      do
      {
        if (*((unsigned char *)v6 + 4))
        {
          unint64_t v3 = *v6 | ((unint64_t)*((unsigned __int8 *)v6 + 4) << 32);
        }
        else
        {
          *unint64_t v6 = v3;
          *((unsigned char *)v6 + 4) = BYTE4(v3);
        }
        v6 += 2;
      }
      while (v6 != v7);
      unint64_t v5 = this[2];
    }
    uint64_t v8 = v5[3];
    unint64_t v9 = v5[4];
    if (v8 != v9)
    {
      do
      {
        if (*((unsigned char *)v8 + 4))
        {
          unint64_t v2 = *v8 | ((unint64_t)*((unsigned __int8 *)v8 + 4) << 32);
        }
        else
        {
          unsigned int *v8 = v2;
          *((unsigned char *)v8 + 4) = BYTE4(v2);
        }
        v8 += 2;
      }
      while (v8 != v9);
      unint64_t v5 = this[2];
    }
    unint64_t v10 = *v5;
    unint64_t v11 = v5[1];
    if (*v5 != v11)
    {
      do
      {
        if (*((unsigned char *)v10 + 4))
        {
          *(float *)unint64_t v10 = (float)(*(float *)v10 + -68.352) / 9.696;
          *((unsigned char *)v10 + 4) = 1;
        }
        v10 += 2;
      }
      while (v10 != v11);
      unint64_t v5 = this[2];
    }
    uint64_t v12 = v5[3];
    for (uint64_t i = v5[4]; v12 != i; v12 += 2)
    {
      if (*((unsigned char *)v12 + 4))
      {
        *(float *)uint64_t v12 = (float)(*(float *)v12 + -64.88) / 9.6825;
        *((unsigned char *)v12 + 4) = 1;
      }
    }
  }
  return result;
}

unint64_t Nightingale::heartRateInputPreCondition::find1stHrSampleDayStreamLstmHr(Nightingale::heartRateInputPreCondition *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (*(unsigned char *)(v1 + 100) && *(unsigned char *)(v1 + 108))
  {
    unint64_t v2 = (uint64_t *)*((void *)this + 1);
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 == v4)
    {
      unsigned __int8 v5 = 0;
      int v6 = 0;
    }
    else
    {
      unsigned __int8 v5 = 0;
      int v6 = 0;
      do
      {
        if (*(_DWORD *)v3 <= *(_DWORD *)(v1 + 96))
        {
          if (*(unsigned char *)(v3 + 20)) {
            BOOL v7 = *(unsigned char *)(v3 + 36) == 0;
          }
          else {
            BOOL v7 = 1;
          }
          char v8 = !v7;
          if ((v8 & (*(_DWORD *)(v3 + 32) > 23)) != 0)
          {
            unsigned __int8 v5 = 1;
            int v6 = *(_DWORD *)(v3 + 16);
          }
        }
        v3 += 60;
      }
      while (v3 != v4);
    }
    unint64_t v10 = (unint64_t)v5 << 32;
    uint64_t v11 = v6 & 0xFFFFFF00;
    uint64_t v9 = v6;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  return v10 | v9 | v11;
}

void Nightingale::heartRateInputPreCondition::forwardFill(uint64_t a1, unsigned int **a2, unint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  while (v3 != v4)
  {
    if (*((unsigned char *)v3 + 4))
    {
      a3 = *v3 | ((unint64_t)*((unsigned __int8 *)v3 + 4) << 32);
    }
    else
    {
      unsigned int *v3 = a3;
      *((unsigned char *)v3 + 4) = BYTE4(a3);
    }
    v3 += 2;
  }
}

void Nightingale::heartRateInputPreCondition::standardizeVec(float a1, float a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  if (*a4 != v5)
  {
    do
    {
      if (*(unsigned char *)(v4 + 4))
      {
        *(float *)uint64_t v4 = (float)(*(float *)v4 - a1) / a2;
        *(unsigned char *)(v4 + 4) = 1;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
}

uint64_t std::vector<Nightingale::ngt_DayInput>::vector<std::__wrap_iter<Nightingale::ngt_DayInput const*>,0>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    std::vector<Nightingale::ngt_DayInput>::__vallocate[abi:nn180100]((void *)a1, 0xEEEEEEEEEEEEEEEFLL * (v4 >> 2));
    uint64_t v7 = *(void *)(a1 + 8);
    if (a3 != a2) {
      memmove(*(void **)(a1 + 8), a2, v4);
    }
    *(void *)(a1 + 8) = v7 + 4 * (v4 >> 2);
  }
  return a1;
}

char *std::vector<Nightingale::ngt_DayInput>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x444444444444445) {
    abort();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_DayInput>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[60 * v4];
  return result;
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      abort();
    }
    unint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:nn180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    char v8 = *a1;
    int v9 = 0;
    int v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    uint64_t v4 = *a1;
    *a1 = v10;
    unint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void *std::vector<BOOL>::__vallocate[abi:nn180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    abort();
  }
  BOOL result = std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    uint64_t *v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void *std::vector<BOOL>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:nn180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(void **)a2, 0, (void *)(*(void *)a2 + 8 * (*(void *)(a2 + 8) >> 6)), *(void *)(a2 + 8) & 0x3F, *(void *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(void *a1, void *a2, unint64_t a3, void *a4, int a5, uint64_t a6)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41) {
      unint64_t v8 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
  }
  uint64_t v9 = *a1 + 8 * (v6 >> 6);
  int v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  LODWORD(v6) = a2;
  unint64_t v7 = *(uint64_t **)a5;
  int v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || a2 != a4)
  {
    do
    {
      uint64_t v9 = 1 << v8;
      if ((*a1 >> a2)) {
        uint64_t v10 = *v7 | v9;
      }
      else {
        uint64_t v10 = *v7 & ~v9;
      }
      uint64_t *v7 = v10;
      BOOL v11 = v6 == 63;
      BOOL v12 = v6 == 63;
      uint64_t v6 = (a2 + 1);
      if (v11) {
        uint64_t v6 = 0;
      }
      if (v8 == 63)
      {
        int v8 = 0;
        *(void *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || v6 != a4);
    a1 = a3;
  }
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void *std::vector<std::vector<BOOL>>::__swap_out_circular_buffer(void *result, void *a2)
{
  unint64_t v3 = (void *)*result;
  unint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(v2 - 3);
    v2 -= 3;
    *(void *)(v4 - 24) = v5;
    v4 -= 24;
    *(void *)(v4 + 8) = v2[1];
    *(void *)(v4 + 16) = v2[2];
    void *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  void *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<BOOL>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(24 * a2);
}

void **std::__split_buffer<std::vector<BOOL>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<BOOL>>::clear[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    uint64_t v5 = *(void **)(v1 - 24);
    v1 -= 24;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v1;
    if (v5)
    {
      operator delete(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
  }
}

void Nightingale::ngt_deviationAnalyzer::deviation_process(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, int a6@<W6>, uint64_t a7@<X8>, uint64_t a8)
{
  *(unsigned char *)a7 = 0;
  *(void *)(a7 + 4) = -1;
  *(unsigned char *)(a7 + 12) = 0;
  uint64_t v8 = a7 + 12;
  *(void *)(a7 + 16) = -1;
  *(unsigned char *)(a7 + 24) = 0;
  uint64_t v9 = a7 + 24;
  *(unsigned char *)(a7 + 36) = 0;
  uint64_t v10 = a7 + 36;
  *(void *)(a7 + 28) = -1;
  *(void *)(a7 + 40) = -1;
  *(_DWORD *)(a7 + 48) = 0;
  *(_WORD *)(a7 + 52) = 0;
  *(void *)(a7 + 56) = -1;
  *(void *)(a7 + 64) = -1;
  *(void *)(a7 + 72) = 0xFFFFFFFFLL;
  *(_WORD *)(a7 + 80) = 0;
  *(void *)(a7 + 84) = -1;
  *(void *)(a7 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(a7 + 100) = 0;
  *(void *)(a7 + 104) = -1;
  *(_DWORD *)(a7 + 112) = -1;
  *(_DWORD *)(a7 + 116) = 0;
  uint64_t v11 = a7 + 116;
  *(_WORD *)(a7 + 120) = 0;
  *(void *)(a7 + 124) = -1;
  *(_DWORD *)(a7 + 132) = -1;
  if (*(unsigned char *)(a2 + 36) && *(unsigned char *)(a2 + 128))
  {
    uint64_t v31 = *(void *)(a2 + 72);
    uint64_t v27 = *(void *)(a2 + 88);
    uint64_t v17 = *(void *)(a2 + 104);
    uint64_t v28 = *(void *)(a2 + 112);
    uint64_t v29 = *(void *)(a2 + 80);
    uint64_t v26 = *(void *)(a2 + 120);
    Nightingale::ngt_deviationAnalyzer::detectIrreg(a1, *(void *)(a2 + 64), *(void *)(a2 + 96), a4, a5, *(_DWORD *)(a2 + 32), a6, a7, a7 + 48);
    if (*(unsigned char *)(a2 + 36)
      && (Nightingale::ngt_deviationAnalyzer::detectInfreq(a1, v31, v17, a4, a5, *(_DWORD *)(a2 + 32), a6, v8, v11 - 40),
          *(unsigned char *)(a2 + 36))
      && (Nightingale::ngt_deviationAnalyzer::detectProlonged(a1, v29, v28, a4, a5, *(_DWORD *)(a2 + 32), a6, v9, v11 - 20), std::vector<Nightingale::ngt_DayInput>::vector(__p, a3), *(unsigned char *)(a2 + 36)))
    {
      Nightingale::ngt_deviationAnalyzer::detectSpotting(a1, v27, v26, (uint64_t *)__p, a4, a5, *(_DWORD *)(a2 + 32), a6, v10, v11);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      uint64_t v18 = std::__throw_bad_optional_access[abi:nn180100]();
      Nightingale::ngt_deviationAnalyzer::detectIrreg(v18, v19, v20, v21, v22, v23, v24, v25, a8);
    }
  }
}

void Nightingale::ngt_deviationAnalyzer::detectIrreg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  if (!*(unsigned char *)(a4 + 84)) {
    return;
  }
  if (*(void *)a4 == *(void *)(a4 + 8)) {
    return;
  }
  int v12 = *(_DWORD *)(a4 + 80);
  int v13 = v12 - 179;
  *(_DWORD *)(a8 + 4) = v12 - 179;
  *(_DWORD *)(a8 + 8) = v12;
  char v14 = Nightingale::ngt_deviationAnalyzer::ruleChecker(a1, a2, a3, v12 - 179, v12, a4, a5, a6, a7, a9);
  char v15 = v14;
  if ((v14 & 1) == 0 && !a7) {
    return;
  }
  std::vector<int> __p = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  unint64_t v59 = 0;
  int v60 = 0;
  __int16 v61 = 0;
  uint64_t v16 = *(void *)a4;
  uint64_t v17 = *(void *)(a4 + 8);
  if (*(void *)a4 == v17)
  {
    float v46 = 0;
  }
  else
  {
    char v58 = v14;
    do
    {
      int v18 = *(_DWORD *)v16;
      if (*(unsigned char *)(v16 + 24)) {
        BOOL v19 = v18 < v13;
      }
      else {
        BOOL v19 = 1;
      }
      if (!v19)
      {
        int v20 = *(_DWORD *)(v16 + 20);
        int v21 = v20 + 1;
        if (v20 < v12 && v21 >= v12 - 89)
        {
          int v23 = v20 - v18 + 1;
          int v24 = v63;
          if (v63 >= v64)
          {
            uint64_t v26 = (char *)__p;
            uint64_t v27 = (v63 - (unsigned char *)__p) >> 2;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62) {
              goto LABEL_77;
            }
            uint64_t v29 = v64 - (unsigned char *)__p;
            if ((v64 - (unsigned char *)__p) >> 1 > v28) {
              unint64_t v28 = v29 >> 1;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30)
            {
              uint64_t v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v64, v30);
              uint64_t v26 = (char *)__p;
              int v24 = v63;
            }
            else
            {
              uint64_t v31 = 0;
            }
            unint64_t v32 = (int *)&v31[4 * v27];
            int *v32 = v23;
            uint64_t v25 = (char *)(v32 + 1);
            while (v24 != v26)
            {
              int v33 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *--unint64_t v32 = v33;
            }
            std::vector<int> __p = v32;
            uint64_t v63 = v25;
            uint64_t v64 = &v31[4 * v30];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v63 = v23;
            uint64_t v25 = v24 + 4;
          }
          uint64_t v63 = v25;
          int v20 = *(_DWORD *)(v16 + 20);
          int v21 = v20 + 1;
        }
        if (v20 < v12 - 90 && v21 >= v13)
        {
          int v35 = v20 - *(_DWORD *)v16 + 1;
          uint64_t v36 = v60;
          if (v60 >= v61)
          {
            unint64_t v38 = v59;
            uint64_t v39 = v60 - v59;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 62) {
LABEL_77:
            }
              abort();
            uint64_t v41 = (char *)v61 - (char *)v59;
            if (((char *)v61 - (char *)v59) >> 1 > v40) {
              unint64_t v40 = v41 >> 1;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            if (v42)
            {
              int v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v61, v42);
              unint64_t v38 = v59;
              uint64_t v36 = v60;
            }
            else
            {
              int v43 = 0;
            }
            char v44 = (int *)&v43[4 * v39];
            *char v44 = v35;
            uint64_t v37 = v44 + 1;
            while (v36 != v38)
            {
              int v45 = *--v36;
              *--char v44 = v45;
            }
            unint64_t v59 = v44;
            __int16 v61 = (int *)&v43[4 * v42];
            if (v38) {
              operator delete(v38);
            }
          }
          else
          {
            *int v60 = v35;
            uint64_t v37 = v60 + 1;
          }
          int v60 = v37;
        }
      }
      v16 += 96;
    }
    while (v16 != v17);
    float v46 = (char *)__p;
    char v15 = v58;
  }
  float v47 = v63;
  if (*(unsigned char *)(a9 + 3))
  {
    *(_DWORD *)(a9 + 20) = (unint64_t)(v63 - v46) >> 2;
    *(_DWORD *)(a9 + 24) = (unint64_t)((char *)v60 - (char *)v59) >> 2;
  }
  if (v46 == v47) {
    goto LABEL_71;
  }
  uint64_t v48 = v59;
  if (v59 != v60)
  {
    char v65 = 0;
    uint64_t v49 = std::__minmax_element_impl[abi:nn180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__identity,std::__less<void,void>>(v46, v47);
    int v51 = *v50 - *v49;
    char v65 = 0;
    unint64_t v52 = std::__minmax_element_impl[abi:nn180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__identity,std::__less<void,void>>(v59, v60);
    int v54 = *v53 - *v52;
    BOOL v55 = v51 <= 16 || v54 <= 16;
    char v56 = !v55;
    *(unsigned char *)a9 = v56;
    if (v55) {
      char v57 = 0;
    }
    else {
      char v57 = v15;
    }
    *(unsigned char *)a8 = v57;
    if (*(unsigned char *)(a9 + 3))
    {
      *(_DWORD *)(a9 + 12) = v51;
      *(_DWORD *)(a9 + 16) = v54;
    }
LABEL_71:
    uint64_t v48 = v59;
  }
  if (v48) {
    operator delete(v48);
  }
  if (__p)
  {
    uint64_t v63 = (char *)__p;
    operator delete(__p);
  }
}

uint64_t Nightingale::ngt_deviationAnalyzer::detectInfreq(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  if (*(unsigned char *)(a4 + 60))
  {
    if (*(void *)a4 != *(void *)(a4 + 8))
    {
      int v12 = *(_DWORD *)(a4 + 56);
      *(_DWORD *)(a8 + 4) = v12 - 179;
      *(_DWORD *)(a8 + 8) = v12;
      BOOL result = Nightingale::ngt_deviationAnalyzer::ruleChecker(result, a2, a3, v12 - 179, v12, a4, a5, a6, a7, a9);
      if ((result & 1) != 0 || a7)
      {
        int v13 = *(int **)a4;
        char v14 = *(int **)(a4 + 8);
        if (*(int **)a4 == v14)
        {
          unsigned int v16 = 0;
          unsigned int v15 = 0;
        }
        else
        {
          unsigned int v15 = 0;
          unsigned int v16 = 0;
          do
          {
            int v18 = *v13;
            v13 += 24;
            int v17 = v18;
            if (v18 <= v12 && v17 >= v12 - 89) {
              ++v16;
            }
            if (v17 <= v12 - 90 && v17 >= v12 - 179) {
              ++v15;
            }
          }
          while (v13 != v14);
        }
        if (*(unsigned char *)(a9 + 3))
        {
          *(_DWORD *)(a9 + 12) = v16;
          *(_DWORD *)(a9 + 16) = v15;
        }
        BOOL v21 = v16 >= 2 || v15 >= 2;
        char v22 = !v21;
        *(unsigned char *)a9 = v22;
        if (v21) {
          char v23 = 0;
        }
        else {
          char v23 = result;
        }
        *(unsigned char *)a8 = v23;
      }
    }
  }
  return result;
}

uint64_t Nightingale::ngt_deviationAnalyzer::detectProlonged(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a4 + 8);
  if (*(void *)a4 != v9)
  {
    if (*(unsigned char *)(a4 + 68))
    {
      if (*(unsigned char *)(v9 - 88))
      {
        int v14 = *(_DWORD *)(a4 + 64);
        int v15 = v14 - 179;
        *(_DWORD *)(a8 + 4) = v14 - 179;
        *(_DWORD *)(a8 + 8) = v14;
        BOOL result = Nightingale::ngt_deviationAnalyzer::ruleChecker(result, a2, a3, v14 - 179, v14, a4, a5, a6, a7, a9);
        if ((result & 1) != 0 || a7)
        {
          uint64_t v16 = *(void *)a4;
          uint64_t v17 = *(void *)(a4 + 8);
          if (*(void *)a4 == v17)
          {
            int v19 = 0;
            int v18 = 0;
          }
          else
          {
            int v18 = 0;
            int v19 = 0;
            do
            {
              if (*(_DWORD *)v16 >= v15)
              {
                ++v19;
                if (*(unsigned char *)(v16 + 8))
                {
                  if (*(_DWORD *)(v16 + 4) - *(_DWORD *)v16 > 8) {
                    ++v18;
                  }
                }
              }
              v16 += 96;
            }
            while (v16 != v17);
          }
          *(unsigned char *)a9 = v18 > 1;
          if (*(unsigned char *)(a9 + 3))
          {
            *(_DWORD *)(a9 + 12) = v19;
            *(_DWORD *)(a9 + 16) = v18;
          }
          if (v18 > 1) {
            char v20 = result;
          }
          else {
            char v20 = 0;
          }
          *(unsigned char *)a8 = v20;
        }
      }
    }
  }
  return result;
}

void Nightingale::ngt_deviationAnalyzer::detectSpotting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(void *)a5 != *(void *)(a5 + 8) && *(unsigned char *)(a5 + 84) != 0)
  {
    int v14 = *(_DWORD *)(a5 + 80);
    *(_DWORD *)(a9 + 4) = v14 - 179;
    *(_DWORD *)(a9 + 8) = v14;
    char v15 = Nightingale::ngt_deviationAnalyzer::ruleChecker(a1, a2, a3, v14 - 179, v14, a5, a6, a7, a8, a10);
    if ((v15 & 1) != 0 || a8)
    {
      char v27 = v15;
      std::vector<Nightingale::ngt_DayInput>::vector(__p, (uint64_t)a4);
      Nightingale::ngt_deviationAnalyzer::extendPeriodWFlowSpotting(v14 - 179, v14, (int **)__p, (void *)a5, v29);
      uint64_t NonAdjacentSpottingInACycle = (uint64_t)__p[0];
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      LODWORD(v30) = 0;
      uint64_t v17 = *a4;
      uint64_t v18 = a4[1];
      if (*a4 == v18)
      {
        int v20 = 0;
        int v19 = 0;
      }
      else
      {
        int v19 = 0;
        int v20 = 0;
        do
        {
          if (*(unsigned char *)(v17 + 8))
          {
            int v21 = *(_DWORD *)v17;
            if (*(_DWORD *)v17 >= v14 - 89 && v21 <= v14)
            {
              uint64_t NonAdjacentSpottingInACycle = Nightingale::ngt_deviationAnalyzer::findNonAdjacentSpottingInACycle(NonAdjacentSpottingInACycle, (uint64_t)v29, v21, (int *)&v30);
              v20 += NonAdjacentSpottingInACycle;
            }
            else if (v21 >= v14 - 179 && v21 <= v14 - 90)
            {
              uint64_t NonAdjacentSpottingInACycle = Nightingale::ngt_deviationAnalyzer::findNonAdjacentSpottingInACycle(NonAdjacentSpottingInACycle, (uint64_t)v29, v21, (int *)&v30);
              v19 += NonAdjacentSpottingInACycle;
            }
          }
          v17 += 60;
        }
        while (v17 != v18);
      }
      BOOL v24 = v20 <= 0 || v19 <= 0;
      char v25 = !v24;
      *(unsigned char *)a10 = v25;
      char v26 = v27;
      if (v24) {
        char v26 = 0;
      }
      *(unsigned char *)a9 = v26;
      if (*(unsigned char *)(a10 + 3))
      {
        *(_DWORD *)(a10 + 12) = v20;
        *(_DWORD *)(a10 + 16) = v19;
      }
      unint64_t v30 = (void **)v29;
      std::vector<Nightingale::cycleInfo>::__destroy_vector::operator()[abi:nn180100](&v30);
    }
  }
}

uint64_t Nightingale::ngt_deviationAnalyzer::ruleChecker(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4, int a5, uint64_t a6, uint64_t *a7, int a8, char a9, uint64_t a10)
{
  BOOL v14 = (a2 & 0xFF00000000) == 0 || (int)a2 <= a4;
  *(unsigned char *)(a10 + 1) = v14;
  BOOL v16 = (a3 & 0xFF00000000) == 0 || (int)a3 <= a5;
  *(unsigned char *)(a10 + 2) = v16;
  if (*(unsigned char *)(a6 + 36)) {
    *(unsigned char *)(a10 + 3) = *(_DWORD *)(a6 + 32) <= a4;
  }
  *(_DWORD *)(a10 + 8) = a8 - a5;
  if (v14 && v16)
  {
    BOOL v17 = *(unsigned char *)(a10 + 3) != 0;
    if (*(unsigned char *)(a10 + 3)) {
      goto LABEL_21;
    }
  }
  else
  {
    BOOL v17 = 0;
  }
  if (!a9) {
    return 0;
  }
LABEL_21:
  uint64_t CycleFactorsEndBfrWinEnd = Nightingale::ngt_deviationAnalyzer::findCycleFactorsEndBfrWinEnd(a1, a5, (uint64_t)a7);
  BOOL v20 = (int)CycleFactorsEndBfrWinEnd < 1 || (int)CycleFactorsEndBfrWinEnd + 84 < a4;
  char v21 = v20;
  *(unsigned char *)(a10 + 4) = v21;
  if (!v20) {
    BOOL v17 = 0;
  }
  BOOL v22 = Nightingale::ngt_deviationAnalyzer::checkCycleFactorInWin(CycleFactorsEndBfrWinEnd, a4, (a5 - 1), a7);
  *(unsigned char *)(a10 + 5) = v22;
  return v22 & v17;
}

uint64_t Nightingale::ngt_deviationAnalyzer::findNonAdjacentSpottingInACycle(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = *(_DWORD **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t result = *(void *)a2 != v4 && a3 + 2 <= *v5;
  int v7 = *a4;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 5);
  if (*a4 < (int)v8)
  {
    unint64_t v9 = v8 - v7;
    if (v8 < v7) {
      unint64_t v9 = 0;
    }
    for (int i = &v5[24 * v7 + 6]; ; i += 96)
    {
      if (!v9) {
        abort();
      }
      if (*(i - 16))
      {
        if (*i)
        {
          if (*((_DWORD *)i - 6) <= a3)
          {
            int v11 = *((_DWORD *)i - 1);
            if (v11 >= a3 && *((_DWORD *)i - 5) + 2 < a3 && v11 - 1 > a3) {
              break;
            }
          }
        }
      }
      ++v7;
      --v9;
      if (v8 == v7) {
        return result;
      }
    }
    uint64_t result = (result + 1);
    *a4 = v7;
  }
  return result;
}

void Nightingale::ngt_deviationAnalyzer::extendPeriodWFlowSpotting(int a1@<W1>, int a2@<W2>, int **a3@<X3>, void *a4@<X4>, uint64_t *a5@<X8>)
{
  int v7 = (char *)*a4;
  uint64_t v6 = (char *)a4[1];
  unint64_t v8 = (int *)&Nightingale::INVALID_JDAY;
  if ((char *)*a4 == v6)
  {
    int v9 = 0;
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = (char *)*a4;
    do
    {
      if (*(_DWORD *)v10 >= a1) {
        break;
      }
      int v11 = v10[8];
      int v12 = v10 + 4;
      int v13 = v11 ? (int *)v12 : (int *)&Nightingale::INVALID_JDAY;
      if (*v13 >= a1) {
        break;
      }
      ++v9;
      uint64_t v10 = v12 + 92;
    }
    while (v10 != v6);
  }
  if (v9) {
    unint64_t v14 = (v9 - 1);
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5);
  if (v15 <= v14) {
    goto LABEL_122;
  }
  BOOL v16 = &v7[96 * v14];
  if (v16[8]) {
    unint64_t v8 = (int *)(v16 + 4);
  }
  int v17 = *v8;
  if (v17 >= a1) {
    int v17 = a1;
  }
  uint64_t v18 = *a3;
  int v19 = a3[1];
  if (*a3 == v19)
  {
    int v20 = 0;
  }
  else
  {
    int v20 = 0;
    do
    {
      if (*v18 >= v17) {
        break;
      }
      ++v20;
      v18 += 15;
    }
    while (v18 != v19);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  BYTE4(v87) = 0;
  BYTE8(v87) = 0;
  BYTE12(v87) = 0;
  LOBYTE(v88) = 0;
  BYTE4(v88) = 0;
  BYTE8(v88) = 0;
  LOBYTE(v89) = 0;
  BYTE4(v89) = 0;
  BYTE8(v89) = 0;
  BYTE12(v89) = 0;
  v90[0] = 0;
  v90[4] = 0;
  v90[8] = 0;
  v90[12] = 0;
  v90[16] = 0;
  v90[20] = 0;
  __int16 v92 = 0;
  uint64_t v93 = 0;
  std::vector<int> __p = 0;
  if (v15 - 1 > v14)
  {
    uint64_t v21 = (int)v14;
    unsigned int v75 = v14;
    unint64_t v22 = v14;
    while (1)
    {
      if (v15 <= v22) {
        goto LABEL_122;
      }
      char v23 = &v7[96 * v22];
      long long v80 = *(_OWORD *)v23;
      long long v24 = *((_OWORD *)v23 + 1);
      long long v25 = *((_OWORD *)v23 + 2);
      long long v26 = *((_OWORD *)v23 + 3);
      *(void *)&v83[13] = *(void *)(v23 + 61);
      long long v82 = v25;
      *(_OWORD *)int v83 = v26;
      long long v81 = v24;
      int v85 = 0;
      char v86 = 0;
      v84 = 0;
      unint64_t v28 = (unsigned char *)*((void *)v23 + 9);
      char v27 = (unsigned char *)*((void *)v23 + 10);
      size_t v29 = v27 - v28;
      if (v27 == v28)
      {
        unint64_t v30 = 0;
      }
      else
      {
        if (v27 - v28 < 0) {
          goto LABEL_122;
        }
        unint64_t v30 = (char *)operator new(v27 - v28);
        v84 = v30;
        int v85 = v30;
        char v86 = &v30[v29];
        memmove(v30, v28, v29);
        int v85 = &v30[v29];
      }
      if (BYTE8(v80)) {
        BOOL v31 = BYTE8(v81) == 0;
      }
      else {
        BOOL v31 = 1;
      }
      char v32 = !v31;
      if (!v31)
      {
        int v33 = DWORD1(v80);
        int v34 = a1;
        if (SDWORD1(v80) < a1) {
          int v34 = DWORD1(v80);
        }
        if (v75 < v21)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) <= v21 - 1) {
            goto LABEL_122;
          }
          int v35 = &v7[96 * v21 - 96];
          if (v35[8]) {
            int v34 = *((_DWORD *)v35 + 1) + 3;
          }
        }
        int v36 = DWORD1(v81) - 1;
        if (DWORD1(v81) - 1 >= a2) {
          int v36 = a2;
        }
        unint64_t v37 = 0xEEEEEEEEEEEEEEEFLL * (a3[1] - *a3);
        if (v37 > v20)
        {
          uint64_t v38 = 0;
          int v39 = 0;
          int v40 = v80;
          uint64_t v41 = &(*a3)[15 * v20 + 2];
          int v42 = -3;
          uint64_t v43 = 4294967293;
          do
          {
            uint64_t v44 = *(v41 - 2);
            if (((*(v41 - 1) - 5) > 0xFFFFFFFB || *(unsigned char *)v41 != 0)
              && (int)v44 >= v34
              && (int)v44 <= v36)
            {
              if ((int)v44 < v40)
              {
                int v48 = v44 - v43;
                BOOL v49 = v48 < 3;
                if (v48 >= 3) {
                  int v50 = -3;
                }
                else {
                  int v50 = v42;
                }
                if (v49 || v42 == -3) {
                  int v39 = *(v41 - 2);
                }
                if (v42 == -3) {
                  int v42 = *(v41 - 2);
                }
                else {
                  int v42 = v50;
                }
                if (v40 - v39 <= 2)
                {
                  LODWORD(v80) = v42;
                  int v40 = v42;
                }
                goto LABEL_60;
              }
              if ((int)v44 > v33)
              {
                if ((int)v44 - v33 > 2)
                {
                  v20 += v38;
                  break;
                }
                DWORD1(v80) = *(v41 - 2);
                BYTE8(v80) = 1;
                int v33 = v44;
              }
            }
            uint64_t v44 = v43;
LABEL_60:
            v41 += 15;
            ++v38;
            uint64_t v43 = v44;
          }
          while (v37 > v20 + v38);
        }
        std::vector<Nightingale::cycleInfo>::push_back[abi:nn180100](a5, (uint64_t)&v80);
        unint64_t v30 = v84;
      }
      if (v30)
      {
        int v85 = v30;
        operator delete(v30);
      }
      uint64_t v6 = (char *)a4[1];
      if (v32)
      {
        unint64_t v22 = ++v21;
        int v7 = (char *)*a4;
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*a4] >> 5);
        if (v15 - 1 > v21) {
          continue;
        }
      }
      break;
    }
  }
  long long v87 = *((_OWORD *)v6 - 6);
  long long v52 = *((_OWORD *)v6 - 5);
  long long v53 = *((_OWORD *)v6 - 4);
  long long v54 = *((_OWORD *)v6 - 3);
  *(void *)&v90[13] = *(void *)(v6 - 35);
  long long v89 = v53;
  *(_OWORD *)unint64_t v90 = v54;
  long long v88 = v52;
  if (&v87 != (long long *)(v6 - 96))
  {
    std::vector<Nightingale::Phase>::__assign_with_size[abi:nn180100]<Nightingale::Phase*,Nightingale::Phase*>(&__p, *((char **)v6 - 3), *((char **)v6 - 2), *((void *)v6 - 2) - *((void *)v6 - 3));
    uint64_t v6 = (char *)a4[1];
  }
  int v55 = a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*a4] >> 5) >= 2 && *(v6 - 184)) {
    int v55 = *((_DWORD *)v6 - 47) + 3;
  }
  unint64_t v56 = 0xEEEEEEEEEEEEEEEFLL * (a3[1] - *a3);
  if (v56 > v20)
  {
    int v57 = 0;
    unint64_t v58 = v20;
    int v59 = v87;
    int v60 = &(*a3)[15 * v20 + 2];
    int v61 = -3;
    uint64_t v62 = 4294967293;
    do
    {
      uint64_t v63 = *(v60 - 2);
      if ((*(v60 - 1) - 1) < 4 || (*(unsigned char *)v60)
        && ((int)v63 >= v55 ? (BOOL v64 = (int)v63 < v59) : (BOOL v64 = 0), v64))
      {
        int v65 = v63 - v62;
        BOOL v66 = v65 < 3;
        if (v65 >= 3) {
          int v67 = -3;
        }
        else {
          int v67 = v61;
        }
        if (v66 || v61 == -3) {
          int v57 = *(v60 - 2);
        }
        if (v61 == -3) {
          int v61 = *(v60 - 2);
        }
        else {
          int v61 = v67;
        }
        if (v59 - v57 <= 2)
        {
          LODWORD(v87) = v61;
          int v59 = v61;
        }
      }
      else
      {
        uint64_t v63 = v62;
      }
      ++v58;
      v60 += 15;
      uint64_t v62 = v63;
    }
    while (v56 > v58);
  }
  std::vector<Nightingale::cycleInfo>::push_back[abi:nn180100](a5, (uint64_t)&v87);
  uint64_t v69 = *a5;
  uint64_t v70 = a5[1] - *a5;
  if (v70 != 96)
  {
    uint64_t v71 = 0;
    unint64_t v72 = 0;
    unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * (v70 >> 5);
    while (v73 > ++v72)
    {
      uint64_t v74 = v69 + v71;
      *(_DWORD *)(v74 + 20) = *(_DWORD *)(v74 + 96) - 1;
      *(unsigned char *)(v74 + 24) = 1;
      uint64_t v69 = *a5;
      unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 5);
      v71 += 96;
      if (v73 - 1 <= v72) {
        goto LABEL_119;
      }
    }
LABEL_122:
    abort();
  }
LABEL_119:
  if (__p)
  {
    __int16 v92 = __p;
    operator delete(__p);
  }
}

uint64_t std::vector<Nightingale::cycleInfo>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 5);
    if (v10 + 1 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x155555555555555) {
      unint64_t v13 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::cycleInfo>>(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    unint64_t v15 = v14;
    BOOL v16 = &v14[96 * v10];
    uint64_t v18 = &v14[96 * v13];
    std::construct_at[abi:nn180100]<Nightingale::cycleInfo,Nightingale::cycleInfo&,Nightingale::cycleInfo*>((uint64_t)v16, a2);
    int v17 = v16 + 96;
    std::vector<Nightingale::cycleInfo>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<Nightingale::cycleInfo>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::construct_at[abi:nn180100]<Nightingale::cycleInfo,Nightingale::cycleInfo&,Nightingale::cycleInfo*>(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 96;
  }
  a1[1] = v9;
  return result;
}

uint64_t Nightingale::ngt_deviationAnalyzer::findCycleFactorsEndBfrWinEnd(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  Nightingale::phaseFactorProcessor::getAllCycleVec(__p);
  uint64_t EndOfReproductiveBfrADate = Nightingale::phaseFactorProcessor::findEndOfReproductiveBfrADate((uint64_t)&v8, a3, (uint64_t *)__p, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
  return EndOfReproductiveBfrADate;
}

BOOL Nightingale::ngt_deviationAnalyzer::checkCycleFactorInWin(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  Nightingale::phaseFactorProcessor::getAllCycleVec(&v16);
  std::vector<int> __p = 0;
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  unint64_t v7 = v16;
  size_t v8 = v17 - (unsigned char *)v16;
  if (v17 != v16)
  {
    if (v17 - (unsigned char *)v16 < 0) {
      abort();
    }
    uint64_t v9 = (char *)operator new(v17 - (unsigned char *)v16);
    uint64_t v10 = &v9[v8];
    std::vector<int> __p = v9;
    unint64_t v15 = &v9[v8];
    memmove(v9, v7, v8);
    unint64_t v14 = v10;
  }
  char v11 = Nightingale::phaseFactorProcessor::detectPhases((uint64_t)&v18, a2 | (unint64_t)(a3 << 32), (uint64_t *)&__p, a4);
  if (__p)
  {
    unint64_t v14 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    int v17 = v16;
    operator delete(v16);
  }
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }
  return v11 == 0;
}

void *std::vector<Nightingale::ngt_DayInput>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<Nightingale::ngt_DayInput>::__vallocate[abi:nn180100](a1, 0xEEEEEEEEEEEEEEEFLL * (v5 >> 2));
    unint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

_DWORD *std::__minmax_element_impl[abi:nn180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__identity,std::__less<void,void>>(_DWORD *result, _DWORD *a2)
{
  uint64_t v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    int v5 = *result;
    int v4 = result[1];
    if (v4 < *result) {
      ++result;
    }
    unint64_t v6 = v4 >= v5 ? v2 + 1 : v2;
    unint64_t v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 <= v5) {
        int v8 = v5;
      }
      else {
        int v8 = v4;
      }
      if (v4 >= v5) {
        int v4 = v5;
      }
      while (v7 + 1 != a2)
      {
        int v10 = *v7;
        int v9 = v7[1];
        if (v9 >= *v7)
        {
          if (v10 < v4)
          {
            int v4 = *v7;
            uint64_t result = v7;
          }
          BOOL v11 = v9 < v8;
          if (v9 > v8) {
            int v8 = v7[1];
          }
          if (!v11) {
            unint64_t v6 = v7 + 1;
          }
        }
        else
        {
          int v4 = *result;
          if (v9 < *result)
          {
            int v4 = v7[1];
            uint64_t result = v7 + 1;
          }
          int v8 = *v6;
          if (v10 > *v6) {
            int v8 = *v7;
          }
          if (v10 >= *v6) {
            unint64_t v6 = v7;
          }
        }
        v7 += 2;
        if (v7 == a2) {
          return result;
        }
      }
      if (*v7 < *result) {
        return v7;
      }
    }
  }
  return result;
}

uint64_t *std::vector<Nightingale::cycleInfo>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 96;
      *(_OWORD *)(v4 - 96) = *(_OWORD *)(v3 - 96);
      long long v6 = *(_OWORD *)(v3 - 80);
      long long v7 = *(_OWORD *)(v3 - 64);
      long long v8 = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 35) = *(void *)(v3 - 35);
      *(_OWORD *)(v4 - 64) = v7;
      *(_OWORD *)(v4 - 48) = v8;
      *(_OWORD *)(v4 - 80) = v6;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v3 -= 96;
      v4 -= 96;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v9 = *result;
  void *result = v5;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Nightingale::cycleInfo>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<Nightingale::cycleInfo>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 96;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 96;
    }
  }
}

void *std::vector<Nightingale::Phase>::__assign_with_size[abi:nn180100]<Nightingale::Phase*,Nightingale::Phase*>(void *result, char *__src, char *a3, unint64_t a4)
{
  long long v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      abort();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = std::vector<Nightingale::Phase>::__vallocate[abi:nn180100](v7, v11);
    uint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  uint64_t v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    unint64_t v15 = &v9[v16];
    goto LABEL_20;
  }
  unint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  unint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t Nightingale::rfLuna::rfLuna(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = -1;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 177) = 0u;
  *(_DWORD *)(a1 + 224) = 9;
  Nightingale::wristTemperatureInputAcquisition::wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)(a1 + 232));
  Nightingale::wristTemperatureInputProcess::wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)(a1 + 304));
  Nightingale::wristTemperatureInputValidation::wristTemperatureInputValidation((Nightingale::wristTemperatureInputValidation *)(a1 + 305));
  Nightingale::ngt_luna_fw_dl_tmp_process::ngt_luna_fw_dl_tmp_process((Nightingale::ngt_luna_fw_dl_tmp_process *)(a1 + 312));
  return a1;
}

void Nightingale::rfLuna::~rfLuna(id **this)
{
  Nightingale::ngt_luna_fw_dl_tmp_process::~ngt_luna_fw_dl_tmp_process(this + 39);
  Nightingale::wristTemperatureInputValidation::~wristTemperatureInputValidation((Nightingale::wristTemperatureInputValidation *)((char *)this + 305));
  Nightingale::wristTemperatureInputProcess::~wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)(this + 38));
  Nightingale::wristTemperatureInputAcquisition::~wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)(this + 29));
  long long v6 = (void **)(this + 25);
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v6);
  uint64_t v2 = this[21];
  if (v2)
  {
    this[22] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[18];
  if (v3)
  {
    this[19] = v3;
    operator delete(v3);
  }
  long long v6 = (void **)(this + 15);
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v6);
  uint64_t v4 = this[12];
  if (v4)
  {
    this[13] = v4;
    operator delete(v4);
  }
  uint64_t v5 = this[9];
  if (v5)
  {
    this[10] = v5;
    operator delete(v5);
  }
  long long v6 = (void **)(this + 5);
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v6);
}

uint64_t Nightingale::rfLuna::getOngoingFwRfLuna(Nightingale::rfLuna *this, int a2)
{
  *((_DWORD *)this + 56) = 8;
  if (Nightingale::rfLuna::acquireWTmp(this, a2 - 17, a2, 2) && Nightingale::rfLuna::validateWTmp(this, 0.3))
  {
    Nightingale::rfLuna::preCondition(this);
    if (Nightingale::rfLuna::applyAlgs(this, a2, 0.3)) {
      return 1;
    }
    int v5 = 8;
  }
  else
  {
    int v5 = 1;
  }
  uint64_t result = 0;
  *((_DWORD *)this + 56) = v5;
  return result;
}

BOOL Nightingale::rfLuna::acquireWTmp(Nightingale::rfLuna *this, int a2, int a3, int a4)
{
  unint64_t v8 = (uint64_t *)((char *)this + 232);
  unint64_t JDayIdx1stTmp = Nightingale::wristTemperatureInputAcquisition::getJDayIdx1stTmp((uint64_t)this + 232, *(unsigned int ***)this);
  if (*((unsigned __int8 *)this + 32) == v10)
  {
    if (!*((unsigned char *)this + 32)) {
      return 0;
    }
    *((void *)this + 3) = JDayIdx1stTmp;
  }
  else
  {
    if (*((unsigned char *)this + 32))
    {
      BOOL v11 = 0;
      *((unsigned char *)this + 32) = 0;
      return v11;
    }
    *((void *)this + 3) = JDayIdx1stTmp;
    *((unsigned char *)this + 32) = 1;
  }
  memset(v23, 0, sizeof(v23));
  Nightingale::wristTemperatureInputAcquisition::extractWTmp_removeOutlier_withBuf_fromCycleOffset(v8, a3 - a2 + 1, a3, *(_DWORD *)(*(void *)(*((void *)this + 1) + 8) - 96) - 43, *(void **)this, JDayIdx1stTmp, (uint64_t)&v19);
  std::vector<std::vector<float>>::__vdeallocate((uint64_t *)this + 5);
  *(_OWORD *)((char *)this + 40) = v19;
  uint64_t v12 = v20;
  uint64_t v13 = *(void *)__p;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  *((void *)this + 7) = v12;
  *((void *)this + 8) = v13;
  unint64_t v14 = (void *)*((void *)this + 9);
  if (v14)
  {
    *((void *)this + 10) = v14;
    operator delete(v14);
  }
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)&__p[8];
  *((void *)this + 11) = *(void *)&__p[24];
  memset(&__p[8], 0, 24);
  unint64_t v15 = (void *)*((void *)this + 12);
  if (v15)
  {
    *((void *)this + 13) = v15;
    operator delete(v15);
    unint64_t v15 = *(void **)&__p[8];
  }
  *((_OWORD *)this + 6) = *(_OWORD *)&__p[32];
  *((void *)this + 14) = v22;
  *(void *)&__p[40] = 0;
  uint64_t v22 = 0;
  *(void *)&__p[32] = 0;
  if (v15)
  {
    *(void *)&__p[16] = v15;
    operator delete(v15);
  }
  long long v24 = (void **)&v19;
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v24);
  if (*((void *)this + 5) == *((void *)this + 6))
  {
    BOOL v11 = 0;
  }
  else
  {
    Nightingale::wristTemperatureInputProcess::constructVectorOfSlicesFromMultipleWatches((uint64_t)this + 40, 17, a4, a2, (uint64_t)&v19);
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)this + 15);
    *(_OWORD *)((char *)this + 120) = v19;
    *((void *)this + 17) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    size_t v16 = (void *)*((void *)this + 18);
    if (v16)
    {
      *((void *)this + 19) = v16;
      operator delete(v16);
    }
    *((_OWORD *)this + 9) = *(_OWORD *)__p;
    *((void *)this + 20) = *(void *)&__p[16];
    memset(__p, 0, 24);
    int v17 = (void *)*((void *)this + 21);
    if (v17)
    {
      *((void *)this + 22) = v17;
      operator delete(v17);
      int v17 = *(void **)__p;
    }
    *(_OWORD *)((char *)this + 168) = *(_OWORD *)&__p[24];
    *((void *)this + 23) = *(void *)&__p[40];
    memset(&__p[24], 0, 24);
    if (v17)
    {
      *(void *)&__p[8] = v17;
      operator delete(v17);
    }
    long long v24 = (void **)&v19;
    std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v24);
    BOOL v11 = *((void *)this + 15) != *((void *)this + 16);
  }
  *(void *)&long long v19 = v23;
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v19);
  return v11;
}

BOOL Nightingale::rfLuna::validateWTmp(Nightingale::rfLuna *this, float a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  int64x2_t v40 = 0uLL;
  uint64_t v41 = 0;
  int v45 = &v41;
  float v46 = &unk_26E28C690;
  float v47 = Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpMissingCntHigh;
  int v48 = 0;
  BOOL v49 = &v46;
  int v5 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>>((uint64_t)&v41, 1uLL);
  uint64_t v6 = (uint64_t)v5;
  int v42 = (int64x2_t *)v5;
  v43.i64[0] = (uint64_t)v5;
  unint64_t v8 = &v5[4 * v7];
  uint64_t v44 = v8;
  if (v49)
  {
    if (v49 == &v46)
    {
      v5[3] = (uint64_t)v5;
      (*((void (**)(void **, uint64_t *))*v49 + 3))(v49, v5);
    }
    else
    {
      v5[3] = (uint64_t)v49;
      BOOL v49 = 0;
    }
  }
  else
  {
    v5[3] = 0;
  }
  uint64_t v9 = v6 + 32;
  v43.i64[1] = v6 + 32;
  uint64_t v10 = v40.i64[1];
  if (v40.i64[1] == v40.i64[0])
  {
    int64x2_t v11 = vdupq_n_s64(v40.u64[1]);
  }
  else
  {
    do
    {
      v6 -= 32;
      v10 -= 32;
      std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::__value_func[abi:nn180100](v6, v10);
    }
    while (v10 != v40.i64[0]);
    int64x2_t v11 = v40;
    uint64_t v9 = v43.i64[1];
    unint64_t v8 = v44;
  }
  v40.i64[0] = v6;
  int64x2_t v43 = v11;
  uint64_t v12 = v41;
  uint64_t v41 = v8;
  uint64_t v44 = v12;
  int v42 = (int64x2_t *)v11.i64[0];
  std::__split_buffer<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::~__split_buffer((uint64_t)&v42);
  v40.i64[1] = v9;
  std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::~__value_func[abi:nn180100](&v46);
  uint64_t v13 = (void *)*((void *)this + 15);
  uint64_t v14 = (v13[1] - *v13) >> 2;
  unint64_t v15 = operator new(4uLL);
  float v46 = v15;
  *unint64_t v15 = v14;
  float v47 = v15 + 1;
  int v48 = v15 + 1;
  size_t v16 = (float *)operator new(4uLL);
  float *v16 = a2;
  uint64_t v38 = v16 + 1;
  int v39 = v16 + 1;
  unint64_t v37 = v16;
  int v17 = (void *)*((void *)this + 16);
  if (v13 == v17)
  {
    *((_DWORD *)this + 49) = 1;
    int v33 = **(unsigned __int8 **)(*((void *)this + 26) - 24);
    goto LABEL_33;
  }
  uint64_t v18 = (void *)((char *)this + 200);
  do
  {
    uint64_t v19 = *((void *)this + 21);
    if (*((void *)this + 22) == v19) {
LABEL_37:
    }
      abort();
    if (!*(unsigned char *)(v19 + 4))
    {
      uint64_t v20 = (float **)*((void *)this + 15);
      if (*((float ***)this + 16) == v20) {
        goto LABEL_37;
      }
      if (**v20 < 0.0)
      {
        unsigned int v2 = v2 & 0xFFFFFF00 | 1;
        uint64_t v21 = (int64x2_t *)operator new(8uLL);
        v43.i64[0] = (uint64_t)&v21->i64[1];
        v43.i64[1] = (uint64_t)&v21->i64[1];
        v21->i32[0] = v2;
        v21->i32[1] = 1065353216;
        int v42 = v21;
        std::vector<std::vector<std::pair<BOOL,float>>>::push_back[abi:nn180100]((void *)this + 25, (uint64_t **)&v42);
        uint64_t v22 = (uint64_t *)v42;
        if (!v42) {
          goto LABEL_29;
        }
        v43.i64[0] = (uint64_t)v42;
        goto LABEL_28;
      }
    }
    Nightingale::wristTemperatureInputValidation::checkListOfConditions((uint64_t)this + 305, v40.i64, (uint64_t)v13, &v46, &v37, 1, __p);
    char v23 = (void *)*((void *)this + 26);
    unint64_t v24 = *((void *)this + 27);
    if ((unint64_t)v23 < v24)
    {
      void *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      *(_OWORD *)char v23 = *(_OWORD *)__p;
      v23[2] = v36;
      *((void *)this + 26) = v23 + 3;
      goto LABEL_29;
    }
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - *v18) >> 3);
    unint64_t v26 = v25 + 1;
    if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_37;
    }
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *v18) >> 3);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x555555555555555) {
      unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v28 = v26;
    }
    int v45 = (uint64_t **)((char *)this + 216);
    size_t v29 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<BOOL>>>((uint64_t)this + 216, v28);
    unint64_t v30 = &v29[3 * v25];
    int v42 = (int64x2_t *)v29;
    v43.i64[0] = (uint64_t)v30;
    uint64_t v44 = &v29[3 * v31];
    v30[1] = 0;
    v30[2] = 0;
    *unint64_t v30 = 0;
    *(_OWORD *)unint64_t v30 = *(_OWORD *)__p;
    v30[2] = v36;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v36 = 0;
    v43.i64[1] = (uint64_t)(v30 + 3);
    std::vector<std::vector<std::pair<BOOL,float>>>::__swap_out_circular_buffer((void *)this + 25, &v42);
    uint64_t v32 = *((void *)this + 26);
    std::__split_buffer<std::vector<std::pair<BOOL,float>>>::~__split_buffer((uint64_t)&v42);
    uint64_t v22 = (uint64_t *)__p[0];
    *((void *)this + 26) = v32;
    if (v22)
    {
      __p[1] = v22;
LABEL_28:
      operator delete(v22);
    }
LABEL_29:
    v13 += 3;
  }
  while (v13 != v17);
  size_t v16 = v37;
  *((_DWORD *)this + 49) = 1;
  int v33 = **(unsigned __int8 **)(*((void *)this + 26) - 24);
  if (v16)
  {
LABEL_33:
    uint64_t v38 = v16;
    operator delete(v16);
  }
  if (v46)
  {
    float v47 = v46;
    operator delete(v46);
  }
  int v42 = &v40;
  std::vector<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v42);
  return v33 == 0;
}

void Nightingale::rfLuna::preCondition(Nightingale::rfLuna *this)
{
  uint64_t v1 = (std::vector<int> *)*((void *)this + 15);
  unsigned int v2 = (std::vector<int> *)*((void *)this + 16);
  if (v1 != v2)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *((void *)this + 21);
      if (v4 >= (*((void *)this + 22) - v5) >> 3) {
        abort();
      }
      std::vector<int>::pointer begin = (float *)v1->__begin_;
      std::vector<int>::pointer end = v1->__end_;
      if (v1->__begin_ != end)
      {
        uint64_t v8 = v5 + 8 * v4;
        float v9 = *(float *)v8;
        if (!*(unsigned char *)(v8 + 4)) {
          float v9 = -1.0;
        }
        unint64_t v10 = ((char *)end - (char *)begin) >> 2;
        if (v10 <= 1) {
          unint64_t v10 = 1;
        }
        std::vector<int>::pointer v11 = v1->__begin_;
        unint64_t v12 = v10;
        do
        {
          float v13 = *(float *)v11;
          if (fabsf(*(float *)v11 + 1.0) < 1.0e-12)
          {
            *(float *)std::vector<int>::pointer v11 = v9;
            float v13 = v9;
          }
          ++v11;
          float v9 = v13;
          --v12;
        }
        while (v12);
        do
        {
          *std::vector<int>::pointer begin = (float)(*begin + -36.033) / 0.41302;
          ++begin;
          --v10;
        }
        while (v10);
      }
      ++v4;
      Nightingale::vDemean<float>(v1++);
    }
    while (v1 != v2);
  }
}

BOOL Nightingale::rfLuna::applyAlgs(Nightingale::rfLuna *this, int a2, float a3)
{
  uint64_t v3 = (float **)*((void *)this + 15);
  unint64_t v4 = (float **)*((void *)this + 16);
  if (v3 == v4 || **(unsigned char **)(*((void *)this + 26) - 24)) {
    return 0;
  }
  std::vector<int> __p = 0;
  int v33 = 0;
  int v34 = 0;
  do
  {
    if (!Nightingale::rfLuna::getRfAvailabilityFail(this, a2, a3, 2))
    {
      size_t v29 = 0;
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      std::vector<double>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v29, 0, *v3, v3[1], v3[1] - *v3);
      unint64_t v26 = 0;
      unint64_t v27 = 0;
      uint64_t v28 = 0;
      Nightingale::ngt_luna_fw_dl_tmp_process::ngt_luna_fwEndDetRF((void **)this + 39, (uint64_t *)&v29, (uint64_t)&v26);
      unint64_t v10 = v26;
      std::vector<int>::pointer v11 = v33;
      if (v33 >= v34)
      {
        float v13 = (char *)__p;
        uint64_t v14 = (v33 - (unsigned char *)__p) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          abort();
        }
        uint64_t v16 = v34 - (unsigned char *)__p;
        if ((v34 - (unsigned char *)__p) >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v34, v17);
          float v13 = (char *)__p;
          std::vector<int>::pointer v11 = v33;
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[4 * v14];
        *(_DWORD *)uint64_t v19 = v10[1];
        unint64_t v12 = v19 + 4;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        std::vector<int> __p = v19;
        int v33 = v12;
        int v34 = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(_DWORD *)int v33 = *((_DWORD *)v26 + 1);
        unint64_t v12 = v11 + 4;
      }
      int v33 = v12;
      if (v26)
      {
        unint64_t v27 = v26;
        operator delete(v26);
      }
      if (v29)
      {
        unint64_t v30 = v29;
        operator delete(v29);
      }
    }
    v3 += 3;
  }
  while (v3 != v4);
  uint64_t v21 = (char *)__p;
  if (__p == v33)
  {
    BOOL v6 = 0;
    uint64_t v21 = v33;
    if (!v33) {
      return v6;
    }
LABEL_36:
    int v33 = v21;
    operator delete(v21);
    return v6;
  }
  double v22 = 0.0;
  char v23 = (float *)__p;
  do
  {
    float v24 = *v23++;
    double v22 = v22 + v24;
  }
  while (v23 != (float *)v33);
  float v25 = v22 / (double)(unint64_t)((v33 - (unsigned char *)__p) >> 2);
  if (v33 != (char *)__p + 4)
  {
    memmove(__p, (char *)__p + 4, v33 - ((unsigned char *)__p + 4));
    uint64_t v21 = (char *)__p;
  }
  BOOL v6 = v25 >= 0.67;
  if (v21) {
    goto LABEL_36;
  }
  return v6;
}

void Nightingale::rfLuna::reset(Nightingale::rfLuna *this)
{
  *((_DWORD *)this + 56) = 9;
}

uint64_t Nightingale::rfLuna::getFailureReasonOngoingFwRF(Nightingale::rfLuna *this)
{
  return *((unsigned int *)this + 56);
}

BOOL Nightingale::rfLuna::getRfAvailabilityFail(Nightingale::rfLuna *this, int a2, float a3, int a4)
{
  uint64_t v5 = (uint64_t *)((char *)this + 200);
  if (*((void *)this + 25) != *((void *)this + 26)) {
    return *((_DWORD *)this + 56) == 1;
  }
  BOOL result = Nightingale::rfLuna::acquireWTmp(this, a2 - a4 - 15, a2, a4);
  if (result)
  {
    if (Nightingale::rfLuna::validateWTmp(this, a3))
    {
      return 0;
    }
    else
    {
      std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100](v5);
      *((_DWORD *)this + 56) = 9;
      return 1;
    }
  }
  return result;
}

uint64_t std::vector<std::vector<std::pair<BOOL,float>>>::push_back[abi:nn180100](void *a1, uint64_t **a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    v16[4] = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<BOOL>>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[24 * v10];
    v16[0] = v14;
    v16[1] = v15;
    v16[3] = &v14[24 * v13];
    *(void *)unint64_t v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = 0;
    std::vector<std::pair<BOOL,float>>::__init_with_size[abi:nn180100]<std::pair<BOOL,float>*,std::pair<BOOL,float>*>(v15, *a2, a2[1], a2[1] - *a2);
    _OWORD v16[2] = v15 + 24;
    std::vector<std::vector<std::pair<BOOL,float>>>::__swap_out_circular_buffer(a1, v16);
    unint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::pair<BOOL,float>>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *(void *)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
    uint64_t result = (uint64_t)std::vector<std::pair<BOOL,float>>::__init_with_size[abi:nn180100]<std::pair<BOOL,float>*,std::pair<BOOL,float>*>((char *)v7, *a2, a2[1], a2[1] - *a2);
    unint64_t v9 = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void Nightingale::vDemean<float>(std::vector<int> *__x)
{
  if (__x->__begin_ != __x->__end_)
  {
    std::vector<int>::vector(&v5, __x);
    float Mean = Nightingale::getMeanWin<float>((float **)&v5, -1);
    if (v5.__begin_)
    {
      v5.__end_ = v5.__begin_;
      operator delete(v5.__begin_);
    }
    std::vector<int>::pointer begin = __x->__begin_;
    std::vector<int>::pointer end = __x->__end_;
    while (begin != end)
    {
      *(float *)std::vector<int>::pointer begin = *(float *)begin - Mean;
      ++begin;
    }
  }
}

void std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unsigned int v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      unint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      std::vector<int> v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::~__value_func[abi:nn180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *std::vector<std::pair<BOOL,float>>::__init_with_size[abi:nn180100]<std::pair<BOOL,float>*,std::pair<BOOL,float>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<Nightingale::PhaseSet>::__vallocate[abi:nn180100](result, a4);
    unint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void *std::vector<std::vector<std::pair<BOOL,float>>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    void *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  unint64_t v6 = (void *)*result;
  void *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<std::pair<BOOL,float>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::pair<BOOL,float>>>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    long long v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    long long v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::~__value_func[abi:nn180100](v4 - 4);
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<double>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(uint64_t a1, char *__src, float *a3, float *a4, uint64_t a5)
{
  long long v5 = __src;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    unint64_t v13 = *(unsigned char **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = (__src - v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v40 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v31 = (double *)&v18[8 * v15];
    std::vector<int> __p = v18;
    unint64_t v37 = v31;
    int v39 = &v18[8 * v17];
    uint64_t v32 = 8 * a5;
    int v33 = &v31[a5];
    do
    {
      float v34 = *v7++;
      *v31++ = v34;
      v32 -= 8;
    }
    while (v32);
    uint64_t v38 = v33;
    long long v5 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v38 != v37) {
      uint64_t v38 = (double *)((char *)v38 + (((char *)v37 - (char *)v38 + 7) & 0xFFFFFFFFFFFFFFF8));
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = (uint64_t)(v12 - (void)__src) >> 3;
  if (v19 >= a5)
  {
    int v20 = &a3[a5];
    uint64_t v21 = *(char **)(v9 - 8);
LABEL_18:
    float v25 = &__src[8 * a5];
    unint64_t v26 = &v21[-8 * a5];
    unint64_t v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      unint64_t v27 = v21;
      do
      {
        uint64_t v28 = *(void *)v26;
        v26 += 8;
        *(void *)unint64_t v27 = v28;
        v27 += 8;
      }
      while ((unint64_t)v26 < v12);
    }
    *(void *)(a1 + 8) = v27;
    if (v21 != v25) {
      memmove(&v21[-8 * ((v21 - v25) >> 3)], __src, v21 - v25);
    }
    if (v20 != v7)
    {
      size_t v29 = (double *)v5;
      do
      {
        float v30 = *v7++;
        *v29++ = v30;
      }
      while (v7 != v20);
    }
    return v5;
  }
  int v20 = &a3[v19];
  uint64_t v21 = *(char **)(v9 - 8);
  if (v20 != a4)
  {
    double v22 = v20;
    char v23 = *(double **)(v9 - 8);
    do
    {
      float v24 = *v22++;
      *v23++ = v24;
      v21 += 8;
    }
    while (v22 != a4);
  }
  *(void *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (void)__src) >= 1) {
    goto LABEL_18;
  }
  return v5;
}

char *std::vector<double>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  long long v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float),std::allocator<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float)>,std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems&,std::vector<float> const&,int,float)>::~__func()
{
}

__n128 std::__function::__func<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float),std::allocator<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float)>,std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems&,std::vector<float> const&,int,float)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E28C690;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float),std::allocator<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float)>,std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems&,std::vector<float> const&,int,float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E28C690;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float),std::allocator<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float)>,std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems&,std::vector<float> const&,int,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, float *a5)
{
  long long v5 = *(uint64_t (**)(void *, uint64_t, void, float))(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    long long v5 = *(uint64_t (**)(void *, uint64_t, void, float))(*v7 + v5);
  }
  return v5(v7, a3, *a4, *a5);
}

uint64_t std::__function::__func<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float),std::allocator<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float)>,std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems&,std::vector<float> const&,int,float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float),std::allocator<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float)>,std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems&,std::vector<float> const&,int,float)>::target_type()
{
}

BOOL std::type_info::operator==[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t Nightingale::periodEstimatorLuna::periodEstimatorLuna(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = Nightingale::periodEstimatorBase::periodEstimatorBase((Nightingale::periodEstimatorBase *)a1);
  Nightingale::ngt_luna_period_dl_tmp_process::ngt_luna_period_dl_tmp_process((Nightingale::ngt_luna_period_dl_tmp_process *)(v4 + 8));
  *(unsigned char *)(a1 + 20) = BYTE4(a2);
  *(_DWORD *)(a1 + 16) = a2;
  return a1;
}

{
  uint64_t v4;

  uint64_t v4 = Nightingale::periodEstimatorBase::periodEstimatorBase((Nightingale::periodEstimatorBase *)a1);
  Nightingale::ngt_luna_period_dl_tmp_process::ngt_luna_period_dl_tmp_process((Nightingale::ngt_luna_period_dl_tmp_process *)(v4 + 8));
  *(unsigned char *)(a1 + 20) = BYTE4(a2);
  *(_DWORD *)(a1 + 16) = a2;
  return a1;
}

void Nightingale::periodEstimatorLuna::~periodEstimatorLuna(id **this)
{
  Nightingale::ngt_luna_period_dl_tmp_process::~ngt_luna_period_dl_tmp_process(this + 1);
  Nightingale::periodEstimatorBase::~periodEstimatorBase((Nightingale::periodEstimatorBase *)this);
}

{
  uint64_t vars8;

  Nightingale::ngt_luna_period_dl_tmp_process::~ngt_luna_period_dl_tmp_process(this + 1);
  Nightingale::periodEstimatorBase::~periodEstimatorBase((Nightingale::periodEstimatorBase *)this);
}

void Nightingale::periodEstimatorLuna::estimatePeriodLuna(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11 = Nightingale::CGradient::CGradient(a7);
  *(void *)float v30 = a7;
  *(unsigned char *)(a7 + 56) = 0;
  uint64_t v12 = a7 + 56;
  *(unsigned char *)(v12 + 4) = 0;
  *(unsigned char *)(v12 + 8) = 0;
  *(unsigned char *)(v12 + 12) = 0;
  *(unsigned char *)(v12 + 16) = 0;
  *(_DWORD *)(v12 + 20) = 5;
  *(unsigned char *)(v12 + 24) = 0;
  uint64_t v13 = a3[1];
  long long v14 = *(_OWORD *)(v13 - 48);
  long long v47 = *(_OWORD *)(v13 - 64);
  *(_OWORD *)int v48 = v14;
  *(void *)&v48[13] = *(void *)(v13 - 35);
  long long v15 = *(_OWORD *)(v13 - 80);
  v46[0] = *(_OWORD *)(v13 - 96);
  v46[1] = v15;
  uint64_t v50 = 0;
  int v51 = 0;
  BOOL v49 = 0;
  unint64_t v17 = *(unsigned char **)(v13 - 24);
  uint64_t v16 = *(unsigned char **)(v13 - 16);
  size_t v18 = v16 - v17;
  if (v16 == v17)
  {
    uint64_t v19 = 0;
  }
  else
  {
    if (v16 - v17 < 0) {
      abort();
    }
    uint64_t v19 = (char *)operator new(v16 - v17);
    BOOL v49 = v19;
    int v51 = &v19[v18];
    uint64_t v11 = (uint64_t)memmove(v19, v17, v18);
    uint64_t v50 = &v19[v18];
  }
  if (*a3 != v13
    && BYTE4(v47)
    && BYTE12(v47)
    && *(unsigned char *)(a4 + 36)
    && *(unsigned char *)(a6 + 16)
    && *(_DWORD *)(a6 + 8) >= *(_DWORD *)(a6 + 4))
  {
    int AlgsUsedToRunLunaPeriod = Nightingale::periodEstimatorLuna::getAlgsUsedToRunLunaPeriod(v11, *(_DWORD *)a6, a3, a4, a5, *(void *)(a6 + 4));
    uint64_t v21 = (int)*(float *)(a4 + 48);
    if (!*(unsigned char *)(a4 + 52)) {
      uint64_t v21 = 0;
    }
    Nightingale::periodEstimatorCalendar::periodEstimatorCalendar((Nightingale::periodEstimatorBase *)v45, v21 | ((unint64_t)*(unsigned __int8 *)(a4 + 52) << 32));
    if (AlgsUsedToRunLunaPeriod == 1)
    {
      Nightingale::lstmLunaPeriod::lstmLunaPeriod(&v42, a2, a3, a4, *(void *)(a6 + 4));
      Nightingale::lstmLunaPeriod::estimatePeriodStartLuna((Nightingale::lstmLunaPeriod *)&v42, (uint64_t)&__p);
      if (v39)
      {
        if (Nightingale::CGradient::get_vGrad_empty((Nightingale::CGradient *)&__p))
        {
          unsigned int v24 = 0;
          unsigned __int8 v25 = 0;
          int v26 = 0;
          int AlgsUsedToRunLunaPeriod = 5;
          double v22 = *(char **)v30;
        }
        else
        {
          double v22 = *(char **)v30;
          if (&__p != *(void ***)v30) {
            std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(*(char **)v30, (char *)__p, (uint64_t)v33, (v33 - (unsigned char *)__p) >> 2);
          }
          *(_OWORD *)(*(void *)v30 + 24) = v34[0];
          *(_OWORD *)(*(void *)v30 + 33) = *(_OWORD *)((char *)v34 + 9);
          *(_DWORD *)uint64_t v12 = v35;
          *(unsigned char *)(v12 + 4) = v36;
          *(_DWORD *)(v12 + 8) = v37;
          *(unsigned char *)(v12 + 12) = v38;
          unsigned __int8 v25 = v40;
          unsigned int v24 = v40 & 0xFFFFFF00;
          int AlgsUsedToRunLunaPeriod = 1;
          int v26 = v41;
        }
        v22[72] = 1;
      }
      else
      {
        if (*(_DWORD *)a6 == 1)
        {
          unsigned __int8 v25 = v40;
          unsigned int v24 = v40 & 0xFFFFFF00;
          int v26 = v41;
          int AlgsUsedToRunLunaPeriod = 2;
        }
        else
        {
          unsigned int v24 = 0;
          unsigned __int8 v25 = 0;
          int v26 = 0;
          int AlgsUsedToRunLunaPeriod = 1;
        }
        double v22 = *(char **)v30;
      }
      if (__p)
      {
        int v33 = __p;
        operator delete(__p);
      }
      Nightingale::lstmLunaPeriod::~lstmLunaPeriod((Nightingale::lstmLunaPeriod *)&v42);
      if (v26 && Nightingale::periodEstimatorBase::checkDayToRunPeriodDLLessThanOPK(a1, a3[13], v24 & 0xFFFFFF00 | v25))
      {
        v22[80] = 1;
        *((void *)v22 + 1) = *(void *)v22;
        if (v22[60]) {
          v22[60] = 0;
        }
        if (v22[68]) {
          v22[68] = 0;
        }
        v22[72] = 0;
        int AlgsUsedToRunLunaPeriod = 5;
        goto LABEL_42;
      }
    }
    else
    {
      double v22 = *(char **)v30;
      if (!AlgsUsedToRunLunaPeriod)
      {
        Nightingale::periodEstimatorLuna::getPeriodRegularLuna(a1, 0, a3[12], (uint64_t)v46, (Nightingale::periodEstimatorCalendar *)v45, (uint64_t)&v42);
        char v23 = **(void ***)v30;
        if (**(void **)v30)
        {
          *(void *)(*(void *)v30 + 8) = v23;
          operator delete(v23);
        }
        int AlgsUsedToRunLunaPeriod = 0;
        **(_OWORD **)float v30 = v42;
        *(void *)(*(void *)v30 + 16) = v43;
        *(_OWORD *)(*(void *)v30 + 24) = v44[0];
        *(_OWORD *)(*(void *)v30 + 33) = *(_OWORD *)((char *)v44 + 9);
LABEL_42:
        *((_DWORD *)v22 + 19) = AlgsUsedToRunLunaPeriod;
        Nightingale::periodEstimatorCalendar::~periodEstimatorCalendar((Nightingale::periodEstimatorCalendar *)v45);
        goto LABEL_43;
      }
    }
    if (AlgsUsedToRunLunaPeriod == 2)
    {
      Nightingale::periodEstimatorLuna::getPeriodRegularLuna(a1, *(void *)(a6 + 12), a3[12], (uint64_t)v46, (Nightingale::periodEstimatorCalendar *)v45, (uint64_t)&v42);
      unint64_t v27 = *(void **)v22;
      if (*(void *)v22)
      {
        *((void *)v22 + 1) = v27;
        operator delete(v27);
      }
      *(_OWORD *)double v22 = v42;
      *((void *)v22 + 2) = v43;
      *(_OWORD *)(v22 + 24) = v44[0];
      *(_OWORD *)(v22 + 33) = *(_OWORD *)((char *)v44 + 9);
      int AlgsUsedToRunLunaPeriod = 2;
    }
    goto LABEL_42;
  }
LABEL_43:
  if (v19) {
    operator delete(v19);
  }
}

uint64_t Nightingale::periodEstimatorLuna::getAlgsUsedToRunLunaPeriod(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, int a5, unint64_t a6)
{
  if (a2 == 7) {
    return 5;
  }
  uint64_t v7 = a3[1];
  if (*(unsigned char *)(v7 - 52)) {
    BOOL v8 = *(float *)(v7 - 56) < 2.25;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8) {
    return 0;
  }
  unint64_t v9 = HIDWORD(a6);
  if ((int)a6 <= SHIDWORD(a6))
  {
    BOOL v11 = 0;
    BOOL v12 = *(unsigned char *)(a4 + 4) != 0;
    if (*(unsigned char *)(a4 + 4)) {
      uint64_t v13 = a3[1];
    }
    else {
      uint64_t v13 = *a3;
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v13) >> 5);
    if (v7 == *a3) {
      BOOL v12 = 0;
    }
    if (v14 > 1) {
      BOOL v12 = 1;
    }
    while (1)
    {
      unsigned int v10 = (int)a6 - 45 >= a5 && v12;
      if (v10 == 1 && (!*((unsigned char *)a3 + 36) || *((_DWORD *)a3 + 8) <= (int)a6 - 44)) {
        break;
      }
      BOOL v11 = (int)a6 >= (int)v9;
      LODWORD(a6) = a6 + 1;
      if (v9 + 1 == a6)
      {
        unsigned int v10 = 5;
        break;
      }
    }
  }
  else
  {
    unsigned int v10 = 5;
    BOOL v11 = 1;
  }
  if (a2 == 1 && v11) {
    return 2;
  }
  else {
    return v10;
  }
}

void Nightingale::periodEstimatorLuna::getPeriodRegularLuna(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, Nightingale::periodEstimatorCalendar *a5@<X5>, uint64_t a6@<X8>)
{
  Nightingale::CGradient::CGradient(a6);
  if (*(unsigned char *)(a4 + 36) && *(unsigned char *)(a4 + 44))
  {
    uint64_t NullPoint = Nightingale::periodEstimatorBase::getNullPoint(a1, a2, a3, *(_DWORD *)a4);
    if (*(unsigned char *)(a4 + 36) && *(unsigned char *)(a4 + 44))
    {
      Nightingale::periodEstimatorCalendar::getCalBasedPeriodStartGradient(a5, NullPoint, (uint64_t)&v19, *(float *)(a4 + 32), *(float *)(a4 + 40));
      uint64_t v13 = *(void **)a6;
      if (*(void *)a6)
      {
        *(void *)(a6 + 8) = v13;
        operator delete(v13);
      }
      *(_OWORD *)a6 = v19;
      *(void *)(a6 + 16) = v20;
      *(_OWORD *)(a6 + 24) = v21[0];
      *(_OWORD *)(a6 + 33) = *(_OWORD *)((char *)v21 + 9);
    }
    else
    {
      uint64_t v14 = std::__throw_bad_optional_access[abi:nn180100]();
      Nightingale::periodEstimatorLuna::enoughDataToRunlunaDL(v14, v15, v16, v17, v18);
    }
  }
}

BOOL Nightingale::periodEstimatorLuna::enoughDataToRunlunaDL(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, int a5)
{
  if (a2 - 45 < a5) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (!*(unsigned char *)(a4 + 4))
  {
LABEL_5:
    if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 5) >= 2) {
      goto LABEL_6;
    }
    return 0;
  }
  if (v5 == v6)
  {
    uint64_t v6 = a3[1];
    goto LABEL_5;
  }
LABEL_6:
  int v7 = a2 - 44;
  int v8 = *((_DWORD *)a3 + 8);
  if (*((unsigned char *)a3 + 36))
  {
    BOOL v11 = __OFSUB__(v8, v7);
    BOOL v9 = v8 == v7;
    BOOL v10 = v8 - v7 < 0;
  }
  else
  {
    BOOL v11 = 0;
    BOOL v9 = 1;
    BOOL v10 = 0;
  }
  return (v10 ^ v11 | v9) != 0;
}

BOOL Nightingale::periodEstimatorBase::checkDayToRunPeriodDLLessThanOPK(uint64_t a1, uint64_t a2, int a3)
{
  return (a2 & 0xFF00000000) != 0 && (int)a2 + 1 >= a3;
}

uint64_t Nightingale::periodEstimatorBase::getNullPoint(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = a3 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    int v5 = a2 + 8;
    if ((int)a2 + 8 <= (int)a3) {
      int v5 = a3;
    }
    int v6 = v5 - a4;
    BOOL v9 = v4 == 0;
    uint64_t v7 = 0x100000000;
    if (v9)
    {
      LOBYTE(v6) = a2 + 8 - a4;
      unsigned int v8 = (a2 + 8 - a4) & 0xFFFFFF00;
    }
    else
    {
      unsigned int v8 = v6 & 0xFFFFFF00;
    }
  }
  else
  {
    LOBYTE(v6) = a3 - a4;
    unsigned int v8 = (a3 - a4) & 0xFFFFFF00;
    BOOL v9 = v4 == 0;
    if (v4) {
      uint64_t v7 = 0x100000000;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v9)
    {
      LOBYTE(v6) = 0;
      unsigned int v8 = 0;
    }
  }
  return v7 | v8 | v6;
}

uint64_t Nightingale::periodEstimatorBase::constructPeriodGradFromDLOut@<X0>(void *a1@<X1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, Nightingale::CGradient *a5@<X8>)
{
  uint64_t result = Nightingale::CGradient::CGradient((uint64_t)a5);
  if (a1[1] - *a1 == 128)
  {
    if (a4 >= -31)
    {
      uint64_t v11 = 0;
      uint64_t v12 = (a4 + 32);
      uint64_t v13 = -(uint64_t)a4;
      uint64_t v14 = -4 * a4;
      do
      {
        double v15 = 0.0;
        if (v11 >= a2 && v11 <= a3)
        {
          if (v13 + v11 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 2)) {
            abort();
          }
          double v15 = *(float *)(*a1 + v14 + 4 * v11);
        }
        Nightingale::CGradient::push_back(a5, v15);
        ++v11;
      }
      while (v12 != v11);
    }
    return Nightingale::CGradient::normalize((uint64_t)a5);
  }
  return result;
}

char *Nightingale::lstmModelCommonFw::fwDLPostProcess@<X0>(std::vector<int> *a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  int v7 = 0;
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 4) = 0;
  *(unsigned char *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 12) = 0;
  *(void *)(a4 + 16) = 0;
  unsigned int v8 = (char *)(a4 + 16);
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  if (a2)
  {
    std::vector<int>::pointer begin = (float *)a1->__begin_;
    uint64_t v10 = (uint64_t)(a1->__end_ - 1);
    a1->__end_ = (std::vector<int>::pointer)v10;
    uint64_t v11 = v10 - (void)(begin + 1);
    if ((float *)v10 == begin + 1)
    {
      uint64_t v12 = begin;
    }
    else
    {
      memmove(begin, begin + 1, v10 - (void)(begin + 1));
      uint64_t v12 = (float *)a1->__begin_;
    }
    uint64_t v13 = (float *)((char *)begin + v11);
    a1->__end_ = (std::vector<int>::pointer)((char *)begin + v11);
    if (v12 != (float *)((char *)begin + v11))
    {
      double v14 = 0.0;
      double v15 = v12;
      do
      {
        float v16 = *v15++;
        double v14 = v14 + v16;
      }
      while (v15 != v13);
      float v17 = 1.0 / v14;
      do
      {
        *uint64_t v12 = *v12 * v17;
        ++v12;
      }
      while (v12 != v13);
    }
    int v7 = 1;
  }
  unint64_t v18 = Nightingale::argquantile(a1, 0.2);
  uint64_t result = (char *)Nightingale::argquantile(a1, 0.8);
  if (((v18 | result) & 1) == 0)
  {
    *(_DWORD *)a4 = (int)(float)(roundf((float)(*((float *)&v18 + 1) + *((float *)&result + 1)) * 0.5) + (float)(v7 + a3));
    *(unsigned char *)(a4 + 4) = 1;
    *(float *)(a4 + 8) = *((float *)&result + 1) - *((float *)&v18 + 1);
    *(unsigned char *)(a4 + 12) = 1;
    if (v8 != (char *)a1)
    {
      uint64_t v20 = (char *)a1->__begin_;
      uint64_t end = (uint64_t)a1->__end_;
      unint64_t v22 = (int64_t)(end - (unint64_t)a1->__begin_) >> 2;
      return std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(v8, v20, end, v22);
    }
  }
  return result;
}

void Nightingale::lstmModelCommonPeriod::periodDLPostProcess(std::vector<int> *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  Nightingale::CGradient::CGradient((uint64_t)__p);
  unint64_t v6 = Nightingale::argquantile(a1, 0.1);
  unint64_t v7 = Nightingale::argquantile(a1, 0.2);
  unint64_t v8 = Nightingale::argquantile(a1, 0.8);
  unint64_t v9 = Nightingale::argquantile(a1, 0.9);
  if ((v6 & 1) == 0
    && ((v7 & 1) == 0 ? (BOOL v10 = (v8 & 1) == 0) : (BOOL v10 = 0), v10 ? (v11 = (v9 & 1) == 0) : (v11 = 0), v11))
  {
    int v12 = (int)(float)(roundf((float)(*((float *)&v7 + 1) + *((float *)&v8 + 1)) * 0.5) + 0.0);
    int v13 = v12 - (int)*((float *)&v6 + 1);
    int v14 = (int)*((float *)&v9 + 1) - v12;
    if (SHIDWORD(v9) != SHIDWORD(v6))
    {
      int v13 = llroundf((float)v13 * 0.85);
      int v14 = llroundf((float)v14 * 0.85);
    }
    if (v14 >= 6) {
      int v15 = 6;
    }
    else {
      int v15 = v14;
    }
    if (v13 >= 6) {
      int v16 = 6;
    }
    else {
      int v16 = v13;
    }
    if (v13 + v14 > 12)
    {
      int v14 = v15;
      int v13 = v16;
    }
    int v17 = v12 - v13;
    if (v17 <= 1) {
      int v17 = 1;
    }
    int v18 = v17 + a2;
    int v19 = v12 + a2 + v14;
    Nightingale::lstmModelCommonPeriod::constructPeriodGradFromDLOut(a1, v17 + a2, v19, a2, (Nightingale::CGradient *)&v23);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::vector<int> __p = v23;
    uint64_t v27 = v24;
    v28[0] = v25[0];
    *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)((char *)v25 + 9);
    Nightingale::CGradient::CGradient(a3);
    *(unsigned char *)(a3 + 56) = 0;
    *(unsigned char *)(a3 + 60) = 0;
    *(unsigned char *)(a3 + 64) = 0;
    *(unsigned char *)(a3 + 68) = 0;
    *(unsigned char *)(a3 + 72) = 0;
    *(unsigned char *)(a3 + 76) = 0;
    *(unsigned char *)(a3 + 80) = 0;
    *(unsigned char *)(a3 + 84) = 0;
    if (__p != (void **)a3) {
      std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)a3, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
    }
    *(_OWORD *)(a3 + 24) = v28[0];
    *(_OWORD *)(a3 + 33) = *(_OWORD *)((char *)v28 + 9);
    *(_DWORD *)(a3 + 56) = v18;
    *(unsigned char *)(a3 + 60) = 1;
    *(_DWORD *)(a3 + 64) = v19;
    *(unsigned char *)(a3 + 68) = 1;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v20 = __p[0];
    int64_t v21 = (char *)__p[1] - (char *)__p[0];
    if (__p[1] != __p[0])
    {
      std::vector<int>::__vallocate[abi:nn180100]((void *)a3, v21 >> 2);
      unint64_t v22 = *(char **)(a3 + 8);
      memmove(v22, v20, v21);
      *(void *)(a3 + 8) = &v22[v21];
    }
    *(_OWORD *)(a3 + 24) = v28[0];
    *(_OWORD *)(a3 + 33) = *(_OWORD *)((char *)v28 + 9);
    *(_DWORD *)(a3 + 56) = 0;
    *(unsigned char *)(a3 + 60) = 1;
    *(_DWORD *)(a3 + 64) = 0;
    *(unsigned char *)(a3 + 68) = 1;
    *(unsigned char *)(a3 + 72) = 0;
    *(unsigned char *)(a3 + 76) = 0;
    *(unsigned char *)(a3 + 80) = 0;
    *(unsigned char *)(a3 + 84) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t Nightingale::lstmModelCommonPeriod::constructPeriodGradFromDLOut@<X0>(void *a1@<X1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, Nightingale::CGradient *a5@<X8>)
{
  uint64_t result = Nightingale::CGradient::CGradient((uint64_t)a5);
  if (a1[1] - *a1 == 128)
  {
    if (a4 >= -31)
    {
      uint64_t v11 = 0;
      uint64_t v12 = (a4 + 32);
      uint64_t v13 = -(uint64_t)a4;
      uint64_t v14 = -4 * a4;
      do
      {
        double v15 = 0.0;
        if (v11 >= a2 && v11 <= a3)
        {
          if (v13 + v11 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 2)) {
            abort();
          }
          double v15 = *(float *)(*a1 + v14 + 4 * v11);
        }
        Nightingale::CGradient::push_back(a5, v15);
        ++v11;
      }
      while (v12 != v11);
    }
    return Nightingale::CGradient::normalize((uint64_t)a5);
  }
  return result;
}

uint64_t Nightingale::lstmModelCommonPeriod::applyNoflowUpdateDL(Nightingale::lstmModelCommonPeriod *this, Nightingale::CGradient *a2, int a3)
{
  if ((int)Nightingale::CGradient::get_vGrad_len(a2) < a3) {
    *((unsigned char *)a2 + 33) = 1;
  }
  Nightingale::CGradient::annihilateEarly((char **)a2, a3 + 1);
  Nightingale::CGradient::normalize((uint64_t)a2);
  Nightingale::CGradient::set_isNull_if_grad_allZeros((uint64_t)a2);
  uint64_t result = Nightingale::CGradient::get_isNull(a2);
  if (result) {
    *((void *)a2 + 1) = *(void *)a2;
  }
  *((unsigned char *)a2 + 34) = 1;
  return result;
}

id HealthAlgorithms::deviationAnalysis(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = HealthAlgorithms::deviation(a1);
  [v2 setIrregularBleeding:v3];

  uint64_t v4 = HealthAlgorithms::deviation(a1 + 12);
  [v2 setInfrequentBleeding:v4];

  int v5 = HealthAlgorithms::deviation(a1 + 24);
  [v2 setProlongedBleeding:v5];

  unint64_t v6 = HealthAlgorithms::deviation(a1 + 36);
  [v2 setSpotting:v6];

  HealthAlgorithms::deviationAnalysisCoreAnalytics(a1, v2);
  return v2;
}

void sub_22F11C944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HealthAlgorithms::deviation(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    if ((*(_DWORD *)(a1 + 4) & 0x80000000) == 0 && (*(_DWORD *)(a1 + 8) & 0x80000000) == 0)
    {
      uint64_t v2 = objc_opt_new();
      [v2 setJulianDayOfAnalysisWindowStart:*(unsigned int *)(a1 + 4)];
      [v2 setJulianDayOfAnalysisWindowEnd:*(unsigned int *)(a1 + 8)];
      goto LABEL_9;
    }
    uint64_t v3 = ha_get_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      HealthAlgorithms::deviation(v3);
    }
  }
  uint64_t v2 = 0;
LABEL_9:
  return v2;
}

void sub_22F11CA0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HealthAlgorithms::deviationAnalysisCoreAnalytics(uint64_t a1, void *a2)
{
  id v15 = a2;
  uint64_t v3 = [v15 irregularBleeding];

  if (v3)
  {
    uint64_t v4 = HealthAlgorithms::deviationIrregularMetricsForCoreAnalytics(a1 + 48);
    int v5 = [v15 irregularBleeding];
    [v5 setMetricsForCoreAnalytics:v4];
  }
  unint64_t v6 = [v15 infrequentBleeding];

  if (v6)
  {
    unint64_t v7 = HealthAlgorithms::deviationInfrequentMetricsForCoreAnalytics(a1 + 76);
    unint64_t v8 = [v15 infrequentBleeding];
    [v8 setMetricsForCoreAnalytics:v7];
  }
  unint64_t v9 = [v15 prolongedBleeding];

  if (v9)
  {
    BOOL v10 = HealthAlgorithms::deviationProlongedMetricsForCoreAnalytics(a1 + 96);
    uint64_t v11 = [v15 prolongedBleeding];
    [v11 setMetricsForCoreAnalytics:v10];
  }
  uint64_t v12 = [v15 spotting];

  if (v12)
  {
    uint64_t v13 = HealthAlgorithms::deviationSpottingMetricsForCoreAnalytics(a1 + 116);
    uint64_t v14 = [v15 spotting];
    [v14 setMetricsForCoreAnalytics:v13];
  }
}

void sub_22F11CB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id HealthAlgorithms::deviationIrregularMetricsForCoreAnalytics(uint64_t a1)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = HealthAlgorithms::convert_core_analytics((unsigned __int8 *)a1);
  v10[0] = @"window1CycleLengthDiff";
  uint64_t v3 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 12)];
  v11[0] = v3;
  v10[1] = @"window2CycleLengthDiff";
  uint64_t v4 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 16)];
  v11[1] = v4;
  v10[2] = @"window1CycleCount";
  int v5 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 20)];
  v11[2] = v5;
  v10[3] = @"window2CycleCount";
  unint64_t v6 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 24)];
  v11[3] = v6;
  unint64_t v7 = [NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:4];

  unint64_t v8 = (void *)[v7 mutableCopy];
  [v8 addEntriesFromDictionary:v2];

  return v8;
}

void sub_22F11CD30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HealthAlgorithms::deviationInfrequentMetricsForCoreAnalytics(uint64_t a1)
{
  v9[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = HealthAlgorithms::convert_core_analytics((unsigned __int8 *)a1);
  v8[0] = @"window1PeriodCount";
  uint64_t v3 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 12)];
  v8[1] = @"window2PeriodCount";
  v9[0] = v3;
  uint64_t v4 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 16)];
  v9[1] = v4;
  int v5 = [NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];

  unint64_t v6 = (void *)[v5 mutableCopy];
  [v6 addEntriesFromDictionary:v2];

  return v6;
}

void sub_22F11CEA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HealthAlgorithms::deviationProlongedMetricsForCoreAnalytics(uint64_t a1)
{
  v9[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = HealthAlgorithms::convert_core_analytics((unsigned __int8 *)a1);
  v8[0] = @"periodUsedCount";
  uint64_t v3 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 12)];
  v8[1] = @"longPeriodUsedCount";
  v9[0] = v3;
  uint64_t v4 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 16)];
  v9[1] = v4;
  int v5 = [NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];

  unint64_t v6 = (void *)[v5 mutableCopy];
  [v6 addEntriesFromDictionary:v2];

  return v6;
}

void sub_22F11CFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HealthAlgorithms::deviationSpottingMetricsForCoreAnalytics(uint64_t a1)
{
  v9[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = HealthAlgorithms::convert_core_analytics((unsigned __int8 *)a1);
  v8[0] = @"window1SpottingDays";
  uint64_t v3 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 12)];
  v8[1] = @"window2SpottingDays";
  v9[0] = v3;
  uint64_t v4 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 16)];
  v9[1] = v4;
  int v5 = [NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];

  unint64_t v6 = (void *)[v5 mutableCopy];
  [v6 addEntriesFromDictionary:v2];

  return v6;
}

void sub_22F11D150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HealthAlgorithms::convert_core_analytics(unsigned __int8 *a1)
{
  v12[7] = *MEMORY[0x263EF8340];
  v11[0] = @"deviationTrueBeforeRules";
  uint64_t v2 = [NSNumber numberWithBool:*a1];
  v12[0] = v2;
  v11[1] = @"passedRuleMinWindowStart";
  uint64_t v3 = [NSNumber numberWithBool:a1[1]];
  v12[1] = v3;
  v11[2] = @"passedRuleMinWindowEnd";
  uint64_t v4 = [NSNumber numberWithBool:a1[2]];
  v12[2] = v4;
  v11[3] = @"passedRuleEnoughData";
  int v5 = [NSNumber numberWithBool:a1[3]];
  v12[3] = v5;
  v11[4] = @"passedRuleFactorEndInWashout";
  unint64_t v6 = [NSNumber numberWithBool:a1[4]];
  v12[4] = v6;
  void v11[5] = @"passedRuleFactorInWindow";
  unint64_t v7 = [NSNumber numberWithBool:a1[5]];
  v12[5] = v7;
  v11[6] = @"analysisWindowAge";
  unint64_t v8 = [NSNumber numberWithInt:*((unsigned int *)a1 + 2)];
  v12[6] = v8;
  unint64_t v9 = [NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:7];

  return v9;
}

void sub_22F11D374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HealthAlgorithms::deviationAnalysisHIDCoreAnalytics(unsigned __int8 *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  unint64_t v9 = objc_opt_new();
  [v9 setObject:v7 forKeyedSubscript:@"pseudoDeviceId"];
  BOOL v10 = [NSNumber numberWithBool:a3];
  [v9 setObject:v10 forKeyedSubscript:@"isOngoingMenstruation"];

  uint64_t v11 = NSNumber;
  if (v8) {
    uint64_t v12 = [v8 intValue];
  }
  else {
    uint64_t v12 = 0xFFFFFFFFLL;
  }
  uint64_t v13 = [v11 numberWithInt:v12];
  [v9 setObject:v13 forKeyedSubscript:@"userAgeInYears"];

  int v14 = *a1;
  id v15 = HealthAlgorithms::deviationIrregularMetricsForCoreAnalytics((uint64_t)(a1 + 48));
  int v16 = HealthAlgorithms::deviationHIDCoreAnalytics(@"irregularBleeding", v14 != 0, v15);

  [v9 addEntriesFromDictionary:v16];
  LODWORD(v16) = a1[12];
  int v17 = HealthAlgorithms::deviationInfrequentMetricsForCoreAnalytics((uint64_t)(a1 + 76));
  int v18 = HealthAlgorithms::deviationHIDCoreAnalytics(@"infrequentBleeding", v16 != 0, v17);

  [v9 addEntriesFromDictionary:v18];
  LODWORD(v18) = a1[24];
  int v19 = HealthAlgorithms::deviationProlongedMetricsForCoreAnalytics((uint64_t)(a1 + 96));
  uint64_t v20 = HealthAlgorithms::deviationHIDCoreAnalytics(@"prolongedBleeding", v18 != 0, v19);

  [v9 addEntriesFromDictionary:v20];
  uint64_t v21 = (uint64_t)(a1 + 116);
  int v22 = a1[36];
  long long v23 = HealthAlgorithms::deviationSpottingMetricsForCoreAnalytics(v21);
  uint64_t v24 = HealthAlgorithms::deviationHIDCoreAnalytics(@"spotting", v22 != 0, v23);

  [v9 addEntriesFromDictionary:v24];
  return v9;
}

void sub_22F11D5FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id HealthAlgorithms::deviationHIDCoreAnalytics(void *a1, uint64_t a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v16 = a3;
  unint64_t v6 = objc_opt_new();
  int v17 = [NSString stringWithFormat:@"%@_%@", v5, @"exists"];
  id v7 = [NSNumber numberWithBool:a2];
  [v6 setObject:v7 forKeyedSubscript:v17];

  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v8 = v16;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v19 != v10) {
          objc_enumerationMutation(v8);
        }
        uint64_t v12 = *(void *)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v13 = [NSString stringWithFormat:@"%@_%@", v5, v12];
        int v14 = [v8 objectForKeyedSubscript:v12];
        [v6 setObject:v14 forKeyedSubscript:v13];
      }
      uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v9);
  }

  return v6;
}

void sub_22F11D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(uint64_t **a1)
{
  return a1;
}

void sub_22F11DC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t *a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v47 - 104));
  for (uint64_t i = 32; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v47 - 168 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a47 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + k));
  if (a14 < 0) {
    operator delete(__p);
  }
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a39 + m));
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a30);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace_back<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      uint64_t v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v11, v10);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace_back() with ", &v11, &v12);
      nlohmann::detail::type_error::create(311, (uint64_t)&v12, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v4 = operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    void *v4 = 0;
    *(void *)(a1 + 8) = v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  id v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = v5[1];
  if (v6 >= v5[2])
  {
    uint64_t v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v5, a2);
  }
  else
  {
    *(unsigned char *)unint64_t v6 = *(unsigned char *)a2;
    *(void *)(v6 + 8) = *(void *)(a2 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
    uint64_t v7 = v6 + 16;
  }
  v5[1] = v7;
  return v7 - 16;
}

void sub_22F11DF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v6 = strlen(__s);
  uint64_t v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void *phase_to_string@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 8) {
    uint64_t v2 = "(invalid)";
  }
  else {
    uint64_t v2 = off_2649FD808[(char)a1];
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v2);
}

void sub_22F11E3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t *a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v47 - 104));
  for (uint64_t i = 32; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v47 - 168 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a47 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + k));
  if (a14 < 0) {
    operator delete(__p);
  }
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a39 + m));
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a30);
  }
  _Unwind_Resume(a1);
}

void sub_22F11ED50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&__p);

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a13);
  _Unwind_Resume(a1);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[29],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      int v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F11F1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_22F11F3D4(_Unwind_Exception *a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v2);
  _Unwind_Resume(a1);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[25],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      int v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F11F580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[17],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      int v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F11F710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t *nlohmann::operator<<(uint64_t *a1, uint64_t a2)
{
  v15[80] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  id v5 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = *((void *)v5 + 3);
  *((void *)v5 + 3) = 0;
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E28C8B8;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26E28C908;
  v7[1].__shared_owners_ = (uint64_t)a1;
  std::string v12 = v7 + 1;
  uint64_t v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  id v8 = (const std::ios_base *)((char *)a1 + *(void *)(v4 - 24));
  std::ios_base::fmtflags fmtflags = v8[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v8);
    char v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
    std::locale::~locale(&v14);
    v8[1].__fmtflags_ = fmtflags;
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer((uint64_t)v15, (uint64_t)&v12, (char)fmtflags, 0);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v13);
  }
  std::__shared_weak_count::__release_shared[abi:nn180100](v7);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v15, a2, v6 > 0, 0, v6 & ~(v6 >> 63), 0);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v15);
  return a1;
}

void sub_22F11F954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, char a12)
{
  std::locale::~locale(&a11);
  std::__shared_weak_count::__release_shared[abi:nn180100](v12);
  std::__shared_weak_count::__release_shared[abi:nn180100](v12);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void sub_22F11FE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_22F120940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a11);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100](&a46);
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a45);
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a15);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a36);

  MAIDayStreamProcessorOutput::~MAIDayStreamProcessorOutput(v46);
  _Unwind_Resume(a1);
}

void sub_22F121414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  for (uint64_t i = 256; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v73 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  if (a14 < 0) {
    operator delete(__p);
  }
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));
  for (uint64_t n = 32; n != -32; n -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a49 + n));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a15);
  for (iuint64_t i = 32; ii != -32; ii -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a41 + ii));
  for (juint64_t j = 32; jj != -32; jj -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a57 + jj));
  for (kuint64_t k = 32; kk != -32; kk -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a65 + kk));
  for (muint64_t m = 32; mm != -32; mm -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a72 + mm));
  for (nuint64_t n = 32; nn != -32; nn -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&STACK[0x228] + nn));
  for (uint64_t i1 = 32; i1 != -32; i1 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&STACK[0x268] + i1));

  _Unwind_Resume(a1);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[18],int>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::locale v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[24],int>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F121850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[25],int>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::locale v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[24],int>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F1219E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[27],int>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::locale v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[24],int>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F121B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[34],int>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::locale v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[24],int>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F121D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[20],int>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::locale v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[24],int>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F121E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[26],int>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::locale v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[24],int>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F122020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[24],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::locale v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F1221B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[21],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::locale v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F122340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[6],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::locale v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F1224D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[11],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::locale v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F122660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[13],BOOL>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::locale v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[13],BOOL>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F1227F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[34],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::locale v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F122980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<char const*>@<X0>(const char **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  v13[18] = *MEMORY[0x263EF8340];
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  id v8 = *a1;
  size_t v9 = strlen(v8);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:nn180100]((uint64_t)v11, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::iterator_input_adapter<char const*>>((uint64_t)v8, (uint64_t)&v8[v9], (uint64_t)v11, a3, (uint64_t)v12);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::parse((uint64_t)v12, 1, a4);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::~lexer((uint64_t)v13);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100](v12);
  return std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100](v11);
}

void sub_22F122AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::~lexer(v14 + 40);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100](&a13);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100](&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v13);
  _Unwind_Resume(a1);
}

void MAIDayStreamProcessorOutput::~MAIDayStreamProcessorOutput(MAIDayStreamProcessorOutput *this)
{
}

void sub_22F122CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_22F122D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a15);
  }
  if (!a18) {
    JUMPOUT(0x22F122D54);
  }
  JUMPOUT(0x22F122D50);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace_back<std::string>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 2)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      id v8 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v9, v8);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace_back() with ", &v9, &v10);
      nlohmann::detail::type_error::create(311, (uint64_t)&v10, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v4 = operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    void *v4 = 0;
    *(void *)(a1 + 8) = v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  id v5 = *(uint64_t **)(a1 + 8);
  return std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string>(v5, a2);
}

void sub_22F122E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_22F123878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t *a63)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&STACK[0x320]);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100](&a65);
  if (STACK[0x368]) {
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)STACK[0x368]);
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a63);
  _Unwind_Resume(a1);
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(unsigned __int8 *a1, char *__s)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    id v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    void *v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    int v4 = *a1;
  }
  if (v4 != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:nn180100]<0>(&v11, v10);
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use operator[] with a string argument with ", &v11, &__p);
    nlohmann::detail::type_error::create(305, (uint64_t)&__p, exception);
  }
  uint64_t v6 = (uint64_t **)*((void *)a1 + 1);
  std::string::basic_string[abi:nn180100]<0>(&__p, __s);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v7 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7 + 7;
}

void sub_22F123DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[7],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      uint64_t v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  std::string v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F123F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[14],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      uint64_t v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    id v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  std::string v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F124108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *std::string::basic_string[abi:nn180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[16],double>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      uint64_t v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    uint64_t v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  std::string v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[16],double>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F1243CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[12]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  switch(*(unsigned char *)result)
  {
    case 1:
      if (!*(void *)(result + 8)) {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant();
      }
      return result;
    case 2:
      if (!*(void *)(result + 8)) {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant();
      }
      return result;
    case 3:
      if (!*(void *)(result + 8)) {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant();
      }
      return result;
    case 8:
      if (!*(void *)(result + 8)) {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant();
      }
      return result;
    default:
      return result;
  }
  return result;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[12]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F124544(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::type_error::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:nn180100]<0>(&__p, "type_error");
  nlohmann::detail::exception::name(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  std::string v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    char v11 = v15;
  }
  else {
    char v11 = (void **)v15[0];
  }
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(void *)a3 = &unk_26E28C788;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_22F124654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v6 = strlen(a1);
  uint64_t v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

const char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(char *a1)
{
  unint64_t v1 = *a1;
  if (v1 > 9) {
    return "number";
  }
  else {
    return off_2649FD8E8[v1];
  }
}

void nlohmann::detail::type_error::~type_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
  MEMORY[0x230FB1A70](&this[2]);
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
  MEMORY[0x230FB1A70](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x230FB1C40);
}

unsigned __int8 **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0x8000000000000000;
  if (!a1) {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin();
  }
  return nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin((unsigned __int8 **)a2);
}

void nlohmann::detail::exception::name(int a1@<W1>, std::string *a2@<X8>)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v12, ".", 1uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::size_type v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  long long v10 = std::string::append(&v14, "] ", 2uLL);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_22F1248E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

nlohmann::detail::exception *nlohmann::detail::exception::exception(nlohmann::detail::exception *this, int a2, const char *a3)
{
  *(void *)this = &unk_26E28C7B0;
  *((_DWORD *)this + 2) = a2;
  MEMORY[0x230FB1A50]((char *)this + 16, a3);
  return this;
}

void sub_22F124994(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::~exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
  MEMORY[0x230FB1A70](&this[2]);
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
  MEMORY[0x230FB1A70](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x230FB1C40);
}

unsigned char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(unsigned char *a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      void *v3 = v3 + 1;
      goto LABEL_8;
    case 2:
      uint64_t v3 = operator new(0x18uLL);
      v3[1] = 0;
      v3[2] = 0;
      void *v3 = 0;
      goto LABEL_8;
    case 3:
      uint64_t v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>("");
      goto LABEL_8;
    case 4:
      *a1 = 0;
      return a1;
    case 8:
      uint64_t v3 = operator new(0x20uLL);
      v3[1] = 0;
      v3[2] = 0;
      void *v3 = 0;
      *((_WORD *)v3 + 12) = 0;
LABEL_8:
      *(void *)a1 = v3;
      break;
    default:
      *(void *)a1 = 0;
      break;
  }
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F124BE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::other_error::~other_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
  MEMORY[0x230FB1A70](&this[2]);
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
  MEMORY[0x230FB1A70](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x230FB1C40);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[16],double>(uint64_t **a1, char *a2, uint64_t *a3)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const(&)[16],double>((uint64_t)a1, a2, a3, (uint64_t)v8);
  uint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v7, (void **)v8[0] + 4);
  long long v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v7, v4, v8[0]);
    long long v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v8, 0);
  return v5;
}

void sub_22F124D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const(&)[16],double>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  std::string::size_type v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  __n128 result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const(&)[16],double,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_22F124DB0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, void *a2, void **a3)
{
  long long v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        std::string::size_type v8 = v4 + 4;
        if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      long long v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const(&)[16],double,0>(void *a1, char *a2, uint64_t *a3)
{
  long long v5 = std::string::basic_string[abi:nn180100]<0>(a1, a2);
  v5[4] = 0;
  uint64_t v6 = *a3;
  *((unsigned char *)v5 + 24) = 7;
  uint64_t v7 = (uint64_t)(v5 + 3);
  v5[4] = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
  return a1;
}

uint64_t std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    long long v5 = a2;
  }
  else {
    long long v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:nn180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:nn180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    size_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin(unsigned __int8 **result)
{
  uint64_t v1 = *result;
  if (!*result) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin();
  }
  int v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((void **)v1 + 1);
    }
    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((void **)v1 + 1);
    }
    else
    {
      result[4] = 0;
    }
  }
  else
  {
    result[4] = (unsigned __int8 *)1;
  }
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[16]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[16]>(char *a1)
{
  int v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F1250E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[19]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[19]>(char *a1)
{
  int v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F125180(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[24],int>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    int v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  long long v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[24],int>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F1252C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[35],int>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    int v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  long long v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[24],int>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F125454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[31],int>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    int v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  long long v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[24],int>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F1255E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[42],int>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    int v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  long long v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[24],int>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F125774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    int v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  long long v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F125904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[17],unsigned int>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    int v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  long long v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[17],unsigned int>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F125A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const*,int>@<D0>(uint64_t a1@<X0>, char **a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    int v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  long long v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const*,int>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F125C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const(&)[10],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    int v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  long long v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[10],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F125DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[24],int>(uint64_t **a1, char *a2, int *a3)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const(&)[24],int>((uint64_t)a1, a2, a3, (uint64_t)v8);
  int v4 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v7, (void **)v8[0] + 4);
  long long v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v7, v4, v8[0]);
    long long v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v8, 0);
  return v5;
}

void sub_22F125E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const(&)[24],int>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  int v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  double result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const(&)[24],int,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_22F125F0C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const(&)[24],int,0>(void *a1, char *a2, int *a3)
{
  long long v5 = std::string::basic_string[abi:nn180100]<0>(a1, a2);
  v5[4] = 0;
  uint64_t v6 = *a3;
  *((unsigned char *)v5 + 24) = 5;
  uint64_t v7 = (uint64_t)(v5 + 3);
  v5[4] = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t **a1, char *a2, uint64_t a3)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)a1, a2, a3, (uint64_t)v8);
  int v4 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v7, (void **)v8[0] + 4);
  long long v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v7, v4, v8[0]);
    long long v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v8, 0);
  return v5;
}

void sub_22F125FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  int v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  double result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_22F126070(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const(&)[20],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(void *a1, char *a2, uint64_t a3)
{
  long long v5 = std::string::basic_string[abi:nn180100]<0>(a1, a2);
  *((unsigned char *)v5 + 24) = *(unsigned char *)a3;
  uint64_t v6 = (uint64_t)(v5 + 3);
  v5[4] = *(void *)(a3 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[4]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[4]>(char *a1)
{
  int v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F12616C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[17],unsigned int>(uint64_t **a1, char *a2, unsigned int *a3)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const(&)[17],unsigned int>((uint64_t)a1, a2, a3, (uint64_t)v8);
  int v4 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v7, (void **)v8[0] + 4);
  long long v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v7, v4, v8[0]);
    long long v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v8, 0);
  return v5;
}

void sub_22F126204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const(&)[17],unsigned int>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  int v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  double result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const(&)[17],unsigned int,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_22F126278(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const(&)[17],unsigned int,0>(void *a1, char *a2, unsigned int *a3)
{
  long long v5 = std::string::basic_string[abi:nn180100]<0>(a1, a2);
  v5[4] = 0;
  uint64_t v6 = *a3;
  *((unsigned char *)v5 + 24) = 6;
  uint64_t v7 = (uint64_t)(v5 + 3);
  v5[4] = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const*,int>(uint64_t **a1, char **a2, int *a3)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const*,int>((uint64_t)a1, a2, a3, (uint64_t)v8);
  int v4 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v7, (void **)v8[0] + 4);
  long long v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v7, v4, v8[0]);
    long long v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v8, 0);
  return v5;
}

void sub_22F126368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const*,int>@<X0>(uint64_t a1@<X0>, char **a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  int v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  double result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const*,int,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_22F1263DC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const*,int,0>(void *a1, char **a2, int *a3)
{
  long long v5 = std::string::basic_string[abi:nn180100]<0>(a1, *a2);
  v5[4] = 0;
  uint64_t v6 = *a3;
  *((unsigned char *)v5 + 24) = 5;
  uint64_t v7 = (uint64_t)(v5 + 3);
  v5[4] = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[10],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&>(uint64_t **a1, char *a2, uint64_t a3)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const(&)[10],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&>((uint64_t)a1, a2, a3, (uint64_t)v8);
  int v4 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v7, (void **)v8[0] + 4);
  long long v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v7, v4, v8[0]);
    long long v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v8, 0);
  return v5;
}

void sub_22F1264D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const(&)[10],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  int v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  double result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const(&)[10],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_22F126544(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const(&)[10],nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&,0>(void *a1, char *a2, uint64_t a3)
{
  long long v5 = std::string::basic_string[abi:nn180100]<0>(a1, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)(v5 + 3), a3);
  return a1;
}

void sub_22F126594(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(unsigned char *)a1)
  {
    case 1:
      int v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(void *)(a2 + 8));
      goto LABEL_8;
    case 2:
      int v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(uint64_t **)(a2 + 8));
      goto LABEL_8;
    case 3:
      int v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*(void *)(a2 + 8));
      goto LABEL_8;
    case 4:
      int v4 = (void *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
      int v4 = *(void **)(a2 + 8);
      goto LABEL_8;
    case 8:
      int v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(*(void *)(a2 + 8));
LABEL_8:
      *(void *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t a1)
{
  int v2 = (uint64_t *)operator new(0x18uLL);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:nn180100](v2, a1);
  return v2;
}

void sub_22F1266BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_22F126710(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    int v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      double result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          int v4 = v8;
        }
        while (!v9);
      }
      int v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v10, 0);
  }
  return v7;
}

void **std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  BOOL v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2
    || (std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      std::string v12 = (void *)a2;
    }
    else
    {
      uint64_t v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          std::string v12 = v11;
          uint64_t v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        long long v16 = (void *)a2;
        do
        {
          std::string v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          long long v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0) {
        goto LABEL_17;
      }
    }
    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a2 + 32), a5) & 0x80) == 0)
  {
    *a3 = (void **)a2;
    *a4 = a2;
    return (void **)a4;
  }
  a4 = (uint64_t *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    std::string v14 = *(void ***)(a2 + 8);
    do
    {
      std::string v15 = v14;
      std::string v14 = (void **)*v14;
    }
    while (v14);
  }
  else
  {
    long long v19 = (void **)a2;
    do
    {
      std::string v15 = (void **)v19[2];
      BOOL v17 = *v15 == v19;
      long long v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (void **)a2;
    }
    return (void **)a4;
  }
  if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:
  return (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, a3, a5);
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  double result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_22F126A38(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(&this[1], (char *)a2 + 24);
  return this;
}

void sub_22F126AAC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *((void *)a2 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a2 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 64, a2[56]);
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t *a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)int v2 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:nn180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_22F126C24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:nn180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    double result = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:nn180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    if (a2 != a3)
    {
      uint64_t v8 = 0;
      do
      {
        double result = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v7 + v8, a2 + v8);
        v8 += 16;
      }
      while (a2 + v8 != a3);
      v7 += v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_22F126CB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    abort();
  }
  double result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(16 * a2);
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  uint64_t v2 = (std::string *)operator new(0x18uLL);
  size_t v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return v3;
}

void sub_22F126D88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  std::construct_at[abi:nn180100]<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&,nlohmann::byte_container_with_subtype<std::vector<unsigned char>>*>((uint64_t)v2, a1);
  return v2;
}

void sub_22F126DD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:nn180100]<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&,nlohmann::byte_container_with_subtype<std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  size_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    std::vector<Nightingale::Phase>::__vallocate[abi:nn180100]((void *)a1, v4 - *(void *)a2);
    uint64_t v7 = *(char **)(a1 + 8);
    memmove(v7, v5, v6);
    *(void *)(a1 + 8) = &v7[v6];
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[23],char [23],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[23]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[23]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F126EE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F126F80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[22],char [22],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[22]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[22]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F127018(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<D0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    uint64_t v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  BOOL v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F12715C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_22F127668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t **a9, void *a10)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v12 - 224));

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t **a1, char **a2, uint64_t a3)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)a1, a2, a3, (uint64_t)v8);
  uint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v7, (void **)v8[0] + 4);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v7, v4, v8[0]);
    uint64_t v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v8, 0);
  return v5;
}

void sub_22F12786C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  double result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_22F1278E0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(void *a1, char **a2, uint64_t a3)
{
  uint64_t v5 = std::string::basic_string[abi:nn180100]<0>(a1, *a2);
  *((unsigned char *)v5 + 24) = *(unsigned char *)a3;
  uint64_t v6 = (uint64_t)(v5 + 3);
  v5[4] = *(void *)(a3 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
  return a1;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const*,BOOL>@<D0>(uint64_t a1@<X0>, char **a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    uint64_t v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  BOOL v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const*,BOOL>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F127A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::emplace<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&>@<D0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v17, v14);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use emplace() with ", &v17, &v15);
      nlohmann::detail::type_error::create(311, (uint64_t)&v15, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    uint64_t v8 = operator new(0x18uLL);
    void v8[2] = 0;
    v8[1] = 0;
    void *v8 = v8 + 1;
    *(void *)(a1 + 8) = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  BOOL v9 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&>(*(uint64_t ***)(a1 + 8), a2, a3);
  char v11 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin(a1, (uint64_t)&v15);
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  *(void *)a4 = v15.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a4 + 24) = v16;
  double result = *(double *)&v15.__r_.__value_.__l.__size_;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v15.__r_.__value_.__r.__words[1];
  *(unsigned char *)(a4 + 40) = v11;
  return result;
}

void sub_22F127C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const*,BOOL>(uint64_t **a1, char **a2, unsigned __int8 *a3)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const*,BOOL>((uint64_t)a1, a2, a3, (uint64_t)v8);
  uint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v7, (void **)v8[0] + 4);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v7, v4, v8[0]);
    uint64_t v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v8, 0);
  return v5;
}

void sub_22F127D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const*,BOOL>@<X0>(uint64_t a1@<X0>, char **a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  double result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const*,BOOL,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_22F127D74(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const*,BOOL,0>(void *a1, char **a2, unsigned __int8 *a3)
{
  uint64_t v5 = std::string::basic_string[abi:nn180100]<0>(a1, *a2);
  v5[4] = 0;
  uint64_t v6 = *a3;
  *((unsigned char *)v5 + 24) = 4;
  uint64_t v7 = (uint64_t)(v5 + 3);
  v5[4] = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&>(uint64_t **a1, char **a2, uint64_t a3)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&>((uint64_t)a1, a2, a3, (uint64_t)v8);
  uint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v7, (void **)v8[0] + 4);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v7, v4, v8[0]);
    uint64_t v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v8, 0);
  return v5;
}

void sub_22F127E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&>@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  double result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_22F127EDC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>&,0>(void *a1, char **a2, uint64_t a3)
{
  uint64_t v5 = std::string::basic_string[abi:nn180100]<0>(a1, *a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)(v5 + 3), a3);
  return a1;
}

void sub_22F127F30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  int v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, (*a1)[2]);
    uint64_t v4 = (uint64_t)(*a1 + 1);
    uint64_t v5 = (void *)**a1;
    if (v5 != (void *)v4)
    {
      unint64_t v6 = v25;
      do
      {
        if (v6 >= v26)
        {
          unint64_t v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v5 + 7));
        }
        else
        {
          *(unsigned char *)unint64_t v6 = *((unsigned char *)v5 + 56);
          *(void *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((unsigned char *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        unint64_t v25 = v6;
        uint64_t v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
      }
      while (v8 != (void *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v27, **a1, (*a1)[1], &v24);
  }
  for (unint64_t i = v25; v24 != v25; unint64_t i = v25)
  {
    char v12 = *(unsigned char *)(i - 16);
    uint64_t v11 = i - 16;
    LOBYTE(v22) = v12;
    int v23 = *(uint64_t **)(v11 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(unsigned char *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:nn180100]((uint64_t)&v24, v25 - 16);
    if (v22 == 1)
    {
      uint64_t v13 = v23;
      std::string v14 = v23 + 1;
      std::string v15 = (void *)*v23;
      if ((uint64_t *)*v23 != v23 + 1)
      {
        unint64_t v16 = v25;
        do
        {
          if (v16 >= v26)
          {
            unint64_t v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v15 + 7));
          }
          else
          {
            *(unsigned char *)unint64_t v16 = *((unsigned char *)v15 + 56);
            *(void *)(v16 + 8) = v15[8];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v15 + 7));
            *((unsigned char *)v15 + 56) = 0;
            v15[8] = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          unint64_t v25 = v16;
          std::string v17 = (void *)v15[1];
          if (v17)
          {
            do
            {
              long long v18 = v17;
              std::string v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              long long v18 = (void *)v15[2];
              BOOL v9 = *v18 == (void)v15;
              std::string v15 = v18;
            }
            while (!v9);
          }
          std::string v15 = v18;
        }
        while (v18 != v14);
        uint64_t v13 = v23;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)v13, (char *)v13[1]);
      uint64_t *v13 = (uint64_t)(v13 + 1);
      _OWORD v13[2] = 0;
      v13[1] = 0;
    }
    else if (v22 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v27, *v23, v23[1], &v24);
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:nn180100](v23);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)*a1, (char *)(*a1)[1]);
      goto LABEL_41;
    case 1:
      int v22 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:nn180100](&v22);
      goto LABEL_41;
    case 2:
      long long v19 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0) {
        goto LABEL_42;
      }
      long long v20 = (void *)*v19;
      break;
    case 7:
      long long v19 = *a1;
      int v21 = (void *)**a1;
      if (!v21) {
        goto LABEL_42;
      }
      v19[1] = (uint64_t)v21;
      long long v20 = v21;
      break;
    default:
      goto LABEL_43;
  }
  operator delete(v20);
LABEL_41:
  long long v19 = *a1;
LABEL_42:
  operator delete(v19);
LABEL_43:
  int v22 = (void **)&v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:nn180100](&v22);
}

void sub_22F1282F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(result, a2);
    v7[1] = v7[0] + v5;
    _OWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(v7);
  }
  return result;
}

void sub_22F1283C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:nn180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v4 = v2 - 16;
    uint64_t v5 = (unsigned __int8 *)(v2 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      unsigned int v6 = *v5;
      v5 -= 16;
      uint64_t result = (void *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v4 + 8, v6);
      BOOL v7 = v4 == v3;
      uint64_t v4 = (uint64_t)v5;
    }
    while (!v7);
  }
  v1[1] = v3;
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(a7 + v11 - 16) = *(unsigned char *)(a3 + v11 - 16);
      *(void *)(a7 + v11 - 8) = *(void *)(a3 + v11 - 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3 + v11 - 16);
      *(unsigned char *)(a3 + v11 - 16) = 0;
      *(void *)(a3 + v11 - 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a7 + v11 - 16);
      v11 -= 16;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(i - 16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(i - 8), *(unsigned __int8 *)(i - 16));
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    unint64_t v7 = a4[1];
    do
    {
      if (v7 >= a4[2])
      {
        unint64_t v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a4, v5);
      }
      else
      {
        *(unsigned char *)unint64_t v7 = *(unsigned char *)v5;
        *(void *)(v7 + 8) = *(void *)(v5 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
        *(unsigned char *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        v7 += 16;
      }
      a4[1] = v7;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 3 > v4) {
    unint64_t v4 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  v16[4] = v7;
  uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v10);
  uint64_t v12 = (uint64_t)&v11[16 * v3];
  v16[0] = v11;
  v16[1] = v12;
  v16[3] = &v11[16 * v13];
  *(unsigned char *)uint64_t v12 = *(unsigned char *)a2;
  *(void *)(v12 + 8) = *(void *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
  _OWORD v16[2] = v12 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(v16);
  return v14;
}

void sub_22F128758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:nn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 16;
    uint64_t v6 = (unsigned __int8 *)(v4 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      unsigned int v7 = *v6;
      v6 -= 16;
      uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v5 + 8, v7);
      BOOL v8 = v5 == a2;
      uint64_t v5 = (uint64_t)v6;
    }
    while (!v8);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)(v4 - 16);
      unsigned int v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        unsigned int v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        BOOL v9 = v6 == (void)v2;
        uint64_t v6 = (uint64_t)v7;
      }
      while (!v9);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocate_shared[abi:nn180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x28uLL);
  uint64_t result = std::__shared_ptr_emplace<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__shared_ptr_emplace[abi:nn180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_22F1288BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__shared_ptr_emplace[abi:nn180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26E28C818;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)a2;
  uint64_t v4 = a1 + 24;
  *(void *)(a1 + 32) = *(void *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
  return a1;
}

void std::__shared_ptr_emplace<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E28C818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E28C818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x230FB1C40);
}

void std::__shared_ptr_emplace<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__on_zero_shared(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  int v2 = *(unsigned __int8 *)(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 32), v2);
}

void std::__shared_weak_count::__release_shared[abi:nn180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void *std::allocate_shared[abi:nn180100]<std::ofstream,std::allocator<std::ofstream>,std::string,void>@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x250uLL);
  uint64_t result = std::__shared_ptr_emplace<std::ofstream>::__shared_ptr_emplace[abi:nn180100]<std::string,std::allocator<std::ofstream>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22F128AC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::ofstream>::__shared_ptr_emplace[abi:nn180100]<std::string,std::allocator<std::ofstream>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26E28C868;
  std::ofstream::basic_ofstream(a1 + 3);
  return a1;
}

void sub_22F128B20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::ofstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E28C868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::ofstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E28C868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x230FB1C40);
}

uint64_t std::__shared_ptr_emplace<std::ofstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x230FB1AE0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_22F128D64(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x230FB1BD0](v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v4 = operator new(0x18uLL);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  v4[2] = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F128E88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F128F20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (!a3)
  {
LABEL_7:
    int v13 = 1;
    if (a4) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  uint64_t v10 = 32 * a3;
  uint64_t v11 = (unsigned char **)(a2 + 16);
  while (1)
  {
    uint64_t v12 = *v11;
    if (**v11 != 2
      || *(void *)(*((void *)v12 + 1) + 8) - **((void **)v12 + 1) != 32
      || *(unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((uint64_t)v12, 0) != 3)
    {
      break;
    }
    v11 += 4;
    v10 -= 32;
    if (!v10) {
      goto LABEL_7;
    }
  }
  int v13 = 0;
  if ((a4 & 1) == 0)
  {
LABEL_10:
    if (a5 == 2) {
      int v14 = 0;
    }
    else {
      int v14 = v13;
    }
    if (a5 != 1) {
      LOBYTE(v13) = 1;
    }
    if ((v13 & 1) == 0)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:nn180100]<0>(v20, "cannot create object from initializer list");
      nlohmann::detail::type_error::create(301, (uint64_t)v20, exception);
    }
    int v13 = v14;
  }
LABEL_17:
  uint64_t v15 = a2 + 32 * a3;
  if (v13)
  {
    *(unsigned char *)a1 = 1;
    unint64_t v16 = operator new(0x18uLL);
    _OWORD v16[2] = 0;
    v16[1] = 0;
    void *v16 = v16 + 1;
    *(void *)(a1 + 8) = v16;
    std::for_each[abi:nn180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::(std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>,BOOL,nlohmann::detail::value_t)::{lambda(nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#2}>(a2, v15, a1);
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v19 = v15;
    v20[0] = a2;
    *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v20, &v19);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_22F1290C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t std::for_each[abi:nn180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::(std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>,BOOL,nlohmann::detail::value_t)::{lambda(nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#2}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(v5, (uint64_t)v7);
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a3 + 8), *(void ***)(*v8 + 8), *(void *)(*v8 + 8), *v8 + 16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
      v5 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_22F129194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v9, a9);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  unint64_t v7 = (*a2 - *a1) >> 5;
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:nn180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v4, v5, v6, v7);
  return v4;
}

void sub_22F12920C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:nn180100]<0>(&v6, v5);
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use operator[] with a numeric argument with ", &v6, &v7);
    nlohmann::detail::type_error::create(305, (uint64_t)&v7, exception);
  }
  return **(void **)(a1 + 8) + 16 * a2;
}

void sub_22F1292D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 24))
  {
    *(unsigned char *)a2 = *(unsigned char *)v3;
    *(void *)(a2 + 8) = *(void *)(v3 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v3);
    *(unsigned char *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  }
  else
  {
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, v3);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t **a1, void **a2, uint64_t a3, uint64_t a4)
{
  std::string v7 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v12, a2);
  unsigned int v8 = *v7;
  if (!*v7)
  {
    BOOL v9 = v7;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v12, v9, v11[0]);
    unsigned int v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unsigned int v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  void v8[2] = *(_OWORD *)a2;
  *((void *)v8 + 6) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  char v9 = *(unsigned char *)a3;
  *((void *)v8 + 8) = *(void *)(a3 + 8);
  *((unsigned char *)v8 + 56) = v9;
  uint64_t v10 = (uint64_t)v8 + 56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:nn180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:nn180100](result, a4);
    return (void *)std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_at_end<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v6, a2, a3);
  }
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_at_end<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3)
  {
    uint64_t result = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v5 = a2;
    uint64_t result = *(void *)(a1 + 8);
    do
    {
      uint64_t v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(result, v5);
      v5 += 32;
      uint64_t result = v7 + 16;
    }
    while (v5 != a3);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_22F1295B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1, uint64_t a2)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(a2, (uint64_t)v4);
  *(unsigned char *)a1 = v4[0];
  *(void *)(a1 + 8) = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  v4[0] = 0;
  uint64_t v5 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
  return a1;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 3 > v4) {
    unint64_t v4 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  v16[4] = v7;
  uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v10);
  uint64_t v12 = (uint64_t)&v11[16 * v3];
  v16[0] = v11;
  v16[1] = v12;
  v16[3] = &v11[16 * v13];
  *(unsigned char *)uint64_t v12 = *(unsigned char *)a2;
  *(void *)(v12 + 8) = *(void *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
  _OWORD v16[2] = v12 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_22F129710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>(uint64_t a1, char **a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const* const&>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const* const&>(char **a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, *a1);
  return v2;
}

void sub_22F1297A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[5]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[5]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F129840(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[9]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[9]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F1298D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[20],char [20],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[20]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[20]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F129970(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(void ***a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch(*(unsigned char *)a2)
  {
    case 0:
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    case 1:
      uint64_t v12 = (uint64_t)**a1;
      if (!*(void *)(*(void *)(a2 + 8) + 16))
      {
        int v45 = *(uint64_t (**)(void))(v12 + 8);
        goto LABEL_52;
      }
      if (a3)
      {
        (*(void (**)(void))(v12 + 8))();
        unsigned int v13 = a6 + a5;
        uint64_t v14 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v15 = (unint64_t)a1[77];
          if (v15 >= v13) {
            goto LABEL_7;
          }
        }
        else
        {
          unint64_t v15 = *((unsigned __int8 *)a1 + 631);
          if (v13 <= v15)
          {
LABEL_7:
            int v16 = *(void **)(a2 + 8);
            std::string v17 = (void *)*v16;
            if (v16[2] == 1)
            {
              long long v18 = (void *)*v16;
            }
            else
            {
              unint64_t v67 = 0;
              do
              {
                int v68 = a1 + 76;
                if (*((char *)a1 + 631) < 0) {
                  int v68 = (void ***)*v14;
                }
                ((void (*)(void, void ***, void))(**a1)[1])(*a1, v68, (a6 + a5));
                ((void (*)(void))***a1)();
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v17 + 4, a4);
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v17 + 7, 1, a4, a5, (a6 + a5));
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                uint64_t v69 = (void *)v17[1];
                if (v69)
                {
                  do
                  {
                    long long v18 = v69;
                    uint64_t v69 = (void *)*v69;
                  }
                  while (v69);
                }
                else
                {
                  do
                  {
                    long long v18 = (void *)v17[2];
                    BOOL v51 = *v18 == (void)v17;
                    std::string v17 = v18;
                  }
                  while (!v51);
                }
                ++v67;
                int v16 = *(void **)(a2 + 8);
                std::string v17 = v18;
              }
              while (v67 < v16[2] - 1);
            }
            uint64_t v70 = v16 + 1;
            if (v18 == v70) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            uint64_t v71 = (void *)v18[1];
            if (v71)
            {
              do
              {
                unint64_t v72 = v71;
                uint64_t v71 = (void *)*v71;
              }
              while (v71);
            }
            else
            {
              uint64_t v74 = v18;
              do
              {
                unint64_t v72 = (void *)v74[2];
                BOOL v51 = *v72 == (void)v74;
                uint64_t v74 = v72;
              }
              while (!v51);
            }
            if (v72 != v70) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            unsigned int v75 = a1 + 76;
            if (*((char *)a1 + 631) < 0) {
              unsigned int v75 = (void ***)*v14;
            }
            ((void (*)(void, void ***, void))(**a1)[1])(*a1, v75, (a6 + a5));
            ((void (*)(void))***a1)();
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v18 + 4, a4);
            ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v18 + 7, 1, a4, a5, (a6 + a5));
            ((void (*)(void))***a1)();
            BOOL v66 = (void (*)(void))(**a1)[1];
            goto LABEL_121;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v15, 32);
        goto LABEL_7;
      }
      (*(void (**)(void))v12)();
      uint64_t v46 = *(void *)(a2 + 8);
      uint64_t v47 = *(void **)v46;
      if (*(void *)(v46 + 16) != 1)
      {
        unint64_t v48 = 0;
        do
        {
          ((void (*)(void, uint64_t))***a1)(*a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v47 + 4, a4);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v47 + 7, 0, a4, a5, a6);
          ((void (*)(void))***a1)();
          BOOL v49 = (void *)v47[1];
          uint64_t v50 = v47;
          if (v49)
          {
            do
            {
              uint64_t v47 = v49;
              BOOL v49 = (void *)*v49;
            }
            while (v49);
          }
          else
          {
            do
            {
              uint64_t v47 = (void *)v50[2];
              BOOL v51 = *v47 == (void)v50;
              uint64_t v50 = v47;
            }
            while (!v51);
          }
          ++v48;
          uint64_t v46 = *(void *)(a2 + 8);
        }
        while (v48 < *(void *)(v46 + 16) - 1);
      }
      long long v52 = (void *)(v46 + 8);
      if (v47 == v52) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      }
      long long v53 = (void *)v47[1];
      if (v53)
      {
        do
        {
          long long v54 = v53;
          long long v53 = (void *)*v53;
        }
        while (v53);
      }
      else
      {
        uint64_t v73 = v47;
        do
        {
          long long v54 = (void *)v73[2];
          BOOL v51 = *v54 == (void)v73;
          uint64_t v73 = v54;
        }
        while (!v51);
      }
      if (v54 != v52) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      }
      ((void (*)(void, uint64_t))***a1)(*a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v47 + 4, a4);
      ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v47 + 7, 0, a4, a5, a6);
LABEL_122:
      uint64_t v11 = (uint64_t (*)(void))***a1;
LABEL_123:
      return v11();
    case 2:
      uint64_t v19 = (void (**)(void))**a1;
      if (**(void **)(a2 + 8) != *(void *)(*(void *)(a2 + 8) + 8))
      {
        if (!a3)
        {
          (*v19)();
          int v55 = *(uint64_t **)(a2 + 8);
          uint64_t v57 = *v55;
          uint64_t v56 = v55[1];
          if (v57 == v56 - 16)
          {
            uint64_t v58 = v57;
          }
          else
          {
            uint64_t v58 = v57;
            do
            {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v58, 0, a4, a5, a6);
              ((void (*)(void))***a1)();
              v58 += 16;
              int v59 = *(uint64_t **)(a2 + 8);
              uint64_t v56 = v59[1];
            }
            while (v58 != v56 - 16);
            uint64_t v57 = *v59;
          }
          if (v57 == v56) {
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v58, 0, a4, a5, a6);
          goto LABEL_108;
        }
        v19[1]();
        unsigned int v20 = a6 + a5;
        int v21 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v22 = (unint64_t)a1[77];
          if (v22 >= v20) {
            goto LABEL_13;
          }
        }
        else
        {
          unint64_t v22 = *((unsigned __int8 *)a1 + 631);
          if (v20 <= v22)
          {
LABEL_13:
            int v23 = *(uint64_t **)(a2 + 8);
            uint64_t v25 = *v23;
            uint64_t v24 = v23[1];
            if (v25 != v24 - 16)
            {
              do
              {
                unint64_t v26 = a1 + 76;
                if (*((char *)a1 + 631) < 0) {
                  unint64_t v26 = (void ***)*v21;
                }
                ((void (*)(void, void ***, void))(**a1)[1])(*a1, v26, (a6 + a5));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v25, 1, a4, a5, (a6 + a5));
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v25 += 16;
                char v27 = *(uint64_t **)(a2 + 8);
                uint64_t v24 = v27[1];
              }
              while (v25 != v24 - 16);
              uint64_t v25 = *v27;
            }
            if (v25 == v24) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            uint64_t v28 = a1 + 76;
            if (*((char *)a1 + 631) < 0) {
              uint64_t v28 = (void ***)*v21;
            }
            ((void (*)(void, void ***, void))(**a1)[1])(*a1, v28, (a6 + a5));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(void *)(*(void *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
            ((void (*)(void))***a1)();
            if (*((char *)a1 + 631) < 0) {
              int v21 = (void *)*v21;
            }
            ((void (*)(void, void *, void))(**a1)[1])(*a1, v21, a6);
LABEL_108:
            uint64_t v11 = (uint64_t (*)(void))***a1;
            goto LABEL_123;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v22, 32);
        goto LABEL_13;
      }
      int v45 = (uint64_t (*)(void))v19[1];
LABEL_52:
      return v45();
    case 3:
      ((void (*)(void))***a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8), a4);
      uint64_t v11 = (uint64_t (*)(void))***a1;
      goto LABEL_123;
    case 4:
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    case 5:
      unint64_t v29 = *(void *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>((uint64_t (****)(void))a1, v29);
    case 6:
      unint64_t v31 = *(void *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>((uint64_t (****)(void))a1, v31);
    case 7:
      double v32 = *(double *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float((char *)a1, v32);
    case 8:
      int v33 = (void (*)(void))(**a1)[1];
      if (a3)
      {
        v33();
        uint64_t v34 = (a6 + a5);
        int v35 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v36 = (unint64_t)a1[77];
          if (v36 >= v34)
          {
            int v37 = (uint64_t (***)(void))*a1;
            goto LABEL_73;
          }
        }
        else
        {
          unint64_t v36 = *((unsigned __int8 *)a1 + 631);
          if (v34 <= v36)
          {
            int v37 = (uint64_t (***)(void))*a1;
            char v38 = a1 + 76;
            goto LABEL_74;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v36, 32);
        int v37 = (uint64_t (***)(void))*a1;
        char v38 = a1 + 76;
        if ((*((char *)a1 + 631) & 0x80000000) == 0)
        {
LABEL_74:
          ((void (*)(uint64_t (***)(void), void ***, uint64_t))(*v37)[1])(v37, v38, v34);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\"bytes\": [", 10);
          int v60 = *(unsigned __int8 ***)(a2 + 8);
          uint64_t v62 = *v60;
          int v61 = v60[1];
          if (v62 != v61)
          {
            if (v62 != v61 - 1)
            {
              do
              {
                unsigned int v63 = *v62++;
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, v63);
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ", ", 2);
              }
              while (v62 != (unsigned __int8 *)(*(void *)(*(void *)(a2 + 8) + 8) - 1));
            }
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *v62);
          }
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "],\n", 3);
          BOOL v64 = a1 + 76;
          if (*((char *)a1 + 631) < 0) {
            BOOL v64 = (void ***)*v35;
          }
          ((void (*)(void, void ***, uint64_t))(**a1)[1])(*a1, v64, v34);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\"subtype\": ", 11);
          uint64_t v65 = *(void *)(a2 + 8);
          if (*(unsigned char *)(v65 + 25)) {
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *(unsigned __int8 *)(v65 + 24));
          }
          else {
            ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "null", 4);
          }
          ((void (*)(void, uint64_t))***a1)(*a1, 10);
          BOOL v66 = (void (*)(void))(**a1)[1];
LABEL_121:
          v66();
          goto LABEL_122;
        }
LABEL_73:
        char v38 = (void ***)*v35;
        goto LABEL_74;
      }
      v33();
      char v39 = *(unsigned __int8 ***)(a2 + 8);
      unsigned __int8 v41 = *v39;
      int v40 = v39[1];
      if (v41 != v40)
      {
        while (v41 != v40 - 1)
        {
          unsigned int v42 = *v41++;
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, v42);
          ((void (*)(void, uint64_t))***a1)(*a1, 44);
          int v40 = *(unsigned __int8 **)(*(void *)(a2 + 8) + 8);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *v41);
      }
      ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "],\"subtype\":", 12);
      uint64_t v43 = *(void *)(a2 + 8);
      if (*(unsigned char *)(v43 + 25))
      {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *(unsigned __int8 *)(v43 + 24));
        uint64_t v44 = (uint64_t (*)(void))***a1;
        return v44();
      }
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
LABEL_83:
      return v11();
    case 9:
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    default:
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
  }
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E28C8B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E28C8B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x230FB1C40);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_character(uint64_t a1)
{
  return MEMORY[0x270F98740](*(void *)(a1 + 8));
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_characters(uint64_t a1)
{
  return MEMORY[0x270F98750](*(void *)(a1 + 8));
}

void nlohmann::detail::output_stream_adapter<char>::~output_stream_adapter()
{
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v7 = localeconv();
  *(void *)(a1 + 80) = v7;
  thousands_sep = v7->thousands_sep;
  if (thousands_sep) {
    LOBYTE(thousands_sep) = *thousands_sep;
  }
  *(unsigned char *)(a1 + 88) = (_BYTE)thousands_sep;
  decimal_point = v7->decimal_point;
  if (v7->decimal_point) {
    LOBYTE(decimal_point) = *decimal_point;
  }
  *(_OWORD *)(a1 + 90) = 0u;
  *(unsigned char *)(a1 + 89) = (_BYTE)decimal_point;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 266) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 426) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  *(_OWORD *)(a1 + 458) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 490) = 0u;
  *(_OWORD *)(a1 + 506) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 538) = 0u;
  *(_OWORD *)(a1 + 554) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(unsigned char *)(a1 + 602) = a3;
  unint64_t v10 = (int8x16_t *)operator new(0x208uLL);
  *(void *)(a1 + 608) = v10;
  *(void *)(a1 + 624) = 0x8000000000000208;
  int8x16_t v11 = vdupq_n_s8(a3);
  *(void *)(a1 + 616) = 512;
  int8x16_t *v10 = v11;
  v10[1] = v11;
  v10[2] = v11;
  v10[3] = v11;
  void v10[4] = v11;
  v10[5] = v11;
  v10[6] = v11;
  v10[7] = v11;
  v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  v10[11] = v11;
  v10[12] = v11;
  v10[13] = v11;
  v10[14] = v11;
  v10[15] = v11;
  v10[16] = v11;
  v10[17] = v11;
  v10[18] = v11;
  v10[19] = v11;
  v10[20] = v11;
  v10[21] = v11;
  v10[22] = v11;
  v10[23] = v11;
  v10[24] = v11;
  v10[25] = v11;
  v10[26] = v11;
  v10[27] = v11;
  v10[28] = v11;
  v10[29] = v11;
  v10[30] = v11;
  v10[31] = v11;
  v10[32].i8[0] = 0;
  *(_DWORD *)(a1 + 632) = a4;
  return a1;
}

void sub_22F12ABCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:nn180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2, int a3)
{
  char v42 = 0;
  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  if (!v4) {
    return result;
  }
  size_t v7 = (void *)result;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v43[0] = 0;
  uint64_t v12 = result + 90;
  do
  {
    if (v3) {
      unsigned int v13 = (uint64_t *)*a2;
    }
    else {
      unsigned int v13 = a2;
    }
    int v14 = *((unsigned __int8 *)v13 + v8);
    uint64_t result = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(&v42, v43, v14);
    if (result == 1)
    {
      int v16 = *((_DWORD *)v7 + 158);
      if ((v16 - 1) >= 2)
      {
        if (!v16)
        {
          char v41 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v14);
          exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::to_string(&v34, v8);
          std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("invalid UTF-8 byte at index ", &v34, &v35);
          std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(": 0x", &v35, &v36);
          if (v41 >= 0) {
            uint64_t v28 = __str;
          }
          else {
            uint64_t v28 = *(char **)__str;
          }
          if (v41 >= 0) {
            std::string::size_type v29 = v41;
          }
          else {
            std::string::size_type v29 = v40;
          }
          float v30 = std::string::append(&v36, v28, v29);
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          std::string::size_type v38 = v30->__r_.__value_.__r.__words[2];
          long long v37 = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          nlohmann::detail::type_error::create(316, (uint64_t)&v37, exception);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
      }
      uint64_t v17 = v9 != 0;
      if (v16 == 1)
      {
        uint64_t v18 = v12 + v10;
        if (a3)
        {
          *(_DWORD *)uint64_t v18 = 1717990748;
          *(_WORD *)(v18 + 4) = 25702;
          v10 += 6;
        }
        else
        {
          v10 += 3;
          *(_WORD *)uint64_t v18 = -16401;
          *(unsigned char *)(v18 + 2) = -67;
        }
        if ((unint64_t)(v10 - 500) <= 0xC)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
          uint64_t v10 = 0;
        }
      }
      uint64_t v9 = 0;
      v8 -= v17;
      char v42 = 0;
      uint64_t v11 = v10;
    }
    else if (result)
    {
      if ((a3 & 1) == 0)
      {
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v19 = a2;
        }
        else {
          uint64_t v19 = (uint64_t *)*a2;
        }
        *(unsigned char *)(v12 + v11++) = *((unsigned char *)v19 + v8);
      }
      ++v9;
    }
    else
    {
      switch(v43[0])
      {
        case 8u:
          __int16 v15 = 25180;
          goto LABEL_43;
        case 9u:
          __int16 v15 = 29788;
          goto LABEL_43;
        case 0xAu:
          __int16 v15 = 28252;
          goto LABEL_43;
        case 0xBu:
          goto LABEL_29;
        case 0xCu:
          __int16 v15 = 26204;
          goto LABEL_43;
        case 0xDu:
          __int16 v15 = 29276;
          goto LABEL_43;
        default:
          if (v43[0] == 34)
          {
            __int16 v15 = 8796;
            goto LABEL_43;
          }
          if (v43[0] == 92)
          {
            __int16 v15 = 23644;
LABEL_43:
            *(_WORD *)(v12 + v11) = v15;
            v11 += 2;
            goto LABEL_44;
          }
LABEL_29:
          if (v43[0] > 0x7E) {
            int v20 = a3;
          }
          else {
            int v20 = 0;
          }
          if (v43[0] < 0x20 || v20)
          {
            uint64_t v24 = (char *)(v12 + v11);
            if (HIWORD(v43[0]))
            {
              uint64_t result = snprintf(v24, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v43[0] >> 10) - 10304), v43[0] & 0x3FF | 0xDC00);
              v11 += 12;
            }
            else
            {
              uint64_t result = snprintf(v24, 7uLL, "\\u%04x", v43[0]);
              v11 += 6;
            }
          }
          else
          {
            if (*((char *)a2 + 23) >= 0) {
              int v21 = a2;
            }
            else {
              int v21 = (uint64_t *)*a2;
            }
            *(unsigned char *)(v12 + v11++) = *((unsigned char *)v21 + v8);
          }
LABEL_44:
          if ((unint64_t)(v11 - 500) > 0xC)
          {
            uint64_t v9 = 0;
            uint64_t v10 = v11;
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v11);
            uint64_t v11 = 0;
            uint64_t v10 = 0;
            uint64_t v9 = 0;
          }
          break;
      }
    }
    ++v8;
    int v22 = *((char *)a2 + 23);
    unsigned int v3 = v22 >> 31;
    unint64_t v23 = a2[1];
    if (v22 >= 0) {
      unint64_t v23 = *((unsigned __int8 *)a2 + 23);
    }
  }
  while (v8 < v23);
  if (v42)
  {
    int v26 = *((_DWORD *)v7 + 158);
    switch(v26)
    {
      case 1:
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
        uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
        break;
      case 2:
        uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
        break;
      case 0:
        char v41 = 3;
        *(_DWORD *)__str = 0;
        double v32 = (uint64_t *)*a2;
        if (v22 >= 0) {
          double v32 = a2;
        }
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v32 + v23 - 1));
        int v33 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::detail::type_error::create(316, (uint64_t)&v37, v33);
      default:
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
    }
    return v25();
  }
  else if (v11)
  {
    uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
    return v25();
  }
  return result;
}

void sub_22F12B208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v39 - 97) < 0) {
        operator delete(*(void **)(v39 - 120));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return (***(uint64_t (****)(void, uint64_t))a1)(*(void *)a1, 48);
  }
  LOBYTE(v2) = a2;
  if (a2 >= 0xA)
  {
    if (a2 >= 0x64)
    {
      *(_WORD *)(a1 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[(a2 - 100 * ((41 * a2) >> 12))];
      uint64_t v5 = a1 + 17;
      unsigned int v2 = (41 * a2) >> 12;
      goto LABEL_10;
    }
    uint64_t v3 = 2;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v5 = a1 + 16 + v3;
  if (a2 < 0xA)
  {
LABEL_10:
    *(unsigned char *)(v5 - 1) = v2 | 0x30;
    return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
  }
  *(_WORD *)(v5 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[a2];
  return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(uint64_t (****a1)(void), unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    uint64_t v3 = a1 + 2;
    if ((v2 & 0x8000000000000000) != 0)
    {
      unsigned char *v3 = 45;
      unint64_t v2 = -(uint64_t)v2;
      if (v2 >= 0xA)
      {
        int v7 = 4;
        unint64_t v11 = v2;
        while (1)
        {
          if (v11 <= 0x63)
          {
            v7 -= 2;
            goto LABEL_26;
          }
          if (v11 <= 0x3E7) {
            break;
          }
          if (v11 >> 4 < 0x271) {
            goto LABEL_26;
          }
          v7 += 4;
          BOOL v10 = v11 >= 0x186A0;
          v11 /= 0x2710uLL;
          if (!v10)
          {
            v7 -= 3;
            goto LABEL_26;
          }
        }
        --v7;
      }
      else
      {
        int v7 = 1;
      }
LABEL_26:
      unsigned int v8 = v7 + 1;
    }
    else
    {
      if (v2 < 0xA)
      {
        uint64_t v4 = (char *)a1 + 17;
        goto LABEL_35;
      }
      unsigned int v8 = 4;
      unint64_t v9 = v2;
      while (1)
      {
        if (v9 <= 0x63)
        {
          v8 -= 2;
          goto LABEL_27;
        }
        if (v9 <= 0x3E7) {
          break;
        }
        if (v9 >> 4 < 0x271) {
          goto LABEL_27;
        }
        v8 += 4;
        BOOL v10 = v9 >= 0x186A0;
        v9 /= 0x2710uLL;
        if (!v10)
        {
          v8 -= 3;
          goto LABEL_27;
        }
      }
      --v8;
    }
LABEL_27:
    if (v8 >= 0x3F) {
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
    }
    uint64_t v4 = &v3[v8];
    if (v2 < 0x64)
    {
      unint64_t v12 = v2;
    }
    else
    {
      do
      {
        unint64_t v12 = v2 / 0x64;
        *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v2 % 0x64];
        v4 -= 2;
        unint64_t v13 = v2 >> 4;
        v2 /= 0x64uLL;
      }
      while (v13 > 0x270);
    }
    if (v12 >= 0xA)
    {
      *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v12];
LABEL_36:
      int v14 = (**a1)[1];
      return v14();
    }
    LOBYTE(v2) = v12;
LABEL_35:
    *(v4 - 1) = v2 + 48;
    goto LABEL_36;
  }
  uint64_t v5 = ***a1;
  return v5();
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(uint64_t (****a1)(void), unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    if (a2 >= 0xA)
    {
      unsigned int v6 = 4;
      unint64_t v7 = a2;
      while (1)
      {
        if (v7 <= 0x63)
        {
          v6 -= 2;
          goto LABEL_15;
        }
        if (v7 <= 0x3E7) {
          break;
        }
        if (v7 >> 4 < 0x271) {
          goto LABEL_15;
        }
        unint64_t v8 = v7 >> 5;
        v7 /= 0x2710uLL;
        v6 += 4;
        if (v8 <= 0xC34)
        {
          v6 -= 3;
          goto LABEL_15;
        }
      }
      --v6;
LABEL_15:
      if (v6 >= 0x3F) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
      }
      uint64_t v3 = (uint64_t)a1 + v6 + 16;
      if (a2 < 0x64)
      {
        unint64_t v9 = a2;
      }
      else
      {
        do
        {
          unint64_t v9 = v2 / 0x64;
          *(_WORD *)(v3 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * (v2 % 0x64)];
          v3 -= 2;
          unint64_t v10 = v2 >> 4;
          v2 /= 0x64uLL;
        }
        while (v10 > 0x270);
      }
      if (v9 >= 0xA)
      {
        *(_WORD *)(v3 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * v9];
LABEL_24:
        unint64_t v11 = (**a1)[1];
        return v11();
      }
      LOBYTE(v2) = v9;
    }
    else
    {
      uint64_t v3 = (uint64_t)a1 + 17;
    }
    *(unsigned char *)(v3 - 1) = v2 + 48;
    goto LABEL_24;
  }
  uint64_t v4 = ***a1;
  return v4();
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float(char *a1, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(void **)a1 + 8);
    unsigned int v6 = "null";
    uint64_t v3 = 4;
  }
  else
  {
    uint64_t v3 = nlohmann::detail::to_chars<double>(a1 + 16, (uint64_t)(a1 + 80), a2) - (a1 + 16);
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(void **)a1 + 8);
    uint64_t v5 = *(void *)a1;
    unsigned int v6 = a1 + 16;
  }
  return v4(v5, v6, v3);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char *a1, unsigned int *a2, int a3)
{
  unsigned int v3 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[a3];
  if (*a1) {
    unsigned int v4 = a3 & 0x3F | (*a2 << 6);
  }
  else {
    unsigned int v4 = (0xFFu >> v3) & a3;
  }
  *a2 = v4;
  unint64_t v5 = 16 * *a1 + v3 + 256;
  if (v5 >= 0x190) {
    nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode();
  }
  uint64_t v6 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v5];
  *a1 = v6;
  return v6;
}

char *nlohmann::detail::to_chars<double>(char *a1, uint64_t a2, double a3)
{
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::to_chars<double>();
  }
  unsigned int v3 = a1;
  if ((*(void *)&a3 & 0x8000000000000000) != 0)
  {
    a3 = -a3;
    *a1 = 45;
    unsigned int v3 = a1 + 1;
  }
  if (a3 == 0.0)
  {
    *(_WORD *)unsigned int v3 = 11824;
    uint64_t result = v3 + 3;
    v3[2] = 48;
  }
  else
  {
    unint64_t v5 = a2 - (void)v3;
    if (a2 - (uint64_t)v3 <= 16) {
      nlohmann::detail::to_chars<double>();
    }
    uint64_t v6 = 0;
    nlohmann::detail::dtoa_impl::grisu2<double>((uint64_t)v3, (unsigned int *)&v6 + 1, &v6, a3);
    if (SHIDWORD(v6) >= 18) {
      nlohmann::detail::to_chars<double>();
    }
    if (v5 <= 0x15) {
      nlohmann::detail::to_chars<double>();
    }
    if (v5 == 22) {
      nlohmann::detail::to_chars<double>();
    }
    return nlohmann::detail::dtoa_impl::format_buffer((nlohmann::detail::dtoa_impl *)v3, (char *)HIDWORD(v6), (int)v6, -4, 15);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2<double>(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4)
{
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::dtoa_impl::grisu2<double>();
  }
  if (a4 <= 0.0) {
    nlohmann::detail::dtoa_impl::grisu2<double>();
  }
  nlohmann::detail::dtoa_impl::compute_boundaries<double>((uint64_t)v9, a4);
  return nlohmann::detail::dtoa_impl::grisu2(a1, a2, a3, v9[2], v9[3], v9[0], v9[1], v7, v9[4], (nlohmann::detail::dtoa_impl *)v9[5]);
}

char *nlohmann::detail::dtoa_impl::format_buffer(nlohmann::detail::dtoa_impl *this, char *a2, int a3, int a4, int a5)
{
  if ((a4 & 0x80000000) == 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  if (a5 <= 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  int v5 = (int)a2;
  uint64_t v7 = a3 + (uint64_t)(int)a2;
  if ((a3 & 0x80000000) == 0 && (int)v7 <= a5)
  {
    memset((char *)this + (int)a2, 48, a3);
    *((unsigned char *)this + v7) = 46;
    uint64_t result = (char *)this + v7 + 2;
    *((unsigned char *)this + (int)v7 + 1) = 48;
    return result;
  }
  if ((int)v7 < 1 || (int)v7 > a5)
  {
    if ((int)v7 > a4 && (int)v7 <= 0)
    {
      size_t v10 = -(int)v7;
      memmove((char *)this + v10 + 2, this, (int)a2);
      *(_WORD *)this = 11824;
      memset((char *)this + 2, 48, v10);
      return (char *)this + v10 + v5 + 2;
    }
    if (a2 == 1)
    {
      uint64_t v11 = 1;
    }
    else
    {
      memmove((char *)this + 2, (char *)this + 1, (int)a2 - 1);
      *((unsigned char *)this + 1) = 46;
      uint64_t v11 = v5 + 1;
    }
    unint64_t v12 = (char *)this + v11;
    *unint64_t v12 = 101;
    if ((int)v7 <= -999) {
      nlohmann::detail::dtoa_impl::format_buffer();
    }
    if ((int)v7 >= 1001) {
      nlohmann::detail::dtoa_impl::format_buffer();
    }
    if ((int)v7 >= 1) {
      char v13 = 43;
    }
    else {
      char v13 = 45;
    }
    if ((int)v7 - 1 >= 0) {
      unsigned int v14 = v7 - 1;
    }
    else {
      unsigned int v14 = 1 - v7;
    }
    v12[1] = v13;
    if (v14 > 9)
    {
      if (v14 > 0x63)
      {
        v12[2] = (unsigned __int16)v14 / 0x64u + 48;
        unsigned __int8 v17 = (unsigned __int16)v14 % 0x64u;
        v12[3] = (v17 / 0xAu) | 0x30;
        v12[4] = (v17 % 0xAu) | 0x30;
        uint64_t v16 = 2;
        return &v12[v16 + 3];
      }
      v12[2] = v14 / 0xAu + 48;
      char v15 = (v14 % 0xAu) | 0x30;
    }
    else
    {
      v12[2] = 48;
      char v15 = v14 + 48;
    }
    v12[3] = v15;
    uint64_t v16 = 1;
    return &v12[v16 + 3];
  }
  if ((a3 & 0x80000000) == 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  unint64_t v9 = (char *)this + v7;
  memmove(v9 + 1, v9, (int)a2 - (unint64_t)v7);
  *unint64_t v9 = 46;
  return (char *)this + v5 + 1;
}

uint64_t nlohmann::detail::dtoa_impl::compute_boundaries<double>@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  }
  if (a2 <= 0.0) {
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  }
  uint64_t v4 = *(void *)&a2 >> 52;
  uint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  uint64_t v6 = 2 * v5;
  uint64_t v7 = *(void *)&a2 >> 53;
  uint64_t v8 = 4 * v5;
  int v9 = (*(void *)&a2 >> 52) - 1077;
  uint64_t v10 = 0x10000000000000;
  if ((*(void *)&a2 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v8 = 2 * v5;
    int v9 = (*(void *)&a2 >> 52) - 1076;
    uint64_t v10 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  BOOL v11 = v7 == 0;
  if (v7) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = 2 * v5;
  }
  if (v11) {
    int v9 = (*(void *)&a2 >> 52) - 1076;
  }
  else {
    uint64_t v5 = v10;
  }
  uint64_t v3 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v4)
  {
    unint64_t v13 = (*(void *)&a2 >> 52) - 1076;
  }
  else
  {
    uint64_t v12 = 2 * v3;
    int v9 = -1075;
    unint64_t v13 = 4294966221;
  }
  if (v4)
  {
    unint64_t v14 = (*(void *)&a2 >> 52) - 1075;
  }
  else
  {
    uint64_t v6 = 2 * v3;
    unint64_t v14 = 4294966222;
  }
  if (v4) {
    uint64_t v15 = v5;
  }
  else {
    uint64_t v15 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  }
  uint64_t v24 = v12 - 1;
  int v25 = v9;
  uint64_t v16 = nlohmann::detail::dtoa_impl::diyfp::normalize(v6 | 1, v13);
  int v18 = v17;
  unint64_t v19 = nlohmann::detail::dtoa_impl::diyfp::normalize_to(&v24, v17);
  int v21 = v20;
  uint64_t result = nlohmann::detail::dtoa_impl::diyfp::normalize(v15, v14);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v23;
  *(void *)(a1 + 16) = v19;
  *(_DWORD *)(a1 + 24) = v21;
  *(void *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 40) = v18;
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, nlohmann::detail::dtoa_impl *a10)
{
  v31[0] = a4;
  v31[1] = a5;
  v30[0] = a6;
  v30[1] = a7;
  v29[0] = a9;
  v29[1] = a10;
  if (a10 != a5) {
    nlohmann::detail::dtoa_impl::grisu2();
  }
  if (a10 != a7) {
    nlohmann::detail::dtoa_impl::grisu2();
  }
  uint64_t cached_power_for_binary_exponent = nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(a10);
  int v15 = v14;
  uint64_t v27 = cached_power_for_binary_exponent;
  int v28 = v16;
  unint64_t v17 = nlohmann::detail::dtoa_impl::diyfp::mul(v30, &v27);
  uint64_t v19 = v18;
  unint64_t v20 = nlohmann::detail::dtoa_impl::diyfp::mul(v31, &v27);
  unsigned int v22 = v21;
  unint64_t v23 = nlohmann::detail::dtoa_impl::diyfp::mul(v29, &v27);
  *a3 = -v15;
  return nlohmann::detail::dtoa_impl::grisu2_digit_gen(a1, a2, a3, v20 + 1, v22, v17, v19, v25, v23 - 1, v24);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result) {
    nlohmann::detail::dtoa_impl::diyfp::normalize();
  }
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::normalize_to(uint64_t *a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2) - a2;
  if (v2 < 0) {
    nlohmann::detail::dtoa_impl::diyfp::normalize_to();
  }
  uint64_t v3 = *a1;
  unint64_t result = *a1 << v2;
  if (result >> v2 != v3) {
    nlohmann::detail::dtoa_impl::diyfp::normalize_to();
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(nlohmann::detail::dtoa_impl *this)
{
  if ((int)this <= -1501) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  if ((int)this >= 1501) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  int v1 = 78913 * (-61 - (int)this) / 0x40000;
  if ((int)this < -61) {
    ++v1;
  }
  if (v1 <= -315) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  unsigned int v2 = (int)((v1 + 307 + (((__int16)(v1 + 307) >> 28) & 7)) << 16) >> 19;
  if (v2 >= 0x4F) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  uint64_t v3 = (void *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                + 16 * (unsigned __int16)v2);
  int v4 = v3[1] + this;
  if (v4 <= -125) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  if (v4 >= -95) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  return *v3;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(void *a1, void *a2)
{
  uint64_t v2 = HIDWORD(*a1);
  uint64_t v3 = HIDWORD(*a2);
  unint64_t v4 = v3 * (unint64_t)*a1;
  unint64_t v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v4
         + v5
         + 0x80000000) >> 32);
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_digit_gen(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  v47[0] = a4;
  v47[1] = a5;
  v46[0] = a6;
  v46[1] = a7;
  unint64_t v44 = a9;
  uint64_t v45 = a10;
  if ((int)a10 <= -61) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  if ((int)a10 >= -31) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  unint64_t v13 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v47);
  uint64_t v14 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v46);
  int v15 = -(int)v45;
  unint64_t v16 = v44 >> -(char)v45;
  if (!v16) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  unint64_t v17 = v14;
  unint64_t v18 = 1 << v15;
  uint64_t v19 = (1 << v15) - 1;
  unint64_t v20 = v19 & v44;
  if (v16 <= 0x3B9AC9FF)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0x98967F)
      {
        if (v16 <= 0xF423F)
        {
          unsigned int v23 = v16 >> 5;
          unsigned int v24 = v16 >> 4;
          if (v16 <= 9) {
            int v25 = 1;
          }
          else {
            int v25 = 10;
          }
          if (v16 <= 9) {
            int v26 = 1;
          }
          else {
            int v26 = 2;
          }
          if (v16 <= 0x63) {
            int v27 = v26;
          }
          else {
            int v27 = 3;
          }
          if (v16 <= 0x63) {
            int v28 = v25;
          }
          else {
            int v28 = 100;
          }
          if (v16 <= 0x3E7) {
            int v29 = v27;
          }
          else {
            int v29 = 4;
          }
          if (v16 <= 0x3E7) {
            int v30 = v28;
          }
          else {
            int v30 = 1000;
          }
          if (v24 <= 0x270) {
            int v31 = v29;
          }
          else {
            int v31 = 5;
          }
          if (v24 <= 0x270) {
            int v32 = v30;
          }
          else {
            int v32 = 10000;
          }
          if (v23 <= 0xC34) {
            int v22 = v31;
          }
          else {
            int v22 = 6;
          }
          if (v23 > 0xC34) {
            unsigned int v21 = 100000;
          }
          else {
            unsigned int v21 = v32;
          }
        }
        else
        {
          unsigned int v21 = 1000000;
          int v22 = 7;
        }
      }
      else
      {
        unsigned int v21 = 10000000;
        int v22 = 8;
      }
    }
    else
    {
      unsigned int v21 = 100000000;
      int v22 = 9;
    }
  }
  else
  {
    unsigned int v21 = 1000000000;
    int v22 = 10;
  }
  unsigned int v33 = v22 + 1;
  do
  {
    unsigned int v34 = v16 / v21;
    if (v16 / v21 >= 0xA) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    unint64_t v16 = v16 % v21;
    uint64_t v35 = (int)*a2;
    *a2 = v35 + 1;
    *(unsigned char *)(a1 + v35) = v34 + 48;
    if ((v16 << v15) + v20 <= v13)
    {
      *a3 = *a3 + v33 - 2;
      unint64_t v18 = (unint64_t)v21 << v15;
      std::string::size_type v40 = (char *)*a2;
      uint64_t v41 = a1;
      unint64_t v42 = v13;
      v20 += v16 << v15;
      return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
    }
    v21 /= 0xAu;
    --v33;
  }
  while (v33 > 1);
  if (v20 <= v13) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  int v36 = 0;
  do
  {
    if (v20 >= 0x199999999999999ALL) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    unint64_t v37 = (10 * v20) >> v15;
    if (v37 >= 0xA) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    uint64_t v38 = (int)*a2;
    *a2 = v38 + 1;
    *(unsigned char *)(a1 + v38) = v37 + 48;
    uint64_t v39 = 5 * v13;
    unint64_t v20 = (10 * v20) & v19;
    v13 *= 10;
    v17 *= 10;
    --v36;
  }
  while (v20 > 2 * v39);
  *a3 += v36;
  std::string::size_type v40 = (char *)*a2;
  uint64_t v41 = a1;
  unint64_t v42 = v13;
  return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::sub(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
    nlohmann::detail::dtoa_impl::diyfp::sub();
  }
  BOOL v2 = *(void *)a1 >= *(void *)a2;
  uint64_t result = *(void *)a1 - *(void *)a2;
  if (!v2) {
    nlohmann::detail::dtoa_impl::diyfp::sub();
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((int)a2 <= 0) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a3 > a4) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a4 < a5) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (!a6) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a5 < a3 && a4 - a5 >= a6)
  {
    uint64_t v6 = (a2 - 1);
    uint64_t v7 = -(uint64_t)a5;
    unint64_t v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3) {
        break;
      }
      int v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48) {
        nlohmann::detail::dtoa_impl::grisu2_round();
      }
      *(unsigned char *)(this + v6) = v9 - 1;
      if (v8 >= a3) {
        break;
      }
      unint64_t v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  return a1;
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x230FB1B20](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x230FB1B30](v13);
  return a1;
}

void sub_22F12C4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      unint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_22F12C658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[40],char [40],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[40]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[40]>(char *a1)
{
  BOOL v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F12C6F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[24],char [24],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[24]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[24]>(char *a1)
{
  BOOL v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F12C790(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[29],char [29],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[29]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[29]>(char *a1)
{
  BOOL v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F12C828(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_impl<char const(&)[13],BOOL>(uint64_t **a1, char *a2, unsigned __int8 *a3)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const(&)[13],BOOL>((uint64_t)a1, a2, a3, (uint64_t)v8);
  unint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v7, (void **)v8[0] + 4);
  unint64_t v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v7, v4, v8[0]);
    unint64_t v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v8, 0);
  return v5;
}

void sub_22F12C8C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<char const(&)[13],BOOL>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  int v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const(&)[13],BOOL,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_22F12C934(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<char const(&)[13],BOOL,0>(void *a1, char *a2, unsigned __int8 *a3)
{
  unint64_t v5 = std::string::basic_string[abi:nn180100]<0>(a1, a2);
  v5[4] = 0;
  uint64_t v6 = *a3;
  *((unsigned char *)v5 + 24) = 4;
  uint64_t v7 = (uint64_t)(v5 + 3);
  v5[4] = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::iterator_input_adapter<char const*>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  v9[4] = *MEMORY[0x263EF8340];
  *(void *)&long long v8 = a1;
  *((void *)&v8 + 1) = a2;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:nn180100]((uint64_t)v9, a3);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::parser(a5, &v8, (uint64_t)v9, a4);
  return std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100](v9);
}

void sub_22F12CA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::parse(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24))
  {
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:nn180100]((uint64_t)v33, a1);
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v34, a3, (uint64_t)v33, *(unsigned char *)(a1 + 176));
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100](v33);
    nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v34);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    if (a2)
    {
      int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(a1 + 40);
      *(_DWORD *)(a1 + 32) = v6;
      if (v6 != 15)
      {
        uint64_t v7 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(a1 + 40, &v32);
        long long v28 = *(_OWORD *)(a1 + 64);
        uint64_t v29 = *(void *)(a1 + 80);
        std::string::basic_string[abi:nn180100]<0>(v25, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 0xFu, (uint64_t)v25, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v28, (uint64_t)&__p, (nlohmann::detail::exception *)&v30);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v34, v7, (uint64_t)&v32, (const nlohmann::detail::parse_error *)&v30);
        v30.__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
        MEMORY[0x230FB1A70](v31);
        std::exception::~exception(&v30);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v39)
    {
      v23[0] = 9;
      long long v8 = (uint64_t **)&v24;
      uint64_t v24 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      unsigned __int8 v9 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v23[0];
      v23[0] = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v24;
      uint64_t v24 = v10;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      int v11 = v23[0];
    }
    else
    {
      if (*(unsigned char *)a3 != 9)
      {
LABEL_27:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v34);
        return;
      }
      v21[0] = 0;
      long long v8 = (uint64_t **)&v22;
      uint64_t v22 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      unsigned __int8 v17 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v21[0];
      v21[0] = v17;
      uint64_t v18 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v22;
      uint64_t v22 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      int v11 = v21[0];
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v8, v11);
    goto LABEL_27;
  }
  char v12 = *(unsigned char *)(a1 + 176);
  uint64_t v34 = a3;
  long long v35 = 0u;
  long long v36 = 0u;
  char v37 = 0;
  char v38 = v12;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v34);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  if (a2)
  {
    int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(a1 + 40);
    *(_DWORD *)(a1 + 32) = v13;
    if (v13 != 15)
    {
      uint64_t v14 = *(void *)(a1 + 64);
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(a1 + 40, &v32);
      long long v28 = *(_OWORD *)(a1 + 64);
      uint64_t v29 = *(void *)(a1 + 80);
      std::string::basic_string[abi:nn180100]<0>(v25, "value");
      nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 0xFu, (uint64_t)v25, &__p);
      nlohmann::detail::parse_error::create(101, (uint64_t *)&v28, (uint64_t)&__p, (nlohmann::detail::exception *)&v30);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v34, v14, (uint64_t)&v32, (const nlohmann::detail::parse_error *)&v30);
      v30.__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
      MEMORY[0x230FB1A70](v31);
      std::exception::~exception(&v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v37)
  {
    v19[0] = 9;
    unint64_t v20 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    unsigned __int8 v15 = *(unsigned char *)a3;
    *(unsigned char *)a3 = v19[0];
    v19[0] = v15;
    unint64_t v16 = *(uint64_t **)(a3 + 8);
    *(void *)(a3 + 8) = v20;
    unint64_t v20 = v16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  }
  if ((void)v35)
  {
    *((void *)&v35 + 1) = v35;
    operator delete((void *)v35);
  }
}

void sub_22F12CE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::exception a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  nlohmann::detail::parse_error::~parse_error(&a31);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  unint64_t v44 = *(void **)(v42 - 200);
  if (v44)
  {
    *(void *)(v42 - 192) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::parser(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:nn180100](a1, a3);
  *(_DWORD *)(v7 + 32) = 0;
  uint64_t v8 = v7 + 40;
  *(_OWORD *)(v7 + 40) = *a2;
  *(_DWORD *)(v7 + 56) = -1;
  *(unsigned char *)(v7 + 60) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = "";
  *(void *)(v7 + 152) = 0;
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 144) = 0;
  *(_DWORD *)(a1 + 168) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_decimal_point();
  *(unsigned char *)(a1 + 176) = a4;
  *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v8);
  return a1;
}

void sub_22F12D050(_Unwind_Exception *a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::~lexer(v2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_decimal_point()
{
  v0 = localeconv();
  if (!v0) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_decimal_point();
  }
  if (v0->decimal_point) {
    return *v0->decimal_point;
  }
  else {
    return 46;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(uint64_t a1)
{
  if (!*(void *)(a1 + 24)
    && !nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::skip_bom((unsigned __int8 **)a1))
  {
    unsigned __int8 v9 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_21;
  }
  while (2)
  {
    while (1)
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1);
      int v2 = *(_DWORD *)(a1 + 16);
      if (v2 > 31) {
        break;
      }
      if ((v2 - 9) >= 2 && v2 != 13)
      {
        if ((v2 + 1) < 2) {
          return 15;
        }
        goto LABEL_40;
      }
    }
    if (v2 > 90)
    {
      if (v2 <= 109)
      {
        if (v2 == 91) {
          return 8;
        }
        if (v2 == 93) {
          return 10;
        }
        if (v2 != 102) {
          goto LABEL_40;
        }
        qmemcpy(v11, "false", 5);
        unint64_t v5 = v11;
        uint64_t v6 = a1;
        unint64_t v7 = 5;
        uint64_t v8 = 2;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if (v2 <= 122)
      {
        if (v2 == 110)
        {
          int v10 = 1819047278;
          unint64_t v5 = &v10;
          uint64_t v6 = a1;
          unint64_t v7 = 4;
          uint64_t v8 = 3;
        }
        else
        {
          if (v2 != 116) {
            goto LABEL_40;
          }
          int v12 = 1702195828;
          unint64_t v5 = &v12;
          uint64_t v6 = a1;
          unint64_t v7 = 4;
          uint64_t v8 = 1;
        }
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if (v2 == 123) {
        return 9;
      }
      if (v2 == 125) {
        return 11;
      }
LABEL_40:
      unsigned __int8 v9 = "invalid literal";
LABEL_21:
      *(void *)(a1 + 96) = v9;
      return 14;
    }
    switch(v2)
    {
      case ' ':
        continue;
      case '""':
        uint64_t result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_string(a1);
        break;
      case ',':
        uint64_t result = 13;
        break;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_number(a1);
        break;
      case ':':
        uint64_t result = 12;
        break;
      default:
        goto LABEL_40;
    }
    return result;
  }
}

BOOL nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::skip_bom(unsigned __int8 **a1)
{
  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get(a1) == 239)
  {
    return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get(a1) == 187
        && nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get(a1) == 191;
  }
  else
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::unget((uint64_t)a1);
    return 1;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get(unsigned __int8 **a1)
{
  *(int64x2_t *)(a1 + 3) = vaddq_s64(*(int64x2_t *)(a1 + 3), vdupq_n_s64(1uLL));
  if (*((unsigned char *)a1 + 20))
  {
    *((unsigned char *)a1 + 20) = 0;
    int v2 = *((_DWORD *)a1 + 4);
  }
  else
  {
    uint64_t v3 = *a1;
    if (*a1 == a1[1])
    {
      int v2 = -1;
    }
    else
    {
      int v2 = *v3;
      *a1 = v3 + 1;
    }
    *((_DWORD *)a1 + 4) = v2;
  }
  if (v2 == -1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v5 = a1[7];
  unint64_t v4 = (unint64_t)a1[8];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = (unint64_t)a1[6];
    uint64_t v8 = &v5[-v7];
    uint64_t v9 = (uint64_t)&v5[-v7 + 1];
    if (v9 < 0) {
      abort();
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      uint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      int v12 = (unsigned __int8 *)operator new(v11);
    }
    else {
      int v12 = 0;
    }
    int v13 = &v12[v11];
    v8[(void)v12] = v2;
    uint64_t v6 = (uint64_t)&v8[(void)v12 + 1];
    if (v5 == (unsigned __int8 *)v7)
    {
      int v12 = &v8[(void)v12];
    }
    else
    {
      uint64_t v14 = &v5[~v7];
      do
      {
        unsigned __int8 v15 = *--v5;
        (v14--)[(void)v12] = v15;
      }
      while (v5 != (unsigned __int8 *)v7);
      unint64_t v5 = a1[6];
    }
    a1[6] = v12;
    a1[7] = (unsigned __int8 *)v6;
    a1[8] = v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    unsigned __int8 *v5 = v2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[7] = (unsigned __int8 *)v6;
  uint64_t result = *((unsigned int *)a1 + 4);
  if (result == 10)
  {
    uint64_t v17 = (uint64_t)(a1[5] + 1);
    a1[4] = 0;
    a1[5] = (unsigned __int8 *)v17;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_literal(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  if (*a2 != *(unsigned __int8 *)(a1 + 16)) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_literal();
  }
  if (a3 >= 2)
  {
    unint64_t v6 = a3 - 1;
    unint64_t v7 = a2 + 1;
    while (1)
    {
      unsigned __int8 v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1);
      int v9 = *v7++;
      if (v9 != v8) {
        break;
      }
      if (!--v6) {
        return a4;
      }
    }
    *(void *)(a1 + 96) = "invalid literal";
    return 14;
  }
  return a4;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_string(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::reset(a1);
  if (*(_DWORD *)(a1 + 16) != 34) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_string();
  }
  while (2)
  {
    while (2)
    {
      int v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1)
         + 1;
      uint64_t result = 4;
      unint64_t v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          unint64_t v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          unint64_t v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          unint64_t v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          unint64_t v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          unint64_t v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          unint64_t v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          unint64_t v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          unint64_t v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          unint64_t v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          unint64_t v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          unint64_t v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          unint64_t v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          unint64_t v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          unint64_t v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          unint64_t v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          unint64_t v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          unint64_t v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          unint64_t v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          unint64_t v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          unint64_t v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          unint64_t v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          unint64_t v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          unint64_t v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          unint64_t v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          unint64_t v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          unint64_t v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          unint64_t v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          unint64_t v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          unint64_t v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          unint64_t v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          unint64_t v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          unint64_t v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          int v5 = *(_DWORD *)(a1 + 16);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1);
          unint64_t v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '""':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(void *)&long long v14 = 0xBF00000080;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 2;
          goto LABEL_19;
        case 225:
          long long v8 = xmmword_22F165E40;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          long long v8 = xmmword_22F165E30;
          goto LABEL_7;
        case 238:
          long long v8 = xmmword_22F165E20;
LABEL_7:
          long long v14 = v8;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 4;
          goto LABEL_19;
        case 241:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_22F166970;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_22F166988;
          goto LABEL_18;
        case 245:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_22F1669A0;
LABEL_18:
          long long v14 = *v9;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 6;
LABEL_19:
          if ((nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::next_byte_in_range(v6, &v14, v7) & 1) == 0)return 14; {
          continue;
          }
        default:
          unint64_t v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        unsigned int codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_codepoint(a1);
        if (codepoint == -1) {
          goto LABEL_85;
        }
        unsigned int v12 = codepoint;
        if ((codepoint & 0xFFFFFC00) != 0xD800)
        {
          if ((codepoint & 0xFFFFFC00) == 0xDC00)
          {
            unint64_t v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (codepoint >= 0x110000) {
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_string();
          }
          if (codepoint > 0x7F)
          {
            if (codepoint <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(codepoint))
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = codepoint;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 72), v5);
          continue;
        }
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1) != 92
          || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1) != 117)
        {
LABEL_86:
          unint64_t v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        unsigned int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_codepoint(a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55) {
            goto LABEL_86;
          }
          unsigned int v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        unint64_t v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(void *)(a1 + 96) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102) {
            goto LABEL_82;
          }
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_number(uint64_t a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::reset(a1);
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 72), 48);
      int v4 = 5;
    }
    else
    {
      if (v2 != 45) {
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_number();
      }
      uint64_t v3 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), 45);
      int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1);
      if ((v13 - 49) < 9)
      {
        int v2 = *(_DWORD *)(a1 + 16);
        int v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        long long v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v4 = 6;
    }
    int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1);
    if (v15 == 101 || v15 == 69)
    {
      int v5 = (std::string *)(a1 + 72);
      goto LABEL_9;
    }
    if (v15 != 46) {
      goto LABEL_40;
    }
    int v5 = (std::string *)(a1 + 72);
LABEL_34:
    std::string::push_back(v5, *(unsigned char *)(a1 + 128));
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1)
       - 48 > 9)
    {
      long long v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    int v5 = (std::string *)(a1 + 72);
    do
    {
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1);
    }
    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::unget(a1);
      __endptr = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(unsigned char *)(a1 + 16));
    int v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1);
    if ((v7 - 48) < 0xA)
    {
      long long v8 = (std::string *)(a1 + 72);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      long long v8 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1)
         - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(unsigned char *)(a1 + 16));
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1)
           - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
          while (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1)
                - 48 < 0xA);
        }
        goto LABEL_13;
      }
      long long v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      long long v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(void *)(a1 + 96) = v14;
    return 14;
  }
  uint64_t v3 = (std::string *)(a1 + 72);
  int v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  int v5 = (std::string *)(a1 + 72);
  while (1)
  {
    int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1);
    if ((v6 - 48) >= 0xA) {
      break;
    }
    std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
  }
  if (v6 == 46) {
    goto LABEL_34;
  }
  if (v6 == 69 || v6 == 101) {
    goto LABEL_9;
  }
LABEL_40:
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::unget(a1);
  __endptr = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    unsigned int v21 = (const char **)(a1 + 72);
    uint64_t v22 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v22 = *v21;
    }
    uint64_t v23 = strtoll(v22, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      unsigned int v21 = *(const char ***)(a1 + 72);
      uint64_t v24 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v21 + v24) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_number();
    }
    if (!*__error())
    {
      *(void *)(a1 + 104) = v23;
      return 6;
    }
  }
  else
  {
    uint64_t v17 = (const char **)(a1 + 72);
    uint64_t v18 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v18 = *v17;
    }
    unint64_t v19 = strtoull(v18, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      uint64_t v17 = *(const char ***)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v17 + v20) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_number();
    }
    if (!*__error())
    {
      *(void *)(a1 + 112) = v19;
      return 5;
    }
  }
LABEL_14:
  int v9 = (const char **)(a1 + 72);
  int v10 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    int v10 = *v9;
  }
  *(double *)(a1 + 120) = strtod(v10, &__endptr);
  if (*(char *)(a1 + 95) < 0)
  {
    int v9 = *(const char ***)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 95);
  }
  if (__endptr != (char *)v9 + v11) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_number();
  }
  return 7;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::unget(uint64_t result)
{
  uint64_t v1 = (void *)(result + 32);
  uint64_t v2 = *(void *)(result + 32);
  *(unsigned char *)(result + 20) = 1;
  --*(void *)(result + 24);
  if (v2 || (uint64_t v1 = (void *)(result + 40), (v2 = *(void *)(result + 40)) != 0)) {
    *uint64_t v1 = v2 - 1;
  }
  if (*(_DWORD *)(result + 16) != -1)
  {
    uint64_t v3 = *(void *)(result + 56);
    if (*(void *)(result + 48) == v3) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::unget();
    }
    *(void *)(result + 56) = v3 - 1;
  }
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::reset(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    **(unsigned char **)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 95) = 0;
  }
  uint64_t v2 = *(unsigned char **)(a1 + 48);
  int v3 = *(_DWORD *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 64);
  if ((unint64_t)v2 >= v4)
  {
    unint64_t v6 = v4 - (void)v2;
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v8 = v7;
    }
    int v9 = operator new(v8);
    int v10 = &v9[v8];
    *int v9 = v3;
    int v5 = v9 + 1;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v9 + 1;
    *(void *)(a1 + 64) = v10;
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    unsigned char *v2 = v3;
    int v5 = v2 + 1;
  }
  *(void *)(a1 + 56) = v5;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_codepoint(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 16) != 117) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_codepoint();
  }
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  long long v8 = xmmword_22F165E50;
  do
  {
    int v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1);
    int v5 = *(_DWORD *)(a1 + 16);
    int v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        if ((v5 - 97) > 5) {
          return 0xFFFFFFFFLL;
        }
        int v6 = v5 - 87;
      }
      else
      {
        int v6 = v5 - 55;
      }
    }
    uint64_t v3 = ((v6 << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_codepoint();
  }
  return v3;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::next_byte_in_range(std::string *a1, _DWORD *a2, unint64_t a3)
{
  if (a3 > 6 || ((1 << a3) & 0x54) == 0) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::next_byte_in_range();
  }
  int v6 = a1 + 3;
  std::string::push_back(a1 + 3, a1->__r_.__value_.__s.__data_[16]);
  uint64_t v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get((unsigned __int8 **)a1);
    int v8 = a1->__r_.__value_.__r.__words[2];
    if (*a2 > v8 || v8 > a2[1]) {
      break;
    }
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7) {
      return 1;
    }
  }
  uint64_t result = 0;
  a1[4].__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid string: ill-formed UTF-8 byte";
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::~lexer(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  long long v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  int v4 = (long long *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v32.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v32, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v32.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v32, 0);
        goto LABEL_19;
      case 3:
        v32.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v32, 0);
        goto LABEL_19;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v32.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t **)&v32, 0);
        goto LABEL_19;
      case 6:
        v32.__vftable = *(std::exception_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t **)&v32, 0);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v32.__vftable = *(std::exception_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t **)&v32, 0);
          goto LABEL_19;
        }
        uint64_t v28 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v34);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v29);
        std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("number overflow parsing '", &v29, &__p);
        std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("'", &__p, &v31);
        nlohmann::detail::out_of_range::create(406, (uint64_t)&v31, (nlohmann::detail::exception *)&v32);
        uint64_t v17 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v28, (uint64_t)&v34, (const nlohmann::detail::parse_error *)&v32);
        nlohmann::detail::out_of_range::~out_of_range(&v32);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        goto LABEL_50;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2);
          goto LABEL_13;
        }
        LOBYTE(v32.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v35, &v32);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_56; {
        int v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_59;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56; {
          int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
          }
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12) {
            goto LABEL_60;
          }
          LOBYTE(v32.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v35, &v32);
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        char v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          uint64_t v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        uint64_t v9 = v36;
        if (!v36)
        {
LABEL_43:
          uint64_t v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if ((*(void *)&v35[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)))
          {
            int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_36;
            }
            if (v10 != 10)
            {
              uint64_t v22 = *(void *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v34);
              std::string v31 = *(std::string *)(a1 + 64);
              std::string::basic_string[abi:nn180100]<0>(&v29, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 0xAu, (uint64_t)&v29, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)&v31, (uint64_t)&__p, (nlohmann::detail::exception *)&v32);
              uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v22, (uint64_t)&v34, (const nlohmann::detail::parse_error *)&v32);
              goto LABEL_61;
            }
            if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2)) {
              goto LABEL_56;
            }
            uint64_t v11 = v36;
            if (!v36)
            {
              int v24 = 383;
              goto LABEL_63;
            }
LABEL_30:
            uint64_t v9 = v11 - 1;
            uint64_t v36 = v9;
            if (!v9) {
              goto LABEL_43;
            }
            continue;
          }
          break;
        }
        int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v25 = *(void *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v34);
            std::string v31 = *(std::string *)(a1 + 64);
            std::string::basic_string[abi:nn180100]<0>(&v29, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 0xBu, (uint64_t)&v29, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)&v31, (uint64_t)&__p, (nlohmann::detail::exception *)&v32);
            uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v25, (uint64_t)&v34, (const nlohmann::detail::parse_error *)&v32);
            goto LABEL_61;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2)) {
            goto LABEL_56;
          }
          uint64_t v11 = v36;
          if (!v36)
          {
            int v24 = 439;
LABEL_63:
            __assert_rtn("sax_parse_internal", "parser.hpp", v24, "not states.empty()");
          }
          goto LABEL_30;
        }
        int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          uint64_t v26 = *(void *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v34);
          std::string v31 = *(std::string *)(a1 + 64);
          std::string::basic_string[abi:nn180100]<0>(&v29, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 4u, (uint64_t)&v29, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v31, (uint64_t)&__p, (nlohmann::detail::exception *)&v32);
          uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v34, (const nlohmann::detail::parse_error *)&v32);
          goto LABEL_61;
        }
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56; {
        int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
          goto LABEL_37;
        }
LABEL_60:
        uint64_t v27 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v34);
        std::string v31 = *(std::string *)(a1 + 64);
        std::string::basic_string[abi:nn180100]<0>(&v29, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 0xCu, (uint64_t)&v29, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v31, (uint64_t)&__p, (nlohmann::detail::exception *)&v32);
        uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v34, (const nlohmann::detail::parse_error *)&v32);
LABEL_61:
        uint64_t v17 = v23;
        nlohmann::detail::parse_error::~parse_error(&v32);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
LABEL_44:
        if (v35) {
          operator delete(v35);
        }
        return v17;
      case 0xE:
        uint64_t v19 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v34);
        std::string v31 = *(std::string *)(a1 + 64);
        std::string::basic_string[abi:nn180100]<0>(&v29, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 0, (uint64_t)&v29, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v31, (uint64_t)&__p, (nlohmann::detail::exception *)&v32);
        uint64_t v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v19, (uint64_t)&v34, (const nlohmann::detail::parse_error *)&v32);
        goto LABEL_49;
      default:
        uint64_t v21 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v34);
        std::string v31 = *(std::string *)(a1 + 64);
        std::string::basic_string[abi:nn180100]<0>(&v29, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 0x10u, (uint64_t)&v29, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v31, (uint64_t)&__p, (nlohmann::detail::exception *)&v32);
        uint64_t v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v21, (uint64_t)&v34, (const nlohmann::detail::parse_error *)&v32);
LABEL_49:
        uint64_t v17 = v20;
        v32.__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
        MEMORY[0x230FB1A70](&v33);
        std::exception::~exception(&v32);
        goto LABEL_50;
    }
  }
}

void sub_22F12ED58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,std::exception a27)
{
  nlohmann::detail::parse_error::~parse_error(&a27);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (*(char *)(v27 - 73) < 0) {
    operator delete(*(void **)(v27 - 96));
  }
  std::string v29 = *(void **)(v27 - 72);
  if (v29) {
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::parse_error *a4)
{
  *(unsigned char *)(a1 + 88) = 1;
  if (*(unsigned char *)(a1 + 128))
  {
    switch(~(100 * (*((_DWORD *)a4 + 2) / 100 / 100)) + *((_DWORD *)a4 + 2) / 100)
    {
      case 0:
        exceptiouint64_t n = (nlohmann::detail::parse_error *)__cxa_allocate_exception(0x28uLL);
        int v6 = nlohmann::detail::parse_error::parse_error(exception, a4);
        int v8 = (void (*)(void *))nlohmann::detail::parse_error::~parse_error;
        break;
      case 1:
        uint64_t v9 = (nlohmann::detail::invalid_iterator *)__cxa_allocate_exception(0x20uLL);
        int v6 = nlohmann::detail::invalid_iterator::invalid_iterator(v9, a4);
        int v8 = (void (*)(void *))nlohmann::detail::invalid_iterator::~invalid_iterator;
        break;
      case 2:
        int v10 = (nlohmann::detail::type_error *)__cxa_allocate_exception(0x20uLL);
        int v6 = nlohmann::detail::type_error::type_error(v10, a4);
        int v8 = (void (*)(void *))nlohmann::detail::type_error::~type_error;
        break;
      case 3:
        uint64_t v11 = (nlohmann::detail::out_of_range *)__cxa_allocate_exception(0x20uLL);
        int v6 = nlohmann::detail::out_of_range::out_of_range(v11, a4);
        int v8 = (void (*)(void *))nlohmann::detail::out_of_range::~out_of_range;
        break;
      case 4:
        int v12 = (nlohmann::detail::other_error *)__cxa_allocate_exception(0x20uLL);
        int v6 = nlohmann::detail::other_error::other_error(v12, a4);
        int v8 = (void (*)(void *))nlohmann::detail::other_error::~other_error;
        break;
      default:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error();
    }
    __cxa_throw(v6, v7, v8);
  }
  return 0;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 48);
  for (uint64_t i = *(unsigned __int8 **)(a1 + 56); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      char v8 = 0;
      *(void *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::size_type v6 = strlen(__str);
      std::string::append(a2, __str, v6);
    }
  }
}

void sub_22F12F128(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::create(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, nlohmann::detail::exception *a4@<X8>)
{
  std::string::basic_string[abi:nn180100]<0>(&v24, "parse_error");
  nlohmann::detail::exception::name(a1, &v26);
  char v8 = std::string::append(&v26, "parse error", 0xBuLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  nlohmann::detail::parse_error::position_string((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v12 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = std::string::append(&v28, ": ", 2uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = *(char *)(a3 + 23);
  if (v16 >= 0) {
    uint64_t v17 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v17 = *(const std::string::value_type **)a3;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a3 + 8);
  }
  uint64_t v19 = std::string::append(&v29, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t v31 = v19->__r_.__value_.__r.__words[2];
  long long v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  uint64_t v21 = *a2;
  if (v31 >= 0) {
    uint64_t v22 = (const char *)&v30;
  }
  else {
    uint64_t v22 = (const char *)v30;
  }
  nlohmann::detail::exception::exception(a4, a1, v22);
  *(void *)a4 = &unk_26E28C9F8;
  *((void *)a4 + 4) = v21;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
}

void sub_22F12F33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  std::string::basic_string[abi:nn180100]<0>(a4, "syntax error ");
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8)
  {
    std::operator+<char>();
    long long v9 = std::string::append(&v38, " ", 1uLL);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v40 = v9->__r_.__value_.__r.__words[2];
    long long v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v11 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v11 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v12 = HIBYTE(v40);
    }
    else {
      std::string::size_type v12 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v11, v12);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  std::string::append(a4, "- ", 2uLL);
  unsigned int v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    std::string::basic_string[abi:nn180100]<0>(&v36, *(char **)(a1 + 136));
    int v14 = std::string::append(&v36, "; last read: '", 0xEuLL);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(a1 + 40, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    long long v20 = std::string::append(&v38, "'", 1uLL);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t v40 = v20->__r_.__value_.__r.__words[2];
    long long v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v22 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v22 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v23 = HIBYTE(v40);
    }
    else {
      std::string::size_type v23 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v22, v23);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      int v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
LABEL_46:
    if (!a2) {
      return;
    }
    goto LABEL_50;
  }
  char v25 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(v13);
  std::string::basic_string[abi:nn180100]<0>(&v38, v25);
  std::string v26 = std::string::insert(&v38, 0, "unexpected ", 0xBuLL);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t v40 = v26->__r_.__value_.__r.__words[2];
  long long v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    std::string v28 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v28 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v29 = HIBYTE(v40);
  }
  else {
    std::string::size_type v29 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v28, v29);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_46;
  }
  int v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2) {
    return;
  }
LABEL_50:
  long long v30 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(a2);
  std::string::basic_string[abi:nn180100]<0>(&v38, v30);
  int64_t v31 = std::string::insert(&v38, 0, "; expected ", 0xBuLL);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  int64_t v40 = v31->__r_.__value_.__r.__words[2];
  long long v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    uint64_t v33 = (const std::string::value_type *)&v39;
  }
  else {
    uint64_t v33 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v34 = HIBYTE(v40);
  }
  else {
    std::string::size_type v34 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v33, v34);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_22F12F728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::~parse_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
  MEMORY[0x230FB1A70](&this[2]);
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
  MEMORY[0x230FB1A70](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x230FB1C40);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  std::string v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int v4 = (std::exception_vtbl *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v33.__vftable) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v33);
        goto LABEL_17;
      case 2:
        LOBYTE(v33.__vftable) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v33);
        goto LABEL_17;
      case 3:
        v33.__vftable = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2);
        goto LABEL_17;
      case 4:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4);
        goto LABEL_17;
      case 5:
        v33.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t *)&v33);
        goto LABEL_17;
      case 6:
        v33.__vftable = *(std::exception_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t *)&v33);
        goto LABEL_17;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v33.__vftable = *(std::exception_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t *)&v33);
          goto LABEL_17;
        }
        uint64_t v29 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v35);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v30);
        std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("number overflow parsing '", &v30, &__p);
        std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("'", &__p, &v32);
        nlohmann::detail::out_of_range::create(406, (uint64_t)&v32, (nlohmann::detail::exception *)&v33);
        uint64_t v18 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v29, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
        nlohmann::detail::out_of_range::~out_of_range(&v33);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
        goto LABEL_43;
      case 8:
        if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10) {
          goto LABEL_12;
        }
        LOBYTE(v33.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v36, &v33);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
        {
LABEL_56:
          uint64_t v18 = 0;
          goto LABEL_37;
        }
        int v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 != 11)
        {
          if (v7 != 4) {
            goto LABEL_51;
          }
          int v16 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
          v33.__vftable = v4;
          a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (void **)&v4->~exception, (uint64_t)&std::piecewise_construct, (long long **)&v33)+ 7);
          int v17 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 != 12) {
            goto LABEL_54;
          }
          LOBYTE(v33.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v36, &v33);
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        uint64_t v8 = v37;
        if (!v37)
        {
LABEL_36:
          uint64_t v18 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if ((*(void *)&v36[((unint64_t)(v8 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v8 - 1)))
          {
            int v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
            *(_DWORD *)(a1 + 32) = v9;
            if (v9 == 13) {
              goto LABEL_31;
            }
            if (v9 != 10)
            {
              uint64_t v23 = *(void *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v35);
              std::string v32 = *(std::string *)(a1 + 64);
              std::string::basic_string[abi:nn180100]<0>(&v30, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 0xAu, (uint64_t)&v30, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)&v32, (uint64_t)&__p, (nlohmann::detail::exception *)&v33);
              uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v23, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
              goto LABEL_55;
            }
            a2[2] -= 8;
            uint64_t v10 = v37;
            if (!v37)
            {
              int v25 = 383;
              goto LABEL_53;
            }
LABEL_26:
            uint64_t v8 = v10 - 1;
            uint64_t v37 = v8;
            if (!v8) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        int v11 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v11;
        if (v11 != 13)
        {
          if (v11 != 11)
          {
            uint64_t v26 = *(void *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v35);
            std::string v32 = *(std::string *)(a1 + 64);
            std::string::basic_string[abi:nn180100]<0>(&v30, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 0xBu, (uint64_t)&v30, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)&v32, (uint64_t)&__p, (nlohmann::detail::exception *)&v33);
            uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
            goto LABEL_55;
          }
          a2[2] -= 8;
          uint64_t v10 = v37;
          if (!v37)
          {
            int v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }
          goto LABEL_26;
        }
        int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 4)
        {
LABEL_51:
          uint64_t v27 = *(void *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v35);
          std::string v32 = *(std::string *)(a1 + 64);
          std::string::basic_string[abi:nn180100]<0>(&v30, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 4u, (uint64_t)&v30, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v32, (uint64_t)&__p, (nlohmann::detail::exception *)&v33);
          uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
          goto LABEL_55;
        }
        unsigned int v13 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
        v33.__vftable = v4;
        a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (void **)&v4->~exception, (uint64_t)&std::piecewise_construct, (long long **)&v33)+ 7);
        int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_31:
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan(v5);
          goto LABEL_32;
        }
LABEL_54:
        uint64_t v28 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v35);
        std::string v32 = *(std::string *)(a1 + 64);
        std::string::basic_string[abi:nn180100]<0>(&v30, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 0xCu, (uint64_t)&v30, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v32, (uint64_t)&__p, (nlohmann::detail::exception *)&v33);
        uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v28, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
LABEL_55:
        uint64_t v18 = v24;
        nlohmann::detail::parse_error::~parse_error(&v33);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
LABEL_37:
        if (v36) {
          operator delete(v36);
        }
        return v18;
      case 0xE:
        uint64_t v20 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v35);
        std::string v32 = *(std::string *)(a1 + 64);
        std::string::basic_string[abi:nn180100]<0>(&v30, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 0, (uint64_t)&v30, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v32, (uint64_t)&__p, (nlohmann::detail::exception *)&v33);
        uint64_t v21 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v20, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
        goto LABEL_42;
      default:
        uint64_t v22 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_token_string(v5, &v35);
        std::string v32 = *(std::string *)(a1 + 64);
        std::string::basic_string[abi:nn180100]<0>(&v30, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::exception_message(a1, 0x10u, (uint64_t)&v30, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v32, (uint64_t)&__p, (nlohmann::detail::exception *)&v33);
        uint64_t v21 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v22, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
LABEL_42:
        uint64_t v18 = v21;
        v33.__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
        MEMORY[0x230FB1A70](&v34);
        std::exception::~exception(&v33);
        goto LABEL_43;
    }
  }
}

void sub_22F13004C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,std::exception a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  nlohmann::detail::parse_error::~parse_error(&a27);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  long long v39 = *(void **)(v37 - 88);
  if (v39) {
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::parse_error *a4)
{
  *(unsigned char *)(a1 + 40) = 1;
  if (*(unsigned char *)(a1 + 41))
  {
    switch(~(100 * (*((_DWORD *)a4 + 2) / 100 / 100)) + *((_DWORD *)a4 + 2) / 100)
    {
      case 0:
        exceptiouint64_t n = (nlohmann::detail::parse_error *)__cxa_allocate_exception(0x28uLL);
        int v6 = nlohmann::detail::parse_error::parse_error(exception, a4);
        uint64_t v8 = (void (*)(void *))nlohmann::detail::parse_error::~parse_error;
        break;
      case 1:
        int v9 = (nlohmann::detail::invalid_iterator *)__cxa_allocate_exception(0x20uLL);
        int v6 = nlohmann::detail::invalid_iterator::invalid_iterator(v9, a4);
        uint64_t v8 = (void (*)(void *))nlohmann::detail::invalid_iterator::~invalid_iterator;
        break;
      case 2:
        uint64_t v10 = (nlohmann::detail::type_error *)__cxa_allocate_exception(0x20uLL);
        int v6 = nlohmann::detail::type_error::type_error(v10, a4);
        uint64_t v8 = (void (*)(void *))nlohmann::detail::type_error::~type_error;
        break;
      case 3:
        int v11 = (nlohmann::detail::out_of_range *)__cxa_allocate_exception(0x20uLL);
        int v6 = nlohmann::detail::out_of_range::out_of_range(v11, a4);
        uint64_t v8 = (void (*)(void *))nlohmann::detail::out_of_range::~out_of_range;
        break;
      case 4:
        int v12 = (nlohmann::detail::other_error *)__cxa_allocate_exception(0x20uLL);
        int v6 = nlohmann::detail::other_error::other_error(v12, a4);
        uint64_t v8 = (void (*)(void *))nlohmann::detail::other_error::~other_error;
        break;
      default:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error();
    }
    __cxa_throw(v6, v7, v8);
  }
  return 0;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a1 + 32;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:nn180100](a1 + 96, a3);
  *(unsigned char *)(a1 + 136) = 9;
  *(unsigned char *)(a1 + 128) = a4;
  *(void *)(a1 + 144) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  char v8 = 1;
  std::vector<BOOL>::push_back(v6, &v8);
  return a1;
}

void sub_22F1303F4(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v4);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100](v6);
  char v8 = *(void **)(v1 + 56);
  if (v8) {
    operator delete(v8);
  }
  if (*v2) {
    operator delete(*v2);
  }
  int v9 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 16) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2)
{
  char v27 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 0);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v27);
  v26.__r_.__value_.__s.__data_[0] = 1;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v26, 1);
  uint64_t v5 = v4;
  uint64_t v6 = (void *)a1[2];
  unint64_t v7 = a1[3];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = a1[1];
    uint64_t v10 = ((uint64_t)v6 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v7 - v9;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)(a1 + 3), v13);
    }
    else {
      int v14 = 0;
    }
    int v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    *(void *)int v15 = v5;
    char v8 = v15 + 8;
    uint64_t v18 = (char *)a1[1];
    int v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int v17 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    char v8 = v6 + 1;
  }
  a1[2] = (uint64_t)v8;
  if (a2 != -1)
  {
    uint64_t v20 = (char *)*(v8 - 1);
    if (v20)
    {
      unint64_t v21 = *v20;
      if (v21 > 2) {
        unint64_t v22 = 1;
      }
      else {
        unint64_t v22 = qword_22F166A20[v21];
      }
      if (v22 < a2)
      {
        exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v25, a2);
        std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("excessive object size: ", &v25, &v26);
        nlohmann::detail::out_of_range::create(408, (uint64_t)&v26, exception);
      }
    }
  }
  return 1;
}

void sub_22F130610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(void *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 1) & 1) == 0)
  {
    uint64_t v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v20, (uint64_t)(a1 + 17));
    uint64_t v4 = *(void *)(a1[2] - 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v3);
    char v5 = *(unsigned char *)v4;
    *(unsigned char *)uint64_t v4 = v20[0];
    v20[0] = v5;
    uint64_t v6 = *(uint64_t **)(v4 + 8);
    *(void *)(v4 + 8) = v21;
    unint64_t v21 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
  }
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  if (v8 == v7) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  }
  uint64_t v9 = a1[5];
  if (!v9) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  }
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 != v7 - 8)
  {
    uint64_t v10 = *(unsigned __int8 **)(v7 - 16);
    if (v10)
    {
      if (*v10 - 1 <= 1)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin((uint64_t)v10, (uint64_t)&v17);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::end(*(void *)(a1[2] - 8), (uint64_t)v16);
        if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==(&v17, v16))
        {
          while (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v17) != 9)
          {
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(&v17);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::end(*(void *)(a1[2] - 8), (uint64_t)v16);
            if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==(&v17, v16))
            {
              return 1;
            }
          }
          uint64_t v11 = *(unsigned __int8 **)(a1[2] - 8);
          unint64_t v13 = v17;
          long long v14 = v18;
          long long v15 = v19;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v11, &v13, (uint64_t)v16);
        }
      }
    }
  }
  return 1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(void *a1, long long *a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v12, (uint64_t)a2);
  char v11 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (a1[2] - a1[1]) >> 3, 4);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 7), &v11);
  if (v11 && *(void *)(a1[2] - 8))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)(a1 + 17));
    uint64_t v4 = *(uint64_t ***)(*(void *)(a1[2] - 8) + 8);
    long long v14 = a2;
    char v5 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (void **)a2, (uint64_t)&std::piecewise_construct, &v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    char v6 = *((unsigned char *)v5 + 56);
    v5 += 7;
    *(unsigned char *)char v5 = v9[0];
    v9[0] = v6;
    uint64_t v7 = (uint64_t *)v5[1];
    v5[1] = (uint64_t)v10;
    uint64_t v10 = v7;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
    a1[10] = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
  return 1;
}

void sub_22F130928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2)
{
  char v27 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 2);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v27);
  v26.__r_.__value_.__s.__data_[0] = 2;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v26, 1);
  uint64_t v5 = v4;
  uint64_t v6 = (void *)a1[2];
  unint64_t v7 = a1[3];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = a1[1];
    uint64_t v10 = ((uint64_t)v6 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v7 - v9;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)(a1 + 3), v13);
    }
    else {
      long long v14 = 0;
    }
    long long v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    *(void *)long long v15 = v5;
    uint64_t v8 = v15 + 8;
    long long v18 = (char *)a1[1];
    int v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int v17 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    uint64_t v8 = v6 + 1;
  }
  a1[2] = (uint64_t)v8;
  if (a2 != -1)
  {
    uint64_t v20 = (char *)*(v8 - 1);
    if (v20)
    {
      unint64_t v21 = *v20;
      if (v21 > 2) {
        unint64_t v22 = 1;
      }
      else {
        unint64_t v22 = qword_22F166A20[v21];
      }
      if (v22 < a2)
      {
        exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v25, a2);
        std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("excessive array size: ", &v25, &v26);
        nlohmann::detail::out_of_range::create(408, (uint64_t)&v26, exception);
      }
    }
  }
  return 1;
}

void sub_22F130B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(void *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 3) & 1) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v12, (uint64_t)(a1 + 17));
    uint64_t v4 = *(void *)(a1[2] - 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    char v5 = *(unsigned char *)v4;
    *(unsigned char *)uint64_t v4 = v12[0];
    v12[0] = v5;
    uint64_t v6 = *(uint64_t **)(v4 + 8);
    *(void *)(v4 + 8) = v13;
    unint64_t v13 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
    char v3 = 0;
  }
  else
  {
    char v3 = 1;
  }
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  if (v8 == v7) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  }
  uint64_t v9 = a1[5];
  if (!v9) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  }
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 == v7 - 8) {
    char v3 = 1;
  }
  if ((v3 & 1) == 0)
  {
    uint64_t v10 = *(void *)(v7 - 16);
    if (*(unsigned char *)v10 == 2) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:nn180100](*(void *)(v10 + 8), *(void *)(*(void *)(v10 + 8) + 8) - 16);
    }
  }
  return 1;
}

void nlohmann::detail::out_of_range::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:nn180100]<0>(&__p, "out_of_range");
  nlohmann::detail::exception::name(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(void *)a3 = &unk_26E28C9B8;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_22F130D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::out_of_range::~out_of_range(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
  MEMORY[0x230FB1A70](&this[2]);
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
  MEMORY[0x230FB1A70](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x230FB1C40);
}

uint64_t std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()(uint64_t a1, int a2, char a3)
{
  int v7 = a2;
  char v6 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)v3 + 48))(v3, &v7, &v6);
  }
  uint64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(v5);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    int v6 = *a2;
    v30[0] = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v31, v6);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        uint64_t v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        int64_t v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        char v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        int64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        uint64_t v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      std::string::size_type v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          long long v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            int64_t v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              char v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              int64_t v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              char v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              int v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              char v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          uint64_t v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          uint64_t v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_22F13117C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::end();
}

unsigned __int8 **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::end@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0x8000000000000000;
  if (!a1) {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin();
  }
  return nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end((unsigned __int8 **)a2);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(unsigned __int8 **a1)
{
  uint64_t result = *a1;
  if (!result) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
  }
  int v3 = *result;
  if (v3 == 2)
  {
    uint64_t v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8);
    uint64_t result = a1[2];
    if (result == v5) {
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
    }
  }
  else if (v3 == 1)
  {
    uint64_t v4 = a1[1];
    if (v4 == (unsigned __int8 *)(*((void *)result + 1) + 8)) {
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
    }
    return v4 + 56;
  }
  else if (a1[4])
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:nn180100]<0>(v7, "cannot get value");
    nlohmann::detail::invalid_iterator::create(214, (uint64_t)v7, exception);
  }
  return result;
}

void sub_22F1312D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  if (*a2 != a1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:nn180100]<0>(&v22, "iterator does not fit current value");
    nlohmann::detail::invalid_iterator::create(202, (uint64_t)&v22, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::end((uint64_t)a1, a3);
  int v6 = *a1;
  if ((v6 - 3) < 6)
  {
    if (a2[4])
    {
      unint64_t v18 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:nn180100]<0>(&v22, "iterator out of range");
      nlohmann::detail::invalid_iterator::create(205, (uint64_t)&v22, v18);
    }
    if (v6 == 8)
    {
      std::string::size_type v8 = (void **)(a1 + 8);
      uint64_t v7 = (void **)*((void *)a1 + 1);
      uint64_t v13 = *v7;
      if (*v7)
      {
        v7[1] = v13;
        int v9 = v13;
        goto LABEL_13;
      }
    }
    else
    {
      if (v6 != 3)
      {
LABEL_15:
        *a1 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
        return;
      }
      std::string::size_type v8 = (void **)(a1 + 8);
      uint64_t v7 = (void **)*((void *)a1 + 1);
      if (*((char *)v7 + 23) < 0)
      {
        int v9 = *v7;
LABEL_13:
        operator delete(v9);
        uint64_t v7 = (void **)*v8;
      }
    }
    operator delete(v7);
    unsigned __int8 *v8 = 0;
    goto LABEL_15;
  }
  if (v6 == 1)
  {
    uint64_t v14 = (uint64_t **)*((void *)a1 + 1);
    char v15 = (uint64_t *)a2[1];
    int v16 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(v14, v15);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)(v15 + 4));
    operator delete(v15);
    *(void *)(a3 + 8) = v16;
  }
  else
  {
    if (v6 != 2)
    {
      unint64_t v19 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      uint64_t v20 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:nn180100]<0>(&v21, v20);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use erase() with ", &v21, &v22);
      nlohmann::detail::type_error::create(307, (uint64_t)&v22, v19);
    }
    uint64_t v10 = *((void *)a1 + 1);
    uint64_t v11 = (uint64_t)a2[2];
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v22, v11 + 16, *(void *)(v10 + 8), v11);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:nn180100](v10, v12);
    *(void *)(a3 + 16) = v11;
  }
}

void sub_22F131570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (v21) {
    __cxa_free_exception(v20);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(unsigned __int8 **result)
{
  if (!*result) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++();
  }
  int v1 = **result;
  if (v1 == 2)
  {
    result[2] += 16;
  }
  else if (v1 == 1)
  {
    uint64_t v2 = result[1];
    int v3 = (unsigned __int8 *)*((void *)v2 + 1);
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        int v3 = *(unsigned __int8 **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (unsigned __int8 *)*((void *)v2 + 2);
        BOOL v5 = *(void *)v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    result[1] = v4;
  }
  else
  {
    ++result[4];
  }
  return result;
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v2 = *a1;
  if (*a1 != *a2)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:nn180100]<0>(v8, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create(212, (uint64_t)v8, exception);
  }
  if (!v2) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==();
  }
  int v3 = *v2;
  if (v3 == 2)
  {
    uint64_t v4 = a1[2];
    BOOL v5 = a2[2];
  }
  else if (v3 == 1)
  {
    uint64_t v4 = a1[1];
    BOOL v5 = a2[1];
  }
  else
  {
    uint64_t v4 = a1[4];
    BOOL v5 = a2[4];
  }
  return v4 == v5;
}

void sub_22F131748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::detail::invalid_iterator::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:nn180100]<0>(&__p, "invalid_iterator");
  nlohmann::detail::exception::name(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  int v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)char v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(void *)a3 = &unk_26E28C990;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_22F13187C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::invalid_iterator::~invalid_iterator(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
  MEMORY[0x230FB1A70](&this[2]);
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_26E28C7B0;
  MEMORY[0x230FB1A70](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x230FB1C40);
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(unsigned __int8 **result)
{
  int v1 = *result;
  if (!*result) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end();
  }
  int v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((void *)v1 + 1) + 8);
  }
  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((void *)v1 + 1) + 8);
  }
  else
  {
    result[4] = (unsigned __int8 *)1;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  int v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      int v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *int v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      char v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      _OWORD v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    char v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      int64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        _OWORD v7[2] = (uint64_t)v15;
        int64_t v16 = v7;
      }
      else
      {
        char v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }
    int64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    _OWORD v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  unint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    _OWORD v7[2] = (uint64_t)v20;
    unint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    v10[0] = *(unsigned char *)v5;
    uint64_t v11 = *(uint64_t **)(v5 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
    *(unsigned char *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    unsigned __int8 v7 = *(unsigned char *)a4;
    *(unsigned char *)a4 = v10[0];
    v10[0] = v7;
    int v8 = *(uint64_t **)(a4 + 8);
    *(void *)(a4 + 8) = v11;
    uint64_t v11 = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
    a4 += 16;
    v5 += 16;
  }
  while (v5 != v6);
  return v6;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v11, a2);
  unsigned __int8 v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    unsigned __int8 v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_22F131FF4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:nn180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  return this;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = *a2;
    v30[0] = 7;
    int64_t v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        uint64_t v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        int64_t v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        int64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        uint64_t v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          uint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            int64_t v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              uint64_t v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              int64_t v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              unsigned __int8 v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              uint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              uint64_t v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          uint64_t v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          uint64_t v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_22F1323D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = (uint64_t *)*a2;
    v30[0] = 4;
    int64_t v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        uint64_t v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        int64_t v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        int64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        uint64_t v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          uint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            int64_t v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              uint64_t v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              int64_t v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              unsigned __int8 v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              uint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              uint64_t v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          uint64_t v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          uint64_t v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_22F1326E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    v29[0] = 0;
    std::string v30 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29[0];
        uint64_t v28 = v30;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        v29[0] = 0;
        std::string v30 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        uint64_t v13 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        char v14 = *(unsigned char *)v13;
        *(unsigned char *)uint64_t v13 = v27[0];
        v27[0] = v14;
        unsigned __int8 v15 = *(uint64_t **)(v13 + 8);
        *(void *)(v13 + 8) = v28;
        uint64_t v28 = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
LABEL_20:
        uint64_t v12 = 1;
        goto LABEL_21;
      }
      uint64_t v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        int v8 = *v7;
        if (v8 == 2)
        {
          int v9 = (uint64_t *)*((void *)v7 + 1);
          unint64_t v10 = v9[1];
          if (v10 >= v9[2])
          {
            uint64_t v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v29);
          }
          else
          {
            *(unsigned char *)unint64_t v10 = v29[0];
            *(void *)(v10 + 8) = v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
            v29[0] = 0;
            std::string v30 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
            uint64_t v11 = v10 + 16;
          }
          v9[1] = v11;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          uint64_t v16 = a1[8];
          if (v16)
          {
            unint64_t v17 = v16 - 1;
            unint64_t v18 = *(void *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v17;
            if ((v18 >> v17))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v25[0] = v29[0];
              uint64_t v26 = v30;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
              v29[0] = 0;
              std::string v30 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              uint64_t v19 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              char v20 = *(unsigned char *)v19;
              *(unsigned char *)uint64_t v19 = v25[0];
              v25[0] = v20;
              unsigned __int8 v21 = *(uint64_t **)(v19 + 8);
              *(void *)(v19 + 8) = v26;
              uint64_t v26 = v21;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          uint64_t v23 = "not key_keep_stack.empty()";
          int v24 = 615;
        }
        else
        {
          uint64_t v23 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v24 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v24, v23);
      }
    }
LABEL_17:
    uint64_t v12 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
    return v12;
  }
  return 0;
}

void sub_22F1329E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = *a2;
    v30[0] = 5;
    int64_t v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        uint64_t v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        int64_t v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        uint64_t v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          unint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            int64_t v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              uint64_t v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              int64_t v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              unsigned __int8 v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              uint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              uint64_t v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          int v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_22F132CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v29, a2);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29[0];
        uint64_t v28 = v30;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        v29[0] = 0;
        std::string v30 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        uint64_t v13 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        char v14 = *(unsigned char *)v13;
        *(unsigned char *)uint64_t v13 = v27[0];
        v27[0] = v14;
        unsigned __int8 v15 = *(uint64_t **)(v13 + 8);
        *(void *)(v13 + 8) = v28;
        uint64_t v28 = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
LABEL_20:
        uint64_t v12 = 1;
        goto LABEL_21;
      }
      uint64_t v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        int v8 = *v7;
        if (v8 == 2)
        {
          int v9 = (uint64_t *)*((void *)v7 + 1);
          unint64_t v10 = v9[1];
          if (v10 >= v9[2])
          {
            uint64_t v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v29);
          }
          else
          {
            *(unsigned char *)unint64_t v10 = v29[0];
            *(void *)(v10 + 8) = v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
            v29[0] = 0;
            std::string v30 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
            uint64_t v11 = v10 + 16;
          }
          v9[1] = v11;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          uint64_t v16 = a1[8];
          if (v16)
          {
            unint64_t v17 = v16 - 1;
            unint64_t v18 = *(void *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v17;
            if ((v18 >> v17))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v25[0] = v29[0];
              uint64_t v26 = v30;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
              v29[0] = 0;
              std::string v30 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              uint64_t v19 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              char v20 = *(unsigned char *)v19;
              *(unsigned char *)uint64_t v19 = v25[0];
              v25[0] = v20;
              unsigned __int8 v21 = *(uint64_t **)(v19 + 8);
              *(void *)(v19 + 8) = v26;
              uint64_t v26 = v21;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          uint64_t v23 = "not key_keep_stack.empty()";
          int v24 = 615;
        }
        else
        {
          uint64_t v23 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v24 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v24, v23);
      }
    }
LABEL_17:
    uint64_t v12 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
    return v12;
  }
  return 0;
}

void sub_22F132FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = *a2;
    v30[0] = 6;
    int64_t v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        uint64_t v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        int64_t v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        uint64_t v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          unint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            int64_t v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              uint64_t v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              int64_t v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              unsigned __int8 v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              uint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              uint64_t v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          int v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_22F1332EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

nlohmann::detail::parse_error *nlohmann::detail::parse_error::parse_error(nlohmann::detail::parse_error *this, const nlohmann::detail::parse_error *a2)
{
  *(void *)this = &unk_26E28C7B0;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x230FB1A60]((char *)this + 16, (char *)a2 + 16);
  *(void *)this = &unk_26E28C9F8;
  *((void *)this + 4) = *((void *)a2 + 4);
  return this;
}

nlohmann::detail::out_of_range *nlohmann::detail::out_of_range::out_of_range(nlohmann::detail::out_of_range *this, const nlohmann::detail::out_of_range *a2)
{
  *(void *)this = &unk_26E28C7B0;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x230FB1A60]((char *)this + 16, (char *)a2 + 16);
  *(void *)this = &unk_26E28C9B8;
  return this;
}

nlohmann::detail::invalid_iterator *nlohmann::detail::invalid_iterator::invalid_iterator(nlohmann::detail::invalid_iterator *this, const nlohmann::detail::invalid_iterator *a2)
{
  *(void *)this = &unk_26E28C7B0;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x230FB1A60]((char *)this + 16, (char *)a2 + 16);
  *(void *)this = &unk_26E28C990;
  return this;
}

nlohmann::detail::type_error *nlohmann::detail::type_error::type_error(nlohmann::detail::type_error *this, const nlohmann::detail::type_error *a2)
{
  *(void *)this = &unk_26E28C7B0;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x230FB1A60]((char *)this + 16, (char *)a2 + 16);
  *(void *)this = &unk_26E28C788;
  return this;
}

nlohmann::detail::other_error *nlohmann::detail::other_error::other_error(nlohmann::detail::other_error *this, const nlohmann::detail::other_error *a2)
{
  *(void *)this = &unk_26E28C7B0;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x230FB1A60]((char *)this + 16, (char *)a2 + 16);
  *(void *)this = &unk_26E28C7F0;
  return this;
}

void nlohmann::detail::parse_error::position_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v12, *(void *)(a1 + 16) + 1);
  uint64_t v4 = std::string::insert(&v12, 0, " at line ", 9uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v13, ", column ", 9uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(void *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_22F1336C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 25) < 0) {
    operator delete(*(void **)(v26 - 48));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

const char *nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(unsigned int a1)
{
  if (a1 > 0x10) {
    return "unknown token";
  }
  else {
    return off_2649FD938[a1];
  }
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:nn180100]((void *)(a1 + 96));
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2)
{
  v24.__r_.__value_.__s.__data_[0] = 1;
  uint64_t v4 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v24);
  unint64_t v5 = a1[3];
  uint64_t v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      std::string v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)(a1 + 3), v12);
    }
    else {
      std::string v13 = 0;
    }
    std::string v14 = (uint64_t *)&v13[8 * v9];
    unsigned __int8 v15 = &v13[8 * v12];
    uint64_t *v14 = v4;
    long long v7 = v14 + 1;
    uint64_t v17 = (char *)a1[1];
    uint64_t v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--std::string v14 = v18;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)v7;
    a1[3] = (uint64_t)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    long long v7 = v6 + 1;
  }
  a1[2] = (uint64_t)v7;
  if (a2 != -1)
  {
    unint64_t v19 = *(char *)*(v7 - 1);
    if (v19 > 2) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = qword_22F166A20[v19];
    }
    if (v20 < a2)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v23, a2);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("excessive object size: ", &v23, &v24);
      nlohmann::detail::out_of_range::create(408, (uint64_t)&v24, exception);
    }
  }
  return 1;
}

void sub_22F13394C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2)
{
  v24.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v4 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v24);
  unint64_t v5 = a1[3];
  uint64_t v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      std::string v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)(a1 + 3), v12);
    }
    else {
      std::string v13 = 0;
    }
    std::string v14 = (uint64_t *)&v13[8 * v9];
    unsigned __int8 v15 = &v13[8 * v12];
    uint64_t *v14 = v4;
    long long v7 = v14 + 1;
    uint64_t v17 = (char *)a1[1];
    uint64_t v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--std::string v14 = v18;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)v7;
    a1[3] = (uint64_t)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    long long v7 = v6 + 1;
  }
  a1[2] = (uint64_t)v7;
  if (a2 != -1)
  {
    unint64_t v19 = *(char *)*(v7 - 1);
    if (v19 > 2) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = qword_22F166A20[v19];
    }
    if (v20 < a2)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v23, a2);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("excessive array size: ", &v23, &v24);
      nlohmann::detail::out_of_range::create(408, (uint64_t)&v24, exception);
    }
  }
  return 1;
}

void sub_22F133B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    int v9 = *a2;
    v20[0] = v9;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v21, v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    uint64_t v10 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    unsigned __int8 v11 = *(unsigned char *)v10;
    *(unsigned char *)uint64_t v10 = v20[0];
    v20[0] = v11;
    unint64_t v12 = *(uint64_t **)(v10 + 8);
    *(void *)(v10 + 8) = v21;
    int v21 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v8 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(v6, a2);
      }
      else
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:nn180100]<nlohmann::detail::value_t>((uint64_t)v6, a2);
        uint64_t v8 = v7 + 16;
      }
      v6[1] = v8;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      int v14 = *a2;
      v18[0] = v14;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v19, v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      uint64_t v15 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      unsigned __int8 v16 = *(unsigned char *)v15;
      *(unsigned char *)uint64_t v15 = v18[0];
      v18[0] = v16;
      uint64_t v17 = *(uint64_t **)(v15 + 8);
      *(void *)(v15 + 8) = v19;
      unint64_t v19 = v17;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:nn180100]<nlohmann::detail::value_t>(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  uint64_t v3 = *(unsigned char **)(a1 + 8);
  unsigned char *v3 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v3 + 8, v4);
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  *(void *)(a1 + 8) = v3 + 16;
  return result;
}

void sub_22F133D64(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 3 > v4) {
    unint64_t v4 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v19 = v7;
  if (v10) {
    unsigned __int8 v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v10);
  }
  else {
    unsigned __int8 v11 = 0;
  }
  unint64_t v12 = &v11[16 * v3];
  v16[0] = v11;
  v16[1] = v12;
  uint64_t v17 = v12;
  uint64_t v18 = &v11[16 * v10];
  int v13 = *a2;
  *unint64_t v12 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v12 + 8, v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  v17 += 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_22F133E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    unint64_t v10 = (uint64_t *)*a2;
    v21[0] = 7;
    uint64_t v22 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    uint64_t v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    int v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    uint64_t v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    unint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 7;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v15 = (uint64_t *)*a2;
      v19[0] = 7;
      unint64_t v20 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      uint64_t v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      unint64_t v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 3 > v4) {
    unint64_t v4 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  v17[4] = v7;
  uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v10);
  uint64_t v12 = (uint64_t)&v11[16 * v3];
  v17[0] = v11;
  v17[1] = v12;
  v17[3] = &v11[16 * v13];
  *(void *)(v12 + 8) = 0;
  uint64_t v14 = *a2;
  *(unsigned char *)uint64_t v12 = 7;
  *(void *)(v12 + 8) = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
  v17[2] = v12 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_22F1340DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    unint64_t v10 = (uint64_t *)*a2;
    v21[0] = 4;
    uint64_t v22 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    uint64_t v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    uint64_t v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    uint64_t v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    unint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 4;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v15 = (uint64_t *)*a2;
      v19[0] = 4;
      unint64_t v20 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      uint64_t v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      unint64_t v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 3 > v4) {
    unint64_t v4 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  v17[4] = v7;
  uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v10);
  uint64_t v12 = (uint64_t)&v11[16 * v3];
  v17[0] = v11;
  v17[1] = v12;
  v17[3] = &v11[16 * v13];
  *(void *)(v12 + 8) = 0;
  uint64_t v14 = *a2;
  *(unsigned char *)uint64_t v12 = 4;
  *(void *)(v12 + 8) = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
  v17[2] = v12 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_22F134374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  if (a1[1] == v2)
  {
    v17[0] = 0;
    uint64_t v18 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    uint64_t v8 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    unsigned __int8 v9 = *(unsigned char *)v8;
    *(unsigned char *)uint64_t v8 = v17[0];
    v17[0] = v9;
    unint64_t v10 = *(uint64_t **)(v8 + 8);
    *(void *)(v8 + 8) = v18;
    uint64_t v18 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v18, v17[0]);
    return *a1;
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 **)(v2 - 8);
    int v4 = *v3;
    if (v4 == 2)
    {
      int v5 = (uint64_t *)*((void *)v3 + 1);
      unint64_t v6 = v5[1];
      if (v6 >= v5[2])
      {
        uint64_t v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(v5);
      }
      else
      {
        *(unsigned char *)unint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        uint64_t v7 = v6 + 16;
      }
      v5[1] = v7;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v4 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      v15[0] = 0;
      uint64_t v16 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      uint64_t v12 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      unsigned __int8 v13 = *(unsigned char *)v12;
      *(unsigned char *)uint64_t v12 = v15[0];
      v15[0] = v13;
      uint64_t v14 = *(uint64_t **)(v12 + 8);
      *(void *)(v12 + 8) = v16;
      uint64_t v16 = v14;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (a1[1] - *a1) >> 4;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60) {
    abort();
  }
  uint64_t v6 = a1[2];
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v7 = v6 - v1;
  if (v7 >> 3 > v3) {
    unint64_t v3 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v3;
  }
  v14[4] = v5;
  unsigned __int8 v9 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v5, v8);
  uint64_t v10 = (uint64_t)&v9[16 * v2];
  v14[0] = v9;
  v14[1] = v10;
  v14[3] = &v9[16 * v11];
  *(unsigned char *)uint64_t v10 = 0;
  *(void *)(v10 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
  v14[2] = v10 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_22F1345D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 5;
    uint64_t v22 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    uint64_t v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    unsigned __int8 v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    uint64_t v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    int v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 5;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v15 = (uint64_t *)*a2;
      v19[0] = 5;
      unint64_t v20 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      uint64_t v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      unint64_t v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 3 > v4) {
    unint64_t v4 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  v17[4] = v7;
  uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v10);
  uint64_t v12 = (uint64_t)&v11[16 * v3];
  v17[0] = v11;
  v17[1] = v12;
  v17[3] = &v11[16 * v13];
  *(void *)(v12 + 8) = 0;
  uint64_t v14 = *a2;
  *(unsigned char *)uint64_t v12 = 5;
  *(void *)(v12 + 8) = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
  v17[2] = v12 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_22F134870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v15, a2);
    uint64_t v7 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    unsigned __int8 v8 = *(unsigned char *)v7;
    *(unsigned char *)uint64_t v7 = v15[0];
    v15[0] = v8;
    uint64_t v9 = *(uint64_t **)(v7 + 8);
    *(void *)(v7 + 8) = v16;
    uint64_t v16 = v9;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
    return *a1;
  }
  else
  {
    unint64_t v4 = *(uint64_t ***)(v3 - 8);
    int v5 = *(unsigned __int8 *)v4;
    if (v5 == 2)
    {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(v4[1], a2);
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v13, a2);
      uint64_t v10 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      unsigned __int8 v11 = *(unsigned char *)v10;
      *(unsigned char *)uint64_t v10 = v13[0];
      v13[0] = v11;
      uint64_t v12 = *(uint64_t **)(v10 + 8);
      *(void *)(v10 + 8) = v14;
      uint64_t v14 = v12;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      abort();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    uint64_t v16 = &v13[16 * v9];
    uint64_t v18 = &v13[16 * v12];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v16, a2);
    unsigned __int8 v17 = v16 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_22F134AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 6;
    uint64_t v22 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    uint64_t v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    uint64_t v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    uint64_t v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      unint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 6;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v15 = (uint64_t *)*a2;
      v19[0] = 6;
      unint64_t v20 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      uint64_t v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      unint64_t v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 3 > v4) {
    unint64_t v4 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  v17[4] = v7;
  uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v10);
  uint64_t v12 = (uint64_t)&v11[16 * v3];
  v17[0] = v11;
  v17[1] = v12;
  v17[3] = &v11[16 * v13];
  *(void *)(v12 + 8) = 0;
  uint64_t v14 = *a2;
  *(unsigned char *)uint64_t v12 = 6;
  *(void *)(v12 + 8) = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
  v17[2] = v12 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_22F134D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      abort();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    uint64_t v16 = &v13[16 * v9];
    uint64_t v18 = &v13[16 * v12];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v16, a2);
    unsigned __int8 v17 = v16 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_22F134E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[27],char [27],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[27]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[27]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F134F08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[14],char [14],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[14]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[14]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F134FA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F135038(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[35],char [35],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[35]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[35]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:nn180100]<0>(v2, a1);
  return v2;
}

void sub_22F1350D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  unint64_t v7 = *a2;
  uint64_t v8 = *((void *)*a2 + 2);
  v6[2] = **a2;
  *((void *)v6 + 6) = v8;
  void *v7 = 0;
  v7[1] = 0;
  _OWORD v7[2] = 0;
  *((void *)v6 + 8) = 0;
  *((unsigned char *)v6 + 56) = 0;
  uint64_t v9 = (uint64_t)v6 + 56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6 + 56);
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void Nightingale::ngt_dnn_fw_predict_t::ngt_dnn_fw_predict_t(Nightingale::ngt_dnn_fw_predict_t *this)
{
}

void sub_22F13525C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<Nightingale::fwPredictorWrapper_t>::operator()[abi:nn180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Nightingale::fwPredictorWrapper_t::init(Nightingale::fwPredictorWrapper_t *this)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v2;

  uint64_t v4 = (void *)*((void *)this + 2);
  if (!v4)
  {
    id v6 = 0;
    goto LABEL_6;
  }
  [v4 setComputeUnits:0];
  id v18 = 0;
  uint64_t v5 = [objc_alloc(MEMORY[0x263F00DA8]) initWithShape:&unk_26E28F890 dataType:65600 error:&v18];
  id v6 = v18;
  unint64_t v7 = *(void **)this;
  *(void *)this = v5;

  if (!*(void *)this)
  {
LABEL_6:
    uint64_t v13 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = [model_fwEnd_10pct alloc];
  uint64_t v9 = *((void *)this + 2);
  id v17 = v6;
  uint64_t v10 = [(model_fwEnd_10pct *)v8 initWithConfiguration:v9 error:&v17];
  id v11 = v17;

  unint64_t v12 = (void *)*((void *)this + 4);
  *((void *)this + 4) = v10;

  if (v11)
  {
    uint64_t v13 = 0;
    id v6 = v11;
  }
  else
  {
    uint64_t v15 = [[model_fwEnd_10pctInput alloc] initWithIn:*(void *)this lstm_1_h_in:0 lstm_1_c_in:0];
    uint64_t v16 = (void *)*((void *)this + 3);
    *((void *)this + 3) = v15;

    id v6 = 0;
    uint64_t v13 = 1;
  }
LABEL_7:

  return v13;
}

void sub_22F1353C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Nightingale::ngt_dnn_fw_predict_t::~ngt_dnn_fw_predict_t(id **this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<Nightingale::fwPredictorWrapper_t>::operator()[abi:nn180100]((uint64_t)this, v1);
  }
}

{
  id *v1;

  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<Nightingale::fwPredictorWrapper_t>::operator()[abi:nn180100]((uint64_t)this, v1);
  }
}

uint64_t Nightingale::ngt_dnn_fw_predict_t::ngt_dnn_process_fw(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return 0;
}

uint64_t Nightingale::fwPredictorWrapper_t::predictFW(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v6 = operator new(0x708uLL);
  unint64_t v7 = v6 + 2;
  __src = v6;
  bzero(v6, 0x708uLL);
  uint64_t v8 = 0;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[6];
  uint64_t v12 = a2[9];
  uint64_t v13 = a2[12];
  do
  {
    *(v7 - 2) = *(void *)(v9 + v8);
    *(v7 - 1) = *(void *)(v10 + v8);
    void *v7 = *(void *)(v11 + v8);
    v7[1] = *(void *)(v12 + v8);
    _OWORD v7[2] = *(void *)(v13 + v8);
    v8 += 8;
    v7 += 5;
  }
  while (v8 != 360);
  memmove((void *)[*(id *)a1 dataPointer], __src, 0x708uLL);
  uint64_t v14 = [*(id *)(a1 + 32) model];
  uint64_t v15 = *(void *)(a1 + 24);
  id v44 = 0;
  uint64_t v16 = [v14 predictionFromFeatures:v15 error:&v44];
  id v42 = v44;

  id v17 = [model_fwEnd_10pctOutput alloc];
  id v18 = [v16 featureValueForName:@"out"];
  uint64_t v19 = [v18 multiArrayValue];
  unint64_t v20 = [v16 featureValueForName:@"lstm_1_h_out"];
  int v21 = [v20 multiArrayValue];
  uint64_t v22 = [v16 featureValueForName:@"lstm_1_c_out"];
  std::string v23 = [v22 multiArrayValue];
  std::string v24 = [(model_fwEnd_10pctOutput *)v17 initWithOut:v19 lstm_1_h_out:v21 lstm_1_c_out:v23];

  for (uint64_t i = 0; i != 32; ++i)
  {
    uint64_t v26 = [(model_fwEnd_10pctOutput *)v24 out];
    uint64_t v27 = [v26 objectAtIndexedSubscript:i];
    [v27 doubleValue];
    float v29 = v28;
    int64_t v31 = *(float **)(a3 + 8);
    unint64_t v30 = *(void *)(a3 + 16);
    if ((unint64_t)v31 >= v30)
    {
      std::exception v33 = *(float **)a3;
      uint64_t v34 = ((uint64_t)v31 - *(void *)a3) >> 2;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62) {
        abort();
      }
      uint64_t v36 = v30 - (void)v33;
      if (v36 >> 1 > v35) {
        unint64_t v35 = v36 >> 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        uint64_t v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a3 + 16, v37);
        std::exception v33 = *(float **)a3;
        int64_t v31 = *(float **)(a3 + 8);
      }
      else
      {
        uint64_t v38 = 0;
      }
      long long v39 = (float *)&v38[4 * v34];
      *long long v39 = v29;
      std::string v32 = v39 + 1;
      while (v31 != v33)
      {
        int v40 = *((_DWORD *)v31-- - 1);
        *((_DWORD *)v39-- - 1) = v40;
      }
      *(void *)a3 = v39;
      *(void *)(a3 + 8) = v32;
      *(void *)(a3 + 16) = &v38[4 * v37];
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *int64_t v31 = v29;
      std::string v32 = v31 + 1;
    }
    *(void *)(a3 + 8) = v32;
  }
  operator delete(__src);

  return 0;
}

void sub_22F135730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

double Nightingale::fwPredictorWrapper_t::fwPredictorWrapper_t(Nightingale::fwPredictorWrapper_t *this)
{
  *((void *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((void *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void std::default_delete<Nightingale::fwPredictorWrapper_t>::operator()[abi:nn180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x230FB1C40);
  }
}

void sub_22F135ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22F135BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22F135DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22F136944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _Unwind_Exception *exception_objecta, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  STACK[0x228] = (unint64_t)&a50;
  std::vector<Nightingale::ngt_HistoricCycle>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x228]);

  _Unwind_Resume(a1);
}

void std::vector<Nightingale::ngt_HistoricCycle>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Nightingale::ngt_HistoricCycle>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Nightingale::ngt_HistoricCycle>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    uint64_t v4 = *(void **)(i - 40);
    if (v4)
    {
      *(void *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::__tree<std::__value_type<int,std::array<short,9ul>>,std::__map_value_compare<int,std::__value_type<int,std::array<short,9ul>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::array<short,9ul>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::array<short,9ul>>,std::__map_value_compare<int,std::__value_type<int,std::array<short,9ul>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::array<short,9ul>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::array<short,9ul>>,std::__map_value_compare<int,std::__value_type<int,std::array<short,9ul>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::array<short,9ul>>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void *Nightingale::fwEstimatorBase::fwEstimatorBase(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

void Nightingale::fwEstimatorBase::~fwEstimatorBase(Nightingale::fwEstimatorBase *this)
{
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  uint64_t v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void Nightingale::fwEstimatorBase::suppressHistFWOverCycleBoundary(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a4 + 4)) {
    goto LABEL_7;
  }
  if (*(_DWORD *)a4 < a2) {
    goto LABEL_6;
  }
  if ((a3 & 0xFF00000000) != 0)
  {
    if (!*(unsigned char *)(a4 + 12))
    {
      uint64_t v4 = (Nightingale::fwEstimatorCalendar *)std::__throw_bad_optional_access[abi:nn180100]();
      Nightingale::fwEstimatorCalendar::fwEstimatorCalendar(v4);
      return;
    }
    if (*(_DWORD *)(a4 + 8) > (int)a3)
    {
LABEL_6:
      *(unsigned char *)(a4 + 4) = 0;
LABEL_7:
      if (*(unsigned char *)(a4 + 12)) {
        *(unsigned char *)(a4 + 12) = 0;
      }
    }
  }
}

void Nightingale::fwEstimatorCalendar::getHistFwCal(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  *(unsigned char *)a5 = 0;
  *(unsigned char *)(a5 + 4) = 0;
  *(unsigned char *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 12) = 0;
  *(_DWORD *)(a5 + 16) = 3;
  *(unsigned char *)(a5 + 32) = 0;
  *(void *)(a5 + 20) = 0;
  *(_WORD *)(a5 + 28) = 0;
  *(int32x4_t *)(a5 + 36) = vdupq_n_s32(0x7FC00000u);
  *(unsigned char *)(a5 + 52) = 0;
  *(unsigned char *)(a5 + 56) = 0;
  *(unsigned char *)(a5 + 60) = 0;
  *(unsigned char *)(a5 + 64) = 0;
  *(unsigned char *)(a5 + 72) = 0;
  *(unsigned char *)(a5 + 96) = 0;
  *(unsigned char *)(a5 + 104) = 0;
  *(unsigned char *)(a5 + 128) = 0;
  *(unsigned char *)(a5 + 136) = 0;
  *(unsigned char *)(a5 + 140) = 0;
  *(void *)(a5 + 144) = 0x17FC00000;
  *(_DWORD *)(a5 + 152) = 0;
  *(_WORD *)(a5 + 156) = 0;
  if ((a3 & 0xFF00000000) != 0)
  {
    *(unsigned char *)(a5 + 4) = 1;
    *(_DWORD *)a5 = (int)(float)((float)((float)(int)a3 + -18.0) + 1.0);
    *(unsigned char *)(a5 + 12) = 1;
    *(_DWORD *)(a5 + 8) = (int)(float)((float)((float)(int)a3 + -13.0) + 1.0);
    *(_DWORD *)(a5 + 16) = 3;
    *(unsigned char *)(a5 + 29) = Nightingale::phaseFactorProcessor::suppressFWStEnd(a1, (unsigned int *)a5, (unsigned int *)(a5 + 8), a4);
    int v9 = *a2;
    Nightingale::fwEstimatorBase::suppressHistFWOverCycleBoundary(a1, v9, a3, a5);
  }
}

uint64_t Nightingale::fwEstimatorCalendar::getjDayFwCal(Nightingale::fwEstimatorCalendar *this, int a2, int a3)
{
  LODWORD(v3) = (int)(float)((float)a3 + -18.0);
  LODWORD(v4) = (int)(float)((float)a3 + -13.0);
  BOOL v5 = (int)v3 < a2;
  if ((int)v3 < a2) {
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v3 = v3;
  }
  if (v5) {
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v4 = v4;
  }
  return v3 | (v4 << 32);
}

uint64_t Nightingale::fwEstimatorCalendar::getjDayFwEndCal(Nightingale::fwEstimatorCalendar *this, int a2, int a3)
{
  int v3 = (int)(float)((float)a3 + -18.0);
  BOOL v4 = v3 < a2;
  uint64_t v5 = v3 >= a2;
  LODWORD(v6) = (int)(float)((float)a3 + -13.0);
  if (v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v6;
  }
  return v6 | (v5 << 32);
}

uint64_t __ha_get_log_block_invoke()
{
  ha_get_log_log = (uint64_t)os_log_create("com.apple.HealthAlgorithms", "framework");
  return MEMORY[0x270F9A758]();
}

uint64_t Nightingale::uiLogProcessor::uiLogProcessor(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (char *)operator new(3uLL);
  *(void *)(a1 + 8) = v4 + 3;
  *(void *)(a1 + 16) = v4 + 3;
  *(_WORD *)BOOL v4 = 1798;
  v4[2] = 5;
  *(void *)a1 = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 32) = 0x3F80000040400000;
  if ((a2 & 0xFF00000000) != 0)
  {
    BOOL v5 = *(float *)&a2 > 17.0;
    BOOL v6 = *(float *)&a2 < 45.0;
    float v7 = 36.0;
    if (v5 && v6) {
      float v7 = 16.0;
    }
    float v8 = 9.0;
    if (v5 && v6) {
      float v8 = 4.0;
    }
  }
  else
  {
    float v8 = 4.0;
    float v7 = 16.0;
  }
  *(float *)(a1 + 24) = v7;
  *(float *)(a1 + 28) = v8;
  return a1;
}

{
  char *v4;
  BOOL v5;
  BOOL v6;
  float v7;
  float v8;

  BOOL v4 = (char *)operator new(3uLL);
  *(void *)(a1 + 8) = v4 + 3;
  *(void *)(a1 + 16) = v4 + 3;
  *(_WORD *)BOOL v4 = 1798;
  v4[2] = 5;
  *(void *)a1 = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 32) = 0x3F80000040400000;
  if ((a2 & 0xFF00000000) != 0)
  {
    BOOL v5 = *(float *)&a2 > 17.0;
    BOOL v6 = *(float *)&a2 < 45.0;
    float v7 = 36.0;
    if (v5 && v6) {
      float v7 = 16.0;
    }
    float v8 = 9.0;
    if (v5 && v6) {
      float v8 = 4.0;
    }
  }
  else
  {
    float v8 = 4.0;
    float v7 = 16.0;
  }
  *(float *)(a1 + 24) = v7;
  *(float *)(a1 + 28) = v8;
  return a1;
}

Nightingale::uiLogProcessor *Nightingale::uiLogProcessor::uiLogProcessor(Nightingale::uiLogProcessor *this)
{
  uint64_t v2 = (char *)operator new(3uLL);
  *((void *)this + 1) = v2 + 3;
  *((void *)this + 2) = v2 + 3;
  *(_WORD *)uint64_t v2 = 1798;
  v2[2] = 5;
  *(void *)this = v2;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 23) = 0;
  *((void *)this + 4) = 0x3F80000040400000;
  return this;
}

{
  char *v2;

  uint64_t v2 = (char *)operator new(3uLL);
  *((void *)this + 1) = v2 + 3;
  *((void *)this + 2) = v2 + 3;
  *(_WORD *)uint64_t v2 = 1798;
  v2[2] = 5;
  *(void *)this = v2;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 23) = 0;
  *((void *)this + 4) = 0x3F80000040400000;
  return this;
}

void Nightingale::uiLogProcessor::~uiLogProcessor(Nightingale::uiLogProcessor *this)
{
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)*((void *)this + 15);
  if (v4)
  {
    *((void *)this + 16) = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 12);
  if (v5)
  {
    *((void *)this + 13) = v5;
    operator delete(v5);
  }
  BOOL v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    *((void *)this + 10) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 5);
  if (v7)
  {
    *((void *)this + 6) = v7;
    operator delete(v7);
  }
  float v8 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v8;
    operator delete(v8);
  }
}

void Nightingale::uiLogProcessor::guardConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a2 + 4) || !*(unsigned char *)(a2 + 12)) {
    goto LABEL_11;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2 > v3)
  {
    if (v3) {
      goto LABEL_11;
    }
    BOOL v4 = (unsigned char *)(a2 + 28);
    int v5 = *(unsigned __int8 *)(a2 + 28);
    *(unsigned char *)(a2 + 12) = 0;
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  *(unsigned char *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  if (*(unsigned char *)(a2 + 28)) {
    *(unsigned char *)(a2 + 28) = 0;
  }
  BOOL v4 = (unsigned char *)(a2 + 20);
  if (*(unsigned char *)(a2 + 20)) {
LABEL_10:
  }
    unsigned char *v4 = 0;
LABEL_11:
  BOOL v6 = (_DWORD *)(a2 + 40);
  if (!*(unsigned char *)(a2 + 44) || (*(unsigned char *)(a3 + 36) ? (BOOL v7 = *v6 < *(_DWORD *)(a3 + 32)) : (BOOL v7 = 0), v7))
  {
    int v8 = *(_DWORD *)(a3 + 32);
    *(unsigned char *)(a2 + 44) = *(unsigned char *)(a3 + 36);
    *BOOL v6 = v8;
  }
  int v9 = (_DWORD *)(a2 + 32);
  if (!*(unsigned char *)(a2 + 36) || *(unsigned char *)(a3 + 20) && *v9 < *(_DWORD *)(a3 + 16))
  {
    int v10 = *(_DWORD *)(a3 + 16);
    *(unsigned char *)(a2 + 36) = *(unsigned char *)(a3 + 20);
    *int v9 = v10;
  }
  if (!*(unsigned char *)(a2 + 52))
  {
    *(unsigned char *)(a2 + 52) = 1;
    *(_DWORD *)(a2 + 48) = 1106247680;
  }
}

void Nightingale::uiLogProcessor::periodListToCycleInfo(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  LOBYTE(v12) = 0;
  char v13 = 0;
  char v14 = 0;
  char v15 = 0;
  char v16 = 0;
  char v17 = 0;
  char v19 = 0;
  char v20 = 0;
  char v21 = 0;
  char v22 = 0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  char v27 = 0;
  char v28 = 0;
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  std::string __p = 0;
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      int v10 = (int *)(v4 + v8);
      int v11 = *v10;
      int v12 = v10[1];
      char v13 = 1;
      if (a3[1] <= v9) {
        abort();
      }
      char v18 = (*(void *)(*a3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1;
      std::vector<Nightingale::cycleInfo>::push_back[abi:nn180100](a4, (uint64_t)&v11);
      ++v9;
      uint64_t v4 = *a2;
      v8 += 8;
    }
    while (v9 < (a2[1] - *a2) >> 3);
    if (__p)
    {
      unint64_t v30 = __p;
      operator delete(__p);
    }
  }
}

void Nightingale::uiLogProcessor::extractPeriods(uint64_t a1, uint64_t a2, int **a3, int a4, uint64_t *a5, uint64_t *a6)
{
  BOOL v6 = *(_DWORD **)a2;
  if (*(void *)(a2 + 8) != *(void *)a2)
  {
    __int16 v98 = 0;
    __int16 v99 = 0;
    uint64_t v100 = 0;
    int v95 = 0;
    char v96 = 0;
    unint64_t v97 = 0;
    __int16 v92 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    long long v89 = 0;
    unint64_t v90 = 0;
    unint64_t v91 = 0;
    unint64_t v9 = *a3;
    LODWORD(v10) = *v6;
    BOOL v88 = *v6 - a4 >= 10;
    std::vector<BOOL>::push_back((uint64_t)&v92, &v88);
    uint64_t v79 = a5;
    int v11 = *(_DWORD **)(a2 + 8);
    if (v6 == v11)
    {
      uint64_t v14 = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v12 = 0xFFFFFFFFLL;
      do
      {
        int v13 = *v9++;
        if ((v13 - 1) > 3)
        {
          uint64_t v14 = v12;
        }
        else
        {
          uint64_t v14 = *v6;
          if (v12 == -1) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = v12;
          }
          if (v12 == -1) {
            uint64_t v10 = v14;
          }
          else {
            uint64_t v10 = v10;
          }
          if ((int)v14 - (int)v15 >= 3)
          {
            char v16 = v90;
            if ((unint64_t)v90 >= v91)
            {
              int64_t v18 = (v90 - (unsigned char *)v89) >> 3;
              if ((unint64_t)(v18 + 1) >> 61) {
                goto LABEL_135;
              }
              unint64_t v19 = (uint64_t)(v91 - (void)v89) >> 2;
              if (v19 <= v18 + 1) {
                unint64_t v19 = v18 + 1;
              }
              if (v91 - (unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v20 = v19;
              }
              if (v20) {
                char v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)&v91, v20);
              }
              else {
                char v21 = 0;
              }
              char v22 = (uint64_t *)&v21[8 * v18];
              uint64_t *v22 = v10 | (v15 << 32);
              char v17 = v22 + 1;
              char v24 = (uint64_t *)v89;
              char v23 = (uint64_t *)v90;
              if (v90 != v89)
              {
                do
                {
                  uint64_t v25 = *--v23;
                  *--char v22 = v25;
                }
                while (v23 != v24);
                char v23 = (uint64_t *)v89;
              }
              long long v89 = v22;
              unint64_t v90 = (char *)v17;
              unint64_t v91 = (unint64_t)&v21[8 * v20];
              if (v23) {
                operator delete(v23);
              }
            }
            else
            {
              *(void *)unint64_t v90 = v10 | (v15 << 32);
              char v17 = (uint64_t *)(v16 + 8);
            }
            unint64_t v90 = (char *)v17;
            int v11 = *(_DWORD **)(a2 + 8);
            LODWORD(v10) = v14;
          }
        }
        ++v6;
        uint64_t v12 = v14;
      }
      while (v6 != v11);
    }
    char v26 = v90;
    if ((unint64_t)v90 >= v91)
    {
      int64_t v29 = (v90 - (unsigned char *)v89) >> 3;
      if ((unint64_t)(v29 + 1) >> 61) {
        goto LABEL_135;
      }
      unint64_t v30 = (uint64_t)(v91 - (void)v89) >> 2;
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      if (v91 - (unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31) {
        std::string v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)&v91, v31);
      }
      else {
        std::string v32 = 0;
      }
      std::exception v33 = (uint64_t *)&v32[8 * v29];
      uint64_t v34 = &v32[8 * v31];
      uint64_t *v33 = v10 | (unint64_t)(v14 << 32);
      char v27 = v33 + 1;
      uint64_t v36 = (uint64_t *)v89;
      unint64_t v35 = (uint64_t *)v90;
      if (v90 == v89)
      {
        char v28 = v79;
      }
      else
      {
        char v28 = v79;
        do
        {
          uint64_t v37 = *--v35;
          *--std::exception v33 = v37;
        }
        while (v35 != v36);
        unint64_t v35 = (uint64_t *)v89;
      }
      long long v89 = v33;
      unint64_t v90 = (char *)v27;
      unint64_t v91 = (unint64_t)v34;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *(void *)unint64_t v90 = v10 | (unint64_t)(v14 << 32);
      char v27 = (uint64_t *)(v26 + 8);
      char v28 = v79;
    }
    unint64_t v90 = (char *)v27;
    Nightingale::uiCycleFactorProcess::suppressPeriodReproductive((uint64_t)&v98, (uint64_t **)&v89, v28);
    uint64_t v38 = (uint64_t *)v89;
    if (v90 == v89)
    {
      std::vector<Nightingale::cycleInfo>::__clear[abi:nn180100](a6);
      goto LABEL_126;
    }
    long long v39 = v96;
    if ((unint64_t)v96 < v97)
    {
      *char v96 = *(void *)v89;
      int v40 = v39 + 1;
LABEL_73:
      char v96 = v40;
      if ((unint64_t)(v90 - (unsigned char *)v89) < 9)
      {
        std::vector<std::pair<int,int>>::__assign_with_size[abi:nn180100]<std::pair<int,int>*,std::pair<int,int>*>(&v95, (uint64_t *)v89, (uint64_t *)v90, (unint64_t)(v90 - (unsigned char *)v89) >> 3);
        int v85 = 0;
        char v86 = 0;
        uint64_t v87 = 0;
        std::vector<std::pair<BOOL,float>>::__init_with_size[abi:nn180100]<std::pair<BOOL,float>*,std::pair<BOOL,float>*>((char *)&v85, v95, v96, v96 - v95);
        uint64_t v76 = std::vector<BOOL>::vector(v84, (uint64_t)&v92);
        Nightingale::uiLogProcessor::periodListToCycleInfo((uint64_t)v76, (uint64_t *)&v85, v84, a6);
        if (v84[0]) {
          operator delete(v84[0]);
        }
        unsigned int v75 = v85;
        if (!v85) {
          goto LABEL_126;
        }
        char v86 = v85;
      }
      else
      {
        uint64_t v50 = (uint64_t *)((char *)v89 + 8);
        if ((char *)v89 + 8 != v90)
        {
          int v51 = *(_DWORD *)v89;
          while (1)
          {
            int v52 = *(_DWORD *)v50;
            if (*(_DWORD *)v50 - v51 >= 10) {
              break;
            }
            if (((*(void *)((char *)v92 + (((unint64_t)(v93 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v93 - 1)) & 1) == 0)
            {
              int v55 = v96;
              if ((unint64_t)v96 >= v97)
              {
                int64_t v61 = v96 - v95;
                if ((unint64_t)(v61 + 1) >> 61) {
                  goto LABEL_135;
                }
                unint64_t v62 = (uint64_t)(v97 - (void)v95) >> 2;
                if (v62 <= v61 + 1) {
                  unint64_t v62 = v61 + 1;
                }
                if (v97 - (unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v63 = v62;
                }
                if (v63) {
                  BOOL v64 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)&v97, v63);
                }
                else {
                  BOOL v64 = 0;
                }
                uint64_t v69 = (uint64_t *)&v64[8 * v61];
                *uint64_t v69 = *v50;
                uint64_t v56 = v69 + 1;
                uint64_t v71 = v95;
                uint64_t v70 = v96;
                if (v96 != v95)
                {
                  do
                  {
                    uint64_t v72 = *--v70;
                    *--uint64_t v69 = v72;
                  }
                  while (v70 != v71);
                  uint64_t v70 = v95;
                }
                int v95 = v69;
                char v96 = v56;
                unint64_t v97 = (unint64_t)&v64[8 * v63];
                if (v70) {
                  operator delete(v70);
                }
              }
              else
              {
                *char v96 = *v50;
                uint64_t v56 = v55 + 1;
              }
              char v96 = v56;
              BOOL v88 = 0;
              goto LABEL_112;
            }
LABEL_113:
            if (++v50 == (uint64_t *)v90) {
              goto LABEL_114;
            }
          }
          long long v53 = v96;
          if ((unint64_t)v96 >= v97)
          {
            int64_t v57 = v96 - v95;
            if ((unint64_t)(v57 + 1) >> 61) {
              goto LABEL_135;
            }
            unint64_t v58 = (uint64_t)(v97 - (void)v95) >> 2;
            if (v58 <= v57 + 1) {
              unint64_t v58 = v57 + 1;
            }
            if (v97 - (unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59) {
              int v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)&v97, v59);
            }
            else {
              int v60 = 0;
            }
            uint64_t v65 = (uint64_t *)&v60[8 * v57];
            *uint64_t v65 = *v50;
            long long v54 = v65 + 1;
            unint64_t v67 = v95;
            BOOL v66 = v96;
            if (v96 != v95)
            {
              do
              {
                uint64_t v68 = *--v66;
                *--uint64_t v65 = v68;
              }
              while (v66 != v67);
              BOOL v66 = v95;
            }
            int v95 = v65;
            char v96 = v54;
            unint64_t v97 = (unint64_t)&v60[8 * v59];
            if (v66) {
              operator delete(v66);
            }
          }
          else
          {
            *char v96 = *v50;
            long long v54 = v53 + 1;
          }
          char v96 = v54;
          BOOL v88 = 1;
LABEL_112:
          std::vector<BOOL>::push_back((uint64_t)&v92, &v88);
          int v51 = v52;
          goto LABEL_113;
        }
LABEL_114:
        uint64_t v73 = v95;
        if ((*(void *)v92 & 1) == 0 && *(_DWORD *)v95 - a4 >= 10) {
          *(void *)v92 |= 1uLL;
        }
        long long v81 = 0;
        uint64_t v82 = 0;
        uint64_t v83 = 0;
        std::vector<std::pair<BOOL,float>>::__init_with_size[abi:nn180100]<std::pair<BOOL,float>*,std::pair<BOOL,float>*>((char *)&v81, v73, v96, v96 - v73);
        uint64_t v74 = std::vector<BOOL>::vector(__p, (uint64_t)&v92);
        Nightingale::uiLogProcessor::periodListToCycleInfo((uint64_t)v74, (uint64_t *)&v81, __p, a6);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        unsigned int v75 = v81;
        if (!v81) {
          goto LABEL_126;
        }
        uint64_t v82 = (uint64_t)v81;
      }
      operator delete(v75);
LABEL_126:
      if (v89)
      {
        unint64_t v90 = (char *)v89;
        operator delete(v89);
      }
      if (v92) {
        operator delete(v92);
      }
      if (v95)
      {
        char v96 = v95;
        operator delete(v95);
      }
      if (v98)
      {
        __int16 v99 = v98;
        operator delete(v98);
      }
      return;
    }
    int64_t v41 = v96 - v95;
    if (!((unint64_t)(v41 + 1) >> 61))
    {
      unint64_t v42 = (uint64_t)(v97 - (void)v95) >> 2;
      if (v42 <= v41 + 1) {
        unint64_t v42 = v41 + 1;
      }
      if (v97 - (unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v42;
      }
      if (v43) {
        id v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)&v97, v43);
      }
      else {
        id v44 = 0;
      }
      uint64_t v45 = (uint64_t *)&v44[8 * v41];
      uint64_t v46 = &v44[8 * v43];
      *uint64_t v45 = *v38;
      int v40 = v45 + 1;
      unint64_t v48 = v95;
      uint64_t v47 = v96;
      if (v96 != v95)
      {
        do
        {
          uint64_t v49 = *--v47;
          *--uint64_t v45 = v49;
        }
        while (v47 != v48);
        uint64_t v47 = v95;
      }
      int v95 = v45;
      char v96 = v40;
      unint64_t v97 = (unint64_t)v46;
      if (v47) {
        operator delete(v47);
      }
      goto LABEL_73;
    }
LABEL_135:
    abort();
  }
  std::vector<Nightingale::cycleInfo>::__clear[abi:nn180100](a6);
}

void *Nightingale::uiCycleFactorProcess::uiCycleFactorProcess(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

uint64_t **Nightingale::uiCycleFactorProcess::suppressPeriodReproductive(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  char v21 = 0;
  char v22 = 0;
  uint64_t v23 = 0;
  std::vector<std::pair<BOOL,float>>::__init_with_size[abi:nn180100]<std::pair<BOOL,float>*,std::pair<BOOL,float>*>((char *)&v21, *a2, a2[1], a2[1] - *a2);
  BOOL v6 = v22;
  if (v22 != v21)
  {
    unint64_t v7 = 0;
    int v8 = 0;
    BOOL v6 = v21;
    do
    {
      unint64_t v9 = v6[v7];
      uint64_t v10 = operator new(1uLL);
      std::string __p = v10;
      unsigned char *v10 = 0;
      unint64_t v19 = v10 + 1;
      unint64_t v20 = v10 + 1;
      int v11 = Nightingale::phaseFactorProcessor::detectPhases(a1, v9, (uint64_t *)&__p, a3);
      if (__p)
      {
        unint64_t v19 = __p;
        operator delete(__p);
      }
      BOOL v12 = (v11 & 0xFF00) != 0 || v11 == 0;
      if (v12 && (v11 & 0xFFFFFFu) < 0x10000)
      {
        ++v8;
      }
      else
      {
        int v13 = a2[1];
        uint64_t v14 = (uint64_t)&(*a2)[v8];
        uint64_t v15 = (uint64_t *)(v14 + 8);
        if ((uint64_t *)(v14 + 8) != v13)
        {
          uint64_t v14 = (uint64_t)&(*a2)[v8];
          do
          {
            int v16 = *((_DWORD *)v15 + 1);
            *((_DWORD *)v15 - 2) = *(_DWORD *)v15;
            *((_DWORD *)v15++ - 1) = v16;
            v14 += 8;
          }
          while (v15 != v13);
        }
        a2[1] = (uint64_t *)v14;
      }
      ++v7;
      BOOL v6 = v21;
    }
    while (v7 < v22 - v21);
  }
  if (v6)
  {
    char v22 = v6;
    operator delete(v6);
  }
  return a2;
}

void Nightingale::uiCycleFactorProcess::~uiCycleFactorProcess(Nightingale::uiCycleFactorProcess *this)
{
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  uint64_t v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void Nightingale::uiLogProcessor::addCycleEnd(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1] - *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 5);
  if (v4 >= 2 && v3 != 96)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      if (v4 <= ++v6) {
        abort();
      }
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v7 + 20) = *(_DWORD *)(v7 + 96) - 1;
      *(unsigned char *)(v7 + 24) = 1;
      uint64_t v2 = *a2;
      unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
      v5 += 96;
    }
    while (v4 - 1 > v6);
  }
}

void Nightingale::uiLogProcessor::opk2Cycles(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[1];
  if (*a3 != v3)
  {
    uint64_t v5 = *a2;
    uint64_t v4 = a2[1];
    if (v4 != *a2)
    {
      unint64_t v6 = 0;
      int v7 = 0;
      while (1)
      {
        if (*(_DWORD *)(v5 + 60 * v6 + 12) == 2)
        {
          unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a3) >> 5);
          unint64_t v9 = v8 - 1;
          if (v8 - 1 > v7)
          {
            uint64_t v10 = 0;
            int v11 = *(_DWORD *)(v5 + 60 * v6);
            if (v8 <= v7) {
              unint64_t v8 = v7;
            }
            unint64_t v12 = v7 - v8;
            int v13 = (unsigned char *)(*a3 + 96 * v7 + 24);
            while (1)
            {
              if (!(v12 + v10)) {
                goto LABEL_24;
              }
              BOOL v14 = *v13 && v11 <= *((_DWORD *)v13 - 1);
              if (v14 && v11 >= *((_DWORD *)v13 - 6)) {
                break;
              }
              ++v10;
              v13 += 96;
              if (v9 <= v7 + v10) {
                goto LABEL_17;
              }
            }
            *((_DWORD *)v13 - 3) = v11;
            *(v13 - 8) = 1;
            v7 += v10 + 1;
            uint64_t v5 = *a2;
            uint64_t v4 = a2[1];
          }
LABEL_17:
          if (0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 2) <= v6) {
LABEL_24:
          }
            abort();
          int v15 = *(_DWORD *)(v5 + 60 * v6);
          uint64_t v3 = a3[1];
          if (v15 >= *(_DWORD *)(v3 - 96)) {
            break;
          }
        }
        if (0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 2) <= ++v6) {
          return;
        }
      }
      *(_DWORD *)(v3 - 84) = v15;
      *(unsigned char *)(v3 - 80) = 1;
    }
  }
}

uint64_t Nightingale::uiLogProcessor::getJDayLastNoFlowAftLastPeriodStart(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 2);
  if ((int)v4 < 1)
  {
LABEL_7:
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v5 = -286331153 * ((a2[1] - *a2) >> 2) + 1;
    while (1)
    {
      unint64_t v6 = (v5 - 2);
      if (v4 <= v6) {
        abort();
      }
      if (*(_DWORD *)(v3 + 60 * v6 + 4) == 5)
      {
        uint64_t v7 = *(unsigned int *)(v3 + 60 * v6);
        if ((int)v7 > *(_DWORD *)(*(void *)(a3 + 8) - 96)) {
          break;
        }
      }
      if ((unint64_t)--v5 <= 1) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = 0x100000000;
  }
  return v7 | v8;
}

uint64_t Nightingale::uiLogProcessor::getJDay1stOPKAftLastPeriodStart(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * (a2[1] - *a2);
  if ((int)v4 < 1)
  {
LABEL_7:
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = -286331153 * (a2[1] - *a2);
    while (1)
    {
      if (!v4) {
        abort();
      }
      if (v3[3] == 2)
      {
        uint64_t v6 = *v3;
        if ((int)v6 >= *(_DWORD *)(*(void *)(a3 + 8) - 96)) {
          break;
        }
      }
      --v4;
      v3 += 15;
      if (!--v5) {
        goto LABEL_7;
      }
    }
    uint64_t v7 = 0x100000000;
  }
  return v6 | v7;
}

uint64_t Nightingale::uiLogProcessor::get_jDayLastOPKPosBfr1stPeriodSt(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = (_DWORD *)*a3;
  unint64_t v4 = (_DWORD *)a3[1];
  if ((_DWORD *)*a3 != v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (_DWORD *)*a3;
    while (*v6 != a2)
    {
      v6 += 15;
      ++v5;
      if (v6 == v4) {
        return 0xFFFFFFFFLL;
      }
    }
    if (v5)
    {
      unint64_t v7 = 0xEEEEEEEEEEEEEEEFLL * (v4 - v3);
      while (v5-- >= 1)
      {
        if (v7 <= v5) {
          abort();
        }
        if (v3[15 * v5 + 3] == 2) {
          return v3[15 * v5];
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void Nightingale::uiLogProcessor::getJDay1stFlow(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2[1] - *a2) >> 2);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = -286331153 * ((uint64_t)(a2[1] - *a2) >> 2);
    for (uint64_t i = (_DWORD *)(*a2 + 4); ; i += 15)
    {
      if (!v3) {
        abort();
      }
      if ((*i - 1) <= 4) {
        break;
      }
      --v3;
      if (!--v4) {
        return;
      }
    }
    *(_DWORD *)(a3 + 8) = *(i - 1);
    *(unsigned char *)(a3 + 12) = 1;
  }
}

void Nightingale::uiLogProcessor::getJDayLastFlowNoFlow(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = (a2[1] - *a2) / 60;
  uint64_t v5 = v4;
  uint64_t v6 = *a2 + 60 * v4;
  uint64_t v7 = v4;
  while ((int)v7 >= 1)
  {
    if (v4 <= --v7) {
LABEL_17:
    }
      abort();
    uint64_t v8 = (_DWORD *)(v6 - 60);
    int v9 = *(_DWORD *)(v6 - 56);
    v6 -= 60;
    if (v9 == 5)
    {
      *(_DWORD *)(a3 + 24) = *v8;
      *(unsigned char *)(a3 + 28) = 1;
      uint64_t v3 = *a2;
      unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 2);
      uint64_t v5 = -286331153 * ((a2[1] - *a2) >> 2);
      break;
    }
  }
  uint64_t v10 = v3 + 60 * v5;
  uint64_t v11 = v5;
  while ((int)v11 >= 1)
  {
    if (v4 <= --v11) {
      goto LABEL_17;
    }
    unint64_t v12 = (_DWORD *)(v10 - 60);
    unsigned int v13 = *(_DWORD *)(v10 - 56) - 1;
    v10 -= 60;
    if (v13 <= 4)
    {
      *(_DWORD *)(a3 + 32) = *v12;
      *(unsigned char *)(a3 + 36) = 1;
      uint64_t v3 = *a2;
      unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 2);
      uint64_t v5 = -286331153 * ((a2[1] - *a2) >> 2);
      break;
    }
  }
  uint64_t v14 = v3 + 60 * v5;
  while ((int)v5 >= 1)
  {
    if (v4 <= --v5) {
      goto LABEL_17;
    }
    int v15 = (_DWORD *)(v14 - 60);
    unsigned int v16 = *(_DWORD *)(v14 - 56) - 1;
    v14 -= 60;
    if (v16 <= 3)
    {
      *(_DWORD *)(a3 + 40) = *v15;
      *(unsigned char *)(a3 + 44) = 1;
      return;
    }
  }
}

void Nightingale::uiLogProcessor::getJDayFirstOPK(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD **)a2;
  uint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  if (v4)
  {
    unint64_t v5 = v4 / 60;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    while (v3[3] != 2)
    {
      v3 += 15;
      if (!--v5) {
        return;
      }
    }
    *(_DWORD *)(a3 + 48) = *v3;
    *(unsigned char *)(a3 + 52) = 1;
  }
}

void Nightingale::uiLogProcessor::getJDayUILog(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v7 = std::vector<Nightingale::cycleInfo>::__init_with_size[abi:nn180100]<Nightingale::cycleInfo*,Nightingale::cycleInfo*>(&v23, *(void *)a4, *(void *)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5));
  uint64_t v8 = v23;
  if (v24 != v23)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 5);
    *(_DWORD *)(a4 + 80) = *(_DWORD *)(v24 - 96);
    *(unsigned char *)(a4 + 84) = 1;
    if (v9 >= 2)
    {
      *(_DWORD *)(a4 + 88) = *(_DWORD *)(v8 + 96 * v9 - 192);
      *(unsigned char *)(a4 + 92) = 1;
    }
  }
  uint64_t JDayLastNoFlowAftLastPeriodStart = Nightingale::uiLogProcessor::getJDayLastNoFlowAftLastPeriodStart((uint64_t)v7, a2, (uint64_t)&v23);
  uint64_t JDay1stOPKAftLastPeriodStart = Nightingale::uiLogProcessor::getJDay1stOPKAftLastPeriodStart(JDayLastNoFlowAftLastPeriodStart, (unsigned int **)a2, (uint64_t)&v23);
  Nightingale::uiLogProcessor::getJDay1stFlow(JDay1stOPKAftLastPeriodStart, a2, a4 + 24);
  unsigned int v13 = (_DWORD *)*a2;
  uint64_t v14 = a2[1] - *a2;
  if (v14)
  {
    unint64_t v15 = v14 / 60;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    while (v13[3] != 2)
    {
      v13 += 15;
      if (!--v15) {
        goto LABEL_11;
      }
    }
    *(_DWORD *)(a4 + 72) = *v13;
    *(unsigned char *)(a4 + 76) = 1;
  }
LABEL_11:
  Nightingale::uiLogProcessor::getJDayLastFlowNoFlow(v12, a2, a4 + 24);
  if (BYTE4(JDayLastNoFlowAftLastPeriodStart))
  {
    int v16 = JDay1stOPKAftLastPeriodStart + 9;
    if ((int)JDay1stOPKAftLastPeriodStart + 9 <= (int)JDayLastNoFlowAftLastPeriodStart) {
      int v16 = JDayLastNoFlowAftLastPeriodStart;
    }
    if (BYTE4(JDay1stOPKAftLastPeriodStart)) {
      int v17 = v16;
    }
    else {
      int v17 = JDayLastNoFlowAftLastPeriodStart;
    }
    if (BYTE4(JDay1stOPKAftLastPeriodStart)) {
      char v18 = 1;
    }
    else {
      char v18 = BYTE4(JDayLastNoFlowAftLastPeriodStart);
    }
  }
  else
  {
    if (!BYTE4(JDay1stOPKAftLastPeriodStart)) {
      goto LABEL_23;
    }
    int v17 = JDay1stOPKAftLastPeriodStart + 9;
    char v18 = 1;
  }
  *(_DWORD *)(a4 + 112) = v17;
  *(unsigned char *)(a4 + 116) = v18;
LABEL_23:
  *(_DWORD *)(a4 + 96) = JDayLastNoFlowAftLastPeriodStart;
  *(unsigned char *)(a4 + 100) = BYTE4(JDayLastNoFlowAftLastPeriodStart);
  *(_DWORD *)(a4 + 104) = JDay1stOPKAftLastPeriodStart;
  *(unsigned char *)(a4 + 108) = BYTE4(JDay1stOPKAftLastPeriodStart);
  unint64_t v20 = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  Nightingale::phaseFactorProcessor::getCCVec(__p);
  *(void *)(a4 + 120) = Nightingale::phaseFactorProcessor::jDayFirstStartLastEndOfAPhaseSet((uint64_t)&v20, a3, (unsigned __int8 **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v20)
  {
    char v21 = v20;
    operator delete(v20);
  }
  unint64_t v20 = &v23;
  std::vector<Nightingale::cycleInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v20);
}

void Nightingale::uiLogProcessor::getInPeriodNow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 8) - 92);
  *(unsigned char *)(a2 + 128) = 0;
  if (*(unsigned char *)(a3 + 44)) {
    BOOL v4 = (v3 & 0xFF00000000) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    int v5 = *(_DWORD *)(a3 + 40);
    if (v5 == v3) {
      goto LABEL_11;
    }
    if (!*(unsigned char *)(a2 + 52))
    {
      if (v5 != v3 + 1) {
        return;
      }
      goto LABEL_11;
    }
    if (v5 == v3 + 1 && v5 != *(_DWORD *)(a2 + 48)) {
LABEL_11:
    }
      *(unsigned char *)(a2 + 128) = 1;
  }
}

uint64_t Nightingale::uiLogProcessor::getNumPeriodsToKeepUR(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = *(_DWORD **)a3;
  uint64_t v3 = *(_DWORD **)(a3 + 8);
  uint64_t result = -1431655765 * (((unint64_t)v3 - *(void *)a3) >> 5);
  if (result && v4 != v3)
  {
    int v6 = *(_DWORD *)(a2 + 24);
    do
    {
      if (*(unsigned char *)(a2 + 28))
      {
        uint64_t result = result - (*v4 <= v6);
        if (*v4 > v6) {
          break;
        }
      }
      v4 += 24;
    }
    while (v4 != v3);
  }
  return result;
}

unint64_t Nightingale::uiLogProcessor::getWhatShouldBeInSlideCC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a3;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5);
  if (!v5)
  {
LABEL_21:
    uint64_t v8 = 1;
    return v8 | (v5 << 32);
  }
  if (HIDWORD(a4) != -2)
  {
    if (HIDWORD(a4) != -1 && (int)v5 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = (unsigned char *)(v4 + 8);
      uint64_t v8 = 1;
      while (1)
      {
        if (!(v5 + v6)) {
          goto LABEL_23;
        }
        if (*v7 && *((_DWORD *)v7 - 1) >= SHIDWORD(a4)) {
          break;
        }
        --v6;
        v7 += 96;
        if (-(uint64_t)v5 == v6)
        {
          unint64_t v5 = 0;
          return v8 | (v5 << 32);
        }
      }
      unint64_t v5 = (v5 + v6);
    }
    goto LABEL_21;
  }
  if (v5 == 1) {
    goto LABEL_12;
  }
  if ((int)v5 < 2) {
    goto LABEL_16;
  }
  unint64_t v9 = (v5 - 2);
  if (v5 <= v9) {
LABEL_23:
  }
    abort();
  if (*(_DWORD *)(v4 + 96 * v9) < (int)a4)
  {
LABEL_12:
    uint64_t v8 = 2;
    unint64_t v5 = 2;
  }
  else
  {
LABEL_16:
    if ((int)v5 >= 2) {
      unint64_t v5 = 2;
    }
    else {
      unint64_t v5 = v5;
    }
    uint64_t v8 = 3;
  }
  return v8 | (v5 << 32);
}

void Nightingale::uiLogProcessor::removeOutlier(std::vector<int> *__x@<X1>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<int>::pointer begin = (char *)__x->__begin_;
  std::vector<int>::pointer end = __x->__end_;
  if ((unint64_t)((char *)end - begin) > 0xB)
  {
    std::vector<int>::vector(&__xa, __x);
    double mad = Nightingale::get_mad(&__xa, 1);
    if (__xa.__begin_)
    {
      __xa.__end_ = __xa.__begin_;
      operator delete(__xa.__begin_);
    }
    std::vector<int>::vector(&v32, __x);
    double v10 = Nightingale::vMedian((float **)&v32);
    if (v32.__begin_)
    {
      v32.__end_ = v32.__begin_;
      operator delete(v32.__begin_);
    }
    std::vector<int>::vector(&v31, __x);
    double v11 = Nightingale::vMedian((float **)&v31);
    if (v31.__begin_)
    {
      v31.__end_ = v31.__begin_;
      operator delete(v31.__begin_);
    }
    std::vector<int>::pointer v13 = __x->__begin_;
    uint64_t v12 = __x->__end_;
    if (v12 != __x->__begin_)
    {
      unint64_t v14 = 0;
      double v15 = mad * a3;
      double v16 = v15 + v10;
      double v17 = v11 - v15;
      do
      {
        float v18 = *(float *)&v13[v14];
        if (v17 <= v18 && v16 >= v18)
        {
          char v21 = *(float **)(a2 + 8);
          unint64_t v20 = *(void *)(a2 + 16);
          if ((unint64_t)v21 >= v20)
          {
            uint64_t v23 = *(float **)a2;
            uint64_t v24 = ((uint64_t)v21 - *(void *)a2) >> 2;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 62) {
              abort();
            }
            uint64_t v26 = v20 - (void)v23;
            if (v26 >> 1 > v25) {
              unint64_t v25 = v26 >> 1;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v25;
            }
            if (v27)
            {
              char v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a2 + 16, v27);
              uint64_t v23 = *(float **)a2;
              char v21 = *(float **)(a2 + 8);
              float v18 = *(float *)&v13[v14];
            }
            else
            {
              char v28 = 0;
            }
            int64_t v29 = (float *)&v28[4 * v24];
            *int64_t v29 = v18;
            uint64_t v22 = v29 + 1;
            while (v21 != v23)
            {
              int v30 = *((_DWORD *)v21-- - 1);
              *((_DWORD *)v29-- - 1) = v30;
            }
            *(void *)a2 = v29;
            *(void *)(a2 + 8) = v22;
            *(void *)(a2 + 16) = &v28[4 * v27];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            *char v21 = v18;
            uint64_t v22 = v21 + 1;
          }
          *(void *)(a2 + 8) = v22;
          std::vector<int>::pointer v13 = __x->__begin_;
          uint64_t v12 = __x->__end_;
        }
        ++v14;
      }
      while (v14 < v12 - v13);
    }
  }
  else if ((std::vector<int> *)a2 != __x)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)a2, begin, (uint64_t)end, ((char *)end - begin) >> 2);
  }
}

void Nightingale::uiLogProcessor::genPeriodSlide(uint64_t *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, int a4@<W4>, std::vector<int> *a5@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  a5->__begin_ = 0;
  a5->__end_ = 0;
  a5->__end_cap_.__value_ = 0;
  int v6 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 5);
  if (v6)
  {
    uint64_t v7 = a3;
    int v8 = v6 - a2;
    int v9 = v6 - a4;
    if (v6 - a2 >= v6 - a4)
    {
      std::vector<int>::pointer v26 = 0;
      std::vector<int>::pointer end = 0;
    }
    else
    {
      std::vector<int>::pointer end = 0;
      uint64_t p_end_cap = &a5->__end_cap_;
      unint64_t v13 = v8;
      do
      {
        uint64_t v14 = *a1;
        if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5) <= v13) {
          goto LABEL_81;
        }
        uint64_t v15 = v14 + 96 * v13;
        if (*(unsigned char *)(v15 + 8))
        {
          float v16 = (float)(*(_DWORD *)(v15 + 4) - *(_DWORD *)(v14 + 96 * v13) + 1);
          if ((int *)end >= p_end_cap->__value_)
          {
            std::vector<int>::pointer begin = (float *)a5->__begin_;
            uint64_t v19 = ((char *)end - (char *)a5->__begin_) >> 2;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62) {
              goto LABEL_81;
            }
            uint64_t v21 = (char *)p_end_cap->__value_ - (char *)begin;
            if (v21 >> 1 > v20) {
              unint64_t v20 = v21 >> 1;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22)
            {
              uint64_t v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&a5->__end_cap_, v22);
              std::vector<int>::pointer begin = (float *)a5->__begin_;
              std::vector<int>::pointer end = (float *)a5->__end_;
            }
            else
            {
              uint64_t v23 = 0;
            }
            uint64_t v24 = (float *)&v23[4 * v19];
            float *v24 = v16;
            double v17 = v24 + 1;
            while (end != begin)
            {
              int v25 = *((_DWORD *)end-- - 1);
              *((_DWORD *)v24-- - 1) = v25;
            }
            a5->__begin_ = (std::vector<int>::pointer)v24;
            a5->__end_ = (std::vector<int>::pointer)v17;
            a5->__end_cap_.__value_ = (int *)&v23[4 * v22];
            if (begin) {
              operator delete(begin);
            }
          }
          else
          {
            *std::vector<int>::pointer end = v16;
            double v17 = end + 1;
          }
          a5->__end_ = (std::vector<int>::pointer)v17;
          std::vector<int>::pointer end = v17;
        }
        ++v13;
      }
      while (v9 != v13);
      std::vector<int>::pointer v26 = a5->__begin_;
      uint64_t v7 = a3;
    }
    p_std::vector<int>::pointer end = &a5->__end_;
    if ((unint64_t)((char *)end - (char *)v26) > 0x30 && ((char *)end - (char *)v26) << 30 != 0xC00000000)
    {
      char v28 = (float *)((char *)v26 + (((((char *)end - (char *)v26) << 30) - 0xC00000000) >> 30));
      int64_t v29 = (char *)end - (char *)v28;
      if (end != v28) {
        memmove(v26, v28, (char *)end - (char *)v28);
      }
      std::vector<int>::pointer end = (float *)((char *)v26 + v29);
      *p_std::vector<int>::pointer end = (std::vector<int>::pointer)((char *)v26 + v29);
    }
    if (*(unsigned char *)(v7 + 12)) {
      float v30 = (float)*(int *)(v7 + 8);
    }
    else {
      float v30 = 5.0;
    }
    unint64_t value = a5->__end_cap_.__value_;
    if (end >= (float *)value)
    {
      std::exception v33 = (float *)a5->__begin_;
      uint64_t v34 = ((char *)end - (char *)a5->__begin_) >> 2;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62) {
LABEL_81:
      }
        abort();
      uint64_t v36 = (char *)value - (char *)v33;
      if (v36 >> 1 > v35) {
        unint64_t v35 = v36 >> 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        uint64_t v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&a5->__end_cap_, v37);
        std::exception v33 = (float *)a5->__begin_;
        std::vector<int>::pointer end = (float *)a5->__end_;
      }
      else
      {
        uint64_t v38 = 0;
      }
      long long v39 = (float *)&v38[4 * v34];
      int v40 = (int *)&v38[4 * v37];
      *long long v39 = v30;
      std::vector<int> v32 = v39 + 1;
      while (end != v33)
      {
        int v41 = *((_DWORD *)end-- - 1);
        *((_DWORD *)v39-- - 1) = v41;
      }
      a5->__begin_ = (std::vector<int>::pointer)v39;
      a5->__end_ = (std::vector<int>::pointer)v32;
      a5->__end_cap_.__value_ = v40;
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *std::vector<int>::pointer end = v30;
      std::vector<int> v32 = end + 1;
    }
    *p_std::vector<int>::pointer end = (std::vector<int>::pointer)v32;
    if (ha_sensitive_logging_is_enabled())
    {
      log = ha_get_log();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::genPeriodSlide();
      }
    }
    if ((std::vector<int>::pointer)((char *)a5->__end_ - (char *)a5->__begin_) != (std::vector<int>::pointer)4)
    {
      for (unint64_t i = 0; i < a5->__end_ - a5->__begin_ - 1; ++i)
      {
        if (ha_sensitive_logging_is_enabled())
        {
          unint64_t v48 = ha_get_log();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
          {
            if (i >= a5->__end_ - a5->__begin_) {
              goto LABEL_81;
            }
            double v49 = *(float *)&a5->__begin_[i];
            *(_DWORD *)buf = 134217984;
            *(double *)&uint8_t buf[4] = v49;
            _os_log_debug_impl(&dword_22F10E000, v48, OS_LOG_TYPE_DEBUG, "%3.1f, ", buf, 0xCu);
          }
        }
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      unint64_t v43 = ha_get_log();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::genPeriodSlide(&a5->__end_);
      }
    }
    Nightingale::uiLogProcessor::removeOutlier(a5, (uint64_t)buf, 3.0);
    std::vector<int>::pointer v44 = a5->__begin_;
    if (a5->__begin_)
    {
      *p_std::vector<int>::pointer end = v44;
      operator delete(v44);
    }
    *(_OWORD *)&a5->__begin_ = *(_OWORD *)buf;
    a5->__end_cap_.__value_ = v55;
    if (ha_sensitive_logging_is_enabled())
    {
      uint64_t v45 = ha_get_log();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::genPeriodSlide();
      }
    }
    if ((std::vector<int>::pointer)((char *)a5->__end_ - (char *)a5->__begin_) != (std::vector<int>::pointer)4)
    {
      for (unint64_t j = 0; j < a5->__end_ - a5->__begin_ - 1; ++j)
      {
        if (ha_sensitive_logging_is_enabled())
        {
          int v51 = ha_get_log();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
          {
            if (j >= a5->__end_ - a5->__begin_) {
              goto LABEL_81;
            }
            double v52 = *(float *)&a5->__begin_[j];
            *(_DWORD *)buf = 134217984;
            *(double *)&uint8_t buf[4] = v52;
            _os_log_debug_impl(&dword_22F10E000, v51, OS_LOG_TYPE_DEBUG, "%3.1f, ", buf, 0xCu);
          }
        }
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      uint64_t v46 = ha_get_log();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::genPeriodSlide(p_end);
      }
    }
  }
}

BOOL Nightingale::uiLogProcessor::vecPhaseContains(uint64_t a1, unsigned __int8 **a2, int a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1] - *a2;
  if (!v4) {
    return 0;
  }
  if (v4 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = a2[1] - *a2;
  }
  if (*v3 == a3) {
    return 1;
  }
  uint64_t v7 = 1;
  do
  {
    unint64_t v8 = v7;
    if (v5 == v7) {
      break;
    }
    int v9 = v3[v7++];
  }
  while (v9 != a3);
  return v4 > v8;
}

void Nightingale::uiLogProcessor::genCycleSlide(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, std::vector<int> *a4@<X8>)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  int v5 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 5);
  if (!v5) {
    return;
  }
  uint64_t v6 = a3;
  int v88 = a2;
  if (a2 != 1 && a2 != 3)
  {
    if (a2 != 2)
    {
      unint64_t v42 = 0;
      goto LABEL_66;
    }
    std::vector<int>::pointer v8 = 0;
    int v9 = 0;
    p_std::vector<int>::pointer end = &a4->__end_;
    goto LABEL_55;
  }
  int v89 = v5 - 1;
  if (v5 - HIDWORD(a2) < v5 - 1)
  {
    unint64_t v11 = v5 - HIDWORD(a2);
    do
    {
      uint64_t v12 = *a1;
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
      if (v13 <= v11) {
        goto LABEL_131;
      }
      uint64_t v14 = v12 + 96 * v11;
      double v17 = *(unsigned char **)(v14 + 72);
      uint64_t v16 = v14 + 72;
      uint64_t v15 = v17;
      uint64_t v19 = (const void **)(v16 + 8);
      float v18 = *(unsigned char **)(v16 + 8);
      size_t v21 = v18 - v17;
      BOOL v20 = v18 - v17 < 0;
      if (v18 == v17)
      {
        unint64_t v22 = 0;
      }
      else
      {
        if (v20) {
          goto LABEL_131;
        }
        unint64_t v22 = operator new(v21);
        memmove(v22, v15, v21);
        uint64_t v23 = *(unsigned char **)v16;
        size_t v21 = (unsigned char *)*v19 - v23;
        if (*v19 != v23)
        {
          if ((unsigned char *)*v19 - v23 < 0) {
            goto LABEL_131;
          }
          uint64_t v24 = operator new((unsigned char *)*v19 - v23);
          memmove(v24, v23, v21);
          if (v21 <= 1) {
            uint64_t v25 = 1;
          }
          else {
            uint64_t v25 = v21;
          }
          if (*v24)
          {
            uint64_t v26 = 1;
            do
            {
              size_t v27 = v26;
              if (v25 == v26) {
                break;
              }
              ++v26;
            }
            while (v24[v27]);
            LOBYTE(v21) = v21 > v27;
          }
          else
          {
            LOBYTE(v21) = 1;
          }
          operator delete(v24);
          uint64_t v12 = *a1;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
        }
      }
      if (v13 <= v11) {
        goto LABEL_131;
      }
      uint64_t v28 = v12 + 96 * v11;
      if (*(unsigned char *)(v28 + 24)) {
        char v29 = v21;
      }
      else {
        char v29 = 1;
      }
      if ((v29 & 1) == 0)
      {
        float v30 = (float)(*(_DWORD *)(v28 + 20) - *(_DWORD *)(v12 + 96 * v11) + 1);
        std::vector<int>::pointer end = (float *)a4->__end_;
        unint64_t value = a4->__end_cap_.__value_;
        if (end >= (float *)value)
        {
          std::vector<int>::pointer begin = (float *)a4->__begin_;
          uint64_t v35 = ((char *)end - (char *)a4->__begin_) >> 2;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62) {
            goto LABEL_131;
          }
          uint64_t v37 = (char *)value - (char *)begin;
          if (v37 >> 1 > v36) {
            unint64_t v36 = v37 >> 1;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            long long v39 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&a4->__end_cap_, v38);
            std::vector<int>::pointer begin = (float *)a4->__begin_;
            std::vector<int>::pointer end = (float *)a4->__end_;
          }
          else
          {
            long long v39 = 0;
          }
          int v40 = (float *)&v39[4 * v35];
          *int v40 = v30;
          std::exception v33 = v40 + 1;
          while (end != begin)
          {
            int v41 = *((_DWORD *)end-- - 1);
            *((_DWORD *)v40-- - 1) = v41;
          }
          a4->__begin_ = (std::vector<int>::pointer)v40;
          a4->__end_ = (std::vector<int>::pointer)v33;
          a4->__end_cap_.__value_ = (int *)&v39[4 * v38];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *std::vector<int>::pointer end = v30;
          std::exception v33 = end + 1;
        }
        a4->__end_ = (std::vector<int>::pointer)v33;
      }
      if (v22) {
        operator delete(v22);
      }
    }
    while (v89 != ++v11);
  }
  if (v88 != 2)
  {
    unint64_t v42 = (float *)a4->__end_;
    uint64_t v6 = a3;
    goto LABEL_66;
  }
  std::vector<int>::pointer v8 = a4->__begin_;
  a4->__end_ = a4->__begin_;
  p_std::vector<int>::pointer end = &a4->__end_;
  int v9 = a4->__end_cap_.__value_;
  if (v8 >= v9)
  {
    uint64_t v6 = a3;
LABEL_55:
    uint64_t v43 = (char *)v9 - (char *)v8;
    uint64_t v44 = v43 >> 1;
    if ((unint64_t)(v43 >> 1) <= 1) {
      uint64_t v44 = 1;
    }
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v45 = v44;
    }
    uint64_t v46 = std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&a4->__end_cap_, v45);
    std::vector<int>::pointer v47 = a4->__begin_;
    std::vector<int>::pointer v48 = a4->__end_;
    uint64_t v50 = &v46[v49];
    *uint64_t v46 = 1105199104;
    unint64_t v42 = (float *)(v46 + 1);
    while (v48 != v47)
    {
      int v51 = *--v48;
      *--uint64_t v46 = v51;
    }
    a4->__begin_ = v46;
    a4->__end_ = (std::vector<int>::pointer)v42;
    a4->__end_cap_.__value_ = v50;
    if (v47) {
      operator delete(v47);
    }
    goto LABEL_65;
  }
  _DWORD *v8 = 1105199104;
  unint64_t v42 = (float *)(v8 + 1);
  uint64_t v6 = a3;
LABEL_65:
  *p_std::vector<int>::pointer end = v42;
LABEL_66:
  double v52 = &a4->__end_;
  std::vector<int>::pointer v53 = a4->__begin_;
  unint64_t v54 = (char *)v42 - (char *)a4->__begin_;
  BOOL v55 = v54 >= 0x31;
  uint64_t v56 = (v54 << 30) - 0xC00000000;
  if (v55 && v56 != 0)
  {
    unint64_t v58 = (float *)((char *)v53 + (v56 >> 30));
    int64_t v59 = (char *)v42 - (char *)v58;
    if (v42 != v58) {
      memmove(a4->__begin_, v58, (char *)v42 - (char *)v58);
    }
    unint64_t v42 = (float *)((char *)v53 + v59);
    *double v52 = (std::vector<int>::pointer)((char *)v53 + v59);
  }
  if (v88 != 1 || !*(unsigned char *)(v6 + 4)) {
    goto LABEL_92;
  }
  float v60 = (float)*(int *)v6;
  int64_t v61 = a4->__end_cap_.__value_;
  if (v42 >= (float *)v61)
  {
    unint64_t v63 = (float *)a4->__begin_;
    uint64_t v64 = ((char *)v42 - (char *)a4->__begin_) >> 2;
    unint64_t v65 = v64 + 1;
    if (!((unint64_t)(v64 + 1) >> 62))
    {
      uint64_t v66 = (char *)v61 - (char *)v63;
      if (v66 >> 1 > v65) {
        unint64_t v65 = v66 >> 1;
      }
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v65;
      }
      if (v67)
      {
        uint64_t v68 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&a4->__end_cap_, v67);
        unint64_t v63 = (float *)a4->__begin_;
        unint64_t v42 = (float *)a4->__end_;
      }
      else
      {
        uint64_t v68 = 0;
      }
      uint64_t v69 = (float *)&v68[4 * v64];
      uint64_t v70 = (int *)&v68[4 * v67];
      *uint64_t v69 = v60;
      unint64_t v62 = v69 + 1;
      while (v42 != v63)
      {
        int v71 = *((_DWORD *)v42-- - 1);
        *((_DWORD *)v69-- - 1) = v71;
      }
      a4->__begin_ = (std::vector<int>::pointer)v69;
      a4->__end_ = (std::vector<int>::pointer)v62;
      a4->__end_cap_.__value_ = v70;
      if (v63) {
        operator delete(v63);
      }
      goto LABEL_91;
    }
LABEL_131:
    abort();
  }
  float *v42 = v60;
  unint64_t v62 = v42 + 1;
LABEL_91:
  *double v52 = (std::vector<int>::pointer)v62;
LABEL_92:
  if (ha_sensitive_logging_is_enabled())
  {
    log = ha_get_log();
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG)) {
      Nightingale::uiLogProcessor::genCycleSlide();
    }
  }
  uint64_t v73 = a4->__end_;
  if (a4->__begin_ == v73)
  {
    if (ha_sensitive_logging_is_enabled())
    {
      unsigned int v75 = ha_get_log();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::genCycleSlide();
      }
    }
  }
  else
  {
    if ((int *)((char *)v73 - (char *)a4->__begin_) != (int *)4)
    {
      for (unint64_t i = 0; i < a4->__end_ - a4->__begin_ - 1; ++i)
      {
        if (ha_sensitive_logging_is_enabled())
        {
          uint64_t v82 = ha_get_log();
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
          {
            if (i >= a4->__end_ - a4->__begin_) {
              goto LABEL_131;
            }
            double v83 = *(float *)&a4->__begin_[i];
            *(_DWORD *)buf = 134217984;
            *(double *)&uint8_t buf[4] = v83;
            _os_log_debug_impl(&dword_22F10E000, v82, OS_LOG_TYPE_DEBUG, "%3.1f, ", buf, 0xCu);
          }
        }
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      uint64_t v74 = ha_get_log();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::genPeriodSlide(&a4->__end_);
      }
    }
  }
  Nightingale::uiLogProcessor::removeOutlier(a4, (uint64_t)buf, 3.0);
  std::vector<int>::pointer v76 = a4->__begin_;
  if (a4->__begin_)
  {
    *double v52 = v76;
    operator delete(v76);
  }
  *(_OWORD *)&a4->__begin_ = *(_OWORD *)buf;
  a4->__end_cap_.__value_ = v91;
  if (ha_sensitive_logging_is_enabled())
  {
    uint64_t v77 = ha_get_log();
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG)) {
      Nightingale::uiLogProcessor::genCycleSlide();
    }
  }
  uint64_t v78 = a4->__end_;
  if (a4->__begin_ == v78)
  {
    if (ha_sensitive_logging_is_enabled())
    {
      long long v80 = ha_get_log();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::genCycleSlide();
      }
    }
  }
  else
  {
    if ((int *)((char *)v78 - (char *)a4->__begin_) != (int *)4)
    {
      for (unint64_t j = 0; j < a4->__end_ - a4->__begin_ - 1; ++j)
      {
        if (ha_sensitive_logging_is_enabled())
        {
          int v85 = ha_get_log();
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
          {
            if (j >= a4->__end_ - a4->__begin_) {
              goto LABEL_131;
            }
            double v86 = *(float *)&a4->__begin_[j];
            *(_DWORD *)buf = 134217984;
            *(double *)&uint8_t buf[4] = v86;
            _os_log_debug_impl(&dword_22F10E000, v85, OS_LOG_TYPE_DEBUG, "%3.1f, ", buf, 0xCu);
          }
        }
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      uint64_t v79 = ha_get_log();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::genPeriodSlide(v52);
      }
    }
  }
}

double Nightingale::uiLogProcessor::getCenter(uint64_t a1, const std::vector<int> *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v3 = &v7;
    std::vector<int>::vector(&v7, a2);
    double v4 = Nightingale::vMean((float **)&v7);
    std::vector<int>::pointer begin = v7.__begin_;
    if (!v7.__begin_) {
      return v4;
    }
    goto LABEL_3;
  }
  uint64_t v3 = &v8;
  std::vector<int>::vector(&v8, a2);
  double v4 = Nightingale::vMedian((float **)&v8);
  std::vector<int>::pointer begin = v8.__begin_;
  if (v8.__begin_)
  {
LABEL_3:
    v3->__end_ = begin;
    operator delete(begin);
  }
  return v4;
}

double Nightingale::uiLogProcessor::getVariance(double a1, double a2, uint64_t a3, const std::vector<int> *a4)
{
  if ((std::vector<int>::pointer)((char *)a4->__end_ - (char *)a4->__begin_) >= (std::vector<int>::pointer)8)
  {
    std::vector<int>::vector(&__x, a4);
    Nightingale::vVar(&__x);
    double v7 = fmax(v6, 0.1);
    if (v7 >= a1) {
      a2 = a1;
    }
    else {
      a2 = v7;
    }
    if (__x.__begin_)
    {
      __x.__end_ = __x.__begin_;
      operator delete(__x.__begin_);
    }
  }
  return a2;
}

void Nightingale::uiLogProcessor::calSlideMeanStd(const std::vector<int> *a1@<X1>, char a2@<W2>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  if (a1->__end_ == a1->__begin_)
  {
    char v14 = 0;
    double Variance = 0.0;
    double Center = 0.0;
  }
  else
  {
    double v10 = std::vector<int>::vector(&v16, a1);
    double Center = Nightingale::uiLogProcessor::getCenter((uint64_t)v10, &v16, a2);
    if (v16.__begin_)
    {
      v16.__end_ = v16.__begin_;
      operator delete(v16.__begin_);
    }
    uint64_t v12 = std::vector<int>::vector(&__p, a1);
    double Variance = Nightingale::uiLogProcessor::getVariance(a4, a5, (uint64_t)v12, &__p);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    char v14 = 1;
  }
  *(double *)a3 = Center;
  *(unsigned char *)(a3 + 8) = v14;
  *(double *)(a3 + 16) = Variance;
  *(unsigned char *)(a3 + 24) = v14;
}

float Nightingale::uiLogProcessor::getACyclePeriodSlideMeanStd(float *a1, const std::vector<int> *a2, const std::vector<int> *a3, uint64_t a4)
{
  std::vector<int>::vector(&v17, a2);
  Nightingale::uiLogProcessor::calSlideMeanStd(&v17, 1, (uint64_t)&v18, a1[6], a1[7]);
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
  if (*(unsigned __int8 *)(a4 + 36) == v19)
  {
    if (*(unsigned char *)(a4 + 36))
    {
      float v7 = v18;
      *(float *)(a4 + 32) = v7;
    }
  }
  else if (*(unsigned char *)(a4 + 36))
  {
    *(unsigned char *)(a4 + 36) = 0;
  }
  else
  {
    float v8 = v18;
    *(float *)(a4 + 32) = v8;
    *(unsigned char *)(a4 + 36) = 1;
  }
  if (*(unsigned __int8 *)(a4 + 44) == v21)
  {
    if (*(unsigned char *)(a4 + 44))
    {
      float v9 = v20;
      *(float *)(a4 + 40) = v9;
    }
  }
  else if (*(unsigned char *)(a4 + 44))
  {
    *(unsigned char *)(a4 + 44) = 0;
  }
  else
  {
    float v10 = v20;
    *(float *)(a4 + 40) = v10;
    *(unsigned char *)(a4 + 44) = 1;
  }
  std::vector<int>::vector(&__p, a3);
  Nightingale::uiLogProcessor::calSlideMeanStd(&__p, 1, (uint64_t)&v13, a1[8], a1[9]);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (*(unsigned __int8 *)(a4 + 52) == v14)
  {
    if (*(unsigned char *)(a4 + 52))
    {
      float result = v13;
      *(float *)(a4 + 48) = result;
    }
  }
  else if (*(unsigned char *)(a4 + 52))
  {
    *(unsigned char *)(a4 + 52) = 0;
  }
  else
  {
    float result = v13;
    *(float *)(a4 + 48) = result;
    *(unsigned char *)(a4 + 52) = 1;
  }
  if (*(unsigned __int8 *)(a4 + 60) == v16)
  {
    if (*(unsigned char *)(a4 + 60))
    {
      float result = v15;
      *(float *)(a4 + 56) = result;
    }
  }
  else if (*(unsigned char *)(a4 + 60))
  {
    *(unsigned char *)(a4 + 60) = 0;
  }
  else
  {
    float result = v15;
    *(float *)(a4 + 56) = result;
    *(unsigned char *)(a4 + 60) = 1;
  }
  return result;
}

void Nightingale::uiLogProcessor::getDLStartProcDate(uint64_t a1, uint64_t a2, uint64_t a3, int **a4, uint64_t a5)
{
  int v5 = *(unsigned __int8 *)(a3 + 60);
  int v6 = *(_DWORD *)(a3 + 56) - 39;
  if (!*(unsigned char *)(a3 + 60)) {
    int v6 = 0;
  }
  *(_DWORD *)a5 = v6;
  *(unsigned char *)(a5 + 4) = v5;
  float v7 = *a4;
  float v8 = a4[1];
  uint64_t v9 = (char *)v8 - (char *)*a4;
  if (v8 != *a4)
  {
    uint64_t v10 = 0;
    unint64_t v11 = v9 / 60;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    while (1)
    {
      int v13 = *v7;
      v7 += 15;
      int v12 = v13;
      if (v5)
      {
        if (v12 == v6) {
          break;
        }
      }
      if (v11 == ++v10) {
        return;
      }
    }
    *(_DWORD *)(a5 + 8) = v10;
    *(unsigned char *)(a5 + 12) = 1;
  }
}

void Nightingale::uiLogProcessor::getCyclePeriodMeanStdAllCycles(float *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (v7 != v8)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    unint64_t v11 = std::vector<Nightingale::cycleInfo>::__init_with_size[abi:nn180100]<Nightingale::cycleInfo*,Nightingale::cycleInfo*>(&v54, v7, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 5));
    if ((int)(-1431655765 * ((a2[1] - *a2) >> 5)) >= 1)
    {
      unint64_t v12 = -1431655765 * ((a2[1] - *a2) >> 5);
      do
      {
        uint64_t NumPeriodsToKeepUR = Nightingale::uiLogProcessor::getNumPeriodsToKeepUR((uint64_t)v11, a3, (uint64_t)a2);
        int v14 = NumPeriodsToKeepUR;
        unint64_t ShouldBeInSlideCC = Nightingale::uiLogProcessor::getWhatShouldBeInSlideCC(NumPeriodsToKeepUR, v15, &v54, a5);
        unint64_t v17 = HIDWORD(ShouldBeInSlideCC);
        Nightingale::uiLogProcessor::genCycleSlide(&v54, ShouldBeInSlideCC, a3, &v53);
        if (v14 >= (int)v17) {
          int v14 = v17;
        }
        memset(v51, 0, sizeof(v51));
        std::vector<Nightingale::cycleInfo>::__init_with_size[abi:nn180100]<Nightingale::cycleInfo*,Nightingale::cycleInfo*>(v51, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5));
        Nightingale::uiLogProcessor::genPeriodSlide(v51, v14, a3, a4, &v52);
        *(void *)buf = v51;
        std::vector<Nightingale::cycleInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
        memset(&v50, 0, sizeof(v50));
        std::vector<int>::pointer begin = v53.__begin_;
        int64_t v19 = (char *)v53.__end_ - (char *)v53.__begin_;
        if (v53.__end_ != v53.__begin_)
        {
          std::vector<int>::__vallocate[abi:nn180100](&v50, v19 >> 2);
          std::vector<int>::pointer end = v50.__end_;
          memmove(v50.__end_, begin, v19);
          v50.__end_ = (std::vector<int>::pointer)((char *)end + v19);
        }
        memset(&__p, 0, sizeof(__p));
        std::vector<int>::pointer v21 = v52.__begin_;
        int64_t v22 = (char *)v52.__end_ - (char *)v52.__begin_;
        if (v52.__end_ != v52.__begin_)
        {
          std::vector<int>::__vallocate[abi:nn180100](&__p, v22 >> 2);
          std::vector<int>::pointer v23 = __p.__end_;
          memmove(__p.__end_, v21, v22);
          __p.__end_ = (std::vector<int>::pointer)((char *)v23 + v22);
        }
        Nightingale::uiLogProcessor::getACyclePeriodSlideMeanStd(a1, &v50, &__p, v55 - 96);
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        if (v50.__begin_)
        {
          v50.__end_ = v50.__begin_;
          operator delete(v50.__begin_);
        }
        unint64_t v24 = v12 - 1;
        if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) <= (v12 - 1)) {
          goto LABEL_45;
        }
        unint64_t v25 = (v12 - 1);
        uint64_t v26 = *a2 + 96 * v24;
        int v27 = *(_DWORD *)(v55 - 64);
        *(unsigned char *)(v26 + 36) = *(unsigned char *)(v55 - 60);
        *(_DWORD *)(v26 + 32) = v27;
        if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) <= v25) {
          goto LABEL_45;
        }
        uint64_t v28 = *a2 + 96 * v24;
        int v29 = *(_DWORD *)(v55 - 56);
        *(unsigned char *)(v28 + 44) = *(unsigned char *)(v55 - 52);
        *(_DWORD *)(v28 + 40) = v29;
        if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) <= v25
          || (uint64_t v30 = *a2 + 96 * v24,
              int v31 = *(_DWORD *)(v55 - 48),
              *(unsigned char *)(v30 + 52) = *(unsigned char *)(v55 - 44),
              *(_DWORD *)(v30 + 48) = v31,
              0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) <= v25))
        {
LABEL_45:
          abort();
        }
        uint64_t v32 = *a2 + 96 * v24;
        int v33 = *(_DWORD *)(v55 - 40);
        *(unsigned char *)(v32 + 60) = *(unsigned char *)(v55 - 36);
        *(_DWORD *)(v32 + 56) = v33;
        uint64_t v34 = v55;
        uint64_t v35 = *(void **)(v55 - 24);
        if (v35)
        {
          *(void *)(v55 - 16) = v35;
          operator delete(v35);
        }
        uint64_t v55 = v34 - 96;
        if (ha_sensitive_logging_is_enabled())
        {
          log = ha_get_log();
          if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v38 = *a2;
            if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) <= v25) {
              goto LABEL_45;
            }
            uint64_t v39 = v38 + 96 * v24;
            float v40 = -1.0;
            float v41 = -1.0;
            if (*(unsigned char *)(v39 + 36)) {
              float v41 = *(float *)(v39 + 32);
            }
            uint64_t v42 = v38 + 96 * v24;
            if (*(unsigned char *)(v42 + 44)) {
              float v40 = *(float *)(v42 + 40);
            }
            *(_DWORD *)buf = 134218240;
            *(double *)&uint8_t buf[4] = v41;
            __int16 v58 = 2048;
            double v59 = v40;
            _os_log_debug_impl(&dword_22F10E000, log, OS_LOG_TYPE_DEBUG, "\t \"cycleLenMean\": %6.4f, \"cycleLenVar\": %6.4f, ", buf, 0x16u);
          }
        }
        if (v12 >= 2)
        {
          if (ha_sensitive_logging_is_enabled())
          {
            uint64_t v37 = ha_get_log();
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v43 = *a2;
              if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) <= v25) {
                goto LABEL_45;
              }
              uint64_t v44 = v43 + 96 * v24;
              float v45 = -1.0;
              float v46 = -1.0;
              if (*(unsigned char *)(v44 + 52)) {
                float v46 = *(float *)(v44 + 48);
              }
              uint64_t v47 = v43 + 96 * v24;
              if (*(unsigned char *)(v47 + 60)) {
                float v45 = *(float *)(v47 + 56);
              }
              *(_DWORD *)buf = 134218240;
              *(double *)&uint8_t buf[4] = v46;
              __int16 v58 = 2048;
              double v59 = v45;
              _os_log_debug_impl(&dword_22F10E000, v37, OS_LOG_TYPE_DEBUG, "\"periodLenMean\": %6.4f, \"periodLenVar\": %6.4f},", buf, 0x16u);
            }
          }
        }
        if (v52.__begin_)
        {
          v52.__end_ = v52.__begin_;
          operator delete(v52.__begin_);
        }
        unint64_t v11 = v53.__begin_;
        if (v53.__begin_)
        {
          v53.__end_ = v53.__begin_;
          operator delete(v53.__begin_);
        }
        --v12;
      }
      while (v24 + 1 > 1);
    }
    v53.__begin_ = (std::vector<int>::pointer)&v54;
    std::vector<Nightingale::cycleInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v53);
  }
}

void Nightingale::uiLogProcessor::getAvgCycleLenForSomeCycleReproductive(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  std::vector<int> __p = 0;
  std::vector<int>::pointer v23 = 0;
  uint64_t v24 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    int v6 = a4;
    int v8 = 0;
    int v9 = -a4;
    uint64_t v20 = a2[1];
    do
    {
      if (Nightingale::phaseFactorProcessor::vPhasesContainsAPhase((uint64_t)&__p, (unsigned __int8 **)(v4 + 72), 0))
      {
        int v10 = -1 - 1431655765 * ((unint64_t)(a2[1] - *a2) >> 5);
        if (v8 + v6 < v10) {
          int v10 = v8 + v6;
        }
        if (!*(unsigned char *)(v4 + 68)) {
          *(unsigned char *)(v4 + 68) = 1;
        }
        *(_DWORD *)(v4 + 64) = 0;
        if (((v8 - v6) & ~((v8 - v6) >> 31)) <= v10)
        {
          int v11 = 0;
          int v12 = 0;
          unint64_t v13 = v9 & ~(v9 >> 31);
          uint64_t v14 = 96 * v13;
          uint64_t v15 = v10;
          do
          {
            if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) <= v13) {
LABEL_23:
            }
              abort();
            uint64_t v16 = *a2 + v14;
            if (*(unsigned char *)(v16 + 24)
              && !Nightingale::phaseFactorProcessor::vPhasesContainsAPhase((uint64_t)&__p, (unsigned __int8 **)(v16 + 72), 0))
            {
              uint64_t v17 = *a2;
              if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) <= v13) {
                goto LABEL_23;
              }
              if (!*(unsigned char *)(v17 + v14 + 24))
              {
                uint64_t v19 = std::__throw_bad_optional_access[abi:nn180100]();
                Nightingale::uiLogProcessor::hist_process(v19);
                return;
              }
              int v12 = v12 + *(_DWORD *)(v17 + v14 + 20) - *(_DWORD *)(v17 + v14) + 1;
              ++v11;
            }
            v14 += 96;
          }
          while ((uint64_t)v13++ < v15);
          int v6 = a4;
          uint64_t v5 = v20;
          if (v11 > 0)
          {
            *(float *)(v4 + 64) = (float)v12 / (float)v11;
            *(unsigned char *)(v4 + 68) = 1;
          }
        }
      }
      ++v8;
      v4 += 96;
      ++v9;
    }
    while (v4 != v5);
    if (__p)
    {
      std::vector<int>::pointer v23 = __p;
      operator delete(__p);
    }
  }
}

void Nightingale::uiLogProcessor::hist_process(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 28) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 36) = 0;
  *(unsigned char *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 44) = 0;
  *(unsigned char *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 52) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 60) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 68) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 76) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 84) = 0;
  *(unsigned char *)(a3 + 88) = 0;
  *(unsigned char *)(a3 + 92) = 0;
  *(unsigned char *)(a3 + 96) = 0;
  *(unsigned char *)(a3 + 100) = 0;
  *(unsigned char *)(a3 + 104) = 0;
  *(unsigned char *)(a3 + 108) = 0;
  *(unsigned char *)(a3 + 112) = 0;
  *(unsigned char *)(a3 + 116) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    Nightingale::uiLogProcessor::process((int **)a1, a2, (uint64_t)__p);
    std::vector<Nightingale::cycleInfo>::__vdeallocate((uint64_t *)a3);
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v14;
    __p[1] = 0;
    uint64_t v14 = 0;
    __p[0] = 0;
    *(_OWORD *)(a3 + 72) = v18;
    *(_OWORD *)(a3 + 88) = v19;
    *(_OWORD *)(a3 + 104) = v20[0];
    *(_OWORD *)(a3 + 113) = *(_OWORD *)((char *)v20 + 9);
    *(_OWORD *)(a3 + 24) = v15;
    *(_OWORD *)(a3 + 40) = v16;
    *(_OWORD *)(a3 + 56) = v17;
    std::vector<int>::pointer v21 = __p;
    std::vector<Nightingale::cycleInfo>::__destroy_vector::operator()[abi:nn180100](&v21);
    Nightingale::uiLogProcessor::addCycleEnd(v6, (uint64_t *)a3);
    Nightingale::uiLogProcessor::opk2Cycles(v7, (uint64_t *)a1, (void *)a3);
    int v8 = *(int **)a1;
    uint64_t v9 = *(void *)(a1 + 8) - *(void *)a1;
    if (v9)
    {
      unint64_t v10 = v9 / 60;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      while (v8[3] != 2)
      {
        v8 += 15;
        if (!--v10) {
          goto LABEL_9;
        }
      }
      *(_DWORD *)(a3 + 72) = *v8;
      *(unsigned char *)(a3 + 76) = 1;
    }
LABEL_9:
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v14 = 0;
    Nightingale::uiCycleFactorProcess::tagCycleInfoReproductive((uint64_t)__p, (uint64_t *)a3, a2);
    Nightingale::uiLogProcessor::getAvgCycleLenForSomeCycleReproductive(v11, (uint64_t *)a3, v12, 6);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void Nightingale::uiLogProcessor::process(int **a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a3 + 28) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 36) = 0;
  *(unsigned char *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 44) = 0;
  *(unsigned char *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 52) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 60) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 68) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 76) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 84) = 0;
  *(unsigned char *)(a3 + 88) = 0;
  *(unsigned char *)(a3 + 92) = 0;
  *(unsigned char *)(a3 + 96) = 0;
  *(unsigned char *)(a3 + 100) = 0;
  *(unsigned char *)(a3 + 104) = 0;
  *(unsigned char *)(a3 + 108) = 0;
  *(unsigned char *)(a3 + 112) = 0;
  *(unsigned char *)(a3 + 116) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<int> __p = 0;
  uint64_t v87 = 0;
  int v88 = 0;
  double v83 = 0;
  v84 = 0;
  int v85 = 0;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v7 = *a1;
    while (v7[1] > 5)
    {
      v7 += 15;
      if (v7 == v4)
      {
        int v75 = *v5;
        goto LABEL_7;
      }
    }
    int v75 = *v7;
LABEL_7:
    if (v5 != v4)
    {
      int v8 = 0;
      unint64_t v9 = 0;
      do
      {
        unint64_t v10 = &v5[15 * v9];
        if ((v10[1] - 1) <= 3)
        {
          uint64_t v11 = v87;
          if (v87 >= v88)
          {
            unint64_t v13 = (char *)__p;
            uint64_t v14 = (v87 - (unsigned char *)__p) >> 2;
            unint64_t v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62) {
              goto LABEL_152;
            }
            uint64_t v16 = v88 - (unsigned char *)__p;
            if ((v88 - (unsigned char *)__p) >> 1 > v15) {
              unint64_t v15 = v16 >> 1;
            }
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17)
            {
              long long v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v88, v17);
              unint64_t v13 = (char *)__p;
              uint64_t v11 = v87;
            }
            else
            {
              long long v18 = 0;
            }
            long long v19 = (int *)&v18[4 * v14];
            int *v19 = *v10;
            uint64_t v12 = (char *)(v19 + 1);
            while (v11 != v13)
            {
              int v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *--long long v19 = v20;
            }
            std::vector<int> __p = v19;
            uint64_t v87 = v12;
            int v88 = &v18[4 * v17];
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v87 = *v10;
            uint64_t v12 = v11 + 4;
          }
          uint64_t v87 = v12;
          if (0xEEEEEEEEEEEEEEEFLL * (a1[1] - *a1) <= v9) {
LABEL_152:
          }
            abort();
          std::vector<int>::pointer v21 = &(*a1)[15 * v9 + 1];
          int64_t v22 = v84;
          if (v84 >= v85)
          {
            std::vector<int>::pointer v23 = (char *)v83;
            uint64_t v24 = (v84 - (unsigned char *)v83) >> 2;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 62) {
              goto LABEL_152;
            }
            uint64_t v26 = v85 - (unsigned char *)v83;
            if ((v85 - (unsigned char *)v83) >> 1 > v25) {
              unint64_t v25 = v26 >> 1;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v25;
            }
            if (v27)
            {
              uint64_t v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v85, v27);
              std::vector<int>::pointer v23 = (char *)v83;
              int64_t v22 = v84;
            }
            else
            {
              uint64_t v28 = 0;
            }
            int v29 = &v28[4 * v24];
            *(_DWORD *)int v29 = *v21;
            int v8 = v29 + 4;
            while (v22 != v23)
            {
              int v30 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v29 - 1) = v30;
              v29 -= 4;
            }
            double v83 = v29;
            v84 = v8;
            int v85 = &v28[4 * v27];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            *(_DWORD *)v84 = *v21;
            int v8 = v22 + 4;
          }
          v84 = v8;
          uint64_t v5 = *a1;
          uint64_t v4 = a1[1];
        }
        ++v9;
      }
      while (0xEEEEEEEEEEEEEEEFLL * (v4 - v5) > v9);
      if (__p != v87)
      {
        if (v83 == v8) {
          goto LABEL_111;
        }
        if (ha_sensitive_logging_is_enabled())
        {
          log = ha_get_log();
          if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::process();
          }
        }
        if (__p == v87)
        {
          if (ha_sensitive_logging_is_enabled())
          {
            int v33 = ha_get_log();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
              Nightingale::uiLogProcessor::genCycleSlide();
            }
          }
        }
        else
        {
          if (v87 - (unsigned char *)__p != 4)
          {
            unint64_t v56 = 0;
            do
            {
              if (ha_sensitive_logging_is_enabled())
              {
                int64_t v57 = ha_get_log();
                if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
                {
                  int v58 = *((_DWORD *)__p + v56);
                  *(_DWORD *)buf = 67109120;
                  int v90 = v58;
                  _os_log_debug_impl(&dword_22F10E000, v57, OS_LOG_TYPE_DEBUG, "%d, ", buf, 8u);
                }
              }
              ++v56;
            }
            while (v56 < ((v87 - (unsigned char *)__p) >> 2) - 1);
          }
          if (ha_sensitive_logging_is_enabled())
          {
            uint64_t v32 = ha_get_log();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
              Nightingale::uiLogProcessor::process();
            }
          }
        }
        if (ha_sensitive_logging_is_enabled())
        {
          uint64_t v34 = ha_get_log();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::process();
          }
        }
        if (v83 == v84)
        {
          uint64_t is_enabled = ha_sensitive_logging_is_enabled();
          if (is_enabled)
          {
            uint64_t v37 = ha_get_log();
            uint64_t is_enabled = os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG);
            if (is_enabled) {
              Nightingale::uiLogProcessor::genCycleSlide();
            }
          }
        }
        else
        {
          if (v84 - (unsigned char *)v83 != 4)
          {
            unint64_t v59 = 0;
            do
            {
              if (ha_sensitive_logging_is_enabled())
              {
                uint64_t v60 = ha_get_log();
                if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
                {
                  int v61 = *((_DWORD *)v83 + v59);
                  *(_DWORD *)buf = 67109120;
                  int v90 = v61;
                  _os_log_debug_impl(&dword_22F10E000, v60, OS_LOG_TYPE_DEBUG, "%d, ", buf, 8u);
                }
              }
              ++v59;
            }
            while (v59 < ((v84 - (unsigned char *)v83) >> 2) - 1);
          }
          uint64_t is_enabled = ha_sensitive_logging_is_enabled();
          if (is_enabled)
          {
            unint64_t v36 = ha_get_log();
            uint64_t is_enabled = os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG);
            if (is_enabled) {
              Nightingale::uiLogProcessor::process();
            }
          }
        }
        long long v80 = 0;
        __dst = 0;
        uint64_t v82 = 0;
        uint64_t v38 = __p;
        int64_t v39 = v87 - (unsigned char *)__p;
        if (v87 != __p)
        {
          std::vector<int>::__vallocate[abi:nn180100](&v80, v39 >> 2);
          float v40 = (char *)__dst;
          uint64_t is_enabled = (uint64_t)memmove(__dst, v38, v39);
          __dst = &v40[v39];
        }
        uint64_t v77 = 0;
        uint64_t v78 = 0;
        uint64_t v79 = 0;
        float v41 = v83;
        int64_t v42 = v84 - (unsigned char *)v83;
        if (v84 != v83)
        {
          std::vector<int>::__vallocate[abi:nn180100](&v77, v42 >> 2);
          uint64_t v43 = (char *)v78;
          uint64_t is_enabled = (uint64_t)memmove(v78, v41, v42);
          uint64_t v78 = &v43[v42];
        }
        Nightingale::uiLogProcessor::extractPeriods(is_enabled, (uint64_t)&v80, (int **)&v77, v75, a2, (uint64_t *)a3);
        if (v77)
        {
          uint64_t v78 = v77;
          operator delete(v77);
        }
        if (v80)
        {
          __dst = v80;
          operator delete(v80);
        }
        if (ha_sensitive_logging_is_enabled())
        {
          uint64_t v44 = ha_get_log();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::process();
          }
        }
        uint64_t v45 = *(void *)(a3 + 8);
        if (*(void *)a3 == v45)
        {
          if (ha_sensitive_logging_is_enabled())
          {
            uint64_t v47 = ha_get_log();
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
              Nightingale::uiLogProcessor::genCycleSlide();
            }
          }
        }
        else
        {
          if (v45 - *(void *)a3 != 96)
          {
            uint64_t v62 = 0;
            for (unint64_t i = 0; i < -1 - 0x5555555555555555 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5); ++i)
            {
              if (ha_sensitive_logging_is_enabled())
              {
                uint64_t v64 = ha_get_log();
                if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5) <= i) {
                    goto LABEL_152;
                  }
                  int v65 = *(_DWORD *)(*(void *)a3 + v62);
                  *(_DWORD *)buf = 67109120;
                  int v90 = v65;
                  _os_log_debug_impl(&dword_22F10E000, v64, OS_LOG_TYPE_DEBUG, "%d, ", buf, 8u);
                }
              }
              v62 += 96;
            }
          }
          if (ha_sensitive_logging_is_enabled())
          {
            float v46 = ha_get_log();
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
              Nightingale::uiLogProcessor::process();
            }
          }
        }
        if (ha_sensitive_logging_is_enabled())
        {
          std::vector<int>::pointer v48 = ha_get_log();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::process();
          }
        }
        uint64_t v49 = *(void *)(a3 + 8);
        if (*(void *)a3 == v49)
        {
          if (ha_sensitive_logging_is_enabled())
          {
            int v51 = ha_get_log();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG)) {
              Nightingale::uiLogProcessor::genCycleSlide();
            }
          }
        }
        else
        {
          if (v49 - *(void *)a3 != 96)
          {
            uint64_t v66 = 0;
            for (unint64_t j = 0; j < -1 - 0x5555555555555555 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5); ++j)
            {
              if (ha_sensitive_logging_is_enabled())
              {
                uint64_t v68 = ha_get_log();
                if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5) <= j) {
                    goto LABEL_152;
                  }
                  uint64_t v69 = *(void *)a3 + v66;
                  if (*(unsigned char *)(v69 + 8)) {
                    int v70 = *(_DWORD *)(v69 + 4);
                  }
                  else {
                    int v70 = -1;
                  }
                  *(_DWORD *)buf = 67109120;
                  int v90 = v70;
                  _os_log_debug_impl(&dword_22F10E000, v68, OS_LOG_TYPE_DEBUG, "%d, ", buf, 8u);
                }
              }
              v66 += 96;
            }
          }
          if (ha_sensitive_logging_is_enabled())
          {
            std::vector<int> v50 = ha_get_log();
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
              Nightingale::uiLogProcessor::process();
            }
          }
        }
        if (ha_sensitive_logging_is_enabled())
        {
          std::vector<int> v52 = ha_get_log();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::process();
          }
        }
        uint64_t v53 = *(void *)(a3 + 8);
        if (*(void *)a3 == v53)
        {
          if (ha_sensitive_logging_is_enabled())
          {
            uint64_t v55 = ha_get_log();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG)) {
              Nightingale::uiLogProcessor::process();
            }
          }
        }
        else
        {
          if (v53 - *(void *)a3 != 96)
          {
            unint64_t v71 = 0;
            uint64_t v72 = 28;
            do
            {
              if (ha_sensitive_logging_is_enabled())
              {
                uint64_t v73 = ha_get_log();
                if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5) <= v71) {
                    goto LABEL_152;
                  }
                  int v74 = *(unsigned __int8 *)(*(void *)a3 + v72);
                  *(_DWORD *)buf = 67109120;
                  int v90 = v74;
                  _os_log_debug_impl(&dword_22F10E000, v73, OS_LOG_TYPE_DEBUG, "%d, ", buf, 8u);
                }
              }
              ++v71;
              v72 += 96;
            }
            while (v71 < -1 - 0x5555555555555555 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5));
          }
          if (ha_sensitive_logging_is_enabled())
          {
            uint64_t v54 = ha_get_log();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG)) {
              Nightingale::uiLogProcessor::process();
            }
          }
        }
      }
    }
  }
  int v8 = (char *)v83;
LABEL_111:
  if (v8)
  {
    v84 = v8;
    operator delete(v8);
  }
  if (__p)
  {
    uint64_t v87 = (char *)__p;
    operator delete(__p);
  }
}

void Nightingale::uiCycleFactorProcess::tagCycleInfoReproductive(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*a3 != a3[1])
  {
    std::vector<int> __p = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v4 = a2[1];
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 5);
    if ((int)v5 >= 1)
    {
      if (v5 != 1)
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        uint64_t v10 = (v5 - 1);
        do
        {
          uint64_t v11 = *a2;
          if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) <= v9) {
LABEL_17:
          }
            abort();
          if (*(unsigned char *)(v11 + v8 + 24))
          {
            Nightingale::phaseFactorProcessor::tagPhaseJDayRange(a1, *(unsigned int *)(v11 + v8) | ((unint64_t)*(unsigned int *)(v11 + v8 + 20) << 32), a3, (unint64_t *)&__p);
            if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) <= v9) {
              goto LABEL_17;
            }
            uint64_t v12 = (void **)(*a2 + v8 + 72);
            if (v12 != &__p) {
              std::vector<Nightingale::Phase>::__assign_with_size[abi:nn180100]<Nightingale::Phase*,Nightingale::Phase*>(v12, (char *)__p, v16, v16 - (unsigned char *)__p);
            }
          }
          ++v9;
          v8 += 96;
        }
        while (v10 != v9);
        uint64_t v4 = a2[1];
      }
      Nightingale::phaseFactorProcessor::tagPhaseJDayRange(a1, *(unsigned int *)(v4 - 96) | 0xFFFFFFFF00000000, a3, (unint64_t *)&__p);
      unint64_t v13 = (void **)(a2[1] - 24);
      uint64_t v14 = (char *)__p;
      if (v13 != &__p)
      {
        std::vector<Nightingale::Phase>::__assign_with_size[abi:nn180100]<Nightingale::Phase*,Nightingale::Phase*>(v13, (char *)__p, v16, v16 - (unsigned char *)__p);
        uint64_t v14 = (char *)__p;
      }
      if (v14)
      {
        uint64_t v16 = v14;
        operator delete(v14);
      }
    }
  }
}

void Nightingale::uiLogProcessor::extractCycles(float *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(unsigned char *)(a5 + 28) = 0;
  *(unsigned char *)(a5 + 32) = 0;
  *(unsigned char *)(a5 + 36) = 0;
  *(unsigned char *)(a5 + 40) = 0;
  *(unsigned char *)(a5 + 44) = 0;
  *(unsigned char *)(a5 + 48) = 0;
  *(unsigned char *)(a5 + 52) = 0;
  *(unsigned char *)(a5 + 56) = 0;
  *(unsigned char *)(a5 + 60) = 0;
  *(unsigned char *)(a5 + 64) = 0;
  *(unsigned char *)(a5 + 68) = 0;
  *(unsigned char *)(a5 + 72) = 0;
  *(unsigned char *)(a5 + 76) = 0;
  *(unsigned char *)(a5 + 80) = 0;
  *(unsigned char *)(a5 + 84) = 0;
  *(unsigned char *)(a5 + 88) = 0;
  *(unsigned char *)(a5 + 92) = 0;
  *(unsigned char *)(a5 + 96) = 0;
  *(unsigned char *)(a5 + 100) = 0;
  *(unsigned char *)(a5 + 104) = 0;
  *(unsigned char *)(a5 + 108) = 0;
  *(unsigned char *)(a5 + 112) = 0;
  *(unsigned char *)(a5 + 116) = 0;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 24) = 0;
  *(void *)(a5 + 16) = 0;
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    Nightingale::uiLogProcessor::process((int **)a2, a3, (uint64_t)__p);
    std::vector<Nightingale::cycleInfo>::__vdeallocate((uint64_t *)a5);
    *(_OWORD *)a5 = *(_OWORD *)__p;
    *(void *)(a5 + 16) = v16;
    __p[1] = 0;
    uint64_t v16 = 0;
    __p[0] = 0;
    *(_OWORD *)(a5 + 72) = v20;
    *(_OWORD *)(a5 + 88) = v21;
    *(_OWORD *)(a5 + 104) = v22[0];
    *(_OWORD *)(a5 + 113) = *(_OWORD *)((char *)v22 + 9);
    *(_OWORD *)(a5 + 24) = v17;
    *(_OWORD *)(a5 + 40) = v18;
    *(_OWORD *)(a5 + 56) = v19;
    std::vector<int>::pointer v23 = __p;
    std::vector<Nightingale::cycleInfo>::__destroy_vector::operator()[abi:nn180100](&v23);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
    if (*(void *)a5 != *(void *)(a5 + 8))
    {
      Nightingale::uiLogProcessor::addCycleEnd(v10, (uint64_t *)a5);
      Nightingale::uiCycleFactorProcess::tagCycleInfoReproductive((uint64_t)__p, (uint64_t *)a5, a3);
      Nightingale::uiLogProcessor::opk2Cycles(v11, (uint64_t *)a2, (void *)a5);
      Nightingale::uiLogProcessor::getJDayUILog(v12, (uint64_t *)a2, a3, a5);
      Nightingale::uiLogProcessor::guardConfig(v13, a4, a5 + 24);
      Nightingale::uiLogProcessor::getInPeriodNow(v14, a5, a4);
      Nightingale::uiLogProcessor::getCyclePeriodMeanStdAllCycles(a1, (uint64_t *)a5, a4, *(unsigned __int8 *)(a5 + 128), *(void *)(a5 + 120));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void Nightingale::uiLogProcessor::print_anUILog(uint64_t a1, int **a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (*a2 != a2[1])
  {
    if (ha_sensitive_logging_is_enabled())
    {
      log = ha_get_log();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    uint64_t v4 = *a2;
    unint64_t v5 = a2[1];
    if (*a2 != v5)
    {
      unint64_t v6 = 0;
      do
      {
        if (ha_sensitive_logging_is_enabled())
        {
          uint64_t v7 = ha_get_log();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          {
            int v24 = *v4;
            int v25 = *((unsigned __int8 *)v4 + 28);
            *(_DWORD *)buf = 67109376;
            int v52 = v24;
            __int16 v53 = 1024;
            int v54 = v25;
            _os_log_debug_impl(&dword_22F10E000, v7, OS_LOG_TYPE_DEBUG, "\t{\"jDayPeriodStart\": %d, \"isDeterminant\": %d", buf, 0xEu);
          }
        }
        if (ha_sensitive_logging_is_enabled())
        {
          uint64_t v8 = ha_get_log();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::print_anUILog();
          }
        }
        if (ha_sensitive_logging_is_enabled())
        {
          unint64_t v9 = ha_get_log();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::print_anUILog();
          }
        }
        if (ha_sensitive_logging_is_enabled())
        {
          uint64_t v10 = ha_get_log();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::print_anUILog();
          }
        }
        if (ha_sensitive_logging_is_enabled())
        {
          uint64_t v11 = ha_get_log();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::print_anUILog();
          }
        }
        if (ha_sensitive_logging_is_enabled())
        {
          uint64_t v12 = ha_get_log();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::print_anUILog();
          }
        }
        if (ha_sensitive_logging_is_enabled())
        {
          uint64_t v13 = ha_get_log();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::print_anUILog();
          }
        }
        if (ha_sensitive_logging_is_enabled())
        {
          uint64_t v14 = ha_get_log();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::print_anUILog();
          }
        }
        if (ha_sensitive_logging_is_enabled())
        {
          unint64_t v15 = ha_get_log();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::print_anUILog(&v49, v50);
          }
        }
        uint64_t v16 = *((void *)v4 + 9);
        uint64_t v17 = *((void *)v4 + 10);
        if (v16 != v17)
        {
          unint64_t v18 = 0;
          do
          {
            if (ha_sensitive_logging_is_enabled())
            {
              long long v19 = ha_get_log();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
              {
                int v21 = *(unsigned __int8 *)(v16 + v18);
                *(_DWORD *)buf = 67109120;
                int v52 = v21;
                _os_log_debug_impl(&dword_22F10E000, v19, OS_LOG_TYPE_DEBUG, "%d ", buf, 8u);
              }
            }
            if (~*((void *)v4 + 9) + *((void *)v4 + 10) > v18)
            {
              if (ha_sensitive_logging_is_enabled())
              {
                long long v20 = ha_get_log();
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
                  Nightingale::uiLogProcessor::print_anUILog(&v47, v48);
                }
              }
            }
            ++v18;
          }
          while (v16 + v18 != v17);
        }
        if (ha_sensitive_logging_is_enabled())
        {
          int64_t v22 = ha_get_log();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
            Nightingale::uiLogProcessor::print_anUILog(&v45, v46);
          }
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 5) - 1 > v6)
        {
          if (ha_sensitive_logging_is_enabled())
          {
            std::vector<int>::pointer v23 = ha_get_log();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
              Nightingale::uiLogProcessor::print_anUILog(&v43, v44);
            }
          }
        }
        ++v6;
        v4 += 24;
      }
      while (v4 != v5);
    }
    if (ha_sensitive_logging_is_enabled())
    {
      uint64_t v26 = ha_get_log();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      unint64_t v27 = ha_get_log();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      uint64_t v28 = ha_get_log();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      int v29 = ha_get_log();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      int v30 = ha_get_log();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      int v31 = ha_get_log();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      uint64_t v32 = ha_get_log();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      int v33 = ha_get_log();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      uint64_t v34 = ha_get_log();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      uint64_t v35 = ha_get_log();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      unint64_t v36 = ha_get_log();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      uint64_t v37 = ha_get_log();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      uint64_t v38 = ha_get_log();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      int64_t v39 = ha_get_log();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      float v40 = ha_get_log();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      float v41 = ha_get_log();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      int64_t v42 = ha_get_log();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
        Nightingale::uiLogProcessor::print_anUILog();
      }
    }
  }
}

void *Nightingale::PhaseSet::add(void *result, unsigned int a2)
{
  if (a2 >= 9) {
    abort();
  }
  *result |= 1 << a2;
  return result;
}

void *Nightingale::PhaseSet::remove(void *result, unsigned int a2)
{
  if (a2 >= 9) {
    abort();
  }
  *result &= ~(1 << a2);
  return result;
}

uint64_t Nightingale::PhaseSet::contains(void *a1, unsigned int a2)
{
  if (a2 >= 9) {
    abort();
  }
  return (*a1 >> a2) & 1;
}

void Nightingale::PhaseSet::phasesOnInPhaseSet2Vec(void *a1, unint64_t *a2)
{
  uint64_t v4 = (unsigned __int8 *)operator new(9uLL);
  uint64_t v5 = 0;
  *(void *)uint64_t v4 = 0x706050403020100;
  unsigned char v4[8] = 8;
  do
  {
    unint64_t v6 = v4[v5];
    if (v6 >= 9) {
LABEL_26:
    }
      abort();
    if ((*a1 >> v6))
    {
      uint64_t v8 = (unsigned char *)a2[1];
      unint64_t v7 = a2[2];
      if ((unint64_t)v8 >= v7)
      {
        unint64_t v10 = *a2;
        uint64_t v11 = &v8[-*a2];
        unint64_t v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0) {
          goto LABEL_26;
        }
        unint64_t v13 = v7 - v10;
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v12;
        }
        if (v14) {
          unint64_t v15 = (char *)operator new(v14);
        }
        else {
          unint64_t v15 = 0;
        }
        uint64_t v16 = &v11[(void)v15];
        uint64_t v17 = &v11[(void)v15];
        unsigned char *v17 = v6;
        unint64_t v9 = v17 + 1;
        if (v8 != (unsigned char *)v10)
        {
          unint64_t v18 = &v8[~v10];
          do
          {
            char v19 = *--v8;
            (v18--)[(void)v15] = v19;
          }
          while (v8 != (unsigned char *)v10);
          uint64_t v16 = v15;
        }
        *a2 = (unint64_t)v16;
        a2[1] = (unint64_t)v9;
        a2[2] = (unint64_t)&v15[v14];
        if (v10) {
          operator delete((void *)v10);
        }
      }
      else
      {
        unsigned char *v8 = v6;
        unint64_t v9 = v8 + 1;
      }
      a2[1] = (unint64_t)v9;
    }
    ++v5;
  }
  while (v5 != 9);
  operator delete(v4);
}

__n128 Nightingale::uiProcessForLstm::uiProcessForLstm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  __n128 result = *a5;
  *(void *)(a1 + 40) = a5[1].n128_u64[0];
  *(__n128 *)(a1 + 24) = result;
  return result;
}

{
  __n128 result;

  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  __n128 result = *a5;
  *(void *)(a1 + 40) = a5[1].n128_u64[0];
  *(__n128 *)(a1 + 24) = result;
  return result;
}

void Nightingale::uiProcessForLstm::prepareUiLogForDL(uint64_t a1, uint64_t a2, uint64_t a3, float **a4, float **a5)
{
  if (*(unsigned char *)(a2 + 4))
  {
    if (*(unsigned char *)(a2 + 12)) {
      BOOL v5 = *(unsigned char *)(a2 + 20) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 8);
      Nightingale::uiProcessForLstm::prepareDLSliceFlow((uint64_t **)a1, a2, a3);
      Nightingale::uiProcessForLstm::prepareDLSliceCycleMeanStd(a1, v9, a4, a5);
    }
  }
}

void Nightingale::uiProcessForLstm::prepareDLSliceFlow(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  BOOL v5 = a1[2];
  if (*((unsigned char *)v5 + 12)) {
    unint64_t v6 = (int *)(v5 + 1);
  }
  else {
    unint64_t v6 = (int *)&Nightingale::DEFAULT_PERIOD_LEN_EXTEND_1DAYPERIOD;
  }
  int v7 = *v6;
  uint64_t IdxOfDailyInGreaterThanJayDay = Nightingale::getIdxOfDailyInGreaterThanJayDay((uint64_t)*a1, *((_DWORD *)a1 + 12));
  if ((IdxOfDailyInGreaterThanJayDay & 0xFF00000000) != 0)
  {
    int v60 = IdxOfDailyInGreaterThanJayDay;
    std::vector<int> __p = 0;
    uint64_t v62 = 0;
    unint64_t v63 = 0;
    uint64_t v9 = a1[1];
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (*v9 != v11)
    {
      unint64_t v12 = 0;
      do
      {
        if (*(unsigned char *)(v10 + 8)) {
          BOOL v13 = *(_DWORD *)v10 == *(_DWORD *)(v10 + 4);
        }
        else {
          BOOL v13 = 0;
        }
        BOOL v14 = !v13 || v7 < 2;
        if (!v14)
        {
          int v15 = 1;
          do
          {
            int v16 = *(_DWORD *)v10 + v15;
            if (v16 >= *((_DWORD *)a1 + 12) && v16 <= *((_DWORD *)a1 + 13))
            {
              if (v12 >= (int *)v63)
              {
                unint64_t v18 = __p;
                uint64_t v19 = v12 - __p;
                unint64_t v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 62) {
LABEL_96:
                }
                  abort();
                uint64_t v21 = v63 - (char *)__p;
                if ((v63 - (char *)__p) >> 1 > v20) {
                  unint64_t v20 = v21 >> 1;
                }
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v22 = v20;
                }
                if (v22)
                {
                  std::vector<int>::pointer v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v63, v22);
                  unint64_t v18 = __p;
                  unint64_t v12 = v62;
                }
                else
                {
                  std::vector<int>::pointer v23 = 0;
                }
                int v24 = (int *)&v23[4 * v19];
                int *v24 = v16;
                uint64_t v17 = v24 + 1;
                while (v12 != v18)
                {
                  int v25 = *--v12;
                  *--int v24 = v25;
                }
                std::vector<int> __p = v24;
                unint64_t v63 = &v23[4 * v22];
                if (v18) {
                  operator delete(v18);
                }
              }
              else
              {
                *unint64_t v12 = v16;
                uint64_t v17 = v12 + 1;
              }
              uint64_t v62 = v17;
              unint64_t v12 = v17;
            }
            ++v15;
          }
          while (v15 != v7);
        }
        v10 += 96;
      }
      while (v10 != v11);
    }
    int v26 = *((_DWORD *)a1 + 12);
    if (v26 <= *((_DWORD *)a1 + 13))
    {
      int v27 = v60;
      do
      {
        uint64_t v28 = **a1;
        if (0xEEEEEEEEEEEEEEEFLL * (((*a1)[1] - v28) >> 2) > v27 && v26 == *(_DWORD *)(v28 + 60 * v27))
        {
          uint64_t v29 = *(int *)(v28 + 60 * v27 + 4);
          int v30 = 0;
          if (v29 <= 4) {
            int v30 = dword_22F166A64[v29];
          }
          uint64_t v32 = *(float **)(a3 + 8);
          unint64_t v31 = *(void *)(a3 + 16);
          if ((unint64_t)v32 >= v31)
          {
            uint64_t v44 = *(float **)a3;
            uint64_t v45 = ((uint64_t)v32 - *(void *)a3) >> 2;
            unint64_t v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62) {
              goto LABEL_96;
            }
            uint64_t v47 = v31 - (void)v44;
            if (v47 >> 1 > v46) {
              unint64_t v46 = v47 >> 1;
            }
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v48 = v46;
            }
            if (v48)
            {
              char v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a3 + 16, v48);
              uint64_t v44 = *(float **)a3;
              uint64_t v32 = *(float **)(a3 + 8);
            }
            else
            {
              char v49 = 0;
            }
            std::vector<int> v50 = &v49[4 * v45];
            *(_DWORD *)std::vector<int> v50 = v30;
            int v33 = v50 + 4;
            while (v32 != v44)
            {
              int v51 = *((_DWORD *)v32-- - 1);
              *((_DWORD *)v50 - 1) = v51;
              v50 -= 4;
            }
            *(void *)a3 = v50;
            *(void *)(a3 + 8) = v33;
            *(void *)(a3 + 16) = &v49[4 * v48];
            if (v44) {
              operator delete(v44);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v32 = v30;
            int v33 = v32 + 1;
          }
          *(void *)(a3 + 8) = v33;
          ++v27;
        }
        else
        {
          uint64_t v35 = *(float **)(a3 + 8);
          unint64_t v34 = *(void *)(a3 + 16);
          if ((unint64_t)v35 >= v34)
          {
            unint64_t v36 = *(float **)a3;
            uint64_t v37 = ((uint64_t)v35 - *(void *)a3) >> 2;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62) {
              goto LABEL_96;
            }
            uint64_t v39 = v34 - (void)v36;
            if (v39 >> 1 > v38) {
              unint64_t v38 = v39 >> 1;
            }
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v38;
            }
            if (v40)
            {
              float v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a3 + 16, v40);
              unint64_t v36 = *(float **)a3;
              uint64_t v35 = *(float **)(a3 + 8);
            }
            else
            {
              float v41 = 0;
            }
            int64_t v42 = &v41[4 * v37];
            *(_DWORD *)int64_t v42 = 0;
            int v33 = v42 + 4;
            while (v35 != v36)
            {
              int v43 = *((_DWORD *)v35-- - 1);
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            *(void *)a3 = v42;
            *(void *)(a3 + 8) = v33;
            *(void *)(a3 + 16) = &v41[4 * v40];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            float *v35 = 0.0;
            int v33 = v35 + 1;
          }
          *(void *)(a3 + 8) = v33;
        }
        if (__p != v62 && v26 == *__p && v27 >= 1)
        {
          unint64_t v53 = (v27 - 1);
          uint64_t v54 = **a1;
          if (0xEEEEEEEEEEEEEEEFLL * (((*a1)[1] - v54) >> 2) <= v53) {
            goto LABEL_96;
          }
          if ((*(_DWORD *)(v54 + 60 * v53 + 4) - 5) <= 0xFFFFFFFB) {
            *(v33 - 1) = 0x40000000;
          }
          if (v62 != __p + 1) {
            memmove(__p, __p + 1, (char *)v62 - (char *)(__p + 1));
          }
          --v62;
        }
        BOOL v14 = v26++ < *((_DWORD *)a1 + 13);
      }
      while (v14);
    }
    uint64_t v55 = *(float **)a3;
    uint64_t v56 = *(void *)(a3 + 8);
    if (*(void *)a3 != v56)
    {
      float v57 = *((float *)a1 + 7);
      if (v57 != 0.0)
      {
        float v58 = *((float *)a1 + 6);
        unint64_t v59 = (v56 - (uint64_t)v55) >> 2;
        if (v59 <= 1) {
          unint64_t v59 = 1;
        }
        do
        {
          *uint64_t v55 = (float)(*v55 - v58) / v57;
          ++v55;
          --v59;
        }
        while (v59);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void Nightingale::uiProcessForLstm::prepareDLSliceCycleMeanStd(uint64_t a1, uint64_t a2, float **a3, float **a4)
{
  uint64_t v4 = **(void **)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 8) + 8) - v4) >> 5);
  if ((int)v5 >= 2)
  {
    int v9 = v5 - 1;
    uint64_t v10 = -1431655765 * ((*(void *)(*(void *)(a1 + 8) + 8) - v4) >> 5);
    for (uint64_t i = 96 * v5; ; i -= 96)
    {
      unint64_t v12 = (v10 - 1);
      if (v5 <= v12) {
        goto LABEL_36;
      }
      int v13 = *(_DWORD *)(v4 + 96 * v12);
      int v14 = *(_DWORD *)(a1 + 48);
      BOOL v15 = __OFSUB__(v14, v13);
      int v16 = v14 - v13;
      if (v16 < 0 == v15) {
        break;
      }
      if ((int)--v10 <= 0) {
        return;
      }
    }
    uint64_t v17 = v4 + 96 * v12;
    if (*(unsigned char *)(v17 + 36))
    {
      uint64_t v18 = v4 + 96 * v12;
      if (*(unsigned char *)(v18 + 44))
      {
        float v19 = roundf(*(float *)(v17 + 32)) - (float)v16;
        float v20 = sqrtf(*(float *)(v18 + 40));
        int v21 = *(_DWORD *)(a1 + 52);
        uint64_t v22 = v4 + 96 * v12;
        if (*(unsigned char *)(v22 + 24))
        {
          int v23 = *(_DWORD *)(v22 + 20);
          if (v21 >= v23) {
            int v21 = v23;
          }
        }
        Nightingale::uiProcessForLstm::fillUpMeanStdVec(v19, v20, a1, v14, v21, (uint64_t)a3, (uint64_t)a4);
        if ((int)v10 < v9)
        {
          uint64_t v25 = 0;
          while (1)
          {
            uint64_t v26 = **(void **)(a1 + 8);
            if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 8) + 8) - v26) >> 5) <= v10 + v25) {
              break;
            }
            uint64_t v27 = v26 + i;
            if (*(unsigned char *)(v26 + i + 36))
            {
              if (*(unsigned char *)(v27 + 44))
              {
                uint64_t v28 = v26 + i;
                if (*(unsigned char *)(v28 + 24)) {
                  Nightingale::uiProcessForLstm::fillUpMeanStdVec(roundf(*(float *)(v27 + 32)), sqrtf(*(float *)(v27 + 40)), v24, *(_DWORD *)v27, *(_DWORD *)(v28 + 20), (uint64_t)a3, (uint64_t)a4);
                }
              }
            }
            int v29 = v10 + v25++;
            i += 96;
            if (v9 <= v29 + 1) {
              goto LABEL_21;
            }
          }
LABEL_36:
          abort();
        }
LABEL_21:
        uint64_t v30 = *(void *)(*(void *)(a1 + 8) + 8);
        int v31 = *(_DWORD *)(v30 - 96);
        if (*(_DWORD *)(a1 + 48) < v31 && *(unsigned char *)(v30 - 60) && *(unsigned char *)(v30 - 52)) {
          Nightingale::uiProcessForLstm::fillUpMeanStdVec(roundf(*(float *)(v30 - 64)), sqrtf(*(float *)(v30 - 56)), v24, v31, *(_DWORD *)(a1 + 52), (uint64_t)a3, (uint64_t)a4);
        }
        uint64_t v32 = *a3;
        int v33 = a3[1];
        if (*a3 != v33)
        {
          float v34 = *(float *)(a1 + 36);
          if (v34 != 0.0)
          {
            float v35 = *(float *)(a1 + 32);
            unint64_t v36 = v33 - v32;
            if (v36 <= 1) {
              unint64_t v36 = 1;
            }
            do
            {
              float *v32 = (float)(*v32 - v35) / v34;
              ++v32;
              --v36;
            }
            while (v36);
          }
        }
        uint64_t v37 = *a4;
        unint64_t v38 = a4[1];
        if (*a4 != v38)
        {
          float v39 = *(float *)(a1 + 44);
          if (v39 != 0.0)
          {
            float v40 = *(float *)(a1 + 40);
            unint64_t v41 = v38 - v37;
            if (v41 <= 1) {
              unint64_t v41 = 1;
            }
            do
            {
              *uint64_t v37 = (float)(*v37 - v40) / v39;
              ++v37;
              --v41;
            }
            while (v41);
          }
        }
      }
    }
  }
}

void Nightingale::uiProcessForLstm::fillUpMeanStdVec(float a1, float a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  if (a4 <= a5)
  {
    int v10 = a4;
    uint64_t v13 = a6 + 16;
    uint64_t v14 = a7 + 16;
    do
    {
      int v16 = *(float **)(a6 + 8);
      unint64_t v15 = *(void *)(a6 + 16);
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v18 = *(float **)a6;
        uint64_t v19 = ((uint64_t)v16 - *(void *)a6) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          goto LABEL_38;
        }
        uint64_t v21 = v15 - (void)v18;
        if (v21 >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          int v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v13, v22);
          uint64_t v18 = *(float **)a6;
          int v16 = *(float **)(a6 + 8);
        }
        else
        {
          int v23 = 0;
        }
        uint64_t v24 = (float *)&v23[4 * v19];
        float *v24 = a1;
        uint64_t v17 = v24 + 1;
        while (v16 != v18)
        {
          int v25 = *((_DWORD *)v16-- - 1);
          *((_DWORD *)v24-- - 1) = v25;
        }
        *(void *)a6 = v24;
        *(void *)(a6 + 8) = v17;
        *(void *)(a6 + 16) = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        float *v16 = a1;
        uint64_t v17 = v16 + 1;
      }
      *(void *)(a6 + 8) = v17;
      uint64_t v27 = *(float **)(a7 + 8);
      unint64_t v26 = *(void *)(a7 + 16);
      if ((unint64_t)v27 >= v26)
      {
        int v29 = *(float **)a7;
        uint64_t v30 = ((uint64_t)v27 - *(void *)a7) >> 2;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62) {
LABEL_38:
        }
          abort();
        uint64_t v32 = v26 - (void)v29;
        if (v32 >> 1 > v31) {
          unint64_t v31 = v32 >> 1;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          float v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v14, v33);
          int v29 = *(float **)a7;
          uint64_t v27 = *(float **)(a7 + 8);
        }
        else
        {
          float v34 = 0;
        }
        float v35 = (float *)&v34[4 * v30];
        float *v35 = a2;
        uint64_t v28 = v35 + 1;
        while (v27 != v29)
        {
          int v36 = *((_DWORD *)v27-- - 1);
          *((_DWORD *)v35-- - 1) = v36;
        }
        *(void *)a7 = v35;
        *(void *)(a7 + 8) = v28;
        *(void *)(a7 + 16) = &v34[4 * v33];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *uint64_t v27 = a2;
        uint64_t v28 = v27 + 1;
      }
      a1 = a1 + -1.0;
      *(void *)(a7 + 8) = v28;
    }
    while (v10++ != a5);
  }
}

char *std::vector<std::pair<int,int>>::__assign_with_size[abi:nn180100]<std::pair<int,int>*,std::pair<int,int>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = a1[2];
  __n128 result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    uint64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      unint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6++;
          *(void *)uint64_t v27 = v28;
          v27 += 8;
          v26 += 8;
        }
        while (v6 != a3);
      }
      uint64_t v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 8 * v19;
        do
        {
          uint64_t v22 = *v6++;
          *(void *)__n128 result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      int v23 = v12;
      if (v20 != a3)
      {
        uint64_t v24 = v12;
        do
        {
          uint64_t v25 = *v20++;
          *(void *)uint64_t v24 = v25;
          v24 += 8;
          v23 += 8;
        }
        while (v20 != a3);
      }
      uint64_t v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<Nightingale::PhaseSet>::__vallocate[abi:nn180100](a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    unint64_t v15 = v14;
    if (v6 != a3)
    {
      unint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v6++;
        *(void *)unint64_t v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    uint64_t v17 = (char *)(v15 - v12);
  }
  void *v13 = &v17[(void)v12];
  return result;
}

void std::vector<Nightingale::cycleInfo>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<Nightingale::cycleInfo>::__clear[abi:nn180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void OUTLINED_FUNCTION_2_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

double OUTLINED_FUNCTION_6@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 8) = a2;
  return *(float *)(*a1 - 4);
}

void OUTLINED_FUNCTION_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

unsigned char *OUTLINED_FUNCTION_9(unsigned char *result, unsigned char *a2)
{
  char *result = 0;
  *a2 = 0;
  return result;
}

double OUTLINED_FUNCTION_10(float a1, float a2, uint64_t a3, uint64_t a4, double *a5, uint64_t a6, float *a7)
{
  double result = a1;
  *a7 = a2;
  *a5 = result;
  return result;
}

void OUTLINED_FUNCTION_11(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 8u);
}

unint64_t Nightingale::phaseFactorProcessor::detectPhaseJDayRange(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = (char *)*a3;
  uint64_t v4 = (char *)a3[1];
  if (v4 == (char *)*a3)
  {
    unsigned int v17 = -1;
  }
  else
  {
    unint64_t v5 = (uint64_t)&v4[-*a3] >> 2;
    unint64_t v6 = v5;
    int v7 = (char *)*a3;
    do
    {
      unint64_t v8 = v6 >> 1;
      int v9 = (int *)&v7[4 * (v6 >> 1)];
      int v11 = *v9;
      uint64_t v10 = (char *)(v9 + 1);
      v6 += ~(v6 >> 1);
      if (v11 > (int)a2) {
        unint64_t v6 = v8;
      }
      else {
        int v7 = v10;
      }
    }
    while (v6);
    uint64_t v12 = ((unint64_t)(v7 - v3) >> 2) + 0xFFFFFFFF;
    uint64_t v4 = (char *)*a3;
    do
    {
      unint64_t v13 = v5 >> 1;
      uint64_t v14 = (int *)&v4[4 * (v5 >> 1)];
      int v16 = *v14;
      unint64_t v15 = (char *)(v14 + 1);
      v5 += ~(v5 >> 1);
      if (v16 > SHIDWORD(a2)) {
        unint64_t v5 = v13;
      }
      else {
        uint64_t v4 = v15;
      }
    }
    while (v5);
    unsigned int v17 = v12;
  }
  return (v17 | ((unint64_t)((unint64_t)(v4 - v3) >> 2) << 32)) - 0x100000000;
}

uint64_t Nightingale::phaseFactorProcessor::detectPhases(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = Nightingale::phaseFactorProcessor::detectPhaseJDayRange(a1, a2, a4);
  unint64_t v9 = HIDWORD(v8);
  if ((HIDWORD(v8) & v8) == 0xFFFFFFFF && v7 != -1) {
    return 0;
  }
  if (v8 == -1) {
    int v11 = 0;
  }
  else {
    int v11 = v8;
  }
  if (v7 == -1) {
    LODWORD(v9) = ((unint64_t)(a4[1] - *a4) >> 2) - 1;
  }
  if (v11 <= (int)v9)
  {
    int isEndOfAPhase = 0;
    BOOL isStartOfAPhase = 0;
    unsigned __int8 v12 = 0;
    unint64_t v16 = v11;
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    int v19 = v9 + 1;
    do
    {
      if (v18 == v17)
      {
        uint64_t v18 = v17;
      }
      else
      {
        unint64_t v20 = 0;
        do
        {
          uint64_t v21 = a4[3];
          if (v16 >= (a4[4] - v21) >> 3) {
            abort();
          }
          uint64_t v23 = *(void *)(v21 + 8 * v16);
          uint64_t v22 = Nightingale::PhaseSet::contains(&v23, *(unsigned __int8 *)(v17 + v20));
          if (v22)
          {
            if (!isStartOfAPhase) {
              BOOL isStartOfAPhase = Nightingale::phaseFactorProcessor::isStartOfAPhase(v22, v16, a2, a4, 0);
            }
            unsigned __int8 v12 = 1;
          }
          else if (!(_BYTE)isEndOfAPhase)
          {
            int isEndOfAPhase = Nightingale::phaseFactorProcessor::isEndOfAPhase(v22, v16, a2, a4, 0);
          }
          ++v20;
          uint64_t v17 = *a3;
          uint64_t v18 = a3[1];
        }
        while (v18 - *a3 > v20);
      }
      ++v16;
    }
    while (v19 != v16);
  }
  else
  {
    unsigned __int8 v12 = 0;
    BOOL isStartOfAPhase = 0;
    int isEndOfAPhase = 0;
  }
  return v12 | (isStartOfAPhase << 8) | (isEndOfAPhase << 16);
}

BOOL Nightingale::phaseFactorProcessor::isStartOfAPhase(uint64_t a1, int a2, uint64_t a3, void *a4, unsigned int a5)
{
  if (a2 >= (unint64_t)((uint64_t)(a4[1] - *a4) >> 2)) {
    goto LABEL_13;
  }
  int v5 = *(_DWORD *)(*a4 + 4 * a2);
  if (v5 < (int)a3 || v5 > SHIDWORD(a3)) {
    return 0;
  }
  if (a2)
  {
    unint64_t v7 = a2 - 1;
    uint64_t v8 = a4[3];
    if (v7 < (a4[4] - v8) >> 3) {
      return !Nightingale::PhaseSet::contains((void *)(v8 + 8 * v7), a5);
    }
LABEL_13:
    abort();
  }
  return 1;
}

BOOL Nightingale::phaseFactorProcessor::isEndOfAPhase(uint64_t a1, int a2, uint64_t a3, void *a4, unsigned int a5)
{
  if (a2 >= (unint64_t)((uint64_t)(a4[1] - *a4) >> 2)) {
    goto LABEL_13;
  }
  int v5 = *(_DWORD *)(*a4 + 4 * a2);
  BOOL v6 = v5 >= (int)a3 && v5 <= SHIDWORD(a3);
  if (!v6 || !a2) {
    return 0;
  }
  unint64_t v7 = a2 - 1;
  uint64_t v8 = a4[3];
  if (v7 >= (a4[4] - v8) >> 3) {
LABEL_13:
  }
    abort();
  return (Nightingale::PhaseSet::contains((void *)(v8 + 8 * v7), a5) & 1) != 0;
}

uint64_t Nightingale::phaseFactorProcessor::jDayLastEndOfAPhaseSet(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v3 = a2[1] - *a2;
  if (!(v3 >> 2)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = a3[1];
  if (v6 == *a3)
  {
    uint64_t v10 = a3[1];
LABEL_9:
    if ((int)(v3 >> 2) >= 2)
    {
      uint64_t v11 = (uint64_t)((v3 << 30) - 0x200000000) >> 32;
      while (v10 == v6)
      {
        uint64_t v10 = v6;
LABEL_21:
        if (v11-- <= 0) {
          goto LABEL_27;
        }
      }
      unint64_t v12 = 0;
      unint64_t v13 = v11 + 1;
      while (1)
      {
        uint64_t v14 = a2[3];
        if (v11 >= (unint64_t)((a2[4] - v14) >> 3)) {
          goto LABEL_40;
        }
        if (Nightingale::PhaseSet::contains((void *)(v14 + 8 * v11), *(unsigned __int8 *)(v6 + v12)))
        {
          uint64_t v15 = a2[3];
          if (v13 >= (a2[4] - v15) >> 3 || a3[1] - *a3 <= v12) {
            goto LABEL_40;
          }
          if ((Nightingale::PhaseSet::contains((void *)(v15 + 8 * v13), *(unsigned __int8 *)(*a3 + v12)) & 1) == 0) {
            break;
          }
        }
        ++v12;
        uint64_t v6 = *a3;
        uint64_t v10 = a3[1];
        if (v10 - *a3 <= v12) {
          goto LABEL_21;
        }
      }
      if (v13 >= (uint64_t)(a2[1] - *a2) >> 2) {
LABEL_40:
      }
        abort();
      uint64_t v17 = *(unsigned int *)(*a2 + 4 * v13);
      if (v17 != -1) {
        return v17;
      }
    }
LABEL_27:
    uint64_t v18 = *a3;
    if (a3[1] != *a3)
    {
      unint64_t v19 = 0;
      uint64_t v17 = 0xFFFFFFFFLL;
      while (1)
      {
        unint64_t v20 = (void *)a2[3];
        if ((void *)a2[4] == v20) {
          goto LABEL_40;
        }
        if (Nightingale::PhaseSet::contains(v20, *(unsigned __int8 *)(v18 + v19)))
        {
          uint64_t v21 = a2[3];
          if ((unint64_t)(a2[4] - v21) <= 8 || a3[1] - *a3 <= v19) {
            goto LABEL_40;
          }
          if ((Nightingale::PhaseSet::contains((void *)(v21 + 8), *(unsigned __int8 *)(*a3 + v19)) & 1) == 0)
          {
            if (a2[1] - *a2 <= 4uLL) {
              goto LABEL_40;
            }
            uint64_t v17 = *(unsigned int *)(*a2 + 4);
          }
        }
        ++v19;
        uint64_t v18 = *a3;
        if (a3[1] - *a3 <= v19) {
          return v17;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t v7 = 0;
  unint64_t v8 = (uint64_t)((v3 << 30) - 0x100000000) >> 32;
  uint64_t v6 = *a3;
  while (1)
  {
    uint64_t v9 = a2[3];
    if (v8 >= (a2[4] - v9) >> 3) {
      goto LABEL_40;
    }
    if (Nightingale::PhaseSet::contains((void *)(v9 + 8 * v8), *(unsigned __int8 *)(v6 + v7))) {
      return 4294967294;
    }
    ++v7;
    uint64_t v6 = *a3;
    uint64_t v10 = a3[1];
    if (v10 - *a3 <= v7) {
      goto LABEL_9;
    }
  }
}

float Nightingale::phaseFactorProcessor::getjDayStartOfAPhasetojDayRangeStart(uint64_t a1, unint64_t a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 == v5) {
    return NAN;
  }
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  if (v7 == v8) {
    return NAN;
  }
  unint64_t v9 = (v5 - v4) >> 2;
  if (v9 != (v8 - v7) >> 3 || (int)v9 < 1) {
    return NAN;
  }
  int v12 = a2;
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  unint64_t v15 = HIDWORD(a2);
  while (1)
  {
    if (v9 <= v14) {
      goto LABEL_23;
    }
    int v16 = *(_DWORD *)(v4 + 4 * v14);
    if (v16 >= v12 && v16 < (int)v15)
    {
      uint64_t v18 = a3[3];
      if (v14 >= (a3[4] - v18) >> 3) {
        goto LABEL_23;
      }
      if (Nightingale::PhaseSet::contains((void *)(v18 + v13), a4))
      {
        if (!v14) {
          break;
        }
        uint64_t v19 = a3[3];
        if (v14 - 1 >= (a3[4] - v19) >> 3) {
          goto LABEL_23;
        }
        if ((Nightingale::PhaseSet::contains((void *)(v19 + v13 - 8), a4) & 1) == 0) {
          break;
        }
      }
    }
    ++v14;
    uint64_t v4 = *a3;
    uint64_t v20 = a3[1] - *a3;
    unint64_t v9 = v20 >> 2;
    v13 += 8;
    if ((uint64_t)v14 >= (int)((unint64_t)v20 >> 2)) {
      return NAN;
    }
  }
  if (v14 >= (a3[1] - *a3) >> 2) {
LABEL_23:
  }
    abort();
  return (float)(*(_DWORD *)(*a3 + 4 * v14) - v12);
}

float Nightingale::phaseFactorProcessor::getjDayEndOfAPhasetojDayRangeEnd(uint64_t a1, unint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v4 = a3[1];
  if (*a3 == v4) {
    return NAN;
  }
  uint64_t v6 = a3[3];
  uint64_t v7 = a3[4];
  if (v6 == v7) {
    return NAN;
  }
  uint64_t v8 = v4 - *a3;
  if (v8 >> 2 != (v7 - v6) >> 3 || (int)(v8 >> 2) < 2) {
    return NAN;
  }
  int v11 = a2;
  unint64_t v12 = HIDWORD(a2);
  for (uint64_t i = ((unint64_t)v8 >> 2); ; --i)
  {
    uint64_t v14 = i - 1;
    unint64_t v15 = (i - 1);
    if (v15 >= (uint64_t)(a3[1] - *a3) >> 2) {
      goto LABEL_22;
    }
    int v16 = *(_DWORD *)(*a3 + 4 * v15);
    if (v16 >= v11 && v16 < (int)v12)
    {
      uint64_t v18 = a3[3];
      if (v15 >= (a3[4] - v18) >> 3) {
        goto LABEL_22;
      }
      if ((Nightingale::PhaseSet::contains((void *)(v18 + 8 * v15), a4) & 1) == 0)
      {
        unint64_t v19 = (i - 2);
        uint64_t v20 = a3[3];
        if (v19 >= (a3[4] - v20) >> 3) {
          goto LABEL_22;
        }
        if (Nightingale::PhaseSet::contains((void *)(v20 + 8 * v19), a4)) {
          break;
        }
      }
    }
    if ((unint64_t)(v14 + 1) <= 2) {
      return NAN;
    }
  }
  if (v15 >= (uint64_t)(a3[1] - *a3) >> 2) {
LABEL_22:
  }
    abort();
  return (float)((int)v12 - *(_DWORD *)(*a3 + 4 * v15));
}

void Nightingale::phaseFactorProcessor::getjDayStartOfVPhasestojDayRangeStart(float *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, float **a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v6 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v10 = 0;
    do
    {
      float v11 = Nightingale::phaseFactorProcessor::getjDayStartOfAPhasetojDayRangeStart((uint64_t)a1, a2, a3, *(unsigned __int8 *)(v6 + v10));
      float v12 = v11;
      uint64_t v14 = a5[1];
      unint64_t v13 = (unint64_t)a5[2];
      if ((unint64_t)v14 >= v13)
      {
        a1 = *a5;
        uint64_t v16 = v14 - *a5;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          abort();
        }
        uint64_t v18 = v13 - (void)a1;
        if (v18 >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(a5 + 2), v19);
          a1 = *a5;
          uint64_t v14 = a5[1];
        }
        else
        {
          uint64_t v20 = 0;
        }
        uint64_t v21 = (float *)&v20[4 * v16];
        *uint64_t v21 = v12;
        unint64_t v15 = v21 + 1;
        while (v14 != a1)
        {
          int v22 = *((_DWORD *)v14-- - 1);
          *((_DWORD *)v21-- - 1) = v22;
        }
        *a5 = v21;
        a5[1] = v15;
        a5[2] = (float *)&v20[4 * v19];
        if (a1) {
          operator delete(a1);
        }
      }
      else
      {
        float *v14 = v11;
        unint64_t v15 = v14 + 1;
      }
      a5[1] = v15;
      ++v10;
      uint64_t v6 = *a4;
    }
    while (a4[1] - *a4 > v10);
  }
}

void Nightingale::phaseFactorProcessor::getjDayEndOfVPhasestojDayRangeEnd(float *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, float **a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v6 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v10 = 0;
    do
    {
      float v11 = Nightingale::phaseFactorProcessor::getjDayEndOfAPhasetojDayRangeEnd((uint64_t)a1, a2, a3, *(unsigned __int8 *)(v6 + v10));
      float v12 = v11;
      uint64_t v14 = a5[1];
      unint64_t v13 = (unint64_t)a5[2];
      if ((unint64_t)v14 >= v13)
      {
        a1 = *a5;
        uint64_t v16 = v14 - *a5;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          abort();
        }
        uint64_t v18 = v13 - (void)a1;
        if (v18 >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(a5 + 2), v19);
          a1 = *a5;
          uint64_t v14 = a5[1];
        }
        else
        {
          uint64_t v20 = 0;
        }
        uint64_t v21 = (float *)&v20[4 * v16];
        *uint64_t v21 = v12;
        unint64_t v15 = v21 + 1;
        while (v14 != a1)
        {
          int v22 = *((_DWORD *)v14-- - 1);
          *((_DWORD *)v21-- - 1) = v22;
        }
        *a5 = v21;
        a5[1] = v15;
        a5[2] = (float *)&v20[4 * v19];
        if (a1) {
          operator delete(a1);
        }
      }
      else
      {
        float *v14 = v11;
        unint64_t v15 = v14 + 1;
      }
      a5[1] = v15;
      ++v10;
      uint64_t v6 = *a4;
    }
    while (a4[1] - *a4 > v10);
  }
}

uint64_t Nightingale::phaseFactorProcessor::findEndOfReproductiveBfrADate(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v5 = *(unsigned char **)a2;
  uint64_t v6 = *(unsigned char **)(a2 + 8);
  if (v5 == v6 || *(void *)(a2 + 24) == *(void *)(a2 + 32)) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v8 = v6 - v5;
  uint64_t v9 = (v6 - v5) >> 2;
  if ((int)v9 < 1)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = (v8 >> 2);
    while (1)
    {
      if (v9 == v10) {
        abort();
      }
      if (*(_DWORD *)&v5[4 * v10] > a4) {
        break;
      }
      if (v11 == ++v10) {
        goto LABEL_12;
      }
    }
    LODWORD(v9) = v10;
  }
LABEL_12:
  uint64_t v13 = std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&v34, v5, &v5[4 * v9]);
  uint64_t v14 = *(const void **)(a2 + 24);
  __dst = 0;
  uint64_t v33 = 0;
  unint64_t v31 = 0;
  if (v9)
  {
    std::vector<Nightingale::PhaseSet>::__vallocate[abi:nn180100](&v31, v9);
    unint64_t v15 = (char *)__dst;
    uint64_t v13 = (uint64_t)memmove(__dst, v14, 8 * v9);
    uint64_t v16 = &v15[8 * v9];
    __dst = v16;
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v17 = v34;
  int64_t v18 = v35 - (unsigned char *)v34;
  if (v35 != v34)
  {
    std::vector<int>::__vallocate[abi:nn180100](&v25, v18 >> 2);
    unint64_t v19 = (char *)v26;
    uint64_t v13 = (uint64_t)memmove(v26, v17, v18);
    unint64_t v26 = &v19[v18];
    uint64_t v16 = (char *)__dst;
  }
  std::vector<int> __p = 0;
  int v29 = 0;
  uint64_t v30 = 0;
  uint64_t v20 = v31;
  int64_t v21 = v16 - (unsigned char *)v31;
  if (v16 != v31)
  {
    std::vector<Nightingale::PhaseSet>::__vallocate[abi:nn180100](&__p, v21 >> 3);
    int v22 = (char *)v29;
    uint64_t v13 = (uint64_t)memmove(v29, v20, v21);
    int v29 = &v22[v21];
  }
  int v23 = Nightingale::phaseFactorProcessor::jDayLastEndOfAPhaseSet(v13, &v25, a3);
  if (v23 < 0) {
    uint64_t v12 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v12 = v23;
  }
  if (__p)
  {
    int v29 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    unint64_t v26 = v25;
    operator delete(v25);
  }
  if (v31)
  {
    __dst = v31;
    operator delete(v31);
  }
  if (v34)
  {
    float v35 = v34;
    operator delete(v34);
  }
  return v12;
}

uint64_t Nightingale::phaseFactorProcessor::ccMenstCycleLen_handling(uint64_t *a1, void *a2, uint64_t *a3)
{
  int EndOfAPhaseSet = Nightingale::phaseFactorProcessor::jDayLastEndOfAPhaseSet((uint64_t)a1, a2, a3);
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (ha_sensitive_logging_is_enabled())
  {
    log = ha_get_log();
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG)) {
      Nightingale::phaseFactorProcessor::ccMenstCycleLen_handling(EndOfAPhaseSet, log);
    }
  }
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 == v8) {
    return 0;
  }
  if (EndOfAPhaseSet == -2)
  {
    unint64_t v16 = (unint64_t)(v8 - v9) >> 3;
    if ((int)v16 >= 2) {
      return 2;
    }
    else {
      return v16;
    }
  }
  else
  {
    uint64_t result = (unint64_t)(v5 - v6) >> 3;
    if (EndOfAPhaseSet != -1)
    {
      unint64_t v11 = v8 - v9;
      uint64_t v12 = (v8 - v9) >> 3;
      if ((int)v12 >= 1)
      {
        uint64_t v13 = (result - v12);
        uint64_t v14 = (v11 >> 3);
        for (uint64_t i = (int *)(v9 + 4); ; i += 2)
        {
          if (!v12) {
            abort();
          }
          if (*i >= EndOfAPhaseSet) {
            break;
          }
          uint64_t result = (result - 1);
          --v12;
          if (!--v14) {
            return v13;
          }
        }
      }
    }
  }
  return result;
}

void Nightingale::phaseFactorProcessor::tagPhaseJDayRange(uint64_t a1, unint64_t a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v5 = HIDWORD(a2);
  unint64_t v6 = Nightingale::phaseFactorProcessor::detectPhaseJDayRange(a1, a2, a3);
  unint64_t v7 = HIDWORD(v6);
  a4[1] = *a4;
  std::vector<int> __p = 0;
  std::vector<int> v50 = 0;
  uint64_t v51 = 0;
  if ((HIDWORD(v6) & v6) != 0xFFFFFFFF || v5 == -1)
  {
    if (v6 == -1) {
      int v9 = 0;
    }
    else {
      int v9 = v6;
    }
    if (v5 == -1) {
      LODWORD(v7) = ((unint64_t)(a3[1] - *a3) >> 2) - 1;
    }
    if (v9 <= (int)v7)
    {
      unint64_t v10 = v9;
      int v41 = v7 + 1;
      while (1)
      {
        uint64_t v11 = a3[3];
        if (v10 >= (a3[4] - v11) >> 3) {
LABEL_57:
        }
          abort();
        unint64_t v43 = v10;
        uint64_t v12 = *(void *)(v11 + 8 * v10);
        uint64_t v47 = 0;
        uint64_t v48 = v12;
        uint64_t v45 = 0;
        unint64_t v46 = 0;
        Nightingale::PhaseSet::phasesOnInPhaseSet2Vec(&v48, (unint64_t *)&v45);
        uint64_t v13 = v45;
        uint64_t v14 = v46;
        if (v46 == v45)
        {
          uint64_t v13 = v46;
          if (!v46) {
            goto LABEL_50;
          }
        }
        else
        {
          unint64_t v15 = 0;
          do
          {
            unsigned __int8 v44 = 0;
            unsigned int v16 = v13[v15];
            unsigned __int8 v44 = v13[v15];
            unint64_t v17 = (char *)__p;
            int64_t v18 = (unsigned __int8 *)__p;
            unint64_t v19 = v50 - (unsigned char *)__p;
            if (v50 != __p)
            {
              int64_t v18 = (unsigned __int8 *)__p;
              unint64_t v20 = v50 - (unsigned char *)__p;
              do
              {
                int64_t v21 = &v18[v20 >> 1];
                unsigned int v23 = *v21;
                int v22 = v21 + 1;
                unint64_t v24 = v20 >> 1;
                v20 += ~(v20 >> 1);
                if (v23 < v16) {
                  int64_t v18 = v22;
                }
                else {
                  unint64_t v20 = v24;
                }
              }
              while (v20);
            }
            if (v18 == v50 || v16 < *v18)
            {
              unint64_t v26 = (unsigned char *)a4[1];
              unint64_t v25 = a4[2];
              if ((unint64_t)v26 >= v25)
              {
                unint64_t v28 = *a4;
                int v29 = &v26[-*a4];
                unint64_t v30 = (unint64_t)(v29 + 1);
                if ((uint64_t)(v29 + 1) < 0) {
                  goto LABEL_57;
                }
                unint64_t v31 = v25 - v28;
                if (2 * v31 > v30) {
                  unint64_t v30 = 2 * v31;
                }
                if (v31 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v32 = v30;
                }
                if (v32) {
                  uint64_t v33 = (char *)operator new(v32);
                }
                else {
                  uint64_t v33 = 0;
                }
                float v34 = &v29[(void)v33];
                float v35 = &v29[(void)v33];
                unsigned char *v35 = v16;
                uint64_t v27 = v35 + 1;
                if (v26 != (unsigned char *)v28)
                {
                  int v36 = &v26[~v28];
                  do
                  {
                    char v37 = *--v26;
                    (v36--)[(void)v33] = v37;
                  }
                  while (v26 != (unsigned char *)v28);
                  float v34 = v33;
                }
                *a4 = (unint64_t)v34;
                a4[1] = (unint64_t)v27;
                a4[2] = (unint64_t)&v33[v32];
                if (v28)
                {
                  operator delete((void *)v28);
                  unint64_t v17 = (char *)__p;
                  unint64_t v19 = v50 - (unsigned char *)__p;
                }
              }
              else
              {
                unsigned char *v26 = v16;
                uint64_t v27 = v26 + 1;
              }
              a4[1] = (unint64_t)v27;
              while (v19)
              {
                unint64_t v38 = &v17[v19 >> 1];
                unsigned int v40 = *v38;
                float v39 = v38 + 1;
                if (v44 < v40)
                {
                  v19 >>= 1;
                }
                else
                {
                  unint64_t v17 = v39;
                  v19 += ~(v19 >> 1);
                }
              }
              std::vector<Nightingale::Phase>::insert((uint64_t)&__p, v17, (char *)&v44);
              uint64_t v13 = v45;
              uint64_t v14 = v46;
            }
            ++v15;
          }
          while (v14 - v13 > v15);
          if (!v13) {
            goto LABEL_50;
          }
        }
        unint64_t v46 = v13;
        operator delete(v13);
LABEL_50:
        unint64_t v10 = v43 + 1;
        if (v41 == v43 + 1)
        {
          if (__p)
          {
            std::vector<int> v50 = (unsigned __int8 *)__p;
            operator delete(__p);
          }
          return;
        }
      }
    }
  }
}

char *std::vector<Nightingale::Phase>::insert(uint64_t a1, char *__src, char *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v6[-*(void *)a1 + 1];
    if (v11 < 0) {
      abort();
    }
    uint64_t v12 = __src - v10;
    unint64_t v13 = v7 - (void)v10;
    if (2 * v13 > v11) {
      uint64_t v11 = 2 * v13;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)operator new(v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unsigned int v16 = &v15[v12];
    unint64_t v17 = &v15[v14];
    if (v12 == v14)
    {
      if (v12 < 1)
      {
        if ((unint64_t)(2 * v12) <= 1) {
          size_t v19 = 1;
        }
        else {
          size_t v19 = 2 * v12;
        }
        unint64_t v20 = (char *)operator new(v19);
        unsigned int v16 = &v20[v19 >> 2];
        unint64_t v17 = &v20[v19];
        if (v15)
        {
          operator delete(v15);
          unint64_t v10 = *(char **)a1;
        }
      }
      else
      {
        if (v12 + 1 >= 0) {
          uint64_t v18 = v12 + 1;
        }
        else {
          uint64_t v18 = v12 + 2;
        }
        v16 -= v18 >> 1;
      }
    }
    char *v16 = *v3;
    int64_t v21 = v16;
    if (v10 != v4)
    {
      int v22 = v4;
      int64_t v21 = v16;
      do
      {
        char v23 = *--v22;
        *--int64_t v21 = v23;
      }
      while (v22 != v10);
    }
    unint64_t v24 = *(unsigned char **)(a1 + 8);
    uint64_t v25 = v24 - v4;
    if (v24 != v4)
    {
      memmove(v16 + 1, v4, v24 - v4);
      unint64_t v10 = *(char **)a1;
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = &v16[v25 + 1];
    *(void *)(a1 + 16) = v17;
    if (v10) {
      operator delete(v10);
    }
    return v16;
  }
  else if (__src == v6)
  {
    void *__src = *a3;
    *(void *)(a1 + 8) = __src + 1;
  }
  else
  {
    uint64_t v8 = __src + 1;
    if (v6)
    {
      *unint64_t v6 = *(v6 - 1);
      int v9 = v6 + 1;
    }
    else
    {
      int v9 = 0;
    }
    *(void *)(a1 + 8) = v9;
    if (v6 != v8) {
      memmove(__src + 1, __src, v6 - v8);
    }
    if (v4 <= v3 && *(void *)(a1 + 8) > (unint64_t)v3) {
      ++v3;
    }
    char *v4 = *v3;
  }
  return v4;
}

uint64_t Nightingale::phaseFactorProcessor::suppressFWStEnd(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v8 = operator new(6uLL);
  *(_DWORD *)uint64_t v8 = 84148994;
  void v8[2] = 1798;
  if (!*((unsigned char *)a2 + 4)) {
    goto LABEL_9;
  }
  if (!*((unsigned char *)a3 + 4)) {
    goto LABEL_9;
  }
  unint64_t v9 = *a2 | ((unint64_t)*a3 << 32);
  unint64_t v10 = operator new(6uLL);
  v14[1] = (uint64_t)(v10 + 3);
  v14[2] = (uint64_t)(v10 + 3);
  *(_DWORD *)unint64_t v10 = *(_DWORD *)v8;
  v10[2] = v8[2];
  v14[0] = (uint64_t)v10;
  int v11 = Nightingale::phaseFactorProcessor::detectPhases(a1, v9, v14, a4);
  operator delete(v10);
  if (v11)
  {
    if (*((unsigned char *)a2 + 4)) {
      *((unsigned char *)a2 + 4) = 0;
    }
    if (*((unsigned char *)a3 + 4)) {
      *((unsigned char *)a3 + 4) = 0;
    }
    uint64_t v12 = 1;
  }
  else
  {
LABEL_9:
    uint64_t v12 = 0;
  }
  operator delete(v8);
  return v12;
}

char *Nightingale::phaseFactorProcessor::getCCVec@<X0>(void *a1@<X8>)
{
  uint64_t result = (char *)operator new(3uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *(_WORD *)uint64_t result = 1798;
  result[2] = 5;
  *a1 = result;
  return result;
}

void *Nightingale::phaseFactorProcessor::getAllCycleVec@<X0>(void *a1@<X8>)
{
  unint64_t v3 = operator new(8uLL);
  *a1 = v3;
  void *v3 = 0x706050403020100;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

uint64_t Nightingale::phaseFactorProcessor::aPhase_contains_phaseTobeDetected(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = a2;
  uint64_t v3 = a3[1];
  if (*a3 == v3) {
    return 0;
  }
  uint64_t v4 = *a3 + 1;
  do
  {
    uint64_t result = Nightingale::PhaseSet::contains(&v7, *(unsigned __int8 *)(v4 - 1));
    if (result) {
      break;
    }
  }
  while (v4++ != v3);
  return result;
}

unint64_t Nightingale::phaseFactorProcessor::jDayFirstStartLastEndOfAPhaseSet(uint64_t a1, void *a2, unsigned __int8 **a3)
{
  unint64_t v3 = a2[1] - *a2;
  unint64_t v4 = v3 >> 2;
  if ((v3 >> 2))
  {
    unsigned int v7 = -1;
    int v8 = v4 - 1;
    if ((int)v4 >= 1)
    {
      unsigned int v9 = v4 - 1;
      while (1)
      {
        unint64_t v10 = v9;
        uint64_t v11 = a2[3];
        if (v10 >= (a2[4] - v11) >> 3) {
          break;
        }
        uint64_t v30 = *(void *)(v11 + 8 * v10);
        uint64_t v12 = *a3;
        unint64_t v13 = a3[1];
        while (1)
        {
          if (v12 == v13) {
            goto LABEL_11;
          }
          if (Nightingale::PhaseSet::contains(&v30, *v12)) {
            break;
          }
          ++v12;
        }
        if (v10 >= (uint64_t)(a2[1] - *a2) >> 2) {
          break;
        }
        unsigned int v7 = *(_DWORD *)(*a2 + 4 * v10);
        unsigned int v9 = v10 - 1;
        if ((int)v10 <= 0) {
          goto LABEL_11;
        }
      }
LABEL_50:
      abort();
    }
LABEL_11:
    size_t v14 = a3[1];
    if (v14 == *a3)
    {
      unint64_t v17 = a3[1];
LABEL_19:
      if ((int)v4 < 2) {
        goto LABEL_37;
      }
      uint64_t v19 = (uint64_t)((v3 << 30) - 0x200000000) >> 32;
      while (v17 == v14)
      {
        unint64_t v17 = v14;
LABEL_31:
        if (v19-- <= 0) {
          goto LABEL_37;
        }
      }
      unint64_t v20 = 0;
      unint64_t v21 = v19 + 1;
      while (1)
      {
        uint64_t v22 = a2[3];
        if (v19 >= (unint64_t)((a2[4] - v22) >> 3)) {
          goto LABEL_50;
        }
        if (Nightingale::PhaseSet::contains((void *)(v22 + 8 * v19), v14[v20]))
        {
          uint64_t v23 = a2[3];
          if (v21 >= (a2[4] - v23) >> 3 || a3[1] - *a3 <= v20) {
            goto LABEL_50;
          }
          if ((Nightingale::PhaseSet::contains((void *)(v23 + 8 * v21), (*a3)[v20]) & 1) == 0) {
            break;
          }
        }
        ++v20;
        size_t v14 = *a3;
        unint64_t v17 = a3[1];
        if (v17 - *a3 <= v20) {
          goto LABEL_31;
        }
      }
      if (v21 >= (uint64_t)(a2[1] - *a2) >> 2) {
        goto LABEL_50;
      }
      uint64_t v18 = *(unsigned int *)(*a2 + 4 * v21);
      if (v18 == -1)
      {
LABEL_37:
        uint64_t v25 = *a3;
        if (a3[1] != *a3)
        {
          unint64_t v26 = 0;
          uint64_t v18 = 0xFFFFFFFFLL;
          while (1)
          {
            uint64_t v27 = (void *)a2[3];
            if ((void *)a2[4] == v27) {
              goto LABEL_50;
            }
            if (Nightingale::PhaseSet::contains(v27, v25[v26]))
            {
              uint64_t v28 = a2[3];
              if ((unint64_t)(a2[4] - v28) <= 8 || a3[1] - *a3 <= v26) {
                goto LABEL_50;
              }
              if ((Nightingale::PhaseSet::contains((void *)(v28 + 8), (*a3)[v26]) & 1) == 0)
              {
                if (a2[1] - *a2 <= 4uLL) {
                  goto LABEL_50;
                }
                uint64_t v18 = *(unsigned int *)(*a2 + 4);
              }
            }
            ++v26;
            uint64_t v25 = *a3;
            if (a3[1] - *a3 <= v26) {
              return v7 | (unint64_t)(v18 << 32);
            }
          }
        }
        uint64_t v18 = 0xFFFFFFFFLL;
      }
    }
    else
    {
      unint64_t v15 = 0;
      size_t v14 = *a3;
      while (1)
      {
        uint64_t v16 = a2[3];
        if (v8 >= (unint64_t)((a2[4] - v16) >> 3)) {
          goto LABEL_50;
        }
        if (Nightingale::PhaseSet::contains((void *)(v16 + 8 * v8), v14[v15])) {
          break;
        }
        ++v15;
        size_t v14 = *a3;
        unint64_t v17 = a3[1];
        if (v17 - *a3 <= v15) {
          goto LABEL_19;
        }
      }
      uint64_t v18 = 4294967294;
    }
  }
  else
  {
    uint64_t v18 = 0xFFFFFFFFLL;
    unsigned int v7 = -1;
  }
  return v7 | (unint64_t)(v18 << 32);
}

BOOL Nightingale::phaseFactorProcessor::containContraceptiveCycleFactors(uint64_t a1, unsigned __int8 **a2)
{
  unint64_t v3 = operator new(6uLL);
  *(_DWORD *)unint64_t v3 = 84148994;
  v3[2] = 1798;
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    BOOL v8 = 0;
  }
  else
  {
    for (uint64_t i = 0; i != 6; ++i)
    {
      unsigned int v7 = v4;
      while (*v7 != *((unsigned __int8 *)v3 + i))
      {
        if (++v7 == v5)
        {
          unsigned int v7 = v5;
          break;
        }
      }
      BOOL v8 = v7 != v5;
      if (v7 != v5) {
        break;
      }
    }
  }
  operator delete(v3);
  return v8;
}

BOOL Nightingale::phaseFactorProcessor::vPhasesContainsAPhase(uint64_t a1, unsigned __int8 **a2, int a3)
{
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    while (*v4 != a3)
    {
      if (++v4 == v3)
      {
        unint64_t v4 = a2[1];
        return v4 != v3;
      }
    }
  }
  return v4 != v3;
}

BOOL Nightingale::phaseFactorProcessor::vPhasesContainsVPhases(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 == v4) {
    return 0;
  }
  unint64_t v5 = a3[1];
  do
  {
    if (*a3 == v5)
    {
      unint64_t v6 = *a3;
    }
    else
    {
      unint64_t v6 = *a3;
      while (*v6 != *v3)
      {
        if (++v6 == v5)
        {
          unint64_t v6 = a3[1];
          break;
        }
      }
    }
    BOOL result = v6 != v5;
    if (v6 != v5) {
      break;
    }
    ++v3;
  }
  while (v3 != v4);
  return result;
}

uint64_t std::vector<int>::vector<std::__wrap_iter<int *>,0>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    std::vector<int>::__vallocate[abi:nn180100]((void *)a1, v4 >> 2);
    uint64_t v7 = *(void *)(a1 + 8);
    if (a3 != a2) {
      memmove(*(void **)(a1 + 8), a2, v4);
    }
    *(void *)(a1 + 8) = v7 + 4 * (v4 >> 2);
  }
  return a1;
}

BOOL Nightingale::periodEstimatorAggregation::period1stProjFromSensor(uint64_t a1, _DWORD *a2)
{
  return *a2 < 4u;
}

BOOL Nightingale::periodEstimatorAggregation::period1stProjFromluna(uint64_t a1, _DWORD *a2)
{
  return *a2 < 3u;
}

BOOL Nightingale::periodEstimatorAggregation::period1stProjFromHR(uint64_t a1, _DWORD *a2)
{
  return *a2 == 3;
}

void Nightingale::periodEstimatorAggregation::deriveRestPeriodProjs(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, int a7@<W7>, uint64_t *a8@<X8>)
{
  uint64_t v13 = (int)*(float *)(a3 + 48);
  if (!*(unsigned char *)(a3 + 52)) {
    uint64_t v13 = 0;
  }
  Nightingale::periodEstimatorCalendarWithEnd::periodEstimatorCalendarWithEnd((Nightingale::periodEstimatorBase *)v84, v13 | ((unint64_t)*(unsigned __int8 *)(a3 + 52) << 32));
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  uint64_t v61 = a2;
  uint64_t v14 = *(void *)(a2 + 8);
  v78[0] = *(_OWORD *)(v14 - 96);
  long long v15 = *(_OWORD *)(v14 - 80);
  long long v16 = *(_OWORD *)(v14 - 64);
  long long v17 = *(_OWORD *)(v14 - 48);
  *(void *)&v80[13] = *(void *)(v14 - 35);
  long long v79 = v16;
  *(_OWORD *)long long v80 = v17;
  v78[1] = v15;
  uint64_t v82 = 0;
  double v83 = 0;
  long long v81 = 0;
  uint64_t v19 = *(unsigned char **)(v14 - 24);
  uint64_t v18 = *(unsigned char **)(v14 - 16);
  size_t v20 = v18 - v19;
  if (v18 != v19)
  {
    if (v18 - v19 < 0) {
      goto LABEL_62;
    }
    unint64_t v21 = (char *)operator new(v18 - v19);
    uint64_t v22 = &v21[v20];
    long long v81 = v21;
    double v83 = &v21[v20];
    memmove(v21, v19, v20);
    uint64_t v82 = v22;
  }
  if (!Nightingale::CGradient::get_vGrad_empty((Nightingale::CGradient *)a1)
    && *(unsigned char *)(a1 + 76)
    && BYTE4(v79)
    && BYTE12(v79))
  {
    int v57 = *(_DWORD *)(v61 + 124);
    Nightingale::CGradient::CGradient((uint64_t)&v74);
    v77[0] = 0;
    v77[4] = 0;
    v77[8] = 0;
    v77[12] = 0;
    v77[16] = 0;
    v77[20] = 0;
    uint64_t v23 = (uint64_t *)&v71;
    Nightingale::CGradient::CGradient((uint64_t)&v71);
    v73[0] = 0;
    v73[4] = 0;
    v73[8] = 0;
    v73[12] = 0;
    v73[16] = 0;
    v73[20] = 0;
    Nightingale::CGradient::CGradient((uint64_t)&__p);
    if (!*(unsigned char *)(a1 + 76) || (double expectation = *(float *)(a1 + 72), !BYTE12(v79)))
    {
LABEL_61:
      std::__throw_bad_optional_access[abi:nn180100]();
LABEL_62:
      abort();
    }
    double v86 = *((float *)&v79 + 2);
    if (a7)
    {
      if (*(unsigned char *)(a1 + 48)) {
        double variance = (float)(*(float *)(a1 + 44) * *(float *)(a1 + 44));
      }
      else {
        double variance = Nightingale::CGradient::get_variance((float **)a1);
      }
      double v86 = variance;
    }
    if (a4 >= 1)
    {
      int v25 = 0;
      unint64_t v26 = v73;
      int v56 = a5 - *(char *)(v61 + 128);
      uint64_t v27 = &v72;
      uint64_t v28 = &v67;
      while (BYTE4(v79))
      {
        double v29 = expectation + *(float *)&v79;
        double expectation = v29;
        if (!BYTE12(v79)) {
          break;
        }
        double v30 = v86 + *((float *)&v79 + 2);
        if (v57 == -2) {
          double v30 = 0.0;
        }
        double v86 = v30;
        float v31 = v29;
        float v32 = v30;
        unsigned int v33 = (*(unsigned char *)(v61 + 112) - LOBYTE(v78[0]));
        if (*(unsigned char *)(v61 + 116)) {
          LODWORD(v23) = (*(_DWORD *)(v61 + 112) - LODWORD(v78[0])) >> 8;
        }
        else {
          unsigned int v33 = 0;
        }
        Nightingale::periodEstimatorCalendar::getCalBasedPeriodStartGradient((Nightingale::periodEstimatorCalendar *)v84, v33 | (v23 << 8) | ((unint64_t)*(unsigned __int8 *)(v61 + 116) << 32), (uint64_t)&__dst, v31, v32);
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        std::vector<int> __p = __dst;
        v70[0] = v63[0];
        *(_OWORD *)((char *)v70 + 9) = *(_OWORD *)((char *)v63 + 9);
        if (a6)
        {
          double expectation = Nightingale::CGradient::get_expectation((float **)&__p);
          double std = Nightingale::CGradient::get_std((float **)&__p);
        }
        else
        {
          double std = sqrt(v86);
        }
        float v35 = std;
        if (v35 < 7.8125 || v25 < v56)
        {
          int v60 = (int)v23;
          std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)&v74, (char *)__p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
          v76[0] = v70[0];
          *(_OWORD *)((char *)v76 + 9) = *(_OWORD *)((char *)v70 + 9);
          if (!v77[20]) {
            v77[20] = 1;
          }
          uint64_t v23 = a8;
          char v37 = v28;
          float v38 = expectation;
          *(float *)&v77[16] = v38;
          Nightingale::periodEstimatorCalendarWithEnd::getPeriodEndProjection((uint64_t)v78, &__p, (uint64_t)&__dst);
          if (v71.__begin_)
          {
            v71.__end_ = v71.__begin_;
            operator delete(v71.__begin_);
          }
          std::vector<int>::pointer begin = __dst.__begin_;
          std::vector<int> v71 = __dst;
          std::vector<int>::pointer end = __dst.__end_;
          *(_OWORD *)uint64_t v27 = v63[0];
          int v41 = v27;
          *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)v63 + 9);
          *(_OWORD *)unint64_t v26 = *(_OWORD *)v64;
          int64_t v42 = v26;
          *(void *)(v26 + 13) = *(void *)&v64[13];
          memset(&__dst, 0, sizeof(__dst));
          unint64_t v43 = v74;
          int64_t v44 = v75 - (unsigned char *)v74;
          if (v75 == v74)
          {
            std::vector<int>::pointer v46 = end;
          }
          else
          {
            std::vector<int>::__vallocate[abi:nn180100](&__dst, v44 >> 2);
            std::vector<int>::pointer v45 = __dst.__end_;
            memmove(__dst.__end_, v43, v44);
            __dst.__end_ = (std::vector<int>::pointer)((char *)v45 + v44);
            std::vector<int>::pointer begin = v71.__begin_;
            std::vector<int>::pointer v46 = v71.__end_;
          }
          v63[0] = v76[0];
          *(_OWORD *)((char *)v63 + 9) = *(_OWORD *)((char *)v76 + 9);
          *(_OWORD *)uint64_t v64 = *(_OWORD *)v77;
          *(void *)&v64[13] = *(void *)&v77[13];
          v65[1] = 0;
          uint64_t v66 = 0;
          v65[0] = 0;
          int64_t v47 = (char *)v46 - (char *)begin;
          if (v46 != begin)
          {
            std::vector<int>::__vallocate[abi:nn180100](v65, v47 >> 2);
            uint64_t v48 = (char *)v65[1];
            memmove(v65[1], begin, v47);
            v65[1] = &v48[v47];
          }
          uint64_t v27 = v41;
          uint64_t v28 = v37;
          *(_OWORD *)char v37 = *(_OWORD *)v41;
          *(_OWORD *)((char *)v37 + 9) = *(_OWORD *)((char *)v41 + 9);
          unint64_t v26 = v42;
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v42;
          *(void *)&v68[13] = *(void *)(v42 + 13);
          a8 = v23;
          unint64_t v49 = v23[1];
          if (v49 >= v23[2])
          {
            uint64_t v54 = std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__push_back_slow_path<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>(v23, (uint64_t)&__dst);
            uint64_t v55 = v65[0];
            v23[1] = v54;
            LODWORD(v23) = v60;
            if (v55)
            {
              v65[1] = v55;
              operator delete(v55);
            }
          }
          else
          {
            *(void *)unint64_t v49 = 0;
            *(void *)(v49 + 8) = 0;
            *(void *)(v49 + 16) = 0;
            *(std::vector<int> *)unint64_t v49 = __dst;
            memset(&__dst, 0, sizeof(__dst));
            long long v50 = *(_OWORD *)((char *)v63 + 9);
            *(_OWORD *)(v49 + 24) = v63[0];
            *(_OWORD *)(v49 + 33) = v50;
            uint64_t v51 = *(void *)&v64[13];
            *(_OWORD *)(v49 + 56) = *(_OWORD *)v64;
            *(void *)(v49 + 69) = v51;
            *(void *)(v49 + 80) = 0;
            *(void *)(v49 + 88) = 0;
            *(void *)(v49 + 96) = 0;
            *(_OWORD *)(v49 + 80) = *(_OWORD *)v65;
            *(void *)(v49 + 96) = v66;
            v65[0] = 0;
            v65[1] = 0;
            uint64_t v66 = 0;
            long long v52 = *(_OWORD *)v37;
            *(_OWORD *)(v49 + 113) = *(_OWORD *)((char *)v37 + 9);
            *(_OWORD *)(v49 + 104) = v52;
            long long v53 = *(_OWORD *)v68;
            *(void *)(v49 + 149) = *(void *)&v68[13];
            *(_OWORD *)(v49 + 136) = v53;
            v23[1] = v49 + 160;
            LODWORD(v23) = v60;
          }
          if (__dst.__begin_)
          {
            __dst.__end_ = __dst.__begin_;
            operator delete(__dst.__begin_);
          }
          if (a4 != ++v25) {
            continue;
          }
        }
        goto LABEL_52;
      }
      goto LABEL_61;
    }
LABEL_52:
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v71.__begin_)
    {
      v71.__end_ = v71.__begin_;
      operator delete(v71.__begin_);
    }
    if (v74)
    {
      int v75 = v74;
      operator delete(v74);
    }
  }
  if (v81)
  {
    uint64_t v82 = v81;
    operator delete(v81);
  }
  Nightingale::periodEstimatorCalendarWithEnd::~periodEstimatorCalendarWithEnd((Nightingale::periodEstimatorCalendarWithEnd *)v84);
}

uint64_t std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__push_back_slow_path<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 5);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v10 = 0x199999999999999;
  }
  else {
    unint64_t v10 = v4;
  }
  v19[4] = v7;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>>(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[160 * v3];
  v19[0] = v11;
  v19[1] = v12;
  v19[3] = &v11[160 * v10];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
  *((void *)v12 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v13 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v12 + 33) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(v12 + 24) = v13;
  long long v14 = *(_OWORD *)(a2 + 56);
  *(void *)(v12 + 69) = *(void *)(a2 + 69);
  *(_OWORD *)(v12 + 56) = v14;
  *((void *)v12 + 11) = 0;
  *((void *)v12 + 12) = 0;
  *((void *)v12 + 10) = 0;
  *((_OWORD *)v12 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)v12 + 12) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  long long v15 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v12 + 113) = *(_OWORD *)(a2 + 113);
  *(_OWORD *)(v12 + 104) = v15;
  long long v16 = *(_OWORD *)(a2 + 136);
  *(void *)(v12 + 149) = *(void *)(a2 + 149);
  *(_OWORD *)(v12 + 136) = v16;
  v19[2] = v12 + 160;
  std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::~__split_buffer((uint64_t)v19);
  return v17;
}

void std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>,std::reverse_iterator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*>,std::reverse_iterator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*>,std::reverse_iterator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(160 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>,std::reverse_iterator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*>,std::reverse_iterator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*>,std::reverse_iterator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 160) = 0;
      *(void *)(v8 - 152) = 0;
      *(void *)(v8 - 144) = 0;
      *(_OWORD *)(v8 - 160) = *(_OWORD *)(a3 + v7 - 160);
      *(void *)(v8 - 144) = *(void *)(a3 + v7 - 144);
      *(void *)(v9 - 160) = 0;
      *(void *)(v9 - 152) = 0;
      *(void *)(v9 - 144) = 0;
      long long v10 = *(_OWORD *)(a3 + v7 - 136);
      *(_OWORD *)(v8 - 127) = *(_OWORD *)(a3 + v7 - 127);
      *(_OWORD *)(v8 - 136) = v10;
      long long v11 = *(_OWORD *)(a3 + v7 - 104);
      *(void *)(v8 - 91) = *(void *)(a3 + v7 - 91);
      *(void *)(v8 - 72) = 0;
      *(void *)(v8 - 64) = 0;
      *(void *)(v8 - 80) = 0;
      *(_OWORD *)(v8 - 104) = v11;
      *(_OWORD *)(v8 - 80) = *(_OWORD *)(a3 + v7 - 80);
      *(void *)(v8 - 64) = *(void *)(a3 + v7 - 64);
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 72) = 0;
      *(void *)(v9 - 64) = 0;
      long long v12 = *(_OWORD *)(a3 + v7 - 56);
      *(_OWORD *)(v8 - 47) = *(_OWORD *)(a3 + v7 - 47);
      *(_OWORD *)(v8 - 56) = v12;
      __n128 result = *(__n128 *)(a3 + v7 - 24);
      *(void *)(v8 - 11) = *(void *)(a3 + v7 - 11);
      *(__n128 *)(v8 - 24) = result;
      v7 -= 160;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 160;
    std::__destroy_at[abi:nn180100]<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>,0>(i - 160);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__destroy_at[abi:nn180100]<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t Nightingale::slidingWindowBaseLuna::slidingWindowBaseLuna(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E28CA40;
  uint64_t v4 = operator new(0x1CuLL);
  _OWORD *v4 = xmmword_22F166AA8;
  *(_OWORD *)((char *)v4 + 12) = *(long long *)((char *)&xmmword_22F166AA8 + 12);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = (char *)v4 + 28;
  *(void *)(a1 + 24) = (char *)v4 + 28;
  *(void *)(a1 + 32) = a2;
  Nightingale::slidingWindowBaseLuna::slidingWinConfigStruct::slidingWinConfigStruct((Nightingale::slidingWindowBaseLuna::slidingWinConfigStruct *)(a1 + 40));
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 132) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 148) = 0;
  Nightingale::wristTemperatureInputValidation::wristTemperatureInputValidation((Nightingale::wristTemperatureInputValidation *)(a1 + 152));
  *(unsigned char *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(void *)(a1 + 236) = 0xFFFFFFFFLL;
  *(int32x2_t *)(a1 + 244) = vdup_n_s32(0x7FC00000u);
  *(_DWORD *)(a1 + 252) = 2143289344;
  *(unsigned char *)(a1 + 256) = 0;
  *(void *)(a1 + 260) = 0x800000008;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  return a1;
}

void Nightingale::slidingWindowBaseLuna::~slidingWindowBaseLuna(Nightingale::slidingWindowBaseLuna *this)
{
  *(void *)this = &unk_26E28CA40;
  uint64_t v2 = (void *)*((void *)this + 34);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 24);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v6 = (void **)((char *)this + 160);
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v6);
  Nightingale::wristTemperatureInputValidation::~wristTemperatureInputValidation((Nightingale::slidingWindowBaseLuna *)((char *)this + 152));
  uint64_t v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 7) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
}

void Nightingale::slidingWindowBaseLuna::process(unsigned char *a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0xFFFFFFFFLL;
  *(int32x2_t *)(a4 + 8) = vdup_n_s32(0x7FC00000u);
  *(_DWORD *)(a4 + 16) = 2143289344;
  *(unsigned char *)(a4 + 20) = 0;
  *(_DWORD *)(a4 + 24) = 8;
  if (Nightingale::slidingWindowBaseLuna::validateConfigurationPass((Nightingale::slidingWindowBaseLuna *)a1))
  {
    (*(void (**)(unsigned char *))(*(void *)a1 + 8))(a1);
    if (a1[124])
    {
      if (a1[132])
      {
        Nightingale::slidingWindowBaseLuna::acquireWTmp((uint64_t)a1, a2, *((_DWORD *)a1 + 30) + **((_DWORD **)a1 + 4) - *((_DWORD *)a1 + 10) + 1, *((_DWORD *)a1 + 32) + *((_DWORD *)a1 + 11) + **((_DWORD **)a1 + 4), &v10);
        if (Nightingale::assertVectorOfVectors((uint64_t)&v10))
        {
          Nightingale::slidingWindowBaseLuna::validateWTmp((uint64_t)a1, (uint64_t *)&v10, *((_DWORD *)a1 + 10), (void *)a1 + 6, &v8);
          std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1 + 20);
          *((_OWORD *)a1 + 10) = v8;
          *((void *)a1 + 22) = v9;
          uint64_t v9 = 0;
          long long v8 = 0uLL;
          long long v11 = (void **)&v8;
          std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v11);
          (*(void (**)(unsigned char *, std::vector<int> *))(*(void *)a1 + 16))(a1, &v10);
          if (a1[232] && a1[124]) {
            *((_DWORD *)a1 + 59) = *((_DWORD *)a1 + 30) + *((_DWORD *)a1 + 54) + **((_DWORD **)a1 + 4);
          }
          *((_DWORD *)a1 + 66) = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 40))(a1);
          (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
          if (a3) {
            (*(void (**)(unsigned char *))(*(void *)a1 + 32))(a1);
          }
          *(_OWORD *)a4 = *(_OWORD *)(a1 + 236);
          *(_OWORD *)(a4 + 12) = *(_OWORD *)(a1 + 248);
          Nightingale::slidingWindowBaseLuna::reset((Nightingale::slidingWindowBaseLuna *)a1);
        }
        else
        {
          *(void *)(a4 + 4) = 1;
          *(_DWORD *)(a4 + 24) = 1;
        }
        *(void *)&long long v8 = &v10;
        std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v8);
      }
    }
  }
}

BOOL Nightingale::slidingWindowBaseLuna::validateConfigurationPass(Nightingale::slidingWindowBaseLuna *this)
{
  if ((*((_DWORD *)this + 10) & 0x80000000) != 0
    || (*((_DWORD *)this + 11) & 0x80000000) != 0
    || *((int *)this + 19) < 1)
  {
    return 0;
  }
  uint64_t v1 = *((void *)this + 4);
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2)
  {
    if (v2 >= 1 && *(_DWORD *)v1 > v2) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(v1 + 12))
  {
    return 0;
  }
  return *((void *)this + 6) != *((void *)this + 7);
}

void Nightingale::slidingWindowBaseLuna::acquireWTmp(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, int a4@<W3>, std::vector<int> *a5@<X8>)
{
  Nightingale::wristTemperatureInputAcquisition::wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v25);
  Nightingale::wristTemperatureInputProcess::wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)&v24);
  memset(v23, 0, sizeof(v23));
  if (a4 - a3 < 0 || !*(unsigned char *)(a1 + 132) || !*(unsigned char *)(a1 + 124))
  {
    a5->__begin_ = 0;
    a5->__end_ = 0;
    a5->__end_cap_.__value_ = 0;
LABEL_17:
    v18[0] = (void **)v23;
    std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](v18);
    Nightingale::wristTemperatureInputProcess::~wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)&v24);
    Nightingale::wristTemperatureInputAcquisition::~wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v25);
    return;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v10 + 24))
  {
    Nightingale::wristTemperatureInputAcquisition::extractWTmp_removeOutlier_withBuf_fromCycleOffset(v25, a4 - a3 + 1, a4, a3 - 43, a2, *(void *)(v10 + 16), (uint64_t)v18);
    if (*(unsigned char *)(a1 + 132))
    {
      if (*(unsigned char *)(a1 + 124))
      {
        Nightingale::wristTemperatureInputProcess::constructVectorOfSlicesFromMultipleWatches((uint64_t)v18, *(_DWORD *)(a1 + 44) + *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 120) + 1, a3, (uint64_t)&v12);
        a5->__begin_ = 0;
        a5->__end_ = 0;
        a5->__end_cap_.__value_ = 0;
        std::vector<std::vector<float>>::__init_with_size[abi:nn180100]<std::vector<float>*,std::vector<float>*>(a5, v12, v13, 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v12) >> 3));
        if (__p)
        {
          uint64_t v17 = __p;
          operator delete(__p);
        }
        if (v14)
        {
          long long v15 = v14;
          operator delete(v14);
        }
        unint64_t v26 = (void ***)&v12;
        std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v26);
        if (v21)
        {
          uint64_t v22 = v21;
          operator delete(v21);
        }
        if (v19)
        {
          size_t v20 = v19;
          operator delete(v19);
        }
        long long v12 = (const std::vector<int> *)v18;
        std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v12);
        goto LABEL_17;
      }
    }
  }
  uint64_t v11 = std::__throw_bad_optional_access[abi:nn180100]();
  Nightingale::slidingWindowBaseLuna::validateWTmp(v11);
}

void Nightingale::slidingWindowBaseLuna::validateWTmp(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v120 = *MEMORY[0x263EF8340];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (*a4 == a4[1] || !Nightingale::assertVectorOfVectors((uint64_t)a2)) {
    return;
  }
  int64x2_t v110 = 0uLL;
  v111[0] = 0;
  uint64_t v115 = v111;
  uint64_t v116 = &unk_26E28C690;
  uint64_t v117 = Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpMissingCntHigh;
  uint64_t v118 = 0;
  v119 = &v116;
  uint64_t v10 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>>((uint64_t)v111, 1uLL);
  uint64_t v11 = v10;
  std::vector<int> __p = v10;
  v113.i64[0] = (uint64_t)v10;
  uint64_t v114 = (char *)&v10[4 * v12];
  if (v119)
  {
    if (v119 == &v116)
    {
      v10[3] = v10;
      (*((void (**)(void **, void *))*v119 + 3))(v119, v10);
      uint64_t v10 = (void *)v113.i64[0];
    }
    else
    {
      v10[3] = v119;
      v119 = 0;
    }
  }
  else
  {
    v10[3] = 0;
  }
  long long v13 = v11 + 4;
  v113.i64[1] = (uint64_t)(v11 + 4);
  uint64_t v14 = v110.i64[1];
  if (v110.i64[1] == v110.i64[0])
  {
    int64x2_t v15 = vdupq_n_s64(v110.u64[1]);
  }
  else
  {
    do
    {
      v14 -= 32;
      uint64_t v10 = (void *)std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::__value_func[abi:nn180100]((uint64_t)(v10 - 4), v14);
    }
    while (v14 != v110.i64[0]);
    int64x2_t v15 = v110;
    long long v13 = (void *)v113.i64[1];
  }
  v110.i64[0] = (uint64_t)v10;
  int64x2_t v113 = v15;
  long long v16 = (char *)v111[0];
  v111[0] = v114;
  uint64_t v114 = v16;
  std::vector<int> __p = (void *)v15.i64[0];
  std::__split_buffer<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::~__split_buffer((uint64_t)&__p);
  v110.i64[1] = (uint64_t)v13;
  std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::~__value_func[abi:nn180100](&v116);
  uint64_t v116 = &unk_26E28C690;
  uint64_t v117 = Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpEarlyWinMissingCntHigh;
  uint64_t v118 = 0;
  v119 = &v116;
  if ((unint64_t)v13 < v111[0])
  {
    *(void *)(v110.i64[1] + 24) = v110.i64[1];
    (*((void (**)(void **, void *))*v119 + 3))(v119, v13);
    unint64_t v17 = (unint64_t)(v13 + 4);
    goto LABEL_34;
  }
  uint64_t v18 = (v110.i64[1] - v110.i64[0]) >> 5;
  if ((unint64_t)(v18 + 1) >> 59) {
    goto LABEL_175;
  }
  unint64_t v19 = (v111[0] - v110.i64[0]) >> 4;
  if (v19 <= v18 + 1) {
    unint64_t v19 = v18 + 1;
  }
  if (v111[0] - v110.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
    unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v19;
  }
  uint64_t v115 = v111;
  if (v20)
  {
    unint64_t v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>>((uint64_t)v111, v20);
    uint64_t v22 = (uint64_t)&v21[32 * v18];
    std::vector<int> __p = v21;
    v113.i64[0] = v22;
    uint64_t v114 = &v21[32 * v23];
    if (!v119)
    {
      *(void *)(v22 + 24) = 0;
      goto LABEL_28;
    }
    if (v119 != &v116)
    {
      *(void *)(v22 + 24) = v119;
      v119 = 0;
LABEL_28:
      uint64_t v24 = v22;
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v22 = 32 * v18;
    std::vector<int> __p = 0;
    v113.i64[0] = v22;
    uint64_t v114 = 0;
  }
  *(void *)(v22 + 24) = v22;
  (*((void (**)(void **, uint64_t))*v119 + 3))(v119, v22);
  uint64_t v24 = v113.i64[0];
LABEL_29:
  unint64_t v17 = v22 + 32;
  v113.i64[1] = v22 + 32;
  uint64_t v25 = v110.i64[1];
  if (v110.i64[1] == v110.i64[0])
  {
    unint64_t v26 = (void *)v110.i64[1];
  }
  else
  {
    do
    {
      v25 -= 32;
      uint64_t v24 = std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::__value_func[abi:nn180100](v24 - 32, v25);
    }
    while (v25 != v110.i64[0]);
    uint64_t v25 = v110.i64[1];
    unint64_t v26 = (void *)v110.i64[0];
    unint64_t v17 = v113.u64[1];
  }
  v110.i64[0] = v24;
  v110.i64[1] = v17;
  uint64_t v27 = (char *)v111[0];
  v111[0] = v114;
  v113.i64[1] = v25;
  uint64_t v114 = v27;
  std::vector<int> __p = v26;
  v113.i64[0] = (uint64_t)v26;
  std::__split_buffer<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::~__split_buffer((uint64_t)&__p);
LABEL_34:
  v110.i64[1] = v17;
  std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::~__value_func[abi:nn180100](&v116);
  uint64_t v116 = &unk_26E28C690;
  uint64_t v117 = Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpLaterWinMissingCntHigh;
  uint64_t v118 = 0;
  v119 = &v116;
  if (v17 < v111[0])
  {
    *(void *)(v110.i64[1] + 24) = v110.i64[1];
    (*((void (**)(void **, unint64_t))*v119 + 3))(v119, v17);
    unint64_t v28 = v17 + 32;
    goto LABEL_55;
  }
  uint64_t v29 = (v110.i64[1] - v110.i64[0]) >> 5;
  if ((unint64_t)(v29 + 1) >> 59) {
    goto LABEL_175;
  }
  unint64_t v30 = (v111[0] - v110.i64[0]) >> 4;
  if (v30 <= v29 + 1) {
    unint64_t v30 = v29 + 1;
  }
  if (v111[0] - v110.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
    unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v31 = v30;
  }
  uint64_t v115 = v111;
  if (v31)
  {
    float v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>>((uint64_t)v111, v31);
    uint64_t v33 = (uint64_t)&v32[32 * v29];
    std::vector<int> __p = v32;
    v113.i64[0] = v33;
    uint64_t v114 = &v32[32 * v34];
    if (!v119)
    {
      *(void *)(v33 + 24) = 0;
      goto LABEL_49;
    }
    if (v119 != &v116)
    {
      *(void *)(v33 + 24) = v119;
      v119 = 0;
LABEL_49:
      uint64_t v35 = v33;
      goto LABEL_50;
    }
  }
  else
  {
    uint64_t v33 = 32 * v29;
    std::vector<int> __p = 0;
    v113.i64[0] = v33;
    uint64_t v114 = 0;
  }
  *(void *)(v33 + 24) = v33;
  (*((void (**)(void **, uint64_t))*v119 + 3))(v119, v33);
  uint64_t v35 = v113.i64[0];
LABEL_50:
  unint64_t v28 = v33 + 32;
  v113.i64[1] = v33 + 32;
  uint64_t v36 = v110.i64[1];
  if (v110.i64[1] == v110.i64[0])
  {
    char v37 = (void *)v110.i64[1];
  }
  else
  {
    do
    {
      v36 -= 32;
      uint64_t v35 = std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::__value_func[abi:nn180100](v35 - 32, v36);
    }
    while (v36 != v110.i64[0]);
    uint64_t v36 = v110.i64[1];
    char v37 = (void *)v110.i64[0];
    unint64_t v28 = v113.u64[1];
  }
  v110.i64[0] = v35;
  v110.i64[1] = v28;
  float v38 = (char *)v111[0];
  v111[0] = v114;
  v113.i64[1] = v36;
  uint64_t v114 = v38;
  std::vector<int> __p = v37;
  v113.i64[0] = (uint64_t)v37;
  std::__split_buffer<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::~__split_buffer((uint64_t)&__p);
LABEL_55:
  v110.i64[1] = v28;
  std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::~__value_func[abi:nn180100](&v116);
  uint64_t v116 = &unk_26E28C690;
  uint64_t v117 = Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpDay2dayNoiseHigh;
  uint64_t v118 = 0;
  v119 = &v116;
  if (v28 < v111[0])
  {
    *(void *)(v110.i64[1] + 24) = v110.i64[1];
    (*((void (**)(void **, unint64_t))*v119 + 3))(v119, v28);
    unint64_t v39 = v28 + 32;
    goto LABEL_76;
  }
  uint64_t v40 = (v110.i64[1] - v110.i64[0]) >> 5;
  if ((unint64_t)(v40 + 1) >> 59) {
    goto LABEL_175;
  }
  unint64_t v41 = (v111[0] - v110.i64[0]) >> 4;
  if (v41 <= v40 + 1) {
    unint64_t v41 = v40 + 1;
  }
  if (v111[0] - v110.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
    unint64_t v42 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v42 = v41;
  }
  uint64_t v115 = v111;
  if (v42)
  {
    unint64_t v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>>((uint64_t)v111, v42);
    uint64_t v44 = (uint64_t)&v43[32 * v40];
    std::vector<int> __p = v43;
    v113.i64[0] = v44;
    uint64_t v114 = &v43[32 * v45];
    if (!v119)
    {
      *(void *)(v44 + 24) = 0;
      goto LABEL_70;
    }
    if (v119 != &v116)
    {
      *(void *)(v44 + 24) = v119;
      v119 = 0;
LABEL_70:
      uint64_t v46 = v44;
      goto LABEL_71;
    }
  }
  else
  {
    uint64_t v44 = 32 * v40;
    std::vector<int> __p = 0;
    v113.i64[0] = v44;
    uint64_t v114 = 0;
  }
  *(void *)(v44 + 24) = v44;
  (*((void (**)(void **, uint64_t))*v119 + 3))(v119, v44);
  uint64_t v46 = v113.i64[0];
LABEL_71:
  unint64_t v39 = v44 + 32;
  v113.i64[1] = v44 + 32;
  uint64_t v47 = v110.i64[1];
  if (v110.i64[1] == v110.i64[0])
  {
    uint64_t v48 = (void *)v110.i64[1];
  }
  else
  {
    do
    {
      v47 -= 32;
      uint64_t v46 = std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::__value_func[abi:nn180100](v46 - 32, v47);
    }
    while (v47 != v110.i64[0]);
    uint64_t v47 = v110.i64[1];
    uint64_t v48 = (void *)v110.i64[0];
    unint64_t v39 = v113.u64[1];
  }
  v110.i64[0] = v46;
  v110.i64[1] = v39;
  unint64_t v49 = (char *)v111[0];
  v111[0] = v114;
  v113.i64[1] = v47;
  uint64_t v114 = v49;
  std::vector<int> __p = v48;
  v113.i64[0] = (uint64_t)v48;
  std::__split_buffer<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::~__split_buffer((uint64_t)&__p);
LABEL_76:
  v110.i64[1] = v39;
  std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::~__value_func[abi:nn180100](&v116);
  uint64_t v116 = &unk_26E28C690;
  uint64_t v117 = Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpSnrLow;
  uint64_t v118 = 0;
  v119 = &v116;
  if (v39 < v111[0])
  {
    *(void *)(v110.i64[1] + 24) = v110.i64[1];
    (*((void (**)(void **, unint64_t))*v119 + 3))(v119, v39);
    uint64_t v50 = v39 + 32;
    goto LABEL_97;
  }
  uint64_t v51 = (v110.i64[1] - v110.i64[0]) >> 5;
  if ((unint64_t)(v51 + 1) >> 59) {
    goto LABEL_175;
  }
  unint64_t v52 = (v111[0] - v110.i64[0]) >> 4;
  if (v52 <= v51 + 1) {
    unint64_t v52 = v51 + 1;
  }
  if (v111[0] - v110.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
    unint64_t v53 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v53 = v52;
  }
  uint64_t v115 = v111;
  if (v53)
  {
    uint64_t v54 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>>((uint64_t)v111, v53);
    uint64_t v55 = (uint64_t)&v54[32 * v51];
    std::vector<int> __p = v54;
    v113.i64[0] = v55;
    uint64_t v114 = &v54[32 * v56];
    if (!v119)
    {
      *(void *)(v55 + 24) = 0;
      goto LABEL_91;
    }
    if (v119 != &v116)
    {
      *(void *)(v55 + 24) = v119;
      v119 = 0;
LABEL_91:
      uint64_t v57 = (uint64_t)&v54[32 * v51];
      goto LABEL_92;
    }
  }
  else
  {
    uint64_t v55 = 32 * v51;
    std::vector<int> __p = 0;
    v113.i64[0] = 32 * v51;
    uint64_t v114 = 0;
  }
  *(void *)(v55 + 24) = v55;
  (*((void (**)(void **, uint64_t))*v119 + 3))(v119, v55);
  uint64_t v57 = v113.i64[0];
LABEL_92:
  uint64_t v50 = v55 + 32;
  v113.i64[1] = v55 + 32;
  uint64_t v58 = v110.i64[1];
  if (v110.i64[1] == v110.i64[0])
  {
    unint64_t v59 = (void *)v110.i64[1];
  }
  else
  {
    do
    {
      v58 -= 32;
      uint64_t v57 = std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::__value_func[abi:nn180100](v57 - 32, v58);
    }
    while (v58 != v110.i64[0]);
    uint64_t v58 = v110.i64[1];
    unint64_t v59 = (void *)v110.i64[0];
    uint64_t v50 = v113.i64[1];
  }
  v110.i64[0] = v57;
  v110.i64[1] = v50;
  int v60 = (char *)v111[0];
  v111[0] = v114;
  v113.i64[1] = v58;
  uint64_t v114 = v60;
  std::vector<int> __p = v59;
  v113.i64[0] = (uint64_t)v59;
  std::__split_buffer<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::~__split_buffer((uint64_t)&__p);
LABEL_97:
  v110.i64[1] = v50;
  std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::~__value_func[abi:nn180100](&v116);
  int64x2_t v113 = 0uLL;
  std::vector<int> __p = 0;
  uint64_t v61 = (*(void *)(*a2 + 8) - *(void *)*a2) >> 2;
  unint64_t v63 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v113.i64[1], 1uLL);
  uint64_t v64 = (char *)__p;
  int v65 = (char *)v113.i64[0];
  uint64_t v66 = &v63[4 * v62];
  *(_DWORD *)unint64_t v63 = v61;
  uint64_t v67 = v63 + 4;
  uint64_t v68 = v63;
  while (v65 != v64)
  {
    int v69 = *((_DWORD *)v65 - 1);
    v65 -= 4;
    *((_DWORD *)v68 - 1) = v69;
    v68 -= 4;
  }
  std::vector<int> __p = v68;
  v113.i64[0] = (uint64_t)(v63 + 4);
  v113.i64[1] = (uint64_t)&v63[4 * v62];
  if (v64)
  {
    operator delete(v64);
    uint64_t v66 = (char *)v113.i64[1];
  }
  v113.i64[0] = (uint64_t)(v63 + 4);
  if (v67 >= v66)
  {
    std::vector<int> v71 = (char *)__p;
    uint64_t v72 = (v67 - (unsigned char *)__p) >> 2;
    unint64_t v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 62) {
      goto LABEL_175;
    }
    uint64_t v74 = v66 - (unsigned char *)__p;
    if (v74 >> 1 > v73) {
      unint64_t v73 = v74 >> 1;
    }
    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v75 = v73;
    }
    if (v75)
    {
      std::vector<int>::pointer v76 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v113.i64[1], v75);
      std::vector<int> v71 = (char *)__p;
      uint64_t v67 = (char *)v113.i64[0];
    }
    else
    {
      std::vector<int>::pointer v76 = 0;
    }
    uint64_t v77 = &v76[4 * v72];
    uint64_t v66 = &v76[4 * v75];
    *(_DWORD *)uint64_t v77 = a3;
    int v70 = v77 + 4;
    while (v67 != v71)
    {
      int v78 = *((_DWORD *)v67 - 1);
      v67 -= 4;
      *((_DWORD *)v77 - 1) = v78;
      v77 -= 4;
    }
    std::vector<int> __p = v77;
    v113.i64[0] = (uint64_t)v70;
    v113.i64[1] = (uint64_t)v66;
    if (v71)
    {
      operator delete(v71);
      uint64_t v66 = (char *)v113.i64[1];
    }
  }
  else
  {
    *((_DWORD *)v63 + 1) = a3;
    int v70 = v63 + 8;
  }
  v113.i64[0] = (uint64_t)v70;
  if (v70 >= v66)
  {
    long long v80 = (char *)__p;
    uint64_t v81 = (v70 - (unsigned char *)__p) >> 2;
    unint64_t v82 = v81 + 1;
    if ((unint64_t)(v81 + 1) >> 62) {
      goto LABEL_175;
    }
    uint64_t v83 = v66 - (unsigned char *)__p;
    if (v83 >> 1 > v82) {
      unint64_t v82 = v83 >> 1;
    }
    if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v84 = v82;
    }
    if (v84)
    {
      int v85 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v113.i64[1], v84);
      long long v80 = (char *)__p;
      int v70 = (char *)v113.i64[0];
    }
    else
    {
      int v85 = 0;
    }
    double v86 = &v85[4 * v81];
    uint64_t v66 = &v85[4 * v84];
    *(_DWORD *)double v86 = a3;
    long long v79 = v86 + 4;
    while (v70 != v80)
    {
      int v87 = *((_DWORD *)v70 - 1);
      v70 -= 4;
      *((_DWORD *)v86 - 1) = v87;
      v86 -= 4;
    }
    std::vector<int> __p = v86;
    v113.i64[0] = (uint64_t)v79;
    v113.i64[1] = (uint64_t)v66;
    if (v80)
    {
      operator delete(v80);
      uint64_t v66 = (char *)v113.i64[1];
    }
  }
  else
  {
    *(_DWORD *)int v70 = a3;
    long long v79 = v70 + 4;
  }
  v113.i64[0] = (uint64_t)v79;
  if (v79 >= v66)
  {
    int v89 = (char *)__p;
    uint64_t v90 = (v79 - (unsigned char *)__p) >> 2;
    unint64_t v91 = v90 + 1;
    if ((unint64_t)(v90 + 1) >> 62) {
      goto LABEL_175;
    }
    uint64_t v92 = v66 - (unsigned char *)__p;
    if (v92 >> 1 > v91) {
      unint64_t v91 = v92 >> 1;
    }
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v93 = v91;
    }
    if (v93)
    {
      uint64_t v94 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v113.i64[1], v93);
      int v89 = (char *)__p;
      long long v79 = (char *)v113.i64[0];
    }
    else
    {
      uint64_t v94 = 0;
    }
    int v95 = &v94[4 * v90];
    uint64_t v66 = &v94[4 * v93];
    *(_DWORD *)int v95 = a3;
    int v88 = v95 + 4;
    while (v79 != v89)
    {
      int v96 = *((_DWORD *)v79 - 1);
      v79 -= 4;
      *((_DWORD *)v95 - 1) = v96;
      v95 -= 4;
    }
    std::vector<int> __p = v95;
    v113.i64[0] = (uint64_t)v88;
    v113.i64[1] = (uint64_t)v66;
    if (v89)
    {
      operator delete(v89);
      uint64_t v66 = (char *)v113.i64[1];
    }
  }
  else
  {
    *(_DWORD *)long long v79 = a3;
    int v88 = v79 + 4;
  }
  v113.i64[0] = (uint64_t)v88;
  if (v88 >= v66)
  {
    __int16 v98 = (char *)__p;
    uint64_t v99 = (v88 - (unsigned char *)__p) >> 2;
    unint64_t v100 = v99 + 1;
    if (!((unint64_t)(v99 + 1) >> 62))
    {
      uint64_t v101 = v66 - (unsigned char *)__p;
      if (v101 >> 1 > v100) {
        unint64_t v100 = v101 >> 1;
      }
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v102 = v100;
      }
      if (v102)
      {
        uint64_t v103 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v113.i64[1], v102);
        __int16 v98 = (char *)__p;
        int v88 = (char *)v113.i64[0];
      }
      else
      {
        uint64_t v103 = 0;
      }
      unint64_t v104 = &v103[4 * v99];
      long long v105 = &v103[4 * v102];
      *(_DWORD *)unint64_t v104 = a3;
      unint64_t v97 = v104 + 4;
      while (v88 != v98)
      {
        int v106 = *((_DWORD *)v88 - 1);
        v88 -= 4;
        *((_DWORD *)v104 - 1) = v106;
        v104 -= 4;
      }
      std::vector<int> __p = v104;
      v113.i64[0] = (uint64_t)v97;
      v113.i64[1] = (uint64_t)v105;
      if (v98) {
        operator delete(v98);
      }
      goto LABEL_166;
    }
LABEL_175:
    abort();
  }
  *(_DWORD *)int v88 = a3;
  unint64_t v97 = v88 + 4;
LABEL_166:
  v113.i64[0] = (uint64_t)v97;
  *(_DWORD *)(a1 + 156) = (unint64_t)(v97 - (unsigned char *)__p) >> 2;
  Nightingale::wristTemperatureInputValidation::wristTemperatureInputValidation((Nightingale::wristTemperatureInputValidation *)&v109);
  uint64_t v108 = *a2;
  uint64_t v107 = a2[1];
  while (v108 != v107)
  {
    Nightingale::wristTemperatureInputValidation::checkListOfConditions((uint64_t)&v109, v110.i64, v108, &__p, a4, *(unsigned char *)(a1 + 72), &v116);
    std::vector<std::vector<std::pair<BOOL,float>>>::push_back[abi:nn180100](a5, (uint64_t **)&v116);
    if (v116)
    {
      uint64_t v117 = v116;
      operator delete(v116);
    }
    v108 += 24;
  }
  Nightingale::wristTemperatureInputValidation::~wristTemperatureInputValidation((Nightingale::wristTemperatureInputValidation *)&v109);
  if (__p)
  {
    v113.i64[0] = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<int> __p = &v110;
  std::vector<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
}

int32x2_t Nightingale::slidingWindowBaseLuna::reset(Nightingale::slidingWindowBaseLuna *this)
{
  std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 20);
  *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = 0;
  if (*((unsigned char *)this + 232)) {
    *((unsigned char *)this + 232) = 0;
  }
  *(void *)((char *)this + 236) = 0xFFFFFFFFLL;
  int v2 = (char *)this + 236;
  *(v2 - 116) = 0;
  *(v2 - 112) = 0;
  *(v2 - 108) = 0;
  *(v2 - 104) = 0;
  *(v2 - 100) = 0;
  *(v2 - 96) = 0;
  *(v2 - 92) = 0;
  *(v2 - 88) = 0;
  int32x2_t result = vdup_n_s32(0x7FC00000u);
  *((int32x2_t *)v2 + 1) = result;
  *((_DWORD *)v2 + 4) = 2143289344;
  v2[20] = 0;
  *((void *)v2 + 3) = 0x800000008;
  *(void *)(v2 + 44) = 0;
  *((_DWORD *)v2 + 15) = 0;
  return result;
}

float Nightingale::slidingWindowBaseLuna::getRollingScoreASlice(uint64_t a1, unsigned char **a2)
{
  std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&v7, *a2, &(*a2)[4 * *(int *)(a1 + 40)]);
  std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__p, &(*a2)[4 * *(int *)(a1 + 40)], a2[1]);
  float SlidingWinScore = Nightingale::getSlidingWinScore(&v7, &__p, -1.0);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v7.__begin_)
  {
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
  return SlidingWinScore;
}

void Nightingale::slidingWindowBaseLuna::updateRollingBufferWithAVal(float a1, uint64_t a2, float **a3, int a4)
{
  std::vector<int> v7 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    uint64_t v6 = *a3;
  }
  else if (a4 <= (unint64_t)(v6 - v7))
  {
    long long v8 = (char *)((char *)v6 - (char *)(v7 + 1));
    if (v6 != v7 + 1) {
      memmove(v7, v7 + 1, (char *)v6 - (char *)(v7 + 1));
    }
    uint64_t v6 = (float *)&v8[(void)v7];
    a3[1] = (float *)&v8[(void)v7];
  }
  unint64_t v9 = (unint64_t)a3[2];
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v11 = *a3;
    uint64_t v12 = v6 - *a3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62) {
      abort();
    }
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      long long v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(a3 + 2), v15);
      uint64_t v11 = *a3;
      uint64_t v6 = a3[1];
    }
    else
    {
      long long v16 = 0;
    }
    unint64_t v17 = (float *)&v16[4 * v12];
    uint64_t v18 = (float *)&v16[4 * v15];
    float *v17 = a1;
    uint64_t v10 = v17 + 1;
    while (v6 != v11)
    {
      int v19 = *((_DWORD *)v6-- - 1);
      *((_DWORD *)v17-- - 1) = v19;
    }
    *a3 = v17;
    a3[1] = v10;
    a3[2] = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *uint64_t v6 = a1;
    uint64_t v10 = v6 + 1;
  }
  a3[1] = v10;
}

uint64_t Nightingale::slidingWindowBaseLuna::applyAlgorithm(uint64_t a1, uint64_t *a2)
{
  int v3 = ~(*(_DWORD *)(a1 + 100) + *(_DWORD *)(a1 + 96)) - 1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
  int v4 = v3 & ~(v3 >> 31);
  *(_DWORD *)(a1 + 184) = v4;
  Nightingale::slidingWindowBaseLuna::findRollingOfRolling(a1, a2, *(unsigned __int8 *)(a1 + 88), v4, 1, 0, &v6);
  *(_OWORD *)(a1 + 216) = v6;
  *(unsigned char *)(a1 + 232) = v7;
  return Nightingale::slidingWindowBaseLuna::updateSearchRsltWeakSignal(a1);
}

void Nightingale::slidingWindowBaseLuna::findRollingOfRolling(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, unsigned char *a7@<X8>)
{
  unint64_t v13 = a7;
  *a7 = 0;
  a7[16] = 0;
  if (Nightingale::assertVectorOfVectors((uint64_t)a2))
  {
    uint64_t OverallWTmpValidationRsltASlice = Nightingale::slidingWindowBaseLuna::checkNumContinuousSlicesFailAvailabilityOverThreshold((Nightingale::slidingWindowBaseLuna *)a1);
    if ((OverallWTmpValidationRsltASlice & 1) == 0)
    {
      int v32 = a6;
      unint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v40 = 0;
      unint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v16 = *a2;
      uint64_t v15 = a2[1];
      int v33 = 1;
      if (*a2 == v15)
      {
        LODWORD(v18) = 0;
        float v22 = -1.0;
        float Mean = 0.0;
        float RollingScoreASlice = -1.0;
      }
      else
      {
        int v34 = a3;
        unint64_t v31 = v13;
        uint64_t v17 = 0;
        unint64_t v18 = 0;
        uint64_t v35 = a1 + 272;
        int64_t v19 = a4;
        float Mean = 0.0;
        float RollingScoreASlice = -1.0;
        float v22 = -1.0;
        do
        {
          uint64_t v23 = *(void *)(a1 + 160);
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 168) - v23) >> 3);
          if (v24 <= v18) {
            goto LABEL_42;
          }
          if (**(unsigned char **)(v23 + v17))
          {
            if (a5)
            {
              float v22 = -1.0;
              float RollingScoreASlice = -1.0;
            }
          }
          else
          {
            float RollingScoreASlice = Nightingale::slidingWindowBaseLuna::getRollingScoreASlice(a1, (unsigned char **)(v16 + v17));
            float v22 = v25;
            uint64_t v23 = *(void *)(a1 + 160);
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 168) - v23) >> 3);
          }
          if (v24 <= v18) {
LABEL_42:
          }
            abort();
          if (**(unsigned char **)(v23 + v17)) {
            BOOL v26 = a5 == 0;
          }
          else {
            BOOL v26 = 0;
          }
          if (!v26)
          {
            Nightingale::slidingWindowBaseLuna::updateRollingBufferWithAVal(RollingScoreASlice, OverallWTmpValidationRsltASlice, (float **)&v43, *(_DWORD *)(a1 + 76));
            Nightingale::slidingWindowBaseLuna::updateRollingBufferWithAVal(v22, v27, (float **)&v40, *(_DWORD *)(a1 + 76));
          }
          if ((uint64_t)v18 >= v19)
          {
            uint64_t OverallWTmpValidationRsltASlice = Nightingale::slidingWindowBaseLuna::getOverallWTmpValidationRsltASlice((Nightingale::slidingWindowBaseLuna *)a1, v18);
            if ((OverallWTmpValidationRsltASlice & 1) == 0)
            {
              std::vector<int> __p = 0;
              std::vector<int> __dst = 0;
              uint64_t v39 = 0;
              unint64_t v28 = v43;
              int64_t v29 = v44 - (unsigned char *)v43;
              if (v44 != v43)
              {
                std::vector<int>::__vallocate[abi:nn180100](&__p, v29 >> 2);
                unint64_t v30 = (char *)__dst;
                memmove(__dst, v28, v29);
                std::vector<int> __dst = &v30[v29];
              }
              float Mean = Nightingale::getMeanWin<float>((float **)&__p, -1);
              if (__p)
              {
                std::vector<int> __dst = __p;
                operator delete(__p);
              }
              if (Mean <= *(float *)(a1 + 80) || Mean >= *(float *)(a1 + 84))
              {
                BOOL v36 = 1;
                std::vector<BOOL>::push_back(v35, &v36);
              }
              else
              {
                BOOL v36 = 0;
                std::vector<BOOL>::push_back(v35, &v36);
                if (v34)
                {
                  int v33 = 0;
                  unint64_t v13 = v31;
                  *(void *)unint64_t v31 = v18 | ((unint64_t)LODWORD(RollingScoreASlice) << 32);
                  *((void *)v31 + 1) = LODWORD(v22) | ((unint64_t)LODWORD(Mean) << 32);
                  v31[16] = 1;
                  goto LABEL_30;
                }
              }
            }
          }
          ++v18;
          v17 += 24;
        }
        while (v16 + v17 != v15);
        int v33 = 1;
        unint64_t v13 = v31;
LABEL_30:
        LOBYTE(a3) = v34;
      }
      if (v32)
      {
        *(void *)(a1 + 280) = 0;
        BOOL v36 = Mean <= *(float *)(a1 + 80);
        std::vector<BOOL>::push_back(a1 + 272, &v36);
      }
      if ((a3 & 1) == 0)
      {
        *(void *)unint64_t v13 = v18 | ((unint64_t)LODWORD(RollingScoreASlice) << 32);
        *((void *)v13 + 1) = LODWORD(v22) | ((unint64_t)LODWORD(Mean) << 32);
        if (v33) {
          unsigned char v13[16] = 1;
        }
      }
      if (v40)
      {
        unint64_t v41 = v40;
        operator delete(v40);
      }
      if (v43)
      {
        uint64_t v44 = v43;
        operator delete(v43);
      }
    }
  }
}

uint64_t Nightingale::slidingWindowBaseLuna::updateSearchRsltWeakSignal(uint64_t this)
{
  if (*(unsigned char *)(this + 140)
    && *(unsigned char *)(this + 124)
    && *(unsigned char *)(this + 232)
    && *(float *)(this + 220) < *(float *)(this + 108))
  {
    unint64_t v1 = *(int *)(this + 136) - (uint64_t)*(int *)(this + 120);
    uint64_t v2 = *(void *)(this + 160);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(this + 168) - v2) >> 3) <= v1) {
      abort();
    }
    if (!**(unsigned char **)(v2 + 24 * v1)) {
      *(_DWORD *)(this + 216) = v1;
    }
  }
  return this;
}

uint64_t Nightingale::slidingWindowBaseLuna::checkNumContinuousSlicesFailAvailabilityOverThreshold(Nightingale::slidingWindowBaseLuna *this)
{
  if (!*((unsigned char *)this + 148)) {
    return 0;
  }
  unint64_t v1 = (unsigned char **)*((void *)this + 20);
  uint64_t v2 = (unsigned char **)*((void *)this + 21);
  if (v1 == v2) {
    return 0;
  }
  int v3 = 0;
  while (1)
  {
    if (!**v1)
    {
      LODWORD(v2) = 0;
      int v4 = 1;
      return v4 & v2;
    }
    if (++v3 >= *((_DWORD *)this + 36)) {
      break;
    }
    v1 += 3;
    if (v1 == v2)
    {
      int v4 = 0;
      return v4 & v2;
    }
  }
  int v4 = 1;
  LODWORD(v2) = 1;
  return v4 & v2;
}

BOOL Nightingale::slidingWindowBaseLuna::getOverallWTmpValidationRsltASlice(Nightingale::slidingWindowBaseLuna *this, int a2)
{
  uint64_t v2 = *((void *)this + 20);
  uint64_t v3 = *((void *)this + 21);
  if (v2 == v3 || 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 3) <= a2) {
    return 1;
  }
  int v4 = (uint64_t *)(v2 + 24 * a2);
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  if (v6 == v5) {
    return 0;
  }
  uint64_t v7 = v6 + 8;
  do
  {
    BOOL result = *(unsigned char *)(v7 - 8) != 0;
    if (*(unsigned char *)(v7 - 8)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v7 == v5;
    }
    v7 += 8;
  }
  while (!v9);
  return result;
}

uint64_t Nightingale::slidingWindowBaseLuna::getSliceCenterOffsetRange(uint64_t this)
{
  int v1 = *(_DWORD *)(*(void *)(this + 32) + 4) - **(_DWORD **)(this + 32);
  int v2 = (int)(float)((float)(v1 + 1) + -13.0);
  int v3 = (v2 - *(_DWORD *)(this + 76) - 8) & ~((v2 - *(_DWORD *)(this + 76) - 8) >> 31);
  int v4 = v3 + 6;
  if (v1 >= v2 + 10) {
    int v1 = v2 + 10;
  }
  int v5 = v1 - 5;
  if (v1 - 5 >= v4)
  {
    *(_DWORD *)(this + 120) = v4;
    *(unsigned char *)(this + 124) = 1;
    *(_DWORD *)(this + 128) = v5;
    *(unsigned char *)(this + 132) = 1;
    if (v5 >= v2 && v4 <= v2)
    {
      *(_DWORD *)(this + 136) = v2;
      *(unsigned char *)(this + 140) = 1;
      *(_DWORD *)(this + 144) = v2 - v3 + *(_DWORD *)(this + 116) - 6;
      *(unsigned char *)(this + 148) = 1;
    }
  }
  return this;
}

uint64_t Nightingale::slidingWindowBaseLuna::validateResults()
{
  return 1;
}

unint64_t Nightingale::slidingWindowBaseLuna::accumulateFailureReasonOverSlices(Nightingale::slidingWindowBaseLuna *this, char a2)
{
  unint64_t v4 = *((int *)this + 39);
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  std::vector<int> __p = 0;
  if (v4)
  {
    std::vector<int>::__vallocate[abi:nn180100](&__p, v4);
    int v5 = (char *)v42;
    bzero(v42, 4 * v4);
    uint64_t v42 = &v5[4 * v4];
  }
  uint64_t v6 = *((void *)this + 20);
  uint64_t v7 = *((void *)this + 21);
  if (v6 != v7)
  {
    int v8 = 0;
    do
    {
      if (v8 >= *((_DWORD *)this + 46))
      {
        BOOL v9 = *(unsigned char **)v6;
        uint64_t v10 = *(unsigned char **)(v6 + 8);
        if (*(unsigned char **)v6 != v10)
        {
          unint64_t v11 = 0;
          uint64_t v12 = __p;
          unint64_t v13 = ((unsigned char *)v42 - (unsigned char *)__p) >> 2;
          while (1)
          {
            if (*v9)
            {
              if (v13 <= v11) {
                goto LABEL_44;
              }
              ++v12[v11];
              if (a2) {
                break;
              }
            }
            v9 += 8;
            if (v9 == v10) {
              break;
            }
            ++v11;
          }
        }
      }
      ++v8;
      v6 += 24;
    }
    while (v6 != v7);
  }
  uint64_t v14 = *((void *)this + 34);
  unint64_t v15 = *((void *)this + 35);
  char v40 = 1;
  uint64_t v46 = v14;
  int v47 = 0;
  uint64_t v44 = v14 + 8 * (v15 >> 6);
  int v45 = v15 & 0x3F;
  int v16 = std::__count[abi:nn180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>(&v46, (uint64_t)&v44, &v40);
  int v17 = v16;
  unint64_t v18 = (char *)v42;
  if ((unint64_t)v42 >= v43)
  {
    unint64_t v20 = (char *)__p;
    int64_t v21 = ((unsigned char *)v42 - (unsigned char *)__p) >> 2;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 62) {
      goto LABEL_44;
    }
    uint64_t v23 = v43 - (void)__p;
    if ((uint64_t)(v43 - (void)__p) >> 1 > v22) {
      unint64_t v22 = v23 >> 1;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      float v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v43, v24);
      unint64_t v20 = (char *)__p;
      unint64_t v18 = (char *)v42;
    }
    else
    {
      float v25 = 0;
    }
    BOOL v26 = &v25[4 * v21];
    uint64_t v27 = &v25[4 * v24];
    *(_DWORD *)BOOL v26 = v17;
    int64_t v19 = v26 + 4;
    while (v18 != v20)
    {
      int v28 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v26 - 1) = v28;
      v26 -= 4;
    }
    std::vector<int> __p = v26;
    uint64_t v42 = v19;
    unint64_t v43 = (unint64_t)v27;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v42 = v16;
    int64_t v19 = v18 + 4;
  }
  uint64_t v42 = v19;
  int64_t v29 = operator new(0x28uLL);
  *int64_t v29 = 0u;
  v29[1] = 0u;
  *((void *)v29 + 4) = 0;
  unint64_t v30 = operator new(0x18uLL);
  void v30[2] = 0x200000004;
  *(_OWORD *)unint64_t v30 = xmmword_22F166B68;
  unint64_t v31 = (char *)__p;
  if (__p != v19)
  {
    uint64_t v32 = 0;
    while (v32 != 24)
    {
      uint64_t v33 = *(unsigned int *)((char *)v30 + v32);
      if (v33 >= 0xA) {
        break;
      }
      *((_DWORD *)v29 + v33) = *(_DWORD *)&v31[v32];
      v32 += 4;
      if (&v31[v32] == v19) {
        goto LABEL_35;
      }
    }
LABEL_44:
    abort();
  }
LABEL_35:
  operator delete(v30);
  int v34 = *(_DWORD *)v29;
  uint64_t v35 = 4;
  BOOL v36 = (char *)v29;
  do
  {
    int v37 = *(_DWORD *)((char *)v29 + v35);
    BOOL v38 = v34 < v37;
    if (v34 <= v37) {
      int v34 = *(_DWORD *)((char *)v29 + v35);
    }
    if (v38) {
      BOOL v36 = (char *)v29 + v35;
    }
    v35 += 4;
  }
  while (v35 != 40);
  operator delete(v29);
  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }
  return (unint64_t)(v36 - (char *)v29) >> 2;
}

void Nightingale::slidingWindowBaseLuna::getSlidingWindowCAOut(Nightingale::slidingWindowBaseLuna *this)
{
  *((_DWORD *)this + 65) = *((_DWORD *)this + 66);
  std::vector<int> __p = 0;
  int64_t v19 = 0;
  unint64_t v20 = 0;
  int v2 = (unsigned __int8 **)*((void *)this + 20);
  int v3 = (unsigned __int8 **)*((void *)this + 21);
  if (v2 == v3)
  {
    int v5 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    int v5 = 0;
    do
    {
      uint64_t v7 = *v2;
      uint64_t v6 = v2[1];
      if ((unint64_t)(v6 - *v2) >= 0x19)
      {
        if (v4 >= v20)
        {
          BOOL v9 = (char *)__p;
          uint64_t v10 = (v4 - (unsigned char *)__p) >> 2;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62) {
            abort();
          }
          uint64_t v12 = v20 - (unsigned char *)__p;
          if ((v20 - (unsigned char *)__p) >> 1 > v11) {
            unint64_t v11 = v12 >> 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v20, v13);
            BOOL v9 = (char *)__p;
            unint64_t v4 = v19;
          }
          else
          {
            uint64_t v14 = 0;
          }
          unint64_t v15 = &v14[4 * v10];
          *(_DWORD *)unint64_t v15 = *((_DWORD *)v7 + 7);
          int v8 = v15 + 4;
          while (v4 != v9)
          {
            int v16 = *((_DWORD *)v4 - 1);
            v4 -= 4;
            *((_DWORD *)v15 - 1) = v16;
            v15 -= 4;
          }
          std::vector<int> __p = v15;
          int64_t v19 = v8;
          unint64_t v20 = &v14[4 * v13];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v4 = *((_DWORD *)v7 + 7);
          int v8 = v4 + 4;
        }
        int64_t v19 = v8;
        uint64_t v7 = *v2;
        uint64_t v6 = v2[1];
        unint64_t v4 = v8;
      }
      if (v6 != v7) {
        v5 += *v7;
      }
      v2 += 3;
    }
    while (v2 != v3);
    if (__p != v4)
    {
      Nightingale::removeNANFromVector((uint64_t *)&__p);
      if (__p != v19)
      {
        std::__sort<std::__less<float,float> &,float *>();
        *((float *)this + 63) = Nightingale::getPercentile((uint64_t *)&__p, 0, 0.5);
      }
    }
  }
  float v17 = 0.0;
  if ((float)((float)v5 + (float)v5) <= (float)(int)(-1431655765
                                                    * ((*((void *)this + 21) - *((void *)this + 20)) >> 3)))
    float v17 = 1.0;
  *((float *)this + 61) = v17;
  if (*((unsigned char *)this + 232)) {
    *((_DWORD *)this + 62) = *((_DWORD *)this + 56);
  }
  if (__p)
  {
    int64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void *Nightingale::slidingWindowHistLuna::slidingWindowHistLuna(uint64_t a1, uint64_t a2)
{
  BOOL result = (void *)Nightingale::slidingWindowBaseLuna::slidingWindowBaseLuna(a1, a2);
  void *result = &unk_26E28CA88;
  return result;
}

{
  void *result;

  BOOL result = (void *)Nightingale::slidingWindowBaseLuna::slidingWindowBaseLuna(a1, a2);
  void *result = &unk_26E28CA88;
  return result;
}

uint64_t Nightingale::slidingWindowDayStreamLuna::slidingWindowDayStreamLuna(uint64_t a1, uint64_t a2)
{
  int v3 = (Nightingale::slidingWindowDayStreamLuna *)Nightingale::slidingWindowBaseLuna::slidingWindowBaseLuna(a1, a2);
  *(void *)int v3 = &unk_26E28CAD0;
  Nightingale::slidingWindowDayStreamLuna::setSlidingWinConfig(v3);
  return a1;
}

{
  Nightingale::slidingWindowDayStreamLuna *v3;

  int v3 = (Nightingale::slidingWindowDayStreamLuna *)Nightingale::slidingWindowBaseLuna::slidingWindowBaseLuna(a1, a2);
  *(void *)int v3 = &unk_26E28CAD0;
  Nightingale::slidingWindowDayStreamLuna::setSlidingWinConfig(v3);
  return a1;
}

double Nightingale::slidingWindowDayStreamLuna::setSlidingWinConfig(Nightingale::slidingWindowDayStreamLuna *this)
{
  *(void *)&v5[4] = *MEMORY[0x263EF8340];
  *((void *)this + 5) = 0x500000007;
  long long v3 = xmmword_22F166AC4;
  int v4 = 1050337608;
  std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)this + 48, (char *)&v3, (uint64_t)v5, 5uLL);
  *((unsigned char *)this + 72) = 0;
  *((_DWORD *)this + 19) = 3;
  *((void *)this + 10) = 0x3F3AE1483F09E83ELL;
  *((_WORD *)this + 44) = 257;
  *((_DWORD *)this + 23) = 1058139013;
  *((void *)this + 12) = 0x300000002;
  *((_DWORD *)this + 27) = 1058139013;
  *(void *)&double result = 0x100000001;
  *((void *)this + 14) = 0x100000001;
  return result;
}

uint64_t Nightingale::slidingWindowDayStreamLuna::getSliceCenterOffsetRange(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 32);
  int v2 = *(_DWORD *)(v1 + 28) - (*(_DWORD *)(this + 44) + *(_DWORD *)v1);
  *(_DWORD *)(this + 128) = v2;
  *(unsigned char *)(this + 132) = 1;
  int v3 = *(_DWORD *)(this + 76);
  *(_DWORD *)(this + 120) = v2 - v3 + 1;
  *(unsigned char *)(this + 124) = 1;
  if (*(unsigned char *)(v1 + 12))
  {
    float v4 = (float)*(int *)(v1 + 8) + -13.0;
    if (!*(unsigned char *)(this + 140)) {
      *(unsigned char *)(this + 140) = 1;
    }
    *(_DWORD *)(this + 136) = (int)v4;
  }
  *(_DWORD *)(this + 144) = v3;
  *(unsigned char *)(this + 148) = 1;
  return this;
}

double Nightingale::slidingWindowDayStreamLuna::applyAlgorithm(uint64_t a1, uint64_t *a2)
{
  Nightingale::slidingWindowBaseLuna::findRollingOfRolling(a1, a2, *(unsigned __int8 *)(a1 + 88), *(_DWORD *)(a1 + 76) - 1, 0, 1, &v4);
  double result = *(double *)&v4;
  *(_OWORD *)(a1 + 216) = v4;
  *(unsigned char *)(a1 + 232) = v5;
  return result;
}

uint64_t Nightingale::slidingWindowDayStreamLuna::validateResults(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 124) && (uint64_t v3 = *(void *)(a1 + 32), *(unsigned char *)(v3 + 12)))
  {
    BOOL v6 = Nightingale::passLutealPhaseCheck((Nightingale *)(*(_DWORD *)(a1 + 120) + *(_DWORD *)a2), (float)*(int *)(v3 + 8), (float)*(int *)(a1 + 112));
    std::vector<BOOL>::push_back(a1 + 192, &v6);
    return v6;
  }
  else
  {
    char v5 = (Nightingale::slidingWindowDayStreamLuna *)std::__throw_bad_optional_access[abi:nn180100]();
    return Nightingale::slidingWindowDayStreamLuna::getSlidingWindowCAOut(v5);
  }
}

uint64_t Nightingale::slidingWindowDayStreamLuna::getSlidingWindowCAOut(Nightingale::slidingWindowDayStreamLuna *this)
{
  *((_DWORD *)this + 65) = *((_DWORD *)this + 66);
  if (*((unsigned char *)this + 232)) {
    *((float *)this + 62) = Nightingale::getLogit(this, *((float *)this + 57));
  }
  uint64_t result = Nightingale::slidingWindowBaseLuna::checkNumContinuousSlicesFailAvailabilityOverThreshold(this);
  *((unsigned char *)this + 256) = result ^ 1;
  return result;
}

uint64_t Nightingale::slidingWindowBaseLuna::computeFwEndConfirmationFailureReason(Nightingale::slidingWindowBaseLuna *this)
{
  if (*((unsigned char *)this + 232)) {
    return 9;
  }
  unint64_t v3 = Nightingale::slidingWindowBaseLuna::accumulateFailureReasonOverSlices(this, *((unsigned char *)this + 89));
  uint64_t v4 = *((void *)this + 1);
  if (v3 >= (*((void *)this + 2) - v4) >> 2) {
    return 8;
  }
  else {
    return *(unsigned int *)(v4 + 4 * v3);
  }
}

uint64_t Nightingale::slidingWindowBaseLuna::computeFailureCode(uint64_t this)
{
  int v1 = *(unsigned __int8 *)(this + 264);
  if (v1 == 2) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (v1 == 9) {
    int v2 = 0;
  }
  if (v1 == 1) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  *(_DWORD *)(this + 240) = v3;
  return this;
}

uint64_t Nightingale::slidingWindowDayStreamLuna::computeFwEndConfirmationFailureReason(Nightingale::slidingWindowDayStreamLuna *this)
{
  if (*((unsigned char *)this + 232)) {
    return 9;
  }
  uint64_t v4 = *((void *)this + 21);
  if (*((void *)this + 20) == v4) {
    return 8;
  }
  std::vector<int> __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::vector<std::pair<BOOL,float>>::__init_with_size[abi:nn180100]<std::pair<BOOL,float>*,std::pair<BOOL,float>*>((char *)&__p, *(uint64_t **)(v4 - 24), *(uint64_t **)(v4 - 16), (uint64_t)(*(void *)(v4 - 16) - *(void *)(v4 - 24)) >> 3);
  if (Nightingale::slidingWindowBaseLuna::checkNumContinuousSlicesFailAvailabilityOverThreshold(this))
  {
    uint64_t v1 = 1;
    goto LABEL_20;
  }
  uint64_t v5 = *((void *)this + 35);
  if (v5
    && ((*(void *)(*((void *)this + 34) + (((unint64_t)(v5 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v5 - 1)) & 1) != 0)
  {
    uint64_t v1 = 3;
    goto LABEL_20;
  }
  if ((unint64_t)(v7 - (unsigned char *)__p) <= 0x18) {
    goto LABEL_22;
  }
  if (*((unsigned char *)__p + 24))
  {
    uint64_t v1 = 2;
    goto LABEL_20;
  }
  if ((unint64_t)(v7 - (unsigned char *)__p) <= 0x20) {
LABEL_22:
  }
    abort();
  if (*((unsigned char *)__p + 32))
  {
    uint64_t v1 = 4;
  }
  else if (*((unsigned char *)__p + 16))
  {
    uint64_t v1 = 5;
  }
  else
  {
    uint64_t v1 = 8;
  }
LABEL_20:
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return v1;
}

Nightingale::slidingWindowBaseLuna::slidingWinConfigStruct *Nightingale::slidingWindowBaseLuna::slidingWinConfigStruct::slidingWinConfigStruct(Nightingale::slidingWindowBaseLuna::slidingWinConfigStruct *this)
{
  *(void *)this = 0x500000007;
  int v2 = operator new(0x14uLL);
  *((void *)this + 2) = v2 + 5;
  *((void *)this + 3) = v2 + 5;
  v2[4] = 1050337608;
  *(_OWORD *)int v2 = xmmword_22F166B54;
  *((void *)this + 1) = v2;
  *((unsigned char *)this + 32) = 0;
  *((_DWORD *)this + 9) = 5;
  *((void *)this + 5) = 0x3F3AE1483F0A3D71;
  *((_WORD *)this + 24) = 257;
  *((_DWORD *)this + 13) = 1058139013;
  *((void *)this + 7) = 0x500000003;
  *((_DWORD *)this + 17) = 1058139013;
  *((void *)this + 9) = 0x100000001;
  return this;
}

std::vector<int> *std::vector<std::vector<float>>::__init_with_size[abi:nn180100]<std::vector<float>*,std::vector<float>*>(std::vector<int> *result, const std::vector<int> *a2, const std::vector<int> *a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    std::vector<std::vector<float>>::__vallocate[abi:nn180100](result, a4);
    uint64_t result = (std::vector<int> *)v6->__end_;
    while (a2 != a3)
    {
      uint64_t v7 = std::vector<int>::vector(result, a2++);
      uint64_t result = v7 + 1;
    }
    v6->__end_ = (std::vector<int>::pointer)result;
  }
  return result;
}

char *std::vector<std::vector<float>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<BOOL>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::__count[abi:nn180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *a1;
  if (*a3)
  {
    uint64_t v6 = *a1;
    return std::__count_BOOL[abi:nn180100]<true,std::vector<BOOL>,false>((uint64_t)&v6, *(unsigned int *)(a2 + 8) - (unint64_t)*((unsigned int *)a1 + 2) + 8 * (*(void *)a2 - v3));
  }
  else
  {
    uint64_t v5 = *a1;
    return std::__count_BOOL[abi:nn180100]<false,std::vector<BOOL>,false>((uint64_t)&v5, *(unsigned int *)(a2 + 8) - (unint64_t)*((unsigned int *)a1 + 2) + 8 * (*(void *)a2 - v3));
  }
}

uint64_t std::__count_BOOL[abi:nn180100]<true,std::vector<BOOL>,false>(uint64_t a1, unint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2) {
      unint64_t v3 = a2;
    }
    else {
      unint64_t v3 = (64 - v2);
    }
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & **(void **)a1));
    v4.i16[0] = vaddlv_u8(v4);
    uint64_t v5 = v4.u32[0];
    a2 -= v3;
    *(void *)a1 += 8;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a2 >= 0x40)
  {
    uint64_t v6 = *(int8x8_t **)a1;
    do
    {
      int8x8_t v7 = *v6++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(void *)a1 = v6;
  }
  if (a2)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(**(void **)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2)));
    v9.i16[0] = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

uint64_t std::__count_BOOL[abi:nn180100]<false,std::vector<BOOL>,false>(uint64_t a1, unint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2) {
      unint64_t v3 = a2;
    }
    else {
      unint64_t v3 = (64 - v2);
    }
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & ~**(void **)a1));
    v4.i16[0] = vaddlv_u8(v4);
    uint64_t v5 = v4.u32[0];
    a2 -= v3;
    *(void *)a1 += 8;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a2 >= 0x40)
  {
    uint64_t v6 = *(uint64_t **)a1;
    do
    {
      uint64_t v7 = *v6++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(void *)a1 = v6;
  }
  if (a2)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~**(void **)a1));
    v9.i16[0] = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

uint64_t Nightingale::ngtProjector::ngtProjector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  Nightingale::coreAnalyticsDayStream_t::coreAnalyticsDayStream_t((Nightingale::coreAnalyticsDayStream_t *)(a1 + 216));
  *(unsigned char *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  *(unsigned char *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 536) = xmmword_22F166DC0;
  *(unsigned char *)(a1 + 560) = 0;
  *(unsigned char *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 640) = xmmword_22F166DC0;
  *(unsigned char *)(a1 + 656) = 0;
  *(unsigned char *)(a1 + 660) = 0;
  return a1;
}

void Nightingale::ngtProjector::~ngtProjector(Nightingale::ngtProjector *this)
{
}

{
  Nightingale::structDLIn_hr::~structDLIn_hr((Nightingale::ngtProjector *)((char *)this + 24));
}

void Nightingale::ngtProjector::projector(Nightingale::ngtProjector *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7)
{
  Nightingale::periodEstimatorAggregation::periodEstimatorAggregation((Nightingale::periodEstimatorAggregation *)v99);
  uint64_t v12 = *((void *)a1 + 1);
  LOBYTE(v13) = *(unsigned char *)(v12 + 52);
  if ((_BYTE)v13)
  {
    int v13 = (int)*(float *)(v12 + 48);
    unsigned int v14 = v13 & 0xFFFFFF00;
    uint64_t v15 = 0x100000000;
  }
  else
  {
    uint64_t v15 = 0;
    unsigned int v14 = 0;
  }
  Nightingale::periodEstimatorCalendarWithEnd::periodEstimatorCalendarWithEnd((Nightingale::periodEstimatorBase *)v98, v15 | v14 | v13);
  uint64_t v16 = *(void *)(*(void *)a1 + 8);
  int v19 = *(_DWORD *)(v16 - 96);
  uint64_t v17 = v16 - 96;
  int v18 = v19;
  if (*(unsigned char *)(*(void *)a1 + 128))
  {
    Nightingale::ngtProjector::get1stPeriodProjInPeriodNow((Nightingale::periodEstimatorCalendar *)v98, v17, (uint64_t)v74);
    LOBYTE(v93) = 0;
    char v97 = 0;
    Nightingale::ngtProjector::periodEstimationOutStruct2NgtPrediction((uint64_t)a1, (uint64_t)v74, (uint64_t)__p, (uint64_t)&v93, v18, (uint64_t)v87);
    unint64_t v20 = a2[2];
    unint64_t v21 = a2[1];
    if (v21 >= v20)
    {
      uint64_t v23 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v21 - *a2) >> 3);
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) > 0x276276276276276) {
        goto LABEL_92;
      }
      unint64_t v25 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v20 - *a2) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x13B13B13B13B13BLL) {
        unint64_t v26 = 0x276276276276276;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        uint64_t v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_Prediction>>((uint64_t)(a2 + 2), v26);
      }
      else {
        uint64_t v27 = 0;
      }
      int v28 = &v27[104 * v23];
      int64_t v29 = &v27[104 * v26];
      *(_OWORD *)int v28 = *(_OWORD *)v87;
      *((_OWORD *)v28 + 1) = v88[0];
      *((_OWORD *)v28 + 2) = v88[1];
      *((void *)v28 + 12) = v92;
      *((_OWORD *)v28 + 5) = v91;
      *((_OWORD *)v28 + 4) = v90;
      *((_OWORD *)v28 + 3) = v89;
      uint64_t v22 = (uint64_t)(v28 + 104);
      unint64_t v31 = (char *)*a2;
      unint64_t v30 = (char *)a2[1];
      if (v30 != (char *)*a2)
      {
        do
        {
          long long v32 = *(_OWORD *)(v30 - 104);
          long long v33 = *(_OWORD *)(v30 - 88);
          *(_OWORD *)(v28 - 72) = *(_OWORD *)(v30 - 72);
          *(_OWORD *)(v28 - 88) = v33;
          *(_OWORD *)(v28 - 104) = v32;
          long long v34 = *(_OWORD *)(v30 - 56);
          long long v35 = *(_OWORD *)(v30 - 40);
          long long v36 = *(_OWORD *)(v30 - 24);
          *((void *)v28 - 1) = *((void *)v30 - 1);
          *(_OWORD *)(v28 - 24) = v36;
          *(_OWORD *)(v28 - 40) = v35;
          *(_OWORD *)(v28 - 56) = v34;
          v28 -= 104;
          v30 -= 104;
        }
        while (v30 != v31);
        unint64_t v30 = (char *)*a2;
      }
      *a2 = (uint64_t)v28;
      a2[1] = v22;
      a2[2] = (uint64_t)v29;
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      *(_OWORD *)(v21 + 48) = v89;
      *(_OWORD *)(v21 + 64) = v90;
      *(_OWORD *)(v21 + 80) = v91;
      *(void *)(v21 + 96) = v92;
      *(_OWORD *)unint64_t v21 = *(_OWORD *)v87;
      *(_OWORD *)(v21 + 16) = v88[0];
      *(_OWORD *)(v21 + 32) = v88[1];
      uint64_t v22 = v21 + 104;
    }
    a2[1] = v22;
    if (v97 && (void)v93)
    {
      *((void *)&v93 + 1) = v93;
      operator delete((void *)v93);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v74[0])
    {
      v74[1] = v74[0];
      operator delete(v74[0]);
    }
  }
  Nightingale::ngtProjector::get1stFwCompletePeriodProj(a1, a6, (uint64_t)v74);
  uint64_t vGrad_empty = Nightingale::CGradient::get_vGrad_empty((Nightingale::CGradient *)v82);
  if (vGrad_empty)
  {
    a2[1] = *a2;
    if (v80)
    {
      unsigned int v38 = v81;
      if (v81 <= 1)
      {
        int v39 = v79 - v18;
        int v40 = v79 - v18 - 5;
        if (v79 - v18 >= 5)
        {
          int v41 = v18 - LODWORD(v74[0]);
          if (!BYTE4(v74[0])) {
            int v41 = 0;
          }
          double v42 = (double)v40;
          double v43 = (double)v39;
          if (BYTE4(v74[0])) {
            BOOL v44 = v81 == 0;
          }
          else {
            BOOL v44 = 1;
          }
          int v45 = v41 + v39;
          if (v44) {
            int v46 = 0;
          }
          else {
            int v46 = v45;
          }
          uint64_t vGrad_empty = (uint64_t)(a3 + 2);
          unint64_t v47 = a3[2];
          unint64_t v48 = a3[1];
          if (v48 < v47)
          {
            *(_DWORD *)unint64_t v48 = v18;
            *(double *)(v48 + 8) = v42;
            *(void *)(v48 + 16) = 0;
            *(double *)(v48 + 24) = v42;
            *(double *)(v48 + 32) = v42;
            *(unsigned char *)(v48 + 40) = 1;
            *(double *)(v48 + 48) = v43;
            *(void *)(v48 + 56) = 0;
            *(double *)(v48 + 64) = v43;
            *(double *)(v48 + 72) = v43;
            *(unsigned char *)(v48 + 80) = 1;
            *(_DWORD *)(v48 + 88) = v40;
            *(_DWORD *)(v48 + 92) = 6;
            uint64_t v49 = v48 + 104;
            *(_DWORD *)(v48 + 96) = v46;
            *(_DWORD *)(v48 + 100) = v38;
LABEL_91:
            a3[1] = v49;
            goto LABEL_55;
          }
          uint64_t v56 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v48 - *a3) >> 3);
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) <= 0x276276276276276)
          {
            unint64_t v58 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v47 - *a3) >> 3);
            if (2 * v58 > v57) {
              unint64_t v57 = 2 * v58;
            }
            if (v58 >= 0x13B13B13B13B13BLL) {
              unint64_t v59 = 0x276276276276276;
            }
            else {
              unint64_t v59 = v57;
            }
            if (v59)
            {
              int v60 = v46;
              uint64_t v61 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_Prediction>>(vGrad_empty, v59);
              int v46 = v60;
            }
            else
            {
              uint64_t v61 = 0;
            }
            uint64_t v62 = (double *)&v61[104 * v56];
            *(_DWORD *)uint64_t v62 = v18;
            v62[1] = v42;
            v62[2] = 0.0;
            unint64_t v63 = &v61[104 * v59];
            v62[3] = v42;
            v62[4] = v42;
            *((unsigned char *)v62 + 40) = 1;
            v62[6] = v43;
            v62[7] = 0.0;
            v62[8] = v43;
            v62[9] = v43;
            *((unsigned char *)v62 + 80) = 1;
            *((_DWORD *)v62 + 22) = v40;
            *((_DWORD *)v62 + 23) = 6;
            *((_DWORD *)v62 + 24) = v46;
            *((_DWORD *)v62 + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v38;
            uint64_t v49 = (uint64_t)(v62 + 13);
            uint64_t v64 = *a3;
            uint64_t vGrad_empty = a3[1];
            if (vGrad_empty != *a3)
            {
              do
              {
                long long v65 = *(_OWORD *)(vGrad_empty - 104);
                long long v66 = *(_OWORD *)(vGrad_empty - 88);
                *(_OWORD *)(v62 - 9) = *(_OWORD *)(vGrad_empty - 72);
                *(_OWORD *)(v62 - 11) = v66;
                *(_OWORD *)(v62 - 13) = v65;
                long long v67 = *(_OWORD *)(vGrad_empty - 56);
                long long v68 = *(_OWORD *)(vGrad_empty - 40);
                long long v69 = *(_OWORD *)(vGrad_empty - 24);
                *(v62 - 1) = *(double *)(vGrad_empty - 8);
                *(_OWORD *)(v62 - 3) = v69;
                *(_OWORD *)(v62 - 5) = v68;
                *(_OWORD *)(v62 - 7) = v67;
                v62 -= 13;
                vGrad_empty -= 104;
              }
              while (vGrad_empty != v64);
              uint64_t vGrad_empty = *a3;
            }
            *a3 = (uint64_t)v62;
            a3[1] = v49;
            a3[2] = (uint64_t)v63;
            if (vGrad_empty) {
              operator delete((void *)vGrad_empty);
            }
            goto LABEL_91;
          }
LABEL_92:
          abort();
        }
      }
    }
  }
  else
  {
    int v50 = *(unsigned __int8 *)(*(void *)a1 + 128);
    memset(v88, 0, sizeof(v88));
    *(_OWORD *)int v87 = 0u;
    if (!Nightingale::CGradient::get_vGrad_empty((Nightingale::CGradient *)v82))
    {
      int v51 = v50 ? 4 : 5;
      Nightingale::ngtProjector::getDerivedPeriodProjs((uint64_t *)a1, (uint64_t)v74, v51, (uint64_t)&v93);
      std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__vdeallocate(v87);
      *(_OWORD *)int v87 = v93;
      *(void *)&v88[0] = v94;
      uint64_t v94 = 0;
      long long v93 = 0uLL;
      std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__vdeallocate((void **)v88 + 1);
      *(_OWORD *)((char *)v88 + 8) = v95;
      *((void *)&v88[1] + 1) = v96;
      uint64_t v96 = 0;
      long long v95 = 0uLL;
      v73[0] = &v95;
      std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__destroy_vector::operator()[abi:nn180100]((void ***)v73);
      v73[0] = &v93;
      std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__destroy_vector::operator()[abi:nn180100]((void ***)v73);
      Nightingale::ngtProjector::constructSurfacedPeriodProjs(a1, (uint64_t)v74, v87, v18, (void **)&v93);
      std::vector<Nightingale::ngt_Prediction>::__insert_with_size[abi:nn180100]<std::__wrap_iter<Nightingale::ngt_Prediction*>,std::__wrap_iter<Nightingale::ngt_Prediction*>>((uint64_t)a2, a2[1], (char *)v93, *((char **)&v93 + 1), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)&v93 + 1) - v93) >> 3));
      if ((void)v93)
      {
        *((void *)&v93 + 1) = v93;
        operator delete((void *)v93);
      }
    }
    Nightingale::ngtProjector::getDerivedFwProjs((Nightingale::CGradient *)v82, (uint64_t *)v88 + 1, (char **)&v93);
    Nightingale::ngtProjector::getDerivedFwProjs((Nightingale::CGradient *)v75, (uint64_t *)v87, (char **)v73);
    Nightingale::ngtProjector::constructSurfacedFwProjs((uint64_t)v74, (uint64_t **)&v93, v73, v18, &v71);
    std::vector<Nightingale::ngt_Prediction>::__insert_with_size[abi:nn180100]<std::__wrap_iter<Nightingale::ngt_Prediction*>,std::__wrap_iter<Nightingale::ngt_Prediction*>>((uint64_t)a3, a3[1], (char *)v71, v72, 0x4EC4EC4EC4EC4EC5 * ((v72 - (unsigned char *)v71) >> 3));
    if (v71)
    {
      uint64_t v72 = (char *)v71;
      operator delete(v71);
    }
    if (v73[0])
    {
      v73[1] = v73[0];
      operator delete(v73[0]);
    }
    if ((void)v93)
    {
      *((void *)&v93 + 1) = v93;
      operator delete((void *)v93);
    }
    *(void *)&long long v93 = (char *)v88 + 8;
    std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v93);
    *(void *)&long long v93 = v87;
    std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v93);
  }
LABEL_55:
  Nightingale::ngtProjector::shrinkLowRangeToRmOverlapFW(vGrad_empty, a2, a3, *(unsigned __int8 *)(*(void *)a1 + 128));
  Nightingale::ngtProjector::suppressPeriodFw_CycleFactor((BOOL)a1, a2, a3, a5, v87);
  uint64_t v54 = (void *)*a2;
  if (*a2)
  {
    a2[1] = (uint64_t)v54;
    operator delete(v54);
  }
  *(_OWORD *)a2 = *(_OWORD *)v87;
  a2[2] = *(void *)&v88[0];
  *(void *)&v88[0] = 0;
  v87[1] = 0;
  v87[0] = 0;
  uint64_t v55 = (void *)*a3;
  if (*a3)
  {
    a3[1] = (uint64_t)v55;
    operator delete(v55);
    uint64_t v55 = v87[0];
  }
  *(_OWORD *)a3 = *(_OWORD *)((char *)v88 + 8);
  a3[2] = *((void *)&v88[1] + 1);
  memset((char *)v88 + 8, 0, 24);
  if (v55)
  {
    v87[1] = v55;
    operator delete(v55);
  }
  if (a6)
  {
    Nightingale::ngtProjector::getCaContent((uint64_t)a1, (uint64_t)v74, v52, v53, a7);
    if (*a3 == a3[1]) {
      *(_DWORD *)(a7 + 224) = 4;
    }
    if (*a2 == a2[1]) {
      *(_DWORD *)(a7 + 124) = 5;
    }
  }
  if (v85)
  {
    double v86 = v85;
    operator delete(v85);
  }
  if (v83)
  {
    unint64_t v84 = v83;
    operator delete(v83);
  }
  if (v82[0])
  {
    v82[1] = v82[0];
    operator delete(v82[0]);
  }
  if (v77)
  {
    int v78 = v77;
    operator delete(v77);
  }
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
  Nightingale::periodEstimatorCalendarWithEnd::~periodEstimatorCalendarWithEnd((Nightingale::periodEstimatorCalendarWithEnd *)v98);
  Nightingale::periodEstimatorAggregation::~periodEstimatorAggregation((Nightingale::periodEstimatorAggregation *)v99);
}

void Nightingale::ngtProjector::get1stPeriodProjInPeriodNow(Nightingale::periodEstimatorCalendar *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>::pair[abi:nn180100]<true,0>((uint64_t)v22);
  if (*(unsigned char *)(a2 + 60)) {
    BOOL v6 = *(unsigned char *)(a2 + 52) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    *(_OWORD *)a3 = *(_OWORD *)v22;
    *(void *)(a3 + 16) = v23;
    v22[0] = 0;
    v22[1] = 0;
    *(_OWORD *)(a3 + 24) = v24[0];
    *(_OWORD *)(a3 + 33) = *(_OWORD *)((char *)v24 + 9);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)v25;
    *(void *)(a3 + 69) = *(void *)&v25[13];
    *(_OWORD *)(a3 + 80) = *(_OWORD *)v26;
    *(void *)(a3 + 96) = v27;
    v26[1] = 0;
    uint64_t v27 = 0;
    uint64_t v23 = 0;
    v26[0] = 0;
    long long v7 = v28[0];
    *(_OWORD *)(a3 + 113) = *(_OWORD *)((char *)v28 + 9);
    *(_OWORD *)(a3 + 104) = v7;
    long long v8 = *(_OWORD *)v29;
    *(void *)(a3 + 149) = *(void *)&v29[13];
    *(_OWORD *)(a3 + 136) = v8;
  }
  else
  {
    Nightingale::CGradient::CGradient((uint64_t)&__p);
    v21[0] = 0;
    v21[4] = 0;
    unsigned __int8 v21[8] = 0;
    v21[12] = 0;
    v21[16] = 0;
    v21[20] = 0;
    Nightingale::periodEstimatorCalendar::getPeriodStartGradient(a1, 0.0, 0.0, (uint64_t)&v16);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    std::vector<int> __p = v16;
    v20[0] = v17[0];
    *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)v17 + 9);
    Nightingale::periodEstimatorCalendarWithEnd::getPeriodEndProjection(a2, &__p, (uint64_t)&v16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::vector<int>::pointer begin = __p.__begin_;
    int64_t v10 = (char *)__p.__end_ - (char *)__p.__begin_;
    if (__p.__end_ != __p.__begin_)
    {
      std::vector<int>::__vallocate[abi:nn180100]((void *)a3, v10 >> 2);
      unint64_t v11 = *(char **)(a3 + 8);
      memmove(v11, begin, v10);
      *(void *)(a3 + 8) = &v11[v10];
    }
    long long v12 = v20[0];
    *(void *)(a3 + 80) = 0;
    *(_OWORD *)(a3 + 24) = v12;
    *(_OWORD *)(a3 + 33) = *(_OWORD *)((char *)v20 + 9);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)v21;
    *(void *)(a3 + 69) = *(void *)&v21[13];
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    std::vector<int>::pointer v13 = v16.__begin_;
    int64_t v14 = (char *)v16.__end_ - (char *)v16.__begin_;
    if (v16.__end_ != v16.__begin_)
    {
      std::vector<int>::__vallocate[abi:nn180100]((void *)(a3 + 80), v14 >> 2);
      uint64_t v15 = *(char **)(a3 + 88);
      memmove(v15, v13, v14);
      *(void *)(a3 + 88) = &v15[v14];
      std::vector<int>::pointer v13 = v16.__begin_;
    }
    *(_OWORD *)(a3 + 104) = v17[0];
    *(_OWORD *)(a3 + 113) = *(_OWORD *)((char *)v17 + 9);
    *(_OWORD *)(a3 + 136) = *(_OWORD *)v18;
    *(void *)(a3 + 149) = *(void *)&v18[13];
    if (v13)
    {
      v16.__end_ = v13;
      operator delete(v13);
    }
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v26[0])
    {
      v26[1] = v26[0];
      operator delete(v26[0]);
    }
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void Nightingale::ngtProjector::periodEstimationOutStruct2NgtPrediction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  *(_OWORD *)(a6 + 88) = xmmword_22F166DC0;
  *(_DWORD *)a6 = a5;
  *(double *)(a6 + 8) = Nightingale::ngtProjector::getAMetricFromperiodEstimationOut(a1, (Nightingale::CGradient *)a2);
  *(void *)(a6 + 16) = v11;
  *(void *)(a6 + 24) = v12;
  *(void *)(a6 + 32) = v13;
  *(unsigned char *)(a6 + 40) = 1;
  *(double *)(a6 + 48) = Nightingale::ngtProjector::getAMetricFromperiodEstimationOut(a1, (Nightingale::CGradient *)a3);
  *(void *)(a6 + 56) = v14;
  *(void *)(a6 + 64) = v15;
  *(void *)(a6 + 72) = v16;
  *(unsigned char *)(a6 + 80) = 1;
  if (*(unsigned char *)(a2 + 60))
  {
    float v17 = *(float *)(a2 + 56);
    int v18 = llroundf(v17);
    *(_DWORD *)(a6 + 88) = v18;
    if (*(unsigned char *)(a3 + 68)) {
      *(_DWORD *)(a6 + 92) = llroundf((float)(*(float *)(a3 + 64) - v17) + 1.0);
    }
  }
  else
  {
    int v18 = 0;
  }
  if (*(unsigned char *)(a4 + 80))
  {
    Nightingale::ngtProjector::computeLowRangeMeanStd(a1, (Nightingale::CGradient *)a4);
    if (!*(unsigned char *)(a4 + 80)) {
      goto LABEL_12;
    }
    if (Nightingale::CGradient::get_isNull((Nightingale::CGradient *)a4)) {
      return;
    }
    if (!*(unsigned char *)(a4 + 80))
    {
LABEL_12:
      int v19 = (Nightingale::ngtProjector *)std::__throw_bad_optional_access[abi:nn180100]();
      Nightingale::ngtProjector::get1stFwCompletePeriodProj(v19, v20, v21, v22);
      return;
    }
    if (*(unsigned char *)(a4 + 60)) {
      *(_DWORD *)(a6 + 96) = (int)(float)((float)v18 - roundf(*(float *)(a4 + 56)));
    }
  }
}

double Nightingale::ngtProjector::get1stFwCompletePeriodProj@<D0>(Nightingale::ngtProjector *this@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  Nightingale::ngtProjector::compute1stFWPeriodStart(this, a2, a3);
  if (!Nightingale::CGradient::get_vGrad_empty((Nightingale::CGradient *)(a3 + 200)))
  {
    Nightingale::periodEstimatorCalendarWithEnd::getPeriodEndProjection(*(void *)(*(void *)this + 8) - 96, (std::vector<int> *)(a3 + 200), (uint64_t)&v9);
    long long v8 = *(void **)(a3 + 280);
    if (v8)
    {
      *(void *)(a3 + 288) = v8;
      operator delete(v8);
    }
    *(_OWORD *)(a3 + 280) = v9;
    *(void *)(a3 + 296) = v10;
    *(_OWORD *)(a3 + 304) = v11[0];
    *(_OWORD *)(a3 + 313) = *(_OWORD *)((char *)v11 + 9);
    double result = v12[0];
    *(_OWORD *)(a3 + 336) = *(_OWORD *)v12;
    *(double *)(a3 + 349) = *(double *)((char *)&v12[1] + 5);
  }
  return result;
}

void Nightingale::ngtProjector::getDerivedPeriodProjs(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  int v8 = *(_DWORD *)(a2 + 360);
  unsigned int v9 = v8 - 1;
  if (v8 == 3) {
    int adjusted = Nightingale::CGradient::get_adjusted((Nightingale::CGradient *)(a2 + 200));
  }
  else {
    int adjusted = 0;
  }
  BOOL v11 = v9 < 2;
  if (v9 < 2) {
    int v12 = 1;
  }
  else {
    int v12 = adjusted;
  }
  Nightingale::periodEstimatorAggregation::deriveRestPeriodProjs(a2 + 200, *a1, a1[1], a3, 2, v12, v11, &v19);
  if ((uint64_t *)(a4 + 24) != &v19) {
    std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__assign_with_size[abi:nn180100]<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*>(a4 + 24, v19, v20, 0xCCCCCCCCCCCCCCCDLL * ((v20 - v19) >> 5));
  }
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  if (*(_DWORD *)(a2 + 360) == 3)
  {
    if (&v19 != (uint64_t *)a4)
    {
      uint64_t v13 = v19;
      uint64_t v14 = v20;
LABEL_14:
      std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__assign_with_size[abi:nn180100]<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*>(a4, v13, v14, 0xCCCCCCCCCCCCCCCDLL * ((v14 - v13) >> 5));
    }
  }
  else
  {
    Nightingale::periodEstimatorAggregation::deriveRestPeriodProjs(a2 + 16, *a1, a1[1], a3, 2, v12, 0, (uint64_t *)&v15);
    std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__vdeallocate((void **)&v17);
    long long v17 = v15;
    uint64_t v18 = v16;
    uint64_t v16 = 0;
    long long v15 = 0uLL;
    BOOL v21 = (void **)&v15;
    std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__destroy_vector::operator()[abi:nn180100](&v21);
    if (&v17 != (long long *)a4)
    {
      uint64_t v14 = *((void *)&v17 + 1);
      uint64_t v13 = v17;
      goto LABEL_14;
    }
  }
  *(void *)&long long v15 = &v17;
  std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v15);
  *(void *)&long long v17 = &v19;
  std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v17);
}

void Nightingale::ngtProjector::constructSurfacedPeriodProjs(_DWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, void **a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  LOBYTE(v78) = 0;
  uint64_t v10 = a2 + 16;
  char v80 = 0;
  std::optional<Nightingale::periodEstimationOutStruct>::operator=[abi:nn180100]<Nightingale::periodEstimationOutStruct&,void>((uint64_t)&v78, (std::vector<int> *)(a2 + 16));
  uint64_t v11 = *(void *)(*(void *)a1 + 96);
  if ((v11 & 0xFF00000000) != 0)
  {
    a1[164] = v11 - *(_DWORD *)(*(void *)(*(void *)a1 + 8) - 96);
    *((unsigned char *)a1 + 660) = 1;
  }
  Nightingale::ngtProjector::periodEstimationOutStruct2NgtPrediction((uint64_t)a1, a2 + 200, a2 + 280, (uint64_t)&v78, a4, (uint64_t)&v71);
  HIDWORD(v77) = *(_DWORD *)(a2 + 360);
  int v12 = (char *)a5[2];
  uint64_t v68 = (uint64_t)(a5 + 2);
  uint64_t v13 = (char *)a5[1];
  if (v13 >= v12)
  {
    uint64_t v18 = (char *)*a5;
    uint64_t v19 = 0x4EC4EC4EC4EC4EC5 * ((v13 - (unsigned char *)*a5) >> 3);
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) > 0x276276276276276) {
LABEL_53:
    }
      abort();
    unint64_t v21 = 0x4EC4EC4EC4EC4EC5 * ((v12 - v18) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x13B13B13B13B13BLL) {
      unint64_t v22 = 0x276276276276276;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      uint64_t v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_Prediction>>(v68, v22);
      uint64_t v18 = (char *)*a5;
      uint64_t v13 = (char *)a5[1];
    }
    else
    {
      uint64_t v23 = 0;
    }
    long long v24 = v76;
    unint64_t v25 = &v23[104 * v19];
    *((_OWORD *)v25 + 4) = v75;
    *((_OWORD *)v25 + 5) = v24;
    unint64_t v26 = &v23[104 * v22];
    *((void *)v25 + 12) = v77;
    long long v27 = v72;
    *(_OWORD *)unint64_t v25 = v71;
    *((_OWORD *)v25 + 1) = v27;
    long long v28 = v74;
    *((_OWORD *)v25 + 2) = v73;
    *((_OWORD *)v25 + 3) = v28;
    long long v17 = v25 + 104;
    if (v13 == v18)
    {
      long long v34 = v25;
    }
    else
    {
      do
      {
        long long v29 = *(_OWORD *)(v13 - 104);
        long long v30 = *(_OWORD *)(v13 - 88);
        *(_OWORD *)(v25 - 72) = *(_OWORD *)(v13 - 72);
        *(_OWORD *)(v25 - 88) = v30;
        *(_OWORD *)(v25 - 104) = v29;
        long long v31 = *(_OWORD *)(v13 - 56);
        long long v32 = *(_OWORD *)(v13 - 40);
        long long v33 = *(_OWORD *)(v13 - 24);
        long long v34 = v25 - 104;
        *((void *)v25 - 1) = *((void *)v13 - 1);
        *(_OWORD *)(v25 - 24) = v33;
        *(_OWORD *)(v25 - 40) = v32;
        *(_OWORD *)(v25 - 56) = v31;
        v13 -= 104;
        v25 -= 104;
      }
      while (v13 != v18);
    }
    *a5 = v34;
    a5[1] = v17;
    a5[2] = v26;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v14 = v76;
    *((_OWORD *)v13 + 4) = v75;
    *((_OWORD *)v13 + 5) = v14;
    *((void *)v13 + 12) = v77;
    long long v15 = v72;
    *(_OWORD *)uint64_t v13 = v71;
    *((_OWORD *)v13 + 1) = v15;
    long long v16 = v74;
    long long v17 = v13 + 104;
    *((_OWORD *)v13 + 2) = v73;
    *((_OWORD *)v13 + 3) = v16;
  }
  a5[1] = v17;
  long long v35 = v76;
  *((_OWORD *)a1 + 32) = v75;
  *((_OWORD *)a1 + 33) = v35;
  *((void *)a1 + 68) = v77;
  long long v36 = v72;
  *((_OWORD *)a1 + 28) = v71;
  *((_OWORD *)a1 + 29) = v36;
  long long v37 = v74;
  *((_OWORD *)a1 + 30) = v73;
  *((_OWORD *)a1 + 31) = v37;
  Nightingale::ngtProjector::periodEstimationOutStruct2NgtPrediction((uint64_t)a1, v10, a2 + 96, (uint64_t)&v78, a4, (uint64_t)v69);
  long long v38 = v69[5];
  *(_OWORD *)(a1 + 154) = v69[4];
  *(_OWORD *)(a1 + 158) = v38;
  *((void *)a1 + 81) = v70;
  long long v39 = v69[1];
  *(_OWORD *)(a1 + 138) = v69[0];
  *(_OWORD *)(a1 + 142) = v39;
  long long v40 = v69[3];
  *(_OWORD *)(a1 + 146) = v69[2];
  *(_OWORD *)(a1 + 150) = v40;
  if (*((unsigned char *)a1 + 660)) {
    *((unsigned char *)a1 + 660) = 0;
  }
  uint64_t v41 = a3[3];
  uint64_t v42 = a3[4];
  if (v41 != v42)
  {
    unsigned __int8 v43 = 0;
    do
    {
      unsigned __int8 v44 = v43;
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 5) <= v43)
      {
        if (v80)
        {
          if (v78)
          {
            int v79 = v78;
            operator delete(v78);
          }
          char v80 = 0;
        }
      }
      else
      {
        std::optional<Nightingale::periodEstimationOutStruct>::operator=[abi:nn180100]<Nightingale::periodEstimationOutStruct&,void>((uint64_t)&v78, (std::vector<int> *)(*a3 + 160 * v43));
      }
      Nightingale::ngtProjector::periodEstimationOutStruct2NgtPrediction((uint64_t)a1, v41, v41 + 80, (uint64_t)&v78, a4, (uint64_t)&v71);
      HIDWORD(v77) = *(_DWORD *)(a2 + 360);
      int v46 = (char *)a5[1];
      int v45 = (char *)a5[2];
      if (v46 >= v45)
      {
        int v51 = (char *)*a5;
        uint64_t v52 = 0x4EC4EC4EC4EC4EC5 * ((v46 - (unsigned char *)*a5) >> 3);
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) > 0x276276276276276) {
          goto LABEL_53;
        }
        unint64_t v54 = 0x4EC4EC4EC4EC4EC5 * ((v45 - v51) >> 3);
        if (2 * v54 > v53) {
          unint64_t v53 = 2 * v54;
        }
        if (v54 >= 0x13B13B13B13B13BLL) {
          unint64_t v55 = 0x276276276276276;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          uint64_t v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_Prediction>>(v68, v55);
          int v51 = (char *)*a5;
          int v46 = (char *)a5[1];
        }
        else
        {
          uint64_t v56 = 0;
        }
        long long v57 = v76;
        unint64_t v58 = &v56[104 * v52];
        *((_OWORD *)v58 + 4) = v75;
        *((_OWORD *)v58 + 5) = v57;
        *((void *)v58 + 12) = v77;
        long long v59 = v72;
        *(_OWORD *)unint64_t v58 = v71;
        *((_OWORD *)v58 + 1) = v59;
        long long v60 = v74;
        *((_OWORD *)v58 + 2) = v73;
        *((_OWORD *)v58 + 3) = v60;
        if (v46 == v51)
        {
          long long v67 = &v56[104 * v52];
        }
        else
        {
          uint64_t v61 = &v56[104 * v52];
          do
          {
            long long v62 = *(_OWORD *)(v46 - 104);
            long long v63 = *(_OWORD *)(v46 - 88);
            *(_OWORD *)(v61 - 72) = *(_OWORD *)(v46 - 72);
            *(_OWORD *)(v61 - 88) = v63;
            *(_OWORD *)(v61 - 104) = v62;
            long long v64 = *(_OWORD *)(v46 - 56);
            long long v65 = *(_OWORD *)(v46 - 40);
            long long v66 = *(_OWORD *)(v46 - 24);
            long long v67 = v61 - 104;
            *((void *)v61 - 1) = *((void *)v46 - 1);
            *(_OWORD *)(v61 - 24) = v66;
            *(_OWORD *)(v61 - 40) = v65;
            *(_OWORD *)(v61 - 56) = v64;
            v46 -= 104;
            v61 -= 104;
          }
          while (v46 != v51);
        }
        int v50 = v58 + 104;
        *a5 = v67;
        a5[1] = v58 + 104;
        a5[2] = &v56[104 * v55];
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        long long v47 = v76;
        *((_OWORD *)v46 + 4) = v75;
        *((_OWORD *)v46 + 5) = v47;
        *((void *)v46 + 12) = v77;
        long long v48 = v72;
        *(_OWORD *)int v46 = v71;
        *((_OWORD *)v46 + 1) = v48;
        long long v49 = v74;
        int v50 = v46 + 104;
        *((_OWORD *)v46 + 2) = v73;
        *((_OWORD *)v46 + 3) = v49;
      }
      a5[1] = v50;
      unsigned __int8 v43 = v44 + 1;
      v41 += 160;
    }
    while (v41 != v42);
  }
  if (v80)
  {
    if (v78)
    {
      int v79 = v78;
      operator delete(v78);
    }
  }
}

void Nightingale::ngtProjector::getDerivedFwProjs(Nightingale::CGradient *this@<X2>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((unsigned char *)this + 76))
  {
    float v6 = *((float *)this + 18);
  }
  else
  {
    uint64_t v7 = *(void *)((char *)this + 36);
    if ((v7 & 0xFF00000000) != 0)
    {
      LODWORD(v6) = *(void *)((char *)this + 36);
      *((_DWORD *)this + 18) = v7;
      *((unsigned char *)this + 76) = 1;
    }
    else
    {
      double expectation = Nightingale::CGradient::get_expectation((float **)this);
      if (!*((unsigned char *)this + 76)) {
        *((unsigned char *)this + 76) = 1;
      }
      float v6 = expectation;
      *((float *)this + 18) = v6;
    }
  }
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    uint64_t v11 = 0;
    float v12 = roundf(v6);
    do
    {
      if (Nightingale::CGradient::get_isNull((Nightingale::CGradient *)v9)) {
        goto LABEL_19;
      }
      if (*(unsigned char *)(v9 + 76))
      {
        float v13 = *(float *)(v9 + 72);
      }
      else
      {
        uint64_t v14 = *(void *)(v9 + 36);
        if ((v14 & 0xFF00000000) != 0)
        {
          LODWORD(v13) = *(void *)(v9 + 36);
          *(_DWORD *)(v9 + 72) = v14;
          *(unsigned char *)(v9 + 76) = 1;
        }
        else
        {
          double v15 = Nightingale::CGradient::get_expectation((float **)v9);
          if (!*(unsigned char *)(v9 + 76)) {
            *(unsigned char *)(v9 + 76) = 1;
          }
          float v13 = v15;
          *(float *)(v9 + 72) = v13;
        }
      }
      if ((int)llroundf(v13 + -18.0) < (int)v12)
      {
LABEL_19:
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      else
      {
        unsigned int v18 = llroundf(v13 + -13.0);
        uint64_t v16 = v18;
        uint64_t v11 = v18 >> 8;
        uint64_t v17 = 0x100000000;
      }
      unint64_t v20 = (uint64_t *)a3[1];
      unint64_t v19 = (unint64_t)a3[2];
      if ((unint64_t)v20 >= v19)
      {
        uint64_t v22 = ((char *)v20 - *a3) >> 3;
        if ((unint64_t)(v22 + 1) >> 61) {
          abort();
        }
        uint64_t v23 = v19 - (void)*a3;
        uint64_t v24 = v23 >> 2;
        if (v23 >> 2 <= (unint64_t)(v22 + 1)) {
          uint64_t v24 = v22 + 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25) {
          unint64_t v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)(a3 + 2), v25);
        }
        else {
          unint64_t v26 = 0;
        }
        long long v27 = &v26[8 * v22];
        *(void *)long long v27 = v16 | (v11 << 8) | v17;
        unint64_t v21 = v27 + 8;
        long long v29 = *a3;
        long long v28 = a3[1];
        if (v28 != *a3)
        {
          do
          {
            int v30 = *((_DWORD *)v28 - 2);
            v28 -= 8;
            char v31 = v28[4];
            *((_DWORD *)v27 - 2) = v30;
            v27 -= 8;
            v27[4] = v31;
          }
          while (v28 != v29);
          long long v28 = *a3;
        }
        *a3 = v27;
        a3[1] = v21;
        a3[2] = &v26[8 * v25];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        uint64_t *v20 = v16 | (v11 << 8) | v17;
        unint64_t v21 = (char *)(v20 + 1);
      }
      a3[1] = v21;
      if (*(unsigned char *)(v9 + 76))
      {
        float v32 = *(float *)(v9 + 72);
      }
      else
      {
        uint64_t v33 = *(void *)(v9 + 36);
        if ((v33 & 0xFF00000000) != 0)
        {
          LODWORD(v32) = *(void *)(v9 + 36);
          *(_DWORD *)(v9 + 72) = v33;
          *(unsigned char *)(v9 + 76) = 1;
        }
        else
        {
          double v34 = Nightingale::CGradient::get_expectation((float **)v9);
          if (!*(unsigned char *)(v9 + 76)) {
            *(unsigned char *)(v9 + 76) = 1;
          }
          float v32 = v34;
          *(float *)(v9 + 72) = v32;
        }
      }
      float v12 = roundf(v32);
      v9 += 160;
    }
    while (v9 != v10);
  }
}

void Nightingale::ngtProjector::constructSurfacedFwProjs(uint64_t a1@<X1>, uint64_t **a2@<X2>, void *a3@<X3>, int a4@<W4>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  int v60 = a4;
  uint64_t v59 = a1;
  if (*(unsigned char *)(a1 + 188) && (int v9 = *(_DWORD *)(a1 + 184) - a4, v10 = v9 - 5, v9 >= 5))
  {
    int v12 = a4 - *(_DWORD *)a1;
    if (!*(unsigned char *)(a1 + 4)) {
      int v12 = 0;
    }
    double v13 = (double)v10;
    double v14 = (double)v9;
    int v15 = *(_DWORD *)(a1 + 192);
    if (v15) {
      BOOL v16 = *(unsigned char *)(a1 + 4) == 0;
    }
    else {
      BOOL v16 = 1;
    }
    int v17 = v12 + v9;
    if (v16) {
      int v18 = 0;
    }
    else {
      int v18 = v17;
    }
    unint64_t v19 = (double *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_Prediction>>((uint64_t)(a5 + 2), 1uLL);
    a4 = v60;
    *(_DWORD *)unint64_t v19 = v60;
    v19[1] = v13;
    unint64_t v21 = &v19[13 * v20];
    v19[2] = 0.0;
    v19[3] = v13;
    v19[4] = v13;
    *((unsigned char *)v19 + 40) = 1;
    v19[6] = v14;
    v19[7] = 0.0;
    unsigned __int8 v19[8] = v14;
    v19[9] = v14;
    *((unsigned char *)v19 + 80) = 1;
    *((_DWORD *)v19 + 22) = v10;
    *((_DWORD *)v19 + 23) = 6;
    *((_DWORD *)v19 + 24) = v18;
    *((_DWORD *)v19 + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v15;
    uint64_t v11 = (char *)(v19 + 13);
    uint64_t v23 = (char *)*a5;
    uint64_t v22 = (double *)a5[1];
    if (v22 != (double *)*a5)
    {
      do
      {
        long long v24 = *(_OWORD *)(v22 - 13);
        long long v25 = *(_OWORD *)(v22 - 11);
        *(_OWORD *)(v19 - 9) = *(_OWORD *)(v22 - 9);
        *(_OWORD *)(v19 - 11) = v25;
        *(_OWORD *)(v19 - 13) = v24;
        long long v26 = *(_OWORD *)(v22 - 7);
        long long v27 = *(_OWORD *)(v22 - 5);
        long long v28 = *(_OWORD *)(v22 - 3);
        *(v19 - 1) = *(v22 - 1);
        *(_OWORD *)(v19 - 3) = v28;
        *(_OWORD *)(v19 - 5) = v27;
        *(_OWORD *)(v19 - 7) = v26;
        v19 -= 13;
        v22 -= 13;
      }
      while (v22 != (double *)v23);
      uint64_t v22 = (double *)v23;
    }
    *a5 = v19;
    a5[1] = v11;
    a5[2] = v21;
    if (v22)
    {
      operator delete(v22);
      a4 = v60;
    }
    a5[1] = v11;
    a1 = v59;
  }
  else
  {
    uint64_t v11 = 0;
  }
  long long v29 = *a2;
  int v30 = a2[1];
  if (*a2 != v30)
  {
    unsigned __int8 v31 = 0;
    float v32 = a5 + 2;
    do
    {
      unsigned __int8 v33 = v31;
      if (v31 >= (unint64_t)((uint64_t)(a3[1] - *a3) >> 3))
      {
        int v36 = 0;
        int v35 = 0;
      }
      else
      {
        double v34 = (unsigned __int8 *)(*a3 + 8 * v31);
        int v35 = *v34;
        int v5 = *(unsigned __int16 *)(v34 + 1) | (v34[3] << 16);
        int v36 = v34[4];
      }
      uint64_t v37 = *v29;
      if ((*v29 & 0xFF00000000) != 0 && (int)v37 >= 5)
      {
        int v39 = *(_DWORD *)(a1 + 360);
        int v40 = v37 - 5;
        double v41 = (double)((int)v37 - 5);
        double v42 = (double)(int)v37;
        int v43 = v37 - (v5 << 8) - v35;
        if (v39) {
          BOOL v44 = v36 == 0;
        }
        else {
          BOOL v44 = 1;
        }
        if (v44) {
          int v45 = 0;
        }
        else {
          int v45 = v43;
        }
        if ((unint64_t)v11 >= *v32)
        {
          uint64_t v46 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v11[-*a5] >> 3);
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) > 0x276276276276276) {
            abort();
          }
          if (0x9D89D89D89D89D8ALL * ((uint64_t)(*v32 - *a5) >> 3) > v47) {
            unint64_t v47 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*v32 - *a5) >> 3);
          }
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*v32 - *a5) >> 3)) >= 0x13B13B13B13B13BLL) {
            unint64_t v48 = 0x276276276276276;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48)
          {
            long long v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_Prediction>>((uint64_t)v32, v48);
            a4 = v60;
          }
          else
          {
            long long v49 = 0;
          }
          int v50 = &v49[104 * v46];
          *(_DWORD *)int v50 = a4;
          *((double *)v50 + 1) = v41;
          *((void *)v50 + 2) = 0;
          *((double *)v50 + 3) = v41;
          *((double *)v50 + 4) = v41;
          v50[40] = 1;
          *(_DWORD *)(v50 + 41) = *(_DWORD *)v62;
          *((_DWORD *)v50 + 11) = *(_DWORD *)&v62[3];
          *((double *)v50 + 6) = v42;
          *((void *)v50 + 7) = 0;
          *((double *)v50 + 8) = v42;
          *((double *)v50 + 9) = v42;
          v50[80] = 1;
          *(_DWORD *)(v50 + 81) = *(_DWORD *)v61;
          *((_DWORD *)v50 + 21) = *(_DWORD *)&v61[3];
          *((_DWORD *)v50 + 22) = v40;
          *((_DWORD *)v50 + 23) = 6;
          *((_DWORD *)v50 + 24) = v45;
          *((_DWORD *)v50 + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v39;
          uint64_t v52 = (char *)*a5;
          int v51 = (char *)a5[1];
          unint64_t v53 = v50;
          if (v51 != (char *)*a5)
          {
            do
            {
              long long v54 = *(_OWORD *)(v51 - 104);
              long long v55 = *(_OWORD *)(v51 - 88);
              *(_OWORD *)(v53 - 72) = *(_OWORD *)(v51 - 72);
              *(_OWORD *)(v53 - 88) = v55;
              *(_OWORD *)(v53 - 104) = v54;
              long long v56 = *(_OWORD *)(v51 - 56);
              long long v57 = *(_OWORD *)(v51 - 40);
              long long v58 = *(_OWORD *)(v51 - 24);
              *((void *)v53 - 1) = *((void *)v51 - 1);
              *(_OWORD *)(v53 - 24) = v58;
              *(_OWORD *)(v53 - 40) = v57;
              *(_OWORD *)(v53 - 56) = v56;
              v53 -= 104;
              v51 -= 104;
            }
            while (v51 != v52);
            int v51 = v52;
          }
          uint64_t v11 = v50 + 104;
          *a5 = v53;
          a5[1] = v50 + 104;
          a5[2] = &v49[104 * v48];
          if (v51)
          {
            operator delete(v51);
            a4 = v60;
          }
          float v32 = a5 + 2;
          a1 = v59;
        }
        else
        {
          *(_DWORD *)uint64_t v11 = a4;
          *((double *)v11 + 1) = v41;
          *((void *)v11 + 2) = 0;
          *((double *)v11 + 3) = v41;
          *((double *)v11 + 4) = v41;
          v11[40] = 1;
          *(_DWORD *)(v11 + 41) = *(_DWORD *)v62;
          *((_DWORD *)v11 + 11) = *(_DWORD *)&v62[3];
          *((double *)v11 + 6) = v42;
          *((void *)v11 + 7) = 0;
          *((double *)v11 + 8) = v42;
          *((double *)v11 + 9) = v42;
          v11[80] = 1;
          *(_DWORD *)(v11 + 81) = *(_DWORD *)v61;
          *((_DWORD *)v11 + 21) = *(_DWORD *)&v61[3];
          *((_DWORD *)v11 + 22) = v40;
          *((_DWORD *)v11 + 23) = 6;
          *((_DWORD *)v11 + 24) = v45;
          *((_DWORD *)v11 + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v39;
          v11 += 104;
        }
        a5[1] = v11;
      }
      unsigned __int8 v31 = v33 + 1;
      ++v29;
    }
    while (v29 != v30);
  }
}

void Nightingale::ngtProjector::shrinkLowRangeToRmOverlapFW(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v7 = *a3;
    uint64_t v6 = a3[1];
    if (*a3 != v6)
    {
      int v8 = 0;
      uint64_t v9 = (unsigned __int128)((v6 - v7) * (__int128)0x4EC4EC4EC4EC4EC5) >> 64;
      unint64_t v10 = (v9 >> 5) + ((unint64_t)v9 >> 63);
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      uint64_t v11 = (_DWORD *)(v7 + 92);
      float v12 = 0.0;
      do
      {
        if (*(unsigned char *)(v4 + 40))
        {
          if (v8 < 1) {
            int v13 = 1;
          }
          else {
            int v13 = a4 ^ 1;
          }
          if (v13 != 1 || (a4 & 1) == 0)
          {
            float v14 = roundf(v12);
            unint64_t v15 = v10;
            BOOL v16 = v11;
            while (1)
            {
              int v17 = *v16 + *(v16 - 1);
              if (v14 <= (float)(v17 - 1) && round(*(double *)(v4 + 8)) > (double)(v17 - 1)) {
                break;
              }
              v16 += 26;
              if (!--v15) {
                goto LABEL_23;
              }
            }
            int v18 = *(_DWORD *)(v4 + 88);
            if (v18 != -1 && v18 < v17)
            {
              int v20 = v18 - v17 + *(_DWORD *)(v4 + 92);
              *(_DWORD *)(v4 + 88) = v17;
              *(_DWORD *)(v4 + 92) = v20;
            }
          }
LABEL_23:
          float v12 = *(double *)(v4 + 8);
          ++v8;
        }
        v4 += 104;
      }
      while (v4 != v5);
    }
  }
}

void Nightingale::ngtProjector::suppressPeriodFw_CycleFactor(BOOL a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  std::vector<int> __p = 0;
  long long v75 = 0;
  long long v76 = 0;
  long long v71 = 0;
  long long v72 = 0;
  long long v73 = 0;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      isFinite_aProunint64_t j = Nightingale::ngtProjector::isFinite_aProj(a1, v9);
      if (isFinite_aProj && !Nightingale::ngtProjector::shouldSuppressPeriodProj(isFinite_aProj, v9, a4))
      {
        float v12 = v75;
        if (v75 >= v76)
        {
          unint64_t v19 = __p;
          uint64_t v20 = 0x4EC4EC4EC4EC4EC5 * ((v75 - (unsigned char *)__p) >> 3);
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) > 0x276276276276276) {
LABEL_56:
          }
            abort();
          if (0x9D89D89D89D89D8ALL * ((v76 - (unsigned char *)__p) >> 3) > v21) {
            unint64_t v21 = 0x9D89D89D89D89D8ALL * ((v76 - (unsigned char *)__p) >> 3);
          }
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v76 - (unsigned char *)__p) >> 3)) >= 0x13B13B13B13B13BLL) {
            unint64_t v22 = 0x276276276276276;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22)
          {
            uint64_t v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_Prediction>>((uint64_t)&v76, v22);
            unint64_t v19 = __p;
            float v12 = v75;
          }
          else
          {
            uint64_t v23 = 0;
          }
          long long v24 = &v23[8 * ((v75 - (unsigned char *)__p) >> 3)];
          long long v25 = *(_OWORD *)v9;
          long long v26 = *(_OWORD *)(v9 + 32);
          *((_OWORD *)v24 + 1) = *(_OWORD *)(v9 + 16);
          *((_OWORD *)v24 + 2) = v26;
          *(_OWORD *)long long v24 = v25;
          long long v27 = *(_OWORD *)(v9 + 48);
          long long v28 = *(_OWORD *)(v9 + 64);
          long long v29 = *(_OWORD *)(v9 + 80);
          *((void *)v24 + 12) = *(void *)(v9 + 96);
          *((_OWORD *)v24 + 4) = v28;
          *((_OWORD *)v24 + 5) = v29;
          *((_OWORD *)v24 + 3) = v27;
          if (v12 == v19)
          {
            int v36 = &v23[104 * v20];
          }
          else
          {
            int v30 = &v23[104 * v20];
            do
            {
              long long v31 = *(_OWORD *)((char *)v12 - 104);
              long long v32 = *(_OWORD *)((char *)v12 - 88);
              *(_OWORD *)(v30 - 72) = *(_OWORD *)((char *)v12 - 72);
              *(_OWORD *)(v30 - 88) = v32;
              *(_OWORD *)(v30 - 104) = v31;
              long long v33 = *(_OWORD *)((char *)v12 - 56);
              long long v34 = *(_OWORD *)((char *)v12 - 40);
              long long v35 = *(_OWORD *)((char *)v12 - 24);
              int v36 = v30 - 104;
              *((void *)v30 - 1) = *((void *)v12 - 1);
              *(_OWORD *)(v30 - 24) = v35;
              *(_OWORD *)(v30 - 40) = v34;
              *(_OWORD *)(v30 - 56) = v33;
              float v12 = (_OWORD *)((char *)v12 - 104);
              v30 -= 104;
            }
            while (v12 != v19);
          }
          int v18 = v24 + 104;
          std::vector<int> __p = v36;
          long long v75 = v24 + 104;
          long long v76 = &v23[104 * v22];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          long long v13 = *(_OWORD *)v9;
          long long v14 = *(_OWORD *)(v9 + 32);
          *((_OWORD *)v75 + 1) = *(_OWORD *)(v9 + 16);
          v12[2] = v14;
          *float v12 = v13;
          long long v15 = *(_OWORD *)(v9 + 48);
          long long v16 = *(_OWORD *)(v9 + 64);
          long long v17 = *(_OWORD *)(v9 + 80);
          *((void *)v12 + 12) = *(void *)(v9 + 96);
          v12[4] = v16;
          void v12[5] = v17;
          double v12[3] = v15;
          int v18 = (char *)v12 + 104;
        }
        long long v75 = v18;
      }
      v9 += 104;
    }
    while (v9 != v10);
  }
  uint64_t v37 = *a3;
  uint64_t v38 = a3[1];
  if (*a3 != v38)
  {
    do
    {
      if (Nightingale::ngtProjector::isFinite_aProj(a1, v37))
      {
        BOOL v39 = Nightingale::ngt_Prediction::operator==((_DWORD *)v37, (_DWORD *)*a3);
        if ((Nightingale::ngtProjector::shouldSuppressFwProj(v39, v37, a4, v40, v39) & 1) == 0)
        {
          double v41 = v72;
          if (v72 >= v73)
          {
            unint64_t v48 = v71;
            unint64_t v49 = 0x4EC4EC4EC4EC4EC5 * ((v72 - v71) >> 3) + 1;
            if (v49 > 0x276276276276276) {
              goto LABEL_56;
            }
            if (0x9D89D89D89D89D8ALL * ((v73 - v71) >> 3) > v49) {
              unint64_t v49 = 0x9D89D89D89D89D8ALL * ((v73 - v71) >> 3);
            }
            if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v73 - v71) >> 3)) >= 0x13B13B13B13B13BLL) {
              unint64_t v50 = 0x276276276276276;
            }
            else {
              unint64_t v50 = v49;
            }
            if (v50)
            {
              int v51 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_Prediction>>((uint64_t)&v73, v50);
              unint64_t v48 = v71;
              double v41 = v72;
            }
            else
            {
              int v51 = 0;
            }
            uint64_t v52 = &v51[8 * ((v72 - v71) >> 3)];
            long long v53 = *(_OWORD *)v37;
            long long v54 = *(_OWORD *)(v37 + 32);
            *((_OWORD *)v52 + 1) = *(_OWORD *)(v37 + 16);
            *((_OWORD *)v52 + 2) = v54;
            *(_OWORD *)uint64_t v52 = v53;
            long long v55 = *(_OWORD *)(v37 + 48);
            long long v56 = *(_OWORD *)(v37 + 64);
            long long v57 = *(_OWORD *)(v37 + 80);
            *((void *)v52 + 12) = *(void *)(v37 + 96);
            *((_OWORD *)v52 + 4) = v56;
            *((_OWORD *)v52 + 5) = v57;
            *((_OWORD *)v52 + 3) = v55;
            if (v41 == v48)
            {
              long long v64 = &v51[8 * ((v72 - v71) >> 3)];
            }
            else
            {
              long long v58 = &v51[8 * ((v72 - v71) >> 3)];
              do
              {
                long long v59 = *(_OWORD *)(v41 - 104);
                long long v60 = *(_OWORD *)(v41 - 88);
                *(_OWORD *)(v58 - 72) = *(_OWORD *)(v41 - 72);
                *(_OWORD *)(v58 - 88) = v60;
                *(_OWORD *)(v58 - 104) = v59;
                long long v61 = *(_OWORD *)(v41 - 56);
                long long v62 = *(_OWORD *)(v41 - 40);
                long long v63 = *(_OWORD *)(v41 - 24);
                long long v64 = v58 - 104;
                *((void *)v58 - 1) = *((void *)v41 - 1);
                *(_OWORD *)(v58 - 24) = v63;
                *(_OWORD *)(v58 - 40) = v62;
                *(_OWORD *)(v58 - 56) = v61;
                v41 -= 104;
                v58 -= 104;
              }
              while (v41 != v48);
            }
            unint64_t v47 = v52 + 104;
            long long v71 = v64;
            long long v73 = &v51[104 * v50];
            if (v48) {
              operator delete(v48);
            }
          }
          else
          {
            long long v42 = *(_OWORD *)v37;
            long long v43 = *(_OWORD *)(v37 + 32);
            *((_OWORD *)v72 + 1) = *(_OWORD *)(v37 + 16);
            *((_OWORD *)v72 + 2) = v43;
            *(_OWORD *)long long v72 = v42;
            long long v44 = *(_OWORD *)(v37 + 48);
            long long v45 = *(_OWORD *)(v37 + 64);
            long long v46 = *(_OWORD *)(v37 + 80);
            *((void *)v72 + 12) = *(void *)(v37 + 96);
            *((_OWORD *)v72 + 4) = v45;
            *((_OWORD *)v72 + 5) = v46;
            *((_OWORD *)v72 + 3) = v44;
            unint64_t v47 = v72 + 104;
          }
          long long v72 = v47;
        }
      }
      v37 += 104;
    }
    while (v37 != v38);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  long long v65 = __p;
  int64_t v66 = v75 - (unsigned char *)__p;
  if (v75 != __p)
  {
    std::vector<Nightingale::ngt_Prediction>::__vallocate[abi:nn180100](a5, 0x4EC4EC4EC4EC4EC5 * (v66 >> 3));
    long long v67 = (char *)a5[1];
    memmove(v67, v65, v66);
    a5[1] = &v67[v66];
  }
  a5[3] = 0;
  a5[4] = 0;
  a5[5] = 0;
  uint64_t v68 = v71;
  int64_t v69 = v72 - v71;
  if (v72 != v71)
  {
    std::vector<Nightingale::ngt_Prediction>::__vallocate[abi:nn180100](a5 + 3, 0x4EC4EC4EC4EC4EC5 * (v69 >> 3));
    uint64_t v70 = (char *)a5[4];
    memmove(v70, v71, v69);
    a5[4] = &v70[v69];
    uint64_t v68 = v71;
  }
  if (v68) {
    operator delete(v68);
  }
  if (__p)
  {
    long long v75 = (char *)__p;
    operator delete(__p);
  }
}

void Nightingale::ngtProjector::getCaContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  if (**(void **)a1 == v5 || !*(unsigned char *)(*(void *)(a1 + 8) + 36)) {
    return;
  }
  *(unsigned char *)a5 = *(unsigned char *)(*(void *)a1 + 128);
  *(unsigned char *)(a5 + 120) = *(void *)(v5 - 24) != *(void *)(v5 - 16);
  Nightingale::ngtProjector::get1stProjMetricsCa(a1, a1 + 552, a5 + 56);
  Nightingale::ngtProjector::get1stProjMetricsCa(v9, a1 + 448, a5 + 8);
  int v11 = *(unsigned __int8 *)(a2 + 504);
  int v12 = *(unsigned __int8 *)(a2 + 505);
  if (!(v11 | v12))
  {
    *(_DWORD *)(a5 + 160) = 0;
    int v12 = *(unsigned __int8 *)(a2 + 505);
  }
  if (v11 || !v12)
  {
    if (v11 && !v12)
    {
      *(_DWORD *)(a5 + 160) = 2;
      int v12 = *(unsigned __int8 *)(a2 + 505);
    }
    if (!v11 || !v12) {
      goto LABEL_15;
    }
    int v13 = 3;
  }
  else
  {
    int v13 = 1;
  }
  *(_DWORD *)(a5 + 160) = v13;
LABEL_15:
  int v14 = *(_DWORD *)(a2 + 496);
  *(unsigned char *)(a5 + 108) = *(unsigned char *)(a2 + 500);
  *(_DWORD *)(a5 + 104) = v14;
  int v15 = *(_DWORD *)(a2 + 488);
  *(unsigned char *)(a5 + 116) = *(unsigned char *)(a2 + 492);
  *(_DWORD *)(a5 + 112) = v15;
  long long v16 = *(_OWORD *)(a2 + 444);
  long long v17 = *(_OWORD *)(a2 + 460);
  *(_OWORD *)(a5 + 192) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a5 + 180) = v17;
  *(_OWORD *)(a5 + 164) = v16;
  std::vector<int>::pointer begin = (std::vector<int>::pointer)Nightingale::ngtProjector::runSensorBasedAlgDueToCycleFactors(v10, (unsigned __int8 **)(*(void *)(*(void *)a1 + 8) - 24));
  if (begin)
  {
    uint64_t v19 = *(void *)(a1 + 8);
    if (*(unsigned char *)(v19 + 36))
    {
      int v20 = *(_DWORD *)(v19 + 32);
      Nightingale::wristTemperatureInputProcess::wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)&v52);
      Nightingale::wristTemperatureInputAcquisition::wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v51);
      uint64_t JDayIdx1stTmp = Nightingale::wristTemperatureInputAcquisition::getJDayIdx1stTmp(v21, *(unsigned int ***)(a1 + 16));
      if ((_BYTE)v23)
      {
        Nightingale::wristTemperatureInputAcquisition::extractKaliInputsJDayRange((unint64_t)v51, *(void **)(a1 + 16), v20 - 13, v20, JDayIdx1stTmp, v23, &v45);
        if (v45 != v46) {
          *(unsigned char *)(a5 + 121) = 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3) > 1;
        }
        if (__p)
        {
          unint64_t v50 = __p;
          operator delete(__p);
        }
        if (v47)
        {
          unint64_t v48 = v47;
          operator delete(v47);
        }
        long long v53 = (void **)&v45;
        std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v53);
      }
      Nightingale::wristTemperatureInputAcquisition::~wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v51);
      Nightingale::wristTemperatureInputProcess::~wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)&v52);
    }
    if (*(_DWORD *)(a2 + 192))
    {
      int v24 = *(_DWORD *)(a2 + 384);
      if (v24 == 2) {
        int v25 = 2;
      }
      else {
        int v25 = 4;
      }
      if (v24 == 1) {
        int v26 = 1;
      }
      else {
        int v26 = v25;
      }
    }
    else
    {
      int v26 = 4 * (*(unsigned char *)(a2 + 188) == 0);
    }
    *(_DWORD *)(a5 + 224) = v26;
    *(_OWORD *)double v41 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)((char *)&v41[2] + 1) = *(_OWORD *)(a2 + 377);
    long long v27 = std::vector<int>::vector(&v42, (const std::vector<int> *)(a2 + 400));
    uint64_t v43 = *(void *)(a2 + 424);
    char v44 = *(unsigned char *)(a2 + 432);
    Nightingale::ngtProjector::surfaceLunaCa((uint64_t)v27, v41, *(_DWORD *)(a2 + 192), *(void *)(a2 + 184), a5);
    std::vector<int>::pointer begin = v42.__begin_;
    if (v42.__begin_)
    {
      v42.__end_ = v42.__begin_;
      operator delete(v42.__begin_);
    }
    if (*(unsigned char *)(a2 + 392) && *(_DWORD *)(a2 + 192))
    {
      int v28 = *(_DWORD *)(a2 + 388);
      if (v28 >= 10) {
        unsigned __int8 v29 = 10;
      }
      else {
        unsigned __int8 v29 = *(_DWORD *)(a2 + 388);
      }
      int v30 = v29 >> 1;
      if (v28 < 0) {
        int v31 = -1;
      }
      else {
        int v31 = v30;
      }
    }
    else
    {
      int v31 = -1;
      *(_DWORD *)(a5 + 212) = -1;
    }
    *(_DWORD *)(a5 + 220) = v31;
  }
  CAPeriodPredictionMethod = (Nightingale::ngtProjector *)Nightingale::ngtProjector::getCAPeriodPredictionMethod((uint64_t)begin, (_DWORD *)a2);
  *(_DWORD *)(a5 + 124) = CAPeriodPredictionMethod;
  uint64_t v33 = *(void *)(*(void *)a1 + 8);
  if (*(unsigned char *)(v33 - 60))
  {
    uint64_t v34 = *(void *)(a1 + 8);
    if (!*(unsigned char *)(v34 + 36))
    {
      uint64_t v38 = (Nightingale::ngtProjector *)std::__throw_bad_optional_access[abi:nn180100]();
      Nightingale::ngtProjector::compute1stFWPeriodStart(v38, v39, v40);
      return;
    }
    long long v35 = (_DWORD *)(v34 + 32);
    int v36 = (int)(float)((float)(roundf(*(float *)(v33 - 64)) + -13.0) + (float)*(int *)(v33 - 96));
    if (*(unsigned char *)(a5 + 156)) {
      long long v35 = (_DWORD *)(a5 + 152);
    }
    uint64_t CABoundedDaysBetweenTodayAndCalFwEnd = Nightingale::ngtProjector::getCABoundedDaysBetweenTodayAndCalFwEnd(CAPeriodPredictionMethod, *v35 - v36);
  }
  else
  {
    uint64_t CABoundedDaysBetweenTodayAndCalFwEnd = 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a5 + 128) = CABoundedDaysBetweenTodayAndCalFwEnd;
  *(_DWORD *)(a5 + 132) = Nightingale::ngtProjector::getCACurrentCycleFactor(CABoundedDaysBetweenTodayAndCalFwEnd, (unsigned __int8 **)(v33 - 24));
}

void Nightingale::ngtProjector::compute1stFWPeriodStart(Nightingale::ngtProjector *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = 3;
  Nightingale::CGradient::CGradient(a3 + 16);
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 76) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 84) = 0;
  *(unsigned char *)(a3 + 88) = 0;
  uint64_t v6 = (char *)(a3 + 96);
  *(unsigned char *)(a3 + 92) = 0;
  Nightingale::CGradient::CGradient(a3 + 96);
  *(unsigned char *)(a3 + 152) = 0;
  *(unsigned char *)(a3 + 156) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(unsigned char *)(a3 + 164) = 0;
  *(unsigned char *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 172) = 0;
  *(void *)(a3 + 176) = 3;
  *(unsigned char *)(a3 + 184) = 0;
  *(unsigned char *)(a3 + 188) = 0;
  *(void *)(a3 + 192) = 3;
  Nightingale::CGradient::CGradient(a3 + 200);
  *(unsigned char *)(a3 + 256) = 0;
  *(unsigned char *)(a3 + 260) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(unsigned char *)(a3 + 268) = 0;
  *(unsigned char *)(a3 + 272) = 0;
  *(unsigned char *)(a3 + 276) = 0;
  Nightingale::CGradient::CGradient(a3 + 280);
  *(unsigned char *)(a3 + 336) = 0;
  *(unsigned char *)(a3 + 340) = 0;
  *(unsigned char *)(a3 + 344) = 0;
  *(unsigned char *)(a3 + 348) = 0;
  *(unsigned char *)(a3 + 352) = 0;
  *(unsigned char *)(a3 + 356) = 0;
  *(void *)(a3 + 360) = 3;
  *(_DWORD *)(a3 + 368) = 8;
  *(_WORD *)(a3 + 372) = 0;
  *(unsigned char *)(a3 + 374) = 0;
  *(void *)(a3 + 376) = -1;
  *(unsigned char *)(a3 + 388) = 0;
  *(unsigned char *)(a3 + 392) = 0;
  *(void *)(a3 + 408) = 0;
  *(void *)(a3 + 416) = 0;
  *(void *)(a3 + 400) = 0;
  *(_DWORD *)(a3 + 424) = -1;
  *(unsigned char *)(a3 + 428) = 0;
  *(unsigned char *)(a3 + 432) = 0;
  *(_DWORD *)(a3 + 444) = -1082130432;
  *(void *)(a3 + 448) = -1;
  *(void *)(a3 + 456) = -1;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)(a3 + 464) = _Q0;
  __asm { FMOV            V8.2S, #-1.0 }
  *(void *)(a3 + 480) = _D8;
  *(unsigned char *)(a3 + 488) = 0;
  *(unsigned char *)(a3 + 492) = 0;
  *(unsigned char *)(a3 + 496) = 0;
  *(unsigned char *)(a3 + 500) = 0;
  *(_DWORD *)(a3 + 504) = 0;
  if (!*(unsigned char *)(*((void *)this + 1) + 36)) {
    return;
  }
  uint64_t v13 = *(void *)(*(void *)this + 8);
  if (**(void **)this == v13) {
    return;
  }
  int v14 = *(_DWORD *)(v13 - 96);
  uint64_t v26 = *(void *)(*(void *)this + 104);
  long long v25 = _Q0;
  Nightingale::wristTemperatureInputProcess::wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)v59);
  Nightingale::wristTemperatureInputAcquisition::wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v58);
  Nightingale::ngtProjector::runLunaAlgorithm(this, a2, (uint64_t)&v44);
  LOBYTE(v37) = 0;
  BYTE4(v37) = 0;
  BYTE8(v37) = 0;
  HIDWORD(v37) = 7;
  Nightingale::CGradient::CGradient((uint64_t)__p);
  LOBYTE(v41) = 0;
  BYTE4(v41) = 0;
  BYTE8(v41) = 0;
  BYTE12(v41) = 0;
  v42[0] = 0;
  *(void *)&v42[4] = 0xBF80000000000005;
  *(void *)&v42[12] = -1;
  *(void *)&v42[20] = -1;
  *(_OWORD *)&v42[28] = v25;
  *(void *)&v42[44] = _D8;
  v42[52] = 0;
  LOBYTE(v43) = 0;
  if (v47 == 7 || v51 == 5)
  {
    Nightingale::ngtProjector::runHrAlgorithm(this, a2, (uint64_t)&v27);
    long long v37 = v27;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::vector<int> __p = *(_OWORD *)v28;
    uint64_t v39 = v29;
    v28[1] = 0;
    uint64_t v29 = 0;
    v28[0] = 0;
    v40[0] = v30[0];
    *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)v30 + 9);
    long long v41 = *(_OWORD *)v31;
    *(void *)std::vector<int> v42 = *(void *)&v31[16];
    int v43 = *(_DWORD *)&v33[32];
    *(_OWORD *)&v42[24] = *(_OWORD *)v33;
    *(_OWORD *)&v42[40] = *(_OWORD *)&v33[16];
    *(_OWORD *)&v42[8] = *(_OWORD *)v32;
    uint64_t v6 = (char *)(a3 + 96);
  }
  Nightingale::fwEstimatorOPK::fwEstimatorOPK((Nightingale::fwEstimatorOPK *)v36);
  uint64_t v15 = Nightingale::fwEstimatorOPK::getOnGoingjDayFwEndOpk((uint64_t)v36, v14, v26);
  Nightingale::ngtProjector::runCalAlgs(this, (uint64_t)&v27);
  Nightingale::ngtProjector::determineFinalFwEnd((uint64_t)this, a3, &v44, (int *)&v37, v15, (uint64_t)&v27, v14);
  Nightingale::ngtProjector::determineFinalPeriod(v16, a3, (uint64_t)&v44, (uint64_t)&v37, (uint64_t)&v27, v14);
  if (a2)
  {
    long long v17 = (_OWORD *)(a3 + 368);
    uint64_t v18 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 108))
    {
LABEL_18:
      long long v22 = *(_OWORD *)&v42[24];
      *(_OWORD *)(a3 + 444) = *(_OWORD *)&v42[8];
      *(_OWORD *)(a3 + 460) = v22;
      *(_OWORD *)(a3 + 472) = *(_OWORD *)&v42[36];
      _OWORD *v17 = v52[0];
      *(_OWORD *)(a3 + 377) = *(_OWORD *)((char *)v52 + 9);
      if (v17 != v52) {
        std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a3 + 400), (char *)__src, (uint64_t)v54, (v54 - (unsigned char *)__src) >> 2);
      }
      *(void *)(a3 + 424) = v55;
      *(unsigned char *)(a3 + 432) = v56;
      *(_DWORD *)(a3 + 440) = v57;
      char v23 = v42[0];
      *(unsigned char *)(a3 + 504) = BYTE8(v37);
      *(unsigned char *)(a3 + 505) = v23;
      char v24 = v50;
      *(unsigned char *)(a3 + 506) = v46;
      *(unsigned char *)(a3 + 507) = v24;
      goto LABEL_21;
    }
    int v19 = *(_DWORD *)(v18 + 104);
    int v20 = v19 + 1;
    if (v45)
    {
      uint64_t v21 = &v44;
    }
    else
    {
      if (!BYTE4(v37))
      {
LABEL_15:
        if (BYTE4(v27) && v19 > *(_DWORD *)(*(void *)(v18 + 8) - 96))
        {
          *(_DWORD *)(a3 + 488) = v27 - v20;
          *(unsigned char *)(a3 + 492) = 1;
        }
        goto LABEL_18;
      }
      uint64_t v21 = (int *)&v37;
    }
    *(_DWORD *)(a3 + 496) = *v21 - v20;
    *(unsigned char *)(a3 + 500) = 1;
    goto LABEL_15;
  }
LABEL_21:
  *(_OWORD *)a3 = v27;
  if (&v27 != (long long *)a3)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a3 + 16), (char *)v28[0], (uint64_t)v28[1], ((char *)v28[1] - (char *)v28[0]) >> 2);
    *(_OWORD *)(a3 + 40) = v30[0];
    *(_OWORD *)(a3 + 49) = *(_OWORD *)((char *)v30 + 9);
    *(_OWORD *)(a3 + 72) = *(_OWORD *)v31;
    *(void *)(a3 + 85) = *(void *)&v31[13];
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(v6, (char *)v32[0], (uint64_t)v32[1], ((char *)v32[1] - (char *)v32[0]) >> 2);
  }
  *(_OWORD *)(a3 + 120) = *(_OWORD *)&v33[8];
  *(_OWORD *)(a3 + 129) = *(_OWORD *)&v33[17];
  *(_OWORD *)(a3 + 152) = *(_OWORD *)v34;
  *(void *)(a3 + 165) = *(void *)&v34[13];
  *(void *)(a3 + 176) = v35;
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  Nightingale::fwEstimatorOPK::~fwEstimatorOPK((Nightingale::fwEstimatorOPK *)v36);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (__src)
  {
    long long v54 = __src;
    operator delete(__src);
  }
  if (v48)
  {
    unint64_t v49 = v48;
    operator delete(v48);
  }
  Nightingale::wristTemperatureInputAcquisition::~wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v58);
  Nightingale::wristTemperatureInputProcess::~wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)v59);
}

void Nightingale::ngtProjector::runLunaAlgorithm(Nightingale::ngtProjector *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = 7;
  uint64_t v6 = (void **)(a3 + 16);
  uint64_t v7 = Nightingale::CGradient::CGradient(a3 + 16);
  *(_DWORD *)(a3 + 152) = -1;
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 76) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 84) = 0;
  *(unsigned char *)(a3 + 88) = 0;
  *(void *)(a3 + 92) = 0x800000005;
  *(_WORD *)(a3 + 100) = 0;
  *(unsigned char *)(a3 + 102) = 0;
  *(void *)(a3 + 104) = -1;
  *(unsigned char *)(a3 + 116) = 0;
  *(unsigned char *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(unsigned char *)(a3 + 156) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(_DWORD *)(a3 + 168) = 5;
  if (*(unsigned char *)(*(void *)this + 84)
    && Nightingale::ngtProjector::runSensorBasedAlgDueToCycleFactors(v7, (unsigned __int8 **)(*(void *)(*(void *)this + 8) - 24)))
  {
    int v8 = (_OWORD *)(a3 + 96);
    Nightingale::wristTemperatureInputAcquisition::wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v46);
    uint64_t JDayIdx1stTmp = Nightingale::wristTemperatureInputAcquisition::getJDayIdx1stTmp(v9, *((unsigned int ***)this + 2));
    if (v11)
    {
      unint64_t v12 = JDayIdx1stTmp;
      uint64_t v13 = Nightingale::fwEstimatorLuna::fwEstimatorLuna((Nightingale::fwEstimatorLuna *)v45);
      Nightingale::fwEstimatorLuna::getFwEndLuna(v13, *(void **)this, *((void **)this + 2), *((void *)this + 1), v12, a2, &v33);
      _OWORD *v8 = v40[0];
      *(_OWORD *)(a3 + 105) = *(_OWORD *)((char *)v40 + 9);
      if (v8 != v40) {
        std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a3 + 128), (char *)v41, (uint64_t)v42, (v42 - (unsigned char *)v41) >> 2);
      }
      *(void *)(a3 + 152) = v43;
      *(unsigned char *)(a3 + 160) = v44;
      if (v35 && v39 && v37 && v33 != 7)
      {
        uint64_t v14 = *((void *)this + 1);
        if (*(unsigned char *)(v14 + 52)) {
          uint64_t v15 = (int)*(float *)(v14 + 48) | 0x100000000;
        }
        else {
          uint64_t v15 = 0;
        }
        Nightingale::periodEstimatorLuna::periodEstimatorLuna((uint64_t)v32, v15);
        if (!v35 || !v37 || !v39)
        {
          uint64_t v18 = (Nightingale::ngtProjector *)std::__throw_bad_optional_access[abi:nn180100]();
          Nightingale::ngtProjector::runHrAlgorithm(v18, v19);
          return;
        }
        int v16 = v36;
        int v17 = v38;
        if (v34 > v36) {
          int v16 = v34;
        }
        if (v34 + 20 < v38) {
          int v17 = v34 + 20;
        }
        _OWORD v30[2] = v17;
        v30[3] = v34;
        char v31 = v35;
        v30[0] = v33;
        v30[1] = v16;
        Nightingale::periodEstimatorLuna::estimatePeriodLuna((uint64_t)v32, *((void *)this + 2), *(uint64_t **)this, *((void *)this + 1), v12, (uint64_t)v30, (uint64_t)&__p);
        *(_DWORD *)a3 = v34;
        *(unsigned char *)(a3 + 4) = v35;
        *(_DWORD *)(a3 + 12) = v33;
        if (v29) {
          *(_DWORD *)(a3 + 104) = -1;
        }
        else {
          *(unsigned char *)(a3 + 8) = v35;
        }
        if (v6 != &__p) {
          std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a3 + 16), (char *)__p, (uint64_t)v21, (v21 - (unsigned char *)__p) >> 2);
        }
        *(_OWORD *)(a3 + 40) = v22[0];
        *(_OWORD *)(a3 + 49) = *(_OWORD *)((char *)v22 + 9);
        *(_DWORD *)(a3 + 92) = v28;
        *(unsigned char *)(a3 + 88) = v27;
        if ((Nightingale::CGradient::get_adjusted((Nightingale::CGradient *)&__p) & 1) == 0)
        {
          *(_DWORD *)(a3 + 72) = v23;
          *(unsigned char *)(a3 + 76) = v24;
          *(_DWORD *)(a3 + 80) = v25;
          *(unsigned char *)(a3 + 84) = v26;
        }
        if (a2) {
          *(_DWORD *)(a3 + 168) = v28;
        }
        if (__p)
        {
          uint64_t v21 = __p;
          operator delete(__p);
        }
        Nightingale::periodEstimatorLuna::~periodEstimatorLuna(v32);
      }
      if (v41)
      {
        std::vector<int> v42 = v41;
        operator delete(v41);
      }
      Nightingale::fwEstimatorLuna::~fwEstimatorLuna((Nightingale::fwEstimatorLuna *)v45);
    }
    else
    {
      *(_DWORD *)int v8 = 1;
    }
    Nightingale::wristTemperatureInputAcquisition::~wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v46);
  }
}

void Nightingale::ngtProjector::runHrAlgorithm(Nightingale::ngtProjector *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = 7;
  uint64_t v6 = (void **)(a3 + 16);
  uint64_t v7 = Nightingale::CGradient::CGradient(a3 + 16);
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 76) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 84) = 0;
  *(unsigned char *)(a3 + 88) = 0;
  *(void *)(a3 + 92) = 0xBF80000000000005;
  *(void *)(a3 + 100) = -1;
  *(void *)(a3 + 108) = -1;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)(a3 + 116) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a3 + 132) = _Q0;
  *(unsigned char *)(a3 + 140) = 0;
  *(unsigned char *)(a3 + 144) = 0;
  if (Nightingale::ngtProjector::runSensorBasedAlgDueToCycleFactors(v7, (unsigned __int8 **)(*(void *)(*(void *)this + 8) - 24)))
  {
    Nightingale::lstmHrFw::lstmHrFw(v32, *((void *)this + 2), *(void *)this, *((void *)this + 1));
    Nightingale::lstmHrFw::getFWEndHr((Nightingale::lstmHrFw *)v32, a2, (uint64_t)&v25);
    Nightingale::lstmHrPeriod::lstmHrPeriod(v24, *((void *)this + 2), *(void *)this, *((void *)this + 1), v27);
    Nightingale::lstmHrPeriod::estimatePeriodStartHr((Nightingale::lstmHrPeriod *)v24, (uint64_t)&__p);
    *(_DWORD *)a3 = v25;
    int v13 = v26;
    *(unsigned char *)(a3 + 4) = v26;
    *(unsigned char *)(a3 + 8) = v13;
    if (v13) {
      *(_DWORD *)(a3 + 12) = 4;
    }
    if (v6 != &__p) {
      std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a3 + 16), (char *)__p, (uint64_t)v17, (v17 - (unsigned char *)__p) >> 2);
    }
    *(_OWORD *)(a3 + 40) = v18[0];
    *(_OWORD *)(a3 + 49) = *(_OWORD *)((char *)v18 + 9);
    if ((Nightingale::CGradient::get_adjusted((Nightingale::CGradient *)&__p) & 1) == 0)
    {
      *(_DWORD *)(a3 + 72) = v19;
      *(unsigned char *)(a3 + 76) = v20;
      *(_DWORD *)(a3 + 80) = v21;
      *(unsigned char *)(a3 + 84) = v22;
    }
    int v14 = v23;
    *(unsigned char *)(a3 + 88) = v23;
    if (v14 && !Nightingale::CGradient::get_vGrad_empty((Nightingale::CGradient *)&__p)) {
      *(_DWORD *)(a3 + 92) = 3;
    }
    if (a2)
    {
      long long v15 = *(_OWORD *)v29;
      *(_OWORD *)(a3 + 96) = v28;
      *(_OWORD *)(a3 + 112) = v15;
      *(_OWORD *)(a3 + 124) = *(_OWORD *)&v29[12];
      *(_DWORD *)(a3 + 140) = v30;
      *(unsigned char *)(a3 + 144) = v31;
    }
    if (__p)
    {
      int v17 = __p;
      operator delete(__p);
    }
    Nightingale::lstmHrPeriod::~lstmHrPeriod((Nightingale::lstmHrPeriod *)v24);
    Nightingale::lstmHrFw::~lstmHrFw((Nightingale::lstmHrFw *)v32);
  }
}

void Nightingale::ngtProjector::runCalAlgs(Nightingale::ngtProjector *this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 4) = 0;
  *(void *)(a2 + 8) = 3;
  uint64_t v4 = (void **)(a2 + 16);
  Nightingale::CGradient::CGradient(a2 + 16);
  *(unsigned char *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 76) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 84) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 92) = 0;
  Nightingale::CGradient::CGradient(a2 + 96);
  *(unsigned char *)(a2 + 152) = 0;
  *(unsigned char *)(a2 + 156) = 0;
  *(unsigned char *)(a2 + 160) = 0;
  *(unsigned char *)(a2 + 164) = 0;
  *(unsigned char *)(a2 + 168) = 0;
  *(unsigned char *)(a2 + 172) = 0;
  *(void *)(a2 + 176) = 3;
  uint64_t v5 = *(void *)(*(void *)this + 8);
  if (**(void **)this != v5 && *(unsigned char *)(v5 - 52) && *(unsigned char *)(v5 - 60))
  {
    uint64_t v6 = *((void *)this + 1);
    if (*(unsigned char *)(v6 + 52)) {
      uint64_t v7 = (int)*(float *)(v6 + 48) | 0x100000000;
    }
    else {
      uint64_t v7 = 0;
    }
    Nightingale::periodEstimatorCalendar::periodEstimatorCalendar((Nightingale::periodEstimatorBase *)v16, v7);
    Nightingale::fwEstimatorCalendar::fwEstimatorCalendar((Nightingale::fwEstimatorCalendar *)v15);
    Nightingale::periodEstimatorCalendar::predict1stPeriodStartCal((Nightingale::periodEstimatorCalendar *)v16, *(void *)(*(void *)this + 8) - 96, *(void *)(*(void *)this + 104), *(void *)(*(void *)this + 96), *(unsigned int *)(*(void *)this + 124) | 0x100000000, (uint64_t)&v12);
    int v8 = *v4;
    if (*v4)
    {
      *(void *)(a2 + 24) = v8;
      operator delete(v8);
    }
    *(_OWORD *)(a2 + 16) = v12;
    *(void *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 40) = v14[0];
    *(_OWORD *)(a2 + 49) = *(_OWORD *)((char *)v14 + 9);
    *(_DWORD *)(a2 + 176) = 3;
    if (!Nightingale::CGradient::get_vGrad_empty((Nightingale::CGradient *)(a2 + 16)))
    {
      int v9 = *(_DWORD *)(*(void *)(*(void *)this + 8) - 96);
      if (*(unsigned char *)(a2 + 92))
      {
        float expectation = *(float *)(a2 + 88);
      }
      else if ((*(void *)(a2 + 52) & 0xFF00000000) != 0)
      {
        LODWORD(expectation) = *(void *)(a2 + 52);
      }
      else
      {
        float expectation = Nightingale::CGradient::get_expectation((float **)(a2 + 16));
      }
      *(float *)(a2 + 88) = expectation;
      *(unsigned char *)(a2 + 92) = 1;
      uint64_t v11 = Nightingale::fwEstimatorCalendar::getjDayFwEndCal((Nightingale::fwEstimatorCalendar *)v15, v9, (int)(float)(roundf(expectation) + (float)v9));
      *(_DWORD *)a2 = v11;
      *(unsigned char *)(a2 + 4) = BYTE4(v11);
      *(_DWORD *)(a2 + 8) = 3;
    }
    Nightingale::fwEstimatorCalendar::~fwEstimatorCalendar((Nightingale::fwEstimatorCalendar *)v15);
    Nightingale::periodEstimatorCalendar::~periodEstimatorCalendar((Nightingale::periodEstimatorCalendar *)v16);
  }
}

void Nightingale::ngtProjector::determineFinalFwEnd(uint64_t a1, uint64_t a2, int *a3, int *a4, uint64_t a5, uint64_t a6, int a7)
{
  if (BYTE4(a5))
  {
    *(_DWORD *)(a2 + 184) = a5;
    *(unsigned char *)(a2 + 188) = BYTE4(a5);
LABEL_4:
    *(_DWORD *)(a2 + 192) = 0;
    return;
  }
  if (*(unsigned char *)(*(void *)a1 + 108)) {
    goto LABEL_4;
  }
  if (*((unsigned char *)a3 + 4))
  {
    int v8 = *a3;
    *(unsigned char *)(a2 + 188) = *((unsigned char *)a3 + 4);
    *(_DWORD *)(a2 + 184) = v8;
    *(_DWORD *)(a2 + 192) = 1;
    *(_DWORD *)(a2 + 440) = a3[42];
  }
  else if (*((unsigned char *)a4 + 4))
  {
    int v10 = *a4;
    *(unsigned char *)(a2 + 188) = *((unsigned char *)a4 + 4);
    *(_DWORD *)(a2 + 184) = v10;
    *(_DWORD *)(a2 + 192) = 2;
  }
  else
  {
    if (*(unsigned char *)(a6 + 4))
    {
      *(_DWORD *)(a2 + 184) = *(_DWORD *)a6;
      *(unsigned char *)(a2 + 188) = 1;
      *(_DWORD *)(a2 + 192) = 3;
    }
    if (a4[23] == 3
      && ((Nightingale::CGradient::get_isNull((Nightingale::CGradient *)(a6 + 16)) & 1) != 0 || !*(unsigned char *)(a6 + 4)))
    {
      Nightingale::fwEstimatorCalendar::fwEstimatorCalendar((Nightingale::fwEstimatorCalendar *)v15);
      double expectation = Nightingale::CGradient::get_expectation((float **)a4 + 2);
      uint64_t v14 = Nightingale::fwEstimatorCalendar::getjDayFwEndCal((Nightingale::fwEstimatorCalendar *)v15, a7, (int)(round(expectation) + (double)a7));
      *(_DWORD *)(a2 + 184) = v14;
      *(unsigned char *)(a2 + 188) = BYTE4(v14);
      *(_DWORD *)(a2 + 192) = 2;
      Nightingale::fwEstimatorCalendar::~fwEstimatorCalendar((Nightingale::fwEstimatorCalendar *)v15);
    }
  }
}

void Nightingale::ngtProjector::determineFinalPeriod(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  Nightingale::periodEstimatorAggregation::periodEstimatorAggregation((Nightingale::periodEstimatorAggregation *)&v23);
  if (Nightingale::periodEstimatorAggregation::period1stProjFromluna((uint64_t)&v23, (_DWORD *)(a3 + 92)))
  {
    if (a2 + 184 != a3) {
      std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 200), *(char **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
    }
    uint64_t v11 = (float **)(a3 + 16);
    long long v12 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(a2 + 233) = *(_OWORD *)(a3 + 49);
    *(_OWORD *)(a2 + 224) = v12;
    *(_DWORD *)(a2 + 360) = 1;
    if (*(unsigned __int8 *)(a2 + 260) == *(unsigned __int8 *)(a3 + 76))
    {
      if (*(unsigned char *)(a2 + 260)) {
        *(float *)(a2 + 256) = (float)*(int *)(a3 + 72);
      }
    }
    else if (*(unsigned char *)(a2 + 260))
    {
      *(unsigned char *)(a2 + 260) = 0;
    }
    else
    {
      *(float *)(a2 + 256) = (float)*(int *)(a3 + 72);
      *(unsigned char *)(a2 + 260) = 1;
    }
    if (*(unsigned __int8 *)(a2 + 268) == *(unsigned __int8 *)(a3 + 84))
    {
      if (*(unsigned char *)(a2 + 268))
      {
        int v17 = *(_DWORD *)(a3 + 80);
LABEL_34:
        *(float *)(a2 + 264) = (float)v17;
        goto LABEL_39;
      }
      goto LABEL_39;
    }
    if (!*(unsigned char *)(a2 + 268))
    {
      int v18 = *(_DWORD *)(a3 + 80);
LABEL_38:
      *(float *)(a2 + 264) = (float)v18;
      *(unsigned char *)(a2 + 268) = 1;
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  if (!Nightingale::periodEstimatorAggregation::period1stProjFromHR((uint64_t)&v23, (_DWORD *)(a4 + 92)))
  {
    if (!(*(unsigned __int8 *)(a3 + 88) | *(unsigned __int8 *)(a4 + 88)))
    {
      if (a2 + 184 != a5) {
        std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 200), *(char **)(a5 + 16), *(void *)(a5 + 24), (uint64_t)(*(void *)(a5 + 24) - *(void *)(a5 + 16)) >> 2);
      }
      long long v15 = *(_OWORD *)(a5 + 40);
      *(_OWORD *)(a2 + 233) = *(_OWORD *)(a5 + 49);
      *(_OWORD *)(a2 + 224) = v15;
      long long v16 = *(_OWORD *)(a5 + 72);
      *(void *)(a2 + 269) = *(void *)(a5 + 85);
      *(_OWORD *)(a2 + 256) = v16;
      *(_DWORD *)(a2 + 360) = *(_DWORD *)(a5 + 176);
    }
    goto LABEL_42;
  }
  if (!*(unsigned char *)(a2 + 188))
  {
LABEL_11:
    if (a2 + 184 != a4) {
      std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 200), *(char **)(a4 + 16), *(void *)(a4 + 24), (uint64_t)(*(void *)(a4 + 24) - *(void *)(a4 + 16)) >> 2);
    }
    uint64_t v11 = (float **)(a4 + 16);
    long long v14 = *(_OWORD *)(a4 + 40);
    *(_OWORD *)(a2 + 233) = *(_OWORD *)(a4 + 49);
    *(_OWORD *)(a2 + 224) = v14;
    *(_DWORD *)(a2 + 360) = 2;
    if (*(unsigned __int8 *)(a2 + 260) == *(unsigned __int8 *)(a4 + 76))
    {
      if (*(unsigned char *)(a2 + 260)) {
        *(float *)(a2 + 256) = (float)*(int *)(a4 + 72);
      }
    }
    else if (*(unsigned char *)(a2 + 260))
    {
      *(unsigned char *)(a2 + 260) = 0;
    }
    else
    {
      *(float *)(a2 + 256) = (float)*(int *)(a4 + 72);
      *(unsigned char *)(a2 + 260) = 1;
    }
    if (*(unsigned __int8 *)(a2 + 268) == *(unsigned __int8 *)(a4 + 84))
    {
      if (*(unsigned char *)(a2 + 268))
      {
        int v17 = *(_DWORD *)(a4 + 80);
        goto LABEL_34;
      }
LABEL_39:
      double expectation = Nightingale::CGradient::get_expectation(v11);
      if (!*(unsigned char *)(a2 + 276)) {
        *(unsigned char *)(a2 + 276) = 1;
      }
      float v20 = expectation;
      *(float *)(a2 + 272) = v20;
      goto LABEL_42;
    }
    if (!*(unsigned char *)(a2 + 268))
    {
      int v18 = *(_DWORD *)(a4 + 80);
      goto LABEL_38;
    }
LABEL_36:
    *(unsigned char *)(a2 + 268) = 0;
    goto LABEL_39;
  }
  double v13 = Nightingale::CGradient::get_expectation((float **)(a4 + 16));
  if (*(unsigned char *)(a2 + 188))
  {
    if (round(v13) + (double)a6 - (double)*(int *)(a2 + 184) < 6.0)
    {
LABEL_42:
      Nightingale::periodEstimatorAggregation::~periodEstimatorAggregation((Nightingale::periodEstimatorAggregation *)&v23);
      return;
    }
    goto LABEL_11;
  }
  uint64_t v21 = std::__throw_bad_optional_access[abi:nn180100]();
  Nightingale::ngtProjector::runSensorBasedAlgDueToCycleFactors(v21, v22);
}

BOOL Nightingale::ngtProjector::runSensorBasedAlgDueToCycleFactors(uint64_t a1, unsigned __int8 **a2)
{
  std::vector<int> __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  BOOL v2 = Nightingale::phaseFactorProcessor::containContraceptiveCycleFactors((uint64_t)&__p, a2);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  return !v2;
}

uint64_t std::optional<Nightingale::periodEstimationOutStruct>::operator=[abi:nn180100]<Nightingale::periodEstimationOutStruct&,void>(uint64_t a1, std::vector<int> *__x)
{
  if (*(unsigned char *)(a1 + 80))
  {
    if ((std::vector<int> *)a1 != __x) {
      std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)a1, (char *)__x->__begin_, (uint64_t)__x->__end_, __x->__end_ - __x->__begin_);
    }
    long long v4 = *(_OWORD *)&__x[1].__begin_;
    *(_OWORD *)(a1 + 33) = *(_OWORD *)((char *)&__x[1].__end_ + 1);
    *(_OWORD *)(a1 + 24) = v4;
    long long v5 = *(_OWORD *)&__x[2].__end_;
    *(void *)(a1 + 69) = *(int **)((char *)&__x[2].__end_cap_.__value_ + 5);
    *(_OWORD *)(a1 + 56) = v5;
  }
  else
  {
    std::vector<int>::vector((std::vector<int> *)a1, __x);
    long long v6 = *(_OWORD *)&__x[1].__begin_;
    *(_OWORD *)(a1 + 33) = *(_OWORD *)((char *)&__x[1].__end_ + 1);
    *(_OWORD *)(a1 + 24) = v6;
    long long v7 = *(_OWORD *)&__x[2].__end_;
    *(void *)(a1 + 69) = *(int **)((char *)&__x[2].__end_cap_.__value_ + 5);
    *(_OWORD *)(a1 + 56) = v7;
    *(unsigned char *)(a1 + 80) = 1;
  }
  return a1;
}

void Nightingale::ngtProjector::offsetFwEnd2NgtPrediction(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, uint64_t a5@<X8>)
{
  *(unsigned char *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 40) = 0;
  *(unsigned char *)(a5 + 48) = 0;
  *(unsigned char *)(a5 + 80) = 0;
  *(_OWORD *)(a5 + 88) = xmmword_22F166DC0;
  if ((a1 & 0xFF00000000) != 0)
  {
    int v5 = a1 - 5;
    if ((int)a1 >= 5)
    {
      *(_DWORD *)(a5 + 88) = v5;
      *(_DWORD *)(a5 + 92) = 6;
      *(_DWORD *)a5 = a4;
      *(_DWORD *)(a5 + 100) = a3;
      *(double *)(a5 + 8) = (double)v5;
      *(void *)(a5 + 16) = 0;
      *(double *)(a5 + 24) = (double)v5;
      *(double *)(a5 + 32) = (double)v5;
      *(unsigned char *)(a5 + 40) = 1;
      *(double *)(a5 + 48) = (double)(int)a1;
      *(void *)(a5 + 56) = 0;
      *(double *)(a5 + 64) = (double)(int)a1;
      *(double *)(a5 + 72) = (double)(int)a1;
      *(unsigned char *)(a5 + 80) = 1;
      if ((a2 & 0xFF00000000) != 0)
      {
        if (a3) {
          *(_DWORD *)(a5 + 96) = a1 - a2;
        }
      }
    }
  }
}

double Nightingale::ngtProjector::getAMetricFromperiodEstimationOut(uint64_t a1, Nightingale::CGradient *this)
{
  BOOL vGrad_empty = Nightingale::CGradient::get_vGrad_empty(this);
  double result = 0.0;
  if (!vGrad_empty)
  {
    Nightingale::ngtProjector::computeLowRangeMeanStd(a1, this);
    double result = *((float *)this + 18);
    if (!*((unsigned char *)this + 76)) {
      return 0.0;
    }
  }
  return result;
}

float Nightingale::ngtProjector::computeLowRangeMeanStd(uint64_t a1, Nightingale::CGradient *this)
{
  if (*((unsigned char *)this + 76))
  {
    float v4 = *((float *)this + 18);
  }
  else
  {
    uint64_t v5 = *(void *)((char *)this + 36);
    if ((v5 & 0xFF00000000) != 0)
    {
      LODWORD(v4) = *(void *)((char *)this + 36);
      *((_DWORD *)this + 18) = v5;
      *((unsigned char *)this + 76) = 1;
    }
    else
    {
      double expectation = Nightingale::CGradient::get_expectation((float **)this);
      if (!*((unsigned char *)this + 76)) {
        *((unsigned char *)this + 76) = 1;
      }
      float v4 = expectation;
      *((float *)this + 18) = v4;
    }
  }
  float std = Nightingale::CGradient::get_std((float **)this);
  if ((*(void *)((unsigned char *)this + 44) & 0xFF00000000) != 0) {
    LODWORD(v8) = *(void *)((char *)this + 44);
  }
  else {
    float v8 = std;
  }
  uint64_t v9 = *(void *)(a1 + 656);
  if (!*((unsigned char *)this + 60))
  {
    float v10 = v4 + (float)(v8 * -1.28);
    if (v10 < 0.0) {
      float v10 = 0.0;
    }
    *((float *)this + 14) = v10;
    *((unsigned char *)this + 60) = 1;
  }
  if ((v9 & 0xFF00000000) != 0)
  {
    float v11 = (float)(v9 + 1);
    if (*((float *)this + 14) >= v11) {
      float v11 = *((float *)this + 14);
    }
    *((float *)this + 14) = v11;
    *((unsigned char *)this + 60) = 1;
  }
  if (!*((unsigned char *)this + 68))
  {
    float v12 = v4 + (float)(v8 * 1.28);
    vGrad_leuint64_t n = (float)(int)Nightingale::CGradient::get_vGrad_len(this);
    if (v12 <= vGrad_len) {
      vGrad_leuint64_t n = v12;
    }
    *((float *)this + 16) = vGrad_len;
    *((unsigned char *)this + 68) = 1;
  }
  return v8;
}

BOOL Nightingale::ngtProjector::isFinite_aProj(BOOL isFinite_aGrad, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    isFinite_aGrad = Nightingale::ngtProjector::isFinite_aGrad(isFinite_aGrad, (void *)(a2 + 8));
    if (!isFinite_aGrad)
    {
      log = ha_get_log();
      BOOL result = os_log_type_enabled(log, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      Nightingale::ngtProjector::isFinite_aProj(log);
      return 0;
    }
  }
  if (!*(unsigned char *)(a2 + 80) || Nightingale::ngtProjector::isFinite_aGrad(isFinite_aGrad, (void *)(a2 + 48))) {
    return 1;
  }
  uint64_t v5 = ha_get_log();
  BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_FAULT);
  if (result)
  {
    Nightingale::ngtProjector::isFinite_aProj(v5);
    return 0;
  }
  return result;
}

BOOL Nightingale::ngtProjector::shouldSuppressPeriodProj(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  float v10 = 0;
  float v11 = 0;
  uint64_t v12 = 0;
  long long v3 = *(_OWORD *)(a2 + 80);
  v8[4] = *(_OWORD *)(a2 + 64);
  v8[5] = v3;
  uint64_t v9 = *(void *)(a2 + 96);
  long long v4 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  void v8[3] = v5;
  BOOL v6 = Nightingale::phaseFactorProjector::projectedPeriodFailRepro((uint64_t)&v10, (unsigned int *)v8, a3);
  if (v10)
  {
    float v11 = v10;
    operator delete(v10);
  }
  return v6;
}

BOOL Nightingale::ngt_Prediction::operator==(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  BOOL result = std::operator==[abi:nn180100]<Nightingale::ngtGradientMetrics,Nightingale::ngtGradientMetrics>((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  if (result)
  {
    BOOL result = std::operator==[abi:nn180100]<Nightingale::ngtGradientMetrics,Nightingale::ngtGradientMetrics>((uint64_t)(a1 + 12), (uint64_t)(a2 + 12));
    if (result)
    {
      if (a1[22] == a2[22] && a1[23] == a2[23] && a1[24] == a2[24]) {
        return a1[25] == a2[25];
      }
      return 0;
    }
  }
  return result;
}

uint64_t Nightingale::ngtProjector::shouldSuppressFwProj(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  if (!*(_DWORD *)(a2 + 92)) {
    return 0;
  }
  char v23 = 0;
  char v24 = 0;
  uint64_t v25 = 0;
  float v8 = operator new(6uLL);
  v22[1] = v8 + 3;
  _OWORD v22[2] = v8 + 3;
  *(_DWORD *)float v8 = 84148994;
  void v8[2] = 1798;
  v22[0] = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  v20[4] = *(_OWORD *)(a2 + 64);
  v20[5] = v9;
  uint64_t v21 = *(void *)(a2 + 96);
  long long v10 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  _OWORD v20[2] = *(_OWORD *)(a2 + 32);
  uint64_t v20[3] = v11;
  BOOL v12 = Nightingale::phaseFactorProjector::failReproAProjection((uint64_t)&v23, (int *)v20, (uint64_t)v22, a3);
  long long v13 = *(_OWORD *)(a2 + 80);
  v18[4] = *(_OWORD *)(a2 + 64);
  v18[5] = v13;
  uint64_t v19 = *(void *)(a2 + 96);
  long long v14 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  _OWORD v18[2] = *(_OWORD *)(a2 + 32);
  _OWORD v18[3] = v15;
  uint64_t v16 = v12 | Nightingale::phaseFactorProjector::projectedPeriodFailRepro((uint64_t)&v23, (unsigned int *)v18, a3) & (a5 ^ 1u);
  operator delete(v8);
  if (v23)
  {
    char v24 = v23;
    operator delete(v23);
  }
  return v16;
}

double Nightingale::ngtProjector::get1stProjMetricsCa(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 40) && *(unsigned char *)(a2 + 80))
  {
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 88);
    *(unsigned char *)(a3 + 36) = 1;
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a2 + 92);
    *(unsigned char *)(a3 + 44) = 1;
    if (*(unsigned char *)(a2 + 40))
    {
      double result = *(double *)(a2 + 8);
      *(double *)a3 = result;
      *(unsigned char *)(a3 + 8) = 1;
    }
    if (*(unsigned char *)(a2 + 80))
    {
      double result = *(double *)(a2 + 48);
      *(double *)(a3 + 16) = result;
      *(unsigned char *)(a3 + 24) = 1;
    }
  }
  return result;
}

uint64_t Nightingale::ngtProjector::getCaFwEndConfirmationMethodLuna(uint64_t a1, int a2, int a3, uint64_t a4)
{
  if (a2 == 2) {
    unsigned int v4 = 2;
  }
  else {
    unsigned int v4 = 4;
  }
  if (a2 == 1) {
    unsigned int v4 = 1;
  }
  if (a3) {
    return v4;
  }
  else {
    return 4 * ((a4 & 0xFF00000000) == 0);
  }
}

void Nightingale::ngtProjector::surfaceLunaCa(uint64_t a1, int *a2, int a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)(a5 + 208) = *((unsigned char *)a2 + 4);
  *(_WORD *)(a5 + 209) = *(_WORD *)((char *)a2 + 5);
  *(void *)(a5 + 212) = *((void *)a2 + 1);
  long long v5 = (uint32x2_t *)*((void *)a2 + 4);
  if (*((void *)a2 + 5) - (void)v5 == 12)
  {
    int8x8_t v6 = (int8x8_t)vcgt_u32((uint32x2_t)0x2E0000002ELL, *v5);
    *(int8x8_t *)(a5 + 140) = vorn_s8(vand_s8((int8x8_t)*v5, v6), v6);
    unsigned int v7 = v5[1].u32[0];
    if (v7 >= 0x2E) {
      unsigned int v7 = -1;
    }
    *(_DWORD *)(a5 + 148) = v7;
  }
  if (*((unsigned char *)a2 + 24))
  {
    int v8 = a2[5];
    if (v8 >= 10) {
      unsigned __int8 v9 = 10;
    }
    else {
      unsigned __int8 v9 = a2[5];
    }
    int v10 = v9 >> 1;
    if (v8 < 0) {
      int v11 = -1;
    }
    else {
      int v11 = v10;
    }
  }
  else
  {
    int v11 = -1;
  }
  *(_DWORD *)(a5 + 220) = v11;
  unsigned int v12 = a2[14];
  if (v12 >= 0x2E) {
    unsigned int v12 = -1;
  }
  *(_DWORD *)(a5 + 136) = v12;
  int v13 = a2[15];
  *(unsigned char *)(a5 + 156) = *((unsigned char *)a2 + 64);
  *(_DWORD *)(a5 + 152) = v13;
  if (a3)
  {
    int v14 = a2[4];
    if (v14 == 2) {
      int v15 = 2;
    }
    else {
      int v15 = 4;
    }
    if (v14 == 1) {
      int v16 = 1;
    }
    else {
      int v16 = v15;
    }
    int v17 = *a2;
  }
  else
  {
    int v16 = 4 * ((a4 & 0xFF00000000) == 0);
    int v17 = *a2;
    if ((a4 & 0xFF00000000) != 0) {
      int v17 = 0;
    }
  }
  *(_DWORD *)(a5 + 224) = v16;
  *(_DWORD *)(a5 + 228) = v17;
}

uint64_t Nightingale::ngtProjector::getCAtBoundedDaysBetweenFwEndAndNotification(Nightingale::ngtProjector *this, int a2)
{
  if (a2 >= 10) {
    unsigned __int8 v2 = 10;
  }
  else {
    unsigned __int8 v2 = a2;
  }
  unsigned int v3 = v2 >> 1;
  if (a2 < 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v3;
  }
}

uint64_t Nightingale::ngtProjector::getCAPeriodPredictionMethod(uint64_t a1, _DWORD *a2)
{
  if (Nightingale::CGradient::get_vGrad_empty((Nightingale::CGradient *)(a2 + 50))) {
    return 5;
  }
  int v4 = a2[90];
  if (v4 == 1)
  {
    uint64_t v6 = (int)a2[110];
    if (v6 >= 3) {
      return 5;
    }
    return dword_22F166DE8[v6];
  }
  else
  {
    if (v4 == 2) {
      unsigned int v5 = 1;
    }
    else {
      unsigned int v5 = 5;
    }
    if (v4 == 3) {
      return 0;
    }
    else {
      return v5;
    }
  }
}

uint64_t Nightingale::ngtProjector::getCABoundedDaysBetweenTodayAndCalFwEnd(Nightingale::ngtProjector *this, int a2)
{
  if ((a2 - 3) >= 8) {
    int v2 = 11;
  }
  else {
    int v2 = a2;
  }
  if (a2 >= 3) {
    int v3 = v2;
  }
  else {
    int v3 = 2;
  }
  if (a2 >= -2) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 1;
  }
  if (a2 >= -10) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t Nightingale::ngtProjector::getCACurrentCycleFactor(uint64_t a1, unsigned __int8 **a2)
{
  int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  int v3 = (char *)operator new(3uLL);
  int v16 = v3 + 3;
  int v17 = v3 + 3;
  *(_WORD *)int v3 = 1541;
  v3[2] = 7;
  std::vector<int> __p = v3;
  BOOL v4 = Nightingale::phaseFactorProcessor::vPhasesContainsVPhases((uint64_t)&v18, a2, (unsigned __int8 **)&__p);
  if (__p)
  {
    int v16 = __p;
    operator delete(__p);
  }
  if (v4)
  {
    uint64_t v5 = 3;
  }
  else
  {
    uint64_t v6 = (char *)operator new(3uLL);
    int v16 = v6 + 3;
    int v17 = v6 + 3;
    *(_WORD *)uint64_t v6 = 770;
    v6[2] = 4;
    std::vector<int> __p = v6;
    BOOL v7 = Nightingale::phaseFactorProcessor::vPhasesContainsVPhases((uint64_t)&v18, a2, (unsigned __int8 **)&__p);
    if (__p)
    {
      int v16 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      uint64_t v5 = 4;
    }
    else
    {
      int v8 = operator new(1uLL);
      std::vector<int> __p = v8;
      unsigned char *v8 = 0;
      int v16 = v8 + 1;
      int v17 = v8 + 1;
      BOOL v9 = Nightingale::phaseFactorProcessor::vPhasesContainsVPhases((uint64_t)&v18, a2, (unsigned __int8 **)&__p);
      if (__p)
      {
        int v16 = __p;
        operator delete(__p);
      }
      uint64_t v5 = 1;
      if (!v9)
      {
        int v10 = operator new(1uLL);
        std::vector<int> __p = v10;
        unsigned char *v10 = 1;
        int v16 = v10 + 1;
        int v17 = v10 + 1;
        BOOL v11 = Nightingale::phaseFactorProcessor::vPhasesContainsVPhases((uint64_t)&v18, a2, (unsigned __int8 **)&__p);
        if (__p)
        {
          int v16 = __p;
          operator delete(__p);
        }
        if (v11)
        {
          uint64_t v5 = 2;
        }
        else
        {
          unsigned int v12 = operator new(1uLL);
          std::vector<int> __p = v12;
          *unsigned int v12 = 8;
          int v16 = v12 + 1;
          int v17 = v12 + 1;
          BOOL v13 = Nightingale::phaseFactorProcessor::vPhasesContainsVPhases((uint64_t)&v18, a2, (unsigned __int8 **)&__p);
          if (__p)
          {
            int v16 = __p;
            operator delete(__p);
          }
          if (v13) {
            uint64_t v5 = 5;
          }
          else {
            uint64_t v5 = 0;
          }
        }
      }
    }
  }
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }
  return v5;
}

uint64_t Nightingale::ngtProjector::getCABoundedNumberOfDays(Nightingale::ngtProjector *this, unsigned int a2)
{
  if (a2 >= 0x2E) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a2;
  }
}

void *Nightingale::phaseFactorProjector::phaseFactorProjector(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

BOOL Nightingale::phaseFactorProjector::failReproAProjection(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  int v4 = a2[23];
  if (v4 < 1) {
    return 1;
  }
  int v7 = *a2;
  int v8 = a2[22];
  int v17 = 0;
  int v18 = 0;
  std::vector<int> __p = 0;
  int v10 = *(const void **)a3;
  uint64_t v9 = *(void *)(a3 + 8);
  size_t v11 = v9 - *(void *)a3;
  if (v9 != *(void *)a3)
  {
    if (v9 - *(void *)a3 < 0) {
      abort();
    }
    unsigned int v12 = (char *)operator new(v9 - *(void *)a3);
    BOOL v13 = &v12[v11];
    std::vector<int> __p = v12;
    int v18 = &v12[v11];
    memmove(v12, v10, v11);
    int v17 = v13;
  }
  char v14 = Nightingale::phaseFactorProcessor::detectPhases(a1, (v8 + v7) | ((unint64_t)(v4 + v8 + v7 - 1) << 32), (uint64_t *)&__p, a4);
  if (__p)
  {
    int v17 = __p;
    operator delete(__p);
  }
  return v14 != 0;
}

BOOL Nightingale::phaseFactorProjector::projectedPeriodFailRepro(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  int v4 = a2[22] + v3 + a2[23];
  if (v4 <= (int)v3) {
    return 1;
  }
  unint64_t v7 = v3 | ((unint64_t)(v4 - 1) << 32);
  int v8 = operator new(1uLL);
  std::vector<int> __p = v8;
  unsigned char *v8 = 0;
  unsigned int v12 = v8 + 1;
  BOOL v13 = v8 + 1;
  char v9 = Nightingale::phaseFactorProcessor::detectPhases(a1, v7, (uint64_t *)&__p, a3);
  if (__p)
  {
    unsigned int v12 = __p;
    operator delete(__p);
  }
  return v9 != 0;
}

void Nightingale::phaseFactorProjector::~phaseFactorProjector(Nightingale::phaseFactorProjector *this)
{
  int v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  int v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

BOOL Nightingale::ngtProjector::isFinite_aGrad(uint64_t a1, void *a2)
{
  if ((*a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    log = ha_get_log();
    BOOL result = os_log_type_enabled(log, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    Nightingale::ngtProjector::isFinite_aGrad();
    return 0;
  }
  if ((a2[1] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    int v4 = ha_get_log();
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    Nightingale::ngtProjector::isFinite_aGrad();
    return 0;
  }
  if ((a2[2] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v5 = ha_get_log();
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    Nightingale::ngtProjector::isFinite_aGrad();
    return 0;
  }
  if ((a2[3] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) {
    return 1;
  }
  uint64_t v6 = ha_get_log();
  BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_FAULT);
  if (result)
  {
    Nightingale::ngtProjector::isFinite_aGrad();
    return 0;
  }
  return result;
}

double Nightingale::coreAnalyticsDayStream_t::coreAnalyticsDayStream_t(Nightingale::coreAnalyticsDayStream_t *this)
{
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((unsigned char *)this + 24) = 0;
  *((unsigned char *)this + 32) = 0;
  *((unsigned char *)this + 40) = 0;
  *((unsigned char *)this + 44) = 0;
  *((unsigned char *)this + 48) = 0;
  *((unsigned char *)this + 52) = 0;
  *((unsigned char *)this + 56) = 0;
  *((unsigned char *)this + 64) = 0;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 80) = 0;
  *((unsigned char *)this + 88) = 0;
  *((unsigned char *)this + 92) = 0;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 100) = 0;
  *((unsigned char *)this + 104) = 0;
  *((unsigned char *)this + 108) = 0;
  *((unsigned char *)this + 112) = 0;
  *((unsigned char *)this + 116) = 0;
  *((_WORD *)this + 60) = 0;
  *(void *)((char *)this + 124) = -4294967291;
  *((_DWORD *)this + 33) = 0;
  *((void *)this + 17) = -1;
  *((void *)this + 18) = -1;
  *((unsigned char *)this + 152) = 0;
  *((unsigned char *)this + 156) = 0;
  *((_DWORD *)this + 41) = -1082130432;
  *((void *)this + 21) = -1;
  *((void *)this + 22) = -1;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)((char *)this + 184) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }
  *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = _Q0;
  *((_WORD *)this + 104) = 0;
  *((unsigned char *)this + 210) = 0;
  double result = NAN;
  *(_OWORD *)((char *)this + 212) = xmmword_22F165D50;
  *((_DWORD *)this + 57) = 9;
  return result;
}

void Nightingale::structDLIn_hr::~structDLIn_hr(Nightingale::structDLIn_hr *this)
{
  int v2 = (void *)*((void *)this + 21);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 15);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 12);
  if (v5)
  {
    *((void *)this + 13) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    *((void *)this + 10) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 3);
  if (v8)
  {
    *((void *)this + 4) = v8;
    operator delete(v8);
  }
}

char *std::vector<Nightingale::ngt_Prediction>::__insert_with_size[abi:nn180100]<std::__wrap_iter<Nightingale::ngt_Prediction*>,std::__wrap_iter<Nightingale::ngt_Prediction*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v11 - v12) >> 3) < a5)
  {
    BOOL v13 = *(void **)a1;
    unint64_t v14 = a5 + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 > 0x276276276276276) {
      abort();
    }
    uint64_t v15 = 0x4EC4EC4EC4EC4EC5 * ((__dst - (uint64_t)v13) >> 3);
    unint64_t v16 = 0x4EC4EC4EC4EC4EC5 * ((v10 - (uint64_t)v13) >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x13B13B13B13B13BLL) {
      unint64_t v18 = 0x276276276276276;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v45 = v9;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_Prediction>>(v9, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    long long v32 = &v19[104 * v15];
    std::vector<int> __p = v19;
    std::vector<int> v42 = v32;
    char v44 = &v19[104 * v18];
    uint64_t v33 = 104 * a5;
    int v34 = &v32[104 * a5];
    do
    {
      long long v35 = *(_OWORD *)v7;
      long long v36 = *((_OWORD *)v7 + 2);
      *((_OWORD *)v32 + 1) = *((_OWORD *)v7 + 1);
      *((_OWORD *)v32 + 2) = v36;
      *(_OWORD *)long long v32 = v35;
      long long v37 = *((_OWORD *)v7 + 3);
      long long v38 = *((_OWORD *)v7 + 4);
      long long v39 = *((_OWORD *)v7 + 5);
      *((void *)v32 + 12) = *((void *)v7 + 12);
      *((_OWORD *)v32 + 4) = v38;
      *((_OWORD *)v32 + 5) = v39;
      *((_OWORD *)v32 + 3) = v37;
      v32 += 104;
      v7 += 104;
      v33 -= 104;
    }
    while (v33);
    uint64_t v43 = v34;
    uint64_t v5 = (char *)std::vector<Nightingale::ngt_Prediction>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v43 != v42) {
      uint64_t v43 = &v42[(v43 - v42 - 104) % 0x68uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v12 - __dst) >> 3) >= a5)
  {
    uint64_t v21 = &__src[104 * a5];
    char v23 = *(char **)(v9 - 8);
LABEL_17:
    char v24 = &v5[104 * a5];
    uint64_t v25 = &v23[-104 * a5];
    unsigned __int8 v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      unsigned __int8 v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        long long v28 = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 1) = *((_OWORD *)v25 + 1);
        *((_OWORD *)v26 + 2) = v28;
        *(_OWORD *)unsigned __int8 v26 = v27;
        long long v29 = *((_OWORD *)v25 + 3);
        long long v30 = *((_OWORD *)v25 + 4);
        long long v31 = *((_OWORD *)v25 + 5);
        *((void *)v26 + 12) = *((void *)v25 + 12);
        *((_OWORD *)v26 + 4) = v30;
        *((_OWORD *)v26 + 5) = v31;
        *((_OWORD *)v26 + 3) = v29;
        v25 += 104;
        v26 += 104;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v5[104 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  }
  char v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void *std::vector<Nightingale::ngt_Prediction>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    int v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 104);
      long long v11 = *(_OWORD *)(v8 - 88);
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(v8 - 72);
      *(_OWORD *)(v9 - 88) = v11;
      *(_OWORD *)(v9 - 104) = v10;
      long long v12 = *(_OWORD *)(v8 - 56);
      long long v13 = *(_OWORD *)(v8 - 40);
      long long v14 = *(_OWORD *)(v8 - 24);
      unint64_t v7 = (void *)(v9 - 104);
      *(void *)(v9 - 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v14;
      *(_OWORD *)(v9 - 40) = v13;
      *(_OWORD *)(v9 - 56) = v12;
      v8 -= 104;
      v9 -= 104;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v15 = a1[1];
  uint64_t v16 = *(void *)(a2 + 16);
  int64_t v17 = v15 - __src;
  if (v15 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v15 - __src);
    unint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v16 + v17;
  unint64_t v18 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v18;
  uint64_t v19 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v19;
  uint64_t v20 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v20;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__assign_with_size[abi:nn180100]<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) < a4)
  {
    std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__vdeallocate((void **)a1);
    if (a4 > 0x199999999999999) {
      abort();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
      unint64_t v11 = 0x199999999999999;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__vallocate[abi:nn180100]((void *)a1, v11);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = v8;
    uint64_t v14 = a2;
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5) < a4)
  {
    uint64_t v15 = a2 + 32 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5);
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct> *,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct> *,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct> *,0>(a2, v15, (uint64_t)v9);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = v8;
    uint64_t v14 = v15;
LABEL_11:
    *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*>(v13, v14, a3, v12);
    return;
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct> *,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct> *,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct> *,0>(a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 160;
      std::__destroy_at[abi:nn180100]<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>,0>(v18);
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    int v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 160;
        std::__destroy_at[abi:nn180100]<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>,0>(v3);
      }
      while ((void *)v3 != v1);
      int v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL) {
    abort();
  }
  double result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[160 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 80;
    uint64_t v7 = a4 + 80;
    do
    {
      std::vector<int>::vector((std::vector<int> *)(v7 - 80), (const std::vector<int> *)(v6 - 80));
      long long v8 = *(_OWORD *)(v6 - 56);
      *(_OWORD *)(v7 - 47) = *(_OWORD *)(v6 - 47);
      *(_OWORD *)(v7 - 56) = v8;
      long long v9 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 - 11) = *(void *)(v6 - 11);
      *(_OWORD *)(v7 - 24) = v9;
      std::vector<int>::vector((std::vector<int> *)v7, (const std::vector<int> *)v6);
      long long v10 = *(_OWORD *)(v6 + 24);
      *(_OWORD *)(v7 + 33) = *(_OWORD *)(v6 + 33);
      *(_OWORD *)(v7 + 24) = v10;
      long long v11 = *(_OWORD *)(v6 + 56);
      *(void *)(v7 + 69) = *(void *)(v6 + 69);
      *(_OWORD *)(v7 + 56) = v11;
      uint64_t v12 = v6 + 80;
      v6 += 160;
      v7 += 160;
    }
    while (v12 != a3);
    return v7 - 80;
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct> *,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct> *,std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>::operator=[abi:nn180100](a3, v4);
      v4 += 160;
      a3 += 160;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>::operator=[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 24) = v6;
    long long v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 69) = *(void *)(a2 + 69);
    *(_OWORD *)(a1 + 56) = v7;
  }
  else
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 24) = v4;
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 69) = *(void *)(a2 + 69);
    *(_OWORD *)(a1 + 56) = v5;
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a1 + 80), *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  }
  long long v8 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  *(_OWORD *)(a1 + 104) = v8;
  long long v9 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 149) = *(void *)(a2 + 149);
  *(_OWORD *)(a1 + 136) = v9;
  return a1;
}

void std::vector<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        std::__destroy_at[abi:nn180100]<std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>,0>(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::pair<Nightingale::periodEstimationOutStruct,Nightingale::periodEstimationOutStruct>::pair[abi:nn180100]<true,0>(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v2 = Nightingale::CGradient::CGradient(a1);
  *(unsigned char *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 60) = 0;
  *(unsigned char *)(v2 + 64) = 0;
  *(unsigned char *)(v2 + 68) = 0;
  *(unsigned char *)(v2 + 72) = 0;
  *(unsigned char *)(v2 + 76) = 0;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  Nightingale::CGradient::CGradient(v2 + 80);
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 156) = 0;
  return a1;
}

BOOL std::operator==[abi:nn180100]<Nightingale::ngtGradientMetrics,Nightingale::ngtGradientMetrics>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v2 = *(unsigned char *)(a2 + 32) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(unsigned char *)(a1 + 32) != 0) == (*(unsigned char *)(a2 + 32) != 0);
  }
  if (*(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16))
  {
    return *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return 0;
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_2_1(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t Nightingale::lstmLuna::lstmLuna(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_26E28CB58;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = -1;
  *(_DWORD *)(a1 + 180) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 220) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 228) = 0;
  *(unsigned char *)(a1 + 260) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  Nightingale::wristTemperatureInputAcquisition::wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)(a1 + 296));
  Nightingale::wristTemperatureInputProcess::wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)(a1 + 368));
  Nightingale::wristTemperatureInputValidation::wristTemperatureInputValidation((Nightingale::wristTemperatureInputValidation *)(a1 + 369));
  Nightingale::ngt_luna_fw_dl_tmp_process::ngt_luna_fw_dl_tmp_process((Nightingale::ngt_luna_fw_dl_tmp_process *)(a1 + 376));
  Nightingale::lstmModelCommonFw::lstmModelCommonFw((Nightingale::lstmModelCommonFw *)(a1 + 384));
  return a1;
}

void Nightingale::lstmLuna::~lstmLuna(id **this)
{
  *this = (id *)&unk_26E28CB58;
  Nightingale::lstmModelCommonFw::~lstmModelCommonFw((Nightingale::lstmModelCommonFw *)(this + 48));
  Nightingale::ngt_luna_fw_dl_tmp_process::~ngt_luna_fw_dl_tmp_process(this + 47);
  Nightingale::wristTemperatureInputValidation::~wristTemperatureInputValidation((Nightingale::wristTemperatureInputValidation *)((char *)this + 369));
  Nightingale::wristTemperatureInputProcess::~wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)(this + 46));
  Nightingale::wristTemperatureInputAcquisition::~wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)(this + 37));
  BOOL v2 = this[33];
  if (v2)
  {
    this[34] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[29];
  if (v3)
  {
    this[30] = v3;
    operator delete(v3);
  }
  uint64_t v4 = this[24];
  if (v4)
  {
    this[25] = v4;
    operator delete(v4);
  }
  long long v5 = this[19];
  if (v5)
  {
    this[20] = v5;
    operator delete(v5);
  }
  long long v6 = this[16];
  if (v6)
  {
    this[17] = v6;
    operator delete(v6);
  }
  long long v7 = this[13];
  if (v7)
  {
    this[14] = v7;
    operator delete(v7);
  }
  long long v8 = this[10];
  if (v8)
  {
    this[11] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void **)(this + 6);
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v9);
}

BOOL Nightingale::lstmLuna::acquireWTmp(Nightingale::lstmLuna *this, int a2, int a3)
{
  long long v6 = (uint64_t *)((char *)this + 296);
  Nightingale::wristTemperatureInputAcquisition::reset((Nightingale::lstmLuna *)((char *)this + 296));
  unint64_t JDayIdx1stTmp = Nightingale::wristTemperatureInputAcquisition::getJDayIdx1stTmp((uint64_t)v6, *((unsigned int ***)this + 1));
  if (*((unsigned __int8 *)this + 40) != v8)
  {
    if (!*((unsigned char *)this + 40))
    {
      *((void *)this + 4) = JDayIdx1stTmp;
      *((unsigned char *)this + 40) = 1;
      goto LABEL_8;
    }
    *((unsigned char *)this + 40) = 0;
LABEL_6:
    BOOL v9 = 0;
    *((unsigned char *)this + 184) = 1;
    return v9;
  }
  if (!*((unsigned char *)this + 40)) {
    goto LABEL_6;
  }
  *((void *)this + 4) = JDayIdx1stTmp;
LABEL_8:
  memset(v23, 0, sizeof(v23));
  Nightingale::wristTemperatureInputAcquisition::extractWTmp_removeOutlier_withBuf_fromCycleOffset(v6, a3 - a2 + 1, a3, *(_DWORD *)(*(void *)(*((void *)this + 2) + 8) - 96) - 43, *((void **)this + 1), JDayIdx1stTmp, (uint64_t)&v16);
  std::vector<std::vector<float>>::__vdeallocate((uint64_t *)this + 6);
  *((_OWORD *)this + 3) = v16;
  uint64_t v10 = v17;
  long long v11 = v18;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  *((void *)this + 8) = v10;
  *((void *)this + 9) = v11;
  uint64_t v12 = (void *)*((void *)this + 10);
  if (v12)
  {
    *((void *)this + 11) = v12;
    operator delete(v12);
  }
  *((_OWORD *)this + 5) = *(_OWORD *)__p;
  *((void *)this + 12) = v20;
  __p[1] = 0;
  uint64_t v20 = 0;
  __p[0] = 0;
  uint64_t v13 = (void *)*((void *)this + 13);
  if (v13)
  {
    *((void *)this + 14) = v13;
    operator delete(v13);
    uint64_t v13 = __p[0];
  }
  *(_OWORD *)((char *)this + 104) = v21;
  *((void *)this + 15) = v22;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  if (v13)
  {
    __p[1] = v13;
    operator delete(v13);
  }
  char v24 = (void **)&v16;
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v24);
  if (*((void *)this + 6) == *((void *)this + 7))
  {
    BOOL v9 = 0;
    *((unsigned char *)this + 184) = 1;
  }
  else
  {
    Nightingale::wristTemperatureInputProcess::constructVectorOfSlicesFromMultipleWatches((uint64_t)this + 48, 45, 1, a2, (uint64_t)&v16);
    uint64_t v14 = v16;
    BOOL v9 = v16 != *((void *)&v16 + 1);
    if ((void)v16 == *((void *)&v16 + 1))
    {
      *((unsigned char *)this + 184) = 1;
    }
    else
    {
      if ((Nightingale::lstmLuna *)((char *)this + 128) != (Nightingale::lstmLuna *)v16)
      {
        std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)this + 128, *(char **)v16, *(void *)(v16 + 8), (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 2);
        uint64_t v14 = v16;
      }
      if ((Nightingale::lstmLuna *)((char *)this + 152) != (Nightingale::lstmLuna *)v14) {
        std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)this + 152, *(char **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 2);
      }
      *((unsigned char *)this + 176) = *(unsigned char *)v18;
    }
    if (v20)
    {
      *(void *)&long long v21 = v20;
      operator delete(v20);
    }
    if (v18)
    {
      __p[0] = v18;
      operator delete(v18);
    }
    char v24 = (void **)&v16;
    std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v24);
  }
  *(void *)&long long v16 = v23;
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v16);
  return v9;
}

BOOL Nightingale::lstmLuna::validateWTmp(Nightingale::lstmLuna *this, int a2, float a3)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  int64x2_t v83 = 0uLL;
  v84[0] = 0;
  long long v6 = (float **)((char *)this + 128);
  uint64_t v7 = (*((void *)this + 17) - *((void *)this + 16)) >> 2;
  unsigned __int8 v8 = operator new(4uLL);
  char v80 = v8;
  _DWORD *v8 = v7;
  unsigned int v81 = v8 + 1;
  unint64_t v82 = v8 + 1;
  BOOL v9 = (float *)operator new(4uLL);
  uint64_t v77 = v9;
  *BOOL v9 = a3;
  int v78 = v9 + 1;
  int v79 = v9 + 1;
  long long v89 = (uint64_t (*)(float, uint64_t, uint64_t))&unk_26E28C690;
  long long v90 = Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpMissingCntHigh;
  uint64_t v91 = 0;
  uint64_t v92 = (void **)&v89;
  int v88 = v84;
  uint64_t v10 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>>((uint64_t)v84, 1uLL);
  long long v11 = v10;
  std::vector<int> __p = v10;
  v86.i64[0] = (uint64_t)v10;
  int v87 = &v10[4 * v12];
  if (v92)
  {
    if (v92 == (void **)&v89)
    {
      v10[3] = v10;
      (*((void (**)(void **, void *))*v92 + 3))(v92, v10);
      uint64_t v10 = (void *)v86.i64[0];
    }
    else
    {
      v10[3] = v92;
      uint64_t v92 = 0;
    }
  }
  else
  {
    v10[3] = 0;
  }
  uint64_t v13 = v11 + 4;
  v86.i64[1] = (uint64_t)(v11 + 4);
  uint64_t v14 = v83.i64[1];
  if (v83.i64[1] == v83.i64[0])
  {
    int64x2_t v15 = vdupq_n_s64(v83.u64[1]);
  }
  else
  {
    do
    {
      v14 -= 32;
      uint64_t v10 = (void *)std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::__value_func[abi:nn180100]((uint64_t)(v10 - 4), v14);
    }
    while (v14 != v83.i64[0]);
    int64x2_t v15 = v83;
    uint64_t v13 = (void *)v86.i64[1];
  }
  v83.i64[0] = (uint64_t)v10;
  int64x2_t v86 = v15;
  long long v16 = (void *)v84[0];
  v84[0] = v87;
  int v87 = v16;
  std::vector<int> __p = (void *)v15.i64[0];
  std::__split_buffer<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::~__split_buffer((uint64_t)&__p);
  v83.i64[1] = (uint64_t)v13;
  std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::~__value_func[abi:nn180100](&v89);
  std::vector<int> __dst = 0;
  uint64_t v76 = 0;
  long long v74 = 0;
  uint64_t v17 = v80;
  int64_t v18 = v81 - (unsigned char *)v80;
  if (v81 != v80)
  {
    std::vector<int>::__vallocate[abi:nn180100](&v74, v18 >> 2);
    uint64_t v19 = (char *)__dst;
    memmove(__dst, v17, v18);
    std::vector<int> __dst = &v19[v18];
  }
  unint64_t v20 = *((unsigned __int8 *)this + 176);
  uint64_t v21 = *((void *)this + 13);
  if (v20 >= (*((void *)this + 14) - v21) >> 3) {
    goto LABEL_85;
  }
  if (*(unsigned char *)(v21 + 8 * v20 + 4) || **v6 >= 0.0)
  {
    Nightingale::wristTemperatureInputValidation::checkListOfConditions((uint64_t)this + 369, v83.i64, (uint64_t)v6, &v74, &v77, 1, &__p);
    uint64_t v22 = *(void *)__p;
    v86.i64[0] = (uint64_t)__p;
    operator delete(__p);
  }
  else
  {
    uint64_t v22 = 0x3F80000000000001;
  }
  char v24 = (void *)((char *)this + 208);
  unint64_t v23 = *((void *)this + 26);
  uint64_t v25 = (uint64_t *)*((void *)this + 25);
  if ((unint64_t)v25 >= v23)
  {
    uint64_t v27 = *((void *)this + 24);
    uint64_t v28 = ((uint64_t)v25 - v27) >> 3;
    if ((unint64_t)(v28 + 1) >> 61) {
      goto LABEL_85;
    }
    uint64_t v29 = v23 - v27;
    uint64_t v30 = v29 >> 2;
    if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
      uint64_t v30 = v28 + 1;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v30;
    }
    if (v31) {
      long long v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)this + 208, v31);
    }
    else {
      long long v32 = 0;
    }
    uint64_t v33 = (uint64_t *)&v32[8 * v28];
    int v34 = &v32[8 * v31];
    uint64_t *v33 = v22;
    unsigned __int8 v26 = v33 + 1;
    long long v36 = (char *)*((void *)this + 24);
    long long v35 = (char *)*((void *)this + 25);
    if (v35 != v36)
    {
      do
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        *--uint64_t v33 = v37;
      }
      while (v35 != v36);
      long long v35 = (char *)*((void *)this + 24);
    }
    *((void *)this + 24) = v33;
    *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v26;
    *((void *)this + 26) = v34;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    uint64_t *v25 = v22;
    unsigned __int8 v26 = v25 + 1;
  }
  *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v26;
  if (v74)
  {
    std::vector<int> __dst = v74;
    operator delete(v74);
  }
  std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__p, (unsigned char *)(*((void *)this + 17) - 84), *((unsigned char **)this + 17));
  long long v89 = Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpDay2dayNoiseHigh;
  long long v90 = 0;
  std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::operator=<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float),void>(v83.i64[0], (uint64_t *)&v89);
  *(_DWORD *)char v80 = (unint64_t)(v86.i64[0] - (void)__p) >> 2;
  *(_DWORD *)uint64_t v77 = 1039851848;
  Nightingale::wristTemperatureInputValidation::checkListOfConditions((uint64_t)this + 369, v83.i64, (uint64_t)&__p, &v80, &v77, 1, (void **)&v89);
  long long v38 = v90;
  uint64_t v40 = (void *)*((void *)this + 25);
  unint64_t v39 = *((void *)this + 26);
  if ((unint64_t)v40 >= v39)
  {
    uint64_t v42 = *((void *)this + 24);
    uint64_t v43 = ((uint64_t)v40 - v42) >> 3;
    if ((unint64_t)(v43 + 1) >> 61) {
      goto LABEL_85;
    }
    uint64_t v44 = v39 - v42;
    uint64_t v45 = v44 >> 2;
    if (v44 >> 2 <= (unint64_t)(v43 + 1)) {
      uint64_t v45 = v43 + 1;
    }
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v45;
    }
    if (v46) {
      int v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)this + 208, v46);
    }
    else {
      int v47 = 0;
    }
    unint64_t v48 = &v47[8 * v43];
    unint64_t v49 = &v47[8 * v46];
    *(void *)unint64_t v48 = *((void *)v38 - 1);
    long long v41 = v48 + 8;
    int v51 = (char *)*((void *)this + 24);
    char v50 = (char *)*((void *)this + 25);
    if (v50 != v51)
    {
      do
      {
        uint64_t v52 = *((void *)v50 - 1);
        v50 -= 8;
        *((void *)v48 - 1) = v52;
        v48 -= 8;
      }
      while (v50 != v51);
      char v50 = (char *)*((void *)this + 24);
    }
    *((void *)this + 24) = v48;
    *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v41;
    *((void *)this + 26) = v49;
    if (v50) {
      operator delete(v50);
    }
  }
  else
  {
    *uint64_t v40 = *((void *)v90 - 1);
    long long v41 = v40 + 1;
  }
  *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v41;
  uint64_t v53 = *(void *)(*((void *)this + 2) + 8);
  if (!*(unsigned char *)(v53 - 60)) {
    std::__throw_bad_optional_access[abi:nn180100]();
  }
  int v54 = *(_DWORD *)(v53 - 96) - a2 + (int)(float)(roundf(*(float *)(v53 - 64)) + -13.0);
  BOOL v55 = v54 > 0;
  float v56 = (float)v54;
  if ((unint64_t)v41 < *v24)
  {
    *(_DWORD *)long long v41 = v55;
    *((float *)v41 + 1) = v56;
    int v57 = v41 + 1;
    goto LABEL_69;
  }
  uint64_t v58 = *((void *)this + 24);
  uint64_t v59 = ((uint64_t)v41 - v58) >> 3;
  if ((unint64_t)(v59 + 1) >> 61) {
LABEL_85:
  }
    abort();
  uint64_t v60 = *v24 - v58;
  uint64_t v61 = v60 >> 2;
  if (v60 >> 2 <= (unint64_t)(v59 + 1)) {
    uint64_t v61 = v59 + 1;
  }
  if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v62 = v61;
  }
  if (v62) {
    long long v63 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)this + 208, v62);
  }
  else {
    long long v63 = 0;
  }
  long long v64 = &v63[8 * v59];
  long long v65 = &v63[8 * v62];
  *(_DWORD *)long long v64 = v55;
  *((float *)v64 + 1) = v56;
  int v57 = v64 + 8;
  long long v67 = (char *)*((void *)this + 24);
  int64_t v66 = (char *)*((void *)this + 25);
  if (v66 != v67)
  {
    do
    {
      uint64_t v68 = *((void *)v66 - 1);
      v66 -= 8;
      *((void *)v64 - 1) = v68;
      v64 -= 8;
    }
    while (v66 != v67);
    int64_t v66 = (char *)*((void *)this + 24);
  }
  *((void *)this + 24) = v64;
  *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v57;
  *((void *)this + 26) = v65;
  if (v66) {
    operator delete(v66);
  }
LABEL_69:
  *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v57;
  *((_DWORD *)this + 45) = 3;
  int64_t v69 = (unsigned char *)*((void *)this + 24);
  *((unsigned char *)this + 184) = *v69;
  if (v69 == v57)
  {
    BOOL v71 = 1;
  }
  else
  {
    uint64_t v70 = v69 + 8;
    do
    {
      BOOL v71 = (*((void *)v70 - 1) & 1) == 0;
      if (*((void *)v70 - 1)) {
        break;
      }
      BOOL v72 = v70 == v57;
      v70 += 8;
    }
    while (!v72);
  }
  if (v89)
  {
    long long v90 = (unint64_t (*)(float, uint64_t, uint64_t, int))v89;
    operator delete(v89);
  }
  if (__p)
  {
    v86.i64[0] = (uint64_t)__p;
    operator delete(__p);
  }
  if (v77)
  {
    int v78 = v77;
    operator delete(v77);
  }
  if (v80)
  {
    unsigned int v81 = v80;
    operator delete(v80);
  }
  std::vector<int> __p = &v83;
  std::vector<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  return v71;
}

void *std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::operator=<std::pair<BOOL,float> (Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::*)(std::vector<float> const&,int,float),void>(void *a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v7 = 0;
  if (v4 & 1 | v3)
  {
    v6[0] = &unk_26E28C690;
    v6[1] = v3;
    v6[2] = v4;
    uint64_t v7 = v6;
  }
  std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::swap[abi:nn180100](v6, a1);
  std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::~__value_func[abi:nn180100](v6);
  return a1;
}

uint64_t Nightingale::lstmLuna::preCondition(uint64_t a1, float a2, float a3)
{
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  if (v4 == v3 || (unint64_t v5 = *(unsigned __int8 *)(a1 + 176), v5 >= (v3 - v4) >> 3))
  {
    uint64_t v15 = 0;
    *(unsigned char *)(a1 + 184) = 1;
  }
  else
  {
    uint64_t v7 = *(float **)(a1 + 152);
    uint64_t v8 = *(float **)(a1 + 160);
    long long v6 = (std::vector<int> *)(a1 + 152);
    if (v7 != v8)
    {
      uint64_t v9 = v4 + 8 * v5;
      if (*(unsigned char *)(v9 + 4)) {
        float v10 = *(float *)v9;
      }
      else {
        float v10 = -1.0;
      }
      unint64_t v11 = v8 - v7;
      if (v11 <= 1) {
        unint64_t v11 = 1;
      }
      uint64_t v12 = v7;
      unint64_t v13 = v11;
      do
      {
        float v14 = *v12;
        if (fabsf(*v12 + 1.0) < 1.0e-12)
        {
          *uint64_t v12 = v10;
          float v14 = v10;
        }
        ++v12;
        float v10 = v14;
        --v13;
      }
      while (v13);
      if (a3 != 0.0)
      {
        do
        {
          float *v7 = (float)(*v7 - a2) / a3;
          ++v7;
          --v11;
        }
        while (v11);
      }
    }
    Nightingale::vDemean<float>(v6);
    return 1;
  }
  return v15;
}

uint64_t Nightingale::lstmLuna::reset(uint64_t this)
{
  *(void *)(this + 200) = *(void *)(this + 192);
  *(void *)(this + 272) = *(void *)(this + 264);
  *(unsigned char *)(this + 184) = 0;
  return this;
}

void *Nightingale::lstmLunaFw::lstmLunaFw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (void *)Nightingale::lstmLuna::lstmLuna(a1, a2, a3, a4);
  void *result = &unk_26E28CB78;
  return result;
}

{
  void *result;

  uint64_t result = (void *)Nightingale::lstmLuna::lstmLuna(a1, a2, a3, a4);
  void *result = &unk_26E28CB78;
  return result;
}

void Nightingale::lstmLunaFw::getOngoingFwLstmLuna(Nightingale::lstmLunaFw *this, uint64_t a2)
{
  if (Nightingale::lstmLuna::acquireWTmp(this, a2 - 44, a2))
  {
    if ((**(unsigned int (***)(Nightingale::lstmLunaFw *, uint64_t, float))this)(this, a2, 0.3))
    {
      if ((*(unsigned int (**)(Nightingale::lstmLunaFw *, float, float))(*(void *)this + 8))(this, 36.048, 0.46548))
      {
        Nightingale::lstmLunaFw::applyLunaAlgs(this);
        if (Nightingale::lstmLunaFw::validateLunaRslt(this, a2))
        {
          if (!*((unsigned char *)this + 260))
          {
            uint64_t v4 = (Nightingale::lstmLunaFw *)std::__throw_bad_optional_access[abi:nn180100]();
            Nightingale::lstmLunaFw::applyLunaAlgs(v4);
          }
        }
      }
    }
  }
}

void Nightingale::lstmLunaFw::applyLunaAlgs(Nightingale::lstmLunaFw *this)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::vector<double>::__assign_with_size[abi:nn180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v8, *((float **)this + 19), *((float **)this + 20), (uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 2);
  memset(&__p, 0, sizeof(__p));
  if ((Nightingale::ngt_luna_fw_dl_tmp_process::ngt_luna_fwEndFlagDLTmp((uint64_t *)this + 47, (uint64_t *)&v8, (uint64_t)&__p) & 1) == 0)
  {
    Nightingale::lstmModelCommonFw::fwDLPostProcess(&__p, 1, -17, (uint64_t)v4);
    *((void *)this + 27) = v4[0];
    *(void *)((char *)this + 221) = *(void *)((char *)v4 + 5);
    BOOL v2 = (void *)*((void *)this + 29);
    if (v2)
    {
      *((void *)this + 30) = v2;
      operator delete(v2);
    }
    *(_OWORD *)((char *)this + 232) = v5;
    *((void *)this + 31) = v6;
    if (*((unsigned char *)this + 220))
    {
      uint64_t v3 = Nightingale::lstmLunaFw::adjustLSTMFwEnd((uint64_t)v2, (uint64_t)this + 128, *((_DWORD *)this + 54));
      *((_DWORD *)this + 64) = v3;
      *((unsigned char *)this + 260) = BYTE4(v3);
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
}

uint64_t Nightingale::lstmLunaFw::validateLunaRslt(Nightingale::lstmLunaFw *this, int a2)
{
  if (!*((unsigned char *)this + 220)) {
    return 0;
  }
  uint64_t v4 = *((int *)this + 54);
  if ((int)v4 >= -2) {
    int v5 = -2;
  }
  else {
    int v5 = *((_DWORD *)this + 54);
  }
  if (v5 <= -15) {
    int v6 = -15;
  }
  else {
    int v6 = v5;
  }
  BOOL v7 = v4 == v6;
  float v8 = (float)(int)v4;
  uint64_t v9 = (void *)((char *)this + 280);
  unint64_t v11 = *((void *)this + 34);
  unint64_t v10 = *((void *)this + 35);
  if (v11 >= v10)
  {
    uint64_t v13 = *((void *)this + 33);
    uint64_t v14 = (uint64_t)(v11 - v13) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      goto LABEL_134;
    }
    uint64_t v16 = v10 - v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17) {
      int64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)this + 280, v17);
    }
    else {
      int64_t v18 = 0;
    }
    uint64_t v19 = (float *)&v18[8 * v14];
    unint64_t v20 = &v18[8 * v17];
    *(_DWORD *)uint64_t v19 = v7;
    v19[1] = v8;
    uint64_t v12 = (char *)(v19 + 2);
    uint64_t v22 = (char *)*((void *)this + 33);
    uint64_t v21 = (char *)*((void *)this + 34);
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v23;
        v19 -= 2;
      }
      while (v21 != v22);
      uint64_t v21 = (char *)*((void *)this + 33);
    }
    *((void *)this + 33) = v19;
    *((void *)this + 34) = v12;
    *((void *)this + 35) = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v11 = v7;
    *(float *)(v11 + 4) = v8;
    uint64_t v12 = (char *)(v11 + 8);
  }
  *((void *)this + 34) = v12;
  if (v4 != v6) {
    return 0;
  }
  char v24 = (unsigned char *)*((void *)this + 17);
  if (1 - ((uint64_t)&v24[-*((void *)this + 16)] >> 2) > (unint64_t)(v4 - 7)) {
    return 0;
  }
  uint64_t v27 = std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&v124, &v24[4 * v4 - 28], v24);
  std::vector<int> __p = 0;
  std::vector<int> __dst = 0;
  uint64_t v123 = 0;
  uint64_t v28 = v124;
  int64_t v29 = v125 - (unsigned char *)v124;
  if (v125 != v124)
  {
    std::vector<int>::__vallocate[abi:nn180100](&__p, v29 >> 2);
    uint64_t v30 = (char *)__dst;
    uint64_t v27 = (uint64_t)memmove(__dst, v28, v29);
    std::vector<int> __dst = &v30[v29];
  }
  uint64_t v31 = Nightingale::lstmLunaFw::signalShiftHighCheck(0.15, 1.0, v27, 7, (unsigned char **)&__p);
  if (__p)
  {
    std::vector<int> __dst = __p;
    operator delete(__p);
  }
  uint64_t v33 = (uint64_t *)*((void *)this + 34);
  unint64_t v32 = *((void *)this + 35);
  if ((unint64_t)v33 >= v32)
  {
    uint64_t v35 = *((void *)this + 33);
    uint64_t v36 = ((uint64_t)v33 - v35) >> 3;
    if ((unint64_t)(v36 + 1) >> 61) {
      goto LABEL_134;
    }
    uint64_t v37 = v32 - v35;
    uint64_t v38 = v37 >> 2;
    if (v37 >> 2 <= (unint64_t)(v36 + 1)) {
      uint64_t v38 = v36 + 1;
    }
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v38;
    }
    if (v39) {
      uint64_t v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)v9, v39);
    }
    else {
      uint64_t v40 = 0;
    }
    long long v41 = (uint64_t *)&v40[8 * v36];
    uint64_t v42 = &v40[8 * v39];
    *long long v41 = v31;
    int v34 = v41 + 1;
    uint64_t v44 = (char *)*((void *)this + 33);
    uint64_t v43 = (char *)*((void *)this + 34);
    if (v43 != v44)
    {
      do
      {
        uint64_t v45 = *((void *)v43 - 1);
        v43 -= 8;
        *--long long v41 = v45;
      }
      while (v43 != v44);
      uint64_t v43 = (char *)*((void *)this + 33);
    }
    *((void *)this + 33) = v41;
    *((void *)this + 34) = v34;
    *((void *)this + 35) = v42;
    if (v43) {
      operator delete(v43);
    }
  }
  else
  {
    uint64_t *v33 = v31;
    int v34 = v33 + 1;
  }
  *((void *)this + 34) = v34;
  if (!*((unsigned char *)this + 260))
  {
    BOOL v25 = 0;
LABEL_132:
    if (v124)
    {
      unint64_t v125 = v124;
      operator delete(v124);
    }
    return v25;
  }
  unint64_t v46 = (Nightingale *)(*((_DWORD *)this + 64)
                                    + a2
                                    - *(_DWORD *)(*(void *)(*((void *)this + 2) + 8) - 96));
  unint64_t v47 = Nightingale::follicularPhaseCheck(v46, 6, 100);
  unint64_t v48 = v47;
  char v50 = (unint64_t *)*((void *)this + 34);
  unint64_t v49 = *((void *)this + 35);
  if ((unint64_t)v50 >= v49)
  {
    uint64_t v52 = *((void *)this + 33);
    uint64_t v53 = ((uint64_t)v50 - v52) >> 3;
    if ((unint64_t)(v53 + 1) >> 61) {
      goto LABEL_134;
    }
    uint64_t v54 = v49 - v52;
    uint64_t v55 = v54 >> 2;
    if (v54 >> 2 <= (unint64_t)(v53 + 1)) {
      uint64_t v55 = v53 + 1;
    }
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v56 = v55;
    }
    if (v56) {
      int v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)v9, v56);
    }
    else {
      int v57 = 0;
    }
    uint64_t v58 = (unint64_t *)&v57[8 * v53];
    uint64_t v59 = &v57[8 * v56];
    *uint64_t v58 = v48;
    int v51 = v58 + 1;
    uint64_t v61 = (char *)*((void *)this + 33);
    uint64_t v60 = (char *)*((void *)this + 34);
    if (v60 != v61)
    {
      do
      {
        unint64_t v62 = *((void *)v60 - 1);
        v60 -= 8;
        *--uint64_t v58 = v62;
      }
      while (v60 != v61);
      uint64_t v60 = (char *)*((void *)this + 33);
    }
    *((void *)this + 33) = v58;
    *((void *)this + 34) = v51;
    *((void *)this + 35) = v59;
    if (v60) {
      operator delete(v60);
    }
  }
  else
  {
    *char v50 = v47;
    int v51 = v50 + 1;
  }
  *((void *)this + 34) = v51;
  uint64_t v63 = *(void *)(*((void *)this + 2) + 8);
  if (*(unsigned char *)(v63 - 60))
  {
    unint64_t v64 = Nightingale::lutealPhaseCheck(v46, *(float *)(v63 - 64), 1.0);
    unint64_t v65 = v64;
    long long v67 = (unint64_t *)*((void *)this + 34);
    unint64_t v66 = *((void *)this + 35);
    if ((unint64_t)v67 >= v66)
    {
      uint64_t v69 = *((void *)this + 33);
      uint64_t v70 = ((uint64_t)v67 - v69) >> 3;
      if ((unint64_t)(v70 + 1) >> 61) {
        goto LABEL_134;
      }
      uint64_t v71 = v66 - v69;
      uint64_t v72 = v71 >> 2;
      if (v71 >> 2 <= (unint64_t)(v70 + 1)) {
        uint64_t v72 = v70 + 1;
      }
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v73 = v72;
      }
      if (v73) {
        long long v74 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)v9, v73);
      }
      else {
        long long v74 = 0;
      }
      long long v75 = (unint64_t *)&v74[8 * v70];
      uint64_t v76 = &v74[8 * v73];
      *long long v75 = v65;
      uint64_t v68 = v75 + 1;
      int v78 = (char *)*((void *)this + 33);
      uint64_t v77 = (char *)*((void *)this + 34);
      if (v77 != v78)
      {
        do
        {
          unint64_t v79 = *((void *)v77 - 1);
          v77 -= 8;
          *--long long v75 = v79;
        }
        while (v77 != v78);
        uint64_t v77 = (char *)*((void *)this + 33);
      }
      *((void *)this + 33) = v75;
      *((void *)this + 34) = v68;
      *((void *)this + 35) = v76;
      if (v77) {
        operator delete(v77);
      }
    }
    else
    {
      *long long v67 = v64;
      uint64_t v68 = v67 + 1;
    }
    *((void *)this + 34) = v68;
    uint64_t v80 = *(void *)(*((void *)this + 2) + 8);
    if (*(unsigned char *)(v80 - 60))
    {
      if (*(unsigned char *)(v80 - 52))
      {
        float v81 = sqrtf(*(float *)(v80 - 56));
        float v82 = *(float *)(v80 - 64) + -13.0;
        LODWORD(v80) = (float)((float)(v82 + fminf(fmaxf(v81 * 9.0, 5.0), 15.0)) + 0.001) > (float)(int)v46;
        if ((float)((float)(v82 - fminf(fmaxf(v81 * 4.0, 5.0), 15.0)) + -0.001) < (float)(int)v46) {
          uint64_t v80 = v80;
        }
        else {
          uint64_t v80 = 0;
        }
        unint64_t v83 = v80 | ((unint64_t)LODWORD(v82) << 32);
        if ((unint64_t)v68 >= *v9)
        {
          uint64_t v85 = *((void *)this + 33);
          uint64_t v86 = ((uint64_t)v68 - v85) >> 3;
          if ((unint64_t)(v86 + 1) >> 61) {
            goto LABEL_134;
          }
          uint64_t v87 = *v9 - v85;
          uint64_t v88 = v87 >> 2;
          if (v87 >> 2 <= (unint64_t)(v86 + 1)) {
            uint64_t v88 = v86 + 1;
          }
          if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v89 = v88;
          }
          if (v89) {
            long long v90 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)v9, v89);
          }
          else {
            long long v90 = 0;
          }
          uint64_t v91 = (unint64_t *)&v90[8 * v86];
          uint64_t v92 = &v90[8 * v89];
          *uint64_t v91 = v83;
          unint64_t v84 = v91 + 1;
          uint64_t v94 = (char *)*((void *)this + 33);
          uint64_t v93 = (char *)*((void *)this + 34);
          if (v93 != v94)
          {
            do
            {
              unint64_t v95 = *((void *)v93 - 1);
              v93 -= 8;
              *--uint64_t v91 = v95;
            }
            while (v93 != v94);
            uint64_t v93 = (char *)*((void *)this + 33);
          }
          *((void *)this + 33) = v91;
          *((void *)this + 34) = v84;
          *((void *)this + 35) = v92;
          if (v93) {
            operator delete(v93);
          }
        }
        else
        {
          *uint64_t v68 = v83;
          unint64_t v84 = v68 + 1;
        }
        *((void *)this + 34) = v84;
        if (*((unsigned char *)this + 260))
        {
          int v96 = *((_DWORD *)this + 64);
          char v97 = std::vector<int>::vector(&v120, (const std::vector<int> *)((char *)this + 128));
          unint64_t v98 = Nightingale::lstmLunaFw::missingRateAtDetectionCheck(0.3, (uint64_t)v97, v96, &v120);
          unint64_t v99 = v98;
          uint64_t v101 = (unint64_t *)*((void *)this + 34);
          unint64_t v100 = *((void *)this + 35);
          if ((unint64_t)v101 < v100)
          {
            *uint64_t v101 = v98;
            unint64_t v102 = v101 + 1;
LABEL_121:
            *((void *)this + 34) = v102;
            if (v120.__begin_)
            {
              v120.__end_ = v120.__begin_;
              operator delete(v120.__begin_);
              unint64_t v102 = (void *)*((void *)this + 34);
            }
            uint64_t v114 = (void *)*((void *)this + 33);
            if (v114 == v102)
            {
              BOOL v25 = 1;
            }
            else
            {
              uint64_t v115 = v114 + 1;
              do
              {
                BOOL v25 = *((unsigned char *)v115 - 8) != 0;
                if (*((unsigned char *)v115 - 8)) {
                  BOOL v116 = v115 == v102;
                }
                else {
                  BOOL v116 = 1;
                }
                ++v115;
              }
              while (!v116);
            }
            goto LABEL_132;
          }
          uint64_t v103 = *((void *)this + 33);
          uint64_t v104 = ((uint64_t)v101 - v103) >> 3;
          if (!((unint64_t)(v104 + 1) >> 61))
          {
            uint64_t v105 = v100 - v103;
            uint64_t v106 = v105 >> 2;
            if (v105 >> 2 <= (unint64_t)(v104 + 1)) {
              uint64_t v106 = v104 + 1;
            }
            if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v107 = v106;
            }
            if (v107) {
              uint64_t v108 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)v9, v107);
            }
            else {
              uint64_t v108 = 0;
            }
            char v109 = (unint64_t *)&v108[8 * v104];
            int64x2_t v110 = &v108[8 * v107];
            *char v109 = v99;
            unint64_t v102 = v109 + 1;
            long long v112 = (char *)*((void *)this + 33);
            unint64_t v111 = (char *)*((void *)this + 34);
            if (v111 != v112)
            {
              do
              {
                unint64_t v113 = *((void *)v111 - 1);
                v111 -= 8;
                *--char v109 = v113;
              }
              while (v111 != v112);
              unint64_t v111 = (char *)*((void *)this + 33);
            }
            *((void *)this + 33) = v109;
            *((void *)this + 34) = v102;
            *((void *)this + 35) = v110;
            if (v111) {
              operator delete(v111);
            }
            goto LABEL_121;
          }
LABEL_134:
          abort();
        }
      }
    }
  }
  uint64_t v117 = (Nightingale::lstmLunaFw *)std::__throw_bad_optional_access[abi:nn180100]();
  return Nightingale::lstmLunaFw::getOngoingFwLstmLunaAvailibilityFail(v117, v118, v119);
}

BOOL Nightingale::lstmLunaFw::getOngoingFwLstmLunaAvailibilityFail(Nightingale::lstmLunaFw *this, uint64_t a2, float a3)
{
  if (*((void *)this + 24) == *((void *)this + 25))
  {
    if (Nightingale::lstmLuna::acquireWTmp(this, a2 - 44, a2)) {
      (**(void (***)(Nightingale::lstmLunaFw *, uint64_t, float))this)(this, a2, a3);
    }
    int v4 = *((unsigned __int8 *)this + 184);
    *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = *((void *)this + 24);
    *((void *)this + 34) = *((void *)this + 33);
    *((unsigned char *)this + 184) = 0;
  }
  else
  {
    int v4 = *((unsigned __int8 *)this + 184);
  }
  return v4 != 0;
}

uint64_t Nightingale::lstmLunaFw::adjustLSTMFwEnd(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 <= 0)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 4 * a3;
    float v10 = 0.0;
    unsigned int v4 = a3;
    while (1)
    {
      uint64_t v11 = v7;
      std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__x, (unsigned char *)(v9 + *(void *)(a2 + 8) - 28), (unsigned char *)(v9 + *(void *)(a2 + 8)));
      std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__p, (unsigned char *)(v9 + *(void *)(a2 + 8)), *(unsigned char **)(a2 + 8));
      uint64_t MeanDiffOf2Windows = Nightingale::getMeanDiffOf2Windows(&__x, &__p, -1.0);
      float v13 = *(float *)&MeanDiffOf2Windows;
      BOOL v14 = (MeanDiffOf2Windows & 0xFF00000000) == 0;
      if (*(float *)&MeanDiffOf2Windows < 0.2) {
        BOOL v14 = 1;
      }
      char v15 = (float)(*(float *)&MeanDiffOf2Windows - v10) < 0.04 || v14;
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      if (__x.__begin_)
      {
        __x.__end_ = __x.__begin_;
        operator delete(__x.__begin_);
      }
      if (v15) {
        break;
      }
      uint64_t v7 = v11 + 1;
      if (v11 == 2)
      {
        int v16 = a3 - v7;
        uint64_t v3 = 0x100000000;
        unsigned int v4 = v16 + 1;
        return v3 | v4;
      }
      unsigned int v4 = a3 - v11;
      v9 -= 4;
      float v10 = v13;
    }
    uint64_t v3 = 0x100000000;
  }
  else
  {
    uint64_t v3 = 0;
    unsigned int v4 = 0;
  }
  return v3 | v4;
}

uint64_t Nightingale::lstmLunaFw::signalShiftHighCheck(float a1, float a2, uint64_t a3, int a4, unsigned char **a5)
{
  std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__x, *a5, &(*a5)[4 * a4]);
  std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__p, &(*a5)[4 * a4], a5[1]);
  uint64_t MeanDiffOf2Windows = Nightingale::getMeanDiffOf2Windows(&__x, &__p, -1.0);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  LODWORD(v10) = BYTE4(MeanDiffOf2Windows) != 0;
  uint64_t v11 = MeanDiffOf2Windows << 32;
  if (!BYTE4(MeanDiffOf2Windows)) {
    uint64_t v11 = 0x41F0000000000000;
  }
  if (*(float *)&MeanDiffOf2Windows < a1) {
    LODWORD(v10) = 0;
  }
  if (*(float *)&MeanDiffOf2Windows <= a2) {
    uint64_t v10 = v10;
  }
  else {
    uint64_t v10 = 0;
  }
  return v11 | v10;
}

unint64_t Nightingale::lstmLunaFw::closeToCalOvuCheck(Nightingale::lstmLunaFw *this, int a2, float a3, float a4)
{
  float v4 = a3 + -13.0;
  LODWORD(v5) = (float)((float)(v4 + fminf(fmaxf(a4 * 9.0, 5.0), 15.0)) + 0.001) > (float)a2;
  if ((float)((float)(v4 - fminf(fmaxf(a4 * 4.0, 5.0), 15.0)) + -0.001) < (float)a2) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0;
  }
  return v5 | ((unint64_t)LODWORD(v4) << 32);
}

unint64_t Nightingale::lstmLunaFw::missingRateAtDetectionCheck(float a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v7 = (unsigned char *)a4[1];
  if (a3 >= 1 && (unsigned char *)*a4 == v7) {
    return 0xBF80000000000000;
  }
  std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)__p, &v7[4 * a3], v7);
  int MissingCnt = Nightingale::getMissingCnt((float **)__p);
  if (a3)
  {
    float v10 = (float)MissingCnt;
    BOOL v11 = (float)((float)MissingCnt / (float)-a3) <= a1;
  }
  else
  {
    BOOL v11 = MissingCnt == 0;
    float v10 = (float)MissingCnt;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v11 | ((unint64_t)LODWORD(v10) << 32);
}

float Nightingale::lstmLunaFw::getSignalShift(Nightingale::lstmLunaFw *this)
{
  uint64_t v1 = *((void *)this + 33);
  unint64_t v2 = *((void *)this + 34) - v1;
  float result = -1.0;
  if (v2) {
    BOOL v4 = v2 >= 9;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    return *(float *)(v1 + 12);
  }
  return result;
}

uint64_t Nightingale::lstmLunaFw::getFwConfirmationFailureReason(Nightingale::lstmLunaFw *this)
{
  unint64_t v2 = (unsigned char *)*((void *)this + 24);
  uint64_t v1 = (unsigned char *)*((void *)this + 25);
  if (v2 != v1)
  {
    unint64_t v3 = v1 - v2;
    unint64_t v4 = (unint64_t)(v1 - v2) >> 3;
    if ((int)v4 >= 1 && !*v2)
    {
      uint64_t v6 = *((void *)this + 33);
      uint64_t v7 = *((void *)this + 34);
      if (v6 != v7 && (int)((unint64_t)(v7 - v6) >> 3) >= 2)
      {
        if ((unint64_t)(v7 - v6) <= 8) {
          goto LABEL_21;
        }
        if (!*(unsigned char *)(v6 + 8)) {
          return 3;
        }
      }
      if (v4 >= 2)
      {
        if (v3 <= 8) {
          goto LABEL_21;
        }
        if (v2[8]) {
          return 2;
        }
      }
      if (v6 == v7 || (int)((unint64_t)(v7 - v6) >> 3) < 6) {
        return 8;
      }
      if ((unint64_t)(v7 - v6) > 0x28)
      {
        if (!*(unsigned char *)(v6 + 40)) {
          return 5;
        }
        return 8;
      }
LABEL_21:
      abort();
    }
  }
  return 1;
}

uint64_t Nightingale::lstmLunaPeriod::lstmLunaPeriod(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)Nightingale::lstmLuna::lstmLuna(a1, a2, a3, a4);
  void *v7 = &unk_26E28CB98;
  *(void *)((char *)v7 + 388) = a5;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(void *)(a1 + 464) = 0;
  Nightingale::CGradient::CGradient((uint64_t)(v7 + 59));
  *(unsigned char *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 532) = 0;
  *(unsigned char *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 540) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 548) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 556) = 0;
  Nightingale::ngt_luna_period_dl_tmp_process::ngt_luna_period_dl_tmp_process((Nightingale::ngt_luna_period_dl_tmp_process *)(a1 + 560));
  Nightingale::lstmModelCommonPeriod::lstmModelCommonPeriod((Nightingale::lstmModelCommonPeriod *)(a1 + 568));
  return a1;
}

void Nightingale::lstmLunaPeriod::~lstmLunaPeriod(id **this)
{
  *this = (id *)&unk_26E28CB98;
  Nightingale::lstmModelCommonPeriod::~lstmModelCommonPeriod((Nightingale::lstmModelCommonPeriod *)(this + 71));
  Nightingale::ngt_luna_period_dl_tmp_process::~ngt_luna_period_dl_tmp_process(this + 70);
  unint64_t v2 = this[59];
  if (v2)
  {
    this[60] = v2;
    operator delete(v2);
  }
  unint64_t v3 = this[56];
  if (v3)
  {
    this[57] = v3;
    operator delete(v3);
  }
  unint64_t v4 = this[53];
  if (v4)
  {
    this[54] = v4;
    operator delete(v4);
  }
  uint64_t v5 = this[50];
  if (v5)
  {
    this[51] = v5;
    operator delete(v5);
  }
  Nightingale::lstmLuna::~lstmLuna(this);
}

__n128 Nightingale::lstmLunaPeriod::estimatePeriodStartLuna@<Q0>(Nightingale::lstmLunaPeriod *this@<X0>, uint64_t a2@<X8>)
{
  Nightingale::CGradient::CGradient(a2);
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 60) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 68) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 76) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 84) = 0;
  uint64_t v4 = *((unsigned int *)this + 97);
  if ((int)v4 <= *((_DWORD *)this + 98))
  {
    do
    {
      Nightingale::lstmLunaPeriod::getLunaPeriodEstimationADay(this, v4 - 44, v4);
      if (*((unsigned char *)this + 556)) {
        break;
      }
      BOOL v5 = (int)v4 < *((_DWORD *)this + 98);
      uint64_t v4 = (v4 + 1);
    }
    while (v5);
  }
  if ((Nightingale::lstmLunaPeriod *)((char *)this + 472) != (Nightingale::lstmLunaPeriod *)a2) {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)a2, *((char **)this + 59), *((void *)this + 60), (uint64_t)(*((void *)this + 60) - *((void *)this + 59)) >> 2);
  }
  *(_OWORD *)(a2 + 24) = *((_OWORD *)this + 31);
  *(_OWORD *)(a2 + 33) = *(_OWORD *)((char *)this + 505);
  *(_OWORD *)(a2 + 56) = *((_OWORD *)this + 33);
  __n128 result = *(__n128 *)((char *)this + 541);
  *(__n128 *)(a2 + 69) = result;
  return result;
}

void Nightingale::lstmLunaPeriod::getLunaPeriodEstimationADay(Nightingale::lstmLunaPeriod *this, int a2, uint64_t a3)
{
  if (Nightingale::lstmLuna::acquireWTmp(this, a2, a3)
    && ((**(uint64_t (***)(Nightingale::lstmLunaPeriod *, uint64_t, float))this)(this, a3, 0.3) & 1) != 0)
  {
    if ((*(unsigned int (**)(Nightingale::lstmLunaPeriod *, float, float))(*(void *)this + 8))(this, 36.054, 0.46308))
    {
      if (*((unsigned char *)this + 40))
      {
        if (Nightingale::lstmLunaPeriod::prepareUiVectors(this, a2, a3, *((_DWORD *)this + 8)))
        {
          Nightingale::lstmLunaPeriod::applyAlgs(this, a3);
        }
      }
      else
      {
        uint64_t v6 = (Nightingale::lstmLunaPeriod *)std::__throw_bad_optional_access[abi:nn180100]();
        Nightingale::lstmLunaPeriod::prepareUiVectors(v6, v7, v8, v9);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 138) = a3;
    *((unsigned char *)this + 556) = 1;
  }
}

BOOL Nightingale::lstmLunaPeriod::prepareUiVectors(Nightingale::lstmLunaPeriod *this, int a2, int a3, int a4)
{
  int v23 = a2;
  char v24 = 1;
  int v25 = a3;
  char v26 = 1;
  int v27 = a4;
  char v28 = 1;
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = *((void *)this + 3);
  long long v20 = xmmword_22F166E20;
  uint64_t v21 = 0x3FB09540401F4DA4;
  Nightingale::uiProcessForLstm::uiProcessForLstm((uint64_t)v22, v5, v6, v7, (__n128 *)&v20);
  Nightingale::uiProcessForLstm::prepareUiLogForDL((uint64_t)v22, (uint64_t)&v23, (uint64_t)this + 400, (float **)this + 53, (float **)this + 56);
  uint64_t v8 = *((void *)this + 50);
  uint64_t v9 = *((void *)this + 51);
  if (v8 == v9 || (uint64_t v10 = *((void *)this + 53), v11 = *((void *)this + 54), v10 == v11))
  {
    BOOL v18 = 0;
  }
  else
  {
    uint64_t v12 = *((void *)this + 56);
    uint64_t v13 = *((void *)this + 57);
    unint64_t v14 = v9 - v8;
    unint64_t v15 = v11 - v10;
    BOOL v16 = (unint64_t)(v13 - v12) > 0xB3;
    if (v12 == v13) {
      BOOL v16 = 0;
    }
    BOOL v17 = v14 >= 0xB4 && v16;
    BOOL v18 = v15 >= 0xB4 && v17;
  }
  Nightingale::uiProcessForLstm::~uiProcessForLstm((Nightingale::uiProcessForLstm *)v22);
  return v18;
}

void Nightingale::lstmLunaPeriod::applyAlgs(Nightingale::lstmLunaPeriod *this, int a2)
{
  uint64_t v4 = (Nightingale::lstmLunaPeriod *)((char *)this + 568);
  Nightingale::lstmLunaPeriod::getPeriodProjFromLstmModel(this, (Nightingale::lstmLunaPeriod *)((char *)this + 568), a2);
  *((_DWORD *)this + 136) = a2;
  *((unsigned char *)this + 548) = 1;
  *((_DWORD *)this + 138) = a2;
  *((unsigned char *)this + 556) = 1;
  uint64_t v5 = *((void *)this + 2);
  if (*(unsigned char *)(v5 + 100))
  {
    if (*((unsigned char *)this + 532))
    {
      int v6 = *(_DWORD *)(v5 + 96) - *(_DWORD *)(*(void *)(v5 + 8) - 96);
      if (v6 >= *((_DWORD *)this + 132))
      {
        Nightingale::lstmModelCommonPeriod::applyNoflowUpdateDL(v4, (Nightingale::lstmLunaPeriod *)((char *)this + 472), v6);
      }
    }
  }
}

BOOL Nightingale::lstmLunaPeriod::validateWTmp(Nightingale::lstmLunaPeriod *this, float a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  int64x2_t v44 = 0uLL;
  v45[0] = 0;
  unint64_t v3 = (float **)((char *)this + 128);
  uint64_t v4 = (*((void *)this + 17) - *((void *)this + 16)) >> 2;
  uint64_t v5 = operator new(4uLL);
  _DWORD *v5 = v4;
  int v6 = operator new(4uLL);
  long long v41 = v6;
  *int v6 = 1050253722;
  uint64_t v42 = v6 + 1;
  uint64_t v43 = v6 + 1;
  v50[0] = &unk_26E28C690;
  v50[1] = Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpMissingCntHigh;
  v50[2] = 0;
  int v51 = v50;
  unint64_t v49 = v45;
  uint64_t v7 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>>((uint64_t)v45, 1uLL);
  uint64_t v8 = (uint64_t)v7;
  std::vector<int> __p = v7;
  v47.i64[0] = (uint64_t)v7;
  uint64_t v10 = &v7[4 * v9];
  unint64_t v48 = v10;
  if (v51)
  {
    if (v51 == v50)
    {
      void v7[3] = v7;
      (*(void (**)(void *, void *))(*v51 + 24))(v51, v7);
    }
    else
    {
      void v7[3] = v51;
      int v51 = 0;
    }
  }
  else
  {
    void v7[3] = 0;
  }
  uint64_t v11 = v8 + 32;
  v47.i64[1] = v8 + 32;
  uint64_t v12 = v44.i64[1];
  if (v44.i64[1] == v44.i64[0])
  {
    int64x2_t v13 = vdupq_n_s64(v44.u64[1]);
  }
  else
  {
    do
    {
      v8 -= 32;
      v12 -= 32;
      std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::__value_func[abi:nn180100](v8, v12);
    }
    while (v12 != v44.i64[0]);
    int64x2_t v13 = v44;
    uint64_t v11 = v47.i64[1];
    uint64_t v10 = v48;
  }
  v44.i64[0] = v8;
  int64x2_t v47 = v13;
  unint64_t v14 = (void *)v45[0];
  v45[0] = v10;
  unint64_t v48 = v14;
  std::vector<int> __p = (void *)v13.i64[0];
  std::__split_buffer<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::~__split_buffer((uint64_t)&__p);
  v44.i64[1] = v11;
  std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::~__value_func[abi:nn180100](v50);
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  std::vector<int>::__vallocate[abi:nn180100](&v38, 1uLL);
  unint64_t v15 = v39;
  *unint64_t v39 = *v5;
  unint64_t v39 = v15 + 1;
  unint64_t v16 = *((unsigned __int8 *)this + 176);
  uint64_t v17 = *((void *)this + 13);
  if (v16 >= (*((void *)this + 14) - v17) >> 3) {
    goto LABEL_41;
  }
  if (*(unsigned char *)(v17 + 8 * v16 + 4) || **v3 >= 0.0)
  {
    Nightingale::wristTemperatureInputValidation::checkListOfConditions((uint64_t)this + 369, v44.i64, (uint64_t)v3, &v38, &v41, 1, &__p);
    uint64_t v18 = *(void *)__p;
    v47.i64[0] = (uint64_t)__p;
    operator delete(__p);
  }
  else
  {
    uint64_t v18 = 0x3F80000000000001;
  }
  unint64_t v19 = *((void *)this + 26);
  long long v20 = (uint64_t *)*((void *)this + 25);
  if ((unint64_t)v20 < v19)
  {
    uint64_t *v20 = v18;
    uint64_t v21 = v20 + 1;
    goto LABEL_31;
  }
  uint64_t v22 = *((void *)this + 24);
  uint64_t v23 = ((uint64_t)v20 - v22) >> 3;
  if ((unint64_t)(v23 + 1) >> 61) {
LABEL_41:
  }
    abort();
  uint64_t v24 = v19 - v22;
  uint64_t v25 = v24 >> 2;
  if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
    uint64_t v25 = v23 + 1;
  }
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v26 = v25;
  }
  if (v26) {
    int v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)this + 208, v26);
  }
  else {
    int v27 = 0;
  }
  char v28 = (uint64_t *)&v27[8 * v23];
  int64_t v29 = &v27[8 * v26];
  *char v28 = v18;
  uint64_t v21 = v28 + 1;
  uint64_t v31 = (char *)*((void *)this + 24);
  uint64_t v30 = (char *)*((void *)this + 25);
  if (v30 != v31)
  {
    do
    {
      uint64_t v32 = *((void *)v30 - 1);
      v30 -= 8;
      *--char v28 = v32;
    }
    while (v30 != v31);
    uint64_t v30 = (char *)*((void *)this + 24);
  }
  *((void *)this + 24) = v28;
  *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v21;
  *((void *)this + 26) = v29;
  if (v30) {
    operator delete(v30);
  }
LABEL_31:
  *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v21;
  if (v38)
  {
    unint64_t v39 = v38;
    operator delete(v38);
    uint64_t v21 = (void *)*((void *)this + 25);
  }
  BOOL v33 = 1;
  *((_DWORD *)this + 45) = 1;
  int v34 = (unsigned char *)*((void *)this + 24);
  *((unsigned char *)this + 184) = *v34;
  if (v34 != (unsigned char *)v21)
  {
    uint64_t v35 = v34 + 8;
    do
    {
      BOOL v33 = (*((void *)v35 - 1) & 1) == 0;
      if (*((void *)v35 - 1)) {
        break;
      }
      BOOL v36 = v35 == (unsigned char *)v21;
      v35 += 8;
    }
    while (!v36);
  }
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  operator delete(v5);
  std::vector<int> __p = &v44;
  std::vector<std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  return v33;
}

void Nightingale::lstmLunaPeriod::getPeriodProjFromLstmModel(Nightingale::lstmLunaPeriod *this, Nightingale::lstmModelCommonPeriod *a2, int a3)
{
  memset(&v17, 0, sizeof(v17));
  int v5 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 8) - 96);
  *(_OWORD *)std::vector<int> __p = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  *(_OWORD *)unint64_t v14 = 0u;
  *(_OWORD *)__src = 0u;
  *(_OWORD *)uint64_t v12 = 0u;
  std::vector<double>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&__p[1], 0, *((float **)this + 19), *((float **)this + 20), (uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 2);
  std::vector<double>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)__src, 0, *((float **)this + 50), *((float **)this + 51), (uint64_t)(*((void *)this + 51) - *((void *)this + 50)) >> 2);
  std::vector<double>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v12[1], (char *)v12[1], *((float **)this + 53), *((float **)this + 54), (uint64_t)(*((void *)this + 54) - *((void *)this + 53)) >> 2);
  std::vector<double>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)v14, (char *)v14[0], *((float **)this + 56), *((float **)this + 57), (uint64_t)(*((void *)this + 57) - *((void *)this + 56)) >> 2);
  Nightingale::ngt_luna_period_dl_tmp_process::ngt_luna_periodRegressorLSTM((void **)this + 70, (uint64_t **)__src, (uint64_t)&v17);
  Nightingale::lstmModelCommonPeriod::periodDLPostProcess(&v17, a3 - v5, (uint64_t)&v7);
  int v6 = (void *)*((void *)this + 59);
  if (v6)
  {
    *((void *)this + 60) = v6;
    operator delete(v6);
  }
  *(_OWORD *)((char *)this + 472) = v7;
  *((void *)this + 61) = v8;
  *((_OWORD *)this + 31) = v9[0];
  *(_OWORD *)((char *)this + 505) = *(_OWORD *)((char *)v9 + 9);
  *((_OWORD *)this + 33) = v10[0];
  *(_OWORD *)((char *)this + 541) = *(_OWORD *)((char *)v10 + 13);
  if (__p[1])
  {
    *(void **)&long long v16 = __p[1];
    operator delete(__p[1]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v12[1])
  {
    *(void **)&long long v13 = v12[1];
    operator delete(v12[1]);
  }
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
}

char *std::vector<double>::__assign_with_size[abi:nn180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(void *a1, float *a2, float *a3, unint64_t a4)
{
  int v6 = a2;
  uint64_t v8 = a1[2];
  __n128 result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    uint64_t v18 = (char *)a1[1];
    long long v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      unint64_t v26 = result;
      if (a2 != a3)
      {
        int v27 = (double *)result;
        do
        {
          float v28 = *v6++;
          *v27++ = v28;
          v26 += 8;
        }
        while (v6 != a3);
      }
      std::vector<int> v17 = (char *)(v26 - result);
      uint64_t v12 = result;
    }
    else
    {
      long long v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 4 * v19;
        do
        {
          float v22 = *v6++;
          *(double *)__n128 result = v22;
          result += 8;
          v21 -= 4;
        }
        while (v21);
      }
      uint64_t v23 = v12;
      if (v20 != a3)
      {
        uint64_t v24 = (double *)v12;
        do
        {
          float v25 = *v20++;
          *v24++ = v25;
          v23 += 8;
        }
        while (v20 != a3);
      }
      std::vector<int> v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<Nightingale::PhaseSet>::__vallocate[abi:nn180100](a1, v11);
    unint64_t v14 = (double *)a1[1];
    long long v13 = a1 + 1;
    uint64_t v12 = (char *)v14;
    unint64_t v15 = v14;
    if (v6 != a3)
    {
      unint64_t v15 = (double *)v12;
      do
      {
        float v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != a3);
    }
    std::vector<int> v17 = (char *)((char *)v15 - v12);
  }
  void *v13 = &v17[(void)v12];
  return result;
}

void *std::__function::__value_func<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::swap[abi:nn180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

Nightingale::fwEstimatorLuna *Nightingale::fwEstimatorLuna::fwEstimatorLuna(Nightingale::fwEstimatorLuna *this)
{
  Nightingale::fwEstimatorBase::fwEstimatorBase(this);
  unint64_t v2 = operator new(0x14uLL);
  *((void *)this + 4) = v2 + 5;
  *((void *)this + 5) = v2 + 5;
  v2[4] = 5;
  *(_OWORD *)unint64_t v2 = xmmword_22F166EB0;
  *((void *)this + 3) = v2;
  Nightingale::ngt_luna_fw_dl_tmp_process::ngt_luna_fw_dl_tmp_process((Nightingale::fwEstimatorLuna *)((char *)this + 48));
  return this;
}

void Nightingale::fwEstimatorLuna::~fwEstimatorLuna(id **this)
{
  Nightingale::ngt_luna_fw_dl_tmp_process::~ngt_luna_fw_dl_tmp_process(this + 6);
  unint64_t v2 = this[3];
  if (v2)
  {
    this[4] = v2;
    operator delete(v2);
  }
  Nightingale::fwEstimatorBase::~fwEstimatorBase((Nightingale::fwEstimatorBase *)this);
}

void Nightingale::fwEstimatorLuna::getHistFwKali(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void **a4@<X3>, unsigned int a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10)
{
  uint64_t v10 = a7;
  *(unsigned char *)a9 = 0;
  *(unsigned char *)(a9 + 4) = 0;
  *(unsigned char *)(a9 + 8) = 0;
  long long v13 = (unsigned int *)(a9 + 8);
  *(unsigned char *)(a9 + 12) = 0;
  *(_DWORD *)(a9 + 16) = 3;
  *(void *)(a9 + 20) = 0;
  unint64_t v14 = (_DWORD *)(a9 + 20);
  *(unsigned char *)(a9 + 32) = 0;
  *(_WORD *)(a9 + 28) = 0;
  *(int32x4_t *)(a9 + 36) = vdupq_n_s32(0x7FC00000u);
  *(unsigned char *)(a9 + 52) = 0;
  *(unsigned char *)(a9 + 56) = 0;
  *(unsigned char *)(a9 + 60) = 0;
  *(unsigned char *)(a9 + 64) = 0;
  *(unsigned char *)(a9 + 72) = 0;
  *(unsigned char *)(a9 + 96) = 0;
  *(unsigned char *)(a9 + 104) = 0;
  *(unsigned char *)(a9 + 128) = 0;
  *(unsigned char *)(a9 + 136) = 0;
  *(unsigned char *)(a9 + 140) = 0;
  *(void *)(a9 + 144) = 0x17FC00000;
  *(_DWORD *)(a9 + 152) = 0;
  *(_WORD *)(a9 + 156) = 0;
  if ((_BYTE)a5)
  {
    if (!*(unsigned char *)(a2 + 24))
    {
LABEL_51:
      std::__throw_bad_optional_access[abi:nn180100]();
LABEL_52:
      abort();
    }
    Nightingale::wristTemperatureInputAcquisition::extractWTmp_removeOutlier_withBuf(a8, *(_DWORD *)(a2 + 20) - *(_DWORD *)a2 + 1, *(_DWORD *)(a2 + 20), a3, (uint64_t)a4, (uint64_t)&v48);
    memset(&v56, 0, sizeof(v56));
    float v16 = std::vector<std::vector<float>>::__init_with_size[abi:nn180100]<std::vector<float>*,std::vector<float>*>(&v56, v48, v49, 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v48) >> 3));
    unint64_t v19 = v51;
    uint64_t v57 = v50;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    size_t v20 = v52 - (unsigned char *)v51;
    if (v52 != v51)
    {
      if (v52 - (unsigned char *)v51 < 0) {
        goto LABEL_52;
      }
      uint64_t v58 = (char *)operator new(v52 - (unsigned char *)v51);
      uint64_t v59 = v58;
      uint64_t v21 = &v58[v20];
      uint64_t v60 = &v58[v20];
      float v16 = memmove(v58, v19, v20);
      uint64_t v59 = v21;
    }
    uint64_t v61 = 0;
    unint64_t v62 = 0;
    uint64_t v63 = 0;
    float v22 = __p;
    uint64_t v23 = v54 - (unsigned char *)__p;
    if (v54 != __p)
    {
      std::vector<Nightingale::PhaseSet>::__vallocate[abi:nn180100](&v61, v23 >> 3);
      uint64_t v24 = v62;
      float v16 = memmove(v62, v22, v23 - 3);
      unint64_t v62 = &v24[v23];
    }
    unint64_t EligibleWTmpCnts = Nightingale::fwEstimatorLuna::getEligibleWTmpCnts((uint64_t)v16, a2, v17, v18, (uint64_t *)&v56);
    int v26 = EligibleWTmpCnts;
    unint64_t v27 = HIDWORD(EligibleWTmpCnts);
    if (v61)
    {
      unint64_t v62 = v61;
      operator delete(v61);
    }
    uint64_t v10 = a7;
    if (v58)
    {
      uint64_t v59 = v58;
      operator delete(v58);
    }
    v55[0] = (void **)&v56;
    std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](v55);
    *(_DWORD *)(a9 + 24) = v26;
    *(unsigned char *)(a9 + 32) = v26 > 0;
    if ((int)v27 >= 1) {
      *(float *)(a9 + 152) = (float)v26 / (float)(int)v27;
    }
    if (__p)
    {
      uint64_t v54 = __p;
      operator delete(__p);
    }
    if (v51)
    {
      uint64_t v52 = v51;
      operator delete(v51);
    }
    v55[0] = (void **)&v48;
    std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](v55);
    BOOL v28 = v26 == 0;
  }
  else
  {
    BOOL v28 = 1;
  }
  if (!*(unsigned char *)(a2 + 24)) {
    goto LABEL_51;
  }
  uint64_t v29 = v10;
  int v30 = *(_DWORD *)(a2 + 20);
  int v31 = *(_DWORD *)a2;
  if (Nightingale::phaseFactorProcessor::vPhasesContainsAPhase(a1, (unsigned __int8 **)(a2 + 72), 0))
  {
    if (BYTE4(v10)) {
      int v32 = 0;
    }
    else {
      int v32 = v28;
    }
    if (v32 == 1) {
      goto LABEL_31;
    }
    if (!BYTE4(v10))
    {
      *(_DWORD *)(a9 + 20) = 4;
      int v32 = 7;
      goto LABEL_32;
    }
  }
  if (v30 - v31 <= 17)
  {
    *(_DWORD *)(a9 + 20) = 4;
    int v32 = 6;
LABEL_32:
    *(_DWORD *)(a9 + 148) = v32;
    return;
  }
  if (v28)
  {
    int v32 = 1;
LABEL_31:
    *(_DWORD *)(a9 + 20) = v32;
    goto LABEL_32;
  }
  if (!BYTE4(v10)) {
    goto LABEL_51;
  }
  uint64_t v33 = *(unsigned __int8 *)(a2 + 36);
  uint64_t v34 = (int)*(float *)(a2 + 32);
  if (!*(unsigned char *)(a2 + 36)) {
    uint64_t v34 = 0;
  }
  LODWORD(v55[0]) = *(_DWORD *)a2;
  HIDWORD(v55[0]) = v10;
  v55[1] = (void **)(v34 | (v33 << 32));
  v55[2] = a4;
  v55[3] = (void **)a5;
  Nightingale::slidingWindowHistLuna::slidingWindowHistLuna((uint64_t)&v48, (uint64_t)v55);
  Nightingale::slidingWindowBaseLuna::process(&v48, a3, a10, (uint64_t)&v43);
  if (!v44)
  {
    int v36 = 0;
LABEL_43:
    __int16 v37 = 0;
    LODWORD(v35) = v43;
    goto LABEL_44;
  }
  uint64_t v35 = Nightingale::run_m_over_n_moving_target(a3, (int)v10 + 1, *(_DWORD *)a2);
  if ((v35 & 0xFF00000000) == 0)
  {
    int v36 = v44;
    goto LABEL_43;
  }
  int v43 = v35;
  int v44 = v36;
  int v47 = 9;
  __int16 v37 = 1;
LABEL_44:
  _DWORD *v14 = v36;
  if ((int)v35 >= 1)
  {
    *(_DWORD *)(a9 + 16) = 1;
    *(_DWORD *)(a9 + 8) = v35;
    *(unsigned char *)(a9 + 12) = 1;
    *(_DWORD *)a9 = v35 - 5;
    *(unsigned char *)(a9 + 4) = 1;
    if (Nightingale::phaseFactorProcessor::suppressFWStEnd(a1, (unsigned int *)a9, v13, a6))
    {
      int v47 = 7;
      *(_DWORD *)(a9 + 20) = 0;
      *(unsigned char *)(a9 + 29) = 1;
    }
    Nightingale::fwEstimatorBase::suppressHistFWOverCycleBoundary(a1, *(_DWORD *)a2, v29, a9);
  }
  if (a10)
  {
    *(void *)(a9 + 36) = v45;
    *(_DWORD *)(a9 + 48) = v46;
    *(_DWORD *)(a9 + 148) = v47;
    *(_WORD *)(a9 + 156) = v37 | 0x100;
  }
  Nightingale::slidingWindowHistLuna::~slidingWindowHistLuna((Nightingale::slidingWindowHistLuna *)&v48);
}

uint64_t Nightingale::fwEstimatorLuna::getEligibleWTmpCnts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (!*(unsigned char *)(a2 + 24)
    || (v5 = *a5, uint64_t v6 = a5[1], *a5 == v6)
    || (uint64_t v7 = *(void *)(v5 + 8), *(void *)v5 == v7)
    || *(void *)(v6 - 24) == *(void *)(v6 - 16))
  {
    unsigned int v28 = 0;
    uint64_t v29 = 0;
    return v29 | v28;
  }
  LODWORD(v8) = 0;
  unint64_t v9 = (unint64_t)(v7 - *(void *)v5) >> 2;
  std::vector<int> __p = 0;
  int v32 = 0;
  uint64_t v33 = 0;
  do
  {
    int MissingCnt = Nightingale::getMissingCnt((float **)v5);
    int v11 = MissingCnt;
    uint64_t v12 = v32;
    if (v32 >= v33)
    {
      unint64_t v14 = __p;
      uint64_t v15 = (v32 - __p) >> 2;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        abort();
      }
      uint64_t v17 = v33 - __p;
      if ((v33 - __p) >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        unint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v33, v18);
        unint64_t v14 = __p;
        uint64_t v12 = v32;
      }
      else
      {
        unint64_t v19 = 0;
      }
      size_t v20 = &v19[4 * v15];
      *(_DWORD *)size_t v20 = v11;
      long long v13 = v20 + 4;
      while (v12 != v14)
      {
        int v21 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v20 - 1) = v21;
        v20 -= 4;
      }
      std::vector<int> __p = v20;
      uint64_t v33 = &v19[4 * v18];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_DWORD *)int v32 = MissingCnt;
      long long v13 = v32 + 4;
    }
    int v32 = v13;
    uint64_t v8 = (v8 + v9 - v11);
    v5 += 24;
  }
  while (v5 != v6);
  if (__p == v13)
  {
    unsigned int v28 = 0;
    if (!__p) {
      goto LABEL_31;
    }
  }
  else
  {
    float v22 = (int *)(__p + 4);
    uint64_t v23 = __p;
    if (__p + 4 != v13)
    {
      int v24 = *(_DWORD *)__p;
      uint64_t v23 = __p;
      float v25 = (int *)(__p + 4);
      do
      {
        int v27 = *v25++;
        int v26 = v27;
        if (v27 < v24)
        {
          int v24 = v26;
          uint64_t v23 = (char *)v22;
        }
        float v22 = v25;
      }
      while (v25 != (int *)v13);
    }
    unsigned int v28 = v9 - *(_DWORD *)v23;
    if (!__p) {
      goto LABEL_31;
    }
  }
  operator delete(__p);
LABEL_31:
  uint64_t v29 = v8 << 32;
  return v29 | v28;
}

unint64_t Nightingale::fwEstimatorLuna::getJDayCycleEnd(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 68))
  {
    float v2 = roundf(*(float *)(a2 + 64));
    if (v2 <= 0.0)
    {
      LOBYTE(v3) = 0;
      unint64_t v5 = 0;
      unsigned int v4 = 0;
    }
    else
    {
      int v3 = (int)(float)((float)(v2 + (float)*(int *)a2) + -1.0);
      unsigned int v4 = v3 & 0xFFFFFF00;
      unint64_t v5 = 0x100000000;
    }
  }
  else
  {
    int v3 = *(_DWORD *)(a2 + 20);
    unsigned int v4 = v3 & 0xFFFFFF00;
    unint64_t v5 = (unint64_t)*(unsigned __int8 *)(a2 + 24) << 32;
  }
  return v5 | v4 | v3;
}

void Nightingale::fwEstimatorLuna::getFwEndLuna(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, int *a7@<X8>)
{
  *((unsigned char *)a7 + 4) = 0;
  *((unsigned char *)a7 + 8) = 0;
  *((unsigned char *)a7 + 12) = 0;
  *((unsigned char *)a7 + 16) = 0;
  *((unsigned char *)a7 + 20) = 0;
  *((unsigned char *)a7 + 24) = 0;
  a7[8] = 8;
  uint64_t v8 = a7 + 8;
  *((_WORD *)a7 + 18) = 0;
  *((unsigned char *)a7 + 38) = 0;
  *((void *)a7 + 5) = -1;
  *((unsigned char *)a7 + 52) = 0;
  *((unsigned char *)a7 + 56) = 0;
  *((void *)a7 + 9) = 0;
  *((void *)a7 + 10) = 0;
  *((void *)a7 + 8) = 0;
  a7[22] = -1;
  *((unsigned char *)a7 + 92) = 0;
  *((unsigned char *)a7 + 96) = 0;
  *a7 = 7;
  uint64_t v9 = a2[1];
  if (*a2 != v9 && *(unsigned char *)(v9 - 60) && *(unsigned char *)(a4 + 36))
  {
    int v13 = *(_DWORD *)(v9 - 96);
    int v14 = (int)(float)((float)(roundf(*(float *)(v9 - 64)) + (float)v13) + -13.0);
    int v50 = v13 + 10;
    uint64_t v15 = a3[1];
    unint64_t v49 = v8;
    int v48 = v13;
    if (*a3 == v15)
    {
      int v17 = -1;
    }
    else
    {
      int v16 = *(_DWORD *)(a4 + 32);
      if (*(_DWORD *)(v15 - 60) != v16 || !*(unsigned char *)(v15 - 4)) {
        --v16;
      }
      if (v13 + 66 >= v16) {
        int v17 = v16;
      }
      else {
        int v17 = v13 + 66;
      }
    }
    int v18 = v14 - 3;
    int v47 = v14;
    int v19 = v14 + 10;
    memset(v74, 0, sizeof(v74));
    memset(v73, 0, sizeof(v73));
    memset(v72, 0, sizeof(v72));
    size_t v20 = operator new(0xCuLL);
    v71[0] = v20;
    v71[2] = v20 + 3;
    memset_pattern16(v20, &unk_22F166ED0, 0xCuLL);
    if (v50 <= v18) {
      int v21 = v18;
    }
    else {
      int v21 = v50;
    }
    int v53 = v21;
    v71[1] = v20 + 3;
    if (v19 >= v17) {
      int v22 = v17;
    }
    else {
      int v22 = v19;
    }
    int v51 = v22;
    __int16 v70 = 0;
    Nightingale::lstmLunaFw::lstmLunaFw((uint64_t)v69, (uint64_t)a3, (uint64_t)a2, a4);
    uint64_t v52 = a3;
    uint64_t v45 = a4;
    Nightingale::rfLuna::rfLuna(v68, a3, a2, a4);
    float v23 = -1.0;
    int v24 = v17;
    if (v50 <= v17)
    {
      uint64_t v25 = 0;
      if (v50 <= v47 + 3) {
        int v26 = v47 + 3;
      }
      else {
        int v26 = v50;
      }
      for (int i = v48 + 9; v24 != i; ++i)
      {
        int v28 = i + 1;
        if ((Nightingale::lstmLunaFw::getOngoingFwLstmLunaAvailibilityFail((Nightingale::lstmLunaFw *)v69, (i + 1), 0.1)|| Nightingale::rfLuna::getRfAvailabilityFail((Nightingale::rfLuna *)v68, i + 1, 0.1, 1))&& v28 >= v26&& v47 + 8 >= v28)
        {
          uint64_t v29 = a2[1];
          LOBYTE(v30) = *(unsigned char *)(v29 - 60);
          if ((_BYTE)v30)
          {
            unsigned int v30 = (int)*(float *)(v29 - 64);
            uint64_t v31 = v30 >> 8;
            uint64_t v32 = 0x100000000;
          }
          else
          {
            uint64_t v32 = 0;
            uint64_t v31 = v25;
          }
          uint64_t v25 = v31;
          v63[0] = *(_DWORD *)(v29 - 96);
          v63[1] = 0;
          uint64_t v64 = v32 | v30 | (v31 << 8);
          unint64_t v65 = a5;
          int v66 = 1;
          int v67 = i + 1;
          Nightingale::slidingWindowDayStreamLuna::slidingWindowDayStreamLuna((uint64_t)v62, (uint64_t)v63);
          Nightingale::slidingWindowBaseLuna::process(v62, v52, a6, (uint64_t)v59);
          if (a6)
          {
            _DWORD *v20 = v61;
            float v23 = *(float *)&v59[3];
            v75[0] = v60;
            std::vector<BOOL>::push_back((uint64_t)v74, v75);
          }
          int v33 = v59[0];
          if (v59[0] > 0)
          {
            *((unsigned char *)a7 + 8) = 1;
            *a7 = 1;
            a7[1] = v33;
            a7[3] = i + 1;
            *((unsigned char *)a7 + 16) = 1;
            a7[5] = v24;
            *((unsigned char *)a7 + 24) = 1;
            Nightingale::slidingWindowDayStreamLuna::~slidingWindowDayStreamLuna((Nightingale::slidingWindowDayStreamLuna *)v62);
            if (!a6) {
              goto LABEL_59;
            }
            goto LABEL_49;
          }
          Nightingale::slidingWindowDayStreamLuna::~slidingWindowDayStreamLuna((Nightingale::slidingWindowDayStreamLuna *)v62);
        }
        else
        {
          _DWORD *v20 = 8;
        }
        if (Nightingale::rfLuna::getOngoingFwRfLuna((Nightingale::rfLuna *)v68, i + 1))
        {
          Nightingale::lstmLunaFw::getOngoingFwLstmLuna((Nightingale::lstmLunaFw *)v69, (i + 1));
          uint64_t v35 = v34;
          uint64_t v37 = v36;
          if (a6)
          {
            FwConfirmationFailureReasouint64_t n = Nightingale::lstmLunaFw::getFwConfirmationFailureReason((Nightingale::lstmLunaFw *)v69);
            v20[1] = 9;
            _OWORD v20[2] = FwConfirmationFailureReason;
            if ((v35 & 0xFF00000000) != 0) {
              goto LABEL_47;
            }
            goto LABEL_41;
          }
          if ((v34 & 0xFF00000000) != 0)
          {
LABEL_47:
            *((unsigned char *)a7 + 8) = BYTE4(v35);
            a7[3] = v37;
            *((unsigned char *)a7 + 16) = BYTE4(v37);
            a7[5] = v24;
            *((unsigned char *)a7 + 24) = 1;
            *a7 = 2;
            a7[1] = v35;
            _OWORD v20[2] = 9;
            break;
          }
        }
        else if (a6)
        {
          v20[1] = Nightingale::rfLuna::getFailureReasonOngoingFwRF((Nightingale::rfLuna *)v68);
          _OWORD v20[2] = 8;
LABEL_41:
          HIBYTE(v70) = !Nightingale::rfLuna::getRfAvailabilityFail((Nightingale::rfLuna *)v68, i + 1, 0.3, 1);
          LOBYTE(v70) = !Nightingale::lstmLunaFw::getOngoingFwLstmLunaAvailibilityFail((Nightingale::lstmLunaFw *)v69, (i + 1), 0.3);
          if (v53 <= v28 && v28 <= v51)
          {
            std::vector<BOOL>::push_back((uint64_t)v73, (unsigned char *)&v70 + 1);
            std::vector<BOOL>::push_back((uint64_t)v72, &v70);
          }
        }
        Nightingale::lstmLuna::reset((uint64_t)v69);
        Nightingale::rfLuna::reset((Nightingale::rfLuna *)v68);
      }
    }
    if (!a6) {
      goto LABEL_59;
    }
LABEL_49:
    std::vector<BOOL>::vector(v58, (uint64_t)v74);
    std::vector<BOOL>::vector(v57, (uint64_t)v73);
    unint64_t v39 = std::vector<BOOL>::vector(__p, (uint64_t)v72);
    Nightingale::fwEstimatorLuna::updateAvailabilityKaliCA((uint64_t)v39, (uint64_t *)v58, (uint64_t *)v57, (uint64_t *)__p, v49);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (v57[0]) {
      operator delete(v57[0]);
    }
    if (v58[0]) {
      operator delete(v58[0]);
    }
    updated = (Nightingale *)Nightingale::fwEstimatorLuna::updateFailureReasonsCA(a1, (uint64_t)v71, v70, v50, v24, v49);
    BOOL v41 = Nightingale::fwEstimatorLuna::updateSignalAtFwEndCA(updated, (Nightingale::lstmLunaFw *)v69, a7, (uint64_t)v49, v23);
    uint64_t KaliDay2DayNoiseAnchoredByToday = Nightingale::fwEstimatorLuna::getKaliDay2DayNoiseAnchoredByToday(v41, v52, v45, a5, v48);
    int v43 = *a7;
    a7[11] = KaliDay2DayNoiseAnchoredByToday;
    a7[12] = v43;
    if (*((unsigned char *)a7 + 16) && *((unsigned char *)a7 + 8))
    {
      a7[13] = a7[3] - a7[1];
      *((unsigned char *)a7 + 56) = 1;
    }
    int JDayLastDayToRunLuna = Nightingale::fwEstimatorLuna::getJDayLastDayToRunLuna(KaliDay2DayNoiseAnchoredByToday, (int *)(v52[1] - 60), v45, v48);
    Nightingale::fwEstimatorLuna::getDaysWristTempInPassNDaysAndDaysPassedEPAvailability(a1, v52, a5, v47, JDayLastDayToRunLuna, v48, (uint64_t)v49);
    a7[23] = JDayLastDayToRunLuna;
    *((unsigned char *)a7 + 96) = 1;
LABEL_59:
    Nightingale::rfLuna::~rfLuna((Nightingale::rfLuna *)v68);
    Nightingale::lstmLunaFw::~lstmLunaFw((Nightingale::lstmLunaFw *)v69);
    operator delete(v20);
    if (v72[0]) {
      operator delete(v72[0]);
    }
    if (v73[0]) {
      operator delete(v73[0]);
    }
    if (v74[0]) {
      operator delete(v74[0]);
    }
  }
}

uint64_t Nightingale::fwEstimatorLuna::getJDayKEd(uint64_t a1, unsigned int a2, void *a3, int a4)
{
  uint64_t v4 = a3[1];
  if (*a3 == v4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = a4 + 66;
  if (*(_DWORD *)(v4 - 60) == a2 && *(unsigned char *)(v4 - 4))
  {
    if ((int)v5 >= (int)a2) {
      return a2;
    }
    else {
      return v5;
    }
  }
  else if ((int)v5 >= (int)(a2 - 1))
  {
    return a2 - 1;
  }
  else
  {
    return v5;
  }
}

BOOL Nightingale::fwEstimatorLuna::jDayWithinEpSearchRange(Nightingale::fwEstimatorLuna *this, int a2, int a3, int a4)
{
  return a4 + 10 <= a2 && a3 + 3 <= a2 && a3 + 8 >= a2;
}

void Nightingale::fwEstimatorLuna::updateAvailabilityKaliCA(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned char *a5)
{
  unint64_t v8 = a2[1];
  if (v8)
  {
    uint64_t v9 = *a2;
    char v14 = 1;
    uint64_t v17 = v9;
    int v18 = 0;
    uint64_t v15 = v9 + 8 * (v8 >> 6);
    int v16 = v8 & 0x3F;
    LOBYTE(v8) = a2[1] <= (unint64_t)(2
                                           * std::__count[abi:nn180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>(&v17, (uint64_t)&v15, &v14));
  }
  a5[4] = v8;
  unint64_t v10 = a3[1];
  if (v10)
  {
    uint64_t v11 = *a3;
    char v14 = 1;
    uint64_t v17 = v11;
    int v18 = 0;
    uint64_t v15 = v11 + 8 * (v10 >> 6);
    int v16 = v10 & 0x3F;
    LOBYTE(v10) = a3[1] <= (unint64_t)(2
                                            * std::__count[abi:nn180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>(&v17, (uint64_t)&v15, &v14));
  }
  a5[5] = v10;
  unint64_t v12 = a4[1];
  if (v12)
  {
    uint64_t v13 = *a4;
    char v14 = 1;
    uint64_t v17 = v13;
    int v18 = 0;
    uint64_t v15 = v13 + 8 * (v12 >> 6);
    int v16 = v12 & 0x3F;
    LOBYTE(v12) = a4[1] <= (unint64_t)(2
                                            * std::__count[abi:nn180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>(&v17, (uint64_t)&v15, &v14));
  }
  a5[6] = v12;
}

uint64_t Nightingale::fwEstimatorLuna::updateFailureReasonsCA(uint64_t a1, uint64_t a2, char a3, int a4, int a5, _DWORD *a6)
{
  uint64_t v6 = *(int **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 <= 8uLL) {
    abort();
  }
  if (v6[2] == 9 || *v6 == 9)
  {
    uint64_t result = 9;
  }
  else
  {
    if (a5 >= a4 && (a3 & 1) == 0) {
      v6[2] = 1;
    }
    uint64_t result = Nightingale::fwEstimatorLuna::combineEpRfLstmFailureReasons(a1, (int **)a2);
  }
  *a6 = result;
  return result;
}

BOOL Nightingale::fwEstimatorLuna::updateSignalAtFwEndCA(Nightingale *a1, Nightingale::lstmLunaFw *this, _DWORD *a3, uint64_t a4, float SignalShift)
{
  if (*a3 != 1)
  {
    if (*a3 != 2)
    {
      BOOL result = Nightingale::check2Real_t_equal(a1, -1.0, -1.0);
      int v8 = (int)(result << 31) >> 31;
      goto LABEL_12;
    }
    SignalShift = Nightingale::lstmLunaFw::getSignalShift(this);
  }
  BOOL result = Nightingale::check2Real_t_equal(a1, SignalShift, -1.0);
  if (result)
  {
    int v8 = -1;
  }
  else if (SignalShift >= 0.1)
  {
    if (SignalShift >= 0.8) {
      int v8 = 15;
    }
    else {
      int v8 = (int)(float)((float)((float)(SignalShift + -0.1) / 0.05) + 1.0);
    }
  }
  else
  {
    int v8 = 0;
  }
LABEL_12:
  *(_DWORD *)(a4 + 8) = v8;
  return result;
}

uint64_t Nightingale::fwEstimatorLuna::getKaliDay2DayNoiseAnchoredByToday(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, int a5)
{
  if (!*(unsigned char *)(a3 + 36)) {
    return 0xFFFFFFFFLL;
  }
  Nightingale::wristTemperatureInputProcess::wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)&v38);
  Nightingale::wristTemperatureInputAcquisition::wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v37);
  Nightingale::wristTemperatureInputValidation::wristTemperatureInputValidation((Nightingale::wristTemperatureInputValidation *)&v36);
  if (*(unsigned char *)(a3 + 36))
  {
    int v9 = *(_DWORD *)(a3 + 32);
    uint64_t v10 = a2[1];
    if (v10 != *a2) {
      int v9 = *(char *)(v10 - 4) + v9 - 1;
    }
    Nightingale::wristTemperatureInputAcquisition::extractWTmp_removeOutlier_withBuf_fromCycleOffset(v37, 20, v9, a5 - 43, a2, a4, (uint64_t)&v30);
    if (v30 == v31) {
      goto LABEL_33;
    }
    uint64_t v11 = *v30;
    unint64_t v12 = v30[1];
    if (*v30 == v12)
    {
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = 0;
      char v14 = *v30;
      do
      {
        float v15 = *v14++;
        if (v15 == -1.0) {
          ++v13;
        }
      }
      while (v14 != v12);
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
    if (v17 < 2)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = 0;
      for (uint64_t i = 1; i != v17; ++i)
      {
        size_t v20 = &v30[3 * i];
        int v21 = *v20;
        int v22 = v20[1];
        if (v21 == v22)
        {
          uint64_t v23 = 0;
        }
        else
        {
          uint64_t v23 = 0;
          do
          {
            float v24 = *v21++;
            if (v24 == -1.0) {
              ++v23;
            }
          }
          while (v21 != v22);
        }
        BOOL v25 = v13 <= v23;
        if (v13 >= v23) {
          uint64_t v13 = v23;
        }
        if (!v25) {
          uint64_t v18 = i;
        }
      }
      int v26 = &v30[3 * v18];
      uint64_t v11 = *v26;
      unint64_t v12 = v26[1];
    }
    if (v12 == v11)
    {
LABEL_33:
      uint64_t v16 = 0xFFFFFFFFLL;
    }
    else
    {
      float v27 = sqrtf(COERCE_FLOAT(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::computeDay2DayNoise((uint64_t **)&v30[3 * v18])));
      if (v27 >= 0.35) {
        uint64_t v16 = 7;
      }
      else {
        uint64_t v16 = (int)(float)(v27 / 0.05);
      }
    }
    if (__p)
    {
      uint64_t v35 = __p;
      operator delete(__p);
    }
    if (v32)
    {
      int v33 = v32;
      operator delete(v32);
    }
    unint64_t v39 = &v30;
    std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v39);
    Nightingale::wristTemperatureInputValidation::~wristTemperatureInputValidation((Nightingale::wristTemperatureInputValidation *)&v36);
    Nightingale::wristTemperatureInputAcquisition::~wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v37);
    Nightingale::wristTemperatureInputProcess::~wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)&v38);
    return v16;
  }
  uint64_t v29 = std::__throw_bad_optional_access[abi:nn180100]();
  return Nightingale::fwEstimatorLuna::getJDayLastDayToRunLuna(v29);
}

uint64_t Nightingale::fwEstimatorLuna::getJDayLastDayToRunLuna(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a3 + 36)) {
    int v4 = *(_DWORD *)(a3 + 32);
  }
  else {
    int v4 = *a2;
  }
  if (*((unsigned char *)a2 + 56)) {
    int v5 = v4;
  }
  else {
    int v5 = v4 - 1;
  }
  if (*a2 == v4) {
    signed int v6 = v5;
  }
  else {
    signed int v6 = v4 - 1;
  }
  if (v6 < a4 && *(unsigned char *)(a3 + 36) == 0)
  {
    uint64_t v9 = std::__throw_bad_optional_access[abi:nn180100]();
    return Nightingale::fwEstimatorLuna::getDaysWristTempInPassNDaysAndDaysPassedEPAvailability(v9);
  }
  else if (v6 < a4)
  {
    return *(unsigned int *)(a3 + 32);
  }
  else
  {
    return v6;
  }
}

void Nightingale::fwEstimatorLuna::getDaysWristTempInPassNDaysAndDaysPassedEPAvailability(uint64_t a1, void *a2, unint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  Nightingale::wristTemperatureInputAcquisition::wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v34);
  Nightingale::wristTemperatureInputAcquisition::extractWTmp_removeOutlier_withBuf_fromCycleOffset(v34, 45, a5, a6 - 43, a2, a3, (uint64_t)v29);
  NumWristTempAvailRegardlessOf1stTemp = (char *)operator new(0xCuLL);
  char v14 = NumWristTempAvailRegardlessOf1stTemp;
  uint64_t v15 = 0;
  *(void *)NumWristTempAvailRegardlessOf1stTemp = 0x130000000CLL;
  *((_DWORD *)NumWristTempAvailRegardlessOf1stTemp + 2) = 45;
  do
  {
    NumWristTempAvailRegardlessOf1stTemp = (char *)Nightingale::fwEstimatorLuna::getNumWristTempAvailRegardlessOf1stTemp((uint64_t)NumWristTempAvailRegardlessOf1stTemp, v29, *(_DWORD *)&v14[4 * v15], *(_DWORD *)&v14[4 * v15]);
    int v16 = (int)NumWristTempAvailRegardlessOf1stTemp;
    uint64_t v18 = *(char **)(a7 + 40);
    unint64_t v17 = *(void *)(a7 + 48);
    if ((unint64_t)v18 >= v17)
    {
      NumWristTempAvailRegardlessOf1stTemp = *(char **)(a7 + 32);
      uint64_t v20 = (v18 - NumWristTempAvailRegardlessOf1stTemp) >> 2;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        abort();
      }
      uint64_t v22 = v17 - (void)NumWristTempAvailRegardlessOf1stTemp;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        float v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a7 + 48, v23);
        NumWristTempAvailRegardlessOf1stTemp = *(char **)(a7 + 32);
        uint64_t v18 = *(char **)(a7 + 40);
      }
      else
      {
        float v24 = 0;
      }
      BOOL v25 = &v24[4 * v20];
      *(_DWORD *)BOOL v25 = v16;
      int v19 = v25 + 4;
      while (v18 != NumWristTempAvailRegardlessOf1stTemp)
      {
        int v26 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      *(void *)(a7 + 32) = v25;
      *(void *)(a7 + 40) = v19;
      *(void *)(a7 + 48) = &v24[4 * v23];
      if (NumWristTempAvailRegardlessOf1stTemp) {
        operator delete(NumWristTempAvailRegardlessOf1stTemp);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v18 = NumWristTempAvailRegardlessOf1stTemp;
      int v19 = v18 + 4;
    }
    *(void *)(a7 + 40) = v19;
    ++v15;
  }
  while (v15 != 3);
  if (a5 - a4 == 8)
  {
    int v27 = 0;
    for (int i = 12; i != 18; ++i)
    {
      NumWristTempAvailRegardlessOf1stTemp = (char *)Nightingale::fwEstimatorLuna::getNumWristTempAvailRegardlessOf1stTemp((uint64_t)NumWristTempAvailRegardlessOf1stTemp, v29, i, 12);
      if ((int)NumWristTempAvailRegardlessOf1stTemp > 8) {
        ++v27;
      }
    }
    *(_DWORD *)(a7 + 56) = v27;
  }
  operator delete(v14);
  if (__p)
  {
    int v33 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
  uint64_t v35 = v29;
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v35);
  Nightingale::wristTemperatureInputAcquisition::~wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v34);
}

uint64_t Nightingale::fwEstimatorLuna::combineEpRfLstmFailureReasons(uint64_t a1, int **a2)
{
  float v2 = *(unsigned int **)(a1 + 24);
  int v3 = *(unsigned int **)(a1 + 32);
  if (v2 == v3) {
    return 8;
  }
  int v4 = a2[1];
  while (1)
  {
    if (*a2 != v4)
    {
      uint64_t v5 = 0;
      uint64_t result = *v2;
      uint64_t v7 = *a2;
      do
      {
        int v8 = *v7++;
        if (v8 == result) {
          ++v5;
        }
      }
      while (v7 != v4);
      if (v5) {
        break;
      }
    }
    if (++v2 == v3) {
      return 8;
    }
  }
  return result;
}

uint64_t Nightingale::fwEstimatorLuna::getCASignalAtFwEndEstimate(Nightingale::fwEstimatorLuna *this, float a2)
{
  if (Nightingale::check2Real_t_equal(this, a2, -1.0)) {
    return 0xFFFFFFFFLL;
  }
  if (a2 < 0.1) {
    return 0;
  }
  if (a2 >= 0.8) {
    return 15;
  }
  return (int)(float)((float)((float)(a2 + -0.1) / 0.05) + 1.0);
}

uint64_t Nightingale::fwEstimatorLuna::getCABoundedDay2DayNoise(Nightingale::fwEstimatorLuna *this, float a2)
{
  if (a2 < 0.0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 >= 0.35) {
    return 7;
  }
  return (int)(float)(a2 / 0.05);
}

void Nightingale::fwEstimatorLuna::updateAFwCycleFactorCAItems(float *a1, uint64_t a2, unsigned int *a3, uint64_t *a4, int a5, void *a6)
{
  if (a5)
  {
    if (!*((unsigned char *)a3 + 24)) {
      goto LABEL_46;
    }
    *(float *)(a2 + 52) = Nightingale::phaseFactorProcessor::getjDayStartOfAPhasetojDayRangeStart((uint64_t)a1, *a3 | ((unint64_t)a3[5] << 32), a4, 0);
    *(unsigned char *)(a2 + 56) = 1;
    if (!*((unsigned char *)a3 + 24)) {
      goto LABEL_46;
    }
    *(float *)(a2 + 60) = Nightingale::phaseFactorProcessor::getjDayEndOfAPhasetojDayRangeEnd((uint64_t)a1, *a3 | ((unint64_t)(a3[5] + 1) << 32), a4, 0);
    *(unsigned char *)(a2 + 64) = 1;
    uint64_t v11 = operator new(6uLL);
    uint64_t v35 = v11 + 3;
    char v36 = (char *)(v11 + 3);
    *(_DWORD *)uint64_t v11 = 34014725;
    _OWORD v11[2] = 1027;
    uint64_t v34 = v11;
    if (!*((unsigned char *)a3 + 24)) {
      goto LABEL_46;
    }
    Nightingale::phaseFactorProcessor::getjDayStartOfVPhasestojDayRangeStart(a1, *a3 | ((unint64_t)(a3[5] + 1) << 32), a4, (uint64_t *)&v34, (float **)&__p);
    std::optional<std::vector<float>>::operator=[abi:nn180100]<std::vector<float>,void>(a2 + 72, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (!*((unsigned char *)a3 + 24)) {
      goto LABEL_46;
    }
    Nightingale::phaseFactorProcessor::getjDayEndOfVPhasestojDayRangeEnd(a1, *a3 | ((unint64_t)(a3[5] + 1) << 32), a4, (uint64_t *)&v34, (float **)&__p);
    std::optional<std::vector<float>>::operator=[abi:nn180100]<std::vector<float>,void>(a2 + 104, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (!*(unsigned char *)(a2 + 12) || *(_DWORD *)(a2 + 16) > 1u) {
      goto LABEL_43;
    }
    BOOL v12 = Nightingale::phaseFactorProcessor::vPhasesContainsAPhase((uint64_t)a1, (unsigned __int8 **)a3 + 9, 0);
    int v13 = *((unsigned __int8 *)a3 + 24);
    if (!v12)
    {
      if (!*((unsigned char *)a3 + 24) || !*(unsigned char *)(a2 + 12)) {
        goto LABEL_46;
      }
      *(float *)(a2 + 144) = (float)(int)(a3[5] - *(_DWORD *)(a2 + 8) + 1);
    }
    if (!v13 || *(_DWORD *)(a2 + 16)) {
      goto LABEL_43;
    }
    if (*(unsigned char *)(a2 + 12))
    {
      int v14 = *(_DWORD *)(a2 + 8);
      int v15 = *a3;
      int v16 = a3[5] + 1;
      if (v16 - v14 >= 5) {
        int v17 = 5;
      }
      else {
        int v17 = v16 - v14;
      }
      if ((int)(v14 - *a3) >= 6) {
        int v18 = 6;
      }
      else {
        int v18 = v14 - *a3;
      }
      if ((v17 & 0x80000000) == 0 && v18 >= -1)
      {
        int v19 = v18 + 1;
        int v20 = v17 + v14;
        Nightingale::preprocess_temperature_inputs_for_hist_cycle(a6, v15, v16, (uint64_t)&__p);
        unint64_t v21 = operator new(4uLL);
        float v24 = v21;
        *unint64_t v21 = v20;
        BOOL v25 = v21 + 1;
        int v26 = v21 + 1;
        Nightingale::prepare_temperature_input_slice_for_kdays(&v24, v17 + v19, &__p, v27);
        if (v27[1] != v27[0])
        {
          std::vector<int>::vector(&v30, (const std::vector<int> *)v27[0]);
          if (v28)
          {
            uint64_t v29 = v28;
            operator delete(v28);
          }
          v23[0] = v27;
          std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)v23);
          if (v24)
          {
            BOOL v25 = v24;
            operator delete(v24);
          }
          if (v19 >= (int)((unint64_t)((char *)v30.__end_ - (char *)v30.__begin_) >> 2)) {
            int v22 = (unint64_t)((char *)v30.__end_ - (char *)v30.__begin_) >> 2;
          }
          else {
            int v22 = v19;
          }
          std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)v27, v30.__begin_, &v30.__begin_[v22]);
          std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)v23, &v30.__begin_[v22], (unsigned char *)v30.__end_);
          *(float *)(a2 + 44) = Nightingale::get_sw_difference((float **)v27, (float **)v23);
          if (v23[0])
          {
            v23[1] = v23[0];
            operator delete(v23[0]);
          }
          if (v27[0])
          {
            v27[1] = v27[0];
            operator delete(v27[0]);
          }
          if (v30.__begin_)
          {
            v30.__end_ = v30.__begin_;
            operator delete(v30.__begin_);
          }
          std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::~__hash_table((uint64_t)&v33);
          std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::~__hash_table((uint64_t)&v32);
          if (__p.n128_u64[0])
          {
            __p.n128_u64[1] = __p.n128_u64[0];
            operator delete((void *)__p.n128_u64[0]);
          }
          goto LABEL_43;
        }
LABEL_47:
        abort();
      }
LABEL_43:
      if (v34)
      {
        uint64_t v35 = v34;
        operator delete(v34);
      }
      return;
    }
LABEL_46:
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_47;
  }
}

uint64_t std::optional<std::vector<float>>::operator=[abi:nn180100]<std::vector<float>,void>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    std::vector<float>::__move_assign(a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t Nightingale::fwEstimatorLuna::getNumWristTempAvailRegardlessOf1stTemp(uint64_t a1, const std::vector<int> **a2, int a3, int a4)
{
  __n128 __p = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  int v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5) {
    return 0;
  }
  int v7 = a3 - a4;
  uint64_t v8 = 4 * a4 - 4 * a3;
  do
  {
    std::vector<int>::vector(&v34, v4);
    std::vector<int>::pointer begin = v34.__begin_;
    unint64_t v10 = (unint64_t)((char *)v34.__end_ - (char *)v34.__begin_) >> 2;
    if ((int)v10 >= a3) {
      LODWORD(v10) = a3;
    }
    if (v7 <= (int)v10)
    {
      int v11 = 0;
      if (v7 != v10)
      {
        BOOL v12 = (float *)&v34.__end_[-(int)v10];
        uint64_t v13 = v8 + 4 * (int)v10;
        do
        {
          float v14 = *v12++;
          if (v14 > 0.0) {
            ++v11;
          }
          v13 -= 4;
        }
        while (v13);
      }
      int v15 = v36;
      if (v36 >= v37)
      {
        int v17 = (char *)__p;
        uint64_t v18 = (v36 - (unsigned char *)__p) >> 2;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          abort();
        }
        uint64_t v20 = v37 - (unsigned char *)__p;
        if ((v37 - (unsigned char *)__p) >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          int v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v37, v21);
          int v17 = (char *)__p;
          int v15 = v36;
        }
        else
        {
          int v22 = 0;
        }
        unint64_t v23 = &v22[4 * v18];
        *(_DWORD *)unint64_t v23 = v11;
        int v16 = v23 + 4;
        while (v15 != v17)
        {
          int v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        __n128 __p = v23;
        char v36 = v16;
        uint64_t v37 = &v22[4 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_DWORD *)char v36 = v11;
        int v16 = v15 + 4;
      }
      char v36 = v16;
      std::vector<int>::pointer begin = v34.__begin_;
    }
    if (begin)
    {
      v34.__end_ = begin;
      operator delete(begin);
    }
    ++v4;
  }
  while (v4 != v5);
  if (__p == v36)
  {
    uint64_t v32 = 0;
    if (!__p) {
      return v32;
    }
LABEL_43:
    char v36 = (char *)__p;
    operator delete(__p);
    return v32;
  }
  BOOL v25 = (char *)__p + 4;
  int v26 = (unsigned int *)__p;
  if ((char *)__p + 4 != v36)
  {
    int v27 = *(_DWORD *)__p;
    int v26 = (unsigned int *)__p;
    int v28 = (char *)__p + 4;
    do
    {
      int v30 = *(_DWORD *)v28;
      v28 += 4;
      int v29 = v30;
      BOOL v31 = v27 < v30;
      if (v27 <= v30) {
        int v27 = v29;
      }
      if (v31) {
        int v26 = (unsigned int *)v25;
      }
      BOOL v25 = v28;
    }
    while (v28 != v36);
  }
  uint64_t v32 = *v26;
  if (__p) {
    goto LABEL_43;
  }
  return v32;
}

uint64_t Nightingale::fwEstimatorLuna::getDaysPassedEPAvailability(uint64_t NumWristTempAvailRegardlessOf1stTemp, const std::vector<int> **a2, int a3)
{
  if (a3 < 1) {
    return 0;
  }
  int v5 = 0;
  int v6 = 0;
  LODWORD(v7) = 0;
  do
  {
    NumWristTempAvailRegardlessOf1stTemp = Nightingale::fwEstimatorLuna::getNumWristTempAvailRegardlessOf1stTemp(NumWristTempAvailRegardlessOf1stTemp, a2, v5 + 12, 12);
    if ((int)NumWristTempAvailRegardlessOf1stTemp <= 8) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = (v7 + 1);
    }
    int v5 = (char)++v6;
  }
  while ((char)v6 < a3);
  return v7;
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  int v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  float v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    float v2 = __p;
    do
    {
      int v3 = (void *)*v2;
      int v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      float v2 = v3;
    }
    while (v3);
  }
}

void Nightingale::preprocess_temperature_inputs_for_hist_cycle(void *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5 = a2 - 43;
  Nightingale::extract_and_validate_temperature_data(a1, a3, (uint64_t)&__p);
  Nightingale::truncate_temperature_data(&__p, v5, (uint64_t)&v6);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  std::vector<int> __p = v6;
  memset(&v6, 0, sizeof(v6));
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__move_assign((uint64_t)v10, v7);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__move_assign((uint64_t)v11, v8);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::~__hash_table((uint64_t)v8);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::~__hash_table((uint64_t)v7);
  if (v6.__begin_)
  {
    v6.__end_ = v6.__begin_;
    operator delete(v6.__begin_);
  }
  Nightingale::preprocess_all_temperature_data((uint64_t)&__p, a4);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::~__hash_table((uint64_t)v11);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::~__hash_table((uint64_t)v10);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void Nightingale::extract_and_validate_temperature_data(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 56) = 1065353216;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  std::vector<int> __p = 0;
  __int16 v140 = 0;
  int v141 = 0;
  int v136 = 0;
  int v137 = 0;
  char v138 = 0;
  long long v133 = 0u;
  long long v134 = 0u;
  int v135 = 1065353216;
  int v129 = a2;
  if ((int)(-286331153 * ((uint64_t)(a1[1] - *a1) >> 2)) < 1)
  {
    BOOL v41 = 0;
    uint64_t v42 = 0;
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    int v5 = 0;
    std::vector<int> v6 = 0;
    uint64_t v7 = -286331153 * ((uint64_t)(a1[1] - *a1) >> 2);
    do
    {
      uint64_t v8 = *a1 + 60 * (v7 - 1);
      if (*(unsigned char *)(v8 + 56))
      {
        uint64_t v9 = v8 + 48;
        char v142 = 0;
        if (!*(unsigned char *)(v8 + 56)) {
          goto LABEL_194;
        }
        char v142 = *(unsigned char *)v9;
        unint64_t v10 = v140;
        if (v140 >= v141)
        {
          BOOL v12 = (char *)__p;
          uint64_t v13 = (v140 - (unsigned char *)__p) >> 2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62) {
            goto LABEL_193;
          }
          uint64_t v15 = v141 - (unsigned char *)__p;
          if ((v141 - (unsigned char *)__p) >> 1 > v14) {
            unint64_t v14 = v15 >> 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            int v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v141, v16);
            BOOL v12 = (char *)__p;
            unint64_t v10 = v140;
          }
          else
          {
            int v17 = 0;
          }
          uint64_t v18 = &v17[4 * v13];
          *(_DWORD *)uint64_t v18 = *(_DWORD *)v8;
          int v11 = v18 + 4;
          while (v10 != v12)
          {
            int v19 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          std::vector<int> __p = v18;
          __int16 v140 = v11;
          int v141 = &v17[4 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(_DWORD *)__int16 v140 = *(_DWORD *)v8;
          int v11 = v10 + 4;
        }
        __int16 v140 = v11;
        if (!*(unsigned char *)(v9 + 8))
        {
LABEL_194:
          char v124 = (std::vector<int> *)std::__throw_bad_optional_access[abi:nn180100]();
          Nightingale::truncate_temperature_data(v124);
          return;
        }
        uint64_t v20 = v137;
        if (v137 >= v138)
        {
          int v22 = (char *)v136;
          uint64_t v23 = (v137 - (unsigned char *)v136) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            goto LABEL_193;
          }
          uint64_t v25 = v138 - (unsigned char *)v136;
          if ((v138 - (unsigned char *)v136) >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            int v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v138, v26);
            int v22 = (char *)v136;
            uint64_t v20 = v137;
          }
          else
          {
            int v27 = 0;
          }
          int v28 = &v27[4 * v23];
          *(_DWORD *)int v28 = *(_DWORD *)(v9 + 4);
          unint64_t v21 = v28 + 4;
          while (v20 != v22)
          {
            int v29 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          int v136 = v28;
          int v137 = v21;
          char v138 = &v27[4 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_DWORD *)int v137 = *(_DWORD *)(v9 + 4);
          unint64_t v21 = v20 + 4;
        }
        int v137 = v21;
        if (v5 >= v6)
        {
          BOOL v31 = &v5[-v4];
          uint64_t v32 = (uint64_t)&v5[-v4 + 1];
          if (v32 < 0) {
LABEL_193:
          }
            abort();
          if (2 * (uint64_t)&v6[-v4] > (unint64_t)v32) {
            uint64_t v32 = 2 * (void)&v6[-v4];
          }
          if ((unint64_t)&v6[-v4] >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v33 = v32;
          }
          if (v33) {
            std::vector<int> v34 = (char *)operator new(v33);
          }
          else {
            std::vector<int> v34 = 0;
          }
          uint64_t v35 = &v31[(void)v34];
          char v36 = &v31[(void)v34];
          *char v36 = v142;
          int v30 = v36 + 1;
          if (v5 != (char *)v4)
          {
            uint64_t v37 = &v5[~v4];
            do
            {
              char v38 = *--v5;
              (v37--)[(void)v34] = v38;
            }
            while (v5 != (char *)v4);
            uint64_t v35 = v34;
          }
          std::vector<int> v6 = &v34[v33];
          if (v4) {
            operator delete((void *)v4);
          }
          unint64_t v4 = (unint64_t)v35;
        }
        else
        {
          char *v5 = v142;
          int v30 = v5 + 1;
        }
        if (!std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::find<unsigned char>(&v133, (unsigned __int8 *)&v142))
        {
          __src = &v142;
          unint64_t v39 = (char *)std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)&v133, (unsigned __int8 *)&v142, (uint64_t)&std::piecewise_construct, (unsigned char **)&__src);
          std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(v39 + 24, 0, 0, 0);
        }
        int v5 = v30;
      }
    }
    while (v7-- > 1);
    BOOL v41 = (char *)__p;
    uint64_t v42 = v140;
    a2 = v129;
  }
  uint64_t v43 = (v42 - v41) >> 2;
  __src = 0;
  uint64_t v131 = 0;
  unint64_t v132 = 0;
  if (v43)
  {
    int v44 = *(_DWORD *)&v41[4 * v43 - 4];
    int v45 = a2 - v44;
    int v128 = v43;
    if (a2 >= v44)
    {
      int v46 = -1;
      do
      {
        int v47 = *(_DWORD *)v41;
        v41 += 4;
        ++v46;
      }
      while (v47 > a2);
    }
    else
    {
      int v46 = 0;
    }
    int v126 = a2 - v44;
    if ((v45 & 0x80000000) == 0)
    {
      int v48 = 0;
      int v127 = v45 + 1;
      while (1)
      {
        int v49 = v129 - v48;
        if (v46 >= v128) {
          break;
        }
        int v51 = v131;
        unint64_t v50 = v132;
        if (v49 != *((_DWORD *)__p + v46)) {
          goto LABEL_75;
        }
        if ((unint64_t)v131 >= v132)
        {
          uint64_t v77 = __src;
          uint64_t v78 = ((char *)v131 - (unsigned char *)__src) >> 2;
          unint64_t v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 62) {
            goto LABEL_193;
          }
          uint64_t v80 = v132 - (void)__src;
          if ((uint64_t)(v132 - (void)__src) >> 1 > v79) {
            unint64_t v79 = v80 >> 1;
          }
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v79;
          }
          if (v81)
          {
            float v82 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v132, v81);
            uint64_t v77 = __src;
            int v51 = v131;
          }
          else
          {
            float v82 = 0;
          }
          unint64_t v83 = &v82[4 * v78];
          *(_DWORD *)unint64_t v83 = v49;
          uint64_t v52 = v83 + 4;
          while (v51 != v77)
          {
            int v84 = *--v51;
            *((_DWORD *)v83 - 1) = v84;
            v83 -= 4;
          }
          __src = v83;
          uint64_t v131 = v52;
          unint64_t v132 = (unint64_t)&v82[4 * v81];
          if (v77) {
            operator delete(v77);
          }
        }
        else
        {
          *uint64_t v131 = v49;
          uint64_t v52 = v51 + 1;
        }
        uint64_t v131 = v52;
        uint64_t v85 = (uint64_t *)v134;
        if ((void)v134)
        {
          int v86 = *(unsigned __int8 *)(v4 + v46);
          if (*((float *)v136 + v46) <= 0.0) {
            float v87 = NAN;
          }
          else {
            float v87 = *((float *)v136 + v46);
          }
          do
          {
            uint64_t v88 = (unsigned __int8 *)(v85 + 2);
            if (*((unsigned __int8 *)v85 + 16) == v86)
            {
              v143[0] = v85 + 2;
              unint64_t v89 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)&v133, v88, (uint64_t)&std::piecewise_construct, v143);
              long long v90 = v89;
              uint64_t v91 = (float *)v89[4];
              uint64_t v92 = (uint64_t)(v89 + 5);
              unint64_t v93 = v89[5];
              if ((unint64_t)v91 >= v93)
              {
                unint64_t v100 = (float *)v89[3];
                uint64_t v101 = v91 - v100;
                unint64_t v102 = v101 + 1;
                if ((unint64_t)(v101 + 1) >> 62) {
                  goto LABEL_193;
                }
                uint64_t v103 = v93 - (void)v100;
                if (v103 >> 1 > v102) {
                  unint64_t v102 = v103 >> 1;
                }
                if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v104 = v102;
                }
                if (v104)
                {
                  uint64_t v105 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v92, v104);
                  unint64_t v100 = (float *)v90[3];
                  uint64_t v91 = (float *)v90[4];
                }
                else
                {
                  uint64_t v105 = 0;
                }
                char v109 = (float *)&v105[4 * v101];
                *char v109 = v87;
                unint64_t v99 = v109 + 1;
                while (v91 != v100)
                {
                  int v110 = *((_DWORD *)v91-- - 1);
                  *((_DWORD *)v109-- - 1) = v110;
                }
LABEL_158:
                v90[3] = v109;
                v90[4] = v99;
                v90[5] = &v105[4 * v104];
                if (v100) {
                  operator delete(v100);
                }
                goto LABEL_160;
              }
              *uint64_t v91 = v87;
              uint64_t v94 = v91 + 1;
            }
            else
            {
              v143[0] = v85 + 2;
              unint64_t v95 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)&v133, v88, (uint64_t)&std::piecewise_construct, v143);
              long long v90 = v95;
              int v96 = (char *)v95[4];
              uint64_t v97 = (uint64_t)(v95 + 5);
              unint64_t v98 = v95[5];
              if ((unint64_t)v96 >= v98)
              {
                unint64_t v100 = (float *)v95[3];
                uint64_t v106 = (v96 - (char *)v100) >> 2;
                unint64_t v107 = v106 + 1;
                if ((unint64_t)(v106 + 1) >> 62) {
                  goto LABEL_193;
                }
                uint64_t v108 = v98 - (void)v100;
                if (v108 >> 1 > v107) {
                  unint64_t v107 = v108 >> 1;
                }
                if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v104 = v107;
                }
                if (v104)
                {
                  uint64_t v105 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v97, v104);
                  unint64_t v100 = (float *)v90[3];
                  int v96 = (char *)v90[4];
                }
                else
                {
                  uint64_t v105 = 0;
                }
                char v109 = (float *)&v105[4 * v106];
                *char v109 = NAN;
                unint64_t v99 = v109 + 1;
                while (v96 != (char *)v100)
                {
                  int v111 = *((_DWORD *)v96 - 1);
                  v96 -= 4;
                  *((_DWORD *)v109-- - 1) = v111;
                }
                goto LABEL_158;
              }
              *(_DWORD *)int v96 = 2143289344;
              uint64_t v94 = (float *)(v96 + 4);
            }
            unint64_t v99 = v94;
LABEL_160:
            v90[4] = v99;
            uint64_t v85 = (uint64_t *)*v85;
          }
          while (v85);
        }
        ++v46;
LABEL_162:
        if (++v48 == v127) {
          goto LABEL_163;
        }
      }
      int v51 = v131;
      unint64_t v50 = v132;
LABEL_75:
      if ((unint64_t)v51 >= v50)
      {
        uint64_t v54 = __src;
        uint64_t v55 = ((char *)v51 - (unsigned char *)__src) >> 2;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62) {
          goto LABEL_193;
        }
        uint64_t v57 = v50 - (void)__src;
        if (v57 >> 1 > v56) {
          unint64_t v56 = v57 >> 1;
        }
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v56;
        }
        if (v58)
        {
          uint64_t v59 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v132, v58);
          uint64_t v54 = __src;
          int v51 = v131;
        }
        else
        {
          uint64_t v59 = 0;
        }
        char v60 = &v59[4 * v55];
        *(_DWORD *)char v60 = v49;
        int v53 = v60 + 4;
        while (v51 != v54)
        {
          int v61 = *--v51;
          *((_DWORD *)v60 - 1) = v61;
          v60 -= 4;
        }
        __src = v60;
        uint64_t v131 = v53;
        unint64_t v132 = (unint64_t)&v59[4 * v58];
        if (v54) {
          operator delete(v54);
        }
      }
      else
      {
        *int v51 = v49;
        int v53 = v51 + 1;
      }
      uint64_t v131 = v53;
      for (int i = (unsigned __int8 *)v134; i; int i = *(unsigned __int8 **)i)
      {
        v143[0] = i + 16;
        uint64_t v63 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)&v133, i + 16, (uint64_t)&std::piecewise_construct, v143);
        uint64_t v64 = v63;
        unint64_t v65 = (char *)v63[4];
        uint64_t v66 = (uint64_t)(v63 + 5);
        unint64_t v67 = v63[5];
        if ((unint64_t)v65 >= v67)
        {
          uint64_t v69 = (char *)v63[3];
          uint64_t v70 = (v65 - v69) >> 2;
          unint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 62) {
            goto LABEL_193;
          }
          uint64_t v72 = v67 - (void)v69;
          if (v72 >> 1 > v71) {
            unint64_t v71 = v72 >> 1;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v71;
          }
          if (v73)
          {
            long long v74 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v66, v73);
            uint64_t v69 = (char *)v64[3];
            unint64_t v65 = (char *)v64[4];
          }
          else
          {
            long long v74 = 0;
          }
          long long v75 = &v74[4 * v70];
          *(_DWORD *)long long v75 = 2143289344;
          uint64_t v68 = v75 + 4;
          while (v65 != v69)
          {
            int v76 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          v64[3] = v75;
          v64[4] = v68;
          v64[5] = &v74[4 * v73];
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v65 = 2143289344;
          uint64_t v68 = v65 + 4;
        }
        v64[4] = v68;
      }
      goto LABEL_162;
    }
LABEL_163:
    long long v112 = (unsigned __int8 *)v134;
    if ((void)v134)
    {
      int v113 = v126 + 1;
      do
      {
        v143[0] = v112 + 16;
        uint64_t v114 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)&v133, v112 + 16, (uint64_t)&std::piecewise_construct, v143);
        uint64_t v115 = v114[3];
        unint64_t v116 = v114[4] - v115;
        unint64_t v117 = v116 >> 2;
        if ((int)(v116 >> 2) < 1)
        {
          int v118 = 0;
        }
        else
        {
          int v118 = 0;
          unsigned int v119 = (v116 >> 2) - 1;
          while ((*(_DWORD *)(v115 + 4 * v119) & 0x7FFFFFFFu) >= 0x7F800000)
          {
            ++v118;
            --v119;
            if (v117 == v118)
            {
              int v118 = v117;
              break;
            }
          }
        }
        if (v118 < v113) {
          int v113 = v118;
        }
        long long v112 = *(unsigned __int8 **)v112;
      }
      while (v112);
      if (v113 >= 1 && v113 <= v126)
      {
        for (int j = 0; j != v113; ++j)
        {
          --v131;
          for (uint64_t k = (unsigned __int8 *)v134; k; uint64_t k = *(unsigned __int8 **)k)
          {
            v143[0] = k + 16;
            char v122 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)&v133, k + 16, (uint64_t)&std::piecewise_construct, v143);
            v122[4] -= 4;
          }
        }
      }
    }
    if ((long long *)(a3 + 24) != &v133)
    {
      *(_DWORD *)(a3 + 56) = v135;
      std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<float>>,void *> *>>((void *)(a3 + 24), (void *)v134, 0);
    }
    uint64_t v123 = __src;
    if (&__src != (void **)a3)
    {
      std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)a3, (char *)__src, (uint64_t)v131, ((char *)v131 - (unsigned char *)__src) >> 2);
      uint64_t v123 = __src;
    }
    if (v123)
    {
      uint64_t v131 = v123;
      operator delete(v123);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::~__hash_table((uint64_t)&v133);
  if (v4) {
    operator delete((void *)v4);
  }
  if (v136)
  {
    int v137 = (char *)v136;
    operator delete(v136);
  }
  if (__p)
  {
    __int16 v140 = (char *)__p;
    operator delete(__p);
  }
}

void Nightingale::truncate_temperature_data(std::vector<int> *__x@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::vector<int>::pointer begin = __x->__begin_;
  int64_t v7 = (char *)__x->__end_ - (char *)__x->__begin_;
  if (v7 && (unint64_t v8 = v7 >> 2, begin[(v7 >> 2) - 1] < a2))
  {
    uint64_t v9 = 0;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    while (begin[v9] != a2)
    {
      if (v8 == ++v9) {
        goto LABEL_7;
      }
    }
    unint64_t v10 = (unint64_t)v7 >> 2;
    *(void *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    if ((int)v9 + 1 < (int)v10) {
      int v11 = v9 + 1;
    }
    else {
      int v11 = v10;
    }
    *(_OWORD *)a3 = 0uLL;
    *(_DWORD *)(a3 + 56) = 1065353216;
    *(_OWORD *)(a3 + 64) = 0uLL;
    *(_OWORD *)(a3 + 80) = 0uLL;
    *(_DWORD *)(a3 + 96) = 1065353216;
    std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&v21, begin, &begin[v11 + 1]);
    BOOL v12 = *(void **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v12;
      operator delete(v12);
    }
    *(std::vector<int> *)a3 = v21;
    unint64_t value = __x[1].__end_cap_.__value_;
    if (value)
    {
      unint64_t v14 = __x + 1;
      uint64_t v15 = a3 + 24;
      do
      {
        v21.__begin_ = value + 4;
        unint64_t v16 = (const std::vector<int> *)std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)v14, (unsigned __int8 *)value + 16, (uint64_t)&std::piecewise_construct, &v21);
        std::vector<int>::vector(&v21, v16 + 1);
        std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&v19, v21.__begin_, &v21.__begin_[v11 + 1]);
        int v22 = value + 4;
        int v17 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v15, (unsigned __int8 *)value + 16, (uint64_t)&std::piecewise_construct, &v22);
        uint64_t v18 = (void *)v17[3];
        if (v18)
        {
          v17[4] = v18;
          operator delete(v18);
        }
        *(_OWORD *)(v17 + 3) = v19;
        void v17[5] = v20;
        if (v21.__begin_)
        {
          v21.__end_ = v21.__begin_;
          operator delete(v21.__begin_);
        }
        unint64_t value = *(int **)value;
      }
      while (value);
    }
  }
  else
  {
LABEL_7:
    std::vector<int>::vector((std::vector<int> *)a3, __x);
    std::unordered_map<unsigned char,std::vector<float>>::unordered_map(a3 + 24, (uint64_t)&__x[1]);
    std::unordered_map<unsigned char,std::vector<float>>::unordered_map(a3 + 64, (uint64_t)&__x[2].__end_cap_);
  }
}

char *Nightingale::preprocess_all_temperature_data@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(_OWORD *)(a2 + 64) = 0u;
  uint64_t v2 = a2 + 64;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  for (int i = *(uint64_t **)(a1 + 40); i; int i = (uint64_t *)*i)
  {
    unsigned __int8 v21 = *((unsigned char *)i + 16);
    uint64_t v18 = 0;
    long long v19 = 0;
    uint64_t v20 = 0;
    std::vector<int>::vector(&v17, (const std::vector<int> *)i + 1);
    std::vector<int>::pointer begin = v17.__begin_;
    std::vector<int>::pointer end = v17.__end_;
    while (begin != end)
    {
      float v6 = *(float *)begin;
      if (*(float *)begin > 38.5) {
        float v6 = NAN;
      }
      *(float *)begin++ = v6;
    }
    Nightingale::remove_outlier_via_sliding_window_r((uint64_t *)&v17, 7, &__p, 1.0);
    unint64_t v8 = (int *)__p;
    int64_t v7 = v16;
    uint64_t v23 = &v18;
    while (v8 != v7)
    {
      int v9 = *v8++;
      BOOL v22 = (v9 & 0x7FFFFFFFu) < 0x7F800000;
      std::back_insert_iterator<std::vector<int>>::operator=[abi:nn180100]((uint64_t *)&v23, &v22);
    }
    uint64_t v23 = (void **)&v21;
    unint64_t v10 = (char *)(std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a2 + 24, &v21, (uint64_t)&std::piecewise_construct, (unsigned char **)&v23)+ 3);
    if (v10 != (char *)&__p) {
      std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(v10, (char *)__p, (uint64_t)v16, ((char *)v16 - (unsigned char *)__p) >> 2);
    }
    uint64_t v23 = (void **)&v21;
    int v11 = (char *)(std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v2, &v21, (uint64_t)&std::piecewise_construct, (unsigned char **)&v23)+ 3);
    if (v11 != (char *)&v18) {
      std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(v11, (char *)v18, (uint64_t)v19, (v19 - (unsigned char *)v18) >> 2);
    }
    if (__p)
    {
      unint64_t v16 = (int *)__p;
      operator delete(__p);
    }
    if (v17.__begin_)
    {
      v17.__end_ = v17.__begin_;
      operator delete(v17.__begin_);
    }
    if (v18)
    {
      long long v19 = v18;
      operator delete(v18);
    }
  }
  __n128 result = (char *)a2;
  if (a2 != a1) {
    return std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)a2, *(char **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  }
  return result;
}

void Nightingale::prepare_temperature_input_slice_for_kdays(void *a1@<X0>, int a2@<W1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  int v5 = a4;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  std::vector<int> __p = 0;
  uint64_t v94 = 0;
  unint64_t v95 = 0;
  if (a2 >= 1)
  {
    float v6 = 0;
    for (int i = 0; i != a2; ++i)
    {
      if (v6 >= v95)
      {
        int v9 = (char *)__p;
        uint64_t v10 = (v6 - (unsigned char *)__p) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          goto LABEL_116;
        }
        uint64_t v12 = v95 - (unsigned char *)__p;
        if ((v95 - (unsigned char *)__p) >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          unint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v95, v13);
          int v9 = (char *)__p;
          float v6 = v94;
        }
        else
        {
          unint64_t v14 = 0;
        }
        uint64_t v15 = &v14[4 * v10];
        *(_DWORD *)uint64_t v15 = 2143289344;
        unint64_t v8 = v15 + 4;
        while (v6 != v9)
        {
          int v16 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        std::vector<int> __p = v15;
        uint64_t v94 = v8;
        unint64_t v95 = &v14[4 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *(_DWORD *)float v6 = 2143289344;
        unint64_t v8 = v6 + 4;
      }
      uint64_t v94 = v8;
      float v6 = v8;
    }
  }
  if (a1[1] == *a1)
  {
    LODWORD(v39) = 0;
  }
  else
  {
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = (void *)v5[1];
      unint64_t v19 = v5[2];
      if ((unint64_t)v18 >= v19)
      {
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - *v5) >> 3);
        unint64_t v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_116;
        }
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v5) >> 3);
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x555555555555555) {
          unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v24 = v22;
        }
        unint64_t v99 = v5 + 2;
        uint64_t v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<BOOL>>>((uint64_t)(v5 + 2), v24);
        unint64_t v26 = &v25[24 * v21];
        __src = v25;
        __dst[0] = v26;
        unint64_t v98 = &v25[24 * v27];
        *((void *)v26 + 1) = 0;
        *((void *)v26 + 2) = 0;
        *(void *)unint64_t v26 = 0;
        __dst[1] = v26 + 24;
        std::vector<std::vector<std::pair<BOOL,float>>>::__swap_out_circular_buffer(v5, &__src);
        uint64_t v20 = (void *)v5[1];
        std::__split_buffer<std::vector<std::pair<BOOL,float>>>::~__split_buffer((uint64_t)&__src);
      }
      else
      {
        uint64_t v20 = v18 + 3;
        *uint64_t v18 = 0;
        v18[1] = 0;
        _OWORD v18[2] = 0;
      }
      v5[1] = v20;
      int v29 = (char *)v5[4];
      unint64_t v28 = v5[5];
      if ((unint64_t)v29 >= v28)
      {
        BOOL v31 = (char *)v5[3];
        uint64_t v32 = (v29 - v31) >> 2;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62) {
          goto LABEL_116;
        }
        uint64_t v34 = v28 - (void)v31;
        if (v34 >> 1 > v33) {
          unint64_t v33 = v34 >> 1;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          char v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(v5 + 5), v35);
          BOOL v31 = (char *)v5[3];
          int v29 = (char *)v5[4];
        }
        else
        {
          char v36 = 0;
        }
        uint64_t v37 = &v36[4 * v32];
        *(_DWORD *)uint64_t v37 = 2143289344;
        int v30 = v37 + 4;
        while (v29 != v31)
        {
          int v38 = *((_DWORD *)v29 - 1);
          v29 -= 4;
          *((_DWORD *)v37 - 1) = v38;
          v37 -= 4;
        }
        v5[3] = v37;
        v5[4] = v30;
        v5[5] = &v36[4 * v35];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(_DWORD *)int v29 = 2143289344;
        int v30 = v29 + 4;
      }
      v5[4] = v30;
      ++v17;
      unint64_t v39 = (uint64_t)(a1[1] - *a1) >> 2;
    }
    while (v39 > v17);
  }
  if ((int)v39 >= 1)
  {
    int v89 = 0;
    uint64_t v84 = (uint64_t)(a3 + 3);
    uint64_t v40 = &__dst[1];
    unint64_t v41 = a2;
    uint64_t v42 = v39;
    while (1)
    {
      unint64_t v43 = (v42 - 1);
      if (v43 >= (uint64_t)(a1[1] - *a1) >> 2) {
        break;
      }
      uint64_t v87 = (v42 - 1);
      int v44 = *(_DWORD *)(*a1 + 4 * v43);
      uint64_t v45 = *a3;
      unint64_t v46 = (uint64_t)(a3[1] - *a3) >> 2;
      unint64_t v47 = v89;
      if (v46 > v89)
      {
        do
        {
          if (v44 >= *(_DWORD *)(v45 + 4 * v47)) {
            break;
          }
          ++v47;
        }
        while (v46 > v47);
        int v89 = v47;
      }
      uint64_t v86 = v42 - 1;
      __src = 0;
      __dst[0] = 0;
      __dst[1] = 0;
      int v48 = __p;
      uint64_t v49 = v94 - (unsigned char *)__p;
      if (v94 != __p)
      {
        std::vector<int>::__vallocate[abi:nn180100](&__src, v49 >> 2);
        unint64_t v50 = v5;
        uint64_t v51 = v42;
        unint64_t v52 = v41;
        int v53 = v40;
        uint64_t v54 = a3;
        uint64_t v55 = __dst[0];
        memmove(__dst[0], v48, v49);
        v49 += (uint64_t)v55;
        a3 = v54;
        uint64_t v40 = v53;
        unint64_t v41 = v52;
        uint64_t v42 = v51;
        int v5 = v50;
        __dst[0] = (void *)v49;
        uint64_t v45 = *a3;
        unint64_t v46 = (uint64_t)(a3[1] - *a3) >> 2;
      }
      float v56 = 1.0;
      if (v46 > v47 && v44 == *(_DWORD *)(v45 + 4 * v47))
      {
        __int16 v92 = 0;
        uint64_t v57 = (uint64_t **)a3[10];
        if (!v57) {
          goto LABEL_79;
        }
        int v58 = v89 + a2;
        do
        {
          uint64_t v59 = v57[3];
          unint64_t v60 = (unint64_t)((char *)v57[4] - (char *)v59) >> 2;
          if (v58 < (int)v60) {
            LODWORD(v60) = v89 + a2;
          }
          long long v90 = 0;
          long long v91 = 0uLL;
          std::vector<float>::__init_with_size[abi:nn180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((char *)&v90, (int *)v59 + v47, (int *)v59 + (int)v60, (int)v60 - v47);
          double v61 = 0.0;
          if (v90 != (float *)v91)
          {
            unint64_t v62 = v90;
            do
            {
              float v63 = *v62++;
              double v61 = v61 + v63;
            }
            while (v62 != (float *)v91);
          }
          float v64 = 1.0 - v61 / (float)a2;
          if (v56 > v64)
          {
            __int16 v92 = *((unsigned __int8 *)v57 + 16) | 0x100;
            float v56 = v64;
          }
          if (v90)
          {
            *(void *)&long long v91 = v90;
            operator delete(v90);
          }
          uint64_t v57 = (uint64_t **)*v57;
        }
        while (v57);
        if (HIBYTE(v92))
        {
          long long v90 = (float *)&v92;
          unint64_t v65 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v84, (unsigned __int8 *)&v92, (uint64_t)&std::piecewise_construct, (unsigned char **)&v90);
          uint64_t v66 = v65[3];
          unint64_t v67 = (unint64_t)(v65[4] - v66) >> 2;
          if (v58 < (int)v67) {
            LODWORD(v67) = v89 + a2;
          }
          std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&v90, (unsigned char *)(v66 + 4 * v47), (unsigned char *)(v66 + 4 * (int)v67));
          if (__src)
          {
            __dst[0] = __src;
            operator delete(__src);
          }
          uint64_t v68 = (char *)v90;
          __src = v90;
          *(_OWORD *)std::vector<int> __dst = v91;
          uint64_t v69 = (char *)v91;
        }
        else
        {
LABEL_79:
          uint64_t v68 = (char *)__src;
          uint64_t v69 = (char *)__dst[0];
        }
        unint64_t v70 = (v69 - v68) >> 2;
        if (v70 >= v41)
        {
          uint64_t v49 = (uint64_t)v69;
        }
        else
        {
          do
          {
            if (v69 >= __dst[1])
            {
              unint64_t v71 = v70 + 1;
              if ((v70 + 1) >> 62) {
                goto LABEL_116;
              }
              uint64_t v72 = (char *)__dst[1] - (char *)v68;
              if (((char *)__dst[1] - (char *)v68) >> 1 > v71) {
                unint64_t v71 = v72 >> 1;
              }
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73)
              {
                long long v74 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)v40, v73);
                uint64_t v68 = (char *)__src;
                uint64_t v69 = (char *)__dst[0];
              }
              else
              {
                long long v74 = 0;
              }
              long long v75 = &v74[4 * v70];
              *(_DWORD *)long long v75 = 2143289344;
              uint64_t v49 = (uint64_t)(v75 + 4);
              while (v69 != v68)
              {
                int v76 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *((_DWORD *)v75 - 1) = v76;
                v75 -= 4;
              }
              __src = v75;
              __dst[0] = (void *)v49;
              __dst[1] = &v74[4 * v73];
              if (v68)
              {
                operator delete(v68);
                uint64_t v68 = (char *)__src;
              }
              else
              {
                uint64_t v68 = v75;
              }
            }
            else
            {
              *(_DWORD *)uint64_t v69 = 2143289344;
              uint64_t v49 = (uint64_t)(v69 + 4);
            }
            __dst[0] = (void *)v49;
            unint64_t v70 = (v49 - (uint64_t)v68) >> 2;
            uint64_t v69 = (char *)v49;
          }
          while (v70 < v41);
        }
        if (v68 != (char *)v49)
        {
          uint64_t v77 = (_DWORD *)(v49 - 4);
          if (v49 - 4 > (unint64_t)v68)
          {
            uint64_t v78 = v68 + 4;
            do
            {
              int v79 = *((_DWORD *)v78 - 1);
              *((_DWORD *)v78 - 1) = *v77;
              *v77-- = v79;
              BOOL v80 = v78 >= (unsigned char *)v77;
              v78 += 4;
            }
            while (!v80);
          }
        }
        ++v89;
      }
      unint64_t v81 = (char *)(*v5 + 24 * v87);
      float v82 = __src;
      if (v81 != (char *)&__src)
      {
        std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(v81, (char *)__src, v49, (v49 - (uint64_t)__src) >> 2);
        float v82 = __src;
      }
      *(float *)(v5[3] + 4 * v87) = v56;
      if (v82)
      {
        __dst[0] = v82;
        operator delete(v82);
      }
      BOOL v83 = v42 <= 1;
      uint64_t v42 = v86;
      if (v83) {
        goto LABEL_113;
      }
    }
LABEL_116:
    abort();
  }
LABEL_113:
  if (__p)
  {
    uint64_t v94 = (char *)__p;
    operator delete(__p);
  }
}

void Nightingale::remove_outlier_via_sliding_window_r(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>, float a4@<S0>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v8 = (unint64_t)(a1[1] - *a1) >> 2;
  int v9 = 0;
  int v10 = 0;
  uint64_t v11 = (v8 - 1);
  if ((int)v8 < 1)
  {
LABEL_22:
    unint64_t v13 = v9;
    if ((v11 & 0x80000000) != 0) {
      goto LABEL_84;
    }
    int v22 = v10 + a2;
    uint64_t v11 = v11;
    while (1)
    {
      uint64_t v23 = *a1;
      if (v11 >= (int)(((unint64_t)(a1[1] - *a1) >> 2) - v22))
      {
        uint64_t v32 = (_DWORD *)a3[1];
        unint64_t v31 = a3[2];
        if ((unint64_t)v32 >= v31)
        {
          uint64_t v37 = (_DWORD *)*a3;
          uint64_t v38 = ((uint64_t)v32 - *a3) >> 2;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62) {
            goto LABEL_93;
          }
          uint64_t v40 = v31 - (void)v37;
          if (v40 >> 1 > v39) {
            unint64_t v39 = v40 >> 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            uint64_t v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(a3 + 2), v41);
            uint64_t v37 = (_DWORD *)*a3;
            uint64_t v32 = (_DWORD *)a3[1];
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v52 = &v42[4 * v38];
          *(_DWORD *)unint64_t v52 = *(_DWORD *)(v23 + 4 * v11);
          unint64_t v33 = v52 + 4;
          while (v32 != v37)
          {
            int v53 = *--v32;
            *((_DWORD *)v52 - 1) = v53;
            v52 -= 4;
          }
          *a3 = v52;
          a3[1] = v33;
          a3[2] = &v42[4 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          _DWORD *v32 = *(_DWORD *)(v23 + 4 * v11);
          unint64_t v33 = v32 + 1;
        }
        a3[1] = v33;
        goto LABEL_81;
      }
      unint64_t v24 = (unsigned char *)a3[1];
      unint64_t v25 = (unint64_t)&v24[-*a3] >> 2;
      if ((int)v25 >= a2) {
        LODWORD(vstd::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = a2;
      }
      std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)v64, &v24[-4 * (int)v25], v24);
      std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)__p, (unsigned char *)(*a1 + 4 * v11), (unsigned char *)(*a1 + 4 * v11 + 4));
      float sw_difference = Nightingale::get_sw_difference((float **)v64, (float **)__p);
      if (sw_difference >= a4 || sw_difference <= (float)-a4)
      {
        unint64_t v35 = (_DWORD *)a3[1];
        unint64_t v34 = a3[2];
        if ((unint64_t)v35 >= v34)
        {
          unint64_t v43 = (_DWORD *)*a3;
          uint64_t v49 = ((uint64_t)v35 - *a3) >> 2;
          unint64_t v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 62) {
            goto LABEL_93;
          }
          uint64_t v51 = v34 - (void)v43;
          if (v51 >> 1 > v50) {
            unint64_t v50 = v51 >> 1;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v50;
          }
          if (v47)
          {
            int v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(a3 + 2), v47);
            unint64_t v43 = (_DWORD *)*a3;
            unint64_t v35 = (_DWORD *)a3[1];
          }
          else
          {
            int v48 = 0;
          }
          uint64_t v54 = &v48[4 * v49];
          *(_DWORD *)uint64_t v54 = 2143289344;
          char v36 = v54 + 4;
          while (v35 != v43)
          {
            int v56 = *--v35;
            *((_DWORD *)v54 - 1) = v56;
            v54 -= 4;
          }
          goto LABEL_75;
        }
        _DWORD *v35 = 2143289344;
        int v30 = v35 + 1;
      }
      else
      {
        uint64_t v27 = *a1;
        int v29 = (_DWORD *)a3[1];
        unint64_t v28 = a3[2];
        if ((unint64_t)v29 >= v28)
        {
          unint64_t v43 = (_DWORD *)*a3;
          uint64_t v44 = ((uint64_t)v29 - *a3) >> 2;
          unint64_t v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 62) {
            goto LABEL_93;
          }
          uint64_t v46 = v28 - (void)v43;
          if (v46 >> 1 > v45) {
            unint64_t v45 = v46 >> 1;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v45;
          }
          if (v47)
          {
            int v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(a3 + 2), v47);
            unint64_t v43 = (_DWORD *)*a3;
            int v29 = (_DWORD *)a3[1];
          }
          else
          {
            int v48 = 0;
          }
          uint64_t v54 = &v48[4 * v44];
          *(_DWORD *)uint64_t v54 = *(_DWORD *)(v27 + 4 * v11);
          char v36 = v54 + 4;
          while (v29 != v43)
          {
            int v55 = *--v29;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
LABEL_75:
          *a3 = v54;
          a3[1] = v36;
          a3[2] = &v48[4 * v47];
          if (v43) {
            operator delete(v43);
          }
          goto LABEL_77;
        }
        *int v29 = *(_DWORD *)(v27 + 4 * v11);
        int v30 = v29 + 1;
      }
      char v36 = v30;
LABEL_77:
      a3[1] = v36;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v64[0])
      {
        v64[1] = v64[0];
        operator delete(v64[0]);
      }
LABEL_81:
      BOOL v59 = v11-- <= 0;
      if (v59)
      {
        unint64_t v13 = (_DWORD *)a3[1];
        goto LABEL_84;
      }
    }
  }
  uint64_t v12 = a3 + 2;
  do
  {
    if ((*(_DWORD *)(*a1 + 4 * v11) & 0x7FFFFFFFu) < 0x7F800000) {
      goto LABEL_22;
    }
    if ((unint64_t)v9 >= *v12)
    {
      unint64_t v14 = (_DWORD *)*a3;
      uint64_t v15 = ((uint64_t)v9 - *a3) >> 2;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
LABEL_93:
      }
        abort();
      uint64_t v17 = *v12 - (void)v14;
      if (v17 >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        unint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(a3 + 2), v18);
        unint64_t v14 = (_DWORD *)*a3;
        int v9 = (_DWORD *)a3[1];
      }
      else
      {
        unint64_t v19 = 0;
      }
      uint64_t v20 = &v19[4 * v15];
      *(_DWORD *)uint64_t v20 = 2143289344;
      unint64_t v13 = v20 + 4;
      while (v9 != v14)
      {
        int v21 = *--v9;
        *((_DWORD *)v20 - 1) = v21;
        v20 -= 4;
      }
      *a3 = v20;
      a3[1] = v13;
      a3[2] = &v19[4 * v18];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *int v9 = 2143289344;
      unint64_t v13 = v9 + 1;
    }
    a3[1] = v13;
    ++v10;
    --v11;
    int v9 = v13;
  }
  while (v10 != v8);
LABEL_84:
  uint64_t v57 = (_DWORD *)*a3;
  int v58 = v13 - 1;
  BOOL v59 = (_DWORD *)*a3 != v13 && v58 > v57;
  if (v59)
  {
    unint64_t v60 = (unint64_t)(v57 + 1);
    do
    {
      int v61 = *(_DWORD *)(v60 - 4);
      *(_DWORD *)(v60 - 4) = *v58;
      *v58-- = v61;
      BOOL v62 = v60 >= (unint64_t)v58;
      v60 += 4;
    }
    while (!v62);
  }
}

float Nightingale::get_sw_difference(float **a1, float **a2)
{
  uint64_t v2 = *a1;
  int v3 = a1[1];
  unint64_t v4 = *a2;
  int v5 = a2[1];
  unint64_t v6 = (char *)v5 - (char *)*a2;
  unint64_t v7 = (char *)v3 - (char *)*a1;
  unint64_t v8 = v7 >> 2;
  unint64_t v9 = v7 >> 2;
  if (v3 != *a1)
  {
    unint64_t v9 = v7 >> 2;
    int v10 = *a1;
    do
    {
      int v11 = *(_DWORD *)v10++;
      LODWORD(v9) = v9 - ((v11 & 0x7FFFFFFFu) > 0x7F7FFFFF);
    }
    while (v10 != v3);
  }
  unint64_t v12 = v6 >> 2;
  if (v4 != v5)
  {
    unint64_t v12 = v6 >> 2;
    unint64_t v13 = *a2;
    do
    {
      int v14 = *(_DWORD *)v13++;
      LODWORD(v12) = v12 - ((v14 & 0x7FFFFFFFu) > 0x7F7FFFFF);
    }
    while (v13 != v5);
  }
  float result = NAN;
  if (v9 && v12)
  {
    if (!(v6 >> 2)) {
      goto LABEL_19;
    }
    int v16 = 0;
    uint64_t v17 = (v6 >> 2);
    float v18 = 0.0;
    do
    {
      float v19 = *v4++;
      float v20 = v19;
      int v21 = LODWORD(v19) & 0x7FFFFFFF;
      if ((LODWORD(v19) & 0x7FFFFFFFu) >= 0x7F800000) {
        float v20 = -0.0;
      }
      float v18 = v18 + v20;
      if (v21 < 2139095040) {
        ++v16;
      }
      --v17;
    }
    while (v17);
    if (v16)
    {
      float v22 = v18 / (float)v16;
      if (!v8) {
        goto LABEL_28;
      }
    }
    else
    {
LABEL_19:
      float v22 = NAN;
      if (!v8) {
        goto LABEL_28;
      }
    }
    int v23 = 0;
    uint64_t v24 = (v7 >> 2);
    float v25 = 0.0;
    do
    {
      float v26 = *v2++;
      float v27 = v26;
      int v28 = LODWORD(v26) & 0x7FFFFFFF;
      if ((LODWORD(v26) & 0x7FFFFFFFu) >= 0x7F800000) {
        float v27 = -0.0;
      }
      float v25 = v25 + v27;
      if (v28 < 2139095040) {
        ++v23;
      }
      --v24;
    }
    while (v24);
    if (v23)
    {
      float v29 = v25 / (float)v23;
      return round((float)(v22 - v29) * 100000.0) / 100000.0;
    }
LABEL_28:
    float v29 = NAN;
    return round((float)(v22 - v29) * 100000.0) / 100000.0;
  }
  return result;
}

void Nightingale::calculate_snr_noise_power(Nightingale **a1, Nightingale **a2)
{
  uint64_t v2 = *a1;
  int v3 = a1[1];
  unint64_t v6 = *a2;
  int v5 = a2[1];
  unint64_t v7 = (const float *)((unint64_t)(v5 - *a2) >> 2);
  unint64_t v8 = (unint64_t)(v3 - v2) >> 2;
  if (v3 != v2)
  {
    unint64_t v8 = (unint64_t)(v3 - v2) >> 2;
    unint64_t v9 = v2;
    do
    {
      int v10 = *(_DWORD *)v9;
      unint64_t v9 = (Nightingale *)((char *)v9 + 4);
      LODWORD(v8) = v8 - ((v10 & 0x7FFFFFFFu) > 0x7F7FFFFF);
    }
    while (v9 != v3);
  }
  int v11 = (unint64_t)(v5 - *a2) >> 2;
  if (v6 != v5)
  {
    int v11 = (unint64_t)(v5 - *a2) >> 2;
    unint64_t v12 = *a2;
    do
    {
      int v13 = *(_DWORD *)v12;
      unint64_t v12 = (Nightingale *)((char *)v12 + 4);
      v11 -= (v13 & 0x7FFFFFFFu) > 0x7F7FFFFF;
    }
    while (v12 != v5);
  }
  if (v8 && v11 && v11 + (int)v8 >= 3)
  {
    Nightingale::variance(v2, (const float *)((unint64_t)(v3 - v2) >> 2));
    Nightingale::variance(v6, v7);
  }
}

float Nightingale::variance(Nightingale *this, const float *a2)
{
  if (!a2) {
    return NAN;
  }
  int v2 = 0;
  uint64_t v3 = a2;
  float v4 = 0.0;
  float v5 = 0.0;
  do
  {
    float v6 = *(float *)this;
    this = (Nightingale *)((char *)this + 4);
    float v7 = v6;
    int v8 = LODWORD(v6) & 0x7FFFFFFF;
    float v9 = v4 + (float)(v7 * v7);
    if ((LODWORD(v6) & 0x7FFFFFFFu) >= 0x7F800000) {
      float v7 = -0.0;
    }
    float v5 = v5 + v7;
    if (v8 < 2139095040)
    {
      float v4 = v9;
      ++v2;
    }
    --v3;
  }
  while (v3);
  if (v2) {
    return fabsf((float)(v4 / (float)v2) - (float)((float)(v5 / (float)v2) * (float)(v5 / (float)v2)));
  }
  else {
    return NAN;
  }
}

float Nightingale::mean(Nightingale *this, const float *a2)
{
  if (!a2) {
    return NAN;
  }
  int v2 = 0;
  uint64_t v3 = a2;
  float v4 = 0.0;
  do
  {
    float v5 = *(float *)this;
    this = (Nightingale *)((char *)this + 4);
    float v6 = v5;
    int v7 = LODWORD(v5) & 0x7FFFFFFF;
    if ((LODWORD(v5) & 0x7FFFFFFFu) >= 0x7F800000) {
      float v6 = -0.0;
    }
    float v4 = v4 + v6;
    if (v7 < 2139095040) {
      ++v2;
    }
    --v3;
  }
  while (v3);
  if (v2) {
    return v4 / (float)v2;
  }
  else {
    return NAN;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  float v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  int v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    void *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

char *std::vector<float>::__init_with_size[abi:nn180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(char *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<int>::__vallocate[abi:nn180100](result, a4);
    int v7 = (float *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      int v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

uint64_t std::unordered_map<unsigned char,std::vector<float>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<float>> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

std::vector<int> *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<float>> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (std::vector<int> *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t end = (unint64_t)v10->__end_;
          if (end == v6)
          {
            if (LOBYTE(v10->__end_cap_.__value_) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (end >= v7) {
                end %= v7;
              }
            }
            else
            {
              end &= v7 - 1;
            }
            if (end != v3) {
              break;
            }
          }
          uint64_t v10 = (std::vector<int> *)v10->__begin_;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = (std::vector<int> *)operator new(0x30uLL);
  v10->__begin_ = 0;
  v10->__end_ = (std::vector<int>::pointer)v6;
  LOBYTE(v10->__end_cap_.__value_) = *(unsigned char *)a3;
  std::vector<int>::vector(v10 + 1, (const std::vector<int> *)(a3 + 8));
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  float v19 = *(std::vector<int> ***)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    v10->__begin_ = (std::vector<int>::pointer)*v19;
LABEL_38:
    char *v19 = v10;
    goto LABEL_39;
  }
  v10->__begin_ = *(std::vector<int>::pointer *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (v10->__begin_)
  {
    unint64_t v20 = *((void *)v10->__begin_ + 1);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    float v19 = (std::vector<int> **)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:nn180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = *(_DWORD **)(*a1 + 8);
  unint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint8x8_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      abort();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      float v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)v6, v12);
      uint8x8_t v8 = *(_DWORD **)v4;
      unint64_t v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      float v13 = 0;
    }
    BOOL v14 = &v13[4 * v9];
    unint64_t v15 = &v13[4 * v12];
    *(_DWORD *)BOOL v14 = *a2;
    unint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v5 = *a2;
    unint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x30uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  void v11[4] = 0;
  void v11[5] = 0;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::find<unsigned char>(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (float result = *v6; result; float result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<float>>,void *> *>>(void *a1, void *a2, void *a3)
{
  uint8x8_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }
    else
    {
      do
      {
        v14[0] = v8 + 2;
        v14[1] = v8 + 3;
        std::pair<unsigned char &,std::vector<float> &>::operator=[abi:nn180100]<unsigned char const,std::vector<float>,(void *)0>(v14, (uint64_t)(v4 + 2));
        unint64_t v10 = (void *)*v8;
        unint64_t v11 = *((unsigned __int8 *)v8 + 16);
        v8[1] = v11;
        inserted = (void *)std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__node_insert_multi_prepare((uint64_t)a1, v11, (unsigned __int8 *)v8 + 16);
        std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__node_insert_multi_perform(a1, v8, inserted);
        uint8x8_t v4 = (void *)*v4;
        if (v10) {
          BOOL v13 = v4 == a3;
        }
        else {
          BOOL v13 = 1;
        }
        unint64_t v8 = v10;
      }
      while (!v13);
    }
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_multi<std::pair<unsigned char const,std::vector<float>> const&>(a1, (uint64_t)(v4 + 2));
    uint8x8_t v4 = (void *)*v4;
  }
}

unsigned char **std::pair<unsigned char &,std::vector<float> &>::operator=[abi:nn180100]<unsigned char const,std::vector<float>,(void *)0>(unsigned char **a1, uint64_t a2)
{
  **a1 = *(unsigned char *)a2;
  unint64_t v3 = a1[1];
  if (v3 != (char *)(a2 + 8)) {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(v3, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void *)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    uint64_t v16 = *(void *)v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = *(void *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = *(void *)(v16 + 8);
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && *(unsigned __int8 *)(v16 + 16) == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (uint64_t *)*v13;
            }
            while (v13 && *((unsigned __int8 *)i + 16) == *((unsigned __int8 *)v13 + 16));
            _DWORD *v7 = v13;
            void *v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = (uint64_t **)i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_multi<std::pair<unsigned char const,std::vector<float>> const&>(void *a1, uint64_t a2)
{
  int8x8_t v4 = (unsigned __int8 *)operator new(0x30uLL);
  *(void *)int8x8_t v4 = 0;
  *((void *)v4 + 1) = 0;
  v4[16] = *(unsigned char *)a2;
  std::vector<int>::vector((std::vector<int> *)v4 + 1, (const std::vector<int> *)(a2 + 8));
  unint64_t v5 = v4[16];
  *((void *)v4 + 1) = v5;
  inserted = (void *)std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 16);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void Nightingale::fwHEstimation::processPerCycle(uint64_t a1@<X1>, void *a2@<X2>, void **a3@<X3>, unsigned int a4@<W4>, const std::vector<int> *a5@<X5>, uint64_t *a6@<X6>, int a7@<W7>, uint64_t a8@<X8>)
{
  Nightingale::fwEstimatorCalendar::fwEstimatorCalendar((Nightingale::fwEstimatorCalendar *)v69);
  Nightingale::fwEstimatorOPK::fwEstimatorOPK((Nightingale::fwEstimatorOPK *)v68);
  uint64_t v15 = Nightingale::fwEstimatorLuna::fwEstimatorLuna((Nightingale::fwEstimatorLuna *)v67);
  *(unsigned char *)a8 = 0;
  *(unsigned char *)(a8 + 4) = 0;
  *(unsigned char *)(a8 + 8) = 0;
  *(unsigned char *)(a8 + 12) = 0;
  *(void *)(a8 + 20) = 0;
  *(_DWORD *)(a8 + 16) = 3;
  *(unsigned char *)(a8 + 32) = 0;
  uint64_t v16 = (_OWORD *)(a8 + 32);
  *(_WORD *)(a8 + 28) = 0;
  *(int32x4_t *)(a8 + 36) = vdupq_n_s32(0x7FC00000u);
  *(unsigned char *)(a8 + 52) = 0;
  *(unsigned char *)(a8 + 56) = 0;
  *(unsigned char *)(a8 + 60) = 0;
  *(unsigned char *)(a8 + 64) = 0;
  *(unsigned char *)(a8 + 72) = 0;
  *(unsigned char *)(a8 + 96) = 0;
  *(unsigned char *)(a8 + 104) = 0;
  *(unsigned char *)(a8 + 128) = 0;
  *(unsigned char *)(a8 + 136) = 0;
  *(unsigned char *)(a8 + 140) = 0;
  *(void *)(a8 + 144) = 0x17FC00000;
  *(_DWORD *)(a8 + 152) = 0;
  *(_WORD *)(a8 + 156) = 0;
  if (!*(unsigned char *)(a1 + 24))
  {
LABEL_50:
    Nightingale::fwEstimatorLuna::~fwEstimatorLuna((Nightingale::fwEstimatorLuna *)v67);
    Nightingale::fwEstimatorOPK::~fwEstimatorOPK((Nightingale::fwEstimatorOPK *)v68);
    Nightingale::fwEstimatorCalendar::~fwEstimatorCalendar((Nightingale::fwEstimatorCalendar *)v69);
    return;
  }
  int v30 = (float *)(a8 + 136);
  uint64_t v31 = a8 + 72;
  uint64_t v32 = a8 + 104;
  unint64_t JDayCycleEnd = Nightingale::fwEstimatorLuna::getJDayCycleEnd(v15, a1);
  std::vector<int>::vector(&v56, a5);
  std::vector<int> __x = (std::vector<int> *)a5;
  uint64_t v18 = (uint64_t)&a5[1];
  std::vector<Nightingale::PhaseSet>::vector(__p, v18);
  Nightingale::fwEstimatorLuna::getHistFwKali((uint64_t)v67, a1, a2, a3, a4, (uint64_t *)&v56, JDayCycleEnd, a6, (uint64_t)v58, a7);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
  std::vector<int>::vector(&v45, __x);
  std::vector<Nightingale::PhaseSet>::vector(v46, v18);
  Nightingale::fwEstimatorOPK::getHistFwOpk((uint64_t)v68, a1, (uint64_t *)&v45, JDayCycleEnd, (uint64_t)v47);
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
  std::vector<int>::vector(&v34, __x);
  std::vector<Nightingale::PhaseSet>::vector(v35, v18);
  Nightingale::fwEstimatorCalendar::getHistFwCal((uint64_t)v69, (int *)a1, JDayCycleEnd, (uint64_t *)&v34, (uint64_t)v36);
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v34.__begin_)
  {
    v34.__end_ = v34.__begin_;
    operator delete(v34.__begin_);
  }
  if (!*(_DWORD *)&v47[16])
  {
    *(_OWORD *)a8 = *(_OWORD *)v47;
    *(_OWORD *)(a8 + 14) = *(_OWORD *)&v47[14];
    long long v23 = v49;
    _OWORD *v16 = v48;
    *(_OWORD *)(a8 + 48) = v23;
    *(unsigned char *)(a8 + 64) = v50;
    std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::vector<float>,false> const&>(v31, (uint64_t)v51);
    uint64_t v20 = a8 + 72;
    uint64_t v21 = a8 + 104;
    std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::vector<float>,false> const&>(v32, (uint64_t)v53);
    *(_OWORD *)int v30 = *(_OWORD *)v55;
    uint64_t v22 = *(void *)&v55[14];
    goto LABEL_18;
  }
  if (v58[12])
  {
    *(_OWORD *)a8 = *(_OWORD *)v58;
    *(_OWORD *)(a8 + 14) = *(_OWORD *)&v58[14];
    long long v19 = v60;
    _OWORD *v16 = v59;
    *(_OWORD *)(a8 + 48) = v19;
    *(unsigned char *)(a8 + 64) = v61;
    uint64_t v20 = a8 + 72;
    std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::vector<float>,false> const&>(v31, (uint64_t)v62);
    uint64_t v21 = a8 + 104;
    std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::vector<float>,false> const&>(v32, (uint64_t)v64);
    *(_OWORD *)int v30 = *(_OWORD *)v66;
    uint64_t v22 = *(void *)&v66[14];
LABEL_18:
    *(void *)(a8 + 150) = v22;
    goto LABEL_20;
  }
  *(_OWORD *)a8 = *(_OWORD *)v36;
  *(_OWORD *)(a8 + 14) = *(_OWORD *)&v36[14];
  long long v24 = v38;
  _OWORD *v16 = v37;
  *(_OWORD *)(a8 + 48) = v24;
  *(unsigned char *)(a8 + 64) = v39;
  uint64_t v20 = a8 + 72;
  std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::vector<float>,false> const&>(v31, (uint64_t)v40);
  uint64_t v21 = a8 + 104;
  std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::vector<float>,false> const&>(v32, (uint64_t)v42);
  *(_OWORD *)int v30 = *(_OWORD *)v44;
  *(void *)(a8 + 150) = *(void *)&v44[14];
  *(_DWORD *)(a8 + 20) = *(_DWORD *)&v58[20];
LABEL_20:
  long long v25 = v60;
  _OWORD *v16 = v59;
  *(_OWORD *)(a8 + 48) = v25;
  *(unsigned char *)(a8 + 64) = v61;
  std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::vector<float>,false> const&>(v20, (uint64_t)v62);
  std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::vector<float>,false> const&>(v21, (uint64_t)v64);
  *(_OWORD *)int v30 = *(_OWORD *)v66;
  *(void *)(a8 + 150) = *(void *)&v66[14];
  *(_DWORD *)(a8 + 24) = *(_DWORD *)&v58[24];
  Nightingale::fwEstimatorLuna::updateAFwCycleFactorCAItems(v67, a8, (unsigned int *)a1, (uint64_t *)__x, a7, a2);
  if (!*(_DWORD *)(a8 + 16))
  {
    *(_DWORD *)(a8 + 148) = 0;
    *(_DWORD *)(a8 + 20) = 0;
  }
  if (!v47[12] || !v58[12]) {
    goto LABEL_28;
  }
  if (*(unsigned char *)(a8 + 12))
  {
    int v26 = *(_DWORD *)&v58[8] - *(_DWORD *)(a8 + 8);
    if (!*(unsigned char *)(a8 + 140)) {
      *(unsigned char *)(a8 + 140) = 1;
    }
    *int v30 = (float)v26;
LABEL_28:
    if (v47[29] || v36[29] || v58[29]) {
      *(_DWORD *)(a8 + 20) = 3;
    }
    if (v43 && v42[0])
    {
      v42[1] = v42[0];
      operator delete(v42[0]);
    }
    if (v41 && v40[0])
    {
      v40[1] = v40[0];
      operator delete(v40[0]);
    }
    if (v54 && v53[0])
    {
      v53[1] = v53[0];
      operator delete(v53[0]);
    }
    if (v52 && v51[0])
    {
      v51[1] = v51[0];
      operator delete(v51[0]);
    }
    if (v65 && v64[0])
    {
      v64[1] = v64[0];
      operator delete(v64[0]);
    }
    if (v63)
    {
      if (v62[0])
      {
        v62[1] = v62[0];
        operator delete(v62[0]);
      }
    }
    goto LABEL_50;
  }
  uint64_t v27 = std::__throw_bad_optional_access[abi:nn180100]();
  std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::vector<float>,false> const&>(v27, v28);
}

void std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::vector<float>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      uint64_t v3 = *(void *)(a2 + 8);
      unint64_t v4 = (v3 - *(void *)a2) >> 2;
      unint64_t v5 = *(char **)a2;
      std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)a1, v5, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    std::vector<int>::vector((std::vector<int> *)a1, (const std::vector<int> *)a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
}

uint64_t Nightingale::run_m_over_n_moving_target(void *a1, int a2, int a3)
{
  if ((a3 | a2) < 0)
  {
    uint64_t v33 = 0;
    unsigned __int8 v34 = 0;
    int v35 = 0;
  }
  else
  {
    Nightingale::prepare_input_slices_for_mt(a1, a3, a2, &v50);
    Nightingale::day2day_noise_check_per_slice(&v50, (uint64_t)v49, 0.16);
    Nightingale::signal2noise_check_per_slice(&v50, (uint64_t)v48, 0.3025);
    Nightingale::missing_spec_check_for_each_window(&v50, v45, 8.0, 8.0);
    std::vector<int> __p = 0;
    char v43 = 0;
    uint64_t v44 = 0;
    uint64_t v4 = v50;
    uint64_t v3 = v51;
    unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v51 - v50) >> 3);
    uint64_t v6 = v49[1];
    uint64_t v7 = v48[1];
    unint64_t v8 = v45[1];
    uint64_t v9 = v47;
    BOOL v10 = operator new(0x28uLL);
    size_t v11 = v10;
    uint64_t v12 = 0;
    void *v10 = v5;
    v10[1] = v6;
    _OWORD v10[2] = v7;
    v10[3] = v8;
    LOBYTE(v13) = 1;
    void v10[4] = v9;
    do
      int v13 = (v10[v12++] == v5) & v13;
    while (v12 != 5);
    if (v13)
    {
      if (v3 == v4)
      {
        char v39 = 0;
        std::vector<int> __dst = 0;
        uint64_t v41 = 0;
      }
      else
      {
        uint8x8_t v14 = 0;
        unint64_t v15 = 0;
        do
        {
          uint64_t v16 = (v15 >> 3) & 0x1FFFFFFFFFFFFFF8;
          BOOL v17 = (*(void *)((unsigned char *)v49[0] + v16) & (1 << v15)) != 0;
          BOOL v18 = (*(void *)((unsigned char *)v48[0] + v16) & (1 << v15)) != 0;
          BOOL v19 = (*(void *)((unsigned char *)v45[0] + v16) & (1 << v15)) != 0;
          BOOL v20 = (*(void *)((unsigned char *)v46 + v16) & (1 << v15)) != 0;
          if (v14 >= v44)
          {
            uint64_t v21 = __p;
            unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v14 - (unsigned char *)__p);
            unint64_t v23 = v22 + 1;
            if (v22 + 1 >= 0x3333333333333334) {
              abort();
            }
            if (0x999999999999999ALL * (v44 - (unsigned char *)__p) > v23) {
              unint64_t v23 = 0x999999999999999ALL * (v44 - (unsigned char *)__p);
            }
            if (0xCCCCCCCCCCCCCCCDLL * (v44 - (unsigned char *)__p) >= 0x1999999999999999) {
              unint64_t v24 = 0x3333333333333333;
            }
            else {
              unint64_t v24 = v23;
            }
            if (v24)
            {
              long long v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::lunaMTSpecs>>((uint64_t)&v44, v24);
              uint64_t v21 = __p;
              uint8x8_t v14 = v43;
            }
            else
            {
              long long v25 = 0;
            }
            int v26 = &v25[5 * v22];
            char *v26 = 1;
            v26[1] = v17;
            v26[2] = v18;
            v26[3] = v19;
            v26[4] = v20;
            uint64_t v27 = v26;
            if (v14 != v21)
            {
              do
              {
                int v28 = *(_DWORD *)(v14 - 5);
                v14 -= 5;
                char v29 = v14[4];
                *(_DWORD *)(v27 - 5) = v28;
                v27 -= 5;
                v27[4] = v29;
              }
              while (v14 != v21);
              uint64_t v21 = __p;
            }
            uint8x8_t v14 = v26 + 5;
            std::vector<int> __p = v27;
            char v43 = v26 + 5;
            uint64_t v44 = &v25[5 * v24];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            unsigned char *v14 = 1;
            v14[1] = v17;
            _OWORD v14[2] = v18;
            uint64_t v14[3] = v19;
            v14[4] = v20;
            v14 += 5;
          }
          char v43 = v14;
          ++v15;
        }
        while (0xEEEEEEEEEEEEEEEFLL * ((v51 - v50) >> 3) > v15);
        int v30 = __p;
        std::vector<int> __dst = 0;
        uint64_t v41 = 0;
        char v39 = 0;
        size_t v31 = v14 - (unsigned char *)__p;
        if (v14 != __p)
        {
          std::vector<Nightingale::lunaMTSpecs>::__vallocate[abi:nn180100](&v39, 0xCCCCCCCCCCCCCCCDLL * v31);
          uint64_t v32 = (char *)__dst;
          memmove(__dst, v30, v31);
          std::vector<int> __dst = &v32[v31];
        }
      }
      uint64_t v36 = Nightingale::predict_on_day_range_historical((float *)&v50, (uint64_t *)&v39);
      if (v39)
      {
        std::vector<int> __dst = v39;
        operator delete(v39);
      }
      if ((v36 & 0xFF00000000) != 0)
      {
        int v35 = v36 & 0xFFFFFF00;
        char v37 = v36;
        uint64_t v33 = 0x100000000;
      }
      else
      {
        uint64_t v33 = 0;
        char v37 = 0;
        int v35 = 0;
      }
      unsigned __int8 v34 = v35 | v37;
    }
    else
    {
      uint64_t v33 = 0;
      unsigned __int8 v34 = 0;
      int v35 = 0;
    }
    operator delete(v11);
    if (__p)
    {
      char v43 = __p;
      operator delete(__p);
    }
    if (v46) {
      operator delete(v46);
    }
    if (v45[0]) {
      operator delete(v45[0]);
    }
    if (v48[0]) {
      operator delete(v48[0]);
    }
    if (v49[0]) {
      operator delete(v49[0]);
    }
    v45[0] = &v50;
    std::vector<Nightingale::lunaMTPreparedData>::__destroy_vector::operator()[abi:nn180100]((void ***)v45);
  }
  return v33 & 0x100000000 | v35 & 0xFFFFFF00 | v34;
}

void Nightingale::prepare_input_slices_for_mt(void *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  int v5 = a2 + 2;
  int v6 = a3 - 2;
  Nightingale::preprocess_temperature_inputs_for_hist_cycle(a1, a2, a3, (uint64_t)v67);
  Nightingale::extract_temperature_data_for_given_range(v5, v6, (uint64_t *)v67, (uint64_t)&v62);
  if (v64[3] && v63 != v62)
  {
    uint64_t v7 = v66;
    unsigned __int8 v61 = *(unsigned char *)(v64[2] + 16);
    if (v66)
    {
      float v8 = 1.0;
      do
      {
        BOOL v10 = (int *)v7[3];
        uint64_t v9 = (int *)v7[4];
        float v11 = 1.0;
        if (v9 != v10)
        {
          uint64_t v12 = v9 - v10;
          double v13 = 0.0;
          do
          {
            int v14 = *v10++;
            double v13 = v13 + (double)v14;
          }
          while (v10 != v9);
          float v11 = 1.0 - v13 / (float)(unint64_t)v12;
        }
        if (v11 < v8)
        {
          unsigned __int8 v61 = *((unsigned char *)v7 + 16);
          float v8 = v11;
        }
        uint64_t v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    uint64_t v15 = 0;
    unint64_t v60 = 0xFFFFFFFDFFFFFFFELL;
    long long v59 = xmmword_22F166EF8;
    do
    {
      *(_DWORD *)((char *)&v59 + v15) += a3 - 13;
      v15 += 4;
    }
    while (v15 != 24);
    uint64_t v46 = &v61;
    uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)v64, &v61, (uint64_t)&std::piecewise_construct, &v46);
    uint64_t v46 = &v61;
    BOOL v17 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)v65, &v61, (uint64_t)&std::piecewise_construct, &v46);
    for (uint64_t i = 0; i != 6; ++i)
    {
      uint64_t v19 = v63 - (unsigned char *)v62;
      if (v63 != v62)
      {
        uint64_t v20 = 0;
        uint64_t v21 = v19 >> 2;
        if ((unint64_t)(v19 >> 2) <= 1) {
          uint64_t v21 = 1;
        }
        while (*((_DWORD *)&v59 + i) != *((_DWORD *)v62 + v20))
        {
          if (v21 == ++v20) {
            goto LABEL_64;
          }
        }
        if ((int)(((unint64_t)v19 >> 2) - 1) > (int)v20)
        {
          LODWORD(v46) = *((_DWORD *)v62 + v20);
          std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&v44, (unsigned char *)v16[3], (unsigned char *)(v16[3] + 4 * v20 + 4));
          std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&v42, (unsigned char *)(v16[3] + 4 * v20 + 4), (unsigned char *)v16[4]);
          uint64_t v47 = 0;
          std::vector<int> __dst = 0;
          uint64_t v49 = 0;
          unint64_t v22 = v44;
          int64_t v23 = v45 - (unsigned char *)v44;
          if (v45 != v44)
          {
            std::vector<int>::__vallocate[abi:nn180100](&v47, v23 >> 2);
            unint64_t v24 = (char *)__dst;
            memmove(__dst, v22, v23);
            std::vector<int> __dst = &v24[v23];
          }
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          long long v25 = v42;
          int64_t v26 = v43 - (unsigned char *)v42;
          if (v43 != v42)
          {
            std::vector<int>::__vallocate[abi:nn180100](&v50, v26 >> 2);
            uint64_t v27 = (char *)v51;
            memmove(v51, v25, v26);
            uint64_t v51 = &v27[v26];
          }
          uint64_t v20 = v20;
          int v28 = (_DWORD *)v17[3];
          memset(v41, 0, sizeof(v41));
          std::vector<BOOL>::__init_with_size[abi:nn180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(v41, v28, &v28[v20 + 1], (4 * v20 + 4) >> 2);
          char v29 = (_DWORD *)v17[4];
          int v30 = (_DWORD *)(v17[3] + 4 * v20 + 4);
          memset(__p, 0, sizeof(__p));
          std::vector<BOOL>::__init_with_size[abi:nn180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(__p, v30, v29, v29 - v30);
          std::vector<BOOL>::vector(&v53, (uint64_t)v41);
          std::vector<BOOL>::vector(&v55, (uint64_t)__p);
          uint64_t v57 = 0;
          uint64_t v58 = 0;
          if (__p[0]) {
            operator delete(__p[0]);
          }
          if (v41[0]) {
            operator delete(v41[0]);
          }
          if (v42)
          {
            char v43 = v42;
            operator delete(v42);
          }
          if (v44)
          {
            std::vector<int> v45 = v44;
            operator delete(v44);
          }
          size_t v31 = v53;
          if (v54 > 0x3F || (double v32 = 0.0, (v54 & 0x3F) != 0))
          {
            int v33 = 0;
            double v32 = 0.0;
            do
            {
              if ((*v31 >> v33)) {
                double v34 = 1.0;
              }
              else {
                double v34 = 0.0;
              }
              double v32 = v32 + v34;
              v31 += v33 == 63;
              if (v33 == 63) {
                int v33 = 0;
              }
              else {
                ++v33;
              }
            }
            while (v33 != (v54 & 0x3F) || v31 != (void *)((char *)v53 + 8 * (v54 >> 6)));
          }
          int v35 = v55;
          if (v56 > 0x3F || (double v36 = 0.0, (v56 & 0x3F) != 0))
          {
            int v37 = 0;
            double v36 = 0.0;
            do
            {
              if ((*v35 >> v37)) {
                double v38 = 1.0;
              }
              else {
                double v38 = 0.0;
              }
              double v36 = v36 + v38;
              v35 += v37 == 63;
              if (v37 == 63) {
                int v37 = 0;
              }
              else {
                ++v37;
              }
            }
            while (v37 != (v56 & 0x3F) || v35 != (void *)((char *)v55 + 8 * (v56 >> 6)));
          }
          LODWORD(v58) = (int)v32;
          HIDWORD(v58) = (int)v36;
          *(float *)&uint64_t v57 = 1.0 - (float)((float)(int)v32 / (float)v54);
          *((float *)&v57 + 1) = 1.0 - (float)((float)(int)v36 / (float)v56);
          std::vector<Nightingale::lunaMTPreparedData>::push_back[abi:nn180100](a4, (uint64_t)&v46);
          if (v55) {
            operator delete(v55);
          }
          if (v53) {
            operator delete(v53);
          }
          if (v50)
          {
            uint64_t v51 = v50;
            operator delete(v50);
          }
          if (v47)
          {
            std::vector<int> __dst = v47;
            operator delete(v47);
          }
        }
      }
LABEL_64:
      ;
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::~__hash_table((uint64_t)v65);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::~__hash_table((uint64_t)v64);
  if (v62)
  {
    char v63 = v62;
    operator delete(v62);
  }
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::~__hash_table((uint64_t)&v69);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<int>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<int>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<int>>>>::~__hash_table((uint64_t)&v68);
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
}

void Nightingale::day2day_noise_check_per_slice(uint64_t *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<BOOL>::reserve((char **)a2, 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3));
  uint64_t v7 = *a1;
  for (uint64_t i = a1[1]; v7 != i; v7 += 120)
  {
    std::vector<int>::vector(&v12, (const std::vector<int> *)(v7 + 8));
    std::vector<float>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v12, (uint64_t)v12.__end_, *(char **)(v7 + 32), *(char **)(v7 + 40), (uint64_t)(*(void *)(v7 + 40) - *(void *)(v7 + 32)) >> 2);
    float v8 = Nightingale::day2day_noise((uint64_t)&v12);
    BOOL v10 = v8 <= a3 && (LODWORD(v8) & 0x7FFFFFFFu) < 0x7F800000;
    BOOL v11 = v10;
    std::vector<BOOL>::push_back(a2, &v11);
    if (v12.__begin_)
    {
      v12.__end_ = v12.__begin_;
      operator delete(v12.__begin_);
    }
  }
}

void Nightingale::signal2noise_check_per_slice(uint64_t *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<BOOL>::reserve((char **)a2, 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3));
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    do
    {
      Nightingale::calculate_snr_noise_power((Nightingale **)(v6 + 8), (Nightingale **)(v6 + 32));
      float v9 = v8;
      float v10 = v8;
      float sw_difference = Nightingale::get_sw_difference((float **)(v6 + 8), (float **)(v6 + 32));
      if ((LODWORD(v10) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        float v12 = NAN;
      }
      else
      {
        float v12 = NAN;
        if ((LODWORD(sw_difference) & 0x7FFFFFFFu) <= 0x7F7FFFFF && v9 != 0.0) {
          float v12 = (float)(sw_difference * sw_difference) / v9;
        }
      }
      BOOL v14 = v12 >= a3 && (LODWORD(v12) & 0x7FFFFFFFu) < 0x7F800000;
      BOOL v15 = v14;
      std::vector<BOOL>::push_back(a2, &v15);
      v6 += 120;
    }
    while (v6 != v7);
  }
}

void Nightingale::missing_spec_check_for_each_window(void *a1@<X0>, void *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  memset(v30, 0, sizeof(v30));
  memset(__p, 0, sizeof(__p));
  std::vector<BOOL>::reserve((char **)v30, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 3));
  std::vector<BOOL>::reserve((char **)__p, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 3));
  float v9 = (void *)*a1;
  for (uint64_t i = (void *)a1[1]; v9 != i; v9 += 15)
  {
    unint64_t v10 = v9[8];
    int v11 = v10 & 0x3F;
    BOOL v12 = v10 <= 0x3F && v11 == 0;
    double v13 = 0.0;
    if (!v12)
    {
      int v14 = 0;
      BOOL v15 = (void *)v9[7];
      uint64_t v16 = &v15[v10 >> 6];
      do
      {
        if ((*v15 >> v14)) {
          double v17 = 1.0;
        }
        else {
          double v17 = 0.0;
        }
        double v13 = v13 + v17;
        v15 += v14 == 63;
        if (v14 == 63) {
          int v14 = 0;
        }
        else {
          ++v14;
        }
      }
      while (v14 != v11 || v15 != v16);
    }
    unint64_t v18 = v9[11];
    int v19 = v18 & 0x3F;
    double v20 = 0.0;
    if (v18 > 0x3F || v19 != 0)
    {
      int v22 = 0;
      int64_t v23 = (void *)v9[10];
      unint64_t v24 = &v23[v18 >> 6];
      do
      {
        if ((*v23 >> v22)) {
          double v25 = 1.0;
        }
        else {
          double v25 = 0.0;
        }
        double v20 = v20 + v25;
        v23 += v22 == 63;
        if (v22 == 63) {
          int v22 = 0;
        }
        else {
          ++v22;
        }
      }
      while (v22 != v19 || v23 != v24);
    }
    float v26 = v13;
    float v27 = v20;
    BOOL v28 = v26 >= a3;
    std::vector<BOOL>::push_back((uint64_t)v30, &v28);
    BOOL v28 = v27 >= a4;
    std::vector<BOOL>::push_back((uint64_t)__p, &v28);
  }
  std::vector<BOOL>::vector(a2, (uint64_t)v30);
  std::vector<BOOL>::vector(a2 + 3, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v30[0]) {
    operator delete(v30[0]);
  }
}

uint64_t Nightingale::predict_on_day_range_historical(float *a1, uint64_t *a2)
{
  uint64_t v3 = *(int **)a1;
  int8x8_t v2 = (int *)*((void *)a1 + 1);
  if (v2 == *(int **)a1) {
    return 0;
  }
  int v5 = a1;
  int v6 = *v3;
  int v7 = *v3;
  float v8 = *(int **)a1;
  do
  {
    int v10 = *v8;
    v8 += 30;
    int v9 = v10;
    if (v10 < v7)
    {
      int v6 = v9;
      int v7 = v9;
    }
  }
  while (v8 != v2);
  unint64_t v11 = 0;
  int v12 = 0;
  uint64_t v44 = 0;
  std::vector<int> __p = 0;
  *(void *)uint64_t v42 = 0;
  *(void *)char v43 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  while (1)
  {
    uint64_t v13 = *a2;
    BOOL v15 = __p;
    int v14 = v46;
    int64_t v16 = (char *)v46 - (char *)__p;
    if ((int)((unint64_t)((char *)v46 - (char *)__p) >> 2) >= 1)
    {
      if (v16 != 4) {
        a1 = (float *)memmove(__p, __p + 1, v16 - 4);
      }
      int v14 = --v46;
    }
    if (*(unsigned char *)(v13 + 5 * v11))
    {
      if (((v11 != 0) & ~v12) != 0) {
        goto LABEL_61;
      }
      float sw_difference = Nightingale::get_sw_difference((float **)&v3[30 * v11 + 2], (float **)&v3[30 * v11 + 8]);
      float Sigmoid = Nightingale::getSigmoid(v18, sw_difference);
      float v20 = Sigmoid;
      uint64_t v21 = v46;
      if (v46 >= v47)
      {
        a1 = __p;
        uint64_t v23 = v46 - __p;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62) {
          goto LABEL_67;
        }
        uint64_t v25 = (char *)v47 - (char *)__p;
        if (((char *)v47 - (char *)__p) >> 1 > v24) {
          unint64_t v24 = v25 >> 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          float v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v47, v26);
          a1 = __p;
          uint64_t v21 = v46;
        }
        else
        {
          float v27 = 0;
        }
        double v32 = (float *)&v27[4 * v23];
        float *v32 = v20;
        int v22 = v32 + 1;
        while (v21 != a1)
        {
          int v33 = *((_DWORD *)v21-- - 1);
          *((_DWORD *)v32-- - 1) = v33;
        }
        std::vector<int> __p = v32;
        uint64_t v47 = (float *)&v27[4 * v26];
        if (a1) {
          operator delete(a1);
        }
      }
      else
      {
        *uint64_t v46 = Sigmoid;
        int v22 = v46 + 1;
      }
      uint64_t v46 = v22;
      int v12 = 1;
    }
    else
    {
      if (v14 >= v47)
      {
        uint64_t v28 = v14 - __p;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62) {
LABEL_67:
        }
          abort();
        uint64_t v30 = (char *)v47 - (char *)__p;
        if (((char *)v47 - (char *)__p) >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          a1 = (float *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v47, v31);
          BOOL v15 = __p;
          int v14 = v46;
        }
        else
        {
          a1 = 0;
        }
        double v34 = &a1[v28];
        float *v34 = NAN;
        int v22 = v34 + 1;
        while (v14 != v15)
        {
          int v35 = *((_DWORD *)v14-- - 1);
          *((_DWORD *)v34-- - 1) = v35;
        }
        std::vector<int> __p = v34;
        uint64_t v47 = &a1[v31];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        float *v14 = NAN;
        int v22 = v14 + 1;
      }
      uint64_t v46 = v22;
      ++HIDWORD(v44);
    }
    double v36 = &v3[30 * v11];
    if (*v36 < v6) {
      goto LABEL_60;
    }
    uint64_t v37 = v13 + 5 * v11;
    if (!*(unsigned char *)(v37 + 4))
    {
      LODWORD(v44) = v44 + 1;
      goto LABEL_60;
    }
    if (!*(unsigned char *)(v37 + 3))
    {
      ++v43[1];
      goto LABEL_60;
    }
    uint64_t v38 = v13 + 5 * v11;
    if (!*(unsigned char *)(v38 + 1))
    {
      ++v43[0];
      goto LABEL_60;
    }
    if (!*(unsigned char *)(v38 + 2))
    {
      ++v42[0];
      goto LABEL_60;
    }
    a1 = __p;
    if (v22 != __p) {
      break;
    }
LABEL_60:
    ++v11;
    uint64_t v3 = *(int **)v5;
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)v5 + 1) - *(void *)v5) >> 3) <= v11)
    {
LABEL_61:
      uint64_t v40 = 0;
      Nightingale::get_failure_reasons_for_historical((Nightingale *)a1, SHIDWORD(v44), v43[0], v42[0], v42[1], v44, v43[1]);
      goto LABEL_62;
    }
  }
  float v39 = Nightingale::mean((Nightingale *)__p, (const float *)((unint64_t)((char *)v22 - (char *)__p) >> 2));
  if (v39 < 0.55 || v39 > 0.73)
  {
    ++v42[1];
    goto LABEL_60;
  }
  uint64_t v40 = *v36 | 0x100000000;
LABEL_62:
  if (__p) {
    operator delete(__p);
  }
  return v40;
}

uint64_t Nightingale::get_failure_reasons_for_historical(Nightingale *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v13 = (int *)operator new(0x18uLL);
  int *v13 = a2;
  v13[1] = a3;
  _OWORD v13[2] = a4;
  v13[3] = a5;
  uint64_t v14 = 1;
  int v15 = a2;
  int64_t v16 = v13;
  v13[4] = a6;
  v13[5] = a7;
  do
  {
    int v17 = v13[v14];
    BOOL v18 = v15 < v17;
    if (v15 <= v17) {
      int v15 = v13[v14];
    }
    if (v18) {
      int64_t v16 = &v13[v14];
    }
    ++v14;
  }
  while (v14 != 6);
  int v19 = *v16;
  if (*v16 == a2)
  {
    uint64_t v20 = 1;
  }
  else if (v19 == a5)
  {
    uint64_t v20 = 2;
  }
  else if (v19 == a3)
  {
    uint64_t v20 = 3;
  }
  else if (v19 == a4)
  {
    uint64_t v20 = 4;
  }
  else if (v19 == a6)
  {
    uint64_t v20 = 5;
  }
  else if (v19 == a7)
  {
    uint64_t v20 = 6;
  }
  else
  {
    uint64_t v20 = 9;
  }
  operator delete(v13);
  return v20;
}

float Nightingale::day2day_noise(uint64_t a1)
{
  uint64_t v1 = *(float **)a1;
  uint64_t v2 = (*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if ((int)v2 < 3) {
    return NAN;
  }
  float v4 = *v1;
  float v5 = v1[1];
  uint64_t v3 = v1 + 2;
  uint64_t v6 = (v2 - 1) - 1;
  float v7 = 0.0;
  float v8 = 0.0;
  do
  {
    double v9 = v5 + v4 * -0.5;
    float v4 = v5;
    float v10 = *v3++;
    float v5 = v10;
    float v11 = (v9 + v10 * -0.5) * (v9 + v10 * -0.5);
    BOOL v12 = (LODWORD(v11) & 0x7FFFFFFF) == 0;
    if ((LODWORD(v11) - 1) < 0x7FFFFF) {
      BOOL v12 = 1;
    }
    int v14 = ((LODWORD(v11) & 0x7FFFFFFFu) - 0x800000) >> 24 < 0x7F && v11 >= 0.0 || v12;
    if (!v14) {
      float v11 = -0.0;
    }
    float v8 = v8 + v11;
    if (v14) {
      float v7 = v7 + 1.0;
    }
    --v6;
  }
  while (v6);
  if (v7 == 0.0) {
    return NAN;
  }
  else {
    return (float)(v8 / v7) / 1.5;
  }
}

void Nightingale::extract_temperature_data_for_given_range(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  float v4 = (void **)a4;
  *(void *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  uint64_t v5 = a4 + 64;
  *(_DWORD *)(a4 + 56) = 1065353216;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_DWORD *)(a4 + 96) = 1065353216;
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6 != *a3)
  {
    unint64_t v8 = 0;
    uint64_t v116 = (uint64_t)(v4 + 2);
    int v118 = v4;
    uint64_t v9 = (uint64_t)(v4 + 3);
    do
    {
      int v10 = *(_DWORD *)(v7 + 4 * v8);
      if (v10 <= a2)
      {
        if (v10 < a1) {
          break;
        }
        BOOL v12 = v118[1];
        unint64_t v11 = (unint64_t)v118[2];
        if ((unint64_t)v12 >= v11)
        {
          int v14 = *v118;
          uint64_t v15 = ((char *)v12 - (unsigned char *)*v118) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
LABEL_147:
          }
            abort();
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            int v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v116, v18);
            int v14 = *v118;
            BOOL v12 = v118[1];
          }
          else
          {
            int v19 = 0;
          }
          uint64_t v20 = &v19[4 * v15];
          *(_DWORD *)uint64_t v20 = v10;
          uint64_t v13 = v20 + 4;
          while (v12 != v14)
          {
            int v21 = *--v12;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *int v118 = v20;
          v118[1] = v13;
          v118[2] = &v19[4 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *BOOL v12 = v10;
          uint64_t v13 = v12 + 1;
        }
        v118[1] = v13;
        for (uint64_t i = (unsigned __int8 *)a3[5]; i; uint64_t i = *(unsigned __int8 **)i)
        {
          int v121 = i + 16;
          uint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v9, i + 16, (uint64_t)&std::piecewise_construct, &v121);
          unint64_t v24 = v23;
          uint64_t v25 = *((void *)i + 3);
          unint64_t v26 = (char *)v23[4];
          uint64_t v27 = (uint64_t)(v23 + 5);
          unint64_t v28 = v23[5];
          if ((unint64_t)v26 >= v28)
          {
            uint64_t v30 = (char *)v23[3];
            uint64_t v31 = (v26 - v30) >> 2;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 62) {
              goto LABEL_147;
            }
            uint64_t v33 = v28 - (void)v30;
            if (v33 >> 1 > v32) {
              unint64_t v32 = v33 >> 1;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              int v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v27, v34);
              uint64_t v30 = (char *)v24[3];
              unint64_t v26 = (char *)v24[4];
            }
            else
            {
              int v35 = 0;
            }
            double v36 = &v35[4 * v31];
            *(_DWORD *)double v36 = *(_DWORD *)(v25 + 4 * v8);
            unint64_t v29 = v36 + 4;
            while (v26 != v30)
            {
              int v37 = *((_DWORD *)v26 - 1);
              v26 -= 4;
              *((_DWORD *)v36 - 1) = v37;
              v36 -= 4;
            }
            v24[3] = v36;
            v24[4] = v29;
            v24[5] = &v35[4 * v34];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v26 = *(_DWORD *)(v25 + 4 * v8);
            unint64_t v29 = v26 + 4;
          }
          v24[4] = v29;
        }
        for (int j = (unsigned __int8 *)a3[10]; j; int j = *(unsigned __int8 **)j)
        {
          int v121 = j + 16;
          float v39 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<float>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<float>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<float>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v5, j + 16, (uint64_t)&std::piecewise_construct, &v121);
          uint64_t v40 = v39;
          uint64_t v41 = *((void *)j + 3);
          uint64_t v42 = (char *)v39[4];
          uint64_t v43 = (uint64_t)(v39 + 5);
          unint64_t v44 = v39[5];
          if ((unint64_t)v42 >= v44)
          {
            uint64_t v46 = (char *)v39[3];
            uint64_t v47 = (v42 - v46) >> 2;
            unint64_t v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 62) {
              goto LABEL_147;
            }
            uint64_t v49 = v44 - (void)v46;
            if (v49 >> 1 > v48) {
              unint64_t v48 = v49 >> 1;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v48;
            }
            if (v50)
            {
              uint64_t v51 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v43, v50);
              uint64_t v46 = (char *)v40[3];
              uint64_t v42 = (char *)v40[4];
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v52 = &v51[4 * v47];
            *(_DWORD *)uint64_t v52 = *(_DWORD *)(v41 + 4 * v8);
            std::vector<int> v45 = v52 + 4;
            while (v42 != v46)
            {
              int v53 = *((_DWORD *)v42 - 1);
              v42 -= 4;
              *((_DWORD *)v52 - 1) = v53;
              v52 -= 4;
            }
            v40[3] = v52;
            v40[4] = v45;
            v40[5] = &v51[4 * v50];
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v42 = *(_DWORD *)(v41 + 4 * v8);
            std::vector<int> v45 = v42 + 4;
          }
          v40[4] = v45;
        }
      }
      ++v8;
      uint64_t v7 = *a3;
      uint64_t v6 = a3[1];
    }
    while (v8 < (v6 - *a3) >> 2);
    float v4 = v118;
    if (v6 != v7)
    {
      int v54 = *(_DWORD *)(v6 - 4);
      int v55 = v54 - a1;
      BOOL v56 = v54 > a1 && v54 < a2;
      if (v56 && v55 >= 1)
      {
        for (int k = 0; k != v55; ++k)
        {
          long long v59 = *v4;
          uint64_t v58 = v4[1];
          uint64_t v60 = (char *)v58 - (unsigned char *)*v4;
          uint64_t v61 = ((v60 << 30) - 0x100000000) >> 32;
          unint64_t v62 = (unint64_t)v4[2];
          if ((unint64_t)v58 >= v62)
          {
            uint64_t v64 = v60 >> 2;
            unint64_t v65 = (v60 >> 2) + 1;
            if (v65 >> 62) {
              goto LABEL_147;
            }
            uint64_t v66 = v62 - (void)v59;
            if (v66 >> 1 > v65) {
              unint64_t v65 = v66 >> 1;
            }
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v67 = v65;
            }
            if (v67)
            {
              uint64_t v68 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v116, v67);
              uint64_t v69 = *v118;
              uint64_t v58 = v118[1];
            }
            else
            {
              uint64_t v68 = 0;
              uint64_t v69 = v59;
            }
            unint64_t v70 = &v68[4 * v64];
            *(_DWORD *)unint64_t v70 = v59[v61];
            char v63 = v70 + 4;
            if (v58 == v69)
            {
              float v4 = v118;
            }
            else
            {
              float v4 = v118;
              do
              {
                int v71 = *--v58;
                *((_DWORD *)v70 - 1) = v71;
                v70 -= 4;
              }
              while (v58 != v69);
            }
            unsigned __int8 *v4 = v70;
            v4[1] = v63;
            void v4[2] = &v68[4 * v67];
            if (v69) {
              operator delete(v69);
            }
          }
          else
          {
            *uint64_t v58 = v59[v61];
            char v63 = v58 + 1;
          }
          v4[1] = v63;
          for (uint64_t m = v4[5]; m; uint64_t m = (void *)*m)
          {
            unint64_t v73 = m[5];
            long long v74 = (char *)m[4];
            if ((unint64_t)v74 >= v73)
            {
              int v76 = (char *)m[3];
              uint64_t v77 = (v74 - v76) >> 2;
              unint64_t v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 62) {
                goto LABEL_147;
              }
              uint64_t v79 = v73 - (void)v76;
              if (v79 >> 1 > v78) {
                unint64_t v78 = v79 >> 1;
              }
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v78;
              }
              if (v80)
              {
                unint64_t v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(m + 5), v80);
                int v76 = (char *)m[3];
                long long v74 = (char *)m[4];
              }
              else
              {
                unint64_t v81 = 0;
              }
              float v82 = &v81[4 * v77];
              *(_DWORD *)float v82 = 2143289344;
              long long v75 = v82 + 4;
              while (v74 != v76)
              {
                int v83 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v82 - 1) = v83;
                v82 -= 4;
              }
              m[3] = v82;
              m[4] = v75;
              m[5] = &v81[4 * v80];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(_DWORD *)long long v74 = 2143289344;
              long long v75 = v74 + 4;
            }
            m[4] = v75;
          }
          for (uint64_t n = v4[10]; n; uint64_t n = (void *)*n)
          {
            unint64_t v85 = n[5];
            uint64_t v86 = (char *)n[4];
            if ((unint64_t)v86 >= v85)
            {
              uint64_t v88 = (char *)n[3];
              uint64_t v89 = (v86 - v88) >> 2;
              unint64_t v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 62) {
                goto LABEL_147;
              }
              uint64_t v91 = v85 - (void)v88;
              if (v91 >> 1 > v90) {
                unint64_t v90 = v91 >> 1;
              }
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v92 = v90;
              }
              if (v92)
              {
                unint64_t v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(n + 5), v92);
                uint64_t v88 = (char *)n[3];
                uint64_t v86 = (char *)n[4];
              }
              else
              {
                unint64_t v93 = 0;
              }
              uint64_t v94 = &v93[4 * v89];
              *(_DWORD *)uint64_t v94 = 0;
              uint64_t v87 = v94 + 4;
              while (v86 != v88)
              {
                int v95 = *((_DWORD *)v86 - 1);
                v86 -= 4;
                *((_DWORD *)v94 - 1) = v95;
                v94 -= 4;
              }
              n[3] = v94;
              n[4] = v87;
              n[5] = &v93[4 * v92];
              if (v88) {
                operator delete(v88);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v86 = 0;
              uint64_t v87 = v86 + 4;
            }
            n[4] = v87;
          }
        }
      }
    }
  }
  unint64_t v97 = (unint64_t)*v4;
  int v96 = (char *)v4[1];
  if (*v4 != v96)
  {
    unint64_t v98 = v96 - 4;
    if ((unint64_t)v98 > v97)
    {
      unint64_t v99 = v97 + 4;
      do
      {
        int v100 = *(_DWORD *)(v99 - 4);
        *(_DWORD *)(v99 - 4) = *(_DWORD *)v98;
        *(_DWORD *)unint64_t v98 = v100;
        v98 -= 4;
        BOOL v101 = v99 >= (unint64_t)v98;
        v99 += 4;
      }
      while (!v101);
    }
  }
  for (iuint64_t i = v4[5]; ii; iuint64_t i = (void *)*ii)
  {
    unint64_t v103 = ii[3];
    uint64_t v104 = ii[4];
    uint64_t v105 = (_DWORD *)(v104 - 4);
    if (v103 != v104 && (unint64_t)v105 > v103)
    {
      unint64_t v107 = v103 + 4;
      do
      {
        int v108 = *(_DWORD *)(v107 - 4);
        *(_DWORD *)(v107 - 4) = *v105;
        *v105-- = v108;
        BOOL v101 = v107 >= (unint64_t)v105;
        v107 += 4;
      }
      while (!v101);
    }
  }
  for (jint j = v4[10]; jj; jint j = (void *)*jj)
  {
    unint64_t v110 = jj[3];
    uint64_t v111 = jj[4];
    long long v112 = (_DWORD *)(v111 - 4);
    if (v110 != v111 && (unint64_t)v112 > v110)
    {
      unint64_t v114 = v110 + 4;
      do
      {
        int v115 = *(_DWORD *)(v114 - 4);
        *(_DWORD *)(v114 - 4) = *v112;
        *v112-- = v115;
        BOOL v101 = v114 >= (unint64_t)v112;
        v114 += 4;
      }
      while (!v101);
    }
  }
}

uint64_t std::vector<Nightingale::lunaMTPreparedData>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x222222222222222) {
      abort();
    }
    unint64_t v11 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x111111111111111) {
      unint64_t v13 = 0x222222222222222;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::lunaMTPreparedData>>(v4, v13);
    }
    else {
      int v14 = 0;
    }
    uint64_t v15 = v14;
    unint64_t v16 = &v14[120 * v10];
    unint64_t v18 = &v14[120 * v13];
    std::construct_at[abi:nn180100]<Nightingale::lunaMTPreparedData,Nightingale::lunaMTPreparedData const&,Nightingale::lunaMTPreparedData*>((uint64_t)v16, a2);
    uint64_t v17 = v16 + 120;
    std::vector<Nightingale::lunaMTPreparedData>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<Nightingale::lunaMTPreparedData>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::construct_at[abi:nn180100]<Nightingale::lunaMTPreparedData,Nightingale::lunaMTPreparedData const&,Nightingale::lunaMTPreparedData*>(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 120;
  }
  a1[1] = v9;
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::lunaMTSpecs>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x3333333333333334) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(5 * a2);
}

char *std::vector<Nightingale::lunaMTSpecs>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x3333333333333334) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::lunaMTSpecs>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[5 * v4];
  return result;
}

void std::vector<Nightingale::lunaMTPreparedData>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 15;
        std::__destroy_at[abi:nn180100]<Nightingale::lunaMTPreparedData,0>(v4);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:nn180100]<Nightingale::lunaMTPreparedData,0>(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
}

char *std::vector<float>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    unint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      abort();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      unint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    unint64_t v28 = &v18[4 * v15];
    std::vector<int> __p = v18;
    unint64_t v34 = v28;
    double v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)unint64_t v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    int v35 = v30;
    unint64_t v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    int v21 = &__src[4 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    unint64_t v24 = &v5[4 * a5];
    uint64_t v25 = &v23[-4 * a5];
    unint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      unint64_t v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)unint64_t v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  int v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    unint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::vector<BOOL>::__init_with_size[abi:nn180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(void *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v7 = result;
    std::vector<BOOL>::__vallocate[abi:nn180100](result, a4);
    return std::vector<BOOL>::__construct_at_end<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(v7, a2, a3, a4);
  }
  return result;
}

void *std::vector<BOOL>::__construct_at_end<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(void *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v4 = result[1];
  unint64_t v5 = v4 + a4;
  result[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*result + 8 * v6) = 0;
  }
  if (a2 != a3)
  {
    int v7 = v4 & 0x3F;
    unint64_t v8 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      uint64_t v9 = 1 << v7;
      if (*a2) {
        uint64_t v10 = *v8 | v9;
      }
      else {
        uint64_t v10 = *v8 & ~v9;
      }
      uint64_t *v8 = v10;
      ++a2;
      v8 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t std::construct_at[abi:nn180100]<Nightingale::lunaMTPreparedData,Nightingale::lunaMTPreparedData const&,Nightingale::lunaMTPreparedData*>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::vector<int>::vector((std::vector<int> *)(a1 + 8), (const std::vector<int> *)(a2 + 8));
  std::vector<int>::vector((std::vector<int> *)(a1 + 32), (const std::vector<int> *)(a2 + 32));
  std::vector<BOOL>::vector((void *)(a1 + 56), a2 + 56);
  std::vector<BOOL>::vector((void *)(a1 + 80), a2 + 80);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

void std::vector<Nightingale::lunaMTPreparedData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 120;
    v4 -= 120;
    std::construct_at[abi:nn180100]<Nightingale::lunaMTPreparedData,Nightingale::lunaMTPreparedData,Nightingale::lunaMTPreparedData*>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::lunaMTPreparedData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(120 * a2);
}

__n128 std::construct_at[abi:nn180100]<Nightingale::lunaMTPreparedData,Nightingale::lunaMTPreparedData,Nightingale::lunaMTPreparedData*>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v2;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v3 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  __n128 result = *(__n128 *)(a2 + 104);
  *(__n128 *)(a1 + 104) = result;
  return result;
}

uint64_t std::__split_buffer<Nightingale::lunaMTPreparedData>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    std::__destroy_at[abi:nn180100]<Nightingale::lunaMTPreparedData,0>((void *)(i - 120));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Nightingale::ngt_luna_fw_dl_tmp_process::ngt_luna_fw_dl_tmp_process(Nightingale::ngt_luna_fw_dl_tmp_process *this)
{
}

void sub_22F14EE2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<Nightingale::FwPredictorWrapper_t>::operator()[abi:nn180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL Nightingale::FwPredictorWrapper_t::init(Nightingale::FwPredictorWrapper_t *this)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v2;

  if (!*((void *)this + 3)) {
    goto LABEL_11;
  }
  uint64_t v4 = objc_opt_new();
  uint64_t v5 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v4;

  if (!*((void *)this + 2)) {
    goto LABEL_11;
  }
  [*((id *)this + 3) setComputeUnits:0];
  id v29 = 0;
  uint64_t v6 = [objc_alloc(MEMORY[0x263F00DA8]) initWithShape:&unk_26E28F8A8 dataType:65600 error:&v29];
  id v7 = v29;
  uint64_t v8 = (void *)*((void *)this + 1);
  *((void *)this + 1) = v6;

  if (!*((void *)this + 1)) {
    goto LABEL_12;
  }
  uint64_t v9 = [fwEnddet_lstm alloc];
  uint64_t v10 = *((void *)this + 3);
  id v28 = v7;
  uint64_t v11 = [(fwEnddet_lstm *)v9 initWithConfiguration:v10 error:&v28];
  id v12 = v28;

  unint64_t v13 = (void *)*((void *)this + 7);
  *((void *)this + 7) = v11;

  if (!v12)
  {
    uint64_t v15 = objc_opt_new();
    uint64_t v16 = (void *)*((void *)this + 3);
    *((void *)this + 3) = v15;

    if (*((void *)this + 3))
    {
      uint64_t v17 = objc_opt_new();
      unint64_t v18 = (void *)*((void *)this + 2);
      *((void *)this + 2) = v17;

      if (*((void *)this + 2))
      {
        [*((id *)this + 3) setComputeUnits:0];
        id v27 = 0;
        uint64_t v19 = [objc_alloc(MEMORY[0x263F00DA8]) initWithShape:&unk_26E28F8C0 dataType:65600 error:&v27];
        id v7 = v27;
        uint64_t v20 = *(void **)this;
        *(void *)this = v19;

        if (*(void *)this)
        {
          int v21 = [fwEnddet_rf alloc];
          uint64_t v22 = *((void *)this + 3);
          id v26 = v7;
          uint64_t v23 = [(fwEnddet_rf *)v21 initWithConfiguration:v22 error:&v26];
          id v12 = v26;

          unint64_t v24 = (void *)*((void *)this + 5);
          *((void *)this + 5) = v23;

          BOOL v14 = v12 == 0;
          goto LABEL_6;
        }
LABEL_12:
        BOOL v14 = 0;
        goto LABEL_13;
      }
    }
LABEL_11:
    id v7 = 0;
    goto LABEL_12;
  }
  BOOL v14 = 0;
LABEL_6:
  id v7 = v12;
LABEL_13:

  return v14;
}

void sub_22F14F07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Nightingale::ngt_luna_fw_dl_tmp_process::~ngt_luna_fw_dl_tmp_process(id **this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<Nightingale::FwPredictorWrapper_t>::operator()[abi:nn180100]((uint64_t)this, v1);
  }
}

{
  id *v1;

  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<Nightingale::FwPredictorWrapper_t>::operator()[abi:nn180100]((uint64_t)this, v1);
  }
}

uint64_t Nightingale::ngt_luna_fw_dl_tmp_process::ngt_luna_fwEndDetRF(void **a1, uint64_t *a2, uint64_t a3)
{
  return 0;
}

uint64_t Nightingale::FwPredictorWrapper_t::predict_fwEndDetRF(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x88uLL);
  id v7 = v6;
  uint64_t v8 = 0;
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((void *)v6 + 16) = 0;
  uint64_t v9 = *a2;
  do
  {
    *(void *)&v6[v8] = *(void *)(v9 + v8);
    v8 += 8;
  }
  while (v8 != 136);
  memmove((void *)[(id)*a1 dataPointer], v6, 0x88uLL);
  uint64_t v10 = [[fwEnddet_rfInput alloc] initWithInput:*a1];
  uint64_t v11 = (void *)a1[4];
  a1[4] = v10;

  id v12 = [(id)a1[5] model];
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[2];
  id v56 = 0;
  uint64_t v15 = [v12 predictionFromFeatures:v13 options:v14 error:&v56];
  id v16 = v56;

  uint64_t v17 = [fwEnddet_rfOutput alloc];
  unint64_t v18 = [v15 featureValueForName:@"classLabel"];
  uint64_t v19 = [v18 int64Value];
  uint64_t v20 = [v15 featureValueForName:@"classProbability"];
  int v21 = [v20 dictionaryValue];
  uint64_t v22 = [(fwEnddet_rfOutput *)v17 initWithClassLabel:v19 classProbability:v21];

  uint64_t v23 = [(fwEnddet_rfOutput *)v22 classProbability];
  unint64_t v24 = [v23 objectForKeyedSubscript:&unk_26E28F830];
  [v24 doubleValue];
  float v26 = v25;
  unint64_t v27 = *(void *)(a3 + 16);
  id v28 = *(float **)(a3 + 8);
  if ((unint64_t)v28 >= v27)
  {
    uint64_t v30 = *(float **)a3;
    uint64_t v31 = ((uint64_t)v28 - *(void *)a3) >> 2;
    unint64_t v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62) {
      abort();
    }
    uint64_t v33 = v27 - (void)v30;
    if (v33 >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      int v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a3 + 16, v34);
      uint64_t v30 = *(float **)a3;
      id v28 = *(float **)(a3 + 8);
    }
    else
    {
      int v35 = 0;
    }
    double v36 = (float *)&v35[4 * v31];
    uint64_t v37 = &v35[4 * v34];
    *double v36 = v26;
    id v29 = v36 + 1;
    while (v28 != v30)
    {
      int v38 = *((_DWORD *)v28-- - 1);
      *((_DWORD *)v36-- - 1) = v38;
    }
    *(void *)a3 = v36;
    *(void *)(a3 + 8) = v29;
    *(void *)(a3 + 16) = v37;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *id v28 = v26;
    id v29 = v28 + 1;
  }
  *(void *)(a3 + 8) = v29;

  float v39 = [(fwEnddet_rfOutput *)v22 classProbability];
  uint64_t v40 = [v39 objectForKeyedSubscript:&unk_26E28F7E8];
  [v40 doubleValue];
  float v42 = v41;
  unint64_t v44 = *(float **)(a3 + 8);
  unint64_t v43 = *(void *)(a3 + 16);
  if ((unint64_t)v44 >= v43)
  {
    uint64_t v46 = *(float **)a3;
    uint64_t v47 = ((uint64_t)v44 - *(void *)a3) >> 2;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 62) {
      abort();
    }
    uint64_t v49 = v43 - (void)v46;
    if (v49 >> 1 > v48) {
      unint64_t v48 = v49 >> 1;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v48;
    }
    if (v50)
    {
      uint64_t v51 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a3 + 16, v50);
      uint64_t v46 = *(float **)a3;
      unint64_t v44 = *(float **)(a3 + 8);
    }
    else
    {
      uint64_t v51 = 0;
    }
    uint64_t v52 = (float *)&v51[4 * v47];
    int v53 = &v51[4 * v50];
    *uint64_t v52 = v42;
    std::vector<int> v45 = v52 + 1;
    while (v44 != v46)
    {
      int v54 = *((_DWORD *)v44-- - 1);
      *((_DWORD *)v52-- - 1) = v54;
    }
    *(void *)a3 = v52;
    *(void *)(a3 + 8) = v45;
    *(void *)(a3 + 16) = v53;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *unint64_t v44 = v42;
    std::vector<int> v45 = v44 + 1;
  }
  *(void *)(a3 + 8) = v45;

  operator delete(v7);
  return 0;
}

void sub_22F14F47C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t Nightingale::ngt_luna_fw_dl_tmp_process::ngt_luna_fwEndFlagDLTmp(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return 0;
}

uint64_t Nightingale::FwPredictorWrapper_t::predict_fwEndFlagDLTmp(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x168uLL);
  id v7 = v6;
  uint64_t v8 = 0;
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_OWORD *)v6 + 18) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((void *)v6 + 44) = 0;
  uint64_t v9 = *a2;
  do
  {
    *(void *)&v6[v8] = *(void *)(v9 + v8);
    v8 += 8;
  }
  while (v8 != 360);
  memmove((void *)[*(id *)(a1 + 8) dataPointer], v6, 0x168uLL);
  uint64_t v10 = [[fwEnddet_lstmInput alloc] initWithIn:*(void *)(a1 + 8) lstm_1_h_in:0 lstm_1_c_in:0];
  uint64_t v11 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v10;

  id v12 = [*(id *)(a1 + 56) model];
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 16);
  id v42 = 0;
  double v41 = [v12 predictionFromFeatures:v13 options:v14 error:&v42];
  id v40 = v42;

  uint64_t v15 = [fwEnddet_lstmOutput alloc];
  id v16 = [v41 featureValueForName:@"out"];
  uint64_t v17 = [v16 multiArrayValue];
  unint64_t v18 = [v41 featureValueForName:@"lstm_1_h_out"];
  uint64_t v19 = [v18 multiArrayValue];
  uint64_t v20 = [v41 featureValueForName:@"lstm_1_c_out"];
  int v21 = [v20 multiArrayValue];
  uint64_t v22 = [(fwEnddet_lstmOutput *)v15 initWithOut:v17 lstm_1_h_out:v19 lstm_1_c_out:v21];

  for (uint64_t i = 0; i != 34; ++i)
  {
    unint64_t v24 = [(fwEnddet_lstmOutput *)v22 out];
    double v25 = [v24 objectAtIndexedSubscript:i];
    [v25 doubleValue];
    float v27 = v26;
    id v29 = *(float **)(a3 + 8);
    unint64_t v28 = *(void *)(a3 + 16);
    if ((unint64_t)v29 >= v28)
    {
      uint64_t v31 = *(float **)a3;
      uint64_t v32 = ((uint64_t)v29 - *(void *)a3) >> 2;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 62) {
        abort();
      }
      uint64_t v34 = v28 - (void)v31;
      if (v34 >> 1 > v33) {
        unint64_t v33 = v34 >> 1;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        double v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a3 + 16, v35);
        uint64_t v31 = *(float **)a3;
        id v29 = *(float **)(a3 + 8);
      }
      else
      {
        double v36 = 0;
      }
      uint64_t v37 = (float *)&v36[4 * v32];
      *uint64_t v37 = v27;
      uint64_t v30 = v37 + 1;
      while (v29 != v31)
      {
        int v38 = *((_DWORD *)v29-- - 1);
        *((_DWORD *)v37-- - 1) = v38;
      }
      *(void *)a3 = v37;
      *(void *)(a3 + 8) = v30;
      *(void *)(a3 + 16) = &v36[4 * v35];
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *id v29 = v27;
      uint64_t v30 = v29 + 1;
    }
    *(void *)(a3 + 8) = v30;
  }
  operator delete(v7);

  return 0;
}

void sub_22F14F80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  operator delete(v11);
  _Unwind_Resume(a1);
}

void Nightingale::ngt_luna_period_dl_tmp_process::ngt_luna_period_dl_tmp_process(Nightingale::ngt_luna_period_dl_tmp_process *this)
{
}

void sub_22F14F908(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<Nightingale::fwPredictorWrapper_t>::operator()[abi:nn180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL Nightingale::PeriodPredictorWrapper_t::init(Nightingale::PeriodPredictorWrapper_t *this)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v2;

  if (!*((void *)this + 2)
    || (uint64_t v4 = objc_opt_new(),
        uint64_t v5 = (void *)*((void *)this + 1),
        *((void *)this + 1) = v4,
        v5,
        !*((void *)this + 1)))
  {
    id v7 = 0;
    goto LABEL_6;
  }
  [*((id *)this + 2) setComputeUnits:0];
  id v17 = 0;
  uint64_t v6 = [objc_alloc(MEMORY[0x263F00DA8]) initWithShape:&unk_26E28F8D8 dataType:65600 error:&v17];
  id v7 = v17;
  uint64_t v8 = *(void **)this;
  *(void *)this = v6;

  if (!*(void *)this)
  {
LABEL_6:
    BOOL v14 = 0;
    goto LABEL_7;
  }
  uint64_t v9 = [period_lstm alloc];
  uint64_t v10 = *((void *)this + 2);
  id v16 = v7;
  uint64_t v11 = [(period_lstm *)v9 initWithConfiguration:v10 error:&v16];
  id v12 = v16;

  uint64_t v13 = (void *)*((void *)this + 4);
  *((void *)this + 4) = v11;

  BOOL v14 = v12 == 0;
  id v7 = v12;
LABEL_7:

  return v14;
}

void sub_22F14FA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Nightingale::ngt_luna_period_dl_tmp_process::~ngt_luna_period_dl_tmp_process(id **this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<Nightingale::fwPredictorWrapper_t>::operator()[abi:nn180100]((uint64_t)this, v1);
  }
}

{
  id *v1;

  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<Nightingale::fwPredictorWrapper_t>::operator()[abi:nn180100]((uint64_t)this, v1);
  }
}

uint64_t Nightingale::ngt_luna_period_dl_tmp_process::ngt_luna_periodRegressorLSTM(void **a1, uint64_t **a2, uint64_t a3)
{
  return 0;
}

uint64_t Nightingale::PeriodPredictorWrapper_t::predict_periodRegressorLSTM(void *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x5A0uLL);
  bzero(v6, 0x5A0uLL);
  uint64_t v7 = 0;
  uint64_t v8 = a2[9];
  uint64_t v9 = *a2;
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[6];
  do
  {
    uint64_t v12 = *v8++;
    uint64_t v13 = &v6[v7];
    *(void *)uint64_t v13 = v12;
    uint64_t v14 = *v9++;
    *((void *)v13 + 1) = v14;
    uint64_t v15 = *v10++;
    *((void *)v13 + 2) = v15;
    uint64_t v16 = *v11++;
    *((void *)v13 + 3) = v16;
    v7 += 32;
  }
  while (v7 != 1440);
  memmove((void *)[(id)*a1 dataPointer], v6, 0x5A0uLL);
  id v17 = [[period_lstmInput alloc] initWithIn:*a1 lstm_1_h_in:0 lstm_1_c_in:0];
  unint64_t v18 = (void *)a1[3];
  a1[3] = v17;

  uint64_t v19 = [(id)a1[4] model];
  uint64_t v20 = a1[3];
  uint64_t v21 = a1[1];
  id v49 = 0;
  unint64_t v48 = [v19 predictionFromFeatures:v20 options:v21 error:&v49];
  id v47 = v49;

  uint64_t v22 = [period_lstmOutput alloc];
  uint64_t v23 = [v48 featureValueForName:@"out"];
  unint64_t v24 = [v23 multiArrayValue];
  double v25 = [v48 featureValueForName:@"lstm_1_h_out"];
  double v26 = [v25 multiArrayValue];
  float v27 = [v48 featureValueForName:@"lstm_1_c_out"];
  unint64_t v28 = [v27 multiArrayValue];
  id v29 = [(period_lstmOutput *)v22 initWithOut:v24 lstm_1_h_out:v26 lstm_1_c_out:v28];

  for (uint64_t i = 0; i != 32; ++i)
  {
    uint64_t v31 = [(period_lstmOutput *)v29 out];
    uint64_t v32 = [v31 objectAtIndexedSubscript:i];
    [v32 doubleValue];
    float v34 = v33;
    double v36 = *(float **)(a3 + 8);
    unint64_t v35 = *(void *)(a3 + 16);
    if ((unint64_t)v36 >= v35)
    {
      int v38 = *(float **)a3;
      uint64_t v39 = ((uint64_t)v36 - *(void *)a3) >> 2;
      unint64_t v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 62) {
        abort();
      }
      uint64_t v41 = v35 - (void)v38;
      if (v41 >> 1 > v40) {
        unint64_t v40 = v41 >> 1;
      }
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42)
      {
        unint64_t v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a3 + 16, v42);
        int v38 = *(float **)a3;
        double v36 = *(float **)(a3 + 8);
      }
      else
      {
        unint64_t v43 = 0;
      }
      unint64_t v44 = (float *)&v43[4 * v39];
      *unint64_t v44 = v34;
      uint64_t v37 = v44 + 1;
      while (v36 != v38)
      {
        int v45 = *((_DWORD *)v36-- - 1);
        *((_DWORD *)v44-- - 1) = v45;
      }
      *(void *)a3 = v44;
      *(void *)(a3 + 8) = v37;
      *(void *)(a3 + 16) = &v43[4 * v42];
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *double v36 = v34;
      uint64_t v37 = v36 + 1;
    }
    *(void *)(a3 + 8) = v37;
  }
  operator delete(v6);

  return 0;
}

void sub_22F14FDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  operator delete(v11);
  _Unwind_Resume(a1);
}

double Nightingale::FwPredictorWrapper_t::FwPredictorWrapper_t(Nightingale::FwPredictorWrapper_t *this)
{
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

double Nightingale::PeriodPredictorWrapper_t::PeriodPredictorWrapper_t(Nightingale::PeriodPredictorWrapper_t *this)
{
  *((void *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((void *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void std::default_delete<Nightingale::FwPredictorWrapper_t>::operator()[abi:nn180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x230FB1C40);
  }
}

void Nightingale::ngt_dnn_period_predict_t::ngt_dnn_period_predict_t(Nightingale::ngt_dnn_period_predict_t *this)
{
}

void sub_22F14FFB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<Nightingale::fwPredictorWrapper_t>::operator()[abi:nn180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Nightingale::periodPredictorWrapper_t::init(Nightingale::periodPredictorWrapper_t *this)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v2;

  uint64_t v4 = (void *)*((void *)this + 2);
  if (!v4)
  {
    id v6 = 0;
    goto LABEL_6;
  }
  [v4 setComputeUnits:0];
  id v18 = 0;
  uint64_t v5 = [objc_alloc(MEMORY[0x263F00DA8]) initWithShape:&unk_26E28F8F0 dataType:65600 error:&v18];
  id v6 = v18;
  uint64_t v7 = *(void **)this;
  *(void *)this = v5;

  if (!*(void *)this)
  {
LABEL_6:
    uint64_t v13 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = [model_period_10pct alloc];
  uint64_t v9 = *((void *)this + 2);
  id v17 = v6;
  uint64_t v10 = [(model_period_10pct *)v8 initWithConfiguration:v9 error:&v17];
  id v11 = v17;

  uint64_t v12 = (void *)*((void *)this + 4);
  *((void *)this + 4) = v10;

  if (v11)
  {
    uint64_t v13 = 0;
    id v6 = v11;
  }
  else
  {
    uint64_t v15 = [[model_period_10pctInput alloc] initWithIn:*(void *)this lstm_1_h_in:0 lstm_1_c_in:0];
    uint64_t v16 = (void *)*((void *)this + 3);
    *((void *)this + 3) = v15;

    id v6 = 0;
    uint64_t v13 = 1;
  }
LABEL_7:

  return v13;
}

void sub_22F15011C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Nightingale::ngt_dnn_period_predict_t::~ngt_dnn_period_predict_t(id **this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<Nightingale::fwPredictorWrapper_t>::operator()[abi:nn180100]((uint64_t)this, v1);
  }
}

{
  id *v1;

  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<Nightingale::fwPredictorWrapper_t>::operator()[abi:nn180100]((uint64_t)this, v1);
  }
}

uint64_t Nightingale::ngt_dnn_period_predict_t::ngt_dnn_process_period(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return 0;
}

uint64_t Nightingale::periodPredictorWrapper_t::predictPeriod(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v6 = operator new(0x708uLL);
  uint64_t v7 = v6 + 2;
  __src = v6;
  bzero(v6, 0x708uLL);
  uint64_t v8 = 0;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[6];
  uint64_t v12 = a2[9];
  uint64_t v13 = a2[12];
  do
  {
    *(v7 - 2) = *(void *)(v9 + v8);
    *(v7 - 1) = *(void *)(v10 + v8);
    void *v7 = *(void *)(v11 + v8);
    v7[1] = *(void *)(v12 + v8);
    _OWORD v7[2] = *(void *)(v13 + v8);
    v8 += 8;
    v7 += 5;
  }
  while (v8 != 360);
  memmove((void *)[*(id *)a1 dataPointer], __src, 0x708uLL);
  uint64_t v14 = [*(id *)(a1 + 32) model];
  uint64_t v15 = *(void *)(a1 + 24);
  id v44 = 0;
  uint64_t v16 = [v14 predictionFromFeatures:v15 error:&v44];
  id v42 = v44;

  id v17 = [model_period_10pctOutput alloc];
  id v18 = [v16 featureValueForName:@"out"];
  uint64_t v19 = [v18 multiArrayValue];
  uint64_t v20 = [v16 featureValueForName:@"lstm_1_h_out"];
  uint64_t v21 = [v20 multiArrayValue];
  uint64_t v22 = [v16 featureValueForName:@"lstm_1_c_out"];
  uint64_t v23 = [v22 multiArrayValue];
  unint64_t v24 = [(model_period_10pctOutput *)v17 initWithOut:v19 lstm_1_h_out:v21 lstm_1_c_out:v23];

  for (uint64_t i = 0; i != 32; ++i)
  {
    double v26 = [(model_period_10pctOutput *)v24 out];
    float v27 = [v26 objectAtIndexedSubscript:i];
    [v27 doubleValue];
    float v29 = v28;
    uint64_t v31 = *(float **)(a3 + 8);
    unint64_t v30 = *(void *)(a3 + 16);
    if ((unint64_t)v31 >= v30)
    {
      double v33 = *(float **)a3;
      uint64_t v34 = ((uint64_t)v31 - *(void *)a3) >> 2;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62) {
        abort();
      }
      uint64_t v36 = v30 - (void)v33;
      if (v36 >> 1 > v35) {
        unint64_t v35 = v36 >> 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        int v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a3 + 16, v37);
        double v33 = *(float **)a3;
        uint64_t v31 = *(float **)(a3 + 8);
      }
      else
      {
        int v38 = 0;
      }
      uint64_t v39 = (float *)&v38[4 * v34];
      *uint64_t v39 = v29;
      uint64_t v32 = v39 + 1;
      while (v31 != v33)
      {
        int v40 = *((_DWORD *)v31-- - 1);
        *((_DWORD *)v39-- - 1) = v40;
      }
      *(void *)a3 = v39;
      *(void *)(a3 + 8) = v32;
      *(void *)(a3 + 16) = &v38[4 * v37];
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *uint64_t v31 = v29;
      uint64_t v32 = v31 + 1;
    }
    *(void *)(a3 + 8) = v32;
  }
  operator delete(__src);

  return 0;
}

void sub_22F150484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

double Nightingale::periodPredictorWrapper_t::periodPredictorWrapper_t(Nightingale::periodPredictorWrapper_t *this)
{
  *((void *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((void *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

double Nightingale::wristTemperatureInputAcquisition::wristTemperatureInputAcquisition(Nightingale::wristTemperatureInputAcquisition *this)
{
  uint64_t v1 = Nightingale::sensorInputProcessBase::sensorInputProcessBase(this);
  *(void *)(v1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  return result;
}

{
  uint64_t v1;
  double result;

  uint64_t v1 = Nightingale::sensorInputProcessBase::sensorInputProcessBase(this);
  *(void *)(v1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  return result;
}

void Nightingale::wristTemperatureInputAcquisition::~wristTemperatureInputAcquisition(Nightingale::wristTemperatureInputAcquisition *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)this;
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v4);
  Nightingale::sensorInputProcessBase::~sensorInputProcessBase(this);
}

uint64_t Nightingale::wristTemperatureInputAcquisition::getJDayIdx1stTmp(uint64_t a1, unsigned int **a2)
{
  uint64_t v2 = (char *)*a2;
  uint64_t v3 = a2[1];
  int64_t v4 = (char *)v3 - (char *)*a2;
  if (v3 == *a2) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = v4 / 60;
  if (v6 <= 1) {
    unint64_t v6 = 1;
  }
  while (!v2[56])
  {
    v5 -= 0x100000000;
    v2 += 60;
    if (!--v6) {
      return 0;
    }
  }
  return *(unsigned int *)v2 - v5;
}

unint64_t Nightingale::wristTemperatureInputAcquisition::getAWTmpEntryDailyData(uint64_t a1, void *a2, int *a3, int a4)
{
  unint64_t v4 = *a3;
  unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2[1] - *a2) >> 2);
  if (v5 <= v4)
  {
LABEL_5:
    unint64_t v8 = 0;
    LOBYTE(v9) = 0;
  }
  else
  {
    unint64_t v6 = (unsigned char *)(*a2 + 60 * (int)v4 + 56);
    int v7 = v4 + 1;
    while (*((_DWORD *)v6 - 14) != a4)
    {
      ++v4;
      v6 += 60;
      ++v7;
      if (v5 <= v4) {
        goto LABEL_5;
      }
    }
    if (*v6)
    {
      uint64_t v9 = *((void *)v6 - 1);
      unint64_t v8 = v9 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      unint64_t v8 = 0;
      LOBYTE(v9) = 0;
    }
    *a3 = v7;
  }
  return v8 & 0xFFFFFFFFFFFFFF00 | v9;
}

void Nightingale::wristTemperatureInputAcquisition::extractKaliInputsJDayRange(unint64_t AWTmpEntryDailyData@<X0>, void *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  int v7 = a7;
  uint64_t v156 = a5;
  int v157 = a6;
  a7[1] = 0;
  a7[2] = 0;
  *a7 = 0;
  a7[3] = -1;
  *((_OWORD *)a7 + 2) = 0u;
  unint64_t v8 = a7 + 4;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  if (!(_BYTE)a6) {
    return;
  }
  int v9 = a4;
  if (a4 == -1 || a3 == -1 || a4 < a3) {
    return;
  }
  uint64_t v143 = v8;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  *(void *)uint64_t v145 = v7;
  unint64_t v146 = 0;
  __int16 v153 = 0;
  __int16 v154 = 0;
  uint64_t v155 = 0;
  int v12 = a3;
  memset(&__x, 0, sizeof(__x));
  do
  {
    if (!(_BYTE)v157) {
      goto LABEL_223;
    }
    AWTmpEntryDailyData = Nightingale::wristTemperatureInputAcquisition::getAWTmpEntryDailyData(AWTmpEntryDailyData, a2, (int *)&v156 + 1, v12);
    if (v13)
    {
      unint64_t v14 = AWTmpEntryDailyData;
      if (*((_DWORD *)v7 + 6) == -1) {
        *((_DWORD *)v7 + 6) = v12;
      }
      unint64_t v15 = HIDWORD(AWTmpEntryDailyData);
      int v150 = v12;
      if (v10 == v11)
      {
        uint64_t v46 = (char *)v146;
        if ((unint64_t)v10 >= v146)
        {
          unint64_t v70 = 2 * (v146 - (void)v10);
          if (v70 <= 1) {
            unint64_t v70 = 1;
          }
          if (v146 - (unint64_t)v10 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v71 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v71 = v70;
          }
          uint64_t v72 = (char *)operator new(v71);
          uint64_t v46 = &v72[v71];
          *uint64_t v72 = v14;
          id v47 = v72 + 1;
          if (v10) {
            operator delete(v10);
          }
          uint64_t v10 = v72;
        }
        else
        {
          char *v10 = AWTmpEntryDailyData;
          id v47 = v10 + 1;
        }
        std::vector<int>::pointer end = __x.__end_;
        unint64_t v146 = (unint64_t)v46;
        if (__x.__end_ < __x.__end_cap_.__value_)
        {
LABEL_167:
          *std::vector<int>::pointer end = v15;
          int v115 = end + 1;
LABEL_182:
          __x.__end_ = v115;
          AWTmpEntryDailyData = std::vector<std::vector<float>>::push_back[abi:nn180100](&v153, &__x);
          uint64_t v11 = v47;
LABEL_183:
          int v9 = a4;
          int v12 = v150;
          continue;
        }
        std::vector<int>::pointer begin = __x.__begin_;
        int64_t v75 = __x.__end_ - __x.__begin_;
        unint64_t v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 62) {
          goto LABEL_222;
        }
        int64_t v77 = (char *)__x.__end_cap_.__value_ - (char *)__x.__begin_;
        if (((char *)__x.__end_cap_.__value_ - (char *)__x.__begin_) >> 1 > v76) {
          unint64_t v76 = v77 >> 1;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v76;
        }
        if (v78)
        {
          uint64_t v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&__x.__end_cap_, v78);
          std::vector<int>::pointer begin = __x.__begin_;
          std::vector<int>::pointer end = __x.__end_;
        }
        else
        {
          uint64_t v79 = 0;
        }
        unint64_t v114 = (int *)&v79[4 * v75];
        *unint64_t v114 = v15;
        int v115 = v114 + 1;
        while (end != begin)
        {
          int v116 = *--end;
          *--unint64_t v114 = v116;
        }
      }
      else
      {
        unint64_t v16 = v11 - v10;
        AWTmpEntryDailyData = (unint64_t)memchr(v10, (char)AWTmpEntryDailyData, v11 - v10);
        if (AWTmpEntryDailyData) {
          id v17 = (char *)AWTmpEntryDailyData;
        }
        else {
          id v17 = v11;
        }
        __int16 v148 = v10;
        if (v17 != v11)
        {
          id v18 = v153;
          uint64_t v19 = (uint64_t)v154;
          if (v153 == v154)
          {
            memset(&__p, 0, sizeof(__p));
            if (v16 <= 1) {
              uint64_t v20 = 1;
            }
            else {
              uint64_t v20 = v11 - v10;
            }
            do
            {
              std::vector<std::vector<float>>::push_back[abi:nn180100](&v153, &__p);
              --v20;
            }
            while (v20);
            AWTmpEntryDailyData = (unint64_t)__p.__begin_;
            if (__p.__begin_)
            {
              __p.__end_ = __p.__begin_;
              operator delete(__p.__begin_);
            }
            id v18 = v153;
            uint64_t v19 = (uint64_t)v154;
          }
          int64_t v21 = v17 - v10;
          if (0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)v18) >> 3) <= v17 - v10) {
            goto LABEL_222;
          }
          int v22 = v15;
          uint64_t v23 = (unint64_t *)&v18[3 * v21];
          double v25 = (_DWORD **)(v23 + 1);
          unint64_t v24 = (_DWORD *)v23[1];
          float v27 = v23 + 2;
          unint64_t v26 = v23[2];
          if ((unint64_t)v24 >= v26)
          {
            AWTmpEntryDailyData = *v23;
            uint64_t v65 = (uint64_t)((uint64_t)v24 - *v23) >> 2;
            unint64_t v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62) {
              goto LABEL_222;
            }
            uint64_t v67 = v26 - AWTmpEntryDailyData;
            if (v67 >> 1 > v66) {
              unint64_t v66 = v67 >> 1;
            }
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v68 = v66;
            }
            if (v68)
            {
              uint64_t v69 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)v27, v68);
              unint64_t v24 = *v25;
              AWTmpEntryDailyData = *v23;
            }
            else
            {
              uint64_t v69 = 0;
            }
            uint64_t v84 = &v69[4 * v65];
            *(_DWORD *)uint64_t v84 = v22;
            double v28 = v84 + 4;
            while (v24 != (_DWORD *)AWTmpEntryDailyData)
            {
              int v85 = *--v24;
              *((_DWORD *)v84 - 1) = v85;
              v84 -= 4;
            }
            unint64_t *v23 = (unint64_t)v84;
            void *v25 = v28;
            *float v27 = &v69[4 * v68];
            if (AWTmpEntryDailyData) {
              operator delete((void *)AWTmpEntryDailyData);
            }
          }
          else
          {
            _DWORD *v24 = v22;
            double v28 = v24 + 1;
          }
          void *v25 = v28;
          if ((int)v21 >= 1)
          {
            unint64_t v86 = 0;
            while (0xAAAAAAAAAAAAAAABLL * (v154 - v153) > v86)
            {
              uint64_t v87 = (unint64_t *)&v153[3 * v86];
              uint64_t v89 = (_DWORD **)(v87 + 1);
              uint64_t v88 = (_DWORD *)v87[1];
              uint64_t v91 = v87 + 2;
              unint64_t v90 = v87[2];
              if ((unint64_t)v88 >= v90)
              {
                AWTmpEntryDailyData = *v87;
                uint64_t v93 = (uint64_t)((uint64_t)v88 - *v87) >> 2;
                unint64_t v94 = v93 + 1;
                if ((unint64_t)(v93 + 1) >> 62) {
                  break;
                }
                uint64_t v95 = v90 - AWTmpEntryDailyData;
                if (v95 >> 1 > v94) {
                  unint64_t v94 = v95 >> 1;
                }
                if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v96 = v94;
                }
                if (v96)
                {
                  unint64_t v97 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)v91, v96);
                  uint64_t v88 = *v89;
                  AWTmpEntryDailyData = *v87;
                }
                else
                {
                  unint64_t v97 = 0;
                }
                unint64_t v98 = &v97[4 * v93];
                *(_DWORD *)unint64_t v98 = -1082130432;
                unint64_t v92 = v98 + 4;
                while (v88 != (_DWORD *)AWTmpEntryDailyData)
                {
                  int v99 = *--v88;
                  *((_DWORD *)v98 - 1) = v99;
                  v98 -= 4;
                }
                *uint64_t v87 = (unint64_t)v98;
                *uint64_t v89 = v92;
                *uint64_t v91 = &v97[4 * v96];
                if (AWTmpEntryDailyData) {
                  operator delete((void *)AWTmpEntryDailyData);
                }
              }
              else
              {
                *uint64_t v88 = -1082130432;
                unint64_t v92 = v88 + 1;
              }
              *uint64_t v89 = v92;
              if (++v86 == v21) {
                goto LABEL_135;
              }
            }
LABEL_222:
            abort();
          }
LABEL_135:
          int v100 = v21 + 1;
          if (v16 > (int)v21 + 1)
          {
            unint64_t v101 = v100;
            while (0xAAAAAAAAAAAAAAABLL * (v154 - v153) > v101)
            {
              unint64_t v102 = (unint64_t *)&v153[3 * v101];
              uint64_t v104 = (_DWORD **)(v102 + 1);
              unint64_t v103 = (_DWORD *)v102[1];
              unint64_t v105 = v102[2];
              if ((unint64_t)v103 >= v105)
              {
                AWTmpEntryDailyData = *v102;
                uint64_t v107 = (uint64_t)((uint64_t)v103 - *v102) >> 2;
                unint64_t v108 = v107 + 1;
                if ((unint64_t)(v107 + 1) >> 62) {
                  goto LABEL_222;
                }
                uint64_t v109 = v105 - AWTmpEntryDailyData;
                if (v109 >> 1 > v108) {
                  unint64_t v108 = v109 >> 1;
                }
                if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v110 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v110 = v108;
                }
                if (v110)
                {
                  uint64_t v111 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(v102 + 2), v110);
                  unint64_t v103 = *v104;
                  AWTmpEntryDailyData = *v102;
                }
                else
                {
                  uint64_t v111 = 0;
                }
                long long v112 = &v111[4 * v107];
                *(_DWORD *)long long v112 = -1082130432;
                uint64_t v106 = v112 + 4;
                while (v103 != (_DWORD *)AWTmpEntryDailyData)
                {
                  int v113 = *--v103;
                  *((_DWORD *)v112 - 1) = v113;
                  v112 -= 4;
                }
                *unint64_t v102 = (unint64_t)v112;
                *uint64_t v104 = v106;
                v102[2] = (unint64_t)&v111[4 * v110];
                if (AWTmpEntryDailyData) {
                  operator delete((void *)AWTmpEntryDailyData);
                }
              }
              else
              {
                *unint64_t v103 = -1082130432;
                uint64_t v106 = v103 + 1;
              }
              *uint64_t v104 = v106;
              unint64_t v101 = ++v100;
              if (v16 <= v100) {
                goto LABEL_155;
              }
            }
            goto LABEL_222;
          }
LABEL_155:
          int v7 = *(uint64_t **)v145;
          uint64_t v10 = v148;
          goto LABEL_183;
        }
        unint64_t v48 = 0;
        if (v16 <= 1) {
          uint64_t v49 = 1;
        }
        else {
          uint64_t v49 = v16;
        }
        do
        {
          if (0xAAAAAAAAAAAAAAABLL * (v154 - v153) <= v48) {
            goto LABEL_222;
          }
          unint64_t v50 = (char **)&v153[3 * v48];
          uint64_t v52 = v50 + 1;
          uint64_t v51 = v50[1];
          int v54 = v50 + 2;
          unint64_t v53 = (unint64_t)v50[2];
          if ((unint64_t)v51 >= v53)
          {
            id v56 = *v50;
            uint64_t v57 = (v51 - *v50) >> 2;
            unint64_t v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 62) {
              goto LABEL_222;
            }
            uint64_t v59 = v53 - (void)v56;
            if (v59 >> 1 > v58) {
              unint64_t v58 = v59 >> 1;
            }
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v60 = v58;
            }
            if (v60)
            {
              uint64_t v61 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)v54, v60);
              uint64_t v51 = *v52;
              id v56 = *v50;
            }
            else
            {
              uint64_t v61 = 0;
            }
            unint64_t v62 = &v61[4 * v57];
            *(_DWORD *)unint64_t v62 = -1082130432;
            int v55 = v62 + 4;
            while (v51 != v56)
            {
              int v63 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *((_DWORD *)v62 - 1) = v63;
              v62 -= 4;
            }
            *unint64_t v50 = v62;
            *uint64_t v52 = v55;
            *int v54 = &v61[4 * v60];
            if (v56) {
              operator delete(v56);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v51 = -1082130432;
            int v55 = v51 + 4;
          }
          *uint64_t v52 = v55;
          ++v48;
        }
        while (v48 != v49);
        uint64_t v64 = (char *)v146;
        if ((unint64_t)v11 >= v146)
        {
          unint64_t v80 = v16 + 1;
          LODWORD(v15) = HIDWORD(v14);
          if ((uint64_t)(v16 + 1) < 0) {
            goto LABEL_222;
          }
          unint64_t v81 = v146 - (void)v148;
          if (2 * (v146 - (unint64_t)v148) > v80) {
            unint64_t v80 = 2 * v81;
          }
          if (v81 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v82 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v82 = v80;
          }
          if (v82) {
            int v83 = (char *)operator new(v82);
          }
          else {
            int v83 = 0;
          }
          unint64_t v117 = &v83[v16];
          uint64_t v64 = &v83[v82];
          *unint64_t v117 = v14;
          id v47 = v117 + 1;
          int v118 = &v11[~(unint64_t)v148];
          do
          {
            char v119 = *--v11;
            (v118--)[(void)v83] = v119;
          }
          while (v11 != v148);
          int v7 = *(uint64_t **)v145;
          if (v148) {
            operator delete(v148);
          }
          uint64_t v10 = v83;
        }
        else
        {
          char *v11 = v14;
          id v47 = v11 + 1;
          LODWORD(v15) = HIDWORD(v14);
          int v7 = *(uint64_t **)v145;
          uint64_t v10 = v148;
        }
        __x.__end_ = __x.__begin_;
        std::vector<float>::assign((char **)&__x, ((v153[1] - *v153) >> 2) - 1, Nightingale::INVALID_TMP);
        std::vector<int>::pointer end = __x.__end_;
        unint64_t v146 = (unint64_t)v64;
        if (__x.__end_ < __x.__end_cap_.__value_) {
          goto LABEL_167;
        }
        std::vector<int>::pointer begin = __x.__begin_;
        int64_t v120 = __x.__end_ - __x.__begin_;
        unint64_t v121 = v120 + 1;
        if ((unint64_t)(v120 + 1) >> 62) {
          goto LABEL_222;
        }
        int64_t v122 = (char *)__x.__end_cap_.__value_ - (char *)__x.__begin_;
        if (((char *)__x.__end_cap_.__value_ - (char *)__x.__begin_) >> 1 > v121) {
          unint64_t v121 = v122 >> 1;
        }
        if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v121;
        }
        if (v78)
        {
          uint64_t v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&__x.__end_cap_, v78);
          std::vector<int>::pointer begin = __x.__begin_;
          std::vector<int>::pointer end = __x.__end_;
        }
        else
        {
          uint64_t v79 = 0;
        }
        unint64_t v114 = (int *)&v79[4 * v120];
        *unint64_t v114 = v15;
        int v115 = v114 + 1;
        while (end != begin)
        {
          int v123 = *--end;
          *--unint64_t v114 = v123;
        }
      }
      __x.__begin_ = v114;
      __x.__end_ = v115;
      __x.__end_cap_.__value_ = (int *)&v79[4 * v78];
      if (begin) {
        operator delete(begin);
      }
      goto LABEL_182;
    }
    if (v153 != v154)
    {
      if (v11 == v10)
      {
        uint64_t v11 = v10;
      }
      else
      {
        int v29 = v12;
        unint64_t v30 = v10;
        unint64_t v31 = 0;
        if ((unint64_t)(v11 - v10) <= 1) {
          uint64_t v32 = 1;
        }
        else {
          uint64_t v32 = v11 - v10;
        }
        do
        {
          if (0xAAAAAAAAAAAAAAABLL * (v154 - v153) <= v31) {
            goto LABEL_222;
          }
          double v33 = (unint64_t *)&v153[3 * v31];
          unint64_t v35 = (_DWORD **)(v33 + 1);
          uint64_t v34 = (_DWORD *)v33[1];
          unint64_t v37 = v33 + 2;
          unint64_t v36 = v33[2];
          if ((unint64_t)v34 >= v36)
          {
            AWTmpEntryDailyData = *v33;
            uint64_t v39 = (uint64_t)((uint64_t)v34 - *v33) >> 2;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 62) {
              goto LABEL_222;
            }
            uint64_t v41 = v36 - AWTmpEntryDailyData;
            if (v41 >> 1 > v40) {
              unint64_t v40 = v41 >> 1;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            if (v42)
            {
              unint64_t v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)v37, v42);
              uint64_t v34 = *v35;
              AWTmpEntryDailyData = *v33;
            }
            else
            {
              unint64_t v43 = 0;
            }
            id v44 = &v43[4 * v39];
            *(_DWORD *)id v44 = -1082130432;
            int v38 = v44 + 4;
            while (v34 != (_DWORD *)AWTmpEntryDailyData)
            {
              int v45 = *--v34;
              *((_DWORD *)v44 - 1) = v45;
              v44 -= 4;
            }
            unint64_t *v33 = (unint64_t)v44;
            char *v35 = v38;
            *unint64_t v37 = &v43[4 * v42];
            if (AWTmpEntryDailyData) {
              operator delete((void *)AWTmpEntryDailyData);
            }
          }
          else
          {
            _DWORD *v34 = -1082130432;
            int v38 = v34 + 1;
          }
          char *v35 = v38;
          ++v31;
        }
        while (v31 != v32);
        int v7 = *(uint64_t **)v145;
        uint64_t v10 = v30;
        int v9 = a4;
        int v12 = v29;
      }
    }
  }
  while (v12++ != v9);
  *((_DWORD *)v7 + 7) = v9;
  int v126 = v153;
  uint64_t v125 = (uint64_t)v154;
  if (v10 == v11)
  {
    int v128 = v153;
    int v127 = a3;
    if (v154 != v153)
    {
      uint64_t v129 = (uint64_t)v154;
      do
      {
        uint64_t v131 = *(void **)(v129 - 24);
        v129 -= 24;
        uint64_t v130 = v131;
        if (v131)
        {
          *(void *)(v125 - 16) = v130;
          operator delete(v130);
        }
        uint64_t v125 = v129;
      }
      while ((uint64_t *)v129 != v126);
      int v128 = v153;
    }
    __int16 v154 = v126;
    uint64_t v125 = (uint64_t)v126;
    int v126 = v128;
  }
  else
  {
    int v127 = a3;
  }
  unint64_t v132 = v10;
  if (v126 != (uint64_t *)v125)
  {
    long long v133 = v126;
    do
    {
      long long v134 = (float *)*v133;
      int v135 = (float *)v133[1];
      while (v134 != v135)
      {
        if (*v134 > 38.5) {
          *long long v134 = -1.0;
        }
        ++v134;
      }
      v133 += 3;
    }
    while (v133 != (uint64_t *)v125);
  }
  uint64_t v136 = *((int *)v7 + 6);
  if ((int)v136 <= v127)
  {
LABEL_214:
    if (&v153 != *(uint64_t ***)v145) {
      std::vector<std::vector<float>>::__assign_with_size[abi:nn180100]<std::vector<float>*,std::vector<float>*>(*(uint64_t **)v145, (uint64_t)v153, (uint64_t)v154, 0xAAAAAAAAAAAAAAABLL * (v154 - v153));
    }
    std::vector<Nightingale::Phase>::__assign_with_size[abi:nn180100]<Nightingale::Phase*,Nightingale::Phase*>(v143, v132, v11, v11 - v132);
    if (v132) {
      operator delete(v132);
    }
    if (__x.__begin_)
    {
      __x.__end_ = __x.__begin_;
      operator delete(__x.__begin_);
    }
    __x.__begin_ = (std::vector<int>::pointer)&v153;
    std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__x);
  }
  else
  {
    if ((_BYTE)v157)
    {
      if ((int)v156 <= v127)
      {
        if (v126 != (uint64_t *)v125)
        {
          unint64_t v137 = (int)v136 - a3;
          do
          {
            char v138 = 0;
            v139 = 0;
            memset(&__p, 0, sizeof(__p));
            if (v136 != a3)
            {
              std::vector<int>::__vallocate[abi:nn180100](&__p, v137);
              std::vector<int>::pointer v140 = __p.__end_;
              memset_pattern16(__p.__end_, &unk_22F166F30, 4 * v136 - 4 * a3);
              char v138 = &v140[v137];
              __p.__end_ = v138;
              v139 = (char *)__p.__begin_;
            }
            std::vector<float>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)v126, *v126, v139, (char *)v138, ((char *)v138 - v139) >> 2);
            if (__p.__begin_)
            {
              __p.__end_ = __p.__begin_;
              operator delete(__p.__begin_);
            }
            v126 += 3;
          }
          while (v126 != (uint64_t *)v125);
        }
        *(_DWORD *)(*(void *)v145 + 24) = a3;
      }
      goto LABEL_214;
    }
LABEL_223:
    int v141 = (void *)std::__throw_bad_optional_access[abi:nn180100]();
    std::vector<std::vector<float>>::push_back[abi:nn180100](v141, v142);
  }
}

uint64_t std::vector<std::vector<float>>::push_back[abi:nn180100](void *a1, std::vector<int> *__x)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::vector<BOOL>>>(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    unint64_t v15 = v14;
    unint64_t v16 = (std::vector<int> *)&v14[24 * v10];
    id v18 = &v14[24 * v13];
    std::vector<int>::vector(v16, __x);
    id v17 = v16 + 1;
    std::vector<std::vector<std::pair<BOOL,float>>>::__swap_out_circular_buffer(a1, &v15);
    unint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::pair<BOOL,float>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)std::vector<int>::vector(*(std::vector<int> **)(v4 - 8), __x);
    unint64_t v9 = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void Nightingale::wristTemperatureInputAcquisition::removeOutlierUsingSlidingWin(float a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  unint64_t v5 = a4;
  uint64_t v6 = *a3;
  if (a4 < (unint64_t)((a3[1] - *a3) >> 2))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 4 * a4;
    uint64_t v11 = v10 + 4 * a5;
    do
    {
      std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__x, (unsigned char *)(v9 + v6), (unsigned char *)(v10 + v9 + v6));
      std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__p, (unsigned char *)(v10 + v9 + *a3), (unsigned char *)(v11 + v9 + *a3));
      uint64_t MeanDiffOf2Windows = Nightingale::getMeanDiffOf2Windows(&__x, &__p, -1.0);
      if ((MeanDiffOf2Windows & 0xFF00000000) != 0 && COERCE_FLOAT(MeanDiffOf2Windows & 0x7FFFFFFF) >= a1)
      {
        if (v5 >= (a3[1] - *a3) >> 2) {
          abort();
        }
        *(_DWORD *)(*a3 + 4 * v5) = -1082130432;
      }
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      if (__x.__begin_)
      {
        __x.__end_ = __x.__begin_;
        operator delete(__x.__begin_);
      }
      ++v5;
      uint64_t v6 = *a3;
      v9 += 4;
    }
    while (v5 < (a3[1] - *a3) >> 2);
  }
}

uint64_t Nightingale::wristTemperatureInputAcquisition::getOutlierRmvSegLen(Nightingale::wristTemperatureInputAcquisition *this, int a2, int a3)
{
  if (a3 - a2 < 30) {
    return 30;
  }
  LODWORD(result) = 31;
  do
    uint64_t result = (result - 1);
  while ((a3 - a2) % (int)result < 7);
  return result;
}

void Nightingale::wristTemperatureInputAcquisition::extractWTmp_removeOutlier_withBuf_fromCycleOffset(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, signed int a4@<W3>, void *a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  signed int v7 = a6;
  unint64_t v14 = HIDWORD(a6);
  std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100](a1);
  a1[4] = a1[3];
  a1[7] = a1[6];
  unint64_t v15 = -286331153 * ((a5[1] - *a5) >> 2);
  while ((int)v15 >= 1)
  {
    if (*(_DWORD *)(*a5 + 60 * --v15) <= a4) {
      goto LABEL_6;
    }
  }
  unint64_t v15 = 0;
LABEL_6:
  if (v7 <= a4) {
    uint64_t v16 = a4;
  }
  else {
    uint64_t v16 = v7;
  }
  if (v7 > a4) {
    unint64_t v15 = v14;
  }
  uint64_t v17 = v16 | (v15 << 32);
  Nightingale::wristTemperatureInputAcquisition::extractWTmp_removeOutlier_withBuf(a1, a3 - a2 + 1 - v16, a3 - a2, a5, v17, (uint64_t)v18);
  if (__p)
  {
    int v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  uint64_t v23 = (void **)v18;
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100](&v23);
  Nightingale::wristTemperatureInputAcquisition::extractWTmp_removeOutlier_withBuf(a1, a2, a3, a5, v17, a7);
}

void Nightingale::wristTemperatureInputAcquisition::reset(Nightingale::wristTemperatureInputAcquisition *this)
{
  *((void *)this + 4) = *((void *)this + 3);
  *((void *)this + 7) = *((void *)this + 6);
}

void Nightingale::wristTemperatureInputAcquisition::extractWTmp_removeOutlier_withBuf(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  Nightingale::wristTemperatureInputAcquisition::extractKaliInputsJDayRange((unint64_t)a1, a4, a3 - a2 + 1, a3, a5, 1, (uint64_t *)a6);
  uint64_t v9 = *(void *)a6;
  uint64_t v10 = *(void *)(a6 + 8);
  if (*(void *)a6 != v10 && *(void *)v9 != *(void *)(v9 + 8))
  {
    std::vector<int> __p = 0;
    int64_t v75 = 0;
    unint64_t v76 = 0;
    size_t v71 = a1 + 3;
    if (a1[3] != a1[4])
    {
      uint64_t v11 = *(char **)(a6 + 32);
      uint64_t v12 = *(char **)(a6 + 40);
      if (v11 != v12)
      {
        unint64_t v13 = 0;
        unsigned __int8 v14 = 0;
        while (1)
        {
          uint64_t v16 = (void *)a1[3];
          uint64_t v15 = a1[4];
          std::vector<int>::pointer begin = (char *)memchr(v16, *v11, v15 - (void)v16);
          if (begin) {
            uint64_t v17 = begin;
          }
          else {
            uint64_t v17 = (unsigned char *)v15;
          }
          if (v17 == (unsigned char *)v15)
          {
            if ((unint64_t)v13 >= v76)
            {
              std::vector<int>::pointer begin = (char *)__p;
              uint64_t v27 = (v13 - (unsigned char *)__p) >> 2;
              unint64_t v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 62) {
                goto LABEL_117;
              }
              uint64_t v29 = v76 - (void)__p;
              if ((uint64_t)(v76 - (void)__p) >> 1 > v28) {
                unint64_t v28 = v29 >> 1;
              }
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v28;
              }
              if (v30)
              {
                unint64_t v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v76, v30);
                std::vector<int>::pointer begin = (char *)__p;
                unint64_t v13 = v75;
              }
              else
              {
                unint64_t v31 = 0;
              }
              unint64_t v35 = &v31[4 * v27];
              *(_DWORD *)unint64_t v35 = 0;
              int64_t v21 = v35 + 4;
              while (v13 != begin)
              {
                int v36 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              uint64_t v34 = &v31[4 * v30];
              std::vector<int> __p = v35;
              goto LABEL_43;
            }
            *(_DWORD *)unint64_t v13 = 0;
            int64_t v21 = v13 + 4;
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3) <= v14
              || (unint64_t v18 = v17 - (unsigned char *)v16, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= v18)
              || (std::vector<int>::pointer begin = std::vector<float>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(*(void *)a6 + 24 * v14, *(void *)(*(void *)a6 + 24 * v14), *(char **)(*a1 + 24 * v18), *(char **)(*a1 + 24 * v18 + 8), (uint64_t)(*(void *)(*a1 + 24 * v18 + 8) - *(void *)(*a1 + 24 * v18)) >> 2), 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= v18))
            {
LABEL_117:
              abort();
            }
            uint64_t v19 = (*(void *)(*a1 + 24 * v18 + 8) - *(void *)(*a1 + 24 * v18)) >> 2;
            uint64_t v20 = v75;
            if ((unint64_t)v75 >= v76)
            {
              std::vector<int>::pointer begin = (char *)__p;
              uint64_t v22 = (v75 - (unsigned char *)__p) >> 2;
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62) {
                goto LABEL_117;
              }
              uint64_t v24 = v76 - (void)__p;
              if ((uint64_t)(v76 - (void)__p) >> 1 > v23) {
                unint64_t v23 = v24 >> 1;
              }
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v23;
              }
              if (v25)
              {
                unint64_t v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v76, v25);
                std::vector<int>::pointer begin = (char *)__p;
                uint64_t v20 = v75;
              }
              else
              {
                unint64_t v26 = 0;
              }
              uint64_t v32 = &v26[4 * v22];
              *(_DWORD *)uint64_t v32 = v19;
              int64_t v21 = v32 + 4;
              while (v20 != begin)
              {
                int v33 = *((_DWORD *)v20 - 1);
                v20 -= 4;
                *((_DWORD *)v32 - 1) = v33;
                v32 -= 4;
              }
              uint64_t v34 = &v26[4 * v25];
              std::vector<int> __p = v32;
LABEL_43:
              int64_t v75 = v21;
              unint64_t v76 = (unint64_t)v34;
              if (begin) {
                operator delete(begin);
              }
              goto LABEL_45;
            }
            *(_DWORD *)int64_t v75 = v19;
            int64_t v21 = v20 + 4;
          }
LABEL_45:
          int64_t v75 = v21;
          ++v14;
          ++v11;
          unint64_t v13 = v21;
          if (v11 == v12)
          {
            uint64_t v9 = *(void *)a6;
            uint64_t v10 = *(void *)(a6 + 8);
            break;
          }
        }
      }
    }
    if (v9 != v10)
    {
      unsigned __int8 v37 = 0;
      do
      {
        if (__p == v75) {
          goto LABEL_53;
        }
        unint64_t v38 = (v75 - (unsigned char *)__p) >> 2;
        if (v38 - 1 < v37) {
          goto LABEL_53;
        }
        if (v38 <= v37) {
          goto LABEL_117;
        }
        if (*((_DWORD *)__p + v37) || (uint64_t v46 = *(float **)v9, v47 = *(float **)(v9 + 8), *(float **)v9 == v47))
        {
LABEL_53:
          uint64_t v39 = 0;
        }
        else
        {
          uint64_t v39 = 0;
          do
          {
            if (*v46 >= 0.0) {
              break;
            }
            ++v39;
            ++v46;
          }
          while (v46 != v47);
        }
        uint64_t v40 = std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__x, (unsigned char *)(*(void *)v9 + 4 * v39), *(unsigned char **)(v9 + 8));
        Nightingale::wristTemperatureInputAcquisition::removeOutlierUsingSlidingWin(1.0, v40, (uint64_t *)&__x, 7, 1);
        if (__x.__end_ != __x.__begin_) {
          memmove((void *)(*(void *)v9 + 4 * v39), __x.__begin_, (char *)__x.__end_ - (char *)__x.__begin_);
        }
        if (__p != v75)
        {
          if (v37 >= (unint64_t)((v75 - (unsigned char *)__p) >> 2)) {
            goto LABEL_117;
          }
          uint64_t v41 = *((int *)__p + v37);
          if (v41)
          {
            unint64_t v43 = *(float **)v9;
            unint64_t v42 = *(unsigned char **)(v9 + 8);
            id v44 = (unsigned char *)(*(void *)v9 + 4 * v41);
            int64_t v45 = v42 - v44;
            if (v42 != v44) {
              memmove(*(void **)v9, v44, v42 - v44);
            }
            *(void *)(v9 + 8) = (char *)v43 + v45;
          }
        }
        std::vector<int>::pointer begin = (char *)__x.__begin_;
        if (__x.__begin_)
        {
          __x.__end_ = __x.__begin_;
          operator delete(__x.__begin_);
        }
        ++v37;
        v9 += 24;
      }
      while (v9 != v10);
    }
    LOBYTE(v72) = 0;
    BYTE4(v72) = 0;
    unint64_t v48 = (char *)a1[6];
    uint64_t v49 = a1[7];
    unint64_t v50 = (uint64_t *)(a6 + 56);
    if (v48 == (char *)v49)
    {
      if (*(void *)(a6 + 56) == *(void *)(a6 + 64))
      {
        std::vector<int>::pointer begin = std::vector<std::optional<float>>::assign((char **)(a6 + 56), *(void *)(a6 + 40) - *(void *)(a6 + 32), (int *)&v72);
      }
      else
      {
        log = ha_get_log();
        std::vector<int>::pointer begin = (char *)os_log_type_enabled(log, OS_LOG_TYPE_FAULT);
        if (begin) {
          Nightingale::wristTemperatureInputAcquisition::extractWTmp_removeOutlier_withBuf(log);
        }
      }
    }
    else
    {
      if (v50 != a1 + 6) {
        std::vector<int>::pointer begin = std::vector<std::optional<float>>::__assign_with_size[abi:nn180100]<std::optional<float>*,std::optional<float>*>((char *)(a6 + 56), v48, v49, (v49 - (uint64_t)v48) >> 3);
      }
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3);
      uint64_t v52 = *(void *)(a6 + 56);
      unint64_t v53 = *(char **)(a6 + 64);
      unint64_t v54 = (uint64_t)&v53[-v52] >> 3;
      BOOL v55 = v54 >= v51;
      unint64_t v56 = v54 - v51;
      if (v56 != 0 && v55)
      {
        uint64_t v57 = (char *)(v52 + 8 * v56);
        int64_t v58 = v53 - v57;
        if (v53 != v57) {
          std::vector<int>::pointer begin = (char *)memmove(*(void **)(a6 + 56), v57, v58 - 3);
        }
        *(void *)(a6 + 64) = v52 + v58;
      }
      else if (v56)
      {
        unint64_t v60 = (void *)(a6 + 72);
        do
        {
          if ((unint64_t)v53 >= *v60)
          {
            unint64_t v61 = v54 + 1;
            if ((v54 + 1) >> 61) {
              goto LABEL_117;
            }
            uint64_t v62 = *v60 - v52;
            if (v62 >> 2 > v61) {
              unint64_t v61 = v62 >> 2;
            }
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v61;
            }
            if (v63) {
              std::vector<int>::pointer begin = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(a6 + 72, v63);
            }
            else {
              std::vector<int>::pointer begin = 0;
            }
            uint64_t v64 = &begin[8 * v54];
            *(void *)uint64_t v64 = v72;
            unint64_t v53 = v64 + 8;
            unint64_t v66 = *(unsigned char **)(a6 + 56);
            uint64_t v65 = *(unsigned char **)(a6 + 64);
            if (v65 != v66)
            {
              do
              {
                int v67 = *((_DWORD *)v65 - 2);
                v65 -= 8;
                char v68 = v65[4];
                *((_DWORD *)v64 - 2) = v67;
                v64 -= 8;
                v64[4] = v68;
              }
              while (v65 != v66);
              uint64_t v65 = (unsigned char *)*v50;
            }
            *(void *)(a6 + 56) = v64;
            *(void *)(a6 + 64) = v53;
            *(void *)(a6 + 72) = &begin[8 * v63];
            if (v65) {
              operator delete(v65);
            }
          }
          else
          {
            *(void *)unint64_t v53 = v72;
            v53 += 8;
          }
          *(void *)(a6 + 64) = v53;
          uint64_t v52 = *(void *)(a6 + 56);
          unint64_t v54 = (uint64_t)&v53[-v52] >> 3;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3) != v54);
      }
    }
    Nightingale::wristTemperatureInputAcquisition::getLastValidSamplesFromRawTmp((Nightingale *)begin, (float ***)a6, (uint64_t)(a1 + 6));
    if (*(void *)(*(void *)a6 + 8) - **(void **)a6 > 0x1BuLL)
    {
      std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100](a1);
      uint64_t v69 = *(void *)a6;
      uint64_t v70 = *(void *)(a6 + 8);
      while (v69 != v70)
      {
        std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__x, (unsigned char *)(*(void *)(v69 + 8) - 28), *(unsigned char **)(v69 + 8));
        std::vector<std::vector<float>>::push_back[abi:nn180100](a1, &__x);
        if (__x.__begin_)
        {
          __x.__end_ = __x.__begin_;
          operator delete(__x.__begin_);
        }
        v69 += 24;
      }
    }
    else if (*a1 == a1[1] && a1 != (uint64_t *)a6)
    {
      std::vector<std::vector<float>>::__assign_with_size[abi:nn180100]<std::vector<float>*,std::vector<float>*>(a1, *(void *)a6, *(void *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
    }
    if (v71 != (void *)(a6 + 32)) {
      std::vector<Nightingale::Phase>::__assign_with_size[abi:nn180100]<Nightingale::Phase*,Nightingale::Phase*>(v71, *(char **)(a6 + 32), *(char **)(a6 + 40), *(void *)(a6 + 40) - *(void *)(a6 + 32));
    }
    if (__p)
    {
      int64_t v75 = (char *)__p;
      operator delete(__p);
    }
  }
}

char *std::vector<std::optional<float>>::assign(char **a1, unint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    unint64_t v13 = (a1[1] - result) >> 3;
    if (v13 >= a2) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = (a1[1] - result) >> 3;
    }
    for (; v14; --v14)
    {
      int v15 = *a3;
      result[4] = *((unsigned char *)a3 + 4);
      *(_DWORD *)uint64_t result = v15;
      result += 8;
    }
    if (a2 <= v13)
    {
      a1[1] = &(*a1)[8 * a2];
    }
    else
    {
      uint64_t v16 = a1[1];
      uint64_t v17 = &v16[8 * (a2 - v13)];
      uint64_t v18 = 8 * a2 - 8 * v13;
      do
      {
        *(void *)uint64_t v16 = *(void *)a3;
        v16 += 8;
        v18 -= 8;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61) {
      abort();
    }
    uint64_t v8 = v6 >> 2;
    if (v6 >> 2 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = std::vector<Nightingale::PhaseSet>::__vallocate[abi:nn180100](a1, v9);
    uint64_t v10 = a1[1];
    uint64_t v11 = &v10[8 * a2];
    uint64_t v12 = 8 * a2;
    do
    {
      *(void *)uint64_t v10 = *(void *)a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void Nightingale::wristTemperatureInputAcquisition::getLastValidSamplesFromRawTmp(Nightingale *a1, float ***a2, uint64_t a3)
{
  if (*a2 != a2[1] && **a2 != (*a2)[1])
  {
    uint64_t v4 = a2[4];
    unint64_t v5 = a2[5];
    if (v4 != v5)
    {
      LOBYTE(v27) = 0;
      BYTE4(v27) = 0;
      signed int v7 = *(void **)(a3 + 8);
      if (*(void **)a3 == v7)
      {
        a1 = (Nightingale *)std::vector<std::optional<float>>::assign((char **)a3, (char *)v5 - (char *)v4, (int *)&v27);
        signed int v7 = *(void **)(a3 + 8);
      }
      else
      {
        uint64_t v8 = (uint64_t)v7 - *(void *)a3;
        if ((char *)v5 - (char *)v4 > (unint64_t)(int)((unint64_t)v8 >> 3))
        {
          unint64_t v9 = (int)(v8 >> 3);
          uint64_t v10 = (void *)(a3 + 16);
          do
          {
            if ((unint64_t)v7 >= *v10)
            {
              uint64_t v11 = ((uint64_t)v7 - *(void *)a3) >> 3;
              if ((unint64_t)(v11 + 1) >> 61) {
                goto LABEL_39;
              }
              uint64_t v12 = *v10 - *(void *)a3;
              uint64_t v13 = v12 >> 2;
              if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
                uint64_t v13 = v11 + 1;
              }
              if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v14 = v13;
              }
              if (v14) {
                a1 = (Nightingale *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(a3 + 16, v14);
              }
              else {
                a1 = 0;
              }
              int v15 = (char *)a1 + 8 * v11;
              *(void *)int v15 = v27;
              signed int v7 = v15 + 8;
              uint64_t v17 = *(char **)a3;
              uint64_t v16 = *(char **)(a3 + 8);
              if (v16 != *(char **)a3)
              {
                do
                {
                  int v18 = *((_DWORD *)v16 - 2);
                  v16 -= 8;
                  char v19 = v16[4];
                  *((_DWORD *)v15 - 2) = v18;
                  v15 -= 8;
                  v15[4] = v19;
                }
                while (v16 != v17);
                uint64_t v16 = *(char **)a3;
              }
              *(void *)a3 = v15;
              *(void *)(a3 + 8) = v7;
              *(void *)(a3 + 16) = (char *)a1 + 8 * v14;
              if (v16) {
                operator delete(v16);
              }
            }
            else
            {
              *v7++ = v27;
            }
            *(void *)(a3 + 8) = v7;
            ++v9;
          }
          while ((char *)a2[5] - (char *)a2[4] > v9);
        }
      }
      uint64_t v20 = *a2;
      int64_t v21 = a2[1];
      if (0xAAAAAAAAAAAAAAABLL * (v21 - *a2) > ((uint64_t)v7 - *(void *)a3) >> 3)
      {
        log = ha_get_log();
        if (os_log_type_enabled(log, OS_LOG_TYPE_FAULT)) {
          Nightingale::wristTemperatureInputAcquisition::getLastValidSamplesFromRawTmp(log);
        }
        *(void *)(a3 + 8) = *(void *)a3;
        a1 = (Nightingale *)std::vector<std::optional<float>>::assign((char **)a3, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2), (int *)&v27);
        uint64_t v20 = *a2;
        int64_t v21 = a2[1];
      }
      if (v20 != v21)
      {
        for (unint64_t i = 0; ; ++i)
        {
          uint64_t v24 = v20[1];
          do
          {
            if (v24 == *v20) {
              goto LABEL_37;
            }
            float v25 = *--v24;
            LOBYTE(a1) = Nightingale::check2Real_t_equal(a1, v25, -1.0);
          }
          while ((a1 & 1) != 0);
          if (i >= (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3) {
            break;
          }
          uint64_t v26 = *(void *)a3 + 8 * i;
          *(float *)uint64_t v26 = *v24;
          *(unsigned char *)(v26 + 4) = 1;
LABEL_37:
          v20 += 3;
          if (v20 == v21) {
            return;
          }
        }
LABEL_39:
        abort();
      }
    }
  }
}

void Nightingale::wristTemperatureInputProcess::constructVectorOfSlicesFromMultipleWatches(uint64_t a1@<X1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, uint64_t a5@<X8>)
{
  *(void *)(a5 + 64) = 0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  if (Nightingale::assertVectorOfVectors(a1))
  {
    int v9 = *(_DWORD *)(a1 + 24);
    if (v9 != -1 && *(_DWORD *)(a1 + 28) != -1)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      if (v11 != v12)
      {
        uint64_t v13 = v12 - v11;
        if (v13 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3)
          && v13 == (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3)
        {
          unint64_t v14 = (v9 - a4);
          if ((int)v14 >= 1)
          {
            std::vector<int> __p = 0;
            __b = 0;
            unint64_t v91 = 0;
            std::vector<int>::__vallocate[abi:nn180100](&__p, v14);
            int v15 = (char *)__b;
            memset_pattern16(__b, &unk_22F166F30, 4 * v14);
            __b = &v15[4 * v14];
            uint64_t v16 = *(void *)a1;
            uint64_t v17 = *(uint64_t **)(a1 + 8);
            if (*(uint64_t **)a1 != v17)
            {
              int v18 = *(uint64_t **)a1;
              do
              {
                uint64_t v19 = *v18;
                v18 += 3;
                std::vector<float>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v16, v19, (char *)__p, (char *)__b, ((unsigned char *)__b - (unsigned char *)__p) >> 2);
                uint64_t v16 = (uint64_t)v18;
              }
              while (v18 != v17);
            }
            if (__p)
            {
              __b = __p;
              operator delete(__p);
            }
          }
          if (a3 >= 1)
          {
            __int16 v20 = 0;
            uint64_t v21 = a2;
            do
            {
              std::vector<int> __p = 0;
              __b = 0;
              unint64_t v91 = 0;
              unint64_t v23 = *(void **)a1;
              uint64_t v22 = *(void **)(a1 + 8);
              if (*(void **)a1 == v22)
              {
                int v36 = 0;
                unint64_t v38 = 0;
              }
              else
              {
                do
                {
                  std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__x, (unsigned char *)(*v23 + 4 * v20), (unsigned char *)(*v23 + 4 * v20 + 4 * v21));
                  int MissingCnt = Nightingale::getMissingCnt((float **)&__x);
                  int v25 = MissingCnt;
                  uint64_t v26 = (char *)__b;
                  if ((unint64_t)__b >= v91)
                  {
                    unint64_t v28 = (char *)__p;
                    int64_t v29 = ((unsigned char *)__b - (unsigned char *)__p) >> 2;
                    unint64_t v30 = v29 + 1;
                    if ((unint64_t)(v29 + 1) >> 62) {
                      goto LABEL_99;
                    }
                    uint64_t v31 = v91 - (void)__p;
                    if ((uint64_t)(v91 - (void)__p) >> 1 > v30) {
                      unint64_t v30 = v31 >> 1;
                    }
                    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v32 = v30;
                    }
                    if (v32)
                    {
                      int v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v91, v32);
                      unint64_t v28 = (char *)__p;
                      uint64_t v26 = (char *)__b;
                    }
                    else
                    {
                      int v33 = 0;
                    }
                    uint64_t v34 = &v33[4 * v29];
                    *(_DWORD *)uint64_t v34 = v25;
                    uint64_t v27 = v34 + 4;
                    while (v26 != v28)
                    {
                      int v35 = *((_DWORD *)v26 - 1);
                      v26 -= 4;
                      *((_DWORD *)v34 - 1) = v35;
                      v34 -= 4;
                    }
                    std::vector<int> __p = v34;
                    __b = v27;
                    unint64_t v91 = (unint64_t)&v33[4 * v32];
                    if (v28) {
                      operator delete(v28);
                    }
                  }
                  else
                  {
                    *(_DWORD *)__b = MissingCnt;
                    uint64_t v27 = v26 + 4;
                  }
                  __b = v27;
                  if (__x.__begin_)
                  {
                    __x.__end_ = __x.__begin_;
                    operator delete(__x.__begin_);
                  }
                  v23 += 3;
                }
                while (v23 != v22);
                int v36 = __p;
                if (__p == __b)
                {
                  unint64_t v38 = __p;
                }
                else
                {
                  unsigned __int8 v37 = (char *)__p + 4;
                  unint64_t v38 = __p;
                  if ((char *)__p + 4 != __b)
                  {
                    int v39 = *(_DWORD *)__p;
                    unint64_t v38 = __p;
                    uint64_t v40 = (char *)__p + 4;
                    do
                    {
                      int v42 = *(_DWORD *)v40;
                      v40 += 4;
                      int v41 = v42;
                      if (v42 < v39)
                      {
                        int v39 = v41;
                        unint64_t v38 = v37;
                      }
                      unsigned __int8 v37 = v40;
                    }
                    while (v40 != __b);
                  }
                }
              }
              unint64_t v43 = v38 - v36;
              int64_t v45 = *(unsigned char **)(a5 + 32);
              unint64_t v44 = *(void *)(a5 + 40);
              unint64_t v46 = v43 >> 2;
              if ((unint64_t)v45 >= v44)
              {
                unint64_t v48 = *(void *)(a5 + 24);
                uint64_t v49 = &v45[-v48];
                uint64_t v50 = (uint64_t)&v45[-v48 + 1];
                if (v50 < 0) {
                  goto LABEL_99;
                }
                unint64_t v51 = v44 - v48;
                if (2 * v51 > v50) {
                  uint64_t v50 = 2 * v51;
                }
                if (v51 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v52 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v52 = v50;
                }
                if (v52) {
                  unint64_t v53 = (char *)operator new(v52);
                }
                else {
                  unint64_t v53 = 0;
                }
                unint64_t v54 = &v49[(void)v53];
                BOOL v55 = &v49[(void)v53];
                *BOOL v55 = v46;
                id v47 = v55 + 1;
                if (v45 != (unsigned char *)v48)
                {
                  unint64_t v56 = &v45[~v48];
                  do
                  {
                    char v57 = *--v45;
                    (v56--)[(void)v53] = v57;
                  }
                  while (v45 != (unsigned char *)v48);
                  int64_t v45 = *(unsigned char **)(a5 + 24);
                  unint64_t v54 = v53;
                }
                *(void *)(a5 + 24) = v54;
                *(void *)(a5 + 32) = v47;
                *(void *)(a5 + 40) = &v53[v52];
                if (v45) {
                  operator delete(v45);
                }
              }
              else
              {
                *int64_t v45 = v46;
                id v47 = v45 + 1;
              }
              *(void *)(a5 + 32) = v47;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) <= v46
                || (unint64_t v58 = (v43 >> 2),
                    uint64_t v59 = (unsigned char *)(*(void *)(*(void *)a1 + 24 * v58) + 4 * v20),
                    std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__x, v59, &v59[4 * v21]),
                    std::vector<std::vector<float>>::push_back[abi:nn180100](&v92, &__x),
                    uint64_t v60 = *(void *)(a1 + 56),
                    v58 >= (*(void *)(a1 + 64) - v60) >> 3))
              {
LABEL_99:
                abort();
              }
              uint64_t v61 = v60 + 8 * v58;
              float v62 = *(float *)v61;
              char v63 = *(unsigned char *)(v61 + 4);
              int v64 = *(unsigned __int8 *)(v61 + 7);
              int v65 = *(unsigned __int16 *)(v61 + 5);
              if (v20 <= 0)
              {
                float v68 = *(float *)v61;
              }
              else
              {
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) <= v58) {
                  goto LABEL_99;
                }
                std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&v86, *(unsigned char **)(*(void *)a1 + 24 * v58), (unsigned char *)(*(void *)(*(void *)a1 + 24 * v58) + 4 * v20));
                unint64_t v66 = v87;
                while (v66 != v86)
                {
                  float v67 = *--v66;
                  float v68 = v67;
                  if (v67 > 0.0)
                  {
                    char v63 = 1;
                    if (!v86) {
                      goto LABEL_75;
                    }
                    goto LABEL_74;
                  }
                }
                float v68 = v62;
                if (!v86) {
                  goto LABEL_75;
                }
LABEL_74:
                uint64_t v87 = v86;
                operator delete(v86);
              }
LABEL_75:
              int v69 = v65 | (v64 << 16);
              unint64_t v70 = *(void *)(a5 + 56);
              unint64_t v71 = *(void *)(a5 + 64);
              if (v70 >= v71)
              {
                uint64_t v73 = *(void *)(a5 + 48);
                uint64_t v74 = (uint64_t)(v70 - v73) >> 3;
                unint64_t v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 61) {
                  goto LABEL_99;
                }
                uint64_t v76 = v71 - v73;
                if (v76 >> 2 > v75) {
                  unint64_t v75 = v76 >> 2;
                }
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v77 = v75;
                }
                if (v77) {
                  unint64_t v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(a5 + 64, v77);
                }
                else {
                  unint64_t v78 = 0;
                }
                uint64_t v79 = &v78[8 * v74];
                *(float *)uint64_t v79 = v68;
                v79[4] = v63;
                v79[7] = BYTE2(v69);
                *(_WORD *)(v79 + 5) = v69;
                unint64_t v81 = *(unsigned char **)(a5 + 48);
                unint64_t v80 = *(unsigned char **)(a5 + 56);
                size_t v82 = v79;
                if (v80 != v81)
                {
                  do
                  {
                    int v83 = *((_DWORD *)v80 - 2);
                    v80 -= 8;
                    char v84 = v80[4];
                    *((_DWORD *)v82 - 2) = v83;
                    v82 -= 8;
                    v82[4] = v84;
                  }
                  while (v80 != v81);
                  unint64_t v80 = *(unsigned char **)(a5 + 48);
                }
                uint64_t v72 = v79 + 8;
                *(void *)(a5 + 48) = v82;
                *(void *)(a5 + 56) = v79 + 8;
                *(void *)(a5 + 64) = &v78[8 * v77];
                if (v80) {
                  operator delete(v80);
                }
              }
              else
              {
                *(float *)unint64_t v70 = v68;
                *(unsigned char *)(v70 + 4) = v63;
                *(_WORD *)(v70 + 5) = v69;
                *(unsigned char *)(v70 + 7) = BYTE2(v69);
                uint64_t v72 = (char *)(v70 + 8);
              }
              *(void *)(a5 + 56) = v72;
              if (__x.__begin_)
              {
                __x.__end_ = __x.__begin_;
                operator delete(__x.__begin_);
              }
              if (__p)
              {
                __b = __p;
                operator delete(__p);
              }
              ++v20;
            }
            while (a3 > v20);
          }
          if (&v92 != (uint64_t *)a5) {
            std::vector<std::vector<float>>::__assign_with_size[abi:nn180100]<std::vector<float>*,std::vector<float>*>((uint64_t *)a5, v92, v93, 0xAAAAAAAAAAAAAAABLL * ((v93 - v92) >> 3));
          }
        }
      }
    }
  }
  std::vector<int> __p = &v92;
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
}

void Nightingale::wristTemperatureInputProcess::clearDLSlices(uint64_t a1, uint64_t *a2)
{
  a2[19] = a2[18];
  a2[4] = a2[3];
  a2[10] = 0;
  a2[16] = 0;
  a2[13] = 0;
  a2[7] = a2[6];
  a2[22] = a2[21];
}

void Nightingale::addEntryToNewextractedLunaDayStreamSlice(void *a1, void *a2, int a3)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= a3) {
    goto LABEL_76;
  }
  unint64_t v5 = a3;
  std::vector<std::vector<float>>::push_back[abi:nn180100](a1, (std::vector<int> *)(*a2 + 24 * a3));
  uint64_t v6 = a2[18];
  if (v5 >= (a2[19] - v6) >> 2) {
    goto LABEL_76;
  }
  unint64_t v7 = a1[20];
  uint64_t v8 = (char *)a1[19];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (char *)a1[18];
    uint64_t v11 = (v8 - v10) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      goto LABEL_76;
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      int v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(a1 + 20), v14);
      uint64_t v10 = (char *)a1[18];
      uint64_t v8 = (char *)a1[19];
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v16 = &v15[4 * v11];
    uint64_t v17 = &v15[4 * v14];
    *(_DWORD *)uint64_t v16 = *(_DWORD *)(v6 + 4 * v5);
    int v9 = v16 + 4;
    while (v8 != v10)
    {
      int v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    a1[18] = v16;
    a1[19] = v9;
    a1[20] = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v8 = *(_DWORD *)(v6 + 4 * v5);
    int v9 = v8 + 4;
  }
  a1[19] = v9;
  uint64_t v19 = a2[3];
  if (a2[4] - v19 <= v5) {
    goto LABEL_76;
  }
  uint64_t v21 = (unsigned char *)a1[4];
  unint64_t v20 = a1[5];
  if ((unint64_t)v21 >= v20)
  {
    unint64_t v23 = a1[3];
    uint64_t v24 = &v21[-v23];
    uint64_t v25 = (uint64_t)&v21[-v23 + 1];
    if (v25 < 0) {
      goto LABEL_76;
    }
    unint64_t v26 = v20 - v23;
    if (2 * v26 > v25) {
      uint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27) {
      unint64_t v28 = operator new(v27);
    }
    else {
      unint64_t v28 = 0;
    }
    int64_t v29 = &v28[v27];
    v24[(void)v28] = *(unsigned char *)(v19 + v5);
    uint64_t v22 = (uint64_t)&v24[(void)v28 + 1];
    if (v21 == (unsigned char *)v23)
    {
      unint64_t v28 = &v24[(void)v28];
    }
    else
    {
      unint64_t v30 = &v21[~v23];
      do
      {
        char v31 = *--v21;
        (v30--)[(void)v28] = v31;
      }
      while (v21 != (unsigned char *)v23);
      uint64_t v21 = (unsigned char *)a1[3];
    }
    a1[3] = v28;
    a1[4] = v22;
    a1[5] = v29;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *uint64_t v21 = *(unsigned char *)(v19 + v5);
    uint64_t v22 = (uint64_t)(v21 + 1);
  }
  a1[4] = v22;
  if (a2[10] <= v5) {
    goto LABEL_76;
  }
  unint64_t v32 = v5 >> 6;
  uint64_t v33 = 1 << v5;
  BOOL v63 = (*(void *)(a2[9] + 8 * (v5 >> 6)) & (1 << v5)) != 0;
  std::vector<BOOL>::push_back((uint64_t)(a1 + 9), &v63);
  if (a2[16] <= v5) {
    goto LABEL_76;
  }
  BOOL v62 = (*(void *)(a2[15] + 8 * v32) & v33) != 0;
  std::vector<BOOL>::push_back((uint64_t)(a1 + 15), &v62);
  if (a2[13] <= v5) {
    goto LABEL_76;
  }
  BOOL v61 = (*(void *)(a2[12] + 8 * v32) & v33) != 0;
  std::vector<BOOL>::push_back((uint64_t)(a1 + 12), &v61);
  uint64_t v34 = a2[6];
  if (v5 >= (a2[7] - v34) >> 2) {
    goto LABEL_76;
  }
  unint64_t v35 = a1[8];
  int v36 = (char *)a1[7];
  if ((unint64_t)v36 >= v35)
  {
    unint64_t v38 = (char *)a1[6];
    uint64_t v39 = (v36 - v38) >> 2;
    unint64_t v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 62) {
      goto LABEL_76;
    }
    uint64_t v41 = v35 - (void)v38;
    if (v41 >> 1 > v40) {
      unint64_t v40 = v41 >> 1;
    }
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      unint64_t v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(a1 + 8), v42);
      unint64_t v38 = (char *)a1[6];
      int v36 = (char *)a1[7];
    }
    else
    {
      unint64_t v43 = 0;
    }
    unint64_t v44 = &v43[4 * v39];
    int64_t v45 = &v43[4 * v42];
    *(_DWORD *)unint64_t v44 = *(_DWORD *)(v34 + 4 * v5);
    unsigned __int8 v37 = v44 + 4;
    while (v36 != v38)
    {
      int v46 = *((_DWORD *)v36 - 1);
      v36 -= 4;
      *((_DWORD *)v44 - 1) = v46;
      v44 -= 4;
    }
    a1[6] = v44;
    a1[7] = v37;
    a1[8] = v45;
    if (v38) {
      operator delete(v38);
    }
  }
  else
  {
    *(_DWORD *)int v36 = *(_DWORD *)(v34 + 4 * v5);
    unsigned __int8 v37 = v36 + 4;
  }
  a1[7] = v37;
  unint64_t v48 = a2 + 21;
  uint64_t v47 = a2[21];
  if (v5 >= (v48[1] - v47) >> 2) {
    goto LABEL_76;
  }
  unint64_t v49 = a1[23];
  uint64_t v50 = (char *)a1[22];
  if ((unint64_t)v50 < v49)
  {
    *(_DWORD *)uint64_t v50 = *(_DWORD *)(v47 + 4 * v5);
    unint64_t v51 = v50 + 4;
    goto LABEL_75;
  }
  size_t v52 = (char *)a1[21];
  uint64_t v53 = (v50 - v52) >> 2;
  unint64_t v54 = v53 + 1;
  if ((unint64_t)(v53 + 1) >> 62) {
LABEL_76:
  }
    abort();
  uint64_t v55 = v49 - (void)v52;
  if (v55 >> 1 > v54) {
    unint64_t v54 = v55 >> 1;
  }
  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v56 = v54;
  }
  if (v56)
  {
    char v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)(a1 + 23), v56);
    size_t v52 = (char *)a1[21];
    uint64_t v50 = (char *)a1[22];
  }
  else
  {
    char v57 = 0;
  }
  unint64_t v58 = &v57[4 * v53];
  uint64_t v59 = &v57[4 * v56];
  *(_DWORD *)unint64_t v58 = *(_DWORD *)(v47 + 4 * v5);
  unint64_t v51 = v58 + 4;
  while (v50 != v52)
  {
    int v60 = *((_DWORD *)v50 - 1);
    v50 -= 4;
    *((_DWORD *)v58 - 1) = v60;
    v58 -= 4;
  }
  a1[21] = v58;
  a1[22] = v51;
  a1[23] = v59;
  if (v52) {
    operator delete(v52);
  }
LABEL_75:
  a1[22] = v51;
}

uint64_t Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::computeDay2DayNoise(uint64_t **a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)a1[1] - (char *)*a1;
  if (v2) {
    BOOL v3 = v2 >= 0xC;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    unint64_t v7 = operator new(0xCuLL);
    unsigned __int8 v37 = v7 + 3;
    unint64_t v38 = (char *)(v7 + 3);
    *(void *)unint64_t v7 = 0x3F800000BF000000;
    _OWORD v7[2] = -1090519040;
    int v36 = v7;
    int v8 = *((_DWORD *)v1 + 2);
    uint64_t v9 = *v1;
    uint64_t v10 = operator new(0xCuLL);
    int v11 = 0;
    LODWORD(v12) = 0;
    uint64_t v34 = (char *)(v10 + 3);
    unint64_t v35 = (char *)(v10 + 3);
    *(void *)uint64_t v10 = v9;
    _OWORD v10[2] = v8;
    std::vector<int> __p = v10;
    float v13 = 0.0;
    unint64_t v14 = 2;
    do
    {
      float SmoothedPow_aSample = Nightingale::getSmoothedPow_aSample((float **)&__p, (uint64_t)&v36);
      BOOL v17 = Nightingale::check2Real_t_equal(v16, SmoothedPow_aSample, -1.0);
      if (v17) {
        float SmoothedPow_aSample = -0.0;
      }
      int v18 = *a1;
      unint64_t v19 = ((char *)a1[1] - (char *)*a1) >> 2;
      if (v19 - 1 <= v14)
      {
        ++v14;
      }
      else
      {
        unint64_t v20 = (char *)__p;
        int64_t v21 = v34 - ((unsigned char *)__p + 4);
        if (v34 != (char *)__p + 4)
        {
          memmove(__p, (char *)__p + 4, v34 - ((unsigned char *)__p + 4));
          int v18 = *a1;
          unint64_t v19 = ((char *)a1[1] - (char *)*a1) >> 2;
        }
        uint64_t v22 = &v20[v21];
        uint64_t v34 = &v20[v21];
        if (v19 <= ++v14) {
LABEL_41:
        }
          abort();
        if (v22 >= v35)
        {
          uint64_t v24 = (char *)__p;
          uint64_t v25 = (v22 - (unsigned char *)__p) >> 2;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62) {
            goto LABEL_41;
          }
          uint64_t v27 = v35 - (unsigned char *)__p;
          if ((v35 - (unsigned char *)__p) >> 1 > v26) {
            unint64_t v26 = v27 >> 1;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            int64_t v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v35, v28);
            uint64_t v24 = (char *)__p;
            uint64_t v22 = v34;
          }
          else
          {
            int64_t v29 = 0;
          }
          unint64_t v30 = &v29[4 * v25];
          *(_DWORD *)unint64_t v30 = *((_DWORD *)v18 + v14);
          unint64_t v23 = v30 + 4;
          while (v22 != v24)
          {
            int v31 = *((_DWORD *)v22 - 1);
            v22 -= 4;
            *((_DWORD *)v30 - 1) = v31;
            v30 -= 4;
          }
          std::vector<int> __p = v30;
          uint64_t v34 = v23;
          unint64_t v35 = &v29[4 * v28];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v22 = *((_DWORD *)v18 + v14);
          unint64_t v23 = v22 + 4;
        }
        uint64_t v34 = v23;
        unint64_t v19 = ((char *)a1[1] - (char *)*a1) >> 2;
      }
      uint64_t v12 = (v12 + v17);
      float v13 = v13 + SmoothedPow_aSample;
      v11 += !v17;
    }
    while (v19 > v14);
    if (v11) {
      float v5 = v13 / (float)((float)v11 * 1.5);
    }
    else {
      float v5 = NAN;
    }
    if (__p)
    {
      uint64_t v34 = (char *)__p;
      operator delete(__p);
    }
    if (v36)
    {
      unsigned __int8 v37 = v36;
      operator delete(v36);
    }
    uint64_t v4 = v12 << 32;
  }
  else
  {
    uint64_t v4 = 0;
    float v5 = NAN;
  }
  return v4 | LODWORD(v5);
}

uint64_t Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpDay2dayNoiseHigh(float a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0.0 || *(void *)a3 == *(void *)(a3 + 8))
  {
    BOOL v4 = 0;
    uint64_t v7 = 2143289344;
  }
  else
  {
    uint64_t v7 = Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::computeDay2DayNoise((uint64_t **)a3);
    BOOL v4 = *(float *)&v7 > a1 || ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2) - 2 == v7 >> 32;
  }
  return v4 | (v7 << 32);
}

unint64_t Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpSnrLow(float a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  float v4 = 0.0;
  if ((a4 & 0x80000000) != 0
    || (uint64_t v6 = a4, v7 = *(unsigned char **)a3, a4 > (unint64_t)((uint64_t)(*(void *)(a3 + 8) - (void)v7) >> 2)))
  {
    BOOL v9 = 0;
  }
  else
  {
    std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__x, v7, &v7[4 * a4]);
    std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&__p, (unsigned char *)(*(void *)a3 + 4 * v6), *(unsigned char **)(a3 + 8));
    Nightingale::pooledVar2Win(&__x, &__p, -1);
    float v12 = v11;
    if (v11 >= 1.0e-12
      && (uint64_t MeanDiffOf2Windows = Nightingale::getMeanDiffOf2Windows(&__x, &__p, -1.0),
          (MeanDiffOf2Windows & 0xFF00000000) != 0))
    {
      float v4 = (float)(*(float *)&MeanDiffOf2Windows * *(float *)&MeanDiffOf2Windows) / v12;
      BOOL v9 = v4 < a1;
    }
    else
    {
      BOOL v9 = 1;
    }
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (__x.__begin_)
    {
      __x.__end_ = __x.__begin_;
      operator delete(__x.__begin_);
    }
  }
  return v9 | ((unint64_t)LODWORD(v4) << 32);
}

unint64_t Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpMissingCntHigh(float a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3) {
    return 0xBF80000000000000;
  }
  *(float *)&unsigned int v6 = (float)(int)Nightingale::getMissingCnt((float **)a3);
  return ((float)(*(float *)&v6 / (float)a4) > a1) | ((unint64_t)v6 << 32);
}

unint64_t Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpEarlyWinMissingCntHigh(float a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if ((a4 & 0x80000000) != 0
    || (float v4 = *(unsigned char **)a3, a4 > (unint64_t)((uint64_t)(*(void *)(a3 + 8) - (void)v4) >> 2)))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0xBF80000000000000;
  }
  else
  {
    std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&v15, v4, &v4[4 * a4]);
    uint64_t v10 = v16;
    if (v16 == v15)
    {
      unint64_t v13 = 0xBF80000000000000;
    }
    else
    {
      unint64_t v11 = (unint64_t)((char *)v16 - (char *)v15) >> 2;
      *(float *)&unsigned int v12 = (float)(int)Nightingale::getMissingCnt(&v15);
      unint64_t v13 = ((float)(*(float *)&v12 / (float)(int)v11) > a1) | ((unint64_t)v12 << 32);
      uint64_t v10 = v15;
    }
    unint64_t v8 = v13 & 0xFFFFFFFF00000000;
    if (v10)
    {
      uint64_t v16 = v10;
      operator delete(v10);
    }
    uint64_t v7 = v13 & 0xFFFFFF00;
    uint64_t v6 = v13;
  }
  return v8 | v6 | v7;
}

unint64_t Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems::checkWTmpLaterWinMissingCntHigh(float a1, uint64_t a2, void *a3, unsigned int a4)
{
  if ((a4 & 0x80000000) != 0 || (unint64_t v4 = a4, v5 = (unsigned char *)a3[1], v4 > (uint64_t)&v5[-*a3] >> 2))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0xBF80000000000000;
  }
  else
  {
    std::vector<int>::vector<std::__wrap_iter<int *>,0>((uint64_t)&v15, (unsigned char *)(*a3 + 4 * v4), v5);
    uint64_t v10 = v16;
    if (v16 == v15)
    {
      unint64_t v13 = 0xBF80000000000000;
    }
    else
    {
      unint64_t v11 = (unint64_t)((char *)v16 - (char *)v15) >> 2;
      *(float *)&unsigned int v12 = (float)(int)Nightingale::getMissingCnt(&v15);
      unint64_t v13 = ((float)(*(float *)&v12 / (float)(int)v11) > a1) | ((unint64_t)v12 << 32);
      uint64_t v10 = v15;
    }
    unint64_t v8 = v13 & 0xFFFFFFFF00000000;
    if (v10)
    {
      uint64_t v16 = v10;
      operator delete(v10);
    }
    uint64_t v7 = v13 & 0xFFFFFF00;
    uint64_t v6 = v13;
  }
  return v8 | v6 | v7;
}

void Nightingale::wristTemperatureInputValidation::checkListOfConditions(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, char a6@<W5>, void **a7@<X8>)
{
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    unint64_t v14 = 0;
    uint64_t v30 = (uint64_t)(a7 + 2);
    do
    {
      if (v14 >= (uint64_t)(a4[1] - *a4) >> 2 || v14 >= (uint64_t)(a5[1] - *a5) >> 2) {
LABEL_26:
      }
        abort();
      std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::operator()(v7, a1, a3, *(_DWORD *)(*a4 + 4 * v14), *(float *)(*a5 + 4 * v14));
      uint64_t v16 = v15;
      int v18 = a7[1];
      unint64_t v17 = (unint64_t)a7[2];
      if ((unint64_t)v18 >= v17)
      {
        uint64_t v20 = ((char *)v18 - (unsigned char *)*a7) >> 3;
        if ((unint64_t)(v20 + 1) >> 61) {
          goto LABEL_26;
        }
        uint64_t v21 = v17 - (void)*a7;
        uint64_t v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1)) {
          uint64_t v22 = v20 + 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v23) {
          uint64_t v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(v30, v23);
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v25 = &v24[8 * v20];
        *(void *)uint64_t v25 = v16;
        unint64_t v19 = v25 + 8;
        uint64_t v27 = (char *)*a7;
        unint64_t v26 = (char *)a7[1];
        if (v26 != *a7)
        {
          do
          {
            uint64_t v28 = *((void *)v26 - 1);
            v26 -= 8;
            *((void *)v25 - 1) = v28;
            v25 -= 8;
          }
          while (v26 != v27);
          unint64_t v26 = (char *)*a7;
        }
        *a7 = v25;
        a7[1] = v19;
        a7[2] = &v24[8 * v23];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *int v18 = v15;
        unint64_t v19 = v18 + 1;
      }
      a7[1] = v19;
      char v29 = a6;
      if (!(_BYTE)v16) {
        char v29 = 0;
      }
      if (v29) {
        break;
      }
      ++v14;
      v7 += 32;
    }
    while (v7 != v8);
  }
}

void std::function<std::pair<BOOL,float> ()(Nightingale::wristTemperatureInputValidation::wristTemperatureInputCheckItems &,std::vector<float> const&,int,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5)
{
  int v11 = a4;
  float v10 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *, float *))(*(void *)v5 + 48))(v5, a2, a3, &v11, &v10);
  }
  else
  {
    uint64_t v6 = (uint64_t *)std::__throw_bad_function_call[abi:nn180100]();
    std::vector<std::vector<float>>::__assign_with_size[abi:nn180100]<std::vector<float>*,std::vector<float>*>(v6, v7, v8, v9);
  }
}

void std::vector<std::vector<float>>::__assign_with_size[abi:nn180100]<std::vector<float>*,std::vector<float>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = (const std::vector<int> *)a2;
  uint64_t v8 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a4)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v8) >> 3) >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v24, a2, a3, v8);
      uint64_t v18 = v17;
      uint64_t v19 = a1[1];
      if (v19 != v17)
      {
        uint64_t v20 = a1[1];
        do
        {
          uint64_t v22 = *(void **)(v20 - 24);
          v20 -= 24;
          uint64_t v21 = v22;
          if (v22)
          {
            *(void *)(v19 - 16) = v21;
            operator delete(v21);
          }
          uint64_t v19 = v20;
        }
        while (v20 != v18);
      }
      a1[1] = v18;
    }
    else
    {
      unint64_t v13 = (const std::vector<int> *)(a2 + 8 * ((a1[1] - (uint64_t)v8) >> 3));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v23, a2, (uint64_t)v13, v8);
      uint64_t v14 = a1[1];
      if (v13 != (const std::vector<int> *)a3)
      {
        uint64_t v15 = (std::vector<int> *)a1[1];
        do
        {
          uint64_t v16 = std::vector<int>::vector(v15, v13++);
          uint64_t v15 = v16 + 1;
          v14 += 24;
        }
        while (v13 != (const std::vector<int> *)a3);
      }
      a1[1] = v14;
    }
  }
  else
  {
    std::vector<std::vector<float>>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v9 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::vector<float>>::__vallocate[abi:nn180100](a1, v10);
    int v11 = (std::vector<int> *)a1[1];
    while (v6 != (const std::vector<int> *)a3)
    {
      unsigned int v12 = std::vector<int>::vector(v11, v6++);
      int v11 = v12 + 1;
    }
    a1[1] = (uint64_t)v11;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<std::optional<float>>::__assign_with_size[abi:nn180100]<std::optional<float>*,std::optional<float>*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if (a4 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<Nightingale::PhaseSet>::__vallocate[abi:nn180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    unsigned int v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    uint64_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v17 - 3;
      uint64_t v19 = v9;
      uint64_t v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unsigned int v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9 - 3);
    unint64_t v9 = (char *)*v12;
  }
  uint64_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v17 - 3;
    uint64_t v19 = v9;
    uint64_t v20 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *unsigned int v12 = &v9[v17];
  return result;
}

void Nightingale::ngt_HistoricalAnalyzer::~ngt_HistoricalAnalyzer(Nightingale::ngt_HistoricalAnalyzer *this)
{
  unint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  BOOL v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    *((void *)this + 4) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v7;
    operator delete(v7);
  }
}

void Nightingale::ngt_HistoricalAnalyzer::appendDay(void **a1, long long *a2)
{
  BOOL v3 = (char *)*a1;
  unint64_t v2 = a1[1];
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v2 - (unsigned char *)*a1) >> 2);
  if (v4 <= 0x2AC5)
  {
    unint64_t v9 = (unint64_t)a1[2];
    uint64_t v7 = (uint64_t)(a1 + 2);
    unint64_t v8 = v9;
    if ((unint64_t)v2 >= v9)
    {
      unint64_t v14 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v8 - (void)v3) >> 2);
      if (2 * v14 <= v4 + 1) {
        uint64_t v15 = v4 + 1;
      }
      else {
        uint64_t v15 = 2 * v14;
      }
      if (v14 >= 0x222222222222222) {
        unint64_t v16 = 0x444444444444444;
      }
      else {
        unint64_t v16 = v15;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_DayInput>>(v7, v16);
      size_t v18 = &v17[60 * v4];
      uint64_t v20 = &v17[60 * v19];
      long long v21 = *a2;
      long long v22 = a2[1];
      long long v23 = a2[2];
      *(_OWORD *)(v18 + 44) = *(long long *)((char *)a2 + 44);
      *((_OWORD *)v18 + 1) = v22;
      *((_OWORD *)v18 + 2) = v23;
      *(_OWORD *)size_t v18 = v21;
      unint64_t v13 = v18 + 60;
      uint64_t v25 = (char *)*a1;
      char v24 = (char *)a1[1];
      if (v24 != *a1)
      {
        do
        {
          long long v26 = *(_OWORD *)(v24 - 60);
          long long v27 = *(_OWORD *)(v24 - 44);
          long long v28 = *(_OWORD *)(v24 - 28);
          *((_OWORD *)v18 - 1) = *((_OWORD *)v24 - 1);
          *(_OWORD *)(v18 - 28) = v28;
          *(_OWORD *)(v18 - 44) = v27;
          *(_OWORD *)(v18 - 60) = v26;
          v18 -= 60;
          v24 -= 60;
        }
        while (v24 != v25);
        char v24 = (char *)*a1;
      }
      *a1 = v18;
      a1[1] = v13;
      a1[2] = v20;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      long long v10 = *a2;
      long long v11 = a2[1];
      long long v12 = a2[2];
      *(_OWORD *)((char *)v2 + 44) = *(long long *)((char *)a2 + 44);
      v2[1] = v11;
      v2[2] = v12;
      _OWORD *v2 = v10;
      unint64_t v13 = (char *)v2 + 60;
    }
    a1[1] = v13;
  }
}

void Nightingale::ngt_HistoricalAnalyzer::appendPhaseSet(std::vector<int> *a1, uint64_t a2, int a3)
{
  std::vector<int>::pointer begin = a1[1].__begin_;
  std::vector<int>::pointer end = a1[1].__end_;
  uint64_t v5 = a1 + 1;
  uint64_t v7 = (char *)end - (char *)begin;
  if ((unint64_t)((char *)end - (char *)begin) <= 0xAB17)
  {
    uint64_t p_end_cap = (uint64_t)&a1[1].__end_cap_;
    unint64_t value = (unint64_t)a1[1].__end_cap_.__value_;
    if ((unint64_t)end >= value)
    {
      uint64_t v13 = v7 >> 2;
      uint64_t v14 = value - (void)begin;
      if (v14 >> 1 <= (unint64_t)((v7 >> 2) + 1)) {
        uint64_t v15 = v13 + 1;
      }
      else {
        uint64_t v15 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(p_end_cap, v16);
      std::vector<int>::pointer v18 = a1[1].__begin_;
      std::vector<int>::pointer v19 = a1[1].__end_;
      uint64_t v20 = (int *)&v17[4 * v13];
      long long v22 = (int *)&v17[4 * v21];
      int *v20 = a3;
      long long v12 = v20 + 1;
      while (v19 != v18)
      {
        int v23 = *--v19;
        *--uint64_t v20 = v23;
      }
      a1[1].__begin_ = v20;
      a1[1].__end_ = v12;
      a1[1].__end_cap_.__value_ = v22;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *std::vector<int>::pointer end = a3;
      long long v12 = end + 1;
    }
    unint64_t v24 = (unint64_t)a1[2].__end_cap_.__value_;
    a1[1].__end_ = v12;
    uint64_t v25 = a1[2].__end_;
    if ((unint64_t)v25 >= v24)
    {
      std::vector<int>::pointer v27 = a1[2].__begin_;
      uint64_t v28 = ((char *)v25 - (char *)v27) >> 3;
      if ((unint64_t)(v28 + 1) >> 61) {
        abort();
      }
      uint64_t v29 = v24 - (void)v27;
      uint64_t v30 = v29 >> 2;
      if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
        uint64_t v30 = v28 + 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31) {
        unint64_t v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>((uint64_t)&a1[2].__end_cap_, v31);
      }
      else {
        unint64_t v32 = 0;
      }
      uint64_t v33 = &v32[8 * v28];
      uint64_t v34 = (int *)&v32[8 * v31];
      *(void *)uint64_t v33 = a2;
      long long v26 = (int *)(v33 + 8);
      std::vector<int>::pointer v36 = a1[2].__begin_;
      unint64_t v35 = (char *)a1[2].__end_;
      if (v35 != (char *)v36)
      {
        do
        {
          uint64_t v37 = *((void *)v35 - 1);
          v35 -= 8;
          *((void *)v33 - 1) = v37;
          v33 -= 8;
        }
        while (v35 != (char *)v36);
        unint64_t v35 = (char *)a1[2].__begin_;
      }
      a1[2].__begin_ = (std::vector<int>::pointer)v33;
      a1[2].__end_ = v26;
      a1[2].__end_cap_.__value_ = v34;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      void *v25 = a2;
      long long v26 = (int *)(v25 + 1);
    }
    a1[2].__end_ = v26;
  }
  std::vector<int>::vector(&__p, v5);
  std::vector<Nightingale::PhaseSet>::vector(&v41, (uint64_t)&a1[2]);
  unint64_t v38 = a1[3].__begin_;
  if (v38)
  {
    a1[3].__end_ = v38;
    operator delete(v38);
  }
  a1[3] = __p;
  memset(&__p, 0, sizeof(__p));
  std::vector<int>::pointer v39 = a1[4].__begin_;
  if (v39)
  {
    a1[4].__end_ = v39;
    operator delete(v39);
    std::vector<int>::pointer v39 = __p.__begin_;
  }
  *(_OWORD *)&a1[4].__begin_ = v41;
  a1[4].__end_cap_.__value_ = v42;
  unint64_t v42 = 0;
  long long v41 = 0uLL;
  if (v39)
  {
    __p.__end_ = v39;
    operator delete(v39);
  }
}

void Nightingale::ngt_HistoricalAnalyzer::constructePseudo1stCycle(int a1@<W1>, int a2@<W2>, uint64_t a3@<X3>, char a4@<W4>, void *a5@<X5>, uint64_t a6@<X8>)
{
  *(unsigned char *)(a6 + 4) = 0;
  *(unsigned char *)(a6 + 8) = 0;
  *(unsigned char *)(a6 + 12) = 0;
  *(unsigned char *)(a6 + 16) = 0;
  *(unsigned char *)(a6 + 32) = 0;
  *(unsigned char *)(a6 + 36) = 0;
  *(unsigned char *)(a6 + 40) = 0;
  *(unsigned char *)(a6 + 44) = 0;
  *(unsigned char *)(a6 + 48) = 0;
  *(unsigned char *)(a6 + 52) = 0;
  *(unsigned char *)(a6 + 56) = 0;
  *(unsigned char *)(a6 + 60) = 0;
  *(unsigned char *)(a6 + 64) = 0;
  *(unsigned char *)(a6 + 68) = 0;
  *(void *)(a6 + 80) = 0;
  *(void *)(a6 + 88) = 0;
  *(void *)(a6 + 72) = 0;
  if (a2 < 0)
  {
    if (!a4) {
      goto LABEL_6;
    }
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a5[1] - *a5) >> 2) <= a3 >> 32) {
      abort();
    }
    int v6 = *(_DWORD *)(*a5 + 60 * SHIDWORD(a3));
    if (a1 - v6 <= 18) {
LABEL_6:
    }
      int v6 = a1 - 28;
  }
  else
  {
    *(_DWORD *)(a6 + 12) = a2;
    *(unsigned char *)(a6 + 16) = 1;
    int v6 = a2 - 4;
  }
  *(_DWORD *)a6 = v6;
  *(_DWORD *)(a6 + 20) = a1 - 1;
  *(unsigned char *)(a6 + 24) = 1;
}

void Nightingale::ngt_HistoricalAnalyzer::analyze(Nightingale::ngt_HistoricalAnalyzer *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v127 = *MEMORY[0x263EF8340];
  Nightingale::uiLogProcessor::uiLogProcessor((Nightingale::uiLogProcessor *)v117);
  Nightingale::wristTemperatureInputProcess::wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)&v116);
  Nightingale::wristTemperatureInputAcquisition::wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v115);
  Nightingale::fwHEstimation::fwHEstimation((Nightingale::fwHEstimation *)&v114);
  long long v112 = 0;
  uint64_t v111 = 0;
  uint64_t v113 = 0;
  *(unsigned char *)(a3 + 216) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
  if (ha_sensitive_logging_is_enabled())
  {
    log = ha_get_log();
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_HistoricalAnalyzer::analyze();
    }
  }
  std::vector<int> __x = (std::vector<int> *)((char *)this + 72);
  Nightingale::uiLogProcessor::hist_process((uint64_t)this, (uint64_t *)this + 9, (uint64_t)&v109);
  if (v109 != v110)
  {
    uint64_t v79 = a3;
    uint64_t JDayIdx1stTmp = Nightingale::wristTemperatureInputAcquisition::getJDayIdx1stTmp((uint64_t)v115, (unsigned int **)this);
    unsigned int v9 = v8;
    int jDayLastOPKPosBfr1stPeriodSt = Nightingale::uiLogProcessor::get_jDayLastOPKPosBfr1stPeriodSt((uint64_t)v117, *v109, this);
    unsigned int v82 = v9;
    int v83 = (void **)JDayIdx1stTmp;
    Nightingale::ngt_HistoricalAnalyzer::constructePseudo1stCycle(*v109, jDayLastOPKPosBfr1stPeriodSt, JDayIdx1stTmp, v9, this, (uint64_t)v106);
    std::vector<Nightingale::cycleInfo>::insert((uint64_t *)&v109, (uint64_t)v109, (unint64_t)v106);
    v98[0] = 0;
    v98[4] = 0;
    v98[8] = 0;
    v98[12] = 0;
    *(_DWORD *)&v98[16] = 3;
    v99[0] = 0;
    *(void *)&v98[20] = 0;
    *(_WORD *)&v98[28] = 0;
    *(int32x4_t *)&v99[4] = vdupq_n_s32(0x7FC00000u);
    v99[20] = 0;
    v99[24] = 0;
    v99[28] = 0;
    char v100 = 0;
    LOBYTE(v101[0]) = 0;
    char v102 = 0;
    LOBYTE(v103[0]) = 0;
    char v104 = 0;
    v105[0] = 0;
    v105[4] = 0;
    *(void *)&v105[8] = 0x17FC00000;
    *(_DWORD *)&v105[16] = 0;
    *(_WORD *)&v105[20] = 0;
    int64x2_t v96 = 0uLL;
    v97[0] = 0;
    if (ha_sensitive_logging_is_enabled())
    {
      long long v11 = ha_get_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_22F10E000, v11, OS_LOG_TYPE_DEFAULT, "\"Cycles\":[ \n", buf, 2u);
      }
    }
    long long v12 = v109;
    unint64_t v81 = v110;
    unint64_t v78 = this;
    int v77 = a2;
    if (v109 != v110)
    {
      unint64_t v13 = 0;
      unint64_t v80 = (char *)this + 96;
      do
      {
        LOBYTE(v87) = 0;
        BYTE4(v87) = 0;
        BYTE8(v87) = 0;
        BYTE12(v87) = 0;
        uint64_t v92 = 0;
        uint64_t v93 = 0;
        unint64_t v91 = 0;
        LODWORD(v94) = 3;
        if (ha_sensitive_logging_is_enabled())
        {
          uint64_t v14 = ha_get_log();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            int v15 = *v12;
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v13;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v15;
            _os_log_impl(&dword_22F10E000, v14, OS_LOG_TYPE_DEFAULT, "\t{\"idx\": %d, \"jDayCycleStart\": %d ", buf, 0xEu);
          }
        }
        std::vector<int>::vector(&v85, __x);
        std::vector<Nightingale::PhaseSet>::vector(v86, (uint64_t)v80);
        Nightingale::fwHEstimation::processPerCycle((uint64_t)v12, this, v83, v82, &v85, v115, a2, (uint64_t)buf);
        *(_OWORD *)unint64_t v98 = *(_OWORD *)buf;
        *(_OWORD *)&v98[14] = *(_OWORD *)&buf[14];
        *(_OWORD *)int v99 = v119;
        *(_OWORD *)&v99[16] = v120;
        char v100 = v121;
        std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::vector<float>,false>>((uint64_t)v101, (__n128 *)((char *)&v121 + 8));
        std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::vector<float>,false>>((uint64_t)v103, (__n128 *)((char *)&v123 + 8));
        *(_OWORD *)unint64_t v105 = *(_OWORD *)((char *)v125 + 8);
        *(void *)&v105[14] = *(void *)((char *)&v125[1] + 6);
        if (LOBYTE(v125[0]) && *((void *)&v123 + 1))
        {
          *(void *)&long long v124 = *((void *)&v123 + 1);
          operator delete(*((void **)&v123 + 1));
        }
        if ((_BYTE)v123 && *((void *)&v121 + 1))
        {
          *(void *)&long long v122 = *((void *)&v121 + 1);
          operator delete(*((void **)&v121 + 1));
        }
        if (v86[0])
        {
          v86[1] = v86[0];
          operator delete(v86[0]);
        }
        if (v85.__begin_)
        {
          v85.__end_ = v85.__begin_;
          operator delete(v85.__begin_);
        }
        if (a2)
        {
          uint64_t v16 = v96.i64[1];
          if (v96.i64[1] >= v97[0])
          {
            uint64_t v18 = (v96.i64[1] - v96.i64[0]) >> 7;
            if ((unint64_t)(v18 + 1) >> 57) {
LABEL_158:
            }
              abort();
            unint64_t v19 = (v97[0] - v96.i64[0]) >> 6;
            if (v19 <= v18 + 1) {
              unint64_t v19 = v18 + 1;
            }
            if (v97[0] - v96.i64[0] >= 0x7FFFFFFFFFFFFF80uLL) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            *(void *)&long long v119 = v97;
            if (v20) {
              uint64_t v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::coreAnalyticsHistPerCycle_t>>((uint64_t)v97, v20);
            }
            else {
              uint64_t v21 = 0;
            }
            uint64_t v22 = (uint64_t)&v21[128 * v18];
            *(void *)buf = v21;
            *(void *)&buf[8] = v22;
            *(void *)&buf[24] = &v21[128 * v20];
            std::construct_at[abi:nn180100]<Nightingale::coreAnalyticsHistPerCycle_t,Nightingale::coreAnalyticsHistPerCycle_t const&,Nightingale::coreAnalyticsHistPerCycle_t*>(v22, (long long *)v99);
            uint64_t v17 = v22 + 128;
            *(void *)&uint8_t buf[16] = v22 + 128;
            unint64_t v24 = (long long *)v96.i64[1];
            int v23 = (long long *)v96.i64[0];
            uint64_t v25 = *(void *)&buf[8];
            if (v96.i64[1] == v96.i64[0])
            {
              int64x2_t v26 = vdupq_n_s64(v96.u64[1]);
            }
            else
            {
              do
              {
                v25 -= 128;
                v24 -= 8;
                std::construct_at[abi:nn180100]<Nightingale::coreAnalyticsHistPerCycle_t,Nightingale::coreAnalyticsHistPerCycle_t,Nightingale::coreAnalyticsHistPerCycle_t*>(v25, v24);
              }
              while (v24 != v23);
              int64x2_t v26 = v96;
              uint64_t v17 = *(void *)&buf[16];
            }
            v96.i64[0] = v25;
            v96.i64[1] = v17;
            *(int64x2_t *)&buf[8] = v26;
            uint64_t v27 = v97[0];
            v97[0] = *(void *)&buf[24];
            *(void *)&buf[24] = v27;
            *(void *)buf = v26.i64[0];
            std::__split_buffer<Nightingale::coreAnalyticsHistPerCycle_t>::~__split_buffer((uint64_t)buf);
            this = v78;
            a2 = v77;
          }
          else
          {
            std::construct_at[abi:nn180100]<Nightingale::coreAnalyticsHistPerCycle_t,Nightingale::coreAnalyticsHistPerCycle_t const&,Nightingale::coreAnalyticsHistPerCycle_t*>(v96.i64[1], (long long *)v99);
            uint64_t v17 = v16 + 128;
          }
          v96.i64[1] = v17;
        }
        if (v13)
        {
          LODWORD(v87) = *(_DWORD *)v98;
          BYTE4(v87) = v98[4];
          DWORD2(v87) = *(_DWORD *)&v98[8];
          BYTE12(v87) = v98[12];
          char v90 = *((unsigned char *)v12 + 28);
          int v88 = *v12;
          uint64_t v94 = *(void *)&v98[16];
          int v95 = *(_DWORD *)&v98[24];
          if (&v91 != (void **)(v12 + 18)) {
            std::vector<Nightingale::Phase>::__assign_with_size[abi:nn180100]<Nightingale::Phase*,Nightingale::Phase*>(&v91, *((char **)v12 + 9), *((char **)v12 + 10), *((void *)v12 + 10) - *((void *)v12 + 9));
          }
          if (*((unsigned char *)v12 + 8))
          {
            int v89 = v12[1];
            std::vector<Nightingale::ngt_HistoricCycle>::push_back[abi:nn180100]((uint64_t *)v79, &v87);
          }
        }
        ++v13;
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v110 - (char *)v109) >> 5);
        int is_enabled = ha_sensitive_logging_is_enabled();
        if (v28 <= v13)
        {
          if (!is_enabled) {
            goto LABEL_54;
          }
          uint64_t v33 = ha_get_log();
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_54;
          }
          *(_WORD *)buf = 0;
          unint64_t v31 = v33;
          unint64_t v32 = "\t} \n ";
        }
        else
        {
          if (!is_enabled) {
            goto LABEL_54;
          }
          uint64_t v30 = ha_get_log();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_54;
          }
          *(_WORD *)buf = 0;
          unint64_t v31 = v30;
          unint64_t v32 = "\t}, \n ";
        }
        _os_log_impl(&dword_22F10E000, v31, OS_LOG_TYPE_DEFAULT, v32, buf, 2u);
LABEL_54:
        if (v91)
        {
          uint64_t v92 = v91;
          operator delete(v91);
        }
        v12 += 24;
      }
      while (v12 != v81);
    }
    if (ha_sensitive_logging_is_enabled())
    {
      uint64_t v34 = ha_get_log();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_22F10E000, v34, OS_LOG_TYPE_DEFAULT, "], \n", buf, 2u);
      }
    }
    Nightingale::phaseFactorHist::tagHistReproductive((uint64_t)&v111, (void *)v79, (uint64_t *)__x);
    if (ha_sensitive_logging_is_enabled())
    {
      unint64_t v35 = ha_get_log();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
        Nightingale::ngt_HistoricalAnalyzer::analyze();
      }
    }
    uint64_t v36 = *(void *)(v79 + 8);
    if (*(void *)v79 == v36)
    {
      if (ha_sensitive_logging_is_enabled())
      {
        std::vector<int>::pointer v39 = ha_get_log();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
          Nightingale::uiLogProcessor::genCycleSlide();
        }
      }
    }
    else
    {
      if (v36 - *(void *)v79 != 72)
      {
        uint64_t v59 = 0;
        for (unint64_t i = 0; -1 - 0x71C71C71C71C71C7 * ((uint64_t)(*(void *)(v79 + 8) - *(void *)v79) >> 3) > i; ++i)
        {
          if (ha_sensitive_logging_is_enabled())
          {
            BOOL v61 = ha_get_log();
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
            {
              if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v79 + 8) - *(void *)v79) >> 3) <= i) {
                goto LABEL_158;
              }
              uint64_t v62 = *(void *)v79 + v59;
              if (*(unsigned char *)(v62 + 4)) {
                int v63 = *(_DWORD *)v62;
              }
              else {
                int v63 = -1;
              }
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v63;
              _os_log_debug_impl(&dword_22F10E000, v61, OS_LOG_TYPE_DEBUG, "%d, ", buf, 8u);
            }
          }
          v59 += 72;
        }
      }
      this = v78;
      a2 = v77;
      if (ha_sensitive_logging_is_enabled())
      {
        uint64_t v37 = ha_get_log();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
          Nightingale::ngt_HistoricalAnalyzer::analyze();
        }
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      unint64_t v40 = ha_get_log();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
        Nightingale::ngt_HistoricalAnalyzer::analyze();
      }
    }
    uint64_t v41 = *(void *)(v79 + 8);
    if (*(void *)v79 == v41)
    {
      if (ha_sensitive_logging_is_enabled())
      {
        unint64_t v43 = ha_get_log();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
          Nightingale::ngt_HistoricalAnalyzer::analyze();
        }
      }
    }
    else
    {
      if (v41 - *(void *)v79 != 72)
      {
        uint64_t v64 = 0;
        for (unint64_t j = 0; -1 - 0x71C71C71C71C71C7 * ((uint64_t)(*(void *)(v79 + 8) - *(void *)v79) >> 3) > j; ++j)
        {
          if (ha_sensitive_logging_is_enabled())
          {
            unint64_t v66 = ha_get_log();
            if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
            {
              if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v79 + 8) - *(void *)v79) >> 3) <= j) {
                goto LABEL_158;
              }
              uint64_t v67 = *(void *)v79 + v64;
              if (*(unsigned char *)(v67 + 12)) {
                int v68 = *(_DWORD *)(v67 + 8);
              }
              else {
                int v68 = -1;
              }
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v68;
              _os_log_debug_impl(&dword_22F10E000, v66, OS_LOG_TYPE_DEBUG, "%d, ", buf, 8u);
            }
          }
          v64 += 72;
        }
      }
      this = v78;
      a2 = v77;
      if (ha_sensitive_logging_is_enabled())
      {
        unint64_t v42 = ha_get_log();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
          Nightingale::ngt_HistoricalAnalyzer::analyze();
        }
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      unint64_t v44 = ha_get_log();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)) {
        Nightingale::ngt_HistoricalAnalyzer::analyze();
      }
    }
    uint64_t v45 = *(void *)(v79 + 8);
    if (*(void *)v79 == v45)
    {
      if (ha_sensitive_logging_is_enabled())
      {
        uint64_t v47 = ha_get_log();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
          Nightingale::ngt_HistoricalAnalyzer::analyze();
        }
      }
    }
    else
    {
      if (v45 - *(void *)v79 != 72)
      {
        unint64_t v69 = 0;
        uint64_t v70 = 56;
        do
        {
          if (ha_sensitive_logging_is_enabled())
          {
            unint64_t v71 = ha_get_log();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
            {
              if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v79 + 8) - *(void *)v79) >> 3) <= v69) {
                goto LABEL_158;
              }
              int v72 = *(_DWORD *)(*(void *)v79 + v70);
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v72;
              _os_log_debug_impl(&dword_22F10E000, v71, OS_LOG_TYPE_DEBUG, "%d, ", buf, 8u);
            }
          }
          ++v69;
          v70 += 72;
        }
        while (-1 - 0x71C71C71C71C71C7 * ((uint64_t)(*(void *)(v79 + 8) - *(void *)v79) >> 3) > v69);
      }
      this = v78;
      a2 = v77;
      if (ha_sensitive_logging_is_enabled())
      {
        int v46 = ha_get_log();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
          Nightingale::ngt_HistoricalAnalyzer::analyze();
        }
      }
    }
    if (ha_sensitive_logging_is_enabled())
    {
      unint64_t v48 = ha_get_log();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG)) {
        Nightingale::ngt_HistoricalAnalyzer::analyze();
      }
    }
    uint64_t v49 = *(void *)(v79 + 8);
    if (*(void *)v79 == v49)
    {
      if (ha_sensitive_logging_is_enabled())
      {
        unint64_t v51 = ha_get_log();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG)) {
          Nightingale::ngt_HistoricalAnalyzer::analyze();
        }
      }
    }
    else
    {
      if (v49 - *(void *)v79 != 72)
      {
        unint64_t v73 = 0;
        uint64_t v74 = 60;
        do
        {
          if (ha_sensitive_logging_is_enabled())
          {
            unint64_t v75 = ha_get_log();
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
            {
              if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v79 + 8) - *(void *)v79) >> 3) <= v73) {
                goto LABEL_158;
              }
              int v76 = *(_DWORD *)(*(void *)v79 + v74);
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v76;
              _os_log_debug_impl(&dword_22F10E000, v75, OS_LOG_TYPE_DEBUG, "%d, ", buf, 8u);
            }
          }
          ++v73;
          v74 += 72;
        }
        while (-1 - 0x71C71C71C71C71C7 * ((uint64_t)(*(void *)(v79 + 8) - *(void *)v79) >> 3) > v73);
      }
      this = v78;
      a2 = v77;
      if (ha_sensitive_logging_is_enabled())
      {
        uint64_t v50 = ha_get_log();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
          Nightingale::ngt_HistoricalAnalyzer::analyze();
        }
      }
    }
    if (ha_sensitive_logging_is_enabled()
      && (size_t v52 = ha_get_log(), os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG)))
    {
      Nightingale::ngt_HistoricalAnalyzer::analyze();
      if (!a2)
      {
LABEL_111:
        *(void *)buf = &v96;
        std::vector<Nightingale::coreAnalyticsHistPerCycle_t>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
        if (v104 && v103[0])
        {
          v103[1] = v103[0];
          operator delete(v103[0]);
        }
        if (v102 && v101[0])
        {
          v101[1] = v101[0];
          operator delete(v101[0]);
        }
        if (v107)
        {
          unint64_t v108 = v107;
          operator delete(v107);
        }
        goto LABEL_119;
      }
    }
    else if (!a2)
    {
      goto LABEL_111;
    }
    Nightingale::ngt_HistoricalAnalyzer::getCoreAnalyticsContent(this, (uint64_t *)&v109, (uint64_t)v83, v82, (long long **)&v96, (uint64_t)buf);
    long long v53 = v125[0];
    *(_OWORD *)(v79 + 168) = v125[1];
    long long v54 = v125[3];
    *(_OWORD *)(v79 + 184) = v125[2];
    *(_OWORD *)(v79 + 200) = v54;
    long long v55 = v121;
    *(_OWORD *)(v79 + 104) = v122;
    long long v56 = v124;
    *(_OWORD *)(v79 + 120) = v123;
    *(_OWORD *)(v79 + 136) = v56;
    *(_OWORD *)(v79 + 152) = v53;
    long long v57 = *(_OWORD *)buf;
    *(_OWORD *)(v79 + 40) = *(_OWORD *)&buf[16];
    long long v58 = v120;
    *(_OWORD *)(v79 + 56) = v119;
    *(_OWORD *)(v79 + 72) = v58;
    *(_OWORD *)(v79 + 88) = v55;
    *(unsigned char *)(v79 + 216) = v126;
    *(_OWORD *)(v79 + 24) = v57;
    goto LABEL_111;
  }
  if (ha_sensitive_logging_is_enabled())
  {
    unint64_t v38 = ha_get_log();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
      Nightingale::ngt_HistoricalAnalyzer::analyze();
    }
  }
LABEL_119:
  *(void *)buf = &v109;
  std::vector<Nightingale::cycleInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
  if (v111)
  {
    long long v112 = v111;
    operator delete(v111);
  }
  Nightingale::fwHEstimation::~fwHEstimation((Nightingale::fwHEstimation *)&v114);
  Nightingale::wristTemperatureInputAcquisition::~wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v115);
  Nightingale::wristTemperatureInputProcess::~wristTemperatureInputProcess((Nightingale::wristTemperatureInputProcess *)&v116);
  Nightingale::uiLogProcessor::~uiLogProcessor((Nightingale::uiLogProcessor *)v117);
}

void *Nightingale::phaseFactorHist::phaseFactorHist(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

unint64_t std::vector<Nightingale::cycleInfo>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = a2 - *a1;
  int64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 5) + 1;
    if (v15 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 5);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x155555555555555) {
      unint64_t v17 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v33 = a1 + 2;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::cycleInfo>>((uint64_t)(a1 + 2), v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (uint64_t)&v18[32 * (v8 >> 5)];
    uint64_t v29 = v18;
    uint64_t v30 = v19;
    unint64_t v20 = &v18[96 * v17];
    uint64_t v31 = v19;
    unint64_t v32 = v20;
    if (v9 == v17)
    {
      if (v8 < 1)
      {
        if (v7 == v4) {
          unint64_t v24 = 1;
        }
        else {
          unint64_t v24 = 0x5555555555555556 * (v8 >> 5);
        }
        uint64_t v38 = v11;
        uint64_t v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::cycleInfo>>(v11, v24);
        int64x2_t v26 = &v25[96 * (v24 >> 2)];
        uint64_t v29 = v25;
        uint64_t v30 = (uint64_t)v26;
        uint64_t v34 = v18;
        unint64_t v35 = &v18[32 * (v8 >> 5)];
        uint64_t v31 = (uint64_t)v26;
        unint64_t v32 = &v25[96 * v27];
        uint64_t v36 = v35;
        uint64_t v37 = v20;
        std::__split_buffer<Nightingale::cycleInfo>::~__split_buffer((uint64_t)&v34);
        uint64_t v19 = (uint64_t)v26;
      }
      else
      {
        uint64_t v21 = v9 + 2;
        if (v9 >= -1) {
          uint64_t v21 = v9 + 1;
        }
        uint64_t v22 = v19 - 96 * (v21 >> 1);
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,Nightingale::cycleInfo *,Nightingale::cycleInfo *,Nightingale::cycleInfo *,0>((uint64_t)&v18[32 * (v8 >> 5)], (uint64_t)&v18[32 * (v8 >> 5)], v22);
        uint64_t v19 = v23;
        uint64_t v30 = v22;
        uint64_t v31 = v23;
      }
    }
    std::construct_at[abi:nn180100]<Nightingale::cycleInfo,Nightingale::cycleInfo&,Nightingale::cycleInfo*>(v19, a3);
    v31 += 96;
    unint64_t v4 = std::vector<Nightingale::cycleInfo>::__swap_out_circular_buffer(a1, &v29, v4);
    std::__split_buffer<Nightingale::cycleInfo>::~__split_buffer((uint64_t)&v29);
  }
  else if (a2 == v6)
  {
    std::construct_at[abi:nn180100]<Nightingale::cycleInfo,Nightingale::cycleInfo&,Nightingale::cycleInfo*>(a2, a3);
    a1[1] = v4 + 96;
  }
  else
  {
    std::vector<Nightingale::cycleInfo>::__move_range((uint64_t)a1, a2, v6, a2 + 96);
    if (v4 <= a3) {
      a3 += 96 * (a1[1] > a3);
    }
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a3;
    long long v12 = *(_OWORD *)(a3 + 16);
    long long v13 = *(_OWORD *)(a3 + 32);
    long long v14 = *(_OWORD *)(a3 + 48);
    *(void *)(v4 + 61) = *(void *)(a3 + 61);
    *(_OWORD *)(v4 + 32) = v13;
    *(_OWORD *)(v4 + 48) = v14;
    *(_OWORD *)(v4 + 16) = v12;
    if (v4 != a3) {
      std::vector<Nightingale::Phase>::__assign_with_size[abi:nn180100]<Nightingale::Phase*,Nightingale::Phase*>((void *)(v7 + 32 * (v8 >> 5) + 72), *(char **)(a3 + 72), *(char **)(a3 + 80), *(void *)(a3 + 80) - *(void *)(a3 + 72));
    }
  }
  return v4;
}

uint64_t std::vector<Nightingale::ngt_HistoricCycle>::push_back[abi:nn180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x38E38E38E38E38ELL) {
      abort();
    }
    unint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x1C71C71C71C71C7) {
      unint64_t v13 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_HistoricCycle>>(v4, v13);
    }
    else {
      long long v14 = 0;
    }
    unint64_t v15 = v14;
    unint64_t v16 = &v14[72 * v10];
    uint64_t v18 = &v14[72 * v13];
    std::construct_at[abi:nn180100]<Nightingale::ngt_HistoricCycle,Nightingale::ngt_HistoricCycle const&,Nightingale::ngt_HistoricCycle*>((uint64_t)v16, a2);
    unint64_t v17 = v16 + 72;
    std::vector<Nightingale::ngt_HistoricCycle>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<Nightingale::ngt_HistoricCycle>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::construct_at[abi:nn180100]<Nightingale::ngt_HistoricCycle,Nightingale::ngt_HistoricCycle const&,Nightingale::ngt_HistoricCycle*>(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 72;
  }
  a1[1] = v9;
  return result;
}

void Nightingale::phaseFactorHist::tagHistReproductive(uint64_t a1, void *a2, uint64_t *a3)
{
  if (*a3 != a3[1])
  {
    std::vector<int> __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v4 = a2[1];
    unint64_t v5 = 0x8E38E38E38E38E39 * ((v4 - *a2) >> 3);
    if ((int)v5 >= 1)
    {
      if (v5 != 1)
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        uint64_t v10 = (v5 - 1);
        do
        {
          unint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)(a2[1] - *a2) >> 3);
          if (v11 <= v9
            || (unint64_t v12 = v9 + 1, v11 <= v9 + 1)
            || (Nightingale::phaseFactorProcessor::tagPhaseJDayRange(a1, *(unsigned int *)(*a2 + v8 + 16) | ((unint64_t)(*(_DWORD *)(*a2 + v8 + 88) - 1) << 32), a3, (unint64_t *)&__p), unint64_t v13 = v12 - 1, 0x8E38E38E38E38E39 * ((uint64_t)(a2[1] - *a2) >> 3) <= v13))
          {
            abort();
          }
          long long v14 = (void **)(*a2 + v8 + 32);
          if (v14 != &__p) {
            std::vector<Nightingale::Phase>::__assign_with_size[abi:nn180100]<Nightingale::Phase*,Nightingale::Phase*>(v14, (char *)__p, v18, v18 - (unsigned char *)__p);
          }
          v8 += 72;
          unint64_t v9 = v13 + 1;
        }
        while (v13 + 1 != v10);
        uint64_t v4 = a2[1];
      }
      Nightingale::phaseFactorProcessor::tagPhaseJDayRange(a1, *(unsigned int *)(v4 - 56) | 0xFFFFFFFF00000000, a3, (unint64_t *)&__p);
      unint64_t v15 = (void **)(a2[1] - 40);
      unint64_t v16 = (char *)__p;
      if (v15 != &__p)
      {
        std::vector<Nightingale::Phase>::__assign_with_size[abi:nn180100]<Nightingale::Phase*,Nightingale::Phase*>(v15, (char *)__p, v18, v18 - (unsigned char *)__p);
        unint64_t v16 = (char *)__p;
      }
      if (v16)
      {
        uint64_t v18 = v16;
        operator delete(v16);
      }
    }
  }
}

void Nightingale::ngt_HistoricalAnalyzer::getCoreAnalyticsContent(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, long long **a5@<X4>, uint64_t a6@<X8>)
{
  *(unsigned char *)a6 = 0;
  *(unsigned char *)(a6 + 192) = 0;
  unint64_t v12 = a5[1];
  if (*a5 == v12 || (v14 = *a2, uint64_t v13 = a2[1], *a2 == v13))
  {
    if ((unint64_t)((char *)v12 - (char *)*a5) < 0x100) {
      return;
    }
    uint64_t v14 = *a2;
    uint64_t v13 = a2[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v13 - *a2) >> 5) < 2) {
      return;
    }
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,Nightingale::cycleInfo *,Nightingale::cycleInfo *,Nightingale::cycleInfo *,0>(v14 + 96, v13, v14);
  uint64_t v16 = v15;
  uint64_t v17 = a2[1];
  if (v17 != v15)
  {
    do
    {
      uint64_t v18 = *(void **)(v17 - 24);
      if (v18)
      {
        *(void *)(v17 - 16) = v18;
        operator delete(v18);
      }
      v17 -= 96;
    }
    while (v17 != v16);
  }
  a2[1] = v16;
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<Nightingale::coreAnalyticsHistPerCycle_t *,Nightingale::coreAnalyticsHistPerCycle_t *,Nightingale::coreAnalyticsHistPerCycle_t *>((uint64_t)&v380, *a5 + 8, a5[1], (uint64_t)*a5);
  unint64_t v20 = v19;
  uint64_t v21 = (uint64_t)a5[1];
  if ((long long *)v21 != v19)
  {
    do
    {
      v21 -= 128;
      std::__destroy_at[abi:nn180100]<Nightingale::coreAnalyticsHistPerCycle_t,0>(v21);
    }
    while ((long long *)v21 != v20);
  }
  a5[1] = v20;
  uint64_t v23 = *a2;
  uint64_t v22 = a2[1];
  if (*a2 == v22)
  {
    int v25 = 0;
    int v24 = 0;
  }
  else
  {
    int v24 = 0;
    int v25 = 0;
    uint64_t v26 = *a2;
    do
    {
      if (*(unsigned char *)(v26 + 8) && *(_DWORD *)v26 == *(_DWORD *)(v26 + 4)) {
        ++v24;
      }
      v25 += *(unsigned __int8 *)(v26 + 16);
      v26 += 96;
    }
    while (v26 != v22);
  }
  int v325 = v24;
  uint64_t v27 = *(void **)(v22 - 24);
  uint64_t v332 = a2[1];
  if (v27)
  {
    *(void *)(v22 - 16) = v27;
    operator delete(v27);
    uint64_t v22 = v332;
    unint64_t v20 = a5[1];
  }
  a2[1] = v22 - 96;
  std::__destroy_at[abi:nn180100]<Nightingale::coreAnalyticsHistPerCycle_t,0>((uint64_t)(v20 - 8));
  a5[1] = v20 - 8;
  char HasMultipleWatchHist = Nightingale::ngt_HistoricalAnalyzer::getHasMultipleWatchHist(a1, 60, a3, a4);
  v380 = 0;
  unint64_t v381 = 0;
  uint64_t v382 = 0;
  v377 = 0;
  unint64_t v378 = 0;
  uint64_t v379 = 0;
  v374 = 0;
  v375 = 0;
  v376 = 0;
  v371 = 0;
  v372 = 0;
  v373 = 0;
  v368 = 0;
  v369 = 0;
  v370 = 0;
  v365 = 0;
  v366 = 0;
  v367 = 0;
  std::vector<int> __p = 0;
  v363 = 0;
  v364 = 0;
  v359 = 0;
  v360 = 0;
  v361 = 0;
  v356 = 0;
  v357 = 0;
  v358 = 0;
  v353 = 0;
  v354 = 0;
  v355 = 0;
  v350 = 0;
  v351 = 0;
  v352 = 0;
  v347 = 0;
  std::vector<int> __dst = 0;
  uint64_t v349 = 0;
  v344 = 0;
  v345 = 0;
  uint64_t v29 = (unsigned __int8 *)*a5;
  unint64_t v28 = (unsigned __int8 *)a5[1];
  unint64_t v30 = (unint64_t)(v28 - (unsigned __int8 *)*a5) >> 7;
  uint64_t v346 = 0;
  if ((int)v30 <= 12) {
    int v31 = 12;
  }
  else {
    int v31 = v30;
  }
  if ((int)v30 <= 15) {
    LODWORD(v30) = 15;
  }
  v341 = 0;
  v342 = 0;
  v343 = 0;
  uint64_t v328 = v23;
  if (v28 == v29)
  {
    unint64_t v139 = 0;
    std::vector<int>::pointer v140 = 0;
  }
  else
  {
    unsigned int v32 = 0;
    unsigned int v33 = v31 - 12;
    unsigned int v34 = v30 - 15;
    do
    {
      if (*v29)
      {
        LOBYTE(v383) = *((float *)v29 + 1) != 0.0;
        std::vector<BOOL>::push_back((uint64_t)&v380, &v383);
        if (*v29)
        {
          unint64_t v35 = v375;
          if (v375 >= v376)
          {
            uint64_t v37 = v374;
            uint64_t v38 = v375 - v374;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 62) {
              goto LABEL_696;
            }
            uint64_t v40 = (char *)v376 - (char *)v374;
            if (((char *)v376 - (char *)v374) >> 1 > v39) {
              unint64_t v39 = v40 >> 1;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v39;
            }
            if (v41)
            {
              unint64_t v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v376, v41);
              uint64_t v37 = v374;
              unint64_t v35 = v375;
            }
            else
            {
              unint64_t v42 = 0;
            }
            unint64_t v43 = (float *)&v42[4 * v38];
            *unint64_t v43 = *((float *)v29 + 2);
            uint64_t v36 = v43 + 1;
            while (v35 != v37)
            {
              int v44 = *((_DWORD *)v35-- - 1);
              *((_DWORD *)v43-- - 1) = v44;
            }
            v374 = v43;
            v375 = v36;
            v376 = (float *)&v42[4 * v41];
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            float *v375 = *((float *)v29 + 2);
            uint64_t v36 = v35 + 1;
          }
          v375 = v36;
          uint64_t v45 = v363;
          if (v363 >= v364)
          {
            uint64_t v47 = (char *)__p;
            uint64_t v48 = (v363 - (unsigned char *)__p) >> 2;
            unint64_t v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 62) {
              goto LABEL_696;
            }
            uint64_t v50 = v364 - (unsigned char *)__p;
            if ((v364 - (unsigned char *)__p) >> 1 > v49) {
              unint64_t v49 = v50 >> 1;
            }
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v49;
            }
            if (v51)
            {
              size_t v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v364, v51);
              uint64_t v47 = (char *)__p;
              uint64_t v45 = v363;
            }
            else
            {
              size_t v52 = 0;
            }
            long long v53 = &v52[4 * v48];
            *(_DWORD *)long long v53 = *((_DWORD *)v29 + 3);
            int v46 = v53 + 4;
            while (v45 != v47)
            {
              int v54 = *((_DWORD *)v45 - 1);
              v45 -= 4;
              *((_DWORD *)v53 - 1) = v54;
              v53 -= 4;
            }
            std::vector<int> __p = v53;
            v363 = v46;
            v364 = &v52[4 * v51];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *(_DWORD *)v363 = *((_DWORD *)v29 + 3);
            int v46 = v45 + 4;
          }
          v363 = v46;
          if (v29[108])
          {
            long long v55 = v366;
            if (v366 >= v367)
            {
              long long v57 = (char *)v365;
              uint64_t v58 = (v366 - (unsigned char *)v365) >> 2;
              unint64_t v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 62) {
                goto LABEL_696;
              }
              uint64_t v60 = v367 - (unsigned char *)v365;
              if ((v367 - (unsigned char *)v365) >> 1 > v59) {
                unint64_t v59 = v60 >> 1;
              }
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v61 = v59;
              }
              if (v61)
              {
                uint64_t v62 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v367, v61);
                long long v57 = (char *)v365;
                long long v55 = v366;
              }
              else
              {
                uint64_t v62 = 0;
              }
              int v63 = &v62[4 * v58];
              *(_DWORD *)int v63 = *((_DWORD *)v29 + 26);
              long long v56 = v63 + 4;
              while (v55 != v57)
              {
                int v64 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v63 - 1) = v64;
                v63 -= 4;
              }
              v365 = v63;
              v366 = v56;
              v367 = &v62[4 * v61];
              if (v57) {
                operator delete(v57);
              }
            }
            else
            {
              *(_DWORD *)v366 = *((_DWORD *)v29 + 26);
              long long v56 = v55 + 4;
            }
            v366 = v56;
          }
        }
      }
      int v65 = *v29;
      if (v32 >= v33 && *v29)
      {
        unint64_t v66 = v372;
        if (v372 >= v373)
        {
          int v68 = v371;
          uint64_t v69 = (v372 - (char *)v371) >> 2;
          unint64_t v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 62) {
            goto LABEL_696;
          }
          uint64_t v71 = v373 - (char *)v371;
          if ((v373 - (char *)v371) >> 1 > v70) {
            unint64_t v70 = v71 >> 1;
          }
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v72 = v70;
          }
          if (v72)
          {
            unint64_t v73 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v373, v72);
            int v68 = v371;
            unint64_t v66 = v372;
          }
          else
          {
            unint64_t v73 = 0;
          }
          uint64_t v74 = &v73[4 * v69];
          *(_DWORD *)uint64_t v74 = *((_DWORD *)v29 + 4);
          uint64_t v67 = v74 + 4;
          while (v66 != (char *)v68)
          {
            int v75 = *((_DWORD *)v66 - 1);
            v66 -= 4;
            *((_DWORD *)v74 - 1) = v75;
            v74 -= 4;
          }
          v371 = (float *)v74;
          v372 = v67;
          v373 = &v73[4 * v72];
          if (v68) {
            operator delete(v68);
          }
        }
        else
        {
          *(_DWORD *)v372 = *((_DWORD *)v29 + 4);
          uint64_t v67 = v66 + 4;
        }
        v372 = v67;
        int v76 = v342;
        if (v342 >= v343)
        {
          unint64_t v78 = (char *)v341;
          uint64_t v79 = (v342 - (unsigned char *)v341) >> 2;
          unint64_t v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 62) {
            goto LABEL_696;
          }
          uint64_t v81 = v343 - (unsigned char *)v341;
          if ((v343 - (unsigned char *)v341) >> 1 > v80) {
            unint64_t v80 = v81 >> 1;
          }
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v82 = v80;
          }
          if (v82)
          {
            int v83 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v343, v82);
            unint64_t v78 = (char *)v341;
            int v76 = v342;
          }
          else
          {
            int v83 = 0;
          }
          char v84 = &v83[4 * v79];
          *(_DWORD *)char v84 = *((_DWORD *)v29 + 30);
          int v77 = v84 + 4;
          while (v76 != v78)
          {
            int v85 = *((_DWORD *)v76 - 1);
            v76 -= 4;
            *((_DWORD *)v84 - 1) = v85;
            v84 -= 4;
          }
          v341 = v84;
          v342 = v77;
          v343 = &v83[4 * v82];
          if (v78) {
            operator delete(v78);
          }
        }
        else
        {
          *(_DWORD *)v342 = *((_DWORD *)v29 + 30);
          int v77 = v76 + 4;
        }
        v342 = v77;
        int v65 = *v29;
      }
      if (v32 >= v34 && v65)
      {
        unint64_t v86 = v369;
        if (v369 >= v370)
        {
          int v88 = v368;
          uint64_t v89 = (v369 - v368) >> 2;
          unint64_t v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 62) {
            goto LABEL_696;
          }
          uint64_t v91 = v370 - v368;
          if ((v370 - v368) >> 1 > v90) {
            unint64_t v90 = v91 >> 1;
          }
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v92 = v90;
          }
          if (v92)
          {
            uint64_t v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v370, v92);
            int v88 = v368;
            unint64_t v86 = v369;
          }
          else
          {
            uint64_t v93 = 0;
          }
          uint64_t v94 = &v93[4 * v89];
          *(_DWORD *)uint64_t v94 = *((_DWORD *)v29 + 2);
          long long v87 = v94 + 4;
          while (v86 != v88)
          {
            int v95 = *((_DWORD *)v86 - 1);
            v86 -= 4;
            *((_DWORD *)v94 - 1) = v95;
            v94 -= 4;
          }
          v368 = v94;
          v369 = v87;
          v370 = &v93[4 * v92];
          if (v88) {
            operator delete(v88);
          }
        }
        else
        {
          *(_DWORD *)v369 = *((_DWORD *)v29 + 2);
          long long v87 = v86 + 4;
        }
        v369 = v87;
        int64x2_t v96 = v360;
        if (v360 >= v361)
        {
          unint64_t v98 = (char *)v359;
          uint64_t v99 = (v360 - (unsigned char *)v359) >> 2;
          unint64_t v100 = v99 + 1;
          if ((unint64_t)(v99 + 1) >> 62) {
            goto LABEL_696;
          }
          uint64_t v101 = v361 - (unsigned char *)v359;
          if ((v361 - (unsigned char *)v359) >> 1 > v100) {
            unint64_t v100 = v101 >> 1;
          }
          if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v102 = v100;
          }
          if (v102)
          {
            unint64_t v103 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v361, v102);
            unint64_t v98 = (char *)v359;
            int64x2_t v96 = v360;
          }
          else
          {
            unint64_t v103 = 0;
          }
          char v104 = &v103[4 * v99];
          *(_DWORD *)char v104 = *((_DWORD *)v29 + 29);
          unint64_t v97 = v104 + 4;
          while (v96 != v98)
          {
            int v105 = *((_DWORD *)v96 - 1);
            v96 -= 4;
            *((_DWORD *)v104 - 1) = v105;
            v104 -= 4;
          }
          v359 = v104;
          v360 = v97;
          v361 = &v103[4 * v102];
          if (v98) {
            operator delete(v98);
          }
        }
        else
        {
          *(_DWORD *)v360 = *((_DWORD *)v29 + 29);
          unint64_t v97 = v96 + 4;
        }
        v360 = v97;
        if (v29[125]) {
          std::vector<BOOL>::push_back((uint64_t)&v377, v29 + 124);
        }
      }
      if (v32 >= v33)
      {
        int v106 = *((_DWORD *)v29 + 28);
        uint64_t v107 = v357;
        if (v357 >= v358)
        {
          uint64_t v109 = (char *)v356;
          uint64_t v110 = (v357 - (unsigned char *)v356) >> 2;
          unint64_t v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 62) {
            goto LABEL_696;
          }
          uint64_t v112 = v358 - (unsigned char *)v356;
          if ((v358 - (unsigned char *)v356) >> 1 > v111) {
            unint64_t v111 = v112 >> 1;
          }
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v113 = v111;
          }
          if (v113)
          {
            char v114 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v358, v113);
            uint64_t v109 = (char *)v356;
            uint64_t v107 = v357;
            int v106 = *((_DWORD *)v29 + 28);
          }
          else
          {
            char v114 = 0;
          }
          int v115 = &v114[4 * v110];
          *(_DWORD *)int v115 = v106;
          unint64_t v108 = v115 + 4;
          while (v107 != v109)
          {
            int v116 = *((_DWORD *)v107 - 1);
            v107 -= 4;
            *((_DWORD *)v115 - 1) = v116;
            v115 -= 4;
          }
          v356 = v115;
          v357 = v108;
          v358 = &v114[4 * v113];
          if (v109) {
            operator delete(v109);
          }
        }
        else
        {
          *(_DWORD *)v357 = v106;
          unint64_t v108 = v107 + 4;
        }
        v357 = v108;
      }
      if (v29[24])
      {
        int v117 = *((_DWORD *)v29 + 5);
        int v118 = v354;
        if (v354 >= v355)
        {
          long long v120 = (char *)v353;
          uint64_t v121 = (v354 - (unsigned char *)v353) >> 2;
          unint64_t v122 = v121 + 1;
          if ((unint64_t)(v121 + 1) >> 62) {
            goto LABEL_696;
          }
          uint64_t v123 = v355 - (unsigned char *)v353;
          if ((v355 - (unsigned char *)v353) >> 1 > v122) {
            unint64_t v122 = v123 >> 1;
          }
          if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v124 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v124 = v122;
          }
          if (v124)
          {
            uint64_t v125 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v355, v124);
            long long v120 = (char *)v353;
            int v118 = v354;
            int v117 = *((_DWORD *)v29 + 5);
          }
          else
          {
            uint64_t v125 = 0;
          }
          char v126 = &v125[4 * v121];
          *(_DWORD *)char v126 = v117;
          long long v119 = v126 + 4;
          while (v118 != v120)
          {
            int v127 = *((_DWORD *)v118 - 1);
            v118 -= 4;
            *((_DWORD *)v126 - 1) = v127;
            v126 -= 4;
          }
          v353 = v126;
          v354 = v119;
          v355 = &v125[4 * v124];
          if (v120) {
            operator delete(v120);
          }
        }
        else
        {
          *(_DWORD *)v354 = v117;
          long long v119 = v118 + 4;
        }
        v354 = v119;
      }
      if (v29[32])
      {
        int v128 = *((_DWORD *)v29 + 7);
        uint64_t v129 = v351;
        if (v351 >= v352)
        {
          uint64_t v131 = (char *)v350;
          uint64_t v132 = (v351 - (unsigned char *)v350) >> 2;
          unint64_t v133 = v132 + 1;
          if ((unint64_t)(v132 + 1) >> 62) {
LABEL_696:
          }
            abort();
          uint64_t v134 = v352 - (unsigned char *)v350;
          if ((v352 - (unsigned char *)v350) >> 1 > v133) {
            unint64_t v133 = v134 >> 1;
          }
          if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v135 = v133;
          }
          if (v135)
          {
            uint64_t v136 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v352, v135);
            uint64_t v131 = (char *)v350;
            uint64_t v129 = v351;
            int v128 = *((_DWORD *)v29 + 7);
          }
          else
          {
            uint64_t v136 = 0;
          }
          unint64_t v137 = &v136[4 * v132];
          *(_DWORD *)unint64_t v137 = v128;
          uint64_t v130 = v137 + 4;
          while (v129 != v131)
          {
            int v138 = *((_DWORD *)v129 - 1);
            v129 -= 4;
            *((_DWORD *)v137 - 1) = v138;
            v137 -= 4;
          }
          v350 = v137;
          v351 = v130;
          v352 = &v136[4 * v135];
          if (v131) {
            operator delete(v131);
          }
        }
        else
        {
          *(_DWORD *)v351 = v128;
          uint64_t v130 = v129 + 4;
        }
        v351 = v130;
      }
      if (v29[64]) {
        std::vector<float>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v347, (uint64_t)__dst, *((char **)v29 + 5), *((char **)v29 + 6), (uint64_t)(*((void *)v29 + 6) - *((void *)v29 + 5)) >> 2);
      }
      if (v29[96]) {
        std::vector<float>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v344, (uint64_t)v345, *((char **)v29 + 9), *((char **)v29 + 10), (uint64_t)(*((void *)v29 + 10) - *((void *)v29 + 9)) >> 2);
      }
      ++v32;
      v29 += 128;
    }
    while (v29 != v28);
    std::vector<int>::pointer v140 = v380;
    unint64_t v139 = v381;
    uint64_t v23 = v328;
  }
  if (v139 > 0x3F || (float v141 = 0.0, (v139 & 0x3F) != 0))
  {
    int v142 = 0;
    uint64_t v143 = &v140[v139 >> 6];
    float v141 = 0.0;
    do
    {
      if ((*v140 >> v142)) {
        float v144 = 1.0;
      }
      else {
        float v144 = 0.0;
      }
      float v141 = v141 + v144;
      v140 += v142 == 63;
      if (v142 == 63) {
        int v142 = 0;
      }
      else {
        ++v142;
      }
    }
    while (v142 != (v139 & 0x3F) || v140 != v143);
  }
  float v145 = v141 / (float)v139;
  if (v145 >= 0.0 && v145 <= 1.0)
  {
    if (v145 == 1.0) {
      int v147 = 9;
    }
    else {
      int v147 = (int)(float)(v145 / 0.1);
    }
  }
  else
  {
    int v147 = -1;
  }
  int v149 = v374;
  __int16 v148 = v375;
  if (v374 == v375)
  {
    __int16 v148 = v374;
  }
  else
  {
    do
      ++v149;
    while (v149 != v375);
  }
  if (v374 == v148)
  {
    int v154 = -1;
    int v315 = -1;
    int v316 = -1;
    int v314 = -1;
    int v317 = -1;
LABEL_259:
    int v313 = v154;
    goto LABEL_260;
  }
  std::__sort<std::__less<float,float> &,float *>();
  float Percentile = Nightingale::getPercentile((uint64_t *)&v374, 0, 0.5);
  BOOL v152 = Nightingale::check2Real_t_equal(v151, Percentile, -1.0);
  if (v152)
  {
    int v153 = -1;
LABEL_238:
    int v317 = v153;
    goto LABEL_242;
  }
  if (Percentile >= 0.1)
  {
    if (Percentile >= 0.8) {
      int v153 = 15;
    }
    else {
      int v153 = (int)(float)((float)((float)(Percentile + -0.1) / 0.05) + 1.0);
    }
    goto LABEL_238;
  }
  int v317 = 0;
LABEL_242:
  float v155 = *(v375 - 1);
  BOOL v156 = Nightingale::check2Real_t_equal((Nightingale *)v152, v155, -1.0);
  if (v156)
  {
    int v157 = -1;
LABEL_244:
    int v316 = v157;
    goto LABEL_247;
  }
  if (v155 >= 0.1)
  {
    if (v155 >= 0.8) {
      int v157 = 15;
    }
    else {
      int v157 = (int)(float)((float)((float)(v155 + -0.1) / 0.05) + 1.0);
    }
    goto LABEL_244;
  }
  int v316 = 0;
LABEL_247:
  float v158 = *v374;
  if (Nightingale::check2Real_t_equal((Nightingale *)v156, *v374, -1.0))
  {
    int v159 = -1;
LABEL_249:
    int v315 = v159;
    goto LABEL_252;
  }
  if (v158 >= 0.1)
  {
    if (v158 >= 0.8) {
      int v159 = 15;
    }
    else {
      int v159 = (int)(float)((float)((float)(v158 + -0.1) / 0.05) + 1.0);
    }
    goto LABEL_249;
  }
  int v315 = 0;
LABEL_252:
  float v160 = Nightingale::getPercentile((uint64_t *)&v374, 0, 0.75);
  if (Nightingale::check2Real_t_equal(v161, v160, -1.0))
  {
    int v162 = -1;
LABEL_254:
    int v314 = v162;
    goto LABEL_257;
  }
  if (v160 >= 0.1)
  {
    if (v160 >= 0.8) {
      int v162 = 15;
    }
    else {
      int v162 = (int)(float)((float)((float)(v160 + -0.1) / 0.05) + 1.0);
    }
    goto LABEL_254;
  }
  int v314 = 0;
LABEL_257:
  float v163 = Nightingale::getPercentile((uint64_t *)&v374, 0, 0.25);
  if (Nightingale::check2Real_t_equal(v164, v163, -1.0))
  {
    int v154 = -1;
    goto LABEL_259;
  }
  if (v163 >= 0.1)
  {
    if (v163 >= 0.8) {
      int v154 = 15;
    }
    else {
      int v154 = (int)(float)((float)((float)(v163 + -0.1) / 0.05) + 1.0);
    }
    goto LABEL_259;
  }
  int v313 = 0;
LABEL_260:
  __int16 v166 = (char *)__p;
  __int16 v165 = v363;
  if (__p == v363)
  {
    __int16 v165 = __p;
  }
  else
  {
    do
      v166 += 4;
    while (v166 != v363);
  }
  if (__p == v165)
  {
    int v171 = -1;
    int v310 = -1;
    int v311 = -1;
    int v334 = -1;
    int v312 = -1;
    goto LABEL_290;
  }
  std::__sort<std::__less<float,float> &,float *>();
  float v167 = Nightingale::getPercentile((uint64_t *)&__p, 0, 0.5);
  BOOL v169 = Nightingale::check2Real_t_equal(v168, v167, -1.0);
  if (v169)
  {
    int v170 = -1;
LABEL_267:
    int v312 = v170;
    goto LABEL_273;
  }
  if (v167 >= 0.1)
  {
    if (v167 >= 0.8) {
      int v170 = 15;
    }
    else {
      int v170 = (int)(float)((float)((float)(v167 + -0.1) / 0.05) + 1.0);
    }
    goto LABEL_267;
  }
  int v312 = 0;
LABEL_273:
  float v172 = *((float *)v363 - 1);
  BOOL v173 = Nightingale::check2Real_t_equal((Nightingale *)v169, v172, -1.0);
  if (v173)
  {
    int v174 = -1;
LABEL_275:
    int v311 = v174;
    goto LABEL_278;
  }
  if (v172 >= 0.1)
  {
    if (v172 >= 0.8) {
      int v174 = 15;
    }
    else {
      int v174 = (int)(float)((float)((float)(v172 + -0.1) / 0.05) + 1.0);
    }
    goto LABEL_275;
  }
  int v311 = 0;
LABEL_278:
  float v175 = *(float *)__p;
  if (Nightingale::check2Real_t_equal((Nightingale *)v173, *(float *)__p, -1.0))
  {
    int v176 = -1;
LABEL_280:
    int v310 = v176;
    goto LABEL_283;
  }
  if (v175 >= 0.1)
  {
    if (v175 >= 0.8) {
      int v176 = 15;
    }
    else {
      int v176 = (int)(float)((float)((float)(v175 + -0.1) / 0.05) + 1.0);
    }
    goto LABEL_280;
  }
  int v310 = 0;
LABEL_283:
  float v177 = Nightingale::getPercentile((uint64_t *)&__p, 0, 0.75);
  if (Nightingale::check2Real_t_equal(v178, v177, -1.0))
  {
    int v179 = -1;
LABEL_285:
    int v334 = v179;
    goto LABEL_288;
  }
  if (v177 >= 0.1)
  {
    if (v177 >= 0.8) {
      int v179 = 15;
    }
    else {
      int v179 = (int)(float)((float)((float)(v177 + -0.1) / 0.05) + 1.0);
    }
    goto LABEL_285;
  }
  int v334 = 0;
LABEL_288:
  float v180 = Nightingale::getPercentile((uint64_t *)&__p, 0, 0.25);
  if (Nightingale::check2Real_t_equal(v181, v180, -1.0))
  {
    int v171 = -1;
  }
  else
  {
    if (v180 < 0.1)
    {
      int v331 = 0;
      goto LABEL_291;
    }
    if (v180 >= 0.8) {
      int v171 = 15;
    }
    else {
      int v171 = (int)(float)((float)((float)(v180 + -0.1) / 0.05) + 1.0);
    }
  }
LABEL_290:
  int v331 = v171;
LABEL_291:
  if (v365 == v366)
  {
    int v187 = -1;
    int v190 = -1;
    int v185 = -1;
    int v327 = -1;
    int v330 = -1;
  }
  else
  {
    std::__sort<std::__less<float,float> &,float *>();
    float v182 = Nightingale::getPercentile((uint64_t *)&v365, 0, 0.5);
    CAFwEndEstimateError = (Nightingale::ngt_HistoricalAnalyzer *)Nightingale::ngt_HistoricalAnalyzer::getCAFwEndEstimateError(v183, v182);
    int v185 = (int)CAFwEndEstimateError;
    uint64_t v186 = (Nightingale::ngt_HistoricalAnalyzer *)Nightingale::ngt_HistoricalAnalyzer::getCAFwEndEstimateError(CAFwEndEstimateError, *((float *)v366 - 1));
    int v187 = (int)v186;
    int v330 = Nightingale::ngt_HistoricalAnalyzer::getCAFwEndEstimateError(v186, *(float *)v365);
    float v188 = Nightingale::getPercentile((uint64_t *)&v365, 0, 0.75);
    int v190 = Nightingale::ngt_HistoricalAnalyzer::getCAFwEndEstimateError(v189, v188);
    float v191 = Nightingale::getPercentile((uint64_t *)&v365, 0, 0.25);
    int v327 = Nightingale::ngt_HistoricalAnalyzer::getCAFwEndEstimateError(v192, v191);
  }
  v194 = (char *)v371;
  v193 = (float *)v372;
  if (v371 == (float *)v372)
  {
    v193 = v371;
  }
  else
  {
    do
      v194 += 4;
    while (v194 != v372);
  }
  if (v371 == v193)
  {
    int v199 = -1;
  }
  else
  {
    float v195 = 0.0;
    v196 = v371;
    do
    {
      float v197 = *v196++;
      float v195 = v195 + v197;
    }
    while (v196 != v193);
    float v198 = sqrtf(v195 / (float)(unint64_t)(v193 - v371));
    if (v198 >= 0.35) {
      int v199 = 7;
    }
    else {
      int v199 = (int)(float)(v198 / 0.05);
    }
  }
  int v324 = v199;
  v200 = (Nightingale::ngt_HistoricalAnalyzer *)v341;
  int v340 = v185;
  int v339 = v187;
  int v338 = v190;
  if (v341 == v342
    || (std::__sort<std::__less<float,float> &,float *>(),
        float v201 = Nightingale::getPercentile((uint64_t *)&v341, 0, 0.5),
        v201 < 0.0))
  {
    int v323 = -1;
    uint64_t v202 = v332;
  }
  else
  {
    uint64_t v202 = v332;
    if (v201 >= 0.9) {
      int v203 = 9;
    }
    else {
      int v203 = (int)(float)(v201 / 0.1);
    }
    int v323 = v203;
  }
  v204 = (char *)v359;
  v205 = v360;
  if (v359 == v360)
  {
    int v318 = -1;
    int v319 = -1;
    int v242 = -1;
    int v236 = -1;
    int v239 = -1;
    LODWORD(v237) = -1;
    int v232 = -1;
    int v320 = -1;
    int v321 = -1;
    int v322 = -1;
  }
  else
  {
    unsigned int v206 = 0;
    v207 = (char *)v359;
    do
    {
      int v208 = *(_DWORD *)v207;
      v207 += 4;
      if (v208 == 1) {
        ++v206;
      }
    }
    while (v207 != v360);
    int v209 = v147;
    CANumberOfCycles = (Nightingale::ngt_HistoricalAnalyzer *)Nightingale::ngt_HistoricalAnalyzer::getCANumberOfCycles(v200, (int)(float)(unint64_t)((v360 - (unsigned char *)v359) >> 2));
    int v322 = (int)CANumberOfCycles;
    uint64_t v211 = 0;
    v212 = v204;
    do
    {
      int v213 = *(_DWORD *)v212;
      v212 += 4;
      if (v213 == 2) {
        ++v211;
      }
    }
    while (v212 != v205);
    uint64_t v214 = 0;
    unsigned int v215 = (int)(float)v211;
    v216 = v204;
    do
    {
      int v217 = *(_DWORD *)v216;
      v216 += 4;
      if (v217 == 3) {
        ++v214;
      }
    }
    while (v216 != v205);
    v218 = (Nightingale::ngt_HistoricalAnalyzer *)Nightingale::ngt_HistoricalAnalyzer::getCANumberOfCycles(CANumberOfCycles, v206);
    int v321 = (int)v218;
    uint64_t v219 = 0;
    unsigned int v220 = (int)(float)v214;
    v221 = v204;
    do
    {
      int v222 = *(_DWORD *)v221;
      v221 += 4;
      if (v222 == 4) {
        ++v219;
      }
    }
    while (v221 != v205);
    v223 = (Nightingale::ngt_HistoricalAnalyzer *)Nightingale::ngt_HistoricalAnalyzer::getCANumberOfCycles(v218, v215);
    int v320 = (int)v223;
    uint64_t v224 = 0;
    v225 = v204;
    do
    {
      int v226 = *(_DWORD *)v225;
      v225 += 4;
      if (!v226) {
        ++v224;
      }
    }
    while (v225 != v205);
    v227 = (Nightingale::ngt_HistoricalAnalyzer *)Nightingale::ngt_HistoricalAnalyzer::getCANumberOfCycles(v223, v220);
    int v319 = (int)v227;
    uint64_t v228 = 0;
    v229 = v204;
    do
    {
      int v230 = *(_DWORD *)v229;
      v229 += 4;
      if (v230 == 6) {
        ++v228;
      }
    }
    while (v229 != v205);
    v231 = (Nightingale::ngt_HistoricalAnalyzer *)Nightingale::ngt_HistoricalAnalyzer::getCANumberOfCycles(v227, (int)(float)v219);
    int v232 = (int)v231;
    uint64_t v233 = 0;
    do
    {
      int v234 = *(_DWORD *)v204;
      v204 += 4;
      if (v234 == 7) {
        ++v233;
      }
    }
    while (v204 != v205);
    v235 = (Nightingale::ngt_HistoricalAnalyzer *)Nightingale::ngt_HistoricalAnalyzer::getCANumberOfCycles(v231, (int)(float)v224);
    int v236 = (int)v235;
    v237 = (Nightingale::ngt_HistoricalAnalyzer *)Nightingale::ngt_HistoricalAnalyzer::getCANumberOfCycles(v235, (int)(float)v228);
    v238 = (Nightingale::ngt_HistoricalAnalyzer *)Nightingale::ngt_HistoricalAnalyzer::getCANumberOfCycles(v237, (int)(float)v233);
    int v239 = (int)v238;
    v240 = v368;
    if (v368 == v369)
    {
      int v241 = 0;
      int v147 = v209;
    }
    else
    {
      int v241 = 0;
      int v147 = v209;
      do
      {
        v240 += 4;
        ++v241;
      }
      while (v240 != v369);
    }
    int v243 = v378 & 0x3F;
    if (v378 <= 0x3F && v243 == 0)
    {
      LODWORD(v246) = 0;
    }
    else
    {
      int v245 = 0;
      uint64_t v246 = 0;
      v247 = v377;
      do
      {
        v246 += (*(void *)v247 >> v245) & 1;
        v247 += 8 * (v245 == 63);
        if (v245 == 63) {
          int v245 = 0;
        }
        else {
          ++v245;
        }
      }
      while (v245 != v243 || v247 != &v377[8 * (v378 >> 6)]);
    }
    v248 = (Nightingale::ngt_HistoricalAnalyzer *)Nightingale::ngt_HistoricalAnalyzer::getCANumberOfCycles(v238, v241 + (int)v246);
    int v242 = (int)v248;
    int v318 = Nightingale::ngt_HistoricalAnalyzer::getCANumberOfCycles(v248, v246);
    uint64_t v23 = v328;
    uint64_t v202 = v332;
  }
  uint64_t v249 = v202 - v23;
  int v337 = v232;
  if (v356 == v357)
  {
    int v329 = -1;
    int v307 = -1;
    int v308 = -1;
    int v333 = -1;
    int v309 = -1;
  }
  else
  {
    std::__sort<std::__less<float,float> &,float *>();
    float v250 = Nightingale::getPercentile((uint64_t *)&v356, 0, 0.5);
    if (v250 >= 6.0)
    {
      if (v250 >= 9.0)
      {
        if (v250 >= 12.0)
        {
          if (v250 >= 15.0)
          {
            if (v250 >= 18.0)
            {
              if (v250 >= 21.0)
              {
                if (v250 >= 24.0) {
                  int v251 = 7;
                }
                else {
                  int v251 = 6;
                }
              }
              else
              {
                int v251 = 5;
              }
            }
            else
            {
              int v251 = 4;
            }
          }
          else
          {
            int v251 = 3;
          }
        }
        else
        {
          int v251 = 2;
        }
      }
      else
      {
        int v251 = 1;
      }
      int v333 = v251;
    }
    else
    {
      int v333 = 0;
    }
    float v252 = *((float *)v357 - 1);
    if (v252 >= 6.0)
    {
      if (v252 >= 9.0)
      {
        if (v252 >= 12.0)
        {
          if (v252 >= 15.0)
          {
            if (v252 >= 18.0)
            {
              if (v252 >= 21.0)
              {
                if (v252 >= 24.0) {
                  int v253 = 7;
                }
                else {
                  int v253 = 6;
                }
              }
              else
              {
                int v253 = 5;
              }
            }
            else
            {
              int v253 = 4;
            }
          }
          else
          {
            int v253 = 3;
          }
        }
        else
        {
          int v253 = 2;
        }
      }
      else
      {
        int v253 = 1;
      }
      int v329 = v253;
    }
    else
    {
      int v329 = 0;
    }
    float v254 = *(float *)v356;
    if (*(float *)v356 >= 6.0)
    {
      if (v254 >= 9.0)
      {
        if (v254 >= 12.0)
        {
          if (v254 >= 15.0)
          {
            if (v254 >= 18.0)
            {
              if (v254 >= 21.0)
              {
                if (v254 >= 24.0) {
                  int v255 = 7;
                }
                else {
                  int v255 = 6;
                }
              }
              else
              {
                int v255 = 5;
              }
            }
            else
            {
              int v255 = 4;
            }
          }
          else
          {
            int v255 = 3;
          }
        }
        else
        {
          int v255 = 2;
        }
      }
      else
      {
        int v255 = 1;
      }
      int v309 = v255;
    }
    else
    {
      int v309 = 0;
    }
    float v256 = Nightingale::getPercentile((uint64_t *)&v356, 0, 0.75);
    if (v256 >= 6.0)
    {
      if (v256 >= 9.0)
      {
        if (v256 >= 12.0)
        {
          if (v256 >= 15.0)
          {
            if (v256 >= 18.0)
            {
              if (v256 >= 21.0)
              {
                if (v256 >= 24.0) {
                  int v257 = 7;
                }
                else {
                  int v257 = 6;
                }
              }
              else
              {
                int v257 = 5;
              }
            }
            else
            {
              int v257 = 4;
            }
          }
          else
          {
            int v257 = 3;
          }
        }
        else
        {
          int v257 = 2;
        }
      }
      else
      {
        int v257 = 1;
      }
      int v308 = v257;
    }
    else
    {
      int v308 = 0;
    }
    float v258 = Nightingale::getPercentile((uint64_t *)&v356, 0, 0.25);
    if (v258 >= 6.0)
    {
      if (v258 >= 9.0)
      {
        if (v258 >= 12.0)
        {
          if (v258 >= 15.0)
          {
            if (v258 >= 18.0)
            {
              if (v258 >= 21.0)
              {
                if (v258 >= 24.0) {
                  int v259 = 7;
                }
                else {
                  int v259 = 6;
                }
              }
              else
              {
                int v259 = 5;
              }
            }
            else
            {
              int v259 = 4;
            }
          }
          else
          {
            int v259 = 3;
          }
        }
        else
        {
          int v259 = 2;
        }
      }
      else
      {
        int v259 = 1;
      }
      int v307 = v259;
    }
    else
    {
      int v307 = 0;
    }
  }
  uint64_t v260 = v249 >> 5;
  int v336 = v236;
  if (v353 == v354)
  {
    int v304 = -1;
    int v305 = -1;
    int v306 = -1;
  }
  else
  {
    std::__sort<std::__less<float,float> &,float *>();
    float v261 = Nightingale::getPercentile((uint64_t *)&v353, 0, 0.5);
    if (v261 >= 1.0)
    {
      if (v261 >= 5.0)
      {
        if (v261 >= 10.0)
        {
          if (v261 >= 15.0)
          {
            if (v261 >= 20.0)
            {
              if (v261 >= 25.0)
              {
                if (v261 >= 30.0) {
                  int v262 = 7;
                }
                else {
                  int v262 = 6;
                }
              }
              else
              {
                int v262 = 5;
              }
            }
            else
            {
              int v262 = 4;
            }
          }
          else
          {
            int v262 = 3;
          }
        }
        else
        {
          int v262 = 2;
        }
      }
      else
      {
        int v262 = 1;
      }
      int v306 = v262;
    }
    else
    {
      int v306 = 0;
    }
    float v263 = *((float *)v354 - 1);
    if (v263 >= 1.0)
    {
      if (v263 >= 5.0)
      {
        if (v263 >= 10.0)
        {
          if (v263 >= 15.0)
          {
            if (v263 >= 20.0)
            {
              if (v263 >= 25.0)
              {
                if (v263 >= 30.0) {
                  int v264 = 7;
                }
                else {
                  int v264 = 6;
                }
              }
              else
              {
                int v264 = 5;
              }
            }
            else
            {
              int v264 = 4;
            }
          }
          else
          {
            int v264 = 3;
          }
        }
        else
        {
          int v264 = 2;
        }
      }
      else
      {
        int v264 = 1;
      }
      int v305 = v264;
    }
    else
    {
      int v305 = 0;
    }
    float v265 = *(float *)v353;
    if (*(float *)v353 >= 1.0)
    {
      if (v265 >= 5.0)
      {
        if (v265 >= 10.0)
        {
          if (v265 >= 15.0)
          {
            if (v265 >= 20.0)
            {
              if (v265 >= 25.0)
              {
                if (v265 >= 30.0) {
                  int v266 = 7;
                }
                else {
                  int v266 = 6;
                }
              }
              else
              {
                int v266 = 5;
              }
            }
            else
            {
              int v266 = 4;
            }
          }
          else
          {
            int v266 = 3;
          }
        }
        else
        {
          int v266 = 2;
        }
      }
      else
      {
        int v266 = 1;
      }
      int v304 = v266;
    }
    else
    {
      int v304 = 0;
    }
  }
  unint64_t v267 = 0xAAAAAAAAAAAAAAABLL * v260;
  int v335 = v242;
  if (v350 == v351)
  {
    int v270 = v239;
    int v271 = (int)v237;
    int v272 = v147;
    int v274 = -1;
    int v275 = -1;
    int v273 = -1;
    int v269 = v325;
  }
  else
  {
    std::__sort<std::__less<float,float> &,float *>();
    float v268 = Nightingale::getPercentile((uint64_t *)&v350, 0, 0.5);
    int v269 = v325;
    if (v268 >= 1.0)
    {
      if (v268 >= 5.0)
      {
        if (v268 >= 10.0)
        {
          int v270 = v239;
          if (v268 >= 15.0)
          {
            int v271 = (int)v237;
            int v272 = v147;
            if (v268 >= 20.0)
            {
              if (v268 >= 25.0)
              {
                if (v268 >= 30.0) {
                  int v273 = 7;
                }
                else {
                  int v273 = 6;
                }
              }
              else
              {
                int v273 = 5;
              }
            }
            else
            {
              int v273 = 4;
            }
          }
          else
          {
            int v271 = (int)v237;
            int v272 = v147;
            int v273 = 3;
          }
        }
        else
        {
          int v270 = v239;
          int v271 = (int)v237;
          int v272 = v147;
          int v273 = 2;
        }
      }
      else
      {
        int v270 = v239;
        int v271 = (int)v237;
        int v272 = v147;
        int v273 = 1;
      }
    }
    else
    {
      int v270 = v239;
      int v271 = (int)v237;
      int v272 = v147;
      int v273 = 0;
    }
    float v276 = *((float *)v351 - 1);
    if (v276 >= 1.0)
    {
      if (v276 >= 5.0)
      {
        if (v276 >= 10.0)
        {
          if (v276 >= 15.0)
          {
            if (v276 >= 20.0)
            {
              if (v276 >= 25.0)
              {
                if (v276 >= 30.0) {
                  int v274 = 7;
                }
                else {
                  int v274 = 6;
                }
              }
              else
              {
                int v274 = 5;
              }
            }
            else
            {
              int v274 = 4;
            }
          }
          else
          {
            int v274 = 3;
          }
        }
        else
        {
          int v274 = 2;
        }
      }
      else
      {
        int v274 = 1;
      }
    }
    else
    {
      int v274 = 0;
    }
    float v277 = *(float *)v350;
    if (*(float *)v350 >= 1.0)
    {
      if (v277 >= 5.0)
      {
        if (v277 >= 10.0)
        {
          if (v277 >= 15.0)
          {
            if (v277 >= 20.0)
            {
              if (v277 >= 25.0)
              {
                if (v277 >= 30.0) {
                  int v275 = 7;
                }
                else {
                  int v275 = 6;
                }
              }
              else
              {
                int v275 = 5;
              }
            }
            else
            {
              int v275 = 4;
            }
          }
          else
          {
            int v275 = 3;
          }
        }
        else
        {
          int v275 = 2;
        }
      }
      else
      {
        int v275 = 1;
      }
    }
    else
    {
      int v275 = 0;
    }
  }
  float v278 = (float)v269;
  float v279 = (float)v267;
  float v280 = (float)v25;
  if (v347 == __dst)
  {
    int v283 = -1;
    int v284 = -1;
    int v282 = -1;
  }
  else
  {
    std::__sort<std::__less<float,float> &,float *>();
    float v281 = Nightingale::getPercentile((uint64_t *)&v347, 0, 0.5);
    if (v281 >= 1.0)
    {
      if (v281 >= 5.0)
      {
        if (v281 >= 10.0)
        {
          if (v281 >= 15.0)
          {
            if (v281 >= 20.0)
            {
              if (v281 >= 25.0)
              {
                if (v281 >= 30.0) {
                  int v282 = 7;
                }
                else {
                  int v282 = 6;
                }
              }
              else
              {
                int v282 = 5;
              }
            }
            else
            {
              int v282 = 4;
            }
          }
          else
          {
            int v282 = 3;
          }
        }
        else
        {
          int v282 = 2;
        }
      }
      else
      {
        int v282 = 1;
      }
    }
    else
    {
      int v282 = 0;
    }
    float v285 = *((float *)__dst - 1);
    if (v285 >= 1.0)
    {
      if (v285 >= 5.0)
      {
        if (v285 >= 10.0)
        {
          if (v285 >= 15.0)
          {
            if (v285 >= 20.0)
            {
              if (v285 >= 25.0)
              {
                if (v285 >= 30.0) {
                  int v283 = 7;
                }
                else {
                  int v283 = 6;
                }
              }
              else
              {
                int v283 = 5;
              }
            }
            else
            {
              int v283 = 4;
            }
          }
          else
          {
            int v283 = 3;
          }
        }
        else
        {
          int v283 = 2;
        }
      }
      else
      {
        int v283 = 1;
      }
    }
    else
    {
      int v283 = 0;
    }
    float v286 = *(float *)v347;
    if (*(float *)v347 >= 1.0)
    {
      if (v286 >= 5.0)
      {
        if (v286 >= 10.0)
        {
          if (v286 >= 15.0)
          {
            if (v286 >= 20.0)
            {
              if (v286 >= 25.0)
              {
                if (v286 >= 30.0) {
                  int v284 = 7;
                }
                else {
                  int v284 = 6;
                }
              }
              else
              {
                int v284 = 5;
              }
            }
            else
            {
              int v284 = 4;
            }
          }
          else
          {
            int v284 = 3;
          }
        }
        else
        {
          int v284 = 2;
        }
      }
      else
      {
        int v284 = 1;
      }
    }
    else
    {
      int v284 = 0;
    }
  }
  float v287 = v278 / v279;
  float v288 = v280 / v279;
  if (v344 == v345)
  {
    int v299 = -1;
    int v300 = -1;
    int v298 = -1;
    int v291 = v316;
    int v290 = v317;
    int v293 = v314;
    int v292 = v315;
    int v295 = v312;
    int v294 = v313;
    int v297 = v310;
    int v296 = v311;
  }
  else
  {
    std::__sort<std::__less<float,float> &,float *>();
    float v289 = Nightingale::getPercentile((uint64_t *)&v344, 0, 0.5);
    int v291 = v316;
    int v290 = v317;
    int v293 = v314;
    int v292 = v315;
    int v295 = v312;
    int v294 = v313;
    int v297 = v310;
    int v296 = v311;
    if (v289 >= 1.0)
    {
      if (v289 >= 5.0)
      {
        if (v289 >= 10.0)
        {
          if (v289 >= 15.0)
          {
            if (v289 >= 20.0)
            {
              if (v289 >= 25.0)
              {
                if (v289 >= 30.0) {
                  int v298 = 7;
                }
                else {
                  int v298 = 6;
                }
              }
              else
              {
                int v298 = 5;
              }
            }
            else
            {
              int v298 = 4;
            }
          }
          else
          {
            int v298 = 3;
          }
        }
        else
        {
          int v298 = 2;
        }
      }
      else
      {
        int v298 = 1;
      }
    }
    else
    {
      int v298 = 0;
    }
    float v301 = *((float *)v345 - 1);
    if (v301 >= 1.0)
    {
      if (v301 >= 5.0)
      {
        if (v301 >= 10.0)
        {
          if (v301 >= 15.0)
          {
            if (v301 >= 20.0)
            {
              if (v301 >= 25.0)
              {
                if (v301 >= 30.0) {
                  int v299 = 7;
                }
                else {
                  int v299 = 6;
                }
              }
              else
              {
                int v299 = 5;
              }
            }
            else
            {
              int v299 = 4;
            }
          }
          else
          {
            int v299 = 3;
          }
        }
        else
        {
          int v299 = 2;
        }
      }
      else
      {
        int v299 = 1;
      }
    }
    else
    {
      int v299 = 0;
    }
    float v302 = *(float *)v344;
    if (*(float *)v344 >= 1.0)
    {
      if (v302 >= 5.0)
      {
        if (v302 >= 10.0)
        {
          if (v302 >= 15.0)
          {
            if (v302 >= 20.0)
            {
              if (v302 >= 25.0)
              {
                if (v302 >= 30.0) {
                  int v300 = 7;
                }
                else {
                  int v300 = 6;
                }
              }
              else
              {
                int v300 = 5;
              }
            }
            else
            {
              int v300 = 4;
            }
          }
          else
          {
            int v300 = 3;
          }
        }
        else
        {
          int v300 = 2;
        }
      }
      else
      {
        int v300 = 1;
      }
    }
    else
    {
      int v300 = 0;
    }
  }
  *(unsigned char *)(a6 + 8) = HasMultipleWatchHist;
  *(_DWORD *)(a6 + 12) = v272;
  *(_DWORD *)(a6 + 16) = v294;
  *(_DWORD *)(a6 + 20) = v290;
  *(_DWORD *)(a6 + 24) = v293;
  *(_DWORD *)(a6 + 28) = v292;
  *(_DWORD *)(a6 + 32) = v291;
  *(_DWORD *)(a6 + 36) = v331;
  *(_DWORD *)(a6 + 40) = v295;
  *(_DWORD *)(a6 + 44) = v334;
  *(_DWORD *)(a6 + 48) = v297;
  *(_DWORD *)(a6 + 52) = v296;
  *(_DWORD *)(a6 + 56) = v324;
  *(_DWORD *)(a6 + 60) = v323;
  *(_DWORD *)(a6 + 64) = v330;
  *(_WORD *)(a6 + 9) = v383;
  *(unsigned char *)(a6 + 11) = v384;
  *(_DWORD *)(a6 + 68) = v327;
  int v303 = *(unsigned __int8 *)(a6 + 192);
  *(float *)a6 = v287;
  *(float *)(a6 + 4) = v288;
  *(_DWORD *)(a6 + 72) = v340;
  *(_DWORD *)(a6 + 76) = v338;
  *(_DWORD *)(a6 + 80) = v339;
  *(_DWORD *)(a6 + 84) = v309;
  *(_DWORD *)(a6 + 88) = v307;
  *(_DWORD *)(a6 + 92) = v333;
  *(_DWORD *)(a6 + 96) = v308;
  *(_DWORD *)(a6 + 100) = v329;
  *(_DWORD *)(a6 + 104) = v306;
  *(_DWORD *)(a6 + 108) = v304;
  *(_DWORD *)(a6 + 112) = v305;
  *(_DWORD *)(a6 + 116) = v273;
  *(_DWORD *)(a6 + 120) = v275;
  *(_DWORD *)(a6 + 124) = v274;
  *(_DWORD *)(a6 + 128) = v282;
  *(_DWORD *)(a6 + 132) = v284;
  *(_DWORD *)(a6 + 136) = v283;
  *(_DWORD *)(a6 + 140) = v298;
  *(_DWORD *)(a6 + 144) = v300;
  *(_DWORD *)(a6 + 148) = v299;
  *(_DWORD *)(a6 + 152) = v322;
  *(_DWORD *)(a6 + 156) = v321;
  *(_DWORD *)(a6 + 160) = v320;
  *(_DWORD *)(a6 + 164) = v319;
  *(_DWORD *)(a6 + 168) = v337;
  *(_DWORD *)(a6 + 172) = v271;
  *(_DWORD *)(a6 + 176) = v270;
  *(_DWORD *)(a6 + 180) = v336;
  *(_DWORD *)(a6 + 184) = v335;
  *(_DWORD *)(a6 + 188) = v318;
  if (!v303) {
    *(unsigned char *)(a6 + 192) = 1;
  }
  if (v341)
  {
    v342 = (char *)v341;
    operator delete(v341);
  }
  if (v344)
  {
    v345 = v344;
    operator delete(v344);
  }
  if (v347)
  {
    std::vector<int> __dst = v347;
    operator delete(v347);
  }
  if (v350)
  {
    v351 = (char *)v350;
    operator delete(v350);
  }
  if (v353)
  {
    v354 = (char *)v353;
    operator delete(v353);
  }
  if (v356)
  {
    v357 = (char *)v356;
    operator delete(v356);
  }
  if (v359)
  {
    v360 = (char *)v359;
    operator delete(v359);
  }
  if (__p)
  {
    v363 = (char *)__p;
    operator delete(__p);
  }
  if (v365)
  {
    v366 = (char *)v365;
    operator delete(v365);
  }
  if (v368)
  {
    v369 = v368;
    operator delete(v368);
  }
  if (v371)
  {
    v372 = (char *)v371;
    operator delete(v371);
  }
  if (v374)
  {
    v375 = v374;
    operator delete(v374);
  }
  if (v377) {
    operator delete(v377);
  }
  if (v380) {
    operator delete(v380);
  }
}

void Nightingale::phaseFactorHist::~phaseFactorHist(Nightingale::phaseFactorHist *this)
{
  unint64_t v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  unint64_t v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t Nightingale::ngt_HistoricalAnalyzer::getHasMultipleWatchHist(void *a1, int a2, uint64_t a3, int a4)
{
  Nightingale::wristTemperatureInputAcquisition::wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v20);
  Nightingale::wristTemperatureInputAcquisition::extractKaliInputsJDayRange((unint64_t)v20, a1, *(_DWORD *)(a1[1] - 60) - a2 + 1, *(_DWORD *)(a1[1] - 60), a3, a4, (uint64_t *)&v14);
  if (v16 == v17 || v17 - (unsigned char *)v16 == 1) {
    goto LABEL_3;
  }
  if ((unint64_t)(v17 - (unsigned char *)v16) <= 2)
  {
    uint64_t v10 = v14;
    unint64_t v11 = v15;
    if (v14 == v15)
    {
LABEL_3:
      uint64_t v8 = 0;
      goto LABEL_4;
    }
    do
    {
      std::vector<int>::vector(&v13, v10);
      uint64_t v8 = Nightingale::checkNumTmpSwitches((float **)&v13, 2, 30.0);
      if (v13.__begin_)
      {
        v13.__end_ = v13.__begin_;
        operator delete(v13.__begin_);
      }
      if (++v10 == v11) {
        int v12 = 1;
      }
      else {
        int v12 = v8;
      }
    }
    while (v12 != 1);
  }
  else
  {
    uint64_t v8 = 1;
  }
LABEL_4:
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  uint64_t v21 = &v14;
  std::vector<std::vector<std::pair<BOOL,float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v21);
  Nightingale::wristTemperatureInputAcquisition::~wristTemperatureInputAcquisition((Nightingale::wristTemperatureInputAcquisition *)v20);
  return v8;
}

uint64_t Nightingale::ngt_HistoricalAnalyzer::getCAFractionOfCycles(Nightingale::ngt_HistoricalAnalyzer *this, float a2)
{
  if (a2 < 0.0 || a2 > 1.0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 == 1.0) {
    return 9;
  }
  return (int)(float)(a2 / 0.1);
}

uint64_t Nightingale::ngt_HistoricalAnalyzer::getCASignalAtFwEndEstimate(Nightingale::ngt_HistoricalAnalyzer *this, float a2)
{
  if (Nightingale::check2Real_t_equal(this, a2, -1.0)) {
    return 0xFFFFFFFFLL;
  }
  if (a2 < 0.1) {
    return 0;
  }
  if (a2 >= 0.8) {
    return 15;
  }
  return (int)(float)((float)((float)(a2 + -0.1) / 0.05) + 1.0);
}

uint64_t Nightingale::ngt_HistoricalAnalyzer::getCAFwEndEstimateError(Nightingale::ngt_HistoricalAnalyzer *this, float a2)
{
  if (a2 < -7.0) {
    return 0;
  }
  if (a2 < -5.0) {
    return 1;
  }
  if (a2 < -3.0) {
    return 2;
  }
  if (a2 < -1.0) {
    return 3;
  }
  if (a2 < 1.0) {
    return 4;
  }
  if (a2 >= 7.0) {
    int v3 = 8;
  }
  else {
    int v3 = 7;
  }
  if (a2 >= 5.0) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 6;
  }
  if (a2 >= 3.0) {
    return v4;
  }
  else {
    return 5;
  }
}

uint64_t Nightingale::ngt_HistoricalAnalyzer::getCANumberOfCycles(Nightingale::ngt_HistoricalAnalyzer *this, unsigned int a2)
{
  if (a2 >= 0x10) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a2;
  }
}

uint64_t Nightingale::ngt_HistoricalAnalyzer::getCAEstimatedLutealPhaseLength(Nightingale::ngt_HistoricalAnalyzer *this, float a2)
{
  if (a2 < 6.0) {
    return 0;
  }
  if (a2 < 9.0) {
    return 1;
  }
  if (a2 < 12.0) {
    return 2;
  }
  if (a2 < 15.0) {
    return 3;
  }
  if (a2 >= 24.0) {
    int v3 = 7;
  }
  else {
    int v3 = 6;
  }
  if (a2 >= 21.0) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 5;
  }
  if (a2 >= 18.0) {
    return v4;
  }
  else {
    return 4;
  }
}

uint64_t Nightingale::ngt_HistoricalAnalyzer::getCADaysLoggedBeforeOrAfterCycleStart(Nightingale::ngt_HistoricalAnalyzer *this, float a2)
{
  if (a2 < 1.0) {
    return 0;
  }
  if (a2 < 5.0) {
    return 1;
  }
  if (a2 < 10.0) {
    return 2;
  }
  if (a2 < 15.0) {
    return 3;
  }
  if (a2 >= 30.0) {
    int v3 = 7;
  }
  else {
    int v3 = 6;
  }
  if (a2 >= 25.0) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 5;
  }
  if (a2 >= 20.0) {
    return v4;
  }
  else {
    return 4;
  }
}

uint64_t Nightingale::phaseFactorHist::suppressFWHist(uint64_t result, unsigned int **a2, uint64_t *a3)
{
  int v3 = *a2;
  unsigned int v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t result = Nightingale::phaseFactorProcessor::suppressFWStEnd(v6, v3, v3 + 2, a3);
      v3 += 18;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t std::vector<Nightingale::cycleInfo>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      long long v10 = *(_OWORD *)(v9 + 16);
      long long v11 = *(_OWORD *)(v9 + 32);
      long long v12 = *(_OWORD *)(v9 + 48);
      *(void *)(v8 + 61) = *(void *)(v9 + 61);
      *(_OWORD *)(v8 + 32) = v11;
      *(_OWORD *)(v8 + 48) = v12;
      *(_OWORD *)(v8 + 16) = v10;
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 88) = 0;
      *(void *)(v8 + 72) = 0;
      *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
      *(void *)(v8 + 88) = *(void *)(v9 + 88);
      *(void *)(v9 + 72) = 0;
      *(void *)(v9 + 80) = 0;
      *(void *)(v9 + 88) = 0;
      v8 += 96;
      v9 += 96;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,Nightingale::cycleInfo *,Nightingale::cycleInfo *,Nightingale::cycleInfo *,0>(a2, v7, v6);
}

uint64_t std::vector<Nightingale::cycleInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v8 = a2[1];
    do
    {
      uint64_t v6 = v8 - 96;
      *(_OWORD *)(v8 - 96) = *(_OWORD *)(v7 - 96);
      long long v9 = *(_OWORD *)(v7 - 80);
      long long v10 = *(_OWORD *)(v7 - 64);
      long long v11 = *(_OWORD *)(v7 - 48);
      *(void *)(v8 - 35) = *(void *)(v7 - 35);
      *(_OWORD *)(v8 - 64) = v10;
      *(_OWORD *)(v8 - 48) = v11;
      *(_OWORD *)(v8 - 80) = v9;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      *(void *)(v8 - 24) = 0;
      *(_OWORD *)(v8 - 24) = *(_OWORD *)(v7 - 24);
      *(void *)(v8 - 8) = *(void *)(v7 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v7 -= 96;
      v8 -= 96;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v12 = a1[1];
  uint64_t v13 = a2[2];
  if (v12 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a3;
      long long v14 = *(_OWORD *)(a3 + 16);
      long long v15 = *(_OWORD *)(a3 + 32);
      long long v16 = *(_OWORD *)(a3 + 48);
      *(void *)(v13 + 61) = *(void *)(a3 + 61);
      *(_OWORD *)(v13 + 32) = v15;
      *(_OWORD *)(v13 + 48) = v16;
      *(_OWORD *)(v13 + 16) = v14;
      *(void *)(v13 + 80) = 0;
      *(void *)(v13 + 88) = 0;
      *(void *)(v13 + 72) = 0;
      *(_OWORD *)(v13 + 72) = *(_OWORD *)(a3 + 72);
      *(void *)(v13 + 88) = *(void *)(a3 + 88);
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
      v13 += 96;
      a3 += 96;
    }
    while (a3 != v12);
    uint64_t v6 = a2[1];
  }
  a2[2] = v13;
  uint64_t v17 = *a1;
  *a1 = v6;
  a2[1] = v17;
  uint64_t v18 = a1[1];
  a1[1] = a2[2];
  a2[2] = v18;
  uint64_t v19 = a1[2];
  a1[2] = a2[3];
  a2[3] = v19;
  *a2 = a2[1];
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,Nightingale::cycleInfo *,Nightingale::cycleInfo *,Nightingale::cycleInfo *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = v5 - 96;
      uint64_t v7 = a3 - 96;
      *(_OWORD *)(a3 - 96) = *(_OWORD *)(v5 - 96);
      long long v8 = *(_OWORD *)(v5 - 80);
      long long v9 = *(_OWORD *)(v5 - 64);
      long long v10 = *(_OWORD *)(v5 - 48);
      *(void *)(a3 - 35) = *(void *)(v5 - 35);
      *(_OWORD *)(a3 - 64) = v9;
      *(_OWORD *)(a3 - 48) = v10;
      *(_OWORD *)(a3 - 80) = v8;
      std::vector<float>::__move_assign(a3 - 24, (__n128 *)(v5 - 24));
      a3 = v7;
      uint64_t v5 = v6;
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,Nightingale::cycleInfo *,Nightingale::cycleInfo *,Nightingale::cycleInfo *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(_OWORD *)a3 = *(_OWORD *)v4;
    long long v6 = *(_OWORD *)(v4 + 16);
    long long v7 = *(_OWORD *)(v4 + 32);
    long long v8 = *(_OWORD *)(v4 + 48);
    *(void *)(a3 + 61) = *(void *)(v4 + 61);
    *(_OWORD *)(a3 + 32) = v7;
    *(_OWORD *)(a3 + 48) = v8;
    *(_OWORD *)(a3 + 16) = v6;
    std::vector<float>::__move_assign(a3 + 72, (__n128 *)(v4 + 72));
    a3 += 96;
    v4 += 96;
  }
  while (v4 != v5);
  return v5;
}

__n128 std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::vector<float>,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      result.n128_u64[0] = std::vector<float>::__move_assign(a1, a2).n128_u64[0];
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::construct_at[abi:nn180100]<Nightingale::coreAnalyticsHistPerCycle_t,Nightingale::coreAnalyticsHistPerCycle_t const&,Nightingale::coreAnalyticsHistPerCycle_t*>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 40) = 0;
  long long v6 = (std::vector<int> *)(a1 + 40);
  *(unsigned char *)(a1 + 64) = 0;
  if (*((unsigned char *)a2 + 64))
  {
    std::vector<int>::vector(v6, (const std::vector<int> *)((char *)a2 + 40));
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  if (*((unsigned char *)a2 + 96))
  {
    std::vector<int>::vector((std::vector<int> *)(a1 + 72), (const std::vector<int> *)a2 + 3);
    *(unsigned char *)(a1 + 96) = 1;
  }
  long long v7 = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 118) = *(void *)((char *)a2 + 118);
  *(_OWORD *)(a1 + 104) = v7;
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::coreAnalyticsHistPerCycle_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(a2 << 7);
}

__n128 std::construct_at[abi:nn180100]<Nightingale::coreAnalyticsHistPerCycle_t,Nightingale::coreAnalyticsHistPerCycle_t,Nightingale::coreAnalyticsHistPerCycle_t*>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  if (*((unsigned char *)a2 + 64))
  {
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  if (*((unsigned char *)a2 + 96))
  {
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 11) = 0;
    *(unsigned char *)(a1 + 96) = 1;
  }
  __n128 result = *(__n128 *)((char *)a2 + 104);
  *(void *)(a1 + 118) = *(void *)((char *)a2 + 118);
  *(__n128 *)(a1 + 104) = result;
  return result;
}

uint64_t std::__split_buffer<Nightingale::coreAnalyticsHistPerCycle_t>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    std::__destroy_at[abi:nn180100]<Nightingale::coreAnalyticsHistPerCycle_t,0>(i - 128);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__destroy_at[abi:nn180100]<Nightingale::coreAnalyticsHistPerCycle_t,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    long long v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }
  }
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3)
    {
      *(void *)(a1 + 48) = v3;
      operator delete(v3);
    }
  }
}

uint64_t std::construct_at[abi:nn180100]<Nightingale::ngt_HistoricCycle,Nightingale::ngt_HistoricCycle const&,Nightingale::ngt_HistoricCycle*>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(void *)(a1 + 32) = 0;
  long long v5 = (void *)(a1 + 32);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  long long v7 = (unsigned char *)*((void *)a2 + 4);
  long long v6 = (unsigned char *)*((void *)a2 + 5);
  size_t v8 = v6 - v7;
  if (v6 != v7)
  {
    std::vector<Nightingale::Phase>::__vallocate[abi:nn180100](v5, v6 - v7);
    long long v9 = *(char **)(a1 + 40);
    memmove(v9, v7, v8);
    *(void *)(a1 + 40) = &v9[v8];
  }
  uint64_t v10 = *((void *)a2 + 7);
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  *(void *)(a1 + 56) = v10;
  return a1;
}

uint64_t *std::vector<Nightingale::ngt_HistoricCycle>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 72;
      long long v6 = *(_OWORD *)(v3 - 72);
      *(_OWORD *)(v4 - 63) = *(_OWORD *)(v3 - 63);
      *(_OWORD *)(v4 - 72) = v6;
      *(void *)(v4 - 32) = 0;
      *(void *)(v4 - 24) = 0;
      *(void *)(v4 - 40) = 0;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(void *)(v4 - 24) = *(void *)(v3 - 24);
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 24) = 0;
      uint64_t v7 = *(void *)(v3 - 16);
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      *(void *)(v4 - 16) = v7;
      v3 -= 72;
      v4 -= 72;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  char *result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::ngt_HistoricCycle>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(72 * a2);
}

uint64_t std::__split_buffer<Nightingale::ngt_HistoricCycle>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<Nightingale::ngt_HistoricCycle>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 72;
    uint64_t v5 = *(void **)(v2 - 40);
    if (v5)
    {
      *(void *)(v2 - 32) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
}

void std::vector<Nightingale::coreAnalyticsHistPerCycle_t>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 128;
        std::__destroy_at[abi:nn180100]<Nightingale::coreAnalyticsHistPerCycle_t,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<Nightingale::coreAnalyticsHistPerCycle_t *,Nightingale::coreAnalyticsHistPerCycle_t *,Nightingale::coreAnalyticsHistPerCycle_t *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  long long v6 = a3;
  do
  {
    long long v7 = *v5;
    long long v8 = v5[1];
    *(unsigned char *)(a4 + 32) = *((unsigned char *)v5 + 32);
    *(_OWORD *)a4 = v7;
    *(_OWORD *)(a4 + 16) = v8;
    std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::vector<float>,false>>(a4 + 40, (__n128 *)((char *)v5 + 40));
    std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::vector<float>,false>>(a4 + 72, (__n128 *)((char *)v5 + 72));
    long long v9 = *(long long *)((char *)v5 + 104);
    *(void *)(a4 + 118) = *(void *)((char *)v5 + 118);
    *(_OWORD *)(a4 + 104) = v9;
    a4 += 128;
    v5 += 8;
  }
  while (v5 != v6);
  return v6;
}

uint64_t Nightingale::lstmHr::lstmHr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_26E28CBF8;
  *(unsigned char *)(a1 + 108) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 116) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 136) = a3;
  *(unsigned char *)(a1 + 180) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 188) = 0;
  *(void *)(a1 + 144) = a4;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 304) = 0;
  Nightingale::heartRateInputAcquisition::heartRateInputAcquisition((Nightingale::heartRateInputAcquisition *)(a1 + 316));
  return a1;
}

{
  *(void *)a1 = &unk_26E28CBF8;
  *(unsigned char *)(a1 + 108) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 116) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 136) = a3;
  *(unsigned char *)(a1 + 180) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 188) = 0;
  *(void *)(a1 + 144) = a4;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 304) = 0;
  Nightingale::heartRateInputAcquisition::heartRateInputAcquisition((Nightingale::heartRateInputAcquisition *)(a1 + 316));
  return a1;
}

void Nightingale::lstmHr::~lstmHr(Nightingale::lstmHr *this)
{
  *(void *)this = &unk_26E28CBF8;
  Nightingale::heartRateInputAcquisition::~heartRateInputAcquisition((Nightingale::lstmHr *)((char *)this + 316));
  uint64_t v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    *((void *)this + 37) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 33);
  if (v3)
  {
    *((void *)this + 34) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 30);
  if (v4)
  {
    *((void *)this + 31) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 27);
  if (v5)
  {
    *((void *)this + 28) = v5;
    operator delete(v5);
  }
  long long v6 = (void *)*((void *)this + 24);
  if (v6)
  {
    *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v6;
    operator delete(v6);
  }
  long long v11 = (void **)((char *)this + 152);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:nn180100](&v11);
  long long v7 = (void *)*((void *)this + 10);
  if (v7)
  {
    *((void *)this + 11) = v7;
    operator delete(v7);
  }
  long long v8 = (void *)*((void *)this + 7);
  if (v8)
  {
    *((void *)this + 8) = v8;
    operator delete(v8);
  }
  long long v9 = (void *)*((void *)this + 4);
  if (v9)
  {
    *((void *)this + 5) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 1);
  if (v10)
  {
    *((void *)this + 2) = v10;
    operator delete(v10);
  }
}

uint64_t Nightingale::lstmHr::acquireHr(Nightingale::lstmHr *this)
{
  uint64_t JDay1stValidAwakeHr = Nightingale::lstmHr::getJDay1stValidAwakeHr(this);
  uint64_t result = 0;
  if ((JDay1stValidAwakeHr & 0xFF00000000) != 0
    && *(_DWORD *)(*(void *)(*((void *)this + 17) + 8) - 96) - 39 >= (int)JDay1stValidAwakeHr)
  {
    (**(void (***)(Nightingale::lstmHr *))this)(this);
    if (*((unsigned char *)this + 108) && *((unsigned char *)this + 116))
    {
      std::vector<std::optional<int>>::vector<std::__wrap_iter<std::optional<int>*>,0>((uint64_t)&v6, (unsigned char *)(*((void *)this + 8) - 360), *((unsigned char **)this + 8));
      uint64_t v4 = (void *)*((void *)this + 24);
      if (v4)
      {
        *((void *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v4;
        operator delete(v4);
      }
      *((_OWORD *)this + 12) = v6;
      *((void *)this + 26) = v7;
      std::vector<std::optional<int>>::vector<std::__wrap_iter<std::optional<int>*>,0>((uint64_t)&v6, (unsigned char *)(*((void *)this + 11) - 360), *((unsigned char **)this + 11));
      uint64_t v5 = (void *)*((void *)this + 27);
      if (v5)
      {
        *((void *)this + 28) = v5;
        operator delete(v5);
      }
      *(_OWORD *)((char *)this + 216) = v6;
      *((void *)this + 29) = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL Nightingale::lstmHr::enoughHrSamplesToRunLstmHr(Nightingale::lstmHr *this)
{
  uint64_t JDay1stValidAwakeHr = Nightingale::lstmHr::getJDay1stValidAwakeHr(this);
  return (JDay1stValidAwakeHr & 0xFF00000000) != 0
      && *(_DWORD *)(*(void *)(*((void *)this + 17) + 8) - 96) - 39 >= (int)JDay1stValidAwakeHr;
}

uint64_t Nightingale::lstmHr::getJDay1stValidAwakeHr(Nightingale::lstmHr *this)
{
  uint64_t v1 = (unsigned int **)*((void *)this + 16);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  while (1)
  {
    if (v2 == v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      return v5 | v4;
    }
    if (*((unsigned char *)v2 + 20) && *((unsigned char *)v2 + 36) && (int)v2[8] >= 24) {
      break;
    }
    v2 += 15;
  }
  uint64_t v5 = *v2;
  uint64_t v4 = 0x100000000;
  return v5 | v4;
}

uint64_t Nightingale::lstmHr::acquireHrSlices(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 144);
  if (*(unsigned char *)(v1 + 36))
  {
    uint64_t v2 = this;
    uint64_t v3 = (Nightingale::heartRateInputAcquisition *)(this + 316);
    Nightingale::heartRateInputAcquisition::acquireSlicesFwDayStream(this + 316, *(uint64_t **)(this + 128), *(unsigned int *)(v1 + 32), *(void *)(*(void *)(this + 136) + 80), this + 8);
    this = Nightingale::heartRateInputAcquisition::get1stJDayDailyIdx(v3);
    *(_DWORD *)(v2 + 176) = this;
    *(unsigned char *)(v2 + 180) = BYTE4(this);
    *(_DWORD *)(v2 + 184) = v4;
    *(unsigned char *)(v2 + 188) = v5;
  }
  return this;
}

BOOL Nightingale::lstmHr::validateHr(Nightingale::lstmHr *this, int a2)
{
  Nightingale::heartRateInputValidation::heartRateInputValidation((Nightingale::heartRateInputValidation *)v6);
  Nightingale::heartRateInputValidation::process((uint64_t)v6, (void *)this + 1, (void *)this + 19, a2);
  if (*((unsigned char *)this + 108)) {
    BOOL v4 = *((unsigned char *)this + 116) != 0;
  }
  else {
    BOOL v4 = 0;
  }
  Nightingale::heartRateInputValidation::~heartRateInputValidation((Nightingale::heartRateInputValidation *)v6);
  return v4;
}

BOOL Nightingale::lstmHr::preConditionHr(Nightingale::lstmHr *this)
{
  Nightingale::heartRateInputPreCondition::heartRateInputPreCondition((Nightingale::sensorInputProcessBase *)v3, *((void *)this + 16), (uint64_t)this + 8);
  BOOL v1 = Nightingale::heartRateInputPreCondition::preConditionHr(v3);
  Nightingale::heartRateInputPreCondition::~heartRateInputPreCondition((Nightingale::heartRateInputPreCondition *)v3);
  return v1;
}

BOOL Nightingale::lstmHr::prepareUiVectors(Nightingale::lstmHr *this, int a2, int a3, int a4)
{
  int v20 = a2;
  char v21 = 1;
  int v22 = a3;
  char v23 = 1;
  int v24 = a4;
  char v25 = 1;
  uint64_t v5 = *((void *)this + 16);
  uint64_t v6 = *((void *)this + 17);
  uint64_t v7 = *((void *)this + 18);
  long long v17 = xmmword_22F166F40;
  uint64_t v18 = 0x3FB8CEF8402F005CLL;
  Nightingale::uiProcessForLstm::uiProcessForLstm((uint64_t)v19, v5, v6, v7, (__n128 *)&v17);
  Nightingale::uiProcessForLstm::prepareUiLogForDL((uint64_t)v19, (uint64_t)&v20, (uint64_t)this + 240, (float **)this + 33, (float **)this + 36);
  uint64_t v8 = *((void *)this + 30);
  uint64_t v9 = *((void *)this + 31);
  if (v8 == v9
    || (uint64_t v10 = *((void *)this + 33), v11 = *((void *)this + 34), v10 == v11)
    || (uint64_t v12 = *((void *)this + 36), v13 = *((void *)this + 37), v12 == v13))
  {
    BOOL v14 = 0;
  }
  else
  {
    BOOL v14 = 0;
    uint64_t v15 = v9 - v8;
    if ((unint64_t)v15 >= 0xB4 && (unint64_t)(v11 - v10) >= 0xB4 && (unint64_t)(v13 - v12) >= 0xB4) {
      BOOL v14 = 0xEEEEEEEEEEEEEEEFLL
    }
          * ((uint64_t)(*(void *)(*((void *)this + 16) + 8) - **((void **)this + 16)) >> 2) >= v15 >> 2;
  }
  Nightingale::uiProcessForLstm::~uiProcessForLstm((Nightingale::uiProcessForLstm *)v19);
  return v14;
}

uint64_t Nightingale::lstmHrFw::lstmHrFw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_26E28CBF8;
  *(unsigned char *)(a1 + 108) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 116) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 136) = a3;
  *(unsigned char *)(a1 + 180) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 188) = 0;
  *(void *)(a1 + 144) = a4;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 304) = 0;
  Nightingale::heartRateInputAcquisition::heartRateInputAcquisition((Nightingale::heartRateInputAcquisition *)(a1 + 316));
  *(void *)a1 = &unk_26E28CC10;
  unsigned __int8 v11 = 0;
  std::vector<BOOL>::vector((void *)(a1 + 336), 8uLL, &v11);
  *(unsigned char *)(a1 + 388) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(unsigned char *)(a1 + 396) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  Nightingale::ngt_dnn_fw_predict_t::ngt_dnn_fw_predict_t((Nightingale::ngt_dnn_fw_predict_t *)(a1 + 424));
  Nightingale::lstmModelCommonFw::lstmModelCommonFw((Nightingale::lstmModelCommonFw *)(a1 + 432));
  *(unsigned char *)(a1 + 436) = 0;
  *(unsigned char *)(a1 + 440) = 0;
  *(unsigned char *)(a1 + 444) = 0;
  *(unsigned char *)(a1 + 448) = 0;
  *(unsigned char *)(a1 + 452) = 0;
  *(unsigned char *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 460) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 468) = 0;
  *(unsigned char *)(a1 + 472) = 0;
  *(unsigned char *)(a1 + 476) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 484) = -1082130432;
  *(void *)(a1 + 488) = -1;
  *(void *)(a1 + 496) = -1;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)(a1 + 504) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 520) = _Q0;
  *(unsigned char *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 532) = 0;
  return a1;
}

void Nightingale::lstmHrFw::~lstmHrFw(id **this)
{
  *this = (id *)&unk_26E28CC10;
  Nightingale::lstmModelCommonFw::~lstmModelCommonFw((Nightingale::lstmModelCommonFw *)(this + 54));
  Nightingale::ngt_dnn_fw_predict_t::~ngt_dnn_fw_predict_t(this + 53);
  uint64_t v2 = this[50];
  if (v2)
  {
    this[51] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[45];
  if (v3)
  {
    this[46] = v3;
    operator delete(v3);
  }
  BOOL v4 = this[42];
  if (v4) {
    operator delete(v4);
  }
  Nightingale::lstmHr::~lstmHr((Nightingale::lstmHr *)this);
}

void Nightingale::lstmHrFw::getFWEndHr(Nightingale::lstmHrFw *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 24) = -1082130432;
  *(void *)(a3 + 28) = -1;
  *(void *)(a3 + 36) = -1;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)(a3 + 44) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a3 + 60) = _Q0;
  *(unsigned char *)(a3 + 68) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  if (Nightingale::lstmHr::acquireHr(this)
    && Nightingale::lstmHr::validateHr(this, 1)
    && Nightingale::lstmHr::preConditionHr(this))
  {
    if (*((unsigned char *)this + 108) && *((unsigned char *)this + 116) && *((unsigned char *)this + 180))
    {
      if (Nightingale::lstmHr::prepareUiVectors(this, *((_DWORD *)this + 26), *((_DWORD *)this + 28), *((_DWORD *)this + 44)))
      {
        Nightingale::lstmHrFw::applyAlgs((uint64_t)this);
        Nightingale::lstmHrFw::computeHrFwCA(this, a2);
        long long v11 = *(_OWORD *)((char *)this + 508);
        *(_OWORD *)(a3 + 32) = *(_OWORD *)((char *)this + 492);
        *(_OWORD *)(a3 + 48) = v11;
        *(_OWORD *)(a3 + 60) = *(_OWORD *)((char *)this + 520);
        long long v12 = *(_OWORD *)((char *)this + 476);
        *(_OWORD *)a3 = *(_OWORD *)((char *)this + 460);
        *(_OWORD *)(a3 + 16) = v12;
      }
    }
    else
    {
      uint64_t v13 = std::__throw_bad_optional_access[abi:nn180100]();
      Nightingale::lstmHrFw::applyAlgs(v13);
    }
  }
}

uint64_t Nightingale::lstmHrFw::applyAlgs(uint64_t this)
{
  if (*(unsigned char *)(this + 108) && (uint64_t v1 = this, *(unsigned char *)(this + 116)))
  {
    int v2 = *(_DWORD *)(this + 104) + 44;
    int v3 = *(_DWORD *)(this + 112);
    if (v2 <= v3)
    {
      for (int i = 0; ; ++i)
      {
        int v5 = v2 + i;
        Nightingale::lstmHrFw::applyAlgsADay((Nightingale::lstmHrFw *)v1, (unsigned __int16)i);
        if (*(unsigned char *)(v1 + 388)
          && !*(unsigned char *)(v1 + 464)
          && Nightingale::lstmHrFw::validateFwRsltADay((Nightingale::lstmHrFw *)v1, v2 + i))
        {
          if (!*(unsigned char *)(v1 + 388)) {
            goto LABEL_23;
          }
          *(_DWORD *)(v1 + 460) = v2 + i + *(_DWORD *)(v1 + 384);
          *(unsigned char *)(v1 + 464) = 1;
          *(_DWORD *)(v1 + 468) = v5;
          *(unsigned char *)(v1 + 472) = 1;
        }
        uint64_t v6 = *(void *)(v1 + 152);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v1 + 160) - v6) >> 3) <= (unsigned __int16)i) {
          abort();
        }
        unint64_t v7 = *(void *)(v6 + 24 * (unsigned __int16)i + 8) - 1;
        int v8 = ((*(void *)(*(void *)(v6 + 24 * (unsigned __int16)i) + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) != 0
          && *(unsigned char *)(v1 + 480) == 0;
        this = Nightingale::lstmHrFw::validateToRunPeriodADay((Nightingale::lstmHrFw *)v1, v2 + i, v8);
        if (this)
        {
          *(_DWORD *)(v1 + 476) = v5;
          *(unsigned char *)(v1 + 480) = 1;
        }
        if (*(unsigned char *)(v1 + 464) && *(unsigned char *)(v1 + 472) && *(unsigned char *)(v1 + 480) || v5 >= v3) {
          break;
        }
      }
    }
  }
  else
  {
LABEL_23:
    uint64_t v9 = (Nightingale::lstmHrFw *)std::__throw_bad_optional_access[abi:nn180100]();
    return Nightingale::lstmHrFw::computeHrFwCA(v9, v10);
  }
  return this;
}

void Nightingale::lstmHrFw::computeHrFwCA(Nightingale::lstmHrFw *this, int a2)
{
  if (a2)
  {
    if (*((void *)this + 24) != *((void *)this + 25))
    {
      Nightingale::lstmHrFw::computeHrSignalQuality(this, (uint64_t)&v5);
      long long v3 = *(_OWORD *)v6;
      *(_OWORD *)((char *)this + 484) = v5;
      *(_OWORD *)((char *)this + 500) = v3;
      *((_OWORD *)this + 32) = *(_OWORD *)&v6[12];
      uint64_t v4 = *((void *)this + 17);
      if (*(unsigned char *)(v4 + 108))
      {
        if (*((unsigned char *)this + 464))
        {
          *((_DWORD *)this + 132) = *((_DWORD *)this + 115) + ~*(_DWORD *)(v4 + 104);
          *((unsigned char *)this + 532) = 1;
        }
      }
    }
  }
}

void Nightingale::lstmHrFw::applyAlgsADay(Nightingale::lstmHrFw *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 19);
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 20) - v2) >> 3);
  if (a2 < (unsigned __int16)v3)
  {
    if (v3 <= a2) {
      abort();
    }
    uint64_t v5 = a2;
    if (**(unsigned char **)(v2 + 24 * a2))
    {
      unint64_t v7 = a2 + 44;
      if (v7 < (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3
        && v7 < (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3
        && v7 < (uint64_t)(*((void *)this + 31) - *((void *)this + 30)) >> 2
        && v7 < (uint64_t)(*((void *)this + 34) - *((void *)this + 33)) >> 2
        && v7 < (uint64_t)(*((void *)this + 37) - *((void *)this + 36)) >> 2)
      {
        uint64_t v8 = a2 + 45;
        memset(&v19, 0, sizeof(v19));
        uint64_t v18 = 0;
        long long v16 = 0u;
        *(_OWORD *)long long v17 = 0u;
        *(_OWORD *)__src = 0u;
        *(_OWORD *)uint64_t v15 = 0u;
        memset(v13, 0, sizeof(v13));
        Nightingale::lstmHr::copyASliceToLstmStruct((uint64_t)this, (uint64_t)v13, (void *)this + 1, a2, (unsigned __int16)(a2 + 45));
        Nightingale::lstmHr::copyASliceToLstmStruct((uint64_t)this, (uint64_t)&v13[1] + 8, (void *)this + 4, a2, (unsigned __int16)(a2 + 45));
        std::vector<double>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)__src, (char *)__src[0], (float *)(*((void *)this + 30) + 4 * a2), (float *)(*((void *)this + 30) + 4 * v8), v8 - v5);
        std::vector<double>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v15[1], (char *)v15[1], (float *)(*((void *)this + 33) + 4 * v5), (float *)(*((void *)this + 33) + 4 * v8), v8 - v5);
        std::vector<double>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)v17, (char *)v17[0], (float *)(*((void *)this + 36) + 4 * v5), (float *)(*((void *)this + 36) + 4 * v8), v8 - v5);
        if ((Nightingale::ngt_dnn_fw_predict_t::ngt_dnn_process_fw((uint64_t *)this + 53, (uint64_t *)v13, (uint64_t)&v19) & 1) == 0)
        {
          Nightingale::lstmModelCommonFw::fwDLPostProcess(&v19, 0, -16, (uint64_t)v10);
          *((void *)this + 48) = v10[0];
          *(void *)((char *)this + 389) = *(void *)((char *)v10 + 5);
          uint64_t v9 = (void *)*((void *)this + 50);
          if (v9)
          {
            *((void *)this + 51) = v9;
            operator delete(v9);
          }
          *((_OWORD *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v11;
          *((void *)this + 52) = v12;
        }
        Nightingale::ngt_hr_DLin_t::~ngt_hr_DLin_t((Nightingale::ngt_hr_DLin_t *)v13);
        if (v19.__begin_)
        {
          v19.__end_ = v19.__begin_;
          operator delete(v19.__begin_);
        }
      }
    }
  }
}

uint64_t Nightingale::lstmHrFw::validateFwRsltADay(Nightingale::lstmHrFw *this, int a2)
{
  if (!*((unsigned char *)this + 388)) {
    return 0;
  }
  if (*((void *)this + 50) == *((void *)this + 51)) {
    return 0;
  }
  if (!*((unsigned char *)this + 396)) {
    return 0;
  }
  uint64_t v3 = *(void *)(*((void *)this + 17) + 8);
  if (!*(unsigned char *)(v3 - 60)) {
    return 0;
  }
  if (*((void *)this + 43) <= 7uLL) {
    goto LABEL_41;
  }
  int v4 = *((_DWORD *)this + 96);
  float v5 = *(float *)(v3 - 64);
  int v6 = *(_DWORD *)(v3 - 96);
  unint64_t v7 = (unint64_t *)*((void *)this + 42);
  unint64_t v8 = *v7 & 0xFFFFFFFFFFFFFF7FLL | ((unint64_t)*((unsigned __int8 *)this + 464) << 7);
  unint64_t *v7 = v8;
  unint64_t v9 = *((void *)this + 43);
  int v10 = v9 & 0x3F;
  if (v9 > 0x3F || v10 != 5)
  {
    int v11 = 5;
    uint64_t v12 = v7;
    while (((*v12 >> v11) & 1) == 0)
    {
      v12 += v11 == 63;
      if (v11 == 63) {
        int v11 = 0;
      }
      else {
        ++v11;
      }
      if (v11 == v10 && v12 == &v7[v9 >> 6]) {
        goto LABEL_15;
      }
    }
    return 0;
  }
LABEL_15:
  if (!v9) {
    goto LABEL_41;
  }
  unint64_t v13 = v8 & 0xFFFFFFFFFFFFFFFELL | (*((float *)this + 98) < 10.0);
  unint64_t *v7 = v13;
  if (*((void *)this + 43) <= 1uLL) {
    goto LABEL_41;
  }
  unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFDLL | (2 * ((v4 & 0xFFFFFFFE) == 2));
  unint64_t *v7 = v14;
  if (*((void *)this + 43) <= 3uLL) {
    goto LABEL_41;
  }
  uint64_t v15 = (Nightingale *)(a2 - v6 + v4);
  float v16 = (float)(int)v15;
  float v17 = roundf(v5 + -13.0);
  unint64_t *v7 = v14 & 0xFFFFFFFFFFFFFFF7 | (8 * (v17 < (float)(int)v15));
  char v18 = Nightingale::follicularPhaseCheck(v15, 6, 100);
  if (*((void *)this + 43) <= 2uLL) {
    goto LABEL_41;
  }
  **((void **)this + 42) = **((void **)this + 42) & 0xFFFFFFFFFFFFFFFBLL | (4 * (v18 & 1));
  BOOL v19 = Nightingale::passLutealPhaseCheck(v15, v5, 6.0);
  if (*((void *)this + 43) <= 4uLL) {
    goto LABEL_41;
  }
  int v20 = 0;
  char v21 = (unint64_t *)*((void *)this + 42);
  uint64_t v22 = 16;
  if (!v19) {
    uint64_t v22 = 0;
  }
  unint64_t v23 = *v21 & 0xFFFFFFFFFFFFFFEFLL | v22;
  *char v21 = v23;
  int v24 = v21;
  do
  {
    if (((*v24 >> v20) & 1) == 0) {
      return 0;
    }
    v24 += v20 == 63;
    if (v20 == 63) {
      int v20 = 0;
    }
    else {
      ++v20;
    }
  }
  while (v20 != 3 || v24 != v21);
  if (v17 < v16 && v19) {
    return 1;
  }
  unint64_t v27 = *((void *)this + 43);
  if (v17 >= v16)
  {
    if (v27 > 5)
    {
      uint64_t v28 = 32;
      goto LABEL_40;
    }
LABEL_41:
    abort();
  }
  if (v27 <= 6) {
    goto LABEL_41;
  }
  uint64_t v28 = 64;
LABEL_40:
  uint64_t result = 0;
  *char v21 = v23 | v28;
  return result;
}

uint64_t Nightingale::lstmHrFw::validateToRunPeriodADay(Nightingale::lstmHrFw *this, int a2, int a3)
{
  if (*((unsigned char *)this + 480)) {
    return 0;
  }
  int v4 = this;
  if (!*((unsigned char *)this + 388)
    || *((void *)this + 50) == *((void *)this + 51)
    || !*((unsigned char *)this + 396)
    || !*(unsigned char *)(*(void *)(*((void *)this + 17) + 8) - 60))
  {
    return 0;
  }
  int v7 = *((_DWORD *)this + 96);
  unint64_t v8 = (Nightingale::lstmHrFw **)((char *)this + 360);
  int v9 = v7 + a2;
  int v11 = (Nightingale::lstmHrFw *)*((void *)this + 46);
  unint64_t v10 = *((void *)this + 47);
  if ((unint64_t)v11 >= v10)
  {
    this = *v8;
    uint64_t v13 = (v11 - *v8) >> 2;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62) {
      abort();
    }
    uint64_t v15 = v10 - (void)this;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      float v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)v4 + 376, v16);
      this = (Nightingale::lstmHrFw *)*((void *)v4 + 45);
      int v11 = (Nightingale::lstmHrFw *)*((void *)v4 + 46);
    }
    else
    {
      float v17 = 0;
    }
    char v18 = &v17[4 * v13];
    BOOL v19 = &v17[4 * v16];
    *(_DWORD *)char v18 = v9;
    uint64_t v12 = v18 + 4;
    while (v11 != this)
    {
      int v20 = *((_DWORD *)v11 - 1);
      int v11 = (Nightingale::lstmHrFw *)((char *)v11 - 4);
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    *((void *)v4 + 45) = v18;
    *((void *)v4 + 46) = v12;
    *((void *)v4 + 47) = v19;
    if (this) {
      operator delete(this);
    }
  }
  else
  {
    *(_DWORD *)int v11 = v9;
    uint64_t v12 = (_DWORD *)((char *)v11 + 4);
  }
  *((void *)v4 + 46) = v12;
  uint64_t v21 = *((void *)v4 + 45);
  if ((unint64_t)v12 - v21 >= 0x11)
  {
    size_t v22 = (size_t)v12 - v21 - 4;
    if (v22) {
      this = (Nightingale::lstmHrFw *)memmove(*((void **)v4 + 45), (const void *)(v21 + 4), v22);
    }
    *((void *)v4 + 46) = v21 + v22;
  }
  BOOL v23 = Nightingale::lstmHrFw::consistencyCheck((uint64_t)this, (void *)v4 + 45, 4);
  uint64_t result = 0;
  if (v23 && (v7 + 5) >= 0xFFFFFFF1)
  {
    if (a3)
    {
      *((_DWORD *)v4 + 119) = a2;
      uint64_t result = 1;
      *((unsigned char *)v4 + 480) = 1;
    }
  }
  return result;
}

void Nightingale::lstmHr::copyASliceToLstmStruct(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5)
{
  std::vector<std::optional<int>>::vector<std::__wrap_iter<std::optional<int>*>,0>((uint64_t)&v21, (unsigned char *)(*a3 + 8 * a4), (unsigned char *)(*a3 + 8 * a5));
  int v6 = v21;
  int v7 = v22;
  if (v21 != v22)
  {
    do
    {
      if (*((unsigned char *)v6 + 4)) {
        float v8 = *v6;
      }
      else {
        float v8 = -1.0;
      }
      double v9 = v8;
      int v11 = *(double **)(a2 + 8);
      unint64_t v10 = *(void *)(a2 + 16);
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = *(double **)a2;
        uint64_t v14 = ((uint64_t)v11 - *(void *)a2) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          abort();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          char v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Nightingale::PhaseSet>>(a2 + 16, v17);
          uint64_t v13 = *(double **)a2;
          int v11 = *(double **)(a2 + 8);
        }
        else
        {
          char v18 = 0;
        }
        BOOL v19 = (double *)&v18[8 * v14];
        double *v19 = v9;
        uint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          uint64_t v20 = *((void *)v11-- - 1);
          *((void *)v19-- - 1) = v20;
        }
        *(void *)a2 = v19;
        *(void *)(a2 + 8) = v12;
        *(void *)(a2 + 16) = &v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        double *v11 = v9;
        uint64_t v12 = v11 + 1;
      }
      *(void *)(a2 + 8) = v12;
      v6 += 2;
    }
    while (v6 != v7);
    int v6 = v21;
  }
  if (v6)
  {
    size_t v22 = v6;
    operator delete(v6);
  }
}

void Nightingale::ngt_hr_DLin_t::~ngt_hr_DLin_t(Nightingale::ngt_hr_DLin_t *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 7) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v6;
    operator delete(v6);
  }
}

BOOL Nightingale::lstmHrFw::consistencyCheck(uint64_t a1, void *a2, int a3)
{
  unint64_t v3 = (uint64_t)(a2[1] - *a2) >> 2;
  if (v3 < a3) {
    return 0;
  }
  unint64_t v5 = v3 - 1;
  if (v3 == 1) {
    return 1;
  }
  int v6 = 0;
  if (v3 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = (uint64_t)(a2[1] - *a2) >> 2;
  }
  unint64_t v8 = v7 - 1;
  unint64_t v9 = v3 - 2;
  unint64_t v10 = (_DWORD *)(*a2 + 4);
  do
  {
    if (v8 <= v9) {
      abort();
    }
    int v6 = *v10 + v6 - *(v10 - 1);
    ++v10;
    --v5;
  }
  while (v5);
  return v6 == 0;
}

void Nightingale::lstmHrFw::computeHrSignalQuality(Nightingale::lstmHrFw *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = -1082130432;
  *(void *)(a2 + 4) = -1;
  *(void *)(a2 + 12) = -1;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)(a2 + 20) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a2 + 36) = _Q0;
  uint64_t v10 = *((void *)this + 24);
  uint64_t v9 = *((void *)this + 25);
  if (v9 == v10)
  {
    *(void *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 20) = 0;
    *(void *)a2 = 1065353216;
    *(_DWORD *)(a2 + 12) = 0;
    goto LABEL_63;
  }
  uint64_t v11 = 0;
  uint64_t v12 = (v9 - v10) >> 3;
  uint64_t v13 = *((void *)this + 24);
  do
  {
    if (!*(unsigned char *)(v13 + 4)) {
      ++v11;
    }
    v13 += 8;
  }
  while (v13 != v9);
  uint64_t v14 = 0;
  float v15 = (float)(unint64_t)v12;
  *(float *)a2 = (float)v11 / (float)(unint64_t)v12;
  uint64_t v16 = v10;
  do
  {
    if (*(unsigned char *)(v16 + 4) && *(int *)v16 > 11) {
      ++v14;
    }
    v16 += 8;
  }
  while (v16 != v9);
  uint64_t v17 = 0;
  *(float *)(a2 + 20) = (float)v14 / v15;
  uint64_t v18 = v10;
  do
  {
    if (*(unsigned char *)(v18 + 4) && *(int *)v18 > 17) {
      ++v17;
    }
    v18 += 8;
  }
  while (v18 != v9);
  uint64_t v19 = 0;
  *(float *)(a2 + 24) = (float)v17 / v15;
  uint64_t v20 = v10;
  do
  {
    if (*(unsigned char *)(v20 + 4) && *(int *)v20 > 23) {
      ++v19;
    }
    v20 += 8;
  }
  while (v20 != v9);
  uint64_t v21 = 0;
  *(float *)(a2 + 28) = (float)v19 / v15;
  std::vector<int> __p = 0;
  unint64_t v66 = 0;
  uint64_t v67 = 0;
  do
  {
    if (*(unsigned char *)(v10 + 4))
    {
      float v22 = (float)*(int *)v10;
      if (v21 < (float *)v67)
      {
        *v21++ = v22;
        goto LABEL_54;
      }
      BOOL v23 = (float *)__p;
      uint64_t v24 = ((char *)v21 - (unsigned char *)__p) >> 2;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62) {
        goto LABEL_122;
      }
      uint64_t v26 = v67 - (unsigned char *)__p;
      if ((v67 - (unsigned char *)__p) >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        uint64_t v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v67, v27);
        BOOL v23 = (float *)__p;
        uint64_t v21 = v66;
      }
      else
      {
        uint64_t v28 = 0;
      }
      unsigned int v32 = (float *)&v28[4 * v24];
      float *v32 = v22;
      unsigned int v33 = v32 + 1;
      while (v21 != v23)
      {
        int v34 = *((_DWORD *)v21-- - 1);
        *((_DWORD *)v32-- - 1) = v34;
      }
    }
    else
    {
      if (v21 < (float *)v67)
      {
        *v21++ = 0.0;
        goto LABEL_54;
      }
      BOOL v23 = (float *)__p;
      uint64_t v29 = ((char *)v21 - (unsigned char *)__p) >> 2;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62) {
LABEL_122:
      }
        abort();
      uint64_t v31 = v67 - (unsigned char *)__p;
      if ((v67 - (unsigned char *)__p) >> 1 > v30) {
        unint64_t v30 = v31 >> 1;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v30;
      }
      if (v27)
      {
        uint64_t v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v67, v27);
        BOOL v23 = (float *)__p;
        uint64_t v21 = v66;
      }
      else
      {
        uint64_t v28 = 0;
      }
      unsigned int v32 = (float *)&v28[4 * v29];
      float *v32 = 0.0;
      unsigned int v33 = v32 + 1;
      while (v21 != v23)
      {
        int v35 = *((_DWORD *)v21-- - 1);
        *((_DWORD *)v32-- - 1) = v35;
      }
    }
    std::vector<int> __p = v32;
    unint64_t v66 = v33;
    uint64_t v67 = &v28[4 * v27];
    if (v23) {
      operator delete(v23);
    }
    uint64_t v21 = v33;
LABEL_54:
    unint64_t v66 = v21;
    v10 += 8;
  }
  while (v10 != v9);
  if (v21 == __p) {
    goto LABEL_61;
  }
  std::__sort<std::__less<float,float> &,float *>();
  float Percentile = Nightingale::getPercentile((uint64_t *)&__p, 1, 0.5);
  if (Percentile > 50.0) {
    float Percentile = 50.0;
  }
  *(_DWORD *)(a2 + 4) = llroundf(Percentile);
  float v37 = Nightingale::getPercentile((uint64_t *)&__p, 1, 0.3);
  if (v37 > 50.0) {
    float v37 = 50.0;
  }
  *(_DWORD *)(a2 + 12) = llroundf(v37);
  uint64_t v21 = (float *)__p;
  if (__p)
  {
LABEL_61:
    unint64_t v66 = v21;
    operator delete(v21);
  }
LABEL_63:
  uint64_t v39 = *((void *)this + 27);
  uint64_t v38 = *((void *)this + 28);
  if (v38 == v39)
  {
    *(void *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return;
  }
  uint64_t v40 = 0;
  uint64_t v41 = (v38 - v39) >> 3;
  uint64_t v42 = *((void *)this + 27);
  do
  {
    if (*(unsigned char *)(v42 + 4) && *(int *)v42 > 11) {
      ++v40;
    }
    v42 += 8;
  }
  while (v42 != v38);
  uint64_t v43 = 0;
  float v44 = (float)(unint64_t)v41;
  *(float *)(a2 + 32) = (float)v40 / (float)(unint64_t)v41;
  uint64_t v45 = v39;
  do
  {
    if (*(unsigned char *)(v45 + 4) && *(int *)v45 > 17) {
      ++v43;
    }
    v45 += 8;
  }
  while (v45 != v38);
  uint64_t v46 = 0;
  *(float *)(a2 + 36) = (float)v43 / v44;
  uint64_t v47 = v39;
  do
  {
    if (*(unsigned char *)(v47 + 4) && *(int *)v47 > 23) {
      ++v46;
    }
    v47 += 8;
  }
  while (v47 != v38);
  uint64_t v48 = 0;
  *(float *)(a2 + 40) = (float)v46 / v44;
  std::vector<int> __p = 0;
  unint64_t v66 = 0;
  uint64_t v67 = 0;
  while (2)
  {
    if (*(unsigned char *)(v39 + 4))
    {
      float v49 = (float)*(int *)v39;
      if (v48 < (float *)v67)
      {
        *v48++ = v49;
        goto LABEL_112;
      }
      uint64_t v50 = (float *)__p;
      uint64_t v51 = ((char *)v48 - (unsigned char *)__p) >> 2;
      unint64_t v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 62) {
        goto LABEL_122;
      }
      uint64_t v53 = v67 - (unsigned char *)__p;
      if ((v67 - (unsigned char *)__p) >> 1 > v52) {
        unint64_t v52 = v53 >> 1;
      }
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v54 = v52;
      }
      if (v54)
      {
        long long v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v67, v54);
        uint64_t v50 = (float *)__p;
        uint64_t v48 = v66;
      }
      else
      {
        long long v55 = 0;
      }
      unint64_t v59 = (float *)&v55[4 * v51];
      *unint64_t v59 = v49;
      uint64_t v60 = v59 + 1;
      while (v48 != v50)
      {
        int v61 = *((_DWORD *)v48-- - 1);
        *((_DWORD *)v59-- - 1) = v61;
      }
LABEL_109:
      std::vector<int> __p = v59;
      unint64_t v66 = v60;
      uint64_t v67 = &v55[4 * v54];
      if (v50) {
        operator delete(v50);
      }
      uint64_t v48 = v60;
    }
    else
    {
      if (v48 >= (float *)v67)
      {
        uint64_t v50 = (float *)__p;
        uint64_t v56 = ((char *)v48 - (unsigned char *)__p) >> 2;
        unint64_t v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62) {
          goto LABEL_122;
        }
        uint64_t v58 = v67 - (unsigned char *)__p;
        if ((v67 - (unsigned char *)__p) >> 1 > v57) {
          unint64_t v57 = v58 >> 1;
        }
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v57;
        }
        if (v54)
        {
          long long v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>((uint64_t)&v67, v54);
          uint64_t v50 = (float *)__p;
          uint64_t v48 = v66;
        }
        else
        {
          long long v55 = 0;
        }
        unint64_t v59 = (float *)&v55[4 * v56];
        *unint64_t v59 = 0.0;
        uint64_t v60 = v59 + 1;
        while (v48 != v50)
        {
          int v62 = *((_DWORD *)v48-- - 1);
          *((_DWORD *)v59-- - 1) = v62;
        }
        goto LABEL_109;
      }
      *v48++ = 0.0;
    }
LABEL_112:
    unint64_t v66 = v48;
    v39 += 8;
    if (v39 != v38) {
      continue;
    }
    break;
  }
  if (v48 == __p) {
    goto LABEL_119;
  }
  std::__sort<std::__less<float,float> &,float *>();
  float v63 = Nightingale::getPercentile((uint64_t *)&__p, 1, 0.5);
  if (v63 > 50.0) {
    float v63 = 50.0;
  }
  *(_DWORD *)(a2 + 8) = llroundf(v63);
  float v64 = Nightingale::getPercentile((uint64_t *)&__p, 1, 0.3);
  if (v64 > 50.0) {
    float v64 = 50.0;
  }
  *(_DWORD *)(a2 + 16) = llroundf(v64);
  uint64_t v48 = (float *)__p;
  if (__p)
  {
LABEL_119:
    unint64_t v66 = v48;
    operator delete(v48);
  }
}

double Nightingale::lstmHrFw::getHrSignalQuality@<D0>(Nightingale::lstmHrFw *this@<X0>, uint64_t a2@<X8>)
{
  if (Nightingale::lstmHr::acquireHr(this))
  {
    Nightingale::lstmHrFw::computeHrSignalQuality(this, a2);
  }
  else
  {
    *(_DWORD *)a2 = -1082130432;
    *(void *)(a2 + 4) = -1;
    *(void *)(a2 + 12) = -1;
    __asm { FMOV            V0.4S, #-1.0 }
    *(_OWORD *)(a2 + 20) = _Q0;
    __asm { FMOV            V0.2S, #-1.0 }
    *(double *)(a2 + 36) = result;
  }
  return result;
}

uint64_t Nightingale::lstmHrPeriod::lstmHrPeriod(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = &unk_26E28CBF8;
  *(unsigned char *)(a1 + 108) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 116) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 136) = a3;
  *(unsigned char *)(a1 + 180) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 188) = 0;
  *(void *)(a1 + 144) = a4;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 304) = 0;
  Nightingale::heartRateInputAcquisition::heartRateInputAcquisition((Nightingale::heartRateInputAcquisition *)(a1 + 316));
  *(void *)a1 = &unk_26E28CC28;
  *(void *)(a1 + 332) = a5;
  Nightingale::CGradient::CGradient(a1 + 344);
  *(unsigned char *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 404) = 0;
  *(unsigned char *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 412) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 420) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 428) = 0;
  return a1;
}

void Nightingale::lstmHrPeriod::~lstmHrPeriod(Nightingale::lstmHrPeriod *this)
{
  *(void *)this = &unk_26E28CC28;
  uint64_t v2 = (void *)*((void *)this + 43);
  if (v2)
  {
    *((void *)this + 44) = v2;
    operator delete(v2);
  }
  Nightingale::lstmHr::~lstmHr(this);
}

void Nightingale::lstmHrPeriod::estimatePeriodStartHr(Nightingale::lstmHrPeriod *this@<X0>, uint64_t a2@<X8>)
{
  Nightingale::CGradient::CGradient(a2);
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 60) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 68) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 76) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 84) = 0;
  if (*((unsigned char *)this + 336))
  {
    uint64_t v4 = *(void *)(*((void *)this + 17) + 104);
    uint64_t v5 = *(void *)((char *)this + 332);
    uint64_t v6 = v4 & 0xFF00000000;
    int v7 = v4 + 1;
    BOOL v8 = !v6 || (v5 & 0xFF00000000) == 0;
    BOOL v9 = v8 || v7 < (int)v5;
    if (v9
      && Nightingale::lstmHr::acquireHr(this)
      && Nightingale::lstmHr::validateHr(this, 0)
      && Nightingale::lstmHr::preConditionHr(this))
    {
      if (*((unsigned char *)this + 108) && *((unsigned char *)this + 116) && *((unsigned char *)this + 180))
      {
        Nightingale::lstmHr::prepareUiVectors(this, *((_DWORD *)this + 26), *((_DWORD *)this + 28), *((_DWORD *)this + 44));
        Nightingale::lstmHrPeriod::applyAlgs(this);
        if ((Nightingale::lstmHrPeriod *)((char *)this + 344) != (Nightingale::lstmHrPeriod *)a2) {
          std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)a2, *((char **)this + 43), *((void *)this + 44), (uint64_t)(*((void *)this + 44) - *((void *)this + 43)) >> 2);
        }
        *(_OWORD *)(a2 + 24) = *((_OWORD *)this + 23);
        *(_OWORD *)(a2 + 33) = *(_OWORD *)((char *)this + 377);
        *(_OWORD *)(a2 + 56) = *((_OWORD *)this + 25);
        *(_OWORD *)(a2 + 69) = *(_OWORD *)((char *)this + 413);
      }
      else
      {
        uint64_t v10 = std::__throw_bad_optional_access[abi:nn180100]();
        Nightingale::lstmHrPeriod::checkDayToRunPeriodDLLessThanOPK(v10, v11, v12);
      }
    }
  }
}

BOOL Nightingale::lstmHrPeriod::checkDayToRunPeriodDLLessThanOPK(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0xFF00000000) == 0) {
    return 0;
  }
  if ((a3 & 0xFF00000000) != 0) {
    return (int)a2 + 1 >= (int)a3;
  }
  return 0;
}

void Nightingale::lstmHrPeriod::applyAlgs(Nightingale::lstmHrPeriod *this)
{
  Nightingale::lstmModelCommonPeriod::lstmModelCommonPeriod((Nightingale::lstmModelCommonPeriod *)&v3);
  Nightingale::lstmHrPeriod::getPeriodProjFromLstmModel(this, (Nightingale::lstmModelCommonPeriod *)&v3);
  uint64_t v2 = *((void *)this + 17);
  if (*(unsigned char *)(v2 + 100)) {
    Nightingale::lstmModelCommonPeriod::applyNoflowUpdateDL((Nightingale::lstmModelCommonPeriod *)&v3, (Nightingale::lstmHrPeriod *)((char *)this + 344), *(_DWORD *)(v2 + 96) - *(_DWORD *)(*(void *)(v2 + 8) - 96));
  }
  *((_DWORD *)this + 104) = *((_DWORD *)this + 83);
  *((unsigned char *)this + 420) = *((unsigned char *)this + 336);
  Nightingale::lstmModelCommonPeriod::~lstmModelCommonPeriod((Nightingale::lstmModelCommonPeriod *)&v3);
}

uint64_t Nightingale::lstmHrPeriod::acquireHrSlices(Nightingale::lstmHrPeriod *this)
{
  if (*((unsigned char *)this + 336))
  {
    uint64_t v2 = (Nightingale::lstmHrPeriod *)((char *)this + 316);
    Nightingale::heartRateInputAcquisition::acquireSlicesPeriodDayStream((uint64_t)this + 316, *((uint64_t **)this + 16), *((_DWORD *)this + 83), (uint64_t)this + 8);
    uint64_t result = Nightingale::heartRateInputAcquisition::get1stJDayDailyIdx(v2);
    *((_DWORD *)this + 44) = result;
    *((unsigned char *)this + 180) = BYTE4(result);
    *((_DWORD *)this + 46) = v4;
    *((unsigned char *)this + 188) = v5;
  }
  else
  {
    uint64_t v6 = (Nightingale::lstmHrPeriod *)std::__throw_bad_optional_access[abi:nn180100]();
    return Nightingale::lstmHrPeriod::getPeriodProjFromLstmModel(v6, v7);
  }
  return result;
}

void Nightingale::lstmHrPeriod::getPeriodProjFromLstmModel(Nightingale::lstmHrPeriod *this, Nightingale::lstmModelCommonPeriod *a2)
{
  memset(&v18, 0, sizeof(v18));
  uint64_t v17 = 0;
  long long v15 = 0u;
  *(_OWORD *)std::vector<int> __p = 0u;
  *(_OWORD *)__src = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  Nightingale::lstmHr::copyASliceToLstmStruct((uint64_t)this, (uint64_t)v10, (void *)this + 1, 0, 0x2Du);
  Nightingale::lstmHr::copyASliceToLstmStruct((uint64_t)this, (uint64_t)&v11[1], (void *)this + 4, 0, 0x2Du);
  std::vector<double>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)__src, (char *)__src[0], *((float **)this + 30), (float *)(*((void *)this + 30) + 180), 45);
  std::vector<double>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v14[1], (char *)v14[1], *((float **)this + 33), (float *)(*((void *)this + 33) + 180), 45);
  std::vector<double>::__insert_with_size[abi:nn180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)__p, (char *)__p[0], *((float **)this + 36), (float *)(*((void *)this + 36) + 180), 45);
  Nightingale::ngt_dnn_period_predict_t::ngt_dnn_period_predict_t((Nightingale::ngt_dnn_period_predict_t *)&v9);
  if ((Nightingale::ngt_dnn_period_predict_t::ngt_dnn_process_period((uint64_t *)&v9, (uint64_t *)v10, (uint64_t)&v18) & 1) == 0)
  {
    if (!*((unsigned char *)this + 336))
    {
      int v4 = (void ***)std::__throw_bad_optional_access[abi:nn180100]();
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:nn180100](v4);
      return;
    }
    Nightingale::lstmModelCommonPeriod::periodDLPostProcess(&v18, *((_DWORD *)this + 83) - *(_DWORD *)(*(void *)(*((void *)this + 17) + 8) - 96), (uint64_t)&v5);
    char v3 = (void *)*((void *)this + 43);
    if (v3)
    {
      *((void *)this + 44) = v3;
      operator delete(v3);
    }
    *(_OWORD *)((char *)this + 344) = v5;
    *((void *)this + 45) = v6;
    *((_OWORD *)this + 23) = v7[0];
    *(_OWORD *)((char *)this + 377) = *(_OWORD *)((char *)v7 + 9);
    *((_OWORD *)this + std::vector<std::vector<std::pair<BOOL,float>>>::__clear[abi:nn180100]((uint64_t *)this + 25) = v8[0];
    *(_OWORD *)((char *)this + 413) = *(_OWORD *)((char *)v8 + 13);
  }
  Nightingale::ngt_dnn_period_predict_t::~ngt_dnn_period_predict_t(&v9);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14[1])
  {
    *(void **)&long long v15 = v14[1];
    operator delete(v14[1]);
  }
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  if (v11[1])
  {
    *(void **)&long long v12 = v11[1];
    operator delete(v11[1]);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  if (v18.__begin_)
  {
    v18.__end_ = v18.__begin_;
    operator delete(v18.__begin_);
  }
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<BOOL>>::__clear[abi:nn180100]((uint64_t *)v2);
    char v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<BOOL>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    long long v5 = *(void **)(i - 24);
    int v4 = v5;
    if (v5) {
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<std::optional<int>>::vector<std::__wrap_iter<std::optional<int>*>,0>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    std::vector<Nightingale::PhaseSet>::__vallocate[abi:nn180100]((void *)a1, v4 >> 3);
    uint64_t v7 = *(void *)(a1 + 8);
    if (a3 != a2) {
      memmove(*(void **)(a1 + 8), a2, v4 - 3);
    }
    *(void *)(a1 + 8) = v7 + 8 * (v4 >> 3);
  }
  return a1;
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:nn180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  char v3 = result;
  int v4 = *((_DWORD *)result + 2);
  long long v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    char *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  long long v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void sub_22F15A220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22F15A338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22F15AFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,MAIDayStreamProcessorOutput *a36,void *a37,void *__p,uint64_t a39)
{
  _Unwind_Resume(a1);
}

id retrieve_id_for_core_analytics(void)
{
  v0 = [MEMORY[0x263EFF910] date];
  uint64_t v1 = [MEMORY[0x263EFFA40] standardUserDefaults];
  unint64_t v2 = [v1 valueForKeyPath:@"HADateOfPseudoDeviceIDGeneration"];

  char v3 = [MEMORY[0x263EFFA40] standardUserDefaults];
  int v4 = [v3 valueForKeyPath:@"HAPseudoDeviceID"];

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && ([v0 timeIntervalSinceDate:v2], v5 / 86400.0 <= 180.0)
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    unint64_t v6 = v4;
  }
  else
  {
    unint64_t v7 = ha_get_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v12 = 0;
      _os_log_impl(&dword_22F10E000, v7, OS_LOG_TYPE_DEFAULT, "generated a new unique ID for CoreAnalytics", v12, 2u);
    }

    unint64_t v8 = [MEMORY[0x263F08C38] UUID];
    unint64_t v6 = [v8 UUIDString];

    unint64_t v9 = [MEMORY[0x263EFFA40] standardUserDefaults];
    [v9 setValue:v0 forKeyPath:@"HADateOfPseudoDeviceIDGeneration"];

    unint64_t v10 = [MEMORY[0x263EFFA40] standardUserDefaults];
    [v10 setValue:v6 forKeyPath:@"HAPseudoDeviceID"];
  }
  return v6;
}

void sub_22F15B538(_Unwind_Exception *a1)
{
  double v5 = v4;

  _Unwind_Resume(a1);
}

void Nightingale::ngt_DayStreamProcOut::~ngt_DayStreamProcOut(Nightingale::ngt_DayStreamProcOut *this)
{
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  char v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void Nightingale::fwEstimatorOPK::getHistFwOpk(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(unsigned char *)a5 = 0;
  *(unsigned char *)(a5 + 4) = 0;
  *(unsigned char *)(a5 + 8) = 0;
  unint64_t v6 = (unsigned int *)(a5 + 8);
  *(unsigned char *)(a5 + 12) = 0;
  *(_DWORD *)(a5 + 16) = 3;
  *(unsigned char *)(a5 + 32) = 0;
  *(void *)(a5 + 20) = 0;
  *(_WORD *)(a5 + 28) = 0;
  *(int32x4_t *)(a5 + 36) = vdupq_n_s32(0x7FC00000u);
  *(unsigned char *)(a5 + 52) = 0;
  *(unsigned char *)(a5 + 56) = 0;
  *(unsigned char *)(a5 + 60) = 0;
  *(unsigned char *)(a5 + 64) = 0;
  *(unsigned char *)(a5 + 72) = 0;
  *(unsigned char *)(a5 + 96) = 0;
  *(unsigned char *)(a5 + 104) = 0;
  *(unsigned char *)(a5 + 128) = 0;
  *(unsigned char *)(a5 + 136) = 0;
  *(unsigned char *)(a5 + 140) = 0;
  *(void *)(a5 + 144) = 0x17FC00000;
  *(_DWORD *)(a5 + 152) = 0;
  *(_WORD *)(a5 + 156) = 0;
  if (*(unsigned char *)(a2 + 24) && *(unsigned char *)(a2 + 16) && (a4 & 0xFF00000000) != 0)
  {
    int v8 = *(_DWORD *)(a2 + 12);
    if (v8 <= (int)a4)
    {
      *(_DWORD *)a5 = v8 - 4;
      *(unsigned char *)(a5 + 4) = 1;
      *(_DWORD *)(a5 + 8) = v8 + 1;
      *(unsigned char *)(a5 + 12) = 1;
      *(_DWORD *)(a5 + 16) = 0;
      *(unsigned char *)(a5 + 29) = Nightingale::phaseFactorProcessor::suppressFWStEnd(a1, (unsigned int *)a5, v6, a3);
      int v10 = *(_DWORD *)a2;
      uint64_t v11 = *(void *)(a2 + 20);
      Nightingale::fwEstimatorBase::suppressHistFWOverCycleBoundary(a1, v10, v11, a5);
    }
    else
    {
      *(unsigned char *)(a5 + 28) = 1;
    }
  }
}

uint64_t Nightingale::fwEstimatorOPK::getOnGoingjDayFwEndOpk(uint64_t a1, int a2, uint64_t a3)
{
  if ((int)a3 - 4 < a2 || (a3 & 0xFF00000000) == 0) {
    return 0;
  }
  else {
    return (a3 + 1) | 0x100000000;
  }
}

uint64_t **HealthAlgorithms::PhaseCondenser::end_phase(uint64_t **a1, unsigned int a2, int a3)
{
  int v5 = a3 + 1;
  unint64_t v6 = &v5;
  uint64_t result = std::__tree<std::__value_type<int,std::array<short,9ul>>,std::__map_value_compare<int,std::__value_type<int,std::array<short,9ul>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::array<short,9ul>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, &v5, (uint64_t)&std::piecewise_construct, &v6);
  if (a2 >= 9) {
    abort();
  }
  --*((_WORD *)result + a2 + 16);
  return result;
}

void HealthAlgorithms::PhaseCondenser::phase_updates(HealthAlgorithms::PhaseCondenser *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<HealthAlgorithms::PhaseUpdate>::reserve((char **)a2, *((void *)this + 2));
  long long v33 = 0uLL;
  __int16 v34 = 0;
  int v4 = *(HealthAlgorithms::PhaseCondenser **)this;
  if (*(HealthAlgorithms::PhaseCondenser **)this != (HealthAlgorithms::PhaseCondenser *)((char *)this + 8))
  {
    do
    {
      uint64_t v5 = *(void *)(a2 + 8);
      if (*(void *)a2 == v5) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = *(void *)(v5 - 16);
      }
      uint64_t v7 = 0;
      uint64_t v32 = v6;
      long long v30 = *((_OWORD *)v4 + 2);
      __int16 v31 = *((_WORD *)v4 + 24);
      do
      {
        *(_WORD *)((char *)&v33 + v7) += *(_WORD *)((char *)&v30 + v7);
        v7 += 2;
      }
      while (v7 != 18);
      long long v27 = v33;
      __int16 v28 = v34;
      uint64_t v29 = HealthAlgorithms::PhaseCondenser::flatten_counted_phase_set((uint64_t)&v27);
      if ((std::__equal_aligned[abi:nn180100]<std::__bitset<1ul,9ul>,true,true>(&v32, 0, (uint64_t)&v32, 9u, &v29) & 1) == 0)
      {
        int v8 = *((_DWORD *)v4 + 7);
        uint64_t v9 = v29;
        unint64_t v11 = *(void *)(a2 + 8);
        unint64_t v10 = *(void *)(a2 + 16);
        if (v11 >= v10)
        {
          uint64_t v13 = (uint64_t)(v11 - *(void *)a2) >> 4;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 60) {
            abort();
          }
          uint64_t v15 = v10 - *(void *)a2;
          if (v15 >> 3 > v14) {
            unint64_t v14 = v15 >> 3;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16) {
            uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a2 + 16, v16);
          }
          else {
            uint64_t v17 = 0;
          }
          std::vector<int> v18 = &v17[16 * v13];
          *(void *)std::vector<int> v18 = v9;
          *((_DWORD *)v18 + 2) = v8;
          uint64_t v20 = *(char **)a2;
          uint64_t v19 = *(char **)(a2 + 8);
          uint64_t v21 = v18;
          if (v19 != *(char **)a2)
          {
            do
            {
              uint64_t v22 = *((void *)v19 - 2);
              v19 -= 16;
              int v23 = *((_DWORD *)v19 + 2);
              *((void *)v21 - 2) = v22;
              v21 -= 16;
              *((_DWORD *)v21 + 2) = v23;
            }
            while (v19 != v20);
            uint64_t v19 = *(char **)a2;
          }
          long long v12 = v18 + 16;
          *(void *)a2 = v21;
          *(void *)(a2 + 8) = v18 + 16;
          *(void *)(a2 + 16) = &v17[16 * v16];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(void *)unint64_t v11 = v29;
          *(_DWORD *)(v11 + 8) = v8;
          long long v12 = (char *)(v11 + 16);
        }
        *(void *)(a2 + 8) = v12;
      }
      uint64_t v24 = (HealthAlgorithms::PhaseCondenser *)*((void *)v4 + 1);
      if (v24)
      {
        do
        {
          unint64_t v25 = v24;
          uint64_t v24 = *(HealthAlgorithms::PhaseCondenser **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          unint64_t v25 = (HealthAlgorithms::PhaseCondenser *)*((void *)v4 + 2);
          BOOL v26 = *(void *)v25 == (void)v4;
          int v4 = v25;
        }
        while (!v26);
      }
      int v4 = v25;
    }
    while (v25 != (HealthAlgorithms::PhaseCondenser *)((char *)this + 8));
  }
}

void std::vector<HealthAlgorithms::PhaseUpdate>::reserve(char **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v3, a2);
    uint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[16 * v8];
    unint64_t v11 = *a1;
    unint64_t v10 = a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 2);
        v10 -= 16;
        int v14 = *((_DWORD *)v10 + 2);
        *((void *)v12 - 2) = v13;
        v12 -= 16;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      unint64_t v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t HealthAlgorithms::PhaseCondenser::flatten_counted_phase_set(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v4 = 0;
  do
  {
    if (*(__int16 *)(a1 + 2 * v2) >= 1) {
      Nightingale::PhaseSet::add(&v4, v2);
    }
    ++v2;
  }
  while (v2 != 9);
  return v4;
}

uint64_t std::__equal_aligned[abi:nn180100]<std::__bitset<1ul,9ul>,true,true>(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2)) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

void __65__period_lstm_loadContentsOfURL_configuration_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v3 = [[period_lstm alloc] initWithMLModel:v4];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void __56__period_lstm_predictionFromFeatures_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  if (v16)
  {
    id v5 = a3;
    unint64_t v6 = [period_lstmOutput alloc];
    uint64_t v7 = [v16 featureValueForName:@"out"];
    BOOL v8 = [v7 multiArrayValue];
    uint64_t v9 = [v16 featureValueForName:@"lstm_1_h_out"];
    unint64_t v10 = [v9 multiArrayValue];
    unint64_t v11 = [v16 featureValueForName:@"lstm_1_c_out"];
    long long v12 = [v11 multiArrayValue];
    uint64_t v13 = [(period_lstmOutput *)v6 initWithOut:v8 lstm_1_h_out:v10 lstm_1_c_out:v12];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void (**)(uint64_t, void, period_lstmOutput *))(v14 + 16);
    uint64_t v13 = a3;
    v15(v14, 0, v13);
  }
}

void __64__period_lstm_predictionFromFeatures_options_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  if (v16)
  {
    id v5 = a3;
    unint64_t v6 = [period_lstmOutput alloc];
    uint64_t v7 = [v16 featureValueForName:@"out"];
    BOOL v8 = [v7 multiArrayValue];
    uint64_t v9 = [v16 featureValueForName:@"lstm_1_h_out"];
    unint64_t v10 = [v9 multiArrayValue];
    unint64_t v11 = [v16 featureValueForName:@"lstm_1_c_out"];
    long long v12 = [v11 multiArrayValue];
    uint64_t v13 = [(period_lstmOutput *)v6 initWithOut:v8 lstm_1_h_out:v10 lstm_1_c_out:v12];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void (**)(uint64_t, void, period_lstmOutput *))(v14 + 16);
    uint64_t v13 = a3;
    v15(v14, 0, v13);
  }
}

void __72__model_period_10pct_loadContentsOfURL_configuration_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v3 = [[model_period_10pct alloc] initWithMLModel:v4];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void __63__model_period_10pct_predictionFromFeatures_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  if (v16)
  {
    id v5 = a3;
    unint64_t v6 = [model_period_10pctOutput alloc];
    uint64_t v7 = [v16 featureValueForName:@"out"];
    BOOL v8 = [v7 multiArrayValue];
    uint64_t v9 = [v16 featureValueForName:@"lstm_1_h_out"];
    unint64_t v10 = [v9 multiArrayValue];
    unint64_t v11 = [v16 featureValueForName:@"lstm_1_c_out"];
    long long v12 = [v11 multiArrayValue];
    uint64_t v13 = [(model_period_10pctOutput *)v6 initWithOut:v8 lstm_1_h_out:v10 lstm_1_c_out:v12];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void (**)(uint64_t, void, model_period_10pctOutput *))(v14 + 16);
    uint64_t v13 = a3;
    v15(v14, 0, v13);
  }
}

void __71__model_period_10pct_predictionFromFeatures_options_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  if (v16)
  {
    id v5 = a3;
    unint64_t v6 = [model_period_10pctOutput alloc];
    uint64_t v7 = [v16 featureValueForName:@"out"];
    BOOL v8 = [v7 multiArrayValue];
    uint64_t v9 = [v16 featureValueForName:@"lstm_1_h_out"];
    unint64_t v10 = [v9 multiArrayValue];
    unint64_t v11 = [v16 featureValueForName:@"lstm_1_c_out"];
    long long v12 = [v11 multiArrayValue];
    uint64_t v13 = [(model_period_10pctOutput *)v6 initWithOut:v8 lstm_1_h_out:v10 lstm_1_c_out:v12];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void (**)(uint64_t, void, model_period_10pctOutput *))(v14 + 16);
    uint64_t v13 = a3;
    v15(v14, 0, v13);
  }
}

void __65__fwEnddet_rf_loadContentsOfURL_configuration_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v3 = [[fwEnddet_rf alloc] initWithMLModel:v4];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void __56__fwEnddet_rf_predictionFromFeatures_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  if (v14)
  {
    id v5 = a3;
    unint64_t v6 = [fwEnddet_rfOutput alloc];
    uint64_t v7 = [v14 featureValueForName:@"classLabel"];
    uint64_t v8 = [v7 int64Value];
    uint64_t v9 = [v14 featureValueForName:@"classProbability"];
    unint64_t v10 = [v9 dictionaryValue];
    unint64_t v11 = [(fwEnddet_rfOutput *)v6 initWithClassLabel:v8 classProbability:v10];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void (**)(uint64_t, void, fwEnddet_rfOutput *))(v12 + 16);
    unint64_t v11 = a3;
    v13(v12, 0, v11);
  }
}

void __64__fwEnddet_rf_predictionFromFeatures_options_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  if (v14)
  {
    id v5 = a3;
    unint64_t v6 = [fwEnddet_rfOutput alloc];
    uint64_t v7 = [v14 featureValueForName:@"classLabel"];
    uint64_t v8 = [v7 int64Value];
    uint64_t v9 = [v14 featureValueForName:@"classProbability"];
    unint64_t v10 = [v9 dictionaryValue];
    unint64_t v11 = [(fwEnddet_rfOutput *)v6 initWithClassLabel:v8 classProbability:v10];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void (**)(uint64_t, void, fwEnddet_rfOutput *))(v12 + 16);
    unint64_t v11 = a3;
    v13(v12, 0, v11);
  }
}

void __67__fwEnddet_lstm_loadContentsOfURL_configuration_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v3 = [[fwEnddet_lstm alloc] initWithMLModel:v4];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void __58__fwEnddet_lstm_predictionFromFeatures_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  if (v16)
  {
    id v5 = a3;
    unint64_t v6 = [fwEnddet_lstmOutput alloc];
    uint64_t v7 = [v16 featureValueForName:@"out"];
    uint64_t v8 = [v7 multiArrayValue];
    uint64_t v9 = [v16 featureValueForName:@"lstm_1_h_out"];
    unint64_t v10 = [v9 multiArrayValue];
    unint64_t v11 = [v16 featureValueForName:@"lstm_1_c_out"];
    uint64_t v12 = [v11 multiArrayValue];
    uint64_t v13 = [(fwEnddet_lstmOutput *)v6 initWithOut:v8 lstm_1_h_out:v10 lstm_1_c_out:v12];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void (**)(uint64_t, void, fwEnddet_lstmOutput *))(v14 + 16);
    uint64_t v13 = a3;
    v15(v14, 0, v13);
  }
}

void __66__fwEnddet_lstm_predictionFromFeatures_options_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  if (v16)
  {
    id v5 = a3;
    unint64_t v6 = [fwEnddet_lstmOutput alloc];
    uint64_t v7 = [v16 featureValueForName:@"out"];
    uint64_t v8 = [v7 multiArrayValue];
    uint64_t v9 = [v16 featureValueForName:@"lstm_1_h_out"];
    unint64_t v10 = [v9 multiArrayValue];
    unint64_t v11 = [v16 featureValueForName:@"lstm_1_c_out"];
    uint64_t v12 = [v11 multiArrayValue];
    uint64_t v13 = [(fwEnddet_lstmOutput *)v6 initWithOut:v8 lstm_1_h_out:v10 lstm_1_c_out:v12];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void (**)(uint64_t, void, fwEnddet_lstmOutput *))(v14 + 16);
    uint64_t v13 = a3;
    v15(v14, 0, v13);
  }
}

void __71__model_fwEnd_10pct_loadContentsOfURL_configuration_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v3 = [[model_fwEnd_10pct alloc] initWithMLModel:v4];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void __62__model_fwEnd_10pct_predictionFromFeatures_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  if (v16)
  {
    id v5 = a3;
    unint64_t v6 = [model_fwEnd_10pctOutput alloc];
    uint64_t v7 = [v16 featureValueForName:@"out"];
    uint64_t v8 = [v7 multiArrayValue];
    uint64_t v9 = [v16 featureValueForName:@"lstm_1_h_out"];
    unint64_t v10 = [v9 multiArrayValue];
    unint64_t v11 = [v16 featureValueForName:@"lstm_1_c_out"];
    uint64_t v12 = [v11 multiArrayValue];
    uint64_t v13 = [(model_fwEnd_10pctOutput *)v6 initWithOut:v8 lstm_1_h_out:v10 lstm_1_c_out:v12];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void (**)(uint64_t, void, model_fwEnd_10pctOutput *))(v14 + 16);
    uint64_t v13 = a3;
    v15(v14, 0, v13);
  }
}

void __70__model_fwEnd_10pct_predictionFromFeatures_options_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  if (v16)
  {
    id v5 = a3;
    unint64_t v6 = [model_fwEnd_10pctOutput alloc];
    uint64_t v7 = [v16 featureValueForName:@"out"];
    uint64_t v8 = [v7 multiArrayValue];
    uint64_t v9 = [v16 featureValueForName:@"lstm_1_h_out"];
    unint64_t v10 = [v9 multiArrayValue];
    unint64_t v11 = [v16 featureValueForName:@"lstm_1_c_out"];
    uint64_t v12 = [v11 multiArrayValue];
    uint64_t v13 = [(model_fwEnd_10pctOutput *)v6 initWithOut:v8 lstm_1_h_out:v10 lstm_1_c_out:v12];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void (**)(uint64_t, void, model_fwEnd_10pctOutput *))(v14 + 16);
    uint64_t v13 = a3;
    v15(v14, 0, v13);
  }
}

void Nightingale::ngt_DayStreamProcessor::analyze()
{
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, " \"dummy_key\": 0\n}\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "}\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "\"Day Stream Processor debug message\":\n", v2, v3, v4, v5, v6);
}

void Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc()
{
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, ",\n\n", v2, v3, v4, v5, v6);
}

{
  __int16 v0;
  int v1;
  os_log_t v2;
  uint8_t v3[20];
  __int16 v4;
  int v5;
  uint64_t v6;

  uint8_t v6 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_1();
  uint64_t v4 = v0;
  uint64_t v5 = v1;
  _os_log_debug_impl(&dword_22F10E000, v2, OS_LOG_TYPE_DEBUG, "\t\"URCycleLen\": %d, \"jDayURCycleLen\": %d, \"URMenstLen\": %d, \"jDayURMenstLen\": %d}", v3, 0x1Au);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"m_vJDayPhasePair\": [],\n\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  ],\n\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"m_vJDayPhasePair\": [\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"m_vDailyData\": [],\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"m_vDailyData\": [\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "{\n", v2, v3, v4, v5, v6);
}

void Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc(uint64_t a1, NSObject *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  double v2 = -1.0;
  if (*(unsigned char *)(a1 + 52)) {
    double v2 = *(float *)(a1 + 48);
  }
  if (*(unsigned char *)(a1 + 36)) {
    int v3 = *(_DWORD *)(a1 + 32);
  }
  else {
    int v3 = -1;
  }
  if (*(unsigned char *)(a1 + 44)) {
    int v4 = *(_DWORD *)(a1 + 40);
  }
  else {
    int v4 = -1;
  }
  int v5 = 134218496;
  double v6 = v2;
  __int16 v7 = 1024;
  int v8 = v3;
  __int16 v9 = 1024;
  int v10 = v4;
  _os_log_debug_impl(&dword_22F10E000, a2, OS_LOG_TYPE_DEBUG, "  \"mConfig\": {\"age\": %5.2f, \"jDayCurrentDay\": %d, \"jDayMostRecentMenstrualFlowUpdated\": %d, ", (uint8_t *)&v5, 0x18u);
}

void Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc(void *a1, uint64_t a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(*a1 - 4);
  int v4 = *(unsigned __int16 *)(*(void *)(a2 + 32) - 8);
  v5[0] = 67109376;
  v5[1] = v3;
  __int16 v6 = 1024;
  int v7 = v4;
  _os_log_debug_impl(&dword_22F10E000, log, OS_LOG_TYPE_DEBUG, "\t{\"jDay\": %d, \"phase\": %d}", (uint8_t *)v5, 0xEu);
}

void Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc(os_log_t log)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v1[0] = 67109376;
  v1[1] = -1;
  __int16 v2 = 2048;
  unint64_t v3 = 0xBFF0000000000000;
  _os_log_debug_impl(&dword_22F10E000, log, OS_LOG_TYPE_DEBUG, "\"wTmp\": {\"watchID\": %d, \"tp\": %5.2f}}},\n", (uint8_t *)v1, 0x12u);
}

void Nightingale::ngt_DayStreamProcessor::printInputDayStreamProc(unsigned __int8 a1, NSObject *a2, float a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 2048;
  double v5 = a3;
  _os_log_debug_impl(&dword_22F10E000, a2, OS_LOG_TYPE_DEBUG, "\"wTmp\": {\"watchID\": %d, \"tp\": %5.2f}}},\n", (uint8_t *)v3, 0x12u);
}

void Nightingale::ngt_DayStreamProcessor::printDeviations()
{
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "\n\t} \n\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5(&dword_22F10E000, v0, v1, "\"spottingOut\": {\"exist\": %d, \"jDayAnalysisWinStart\": %d, \"jDayAnalysisWinEnd\": %d},\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5(&dword_22F10E000, v0, v1, "\"prolongOut\": {\"exist\": %d, \"jDayAnalysisWinStart\": %d, \"jDayAnalysisWinEnd\": %d},\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5(&dword_22F10E000, v0, v1, "\"infreqOut\": {\"exist\": %d, \"jDayAnalysisWinStart\": %d, \"jDayAnalysisWinEnd\": %d},\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5(&dword_22F10E000, v0, v1, "\"irregOut\": {\"exist\": %d, \"jDayAnalysisWinStart\": %d, \"jDayAnalysisWinEnd\": %d},\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"deviations\": {\n", v2, v3, v4, v5, v6);
}

void HealthAlgorithms::deviation(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_22F10E000, log, OS_LOG_TYPE_FAULT, "deviation exists but jDayAnalysisWinStart and/or jDayAnalysisWinEnd has no value. Skip surfacing it to HSW.", v1, 2u);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant()
{
  __assert_rtn("assert_invariant", "json.hpp", 1220, "m_type != value_t::object or m_value.object != nullptr");
}

{
  __assert_rtn("assert_invariant", "json.hpp", 1221, "m_type != value_t::array or m_value.array != nullptr");
}

{
  __assert_rtn("assert_invariant", "json.hpp", 1222, "m_type != value_t::string or m_value.string != nullptr");
}

{
  __assert_rtn("assert_invariant", "json.hpp", 1223, "m_type != value_t::binary or m_value.binary != nullptr");
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::begin()
{
  __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin()
{
  __assert_rtn("set_begin", "iter_impl.hpp", 174, "m_object != nullptr");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump()
{
}

{
  __assert_rtn("dump", "serializer.hpp", 138, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 139, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 166, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 167, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 208, "not val.m_value.array->empty()");
}

{
  __assert_rtn("dump", "serializer.hpp", 229, "not val.m_value.array->empty()");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped()
{
}

{
  __assert_rtn("dump_escaped", "serializer.hpp", 562, "false");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>()
{
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode()
{
}

void nlohmann::detail::to_chars<double>()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1082, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1092, "len <= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1100, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1101, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1064, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2<double>()
{
}

{
  __assert_rtn("grisu2", "to_chars.hpp", 889, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::format_buffer()
{
}

{
  __assert_rtn("format_buffer", "to_chars.hpp", 980, "max_exp > 0");
}

{
  __assert_rtn("append_exponent", "to_chars.hpp", 926, "e > -1000");
}

{
  __assert_rtn("append_exponent", "to_chars.hpp", 927, "e < 1000");
}

{
  __assert_rtn("format_buffer", "to_chars.hpp", 1006, "k > n");
}

void nlohmann::detail::dtoa_impl::compute_boundaries<double>()
{
}

{
  __assert_rtn("compute_boundaries", "to_chars.hpp", 185, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2()
{
  __assert_rtn("grisu2", "to_chars.hpp", 828, "m_plus.e == v.e");
}

{
  __assert_rtn("grisu2", "to_chars.hpp", 827, "m_plus.e == m_minus.e");
}

void nlohmann::detail::dtoa_impl::diyfp::normalize()
{
  __assert_rtn("normalize", "to_chars.hpp", 143, "x.f != 0");
}

void nlohmann::detail::dtoa_impl::diyfp::normalize_to()
{
  __assert_rtn("normalize_to", "to_chars.hpp", 162, "delta >= 0");
}

{
  __assert_rtn("normalize_to", "to_chars.hpp", 163, "((x.f << delta) >> delta) == x.f");
}

void nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 466, "e >= -1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 467, "e <= 1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 472, "index >= 0");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 476, "kAlpha <= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 477, "kGamma >= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 473, "static_cast<std::size_t>(index) < kCachedPowers.size()");
}

void nlohmann::detail::dtoa_impl::grisu2_digit_gen()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 601, "M_plus.e >= kAlpha");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 602, "M_plus.e <= kGamma");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 623, "p1 > 0");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 659, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 757, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 766, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 746, "p2 > delta");
}

void nlohmann::detail::dtoa_impl::diyfp::sub()
{
  __assert_rtn("sub", "to_chars.hpp", 67, "x.f >= y.f");
}

{
  __assert_rtn("sub", "to_chars.hpp", 66, "x.e == y.e");
}

void nlohmann::detail::dtoa_impl::grisu2_round()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 545, "len >= 1");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 546, "dist <= delta");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 547, "rest <= delta");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 548, "ten_k > 0");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 573, "buf[len - 1] != '0'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_decimal_point()
{
  __assert_rtn("get_decimal_point", "lexer.hpp", 136, "loc != nullptr");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_literal()
{
  __assert_rtn("scan_literal", "lexer.hpp", 1222, "char_traits<char_type>::to_char_type(current) == literal_text[0]");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_string()
{
  __assert_rtn("scan_string", "lexer.hpp", 370, "0x00 <= codepoint and codepoint <= 0x10FFFF");
}

{
  __assert_rtn("scan_string", "lexer.hpp", 250, "current == '\\\"'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::scan_number()
{
}

{
  __assert_rtn("scan_number", "lexer.hpp", 1208, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "lexer.hpp", 1175, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "lexer.hpp", 1191, "endptr == token_buffer.data() + token_buffer.size()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::unget()
{
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::get_codepoint()
{
  __assert_rtn("get_codepoint", "lexer.hpp", 188, "0x0000 <= codepoint and codepoint <= 0xFFFF");
}

{
  __assert_rtn("get_codepoint", "lexer.hpp", 162, "current == 'u'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<char const*>>::next_byte_in_range()
{
  __assert_rtn("next_byte_in_range", "lexer.hpp", 209, "ranges.size() == 2 or ranges.size() == 4 or ranges.size() == 6");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error()
{
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error()
{
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object()
{
}

{
  __assert_rtn("end_object", "json_sax.hpp", 451, "not keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array()
{
}

{
  __assert_rtn("end_array", "json_sax.hpp", 503, "not keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>()
{
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->()
{
  __assert_rtn("operator->", "iter_impl.hpp", 279, "m_object != nullptr");
}

{
  __assert_rtn("operator->", "iter_impl.hpp", 285, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator->", "iter_impl.hpp", 291, "m_it.array_iterator != m_object->m_value.array->end()");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++()
{
  __assert_rtn("operator++", "iter_impl.hpp", 324, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==()
{
  __assert_rtn("operator==", "iter_impl.hpp", 405, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end()
{
  __assert_rtn("set_end", "iter_impl.hpp", 211, "m_object != nullptr");
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>()
{
}

{
  __assert_rtn("handle_value", "json_sax.hpp", 321, "object_element");
}

void Nightingale::uiLogProcessor::genPeriodSlide(void *a1)
{
  OUTLINED_FUNCTION_6(a1, *MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_7(&dword_22F10E000, v1, v2, "%3.1f],\n\n", v3);
}

{
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[24];

  OUTLINED_FUNCTION_6(a1, *MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_7(&dword_22F10E000, v1, v2, "%3.1f],\n", v3);
}

void Nightingale::uiLogProcessor::genPeriodSlide()
{
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"periodSlideAftOutlierRm\": [", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"periodSlideBfrOutlierRm\": [", v2, v3, v4, v5, v6);
}

void Nightingale::uiLogProcessor::genCycleSlide()
{
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "],\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"cycleSlideAftOutlierRm\": [", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"cycleSlideBfrOutlierRm\": [", v2, v3, v4, v5, v6);
}

void Nightingale::uiLogProcessor::process()
{
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "]\n },\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "%d]\n\t},\n\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "\t\"output_isDeterminant\": [", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "%d],\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "\t\"output_jDayPerEnd\": [", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "%d],\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "\t\"output_jDayPerStart\": [", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "%d], \n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "\t\"input_flows\": [", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"extract_periods\": {\n\t\"input_days\": [", v2, v3, v4, v5, v6);
}

void Nightingale::uiLogProcessor::print_anUILog()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"inPeriodNow\": %d},\n\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDayEndLastCCChunk\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDayStartLastCCChunk\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDayNullPoint\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDay1stOPKAftLastPeriodStart\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDayLastNoFlowAftLastPeriodStart\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDay2ndToLastPeriodStart\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDayLastPeriodStart\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDayFirstOPK\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDayLastBleeding\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDayLastFlow\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDayLastNoFlow\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDayLastLog\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDay1stFlow\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "\"jDay1stLog\": %d, ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"anUILog.specialJDays\": {", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "], \n\n", v2, v3, v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  double *v2;
  uint64_t v3;
  float *v4;
  float v5;
  uint64_t v6;
  uint8_t *v7;
  NSObject *v8;

  OUTLINED_FUNCTION_8();
  uint64_t v5 = -1.0;
  if (*(unsigned char *)(v1 + 60)) {
    uint64_t v5 = *(float *)(v1 + 56);
  }
  OUTLINED_FUNCTION_10(v5, 3.852e-34, v0, v1, v2, v3, v4);
  OUTLINED_FUNCTION_7(&dword_22F10E000, v8, v6, "\"periodSlideVar\": %f, ", v7);
}

{
  uint64_t v0;
  uint64_t v1;
  double *v2;
  uint64_t v3;
  float *v4;
  float v5;
  uint64_t v6;
  uint8_t *v7;
  NSObject *v8;

  OUTLINED_FUNCTION_8();
  uint64_t v5 = -1.0;
  if (*(unsigned char *)(v1 + 52)) {
    uint64_t v5 = *(float *)(v1 + 48);
  }
  OUTLINED_FUNCTION_10(v5, 3.852e-34, v0, v1, v2, v3, v4);
  OUTLINED_FUNCTION_7(&dword_22F10E000, v8, v6, "\"periodSlideMean\": %f, ", v7);
}

{
  uint64_t v0;
  uint64_t v1;
  double *v2;
  uint64_t v3;
  float *v4;
  float v5;
  uint64_t v6;
  uint8_t *v7;
  NSObject *v8;

  OUTLINED_FUNCTION_8();
  uint64_t v5 = -1.0;
  if (*(unsigned char *)(v1 + 44)) {
    uint64_t v5 = *(float *)(v1 + 40);
  }
  OUTLINED_FUNCTION_10(v5, 3.852e-34, v0, v1, v2, v3, v4);
  OUTLINED_FUNCTION_7(&dword_22F10E000, v8, v6, "\"cycleSlideVar\": %f, ", v7);
}

{
  uint64_t v0;
  uint64_t v1;
  double *v2;
  uint64_t v3;
  float *v4;
  float v5;
  uint64_t v6;
  uint8_t *v7;
  NSObject *v8;

  OUTLINED_FUNCTION_8();
  uint64_t v5 = -1.0;
  if (*(unsigned char *)(v1 + 36)) {
    uint64_t v5 = *(float *)(v1 + 32);
  }
  OUTLINED_FUNCTION_10(v5, 3.852e-34, v0, v1, v2, v3, v4);
  OUTLINED_FUNCTION_7(&dword_22F10E000, v8, v6, "\"cycleSlideMean\": %f, ", v7);
}

{
  uint64_t v0;
  int *v1;
  uint8_t *v2;
  NSObject *v3;
  int v4;

  OUTLINED_FUNCTION_8();
  if (*(unsigned char *)(v0 + 16)) {
    uint64_t v4 = *(_DWORD *)(v0 + 12);
  }
  else {
    uint64_t v4 = -1;
  }
  *(_DWORD *)uint64_t v2 = 67109120;
  *uint64_t v1 = v4;
  OUTLINED_FUNCTION_11(&dword_22F10E000, "\"jDayOPKPostive\": %d, ", v2, v3);
}

{
  uint64_t v0;
  int *v1;
  uint8_t *v2;
  NSObject *v3;
  int v4;

  OUTLINED_FUNCTION_8();
  if (*(unsigned char *)(v0 + 24)) {
    uint64_t v4 = *(_DWORD *)(v0 + 20);
  }
  else {
    uint64_t v4 = -1;
  }
  *(_DWORD *)uint64_t v2 = 67109120;
  *uint64_t v1 = v4;
  OUTLINED_FUNCTION_11(&dword_22F10E000, "\"jDayCycleEnd\": %d, ", v2, v3);
}

{
  uint64_t v0;
  int *v1;
  uint8_t *v2;
  NSObject *v3;
  int v4;

  OUTLINED_FUNCTION_8();
  if (*(unsigned char *)(v0 + 8)) {
    uint64_t v4 = *(_DWORD *)(v0 + 4);
  }
  else {
    uint64_t v4 = -1;
  }
  *(_DWORD *)uint64_t v2 = 67109120;
  *uint64_t v1 = v4;
  OUTLINED_FUNCTION_11(&dword_22F10E000, "\"jDayPeriodEnd\": %d, ", v2, v3);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"anUILog.vCycleInfo\": [\n", v2, v3, v4, v5, v6);
}

void Nightingale::uiLogProcessor::print_anUILog(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_9(a1, a2);
  OUTLINED_FUNCTION_2_0(&dword_22F10E000, v2, (uint64_t)v2, ",\n", v3);
}

{
  NSObject *v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_9(a1, a2);
  OUTLINED_FUNCTION_2_0(&dword_22F10E000, v2, (uint64_t)v2, "]} ", v3);
}

{
  NSObject *v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_9(a1, a2);
  OUTLINED_FUNCTION_2_0(&dword_22F10E000, v2, (uint64_t)v2, ", ", v3);
}

{
  NSObject *v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_9(a1, a2);
  OUTLINED_FUNCTION_2_0(&dword_22F10E000, v2, (uint64_t)v2, "\"phases\": [", v3);
}

void Nightingale::phaseFactorProcessor::ccMenstCycleLen_handling(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl(&dword_22F10E000, a2, OS_LOG_TYPE_DEBUG, "\t\"ccMenstCycleLen_handling\": {\"jDayLastEndOfCC\": %d}\n\n)", (uint8_t *)v2, 8u);
}

void Nightingale::ngtProjector::isFinite_aProj(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_22F10E000, log, OS_LOG_TYPE_FAULT, "endProb contains values that are not finite.\n", v1, 2u);
}

{
  uint8_t v1[16];

  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_22F10E000, log, OS_LOG_TYPE_FAULT, "startProb contains values that are not finite.\n", v1, 2u);
}

void Nightingale::ngtProjector::isFinite_aGrad()
{
  OUTLINED_FUNCTION_2_1(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0(&dword_22F10E000, v0, v1, "lowRangeEnd (%f) is not finite.\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_1(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0(&dword_22F10E000, v0, v1, "lowRangeStart (%f) is not finite.\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_1(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0(&dword_22F10E000, v0, v1, "stddev (%f) is not finite.\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_1(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0(&dword_22F10E000, v0, v1, "mean (%f) is not finite.\n", v2, v3, v4, v5, v6);
}

void Nightingale::wristTemperatureInputAcquisition::extractWTmp_removeOutlier_withBuf(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_22F10E000, log, OS_LOG_TYPE_FAULT, "vPreSamples not empty when vLastValidSamples are empty!", v1, 2u);
}

void Nightingale::wristTemperatureInputAcquisition::getLastValidSamplesFromRawTmp(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_22F10E000, log, OS_LOG_TYPE_FAULT, "size of lastValidSamplesFromRawTmp is less than that of rawTmp.vTmp!", v1, 2u);
}

void Nightingale::ngt_HistoricalAnalyzer::analyze()
{
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, " \"dummy_key\":0 \n},\n\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "]},\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "%d]},\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "\t\t\t\"FailureCode\": [", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "%d],\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "\t\t\t\"algUsed\": [", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "%d],\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "\t\t\t\"fwEnd\": [", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_22F10E000, v0, v1, "%d],\n", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "  \"CycleProcessHistOut\": {\"fwStart\": [", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_0(&dword_22F10E000, v0, v1, "\"Historical Analyzer debug message\": {\n", v2, v3, v4, v5, v6);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x270F98200](this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983C0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x270F98BE0]();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x270F98BE8]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x270EDA090]();
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x270EDA738](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x270EDA748](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x270EDA760](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x270EDA768](name, out_token);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x270EDA798](*(void *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x270EDB6A8](a1, a2);
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6E8](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB718](__str, __endptr, *(void *)&__base);
}

long double tgamma(long double __x)
{
  MEMORY[0x270EDB8E0](__x);
  return result;
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x270EDBBE8](__s, *(void *)&__c, __n);
}