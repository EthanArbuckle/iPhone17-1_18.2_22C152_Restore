uint64_t sub_1000040F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = qword_100101CD0;
  qword_100101CD0 = a1;
  qword_100101CC0 = a2;
  return v2;
}

uint64_t sub_10000411C()
{
  return qword_100101CD0;
}

uint64_t sub_100004130()
{
  return (*(uint64_t (**)(void))(qword_100101CD0 + 304))();
}

uint64_t sub_100004140()
{
  return 0;
}

uint64_t sub_100004148(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1100);
}

uint64_t sub_100004150(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1996);
}

uint64_t sub_100004158(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1992);
}

uint64_t sub_100004160(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1856);
}

uint64_t sub_100004168(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1996) = a2;
  *(_DWORD *)(result + 1992) = 1;
  return result;
}

uint64_t sub_100004178(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1028);
}

uint64_t sub_100004180(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1096);
}

uint64_t sub_100004188(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 2012) || *(_DWORD *)(a1 + 1072) <= (signed int)a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    v2 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
    int v4 = *v2;
    int v3 = v2[1];
  }
  else
  {
    v6 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    int v4 = *v6;
    int v3 = v6[1];
  }
  return (v3 - v4);
}

uint64_t sub_1000041DC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 1388);
}

uint64_t sub_1000041E4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 1390);
}

uint64_t sub_1000041EC(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 == v4) {
    return *(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v5;
  }
  if (*(_DWORD *)(a1 + 2012))
  {
    uint64_t v6 = *(int *)(a1 + 1120) * (uint64_t)(int)a2;
    if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
      return *(void *)(a1 + 16) + v6;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 1176)) {
      int v8 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    }
    else {
      int v8 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    }
    uint64_t v6 = *(int *)(a1 + 1120) * (uint64_t)(v8 + a3);
    if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
      return *(void *)(a1 + 16) + v6;
    }
  }
  return *(void *)(a1 + 96) + v6;
}

uint64_t sub_100004278(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3 = a2;
  int v4 = *(_DWORD *)(a1 + 1072);
  if (*(_DWORD *)(a1 + 1108))
  {
    BOOL v5 = __OFSUB__(a2, v4);
    int v6 = a2 - v4;
    if (v6 < 0 == v5) {
      return *(void *)(a1 + 792) + 12 * v6;
    }
    if (*(_DWORD *)(a1 + 2012))
    {
      uint64_t v7 = (int)(3 * a2);
      if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
        return *(void *)(a1 + 136) + 4 * v7;
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 1176)) {
        int v10 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      }
      else {
        int v10 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      }
      uint64_t v7 = 3 * (v10 + a3);
      if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
        return *(void *)(a1 + 136) + 4 * v7;
      }
    }
    return *(void *)(a1 + 144) + 4 * v7;
  }
  else if ((int)a2 >= v4)
  {
    return *(void *)(a1 + 792) + 4 * (int)(6 * (a2 - v4));
  }
  else
  {
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        int v8 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      }
      else {
        int v8 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      }
      unsigned int v3 = v8 + a3;
    }
    int v11 = *(_DWORD *)(a1 + 1128) * v3;
    v12 = (void *)(a1 + 136);
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2) {
      v12 = (void *)(a1 + 144);
    }
    return *v12 + 4 * v11;
  }
}

uint64_t sub_100004380(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 1120);
  if ((int)v3 >= 1)
  {
    int v4 = 0;
    for (uint64_t i = 0; i != v3; ++i)
    {
      *(unsigned char *)(a3 + i) = *(_DWORD *)(a2 + (i & 0xFFFFFFFC)) >> (v4 & 0x18);
      v4 += 8;
    }
  }
  return result;
}

uint64_t sub_1000043BC(uint64_t result, unsigned int a2, int a3, unint64_t *a4)
{
  if (*(_DWORD *)(result + 1032))
  {
    int v4 = *(_DWORD *)(result + 1072);
    BOOL v5 = __OFSUB__(a2, v4);
    int v6 = a2 - v4;
    if (!*(_DWORD *)(result + 1108))
    {
      if (v6 < 0 != v5)
      {
        unsigned int v11 = a2;
        if (!*(_DWORD *)(result + 2012))
        {
          if (*(_DWORD *)(result + 1176)) {
            int v12 = *(_DWORD *)(*(void *)(result + 1160) + 4 * a2);
          }
          else {
            int v12 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2 * a2);
          }
          unsigned int v11 = v12 + a3;
        }
        int v14 = *(_DWORD *)(result + 1128) * v11;
        v18 = (uint64_t *)(result + 136);
        if (*(_DWORD *)(result + 1080) <= (signed int)a2) {
          v18 = (uint64_t *)(result + 144);
        }
      }
      else
      {
        v18 = (uint64_t *)(result + 792);
        int v14 = 6 * v6;
      }
      uint64_t v13 = *v18;
      goto LABEL_54;
    }
    if (v6 < 0 == v5)
    {
      uint64_t v13 = *(void *)(result + 792);
      int v14 = 3 * v6;
LABEL_54:
      uint64_t v8 = v13 + 4 * v14;
LABEL_55:
      unint64_t v21 = *(void *)(result + 1520);
      uint64_t v35 = *(unsigned int *)(result + 1120);
      if ((int)v35 >= 1)
      {
        int v36 = 0;
        for (uint64_t i = 0; i != v35; ++i)
        {
          *(unsigned char *)(v21 + i) = *(_DWORD *)(v8 + (i & 0xFFFFFFFC)) >> (v36 & 0x18);
          v36 += 8;
        }
        unint64_t v21 = *(void *)(result + 1520);
      }
      goto LABEL_59;
    }
    if (*(_DWORD *)(result + 2012))
    {
      uint64_t v7 = (int)(3 * a2);
      if (*(_DWORD *)(result + 1080) > (signed int)a2)
      {
LABEL_7:
        uint64_t v8 = *(void *)(result + 136) + 4 * v7;
        goto LABEL_55;
      }
    }
    else
    {
      if (*(_DWORD *)(result + 1176)) {
        int v28 = *(_DWORD *)(*(void *)(result + 1160) + 4 * a2);
      }
      else {
        int v28 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2 * a2);
      }
      uint64_t v7 = 3 * (v28 + a3);
      if (*(_DWORD *)(result + 1080) > (signed int)a2) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = *(void *)(result + 144) + 4 * v7;
    goto LABEL_55;
  }
  if (*(_DWORD *)(result + 1036))
  {
    int v9 = *(_DWORD *)(result + 1296);
    if (v9 != 3)
    {
      if (v9 != 4)
      {
        unsigned int v10 = 0;
        goto LABEL_23;
      }
      if (!*(_DWORD *)(result + 2012))
      {
        if (*(_DWORD *)(result + 1176)) {
          int v34 = *(_DWORD *)(*(void *)(result + 1160) + 4 * a2);
        }
        else {
          int v34 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2 * a2);
        }
        unsigned int v10 = v34 + a3;
        goto LABEL_23;
      }
    }
    unsigned int v10 = a2;
LABEL_23:
    uint64_t v19 = *(unsigned int *)(result + 1104);
    uint64_t v20 = *(void *)(result + 1536);
    unint64_t v21 = *(void *)(result + 1528);
    uint64_t v22 = *(void *)(result + 1512);
    uint64_t v23 = *(unsigned int *)(result + 1120);
    if ((int)v23 >= 1)
    {
      int v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = *(void *)(result + 1232) + 4 * (int)(*(_DWORD *)(result + 1128) * v10);
      do
      {
        *(unsigned char *)(v22 + v25) = *(_DWORD *)(v26 + (v25 & 0xFFFFFFFC)) >> (v24 & 0x18);
        ++v25;
        v24 += 8;
      }
      while (v23 != v25);
      uint64_t v22 = *(void *)(result + 1512);
    }
    if (!*(_DWORD *)(result + 2012))
    {
      if (*(_DWORD *)(result + 1176)) {
        int v27 = *(_DWORD *)(*(void *)(result + 1160) + 4 * a2);
      }
      else {
        int v27 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2 * a2);
      }
      a2 = v27 + a3;
    }
    int v29 = *(_DWORD *)(result + 1132);
    if (v29 >= 1)
    {
      uint64_t v30 = 0;
      uint64_t v31 = *(void *)(result + 192) + 4 * (int)(v29 * a2) + 4;
      v32 = (_WORD *)(v20 + 4);
      do
      {
        *(v32 - 2) = *(_DWORD *)(v31 - 4);
        _WORD *v32 = *(_WORD *)(v31 - 2);
        *(v32 - 1) = *(_DWORD *)v31;
        v32[1] = *(_WORD *)(v31 + 2);
        v30 += 2;
        v31 += 8;
        v32 += 4;
      }
      while (v30 < *(int *)(result + 1132));
    }
    if ((int)v19 >= 1)
    {
      for (uint64_t j = 0; j != v19; ++j)
        *(unsigned char *)(v21 + j) = (*(unsigned __int8 *)(v22 + j) + 2 * *(unsigned __int16 *)(v20 + 2 * j))
                            / (2
                             * *(unsigned __int8 *)(v22 + j));
    }
LABEL_59:
    if (*(_DWORD *)(result + 1108)) {
      goto LABEL_60;
    }
LABEL_85:
    *a4 = v21;
    return result;
  }
  int v15 = *(_DWORD *)(result + 1072);
  if ((int)a2 >= v15)
  {
    unint64_t v21 = *(void *)(result + 784) + *(int *)(result + 1120) * (uint64_t)(int)(a2 - v15);
    if (*(_DWORD *)(result + 1108)) {
      goto LABEL_60;
    }
    goto LABEL_85;
  }
  unsigned int v16 = a2;
  if (!*(_DWORD *)(result + 2012))
  {
    if (*(_DWORD *)(result + 1176)) {
      int v17 = *(_DWORD *)(*(void *)(result + 1160) + 4 * a2);
    }
    else {
      int v17 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2 * a2);
    }
    unsigned int v16 = v17 + a3;
  }
  uint64_t v57 = *(int *)(result + 1120) * (uint64_t)(int)v16;
  if (*(_DWORD *)(result + 1080) <= (signed int)a2)
  {
    unint64_t v21 = *(void *)(result + 96) + v57;
    if (!*(_DWORD *)(result + 1108)) {
      goto LABEL_85;
    }
  }
  else
  {
    unint64_t v21 = *(void *)(result + 16) + v57;
    if (!*(_DWORD *)(result + 1108)) {
      goto LABEL_85;
    }
  }
LABEL_60:
  v38 = *(unsigned char **)(result + 1512);
  *a4 = (unint64_t)v38;
  uint64_t v39 = *(unsigned int *)(result + 1120);
  if ((int)v39 < 1) {
    return result;
  }
  if (v39 < 8
    || (unint64_t)v38 < v21 + v39 && v21 < (unint64_t)&v38[2 * (v39 - 1) + 2])
  {
    v40 = v38;
    int v41 = *(_DWORD *)(result + 1120);
    v42 = (unsigned __int8 *)v21;
    goto LABEL_65;
  }
  if (v39 >= 0x20)
  {
    uint64_t v45 = v39 & 0x7FFFFFE0;
    v46 = (int8x16_t *)(v21 + 16);
    v47 = v38 + 32;
    v48.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v48.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    uint64_t v49 = v39 & 0xFFFFFFE0;
    do
    {
      v50 = v47 - 32;
      int8x16_t v51 = v46[-1];
      int8x16_t v52 = *v46;
      v59.val[0] = vandq_s8(v51, v48);
      v59.val[1] = (int8x16_t)vshrq_n_u8((uint8x16_t)v51, 4uLL);
      vst2q_s8(v50, v59);
      v59.val[0] = vandq_s8(v52, v48);
      v59.val[1] = (int8x16_t)vshrq_n_u8((uint8x16_t)v52, 4uLL);
      vst2q_s8(v47, v59);
      v46 += 2;
      v47 += 64;
      v49 -= 32;
    }
    while (v49);
    if (v45 == v39) {
      return result;
    }
    if ((v39 & 0x18) == 0)
    {
      v42 = (unsigned __int8 *)(v21 + v45);
      int v41 = v39 - v45;
      v40 = &v38[2 * v45];
LABEL_65:
      unsigned int v43 = v41 + 1;
      do
      {
        unsigned int v44 = *v42++;
        unsigned char *v40 = v44 & 0xF;
        v40[1] = v44 >> 4;
        v40 += 2;
        --v43;
      }
      while (v43 > 1);
      return result;
    }
  }
  else
  {
    uint64_t v45 = 0;
  }
  v40 = &v38[2 * (v39 & 0xFFFFFFF8)];
  int v41 = v39 - (v39 & 0xFFFFFFF8);
  v42 = (unsigned __int8 *)(v21 + (v39 & 0xFFFFFFF8));
  v53 = (int8x8_t *)(v21 + v45);
  uint64_t v54 = v45 - (v39 & 0xFFFFFFF8);
  v55 = &v38[2 * v45];
  do
  {
    int8x8_t v56 = *v53++;
    v58.val[0] = vand_s8(v56, (int8x8_t)0xF0F0F0F0F0F0F0FLL);
    v58.val[1] = (int8x8_t)vshr_n_u8((uint8x8_t)v56, 4uLL);
    vst2_s8(v55, v58);
    v55 += 16;
    v54 += 8;
  }
  while (v54);
  if ((v39 & 0x7FFFFFF8) != v39) {
    goto LABEL_65;
  }
  return result;
}

uint64_t sub_10000483C(uint64_t result, unsigned int a2, int a3, uint64_t a4, double a5, double a6, int8x16_t a7, int8x16_t a8, int8x16_t a9, int8x16_t a10)
{
  unsigned int v11 = a2;
  if (!*(_DWORD *)(result + 1032))
  {
    if (*(_DWORD *)(result + 1036)) {
      return sub_100004CB0(result, a4, a2, a3, a5, a6, *(double *)a7.i64);
    }
    signed int v23 = *(_DWORD *)(result + 1072);
    if ((int)a2 >= v23)
    {
      uint64_t v25 = (unsigned char *)(*(void *)(result + 784) + (int)(*(_DWORD *)(result + 1120) * (a2 - v23)));
      BOOL v26 = *(_DWORD *)(result + 1100) < 1;
      if (!*(_DWORD *)(result + 1108))
      {
LABEL_70:
        if (!v26)
        {
          uint64_t v55 = 0;
          do
          {
            unsigned int v56 = *(unsigned __int8 *)(a4 + v55);
            if (v56 >= *(unsigned __int8 *)(result + 1771)) {
              unsigned int v56 = *(unsigned __int8 *)(result + 1771);
            }
            if (v56 <= *(unsigned __int8 *)(result + 1770)) {
              LOBYTE(v56) = *(unsigned char *)(result + 1770);
            }
            v25[v55++] = v56;
          }
          while (v55 < *(int *)(result + 1100));
        }
        return result;
      }
    }
    else
    {
      if (!*(_DWORD *)(result + 2012))
      {
        if (*(_DWORD *)(result + 1176)) {
          int v24 = *(_DWORD *)(*(void *)(result + 1160) + 4 * a2);
        }
        else {
          int v24 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2 * a2);
        }
        unsigned int v11 = v24 + a3;
      }
      uint64_t v25 = (unsigned char *)(*(void *)(result + 24) + (int)(*(_DWORD *)(result + 1120) * v11));
      BOOL v26 = *(_DWORD *)(result + 1100) < 1;
      if (!*(_DWORD *)(result + 1108)) {
        goto LABEL_70;
      }
    }
    if (!v26)
    {
      uint64_t v27 = 0;
      do
      {
        unsigned int v28 = *(unsigned __int8 *)(a4 + v27);
        unsigned int v29 = *(unsigned __int8 *)(result + 1771);
        if (v28 >= v29) {
          unsigned int v28 = *(unsigned __int8 *)(result + 1771);
        }
        unsigned int v30 = *(unsigned __int8 *)(result + 1770);
        if (v28 <= v30) {
          LOBYTE(v28) = *(unsigned char *)(result + 1770);
        }
        unsigned int v31 = *(unsigned __int8 *)(a4 + v27 + 1);
        if (v31 >= v29) {
          unsigned int v31 = *(unsigned __int8 *)(result + 1771);
        }
        if (v31 <= v30) {
          LOBYTE(v31) = *(unsigned char *)(result + 1770);
        }
        *v25++ = v28 + 16 * v31;
        v27 += 2;
      }
      while (v27 < *(int *)(result + 1100));
    }
    return result;
  }
  signed int v12 = *(_DWORD *)(result + 1072);
  if ((int)a2 < v12)
  {
    if (!*(_DWORD *)(result + 2012))
    {
      if (*(_DWORD *)(result + 1176)) {
        int v13 = *(_DWORD *)(*(void *)(result + 1160) + 4 * a2);
      }
      else {
        int v13 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2 * a2);
      }
      unsigned int v11 = v13 + a3;
    }
    int v14 = *(_DWORD *)(result + 1128) * v11;
    uint64_t v15 = *(void *)(result + 152);
    unsigned int v16 = *(unsigned char **)(result + 1520);
    BOOL v17 = *(_DWORD *)(result + 1100) < 1;
    if (!*(_DWORD *)(result + 1108)) {
      goto LABEL_41;
    }
LABEL_9:
    if (!v17)
    {
      uint64_t v18 = 0;
      do
      {
        unsigned int v19 = *(unsigned __int8 *)(a4 + v18);
        unsigned int v20 = *(unsigned __int8 *)(result + 1771);
        if (v19 >= v20) {
          unsigned int v19 = *(unsigned __int8 *)(result + 1771);
        }
        unsigned int v21 = *(unsigned __int8 *)(result + 1770);
        if (v19 <= v21) {
          LOBYTE(v19) = *(unsigned char *)(result + 1770);
        }
        unsigned int v22 = *(unsigned __int8 *)(a4 + v18 + 1);
        if (v22 >= v20) {
          unsigned int v22 = *(unsigned __int8 *)(result + 1771);
        }
        if (v22 <= v21) {
          LOBYTE(v22) = *(unsigned char *)(result + 1770);
        }
        *v16++ = v19 + 16 * v22;
        v18 += 2;
      }
      while (v18 < *(int *)(result + 1100));
    }
    goto LABEL_48;
  }
  int v14 = *(_DWORD *)(result + 1128) * (a2 - v12);
  uint64_t v15 = *(void *)(result + 792);
  unsigned int v16 = *(unsigned char **)(result + 1520);
  BOOL v17 = *(_DWORD *)(result + 1100) < 1;
  if (*(_DWORD *)(result + 1108)) {
    goto LABEL_9;
  }
LABEL_41:
  if (!v17)
  {
    uint64_t v32 = 0;
    do
    {
      unsigned int v33 = *(unsigned __int8 *)(a4 + v32);
      if (v33 >= *(unsigned __int8 *)(result + 1771)) {
        unsigned int v33 = *(unsigned __int8 *)(result + 1771);
      }
      if (v33 <= *(unsigned __int8 *)(result + 1770)) {
        LOBYTE(v33) = *(unsigned char *)(result + 1770);
      }
      v16[v32++] = v33;
    }
    while (v32 < *(int *)(result + 1100));
  }
LABEL_48:
  unint64_t v34 = *(unsigned int *)(result + 1120);
  if ((int)v34 < 4) {
    return result;
  }
  uint64_t v35 = v14;
  unint64_t v36 = *(void *)(result + 1520);
  unint64_t v37 = v34 >> 2;
  if (v34 < 0x20 || (unint64_t v38 = v15 + 4 * v14, v38 < v36 + 4 * v37) && v36 < v15 + 4 * (v37 + v14))
  {
    uint64_t v39 = 0;
    goto LABEL_53;
  }
  if (v34 >= 0x40)
  {
    uint64_t v39 = (v34 >> 2) & 0x3FFFFFF0;
    a7.i64[1] = 0xFFFFFF07FFFFFF06;
    a8.i64[1] = 0xFFFFFF03FFFFFF02;
    uint64_t v52 = v39;
    v53 = *(const char **)(result + 1520);
    do
    {
      int8x16x4_t v57 = vld4q_s8(v53);
      v53 += 64;
      int8x16_t v54 = vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[1], (int8x16_t)xmmword_1000F4800), 8uLL), vqtbl1q_s8(v57.val[0], (int8x16_t)xmmword_1000F4800));
      *(int8x16_t *)(v38 + 32) = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[3], (int8x16_t)xmmword_1000F47F0), 0x18uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[2], (int8x16_t)xmmword_1000F47F0), 0x10uLL)), vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[1], (int8x16_t)xmmword_1000F47F0), 8uLL), vqtbl1q_s8(v57.val[0], (int8x16_t)xmmword_1000F47F0)));
      *(int8x16_t *)(v38 + 48) = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[3], (int8x16_t)xmmword_1000F47E0), 0x18uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[2], (int8x16_t)xmmword_1000F47E0), 0x10uLL)), vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[1], (int8x16_t)xmmword_1000F47E0), 8uLL), vqtbl1q_s8(v57.val[0], (int8x16_t)xmmword_1000F47E0)));
      a9 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[3], (int8x16_t)xmmword_1000F4810), 0x18uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[2], (int8x16_t)xmmword_1000F4810), 0x10uLL)), vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[1], (int8x16_t)xmmword_1000F4810), 8uLL), vqtbl1q_s8(v57.val[0], (int8x16_t)xmmword_1000F4810)));
      a10 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[3], (int8x16_t)xmmword_1000F4800), 0x18uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[2], (int8x16_t)xmmword_1000F4800), 0x10uLL)), v54);
      *(int8x16_t *)unint64_t v38 = a9;
      *(int8x16_t *)(v38 + 16) = a10;
      v38 += 64;
      v52 -= 16;
    }
    while (v52);
    if (v39 == v37) {
      return result;
    }
    if ((v37 & 8) == 0)
    {
LABEL_53:
      unint64_t v40 = v37 - v39;
      uint64_t v41 = 4 * v39;
      v42 = (int *)(v15 + v41 + 4 * v35);
      unsigned int v43 = (unsigned __int8 *)(v41 + v36 + 1);
      do
      {
        int v44 = *(v43 - 1);
        int *v42 = v44;
        int v45 = v44 | (*v43 << 8);
        int *v42 = v45;
        int v46 = v45 | (v43[1] << 16);
        int *v42 = v46;
        *v42++ = v46 | (v43[2] << 24);
        v43 += 4;
        --v40;
      }
      while (v40);
      return result;
    }
  }
  else
  {
    uint64_t v39 = 0;
  }
  uint64_t v47 = v39;
  uint64_t v39 = v37 & 0x3FFFFFF8;
  int8x16_t v48 = (const char *)(v36 + 4 * v47);
  uint64_t v49 = (__n128 *)(v15 + 4 * v47 + 4 * v35);
  uint64_t v50 = v47 - v39;
  do
  {
    *(int8x8x4_t *)a7.i8 = vld4_s8(v48);
    v48 += 32;
    int8x16_t v51 = vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1000F4800), 8uLL), vqtbl1q_s8(a7, (int8x16_t)xmmword_1000F4800));
    a8 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1000F4810), 0x18uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_1000F4810), 0x10uLL)), vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1000F4810), 8uLL), vqtbl1q_s8(a7, (int8x16_t)xmmword_1000F4810)));
    a7 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1000F4800), 0x18uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_1000F4800), 0x10uLL)), v51);
    *uint64_t v49 = (__n128)a8;
    v49[1] = (__n128)a7;
    v49 += 2;
    v50 += 8;
  }
  while (v50);
  if (v39 != v37) {
    goto LABEL_53;
  }
  return result;
}

uint64_t sub_100004CB0(uint64_t result, uint64_t a2, unsigned int a3, int a4, double a5, double a6, double a7)
{
  uint64_t v7 = *(void *)(result + 1216);
  int v8 = *(_DWORD *)(result + 1296);
  if (v7)
  {
    if (v8 != 3)
    {
      if (v8 != 4)
      {
        unsigned int v9 = 0;
        goto LABEL_11;
      }
      if (!*(_DWORD *)(result + 2012))
      {
        if (*(_DWORD *)(result + 1176)) {
          unsigned int v9 = *(_DWORD *)(*(void *)(result + 1160) + 4 * a3) + a4;
        }
        else {
          unsigned int v9 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2 * a3) + a4;
        }
        goto LABEL_11;
      }
    }
    unsigned int v9 = a3;
LABEL_11:
    uint64_t v10 = v7 + *(int *)(result + 1124) * (uint64_t)(int)v9;
    goto LABEL_17;
  }
  if (v8 == 3) {
    goto LABEL_9;
  }
  if (v8 == 4)
  {
    if (*(_DWORD *)(result + 2012))
    {
LABEL_9:
      unsigned int v9 = a3;
      goto LABEL_13;
    }
    if (*(_DWORD *)(result + 1176)) {
      int v25 = *(_DWORD *)(*(void *)(result + 1160) + 4 * a3);
    }
    else {
      int v25 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2 * a3);
    }
    unsigned int v9 = v25 + a4;
  }
  else
  {
    unsigned int v9 = 0;
  }
LABEL_13:
  uint64_t v10 = *(void *)(result + 1512);
  uint64_t v11 = *(unsigned int *)(result + 1120);
  if ((int)v11 >= 1)
  {
    int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(result + 1232) + 4 * (int)(*(_DWORD *)(result + 1128) * v9);
    do
    {
      *(unsigned char *)(v10 + v13) = *(_DWORD *)(v14 + (v13 & 0xFFFFFFFC)) >> (v12 & 0x18);
      ++v13;
      v12 += 8;
    }
    while (v11 != v13);
    uint64_t v10 = *(void *)(result + 1512);
  }
LABEL_17:
  if (!*(_DWORD *)(result + 2012))
  {
    if (*(_DWORD *)(result + 1176))
    {
      a3 = *(_DWORD *)(*(void *)(result + 1160) + 4 * a3) + a4;
      uint64_t v15 = *(void *)(result + 184);
      if (!v15) {
        goto LABEL_25;
      }
    }
    else
    {
      a3 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2 * a3) + a4;
      uint64_t v15 = *(void *)(result + 184);
      if (!v15) {
        goto LABEL_25;
      }
    }
LABEL_19:
    uint64_t v16 = v15 + 2 * (int)(*(_DWORD *)(result + 1120) * a3);
    int v17 = *(_DWORD *)(*(void *)(result + 1240) + 4 * (int)v9);
    if (*(int *)(result + 1104) < 1) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  uint64_t v15 = *(void *)(result + 184);
  if (v15) {
    goto LABEL_19;
  }
LABEL_25:
  uint64_t v16 = *(void *)(result + 1536);
  int v17 = *(_DWORD *)(*(void *)(result + 1240) + 4 * (int)v9);
  if (*(int *)(result + 1104) < 1) {
    goto LABEL_30;
  }
LABEL_26:
  uint64_t v18 = 0;
  do
  {
    unsigned int v19 = *(unsigned __int8 *)(a2 + v18) * *(unsigned __int8 *)(v10 + v18);
    if (v19 >= 0x400) {
      unsigned int v19 = 1024;
    }
    *(_WORD *)(v16 + 2 * v18) = v19;
    LOBYTE(a7) = *(unsigned char *)(v10 + v18);
    a7 = (double)*(unint64_t *)&a7;
    v17 += (int)((double)(int)(v19 * v19) / a7 + 0.5);
    ++v18;
  }
  while (v18 < *(int *)(result + 1104));
LABEL_30:
  *(_DWORD *)(*(void *)(result + 168) + 4 * (int)a3) = v17;
  int v20 = *(_DWORD *)(result + 1132);
  if (v20 >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *(void *)(result + 200) + 4 * (int)(v20 * a3);
    signed int v23 = (unsigned __int16 *)(v16 + 4);
    do
    {
      int v24 = (int *)(v22 + 4 * v21);
      *int v24 = *(v23 - 2) | (*v23 << 16);
      v24[1] = *(v23 - 1) | (v23[1] << 16);
      v21 += 2;
      v23 += 4;
    }
    while ((int)v21 < *(_DWORD *)(result + 1132));
  }
  return result;
}

_DWORD *sub_100004EF0(_DWORD *result, unsigned __int8 *a2, _WORD *a3)
{
  if (result[278])
  {
    if (result[440])
    {
      if ((int)result[275] >= 8)
      {
        int v3 = 0;
        int v4 = a3 + 4;
        do
        {
          unsigned int v5 = *a2;
          v4[2] = v5 >> 4;
          v4[3] = v5 & 0xF;
          unsigned int v6 = a2[1];
          *int v4 = v6 >> 4;
          v4[1] = v6 & 0xF;
          unsigned int v7 = a2[2];
          *(v4 - 2) = v7 >> 4;
          *(v4 - 1) = v7 & 0xF;
          unsigned int v8 = a2[3];
          *(v4 - 4) = v8 >> 4;
          *(v4 - 3) = v8 & 0xF;
          a2 += 4;
          ++v3;
          v4 += 4;
        }
        while (v3 < result[275] / 8);
      }
    }
    else if ((int)result[280] >= 1)
    {
      uint64_t v10 = 0;
      do
      {
        unsigned int v11 = a2[v10];
        *a3 = v11 & 0xF;
        a3[1] = v11 >> 4;
        ++v10;
        a3 += 2;
      }
      while (v10 < (int)result[280]);
    }
  }
  else if ((int)result[275] >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      a3[v9] = *(_WORD *)&a2[2 * v9];
      ++v9;
    }
    while (v9 < (int)result[275]);
  }
  return result;
}

uint64_t sub_100004FF8(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1296);
  if (v3 == 3) {
    return *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)a2;
  }
  if (v3 != 4) {
    return *(void *)(a1 + 1216);
  }
  if (*(_DWORD *)(a1 + 2012)) {
    return *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)a2;
  }
  if (*(_DWORD *)(a1 + 1176)) {
    int v5 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2) + a3;
  }
  else {
    int v5 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2) + a3;
  }
  return *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)v5;
}

uint64_t sub_10000507C(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1296);
  if (v3 == 3) {
    return *(void *)(a1 + 1208) + 2 * (int)(*(_DWORD *)(a1 + 1124) * a2);
  }
  if (v3 != 4) {
    return *(void *)(a1 + 1208);
  }
  if (*(_DWORD *)(a1 + 2012)) {
    return *(void *)(a1 + 1208) + 2 * (int)(*(_DWORD *)(a1 + 1124) * a2);
  }
  if (*(_DWORD *)(a1 + 1176)) {
    int v5 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2) + a3;
  }
  else {
    int v5 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2) + a3;
  }
  return *(void *)(a1 + 1208) + 2 * *(_DWORD *)(a1 + 1124) * v5;
}

uint64_t sub_100005110(uint64_t result, unsigned int a2, int a3, void *a4, void *a5)
{
  *a4 = 0;
  *a5 = 0;
  int v5 = *(_DWORD *)(result + 1072);
  BOOL v6 = __OFSUB__(a2, v5);
  LODWORD(v7) = a2 - v5;
  if ((int)v7 < 0 == v6)
  {
    *a4 = *(void *)(result + 800) + 4 * (int)v7;
    if (!*(_DWORD *)(result + 1044)) {
      return result;
    }
    uint64_t v7 = (int)v7;
    uint64_t v9 = (void *)(result + 808);
    goto LABEL_12;
  }
  if (!*(_DWORD *)(result + 2012))
  {
    if (*(_DWORD *)(result + 1176)) {
      int v8 = *(_DWORD *)(*(void *)(result + 1160) + 4 * a2);
    }
    else {
      int v8 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2 * a2);
    }
    a2 = v8 + a3;
  }
  *a4 = *(void *)(result + 40) + 4 * (int)a2;
  if (*(_DWORD *)(result + 1044))
  {
    uint64_t v7 = (int)a2;
    uint64_t v9 = (void *)(result + 56);
LABEL_12:
    *a5 = *v9 + 4 * v7;
  }
  return result;
}

uint64_t sub_10000519C(uint64_t result, unsigned int a2, int a3, void *a4, void *a5)
{
  *a4 = 0;
  *a5 = 0;
  int v5 = *(_DWORD *)(result + 1072);
  BOOL v6 = __OFSUB__(a2, v5);
  LODWORD(v7) = a2 - v5;
  if ((int)v7 < 0 == v6)
  {
    *a4 = *(void *)(result + 816) + 2 * (int)v7;
    if (!*(_DWORD *)(result + 1044)) {
      return result;
    }
    uint64_t v7 = (int)v7;
    uint64_t v9 = (void *)(result + 824);
    goto LABEL_12;
  }
  if (!*(_DWORD *)(result + 2012))
  {
    if (*(_DWORD *)(result + 1176)) {
      int v8 = *(_DWORD *)(*(void *)(result + 1160) + 4 * a2);
    }
    else {
      int v8 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2 * a2);
    }
    a2 = v8 + a3;
  }
  *a4 = *(void *)(result + 72) + 2 * (int)a2;
  if (*(_DWORD *)(result + 1044))
  {
    uint64_t v7 = (int)a2;
    uint64_t v9 = (void *)(result + 88);
LABEL_12:
    *a5 = *v9 + 2 * v7;
  }
  return result;
}

uint64_t sub_100005228(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1296);
  if (v3 != 3)
  {
    if (v3 == 4)
    {
      if (!*(_DWORD *)(a1 + 2012))
      {
        if (*(_DWORD *)(a1 + 1176)) {
          int v4 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
        }
        else {
          int v4 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
        }
        a2 = v4 + a3;
      }
    }
    else
    {
      a2 = 0;
    }
  }
  return *(void *)(a1 + 1224) + 4 * ((int)(*(_DWORD *)(a1 + 1124) * a2) / 2);
}

uint64_t sub_100005290(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1296);
  if (v3 == 3) {
    return *(void *)(a1 + 1240) + 4 * (int)a2;
  }
  if (v3 != 4) {
    return *(void *)(a1 + 1240);
  }
  if (*(_DWORD *)(a1 + 2012)) {
    return *(void *)(a1 + 1240) + 4 * (int)a2;
  }
  if (*(_DWORD *)(a1 + 1176)) {
    int v5 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2) + a3;
  }
  else {
    int v5 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2) + a3;
  }
  return *(void *)(a1 + 1240) + 4 * v5;
}

uint64_t sub_100005304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 1344))
  {
    LOWORD(v12) = *(_WORD *)(*(void *)(a1 + 1352)
                           + 2 * ((int)a4 + ((int)a3 + *(_DWORD *)(a1 + 1884) * (int)a2) * *(_DWORD *)(a1 + 1884)));
    return (unsigned __int16)v12;
  }
  uint64_t v13 = (unsigned __int16 *)sub_1000CD3E8(2 * *(int *)(a1 + 1096), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v14 = 1096;
  if (*(unsigned __int16 *)(a1 + 1396) == a3) {
    uint64_t v14 = 1392;
  }
  uint64_t v15 = *(unsigned int *)(a1 + v14);
  if ((int)v15 >= 1)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      if (*(_DWORD *)(a1 + 1024) && *(_DWORD *)(a1 + 1884) <= (int)a3)
      {
        __int16 v17 = sub_10001CD30(a1, a3, i);
      }
      else if (*(_DWORD *)(a1 + 1316))
      {
        __int16 v17 = *(_WORD *)(*(void *)(a1 + 1328)
                       + 2
                       * (i
                        + *(int *)(a1 + 1096)
                        * (uint64_t)((int)a4 + ((int)a3 + *(_DWORD *)(a1 + 1884) * (int)a2) * *(_DWORD *)(a1 + 1884))));
      }
      else if (*(_DWORD *)(a1 + 1312))
      {
        __int16 v17 = sub_1000388D4(*(void *)(a1 + 1304), a2, a3, a4, i);
      }
      else
      {
        __int16 v17 = -1;
      }
      v13[i] = v17;
    }
  }
  int v18 = *(_DWORD *)(a1 + 1384);
  int v19 = v18 - 1;
  if (v18 < 1)
  {
LABEL_28:
    LOWORD(v12) = 0x7FFF;
    return (unsigned __int16)v12;
  }
  uint64_t v20 = *(int *)(a1 + 1096);
  uint64_t v21 = *(void *)(a1 + 1368);
  if (v15 == 2)
  {
    int v22 = 0;
    while (1)
    {
      int v23 = v19 + v22;
      if (v19 + v22 < 0 != __OFADD__(v19, v22)) {
        ++v23;
      }
      int v12 = v23 >> 1;
      int v24 = (unsigned __int16 *)(v21 + 2 * (int)v20 * (v23 >> 1));
      int v25 = *v13 - *v24;
      if (v25)
      {
        if (v25 < 0) {
          goto LABEL_19;
        }
LABEL_26:
        if (!v25) {
          goto LABEL_43;
        }
        int v22 = v12 + 1;
        if (v12 + 1 > v19) {
          goto LABEL_28;
        }
      }
      else
      {
        int v25 = v13[1] - v24[1];
        if ((v25 & 0x80000000) == 0) {
          goto LABEL_26;
        }
LABEL_19:
        int v19 = v12 - 1;
        if (v22 > v12 - 1) {
          goto LABEL_28;
        }
      }
    }
  }
  if ((int)v15 < 1)
  {
    int v12 = v19 >> 1;
LABEL_43:
    sub_1000CD4D0(v13, 2 * v20);
  }
  else
  {
    int v26 = 0;
    do
    {
      int v27 = v19 + v26;
      if (v19 + v26 < 0 != __OFADD__(v19, v26)) {
        ++v27;
      }
      int v12 = v27 >> 1;
      unsigned int v28 = (unsigned __int16 *)(v21 + 2 * (int)v20 * (v27 >> 1));
      unsigned int v29 = v13;
      uint64_t v30 = v15;
      while (1)
      {
        unsigned int v32 = *v29++;
        unsigned int v31 = v32;
        unsigned int v34 = *v28++;
        unsigned int v33 = v34;
        if (v31 != v34) {
          break;
        }
        if (!--v30) {
          goto LABEL_43;
        }
      }
      if (v31 < v33) {
        int v19 = v12 - 1;
      }
      else {
        int v26 = v12 + 1;
      }
      LOWORD(v12) = 0x7FFF;
    }
    while (v26 <= v19);
  }
  return (unsigned __int16)v12;
}

uint64_t sub_100005524(uint64_t a1, unsigned __int16 *a2, int a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 < 2)
  {
    uint64_t v15 = a6;
  }
  else
  {
    unint64_t v12 = a3 + 1;
    unsigned int v13 = a3 - 1;
    do
    {
      uint64_t v14 = v13;
      uint64_t v15 = a2[v14];
      a4[v14] = sub_100005304(a1, a2[--v13], v15, (unsigned __int16)a6, a5, a6, a7, a8);
      --v12;
      a6 = v15;
    }
    while (v12 > 2);
  }
  uint64_t result = sub_100005304(a1, a5, *a2, v15, a5, a6, a7, a8);
  *a4 = result;
  return result;
}

uint64_t sub_1000055D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1884);
}

uint64_t sub_1000055D8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 != v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1000055F0(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = *(void **)(a1 + 744);
  uint64_t v12 = v11[10];
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(v12 + 8 * a3)
        + *(unsigned __int16 *)(*(void *)(v11[11] + 8 * a3) + 2 * a4);
    uint64_t v15 = (__int16 *)(v11[6] + 2 * a3);
    __int16 v16 = *v15;
    unsigned int v17 = (unsigned __int16)v15[1];
    int v18 = (unsigned __int8 *)(v14 + 3);
    unsigned int v19 = *(unsigned __int8 *)(v14 + 2);
    __int16 v20 = v16;
    if (!*(unsigned char *)(v14 + 2)) {
      goto LABEL_8;
    }
    do
    {
LABEL_5:
      if (v19)
      {
        a2[(int)v13] = v16;
        uint64_t v13 = (v13 + 1);
      }
      v19 >>= 1;
      ++v16;
    }
    while (v19);
LABEL_8:
    while (1)
    {
      __int16 v16 = v20 + 8;
      if (v17 <= (unsigned __int16)(v20 + 8)) {
        break;
      }
      unsigned int v21 = *v18++;
      unsigned int v19 = v21;
      v20 += 8;
      if (v21) {
        goto LABEL_5;
      }
    }
    a2[(int)v13] = *(_WORD *)v14;
  }
  else
  {
    int v23 = *(_DWORD *)(a1 + 1884);
    __int16 v24 = sub_100005304(a1, 0, a3, a4, a5, a6, a7, a8);
    *a2 = v24;
    if (v23 < 1)
    {
      uint64_t v13 = 1;
    }
    else
    {
      unsigned __int16 v29 = 0;
      uint64_t v13 = 1;
      do
      {
        int v30 = sub_100005304(a1, v29, a3, a4, v25, v26, v27, v28);
        if ((int)v13 < 1 || (unsigned __int16)*a2 == v30)
        {
          int v31 = 0;
        }
        else
        {
          unsigned __int16 v32 = 0;
          do
            int v31 = ++v32;
          while ((int)v13 > v32 && (unsigned __int16)a2[v32] != v30);
        }
        if (v13 == v31)
        {
          a2[v13] = v30;
          uint64_t v13 = (v13 + 1);
        }
        ++v29;
      }
      while (v23 > v29);
      __int16 v24 = *a2;
    }
    a2[(int)v13] = v24;
    qsort(a2, (int)v13, 2uLL, (int (__cdecl *)(const void *, const void *))sub_1000055D8);
  }
  return v13;
}

uint64_t sub_100005794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 744) + 96);
  if (v6) {
    return (byte_1000F594C[a2 & 7] & *(unsigned char *)(v6
  }
                                                               + 8 * a5
                                                               + ((unint64_t)a2 >> 3))) != 0;
  if (!a3) {
    return *(unsigned __int16 *)(a1 + 1390) == a5;
  }
  LODWORD(v10) = *(_DWORD *)(a1 + 1096);
  if ((int)v10 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(a1 + 1368) + 2 * (int)(v10 * a5);
    do
    {
      if (*(_DWORD *)(a1 + 1024) && *(_DWORD *)(a1 + 1884) <= (int)a3)
      {
        BOOL v14 = sub_10001CD30(a1, a3, v12) == *(unsigned __int16 *)(v13 + 2 * v12);
        uint64_t result = v14;
        if (!v14) {
          return result;
        }
      }
      else if (*(_DWORD *)(a1 + 1316))
      {
        uint64_t result = *(unsigned __int16 *)(*(void *)(a1 + 1328)
                                     + 2
                                     * (v12
                                      + ((int)a4 + ((int)a3 + *(_DWORD *)(a1 + 1884) * (int)a2) * *(_DWORD *)(a1 + 1884))
                                      * (int)v10)) == *(unsigned __int16 *)(v13 + 2 * v12);
        if (*(unsigned __int16 *)(*(void *)(a1 + 1328)
                                 + 2
                                 * (v12
                                  + ((int)a4 + ((int)a3 + *(_DWORD *)(a1 + 1884) * (int)a2) * *(_DWORD *)(a1 + 1884))
                                  * (int)v10)) != *(unsigned __int16 *)(v13 + 2 * v12))
          return result;
      }
      else if (*(_DWORD *)(a1 + 1312))
      {
        BOOL v14 = sub_1000388D4(*(void *)(a1 + 1304), a2, a3, a4, v12) == *(unsigned __int16 *)(v13 + 2 * v12);
        uint64_t result = v14;
        if (!v14) {
          return result;
        }
      }
      else
      {
        int v15 = *(unsigned __int16 *)(v13 + 2 * v12);
        uint64_t result = v15 == 0xFFFF;
        if (v15 != 0xFFFF) {
          return result;
        }
      }
      ++v12;
      uint64_t v10 = *(int *)(a1 + 1096);
    }
    while (v12 < v10);
  }
  return 1;
}

BOOL sub_100005928(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *(void **)(a1 + 744);
  int v4 = *(_DWORD *)(a1 + 1884);
  int v5 = v4 - 1;
  if (v4 > 1)
  {
    uint64_t v8 = v3[6];
    int v9 = 1;
    int v10 = v5;
    do
    {
      int v11 = v10 + v9;
      if (v10 + v9 < 0 != __OFADD__(v10, v9)) {
        ++v11;
      }
      int v12 = v11 >> 1;
      if (*(unsigned __int16 *)(v8 + 2 * v12) <= a2) {
        int v9 = v12 + 1;
      }
      else {
        int v10 = v12 - 1;
      }
    }
    while (v9 <= v10);
    int v13 = 1;
    do
    {
      int v14 = v5 + v13;
      if (v5 + v13 < 0 != __OFADD__(v5, v13)) {
        ++v14;
      }
      int v15 = v14 >> 1;
      if (*(unsigned __int16 *)(v8 + 2 * v15) <= a3) {
        int v13 = v15 + 1;
      }
      else {
        int v5 = v15 - 1;
      }
    }
    while (v13 <= v5);
    uint64_t v7 = (unsigned __int16)(v13 - 1);
    uint64_t v6 = (unsigned __int16)(v9 - 1);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = v3[6];
  }
  unint64_t v16 = a2 - *(unsigned __int16 *)(v8 + 2 * v6);
  if ((byte_1000F594C[v16 & 7] & *(unsigned char *)(*(void *)(v3[10] + 8 * v6)
                                                            + *(unsigned __int16 *)(*(void *)(v3[11] + 8 * v6) + 2 * v7)
                                                            + (v16 >> 3)
                                                            + 2)) == 0)
    return 0;
  unint64_t v17 = a3 - *(unsigned __int16 *)(v8 + 2 * v7);
  return (byte_1000F594C[v17 & 7] & *(unsigned char *)(*(void *)(v3[7] + 8 * v7)
                                                              + *(unsigned __int16 *)(*(void *)(v3[8] + 8 * v7)
                                                                                    + 2 * v6)
                                                              + (v17 >> 3)
                                                              + 2)) != 0;
}

uint64_t sub_100005A3C(uint64_t result, int a2)
{
  unsigned int v2 = sub_100015348;
  if (a2 != 5)
  {
    if (a2 != 2) {
      return result;
    }
    unsigned int v2 = sub_1000150A4;
  }
  *(void *)(result + 1616) = v2;
  return result;
}

void sub_100005A6C(uint64_t a1, int32x4_t a2, double a3, int32x4_t a4, int32x4_t a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v8 = *(unsigned int *)(a1 + 1100);
  if ((int)v8 >= 1)
  {
    unint64_t v9 = v8 + 1;
    do
      *(unsigned char *)(*(void *)(a1 + 1544) + (v9-- - 2)) = *(unsigned char *)(a1 + 1770);
    while (v9 > 1);
  }
  if (*(_DWORD *)(a1 + 1036))
  {
    uint64_t v10 = *(unsigned int *)(a1 + 1100);
    if ((int)v10 >= 1)
    {
      unint64_t v11 = v10 + 1;
      do
      {
        __int16 v12 = *(unsigned __int8 *)(*(void *)(a1 + 1544) + (v11 - 2));
        *(_WORD *)(*(void *)(a1 + 1584) + 2 * (v11-- - 2)) = v12 * v12;
      }
      while (v11 > 1);
    }
    sub_100005DDC(a1, a2, a3, a4, a5, a6, a7);
  }
  sub_100015968(a1);
  *(_DWORD *)(a1 + 1600) = 0xFFFF;
}

void sub_100005B0C(uint64_t a1, uint64_t a2, int a3, int32x4_t a4, double a5, int32x4_t a6, int32x4_t a7, int8x16_t a8, int8x16_t a9)
{
  if (a2)
  {
    if (!*(_DWORD *)(a1 + 992) || !*(_DWORD *)(a1 + 448) && !*(_DWORD *)(a1 + 456))
    {
      if (*(_DWORD *)(a1 + 1776))
      {
        uint64_t v12 = *(unsigned int *)(a1 + 1100);
        if ((int)v12 >= 1)
        {
          int v13 = 1 << (*(_DWORD *)(a1 + 1784) - 1);
          unint64_t v14 = v12 + 1;
          do
          {
            uint64_t v15 = (v14 - 2);
            signed int v16 = ((v13 + *(unsigned __int8 *)(a2 + v15)) >> *(_DWORD *)(a1 + 1784))
                - *(_DWORD *)(a1 + 1788);
            if (v16 >= *(unsigned __int8 *)(a1 + 1771)) {
              signed int v16 = *(unsigned __int8 *)(a1 + 1771);
            }
            if (v16 <= *(unsigned __int8 *)(a1 + 1770)) {
              LOBYTE(v16) = *(unsigned char *)(a1 + 1770);
            }
            *(unsigned char *)(*(void *)(a1 + 1544) + v15) = v16;
            --v14;
          }
          while (v14 > 1);
        }
      }
      else
      {
        uint64_t v19 = *(unsigned int *)(a1 + 1100);
        if ((int)v19 >= 1)
        {
          unint64_t v20 = v19 + 1;
          do
          {
            *(unsigned char *)(*(void *)(a1 + 1544) + (v20 - 2)) = *(unsigned char *)(a2 + (v20 - 2));
            --v20;
          }
          while (v20 > 1);
        }
      }
    }
  }
  else
  {
    uint64_t v17 = *(unsigned int *)(a1 + 1100);
    if ((int)v17 >= 1)
    {
      unint64_t v18 = v17 + 1;
      do
        *(unsigned char *)(*(void *)(a1 + 1544) + (v18-- - 2)) = *(unsigned char *)(a1 + 1770);
      while (v18 > 1);
    }
  }
  if (*(_DWORD *)(a1 + 1036))
  {
    uint64_t v21 = *(unsigned int *)(a1 + 1100);
    if ((int)v21 >= 1)
    {
      unint64_t v22 = v21 + 1;
      do
      {
        __int16 v23 = *(unsigned __int8 *)(*(void *)(a1 + 1544) + (v22 - 2));
        *(_WORD *)(*(void *)(a1 + 1584) + 2 * (v22-- - 2)) = v23 * v23;
      }
      while (v22 > 1);
    }
    *(double *)a4.i64 = sub_100005DDC(a1, a4, a5, a6, a7, a8, a9);
  }
  if (a3)
  {
    if (*(_DWORD *)(a1 + 1032))
    {
      if (!*(_DWORD *)(a1 + 1760))
      {
        sub_100005DDC(a1, a4, a5, a6, a7, a8, a9);
        if (*(_DWORD *)(a1 + 1004))
        {
LABEL_31:
          if (*(_DWORD *)(a1 + 656))
          {
            uint64_t v26 = *(void (**)(uint64_t))(a1 + 1656);
            v26(a1);
            return;
          }
        }
LABEL_36:
        if (*(_DWORD *)(a1 + 1016) && *(_DWORD *)(a1 + 976))
        {
          uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 960);
          uint64_t v28 = *(void *)(a1 + 944);
          v27(v28, a2, a1);
        }
        return;
      }
      __int16 v24 = *(unsigned __int8 **)(a1 + 1544);
      uint64_t v25 = *(int **)(a1 + 1560);
      *uint64_t v25 = (v24[6] << 24) | (v24[7] << 28) | (v24[5] << 20) | (v24[4] << 16) | (v24[3] << 12) | (v24[2] << 8) | (16 * v24[1]) | *v24;
      v25[1] = (v24[14] << 24) | (v24[15] << 28) | (v24[13] << 20) | (v24[12] << 16) | (v24[11] << 12) | (v24[10] << 8) | (16 * v24[9]) | v24[8];
      v25[2] = (v24[22] << 24) | (v24[23] << 28) | (v24[21] << 20) | (v24[20] << 16) | (v24[19] << 12) | (v24[18] << 8) | (16 * v24[17]) | v24[16];
    }
    if (*(_DWORD *)(a1 + 1004)) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
}

double sub_100005DDC(uint64_t a1, int32x4_t a2, double a3, int32x4_t a4, int32x4_t a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v7 = *(unsigned __int8 **)(a1 + 1544);
  uint64_t v8 = *(unsigned int *)(a1 + 1104);
  if ((int)v8 < 9)
  {
    unsigned __int32 v10 = 0;
    goto LABEL_9;
  }
  unint64_t v9 = v8 - 8;
  if ((unint64_t)(v8 - 8) < 8 || (int)v8 - 1 < (v8 - 9))
  {
    unsigned __int32 v10 = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 1104);
    goto LABEL_5;
  }
  if (v9 >= 0x20)
  {
    int32x4_t v36 = 0uLL;
    unint64_t v35 = v9 & 0xFFFFFFFFFFFFFFE0;
    int32x4_t v37 = 0uLL;
    uint64_t v38 = v8 - 1;
    unint64_t v39 = v9 & 0xFFFFFFFFFFFFFFE0;
    int32x4_t v40 = 0uLL;
    int32x4_t v41 = 0uLL;
    a6 = 0uLL;
    int32x4_t v42 = 0uLL;
    a7 = 0uLL;
    int32x4_t v43 = 0uLL;
    do
    {
      int v44 = &v7[v38];
      int8x16_t v45 = vrev64q_s8(*(int8x16_t *)(v44 - 15));
      uint8x16_t v46 = (uint8x16_t)vextq_s8(v45, v45, 8uLL);
      int8x16_t v47 = vrev64q_s8(*(int8x16_t *)(v44 - 31));
      uint8x16_t v48 = (uint8x16_t)vextq_s8(v47, v47, 8uLL);
      uint16x8_t v49 = vmovl_u8(*(uint8x8_t *)v46.i8);
      uint16x8_t v50 = vmovl_high_u8(v46);
      uint16x8_t v51 = vmovl_u8(*(uint8x8_t *)v48.i8);
      uint16x8_t v52 = vmovl_high_u8(v48);
      int32x4_t v41 = (int32x4_t)vmlal_high_u16((uint32x4_t)v41, v50, v50);
      int32x4_t v40 = (int32x4_t)vmlal_u16((uint32x4_t)v40, *(uint16x4_t *)v50.i8, *(uint16x4_t *)v50.i8);
      int32x4_t v37 = (int32x4_t)vmlal_high_u16((uint32x4_t)v37, v49, v49);
      int32x4_t v36 = (int32x4_t)vmlal_u16((uint32x4_t)v36, *(uint16x4_t *)v49.i8, *(uint16x4_t *)v49.i8);
      int32x4_t v43 = (int32x4_t)vmlal_high_u16((uint32x4_t)v43, v52, v52);
      a7 = (int8x16_t)vmlal_u16((uint32x4_t)a7, *(uint16x4_t *)v52.i8, *(uint16x4_t *)v52.i8);
      int32x4_t v42 = (int32x4_t)vmlal_high_u16((uint32x4_t)v42, v51, v51);
      a6 = (int8x16_t)vmlal_u16((uint32x4_t)a6, *(uint16x4_t *)v51.i8, *(uint16x4_t *)v51.i8);
      v38 -= 32;
      v39 -= 32;
    }
    while (v39);
    a4 = vaddq_s32(v42, v37);
    a5 = vaddq_s32(v43, v41);
    a2 = vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)a6, v36), vaddq_s32((int32x4_t)a7, v40)), vaddq_s32(a4, a5));
    a2.i32[0] = vaddvq_s32(a2);
    unsigned __int32 v10 = a2.i32[0];
    if (v9 == v35) {
      goto LABEL_9;
    }
    if ((v9 & 0x18) == 0)
    {
      uint64_t v11 = v8 - v35;
LABEL_5:
      unint64_t v12 = v11 + 1;
      do
      {
        int v13 = v7[(v12 - 2)];
        v10 += v13 * v13;
        --v12;
      }
      while (v12 > 9);
      goto LABEL_9;
    }
  }
  else
  {
    unsigned __int32 v10 = 0;
    unint64_t v35 = 0;
  }
  uint64_t v11 = v8 - (v9 & 0xFFFFFFFFFFFFFFF8);
  int32x4_t v53 = 0uLL;
  int32x4_t v54 = (int32x4_t)v10;
  uint64_t v55 = ~v35 + v8;
  unint64_t v56 = v35 - (v9 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    a4 = (int32x4_t)vmovl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)&v7[v55 - 7]));
    int32x4_t v53 = (int32x4_t)vmlal_high_u16((uint32x4_t)v53, (uint16x8_t)a4, (uint16x8_t)a4);
    int32x4_t v54 = (int32x4_t)vmlal_u16((uint32x4_t)v54, *(uint16x4_t *)a4.i8, *(uint16x4_t *)a4.i8);
    v55 -= 8;
    v56 += 8;
  }
  while (v56);
  a2 = vaddq_s32(v54, v53);
  a2.i32[0] = vaddvq_s32(a2);
  unsigned __int32 v10 = a2.i32[0];
  if (v9 != (v9 & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_5;
  }
LABEL_9:
  int v14 = v7[7] * v7[7]
      + v7[6] * v7[6]
      + v7[5] * v7[5]
      + v7[4] * v7[4]
      + v7[3] * v7[3]
      + v7[2] * v7[2]
      + v7[1] * v7[1]
      + *v7 * *v7;
  *(_DWORD *)(a1 + 1572) = v14;
  *(_DWORD *)(a1 + 1576) = v10;
  *(_DWORD *)(a1 + 1568) = v14 + v10;
  uint64_t v15 = *(int **)(a1 + 1552);
  if (*(_DWORD *)(a1 + 1108))
  {
    *uint64_t v15 = (v7[2] << 24) | (v7[3] << 28) | (v7[1] << 20) | (*v7 << 16) | (v7[7] << 12) | (v7[6] << 8) | (16 * v7[5]) | v7[4];
    v15[1] = (v7[10] << 24) | (v7[11] << 28) | (v7[9] << 20) | (v7[8] << 16) | (v7[15] << 12) | (v7[14] << 8) | (16 * v7[13]) | v7[12];
    v15[2] = (v7[18] << 24) | (v7[19] << 28) | (v7[17] << 20) | (v7[16] << 16) | (v7[23] << 12) | (v7[22] << 8) | (16 * v7[21]) | v7[20];
    goto LABEL_11;
  }
  int v16 = *(_DWORD *)(a1 + 1100);
  int v17 = v16 - 24;
  *uint64_t v15 = (v7[1] << 24) | (*v7 << 16) | (v7[3] << 8) | v7[2];
  v15[1] = (v7[5] << 24) | (v7[4] << 16) | (v7[7] << 8) | v7[6];
  v15[2] = (v7[9] << 24) | (v7[8] << 16) | (v7[11] << 8) | v7[10];
  v15[3] = (v7[13] << 24) | (v7[12] << 16) | (v7[15] << 8) | v7[14];
  v15[4] = (v7[17] << 24) | (v7[16] << 16) | (v7[19] << 8) | v7[18];
  v15[5] = (v7[21] << 24) | (v7[20] << 16) | (v7[23] << 8) | v7[22];
  unsigned int v18 = v16 - 25;
  if (v16 >= 25)
  {
    uint64_t v19 = v7 + 24;
    unint64_t v20 = v15 + 6;
    if (v18 < 0x1C || (uint64_t v21 = (v18 & 0xFFFFFFFC) + 28, v20 < (int *)&v7[v21]) && v19 < (unsigned __int8 *)v15 + v21)
    {
      int v22 = 0;
      goto LABEL_19;
    }
    uint64_t v57 = (v18 >> 2) + 1;
    if (v18 >= 0x3C)
    {
      uint64_t v58 = v57 & 0x7FFFFFF0;
      a2.i64[0] = 0xFFFFFF01FFFFFF00;
      a4.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
      a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
      uint64_t v75 = v58;
      v76 = (const char *)(v7 + 24);
      v77 = (int8x16_t *)(v15 + 6);
      do
      {
        int8x16x4_t v83 = vld4q_s8(v76);
        v76 += 64;
        int8x16_t v78 = vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[0], (int8x16_t)xmmword_1000F4800), 0x10uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[1], (int8x16_t)xmmword_1000F4800), 0x18uLL));
        v77[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[0], (int8x16_t)xmmword_1000F47F0), 0x10uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[1], (int8x16_t)xmmword_1000F47F0), 0x18uLL)), vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[3], (int8x16_t)xmmword_1000F47F0), 8uLL), vqtbl1q_s8(v83.val[2], (int8x16_t)xmmword_1000F47F0)));
        v77[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[0], (int8x16_t)xmmword_1000F47E0), 0x10uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[1], (int8x16_t)xmmword_1000F47E0), 0x18uLL)), vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[3], (int8x16_t)xmmword_1000F47E0), 8uLL), vqtbl1q_s8(v83.val[2], (int8x16_t)xmmword_1000F47E0)));
        a6 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[0], (int8x16_t)xmmword_1000F4810), 0x10uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[1], (int8x16_t)xmmword_1000F4810), 0x18uLL)), vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[3], (int8x16_t)xmmword_1000F4810), 8uLL), vqtbl1q_s8(v83.val[2], (int8x16_t)xmmword_1000F4810)));
        a7 = vorrq_s8(v78, vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[3], (int8x16_t)xmmword_1000F4800), 8uLL), vqtbl1q_s8(v83.val[2], (int8x16_t)xmmword_1000F4800)));
        int8x16_t *v77 = a6;
        v77[1] = a7;
        v77 += 4;
        v75 -= 16;
      }
      while (v75);
      if (v58 == v57) {
        goto LABEL_21;
      }
      if ((v57 & 8) == 0)
      {
        v20 += v58;
        v19 += 4 * v58;
        int v22 = 4 * v58;
LABEL_19:
        __int16 v23 = v19 + 1;
        do
        {
          *v20++ = (*v23 << 24) | (*(v23 - 1) << 16) | (v23[2] << 8) | v23[1];
          v22 += 4;
          v23 += 4;
        }
        while (v22 < v17);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v58 = 0;
    }
    int v22 = 4 * (v57 & 0x7FFFFFF8);
    uint64_t v59 = 4 * (v57 & 0x7FFFFFF8);
    v19 += v59;
    unint64_t v20 = (int *)((char *)v20 + v59);
    uint64_t v60 = 4 * v58 + 24;
    v61 = (__n128 *)((char *)v15 + v60);
    v62 = (const char *)&v7[v60];
    uint64_t v63 = v58 - (v57 & 0x7FFFFFF8);
    a2.i64[0] = 0xFFFFFF01FFFFFF00;
    do
    {
      *(int8x8x4_t *)a4.i8 = vld4_s8(v62);
      v62 += 32;
      int8x16_t v64 = vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8((int8x16_t)a4, (int8x16_t)xmmword_1000F4800), 0x10uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_1000F4800), 0x18uLL));
      a4 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8((int8x16_t)a4, (int8x16_t)xmmword_1000F4810), 0x10uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_1000F4810), 0x18uLL)), vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_1000F4810), 8uLL), vqtbl1q_s8(a6, (int8x16_t)xmmword_1000F4810)));
      a5 = (int32x4_t)vorrq_s8(v64, vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_1000F4800), 8uLL), vqtbl1q_s8(a6, (int8x16_t)xmmword_1000F4800)));
      __n128 *v61 = (__n128)a4;
      v61[1] = (__n128)a5;
      v61 += 2;
      v63 += 8;
    }
    while (v63);
    if ((v57 & 0x7FFFFFF8) != v57) {
      goto LABEL_19;
    }
  }
LABEL_21:
  if (*(_DWORD *)(a1 + 1036))
  {
    __int16 v24 = *(unsigned __int16 **)(a1 + 1584);
    uint64_t v25 = *(int **)(a1 + 1592);
    *uint64_t v25 = v24[2] | (*v24 << 16);
    v25[1] = v24[3] | (v24[1] << 16);
    v25[2] = v24[6] | (v24[4] << 16);
    v25[3] = v24[7] | (v24[5] << 16);
    v25[4] = v24[10] | (v24[8] << 16);
    v25[5] = v24[11] | (v24[9] << 16);
    v25[6] = v24[14] | (v24[12] << 16);
    v25[7] = v24[15] | (v24[13] << 16);
    v25[8] = v24[18] | (v24[16] << 16);
    v25[9] = v24[19] | (v24[17] << 16);
    v25[10] = v24[22] | (v24[20] << 16);
    v25[11] = v24[23] | (v24[21] << 16);
    _VF = __OFSUB__(v16, 25);
    int v27 = v16 - 25;
    if (v27 < 0 == _VF)
    {
      uint64_t v28 = (const __int16 *)(v24 + 24);
      unsigned __int16 v29 = (float *)(v25 + 12);
      if (v27 < 0x1C
        || (unsigned int v30 = v27 >> 2, v31 = 8 * v30 + 56, v29 < (float *)((char *)v24 + v31))
        && v28 < (const __int16 *)((char *)v25 + v31))
      {
        int v32 = 0;
        unsigned int v33 = v25 + 12;
        unsigned int v34 = v24 + 24;
        do
        {
LABEL_27:
          *unsigned int v33 = v34[2] | (*v34 << 16);
          v33[1] = v34[3] | (v34[1] << 16);
          v32 += 4;
          v34 += 4;
          v33 += 2;
        }
        while (v32 < v17);
        goto LABEL_11;
      }
      uint64_t v65 = v30 + 1;
      uint64_t v66 = 4 * (v65 & 0x7FFFFFF8);
      unsigned int v33 = (int *)&v29[(unint64_t)v66 / 2];
      unsigned int v34 = (unsigned __int16 *)&v28[v66];
      int v32 = 4 * (v65 & 0x7FFFFFF8);
      uint64_t v67 = v65 & 0x7FFFFFF8;
      do
      {
        int16x8x4_t v82 = vld4q_s16(v28);
        v28 += 32;
        __asm { SHLL2           V5.4S, V0.8H, #0x10 }
        v81.val[0] = (float32x4_t)vorrq_s8(_Q5, (int8x16_t)vmovl_high_u16((uint16x8_t)v82.val[2]));
        __asm { SHLL2           V5.4S, V1.8H, #0x10 }
        v81.val[1] = (float32x4_t)vorrq_s8(_Q5, (int8x16_t)vmovl_high_u16((uint16x8_t)v82.val[3]));
        v80.val[0] = (float32x4_t)vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)v82.val[0].i8, 0x10uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v82.val[2].i8));
        v73 = v29 + 16;
        a2 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v82.val[3].i8);
        v80.val[1] = (float32x4_t)vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)v82.val[1].i8, 0x10uLL), (int8x16_t)a2);
        vst2q_f32(v29, v80);
        v74 = v29 + 8;
        vst2q_f32(v74, v81);
        unsigned __int16 v29 = v73;
        v67 -= 8;
      }
      while (v67);
      if ((v65 & 0x7FFFFFF8) != v65) {
        goto LABEL_27;
      }
    }
  }
LABEL_11:
  if (*(_DWORD *)(a1 + 1044))
  {
    *(int32x2_t *)a2.i8 = vsub_s32(*(int32x2_t *)(a1 + 1056), *(int32x2_t *)(a1 + 1572));
    *(void *)(a1 + 1064) = a2.i64[0];
  }
  return *(double *)a2.i64;
}

BOOL sub_100006578(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 1856)) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int16 *)(a1 + 1388);
  int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2 * v2);
  if (v3 == 0x4000) {
    LOWORD(v3) = sub_100015A48(a1, v2);
  }
  uint64_t v4 = (__int16)(sub_100012190(a1) - v3);
  uint64_t v5 = qword_100101CC0;
  if (qword_100101CC0) {
    uint64_t v5 = *(void *)(qword_100101CC0 + 536);
  }
  return v5 < v4;
}

uint64_t sub_1000065FC(uint64_t result, float64x2_t *a2, unint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 1100);
  if ((int)v3 < 1) {
    return result;
  }
  signed int v4 = *(unsigned __int8 *)(result + 1771);
  signed int v5 = *(unsigned __int8 *)(result + 1770);
  if (v3 < 8
    || ((unint64_t)&a2->f64[v3] > a3 ? (BOOL v6 = a3 + v3 > (unint64_t)a2) : (BOOL v6 = 0), v6))
  {
    uint64_t v14 = 0;
  }
  else
  {
    int32x4_t v7 = vdupq_n_s32(v4);
    int32x4_t v8 = vdupq_n_s32(v5);
    __asm { FMOV            V2.2D, #0.5 }
    if (v3 >= 0x10)
    {
      uint64_t v14 = v3 & 0x7FFFFFF0;
      uint64_t v20 = v3 & 0xFFFFFFF0;
      uint64_t v21 = (int8x16_t *)a3;
      int v22 = a2;
      do
      {
        float64x2_t v24 = v22[6];
        float64x2_t v23 = v22[7];
        float64x2_t v26 = v22[4];
        float64x2_t v25 = v22[5];
        float64x2_t v28 = v22[2];
        float64x2_t v27 = v22[3];
        float64x2_t v30 = *v22;
        float64x2_t v29 = v22[1];
        v22 += 8;
        int32x4_t v31 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v24, _Q2)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v23, _Q2)));
        int32x4_t v32 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v26, _Q2)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v25, _Q2)));
        int32x4_t v33 = vminq_s32(vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v30, _Q2)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v29, _Q2))), v7);
        v45.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(v31, v7), v8);
        v45.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(v32, v7), v8);
        v45.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v28, _Q2)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v27, _Q2))), v7), v8);
        v45.val[0] = (int8x16_t)vmaxq_s32(v33, v8);
        *v21++ = vqtbl4q_s8(v45, (int8x16_t)xmmword_1000F4820);
        v20 -= 16;
      }
      while (v20);
      if (v14 == v3) {
        return result;
      }
      if ((v3 & 8) == 0) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v34 = v14;
    uint64_t v14 = v3 & 0xFFFFFFF8;
    unint64_t v35 = (float64x2_t *)((char *)a2 + 8 * v34);
    int32x4_t v36 = (void *)(a3 + v34);
    uint64_t v37 = v34 - v14;
    do
    {
      float64x2_t v39 = v35[2];
      float64x2_t v38 = v35[3];
      float64x2_t v41 = *v35;
      float64x2_t v40 = v35[1];
      v35 += 4;
      int32x4_t v42 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v39, _Q2)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v38, _Q2)));
      int32x4_t v43 = vminq_s32(vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v41, _Q2)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v40, _Q2))), v7);
      v44.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v42, v7), v8);
      v44.val[0] = (int8x16_t)vmaxq_s32(v43, v8);
      *v36++ = vqtbl2q_s8(v44, (int8x16_t)xmmword_1000F4830).u64[0];
      v37 += 8;
    }
    while (v37);
    if (v14 == v3) {
      return result;
    }
  }
LABEL_10:
  uint64_t v15 = v3 - v14;
  int v16 = (unsigned char *)(a3 + v14);
  int v17 = &a2->f64[v14];
  do
  {
    double v18 = *v17++;
    int v19 = (int)(v18 + 0.5);
    if (v19 >= v4) {
      int v19 = v4;
    }
    if (v19 <= v5) {
      LOBYTE(v19) = v5;
    }
    *v16++ = v19;
    --v15;
  }
  while (v15);
  return result;
}

uint64_t sub_1000067B4(uint64_t result, int32x4_t *a2, unint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 1100);
  if ((int)v3 < 1) {
    return result;
  }
  signed int v4 = *(unsigned __int8 *)(result + 1773);
  signed int v5 = *(unsigned __int8 *)(result + 1772);
  if (v3 < 8
    || ((unint64_t)a2 + 4 * v3 > a3 ? (BOOL v6 = a3 + v3 > (unint64_t)a2) : (BOOL v6 = 0), v6))
  {
    uint64_t v9 = 0;
  }
  else
  {
    int32x4_t v7 = vdupq_n_s32(v4);
    int32x4_t v8 = vdupq_n_s32(v5);
    if (v3 >= 0x20)
    {
      uint64_t v9 = v3 & 0x7FFFFFE0;
      uint64_t v15 = a2 + 4;
      int v16 = (int8x16_t *)(a3 + 16);
      uint64_t v17 = v3 & 0xFFFFFFE0;
      do
      {
        v26.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v15[-3], v7), v8);
        v26.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(v15[-4], v7), v8);
        v26.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(v15[-2], v7), v8);
        v26.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(v15[-1], v7), v8);
        v25.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v15[1], v7), v8);
        v25.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(*v15, v7), v8);
        v25.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(v15[2], v7), v8);
        v25.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(v15[3], v7), v8);
        v16[-1] = vqtbl4q_s8(v26, (int8x16_t)xmmword_1000F4820);
        *int v16 = vqtbl4q_s8(v25, (int8x16_t)xmmword_1000F4820);
        v15 += 8;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      if (v9 == v3) {
        return result;
      }
      if ((v3 & 0x18) == 0) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v18 = v9;
    uint64_t v9 = v3 & 0xFFFFFFF8;
    int v19 = (int32x4_t *)((char *)a2 + 4 * v18);
    uint64_t v20 = (void *)(a3 + v18);
    uint64_t v21 = v18 - v9;
    do
    {
      int32x4_t v23 = *v19;
      int32x4_t v22 = v19[1];
      v19 += 2;
      v24.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v22, v7), v8);
      v24.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(v23, v7), v8);
      *v20++ = vqtbl2q_s8(v24, (int8x16_t)xmmword_1000F4830).u64[0];
      v21 += 8;
    }
    while (v21);
    if (v9 == v3) {
      return result;
    }
  }
LABEL_10:
  unsigned __int32 v10 = (unsigned char *)(a3 + v9);
  uint64_t v11 = &a2->i32[v9];
  uint64_t v12 = v3 - v9;
  do
  {
    signed int v14 = *v11++;
    signed int v13 = v14;
    if (v14 >= v4) {
      signed int v13 = v4;
    }
    if (v13 <= v5) {
      LOBYTE(v13) = v5;
    }
    *v10++ = v13;
    --v12;
  }
  while (v12);
  return result;
}

uint64_t sub_100006910(uint64_t result, uint8x16_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 1100);
  if ((int)v2 < 1) {
    return result;
  }
  unsigned int v3 = *(unsigned __int8 *)(result + 1772);
  unsigned int v4 = *(unsigned __int8 *)(result + 1773);
  if (v2 >= 8)
  {
    if (v2 >= 0x20)
    {
      uint64_t v5 = v2 & 0x7FFFFFE0;
      uint8x16_t v6 = (uint8x16_t)vdupq_n_s8(v4);
      uint8x16_t v7 = (uint8x16_t)vdupq_n_s8(v3);
      int32x4_t v8 = a2 + 1;
      uint64_t v9 = v2 & 0xFFFFFFE0;
      do
      {
        uint8x16_t v10 = vmaxq_u8(vminq_u8(*v8, v6), v7);
        v8[-1] = vmaxq_u8(vminq_u8(v8[-1], v6), v7);
        *int32x4_t v8 = v10;
        v8 += 2;
        v9 -= 32;
      }
      while (v9);
      if (v5 == v2) {
        return result;
      }
      if ((v2 & 0x18) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v11 = v5;
    uint64_t v5 = v2 & 0xFFFFFFF8;
    uint8x8_t v12 = (uint8x8_t)vdup_n_s8(v4);
    uint8x8_t v13 = (uint8x8_t)vdup_n_s8(v3);
    signed int v14 = (uint8x8_t *)&a2->i8[v11];
    uint64_t v15 = v11 - v5;
    do
    {
      *signed int v14 = vmax_u8(vmin_u8(*v14, v12), v13);
      ++v14;
      v15 += 8;
    }
    while (v15);
    if (v5 == v2) {
      return result;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
LABEL_13:
  int v16 = &a2->u8[v5];
  uint64_t v17 = v2 - v5;
  do
  {
    unsigned int v18 = *v16;
    if (v18 >= v4) {
      unsigned int v18 = v4;
    }
    if (v18 <= v3) {
      LOBYTE(v18) = v3;
    }
    *v16++ = v18;
    --v17;
  }
  while (v17);
  return result;
}

uint64_t sub_1000069F0(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (a3)
  {
    BOOL v4 = *(_DWORD *)(result + 1016) != 0;
    uint64_t v5 = (_OWORD *)(result + 1624);
    *(_DWORD *)a2 = v4;
    if (a4) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v4 = 0;
    uint64_t v5 = (_OWORD *)(result + 1624);
    *(_DWORD *)a2 = 0;
    if (a4)
    {
LABEL_3:
      int v6 = *(_DWORD *)(result + 1004);
      *(_DWORD *)(a2 + 4) = v6 != 0;
      if (!*(_DWORD *)(result + 1008))
      {
        if (v6)
        {
          long long v7 = v5[1];
          *(void *)(a2 + 16) = *((void *)v5 + 2);
          *(_OWORD *)(a2 + 24) = v7;
          return result;
        }
        goto LABEL_9;
      }
LABEL_8:
      unint64_t v8 = *(void *)(result + 1640);
      *(void *)(a2 + 16) = v8;
      *(_OWORD *)(a2 + 24) = v8;
      return result;
    }
  }
  *(_DWORD *)(a2 + 4) = 0;
  if (*(_DWORD *)(result + 1008)) {
    goto LABEL_8;
  }
LABEL_9:
  long long v9 = *v5;
  if (v4) {
    *(void *)(a2 + 16) = *(void *)(result + 1728);
  }
  else {
    *(void *)(a2 + 16) = v9;
  }
  *(_OWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t sub_100006A98(uint64_t result)
{
  if (result) {
    return sub_1000C321C(result);
  }
  return result;
}

uint64_t sub_100006AA4(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, unsigned __int16 a5, int a6, int32x4_t a7, double a8, int32x4_t a9, int32x4_t a10, int8x16_t a11, int8x16_t a12)
{
  int v17 = *(unsigned __int16 *)(a1 + 1600);
  BOOL v18 = v17 != a5;
  uint64_t v19 = *(unsigned __int16 *)(a1 + 1388);
  *(_WORD *)(a1 + 1600) = a5;
  if (a6)
  {
    sub_100015968(a1);
LABEL_3:
    *(_WORD *)(a1 + 1974) = 0x4000;
    goto LABEL_4;
  }
  if (v17 != a5)
  {
    *(_WORD *)(*(void *)(a1 + 1792) + 2 * v19) = 0x4000;
    uint64_t v33 = *(int *)(a1 + 1824);
    if ((int)v33 < *(_DWORD *)(a1 + 1828))
    {
      uint64_t v34 = *(void *)(a1 + 1832);
      *(_DWORD *)(a1 + 1824) = v33 + 1;
      *(_WORD *)(v34 + 2 * v33) = v19;
    }
    uint64_t v35 = *(unsigned __int16 *)(a1 + 1960);
    if (v35 != 0xFFFF)
    {
      *(_WORD *)(*(void *)(a1 + 1792) + 2 * v35) = 0x4000;
      uint64_t v36 = *(int *)(a1 + 1824);
      if ((int)v36 < *(_DWORD *)(a1 + 1828))
      {
        __int16 v37 = *(_WORD *)(a1 + 1960);
        uint64_t v38 = *(void *)(a1 + 1832);
        *(_DWORD *)(a1 + 1824) = v36 + 1;
        *(_WORD *)(v38 + 2 * v36) = v37;
      }
    }
    goto LABEL_3;
  }
LABEL_4:
  *(void *)(a1 + 1704) = *(void *)(a4 + 24);
  *(void *)(a1 + 1712) = *(void *)(a4 + 16);
  *(void *)(a1 + 1720) = *(void *)(a4 + 32);
  if (*(_DWORD *)(a1 + 1016)) {
    *(_DWORD *)(a1 + 976) = *(_DWORD *)a4;
  }
  if (*(_DWORD *)(a1 + 1004)) {
    *(_DWORD *)(a1 + 656) = *(_DWORD *)(a4 + 4);
  }
  sub_100005B0C(a1, a2, v18, a7, a8, a9, a10, a11, a12);
  *(_DWORD *)(a1 + 1604) = 1;
  *(_DWORD *)(a1 + 1976) = *a3;
  uint64_t v27 = *(void *)(a1 + 1792);
  uint64_t result = *(unsigned __int16 *)(v27 + 2 * v19);
  if (result == 0x4000)
  {
    uint64_t result = sub_100015A48(a1, v19);
    uint64_t v27 = *(void *)(a1 + 1792);
  }
  *(_WORD *)(v27 + 2 * v19) = result;
  if (*(_DWORD *)(a1 + 1968))
  {
    uint64_t result = sub_100011D30(a1, v20, v21, v22, v23, v24, v25, v26);
    uint64_t v29 = *(void *)(a1 + 1792);
    int v30 = *(__int16 *)(v29 + 2 * v19);
    if (v30 >= (int)result) {
      LOWORD(v30) = result;
    }
    *(_WORD *)(v29 + 2 * v19) = v30;
    uint64_t v31 = *(int *)(a1 + 1824);
    if ((int)v31 < *(_DWORD *)(a1 + 1828))
    {
      uint64_t v32 = *(void *)(a1 + 1832);
      *(_DWORD *)(a1 + 1824) = v31 + 1;
      *(_WORD *)(v32 + 2 * v31) = v19;
    }
  }
  else if (*(_DWORD *)(a1 + 1964) && v17 != a5)
  {
    return sub_100010E70(a1);
  }
  return result;
}

uint64_t sub_100006C90(uint64_t result, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  *(_DWORD *)(result + 1604) = 0;
  *(void *)(result + 1704) = 0;
  *(void *)(result + 1720) = 0;
  *(void *)(result + 1712) = 0;
  if (qword_100101CC0)
  {
    if (*(_DWORD *)(qword_100101CC0 + 1064)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 1736))(result, 1);
    }
  }
  return result;
}

uint64_t sub_100006CCC(uint64_t a1, BOOL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(unsigned __int16 *)(a1 + 1388);
  if (qword_100101CC0)
  {
    if (*(_DWORD *)(qword_100101CC0 + 5356))
    {
      LOWORD(v11) = sub_100011C54(a1);
      BOOL v12 = 0;
      if (!a2) {
        return (__int16)v11;
      }
      goto LABEL_17;
    }
    if (*(_DWORD *)(qword_100101CC0 + 5292))
    {
      int v13 = sub_100011D30(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      int v11 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2 * v10);
      if (v11 == 0x4000) {
        LOWORD(v11) = sub_100015A48(a1, v10);
      }
      BOOL v12 = 0;
      if (v13 < (__int16)v11) {
        LOWORD(v11) = v13;
      }
      if (!a2) {
        return (__int16)v11;
      }
LABEL_17:
      *a2 = v12;
      return (__int16)v11;
    }
  }
  int v14 = sub_100012190(a1);
  int v11 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2 * v10);
  if (v11 == 0x4000) {
    LOWORD(v11) = sub_100015A48(a1, v10);
  }
  BOOL v12 = v14 < (__int16)v11;
  if (v14 < (__int16)v11) {
    LOWORD(v11) = v14;
  }
  if (a2) {
    goto LABEL_17;
  }
  return (__int16)v11;
}

uint64_t sub_100006DB4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 2016)) {
    return 0xFFFFFFFFLL;
  }
  int v6 = *(_DWORD *)(a1 + 1100);
  int v7 = *(_DWORD *)(a1 + 1188);
  unsigned int v8 = sub_1000C0758(*(_DWORD *)(a1 + 1072), 0xFFFFFFFF);
  unsigned int v9 = sub_1000C0758(*(_DWORD *)(a1 + 1092), v8);
  unsigned int v10 = sub_1000C0758(*(_DWORD *)(a1 + 1096), v9);
  unsigned int v11 = sub_1000C0758(*(_DWORD *)(a1 + 1100), v10);
  unsigned int v12 = sub_1000C0758(*(_DWORD *)(a1 + 1104), v11);
  unsigned int v13 = sub_1000C072C(*(unsigned __int16 *)(a1 + 1136), v12);
  unsigned int v14 = sub_1000C0758(*(_DWORD *)(a1 + 1180), v13);
  unsigned int v15 = sub_1000C0758(*(_DWORD *)(a1 + 1188), v14);
  unsigned int v16 = sub_1000C0758(*(_DWORD *)(a1 + 1192), v15);
  unsigned int v17 = sub_1000C0758(*(_DWORD *)(a1 + 1200), v16);
  unsigned int v18 = sub_1000C0758(*(_DWORD *)(a1 + 1052), v17);
  unsigned int v19 = sub_1000C0758(*(_DWORD *)(a1 + 1384), v18);
  unsigned int v20 = sub_1000C072C(*(unsigned __int16 *)(a1 + 1388), v19);
  unsigned int v21 = sub_1000C072C(*(unsigned __int16 *)(a1 + 1390), v20);
  unsigned int v22 = sub_1000C0758(*(_DWORD *)(a1 + 1392), v21);
  unsigned int v23 = sub_1000C0758(*(unsigned __int16 *)(a1 + 1396), v22);
  unsigned int v24 = sub_1000C0758(*(_DWORD *)(a1 + 1016), v23);
  unsigned int v25 = sub_1000C0758(*(_DWORD *)(a1 + 1760), v24);
  unsigned int v26 = sub_1000C0758(*(_DWORD *)(a1 + 1764), v25);
  unsigned int v27 = sub_1000C0710(*(unsigned char *)(a1 + 1770), v26);
  unsigned int v28 = sub_1000C0710(*(unsigned char *)(a1 + 1771), v27);
  if (a2)
  {
    unsigned int v29 = sub_1000C072C(*(unsigned __int16 *)(a1 + 1600), v28);
    unsigned int v28 = sub_1000C072C(*(unsigned __int16 *)(a1 + 1602), v29);
  }
  unsigned int v30 = sub_1000C0758(*(_DWORD *)(a1 + 1032), v28);
  uint64_t v38 = sub_1000C0758(*(_DWORD *)(a1 + 1296), v30);
  if (*(_DWORD *)(a1 + 996) && !*(_DWORD *)(a1 + 1036) && *(int *)(a1 + 1072) >= 1)
  {
    int v50 = 0;
    unsigned __int16 v51 = 0;
    do
    {
      if (*(_DWORD *)(a1 + 2012))
      {
        if (!*(_DWORD *)(a1 + 1032))
        {
          int v57 = 1;
          int v58 = v50;
LABEL_27:
          int v60 = *(_DWORD *)(a1 + 1120);
          int v61 = v60 * v58;
          if (*(_DWORD *)(a1 + 1080) <= v50) {
            uint64_t v62 = 96;
          }
          else {
            uint64_t v62 = 16;
          }
          int32x4_t v54 = (unint64_t *)(*(void *)(a1 + v62) + v61);
          int v55 = v60 * v57;
          int v56 = 1;
          goto LABEL_18;
        }
        int v57 = 1;
        int v58 = v50;
        if (*(_DWORD *)(a1 + 1108))
        {
LABEL_33:
          uint64_t v64 = 3 * v58;
          if (*(_DWORD *)(a1 + 1080) <= v50) {
            uint64_t v65 = *(void *)(a1 + 144);
          }
          else {
            uint64_t v65 = *(void *)(a1 + 136);
          }
          int32x4_t v54 = (unint64_t *)(v65 + 4 * v64);
          goto LABEL_17;
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 1176))
        {
          uint64_t v59 = (int *)(*(void *)(a1 + 1160) + 4 * v51);
          int v58 = *v59;
          int v57 = v59[1] - *v59;
          if (!*(_DWORD *)(a1 + 1032)) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v63 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * v51);
          int v58 = *v63;
          int v57 = v63[1] - v58;
          if (!*(_DWORD *)(a1 + 1032)) {
            goto LABEL_27;
          }
        }
        if (*(_DWORD *)(a1 + 1108)) {
          goto LABEL_33;
        }
      }
      int v52 = *(_DWORD *)(a1 + 1128) * v58;
      if (*(_DWORD *)(a1 + 1080) <= v50) {
        uint64_t v53 = 144;
      }
      else {
        uint64_t v53 = 136;
      }
      int32x4_t v54 = (unint64_t *)(*(void *)(a1 + v53) + 4 * v52);
LABEL_17:
      int v55 = *(_DWORD *)(a1 + 1128) * v57;
      int v56 = 4;
LABEL_18:
      uint64_t v38 = sub_1000C09B0(v54, v56, v55, v38);
      int v50 = ++v51;
    }
    while (*(_DWORD *)(a1 + 1072) > (int)v51);
  }
  if (*(_DWORD *)(a1 + 1004))
  {
    uint64_t v39 = *(int *)(a1 + 576);
    int v40 = *(_DWORD *)(*(void *)(a1 + 584) + 4 * v39);
    int v41 = *(_DWORD *)(*(void *)(a1 + 616) + 4 * v39);
    int v42 = v39 * *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * *(int *)(a1 + 1072));
    uint64_t v43 = sub_1000C0758(*(_DWORD *)(a1 + 576), v38);
    uint64_t v44 = sub_1000C09B0(*(unint64_t **)(a1 + 600), 4, (int)v39 + 1, v43);
    uint64_t v45 = sub_1000C09B0(*(unint64_t **)(a1 + 616), 4, (int)v39 + 1, v44);
    uint64_t v46 = sub_1000C09B0(*(unint64_t **)(a1 + 584), 4, (int)v39 + 1, v45);
    if (*(_DWORD *)(a1 + 724))
    {
      int v47 = v40 / 4;
      uint8x16_t v48 = *(unint64_t **)(a1 + 536);
      int v49 = 4;
    }
    else
    {
      uint8x16_t v48 = *(unint64_t **)(a1 + 520);
      int v49 = 1;
      int v47 = v40;
    }
    uint64_t v66 = sub_1000C09B0(v48, v49, v47, v46);
    unsigned int v67 = sub_1000C09B0(*(unint64_t **)(a1 + 640), 1, v42, v66);
    unsigned int v68 = sub_1000C0758(*(_DWORD *)(a1 + 716), v67);
    uint64_t v38 = sub_1000C0758(*(_DWORD *)(a1 + 720), v68);
    if (*(_DWORD *)(a1 + 724))
    {
      uint64_t v69 = sub_1000C09B0(*(unint64_t **)(a1 + 552), 2, v41, v38);
      uint64_t v38 = sub_1000C09B0(*(unint64_t **)(a1 + 568), 2, v39, v69);
    }
    if (a2) {
      uint64_t v38 = sub_1000C09B0(*(unint64_t **)(a1 + 632), 2, v41, v38);
    }
  }
  if (*(_DWORD *)(a1 + 1296) != 5 && !*(_DWORD *)(a1 + 1036))
  {
    if (*(_DWORD *)(a1 + 1032) && *(_DWORD *)(a1 + 1760))
    {
      v70 = *(unint64_t **)(a1 + 1224);
      int v71 = *(_DWORD *)(a1 + 1124) * v7 / 2;
      int v72 = 4;
    }
    else if (*(_DWORD *)(a1 + 1116))
    {
      v70 = *(unint64_t **)(a1 + 1216);
      int v71 = *(_DWORD *)(a1 + 1124) * v7;
      int v72 = 1;
    }
    else
    {
      if (*(_DWORD *)(a1 + 1112))
      {
        v110 = (unint64_t *)sub_1000CD3E8(2 * *(int *)(a1 + 1100), v31, v32, v33, v34, v35, v36, v37);
        if (v7 >= 1)
        {
          int v111 = 0;
          v112 = *(unsigned __int8 **)(a1 + 1208);
          do
          {
            sub_100004EF0((_DWORD *)a1, v112, v110);
            uint64_t v38 = sub_1000C09B0(v110, 2, *(_DWORD *)(a1 + 1100), v38);
            v112 += 2 * *(int *)(a1 + 1124);
            ++v111;
          }
          while (v7 > (unsigned __int16)v111);
        }
        sub_1000CD4D0(v110, 2 * *(int *)(a1 + 1100));
        goto LABEL_50;
      }
      v70 = *(unint64_t **)(a1 + 1208);
      int v71 = *(_DWORD *)(a1 + 1124) * v7;
      int v72 = 2;
    }
    uint64_t v38 = sub_1000C09B0(v70, v72, v71, v38);
LABEL_50:
    uint64_t v38 = sub_1000C09B0(*(unint64_t **)(a1 + 1240), 4, v7, v38);
  }
  if (a2)
  {
    v73 = *(unint64_t **)(a1 + 1544);
    if (v73) {
      LODWORD(v38) = sub_1000C09B0(v73, 1, v6, v38);
    }
  }
  unsigned int v74 = sub_1000C0758(*(_DWORD *)(a1 + 1044), v38);
  unsigned int v75 = sub_1000C0758(*(_DWORD *)(a1 + 1048), v74);
  unsigned int v76 = sub_1000C0758(*(_DWORD *)(a1 + 1056), v75);
  uint64_t v77 = sub_1000C0758(*(_DWORD *)(a1 + 1060), v76);
  if (*(_DWORD *)(a1 + 1032))
  {
    if (a2)
    {
      int v78 = *(_DWORD *)(a1 + 1128);
      if (*(_DWORD *)(a1 + 1760))
      {
        uint64_t v79 = sub_1000C09B0(*(unint64_t **)(a1 + 1560), 4, v78, v77);
      }
      else
      {
        unsigned int v80 = sub_1000C09B0(*(unint64_t **)(a1 + 1552), 4, v78, v77);
        unsigned int v81 = sub_1000C0758(*(_DWORD *)(a1 + 1572), v80);
        uint64_t v79 = sub_1000C0758(*(_DWORD *)(a1 + 1576), v81);
      }
      uint64_t v77 = v79;
    }
    if (!*(_DWORD *)(a1 + 1760) && *(_DWORD *)(a1 + 996) && *(int *)(a1 + 1072) >= 1)
    {
      int v91 = 0;
      unsigned __int16 v92 = 0;
      do
      {
        if (*(_DWORD *)(a1 + 2012))
        {
          int v93 = 1;
          int v94 = v91;
          if (!*(_DWORD *)(a1 + 1108)) {
            goto LABEL_93;
          }
        }
        else if (*(_DWORD *)(a1 + 1176))
        {
          v100 = (int *)(*(void *)(a1 + 1160) + 4 * v92);
          int v94 = *v100;
          int v93 = v100[1] - *v100;
          if (!*(_DWORD *)(a1 + 1108)) {
            goto LABEL_93;
          }
        }
        else
        {
          v101 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * v92);
          int v94 = *v101;
          int v93 = v101[1] - v94;
          if (!*(_DWORD *)(a1 + 1108))
          {
LABEL_93:
            BOOL v102 = *(_DWORD *)(a1 + 1080) <= v91;
            uint64_t v103 = 104;
            if (!v102) {
              uint64_t v103 = 32;
            }
            uint64_t v104 = 120;
            if (!v102) {
              uint64_t v104 = 48;
            }
            uint64_t v105 = *(void *)(a1 + v104);
            uint64_t v77 = sub_1000C09B0((unint64_t *)(*(void *)(a1 + v103) + 4 * v94), 4, v93, v77);
            if (!*(_DWORD *)(a1 + 1044)) {
              goto LABEL_81;
            }
            if (v105) {
              v98 = (unint64_t *)(v105 + 4 * v94);
            }
            else {
              v98 = 0;
            }
            int v99 = 4;
            goto LABEL_80;
          }
        }
        BOOL v102 = *(_DWORD *)(a1 + 1080) <= v91;
        uint64_t v95 = 112;
        if (v102)
        {
          uint64_t v96 = 128;
        }
        else
        {
          uint64_t v95 = 64;
          uint64_t v96 = 80;
        }
        uint64_t v97 = *(void *)(a1 + v96);
        uint64_t v77 = sub_1000C09B0((unint64_t *)(*(void *)(a1 + v95) + 2 * v94), 2, v93, v77);
        if (!*(_DWORD *)(a1 + 1044)) {
          goto LABEL_81;
        }
        v98 = (unint64_t *)(v97 + 2 * v94);
        int v99 = 2;
LABEL_80:
        uint64_t v77 = sub_1000C09B0(v98, v99, v93, v77);
LABEL_81:
        int v91 = ++v92;
      }
      while (*(_DWORD *)(a1 + 1072) > (int)v92);
    }
  }
  if (a2)
  {
    int16x8x4_t v82 = *(unint64_t **)(a1 + 1792);
    if (v82) {
      uint64_t v77 = sub_1000C09B0(v82, 2, *(_DWORD *)(a1 + 1072), v77);
    }
  }
  uint64_t v83 = *(void *)(a1 + 1304);
  if (v83)
  {
    unsigned int v84 = sub_100038ED4(v83);
    uint64_t v77 = sub_1000C0758(v84, v77);
  }
  uint64_t v85 = *(void *)(a1 + 944);
  if (v85)
  {
    unsigned int v86 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 952))(v85, a2);
    uint64_t v77 = sub_1000C0758(v86, v77);
  }
  v87 = *(unint64_t **)(a1 + 1144);
  if (v87) {
    uint64_t v77 = sub_1000C09B0(v87, 2, *(_DWORD *)(a1 + 1072), v77);
  }
  v88 = *(unint64_t **)(a1 + 1160);
  if (v88) {
    LODWORD(v77) = sub_1000C09B0(v88, 4, *(_DWORD *)(a1 + 1072), v77);
  }
  if (*(void *)(a1 + 1368))
  {
    if (*(int *)(a1 + 1384) < 1)
    {
      LODWORD(v90) = -1;
    }
    else
    {
      int v89 = 0;
      uint64_t v90 = 0xFFFFFFFFLL;
      do
        uint64_t v90 = sub_1000C09B0((unint64_t *)(*(void *)(a1 + 1368) + 2 * *(_DWORD *)(a1 + 1096) * v89++), 2, *(_DWORD *)(a1 + 1096), v90);
      while (v89 < *(_DWORD *)(a1 + 1384));
    }
    LODWORD(v77) = sub_1000C085C(v90, 4, v77);
  }
  if (*(_DWORD *)(a1 + 992))
  {
    unsigned int v106 = sub_100081724(a1);
    LODWORD(v77) = sub_1000C085C(v106, 4, v77);
  }
  if (*(void *)(a1 + 1432))
  {
    unsigned int v107 = sub_10000A020(a1);
    LODWORD(v77) = sub_1000C085C(v107, 4, v77);
  }
  uint64_t v108 = sub_1000C0758(*(_DWORD *)(a1 + 1864), v77);
  if (*(_DWORD *)(a1 + 1864)) {
    LODWORD(v108) = sub_1000C09B0(*(unint64_t **)(a1 + 1840), 1, *(_DWORD *)(a1 + 1072), v108);
  }
  uint64_t v2 = sub_1000C0758(*(_DWORD *)(a1 + 1964), v108);
  if (!*(_DWORD *)(a1 + 1964)) {
    return v2;
  }
  unsigned int v109 = sub_100010F2C(a1, a2);
  return sub_1000C085C(v109, 4, v2);
}

uint64_t sub_100007694(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(**(void **)(a1 + 1432) + 8 * a2);
  uint64_t v3 = sub_1000C0758(*(_DWORD *)v2, 0xFFFFFFFF);
  uint64_t v4 = sub_1000C09B0(*(unint64_t **)(v2 + 8), 2, *(_DWORD *)v2, v3);
  uint64_t v5 = *(unint64_t **)(v2 + 16);
  int v6 = *(_DWORD *)v2;
  return sub_1000C09B0(v5, 2, v6, v4);
}

uint64_t sub_1000076FC(unsigned int *a1, int a2)
{
  if (a2 && a1[502]) {
    return a1[505];
  }
  else {
    return a1[350];
  }
}

void sub_100007720(uint64_t a1, unsigned int a2)
{
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  int v4 = *(_DWORD *)(a1 + 2012);
  if (v4 || *(_DWORD *)(a1 + 1072) <= (signed int)a2)
  {
    int v5 = 1;
    uint64_t v6 = *(int *)(a1 + 1072);
    BOOL v7 = (int)a2 < (int)v6;
    if (*(_DWORD *)(a1 + 1108)) {
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 1176))
  {
    int v5 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2 + 2)
       - *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    uint64_t v6 = *(int *)(a1 + 1072);
    BOOL v7 = (int)a2 < (int)v6;
    if (*(_DWORD *)(a1 + 1108)) {
      goto LABEL_11;
    }
LABEL_5:
    if (!v7)
    {
      uint64_t v10 = a2 - v6;
      unsigned int v9 = (_DWORD *)(*(void *)(a1 + 800) + 4 * v10);
      if (*(_DWORD *)(a1 + 1044))
      {
        unsigned int v11 = (void *)(a1 + 808);
LABEL_22:
        unsigned int v13 = 0;
        unsigned int v15 = 0;
        unsigned int v14 = (_DWORD *)(*v11 + 4 * v10);
        if (v5 < 1) {
          return;
        }
        goto LABEL_37;
      }
      goto LABEL_36;
    }
    signed int v8 = a2;
    if (v4)
    {
      unsigned int v9 = (_DWORD *)(*(void *)(a1 + 40) + 4 * (int)a2);
      if (*(_DWORD *)(a1 + 1044))
      {
LABEL_9:
        uint64_t v10 = v8;
        unsigned int v11 = (void *)(a1 + 56);
        goto LABEL_22;
      }
    }
    else if (*(_DWORD *)(a1 + 1176))
    {
      signed int v8 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      unsigned int v9 = (_DWORD *)(*(void *)(a1 + 40) + 4 * v8);
      if (*(_DWORD *)(a1 + 1044)) {
        goto LABEL_9;
      }
    }
    else
    {
      signed int v8 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      unsigned int v9 = (_DWORD *)(*(void *)(a1 + 40) + 4 * *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2));
      if (*(_DWORD *)(a1 + 1044)) {
        goto LABEL_9;
      }
    }
LABEL_36:
    unsigned int v14 = 0;
    unsigned int v13 = 0;
    unsigned int v15 = 0;
    if (v5 < 1) {
      return;
    }
    goto LABEL_37;
  }
  int v5 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2 + 4) - *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
  uint64_t v6 = *(int *)(a1 + 1072);
  BOOL v7 = (int)a2 < (int)v6;
  if (!*(_DWORD *)(a1 + 1108)) {
    goto LABEL_5;
  }
LABEL_11:
  if (v7)
  {
    signed int v12 = a2;
    if (v4)
    {
      unsigned int v13 = (_WORD *)(*(void *)(a1 + 72) + 2 * (int)a2);
      if (!*(_DWORD *)(a1 + 1044)) {
        goto LABEL_33;
      }
    }
    else if (*(_DWORD *)(a1 + 1176))
    {
      signed int v12 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      unsigned int v13 = (_WORD *)(*(void *)(a1 + 72) + 2 * v12);
      if (!*(_DWORD *)(a1 + 1044)) {
        goto LABEL_33;
      }
    }
    else
    {
      signed int v12 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      unsigned int v13 = (_WORD *)(*(void *)(a1 + 72) + 2 * *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2));
      if (!*(_DWORD *)(a1 + 1044)) {
        goto LABEL_33;
      }
    }
    unsigned int v9 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = (_WORD *)(*(void *)(a1 + 88) + 2 * v12);
    if (v5 < 1) {
      return;
    }
    goto LABEL_37;
  }
  uint64_t v16 = a2 - v6;
  unsigned int v13 = (_WORD *)(*(void *)(a1 + 816) + 2 * v16);
  if (*(_DWORD *)(a1 + 1044))
  {
    unsigned int v9 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = (_WORD *)(*(void *)(a1 + 824) + 2 * v16);
    if (v5 < 1) {
      return;
    }
    goto LABEL_37;
  }
LABEL_33:
  unsigned int v9 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  if (v5 >= 1)
  {
LABEL_37:
    int v17 = 0;
    while (1)
    {
      sub_1000043BC(a1, a2, v17, (unint64_t *)&v59);
      if (!qword_100101CC0) {
        break;
      }
      unsigned int v20 = *(_DWORD *)(a1 + 1104);
      if (!*(_DWORD *)(qword_100101CC0 + 3496)) {
        goto LABEL_48;
      }
      if (v20 != 12)
      {
        if (v20 == 24)
        {
          if (!*(_DWORD *)(a1 + 1108))
          {
            sub_1000190D8(a1, a2, v17, (_DWORD *)&v60 + 1, (float *)&v60, v18, v19);
            int v21 = *(_DWORD *)(a1 + 1044);
            int v22 = HIDWORD(v60);
            if (*(_DWORD *)(a1 + 1108)) {
              goto LABEL_65;
            }
            goto LABEL_68;
          }
LABEL_52:
          uint64_t v60 = 0;
          unsigned int v23 = v59;
          uint64_t v24 = v20;
          unint64_t v25 = v20 - 9;
          if (v25 >= 7)
          {
LABEL_53:
            uint64_t v26 = (v24 - 1);
            if (v26 < v25) {
              goto LABEL_61;
            }
            if (&v60 < (uint64_t *)&v23[v26 + 1] && &v23[v26 + 9 - v24] < (unsigned __int8 *)&v60 + 4) {
              goto LABEL_61;
            }
            uint64_t v28 = v24 - 8;
            if (v25 >= 0x1F)
            {
              int32x4_t v34 = 0uLL;
              uint64_t v30 = v28 & 0x1FFFFFFE0;
              int32x4_t v35 = 0uLL;
              uint64_t v36 = v24 - 1;
              uint64_t v37 = v28 & 0x1FFFFFFE0;
              int32x4_t v38 = 0uLL;
              int32x4_t v39 = 0uLL;
              int32x4_t v40 = 0uLL;
              int32x4_t v41 = 0uLL;
              int32x4_t v42 = 0uLL;
              int32x4_t v43 = 0uLL;
              do
              {
                uint64_t v44 = &v23[v36];
                int8x16_t v45 = vrev64q_s8(*(int8x16_t *)(v44 - 15));
                uint8x16_t v46 = (uint8x16_t)vextq_s8(v45, v45, 8uLL);
                int8x16_t v47 = vrev64q_s8(*(int8x16_t *)(v44 - 31));
                uint8x16_t v48 = (uint8x16_t)vextq_s8(v47, v47, 8uLL);
                uint16x8_t v49 = vmovl_u8(*(uint8x8_t *)v46.i8);
                uint16x8_t v50 = vmovl_high_u8(v46);
                uint16x8_t v51 = vmovl_u8(*(uint8x8_t *)v48.i8);
                uint16x8_t v52 = vmovl_high_u8(v48);
                int32x4_t v39 = (int32x4_t)vmlal_high_u16((uint32x4_t)v39, v50, v50);
                int32x4_t v38 = (int32x4_t)vmlal_u16((uint32x4_t)v38, *(uint16x4_t *)v50.i8, *(uint16x4_t *)v50.i8);
                int32x4_t v35 = (int32x4_t)vmlal_high_u16((uint32x4_t)v35, v49, v49);
                int32x4_t v34 = (int32x4_t)vmlal_u16((uint32x4_t)v34, *(uint16x4_t *)v49.i8, *(uint16x4_t *)v49.i8);
                int32x4_t v43 = (int32x4_t)vmlal_high_u16((uint32x4_t)v43, v52, v52);
                int32x4_t v42 = (int32x4_t)vmlal_u16((uint32x4_t)v42, *(uint16x4_t *)v52.i8, *(uint16x4_t *)v52.i8);
                int32x4_t v41 = (int32x4_t)vmlal_high_u16((uint32x4_t)v41, v51, v51);
                int32x4_t v40 = (int32x4_t)vmlal_u16((uint32x4_t)v40, *(uint16x4_t *)v51.i8, *(uint16x4_t *)v51.i8);
                v36 -= 32;
                v37 -= 32;
              }
              while (v37);
              int v53 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v40, v34), vaddq_s32(v42, v38)), vaddq_s32(vaddq_s32(v41, v35), vaddq_s32(v43, v39))));
              LODWORD(v60) = v53;
              if (v28 == v30) {
                goto LABEL_64;
              }
              unsigned int v29 = v53;
              if ((v28 & 0x18) != 0) {
                goto LABEL_75;
              }
              uint64_t v31 = v24 - v30;
            }
            else
            {
              unsigned int v29 = 0;
              uint64_t v30 = 0;
LABEL_75:
              uint64_t v31 = v24 - (v28 & 0x1FFFFFFF8);
              int32x4_t v54 = 0uLL;
              int32x4_t v55 = (int32x4_t)v29;
              uint64_t v56 = ~v30 + v24;
              uint64_t v57 = v30 - (v28 & 0x1FFFFFFF8);
              do
              {
                uint16x8_t v58 = vmovl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)&v23[v56 - 7]));
                int32x4_t v54 = (int32x4_t)vmlal_high_u16((uint32x4_t)v54, v58, v58);
                int32x4_t v55 = (int32x4_t)vmlal_u16((uint32x4_t)v55, *(uint16x4_t *)v58.i8, *(uint16x4_t *)v58.i8);
                v56 -= 8;
                v57 += 8;
              }
              while (v57);
              LODWORD(v60) = vaddvq_s32(vaddq_s32(v55, v54));
              unsigned int v29 = v60;
              if (v28 == (v28 & 0x1FFFFFFF8))
              {
LABEL_64:
                HIDWORD(v60) = v23[7] * v23[7] + v23[6] * v23[6] + v23[5] * v23[5] + v23[4] * v23[4];
                HIDWORD(v60) += v23[3] * v23[3];
                HIDWORD(v60) += v23[2] * v23[2];
                HIDWORD(v60) += v23[1] * v23[1];
                HIDWORD(v60) += *v23 * *v23;
                int v21 = *(_DWORD *)(a1 + 1044);
                int v22 = HIDWORD(v60);
                if (*(_DWORD *)(a1 + 1108)) {
                  goto LABEL_65;
                }
                goto LABEL_68;
              }
            }
LABEL_62:
            unint64_t v32 = v31 + 1;
            do
            {
              int v33 = v23[(v32 - 2)];
              v29 += v33 * v33;
              LODWORD(v60) = v29;
              --v32;
            }
            while (v32 > 9);
            goto LABEL_64;
          }
LABEL_61:
          unsigned int v29 = 0;
          uint64_t v31 = v24;
          goto LABEL_62;
        }
LABEL_48:
        uint64_t v60 = 0;
        unsigned int v23 = v59;
        if ((int)v20 < 9) {
          goto LABEL_64;
        }
        uint64_t v24 = v20;
        unint64_t v25 = v20 - 9;
        if (v25 >= 7) {
          goto LABEL_53;
        }
        goto LABEL_61;
      }
      if (*(_DWORD *)(a1 + 1108)) {
        goto LABEL_52;
      }
      sub_1000191DC(a1, a2, v17, (_DWORD *)&v60 + 1, &v60);
      int v21 = *(_DWORD *)(a1 + 1044);
      int v22 = HIDWORD(v60);
      if (*(_DWORD *)(a1 + 1108))
      {
LABEL_65:
        if (v21)
        {
          *v13++ = v22;
          *v15++ = v60;
        }
        else
        {
          *v13++ = v60 + v22;
        }
        goto LABEL_39;
      }
LABEL_68:
      if (v21)
      {
        *v9++ = v22;
        *v14++ = v60;
      }
      else
      {
        *v9++ = v60 + v22;
      }
LABEL_39:
      if (++v17 == v5) {
        return;
      }
    }
    unsigned int v20 = *(_DWORD *)(a1 + 1104);
    goto LABEL_48;
  }
}

void sub_100007CB8(uint64_t a1)
{
  if (*(int *)(a1 + 1084) >= 1)
  {
    int v2 = 0;
    do
      sub_100007720(a1, (unsigned __int16)v2++);
    while (*(_DWORD *)(a1 + 1084) > (int)(unsigned __int16)v2);
  }
}

uint64_t sub_100007D04(uint64_t result)
{
  *(void *)(result + 32) = *(void *)(result + 40);
  *(void *)(result + 64) = *(void *)(result + 72);
  if (*(_DWORD *)(result + 1044))
  {
    uint64_t v1 = *(void *)(result + 88);
    *(void *)(result + 48) = *(void *)(result + 56);
    *(void *)(result + 80) = v1;
  }
  else
  {
    *(void *)(result + 48) = 0;
    *(void *)(result + 80) = 0;
  }
  return result;
}

uint64_t sub_100007D44(uint64_t a1, int a2, int a3)
{
  int v5 = *(_DWORD *)(a1 + 1120);
  int v6 = *(_DWORD *)(a1 + 996);
  uint64_t v7 = 1080;
  if (!a3) {
    uint64_t v7 = 1072;
  }
  uint64_t v8 = 1184;
  if (!a3) {
    uint64_t v8 = 1180;
  }
  int v9 = *(_DWORD *)(a1 + v8);
  int v10 = *(_DWORD *)(a1 + v7);
  uint64_t v11 = *(void *)(a1 + 168);
  if (*(_DWORD *)(a1 + 1036))
  {
    if (!*(void *)(a1 + 1536))
    {
      uint64_t result = sub_1000C33A0(2 * *(int *)(a1 + 1100));
      *(void *)(a1 + 1536) = result;
      if (!result) {
        return result;
      }
    }
    if (!*(void *)(a1 + 1528))
    {
      uint64_t result = sub_1000C33A0(*(int *)(a1 + 1100));
      *(void *)(a1 + 1528) = result;
      if (!result) {
        return result;
      }
    }
  }
  if (!*(void *)(a1 + 24) && !*(void *)(a1 + 152) && !v11 && v6)
  {
    int v13 = v9 * v5;
    *(_DWORD *)(a1 + 1084) = v10;
    *(_DWORD *)(a1 + 1088) = v9;
    if (*(_DWORD *)(a1 + 1032))
    {
      size_t v14 = 4 * (v13 / 4);
      uint64_t result = sub_1000C33A0(v14);
      *(void *)(a1 + 152) = result;
      if (!result) {
        return result;
      }
      if (a2)
      {
        memcpy((void *)result, *(const void **)(a1 + 136), v14);
        uint64_t result = *(void *)(a1 + 152);
      }
      *(void *)(a1 + 136) = result;
      if (!*(_DWORD *)(a1 + 1032))
      {
LABEL_58:
        *(void *)(a1 + 32) = *(void *)(a1 + 40);
        *(void *)(a1 + 64) = *(void *)(a1 + 72);
        if (*(_DWORD *)(a1 + 1044))
        {
          uint64_t v20 = *(void *)(a1 + 56);
          uint64_t v21 = *(void *)(a1 + 88);
        }
        else
        {
          uint64_t v20 = 0;
          uint64_t v21 = 0;
        }
        *(void *)(a1 + 48) = v20;
        *(void *)(a1 + 80) = v21;
        goto LABEL_11;
      }
    }
    else
    {
      size_t v19 = v13;
      uint64_t result = sub_1000C33A0(v13);
      *(void *)(a1 + 24) = result;
      if (!result) {
        return result;
      }
      if (a2)
      {
        memcpy((void *)result, *(const void **)(a1 + 16), v19);
        uint64_t result = *(void *)(a1 + 24);
      }
      *(void *)(a1 + 16) = result;
      if (!*(_DWORD *)(a1 + 1032)) {
        goto LABEL_58;
      }
    }
    if (!*(_DWORD *)(a1 + 1760))
    {
      if (*(_DWORD *)(a1 + 1108)) {
        goto LABEL_57;
      }
      if (!*(void *)(a1 + 40) && !*(void *)(a1 + 56))
      {
        uint64_t result = sub_1000C33A0(4 * v9);
        *(void *)(a1 + 40) = result;
        if (!result) {
          return result;
        }
        if (*(_DWORD *)(a1 + 1044))
        {
          uint64_t result = sub_1000C33A0(4 * v9);
          *(void *)(a1 + 56) = result;
          if (!result) {
            return result;
          }
        }
        if (a2)
        {
          memcpy(*(void **)(a1 + 40), *(const void **)(a1 + 32), 4 * v9);
          if (*(_DWORD *)(a1 + 1044)) {
            memcpy(*(void **)(a1 + 56), *(const void **)(a1 + 48), 4 * v9);
          }
        }
      }
      if (*(_DWORD *)(a1 + 1108))
      {
LABEL_57:
        if (!*(void *)(a1 + 72) && !*(void *)(a1 + 88))
        {
          uint64_t result = sub_1000C33A0(2 * v9);
          *(void *)(a1 + 72) = result;
          if (!result) {
            return result;
          }
          if (*(_DWORD *)(a1 + 1044))
          {
            uint64_t result = sub_1000C33A0(2 * v9);
            *(void *)(a1 + 88) = result;
            if (!result) {
              return result;
            }
          }
          if (a2)
          {
            memcpy(*(void **)(a1 + 72), *(const void **)(a1 + 64), 2 * v9);
            if (*(_DWORD *)(a1 + 1044)) {
              memcpy(*(void **)(a1 + 88), *(const void **)(a1 + 80), 2 * v9);
            }
          }
        }
      }
    }
    goto LABEL_58;
  }
LABEL_11:
  if (*(_DWORD *)(a1 + 1036) && !*(void *)(a1 + 168))
  {
    int v15 = v9 * v5;
    size_t v16 = 2 * v15;
    uint64_t result = sub_1000C33A0(v16);
    *(void *)(a1 + 184) = result;
    if (!result) {
      return result;
    }
    int v17 = v15 >= 0 ? v15 : v15 + 1;
    size_t v18 = 4 * (v17 >> 1);
    uint64_t result = sub_1000C33A0(v18);
    *(void *)(a1 + 200) = result;
    if (!result) {
      return result;
    }
    uint64_t result = sub_1000C33A0(4 * v9);
    *(void *)(a1 + 168) = result;
    if (!result) {
      return result;
    }
    *(void *)(a1 + 176) = *(void *)(a1 + 184);
    *(void *)(a1 + 192) = *(void *)(a1 + 200);
    *(void *)(a1 + 160) = result;
    if (a2)
    {
      memcpy(*(void **)(a1 + 184), *(const void **)(a1 + 176), v16);
      memcpy(*(void **)(a1 + 200), *(const void **)(a1 + 192), v18);
    }
  }
  if (!*(_DWORD *)(a1 + 1004)) {
    goto LABEL_16;
  }
  if (*(void *)(a1 + 528)) {
    goto LABEL_16;
  }
  if (*(void *)(a1 + 544)) {
    goto LABEL_16;
  }
  uint64_t v22 = *(void *)(a1 + 584);
  if (!v22) {
    goto LABEL_16;
  }
  size_t v23 = *(int *)(v22 + 4 * *(int *)(a1 + 576));
  if (*(_DWORD *)(a1 + 724))
  {
    uint64_t result = sub_1000C33A0(2 * *(int *)(a1 + 580));
    *(void *)(a1 + 560) = result;
    if (result)
    {
      size_t v25 = 4 * ((int)v23 / 4);
      uint64_t result = sub_1000C33A0(4 * (v24 >> 2));
      *(void *)(a1 + 544) = result;
      if (result)
      {
        if (a2)
        {
          memcpy(*(void **)(a1 + 560), *(const void **)(a1 + 552), 2 * *(int *)(a1 + 580));
          memcpy(*(void **)(a1 + 544), *(const void **)(a1 + 536), v25);
          uint64_t result = *(void *)(a1 + 544);
        }
        *(void *)(a1 + 552) = *(void *)(a1 + 560);
        *(void *)(a1 + 536) = result;
        goto LABEL_16;
      }
    }
  }
  else
  {
    uint64_t result = sub_1000C33A0(v23);
    *(void *)(a1 + 528) = result;
    if (result)
    {
      if (a2)
      {
        memcpy((void *)result, *(const void **)(a1 + 520), v23);
        uint64_t result = *(void *)(a1 + 528);
      }
      *(void *)(a1 + 520) = result;
LABEL_16:
      if (*(_DWORD *)(a1 + 1964))
      {
        if (*(void *)(a1 + 856))
        {
          if (!*(void *)(a1 + 904))
          {
LABEL_41:
            uint64_t result = sub_1000C33A0(2 * *(int *)(a1 + 1100));
            *(void *)(a1 + 904) = result;
            if (!result) {
              return result;
            }
            if (a2)
            {
              memcpy((void *)result, *(const void **)(a1 + 896), 2 * *(int *)(a1 + 1100));
              uint64_t result = *(void *)(a1 + 904);
            }
            *(void *)(a1 + 896) = result;
          }
        }
        else
        {
          uint64_t result = sub_1000C33A0(*(int *)(a1 + 1100));
          *(void *)(a1 + 856) = result;
          if (!result) {
            return result;
          }
          if (a2)
          {
            memcpy((void *)result, *(const void **)(a1 + 848), *(int *)(a1 + 1100));
            uint64_t result = *(void *)(a1 + 856);
          }
          *(void *)(a1 + 848) = result;
          if (!*(void *)(a1 + 904)) {
            goto LABEL_41;
          }
        }
      }
      return 1;
    }
  }
  return result;
}

void *sub_10000818C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2;
  uint64_t v11 = (void *)sub_1000CD3E8(4 * *(int *)(a1 + 1100), a2, a3, a4, a5, a6, a7, a8);
  bzero(v11, 4 * *(int *)(a1 + 1100));
  if (*(_DWORD *)(a1 + 2012) || *(_DWORD *)(a1 + 1072) <= (signed int)v9)
  {
    int v13 = 1;
  }
  else if (*(_DWORD *)(a1 + 1176))
  {
    signed int v12 = (_DWORD *)(*(void *)(a1 + 1160) + 4 * v9);
    int v13 = v12[1] - *v12;
    if (v13 <= 0) {
      goto LABEL_14;
    }
  }
  else
  {
    size_t v18 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * v9);
    int v13 = v18[1] - *v18;
    if (v13 <= 0)
    {
LABEL_14:
      LODWORD(v15) = *(_DWORD *)(a1 + 1100);
      goto LABEL_15;
    }
  }
  int v14 = 0;
  unint64_t v24 = 0;
  do
  {
    sub_1000043BC(a1, v9, v14, &v24);
    LODWORD(v15) = *(_DWORD *)(a1 + 1100);
    if ((int)v15 >= 1)
    {
      uint64_t v16 = 0;
      unint64_t v17 = v24;
      do
      {
        *((_DWORD *)v11 + v16) += *(unsigned __int8 *)(v17 + v16);
        ++v16;
        uint64_t v15 = *(int *)(a1 + 1100);
      }
      while (v16 < v15);
    }
    ++v14;
  }
  while (v14 != v13);
LABEL_15:
  if ((int)v15 <= 0)
  {
    uint64_t v22 = (int)v15;
  }
  else
  {
    uint64_t v19 = 0;
    if (v13 >= 0) {
      int v20 = v13;
    }
    else {
      int v20 = v13 + 1;
    }
    int v21 = v20 >> 1;
    do
    {
      *(unsigned char *)(a3 + v19) = (*((_DWORD *)v11 + v19) + v21) / v13;
      ++v19;
      uint64_t v22 = *(int *)(a1 + 1100);
    }
    while (v19 < v22);
  }
  return sub_1000CD4D0(v11, 4 * v22);
}

int *sub_100008308(int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*result >= 1)
    {
      uint64_t v2 = 0;
      do
      {
        uint64_t v3 = *((void *)v1 + 3);
        if (v3)
        {
          sub_1000C321C(*(void *)(v3 + 8 * v2));
          *(void *)(*((void *)v1 + 3) + 8 * v2) = 0;
        }
        uint64_t v4 = *((void *)v1 + 5);
        if (v4)
        {
          sub_1000C321C(*(void *)(v4 + 8 * v2));
          *(void *)(*((void *)v1 + 5) + 8 * v2) = 0;
        }
        ++v2;
      }
      while (v2 < *v1);
    }
    sub_1000C321C(*((void *)v1 + 3));
    sub_1000C321C(*((void *)v1 + 5));
    *((void *)v1 + 3) = 0;
    *((void *)v1 + 5) = 0;
    return (int *)sub_1000C321C((uint64_t)v1);
  }
  return result;
}

int *sub_1000083C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1800);
  if (v2)
  {
    sub_1000C321C(v2);
    *(_OWORD *)(a1 + 1792) = 0u;
    sub_1000C321C(*(void *)(a1 + 1832));
    *(void *)(a1 + 1832) = 0;
  }
  sub_1000C321C(*(void *)(a1 + 1152));
  *(_OWORD *)(a1 + 1144) = 0u;
  sub_1000C321C(*(void *)(a1 + 1168));
  *(_OWORD *)(a1 + 1160) = 0u;
  sub_1000C321C(*(void *)(a1 + 24));
  *(_OWORD *)(a1 + 16) = 0u;
  sub_1000C321C(*(void *)(a1 + 152));
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 152) = 0;
  sub_1000C321C(*(void *)(a1 + 40));
  *(_OWORD *)(a1 + 32) = 0u;
  sub_1000C321C(*(void *)(a1 + 72));
  *(_OWORD *)(a1 + 64) = 0u;
  sub_1000C321C(*(void *)(a1 + 56));
  *(_OWORD *)(a1 + 48) = 0u;
  sub_1000C321C(*(void *)(a1 + 88));
  *(_OWORD *)(a1 + 80) = 0u;
  sub_1000C321C(*(void *)(a1 + 1584));
  *(void *)(a1 + 1584) = 0;
  sub_1000C321C(*(void *)(a1 + 1592));
  *(void *)(a1 + 1592) = 0;
  sub_1000C321C(*(void *)(a1 + 168));
  *(_OWORD *)(a1 + 160) = 0u;
  sub_1000C321C(*(void *)(a1 + 184));
  *(_OWORD *)(a1 + 176) = 0u;
  sub_1000C321C(*(void *)(a1 + 200));
  *(_OWORD *)(a1 + 192) = 0u;
  sub_1000C321C(*(void *)(a1 + 1264));
  *(void *)(a1 + 1224) = 0;
  *(void *)(a1 + 1264) = 0;
  sub_1000C321C(*(void *)(a1 + 1248));
  *(void *)(a1 + 1208) = 0;
  *(void *)(a1 + 1248) = 0;
  sub_1000C321C(*(void *)(a1 + 1256));
  *(void *)(a1 + 1216) = 0;
  *(void *)(a1 + 1256) = 0;
  sub_1000C321C(*(void *)(a1 + 1272));
  *(void *)(a1 + 1232) = 0;
  *(void *)(a1 + 1272) = 0;
  sub_1000C321C(*(void *)(a1 + 1280));
  *(void *)(a1 + 1280) = 0;
  sub_1000C321C(*(void *)(a1 + 1288));
  *(void *)(a1 + 1240) = 0;
  *(void *)(a1 + 1288) = 0;
  sub_1000C321C(*(void *)(a1 + 1376));
  *(_OWORD *)(a1 + 1368) = 0u;
  sub_1000C321C(*(void *)(a1 + 1416));
  *(_OWORD *)(a1 + 1408) = 0u;
  sub_1000C321C(*(void *)(a1 + 1848));
  *(_OWORD *)(a1 + 1840) = 0u;
  sub_1000C321C(*(void *)(a1 + 1904));
  *(_OWORD *)(a1 + 1896) = 0u;
  sub_1000C321C(*(void *)(a1 + 1336));
  *(_OWORD *)(a1 + 1328) = 0u;
  sub_1000C321C(*(void *)(a1 + 1360));
  *(_OWORD *)(a1 + 1352) = 0u;
  sub_1000C321C(*(void *)(a1 + 2040));
  *(_OWORD *)(a1 + 2032) = 0u;
  if (*(_DWORD *)(a1 + 1004) || qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 3864))
  {
    sub_1000C321C(*(void *)(a1 + 528));
    *(void *)(a1 + 528) = 0;
    *(void *)(a1 + 520) = 0;
    sub_1000C321C(*(void *)(a1 + 544));
    *(void *)(a1 + 544) = 0;
    *(void *)(a1 + 536) = 0;
    sub_1000C321C(*(void *)(a1 + 560));
    *(void *)(a1 + 560) = 0;
    *(void *)(a1 + 552) = 0;
    sub_1000C321C(*(void *)(a1 + 608));
    *(void *)(a1 + 608) = 0;
    *(void *)(a1 + 600) = 0;
    sub_1000C321C(*(void *)(a1 + 624));
    *(void *)(a1 + 624) = 0;
    *(void *)(a1 + 616) = 0;
    sub_1000C321C(*(void *)(a1 + 592));
    *(void *)(a1 + 592) = 0;
    *(void *)(a1 + 584) = 0;
    sub_1000C321C(*(void *)(a1 + 648));
    *(void *)(a1 + 648) = 0;
    *(void *)(a1 + 640) = 0;
    sub_1000C321C(*(void *)(a1 + 632));
    *(void *)(a1 + 632) = 0;
    sub_1000C321C(*(void *)(a1 + 568));
    *(void *)(a1 + 568) = 0;
  }
  sub_1000C321C(*(void *)(a1 + 504));
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  sub_1000C321C(*(void *)(a1 + 240));
  *(void *)(a1 + 240) = 0;
  sub_100011AB4(a1);
  if (*(_DWORD *)(a1 + 1032))
  {
    if (*(_DWORD *)(a1 + 1760)) {
      uint64_t v3 = 1560;
    }
    else {
      uint64_t v3 = 1552;
    }
    sub_1000C321C(*(void *)(a1 + v3));
    *(void *)(a1 + v3) = 0;
  }
  sub_1000C321C(*(void *)(a1 + 1512));
  *(void *)(a1 + 1512) = 0;
  sub_1000C321C(*(void *)(a1 + 1520));
  *(void *)(a1 + 1520) = 0;
  sub_1000C321C(*(void *)(a1 + 1528));
  *(void *)(a1 + 1528) = 0;
  sub_1000C321C(*(void *)(a1 + 1536));
  *(void *)(a1 + 1536) = 0;
  sub_1000C321C(*(void *)(a1 + 1544));
  *(void *)(a1 + 1544) = 0;
  sub_1000C321C(*(void *)(a1 + 1552));
  *(void *)(a1 + 1552) = 0;
  sub_1000C321C(*(void *)(a1 + 1936));
  *(_OWORD *)(a1 + 1928) = 0u;
  sub_1000C321C(*(void *)(a1 + 1952));
  *(_OWORD *)(a1 + 1944) = 0u;
  sub_1000C321C(*(void *)(a1 + 1448));
  *(void *)(a1 + 1448) = 0;
  sub_100038E08(*(void *)(a1 + 1304));
  *(void *)(a1 + 1304) = 0;
  sub_10001D178(a1);
  uint64_t result = sub_100008308(*(int **)(a1 + 928));
  *(void *)(a1 + 928) = 0;
  return result;
}

uint64_t sub_100008738(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_10000AF7C(result);
    sub_1000083C0(v1);
    uint64_t v2 = *(void **)(v1 + 744);
    if (v2)
    {
      uint64_t v4 = v2 + 7;
      uint64_t v3 = v2[7];
      int v5 = *(uint64_t **)(v1 + 744);
      if (v3)
      {
        uint64_t v6 = *(unsigned int *)(v1 + 1884);
        if ((int)v6 >= 1)
        {
          uint64_t v7 = 0;
          uint64_t v8 = 8 * v6;
          do
          {
            sub_1000C321C(*(void *)(v2[7] + v7));
            sub_1000C321C(*(void *)(v2[8] + v7));
            v7 += 8;
          }
          while (v8 != v7);
          uint64_t v3 = *v4;
        }
        sub_1000C321C(v3);
        sub_1000C321C(v2[8]);
        *uint64_t v4 = 0;
        v2[8] = 0;
        int v5 = *(uint64_t **)(v1 + 744);
      }
      int v10 = v5 + 10;
      uint64_t v9 = v5[10];
      if (v9)
      {
        uint64_t v11 = *(unsigned int *)(v1 + 1884);
        if ((int)v11 >= 1)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 8 * v11;
          do
          {
            sub_1000C321C(*(void *)(v5[10] + v12));
            sub_1000C321C(*(void *)(v5[11] + v12));
            v12 += 8;
          }
          while (v13 != v12);
          uint64_t v9 = *v10;
        }
        sub_1000C321C(v9);
        sub_1000C321C(v5[11]);
        *int v10 = 0;
        v5[11] = 0;
        int v5 = *(uint64_t **)(v1 + 744);
      }
      sub_1000C321C(v5[6]);
      v5[6] = 0;
      sub_1000C321C(v5[1]);
      sub_1000C321C(v5[2]);
      sub_1000C321C(v5[3]);
      sub_1000C321C(v5[4]);
      sub_1000C321C(v5[5]);
      v5[5] = 0;
      *(_OWORD *)(v5 + 3) = 0u;
      *(_OWORD *)(v5 + 1) = 0u;
      sub_1000C321C(v2[9]);
      sub_1000C321C(v2[12]);
      sub_1000C321C(v2[13]);
      v2[13] = 0;
      sub_1000C321C((uint64_t)v2);
      *(void *)(v1 + 744) = 0;
    }
    return sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_1000088C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 744);
  if (!v2)
  {
    uint64_t result = sub_1000C33A0(112);
    uint64_t v2 = (void *)result;
    *(void *)(a1 + 744) = result;
    if (!result) {
      return result;
    }
  }
  uint64_t v4 = qword_100101CC0;
  if (qword_100101CC0)
  {
    if (!*(_DWORD *)(qword_100101CC0 + 1224)) {
      goto LABEL_175;
    }
    int v5 = *(_DWORD *)(a1 + 1884);
    if (v2[6])
    {
      uint64_t result = sub_1000C33A0(2 * (v5 + 1));
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t result = sub_1000C33A0(2 * (v5 + 1));
      v2[6] = result;
      if (!result) {
        return result;
      }
      if ((v5 & 0x80000000) == 0)
      {
        int v10 = 0;
        do
          *(_WORD *)(v2[6] + 2 * (unsigned __int16)v10++) = *(_DWORD *)(a1 + 1384);
        while (v5 >= (unsigned __int16)v10);
        if (v5 >= 1)
        {
          for (unsigned __int16 i = 0; i < v5; ++i)
          {
            unsigned __int16 v12 = 0;
            do
            {
              unsigned __int16 v13 = 0;
              uint64_t v14 = v12;
              do
              {
                unsigned int v15 = sub_100005304(a1, i, v14, v13, v6, v7, v8, v9);
                uint64_t v16 = v2[6];
                if (v15 < *(unsigned __int16 *)(v16 + 2 * v14)) {
                  *(_WORD *)(v16 + 2 * v14) = v15;
                }
                ++v13;
              }
              while (v5 > v13);
              unsigned __int16 v12 = v14 + 1;
            }
            while (v5 > (unsigned __int16)(v14 + 1));
          }
        }
      }
      int v5 = *(_DWORD *)(a1 + 1884);
      uint64_t v2 = *(void **)(a1 + 744);
      uint64_t result = sub_1000C33A0(2 * (v5 + 1));
      if (!result) {
        return result;
      }
    }
    unint64_t v17 = (__int16 *)result;
    uint64_t result = sub_1000C33A0(8 * v5);
    v2[7] = result;
    if (!result) {
      return result;
    }
    uint64_t result = sub_1000C33A0(8 * v5);
    v2[8] = result;
    if (!result) {
      return result;
    }
    if (v5 >= 1)
    {
      int v18 = 0;
      unsigned __int16 v19 = 0;
      while (1)
      {
        uint64_t v20 = v19;
        int v21 = *(unsigned __int16 *)(v2[6] + 2 * (v18 + 1)) - *(unsigned __int16 *)(v2[6] + 2 * v19);
        int v22 = v21 + 7;
        int v23 = v21 + 14;
        if (v22 >= 0) {
          int v23 = v22;
        }
        int v24 = (v23 >> 3) + 2;
        uint64_t v25 = 8 * v20;
        *(void *)(v2[7] + 8 * v20) = sub_1000C33A0(v24 * v5);
        if (!*(void *)(v2[7] + 8 * v20)) {
          break;
        }
        *(void *)(v2[8] + 8 * v20) = sub_1000C33A0(2 * v5);
        if (!*(void *)(v2[8] + 8 * v20)) {
          break;
        }
        uint64_t v30 = 0;
        unsigned __int16 v31 = 0;
        uint64_t v141 = v24;
        do
        {
          *(_WORD *)(*(void *)(v2[8] + v25) + 2 * v31) = v30;
          uint64_t v143 = *(void *)(v2[7] + v25);
          int v32 = *(_DWORD *)(a1 + 1884);
          __int16 v33 = sub_100005304(a1, v31, v20, 0, v26, v27, v28, v29);
          *unint64_t v17 = v33;
          if (v32 < 1)
          {
            int v39 = 1;
          }
          else
          {
            unsigned __int16 v38 = 0;
            int v39 = 1;
            do
            {
              int v40 = sub_100005304(a1, v31, v20, v38, v34, v35, v36, v37);
              if (v39 <= 0 || (unsigned __int16)*v17 == v40)
              {
                int v41 = 0;
              }
              else
              {
                unsigned __int16 v42 = 0;
                do
                  int v41 = ++v42;
                while (v39 > v42 && (unsigned __int16)v17[v42] != v40);
              }
              if (v39 == v41) {
                v17[v39++] = v40;
              }
              ++v38;
            }
            while (v32 > v38);
            __int16 v33 = *v17;
          }
          int32x4_t v43 = (_WORD *)(v143 + v30);
          v17[v39] = v33;
          qsort(v17, v39, 2uLL, (int (__cdecl *)(const void *, const void *))sub_1000055D8);
          __int16 v48 = sub_100005304(a1, v31, v20, 0, v44, v45, v46, v47);
          uint64_t v49 = (unsigned __int16)v39;
          if ((_WORD)v39)
          {
            uint16x8_t v50 = (unsigned __int16 *)v17;
            do
            {
              int v51 = *v50++;
              unint64_t v52 = v51 - *(unsigned __int16 *)(v2[6] + 2 * v20);
              *((unsigned char *)v43 + (v52 >> 3) + 2) |= byte_1000F594C[v52 & 7];
              --v49;
            }
            while (v49);
          }
          *int32x4_t v43 = v48;
          uint64_t v25 = 8 * v20;
          v30 += v141;
          ++v31;
        }
        while (v5 > v31);
        unsigned __int16 v19 = v20 + 1;
        int v18 = (unsigned __int16)(v20 + 1);
        if (v5 <= v18) {
          goto LABEL_51;
        }
      }
      uint64_t v102 = (uint64_t)v17;
      goto LABEL_163;
    }
LABEL_51:
    sub_1000C321C((uint64_t)v17);
    uint64_t v4 = qword_100101CC0;
    if (qword_100101CC0)
    {
LABEL_175:
      if (!*(_DWORD *)(v4 + 1232)) {
        goto LABEL_174;
      }
      int v53 = *(_DWORD *)(a1 + 1884);
      int32x4_t v54 = *(void **)(a1 + 744);
      if (!v54[6])
      {
        uint64_t result = sub_1000C33A0(2 * (v53 + 1));
        v54[6] = result;
        if (!result) {
          return result;
        }
        if ((v53 & 0x80000000) == 0)
        {
          int v59 = 0;
          do
            *(_WORD *)(v54[6] + 2 * (unsigned __int16)v59++) = *(_DWORD *)(a1 + 1384);
          while (v53 >= (unsigned __int16)v59);
          if (v53 >= 1)
          {
            for (unsigned __int16 j = 0; j < v53; ++j)
            {
              unsigned __int16 v61 = 0;
              do
              {
                unsigned __int16 v62 = 0;
                uint64_t v63 = v61;
                do
                {
                  unsigned int v64 = sub_100005304(a1, j, v63, v62, v55, v56, v57, v58);
                  uint64_t v65 = v54[6];
                  if (v64 < *(unsigned __int16 *)(v65 + 2 * v63)) {
                    *(_WORD *)(v65 + 2 * v63) = v64;
                  }
                  ++v62;
                }
                while (v53 > v62);
                unsigned __int16 v61 = v63 + 1;
              }
              while (v53 > (unsigned __int16)(v63 + 1));
            }
          }
        }
        int v53 = *(_DWORD *)(a1 + 1884);
        int32x4_t v54 = *(void **)(a1 + 744);
      }
      uint64_t result = sub_1000C33A0(2 * (v53 + 1));
      if (!result) {
        return result;
      }
      uint64_t v66 = (__int16 *)result;
      uint64_t result = sub_1000C33A0(8 * v53);
      v54[10] = result;
      if (!result) {
        return result;
      }
      uint64_t result = sub_1000C33A0(8 * v53);
      v54[11] = result;
      if (!result) {
        return result;
      }
      if (v53 >= 1)
      {
        int v67 = 0;
        unsigned __int16 v68 = 0;
        while (1)
        {
          uint64_t v69 = v68;
          int v70 = *(unsigned __int16 *)(v54[6] + 2 * (v67 + 1))
              - *(unsigned __int16 *)(v54[6] + 2 * v68);
          int v71 = v70 + 7;
          int v72 = v70 + 14;
          if (v71 >= 0) {
            int v72 = v71;
          }
          int v73 = (v72 >> 3) + 2;
          uint64_t v74 = 8 * v69;
          *(void *)(v54[10] + 8 * v69) = sub_1000C33A0(v73 * v53);
          if (!*(void *)(v54[10] + 8 * v69)) {
            break;
          }
          *(void *)(v54[11] + 8 * v69) = sub_1000C33A0(2 * v53);
          if (!*(void *)(v54[11] + 8 * v69)) {
            break;
          }
          uint64_t v79 = 0;
          unsigned __int16 v80 = 0;
          uint64_t v142 = v73;
          do
          {
            *(_WORD *)(*(void *)(v54[11] + v74) + 2 * v80) = v79;
            uint64_t v144 = *(void *)(v54[10] + v74);
            int v81 = *(_DWORD *)(a1 + 1884);
            __int16 v82 = sub_100005304(a1, 0, v69, v80, v75, v76, v77, v78);
            *uint64_t v66 = v82;
            if (v81 < 1)
            {
              int v88 = 1;
            }
            else
            {
              unsigned __int16 v87 = 0;
              int v88 = 1;
              do
              {
                int v89 = sub_100005304(a1, v87, v69, v80, v83, v84, v85, v86);
                if (v88 <= 0 || (unsigned __int16)*v66 == v89)
                {
                  int v90 = 0;
                }
                else
                {
                  unsigned __int16 v91 = 0;
                  do
                    int v90 = ++v91;
                  while (v88 > v91 && (unsigned __int16)v66[v91] != v89);
                }
                if (v88 == v90) {
                  v66[v88++] = v89;
                }
                ++v87;
              }
              while (v81 > v87);
              __int16 v82 = *v66;
            }
            unsigned __int16 v92 = (_WORD *)(v144 + v79);
            v66[v88] = v82;
            qsort(v66, v88, 2uLL, (int (__cdecl *)(const void *, const void *))sub_1000055D8);
            __int16 v97 = sub_100005304(a1, 0, v69, v80, v93, v94, v95, v96);
            uint64_t v98 = (unsigned __int16)v88;
            if ((_WORD)v88)
            {
              int v99 = (unsigned __int16 *)v66;
              do
              {
                int v100 = *v99++;
                unint64_t v101 = v100 - *(unsigned __int16 *)(v54[6] + 2 * v69);
                *((unsigned char *)v92 + (v101 >> 3) + 2) |= byte_1000F594C[v101 & 7];
                --v98;
              }
              while (v98);
            }
            *unsigned __int16 v92 = v97;
            uint64_t v74 = 8 * v69;
            v79 += v142;
            ++v80;
          }
          while (v53 > v80);
          unsigned __int16 v68 = v69 + 1;
          int v67 = (unsigned __int16)(v69 + 1);
          if (v53 <= v67) {
            goto LABEL_99;
          }
        }
        uint64_t v102 = (uint64_t)v66;
LABEL_163:
        sub_1000C321C(v102);
        return 0;
      }
LABEL_99:
      sub_1000C321C((uint64_t)v66);
      uint64_t v4 = qword_100101CC0;
      if (qword_100101CC0)
      {
LABEL_174:
        if (*(_DWORD *)(v4 + 1120))
        {
          int v103 = *(_DWORD *)(a1 + 1884);
          uint64_t v104 = *(void *)(a1 + 744);
          uint64_t result = sub_1000C33A0(8 * *(int *)(a1 + 1384));
          *(void *)(v104 + 72) = result;
          if (!result) {
            return result;
          }
          if (v103 >= 1)
          {
            for (unsigned __int16 k = 0; k < v103; ++k)
            {
              for (unsigned __int16 m = 0; m < v103; ++m)
              {
                unsigned int v111 = 0;
                int v112 = 0;
                do
                {
                  uint64_t v113 = *(void *)(v104 + 72)
                       + 8 * sub_100005304(a1, k, m, (unsigned __int16)v112, v105, v106, v107, v108);
                  *(unsigned char *)(v113 + ((unint64_t)v111 >> 3)) |= byte_1000F594C[v111 & 7];
                  unsigned int v111 = (unsigned __int16)++v112;
                }
                while (v103 > (unsigned __int16)v112);
              }
            }
          }
        }
        if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1124))
        {
          int v114 = *(_DWORD *)(a1 + 1884);
          uint64_t v115 = *(void *)(a1 + 744);
          uint64_t result = sub_1000C33A0(8 * *(int *)(a1 + 1384));
          *(void *)(v115 + 96) = result;
          if (!result) {
            return result;
          }
          if (v114 >= 1)
          {
            unsigned int v120 = 0;
            for (n = 0; n < v114; unsigned int v120 = ++n)
            {
              unsigned __int16 v122 = 0;
              uint64_t v123 = v120 & 7;
              unint64_t v124 = (unint64_t)v120 >> 3;
              do
              {
                int v125 = 0;
                do
                {
                  uint64_t v126 = *(void *)(v115 + 96)
                       + 8 * sub_100005304(a1, n, v122, (unsigned __int16)v125, v116, v117, v118, v119);
                  *(unsigned char *)(v126 + v124) |= byte_1000F594C[v123];
                  ++v125;
                }
                while (v114 > (unsigned __int16)v125);
                ++v122;
              }
              while (v114 > v122);
            }
          }
        }
      }
    }
  }
  uint64_t result = sub_1000C33A0(*(int *)(a1 + 1100));
  *(void *)(a1 + 1544) = result;
  if (result)
  {
    uint64_t result = sub_1000C33A0(*(int *)(a1 + 1100));
    *(void *)(a1 + 1512) = result;
    if (result)
    {
      uint64_t result = sub_1000C33A0(*(int *)(a1 + 1100));
      *(void *)(a1 + 1520) = result;
      if (result)
      {
        if (!*(_DWORD *)(a1 + 1032) && !*(_DWORD *)(a1 + 1036)) {
          goto LABEL_176;
        }
        if (*(void *)(a1 + 1528)
          || (uint64_t result = sub_1000C33A0(*(int *)(a1 + 1100)), (*(void *)(a1 + 1528) = result) != 0))
        {
          if (*(void *)(a1 + 1536)
            || (uint64_t result = sub_1000C33A0(2 * *(int *)(a1 + 1100)), (*(void *)(a1 + 1536) = result) != 0))
          {
            int v127 = *(_DWORD *)(a1 + 1760);
            uint64_t result = sub_1000C33A0(4 * *(int *)(a1 + 1128));
            if (v127)
            {
              *(void *)(a1 + 1560) = result;
              if (!result) {
                return result;
              }
            }
            else
            {
              *(void *)(a1 + 1552) = result;
              if (!result) {
                return result;
              }
            }
            if (!*(_DWORD *)(a1 + 724)
              || (uint64_t result = sub_1000C33A0(2 * *(int *)(a1 + 576)), (*(void *)(a1 + 568) = result) != 0))
            {
LABEL_176:
              if (!*(_DWORD *)(a1 + 1036)
                || (uint64_t result = sub_1000C33A0(2 * *(int *)(a1 + 1100)), (*(void *)(a1 + 1584) = result) != 0)
                && (uint64_t result = sub_1000C33A0(4 * *(int *)(a1 + 1132)), (*(void *)(a1 + 1592) = result) != 0))
              {
                int v128 = *(_DWORD *)(a1 + 1076);
                int v129 = -v128 & 3;
                BOOL v130 = __OFADD__(v129, v128);
                int v131 = v129 + v128;
                if (v131 < 0 != v130) {
                  ++v131;
                }
                int v132 = v131 >> 1;
                *(_DWORD *)(a1 + 1808) = v132;
                uint64_t result = sub_1000C33A0(4 * v132);
                *(void *)(a1 + 1800) = result;
                if (result)
                {
                  *(void *)(a1 + 1792) = result;
                  LODWORD(v133) = *(_DWORD *)(a1 + 1076);
                  if ((int)v133 >= 1)
                  {
                    uint64_t v134 = 0;
                    do
                    {
                      *(_WORD *)(*(void *)(a1 + 1792) + 2 * v134++) = 0x4000;
                      uint64_t v133 = *(int *)(a1 + 1076);
                    }
                    while (v134 < v133);
                  }
                  *(_DWORD *)(a1 + 1824) = 0;
                  int v135 = qword_100101CC0;
                  if (qword_100101CC0) {
                    int v135 = *(_DWORD *)(qword_100101CC0 + 440);
                  }
                  if ((int)v133 >= v135) {
                    LODWORD(v133) = v135;
                  }
                  *(_DWORD *)(a1 + 1828) = v133;
                  if ((int)v133 < 1
                    || (uint64_t result = sub_1000C33A0(2 * v133), (*(void *)(a1 + 1832) = result) != 0))
                  {
                    *(_WORD *)(a1 + 1600) = -1;
                    if (*(_DWORD *)(a1 + 1016))
                    {
                      int v136 = *(_DWORD *)(a1 + 1296);
                      v137 = sub_100015348;
                      if (v136 == 5)
                      {
LABEL_153:
                        *(void *)(a1 + 1616) = v137;
                        goto LABEL_154;
                      }
                      if (v136 == 2)
                      {
                        v137 = sub_1000150A4;
                        goto LABEL_153;
                      }
                    }
LABEL_154:
                    if (!*(_DWORD *)(a1 + 1964) || (uint64_t result = sub_100011764(a1), result))
                    {
                      if (qword_100101CC0)
                      {
                        if (*(_DWORD *)(qword_100101CC0 + 1064))
                        {
                          v138 = *(void (**)(uint64_t, void))(a1 + 1736);
                          if (v138) {
                            v138(a1, 0);
                          }
                        }
                      }
                      if (*(_DWORD *)(a1 + 1008))
                      {
                        *(_DWORD *)(a1 + 1080) = 0;
                        *(_DWORD *)(a1 + 1184) = 0;
                      }
                      else
                      {
                        if (*(_DWORD *)(a1 + 2012))
                        {
                          int v139 = *(_DWORD *)(a1 + 1080);
                        }
                        else
                        {
                          uint64_t v140 = *(int *)(a1 + 1080);
                          if (*(_DWORD *)(a1 + 1176)) {
                            int v139 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v140);
                          }
                          else {
                            int v139 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * v140);
                          }
                        }
                        *(_DWORD *)(a1 + 1184) = v139;
                      }
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100009398()
{
  return sub_1000C33A0(48);
}

uint64_t sub_1000093A0(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 1008))
  {
    int v2 = *(_DWORD *)(a1 + 1072);
    unsigned int v3 = v2 - 1;
    if (v2 < 1)
    {
      signed int v4 = 0;
      goto LABEL_41;
    }
    if (*(_DWORD *)(a1 + 2012))
    {
      if (v2 < 2)
      {
        signed int v4 = 0;
        do
LABEL_20:
          ++v4;
        while (v2 > (unsigned __int16)v4);
        goto LABEL_41;
      }
      signed int v4 = 0;
      if ((_WORD)v2) {
        BOOL v7 = HIWORD(v3) == 0;
      }
      else {
        BOOL v7 = 0;
      }
      if (!v7) {
        goto LABEL_20;
      }
      signed int v4 = v2 & 0xFFFFFFFE;
      unsigned int v8 = v2 & 0xFFFFFFFE;
      do
        v8 -= 2;
      while (v8);
      if (v2 != v4) {
        goto LABEL_20;
      }
LABEL_41:
      BOOL v1 = v4 > v2 - v4;
      if (!*(_DWORD *)(a1 + 2008)) {
        goto LABEL_42;
      }
      return 1;
    }
    if (*(_DWORD *)(a1 + 1176))
    {
      uint64_t v5 = *(void *)(a1 + 1160);
      if (v2 >= 8)
      {
        signed int v4 = 0;
        if ((_WORD)v2)
        {
          unsigned int v11 = HIWORD(v3);
          unsigned int v6 = 0;
          if (!v11)
          {
            unsigned int v6 = v2 & 0xFFFFFFF8;
            unsigned __int16 v12 = (int32x4_t *)(v5 + 20);
            int32x4_t v13 = 0uLL;
            v14.i64[0] = 0x100000001;
            v14.i64[1] = 0x100000001;
            unsigned int v15 = v2 & 0xFFFFFFF8;
            int32x4_t v16 = 0uLL;
            do
            {
              int32x4_t v13 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubq_s32(v12[-1], *(int32x4_t *)((char *)v12 - 20)), v14), v13);
              int32x4_t v16 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubq_s32(*v12, *(int32x4_t *)((char *)v12 - 4)), v14), v16);
              v12 += 2;
              v15 -= 8;
            }
            while (v15);
            signed int v4 = vaddvq_s32(vaddq_s32(v16, v13));
            if (v2 == v6) {
              goto LABEL_41;
            }
          }
        }
        else
        {
          unsigned int v6 = 0;
        }
      }
      else
      {
        signed int v4 = 0;
        unsigned int v6 = 0;
      }
      do
      {
        v4 += (*(_DWORD *)(v5 + 4 * (unsigned __int16)v6 + 4)
             - *(_DWORD *)(v5 + 4 * (unsigned __int16)v6)) & 1;
        ++v6;
      }
      while (v2 > (unsigned __int16)v6);
      goto LABEL_41;
    }
    uint64_t v9 = *(void *)(a1 + 1144);
    if (v2 >= 0x10)
    {
      signed int v4 = 0;
      if ((_WORD)v2)
      {
        unsigned int v17 = HIWORD(v3);
        unsigned int v10 = 0;
        if (!v17)
        {
          unsigned int v10 = v2 & 0xFFFFFFF0;
          int v18 = (uint16x8_t *)(v9 + 18);
          int32x4_t v19 = 0uLL;
          v20.i64[0] = 0x100000001;
          v20.i64[1] = 0x100000001;
          unsigned int v21 = v2 & 0xFFFFFFF0;
          int32x4_t v22 = 0uLL;
          int32x4_t v23 = 0uLL;
          int32x4_t v24 = 0uLL;
          do
          {
            uint16x8_t v25 = *(uint16x8_t *)((char *)v18 - 18);
            uint16x8_t v26 = *(uint16x8_t *)((char *)v18 - 2);
            uint16x8_t v27 = v18[-1];
            int32x4_t v22 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubl_high_u16(v27, v25), v20), v22);
            int32x4_t v19 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubl_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v25.i8), v20), v19);
            int32x4_t v24 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubl_high_u16(*v18, v26), v20), v24);
            int32x4_t v23 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubl_u16(*(uint16x4_t *)v18->i8, *(uint16x4_t *)v26.i8), v20), v23);
            v18 += 2;
            v21 -= 16;
          }
          while (v21);
          signed int v4 = vaddvq_s32(vaddq_s32(vaddq_s32(v23, v19), vaddq_s32(v24, v22)));
          if (v2 == v10) {
            goto LABEL_41;
          }
        }
      }
      else
      {
        unsigned int v10 = 0;
      }
    }
    else
    {
      signed int v4 = 0;
      unsigned int v10 = 0;
    }
    do
    {
      v4 += (*(_WORD *)(v9 + 2 * (unsigned __int16)v10 + 2)
           - *(_WORD *)(v9 + 2 * (unsigned __int16)v10)) & 1;
      ++v10;
    }
    while (v2 > (unsigned __int16)v10);
    goto LABEL_41;
  }
  BOOL v1 = 1;
  if (*(_DWORD *)(a1 + 2008)) {
    return 1;
  }
LABEL_42:
  if (*(_DWORD *)(a1 + 2016)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 1760)
    || !*(_DWORD *)(a1 + 1032)
    || *(_DWORD *)(a1 + 1296) != 5
    || *(_DWORD *)(a1 + 1044)
    || *(_DWORD *)(a1 + 1004))
  {
    return 0;
  }
  uint64_t v29 = sub_1000157DC;
  uint64_t v30 = sub_10001A7F4;
  if (*(_DWORD *)(a1 + 1108))
  {
LABEL_51:
    *(void *)(a1 + 1624) = v30;
    *(void *)(a1 + 1632) = v29;
    *(_OWORD *)(a1 + 1664) = 0u;
    return 1;
  }
  int v31 = *(_DWORD *)(a1 + 1104);
  if (v31 == 36)
  {
    if (!*(unsigned char *)(a1 + 1041))
    {
      uint64_t v29 = sub_100016C48;
      uint64_t v30 = sub_1000187CC;
      if (!*(_DWORD *)(a1 + 1024)) {
        goto LABEL_51;
      }
    }
    return 0;
  }
  if (v31 != 24) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 1041) || *(_DWORD *)(a1 + 1024))
  {
    if (v1) {
      int v32 = sub_100015CE0;
    }
    else {
      int v32 = sub_100016F8C;
    }
    __int16 v33 = sub_100016A30;
  }
  else
  {
    if (v1) {
      int v32 = sub_1000181A0;
    }
    else {
      int v32 = sub_1000178B0;
    }
    __int16 v33 = sub_100016B60;
  }
  *(void *)(a1 + 1624) = v32;
  *(void *)(a1 + 1632) = v33;
  *(_OWORD *)(a1 + 1664) = 0u;
  return 1;
}

uint64_t sub_100009734(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 1008);
  if (v1)
  {
    BOOL v2 = 1;
    *(void *)(a1 + 1624) = sub_1000121E4;
    *(void *)(a1 + 1664) = 0;
    if (*(_DWORD *)(a1 + 1760)) {
      goto LABEL_3;
    }
    goto LABEL_47;
  }
  int v5 = *(_DWORD *)(a1 + 1072);
  unsigned int v6 = v5 - 1;
  if (v5 < 1)
  {
    signed int v7 = 0;
    goto LABEL_46;
  }
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      uint64_t v9 = *(void *)(a1 + 1160);
      if (v5 >= 8)
      {
        signed int v7 = 0;
        if ((_WORD)v5)
        {
          unsigned int v15 = HIWORD(v6);
          unsigned int v10 = 0;
          if (!v15)
          {
            unsigned int v10 = v5 & 0xFFFFFFF8;
            int32x4_t v16 = (int32x4_t *)(v9 + 20);
            int32x4_t v17 = 0uLL;
            v18.i64[0] = 0x100000001;
            v18.i64[1] = 0x100000001;
            unsigned int v19 = v5 & 0xFFFFFFF8;
            int32x4_t v20 = 0uLL;
            do
            {
              int32x4_t v17 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubq_s32(v16[-1], *(int32x4_t *)((char *)v16 - 20)), v18), v17);
              int32x4_t v20 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubq_s32(*v16, *(int32x4_t *)((char *)v16 - 4)), v18), v20);
              v16 += 2;
              v19 -= 8;
            }
            while (v19);
            signed int v7 = vaddvq_s32(vaddq_s32(v20, v17));
            if (v5 == v10) {
              goto LABEL_46;
            }
          }
        }
        else
        {
          unsigned int v10 = 0;
        }
      }
      else
      {
        signed int v7 = 0;
        unsigned int v10 = 0;
      }
      do
      {
        v7 += (*(_DWORD *)(v9 + 4 * (unsigned __int16)v10 + 4)
             - *(_DWORD *)(v9 + 4 * (unsigned __int16)v10)) & 1;
        ++v10;
      }
      while (v5 > (unsigned __int16)v10);
      goto LABEL_46;
    }
    uint64_t v13 = *(void *)(a1 + 1144);
    if (v5 >= 0x10)
    {
      signed int v7 = 0;
      if ((_WORD)v5)
      {
        unsigned int v21 = HIWORD(v6);
        unsigned int v14 = 0;
        if (!v21)
        {
          unsigned int v14 = v5 & 0xFFFFFFF0;
          int32x4_t v22 = (uint16x8_t *)(v13 + 18);
          int32x4_t v23 = 0uLL;
          v24.i64[0] = 0x100000001;
          v24.i64[1] = 0x100000001;
          unsigned int v25 = v5 & 0xFFFFFFF0;
          int32x4_t v26 = 0uLL;
          int32x4_t v27 = 0uLL;
          int32x4_t v28 = 0uLL;
          do
          {
            uint16x8_t v29 = *(uint16x8_t *)((char *)v22 - 18);
            uint16x8_t v30 = *(uint16x8_t *)((char *)v22 - 2);
            uint16x8_t v31 = v22[-1];
            int32x4_t v26 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubl_high_u16(v31, v29), v24), v26);
            int32x4_t v23 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubl_u16(*(uint16x4_t *)v31.i8, *(uint16x4_t *)v29.i8), v24), v23);
            int32x4_t v28 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubl_high_u16(*v22, v30), v24), v28);
            int32x4_t v27 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubl_u16(*(uint16x4_t *)v22->i8, *(uint16x4_t *)v30.i8), v24), v27);
            v22 += 2;
            v25 -= 16;
          }
          while (v25);
          signed int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(v27, v23), vaddq_s32(v28, v26)));
          if (v5 == v14) {
            goto LABEL_46;
          }
        }
      }
      else
      {
        unsigned int v14 = 0;
      }
    }
    else
    {
      signed int v7 = 0;
      unsigned int v14 = 0;
    }
    do
    {
      v7 += (*(_WORD *)(v13 + 2 * (unsigned __int16)v14 + 2)
           - *(_WORD *)(v13 + 2 * (unsigned __int16)v14)) & 1;
      ++v14;
    }
    while (v5 > (unsigned __int16)v14);
    goto LABEL_46;
  }
  if (v5 < 2)
  {
    signed int v7 = 0;
    do
LABEL_26:
      ++v7;
    while (v5 > (unsigned __int16)v7);
    goto LABEL_46;
  }
  signed int v7 = 0;
  if ((_WORD)v5) {
    BOOL v11 = HIWORD(v6) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11) {
    goto LABEL_26;
  }
  signed int v7 = v5 & 0xFFFFFFFE;
  unsigned int v12 = v5 & 0xFFFFFFFE;
  do
    v12 -= 2;
  while (v12);
  if (v5 != v7) {
    goto LABEL_26;
  }
LABEL_46:
  BOOL v2 = v7 > v5 - v7;
  *(void *)(a1 + 1624) = sub_1000121E4;
  *(void *)(a1 + 1664) = 0;
  if (*(_DWORD *)(a1 + 1760))
  {
LABEL_3:
    int v3 = *(_DWORD *)(a1 + 1296);
    if (*(_DWORD *)(a1 + 1032))
    {
      if (v3 != 5)
      {
        int v8 = 0;
        *(void *)(a1 + 1624) = sub_10001A1F8;
        *(void *)(a1 + 1664) = 0;
        *(void *)(a1 + 1632) = sub_10001A004;
        goto LABEL_96;
      }
      *(void *)(a1 + 1624) = sub_100019CB4;
      *(void *)(a1 + 1664) = 0;
      signed int v4 = sub_100019B54;
    }
    else
    {
      if (v3 != 5)
      {
        int v8 = 0;
        *(void *)(a1 + 1632) = sub_100014948;
        goto LABEL_96;
      }
      signed int v4 = sub_100014EB4;
    }
    goto LABEL_95;
  }
LABEL_47:
  int v32 = *(_DWORD *)(a1 + 1296);
  if (v32 == 2)
  {
    if (*(_DWORD *)(a1 + 1108)) {
      goto LABEL_60;
    }
    int v8 = *(_DWORD *)(a1 + 1112);
    if (v8) {
      goto LABEL_60;
    }
    *(void *)(a1 + 1624) = sub_100012878;
    *(void *)(a1 + 1664) = 0;
LABEL_91:
    *(void *)(a1 + 1632) = sub_1000122B8;
    goto LABEL_96;
  }
  if (v32 != 4)
  {
    if (v32 == 5)
    {
      if (*(_DWORD *)(a1 + 1032))
      {
        if (*(_DWORD *)(a1 + 1044))
        {
          int v33 = *(_DWORD *)(a1 + 1048);
          uint64_t v34 = sub_100019580;
          if (!v33) {
            uint64_t v34 = sub_1000192C0;
          }
          uint64_t v35 = sub_10001B47C;
          if (v33) {
            uint64_t v35 = sub_10001B1D0;
          }
          if (!*(_DWORD *)(a1 + 1108)) {
            goto LABEL_84;
          }
        }
        else
        {
          uint64_t v35 = sub_10001A7F4;
          if (!*(_DWORD *)(a1 + 1108))
          {
            int v41 = sub_100016F8C;
            if (!*(unsigned char *)(a1 + 1041))
            {
              int v41 = sub_100016F8C;
              if (!*(_DWORD *)(a1 + 1024))
              {
                int v45 = *(_DWORD *)(a1 + 1104);
                int v41 = sub_100018BF0;
                if (v45 != 12)
                {
                  if (v45 == 36)
                  {
                    int v41 = sub_1000187CC;
                  }
                  else
                  {
                    if (v45 == 24)
                    {
                      uint64_t v46 = sub_1000181A0;
                      if (!v2) {
                        uint64_t v46 = sub_1000178B0;
                      }
                      *(void *)(a1 + 1624) = v46;
                      *(void *)(a1 + 1664) = 0;
                      int v42 = *(_DWORD *)(a1 + 1104);
                      if (v42 == 12) {
                        goto LABEL_87;
                      }
                      goto LABEL_85;
                    }
                    int v41 = sub_1000185DC;
                  }
                }
              }
            }
            uint64_t v34 = v41;
LABEL_84:
            *(void *)(a1 + 1624) = v34;
            *(void *)(a1 + 1664) = 0;
            int v42 = *(_DWORD *)(a1 + 1104);
            if (v42 == 12) {
              goto LABEL_87;
            }
LABEL_85:
            if (v42 == 36)
            {
              if (!*(unsigned char *)(a1 + 1041) && !*(_DWORD *)(a1 + 1024))
              {
                signed int v4 = sub_100016C48;
                goto LABEL_95;
              }
            }
            else if (v42 == 24)
            {
LABEL_87:
              if (*(_DWORD *)(a1 + 1044))
              {
                signed int v4 = sub_100016E20;
              }
              else if (*(unsigned char *)(a1 + 1041) || *(_DWORD *)(a1 + 1024))
              {
                signed int v4 = sub_100016A30;
              }
              else if (v42 == 12)
              {
                signed int v4 = sub_100016D44;
              }
              else
              {
                signed int v4 = sub_100016B60;
              }
              goto LABEL_95;
            }
            goto LABEL_94;
          }
        }
      }
      else
      {
        uint64_t v35 = sub_100019814;
        if (!*(_DWORD *)(a1 + 1108))
        {
LABEL_94:
          signed int v4 = sub_100014C8C;
          goto LABEL_95;
        }
      }
      *(void *)(a1 + 1624) = v35;
      *(void *)(a1 + 1664) = 0;
      signed int v4 = sub_1000157DC;
LABEL_95:
      *(void *)(a1 + 1632) = v4;
      int v8 = 1;
      goto LABEL_96;
    }
LABEL_60:
    *(void *)(a1 + 1632) = sub_1000122B8;
    int v8 = v32 == 5;
    goto LABEL_96;
  }
  if (*(_DWORD *)(a1 + 1108) && *(_DWORD *)(a1 + 1112))
  {
    int v8 = 0;
    *(void *)(a1 + 1632) = sub_1000156DC;
    goto LABEL_96;
  }
  int v36 = *(_DWORD *)(a1 + 1044);
  if (!*(_DWORD *)(a1 + 1116))
  {
    int v40 = sub_100013ED0;
    if (v36 || (int v40 = sub_100012878, !*(_DWORD *)(a1 + 2024)))
    {
      *(void *)(a1 + 1624) = v40;
      *(void *)(a1 + 1664) = 0;
    }
    int v8 = 0;
    goto LABEL_91;
  }
  if (v36)
  {
    int v8 = 0;
    BOOL v37 = *(_DWORD *)(a1 + 1104) == 36;
    unsigned __int16 v38 = sub_1000142B4;
    int v39 = sub_100014698;
  }
  else
  {
    if (*(_DWORD *)(a1 + 1036))
    {
      if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 164))
      {
        int v8 = 0;
        *(void *)(a1 + 1624) = sub_100013544;
        *(void *)(a1 + 1664) = 0;
        *(void *)(a1 + 1632) = sub_100013AA0;
      }
      else
      {
        int v8 = 0;
        *(void *)(a1 + 1624) = sub_1000164EC;
        *(void *)(a1 + 1664) = 0;
        *(void *)(a1 + 1632) = sub_1000167DC;
      }
      goto LABEL_96;
    }
    int v8 = 0;
    BOOL v37 = *(_DWORD *)(a1 + 1104) == 36;
    unsigned __int16 v38 = sub_100012D50;
    int v39 = sub_10001328C;
  }
  if (v37) {
    unsigned __int16 v38 = (uint64_t (*)(uint64_t, unsigned int))v39;
  }
  *(void *)(a1 + 1624) = v38;
  *(void *)(a1 + 1664) = 0;
  *(void *)(a1 + 1632) = sub_100012590;
LABEL_96:
  int32x4_t v43 = sub_10001C190;
  if (!*(_DWORD *)(a1 + 720)) {
    int32x4_t v43 = sub_10001BECC;
  }
  *(void *)(a1 + 1640) = v43;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(void *)(a1 + 1648) = sub_10001DDEC;
  *(void *)(a1 + 1688) = 0;
  if (v8)
  {
    if (*(_DWORD *)(a1 + 724))
    {
      *(void *)(a1 + 1656) = sub_10001B884;
      *(void *)(a1 + 1696) = 0;
      if (!v1) {
        return 1;
      }
    }
    else
    {
      *(void *)(a1 + 1656) = sub_10001D950;
      *(void *)(a1 + 1696) = 0;
      if (!v1) {
        return 1;
      }
    }
    goto LABEL_103;
  }
  *(void *)(a1 + 1656) = sub_10001D6D4;
  *(void *)(a1 + 1696) = 0;
  if (v1)
  {
LABEL_103:
    *(void *)(a1 + 1640) = sub_10001E7C8;
    *(void *)(a1 + 1648) = 0;
    *(void *)(a1 + 1680) = 0;
    *(void *)(a1 + 1688) = 0;
    *(void *)(a1 + 1656) = sub_10001E258;
    *(void *)(a1 + 1696) = 0;
  }
  return 1;
}

double sub_100009EE8(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 2008)) {
    sub_1000093A0(a1);
  }
  *(void *)(a1 + 1752) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(void *)(a1 + 472) = sub_10007E450;
  *(void *)(a1 + 232) = sub_10000A1F8;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  return result;
}

uint64_t sub_100009F5C(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 2008) && !sub_1000093A0(a1)) {
    sub_100009734(a1);
  }
  *(void *)(a1 + 1736) = sub_100006DB4;
  *(void *)(a1 + 1744) = sub_10000A020;
  *(void *)(a1 + 1752) = sub_100010F2C;
  *(void *)(a1 + 472) = sub_10007E450;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = sub_10000A1F8;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 672) = sub_10001E0B0;
  *(void *)(a1 + 680) = sub_10001DF84;
  *(void *)(a1 + 688) = sub_10001DF2C;
  return 1;
}

uint64_t sub_10000A020(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1432);
  unsigned int v3 = sub_1000C0758(*(_DWORD *)(v2 + 8), 0xFFFFFFFF);
  unsigned int v4 = sub_1000C0758(*(_DWORD *)(v2 + 36), v3);
  uint64_t v5 = sub_1000C0758(*(_DWORD *)(v2 + 40), v4);
  int v6 = *(_DWORD *)(v2 + 92);
  if (v6 >= 1)
  {
    for (unsigned __int16 i = 0; i < v6; ++i)
    {
      if (*(void *)(*(void *)v2 + 8 * i))
      {
        unsigned int v8 = sub_100007694(a1, i);
        uint64_t v5 = sub_1000C0758(v8, v5);
        int v6 = *(_DWORD *)(v2 + 92);
      }
    }
  }
  return v5;
}

uint64_t sub_10000A0C8(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 1456)) {
    return 1;
  }
  uint64_t v2 = *(_DWORD **)(a1 + 1432);
  char v3 = 1;
  uint64_t v4 = sub_100007D44(a1, 1, 1);
  if (!v4) {
    return v4;
  }
  *(_DWORD *)(a1 + 2000) = 1;
  if (!*(_DWORD *)(a1 + 996) || !v2)
  {
    if (!v2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (!v2[2])
  {
LABEL_12:
    if (v2[4]) {
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(a1 + 232))(a1);
    if (v4)
    {
LABEL_14:
      if (!*(_DWORD *)(a1 + 1032)) {
        goto LABEL_21;
      }
      goto LABEL_15;
    }
    return v4;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(a1 + 472))(a1);
  if (!v4) {
    return v4;
  }
  if (v2[6])
  {
    char v3 = 0;
    v2[2] = 0;
    goto LABEL_13;
  }
  char v3 = 0;
  if (!*(_DWORD *)(a1 + 1032)) {
    goto LABEL_21;
  }
LABEL_15:
  if (!*(_DWORD *)(a1 + 1760) && *(_DWORD *)(a1 + 996))
  {
    if ((v3 & 1) == 0) {
      sub_100007CB8(a1);
    }
    sub_100007D04(a1);
  }
LABEL_21:
  if (!qword_100101CC0) {
    return v4;
  }
  if (!*(_DWORD *)(qword_100101CC0 + 1064)) {
    return v4;
  }
  int v6 = *(void (**)(uint64_t, void))(a1 + 1736);
  if (!v6) {
    return v4;
  }
  v6(a1, 0);
  return v4;
}

uint64_t sub_10000A1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD **)(a1 + 1432);
  if (!v8 || v8[4] || v8[2]) {
    return 0;
  }
  if (!v8[3] || v8[16] - v8[18] <= v8[11]) {
    goto LABEL_64;
  }
  if (qword_100101CC0)
  {
    int v11 = *(_DWORD *)(qword_100101CC0 + 720);
    int v12 = *(_DWORD *)(qword_100101CC0 + 760);
  }
  else
  {
    int v11 = 0;
    int v12 = 0;
  }
  BOOL v13 = (v11 | v12) != 0;
  if (!*(_DWORD *)(a1 + 996)
    || *(_DWORD *)(a1 + 1004)
    || (uint64_t v14 = *(int *)(a1 + 1100),
        unsigned int v15 = *(unsigned int **)(a1 + 1304),
        uint64_t v16 = sub_1000C33A0(56),
        (*(void *)(a1 + 1504) = v16) == 0))
  {
    sub_1000C321C(0);
    uint64_t result = 0;
    *(void *)(a1 + 1504) = 0;
    return result;
  }
  uint64_t v44 = v16;
  if ((*(_DWORD *)(v16 + 44) & 0x80000000) != 0 || (*(_DWORD *)(v16 + 48) & 0x80000000) != 0) {
    goto LABEL_62;
  }
  uint64_t v17 = qword_100101CC0;
  if (qword_100101CC0)
  {
    *(_DWORD *)(v16 + 44) = *(void *)(qword_100101CC0 + 632);
    LODWORD(v17) = *(_DWORD *)(v17 + 648);
  }
  else
  {
    *(_DWORD *)(v16 + 44) = 0;
  }
  *(_DWORD *)(v16 + 48) = v17;
  uint64_t v45 = v14;
  int v18 = 0;
  if ((int)sub_100025D50(v15) >= 2)
  {
    unsigned __int16 v19 = 1;
    do
    {
      if (*(int *)(a1 + 1096) >= 1)
      {
        int v20 = 0;
        do
        {
          int v21 = sub_100038CFC((uint64_t)v15, v19, v20);
          if (v21 > v18) {
            int v18 = v21;
          }
          ++v20;
        }
        while (v20 < *(_DWORD *)(a1 + 1096));
      }
      ++v19;
    }
    while ((int)sub_100025D50(v15) > v19);
  }
  int v22 = (2 * v18) | 1;
  uint64_t v23 = sub_1000C33A0((2 * v22));
  *(void *)uint64_t v44 = v23;
  if (!v23) {
    goto LABEL_62;
  }
  uint64_t v24 = sub_1000C33A0((2 * v22));
  *(void *)(v44 + 8) = v24;
  if (!v24) {
    goto LABEL_62;
  }
  uint64_t v25 = sub_1000C33A0((2 * v22));
  *(void *)(v44 + 16) = v25;
  if (!v25) {
    goto LABEL_62;
  }
  uint64_t v26 = sub_1000C33A0(2 * v22 * (int)v45);
  *(void *)(v44 + 24) = v26;
  if (!v26) {
    goto LABEL_62;
  }
  if (!(v11 | v12))
  {
    uint16x8_t v30 = (int *)(a1 + 1096);
    goto LABEL_72;
  }
  uint64_t v27 = sub_1000C33A0(2 * v45);
  *(void *)(v44 + 32) = v27;
  if (!v27)
  {
LABEL_62:
    int v38 = 0;
    goto LABEL_63;
  }
  *(_DWORD *)(v44 + 40) = 0;
  int v28 = qword_100101CC0;
  if (qword_100101CC0) {
    int v28 = *(_DWORD *)(qword_100101CC0 + 640);
  }
  if (v12) {
    BOOL v29 = v11 == 0;
  }
  else {
    BOOL v29 = 0;
  }
  *(_DWORD *)(v44 + 52) = v28;
  uint16x8_t v30 = (int *)(a1 + 1096);
  if (v29)
  {
    int v31 = 1;
    unsigned __int16 v32 = 1;
    while ((int)sub_100025D50(v15) > v32)
    {
      int v33 = 0;
      while (v33 < *v30)
      {
        if (!qword_100101CC0
          || !*(_DWORD *)(qword_100101CC0 + 560)
          || sub_100038CFC((uint64_t)v15, v32, v33))
        {
          sub_10000D9EC(*(void *)(a1 + 1304), *(void **)(a1 + 1504), v32, v33);
          int v31 = sub_10000DB2C(a1, v32, v33, v13, 0);
        }
        ++v33;
        if (!v31) {
          goto LABEL_59;
        }
      }
      if (*v30 >= 1)
      {
        int v34 = 0;
        do
        {
          sub_10000D9EC(*(void *)(a1 + 1304), *(void **)(a1 + 1504), v32, v34);
          int v31 = sub_10000DB2C(a1, v32, v34, 0, 1);
          if (!v31) {
            break;
          }
          ++v34;
        }
        while (v34 < *v30);
      }
      uint64_t v35 = *(unsigned int *)(a1 + 1100);
      if ((int)v35 >= 1)
      {
        uint64_t v36 = 0;
        uint64_t v37 = 2 * v35;
        do
        {
          *(_WORD *)(*(void *)(v44 + 32) + v36) = 0;
          v36 += 2;
        }
        while (v37 != v36);
      }
      *(_DWORD *)(v44 + 40) = 0;
LABEL_59:
      int v38 = 0;
      if (!sub_1000D2974())
      {
        ++v32;
        if (v31) {
          continue;
        }
      }
      goto LABEL_63;
    }
    goto LABEL_85;
  }
LABEL_72:
  int v31 = 1;
  unsigned __int16 v40 = 1;
  while ((int)sub_100025D50(v15) > v40)
  {
    int v41 = 0;
    do
    {
      if (v41 >= *v30) {
        break;
      }
      if (!qword_100101CC0
        || !*(_DWORD *)(qword_100101CC0 + 560)
        || sub_100038CFC((uint64_t)v15, v40, v41))
      {
        sub_10000D9EC(*(void *)(a1 + 1304), *(void **)(a1 + 1504), v40, v41);
        int v31 = sub_10000DB2C(a1, v40, v41, v13, 0);
      }
      ++v41;
    }
    while (v31);
    int v38 = 0;
    if (!sub_1000D2974())
    {
      ++v40;
      if (v31) {
        continue;
      }
    }
    goto LABEL_63;
  }
LABEL_85:
  if (v11)
  {
    unsigned __int16 v42 = 1;
    while ((int)sub_100025D50(v15) > v42)
    {
      if (*v30 >= 1)
      {
        int v43 = 0;
        do
        {
          sub_10000D9EC(*(void *)(a1 + 1304), *(void **)(a1 + 1504), v42, v43);
          int v31 = sub_10000DB2C(a1, v42, v43, 0, 1);
          if (!v31) {
            break;
          }
          ++v43;
        }
        while (v43 < *v30);
      }
      int v38 = 0;
      if (!sub_1000D2974())
      {
        ++v42;
        if (v31) {
          continue;
        }
      }
      goto LABEL_63;
    }
  }
  int v38 = v31;
LABEL_63:
  sub_1000C321C(*(void *)v44);
  sub_1000C321C(*(void *)(v44 + 8));
  sub_1000C321C(*(void *)(v44 + 16));
  sub_1000C321C(*(void *)(v44 + 24));
  sub_1000C321C(*(void *)(v44 + 32));
  sub_1000C321C(v44);
  *(void *)(a1 + 1504) = 0;
  if (!v38) {
    return 0;
  }
LABEL_64:
  if ((int)v8[23] >= 1)
  {
    int v39 = 0;
    do
      sub_10000A738((void *)a1, (unsigned __int16)v39++, a3, a4, a5, a6, a7, a8);
    while (v8[23] > (int)(unsigned __int16)v39);
  }
  if (*(_DWORD *)(a1 + 1032)) {
    *(void *)(a1 + 136) = *(void *)(a1 + 152);
  }
  else {
    *(void *)(a1 + 16) = *(void *)(a1 + 24);
  }
  return 1;
}

void *sub_10000A738(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v110 = 0;
  unsigned int v8 = *(void **)(*(void *)result[179] + 8 * a2);
  if (v8)
  {
    unsigned int v9 = a2;
    uint64_t v10 = (uint64_t)result;
    uint64_t v11 = *((unsigned int *)result + 275);
    uint64_t v12 = (int)v11;
    unint64_t v13 = sub_1000CD3E8((int)v11, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v14 = (int8x16_t *)v13;
    uint64_t v15 = *(unsigned int *)v8;
    if ((int)v15 >= 1)
    {
      if ((int)v11 > 0)
      {
        uint64_t v16 = 0;
        unint64_t v17 = v13 + v11;
        BOOL v19 = v13 < v10 + 1772 && v10 + 1770 < v17;
        char v109 = v19;
        while (1)
        {
          sub_1000043BC(v10, v9, v16, (unint64_t *)&v110);
          signed int v26 = *(__int16 *)(v8[1] + 2 * v16);
          if (v26 <= *(__int16 *)(v8[2] + 2 * v16)) {
            goto LABEL_12;
          }
          unint64_t v27 = *(void *)(v8[3] + 8 * v16);
          unsigned int v28 = (v26 + ((unsigned __int16)(v26 & 0x8000) >> 15)) << 16 >> 17;
          unint64_t v29 = (unint64_t)v110;
          if (v11 < 8)
          {
            uint64_t v30 = 0;
            int v31 = *(__int16 **)(v8[3] + 8 * v16);
            goto LABEL_41;
          }
          uint64_t v30 = 0;
          if ((unint64_t)v14 >= v27 + 2 * v11 || v27 >= v17) {
            char v33 = v109;
          }
          else {
            char v33 = 1;
          }
          BOOL v35 = v14 < (int8x16_t *)&v110->i8[v11] && (unint64_t)v110 < v17;
          if ((v33 & 1) != 0 || v35)
          {
            int v31 = *(__int16 **)(v8[3] + 8 * v16);
            goto LABEL_41;
          }
          int32x4_t v20 = vdupq_n_s32(v26);
          int16x8_t v22 = vdupq_n_s16(v26);
          int32x4_t v21 = vdupq_n_s32(v28);
          if (v11 >= 0x10)
          {
            uint64_t v37 = (const char *)(v10 + 1771);
            uint8x8_t v38 = (uint8x8_t)vld1_dup_s8(v37);
            uint16x8_t v39 = vmovl_u8(v38);
            int32x4_t v23 = (int32x4_t)vmovl_high_u16(v39);
            int32x4_t v24 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8);
            unsigned __int16 v40 = (const char *)(v10 + 1770);
            uint8x8_t v41 = (uint8x8_t)vld1_dup_s8(v40);
            uint16x8_t v42 = vmovl_u8(v41);
            int32x4_t v25 = (int32x4_t)vmovl_high_u16(v42);
            int32x4_t v43 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v42.i8);
            int16x8_t v44 = (int16x8_t)vsubl_u8(v38, v41);
            int32x4_t v45 = vmovl_high_s16(v44);
            int32x4_t v46 = vmovl_s16(*(int16x4_t *)v44.i8);
            int32x4_t v47 = vmull_high_s16(v44, v22);
            int32x4_t v48 = vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v22.i8);
            uint64_t v49 = v11 & 0xFFFFFFF0;
            uint16x8_t v50 = *(int16x8_t **)(v8[3] + 8 * v16);
            int v51 = v14;
            unint64_t v52 = v110;
            do
            {
              int16x8_t v54 = *v50;
              int16x8_t v53 = v50[1];
              v50 += 2;
              int32x4_t v55 = vaddw_high_s16(v21, v54);
              int32x4_t v56 = vaddw_s16(v21, *(int16x4_t *)v53.i8);
              int32x4_t v57 = vaddq_s32(vaddw_high_s16(v21, v53), v47);
              int32x4_t v58 = vaddq_s32(vaddw_s16(v21, *(int16x4_t *)v54.i8), v48);
              int32x4_t v59 = vaddq_s32(v55, v47);
              int32x4_t v60 = vaddq_s32(v56, v48);
              __int32 v61 = v58.i32[3];
              v59.i32[0] /= v20.i32[0];
              int v62 = v58.i32[0] / v20.i32[0];
              v58.i32[0] = v60.i32[0] / v20.i32[0];
              v60.i32[0] = v62;
              v59.i32[1] /= v20.i32[1];
              int v63 = v58.i32[1] / v20.i32[1];
              v58.i32[1] = v60.i32[1] / v20.i32[1];
              v60.i32[1] = v63;
              v59.i32[2] /= v20.i32[2];
              int v64 = v58.i32[2] / v20.i32[2];
              v58.i32[2] = v60.i32[2] / v20.i32[2];
              v60.i32[2] = v64;
              v59.i32[3] /= v20.i32[3];
              v57.i32[0] /= v20.i32[0];
              v57.i32[1] /= v20.i32[1];
              v58.i32[3] = v60.i32[3] / v20.i32[3];
              v57.i32[2] /= v20.i32[2];
              v60.i32[3] = v61 / v20.i32[3];
              v57.i32[3] /= v20.i32[3];
              uint8x16_t v65 = *v52++;
              uint16x8_t v66 = vmovl_u8(*(uint8x8_t *)v65.i8);
              uint16x8_t v67 = vmovl_high_u8(v65);
              int32x4_t v68 = vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v57, v45), v67), v23);
              int32x4_t v69 = vminq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v60, v46), *(uint16x4_t *)v66.i8), v24);
              v112.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v59, v45), v66), v23), v25);
              v112.val[2] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v58, v46), *(uint16x4_t *)v67.i8), v24), v43);
              v112.val[0] = (int8x16_t)vmaxq_s32(v69, v43);
              v112.val[3] = (int8x16_t)vmaxq_s32(v68, v25);
              *v51++ = vqtbl4q_s8(v112, (int8x16_t)xmmword_1000F4820);
              v49 -= 16;
            }
            while (v49);
            uint64_t v12 = (int)v11;
            if ((v11 & 0xFFFFFFF0) == v11) {
              goto LABEL_11;
            }
            uint64_t v36 = v11 & 0xFFFFFFF0;
            if ((v11 & 8) == 0)
            {
              int v31 = (__int16 *)(v27 + 2 * (v11 & 0xFFFFFFF0));
              uint64_t v30 = v11 & 0xFFFFFFF0;
LABEL_41:
              uint64_t v93 = (unsigned __int8 *)(v29 + v30);
              uint64_t v94 = &v14->i8[v30];
              uint64_t v95 = v11 - v30;
              do
              {
                int v96 = *(unsigned __int8 *)(v10 + 1771);
                int v97 = *(unsigned __int8 *)(v10 + 1770);
                int v98 = *v31++;
                int v99 = (int)(v28 + v98 + (v96 - v97) * v26) / v26;
                int v100 = *v93++;
                int v101 = v99 - (v96 - v97) + v100;
                if (v101 < v96) {
                  int v96 = v101;
                }
                if (v96 <= v97) {
                  LOBYTE(v96) = *(unsigned char *)(v10 + 1770);
                }
                *v94++ = v96;
                --v95;
              }
              while (v95);
              goto LABEL_11;
            }
          }
          else
          {
            uint64_t v36 = 0;
          }
          int v31 = (__int16 *)(v27 + 2 * (v11 & 0xFFFFFFF8));
          int v70 = (const char *)(v10 + 1771);
          uint8x8_t v71 = (uint8x8_t)vld1_dup_s8(v70);
          uint16x8_t v72 = vmovl_u8(v71);
          int32x4_t v23 = (int32x4_t)vmovl_high_u16(v72);
          int32x4_t v24 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v72.i8);
          int v73 = (const char *)(v10 + 1770);
          uint8x8_t v74 = (uint8x8_t)vld1_dup_s8(v73);
          uint16x8_t v75 = vmovl_u8(v74);
          int32x4_t v25 = (int32x4_t)vmovl_high_u16(v75);
          int32x4_t v76 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8);
          int16x8_t v77 = (int16x8_t)vsubl_u8(v71, v74);
          int32x4_t v78 = vmovl_high_s16(v77);
          int32x4_t v79 = vmovl_s16(*(int16x4_t *)v77.i8);
          int32x4_t v80 = vmull_high_s16(v77, v22);
          int16x8_t v22 = (int16x8_t)vmull_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v22.i8);
          int v81 = (uint64_t *)(v29 + v36);
          __int16 v82 = (uint64_t *)((char *)v14->i64 + v36);
          uint64_t v83 = (int16x8_t *)(v27 + 2 * v36);
          uint64_t v84 = v36 - (v11 & 0xFFFFFFF8);
          do
          {
            int16x8_t v85 = *v83++;
            int32x4_t v86 = vaddq_s32(vaddw_high_s16(v21, v85), v80);
            int32x4_t v87 = vaddq_s32(vaddw_s16(v21, *(int16x4_t *)v85.i8), (int32x4_t)v22);
            __int32 v88 = v87.i32[2];
            int v89 = v87.i32[1] / v20.i32[1];
            __int32 v90 = v87.i32[3];
            int v91 = v87.i32[0] / v20.i32[0];
            v87.i32[0] = v86.i32[0] / v20.i32[0];
            v86.i32[0] = v91;
            v87.i32[1] = v86.i32[1] / v20.i32[1];
            v86.i32[1] = v89;
            v87.i32[2] = v86.i32[2] / v20.i32[2];
            v86.i32[2] = v88 / v20.i32[2];
            v87.i32[3] = v86.i32[3] / v20.i32[3];
            v86.i32[3] = v90 / v20.i32[3];
            v85.i64[0] = *v81++;
            uint16x8_t v92 = vmovl_u8(*(uint8x8_t *)v85.i8);
            v111.val[1] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v87, v78), v92), v23), v25);
            v111.val[0] = (int8x16_t)vmaxq_s32(vminq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v86, v79), *(uint16x4_t *)v92.i8), v24), v76);
            *v82++ = vqtbl2q_s8(v111, (int8x16_t)xmmword_1000F4830).u64[0];
            v84 += 8;
          }
          while (v84);
          uint64_t v30 = v11 & 0x7FFFFFF8;
          if ((v11 & 0xFFFFFFF8) != v11) {
            goto LABEL_41;
          }
LABEL_11:
          sub_10000483C(v10, v9, v16, (uint64_t)v14, *(double *)v20.i64, *(double *)v21.i64, (int8x16_t)v22, (int8x16_t)v23, (int8x16_t)v24, (int8x16_t)v25);
LABEL_12:
          if (++v16 == v15) {
            goto LABEL_52;
          }
        }
      }
      for (uint64_t i = 0; i != v15; ++i)
      {
        sub_1000043BC(v10, v9, i, (unint64_t *)&v110);
        if (*(__int16 *)(v8[1] + 2 * i) > *(__int16 *)(v8[2] + 2 * i)) {
          sub_10000483C(v10, v9, i, (uint64_t)v14, v103, v104, v105, v106, v107, v108);
        }
      }
    }
LABEL_52:
    if (*(_DWORD *)(v10 + 1032))
    {
      if (!*(_DWORD *)(v10 + 1760)) {
        sub_100007720(v10, v9);
      }
    }
    return sub_1000CD4D0(v14, v12);
  }
  return result;
}

uint64_t sub_10000ACBC(uint64_t a1, unsigned int a2, int a3)
{
  int v4 = 0;
  if (a2 <= 5 && ((1 << a2) & 0x34) != 0)
  {
    if (!*(_DWORD *)(a1 + 992) || !*(void *)(a1 + 472)) {
      return 0;
    }
    int v4 = 1;
  }
  if (a3 && (!*(_DWORD *)(a1 + 1312) || *(unsigned char *)(a1 + 1041))) {
    return 0;
  }
  *(_DWORD *)(a1 + 1456) = 1;
  int v6 = sub_10000CB1C;
  signed int v7 = sub_10000CAAC;
  unsigned int v8 = (unsigned int (*)(uint64_t))sub_10000C810;
  unsigned int v9 = sub_10000C58C;
  if (a2 == 10)
  {
    int v10 = *(_DWORD *)(a1 + 1296);
    int v6 = sub_10000B294;
    signed int v7 = sub_10000B250;
    unsigned int v8 = (unsigned int (*)(uint64_t))sub_10000B1C8;
    unsigned int v9 = sub_10000AFEC;
    if (v10 != 2 && v10 != 4)
    {
      *(_DWORD *)(a1 + 1456) = 0;
      if (*(_DWORD *)(a1 + 996))
      {
        uint64_t v15 = *(void (**)(uint64_t))(a1 + 224);
        if (v15) {
          v15(a1);
        }
      }
      sub_1000C321C(*(void *)(a1 + 1464));
      sub_1000C321C(*(void *)(a1 + 1472));
      sub_1000C321C(*(void *)(a1 + 1480));
      *(void *)(a1 + 1480) = 0;
      *(_OWORD *)(a1 + 1464) = 0u;
      sub_1000C321C(*(void *)(a1 + 1496));
      *(void *)(a1 + 1496) = 0;
      return 1;
    }
  }
  *(void *)(a1 + 208) = v9;
  *(void *)(a1 + 216) = v8;
  *(void *)(a1 + 224) = v7;
  *(void *)(a1 + 232) = v6;
  if (*(_DWORD *)(a1 + 992))
  {
    if (!*(void *)(a1 + 472) || !*(void *)(a1 + 496)) {
      LOBYTE(v4) = 0;
    }
    *(_DWORD *)(a1 + 452) = a2 == 4;
    *(_DWORD *)(a1 + 280) = a2 == 5;
    if ((v4 & 1) == 0) {
      goto LABEL_19;
    }
  }
  else if (!v4)
  {
    goto LABEL_19;
  }
  *(_DWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  if (*(_DWORD *)(a1 + 996) && !v8(a1)) {
    goto LABEL_26;
  }
  sub_1000C321C(*(void *)(a1 + 1464));
  sub_1000C321C(*(void *)(a1 + 1472));
  sub_1000C321C(*(void *)(a1 + 1480));
  sub_1000C321C(*(void *)(a1 + 1496));
  *(void *)(a1 + 1496) = 0;
  *(void *)(a1 + 1464) = 0;
  *(void *)(a1 + 1480) = 0;
  *(void *)(a1 + 1472) = 0;
  uint64_t v11 = sub_1000C33A0(2 * *(int *)(a1 + 1092));
  *(void *)(a1 + 1464) = v11;
  if (!v11) {
    goto LABEL_26;
  }
LABEL_19:
  uint64_t v12 = sub_1000C33A0(8 * *(int *)(a1 + 1092));
  *(void *)(a1 + 1472) = v12;
  if (v12 && (uint64_t v13 = sub_1000C33A0(4 * *(int *)(a1 + 1092)), (*(void *)(a1 + 1480) = v13) != 0))
  {
    uint64_t v14 = sub_1000C33A0(4 * *(int *)(a1 + 1100));
    *(void *)(a1 + 1496) = v14;
    *(_DWORD *)(a1 + 1488) = 0;
    if (v14) {
      return 1;
    }
  }
  else
  {
LABEL_26:
    *(_DWORD *)(a1 + 1488) = 0;
  }
  sub_1000C321C(*(void *)(a1 + 1464));
  sub_1000C321C(*(void *)(a1 + 1472));
  sub_1000C321C(*(void *)(a1 + 1480));
  uint64_t result = 0;
  *(void *)(a1 + 1496) = 0;
  *(void *)(a1 + 1464) = 0;
  *(void *)(a1 + 1480) = 0;
  *(void *)(a1 + 1472) = 0;
  return result;
}

uint64_t sub_10000AF7C(uint64_t a1)
{
  *(_DWORD *)(a1 + 1456) = 0;
  if (*(_DWORD *)(a1 + 996))
  {
    uint64_t v2 = *(void (**)(uint64_t))(a1 + 224);
    if (v2) {
      v2(a1);
    }
  }
  sub_1000C321C(*(void *)(a1 + 1464));
  sub_1000C321C(*(void *)(a1 + 1472));
  sub_1000C321C(*(void *)(a1 + 1480));
  *(void *)(a1 + 1480) = 0;
  *(_OWORD *)(a1 + 1464) = 0u;
  uint64_t result = sub_1000C321C(*(void *)(a1 + 1496));
  *(void *)(a1 + 1496) = 0;
  return result;
}

uint64_t sub_10000AFEC(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  unint64_t v20 = 0;
  uint64_t v10 = *(void *)(a1 + 1440);
  if (*(_DWORD *)(a1 + 1296) == 4)
  {
    if (!qword_100101CC0)
    {
      int v12 = *(_DWORD *)v10;
      uint64_t v13 = *(void *)(v10 + 8);
      sub_1000043BC(a1, a3, a4, &v20);
      uint64_t v14 = sub_10000507C(a1, a3, a4);
      if (v12 <= 0)
      {
LABEL_19:
        *(_DWORD *)(v10 + 4) += a5;
        return 1;
      }
LABEL_12:
      for (uint64_t i = 0; i != v12; ++i)
      {
        int v16 = *(unsigned __int8 *)(v20 + i) - *(unsigned __int8 *)(a2 + i);
        *(_DWORD *)(v13 + 4 * i) += v16 * v16 * a5 * *(unsigned __int16 *)(v14 + 2 * i) / *(_DWORD *)(a1 + 1192);
      }
      goto LABEL_19;
    }
    BOOL v11 = *(_DWORD *)(qword_100101CC0 + 5300) == 0;
    if (!*(_DWORD *)(qword_100101CC0 + 3360)) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!qword_100101CC0)
    {
      int v12 = *(_DWORD *)v10;
      uint64_t v13 = *(void *)(v10 + 8);
      sub_1000043BC(a1, a3, a4, &v20);
      goto LABEL_16;
    }
    BOOL v11 = 0;
    if (!*(_DWORD *)(qword_100101CC0 + 3360))
    {
LABEL_8:
      int v12 = *(_DWORD *)v10;
      uint64_t v13 = *(void *)(v10 + 8);
      sub_1000043BC(a1, a3, a4, &v20);
      if (v11)
      {
        uint64_t v14 = sub_10000507C(a1, a3, a4);
        if (v12 <= 0) {
          goto LABEL_19;
        }
        goto LABEL_12;
      }
LABEL_16:
      if (v12 > 0)
      {
        for (uint64_t j = 0; j != v12; *(_DWORD *)(v13 + 4 * j++) += v18 * v18 * a5)
          int v18 = *(unsigned __int8 *)(v20 + j) - *(unsigned __int8 *)(a2 + j);
      }
      goto LABEL_19;
    }
  }
  if (*(unsigned __int16 *)(a1 + 1388) != a3) {
    goto LABEL_8;
  }
  return 1;
}

BOOL sub_10000B1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 1440);
  if (v9)
  {
    sub_1000C321C(*(void *)(v9 + 8));
    *(void *)(*(void *)(a1 + 1440) + 8) = 0;
    sub_1000C321C(*(void *)(a1 + 1440));
    *(void *)(a1 + 1440) = 0;
  }
  sub_1000C2F04(0x10uLL, a2, a3, a4, a5, a6, a7, a8);
  *(void *)(a1 + 1440) = v10;
  *uint64_t v10 = *(_DWORD *)(a1 + 1124);
  *(_DWORD *)(*(void *)(a1 + 1440) + 4) = 0;
  *(void *)(*(void *)(a1 + 1440) + 8) = sub_1000C33A0(4 * **(int **)(a1 + 1440));
  return *(void *)(*(void *)(a1 + 1440) + 8) != 0;
}

uint64_t sub_10000B250(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1440);
  if (v1)
  {
    uint64_t v2 = result;
    sub_1000C321C(*(void *)(v1 + 8));
    *(void *)(*(void *)(v2 + 1440) + 8) = 0;
    uint64_t result = sub_1000C321C(*(void *)(v2 + 1440));
    *(void *)(v2 + 1440) = 0;
  }
  return result;
}

uint64_t sub_10000B294(uint64_t a1, double a2, double a3, double a4, int32x4_t a5, int32x4_t a6, int32x4_t a7, int64x2_t _Q6)
{
  uint64_t v9 = *(int **)(a1 + 1440);
  LODWORD(v10) = qword_100101CC0;
  if (qword_100101CC0)
  {
    BOOL v11 = (_DWORD *)(a1 + 1296);
    if (*(_DWORD *)(a1 + 1296) == 4)
    {
      BOOL v12 = *(_DWORD *)(qword_100101CC0 + 5300) == 0;
      uint64_t v13 = *(void *)(qword_100101CC0 + 3368);
      int v14 = *(_DWORD *)(qword_100101CC0 + 3388);
      uint64_t v10 = *(void *)(qword_100101CC0 + 3376);
      int v15 = v9[1];
      if (v15 < 50) {
        return 1;
      }
LABEL_8:
      int v17 = *(_DWORD *)(a1 + 1404) * v10;
      if (v12) {
        int v18 = *(_DWORD *)(a1 + 1188);
      }
      else {
        int v18 = 1;
      }
      int v19 = (v17 & ~(v17 >> 31)) + v15;
      uint64_t v20 = *v9;
      uint64_t v21 = *v9;
      unint64_t v22 = *((void *)v9 + 1);
      int32x4_t v23 = *(_WORD **)(a1 + 1248);
      BOOL v360 = v12;
      uint64_t v358 = v13;
      if (v23) {
        goto LABEL_13;
      }
      uint64_t v24 = *v9;
      int v25 = v18;
      uint64_t v26 = sub_1000C33A0(2 * (int)v21 * v18);
      int v18 = v25;
      uint64_t v20 = v24;
      BOOL v12 = v360;
      int32x4_t v23 = (_WORD *)v26;
      *(void *)(a1 + 1248) = v26;
      if (v26)
      {
LABEL_13:
        int v357 = v14;
        uint64_t v356 = *(void *)(a1 + 1280);
        if (v356)
        {
          v359 = v11;
          unint64_t v27 = 0;
          int v28 = 0;
          unint64_t v29 = *(uint16x8_t **)(a1 + 1208);
          if (v12) {
            goto LABEL_15;
          }
          goto LABEL_21;
        }
        unint64_t v40 = v22;
        uint64_t v41 = v20;
        int v355 = v18;
        uint64_t v42 = sub_1000C33A0(2 * (int)v20 * v18);
        *(void *)(a1 + 1280) = v42;
        int32x4_t v23 = *(_WORD **)(a1 + 1248);
        if (v42)
        {
          unint64_t v27 = v42;
          v359 = v11;
          int v28 = 1;
          uint64_t v20 = v41;
          unint64_t v22 = v40;
          int v18 = v355;
          unint64_t v29 = *(uint16x8_t **)(a1 + 1208);
          if (v360)
          {
LABEL_15:
            int v30 = v18;
            uint64_t v31 = v20;
            unint64_t v32 = sub_1000C33A0(8 * v20);
            if (!v32)
            {
              uint64_t v16 = 0;
              goto LABEL_153;
            }
            if ((int)v21 < 1) {
              goto LABEL_152;
            }
            int v34 = v30;
            double v35 = (double)v19;
            double v36 = (double)v17;
            if (v21 >= 8)
            {
              uint64_t v38 = v31;
              double v39 = *(double *)&v358;
              if (v32 >= v22 + 4 * v21 || v22 >= v32 + 8 * v21)
              {
                float64x2_t v59 = (float64x2_t)vdupq_lane_s64(v358, 0);
                float64x2_t v60 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v36, 0);
                uint64_t v37 = v21 & 0xFFFFFFF8;
                float64x2_t v61 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
                unint64_t v62 = v22 + 16;
                unint64_t v63 = v32 + 32;
                uint64_t v64 = v37;
                do
                {
                  long long v65 = *(_OWORD *)(v62 - 16);
                  v66.i64[0] = (int)v65;
                  v66.i64[1] = SDWORD1(v65);
                  float64x2_t v67 = vcvtq_f64_s64(v66);
                  v66.i64[0] = SDWORD2(v65);
                  v66.i64[1] = SHIDWORD(v65);
                  float64x2_t v68 = vcvtq_f64_s64(v66);
                  v66.i64[0] = (int)*(_OWORD *)v62;
                  v66.i64[1] = (int)HIDWORD(*(void *)v62);
                  float64x2_t v69 = vcvtq_f64_s64(v66);
                  v66.i64[0] = (int)*(void *)(v62 + 8);
                  v66.i64[1] = (int)HIDWORD(*(_OWORD *)v62);
                  *(float64x2_t *)(v63 - 32) = vdivq_f64(v61, vmlaq_f64(v60, v59, v67));
                  *(float64x2_t *)(v63 - 16) = vdivq_f64(v61, vmlaq_f64(v60, v59, v68));
                  int32x4_t v33 = (int32x4_t)vdivq_f64(v61, vmlaq_f64(v60, v59, vcvtq_f64_s64(v66)));
                  *(float64x2_t *)unint64_t v63 = vdivq_f64(v61, vmlaq_f64(v60, v59, v69));
                  *(int32x4_t *)(v63 + 16) = v33;
                  v63 += 64;
                  v62 += 32;
                  v64 -= 8;
                }
                while (v64);
                if (v37 == v21)
                {
LABEL_49:
                  if (v30 >= 1)
                  {
                    uint8x8_t v74 = (const __int16 *)(a1 + 1768);
                    uint64_t v75 = v356;
                    if (v356) {
                      uint64_t v76 = 0;
                    }
                    else {
                      uint64_t v76 = v38;
                    }
                    if (v357)
                    {
                      int v77 = 0;
                      uint64_t v78 = 2 * v38;
                      if (v356)
                      {
                        do
                        {
                          for (uint64_t i = 0; i != v21; ++i)
                          {
                            unsigned int v80 = v29->u16[i];
                            if (*(_DWORD *)(*(void *)(a1 + 1448) + 4 * i))
                            {
                              double v81 = *(double *)(v32 + 8 * i);
                              double v82 = v81 * (double)v80;
                              double v83 = (double)v80 * v81 + -0.5;
                              double v84 = (double)v80 * v81 + 0.5;
                              if (v82 < 0.0) {
                                double v84 = v83;
                              }
                              unsigned int v80 = (int)v84;
                              if ((int)v84 <= 1) {
                                unsigned int v80 = 1;
                              }
                              if ((int)v80 >= *(unsigned __int16 *)v74) {
                                LOWORD(v80) = *v74;
                              }
                            }
                            v23[i] = v80;
                          }
                          ++v77;
                          int32x4_t v23 = (_WORD *)((char *)v23 + v78);
                          unint64_t v29 = (uint16x8_t *)((char *)v29 + v78);
                        }
                        while (v77 != v30);
                      }
                      else
                      {
                        do
                        {
                          for (uint64_t j = 0; j != v21; ++j)
                          {
                            *(_WORD *)(v27 + 2 * j) = v29->i16[j];
                            unsigned int v171 = v29->u16[j];
                            if (*(_DWORD *)(*(void *)(a1 + 1448) + 4 * j))
                            {
                              double v172 = *(double *)(v32 + 8 * j);
                              double v173 = v172 * (double)v171;
                              double v174 = (double)v171 * v172 + -0.5;
                              double v175 = (double)v171 * v172 + 0.5;
                              if (v173 < 0.0) {
                                double v175 = v174;
                              }
                              unsigned int v171 = (int)v175;
                              if ((int)v175 <= 1) {
                                unsigned int v171 = 1;
                              }
                              if ((int)v171 >= *(unsigned __int16 *)v74) {
                                LOWORD(v171) = *v74;
                              }
                            }
                            v23[j] = v171;
                          }
                          ++v77;
                          int32x4_t v23 = (_WORD *)((char *)v23 + v78);
                          v27 += 2 * v76;
                          unint64_t v29 = (uint16x8_t *)((char *)v29 + v78);
                        }
                        while (v77 != v30);
                      }
                      goto LABEL_152;
                    }
                    uint64_t v85 = 2 * v21;
                    uint64_t v86 = 2 * v38;
                    unint64_t v87 = a1 + 1770;
                    unint64_t v88 = v32 + 8 * v21;
                    if (v356)
                    {
                      uint64_t v89 = 0;
                      __asm
                      {
                        FMOV            V2.2D, #-0.5
                        FMOV            V3.2D, #0.5
                      }
                      uint64_t v95 = v23;
                      v96.i64[0] = 0x100000001;
                      v96.i64[1] = 0x100000001;
                      unint64_t v97 = (unint64_t)v29;
                      while (v21 >= 8)
                      {
                        uint64_t k = 0;
                        uint64_t v104 = v85 + v86 * v89;
                        unint64_t v105 = (unint64_t)v29->u64 + v104;
                        unint64_t v106 = (unint64_t)v23 + v104;
                        _CF = (unint64_t)v95 >= v88 || v32 >= v106;
                        char v108 = !_CF;
                        BOOL v110 = (unint64_t)v95 < v87 && (unint64_t)v74 < v106;
                        if (v97 < v106 && (unint64_t)v95 < v105) {
                          goto LABEL_71;
                        }
                        if (v108) {
                          goto LABEL_71;
                        }
                        if (v110) {
                          goto LABEL_71;
                        }
                        unint64_t v112 = 0;
                        uint16x4_t v113 = (uint16x4_t)vld1_dup_s16(v74);
                        int32x4_t v33 = (int32x4_t)vmovl_u16(v113);
                        int v114 = (float64x2_t *)v32;
                        do
                        {
                          uint16x8_t v115 = *(uint16x8_t *)(v97 + v112);
                          uint32x4_t v116 = vmovl_high_u16(v115);
                          v117.i64[0] = v116.u32[2];
                          v117.i64[1] = v116.u32[3];
                          float64x2_t v118 = vcvtq_f64_u64(v117);
                          v117.i64[0] = v116.u32[0];
                          v117.i64[1] = v116.u32[1];
                          float64x2_t v119 = vcvtq_f64_u64(v117);
                          uint32x4_t v120 = vmovl_u16(*(uint16x4_t *)v115.i8);
                          v117.i64[0] = v120.u32[2];
                          v117.i64[1] = v120.u32[3];
                          float64x2_t v121 = vcvtq_f64_u64(v117);
                          v117.i64[0] = v120.u32[0];
                          v117.i64[1] = v120.u32[1];
                          float64x2_t v122 = vcvtq_f64_u64(v117);
                          float64x2_t v124 = v114[2];
                          float64x2_t v123 = v114[3];
                          float64x2_t v126 = *v114;
                          float64x2_t v125 = v114[1];
                          v114 += 4;
                          *(int16x8_t *)&v95[v112 / 2] = vuzp1q_s16((int16x8_t)vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v126, v122)), (int8x16_t)vmlaq_f64(_Q2, v126, v122), (int8x16_t)vmlaq_f64(_Q3, v126, v122))), (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v125, v121)), (int8x16_t)vmlaq_f64(_Q2, v125, v121), (int8x16_t)vmlaq_f64(_Q3, v125, v121)))), v96), v33), (int16x8_t)vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v124, v119)), (int8x16_t)vmlaq_f64(_Q2, v124, v119), (int8x16_t)vmlaq_f64(_Q3, v124, v119))), (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v123, v118)), (int8x16_t)vmlaq_f64(_Q2, v123, v118), (int8x16_t)vmlaq_f64(_Q3, v123, v118)))), v96), v33));
                          v112 += 16;
                        }
                        while ((v85 & 0x1FFFFFFF0) != v112);
                        uint64_t k = v21 & 0x7FFFFFF8;
                        if ((v21 & 0xFFFFFFF8) != v21) {
                          goto LABEL_71;
                        }
LABEL_68:
                        v97 += v86;
                        uint64_t v95 = (_WORD *)((char *)v95 + v86);
                        if (++v89 == v30) {
                          goto LABEL_152;
                        }
                      }
                      for (uint64_t k = 0; k != v21; ++k)
                      {
LABEL_71:
                        v33.i16[0] = *(_WORD *)(v97 + 2 * k);
                        double v99 = (double)v33.u64[0];
                        double v100 = *(double *)(v32 + 8 * k);
                        double v101 = v100 * v99;
                        double v102 = v99 * v100 + -0.5;
                        *(double *)v33.i64 = v99 * v100 + 0.5;
                        if (v101 < 0.0) {
                          *(double *)v33.i64 = v102;
                        }
                        int v103 = (int)*(double *)v33.i64;
                        if ((int)*(double *)v33.i64 <= 1) {
                          int v103 = 1;
                        }
                        if (v103 >= *(unsigned __int16 *)v74) {
                          LOWORD(v103) = *v74;
                        }
                        v95[k] = v103;
                      }
                      goto LABEL_68;
                    }
                    uint64_t v262 = 2 * v76;
                    __asm
                    {
                      FMOV            V2.2D, #-0.5
                      FMOV            V3.2D, #0.5
                    }
                    v265.i64[0] = 0x100000001;
                    v265.i64[1] = 0x100000001;
                    v266 = v23;
                    unint64_t v267 = v27;
                    unint64_t v268 = (unint64_t)v29;
                    while (v21 >= 0x10)
                    {
                      uint64_t m = 0;
                      uint64_t v270 = v85 + v86 * v75;
                      unint64_t v271 = (unint64_t)v29->u64 + v270;
                      unint64_t v272 = (unint64_t)v23 + v270;
                      unint64_t v273 = v27 + v270;
                      BOOL v275 = v267 < (unint64_t)v29->u64 + v270 && v268 < v273;
                      BOOL v277 = v267 < v88 && v32 < v273;
                      BOOL v279 = v267 < v87 && (unint64_t)v74 < v273;
                      BOOL v281 = (unint64_t)v266 < v271 && v268 < v272;
                      BOOL v283 = (unint64_t)v266 < v88 && v32 < v272;
                      BOOL v285 = (unint64_t)v266 < v87 && (unint64_t)v74 < v272;
                      if ((unint64_t)v266 < v273 && v267 < v272) {
                        goto LABEL_261;
                      }
                      if (v275) {
                        goto LABEL_261;
                      }
                      if (v277) {
                        goto LABEL_261;
                      }
                      if (v279) {
                        goto LABEL_261;
                      }
                      if (v281) {
                        goto LABEL_261;
                      }
                      if (v283) {
                        goto LABEL_261;
                      }
                      if (v285) {
                        goto LABEL_261;
                      }
                      unint64_t v287 = 0;
                      uint16x4_t v288 = (uint16x4_t)vld1_dup_s16(v74);
                      int32x4_t v33 = (int32x4_t)vmovl_u16(v288);
                      v289 = (float64x2_t *)v32;
                      do
                      {
                        uint16x8_t v290 = *(uint16x8_t *)(v268 + v287);
                        *(uint16x8_t *)(v267 + v287) = v290;
                        uint32x4_t v291 = vmovl_high_u16(v290);
                        v292.i64[0] = v291.u32[2];
                        v292.i64[1] = v291.u32[3];
                        float64x2_t v293 = vcvtq_f64_u64(v292);
                        v292.i64[0] = v291.u32[0];
                        v292.i64[1] = v291.u32[1];
                        float64x2_t v294 = vcvtq_f64_u64(v292);
                        uint32x4_t v295 = vmovl_u16(*(uint16x4_t *)v290.i8);
                        v292.i64[0] = v295.u32[2];
                        v292.i64[1] = v295.u32[3];
                        float64x2_t v296 = vcvtq_f64_u64(v292);
                        v292.i64[0] = v295.u32[0];
                        v292.i64[1] = v295.u32[1];
                        float64x2_t v297 = vcvtq_f64_u64(v292);
                        float64x2_t v299 = v289[2];
                        float64x2_t v298 = v289[3];
                        float64x2_t v301 = *v289;
                        float64x2_t v300 = v289[1];
                        v289 += 4;
                        *(int16x8_t *)&v266[v287 / 2] = vuzp1q_s16((int16x8_t)vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v301, v297)), (int8x16_t)vmlaq_f64(_Q2, v301, v297), (int8x16_t)vmlaq_f64(_Q3, v301, v297))), (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v300, v296)), (int8x16_t)vmlaq_f64(_Q2, v300, v296), (int8x16_t)vmlaq_f64(_Q3, v300, v296)))), v265), v33), (int16x8_t)vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v299, v294)), (int8x16_t)vmlaq_f64(_Q2, v299, v294), (int8x16_t)vmlaq_f64(_Q3, v299, v294))), (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v298, v293)), (int8x16_t)vmlaq_f64(_Q2, v298, v293), (int8x16_t)vmlaq_f64(_Q3, v298, v293)))), v265), v33));
                        v287 += 16;
                      }
                      while ((v85 & 0x1FFFFFFF0) != v287);
                      uint64_t m = v21 & 0x7FFFFFF8;
                      if ((v21 & 0xFFFFFFF8) != v21) {
                        goto LABEL_261;
                      }
LABEL_208:
                      v268 += v86;
                      v266 = (_WORD *)((char *)v266 + v86);
                      v267 += v262;
                      ++v75;
                      uint64_t v16 = 1;
                      if (v75 == v34) {
                        goto LABEL_153;
                      }
                    }
                    for (uint64_t m = 0; m != v21; ++m)
                    {
LABEL_261:
                      *(_WORD *)(v267 + 2 * m) = *(_WORD *)(v268 + 2 * m);
                      int v302 = *(unsigned __int16 *)v74;
                      v33.i16[0] = *(_WORD *)(v268 + 2 * m);
                      double v303 = (double)v33.u64[0];
                      double v304 = *(double *)(v32 + 8 * m);
                      double v305 = v304 * v303;
                      double v306 = v303 * v304 + -0.5;
                      *(double *)v33.i64 = v303 * v304 + 0.5;
                      if (v305 < 0.0) {
                        *(double *)v33.i64 = v306;
                      }
                      int v307 = (int)*(double *)v33.i64;
                      if ((int)*(double *)v33.i64 <= 1) {
                        int v307 = 1;
                      }
                      if (v307 < v302) {
                        LOWORD(v302) = v307;
                      }
                      v266[m] = v302;
                    }
                    goto LABEL_208;
                  }
LABEL_152:
                  uint64_t v16 = 1;
LABEL_153:
                  BOOL v11 = v359;
                  sub_1000C321C(v32);
                  char v176 = v360;
                  if (*v359 != 4) {
                    char v176 = 1;
                  }
                  if (v176) {
                    goto LABEL_310;
                  }
                  goto LABEL_309;
                }
              }
              else
              {
                uint64_t v37 = 0;
              }
            }
            else
            {
              uint64_t v37 = 0;
              uint64_t v38 = v31;
              double v39 = *(double *)&v358;
            }
            int v70 = (double *)(v32 + 8 * v37);
            uint64_t v71 = v21 - v37;
            uint16x8_t v72 = (int *)(v22 + 4 * v37);
            do
            {
              int v73 = *v72++;
              *v70++ = v35 / (v36 + (double)v73 * v39);
              --v71;
            }
            while (v71);
            goto LABEL_49;
          }
LABEL_21:
          uint64_t v16 = 1;
          uint64_t v43 = qword_100101CC0;
          if (!qword_100101CC0) {
            goto LABEL_37;
          }
LABEL_31:
          if (!*(_DWORD *)(v43 + 3384))
          {
LABEL_37:
            double v51 = 1.0;
            uint64_t v52 = a1;
            LODWORD(v20) = v21;
            int v53 = v19;
            int16x8_t v54 = (int *)v22;
            int32x4_t v55 = v29;
            int32x4_t v56 = v23;
            int32x4_t v57 = (_WORD *)v27;
            goto LABEL_306;
          }
          double v45 = 1.0;
          if ((int)v21 < 1)
          {
LABEL_305:
            uint64_t v52 = a1;
            int v28 = 0;
            int v53 = v19;
            int16x8_t v54 = (int *)v22;
            int32x4_t v55 = v29;
            int32x4_t v56 = v23;
            int32x4_t v57 = 0;
            double v51 = v45;
LABEL_306:
            sub_10000D7D0(v52, v28, v20, v53, v54, v55, v56, v57, v51, a3, a4, *(double *)a5.i64, *(double *)a6.i64, *(double *)a7.i64, *(double *)_Q6.i64);
            BOOL v11 = v359;
            char v353 = v360;
            if (*v359 != 4) {
              char v353 = 1;
            }
            if (v353) {
              goto LABEL_310;
            }
            goto LABEL_309;
          }
          int v46 = *(_DWORD *)(a1 + 1404) * *(_DWORD *)(v43 + 3376);
          a3 = (double)*(int *)(a1 + 1192);
          a4 = (double)v19;
          int32x4_t v47 = (const __int16 *)(a1 + 1768);
          if (v46 < 1)
          {
            if (v28)
            {
              if (v21 >= 0x10)
              {
                int v49 = 0;
                uint64_t v58 = 0;
                unint64_t v179 = v27 + 2 * v21;
                BOOL v181 = v27 < v22 + 4 * v21 && v22 < v179;
                BOOL v183 = v27 < a1 + 1770 && (unint64_t)v47 < v179;
                BOOL v184 = (unint64_t)v29 >= v179 || v27 >= (unint64_t)v29 + 2 * v21;
                if (!v184 || v181)
                {
                  int v50 = 0;
                }
                else
                {
                  int v50 = 0;
                  if (!v183)
                  {
                    float64x2_t v185 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
                    uint16x4_t v186 = (uint16x4_t)vld1_dup_s16(v47);
                    a7 = (int32x4_t)vmovl_u16(v186);
                    uint64_t v58 = v21 & 0xFFFFFFF0;
                    a6 = 0uLL;
                    v187 = v29 + 1;
                    __asm { FMOV            V7.2D, #0.5 }
                    v189 = (uint16x8_t *)(v27 + 16);
                    __asm { FMOV            V16.2D, #-0.5 }
                    v191 = (long long *)(v22 + 32);
                    uint64_t v192 = v58;
                    _Q6 = 0uLL;
                    int32x4_t v193 = 0uLL;
                    int32x4_t v194 = 0uLL;
                    int32x4_t v195 = 0uLL;
                    int32x4_t v196 = 0uLL;
                    int32x4_t v197 = 0uLL;
                    int32x4_t v198 = 0uLL;
                    do
                    {
                      uint16x8_t v200 = v187[-1];
                      uint16x8_t v199 = *v187;
                      long long v202 = *(v191 - 2);
                      long long v201 = *(v191 - 1);
                      long long v203 = v191[1];
                      v189[-1] = v200;
                      long long v204 = *v191;
                      v191 += 4;
                      v205.i64[0] = SDWORD2(v202);
                      v205.i64[1] = SHIDWORD(v202);
                      float64x2_t v206 = vcvtq_f64_s64(v205);
                      v205.i64[0] = (int)v202;
                      v205.i64[1] = SDWORD1(v202);
                      int64x2_t v207 = v205;
                      v205.i64[0] = SDWORD2(v201);
                      v205.i64[1] = SHIDWORD(v201);
                      float64x2_t v208 = vcvtq_f64_s64(v205);
                      v205.i64[0] = (int)v201;
                      v205.i64[1] = SDWORD1(v201);
                      float64x2_t v209 = vcvtq_f64_s64(v205);
                      v205.i64[0] = SDWORD2(v204);
                      v205.i64[1] = SHIDWORD(v204);
                      int64x2_t v210 = v205;
                      v205.i64[0] = (int)v204;
                      v205.i64[1] = SDWORD1(v204);
                      float64x2_t v211 = vcvtq_f64_s64(v205);
                      v205.i64[0] = SDWORD2(v203);
                      v205.i64[1] = SHIDWORD(v203);
                      float64x2_t v212 = vcvtq_f64_s64(v205);
                      v205.i64[0] = (int)v203;
                      v205.i64[1] = SDWORD1(v203);
                      float64x2_t v213 = vmulq_n_f64(vdivq_f64(v185, v206), a3);
                      float64x2_t v214 = vmulq_n_f64(vdivq_f64(v185, vcvtq_f64_s64(v207)), a3);
                      float64x2_t v215 = vmulq_n_f64(vdivq_f64(v185, v208), a3);
                      float64x2_t v216 = vmulq_n_f64(vdivq_f64(v185, v209), a3);
                      float64x2_t v217 = vmulq_n_f64(vdivq_f64(v185, vcvtq_f64_s64(v210)), a3);
                      float64x2_t v218 = vmulq_n_f64(vdivq_f64(v185, v211), a3);
                      float64x2_t v219 = vmulq_n_f64(vdivq_f64(v185, v212), a3);
                      float64x2_t v220 = vmulq_n_f64(vdivq_f64(v185, vcvtq_f64_s64(v205)), a3);
                      uint32x4_t v221 = (uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v220, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v220), _Q16, _Q7))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v219, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v219), _Q16, _Q7))));
                      *(void *)&v220.f64[0] = 0x100000001;
                      *(void *)&v220.f64[1] = 0x100000001;
                      uint16x8_t *v189 = v199;
                      v189 += 2;
                      int32x4_t v196 = vaddq_s32(vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v216, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v216), _Q16, _Q7))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v215, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v215), _Q16, _Q7)))), (uint32x4_t)v220), a7),
                               v196);
                      int32x4_t v195 = vaddq_s32(vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v214, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v214), _Q16, _Q7))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v213, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v213), _Q16, _Q7)))), (uint32x4_t)v220), a7),
                               v195);
                      int32x4_t v198 = vaddq_s32(vminq_s32((int32x4_t)vmaxq_u32(v221, (uint32x4_t)v220), a7), v198);
                      _Q6 = (int64x2_t)vaddw_high_u16((uint32x4_t)_Q6, v200);
                      a6 = (int32x4_t)vaddw_u16((uint32x4_t)a6, *(uint16x4_t *)v200.i8);
                      int32x4_t v197 = vaddq_s32(vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v218, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v218), _Q16, _Q7))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v217, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v217), _Q16, _Q7)))), (uint32x4_t)v220), a7),
                               v197);
                      int32x4_t v194 = (int32x4_t)vaddw_high_u16((uint32x4_t)v194, v199);
                      int32x4_t v193 = (int32x4_t)vaddw_u16((uint32x4_t)v193, *(uint16x4_t *)v199.i8);
                      v187 += 2;
                      v192 -= 16;
                    }
                    while (v192);
                    int v50 = vaddvq_s32(vaddq_s32(vaddq_s32(v197, v195), vaddq_s32(v198, v196)));
                    a5 = vaddq_s32(v194, (int32x4_t)_Q6);
                    int v49 = vaddvq_s32(vaddq_s32(vaddq_s32(v193, a6), a5));
                    double v45 = 1.0;
                    if (v58 == v21) {
                      goto LABEL_303;
                    }
                  }
                }
              }
              else
              {
                uint64_t v58 = 0;
                int v49 = 0;
                int v50 = 0;
              }
              uint64_t v334 = v21 - v58;
              v335 = (int *)(v22 + 4 * v58);
              uint64_t v336 = v58;
              v337 = (__int16 *)(v27 + 2 * v58);
              v338 = &v29->i16[v336];
              a5.i64[0] = 0.5;
              a6.i64[0] = -0.5;
              do
              {
                *v337++ = *v338;
                int v339 = *v335++;
                double v340 = a4 / (double)v339 * a3;
                if (v340 >= 0.0) {
                  *(double *)a7.i64 = 0.5;
                }
                else {
                  *(double *)a7.i64 = -0.5;
                }
                int v341 = (int)(v340 + *(double *)a7.i64);
                if (v341 <= 1) {
                  int v341 = 1;
                }
                if (v341 >= *(unsigned __int16 *)v47) {
                  int v341 = *(unsigned __int16 *)v47;
                }
                v50 += v341;
                int v342 = (unsigned __int16)*v338++;
                v49 += v342;
                --v334;
              }
              while (v334);
              goto LABEL_303;
            }
            signed int v177 = *(unsigned __int16 *)v47;
            if (v21 >= 8)
            {
              a6 = (int32x4_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
              a7 = vdupq_n_s32(v177);
              a5 = 0uLL;
              uint64_t v178 = v21 & 0xFFFFFFF8;
              __asm
              {
                FMOV            V6.2D, #0.5
                FMOV            V7.2D, #-0.5
              }
              v309.i64[0] = 0x100000001;
              v309.i64[1] = 0x100000001;
              uint64_t v310 = v178;
              v311 = v29;
              v312 = (long long *)v22;
              int32x4_t v313 = 0uLL;
              int32x4_t v314 = 0uLL;
              int32x4_t v315 = 0uLL;
              do
              {
                long long v317 = *v312;
                long long v316 = v312[1];
                v312 += 2;
                v318.i64[0] = SDWORD2(v317);
                v318.i64[1] = SHIDWORD(v317);
                float64x2_t v319 = vcvtq_f64_s64(v318);
                v318.i64[0] = (int)v317;
                v318.i64[1] = SDWORD1(v317);
                float64x2_t v320 = vcvtq_f64_s64(v318);
                v318.i64[0] = SDWORD2(v316);
                v318.i64[1] = SHIDWORD(v316);
                float64x2_t v321 = vcvtq_f64_s64(v318);
                v318.i64[0] = (int)v316;
                v318.i64[1] = SDWORD1(v316);
                float64x2_t v322 = vmulq_n_f64(vdivq_f64((float64x2_t)a6, v319), a3);
                float64x2_t v323 = vmulq_n_f64(vdivq_f64((float64x2_t)a6, v320), a3);
                float64x2_t v324 = vmulq_n_f64(vdivq_f64((float64x2_t)a6, v321), a3);
                float64x2_t v325 = vmulq_n_f64(vdivq_f64((float64x2_t)a6, vcvtq_f64_s64(v318)), a3);
                int32x4_t v315 = vaddq_s32(vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v325, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v325), _Q7, (int8x16_t)_Q6))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v324, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v324), _Q7, (int8x16_t)_Q6)))), v309), a7),
                         v315);
                int32x4_t v314 = vaddq_s32(vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v323, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v323), _Q7, (int8x16_t)_Q6))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v322, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v322), _Q7, (int8x16_t)_Q6)))), v309), a7),
                         v314);
                uint16x8_t v326 = *v311++;
                int32x4_t v313 = (int32x4_t)vaddw_high_u16((uint32x4_t)v313, v326);
                a5 = (int32x4_t)vaddw_u16((uint32x4_t)a5, *(uint16x4_t *)v326.i8);
                v310 -= 8;
              }
              while (v310);
              int v50 = vaddvq_s32(vaddq_s32(v314, v315));
              int v49 = vaddvq_s32(vaddq_s32(a5, v313));
              if (v178 == v21) {
                goto LABEL_303;
              }
            }
            else
            {
              uint64_t v178 = 0;
              int v49 = 0;
              int v50 = 0;
            }
            uint64_t v327 = v21 - v178;
            v328 = (unsigned __int16 *)v29 + v178;
            a5.i64[0] = 0.5;
            a6.i64[0] = -0.5;
            v329 = (int *)(v22 + 4 * v178);
            do
            {
              int v330 = *v329++;
              double v331 = a4 / (double)v330 * a3;
              if (v331 >= 0.0) {
                *(double *)a7.i64 = 0.5;
              }
              else {
                *(double *)a7.i64 = -0.5;
              }
              int v332 = (int)(v331 + *(double *)a7.i64);
              if (v332 <= 1) {
                int v332 = 1;
              }
              if (v332 >= v177) {
                int v332 = v177;
              }
              v50 += v332;
              int v333 = *v328++;
              v49 += v333;
              --v327;
            }
            while (v327);
            goto LABEL_303;
          }
          *(double *)a5.i64 = (double)v46;
          if (v28)
          {
            if (v21 < 8)
            {
              uint64_t v48 = 0;
              int v49 = 0;
              int v50 = 0;
              goto LABEL_294;
            }
            int v49 = 0;
            uint64_t v48 = 0;
            unint64_t v128 = v27 + 2 * v21;
            unint64_t v129 = v22 + 4 * v21;
            unint64_t v130 = (unint64_t)v29 + 2 * v21;
            unint64_t v131 = a1 + 1770;
            BOOL v133 = v27 < v130 && (unint64_t)v29 < v128;
            BOOL v135 = v27 < v131 && (unint64_t)v47 < v128;
            BOOL v137 = v22 < v130 && (unint64_t)v29 < v129;
            BOOL v139 = v22 < v131 && (unint64_t)v47 < v129;
            BOOL v140 = v22 >= v128 || v27 >= v129;
            if (!v140 || v133)
            {
              int v50 = 0;
              goto LABEL_294;
            }
            int v50 = 0;
            if (v135) {
              goto LABEL_294;
            }
            if (v137) {
              goto LABEL_294;
            }
            if (v139) {
              goto LABEL_294;
            }
            float64x2_t v141 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0);
            _Q6 = vdupq_lane_s64(*(uint64_t *)&a4, 0);
            uint16x4_t v142 = (uint16x4_t)vld1_dup_s16(v47);
            int32x4_t v143 = (int32x4_t)vmovl_u16(v142);
            uint64_t v48 = v21 & 0xFFFFFFF8;
            a7 = 0uLL;
            __asm
            {
              FMOV            V16.2D, #0.5
              FMOV            V17.2D, #-0.5
            }
            v146.i64[0] = 0x100000001;
            v146.i64[1] = 0x100000001;
            uint64_t v147 = v48;
            v148 = (int32x4_t *)v22;
            v149 = (uint16x8_t *)v27;
            v150 = v29;
            int32x4_t v151 = 0uLL;
            int32x4_t v152 = 0uLL;
            int32x4_t v153 = 0uLL;
            do
            {
              uint16x8_t v154 = *v150++;
              *v149++ = v154;
              uint32x4_t v155 = vmovl_u16(*(uint16x4_t *)v154.i8);
              v156.i64[0] = v155.u32[0];
              v156.i64[1] = v155.u32[1];
              float64x2_t v157 = vcvtq_f64_u64(v156);
              v156.i64[0] = v155.u32[2];
              v156.i64[1] = v155.u32[3];
              float64x2_t v158 = vcvtq_f64_u64(v156);
              uint32x4_t v159 = vmovl_high_u16(v154);
              v156.i64[0] = v159.u32[0];
              v156.i64[1] = v159.u32[1];
              float64x2_t v160 = vcvtq_f64_u64(v156);
              v156.i64[0] = v159.u32[2];
              v156.i64[1] = v159.u32[3];
              int32x4_t v161 = vaddq_s32(*v148, vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v141, v157), *(double *)a5.i64)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v141, v158), *(double *)a5.i64))));
              int32x4_t v162 = vaddq_s32(v148[1], vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v141, v160), *(double *)a5.i64)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v141, vcvtq_f64_u64(v156)), *(double *)a5.i64))));
              int32x4_t *v148 = v161;
              v148[1] = v162;
              v148 += 2;
              v156.i64[0] = v161.i32[2];
              v156.i64[1] = v161.i32[3];
              float64x2_t v163 = vcvtq_f64_s64((int64x2_t)v156);
              v156.i64[0] = v161.i32[0];
              v156.i64[1] = v161.i32[1];
              float64x2_t v164 = vcvtq_f64_s64((int64x2_t)v156);
              v156.i64[0] = v162.i32[2];
              v156.i64[1] = v162.i32[3];
              float64x2_t v165 = vcvtq_f64_s64((int64x2_t)v156);
              v156.i64[0] = v162.i32[0];
              v156.i64[1] = v162.i32[1];
              float64x2_t v166 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, v163), a3);
              float64x2_t v167 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, v164), a3);
              float64x2_t v168 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, v165), a3);
              float64x2_t v169 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, vcvtq_f64_s64((int64x2_t)v156)), a3);
              int32x4_t v153 = vaddq_s32(vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v169, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v169), _Q17, _Q16))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v168, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v168), _Q17, _Q16)))), v146), v143),
                       v153);
              int32x4_t v152 = vaddq_s32(vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v167, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v167), _Q17, _Q16))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v166, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v166), _Q17, _Q16)))), v146), v143),
                       v152);
              int32x4_t v151 = (int32x4_t)vaddw_high_u16((uint32x4_t)v151, v154);
              a7 = (int32x4_t)vaddw_u16((uint32x4_t)a7, *(uint16x4_t *)v154.i8);
              v147 -= 8;
            }
            while (v147);
            int v50 = vaddvq_s32(vaddq_s32(v152, v153));
            a6 = vaddq_s32(a7, v151);
            a6.i32[0] = vaddvq_s32(a6);
            int v49 = a6.i32[0];
            if (v48 != v21)
            {
LABEL_294:
              uint64_t v343 = v21 - v48;
              v344 = (int *)(v22 + 4 * v48);
              uint64_t v345 = v48;
              v346 = (__int16 *)(v27 + 2 * v48);
              v347 = &v29->i16[v345];
              a6.i64[0] = 0.5;
              a7.i64[0] = -0.5;
              do
              {
                *v346++ = *v347;
                _Q6.i16[0] = *v347;
                int v348 = *v344 + (int)(a3 / (double)_Q6.u64[0] * *(double *)a5.i64);
                *v344++ = v348;
                double v349 = a4 / (double)v348 * a3;
                if (v349 >= 0.0) {
                  double v350 = 0.5;
                }
                else {
                  double v350 = -0.5;
                }
                *(double *)_Q6.i64 = v349 + v350;
                int v351 = (int)*(double *)_Q6.i64;
                if ((int)*(double *)_Q6.i64 <= 1) {
                  int v351 = 1;
                }
                if (v351 >= *(unsigned __int16 *)v47) {
                  int v351 = *(unsigned __int16 *)v47;
                }
                v50 += v351;
                int v352 = (unsigned __int16)*v347++;
                v49 += v352;
                --v343;
              }
              while (v343);
            }
LABEL_303:
            if (v49)
            {
              a3 = (double)v49;
              double v45 = (double)v50 / (double)v49;
            }
            goto LABEL_305;
          }
          if (v21 >= 8)
          {
            int v49 = 0;
            uint64_t v127 = 0;
            unint64_t v222 = v22 + 4 * v21;
            BOOL v224 = v22 < a1 + 1770 && (unint64_t)v47 < v222;
            _CF = (unint64_t)v29 >= v222;
            int v50 = 0;
            if ((_CF || v22 >= (unint64_t)v29 + 2 * v21) && !v224)
            {
              float64x2_t v226 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0);
              _Q6 = vdupq_lane_s64(*(uint64_t *)&a4, 0);
              uint16x4_t v227 = (uint16x4_t)vld1_dup_s16(v47);
              int32x4_t v228 = (int32x4_t)vmovl_u16(v227);
              uint64_t v127 = v21 & 0xFFFFFFF8;
              a7 = 0uLL;
              __asm
              {
                FMOV            V16.2D, #0.5
                FMOV            V17.2D, #-0.5
              }
              v231.i64[0] = 0x100000001;
              v231.i64[1] = 0x100000001;
              uint64_t v232 = v127;
              v233 = (int32x4_t *)v22;
              v234 = v29;
              int32x4_t v235 = 0uLL;
              int32x4_t v236 = 0uLL;
              int32x4_t v237 = 0uLL;
              do
              {
                uint16x8_t v238 = *v234++;
                uint32x4_t v239 = vmovl_u16(*(uint16x4_t *)v238.i8);
                v240.i64[0] = v239.u32[0];
                v240.i64[1] = v239.u32[1];
                float64x2_t v241 = vcvtq_f64_u64(v240);
                v240.i64[0] = v239.u32[2];
                v240.i64[1] = v239.u32[3];
                float64x2_t v242 = vcvtq_f64_u64(v240);
                uint32x4_t v243 = vmovl_high_u16(v238);
                v240.i64[0] = v243.u32[0];
                v240.i64[1] = v243.u32[1];
                float64x2_t v244 = vcvtq_f64_u64(v240);
                v240.i64[0] = v243.u32[2];
                v240.i64[1] = v243.u32[3];
                int32x4_t v245 = vaddq_s32(*v233, vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v226, v241), *(double *)a5.i64)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v226, v242), *(double *)a5.i64))));
                int32x4_t v246 = vaddq_s32(v233[1], vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v226, v244), *(double *)a5.i64)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v226, vcvtq_f64_u64(v240)), *(double *)a5.i64))));
                int32x4_t *v233 = v245;
                v233[1] = v246;
                v233 += 2;
                v240.i64[0] = v245.i32[2];
                v240.i64[1] = v245.i32[3];
                float64x2_t v247 = vcvtq_f64_s64((int64x2_t)v240);
                v240.i64[0] = v245.i32[0];
                v240.i64[1] = v245.i32[1];
                float64x2_t v248 = vcvtq_f64_s64((int64x2_t)v240);
                v240.i64[0] = v246.i32[2];
                v240.i64[1] = v246.i32[3];
                float64x2_t v249 = vcvtq_f64_s64((int64x2_t)v240);
                v240.i64[0] = v246.i32[0];
                v240.i64[1] = v246.i32[1];
                float64x2_t v250 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, v247), a3);
                float64x2_t v251 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, v248), a3);
                float64x2_t v252 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, v249), a3);
                float64x2_t v253 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, vcvtq_f64_s64((int64x2_t)v240)), a3);
                int32x4_t v237 = vaddq_s32(vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v253, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v253), _Q17, _Q16))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v252, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v252), _Q17, _Q16)))), v231), v228),
                         v237);
                int32x4_t v236 = vaddq_s32(vminq_s32((int32x4_t)vmaxq_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v251, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v251), _Q17, _Q16))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v250, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v250), _Q17, _Q16)))), v231), v228),
                         v236);
                int32x4_t v235 = (int32x4_t)vaddw_high_u16((uint32x4_t)v235, v238);
                a7 = (int32x4_t)vaddw_u16((uint32x4_t)a7, *(uint16x4_t *)v238.i8);
                v232 -= 8;
              }
              while (v232);
              int v50 = vaddvq_s32(vaddq_s32(v236, v237));
              a6 = vaddq_s32(a7, v235);
              a6.i32[0] = vaddvq_s32(a6);
              int v49 = a6.i32[0];
              if (v127 == v21) {
                goto LABEL_303;
              }
            }
          }
          else
          {
            uint64_t v127 = 0;
            int v49 = 0;
            int v50 = 0;
          }
          uint64_t v254 = v21 - v127;
          v255 = (int *)(v22 + 4 * v127);
          a6.i64[0] = 0.5;
          a7.i64[0] = -0.5;
          v256 = (unsigned __int16 *)v29 + v127;
          do
          {
            _Q6.i16[0] = *v256;
            int v257 = *v255 + (int)(a3 / (double)_Q6.u64[0] * *(double *)a5.i64);
            *v255++ = v257;
            double v258 = a4 / (double)v257 * a3;
            if (v258 >= 0.0) {
              double v259 = 0.5;
            }
            else {
              double v259 = -0.5;
            }
            *(double *)_Q6.i64 = v258 + v259;
            int v260 = (int)*(double *)_Q6.i64;
            if ((int)*(double *)_Q6.i64 <= 1) {
              int v260 = 1;
            }
            if (v260 >= *(unsigned __int16 *)v47) {
              int v260 = *(unsigned __int16 *)v47;
            }
            v50 += v260;
            int v261 = *v256++;
            v49 += v261;
            --v254;
          }
          while (v254);
          goto LABEL_303;
        }
        LOBYTE(v12) = v360;
        LODWORD(v20) = v41;
        unint64_t v22 = v40;
      }
      unint64_t v27 = 0;
      uint64_t v16 = 0;
      if (v12)
      {
        sub_1000C321C(0);
        char v44 = v360;
        if (*v11 != 4) {
          char v44 = 1;
        }
        if (v44) {
          goto LABEL_310;
        }
LABEL_309:
        *BOOL v11 = 2;
LABEL_310:
        *(void *)(a1 + 1208) = *(void *)(a1 + 1248);
        return v16;
      }
      v359 = v11;
      unint64_t v29 = *(uint16x8_t **)(a1 + 1208);
      int v28 = 0;
      uint64_t v43 = qword_100101CC0;
      if (!qword_100101CC0) {
        goto LABEL_37;
      }
      goto LABEL_31;
    }
    BOOL v12 = 0;
    uint64_t v13 = *(void *)(qword_100101CC0 + 3368);
    int v14 = *(_DWORD *)(qword_100101CC0 + 3388);
    uint64_t v10 = *(void *)(qword_100101CC0 + 3376);
    int v15 = v9[1];
    if (v15 >= 50) {
      goto LABEL_8;
    }
  }
  else
  {
    int v14 = 0;
    BOOL v11 = (_DWORD *)(a1 + 1296);
    BOOL v12 = *(_DWORD *)(a1 + 1296) == 4;
    uint64_t v13 = 0;
    int v15 = v9[1];
    if (v15 >= 50) {
      goto LABEL_8;
    }
  }
  return 1;
}

uint64_t sub_10000C58C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  uint64_t v10 = *(void *)(a1 + 1432);
  unint64_t v31 = 0;
  sub_1000043BC(a1, a3, a4, &v31);
  if (*(_DWORD *)(v10 + 92) <= (signed int)a3 || (int v18 = *(void **)(*(void *)v10 + 8 * a3)) == 0)
  {
    uint64_t result = sub_10000D03C(a1, a3);
    if (!result) {
      return result;
    }
    int v18 = *(void **)(*(void *)v10 + 8 * a3);
  }
  if (!*(void *)(v18[3] + 8 * a4))
  {
    sub_1000C2F04(2 * *(int *)(v10 + 32), v11, v12, v13, v14, v15, v16, v17);
    *(void *)(v18[3] + 8 * a4) = v20;
    int v21 = *(_DWORD *)(v10 + 56);
    int v22 = *(_DWORD *)(v10 + 60);
    *(_DWORD *)(v10 + 56) = v21 + 1;
    if (v21 >= v22) {
      *(_DWORD *)(v10 + 60) = v21 + 1;
    }
  }
  int32x4_t v23 = *(uint16x8_t **)(v18[3] + 8 * a4);
  *(_DWORD *)(a1 + 1488) = a5;
  uint64_t v24 = *(unsigned int *)(a1 + 1100);
  int v25 = *(__int16 *)(v18[1] + 2 * a4) + a5;
  if ((v25 + 0x3FFF) <= 0x7FFE)
  {
    if ((int)v24 < 1) {
      goto LABEL_28;
    }
    uint64_t v26 = 0;
    while (1)
    {
      int v27 = v23->i16[v26] + (*(unsigned __int8 *)(a2 + v26) - *(unsigned __int8 *)(v31 + v26)) * a5;
      if ((v27 - 16385) <= 0xFFFF7FFE) {
        break;
      }
      v23->i16[v26++] = v27;
      if (v24 == v26) {
        goto LABEL_28;
      }
    }
    if (v26)
    {
      if (v26 >= 8)
      {
        uint64_t v28 = v26 & 0x7FFFFFF8;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFF8;
        int v30 = v23;
        do
        {
          *(int16x8_t *)int v30 = vshrq_n_s16((int16x8_t)vsraq_n_u16(*v30, *v30, 0xFuLL), 1uLL);
          ++v30;
          v29 -= 8;
        }
        while (v29);
        goto LABEL_24;
      }
      uint64_t v28 = 0;
      do
      {
        v23->i16[v28] = (__int16)(v23->i16[v28] + ((unsigned __int16)v23->i16[v28] >> 15)) >> 1;
        ++v28;
LABEL_24:
        ;
      }
      while (v26 != v28);
    }
    v23->i16[v26] = v27 / 2;
    v25 /= 2;
    *(_WORD *)(v18[2] + 2 * a4) = (__int16)(*(_WORD *)(v18[2] + 2 * a4)
                                                          + (*(_WORD *)(v18[2] + 2 * a4) >> 15)) >> 1;
    LODWORD(v26) = v26 + 1;
    if ((int)v26 >= (int)v24) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  LODWORD(v26) = 0;
  v25 /= 2;
  *(_WORD *)(v18[2] + 2 * a4) = (__int16)(*(_WORD *)(v18[2] + 2 * a4)
                                                        + (*(_WORD *)(v18[2] + 2 * a4) >> 15)) >> 1;
  if ((int)v24 > 0)
  {
LABEL_26:
    uint64_t v26 = v26;
    do
    {
      v23->i16[v26] = (v23->i16[v26] + (*(unsigned __int8 *)(a2 + v26) - *(unsigned __int8 *)(v31 + v26)) * a5) / 2;
      ++v26;
    }
    while (v24 != v26);
  }
LABEL_28:
  *(_WORD *)(v18[1] + 2 * a4) = v25;
  return 1;
}

uint64_t sub_10000C810(uint64_t a1, unsigned int a2, int a3)
{
  BOOL v6 = a2 == 3;
  BOOL v7 = a2 < 0xA;
  if (a2 == 7)
  {
    if (qword_100101CC0)
    {
      uint64_t v8 = *(void *)(qword_100101CC0 + 920);
      if (v8 == -1)
      {
        uint64_t v8 = *(void *)(qword_100101CC0 + 912);
        uint64_t v9 = *(void *)(qword_100101CC0 + 952);
        if (v9 != -1)
        {
LABEL_5:
          uint64_t v10 = *(void *)(a1 + 1432);
          if (!v10) {
            goto LABEL_6;
          }
LABEL_17:
          if (*(int *)(v10 + 92) >= 1)
          {
            int v18 = 0;
            do
              sub_10000CBDC(*(void **)(a1 + 1432), (unsigned __int16)v18++);
            while (*(_DWORD *)(v10 + 92) > (int)(unsigned __int16)v18);
          }
          sub_1000C321C(*(void *)v10);
          sub_1000C321C(v10);
          *(void *)(a1 + 1432) = 0;
          if (*(int *)(a1 + 1080) >= 1) {
            goto LABEL_7;
          }
          return 0;
        }
      }
      else
      {
        uint64_t v9 = *(void *)(qword_100101CC0 + 952);
        if (v9 != -1) {
          goto LABEL_5;
        }
      }
      goto LABEL_14;
    }
  }
  else if (qword_100101CC0)
  {
    LODWORD(v8) = *(_DWORD *)(qword_100101CC0 + 912);
LABEL_14:
    uint64_t v9 = *(void *)(qword_100101CC0 + 944);
    uint64_t v10 = *(void *)(a1 + 1432);
    if (v10) {
      goto LABEL_17;
    }
    goto LABEL_6;
  }
  LODWORD(v8) = 0;
  LODWORD(v9) = 0;
  uint64_t v10 = *(void *)(a1 + 1432);
  if (v10) {
    goto LABEL_17;
  }
LABEL_6:
  if (*(int *)(a1 + 1080) < 1) {
    return 0;
  }
LABEL_7:
  *(void *)(a1 + 1432) = 0;
  uint64_t v11 = sub_1000C33A0(96);
  uint64_t v12 = v11;
  *(void *)(a1 + 1432) = v11;
  *(_DWORD *)(v11 + 32) = *(_DWORD *)(a1 + 1100);
  int v13 = *(_DWORD *)(a1 + 1080);
  if (*(_DWORD *)(a1 + 1024)) {
    v13 += *(_DWORD *)(a1 + 776);
  }
  *(_DWORD *)(v11 + 92) = v13;
  uint64_t v14 = sub_1000C33A0(8 * v13);
  *(void *)uint64_t v12 = v14;
  if (v14)
  {
    unsigned int v15 = v7 & (0x23Cu >> a2);
    *(_DWORD *)(v12 + 8) = v15;
    *(_DWORD *)(v12 + 12) = a3;
    uint64_t v16 = qword_100101CC0;
    if (qword_100101CC0) {
      int v17 = *(_DWORD *)(qword_100101CC0 + 664);
    }
    else {
      int v17 = 0;
    }
    unsigned int v21 = a2 & 0xFFFFFFFE;
    *(_DWORD *)(v12 + 44) = v17;
    *(_DWORD *)(v12 + 24) = v6;
    *(_DWORD *)(v12 + 28) = 0;
    *(_DWORD *)(v12 + 16) = a2 == 6;
    if (v15)
    {
      *(_DWORD *)(v12 + 36) = 0;
      if (*(unsigned __int8 *)(*(void *)(a1 + 496) + *(unsigned __int16 *)(a1 + 1388)) == 253) {
        int v22 = v8;
      }
      else {
        int v22 = 0;
      }
      *(_DWORD *)(v12 + 40) = v22;
      if (v21 == 8) {
        *(_DWORD *)(v12 + 20) = 1;
      }
    }
    else if (v21 == 8)
    {
      if (v16)
      {
        *(_DWORD *)(v12 + 36) = *(void *)(v16 + 960);
        *(_DWORD *)(v12 + 40) = *(void *)(v16 + 928);
        *(_DWORD *)(v12 + 20) = 1;
        *(_DWORD *)(v12 + 12) = *(_DWORD *)(v16 + 5352);
      }
      else
      {
        *(_DWORD *)(v12 + 36) = 0;
        *(_DWORD *)(v12 + 40) = 0;
        *(_DWORD *)(v12 + 20) = 1;
        *(_DWORD *)(v12 + 12) = 0;
      }
    }
    else if (a2 == 6)
    {
      *(_DWORD *)(v12 + 36) = 0;
      *(_DWORD *)(v12 + 40) = 0;
      *(_DWORD *)(v12 + 12) = 1;
    }
    else
    {
      *(_DWORD *)(v12 + 36) = v9;
      *(_DWORD *)(v12 + 40) = v8;
    }
    *(_DWORD *)(v12 + 88) = 0;
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
    *(void *)(v12 + 48) = 0;
    uint64_t result = 1;
    *(_DWORD *)(v12 + 72) = 0;
  }
  else
  {
    sub_1000C321C(**(void **)(a1 + 1432));
    sub_1000C321C(*(void *)(*(void *)(a1 + 1432) + 80));
    sub_1000C321C(*(void *)(a1 + 1432));
    uint64_t v20 = *(void **)(a1 + 1432);
    if (v20)
    {
      *uint64_t v20 = 0;
      *(void *)(*(void *)(a1 + 1432) + 80) = 0;
      *(_DWORD *)(*(void *)(a1 + 1432) + 92) = 0;
    }
    uint64_t result = 0;
    *(void *)(a1 + 1432) = 0;
  }
  return result;
}

uint64_t sub_10000CAAC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1432);
  if (v1)
  {
    uint64_t v2 = result;
    if (*(int *)(v1 + 92) >= 1)
    {
      int v3 = 0;
      do
        sub_10000CBDC(*(void **)(v2 + 1432), (unsigned __int16)v3++);
      while (*(_DWORD *)(v1 + 92) > (int)(unsigned __int16)v3);
    }
    sub_1000C321C(*(void *)v1);
    uint64_t result = sub_1000C321C(v1);
    *(void *)(v2 + 1432) = 0;
  }
  return result;
}

uint64_t sub_10000CB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 996) && *(_DWORD *)(a1 + 1000) && *(void *)(a1 + 1432)) {
    return sub_10000A1F8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    return 1;
  }
}

uint64_t sub_10000CB40(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 1432) + 12);
  *(_DWORD *)(a1 + 1456) = 0;
  if (*(_DWORD *)(a1 + 996))
  {
    int v3 = *(void (**)(uint64_t))(a1 + 224);
    if (v3) {
      v3(a1);
    }
  }
  sub_1000C321C(*(void *)(a1 + 1464));
  sub_1000C321C(*(void *)(a1 + 1472));
  sub_1000C321C(*(void *)(a1 + 1480));
  *(void *)(a1 + 1480) = 0;
  *(_OWORD *)(a1 + 1464) = 0u;
  sub_1000C321C(*(void *)(a1 + 1496));
  *(void *)(a1 + 1496) = 0;
  return sub_10000ACBC(a1, 1u, v2);
}

void *sub_10000CBDC(void *result, unsigned int a2)
{
  uint64_t v2 = *(void *)(*result + 8 * a2);
  if (v2)
  {
    int v3 = result;
    uint64_t v4 = a2;
    int v5 = *(_DWORD *)v2;
    if (*(int *)v2 >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(void *)(*(void *)(v2 + 24) + 8 * v6);
        if (v7)
        {
          sub_1000C321C(v7);
          *(void *)(*(void *)(v2 + 24) + 8 * v6) = 0;
          int v5 = *(_DWORD *)v2;
        }
        ++v6;
      }
      while (v6 < v5);
    }
    sub_1000C321C(*(void *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    sub_1000C321C(*(void *)(v2 + 8));
    *(void *)(v2 + 8) = 0;
    sub_1000C321C(*(void *)(v2 + 16));
    *(void *)(v2 + 16) = 0;
    uint64_t result = (void *)sub_1000C321C(v2);
    *(void *)(*v3 + 8 * v4) = 0;
  }
  return result;
}

uint64_t sub_10000CC88(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(_DWORD *)(a1 + 1456)) {
    return 1;
  }
  unsigned int v4 = a2;
  uint64_t v6 = sub_10000CD80(a1, a2);
  if (!v6) {
    return v6;
  }
  uint64_t v7 = *(void *)(a1 + 1432);
  if (v7)
  {
    if (*(unsigned __int16 *)(a1 + 1388) != v4)
    {
      ++*(_DWORD *)(v7 + 64);
      if (!*(_DWORD *)(a1 + 1864)) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
    ++*(_DWORD *)(v7 + 68);
  }
  if (!*(_DWORD *)(a1 + 1864)) {
    goto LABEL_14;
  }
LABEL_11:
  if (a3 >= 1 && *(char *)(*(void *)(a1 + 1840) + v4) >= 1) {
    uint64_t v6 = sub_10000CD80(a1, *(unsigned __int16 *)(a1 + 1960));
  }
LABEL_14:
  if (!v6) {
    return v6;
  }
  if (!qword_100101CC0) {
    return v6;
  }
  if (!*(_DWORD *)(qword_100101CC0 + 1064)) {
    return v6;
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(a1 + 1744);
  if (!v9) {
    return v6;
  }
  v9(a1, 1);
  return v6;
}

uint64_t sub_10000CD80(uint64_t a1, uint64_t a2)
{
  int v4 = sub_100004188(a1, a2);
  if (*(unsigned char *)(a1 + 1041))
  {
    uint64_t v5 = *(void *)(a1 + 1432);
    if (*(_DWORD *)(v5 + 92) <= (int)a2)
    {
      ++*(_DWORD *)(v5 + 72);
      return 1;
    }
  }
  uint64_t v6 = *(void *)(a1 + 1544);
  int v7 = sub_1000041DC(a1);
  if (v4 < 1)
  {
    int v9 = 0;
    int v11 = 0x4000;
    uint64_t v12 = qword_100101CC0;
    if (!qword_100101CC0) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v8 = 0;
    int v9 = 0;
    __int16 v10 = 0x4000;
    do
    {
      *(_WORD *)(*(void *)(a1 + 1464) + 2 * v8) = sub_1000121DC(a1);
      if (*(__int16 *)(*(void *)(a1 + 1464) + 2 * v8) < v10)
      {
        int v9 = v8;
        __int16 v10 = *(_WORD *)(*(void *)(a1 + 1464) + 2 * v8);
      }
      ++v8;
    }
    while (v4 != v8);
    int v11 = v10;
    uint64_t v12 = qword_100101CC0;
    if (!qword_100101CC0)
    {
LABEL_14:
      if (v4 >= 1)
      {
        uint64_t v15 = 0;
        int v13 = 0;
        int v14 = 0;
        do
        {
          int v16 = *(__int16 *)(*(void *)(a1 + 1464) + 2 * v15) - v11;
          if (*(_DWORD *)(a1 + 1424) > v16)
          {
            int v17 = *(__int16 *)(*(void *)(a1 + 1408) + 2 * v16);
            if (v17 >= 1)
            {
              *(void *)(*(void *)(a1 + 1472) + 8 * v13) = (unsigned __int16)v17;
              v14 += (unsigned __int16)v17;
              *(_DWORD *)(*(void *)(a1 + 1480) + 4 * v13++) = v15;
            }
          }
          ++v15;
        }
        while (v4 != v15);
        if (v13 >= 1) {
          goto LABEL_21;
        }
      }
      return 1;
    }
  }
  if (!*(_DWORD *)(v12 + 904)) {
    goto LABEL_14;
  }
  int v13 = 1;
  **(void **)(a1 + 1472) = 1;
  **(_DWORD **)(a1 + 1480) = v9;
  int v14 = 1;
LABEL_21:
  if (v14 >= 0) {
    int v18 = v14;
  }
  else {
    int v18 = v14 + 1;
  }
  uint64_t v19 = (uint64_t)v18 >> 1;
  uint64_t v20 = v14;
  uint64_t v21 = v13;
  if (v7 == a2)
  {
    uint64_t v22 = 0;
    uint64_t v23 = qword_100101CC0;
    uint64_t result = 1;
    do
    {
      if (v23) {
        double v25 = *(double *)(v23 + 936);
      }
      else {
        double v25 = 0.0;
      }
      int v26 = (int)(v25 * (double)(int)((v19 + *(void *)(*(void *)(a1 + 1472) + 8 * v22) * *(int *)(a1 + 1404)) / v20));
      if (v26 >= 1)
      {
        if (*(_DWORD *)(a1 + 996)
          && (int v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(a1 + 208)) != 0)
        {
          uint64_t result = v27(a1, v6, a2, *(unsigned int *)(*(void *)(a1 + 1480) + 4 * v22), (__int16)v26);
          uint64_t v23 = qword_100101CC0;
        }
        else
        {
          uint64_t result = 1;
        }
      }
      ++v22;
    }
    while (v21 != v22);
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t result = 1;
    do
    {
      uint64_t v29 = (v19 + *(void *)(*(void *)(a1 + 1472) + 8 * v28) * *(int *)(a1 + 1404)) / v20;
      if ((int)v29 >= 1)
      {
        if (*(_DWORD *)(a1 + 996)
          && (int v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(a1 + 208)) != 0)
        {
          uint64_t result = v30(a1, v6, a2, *(unsigned int *)(*(void *)(a1 + 1480) + 4 * v28), (__int16)v29);
        }
        else
        {
          uint64_t result = 1;
        }
      }
      ++v28;
    }
    while (v21 != v28);
  }
  return result;
}

uint64_t sub_10000D03C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 1432);
  if (*(void *)(*(void *)v2 + 8 * a2)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 1041) && *(_DWORD *)(v2 + 92) <= (signed int)a2) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 1072) <= (signed int)a2)
  {
    int v9 = 1;
  }
  else
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      uint64_t v6 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
      int v8 = *v6;
      int v7 = v6[1];
    }
    else
    {
      __int16 v10 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      int v8 = *v10;
      int v7 = v10[1];
    }
    int v9 = v7 - v8;
  }
  *(void *)(*(void *)v2 + 8 * a2) = sub_1000C33A0(32);
  uint64_t v11 = *(void *)(*(void *)v2 + 8 * a2);
  if (!v11
    || (*(_DWORD *)uint64_t v11 = v9, v12 = sub_1000C33A0(2 * v9), (*(void *)(v11 + 8) = v12) == 0)
    || (uint64_t v13 = sub_1000C33A0(2 * v9), (*(void *)(v11 + 16) = v13) == 0)
    || (uint64_t v14 = sub_1000C33A0(8 * v9), (*(void *)(v11 + 24) = v14) == 0))
  {
    uint64_t v20 = *(uint64_t **)(*(void *)v2 + 8 * a2);
    if (v20)
    {
      sub_1000C321C(v20[1]);
      v20[1] = 0;
      sub_1000C321C(v20[2]);
      v20[2] = 0;
      sub_1000C321C(v20[3]);
      v20[3] = 0;
      sub_1000C321C(*(void *)(*(void *)v2 + 8 * a2));
      uint64_t result = 0;
      *(void *)(*(void *)v2 + 8 * a2) = 0;
      return result;
    }
    return 0;
  }
  uint64_t v15 = 36;
  if (*(unsigned __int16 *)(a1 + 1388) == a2) {
    uint64_t v15 = 40;
  }
  int v16 = *(_DWORD *)(a1 + 1404) * *(_DWORD *)(*(void *)(a1 + 1432) + v15);
  if (v16 >= 0x4000) {
    LOWORD(v17) = 0x3FFF;
  }
  else {
    int v17 = *(_DWORD *)(a1 + 1404) * *(_DWORD *)(*(void *)(a1 + 1432) + v15);
  }
  if (v16 >= -16383) {
    __int16 v18 = v17;
  }
  else {
    __int16 v18 = -16384;
  }
  if (v9 < 1) {
    return 1;
  }
  uint64_t v19 = 0;
  uint64_t result = 1;
  do
  {
    *(_WORD *)(*(void *)(v11 + 8) + v19) = v18;
    *(_WORD *)(*(void *)(v11 + 16) + v19) = v18;
    v19 += 2;
  }
  while (2 * v9 != v19);
  return result;
}

void *sub_10000D24C(void *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (void *)result[179];
  uint64_t v127 = 0;
  int v9 = *(void **)(*v8 + 8 * a3);
  if (!v9) {
    return result;
  }
  int v10 = a4;
  unsigned int v11 = a3;
  uint64_t v13 = (uint64_t)result;
  signed int v14 = *(__int16 *)(v9[1] + 2 * (int)a4);
  uint64_t v15 = (int)a4;
  int v16 = qword_100101CC0;
  if (*((unsigned __int16 *)result + 694) == a3)
  {
    if (!qword_100101CC0) {
      goto LABEL_8;
    }
    int v17 = (int *)(qword_100101CC0 + 912);
  }
  else
  {
    if (!qword_100101CC0) {
      goto LABEL_8;
    }
    int v17 = (int *)(qword_100101CC0 + 944);
  }
  int v16 = *v17;
LABEL_8:
  int v18 = *((_DWORD *)result + 351) * v16;
  if (v18 >= 0x4000) {
    __int16 v19 = 0x3FFF;
  }
  else {
    __int16 v19 = v18;
  }
  if (v18 < -16383) {
    __int16 v19 = -16384;
  }
  if (v14 > *(__int16 *)(v9[2] + 2 * (int)a4))
  {
    __int16 v126 = v19;
    uint64_t v20 = *((int *)result + 275);
    uint64_t v21 = *((unsigned int *)result + 275);
    uint64_t v22 = (uint32x4_t *)sub_1000CD3E8(4 * v20, a2, a3, a4, a5, a6, a7, a8);
    sub_1000043BC(v13, v11, v10, (unint64_t *)&v127);
    unint64_t v23 = *(void *)(v9[3] + 8 * v15);
    if ((int)v20 < 1)
    {
      LOWORD(v27) = v126;
      int v28 = v126;
      int v29 = v126 + v14;
      if ((v29 + 0x4000) <= 0x8000) {
        goto LABEL_68;
      }
      goto LABEL_60;
    }
    unint64_t v24 = (unint64_t)v127;
    if (v21 < 8)
    {
      uint64_t v25 = 0;
      unsigned int v26 = 0;
      goto LABEL_47;
    }
    unsigned int v26 = 0;
    uint64_t v25 = 0;
    unint64_t v30 = (unint64_t)v22 + 4 * v21;
    BOOL v32 = v22 < (uint32x4_t *)((char *)v127 + v21) && (unint64_t)v127 < v30;
    BOOL v34 = (unint64_t)v22 < v23 + 2 * v21 && v23 < v30;
    BOOL v35 = v30 <= a2 || (unint64_t)v22 >= a2 + v21;
    if (v35 && !v32 && !v34)
    {
      int32x4_t v36 = vdupq_n_s32(v14);
      if (v21 < 0x20)
      {
        unsigned int v26 = 0;
        uint64_t v25 = 0;
LABEL_44:
        uint64_t v78 = v25;
        uint64_t v25 = v21 & 0xFFFFFFF8;
        int32x4_t v79 = vdupq_n_s32(v26);
        unsigned int v80 = (uint8x8_t *)(a2 + v78);
        double v81 = (uint8x8_t *)(v24 + v78);
        double v82 = (int16x8_t *)(v23 + 2 * v78);
        double v83 = (int32x4_t *)((char *)v22 + 4 * v78);
        uint64_t v84 = v78 - v25;
        v85.i64[0] = 0x400000004000;
        v85.i64[1] = 0x400000004000;
        v86.i64[0] = 0x800000008000;
        v86.i64[1] = 0x800000008000;
        int32x4_t v87 = v79;
        do
        {
          uint8x8_t v88 = *v80++;
          uint8x8_t v89 = v88;
          uint8x8_t v90 = *v81++;
          int16x8_t v91 = (int16x8_t)vsubl_u8(v90, v89);
          int16x8_t v92 = *v82++;
          int32x4_t v93 = vaddw_s16(vmulq_s32(vmovl_s16(*(int16x4_t *)v91.i8), v36), *(int16x4_t *)v92.i8);
          int32x4_t v94 = vaddw_high_s16(vmulq_s32(vmovl_high_s16(v91), v36), v92);
          *double v83 = v93;
          v83[1] = v94;
          v83 += 2;
          int32x4_t v95 = (int32x4_t)vcgtq_u32(v86, (uint32x4_t)vaddq_s32(v93, v85));
          int32x4_t v96 = (int32x4_t)vcgtq_u32(v86, (uint32x4_t)vaddq_s32(v94, v85));
          int32x4_t v87 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v87, (int8x16_t)v96), v96);
          int32x4_t v79 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v79, (int8x16_t)v95), v95);
          v84 += 8;
        }
        while (v84);
        unsigned int v26 = vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v79), (int16x8_t)vceqzq_s32(v87))))) & 1;
        if (v25 == v21) {
          goto LABEL_51;
        }
        goto LABEL_47;
      }
      int8x16_t v37 = 0uLL;
      uint64_t v25 = v21 & 0xFFFFFFE0;
      uint64_t v38 = (uint8x8_t *)(a2 + 16);
      v39.i64[0] = 0x400000004000;
      v39.i64[1] = 0x400000004000;
      v40.i64[0] = 0x800000008000;
      v40.i64[1] = 0x800000008000;
      uint64_t v41 = (int32x4_t *)&v22[4];
      int8x16_t v42 = 0uLL;
      uint64_t v43 = v127 + 2;
      char v44 = (int16x8_t *)(v23 + 32);
      uint64_t v45 = v25;
      int8x16_t v46 = 0uLL;
      int8x16_t v47 = 0uLL;
      int8x16_t v48 = 0uLL;
      int8x16_t v49 = 0uLL;
      int8x16_t v50 = 0uLL;
      int8x16_t v51 = 0uLL;
      do
      {
        uint8x16_t v52 = *(uint8x16_t *)v38[-2].i8;
        uint8x16_t v53 = *(uint8x16_t *)v43[-2].i8;
        int16x8_t v54 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v52.i8);
        int16x8_t v55 = (int16x8_t)vsubl_high_u8(v53, v52);
        int16x8_t v56 = (int16x8_t)vsubl_u8(*v43, *v38);
        int16x8_t v57 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v43->i8, *(uint8x16_t *)v38->i8);
        int16x8_t v58 = v44[-2];
        int16x8_t v59 = v44[-1];
        int16x8_t v60 = *v44;
        int16x8_t v61 = v44[1];
        v44 += 4;
        int32x4_t v62 = vaddw_s16(vmulq_s32(vmovl_s16(*(int16x4_t *)v54.i8), v36), *(int16x4_t *)v58.i8);
        int32x4_t v63 = vaddw_high_s16(vmulq_s32(vmovl_high_s16(v54), v36), v58);
        int32x4_t v64 = vaddw_s16(vmulq_s32(vmovl_s16(*(int16x4_t *)v55.i8), v36), *(int16x4_t *)v59.i8);
        int32x4_t v65 = vaddw_high_s16(vmulq_s32(vmovl_high_s16(v55), v36), v59);
        int32x4_t v66 = vaddw_s16(vmulq_s32(vmovl_s16(*(int16x4_t *)v56.i8), v36), *(int16x4_t *)v60.i8);
        int32x4_t v67 = vaddw_high_s16(vmulq_s32(vmovl_high_s16(v56), v36), v60);
        int32x4_t v68 = vaddw_s16(vmulq_s32(vmovl_s16(*(int16x4_t *)v57.i8), v36), *(int16x4_t *)v61.i8);
        int32x4_t v69 = vaddw_high_s16(vmulq_s32(vmovl_high_s16(v57), v36), v61);
        v41[-2] = v64;
        v41[-1] = v65;
        v41[-4] = v62;
        v41[-3] = v63;
        v41[2] = v68;
        v41[3] = v69;
        *uint64_t v41 = v66;
        v41[1] = v67;
        v41 += 8;
        int32x4_t v70 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v62, v39));
        int32x4_t v71 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v63, v39));
        int32x4_t v72 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v64, v39));
        int32x4_t v73 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v65, v39));
        int32x4_t v74 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v66, v39));
        int32x4_t v75 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v67, v39));
        int32x4_t v76 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v68, v39));
        int32x4_t v77 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v69, v39));
        int8x16_t v47 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v47, (int8x16_t)v73), v73);
        int8x16_t v46 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v46, (int8x16_t)v72), v72);
        int8x16_t v42 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v42, (int8x16_t)v71), v71);
        int8x16_t v37 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v37, (int8x16_t)v70), v70);
        int8x16_t v51 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v51, (int8x16_t)v77), v77);
        int8x16_t v50 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v50, (int8x16_t)v76), v76);
        int8x16_t v49 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v49, (int8x16_t)v75), v75);
        v38 += 4;
        int8x16_t v48 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v48, (int8x16_t)v74), v74);
        v43 += 4;
        v45 -= 32;
      }
      while (v45);
      unsigned int v26 = vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v37, v48)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v42, v49))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v46, v50)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v47, v51)))))) & 1;
      if (v25 == v21) {
        goto LABEL_51;
      }
      if ((v21 & 0x18) != 0) {
        goto LABEL_44;
      }
    }
LABEL_47:
    unint64_t v97 = (unsigned __int8 *)(v24 + v25);
    int v98 = (unsigned __int8 *)(a2 + v25);
    uint64_t v99 = v21 - v25;
    double v100 = &v22->i32[v25];
    double v101 = (__int16 *)(v23 + 2 * v25);
    do
    {
      int v103 = *v98++;
      int v102 = v103;
      int v104 = *v97++;
      int v105 = v104 - v102;
      int v106 = *v101++;
      int v107 = v106 + v105 * v14;
      *v100++ = v107;
      if ((v107 - 16385) < 0xFFFF7FFF) {
        unsigned int v26 = 1;
      }
      --v99;
    }
    while (v99);
LABEL_51:
    LOWORD(v27) = v126;
    int v28 = v126;
    int v29 = v126 + v14;
    if ((v29 + 0x4000) <= 0x8000 && !v26)
    {
LABEL_61:
      if ((int)v21 >= 1)
      {
        if (v21 >= 0x10
          && (v23 >= (unint64_t)v22 + 4 * v21 || (unint64_t)v22 >= v23 + 2 * v21))
        {
          uint64_t v113 = v21 & 0x7FFFFFF0;
          float64x2_t v119 = (int16x8_t *)&v22[2];
          uint32x4_t v120 = (int16x8_t *)(v23 + 16);
          uint64_t v121 = v21 & 0xFFFFFFF0;
          do
          {
            int16x8_t v123 = v119[-2];
            int16x8_t v122 = v119[-1];
            int16x8_t v125 = *v119;
            int16x8_t v124 = v119[1];
            v119 += 4;
            v120[-1] = vuzp1q_s16(v123, v122);
            *uint32x4_t v120 = vuzp1q_s16(v125, v124);
            v120 += 2;
            v121 -= 16;
          }
          while (v121);
          if (v113 == v21) {
            goto LABEL_68;
          }
        }
        else
        {
          uint64_t v113 = 0;
        }
        int v114 = (_WORD *)(v23 + 2 * v113);
        uint64_t v115 = v21 - v113;
        uint32x4_t v116 = &v22->i32[v113];
        do
        {
          int v117 = *v116++;
          *v114++ = v117;
          --v115;
        }
        while (v115);
      }
LABEL_68:
      uint64_t v118 = 2 * v15;
      *(_WORD *)(v9[1] + v118) = v29;
      *(_WORD *)(v9[2] + v118) = v27;
      return sub_1000CD4D0(v22, 4 * v20);
    }
    if (v20 >= 4)
    {
      uint64_t v108 = v21 & 0xFFFFFFFC;
      uint64_t v109 = v108;
      BOOL v110 = v22;
      do
      {
        *(int32x4_t *)BOOL v110 = vshrq_n_s32((int32x4_t)vsraq_n_u32(*v110, *v110, 0x1FuLL), 1uLL);
        ++v110;
        v109 -= 4;
      }
      while (v109);
      if (v108 == v21) {
        goto LABEL_60;
      }
    }
    else
    {
      uint64_t v108 = 0;
    }
    int8x16x2_t v111 = &v22->i32[v108];
    uint64_t v112 = v21 - v108;
    do
    {
      *v111++ /= 2;
      --v112;
    }
    while (v112);
LABEL_60:
    int v27 = v28 / 2;
    v29 /= 2;
    goto LABEL_61;
  }
  return result;
}

uint64_t sub_10000D7D0(uint64_t result, int a2, int a3, int a4, int *a5, _WORD *a6, _WORD *a7, _WORD *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  if (qword_100101CC0)
  {
    int v15 = *(_DWORD *)(result + 1404) * *(_DWORD *)(qword_100101CC0 + 3376);
    int v16 = *(_DWORD *)(qword_100101CC0 + 3388);
    if (a3 < 1) {
      return result;
    }
  }
  else
  {
    int v15 = 0;
    int v16 = 0;
    if (a3 < 1) {
      return result;
    }
  }
  double v17 = (double)*(int *)(result + 1192);
  double v18 = (double)a4;
  uint64_t v19 = a3;
  if (v15 < 1)
  {
    if (a7)
    {
      if (v16)
      {
        for (uint64_t i = 0; i != a3; a7[i++] = v29)
        {
          if (a2) {
            a8[i] = a6[i];
          }
          double v26 = v18 / (double)a5[i] * v17 / a9;
          if (v26 >= 0.0) {
            double v27 = 0.5;
          }
          else {
            double v27 = -0.5;
          }
          int v28 = (int)(v26 + v27);
          if (v28 <= 1) {
            int v28 = 1;
          }
          if (v28 >= *(unsigned __int16 *)(result + 1768)) {
            LOWORD(v28) = *(_WORD *)(result + 1768);
          }
          if (*(_DWORD *)(*(void *)(result + 1448) + 4 * i)) {
            __int16 v29 = v28;
          }
          else {
            __int16 v29 = a6[i];
          }
        }
      }
      else
      {
        do
        {
          if (a2) {
            *a8 = *a6;
          }
          int v30 = *a5++;
          double v31 = v18 / (double)v30 * v17 / a9;
          if (v31 >= 0.0) {
            double v32 = 0.5;
          }
          else {
            double v32 = -0.5;
          }
          int v33 = (int)(v31 + v32);
          if (v33 <= 1) {
            int v33 = 1;
          }
          if (v33 >= *(unsigned __int16 *)(result + 1768)) {
            LOWORD(v33) = *(_WORD *)(result + 1768);
          }
          *a7++ = v33;
          ++a6;
          ++a8;
          --v19;
        }
        while (v19);
      }
    }
    else
    {
      do
      {
        if (a2) {
          *a8 = *a6;
        }
        ++a6;
        ++a8;
        --v19;
      }
      while (v19);
    }
  }
  else
  {
    for (uint64_t j = 0; j != a3; ++j)
    {
      if (a2) {
        a8[j] = a6[j];
      }
      LOWORD(a15) = a6[j];
      int v21 = a5[j] + (int)(v17 / (double)*(unint64_t *)&a15 * (double)v15);
      a5[j] = v21;
      double v22 = v18 / (double)v21 * v17 / a9;
      if (v22 >= 0.0) {
        double v23 = 0.5;
      }
      else {
        double v23 = -0.5;
      }
      a15 = v22 + v23;
      int v24 = (int)a15;
      if ((int)a15 <= 1) {
        int v24 = 1;
      }
      if (v24 >= *(unsigned __int16 *)(result + 1768)) {
        LOWORD(v24) = *(_WORD *)(result + 1768);
      }
      if (a7)
      {
        if (v16)
        {
          if (!*(_DWORD *)(*(void *)(result + 1448) + 4 * j)) {
            LOWORD(v24) = a6[j];
          }
        }
        a7[j] = v24;
      }
    }
  }
  return result;
}

uint64_t sub_10000D9EC(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t result = sub_100038CFC(a1, a3, a4);
  if (result)
  {
    int v9 = result;
    if ((int)result >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = result;
      while (1)
      {
        int v12 = sub_100038D28(a1, a3, a4, v10);
        uint64_t result = sub_100038D98(a1, a3, a4, v10);
        uint64_t v13 = (_WORD *)*a2;
        if (v12 < 0)
        {
          v13[v10] = v12;
          uint64_t v14 = a2[1];
          if ((result & 0x80000000) == 0) {
            goto LABEL_4;
          }
LABEL_9:
          *(_WORD *)(v14 + 2 * v10++) = result;
          if (v11 == v10) {
            return result;
          }
        }
        else
        {
          v13[v10] = -(__int16)v9;
          *(_WORD *)(*a2 + 2 * (__int16)v9++) = v12;
          uint64_t v14 = a2[1];
          if ((result & 0x80000000) != 0) {
            goto LABEL_9;
          }
LABEL_4:
          *(_WORD *)(v14 + 2 * v10) = -(__int16)v9;
          *(_WORD *)(*a2 + 2 * (__int16)v9++) = result;
          if (v11 == ++v10) {
            return result;
          }
        }
      }
    }
  }
  else
  {
    uint64_t result = sub_1000388D4(a1, 0, a3, 0, a4);
    *(_WORD *)*a2 = result;
  }
  return result;
}

uint64_t sub_10000DB2C(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  uint64_t v7 = *(void *)(a1 + 1504);
  uint64_t v8 = *(unsigned int *)(a1 + 1100);
  unsigned int v135 = sub_100038CFC(*(void *)(a1 + 1304), a2, a3);
  if ((v135 & 0x80000000) == 0)
  {
    uint64_t v15 = (int)(2 * v135);
    uint64_t v16 = 2 * (int)v8 * v15;
    do
    {
      uint64_t v18 = *(void *)(v7 + 24);
      *(_WORD *)(*(void *)(v7 + 16) + 2 * v15) = 0;
      if ((int)v8 >= 1) {
        bzero((void *)(v18 + v16), 2 * v8);
      }
      sub_10000E388((int32x4_t *)a1, v7, *(__int16 *)(*(void *)v7 + 2 * v15), v15);
      if (v15 < v135) {
        sub_10000E388((int32x4_t *)a1, v7, *(__int16 *)(*(void *)(v7 + 8) + 2 * v15), v15);
      }
      v16 -= 2 * (int)v8;
    }
    while (v15-- > 0);
  }
  if (a4)
  {
    uint64_t v19 = *(unsigned int *)(a1 + 1100);
    int v20 = **(__int16 **)(v7 + 16);
    *(_DWORD *)(a1 + 1488) = v20;
    if ((int)v19 >= 1)
    {
      for (uint64_t i = 0; i != v19; ++i)
        *(_DWORD *)(*(void *)(a1 + 1496) + 4 * i) = *(__int16 *)(*(void *)(v7 + 24) + 2 * i);
      LODWORD(v19) = *(_DWORD *)(a1 + 1100);
      int v20 = *(_DWORD *)(a1 + 1488);
    }
    int v22 = *(_DWORD *)(v7 + 40) + v20;
    unsigned int v23 = v22 - 16385;
    if ((int)v19 < 1)
    {
      if (v23 <= 0xFFFF7FFE) {
        v22 /= 2;
      }
      goto LABEL_79;
    }
    int v24 = *(int16x4_t **)(v7 + 32);
    unint64_t v25 = *(void *)(a1 + 1496);
    unsigned int v26 = v23 < 0xFFFF7FFF;
    uint64_t v27 = v19;
    if (v19 >= 0x10
      && (v25 < (unint64_t)v24 + 2 * v19
        ? (BOOL v28 = (unint64_t)v24 >= v25 + 4 * v19)
        : (BOOL v28 = 1),
          v28))
    {
      uint64_t v29 = v19 & 0x7FFFFFF0;
      int32x4_t v30 = vdupq_n_s32(v26);
      double v31 = v24 + 2;
      double v32 = (int32x4_t *)(v25 + 32);
      v33.i64[0] = 0x400000004000;
      v33.i64[1] = 0x400000004000;
      uint64_t v34 = v19 & 0xFFFFFFF0;
      v35.i64[0] = 0x800000008000;
      v35.i64[1] = 0x800000008000;
      int32x4_t v36 = v30;
      int32x4_t v37 = v30;
      int32x4_t v38 = v30;
      int32x4_t v39 = v30;
      do
      {
        int16x8_t v40 = *(int16x8_t *)v31[-2].i8;
        int32x4_t v41 = vaddw_s16(v32[-2], *(int16x4_t *)v40.i8);
        int32x4_t v42 = vaddw_high_s16(v32[-1], v40);
        int32x4_t v43 = vaddw_s16(*v32, *v31);
        int32x4_t v44 = vaddw_high_s16(v32[1], *(int16x8_t *)v31->i8);
        v32[-2] = v41;
        v32[-1] = v42;
        int32x4_t *v32 = v43;
        v32[1] = v44;
        v32 += 4;
        int32x4_t v45 = (int32x4_t)vcgtq_u32(v35, (uint32x4_t)vaddq_s32(v41, v33));
        int32x4_t v46 = (int32x4_t)vcgtq_u32(v35, (uint32x4_t)vaddq_s32(v42, v33));
        int32x4_t v47 = (int32x4_t)vcgtq_u32(v35, (uint32x4_t)vaddq_s32(v43, v33));
        int32x4_t v48 = (int32x4_t)vcgtq_u32(v35, (uint32x4_t)vaddq_s32(v44, v33));
        int32x4_t v37 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v37, (int8x16_t)v46), v46);
        int32x4_t v36 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v36, (int8x16_t)v45), v45);
        int32x4_t v39 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v39, (int8x16_t)v48), v48);
        int32x4_t v38 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v38, (int8x16_t)v47), v47);
        v31 += 4;
        v34 -= 16;
      }
      while (v34);
      if (vaddv_s8(vand_s8(vmovn_s16((int16x8_t)vornq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v36, v30), (int16x8_t)vceqq_s32(v37, v30))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v38, v30), (int16x8_t)vceqq_s32(v39, v30)))), (int8x8_t)0x8040201008040201)))
      {
        unsigned int v26 = 1;
      }
      if (v29 == v19)
      {
LABEL_47:
        if (!v26)
        {
LABEL_73:
          if (v19 >= 0x10
            && ((unint64_t)v24 >= v25 + 4 * v19
             || v25 >= (unint64_t)v24 + 2 * v19))
          {
            uint64_t v78 = v19 & 0x7FFFFFF0;
            uint64_t v84 = (int16x8_t *)(v25 + 32);
            int32x4_t v85 = (int16x8_t *)&v24[2];
            uint64_t v86 = v27 & 0xFFFFFFF0;
            do
            {
              int16x8_t v88 = v84[-2];
              int16x8_t v87 = v84[-1];
              int16x8_t v90 = *v84;
              int16x8_t v89 = v84[1];
              v84 += 4;
              v85[-1] = vuzp1q_s16(v88, v87);
              *int32x4_t v85 = vuzp1q_s16(v90, v89);
              v85 += 2;
              v86 -= 16;
            }
            while (v86);
            if (v78 == v27) {
              goto LABEL_79;
            }
          }
          else
          {
            uint64_t v78 = 0;
          }
          uint64_t v79 = v27 - v78;
          unsigned int v80 = (_WORD *)v24 + v78;
          double v81 = (int *)(v25 + 4 * v78);
          do
          {
            int v82 = *v81++;
            *v80++ = v82;
            --v79;
          }
          while (v79);
LABEL_79:
          *(_DWORD *)(v7 + 40) = (__int16)v22;
          return 1;
        }
        if (v19 >= 4)
        {
          uint64_t v59 = v19 & 0x7FFFFFFC;
          uint64_t v74 = v19 & 0xFFFFFFFC;
          int32x4_t v75 = (uint32x4_t *)v25;
          do
          {
            *(int32x4_t *)int32x4_t v75 = vshrq_n_s32((int32x4_t)vsraq_n_u32(*v75, *v75, 0x1FuLL), 1uLL);
            ++v75;
            v74 -= 4;
          }
          while (v74);
          if (v59 == v19) {
            goto LABEL_72;
          }
        }
        else
        {
          uint64_t v59 = 0;
        }
        uint64_t v76 = v19 - v59;
        int32x4_t v77 = (int *)(v25 + 4 * v59);
        do
        {
          *v77++ /= 2;
          --v76;
        }
        while (v76);
LABEL_72:
        v22 /= 2;
        goto LABEL_73;
      }
    }
    else
    {
      uint64_t v29 = 0;
    }
    uint64_t v54 = v19 - v29;
    int16x8_t v55 = (int *)(v25 + 4 * v29);
    int16x8_t v56 = (__int16 *)v24 + v29;
    do
    {
      int v57 = *v56++;
      int v58 = *v55;
      *v55++ += v57;
      if ((v58 + v57 - 16385) < 0xFFFF7FFF) {
        unsigned int v26 = 1;
      }
      --v54;
    }
    while (v54);
    goto LABEL_47;
  }
  int8x16_t v49 = *(_WORD **)(v7 + 16);
  if (!*v49) {
    *int8x16_t v49 = 1;
  }
  if (a5)
  {
    int v50 = *(_DWORD *)(v7 + 40);
    if (v50)
    {
      uint64_t v51 = *(unsigned int *)(a1 + 1100);
      int v52 = *(_DWORD *)(a1 + 1404) * *(_DWORD *)(v7 + 52);
      if (v52 >= 0x3FFF) {
        int v52 = 0x3FFF;
      }
      if (v52 <= -16384) {
        int v52 = -16384;
      }
      if (v52 >= v50) {
        int v52 = *(_DWORD *)(v7 + 40);
      }
      if ((int)v51 >= 1)
      {
        for (uint64_t j = 0; j != v51; ++j)
        {
          *(_DWORD *)(*(void *)(a1 + 1496) + 4 * j) = v52 * *(__int16 *)(*(void *)(v7 + 32) + 2 * j) / v50;
          if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 740)) {
            *(_WORD *)(*(void *)(v7 + 24) + 2 * j) = 0;
          }
        }
      }
      if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 740)) {
        **(_WORD **)(v7 + 16) = 0;
      }
      *(_DWORD *)(a1 + 1488) = v52;
      uint64_t v60 = *(unsigned int *)(a1 + 1100);
      int16x8_t v61 = *(__int16 **)(v7 + 16);
      int v62 = v52 + *v61;
      unsigned int v63 = v62 - 16385;
      if ((int)v60 < 1)
      {
        if (v63 <= 0xFFFF7FFE) {
          v62 /= 2;
        }
        goto LABEL_101;
      }
      unint64_t v64 = *(void *)(v7 + 24);
      unint64_t v65 = *(void *)(a1 + 1496);
      unsigned int v66 = v63 < 0xFFFF7FFF;
      if (v60 >= 0x10 && (v65 >= v64 + 2 * v60 || v64 >= v65 + 4 * v60))
      {
        uint64_t v67 = v60 & 0x7FFFFFF0;
        int32x4_t v108 = vdupq_n_s32(v66);
        uint64_t v109 = (int16x4_t *)(v64 + 16);
        BOOL v110 = (int32x4_t *)(v65 + 32);
        v111.i64[0] = 0x400000004000;
        v111.i64[1] = 0x400000004000;
        uint64_t v112 = v60 & 0xFFFFFFF0;
        v113.i64[0] = 0x800000008000;
        v113.i64[1] = 0x800000008000;
        int32x4_t v114 = v108;
        int32x4_t v115 = v108;
        int32x4_t v116 = v108;
        int32x4_t v117 = v108;
        do
        {
          int16x8_t v118 = *(int16x8_t *)v109[-2].i8;
          int32x4_t v119 = vaddw_s16(v110[-2], *(int16x4_t *)v118.i8);
          int32x4_t v120 = vaddw_high_s16(v110[-1], v118);
          int32x4_t v121 = vaddw_s16(*v110, *v109);
          int32x4_t v122 = vaddw_high_s16(v110[1], *(int16x8_t *)v109->i8);
          v110[-2] = v119;
          v110[-1] = v120;
          int32x4_t *v110 = v121;
          v110[1] = v122;
          v110 += 4;
          int32x4_t v123 = (int32x4_t)vcgtq_u32(v113, (uint32x4_t)vaddq_s32(v119, v111));
          int32x4_t v124 = (int32x4_t)vcgtq_u32(v113, (uint32x4_t)vaddq_s32(v120, v111));
          int32x4_t v125 = (int32x4_t)vcgtq_u32(v113, (uint32x4_t)vaddq_s32(v121, v111));
          int32x4_t v126 = (int32x4_t)vcgtq_u32(v113, (uint32x4_t)vaddq_s32(v122, v111));
          int32x4_t v115 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v115, (int8x16_t)v124), v124);
          int32x4_t v114 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v114, (int8x16_t)v123), v123);
          int32x4_t v117 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v117, (int8x16_t)v126), v126);
          int32x4_t v116 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v116, (int8x16_t)v125), v125);
          v109 += 4;
          v112 -= 16;
        }
        while (v112);
        if (vaddv_s8(vand_s8(vmovn_s16((int16x8_t)vornq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v114, v108), (int16x8_t)vceqq_s32(v115, v108))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v116, v108), (int16x8_t)vceqq_s32(v117, v108)))), (int8x8_t)0x8040201008040201)))
        {
          unsigned int v66 = 1;
        }
        if (v67 == v60)
        {
LABEL_64:
          if (!v66)
          {
LABEL_94:
            if (v60 >= 0x10 && (v64 >= v65 + 4 * v60 || v65 >= v64 + 2 * v60))
            {
              uint64_t v95 = v60 & 0x7FFFFFF0;
              uint64_t v127 = (int16x8_t *)(v65 + 32);
              unint64_t v128 = (int16x8_t *)(v64 + 16);
              uint64_t v129 = v60 & 0xFFFFFFF0;
              do
              {
                int16x8_t v131 = v127[-2];
                int16x8_t v130 = v127[-1];
                int16x8_t v133 = *v127;
                int16x8_t v132 = v127[1];
                v127 += 4;
                v128[-1] = vuzp1q_s16(v131, v130);
                *unint64_t v128 = vuzp1q_s16(v133, v132);
                v128 += 2;
                v129 -= 16;
              }
              while (v129);
              if (v95 == v60) {
                goto LABEL_100;
              }
            }
            else
            {
              uint64_t v95 = 0;
            }
            uint64_t v96 = v60 - v95;
            unint64_t v97 = (_WORD *)(v64 + 2 * v95);
            int v98 = (int *)(v65 + 4 * v95);
            do
            {
              int v99 = *v98++;
              *v97++ = v99;
              --v96;
            }
            while (v96);
LABEL_100:
            int16x8_t v61 = *(__int16 **)(v7 + 16);
LABEL_101:
            __int16 *v61 = v62;
            goto LABEL_102;
          }
          if (v60 >= 4)
          {
            uint64_t v73 = v60 & 0x7FFFFFFC;
            uint64_t v91 = v60 & 0xFFFFFFFC;
            int16x8_t v92 = (uint32x4_t *)v65;
            do
            {
              *(int32x4_t *)int16x8_t v92 = vshrq_n_s32((int32x4_t)vsraq_n_u32(*v92, *v92, 0x1FuLL), 1uLL);
              ++v92;
              v91 -= 4;
            }
            while (v91);
            if (v73 == v60) {
              goto LABEL_93;
            }
          }
          else
          {
            uint64_t v73 = 0;
          }
          uint64_t v93 = v60 - v73;
          int32x4_t v94 = (int *)(v65 + 4 * v73);
          do
          {
            *v94++ /= 2;
            --v93;
          }
          while (v93);
LABEL_93:
          v62 /= 2;
          goto LABEL_94;
        }
      }
      else
      {
        uint64_t v67 = 0;
      }
      uint64_t v68 = v60 - v67;
      int32x4_t v69 = (int *)(v65 + 4 * v67);
      int32x4_t v70 = (__int16 *)(v64 + 2 * v67);
      do
      {
        int v71 = *v70++;
        int v72 = *v69;
        *v69++ += v71;
        if ((v72 + v71 - 16385) < 0xFFFF7FFF) {
          unsigned int v66 = 1;
        }
        --v68;
      }
      while (v68);
      goto LABEL_64;
    }
  }
LABEL_102:
  LODWORD(v100) = (2 * v135) | 1;
  if ((v135 & 0x80000000) != 0)
  {
LABEL_111:
    if (!qword_100101CC0) {
      return 1;
    }
    uint64_t result = 1;
    if (*(_DWORD *)(qword_100101CC0 + 624) && (v135 & 0x80000000) == 0)
    {
      unint64_t v103 = 0;
      if ((int)v100 <= 1) {
        uint64_t v100 = 1;
      }
      else {
        uint64_t v100 = v100;
      }
      do
      {
        if ((*(__int16 *)(*(void *)v7 + 2 * v103) & 0x80000000) == 0)
        {
          unsigned int v104 = *(unsigned __int16 *)(*(void *)v7 + 2 * v103);
          sub_10000A738((void *)a1, *(unsigned __int16 *)(*(void *)v7 + 2 * v103), v9, v10, v11, v12, v13, v14);
          if (qword_100101CC0)
          {
            if (*(_DWORD *)(qword_100101CC0 + 1064))
            {
              int v105 = *(void (**)(uint64_t, uint64_t))(a1 + 1744);
              if (v105) {
                v105(a1, 1);
              }
            }
          }
          sub_10000CBDC(*(void **)(a1 + 1432), v104);
        }
        if (v103 < v135 && (*(__int16 *)(*(void *)(v7 + 8) + 2 * v103) & 0x80000000) == 0)
        {
          unsigned int v106 = *(unsigned __int16 *)(*(void *)(v7 + 8) + 2 * v103);
          sub_10000A738((void *)a1, *(unsigned __int16 *)(*(void *)(v7 + 8) + 2 * v103), v9, v10, v11, v12, v13, v14);
          if (qword_100101CC0)
          {
            if (*(_DWORD *)(qword_100101CC0 + 1064))
            {
              int v107 = *(void (**)(uint64_t, uint64_t))(a1 + 1744);
              if (v107) {
                v107(a1, 1);
              }
            }
          }
          sub_10000CBDC(*(void **)(a1 + 1432), v106);
        }
        ++v103;
      }
      while (v100 != v103);
      return 1;
    }
  }
  else
  {
    unint64_t v101 = 0;
    if ((int)v100 <= 1) {
      uint64_t v102 = 1;
    }
    else {
      uint64_t v102 = v100;
    }
    while (1)
    {
      uint64_t result = sub_10000EA14(a1, v7, *(__int16 *)(*(void *)v7 + 2 * v101), v101, v11, v12, v13, v14);
      if (!result) {
        break;
      }
      if (v101 < v135)
      {
        uint64_t result = sub_10000EA14(a1, v7, *(__int16 *)(*(void *)(v7 + 8) + 2 * v101), v101, v11, v12, v13, v14);
        if (!result) {
          break;
        }
      }
      if (v102 == ++v101) {
        goto LABEL_111;
      }
    }
  }
  return result;
}

int32x4_t *sub_10000E388(int32x4_t *result, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v4 = result[68].u32[3];
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = (int)(v4 * a4);
  unint64_t v7 = v5 + 2 * v6;
  if (a3 < 0)
  {
    if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 628)) {
      return result;
    }
    __int32 v69 = *(__int16 *)(*(void *)(a2 + 16) + 2 * (__int16)-(__int16)a3);
    result[93].i32[0] = v69;
    if ((int)v4 >= 1)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(_DWORD *)(result[93].i64[1] + 4 * i) = *(__int16 *)(v5 + 2 * (int)v4 * (__int16)-(__int16)a3 + 2 * i);
      LODWORD(v4) = result[68].i32[3];
      __int32 v69 = result[93].i32[0];
    }
    uint64_t v71 = a4;
    int v72 = v69 + *(__int16 *)(*(void *)(a2 + 16) + 2 * a4);
    unsigned int v73 = v72 - 16385;
    if ((int)v4 < 1)
    {
      if (v73 <= 0xFFFF7FFE)
      {
        if (v72 >= 0) {
          int v102 = v72;
        }
        else {
          int v102 = v72 + 1;
        }
        *(_WORD *)(*(void *)(a2 + 16) + 2 * a4) = v102 >> 1;
        return result;
      }
      goto LABEL_100;
    }
    uint64_t v74 = (int32x4_t *)result[93].i64[1];
    unsigned int v75 = v73 < 0xFFFF7FFF;
    uint64_t v76 = v4;
    if (v4 >= 0x10
      && ((unint64_t)v74 < v5 + 2 * (v6 + (unint64_t)v4)
        ? (BOOL v77 = v7 >= (unint64_t)v74 + 4 * v4)
        : (BOOL v77 = 1),
          v77))
    {
      uint64_t result = (int32x4_t *)(v4 & 0x7FFFFFF0);
      int32x4_t v78 = vdupq_n_s32(v75);
      uint64_t v79 = (int16x4_t *)(v5 + 2 * v6 + 16);
      unsigned int v80 = v74 + 2;
      v81.i64[0] = 0x400000004000;
      v81.i64[1] = 0x400000004000;
      uint64_t v82 = v4 & 0xFFFFFFF0;
      v83.i64[0] = 0x800000008000;
      v83.i64[1] = 0x800000008000;
      int32x4_t v84 = v78;
      int32x4_t v85 = v78;
      int32x4_t v86 = v78;
      int32x4_t v87 = v78;
      do
      {
        int16x8_t v88 = *(int16x8_t *)v79[-2].i8;
        int32x4_t v89 = vaddw_s16(v80[-2], *(int16x4_t *)v88.i8);
        int32x4_t v90 = vaddw_high_s16(v80[-1], v88);
        int32x4_t v91 = vaddw_s16(*v80, *v79);
        int32x4_t v92 = vaddw_high_s16(v80[1], *(int16x8_t *)v79->i8);
        v80[-2] = v89;
        v80[-1] = v90;
        *unsigned int v80 = v91;
        v80[1] = v92;
        v80 += 4;
        int32x4_t v93 = (int32x4_t)vcgtq_u32(v83, (uint32x4_t)vaddq_s32(v89, v81));
        int32x4_t v94 = (int32x4_t)vcgtq_u32(v83, (uint32x4_t)vaddq_s32(v90, v81));
        int32x4_t v95 = (int32x4_t)vcgtq_u32(v83, (uint32x4_t)vaddq_s32(v91, v81));
        int32x4_t v96 = (int32x4_t)vcgtq_u32(v83, (uint32x4_t)vaddq_s32(v92, v81));
        int32x4_t v85 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v85, (int8x16_t)v94), v94);
        int32x4_t v84 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v84, (int8x16_t)v93), v93);
        int32x4_t v87 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v87, (int8x16_t)v96), v96);
        int32x4_t v86 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v86, (int8x16_t)v95), v95);
        v79 += 4;
        v82 -= 16;
      }
      while (v82);
      if (vaddv_s8(vand_s8(vmovn_s16((int16x8_t)vornq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v84, v78), (int16x8_t)vceqq_s32(v85, v78))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v86, v78), (int16x8_t)vceqq_s32(v87, v78)))), (int8x8_t)0x8040201008040201)))
      {
        unsigned int v75 = 1;
      }
      if (result == (int32x4_t *)v4)
      {
LABEL_81:
        if (v75)
        {
          v72 /= 2;
          if (v4 >= 4)
          {
            uint64_t v101 = v4 & 0x7FFFFFFC;
            uint64_t v103 = v4 & 0xFFFFFFFC;
            uint64_t result = v74;
            do
            {
              *uint64_t result = vshrq_n_s32((int32x4_t)vsraq_n_u32(*(uint32x4_t *)result, *(uint32x4_t *)result, 0x1FuLL), 1uLL);
              ++result;
              v103 -= 4;
            }
            while (v103);
            if (v101 == v4) {
              goto LABEL_94;
            }
          }
          else
          {
            uint64_t v101 = 0;
          }
          unsigned int v104 = &v74->i32[v101];
          uint64_t v105 = v4 - v101;
          do
          {
            uint64_t result = (int32x4_t *)(*v104 / 2);
            *v104++ = (int)result;
            --v105;
          }
          while (v105);
        }
LABEL_94:
        if (v4 >= 0x10
          && (v7 >= (unint64_t)v74 + 4 * v4
           || (unint64_t)v74 >= v5 + 2 * (v6 + (unint64_t)v4)))
        {
          uint64_t v106 = v4 & 0x7FFFFFF0;
          int32x4_t v111 = (int16x8_t *)&v74[2];
          uint64_t v112 = (int16x8_t *)(v5 + 2 * v6 + 16);
          uint64_t v113 = v76 & 0xFFFFFFF0;
          do
          {
            int16x8_t v115 = v111[-2];
            int16x8_t v114 = v111[-1];
            int16x8_t v117 = *v111;
            int16x8_t v116 = v111[1];
            v111 += 4;
            v112[-1] = vuzp1q_s16(v115, v114);
            int16x8_t *v112 = vuzp1q_s16(v117, v116);
            v112 += 2;
            v113 -= 16;
          }
          while (v113);
          if (v106 == v76) {
            goto LABEL_100;
          }
        }
        else
        {
          uint64_t v106 = 0;
        }
        int v107 = (_WORD *)(v5 + 2 * v106 + 2 * v6);
        int32x4_t v108 = &v74->i32[v106];
        uint64_t v109 = v76 - v106;
        do
        {
          int v110 = *v108++;
          *v107++ = v110;
          --v109;
        }
        while (v109);
LABEL_100:
        *(_WORD *)(*(void *)(a2 + 16) + 2 * v71) = v72;
        return result;
      }
    }
    else
    {
      uint64_t result = 0;
    }
    unint64_t v97 = &v74->i32[(void)result];
    int v98 = (__int16 *)(v5 + 2 * (void)result + 2 * v6);
    uint64_t result = (int32x4_t *)(v4 - (void)result);
    do
    {
      int v99 = *v98++;
      __int32 v100 = *v97;
      *v97++ += v99;
      if ((v100 + v99 - 16385) < 0xFFFF7FFF) {
        unsigned int v75 = 1;
      }
      uint64_t result = (int32x4_t *)((char *)result - 1);
    }
    while (result);
    goto LABEL_81;
  }
  uint64_t v8 = *(int **)(*(void *)result[89].i64[1] + 8 * (unsigned __int16)a3);
  if (v8 && *v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = a4;
    uint64_t v11 = (int16x4_t *)(v5 + 2 * v6);
    v12.i64[0] = 0x400000004000;
    v12.i64[1] = 0x400000004000;
    v13.i64[0] = 0x800000008000;
    v13.i64[1] = 0x800000008000;
    while (1)
    {
      int v17 = *(__int16 *)(*((void *)v8 + 1) + 2 * v9);
      int v18 = *(__int16 *)(*((void *)v8 + 2) + 2 * v9);
      BOOL v19 = __OFSUB__(v17, v18);
      int v20 = v17 - v18;
      result[93].i32[0] = v20;
      if ((v20 < 0) ^ v19 | (v20 == 0))
      {
        if ((int)v4 >= 1)
        {
          uint64_t v23 = 0;
          do
          {
            *(_DWORD *)(result[93].i64[1] + v23) = 0;
            v23 += 4;
          }
          while (4 * v4 != v23);
        }
      }
      else if ((int)v4 >= 1)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)(*((void *)v8 + 3) + 8 * v9);
        do
        {
          *(_DWORD *)(result[93].i64[1] + 4 * v21) = *(__int16 *)(v22 + 2 * v21);
          ++v21;
        }
        while (v4 != v21);
      }
      uint64_t v24 = result[68].u32[3];
      int v16 = result[93].i32[0] + *(__int16 *)(*(void *)(a2 + 16) + 2 * v10);
      unsigned int v25 = v16 - 16385;
      if ((int)v24 < 1)
      {
        if (v16 >= 0) {
          int v14 = result[93].i32[0] + *(__int16 *)(*(void *)(a2 + 16) + 2 * v10);
        }
        else {
          int v14 = v16 + 1;
        }
        int v15 = v14 >> 1;
        if (v25 <= 0xFFFF7FFE) {
          LOWORD(v16) = v15;
        }
        goto LABEL_10;
      }
      unint64_t v26 = result[93].u64[1];
      unsigned int v27 = v25 < 0xFFFF7FFF;
      if (v24 < 0x10) {
        break;
      }
      if (v26 < (unint64_t)v11 + 2 * v24 && v7 < v26 + 4 * v24) {
        break;
      }
      uint64_t v29 = v24 & 0x7FFFFFF0;
      int32x4_t v30 = (int32x4_t *)(v26 + 32);
      uint64_t v31 = v24 & 0xFFFFFFF0;
      double v32 = v11 + 2;
      int32x4_t v33 = vdupq_n_s32(v27);
      int32x4_t v34 = v33;
      int32x4_t v35 = v33;
      int32x4_t v36 = v33;
      int32x4_t v37 = v33;
      do
      {
        int16x8_t v38 = *(int16x8_t *)v32[-2].i8;
        int32x4_t v39 = vaddw_s16(v30[-2], *(int16x4_t *)v38.i8);
        int32x4_t v40 = vaddw_high_s16(v30[-1], v38);
        int32x4_t v41 = vaddw_s16(*v30, *v32);
        int32x4_t v42 = vaddw_high_s16(v30[1], *(int16x8_t *)v32->i8);
        v30[-2] = v39;
        v30[-1] = v40;
        *int32x4_t v30 = v41;
        v30[1] = v42;
        v30 += 4;
        int32x4_t v43 = (int32x4_t)vcgtq_u32(v13, (uint32x4_t)vaddq_s32(v39, v12));
        int32x4_t v44 = (int32x4_t)vcgtq_u32(v13, (uint32x4_t)vaddq_s32(v40, v12));
        int32x4_t v45 = (int32x4_t)vcgtq_u32(v13, (uint32x4_t)vaddq_s32(v41, v12));
        int32x4_t v46 = (int32x4_t)vcgtq_u32(v13, (uint32x4_t)vaddq_s32(v42, v12));
        int32x4_t v35 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v35, (int8x16_t)v44), v44);
        int32x4_t v34 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v34, (int8x16_t)v43), v43);
        int32x4_t v37 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v37, (int8x16_t)v46), v46);
        int32x4_t v36 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v36, (int8x16_t)v45), v45);
        v32 += 4;
        v31 -= 16;
      }
      while (v31);
      if (vaddv_s8(vand_s8(vmovn_s16((int16x8_t)vornq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v34, v33), (int16x8_t)vceqq_s32(v35, v33))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v36, v33), (int16x8_t)vceqq_s32(v37, v33)))), (int8x8_t)0x8040201008040201)))
      {
        unsigned int v27 = 1;
      }
      if (v29 != v24) {
        goto LABEL_33;
      }
LABEL_37:
      if (!v27) {
        goto LABEL_45;
      }
      v16 /= 2;
      if (v24 < 4)
      {
        uint64_t v52 = 0;
LABEL_43:
        int16x8_t v55 = (int *)(v26 + 4 * v52);
        uint64_t v56 = v24 - v52;
        do
        {
          *v55++ /= 2;
          --v56;
        }
        while (v56);
        goto LABEL_45;
      }
      uint64_t v52 = v24 & 0x7FFFFFFC;
      uint64_t v53 = v24 & 0xFFFFFFFC;
      uint64_t v54 = (uint32x4_t *)v26;
      do
      {
        *(int32x4_t *)uint64_t v54 = vshrq_n_s32((int32x4_t)vsraq_n_u32(*v54, *v54, 0x1FuLL), 1uLL);
        ++v54;
        v53 -= 4;
      }
      while (v53);
      if (v52 != v24) {
        goto LABEL_43;
      }
LABEL_45:
      if (v24 >= 0x10 && (v7 >= v26 + 4 * v24 || v26 >= (unint64_t)v11 + 2 * v24))
      {
        uint64_t v57 = v24 & 0x7FFFFFF0;
        int v62 = (int16x8_t *)(v26 + 32);
        uint64_t v63 = v24 & 0xFFFFFFF0;
        unint64_t v64 = (int16x8_t *)&v11[2];
        do
        {
          int16x8_t v66 = v62[-2];
          int16x8_t v65 = v62[-1];
          int16x8_t v68 = *v62;
          int16x8_t v67 = v62[1];
          v62 += 4;
          v64[-1] = vuzp1q_s16(v66, v65);
          *unint64_t v64 = vuzp1q_s16(v68, v67);
          v64 += 2;
          v63 -= 16;
        }
        while (v63);
        if (v57 == v24) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v57 = 0;
      }
      int v58 = (_WORD *)v11 + v57;
      uint64_t v59 = v24 - v57;
      uint64_t v60 = (int *)(v26 + 4 * v57);
      do
      {
        int v61 = *v60++;
        *v58++ = v61;
        --v59;
      }
      while (v59);
LABEL_10:
      *(_WORD *)(*(void *)(a2 + 16) + 2 * v10) = v16;
      if (++v9 >= *v8) {
        return result;
      }
    }
    uint64_t v29 = 0;
LABEL_33:
    int32x4_t v47 = (int *)(v26 + 4 * v29);
    uint64_t v48 = v24 - v29;
    int8x16_t v49 = (__int16 *)v11 + v29;
    do
    {
      int v50 = *v49++;
      int v51 = *v47;
      *v47++ += v50;
      if ((v51 + v50 - 16385) < 0xFFFF7FFF) {
        unsigned int v27 = 1;
      }
      --v48;
    }
    while (v48);
    goto LABEL_37;
  }
  return result;
}

uint64_t sub_10000EA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(unsigned int *)(a1 + 1100);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v12 = v10 + 2 * (int)v9 * (int)a4;
  int v13 = *(_DWORD *)(a1 + 1404);
  int v14 = *(__int16 *)(v11 + 2 * (int)a4);
  if ((v14 & 0xFFFE) != 0) {
    __int16 v15 = *(_WORD *)(v11 + 2 * (int)a4);
  }
  else {
    __int16 v15 = 1;
  }
  if ((a3 & 0x80000000) != 0)
  {
    if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 628)) {
      return 1;
    }
    int v21 = *(_DWORD *)(a2 + 44) * v13;
    if (v21 >= 0x4000) {
      __int16 v22 = 0x3FFF;
    }
    else {
      __int16 v22 = v21;
    }
    if (v21 >= -16383) {
      LOWORD(v23) = v22;
    }
    else {
      LOWORD(v23) = -16384;
    }
    uint64_t v24 = (__int16)-(__int16)a3;
    uint64_t v25 = (int)v9 * v24;
    if (qword_100101CC0)
    {
      if (*(_DWORD *)(qword_100101CC0 + 688))
      {
        int v23 = (__int16)v23 * v14 / ((__int16)v23 + v15);
        if (!*(_DWORD *)(qword_100101CC0 + 740)) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      __int16 v105 = v15;
      if ((__int16)v23 < v15) {
        __int16 v105 = v23;
      }
      if (*(_DWORD *)(qword_100101CC0 + 84)) {
        LOWORD(v23) = v105;
      }
      if (*(_DWORD *)(qword_100101CC0 + 740)) {
LABEL_26:
      }
        *(_WORD *)(v11 + 2 * v24) = 0;
    }
LABEL_27:
    unint64_t v26 = v10 + 2 * v25;
    int v23 = (__int16)v23;
    *(_DWORD *)(a1 + 1488) = (__int16)v23;
    if ((int)v9 >= 1)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 740)) {
          *(_WORD *)(v26 + 2 * i) = 0;
        }
        int v28 = *(__int16 *)(v12 + 2 * i);
        if (v28 < 0) {
          int v29 = -2;
        }
        else {
          int v29 = 2;
        }
        *(_DWORD *)(*(void *)(a1 + 1496) + 4 * i) = (v28 * (__int16)v23 + (__int16)(v15 / v29)) / v15;
      }
      int v23 = *(_DWORD *)(a1 + 1488);
    }
    uint64_t v91 = *(void *)(a2 + 16);
    uint64_t v92 = *(unsigned int *)(a1 + 1100);
    int v93 = v23 + *(__int16 *)(v91 + 2 * v24);
    unsigned int v94 = v93 - 16385;
    if ((int)v92 < 1)
    {
      if (v94 <= 0xFFFF7FFE)
      {
        if (v93 >= 0) {
          int v104 = v23 + *(__int16 *)(v91 + 2 * v24);
        }
        else {
          int v104 = v93 + 1;
        }
        int v93 = v104 >> 1;
      }
      goto LABEL_131;
    }
    unint64_t v95 = *(void *)(a1 + 1496);
    unsigned int v96 = v94 < 0xFFFF7FFF;
    if (v92 >= 0x10 && (v95 >= v10 + 2 * (v25 + v92) || v26 >= v95 + 4 * v92))
    {
      uint64_t v97 = v92 & 0x7FFFFFF0;
      int32x4_t v115 = vdupq_n_s32(v96);
      int16x8_t v116 = (int16x4_t *)(v10 + 2 * v25 + 16);
      int16x8_t v117 = (int32x4_t *)(v95 + 32);
      v118.i64[0] = 0x400000004000;
      v118.i64[1] = 0x400000004000;
      uint64_t v119 = v92 & 0xFFFFFFF0;
      v120.i64[0] = 0x800000008000;
      v120.i64[1] = 0x800000008000;
      int32x4_t v121 = v115;
      int32x4_t v122 = v115;
      int32x4_t v123 = v115;
      int32x4_t v124 = v115;
      do
      {
        int16x8_t v125 = *(int16x8_t *)v116[-2].i8;
        int32x4_t v126 = vaddw_s16(v117[-2], *(int16x4_t *)v125.i8);
        int32x4_t v127 = vaddw_high_s16(v117[-1], v125);
        int32x4_t v128 = vaddw_s16(*v117, *v116);
        int32x4_t v129 = vaddw_high_s16(v117[1], *(int16x8_t *)v116->i8);
        v117[-2] = v126;
        v117[-1] = v127;
        *int16x8_t v117 = v128;
        v117[1] = v129;
        v117 += 4;
        int32x4_t v130 = (int32x4_t)vcgtq_u32(v120, (uint32x4_t)vaddq_s32(v126, v118));
        int32x4_t v131 = (int32x4_t)vcgtq_u32(v120, (uint32x4_t)vaddq_s32(v127, v118));
        int32x4_t v132 = (int32x4_t)vcgtq_u32(v120, (uint32x4_t)vaddq_s32(v128, v118));
        int32x4_t v133 = (int32x4_t)vcgtq_u32(v120, (uint32x4_t)vaddq_s32(v129, v118));
        int32x4_t v122 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v122, (int8x16_t)v131), v131);
        int32x4_t v121 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v121, (int8x16_t)v130), v130);
        int32x4_t v124 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v124, (int8x16_t)v133), v133);
        int32x4_t v123 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v123, (int8x16_t)v132), v132);
        v116 += 4;
        v119 -= 16;
      }
      while (v119);
      if (vaddv_s8(vand_s8(vmovn_s16((int16x8_t)vornq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v121, v115), (int16x8_t)vceqq_s32(v122, v115))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v123, v115), (int16x8_t)vceqq_s32(v124, v115)))), (int8x8_t)0x8040201008040201)))
      {
        unsigned int v96 = 1;
      }
      if (v97 == v92)
      {
LABEL_105:
        if (!v96)
        {
LABEL_125:
          if (v92 >= 0x10 && (v26 >= v95 + 4 * v92 || v95 >= v10 + 2 * (v25 + v92)))
          {
            uint64_t v110 = v92 & 0x7FFFFFF0;
            uint64_t v134 = (int16x8_t *)(v95 + 32);
            unsigned int v135 = (int16x8_t *)(v10 + 2 * v25 + 16);
            uint64_t v136 = v92 & 0xFFFFFFF0;
            do
            {
              int16x8_t v138 = v134[-2];
              int16x8_t v137 = v134[-1];
              int16x8_t v140 = *v134;
              int16x8_t v139 = v134[1];
              v134 += 4;
              v135[-1] = vuzp1q_s16(v138, v137);
              *unsigned int v135 = vuzp1q_s16(v140, v139);
              v135 += 2;
              v136 -= 16;
            }
            while (v136);
            if (v110 == v92) {
              goto LABEL_131;
            }
          }
          else
          {
            uint64_t v110 = 0;
          }
          uint64_t v111 = v92 - v110;
          uint64_t v112 = (_WORD *)(v10 + 2 * v110 + 2 * v25);
          uint64_t v113 = (int *)(v95 + 4 * v110);
          do
          {
            int v114 = *v113++;
            *v112++ = v114;
            --v111;
          }
          while (v111);
LABEL_131:
          *(_WORD *)(v91 + 2 * v24) = v93;
          return 1;
        }
        if (v92 >= 4)
        {
          uint64_t v103 = v92 & 0x7FFFFFFC;
          uint64_t v106 = v92 & 0xFFFFFFFC;
          int v107 = (uint32x4_t *)v95;
          do
          {
            *(int32x4_t *)int v107 = vshrq_n_s32((int32x4_t)vsraq_n_u32(*v107, *v107, 0x1FuLL), 1uLL);
            ++v107;
            v106 -= 4;
          }
          while (v106);
          if (v103 == v92) {
            goto LABEL_124;
          }
        }
        else
        {
          uint64_t v103 = 0;
        }
        uint64_t v108 = v92 - v103;
        uint64_t v109 = (int *)(v95 + 4 * v103);
        do
        {
          *v109++ /= 2;
          --v108;
        }
        while (v108);
LABEL_124:
        v93 /= 2;
        goto LABEL_125;
      }
    }
    else
    {
      uint64_t v97 = 0;
    }
    uint64_t v98 = v92 - v97;
    int v99 = (int *)(v95 + 4 * v97);
    __int32 v100 = (__int16 *)(v10 + 2 * v97 + 2 * v25);
    do
    {
      int v101 = *v100++;
      int v102 = *v99;
      *v99++ += v101;
      if ((v102 + v101 - 16385) < 0xFFFF7FFF) {
        unsigned int v96 = 1;
      }
      --v98;
    }
    while (v98);
    goto LABEL_105;
  }
  int v16 = *(_DWORD *)(a2 + 48) * v13;
  if (v16 >= 0x3FFF) {
    int v16 = 0x3FFF;
  }
  if (v16 <= -16384) {
    int v16 = -16384;
  }
  int v17 = v15;
  if (v16 >= v15) {
    int v18 = v15;
  }
  else {
    int v18 = v16;
  }
  uint64_t v141 = *(void *)(a1 + 1432);
  uint64_t v19 = (unsigned __int16)a3;
  int v20 = *(int **)(*(void *)v141 + 8 * (unsigned __int16)a3);
  if (v20)
  {
    if (*v20 < 1) {
      return 1;
    }
    goto LABEL_38;
  }
  uint64_t result = sub_10000D03C(a1, (unsigned __int16)a3);
  if (!result) {
    return result;
  }
  int v20 = *(int **)(*(void *)v141 + 8 * v19);
  if (*v20 >= 1)
  {
LABEL_38:
    uint64_t v31 = 0;
    v32.i64[0] = 0x400000004000;
    v32.i64[1] = 0x400000004000;
    v33.i64[0] = 0x800000008000;
    v33.i64[1] = 0x800000008000;
    while (1)
    {
      if (!*(void *)(*((void *)v20 + 3) + 8 * v31))
      {
        int32x4_t v35 = v20;
        sub_1000C2F04(2 * *(int *)(v141 + 32), (uint64_t)v20, a3, a4, a5, a6, a7, a8);
        v33.i64[0] = 0x800000008000;
        v33.i64[1] = 0x800000008000;
        v32.i64[0] = 0x400000004000;
        v32.i64[1] = 0x400000004000;
        int v20 = v35;
        *(void *)(*((void *)v35 + 3) + 8 * v31) = v36;
        int v37 = *(_DWORD *)(v141 + 56);
        int v38 = *(_DWORD *)(v141 + 60);
        *(_DWORD *)(v141 + 56) = v37 + 1;
        if (v37 >= v38) {
          *(_DWORD *)(v141 + 60) = v37 + 1;
        }
      }
      unint64_t v39 = *(void *)(*((void *)v20 + 3) + 8 * v31);
      *(_DWORD *)(a1 + 1488) = v18;
      int v40 = v18;
      if ((int)v9 >= 1)
      {
        for (uint64_t j = 0; j != v9; ++j)
        {
          int v42 = *(__int16 *)(v12 + 2 * j);
          if (v42 < 0) {
            int v43 = -2;
          }
          else {
            int v43 = 2;
          }
          *(_DWORD *)(*(void *)(a1 + 1496) + 4 * j) = (v17 / v43 + v18 * v42) / v17;
        }
        int v40 = *(_DWORD *)(a1 + 1488);
      }
      uint64_t v44 = *(unsigned int *)(a1 + 1100);
      uint64_t v45 = *((void *)v20 + 1);
      int v46 = v40 + *(__int16 *)(v45 + 2 * v31);
      unsigned int v47 = v46 - 16385;
      if ((int)v44 >= 1) {
        break;
      }
      if (v47 > 0xFFFF7FFE)
      {
        *(_WORD *)(v45 + 2 * v31) = v46;
        goto LABEL_44;
      }
      if (v46 >= 0) {
        unsigned int v34 = v46;
      }
      else {
        unsigned int v34 = v46 + 1;
      }
      *(_WORD *)(v45 + 2 * v31) = v34 >> 1;
LABEL_43:
      *(_WORD *)(*((void *)v20 + 2) + 2 * v31) = (__int16)(*(_WORD *)(*((void *)v20 + 2) + 2 * v31)
                                                                         + (*(_WORD *)(*((void *)v20 + 2) + 2 * v31) >> 15)) >> 1;
LABEL_44:
      if (++v31 >= *v20) {
        return 1;
      }
    }
    unint64_t v48 = *(void *)(a1 + 1496);
    unsigned int v49 = v47 < 0xFFFF7FFF;
    if (v44 >= 0x10 && (v48 < v39 + 2 * v44 ? (BOOL v50 = v39 >= v48 + 4 * v44) : (BOOL v50 = 1), v50))
    {
      uint64_t v51 = v44 & 0x7FFFFFF0;
      uint64_t v52 = (int16x4_t *)(v39 + 16);
      uint64_t v53 = (int32x4_t *)(v48 + 32);
      uint64_t v54 = v44 & 0xFFFFFFF0;
      int32x4_t v55 = vdupq_n_s32(v49);
      int32x4_t v56 = v55;
      int32x4_t v57 = v55;
      int32x4_t v58 = v55;
      int32x4_t v59 = v55;
      do
      {
        int16x8_t v60 = *(int16x8_t *)v52[-2].i8;
        int32x4_t v61 = vaddw_s16(v53[-2], *(int16x4_t *)v60.i8);
        int32x4_t v62 = vaddw_high_s16(v53[-1], v60);
        int32x4_t v63 = vaddw_s16(*v53, *v52);
        int32x4_t v64 = vaddw_high_s16(v53[1], *(int16x8_t *)v52->i8);
        v53[-2] = v61;
        v53[-1] = v62;
        int32x4_t *v53 = v63;
        v53[1] = v64;
        v53 += 4;
        int32x4_t v65 = (int32x4_t)vcgtq_u32(v33, (uint32x4_t)vaddq_s32(v61, v32));
        int32x4_t v66 = (int32x4_t)vcgtq_u32(v33, (uint32x4_t)vaddq_s32(v62, v32));
        int32x4_t v67 = (int32x4_t)vcgtq_u32(v33, (uint32x4_t)vaddq_s32(v63, v32));
        int32x4_t v68 = (int32x4_t)vcgtq_u32(v33, (uint32x4_t)vaddq_s32(v64, v32));
        int32x4_t v57 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v57, (int8x16_t)v66), v66);
        int32x4_t v56 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v56, (int8x16_t)v65), v65);
        int32x4_t v59 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v59, (int8x16_t)v68), v68);
        int32x4_t v58 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v58, (int8x16_t)v67), v67);
        v52 += 4;
        v54 -= 16;
      }
      while (v54);
      if (vaddv_s8(vand_s8(vmovn_s16((int16x8_t)vornq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v56, v55), (int16x8_t)vceqq_s32(v57, v55))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v58, v55), (int16x8_t)vceqq_s32(v59, v55)))), (int8x8_t)0x8040201008040201)))
      {
        unsigned int v49 = 1;
      }
      if (v51 == v44)
      {
LABEL_73:
        if (!v49) {
          goto LABEL_83;
        }
        v46 /= 2;
        if (v44 >= 4)
        {
          uint64_t v74 = v44 & 0x7FFFFFFC;
          uint64_t v75 = v44 & 0xFFFFFFFC;
          uint64_t v76 = (uint32x4_t *)v48;
          do
          {
            *(int32x4_t *)uint64_t v76 = vshrq_n_s32((int32x4_t)vsraq_n_u32(*v76, *v76, 0x1FuLL), 1uLL);
            ++v76;
            v75 -= 4;
          }
          while (v75);
          if (v74 == v44)
          {
LABEL_83:
            if (v44 >= 0x10 && (v39 >= v48 + 4 * v44 || v48 >= v39 + 2 * v44))
            {
              uint64_t v79 = v44 & 0x7FFFFFF0;
              int32x4_t v84 = (int16x8_t *)(v48 + 32);
              int32x4_t v85 = (int16x8_t *)(v39 + 16);
              uint64_t v86 = v44 & 0xFFFFFFF0;
              do
              {
                int16x8_t v88 = v84[-2];
                int16x8_t v87 = v84[-1];
                int16x8_t v90 = *v84;
                int16x8_t v89 = v84[1];
                v84 += 4;
                v85[-1] = vuzp1q_s16(v88, v87);
                *int32x4_t v85 = vuzp1q_s16(v90, v89);
                v85 += 2;
                v86 -= 16;
              }
              while (v86);
              if (v79 == v44)
              {
LABEL_89:
                *(_WORD *)(*((void *)v20 + 1) + 2 * v31) = v46;
                if (!v49) {
                  goto LABEL_44;
                }
                goto LABEL_43;
              }
            }
            else
            {
              uint64_t v79 = 0;
            }
            unsigned int v80 = (_WORD *)(v39 + 2 * v79);
            uint64_t v81 = v44 - v79;
            uint64_t v82 = (int *)(v48 + 4 * v79);
            do
            {
              int v83 = *v82++;
              *v80++ = v83;
              --v81;
            }
            while (v81);
            goto LABEL_89;
          }
        }
        else
        {
          uint64_t v74 = 0;
        }
        BOOL v77 = (int *)(v48 + 4 * v74);
        uint64_t v78 = v44 - v74;
        do
        {
          *v77++ /= 2;
          --v78;
        }
        while (v78);
        goto LABEL_83;
      }
    }
    else
    {
      uint64_t v51 = 0;
    }
    __int32 v69 = (int *)(v48 + 4 * v51);
    uint64_t v70 = v44 - v51;
    uint64_t v71 = (__int16 *)(v39 + 2 * v51);
    do
    {
      int v72 = *v71++;
      int v73 = *v69;
      *v69++ += v72;
      if ((v73 + v72 - 16385) < 0xFFFF7FFF) {
        unsigned int v49 = 1;
      }
      --v70;
    }
    while (v70);
    goto LABEL_73;
  }
  return 1;
}

_DWORD *sub_10000F21C(uint64_t a1, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 > 6)
  {
    uint64_t v8 = sub_1000BEC58(a1, 0, a2, a4, a5, a6, a7, a8);
    if (!v8) {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_1000BEC58(a1, off_1000FCDC0[a3], a2, a4, a5, a6, a7, a8);
    if (!v8) {
      return 0;
    }
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C33A0(2048);
  uint64_t v11 = (_DWORD *)v10;
  if (!v10)
  {
    sub_1000BED3C(v9);
    return v11;
  }
  uint64_t v12 = (_DWORD *)(v10 + 2016);
  if (!sub_1000BEE7C(v9, (_DWORD *)(v10 + 2016))) {
    goto LABEL_478;
  }
  if (!*v12)
  {
    if (!sub_1000BEE7C(v9, v11 + 248)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 249)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 250)) {
      goto LABEL_478;
    }
    int v17 = v11 + 251;
    if (!sub_1000BEE7C(v9, v11 + 251)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 252)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 254)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 255)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 256)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 257)) {
      goto LABEL_478;
    }
    int v18 = v11 + 258;
    if (!sub_1000BEE7C(v9, v11 + 258)) {
      goto LABEL_478;
    }
    uint64_t v19 = v11 + 259;
    if (!sub_1000BEE7C(v9, v11 + 259)) {
      goto LABEL_478;
    }
    if (!sub_1000BEF1C(v9, (unsigned char *)v11 + 1040)) {
      goto LABEL_478;
    }
    if (!sub_1000BEF1C(v9, (unsigned char *)v11 + 1041)) {
      goto LABEL_478;
    }
    uint32x4_t v146 = v11 + 261;
    if (!sub_1000BEE7C(v9, v11 + 261)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 262)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 263)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 264)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 265)) {
      goto LABEL_478;
    }
    uint64_t v141 = v11 + 268;
    if (!sub_1000BEECC(v9, v11 + 268)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 269)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 270)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 271)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 272)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 273)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 274)) {
      goto LABEL_478;
    }
    int16x8_t v140 = v11 + 275;
    if (!sub_1000BEECC(v9, v11 + 275)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 276)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 277)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 278)) {
      goto LABEL_478;
    }
    int32x4_t v130 = v11 + 279;
    if (!sub_1000BEE7C(v9, v11 + 279)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 280)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 281)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 282)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 283)) {
      goto LABEL_478;
    }
    if (!sub_1000BEF74(v9, (_WORD *)v11 + 568)) {
      goto LABEL_478;
    }
    v11[285] = 2785280;
    int16x8_t v125 = v11 + 295;
    if (!sub_1000BEECC(v9, v11 + 295)) {
      goto LABEL_478;
    }
    int32x4_t v122 = v11 + 297;
    if (!sub_1000BEECC(v9, v11 + 297)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 298)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 299)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 300)) {
      goto LABEL_478;
    }
    v149[0] = 0;
    if (!sub_1000BEECC(v9, v149)) {
      goto LABEL_478;
    }
    int v121 = v149[0];
    v11[324] = v149[0];
    if (!sub_1000BEE7C(v9, v11 + 328)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 329)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 330)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 336)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 337)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 346)) {
      goto LABEL_478;
    }
    if (!sub_1000BEF74(v9, (_WORD *)v11 + 694)) {
      goto LABEL_478;
    }
    if (!sub_1000BEF74(v9, (_WORD *)v11 + 695)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 348)) {
      goto LABEL_478;
    }
    if (!sub_1000BEF74(v9, (_WORD *)v11 + 698)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 350)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 351)) {
      goto LABEL_478;
    }
    if (!sub_1000BEECC(v9, v11 + 356)) {
      goto LABEL_478;
    }
    if (!sub_1000BEE7C(v9, v11 + 401)) {
      goto LABEL_478;
    }
    if (!sub_1000BEF74(v9, (_WORD *)v11 + 804)) {
      goto LABEL_478;
    }
    if (!sub_1000BEF74(v9, (_WORD *)v11 + 805)) {
      goto LABEL_478;
    }
    uint32x4_t v120 = v11 + 440;
    if (!sub_1000BEE7C(v9, v11 + 440)
      || !sub_1000BEE7C(v9, v11 + 441)
      || !sub_1000BEF74(v9, (_WORD *)v11 + 884)
      || !sub_1000BEF1C(v9, (unsigned char *)v11 + 1770)
      || !sub_1000BEF1C(v9, (unsigned char *)v11 + 1771)
      || !sub_1000BEF1C(v9, (unsigned char *)v11 + 1772)
      || !sub_1000BEF1C(v9, (unsigned char *)v11 + 1773)
      || !sub_1000BEE7C(v9, v11 + 444)
      || !sub_1000BEF1C(v9, (unsigned char *)v11 + 1780)
      || !sub_1000BEECC(v9, v11 + 446)
      || !sub_1000BEECC(v9, v11 + 447)
      || !sub_1000BEE7C(v9, v11 + 464)
      || !sub_1000BEE7C(v9, v11 + 465)
      || !sub_1000BEE7C(v9, v11 + 466)
      || !sub_1000BEE7C(v9, v11 + 467)
      || !sub_1000BEE7C(v9, v11 + 468)
      || !sub_1000BEE7C(v9, v11 + 469)
      || !sub_1000BEECC(v9, v11 + 470)
      || !sub_1000BEECC(v9, v11 + 471)
      || !sub_1000BEECC(v9, v11 + 472)
      || !sub_1000BEECC(v9, v11 + 478)
      || !sub_1000BEECC(v9, v11 + 479)
      || !sub_1000BEECC(v9, v11 + 480))
    {
      goto LABEL_478;
    }
    if (v11[467])
    {
      v149[0] = 0;
      int32x4_t v118 = v11 + 484;
      if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 242, v149)) {
        goto LABEL_478;
      }
      if (*v118)
      {
        if (v149[0] != *v140) {
          goto LABEL_478;
        }
        *((void *)v11 + 241) = *v118;
      }
      v149[0] = 0;
      uint64_t v119 = v11 + 488;
      if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 244, v149)) {
        goto LABEL_478;
      }
      if (*v119)
      {
        if (v149[0] != *v140) {
          goto LABEL_478;
        }
        *((void *)v11 + 243) = *v119;
      }
    }
    if (!sub_1000BEF74(v9, (_WORD *)v11 + 980)
      || !sub_1000BEE7C(v9, v11 + 491)
      || !sub_1000BEE7C(v9, v11 + 492)
      || !sub_1000BEF74(v9, (_WORD *)v11 + 986)
      || !sub_1000BEE7C(v9, v11 + 495)
      || !sub_1000BEE7C(v9, v11 + 498)
      || !sub_1000BEECC(v9, v11 + 499)
      || !sub_1000BEE7C(v9, v11 + 502)
      || !sub_1000BEE7C(v9, v11 + 503)
      || !sub_1000BEECC(v9, v11 + 505)
      || !sub_1000BEE7C(v9, v11 + 506)
      || !sub_1000BEE7C(v9, v11 + 294))
    {
      goto LABEL_478;
    }
    if (!v11[503])
    {
      if (v11[294])
      {
        v149[0] = 0;
        int v114 = v11 + 292;
        if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 146, v149)) {
          goto LABEL_478;
        }
        if (*v114)
        {
          if (v149[0] != *v141 + 1) {
            goto LABEL_478;
          }
          *((void *)v11 + 145) = *v114;
        }
      }
      else
      {
        v149[0] = 0;
        int32x4_t v115 = v11 + 288;
        if (!sub_1000BF078(v9, 2, (uint64_t *)v11 + 144, v149)) {
          goto LABEL_478;
        }
        if (*v115)
        {
          if (v149[0] != *v141 + 1) {
            goto LABEL_478;
          }
          *((void *)v11 + 143) = *v115;
        }
      }
    }
    if (*v19) {
      goto LABEL_168;
    }
    int v20 = v11[281] * *v122;
    if (*v18)
    {
      int v112 = 0;
      int v116 = 0;
      if (v121 == 5) {
        int v20 = 0;
      }
      int v126 = v20;
      if (*v120) {
        goto LABEL_142;
      }
    }
    else
    {
      if (v121 == 5) {
        int v20 = 0;
      }
      int v126 = v20;
    }
    int v21 = v126;
    if (*v130) {
      int v22 = 0;
    }
    else {
      int v22 = v126;
    }
    int v112 = v22;
    if (!*v130) {
      int v21 = 0;
    }
    int v116 = v21;
    int v126 = 0;
LABEL_142:
    v149[0] = 0;
    uint64_t v111 = (uint64_t *)(v11 + 312);
    if (!sub_1000BF078(v9, 2, (uint64_t *)v11 + 156, v149)) {
      goto LABEL_478;
    }
    uint64_t v23 = *v111;
    if (*v111)
    {
      if (v149[0] != v112) {
        goto LABEL_478;
      }
    }
    if (v23) {
      *((void *)v11 + 151) = v23;
    }
    v149[0] = 0;
    uint64_t v113 = (uint64_t *)(v11 + 314);
    if (!sub_1000BF078(v9, 1, (uint64_t *)v11 + 157, v149)) {
      goto LABEL_478;
    }
    uint64_t v24 = *v113;
    if (*v113)
    {
      if (v149[0] != v116) {
        goto LABEL_478;
      }
    }
    if (v24) {
      *((void *)v11 + 152) = v24;
    }
    v149[0] = 0;
    int16x8_t v117 = (uint64_t *)(v11 + 316);
    if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 158, v149)) {
      goto LABEL_478;
    }
    uint64_t v25 = *v117;
    if (*v117)
    {
      if (v149[0] != v126) {
        goto LABEL_478;
      }
    }
    if (v25) {
      *((void *)v11 + 153) = v25;
    }
    else {
      uint64_t v25 = *((void *)v11 + 153);
    }
    uint64_t v26 = *((void *)v11 + 151);
    if (v25) {
      int v27 = 2;
    }
    else {
      int v27 = 1;
    }
    if (!v26) {
      int v27 = v25 != 0;
    }
    uint64_t v28 = *((void *)v11 + 152);
    if (v28) {
      ++v27;
    }
    if (v27 != (v121 != 5)) {
      goto LABEL_478;
    }
    if (!*v130)
    {
      if (v121 == 5)
      {
LABEL_173:
        int v131 = 0;
        goto LABEL_174;
      }
      if (!(v25 | v26)) {
        goto LABEL_478;
      }
LABEL_172:
      int v131 = *v122;
LABEL_174:
      v149[0] = 0;
      int32x4_t v127 = (uint64_t *)(v11 + 322);
      if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 161, v149)) {
        goto LABEL_478;
      }
      uint64_t v29 = *v127;
      if (*v127)
      {
        if (v149[0] != v131) {
          goto LABEL_478;
        }
      }
      if (v29) {
        *((void *)v11 + 155) = v29;
      }
      if (v11[329])
      {
        v149[0] = 0;
        int32x4_t v132 = v11 + 334;
        if (!sub_1000BF078(v9, 2, (uint64_t *)v11 + 167, v149)) {
          goto LABEL_478;
        }
        if (*v132)
        {
          if (v149[0] != v11[330]) {
            goto LABEL_478;
          }
          *((void *)v11 + 166) = *v132;
        }
      }
      if (v11[336])
      {
        v149[0] = 0;
        int32x4_t v133 = v11 + 340;
        if (!sub_1000BF078(v9, 2, (uint64_t *)v11 + 170, v149)) {
          goto LABEL_478;
        }
        if (*v133)
        {
          if (v149[0] != v11[337]) {
            goto LABEL_478;
          }
          *((void *)v11 + 169) = *v133;
        }
      }
      int v134 = v11[346];
      int v128 = v11[274];
      v149[0] = 0;
      int32x4_t v123 = (uint64_t *)(v11 + 344);
      if (!sub_1000BF078(v9, 2, (uint64_t *)v11 + 172, v149)) {
        goto LABEL_478;
      }
      uint64_t v30 = *v123;
      if (*v123)
      {
        if (v149[0] != v128 * v134) {
          goto LABEL_478;
        }
      }
      if (v30) {
        *((void *)v11 + 171) = v30;
      }
      int32x4_t v129 = (int *)sub_1000C33A0(48);
      if (!v129) {
        goto LABEL_478;
      }
      *((void *)v11 + 116) = v129;
      if (!sub_1000BEECC(v9, v129)) {
        goto LABEL_478;
      }
      if (!sub_1000BEECC(v9, (void *)(*((void *)v11 + 116) + 4))) {
        goto LABEL_478;
      }
      if (!sub_1000BEECC(v9, (void *)(*((void *)v11 + 116) + 8))) {
        goto LABEL_478;
      }
      if (!sub_1000BEF74(v9, (_WORD *)(*((void *)v11 + 116) + 12))) {
        goto LABEL_478;
      }
      if (!sub_1000BEECC(v9, (void *)(*((void *)v11 + 116) + 16))) {
        goto LABEL_478;
      }
      uint64_t v31 = sub_1000C33A0(8 * *v129);
      *((void *)v129 + 3) = v31;
      if (!v31) {
        goto LABEL_478;
      }
      *((void *)v129 + 4) = v31;
      if (*v129 >= 1)
      {
        uint64_t v135 = 0;
        uint64_t v124 = 0;
        do
        {
          if (!sub_1000BF14C(v9, (uint64_t *)(*((void *)v129 + 3) + v135))) {
            break;
          }
          v135 += 8;
          ++v124;
        }
        while (v124 < *v129);
      }
      v149[0] = 0;
      uint64_t v136 = v11 + 354;
      if (!sub_1000BF078(v9, 2, (uint64_t *)v11 + 177, v149)) {
        goto LABEL_478;
      }
      if (*v136)
      {
        if (v149[0] != v11[356]) {
          goto LABEL_478;
        }
        *((void *)v11 + 176) = *v136;
      }
      if (v11[506])
      {
        v149[0] = 0;
        int16x8_t v137 = v11 + 510;
        if (!sub_1000BF078(v9, 1, (uint64_t *)v11 + 255, v149)) {
          goto LABEL_478;
        }
        if (*v137)
        {
          if (v149[0] != *v125) {
            goto LABEL_478;
          }
          *((void *)v11 + 254) = *v137;
        }
      }
      v149[0] = 0;
      int16x8_t v138 = v11 + 462;
      if (!sub_1000BF078(v9, 1, (uint64_t *)v11 + 231, v149)) {
        goto LABEL_478;
      }
      if (*v138)
      {
        if (v149[0] != *v141) {
          goto LABEL_478;
        }
        *((void *)v11 + 230) = *v138;
      }
      v149[0] = 0;
      uint16x4_t v142 = v11 + 476;
      if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 238, v149)) {
        goto LABEL_478;
      }
      if (*v142)
      {
        if (v149[0] != v11[472]) {
          goto LABEL_478;
        }
        *((void *)v11 + 237) = *v142;
      }
      int v139 = *v125;
      if (v11[249] && *v18)
      {
        int v32 = *v125;
        if (*v120) {
          int v32 = 0;
        }
        int v143 = v32;
      }
      else
      {
        int v143 = 0;
      }
      int v33 = v11[280] * v139;
      if (*v19)
      {
        int v34 = v11[283];
        int v35 = v33 + (v33 < 0 ? 3 : 0);
        v149[0] = 0;
        uint64_t v36 = v11 + 42;
        if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 21, v149)) {
          goto LABEL_478;
        }
        if (*v36)
        {
          if (v149[0] != *v125) {
            goto LABEL_478;
          }
          *((void *)v11 + 20) = *v36;
        }
        v149[0] = 0;
        int v37 = (uint64_t *)(v11 + 50);
        if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 25, v149)) {
          goto LABEL_478;
        }
        uint64_t v38 = *v37;
        if (*v37)
        {
          if (v149[0] != v34 * v139) {
            goto LABEL_478;
          }
        }
        if (v38) {
          *((void *)v11 + 24) = v38;
        }
        v149[0] = 0;
        unint64_t v39 = (uint64_t *)(v11 + 318);
        if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 159, v149)) {
          goto LABEL_478;
        }
        uint64_t v40 = *v39;
        if (*v39)
        {
          if (v149[0] != v35 >> 2) {
            goto LABEL_478;
          }
        }
        if (v40) {
          *((void *)v11 + 154) = v40;
        }
        goto LABEL_292;
      }
      if (!*v18)
      {
        v149[0] = 0;
        unsigned int v47 = (uint64_t *)(v11 + 6);
        if (!sub_1000BF078(v9, 1, (uint64_t *)v11 + 3, v149)) {
          goto LABEL_478;
        }
        uint64_t v48 = *v47;
        if (*v47)
        {
          if (v149[0] != v33) {
            goto LABEL_478;
          }
        }
        if (v48) {
          *((void *)v11 + 2) = v48;
        }
        goto LABEL_292;
      }
      v149[0] = 0;
      int32x4_t v41 = (uint64_t *)(v11 + 38);
      if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 19, v149)) {
        goto LABEL_478;
      }
      int v42 = v33 >= 0 ? v33 : v33 + 3;
      uint64_t v43 = *v41;
      if (*v41)
      {
        if (v149[0] != v42 >> 2) {
          goto LABEL_478;
        }
      }
      if (v43) {
        *((void *)v11 + 17) = v43;
      }
      if (v11[277])
      {
        v149[0] = 0;
        uint64_t v44 = (uint64_t *)(v11 + 18);
        if (!sub_1000BF078(v9, 2, (uint64_t *)v11 + 9, v149)) {
          goto LABEL_478;
        }
        uint64_t v45 = *v44;
        if (*v44)
        {
          if (v149[0] != v143) {
            goto LABEL_478;
          }
        }
        if (v45) {
          *((void *)v11 + 8) = v45;
        }
        if (*v146 && !*v120)
        {
          v149[0] = 0;
          uint64_t v52 = (uint64_t *)(v11 + 22);
          if (!sub_1000BF078(v9, 2, (uint64_t *)v11 + 11, v149)) {
            goto LABEL_478;
          }
          uint64_t v46 = *v52;
          if (*v52)
          {
            if (v149[0] != v143) {
              goto LABEL_478;
            }
          }
          if (!v46)
          {
LABEL_279:
            if (!*((void *)v11 + 8))
            {
              if (*((void *)v11 + 10))
              {
LABEL_292:
                uint64_t v54 = (char *)sub_1000C33A0(256);
                if (!v54) {
                  goto LABEL_478;
                }
                int32x4_t v55 = v54;
                *((void *)v11 + 163) = v54;
                if (!sub_1000BEECC(v9, v54)) {
                  goto LABEL_478;
                }
                if (!sub_1000BEECC(v9, v55)) {
                  goto LABEL_478;
                }
                if (!sub_1000BEECC(v9, v55 + 208)) {
                  goto LABEL_478;
                }
                if (!sub_1000BEECC(v9, v55 + 212)) {
                  goto LABEL_478;
                }
                int32x4_t v56 = v55 + 216;
                if (!sub_1000BEECC(v9, v55 + 216)
                  || !sub_1000BEECC(v9, v55 + 220)
                  || !sub_1000BEECC(v9, v55 + 224)
                  || !sub_1000BEECC(v9, v55 + 228)
                  || !sub_1000BEECC(v9, v55 + 240)
                  || !sub_1000BEF1C(v9, v55 + 244)
                  || !sub_1000BEF1C(v9, v55 + 245)
                  || !sub_1000BEF1C(v9, v55 + 246)
                  || !sub_1000BEE7C(v9, (_DWORD *)v55 + 62)
                  || !sub_1000BEECC(v9, v55 + 252))
                {
                  goto LABEL_478;
                }
                if (v55[246])
                {
                  v149[0] = 0;
                  int32x4_t v57 = v55 + 104;
                  if (!sub_1000BF078(v9, 2, (uint64_t *)v55 + 13, v149)) {
                    goto LABEL_478;
                  }
                  if (*v57)
                  {
                    if (v149[0] != *v56) {
                      goto LABEL_478;
                    }
                    *((void *)v55 + 12) = *v57;
                  }
                  v149[0] = 0;
                  int32x4_t v58 = v55 + 120;
                  if (!sub_1000BF078(v9, 2, (uint64_t *)v55 + 15, v149)) {
                    goto LABEL_478;
                  }
                  if (*v58)
                  {
                    if (v149[0] != *v56) {
                      goto LABEL_478;
                    }
                    *((void *)v55 + 14) = *v58;
                  }
                }
                else
                {
                  v149[0] = 0;
                  int32x4_t v59 = v55 + 72;
                  if (!sub_1000BF078(v9, 1, (uint64_t *)v55 + 9, v149)) {
                    goto LABEL_478;
                  }
                  if (*v59)
                  {
                    if (v149[0] != *v56) {
                      goto LABEL_478;
                    }
                    *((void *)v55 + 8) = *v59;
                  }
                  v149[0] = 0;
                  int16x8_t v60 = v55 + 88;
                  if (!sub_1000BF078(v9, 1, (uint64_t *)v55 + 11, v149)) {
                    goto LABEL_478;
                  }
                  if (*v60)
                  {
                    if (v149[0] != *v56) {
                      goto LABEL_478;
                    }
                    *((void *)v55 + 10) = *v60;
                  }
                }
                v149[0] = 0;
                int32x4_t v61 = v55 + 136;
                if (sub_1000BF078(v9, 1, (uint64_t *)v55 + 17, v149))
                {
                  if (*v61)
                  {
                    if (v149[0] != *v56) {
                      goto LABEL_478;
                    }
                    *((void *)v55 + 16) = *v61;
                  }
                  if (*((_DWORD *)v55 + 62))
                  {
                    int v69 = *((_DWORD *)v55 + 54);
                    v149[0] = 0;
                    uint64_t v70 = (uint64_t *)(v55 + 184);
                    if (!sub_1000BF078(v9, 1, (uint64_t *)v55 + 23, v149)) {
                      goto LABEL_478;
                    }
                    uint64_t v71 = *v70;
                    if (*v70)
                    {
                      if (v149[0] != v69) {
                        goto LABEL_478;
                      }
                    }
                    if (v71) {
                      *((void *)v55 + 20) = v71;
                    }
                  }
                  else if (v55[244])
                  {
                    int v72 = *((_DWORD *)v55 + 54);
                    v149[0] = 0;
                    int v73 = (uint64_t *)(v55 + 168);
                    if (!sub_1000BF078(v9, 1, (uint64_t *)v55 + 21, v149)) {
                      goto LABEL_478;
                    }
                    int v74 = v72 + 14;
                    if (v72 >= -7) {
                      int v74 = v72 + 7;
                    }
                    uint64_t v75 = *v73;
                    if (*v73)
                    {
                      if (v149[0] != v74 >> 3) {
                        goto LABEL_478;
                      }
                    }
                    if (v75) {
                      *((void *)v55 + 18) = v75;
                    }
                  }
                  if (v55[245])
                  {
                    int v144 = sub_100025D50((unsigned int *)v55);
                    int v76 = *((_DWORD *)v55 + 54);
                    v149[0] = 0;
                    BOOL v77 = (uint64_t *)(v55 + 176);
                    if (!sub_1000BF078(v9, 1, (uint64_t *)v55 + 22, v149)) {
                      goto LABEL_478;
                    }
                    int v78 = v76 + 14;
                    if (v76 >= -7) {
                      int v78 = v76 + 7;
                    }
                    uint64_t v79 = *v77;
                    if (*v77)
                    {
                      if (v149[0] != v78 >> 3) {
                        goto LABEL_478;
                      }
                    }
                    if (v79) {
                      *((void *)v55 + 19) = v79;
                    }
                    v149[0] = 0;
                    unsigned int v80 = (uint64_t *)(v55 + 200);
                    if (!sub_1000BF078(v9, 2, (uint64_t *)v55 + 25, v149)) {
                      goto LABEL_478;
                    }
                    uint64_t v81 = *v80;
                    if (*v80)
                    {
                      if (v149[0] != v144) {
                        goto LABEL_478;
                      }
                    }
                    if (v81) {
                      *((void *)v55 + 24) = v81;
                    }
                  }
                  sub_1000C2F04(6 * *((int *)v55 + 55), v62, v63, v64, v65, v66, v67, v68);
                  *((void *)v55 + 1) = v82;
                  *((void *)v55 + 2) = v82;
                  if (*((int *)v55 + 55) >= 1)
                  {
                    uint64_t v83 = 0;
                    uint64_t v84 = 0;
                    do
                    {
                      if (!sub_1000BEF74(v9, (_WORD *)(*((void *)v55 + 2) + v83))) {
                        break;
                      }
                      if (!sub_1000BEF74(v9, (_WORD *)(*((void *)v55 + 2) + v83 + 2))) {
                        break;
                      }
                      if (!sub_1000BEF74(v9, (_WORD *)(*((void *)v55 + 2) + v83 + 4))) {
                        break;
                      }
                      ++v84;
                      v83 += 6;
                    }
                    while (v84 < *((int *)v55 + 55));
                  }
                  uint64_t v85 = *((void *)v11 + 163);
                  if (sub_1000BEECC(v9, (void *)(v85 + 40))
                    && sub_1000BEECC(v9, (void *)(v85 + 44))
                    && sub_1000BEECC(v9, (void *)(v85 + 48))
                    && sub_1000BEECC(v9, (void *)(v85 + 52))
                    && sub_1000BEECC(v9, (void *)(v85 + 56)))
                  {
                    v149[0] = 0;
                    uint64_t v86 = (void *)(v85 + 32);
                    if (sub_1000BF078(v9, 1, (uint64_t *)(v85 + 32), v149))
                    {
                      if (*v86)
                      {
                        if (v149[0] != *(_DWORD *)(v85 + 40)) {
                          goto LABEL_478;
                        }
                        *(void *)(v85 + 24) = *v86;
                      }
                      if (*v17)
                      {
                        v149[0] = 0;
                        if (!sub_1000BEECC(v9, v11 + 144)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BEECC(v9, v11 + 145)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BEECC(v9, v149)) {
                          goto LABEL_478;
                        }
                        int v147 = v11[144];
                        int v145 = *(unsigned __int16 *)(*((void *)v11 + 143) + 2 * (int)v11[268]);
                        if (!sub_1000BEE7C(v9, v11 + 164)
                          || !sub_1000BEE7C(v9, v11 + 165)
                          || !sub_1000BEE7C(v9, v11 + 166)
                          || !sub_1000BEECC(v9, v11 + 178)
                          || !sub_1000BEE7C(v9, v11 + 179)
                          || !sub_1000BEE7C(v9, v11 + 180)
                          || !sub_1000BEE7C(v9, v11 + 181)
                          || !sub_1000BEECC(v9, v11 + 182)
                          || !sub_1000BEECC(v9, v11 + 183)
                          || !sub_1000BEECC(v9, v11 + 184))
                        {
                          goto LABEL_478;
                        }
                        if (v11[181])
                        {
                          int v87 = v149[0];
                          int v148 = 0;
                          int16x8_t v88 = (uint64_t *)(v11 + 136);
                          if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 68, &v148)) {
                            goto LABEL_478;
                          }
                          int v89 = v87 >= 0 ? v87 : v87 + 3;
                          uint64_t v90 = *v88;
                          if (*v88)
                          {
                            if (v148 != v89 >> 2) {
                              goto LABEL_478;
                            }
                          }
                          if (v90) {
                            *((void *)v11 + 67) = v90;
                          }
                          int v148 = 0;
                          uint64_t v91 = v11 + 140;
                          if (!sub_1000BF078(v9, 2, (uint64_t *)v11 + 70, &v148)) {
                            goto LABEL_478;
                          }
                          if (*v91)
                          {
                            if (v148 != v11[145]) {
                              goto LABEL_478;
                            }
                            *((void *)v11 + 69) = *v91;
                          }
                        }
                        else
                        {
                          int v148 = 0;
                          uint64_t v92 = v11 + 132;
                          if (!sub_1000BF078(v9, 1, (uint64_t *)v11 + 66, &v148)) {
                            goto LABEL_478;
                          }
                          if (*v92)
                          {
                            if (v148 != v149[0]) {
                              goto LABEL_478;
                            }
                            *((void *)v11 + 65) = *v92;
                          }
                        }
                        int v148 = 0;
                        int v93 = v11 + 148;
                        if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 74, &v148)) {
                          goto LABEL_478;
                        }
                        if (*v93)
                        {
                          if (v148 != v147 + 1) {
                            goto LABEL_478;
                          }
                          *((void *)v11 + 73) = *v93;
                        }
                        int v148 = 0;
                        unsigned int v94 = v11 + 152;
                        if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 76, &v148)) {
                          goto LABEL_478;
                        }
                        if (*v94)
                        {
                          if (v148 != v147 + 1) {
                            goto LABEL_478;
                          }
                          *((void *)v11 + 75) = *v94;
                        }
                        int v148 = 0;
                        unint64_t v95 = v11 + 156;
                        if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 78, &v148)) {
                          goto LABEL_478;
                        }
                        if (*v95)
                        {
                          if (v148 != v147 + 1) {
                            goto LABEL_478;
                          }
                          *((void *)v11 + 77) = *v95;
                        }
                        int v148 = 0;
                        unsigned int v96 = (uint64_t *)(v11 + 162);
                        if (!sub_1000BF078(v9, 1, (uint64_t *)v11 + 81, &v148)) {
                          goto LABEL_478;
                        }
                        uint64_t v97 = *v96;
                        if (*v96)
                        {
                          if (v148 != v147 * v145) {
                            goto LABEL_478;
                          }
                        }
                        if (v97) {
                          *((void *)v11 + 80) = v97;
                        }
                      }
                      if (v11[248])
                      {
                        int v98 = v11[268];
                        if (!sub_1000BEECC(v9, v11 + 62)
                          || !sub_1000BEECC(v9, v11 + 63)
                          || !sub_1000BEECC(v9, v11 + 64)
                          || !sub_1000BEE7C(v9, v11 + 65)
                          || !sub_1000BEE7C(v9, v11 + 66)
                          || !sub_1000BEE7C(v9, v11 + 67))
                        {
                          goto LABEL_478;
                        }
                        int v99 = v11[67] ? 2 : v98;
                        if (!sub_1000BEECC(v9, v11 + 72)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BEF1C(v9, (unsigned char *)v11 + 292)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BEE7C(v9, v11 + 112)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BEE7C(v9, v11 + 113)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BEE7C(v9, v11 + 70)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BEE7C(v9, v11 + 114)) {
                          goto LABEL_478;
                        }
                        v149[0] = 0;
                        __int32 v100 = (uint64_t *)(v11 + 126);
                        if (!sub_1000BF078(v9, 1, (uint64_t *)v11 + 63, v149)) {
                          goto LABEL_478;
                        }
                        uint64_t v101 = *v100;
                        if (*v100)
                        {
                          if (v149[0] != v99) {
                            goto LABEL_478;
                          }
                        }
                        if (v101) {
                          *((void *)v11 + 62) = v101;
                        }
                        if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 3864) && !*v17)
                        {
                          if (!sub_1000BEECC(v9, v11 + 144)) {
                            goto LABEL_478;
                          }
                          int v102 = v11[144];
                          v149[0] = 0;
                          uint64_t v103 = v11 + 152;
                          if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 76, v149)) {
                            goto LABEL_478;
                          }
                          if (*v103)
                          {
                            if (v149[0] != v102 + 1) {
                              goto LABEL_478;
                            }
                            *((void *)v11 + 75) = *v103;
                          }
                        }
                      }
                      if (v11[491])
                      {
                        if (!sub_1000BEECC(v9, v11 + 218)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BEECC(v9, v11 + 222)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BEECC(v9, v11 + 230)) {
                          goto LABEL_478;
                        }
                        v149[0] = 0;
                        if (!sub_1000BF078(v9, 1, (uint64_t *)v11 + 105, v149)
                          || *((void *)v11 + 105) && v149[0] != *v140)
                        {
                          goto LABEL_478;
                        }
                        v149[0] = 0;
                        int v104 = v11 + 214;
                        if (!sub_1000BF078(v9, 1, (uint64_t *)v11 + 107, v149)) {
                          goto LABEL_478;
                        }
                        if (*v104)
                        {
                          if (v149[0] != *v140) {
                            goto LABEL_478;
                          }
                          *((void *)v11 + 106) = *v104;
                        }
                        v149[0] = 0;
                        __int16 v105 = v11 + 226;
                        if (!sub_1000BF078(v9, 2, (uint64_t *)v11 + 113, v149)) {
                          goto LABEL_478;
                        }
                        if (*v105)
                        {
                          if (v149[0] != *v140) {
                            goto LABEL_478;
                          }
                          *((void *)v11 + 112) = *v105;
                        }
                      }
                      if (!v11[256] || sub_1000BEECC(v9, v11 + 188) && sub_1000BEECC(v9, v11 + 194))
                      {
                        if (!v11[254]) {
                          goto LABEL_8;
                        }
                        uint64_t v106 = (char *)sub_1000C33A0(120);
                        if (v106)
                        {
                          int v107 = v106;
                          *((void *)v11 + 118) = v106;
                          *((void *)v11 + 216) = sub_1000A4B44;
                          *((void *)v11 + 119) = 0;
                          if (sub_1000BEECC(v9, v106) && sub_1000BEECC(v9, v107 + 4) && sub_1000BEECC(v9, v107 + 8))
                          {
                            v149[0] = 0;
                            uint64_t v108 = v107 + 24;
                            if (sub_1000BF078(v9, 1, (uint64_t *)v107 + 3, v149))
                            {
                              if (*v108)
                              {
                                if (v149[0] != *((_DWORD *)v107 + 2) * *((_DWORD *)v107 + 1)) {
                                  goto LABEL_478;
                                }
                                *((void *)v107 + 2) = *v108;
                              }
                              v149[0] = 0;
                              uint64_t v109 = v107 + 40;
                              if (sub_1000BF078(v9, 1, (uint64_t *)v107 + 5, v149))
                              {
                                if (!*v109) {
                                  goto LABEL_8;
                                }
                                if (v149[0] == *(_DWORD *)v107 * *((_DWORD *)v107 + 1))
                                {
                                  *((void *)v107 + 4) = *v109;
                                  goto LABEL_8;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_478:
                sub_1000BED3C(v9);
LABEL_479:
                sub_100008738((uint64_t)v11);
                return 0;
              }
LABEL_291:
              if (v143) {
                goto LABEL_478;
              }
              goto LABEL_292;
            }
            goto LABEL_288;
          }
        }
        else
        {
          uint64_t v46 = 0;
        }
        *((void *)v11 + 10) = v46;
        goto LABEL_279;
      }
      v149[0] = 0;
      unsigned int v49 = (uint64_t *)(v11 + 10);
      if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 5, v149)) {
        goto LABEL_478;
      }
      uint64_t v50 = *v49;
      if (*v49)
      {
        if (v149[0] != v143) {
          goto LABEL_478;
        }
      }
      if (v50) {
        *((void *)v11 + 4) = v50;
      }
      if (*v146 && !*v120)
      {
        v149[0] = 0;
        uint64_t v53 = (uint64_t *)(v11 + 14);
        if (!sub_1000BF078(v9, 4, (uint64_t *)v11 + 7, v149)) {
          goto LABEL_478;
        }
        uint64_t v51 = *v53;
        if (*v53)
        {
          if (v149[0] != v143) {
            goto LABEL_478;
          }
        }
        if (!v51)
        {
LABEL_287:
          if (!*((void *)v11 + 4))
          {
            if (*((void *)v11 + 6)) {
              goto LABEL_292;
            }
            goto LABEL_291;
          }
LABEL_288:
          if (!v143) {
            goto LABEL_478;
          }
          goto LABEL_292;
        }
      }
      else
      {
        uint64_t v51 = 0;
      }
      *((void *)v11 + 6) = v51;
      goto LABEL_287;
    }
    if (!v28) {
      goto LABEL_478;
    }
LABEL_168:
    if (v121 == 5) {
      goto LABEL_173;
    }
    goto LABEL_172;
  }
LABEL_8:
  sub_1000BED3C(v9);
  if (!*v12)
  {
    sub_100009EE8((uint64_t)v11);
    if (!v13 && !sub_100009F5C((uint64_t)v11)) {
      goto LABEL_479;
    }
    uint64_t v14 = *((void *)v11 + 2);
    *((void *)v11 + 18) = *((void *)v11 + 17);
    uint64_t v15 = *((void *)v11 + 4);
    *((void *)v11 + 12) = v14;
    *((void *)v11 + 13) = v15;
    uint64_t v16 = *((void *)v11 + 6);
    *((void *)v11 + 14) = *((void *)v11 + 8);
    *((void *)v11 + 15) = v16;
    *((void *)v11 + 16) = *((void *)v11 + 10);
    if (!sub_1000088C0((uint64_t)v11) || v11[256] && !sub_10001D040((uint64_t)v11)) {
      goto LABEL_479;
    }
  }
  return v11;
}

uint64_t sub_100010E70(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int16 *)(a1 + 1388);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(a1 + 912))(a1, *(void *)(a1 + 840), *(void *)(a1 + 1544));
  int v4 = result;
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 5296))
  {
    *(_WORD *)(a1 + 1136) = result;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 1792);
    uint64_t result = *(unsigned __int16 *)(v5 + 2 * v2);
    if (result == 0x4000)
    {
      uint64_t result = sub_100015A48(a1, v2);
      uint64_t v5 = *(void *)(a1 + 1792);
    }
    __int16 v6 = result;
    if (v4 < (__int16)result) {
      __int16 v6 = v4;
    }
    *(_WORD *)(v5 + 2 * v2) = v6;
    uint64_t v7 = *(int *)(a1 + 1824);
    if ((int)v7 < *(_DWORD *)(a1 + 1828))
    {
      uint64_t v8 = *(void *)(a1 + 1832);
      *(_DWORD *)(a1 + 1824) = v7 + 1;
      *(_WORD *)(v8 + 2 * v7) = v2;
    }
  }
  return result;
}

uint64_t sub_100010F2C(uint64_t a1, int a2)
{
  if (!*(_DWORD *)(a1 + 1964)) {
    return 0xFFFFFFFFLL;
  }
  int v4 = *(_DWORD *)(a1 + 1100);
  uint64_t v5 = sub_1000C09B0(*(unint64_t **)(a1 + 840), 1, v4, 0xFFFFFFFFLL);
  unsigned int v6 = sub_1000C09B0(*(unint64_t **)(a1 + 848), 1, v4, v5);
  unsigned int v7 = sub_1000C0758(*(_DWORD *)(a1 + 888), v6);
  uint64_t v8 = sub_1000C0758(*(_DWORD *)(a1 + 920), v7);
  if (!a2) {
    return v8;
  }
  uint64_t v9 = sub_1000C0758(*(_DWORD *)(a1 + 872), v8);
  uint64_t v10 = sub_1000C09B0(*(unint64_t **)(a1 + 832), 2, v4, v9);
  uint64_t v11 = sub_1000C09B0(*(unint64_t **)(a1 + 880), 2, v4, v10);
  uint64_t v12 = *(unint64_t **)(a1 + 864);
  int v13 = *(_DWORD *)(a1 + 888) * v4;
  return sub_1000C09B0(v12, 1, v13, v11);
}

uint64_t sub_100011018(uint64_t result)
{
  if (!*(_DWORD *)(result + 1964)) {
    return result;
  }
  int v1 = qword_100101CC0;
  if (qword_100101CC0) {
    int v1 = *(_DWORD *)(qword_100101CC0 + 1864);
  }
  *(_DWORD *)(result + 920) = v1;
  uint64_t v2 = *(unsigned int *)(result + 1100);
  uint64_t v3 = *(void *)(result + 848);
  if ((int)v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v5 = 2 * i;
      *(_WORD *)(*(void *)(result + 880) + v5) = *(unsigned __int8 *)(v3 + i) - *(unsigned __int8 *)(result + 1770);
      *(_WORD *)(*(void *)(result + 832) + v5) = *(unsigned __int16 *)(*(void *)(result + 880) + 2 * i) << *(_DWORD *)(result + 920);
    }
  }
  if (*(int *)(result + 888) >= 1)
  {
    uint64_t v6 = *(unsigned int *)(result + 1100);
    *(_DWORD *)(result + 872) = 0;
    if ((int)v6 >= 1)
    {
      if (v6 <= 7)
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        do
        {
          uint64_t v9 = *(void *)(result + 864);
          *(unsigned char *)(v9 + v7) = *(unsigned char *)v3;
          if (v6 != 1)
          {
            *(unsigned char *)(v9 + v7 + 1) = *(unsigned char *)(v3 + 1);
            if (v6 != 2)
            {
              *(unsigned char *)(v9 + v7 + 2) = *(unsigned char *)(v3 + 2);
              if (v6 != 3)
              {
                *(unsigned char *)(v9 + v7 + 3) = *(unsigned char *)(v3 + 3);
                if (v6 != 4)
                {
                  *(unsigned char *)(v9 + v7 + 4) = *(unsigned char *)(v3 + 4);
                  if (v6 != 5)
                  {
                    uint64_t v10 = v9 + v7;
                    *(unsigned char *)(v10 + 5) = *(unsigned char *)(v3 + 5);
                    if (v6 != 6) {
                      *(unsigned char *)(v10 + 6) = *(unsigned char *)(v3 + 6);
                    }
                  }
                }
              }
            }
          }
          ++v8;
          v7 += v6;
        }
        while (v8 < *(int *)(result + 888));
        goto LABEL_46;
      }
      uint64_t v11 = v6 & 0x7FFFFFF8;
      if (v6 < 0x20)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        while (1)
        {
          uint64_t v14 = *(void *)(result + 864);
          uint64_t v15 = (void *)(v14 + v13 * v6);
          if ((unint64_t)v15 - v3 > 0x1F)
          {
            *uint64_t v15 = *(void *)v3;
            if (v11 != 8)
            {
              v15[1] = *(void *)(v3 + 8);
              if (v11 != 16) {
                v15[2] = *(void *)(v3 + 16);
              }
            }
            uint64_t v16 = v6 & 0x18;
            if (v11 == v6) {
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t v16 = 0;
          }
          uint64_t v17 = v6 - v16;
          int v18 = (unsigned char *)(v14 + v16 + v12);
          uint64_t v19 = (char *)(v3 + v16);
          do
          {
            char v20 = *v19++;
            *v18++ = v20;
            --v17;
          }
          while (v17);
LABEL_21:
          ++v13;
          v12 += v6;
          if (v13 >= *(int *)(result + 888)) {
            goto LABEL_46;
          }
        }
      }
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 16;
      uint64_t v24 = v6 & 0xFFFFFFE0;
      do
      {
        uint64_t v25 = *(void *)(result + 864);
        if ((unint64_t)(v25 + v22 * v6 - v3) >= 0x20)
        {
          uint64_t v31 = (_OWORD *)(v25 + v23);
          uint64_t v32 = v6 & 0xFFFFFFE0;
          int v33 = (long long *)(v3 + 16);
          do
          {
            long long v34 = *v33;
            *(v31 - 1) = *(v33 - 1);
            *uint64_t v31 = v34;
            v33 += 2;
            v31 += 2;
            v32 -= 32;
          }
          while (v32);
          if ((v6 & 0xFFFFFFE0) == v6) {
            goto LABEL_32;
          }
          uint64_t v26 = v6 & 0x7FFFFFE0;
          if ((v6 & 0x18) != 0)
          {
            int v35 = (void *)(v25 + v24);
            uint64_t v36 = v11 - (v6 & 0xFFFFFFE0);
            int v37 = (uint64_t *)(v3 + (v6 & 0xFFFFFFE0));
            do
            {
              uint64_t v38 = *v37++;
              *v35++ = v38;
              v36 -= 8;
            }
            while (v36);
            uint64_t v26 = v6 & 0x7FFFFFF8;
            if (v11 == v6) {
              goto LABEL_32;
            }
          }
        }
        else
        {
          uint64_t v26 = 0;
        }
        uint64_t v27 = v6 - v26;
        uint64_t v28 = (unsigned char *)(v25 + v26 + v21);
        uint64_t v29 = (char *)(v3 + v26);
        do
        {
          char v30 = *v29++;
          *v28++ = v30;
          --v27;
        }
        while (v27);
LABEL_32:
        ++v22;
        v23 += v6;
        v24 += v6;
        v21 += v6;
      }
      while (v22 < *(int *)(result + 888));
    }
  }
LABEL_46:
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1064))
  {
    unint64_t v39 = *(uint64_t (**)(void))(result + 1752);
    if (v39) {
      return v39();
    }
  }
  return result;
}

uint64_t sub_1000112EC(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 1964))
  {
    uint64_t v2 = *(unsigned int *)(result + 1100);
    uint64_t v3 = 848;
    if (!a2) {
      uint64_t v3 = 840;
    }
    uint64_t v4 = *(void *)(result + v3);
    if ((int)v2 >= 1)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v6 = 2 * i;
        *(_WORD *)(*(void *)(result + 880) + v6) = *(unsigned __int8 *)(v4 + i) - *(unsigned __int8 *)(result + 1770);
        *(_WORD *)(*(void *)(result + 832) + v6) = *(unsigned __int16 *)(*(void *)(result + 880) + 2 * i) << *(_DWORD *)(result + 920);
      }
    }
    if (*(int *)(result + 888) >= 1)
    {
      uint64_t v7 = *(unsigned int *)(result + 1100);
      *(_DWORD *)(result + 872) = 0;
      if ((int)v7 >= 1)
      {
        if (v7 <= 7)
        {
          uint64_t v8 = 0;
          uint64_t v9 = 0;
          do
          {
            uint64_t v10 = *(void *)(result + 864);
            *(unsigned char *)(v10 + v8) = *(unsigned char *)v4;
            if (v7 != 1)
            {
              *(unsigned char *)(v10 + v8 + 1) = *(unsigned char *)(v4 + 1);
              if (v7 != 2)
              {
                *(unsigned char *)(v10 + v8 + 2) = *(unsigned char *)(v4 + 2);
                if (v7 != 3)
                {
                  *(unsigned char *)(v10 + v8 + 3) = *(unsigned char *)(v4 + 3);
                  if (v7 != 4)
                  {
                    *(unsigned char *)(v10 + v8 + 4) = *(unsigned char *)(v4 + 4);
                    if (v7 != 5)
                    {
                      uint64_t v11 = v10 + v8;
                      *(unsigned char *)(v11 + 5) = *(unsigned char *)(v4 + 5);
                      if (v7 != 6) {
                        *(unsigned char *)(v11 + 6) = *(unsigned char *)(v4 + 6);
                      }
                    }
                  }
                }
              }
            }
            ++v9;
            v8 += v7;
          }
          while (v9 < *(int *)(result + 888));
          return result;
        }
        uint64_t v12 = v7 & 0x7FFFFFF8;
        if (v7 < 0x20)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          while (1)
          {
            uint64_t v15 = *(void *)(result + 864);
            uint64_t v16 = (void *)(v15 + v14 * v7);
            if ((unint64_t)v16 - v4 > 0x1F)
            {
              *uint64_t v16 = *(void *)v4;
              if (v12 != 8)
              {
                v16[1] = *(void *)(v4 + 8);
                if (v12 != 16) {
                  v16[2] = *(void *)(v4 + 16);
                }
              }
              uint64_t v17 = v7 & 0x18;
              if (v12 == v7) {
                goto LABEL_21;
              }
            }
            else
            {
              uint64_t v17 = 0;
            }
            uint64_t v18 = v7 - v17;
            uint64_t v19 = (unsigned char *)(v15 + v17 + v13);
            char v20 = (char *)(v4 + v17);
            do
            {
              char v21 = *v20++;
              *v19++ = v21;
              --v18;
            }
            while (v18);
LABEL_21:
            ++v14;
            v13 += v7;
            if (v14 >= *(int *)(result + 888)) {
              return result;
            }
          }
        }
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 16;
        uint64_t v25 = v7 & 0xFFFFFFE0;
        do
        {
          uint64_t v26 = *(void *)(result + 864);
          if ((unint64_t)(v26 + v23 * v7 - v4) >= 0x20)
          {
            uint64_t v32 = (_OWORD *)(v26 + v24);
            uint64_t v33 = v7 & 0xFFFFFFE0;
            long long v34 = (long long *)(v4 + 16);
            do
            {
              long long v35 = *v34;
              *(v32 - 1) = *(v34 - 1);
              _OWORD *v32 = v35;
              v34 += 2;
              v32 += 2;
              v33 -= 32;
            }
            while (v33);
            if ((v7 & 0xFFFFFFE0) == v7) {
              goto LABEL_32;
            }
            uint64_t v27 = v7 & 0x7FFFFFE0;
            if ((v7 & 0x18) != 0)
            {
              uint64_t v36 = (void *)(v26 + v25);
              uint64_t v37 = v12 - (v7 & 0xFFFFFFE0);
              uint64_t v38 = (uint64_t *)(v4 + (v7 & 0xFFFFFFE0));
              do
              {
                uint64_t v39 = *v38++;
                *v36++ = v39;
                v37 -= 8;
              }
              while (v37);
              uint64_t v27 = v7 & 0x7FFFFFF8;
              if (v12 == v7) {
                goto LABEL_32;
              }
            }
          }
          else
          {
            uint64_t v27 = 0;
          }
          uint64_t v28 = v7 - v27;
          uint64_t v29 = (unsigned char *)(v26 + v27 + v22);
          char v30 = (char *)(v4 + v27);
          do
          {
            char v31 = *v30++;
            *v29++ = v31;
            --v28;
          }
          while (v28);
LABEL_32:
          ++v23;
          v24 += v7;
          v25 += v7;
          v22 += v7;
        }
        while (v23 < *(int *)(result + 888));
      }
    }
  }
  return result;
}

uint64_t sub_100011598(uint64_t result, uint64_t a2, int a3)
{
  if (!*(_DWORD *)(result + 1964)) {
    return result;
  }
  uint64_t v3 = *(unsigned int *)(result + 1100);
  if (*(_DWORD *)(result + 888))
  {
    uint64_t v4 = *(void *)(result + 864) + *(int *)(result + 872) * (uint64_t)(int)v3;
    uint64_t v5 = v4;
    if (!a3) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2;
    if (!a3) {
      goto LABEL_12;
    }
  }
  if ((int)v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v7 = 2 * i;
      *(_WORD *)(*(void *)(result + 832) + v7) = *(unsigned __int8 *)(v5 + i)
                                                 - *(unsigned __int8 *)(result + 1770)
                                                 - *(_WORD *)(*(void *)(result + 880) + 2 * i)
                                                 + *(_WORD *)(*(void *)(result + 832) + 2 * i);
      *(_WORD *)(*(void *)(result + 880) + v7) = *(unsigned __int16 *)(*(void *)(result + 832) + 2 * i) >> *(_DWORD *)(result + 920);
    }
    uint64_t v8 = *(unsigned int *)(result + 1100);
    if ((int)v8 >= 1)
    {
      for (uint64_t j = 0; j != v8; ++j)
        *(unsigned char *)(*(void *)(result + 840) + j) = *(unsigned char *)(result + 1770)
                                                  + *(_WORD *)(*(void *)(result + 880) + 2 * j);
    }
  }
LABEL_12:
  int v10 = *(_DWORD *)(result + 888);
  if (v10 >= 1)
  {
    if ((int)v3 < 1)
    {
LABEL_28:
      int v25 = *(_DWORD *)(result + 872);
      if (v25 + 1 < v10) {
        int v26 = v25 + 1;
      }
      else {
        int v26 = 0;
      }
      *(_DWORD *)(result + 872) = v26;
      goto LABEL_32;
    }
    uint64_t v11 = 0;
    if (v3 >= 8 && (unint64_t)(v4 - a2) >= 0x20)
    {
      if (v3 < 0x20)
      {
        uint64_t v11 = 0;
        goto LABEL_22;
      }
      uint64_t v11 = v3 & 0x7FFFFFE0;
      uint64_t v12 = (long long *)(a2 + 16);
      uint64_t v13 = (_OWORD *)(v4 + 16);
      uint64_t v14 = v3 & 0xFFFFFFE0;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *uint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 32;
      }
      while (v14);
      if (v11 == v3) {
        goto LABEL_27;
      }
      if ((v3 & 0x18) != 0)
      {
LABEL_22:
        uint64_t v16 = v11;
        uint64_t v11 = v3 & 0xFFFFFFF8;
        uint64_t v17 = (uint64_t *)(a2 + v16);
        uint64_t v18 = (void *)(v4 + v16);
        uint64_t v19 = v16 - v11;
        do
        {
          uint64_t v20 = *v17++;
          *v18++ = v20;
          v19 += 8;
        }
        while (v19);
        if (v11 == v3) {
          goto LABEL_27;
        }
      }
    }
    uint64_t v21 = v3 - v11;
    uint64_t v22 = (unsigned char *)(v4 + v11);
    uint64_t v23 = (char *)(a2 + v11);
    do
    {
      char v24 = *v23++;
      *v22++ = v24;
      --v21;
    }
    while (v21);
LABEL_27:
    int v10 = *(_DWORD *)(result + 888);
    goto LABEL_28;
  }
LABEL_32:
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1064))
  {
    uint64_t v27 = *(uint64_t (**)(void))(result + 1752);
    if (v27) {
      return v27();
    }
  }
  return result;
}

uint64_t sub_100011764(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 1100);
  sub_1000C321C(*(void *)(a1 + 832));
  sub_1000C321C(*(void *)(a1 + 840));
  sub_1000C321C(*(void *)(a1 + 880));
  uint64_t v3 = sub_1000C33A0(2 * v2);
  *(void *)(a1 + 832) = v3;
  if (!v3) {
    return 1;
  }
  uint64_t v4 = sub_1000C33A0(v2);
  *(void *)(a1 + 840) = v4;
  if (!v4) {
    return 1;
  }
  uint64_t v5 = sub_1000C33A0(2 * v2);
  *(void *)(a1 + 880) = v5;
  if (!v5) {
    return 1;
  }
  sub_100005A3C(a1, *(_DWORD *)(a1 + 1296));
  *(void *)(a1 + 912) = *(void *)(a1 + 1616);
  if ((int)v2 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 848);
    uint64_t v8 = *(void *)(a1 + 840);
    if (v2 < 8 || (unint64_t)(v8 - v7) < 0x20) {
      goto LABEL_16;
    }
    if (v2 >= 0x20)
    {
      uint64_t v6 = v2 & 0xFFFFFFE0;
      uint64_t v9 = (long long *)(v7 + 16);
      int v10 = (_OWORD *)(v8 + 16);
      uint64_t v11 = v6;
      do
      {
        long long v12 = *v9;
        *(v10 - 1) = *(v9 - 1);
        *int v10 = v12;
        v9 += 2;
        v10 += 2;
        v11 -= 32;
      }
      while (v11);
      if (v6 == v2) {
        goto LABEL_18;
      }
      if ((v2 & 0x18) == 0)
      {
LABEL_16:
        uint64_t v18 = v2 - v6;
        uint64_t v19 = (unsigned char *)(v8 + v6);
        uint64_t v20 = (char *)(v7 + v6);
        do
        {
          char v21 = *v20++;
          *v19++ = v21;
          --v18;
        }
        while (v18);
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v13 = v6;
    uint64_t v6 = v2 & 0xFFFFFFF8;
    uint64_t v14 = (uint64_t *)(v7 + v13);
    long long v15 = (void *)(v8 + v13);
    uint64_t v16 = v13 - v6;
    do
    {
      uint64_t v17 = *v14++;
      *v15++ = v17;
      v16 += 8;
    }
    while (v16);
    if (v6 != v2) {
      goto LABEL_16;
    }
  }
LABEL_18:
  if (!qword_100101CC0 || *(uint64_t *)(qword_100101CC0 + 216) < 1)
  {
    *(_DWORD *)(a1 + 888) = 0;
    *(void *)(a1 + 864) = 0;
    return 1;
  }
  sub_1000C321C(*(void *)(a1 + 864));
  int v22 = qword_100101CC0;
  if (qword_100101CC0) {
    int v22 = *(_DWORD *)(qword_100101CC0 + 216);
  }
  *(_DWORD *)(a1 + 888) = v22;
  uint64_t v23 = sub_1000C33A0(v22 * (int)v2);
  *(void *)(a1 + 864) = v23;
  if (v23)
  {
    char v24 = *(unsigned char **)(a1 + 848);
    uint64_t v25 = *(unsigned int *)(a1 + 1100);
    *(_DWORD *)(a1 + 872) = 0;
    if (*(int *)(a1 + 888) >= 1 && (int)v25 >= 1)
    {
      if (v25 < 8)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        do
        {
          uint64_t v28 = *(void *)(a1 + 864);
          *(unsigned char *)(v28 + v26) = *v24;
          if (v25 != 1)
          {
            *(unsigned char *)(v28 + v26 + 1) = v24[1];
            if (v25 != 2)
            {
              *(unsigned char *)(v28 + v26 + 2) = v24[2];
              if (v25 != 3)
              {
                *(unsigned char *)(v28 + v26 + 3) = v24[3];
                if (v25 != 4)
                {
                  *(unsigned char *)(v28 + v26 + 4) = v24[4];
                  if (v25 != 5)
                  {
                    uint64_t v29 = v28 + v26;
                    *(unsigned char *)(v29 + 5) = v24[5];
                    if (v25 != 6) {
                      *(unsigned char *)(v29 + 6) = v24[6];
                    }
                  }
                }
              }
            }
          }
          ++v27;
          v26 += v25;
        }
        while (v27 < *(int *)(a1 + 888));
        return 1;
      }
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 16;
      do
      {
        uint64_t v34 = *(void *)(a1 + 864);
        if ((unint64_t)(v34 + v32 * v25 - (void)v24) >= 0x20)
        {
          if (v25 < 0x20)
          {
            uint64_t v36 = 0;
LABEL_47:
            int32x4_t v41 = (uint64_t *)&v24[v36];
            int v42 = (void *)(v34 + v36 + v31);
            uint64_t v43 = v36 - (v25 & 0xFFFFFFF8);
            do
            {
              uint64_t v44 = *v41++;
              *v42++ = v44;
              v43 += 8;
            }
            while (v43);
            uint64_t v35 = v25 & 0x7FFFFFF8;
            if ((v25 & 0xFFFFFFF8) == v25) {
              goto LABEL_38;
            }
            goto LABEL_50;
          }
          uint64_t v37 = (_OWORD *)(v34 + v33);
          uint64_t v38 = v25 & 0xFFFFFFE0;
          uint64_t v39 = (long long *)(v24 + 16);
          do
          {
            long long v40 = *v39;
            *(v37 - 1) = *(v39 - 1);
            *uint64_t v37 = v40;
            v39 += 2;
            v37 += 2;
            v38 -= 32;
          }
          while (v38);
          if ((v25 & 0xFFFFFFE0) == v25) {
            goto LABEL_38;
          }
          uint64_t v36 = v25 & 0x7FFFFFE0;
          uint64_t v35 = v25 & 0xFFFFFFE0;
          if ((v25 & 0x18) != 0) {
            goto LABEL_47;
          }
        }
        else
        {
          uint64_t v35 = 0;
        }
LABEL_50:
        uint64_t v45 = v25 - v35;
        uint64_t v46 = v34 + v35;
        unsigned int v47 = &v24[v35];
        do
        {
          char v48 = *v47++;
          *(unsigned char *)(v46 + v31) = v48;
          ++v46;
          --v45;
        }
        while (v45);
LABEL_38:
        ++v32;
        v33 += v25;
        v31 += v25;
      }
      while (v32 < *(int *)(a1 + 888));
    }
  }
  return 1;
}

double sub_100011AB4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1964))
  {
    sub_1000C321C(*(void *)(a1 + 832));
    sub_1000C321C(*(void *)(a1 + 840));
    sub_1000C321C(*(void *)(a1 + 880));
    sub_1000C321C(*(void *)(a1 + 856));
    sub_1000C321C(*(void *)(a1 + 904));
    sub_1000C321C(*(void *)(a1 + 864));
    *(void *)(a1 + 880) = 0;
    *(void *)(a1 + 904) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 832) = 0u;
    *(void *)(a1 + 864) = 0;
    *(void *)(a1 + 856) = 0;
  }
  return result;
}

uint64_t sub_100011B24(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1964)) {
    return (2 * *(_DWORD *)(a1 + 1100));
  }
  else {
    return 0;
  }
}

uint64_t sub_100011B40(uint64_t a1, char *__dst)
{
  uint64_t result = 0;
  if (__dst)
  {
    if (*(_DWORD *)(a1 + 1964))
    {
      size_t v5 = *(int *)(a1 + 1100);
      memcpy(__dst, *(const void **)(a1 + 840), v5);
      memcpy(&__dst[v5], *(const void **)(a1 + 848), v5);
      return 1;
    }
  }
  return result;
}

uint64_t sub_100011BA4(uint64_t a1, int a2, _WORD *a3)
{
  if (*(__int16 *)(a1 + 1600) == a2)
  {
    if (*(_DWORD *)(a1 + 1612))
    {
      uint64_t v3 = *(unsigned __int16 *)(a1 + 1388);
      if (*(__int16 *)(*(void *)(a1 + 1792) + 2 * v3) > *(__int16 *)(a1 + 1608)) {
        LOWORD(v3) = *(_WORD *)(a1 + 1610);
      }
LABEL_5:
      uint64_t result = 1;
      *a3 = v3;
      return result;
    }
    int v5 = *(_DWORD *)(a1 + 1076);
    if (v5 >= 1)
    {
      unsigned __int16 v6 = 0;
      LOWORD(v3) = -1;
      __int16 v7 = 0x4000;
      do
      {
        if (*(__int16 *)(*(void *)(a1 + 1792) + 2 * v6) < v7 && v6 != *(unsigned __int16 *)(a1 + 1960))
        {
          LOWORD(v3) = v6;
          __int16 v7 = *(_WORD *)(*(void *)(a1 + 1792) + 2 * v6);
        }
        ++v6;
      }
      while (v5 > v6);
      goto LABEL_5;
    }
    uint64_t result = 1;
    *a3 = -1;
  }
  else
  {
    uint64_t result = 0;
    *a3 = -1;
  }
  return result;
}

uint64_t sub_100011C54(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1004)
    && (*(_DWORD *)(a1 + 656) ? (BOOL v2 = qword_100101CC0 == 0) : (BOOL v2 = 1), !v2 && *(_DWORD *)(qword_100101CC0 + 708)))
  {
    return sub_10001DC68(a1);
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 1072);
    if (v4 < 1)
    {
      return 0x4000;
    }
    else
    {
      unsigned __int16 v5 = 0;
      __int16 v6 = 0x4000;
      do
      {
        int v7 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2 * v5);
        if (v7 == 0x4000)
        {
          LOWORD(v7) = sub_100015A48(a1, v5);
          int v4 = *(_DWORD *)(a1 + 1072);
        }
        if ((__int16)v7 < v6) {
          __int16 v6 = v7;
        }
        ++v5;
      }
      while (v4 > v5);
    }
    return v6;
  }
}

uint64_t sub_100011D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(__int16 *)(a1 + 1974);
  if (v8 >= 0x4000)
  {
    uint64_t v10 = *(unsigned __int16 *)(a1 + 1388);
    if (*(_WORD *)(*(void *)(a1 + 1792) + 2 * v10) == 0x4000) {
      sub_100015A48(a1, v10);
    }
    if (!qword_100101CC0) {
      goto LABEL_81;
    }
    if (*(_DWORD *)(qword_100101CC0 + 344))
    {
      if (!*(_DWORD *)(qword_100101CC0 + 348))
      {
        if (*(_DWORD *)(a1 + 1004) && *(_DWORD *)(a1 + 656) && *(_DWORD *)(qword_100101CC0 + 708))
        {
          sub_10001DC68(a1);
        }
        else
        {
          int v45 = *(_DWORD *)(a1 + 1072);
          if (v45 >= 1)
          {
            for (unsigned __int16 i = 0; i < v45; ++i)
            {
              if (*(_WORD *)(*(void *)(a1 + 1792) + 2 * i) == 0x4000)
              {
                sub_100015A48(a1, i);
                int v45 = *(_DWORD *)(a1 + 1072);
              }
            }
          }
        }
      }
      uint64_t v11 = *(unsigned int *)(a1 + 1076);
      double v12 = 0.0;
      double v13 = 0.0;
      double v14 = 0.0;
      if ((int)v11 < 1) {
        goto LABEL_32;
      }
      long long v15 = *(int16x8_t **)(a1 + 1792);
      if (v11 >= 0x10)
      {
        int32x4_t v24 = 0uLL;
        uint64_t v16 = v11 & 0xFFFFFFF0;
        v25.i64[0] = 0x4000400040004000;
        v25.i64[1] = 0x4000400040004000;
        uint64_t v26 = v15 + 1;
        v27.i64[0] = 0x100000001;
        v27.i64[1] = 0x100000001;
        uint64_t v28 = v16;
        int32x4_t v29 = 0uLL;
        int32x4_t v30 = 0uLL;
        int32x4_t v31 = 0uLL;
        int32x4_t v32 = 0uLL;
        int32x4_t v33 = 0uLL;
        int32x4_t v34 = 0uLL;
        int32x4_t v35 = 0uLL;
        do
        {
          int16x8_t v36 = v26[-1];
          int8x16_t v37 = (int8x16_t)vcgtq_s16(v25, v36);
          int8x16_t v38 = (int8x16_t)vcgtq_s16(v25, *v26);
          int32x4_t v33 = vaddq_s32(v33, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16((uint16x8_t)v37), v27));
          int32x4_t v32 = vaddq_s32(v32, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v37.i8), v27));
          int32x4_t v35 = vaddq_s32(v35, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16((uint16x8_t)v38), v27));
          int32x4_t v34 = vaddq_s32(v34, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v38.i8), v27));
          int16x8_t v39 = (int16x8_t)vandq_s8((int8x16_t)v36, v37);
          int16x8_t v40 = (int16x8_t)vandq_s8(*(int8x16_t *)v26, v38);
          int32x4_t v29 = vaddw_high_s16(v29, v39);
          int32x4_t v24 = vaddw_s16(v24, *(int16x4_t *)v39.i8);
          int32x4_t v31 = vaddw_high_s16(v31, v40);
          int32x4_t v30 = vaddw_s16(v30, *(int16x4_t *)v40.i8);
          v26 += 2;
          v28 -= 16;
        }
        while (v28);
        int v18 = vaddvq_s32(vaddq_s32(vaddq_s32(v34, v32), vaddq_s32(v35, v33)));
        int v17 = vaddvq_s32(vaddq_s32(vaddq_s32(v30, v24), vaddq_s32(v31, v29)));
        if (v16 == v11)
        {
LABEL_31:
          double v14 = (double)v17;
          double v13 = (double)v18;
LABEL_32:
          if (qword_100101CC0) {
            double v12 = *(double *)(qword_100101CC0 + 328);
          }
          int v23 = (int)(v14 * v12 / v13);
LABEL_77:
          int v62 = *(__int16 *)(a1 + 1972) + (__int16)v23;
          int v8 = v62 & ~(v62 >> 31);
          *(_WORD *)(a1 + 1974) = v8;
          return (__int16)v8;
        }
      }
      else
      {
        uint64_t v16 = 0;
        int v17 = 0;
        int v18 = 0;
      }
      uint64_t v41 = v11 - v16;
      int v42 = &v15->i16[v16];
      do
      {
        int v44 = *v42++;
        int v43 = v44;
        if (v44 >= 0x4000) {
          int v43 = 0;
        }
        else {
          ++v18;
        }
        v17 += v43;
        --v41;
      }
      while (v41);
      goto LABEL_31;
    }
    if (!*(_DWORD *)(qword_100101CC0 + 712))
    {
LABEL_81:
      if (*(_DWORD *)(a1 + 1856))
      {
        uint64_t v22 = *(unsigned __int16 *)(a1 + 1960);
        int v23 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2 * v22);
        if (v23 == 0x4000) {
          LOWORD(v23) = sub_100015A48(a1, v22);
        }
      }
      else
      {
        LOWORD(v23) = 0x3FFF;
      }
      goto LABEL_77;
    }
    sub_1000C2F04(0x194uLL, v10, a3, a4, a5, a6, a7, a8);
    uint64_t v20 = v19;
    if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 348))
    {
      if (*(_DWORD *)(a1 + 1612))
      {
        __int16 v21 = *(_WORD *)(a1 + 1608);
        goto LABEL_60;
      }
      int v50 = *(_DWORD *)(a1 + 1076);
      if (v50 >= 1)
      {
        unsigned __int16 v51 = 0;
        __int16 v21 = 0x4000;
        do
        {
          if (*(__int16 *)(*(void *)(a1 + 1792) + 2 * v51) < v21
            && *(unsigned __int16 *)(a1 + 1960) != v51
            && *(unsigned __int16 *)(a1 + 1388) != v51)
          {
            __int16 v21 = *(_WORD *)(*(void *)(a1 + 1792) + 2 * v51);
          }
          ++v51;
        }
        while (v50 > v51);
        goto LABEL_60;
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 1004) && qword_100101CC0 && *(_DWORD *)(a1 + 656) && *(_DWORD *)(qword_100101CC0 + 708))
      {
        __int16 v21 = sub_10001DC68(a1);
        goto LABEL_60;
      }
      int v47 = *(_DWORD *)(a1 + 1072);
      if (v47 >= 1)
      {
        unsigned __int16 v48 = 0;
        __int16 v21 = 0x4000;
        do
        {
          int v49 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2 * v48);
          if (v49 == 0x4000)
          {
            LOWORD(v49) = sub_100015A48(a1, v48);
            int v47 = *(_DWORD *)(a1 + 1072);
          }
          if ((__int16)v49 < v21) {
            __int16 v21 = v49;
          }
          ++v48;
        }
        while (v47 > v48);
LABEL_60:
        int v52 = *(_DWORD *)(a1 + 1076);
        if (v52 <= 1)
        {
          int v54 = 1;
        }
        else
        {
          uint64_t v53 = 1;
          int v54 = 1;
          do
          {
            int v55 = *(__int16 *)(*(void *)(a1 + 1792) + 2 * v53);
            if (v55 < 0x4000)
            {
              int v56 = v55 - v21;
              if (v56 >= 100) {
                int v56 = 100;
              }
              ++*(_DWORD *)(v20 + 4 * v56);
              ++v54;
              int v52 = *(_DWORD *)(a1 + 1076);
            }
            ++v53;
          }
          while (v53 < v52);
        }
        int v57 = v54;
        if (qword_100101CC0) {
          uint64_t v58 = *(void *)(qword_100101CC0 + 336);
        }
        else {
          LODWORD(v58) = 0;
        }
        uint64_t v59 = 0;
        int v60 = 0;
        int v61 = (int)v58 * v57 / 100;
        while (1)
        {
          v60 += *(_DWORD *)(v20 + 4 * v59);
          if (v60 >= v61) {
            break;
          }
          if (++v59 == 100) {
            goto LABEL_76;
          }
        }
        *(_WORD *)(a1 + 1974) = v21 + v59;
LABEL_76:
        sub_1000C321C(v20);
        LOWORD(v23) = *(_WORD *)(a1 + 1974);
        goto LABEL_77;
      }
    }
    __int16 v21 = 0x4000;
    goto LABEL_60;
  }
  return (__int16)v8;
}

uint64_t sub_100012190(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1856))
  {
    uint64_t v1 = *(unsigned __int16 *)(a1 + 1960);
    int v2 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2 * v1);
    if (v2 == 0x4000) {
      return sub_100015A48(a1, v1);
    }
  }
  else
  {
    LOWORD(v2) = 0x3FFF;
  }
  return (__int16)v2;
}

uint64_t sub_1000121BC(uint64_t a1, unsigned int a2)
{
  if (*(unsigned __int16 *)(a1 + 1388) == a2) {
    return *(__int16 *)(*(void *)(a1 + 1792) + 2 * a2);
  }
  else {
    return (*(uint64_t (**)(void))(a1 + 1704))();
  }
}

uint64_t sub_1000121DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 1720))();
}

uint64_t sub_1000121E4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 1072) <= (int)a2)
  {
    int v5 = 1;
  }
  else if (*(_DWORD *)(a1 + 1176))
  {
    int v4 = (_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    int v5 = v4[1] - *v4;
    if (v5 < 1) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v9 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    int v5 = v9[1] - *v9;
    if (v5 < 1)
    {
LABEL_12:
      __int16 v7 = 0x4000;
      goto LABEL_13;
    }
  }
  uint64_t v6 = 0;
  __int16 v7 = 0x4000;
  do
  {
    int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 1720))(a1, a2, v6);
    if (v8 < v7) {
      __int16 v7 = v8;
    }
    uint64_t v6 = (v6 + 1);
  }
  while (v5 != v6);
LABEL_13:
  unsigned int v10 = *(__int16 *)(a1 + 1136);
  if (v7 >= (int)v10) {
    return v10;
  }
  else {
    return v7;
  }
}

uint64_t sub_1000122B8(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 1544);
  uint64_t v7 = sub_1000041EC(a1, a2, a3);
  uint64_t v8 = sub_10000507C(a1, a2, a3);
  unsigned int v9 = *(_DWORD *)sub_100005290(a1, a2, a3);
  uint64_t v10 = *(unsigned int *)(a1 + 1104);
  if ((int)v10 >= 1)
  {
    if (v10 < 8)
    {
      uint64_t v11 = *(unsigned int *)(a1 + 1104);
      goto LABEL_15;
    }
    if (v10 >= 0x20)
    {
      uint64_t v12 = v10 & 0x7FFFFFE0;
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = (int32x4_t)v9;
      uint64_t v15 = v10 - 1;
      uint64_t v16 = v10 & 0xFFFFFFE0;
      int32x4_t v17 = 0uLL;
      int32x4_t v18 = 0uLL;
      int32x4_t v19 = 0uLL;
      int32x4_t v20 = 0uLL;
      int32x4_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      do
      {
        uint64_t v23 = v7 + v15;
        int8x16_t v24 = vrev64q_s8(*(int8x16_t *)(v23 - 15));
        uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v24, 8uLL);
        int8x16_t v26 = vrev64q_s8(*(int8x16_t *)(v23 - 31));
        uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v26, 8uLL);
        uint64_t v28 = v6 + v15;
        int8x16_t v29 = vrev64q_s8(*(int8x16_t *)(v28 - 15));
        uint8x16_t v30 = (uint8x16_t)vextq_s8(v29, v29, 8uLL);
        int8x16_t v31 = vrev64q_s8(*(int8x16_t *)(v28 - 31));
        uint8x16_t v32 = (uint8x16_t)vextq_s8(v31, v31, 8uLL);
        int16x8_t v33 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v30.i8);
        int16x8_t v34 = (int16x8_t)vsubl_high_u8(v25, v30);
        int16x8_t v35 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v32.i8);
        int16x8_t v36 = (int16x8_t)vsubl_high_u8(v27, v32);
        uint64_t v37 = v8 + 2 * v15;
        int8x16_t v38 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 14));
        uint16x8_t v39 = (uint16x8_t)vextq_s8(v38, v38, 8uLL);
        int8x16_t v40 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 30));
        uint16x8_t v41 = (uint16x8_t)vextq_s8(v40, v40, 8uLL);
        int8x16_t v42 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 46));
        uint16x8_t v43 = (uint16x8_t)vextq_s8(v42, v42, 8uLL);
        int8x16_t v44 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 62));
        uint16x8_t v45 = (uint16x8_t)vextq_s8(v44, v44, 8uLL);
        int32x4_t v18 = vmlaq_s32(v18, vmull_high_s16(v34, v34), (int32x4_t)vmovl_high_u16(v41));
        int32x4_t v17 = vmlaq_s32(v17, vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v34.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v41.i8));
        int32x4_t v13 = vmlaq_s32(v13, vmull_high_s16(v33, v33), (int32x4_t)vmovl_high_u16(v39));
        int32x4_t v14 = vmlaq_s32(v14, vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8));
        int32x4_t v22 = vmlaq_s32(v22, vmull_high_s16(v36, v36), (int32x4_t)vmovl_high_u16(v45));
        int32x4_t v21 = vmlaq_s32(v21, vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v45.i8));
        int32x4_t v20 = vmlaq_s32(v20, vmull_high_s16(v35, v35), (int32x4_t)vmovl_high_u16(v43));
        int32x4_t v19 = vmlaq_s32(v19, vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v35.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v43.i8));
        v15 -= 32;
        v16 -= 32;
      }
      while (v16);
      unsigned int v9 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
      if (v12 == v10) {
        return (__int16)(((v9 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
      }
                                      + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
      if ((v10 & 0x18) == 0)
      {
        uint64_t v11 = v10 & 0x1F;
LABEL_15:
        unint64_t v53 = v11 + 1;
        do
        {
          uint64_t v54 = (v53 - 2);
          v9 += (*(unsigned __int8 *)(v7 + v54) - *(unsigned __int8 *)(v6 + v54))
              * (*(unsigned __int8 *)(v7 + v54) - *(unsigned __int8 *)(v6 + v54))
              * *(unsigned __int16 *)(v8 + 2 * v54);
          --v53;
        }
        while (v53 > 1);
        return (__int16)(((v9 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                      + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v11 = v10 & 7;
    int32x4_t v46 = 0uLL;
    int32x4_t v47 = (int32x4_t)v9;
    uint64_t v48 = ~v12 + v10;
    uint64_t v49 = v12 - (v10 & 0xFFFFFFF8);
    do
    {
      int16x8_t v50 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(v7 - 7 + v48)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(v6 - 7 + v48)));
      int8x16_t v51 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v8 - 14 + 2 * v48));
      uint16x8_t v52 = (uint16x8_t)vextq_s8(v51, v51, 8uLL);
      int32x4_t v46 = vmlaq_s32(v46, vmull_high_s16(v50, v50), (int32x4_t)vmovl_high_u16(v52));
      int32x4_t v47 = vmlaq_s32(v47, vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v50.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8));
      v48 -= 8;
      v49 += 8;
    }
    while (v49);
    unsigned int v9 = vaddvq_s32(vaddq_s32(v47, v46));
    if ((v10 & 0x7FFFFFF8) != v10) {
      goto LABEL_15;
    }
  }
  return (__int16)(((v9 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_100012590(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 1544);
  uint64_t v7 = sub_1000041EC(a1, a2, a3);
  uint64_t v8 = sub_100004FF8(a1, a2, a3);
  unsigned int v9 = *(_DWORD *)sub_100005290(a1, a2, a3);
  uint64_t v11 = *(unsigned int *)(a1 + 1104);
  if ((int)v11 >= 1)
  {
    if (v11 < 8)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 1104);
      goto LABEL_15;
    }
    if (v11 >= 0x20)
    {
      uint64_t v13 = v11 & 0x7FFFFFE0;
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = (int32x4_t)v9;
      uint64_t v16 = v11 - 1;
      uint64_t v17 = v11 & 0xFFFFFFE0;
      int32x4_t v10 = 0uLL;
      int32x4_t v18 = 0uLL;
      int32x4_t v19 = 0uLL;
      int32x4_t v20 = 0uLL;
      int32x4_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      do
      {
        uint64_t v23 = v7 + v16;
        int8x16_t v24 = vrev64q_s8(*(int8x16_t *)(v23 - 15));
        uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v24, 8uLL);
        int8x16_t v26 = vrev64q_s8(*(int8x16_t *)(v23 - 31));
        uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v26, 8uLL);
        uint64_t v28 = v6 + v16;
        int8x16_t v29 = vrev64q_s8(*(int8x16_t *)(v28 - 15));
        uint8x16_t v30 = (uint8x16_t)vextq_s8(v29, v29, 8uLL);
        int8x16_t v31 = vrev64q_s8(*(int8x16_t *)(v28 - 31));
        uint8x16_t v32 = (uint8x16_t)vextq_s8(v31, v31, 8uLL);
        int16x8_t v33 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v30.i8);
        int16x8_t v34 = (int16x8_t)vsubl_high_u8(v25, v30);
        int16x8_t v35 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v32.i8);
        int16x8_t v36 = (int16x8_t)vsubl_high_u8(v27, v32);
        uint64_t v37 = v8 + v16;
        int8x16_t v38 = *(int8x16_t *)(v37 - 15);
        int8x16_t v39 = *(int8x16_t *)(v37 - 31);
        int32x4_t v18 = vmlaq_s32(v18, vmull_high_s16(v34, v34), (int32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1000F4850));
        int32x4_t v10 = vmlaq_s32(v10, vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v34.i8), (int32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1000F4860));
        int32x4_t v14 = vmlaq_s32(v14, vmull_high_s16(v33, v33), (int32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1000F4870));
        int32x4_t v15 = vmlaq_s32(v15, vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8), (int32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1000F4880));
        int32x4_t v22 = vmlaq_s32(v22, vmull_high_s16(v36, v36), (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1000F4850));
        int32x4_t v21 = vmlaq_s32(v21, vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8), (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1000F4860));
        int32x4_t v20 = vmlaq_s32(v20, vmull_high_s16(v35, v35), (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1000F4870));
        int32x4_t v19 = vmlaq_s32(v19, vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v35.i8), (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1000F4880));
        v16 -= 32;
        v17 -= 32;
      }
      while (v17);
      unsigned int v9 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v15), vaddq_s32(v21, v10)), vaddq_s32(vaddq_s32(v20, v14), vaddq_s32(v22, v18))));
      if (v13 == v11) {
        return (__int16)(((v9 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
      }
                                      + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
      if ((v11 & 0x18) == 0)
      {
        uint64_t v12 = v11 & 0x1F;
LABEL_15:
        unint64_t v46 = v12 + 1;
        do
        {
          uint64_t v47 = (v46 - 2);
          v9 += (*(unsigned __int8 *)(v7 + v47) - *(unsigned __int8 *)(v6 + v47))
              * (*(unsigned __int8 *)(v7 + v47) - *(unsigned __int8 *)(v6 + v47))
              * *(unsigned __int8 *)(v8 + v47);
          --v46;
        }
        while (v46 > 1);
        return (__int16)(((v9 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                      + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v12 = v11 & 7;
    int32x4_t v40 = 0uLL;
    int32x4_t v41 = (int32x4_t)v9;
    uint64_t v42 = ~v13 + v11;
    uint64_t v43 = v13 - (v11 & 0xFFFFFFF8);
    do
    {
      int16x8_t v44 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(v7 - 7 + v42)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(v6 - 7 + v42)));
      *(int8x8_t *)v10.i8 = vrev64_s8(*(int8x8_t *)(v8 - 7 + v42));
      int32x4_t v45 = (int32x4_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_1000F4800);
      int32x4_t v10 = (int32x4_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_1000F4810);
      int32x4_t v40 = vmlaq_s32(v40, vmull_high_s16(v44, v44), v45);
      int32x4_t v41 = vmlaq_s32(v41, vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8), v10);
      v42 -= 8;
      v43 += 8;
    }
    while (v43);
    unsigned int v9 = vaddvq_s32(vaddq_s32(v41, v40));
    if ((v11 & 0x7FFFFFF8) != v11) {
      goto LABEL_15;
    }
  }
  return (__int16)(((v9 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_100012878(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1296);
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 != v4)
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      uint64_t v6 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
      unsigned int v7 = *v6;
      int v8 = v6[1];
    }
    else
    {
      uint64_t v11 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      unsigned int v7 = *v11;
      int v8 = v11[1];
    }
    int v10 = v8 - v7;
    if (*(_DWORD *)(a1 + 2012)) {
      unsigned int v7 = a2;
    }
    uint64_t v12 = *(int *)(a1 + 1120) * (uint64_t)(int)v7;
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      uint64_t v9 = *(void *)(a1 + 96) + v12;
      if (v2 == 3) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 16) + v12;
      if (v2 == 3)
      {
LABEL_20:
        int v13 = v10 - 1;
        if (v10 >= 1) {
          goto LABEL_21;
        }
LABEL_65:
        int v23 = 0x40000000;
        return (__int16)(((v23 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                      + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
      }
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v5;
    int v10 = 1;
    if (v2 == 3) {
      goto LABEL_20;
    }
  }
  if (v2 != 4)
  {
    a2 = 0;
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 2012)) {
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    int v13 = v10 - 1;
    if (v10 >= 1) {
      goto LABEL_21;
    }
    goto LABEL_65;
  }
  a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
  int v13 = v10 - 1;
  if (v10 < 1) {
    goto LABEL_65;
  }
LABEL_21:
  uint64_t v14 = *(unsigned int *)(a1 + 1104);
  BOOL v15 = v2 == 4;
  BOOL v16 = v2 == 4;
  uint64_t v17 = (int *)(*(void *)(a1 + 1240) + 4 * (int)a2);
  uint64_t v18 = *(int *)(a1 + 1100);
  if (v15) {
    uint64_t v19 = *(int *)(a1 + 1100);
  }
  else {
    uint64_t v19 = 0;
  }
  if ((int)v14 <= 0)
  {
    int v23 = 0x40000000;
    do
    {
      if (*v17 < v23) {
        int v23 = *v17;
      }
      v17 += v16;
      --v10;
    }
    while (v10);
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 1544);
    uint64_t v21 = *(void *)(a1 + 1208) + 2 * (int)(*(_DWORD *)(a1 + 1124) * a2);
    if (v14 <= 7)
    {
      uint64_t v22 = v14 + 1;
      int v23 = 0x40000000;
      do
      {
        int v24 = *v17;
        uint64_t v25 = v22;
        do
        {
          uint64_t v26 = (v25 - 2);
          v24 += (*(unsigned __int8 *)(v9 + v26) - *(unsigned __int8 *)(v20 + v26))
               * (*(unsigned __int8 *)(v9 + v26) - *(unsigned __int8 *)(v20 + v26))
               * *(unsigned __int16 *)(v21 + 2 * v26);
          --v25;
        }
        while (v25 > 1);
        if (v24 < v23) {
          int v23 = v24;
        }
        v9 += v18;
        v17 += v16;
        v21 += 2 * v19;
        BOOL v27 = v13-- <= 0;
      }
      while (!v27);
      return (__int16)(((v23 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                    + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
    }
    if (!((unint64_t)(v14 - 1) >> 32))
    {
      int v23 = 0x40000000;
      while (1)
      {
        int v28 = *v17;
        if (v14 < 0x20) {
          break;
        }
        int32x4_t v30 = 0uLL;
        int32x4_t v31 = (int32x4_t)*v17;
        uint64_t v32 = v14 & 0xFFFFFFE0;
        uint64_t v33 = v14 - 1;
        int32x4_t v34 = 0uLL;
        int32x4_t v35 = 0uLL;
        int32x4_t v36 = 0uLL;
        int32x4_t v37 = 0uLL;
        int32x4_t v38 = 0uLL;
        int32x4_t v39 = 0uLL;
        do
        {
          uint64_t v40 = v9 + v33;
          int8x16_t v41 = vrev64q_s8(*(int8x16_t *)(v40 - 15));
          uint8x16_t v42 = (uint8x16_t)vextq_s8(v41, v41, 8uLL);
          int8x16_t v43 = vrev64q_s8(*(int8x16_t *)(v40 - 31));
          uint8x16_t v44 = (uint8x16_t)vextq_s8(v43, v43, 8uLL);
          uint64_t v45 = v20 + v33;
          int8x16_t v46 = vrev64q_s8(*(int8x16_t *)(v45 - 15));
          uint8x16_t v47 = (uint8x16_t)vextq_s8(v46, v46, 8uLL);
          int8x16_t v48 = vrev64q_s8(*(int8x16_t *)(v45 - 31));
          uint8x16_t v49 = (uint8x16_t)vextq_s8(v48, v48, 8uLL);
          int16x8_t v50 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v47.i8);
          int16x8_t v51 = (int16x8_t)vsubl_high_u8(v42, v47);
          int16x8_t v52 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v44.i8, *(uint8x8_t *)v49.i8);
          int16x8_t v53 = (int16x8_t)vsubl_high_u8(v44, v49);
          uint64_t v54 = v21 + 2 * v33;
          int8x16_t v55 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v54 - 14));
          uint16x8_t v56 = (uint16x8_t)vextq_s8(v55, v55, 8uLL);
          int8x16_t v57 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v54 - 30));
          uint16x8_t v58 = (uint16x8_t)vextq_s8(v57, v57, 8uLL);
          int8x16_t v59 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v54 - 46));
          uint16x8_t v60 = (uint16x8_t)vextq_s8(v59, v59, 8uLL);
          int8x16_t v61 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v54 - 62));
          uint16x8_t v62 = (uint16x8_t)vextq_s8(v61, v61, 8uLL);
          int32x4_t v35 = vmlaq_s32(v35, vmull_high_s16(v51, v51), (int32x4_t)vmovl_high_u16(v58));
          int32x4_t v34 = vmlaq_s32(v34, vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v58.i8));
          int32x4_t v30 = vmlaq_s32(v30, vmull_high_s16(v50, v50), (int32x4_t)vmovl_high_u16(v56));
          int32x4_t v31 = vmlaq_s32(v31, vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v50.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v56.i8));
          int32x4_t v39 = vmlaq_s32(v39, vmull_high_s16(v53, v53), (int32x4_t)vmovl_high_u16(v62));
          int32x4_t v38 = vmlaq_s32(v38, vmull_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v53.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v62.i8));
          int32x4_t v37 = vmlaq_s32(v37, vmull_high_s16(v52, v52), (int32x4_t)vmovl_high_u16(v60));
          int32x4_t v36 = vmlaq_s32(v36, vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v52.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v60.i8));
          v33 -= 32;
          v32 -= 32;
        }
        while (v32);
        int v28 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v36, v31), vaddq_s32(v38, v34)), vaddq_s32(vaddq_s32(v37, v30), vaddq_s32(v39, v35))));
        if ((v14 & 0x7FFFFFE0) == v14) {
          goto LABEL_41;
        }
        uint64_t v29 = v14 & 0x7FFFFFE0;
        uint64_t v63 = v14 & 0x1F;
        if ((v14 & 0x18) != 0) {
          goto LABEL_50;
        }
LABEL_53:
        uint64_t v71 = v63 + 1;
        do
        {
          uint64_t v72 = (v71 - 2);
          v28 += (*(unsigned __int8 *)(v9 + v72) - *(unsigned __int8 *)(v20 + v72))
               * (*(unsigned __int8 *)(v9 + v72) - *(unsigned __int8 *)(v20 + v72))
               * *(unsigned __int16 *)(v21 + 2 * v72);
          --v71;
        }
        while (v71 > 1);
LABEL_41:
        if (v28 < v23) {
          int v23 = v28;
        }
        v9 += v18;
        v17 += v16;
        v21 += 2 * v19;
        BOOL v27 = v13-- <= 0;
        if (v27) {
          return (__int16)(((v23 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
        }
                                        + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
      }
      uint64_t v29 = 0;
LABEL_50:
      int32x4_t v64 = 0uLL;
      int32x4_t v65 = (int32x4_t)v28;
      uint64_t v66 = v14 - 1 - v29;
      uint64_t v67 = v29 - (v14 & 0xFFFFFFF8);
      do
      {
        int16x8_t v68 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(v9 - 7 + v66)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(v20 - 7 + v66)));
        int8x16_t v69 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v21 - 14 + 2 * v66));
        uint16x8_t v70 = (uint16x8_t)vextq_s8(v69, v69, 8uLL);
        int32x4_t v64 = vmlaq_s32(v64, vmull_high_s16(v68, v68), (int32x4_t)vmovl_high_u16(v70));
        int32x4_t v65 = vmlaq_s32(v65, vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v68.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v70.i8));
        v66 -= 8;
        v67 += 8;
      }
      while (v67);
      int v28 = vaddvq_s32(vaddq_s32(v65, v64));
      uint64_t v63 = v14 & 7;
      if ((v14 & 0xFFFFFFF8) == v14) {
        goto LABEL_41;
      }
      goto LABEL_53;
    }
    uint64_t v73 = v14 + 1;
    int v23 = 0x40000000;
    do
    {
      int v74 = *v17;
      uint64_t v75 = v73;
      do
      {
        uint64_t v76 = (v75 - 2);
        v74 += (*(unsigned __int8 *)(v9 + v76) - *(unsigned __int8 *)(v20 + v76))
             * (*(unsigned __int8 *)(v9 + v76) - *(unsigned __int8 *)(v20 + v76))
             * *(unsigned __int16 *)(v21 + 2 * v76);
        --v75;
      }
      while (v75 > 1);
      if (v74 < v23) {
        int v23 = v74;
      }
      v9 += v18;
      v17 += v16;
      v21 += 2 * v19;
      BOOL v27 = v13-- <= 0;
    }
    while (!v27);
  }
  return (__int16)(((v23 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_100012D50(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 != v4)
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      uint64_t v6 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
      unsigned int v7 = *v6;
      int v8 = v6[1];
    }
    else
    {
      uint64_t v12 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      unsigned int v7 = *v12;
      int v8 = v12[1];
    }
    int v10 = v8 - v7;
    if (*(_DWORD *)(a1 + 2012)) {
      unsigned int v7 = a2;
    }
    uint64_t v13 = *(int *)(a1 + 1120) * (uint64_t)(int)v7;
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      uint64_t v9 = *(void *)(a1 + 96) + v13;
      int v11 = *(_DWORD *)(a1 + 1296);
      if (v11 == 3) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 16) + v13;
      int v11 = *(_DWORD *)(a1 + 1296);
      if (v11 == 3)
      {
LABEL_20:
        int v14 = v10 - 1;
        if (v10 >= 1) {
          goto LABEL_21;
        }
LABEL_67:
        unsigned int v22 = 0x40000000;
        return (__int16)(((v22 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                      + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
      }
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v5;
    int v10 = 1;
    int v11 = *(_DWORD *)(a1 + 1296);
    if (v11 == 3) {
      goto LABEL_20;
    }
  }
  if (v11 != 4)
  {
    a2 = 0;
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 2012)) {
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    int v14 = v10 - 1;
    if (v10 >= 1) {
      goto LABEL_21;
    }
    goto LABEL_67;
  }
  a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
  int v14 = v10 - 1;
  if (v10 < 1) {
    goto LABEL_67;
  }
LABEL_21:
  uint64_t v15 = *(unsigned int *)(a1 + 1104);
  uint64_t v16 = *(void *)(a1 + 1240);
  uint64_t v17 = (int *)(v16 + 4 * (int)a2);
  if ((int)v15 <= 0)
  {
    if (v10 >= 8)
    {
      uint64_t v64 = v10;
      uint64_t v65 = v10 & 0xFFFFFFF8;
      v14 -= v65;
      v17 += v65;
      uint64_t v66 = (int32x4_t *)(v16 + 4 * (int)a2 + 16);
      v67.i64[0] = 0x4000000040000000;
      v67.i64[1] = 0x4000000040000000;
      uint64_t v68 = v65;
      v69.i64[0] = 0x4000000040000000;
      v69.i64[1] = 0x4000000040000000;
      do
      {
        int32x4_t v67 = vminq_s32(v66[-1], v67);
        int32x4_t v69 = vminq_s32(*v66, v69);
        v66 += 2;
        v68 -= 8;
      }
      while (v68);
      unsigned int v22 = vminvq_s32(vminq_s32(v67, v69));
      if (v65 == v64) {
        return (__int16)(((v22 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
      }
                                      + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
    }
    else
    {
      unsigned int v22 = 0x40000000;
    }
    int v70 = v14 + 1;
    do
    {
      signed int v72 = *v17++;
      unsigned int v71 = v72;
      if (v72 < (int)v22) {
        unsigned int v22 = v71;
      }
      --v70;
    }
    while (v70);
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 1544);
    uint64_t v19 = *(int *)(a1 + 1100);
    uint64_t v20 = *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)a2;
    if (v15 <= 7)
    {
      uint64_t v21 = v15 + 1;
      unsigned int v22 = 0x40000000;
      do
      {
        signed int v23 = *v17;
        uint64_t v24 = v21;
        do
        {
          uint64_t v25 = (v24 - 2);
          v23 += (*(unsigned __int8 *)(v9 + v25) - *(unsigned __int8 *)(v18 + v25))
               * (*(unsigned __int8 *)(v9 + v25) - *(unsigned __int8 *)(v18 + v25))
               * *(unsigned __int8 *)(v20 + v25);
          --v24;
        }
        while (v24 > 1);
        if (v23 < (int)v22) {
          unsigned int v22 = v23;
        }
        v9 += v19;
        v20 += v19;
        ++v17;
        BOOL v26 = v14-- <= 0;
      }
      while (!v26);
      return (__int16)(((v22 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                    + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
    }
    if (!((unint64_t)(v15 - 1) >> 32))
    {
      unsigned int v22 = 0x40000000;
      while (1)
      {
        int v27 = *v17;
        if (v15 < 0x20) {
          break;
        }
        int32x4_t v29 = 0uLL;
        int32x4_t v30 = (int32x4_t)*v17;
        uint64_t v31 = v15 & 0xFFFFFFE0;
        uint64_t v32 = v15 - 1;
        int32x4_t v33 = 0uLL;
        int32x4_t v34 = 0uLL;
        int32x4_t v2 = 0uLL;
        int32x4_t v35 = 0uLL;
        int32x4_t v36 = 0uLL;
        int32x4_t v37 = 0uLL;
        do
        {
          uint64_t v38 = v9 + v32;
          int8x16_t v39 = vrev64q_s8(*(int8x16_t *)(v38 - 15));
          uint8x16_t v40 = (uint8x16_t)vextq_s8(v39, v39, 8uLL);
          int8x16_t v41 = vrev64q_s8(*(int8x16_t *)(v38 - 31));
          uint8x16_t v42 = (uint8x16_t)vextq_s8(v41, v41, 8uLL);
          uint64_t v43 = v18 + v32;
          int8x16_t v44 = vrev64q_s8(*(int8x16_t *)(v43 - 15));
          uint8x16_t v45 = (uint8x16_t)vextq_s8(v44, v44, 8uLL);
          int8x16_t v46 = vrev64q_s8(*(int8x16_t *)(v43 - 31));
          uint8x16_t v47 = (uint8x16_t)vextq_s8(v46, v46, 8uLL);
          int16x8_t v48 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v40.i8, *(uint8x8_t *)v45.i8);
          int16x8_t v49 = (int16x8_t)vsubl_high_u8(v40, v45);
          int16x8_t v50 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v47.i8);
          int16x8_t v51 = (int16x8_t)vsubl_high_u8(v42, v47);
          uint64_t v52 = v20 + v32;
          int8x16_t v53 = *(int8x16_t *)(v52 - 15);
          int8x16_t v54 = *(int8x16_t *)(v52 - 31);
          int32x4_t v34 = vmlaq_s32(v34, vmull_high_s16(v49, v49), (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F4850));
          int32x4_t v33 = vmlaq_s32(v33, vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v49.i8), (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F4860));
          int32x4_t v29 = vmlaq_s32(v29, vmull_high_s16(v48, v48), (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F4870));
          int32x4_t v30 = vmlaq_s32(v30, vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v48.i8), (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F4880));
          int32x4_t v37 = vmlaq_s32(v37, vmull_high_s16(v51, v51), (int32x4_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1000F4850));
          int32x4_t v36 = vmlaq_s32(v36, vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8), (int32x4_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1000F4860));
          int32x4_t v35 = vmlaq_s32(v35, vmull_high_s16(v50, v50), (int32x4_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1000F4870));
          int32x4_t v2 = vmlaq_s32(v2, vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v50.i8), (int32x4_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1000F4880));
          v32 -= 32;
          v31 -= 32;
        }
        while (v31);
        int v27 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v2, v30), vaddq_s32(v36, v33)), vaddq_s32(vaddq_s32(v35, v29), vaddq_s32(v37, v34))));
        if ((v15 & 0x7FFFFFE0) == v15) {
          goto LABEL_35;
        }
        uint64_t v28 = v15 & 0x7FFFFFE0;
        uint64_t v55 = v15 & 0x1F;
        if ((v15 & 0x18) != 0) {
          goto LABEL_44;
        }
LABEL_47:
        uint64_t v62 = v55 + 1;
        do
        {
          uint64_t v63 = (v62 - 2);
          v27 += (*(unsigned __int8 *)(v9 + v63) - *(unsigned __int8 *)(v18 + v63))
               * (*(unsigned __int8 *)(v9 + v63) - *(unsigned __int8 *)(v18 + v63))
               * *(unsigned __int8 *)(v20 + v63);
          --v62;
        }
        while (v62 > 1);
LABEL_35:
        if (v27 < (int)v22) {
          unsigned int v22 = v27;
        }
        v9 += v19;
        v20 += v19;
        ++v17;
        BOOL v26 = v14-- <= 0;
        if (v26) {
          return (__int16)(((v22 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
        }
                                        + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
      }
      uint64_t v28 = 0;
LABEL_44:
      int32x4_t v56 = 0uLL;
      int32x4_t v57 = (int32x4_t)v27;
      uint64_t v58 = v15 - 1 - v28;
      uint64_t v59 = v28 - (v15 & 0xFFFFFFF8);
      do
      {
        int16x8_t v60 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(v9 - 7 + v58)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(v18 - 7 + v58)));
        *(int8x8_t *)v2.i8 = vrev64_s8(*(int8x8_t *)(v20 - 7 + v58));
        int32x4_t v61 = (int32x4_t)vqtbl1q_s8((int8x16_t)v2, (int8x16_t)xmmword_1000F4800);
        int32x4_t v2 = (int32x4_t)vqtbl1q_s8((int8x16_t)v2, (int8x16_t)xmmword_1000F4810);
        int32x4_t v56 = vmlaq_s32(v56, vmull_high_s16(v60, v60), v61);
        int32x4_t v57 = vmlaq_s32(v57, vmull_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v60.i8), v2);
        v58 -= 8;
        v59 += 8;
      }
      while (v59);
      int v27 = vaddvq_s32(vaddq_s32(v57, v56));
      uint64_t v55 = v15 & 7;
      if ((v15 & 0xFFFFFFF8) == v15) {
        goto LABEL_35;
      }
      goto LABEL_47;
    }
    uint64_t v73 = v15 + 1;
    unsigned int v22 = 0x40000000;
    do
    {
      signed int v74 = *v17;
      uint64_t v75 = v73;
      do
      {
        uint64_t v76 = (v75 - 2);
        v74 += (*(unsigned __int8 *)(v9 + v76) - *(unsigned __int8 *)(v18 + v76))
             * (*(unsigned __int8 *)(v9 + v76) - *(unsigned __int8 *)(v18 + v76))
             * *(unsigned __int8 *)(v20 + v76);
        --v75;
      }
      while (v75 > 1);
      if (v74 < (int)v22) {
        unsigned int v22 = v74;
      }
      v9 += v19;
      v20 += v19;
      ++v17;
      BOOL v26 = v14-- <= 0;
    }
    while (!v26);
  }
  return (__int16)(((v22 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_10001328C(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9)
{
  int v10 = *(uint8x8_t **)(a1 + 1544);
  int v11 = *(_DWORD *)(a1 + 1072);
  BOOL v12 = __OFSUB__(a2, v11);
  int v13 = a2 - v11;
  if (v13 < 0 == v12)
  {
    uint64_t v17 = *(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v13;
    uint64_t v18 = *(int *)(a1 + 1100);
    uint64_t v19 = 0;
    int v20 = *(_DWORD *)(a1 + 1296);
    if (v20 == 3) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    int v14 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
    unsigned int v15 = *v14;
    int v16 = v14[1];
  }
  else
  {
    uint64_t v21 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    unsigned int v15 = *v21;
    int v16 = v21[1];
  }
  int v22 = v16 - v15;
  if (*(_DWORD *)(a1 + 2012)) {
    unsigned int v15 = a2;
  }
  uint64_t v23 = *(int *)(a1 + 1120) * (uint64_t)(int)v15;
  if (*(_DWORD *)(a1 + 1080) <= (signed int)a2) {
    uint64_t v24 = *(void *)(a1 + 96);
  }
  else {
    uint64_t v24 = *(void *)(a1 + 16);
  }
  uint64_t v17 = v24 + v23;
  uint64_t v18 = *(int *)(a1 + 1100);
  uint64_t v19 = v22 - 1;
  int v20 = *(_DWORD *)(a1 + 1296);
  if (v20 != 3)
  {
LABEL_14:
    if (v20 == 4)
    {
      if (!*(_DWORD *)(a1 + 2012))
      {
        if (*(_DWORD *)(a1 + 1176)) {
          a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
        }
        else {
          a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
        }
      }
    }
    else
    {
      a2 = 0;
    }
  }
LABEL_19:
  uint64_t v25 = 0;
  uint64_t v26 = v19 * v18;
  uint64_t v27 = *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)a2;
  uint64_t v28 = (_DWORD *)(*(void *)(a1 + 1240) + 4 * (int)a2);
  int v29 = *(_DWORD *)(a1 + 1140);
  uint16x8_t v30 = vmovl_u8(*v10);
  int32x4_t v31 = (int32x4_t)vmovl_high_u16(v30);
  int32x4_t v32 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v30.i8);
  while (1)
  {
    uint16x8_t v33 = vmovl_u8(*(uint8x8_t *)(v17 + v25));
    int32x4_t v34 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v33.i8);
    int32x4_t v35 = vsubq_s32((int32x4_t)vmovl_high_u16(v33), v31);
    int32x4_t v36 = vsubq_s32(v34, v32);
    a9.i64[0] = *(void *)(v27 + v25);
    int32x4_t v37 = (int32x4_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_1000F4810);
    a9 = (int32x4_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_1000F4800);
    int v38 = vaddvq_s32(vmlaq_s32(vmulq_s32(vmulq_s32(v35, v35), a9), vmulq_s32(v36, v36), v37));
    if (v38 <= v29)
    {
      int16x8_t v39 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v17 + v25 + 8), v10[1]);
      uint16x8_t v40 = vmovl_u8(*(uint8x8_t *)(v27 + v25 + 8));
      int32x4_t v41 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v40.i8);
      a9 = (int32x4_t)vmovl_high_u16(v40);
      int v42 = vaddvq_s32(vmlaq_s32(vmulq_s32(vmull_high_s16(v39, v39), a9), vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v39.i8), v41))+ *v28+ v38;
      if (v42 < v29)
      {
        int16x8_t v43 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v17 + v25 + 16), v10[2]);
        uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)(v27 + v25 + 16));
        int32x4_t v45 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v44.i8);
        a9 = (int32x4_t)vmovl_high_u16(v44);
        int v46 = vaddvq_s32(vmlaq_s32(vmulq_s32(vmull_high_s16(v43, v43), a9), vmull_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v43.i8), v45))+ v42;
        if (v46 < v29)
        {
          int16x8_t v47 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v17 + v25 + 24), v10[3]);
          int32x4_t v48 = vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v47.i8);
          uint16x8_t v49 = vmovl_u8(*(uint8x8_t *)(v27 + v25 + 24));
          int32x4_t v50 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v49.i8);
          int32x4_t v51 = (int32x4_t)vmovl_high_u16(v49);
          int32x4_t v52 = vmulq_s32(vmull_high_s16(v47, v47), v51);
          v51.i32[0] = *(_DWORD *)(v17 + v25 + 32);
          v9.i32[0] = v10[4].i32[0];
          uint16x4_t v53 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
          int32x4_t v54 = (int32x4_t)vsubl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v51.i8), v53);
          a9 = vmulq_s32(v54, v54);
          v53.i32[0] = *(_DWORD *)(v27 + v25 + 32);
          int32x4_t v9 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v53));
          int v55 = vaddvq_s32(vmlaq_s32(vmlaq_s32(v52, v48, v50), a9, v9)) + v46;
          if (v55 < v29) {
            int v29 = v55;
          }
        }
      }
    }
    if (v26 == v25) {
      break;
    }
    ++v28;
    v25 += v18;
  }
  return (__int16)(((v29 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_100013544(uint64_t a1, unsigned int a2, double a3, double a4, double a5, int16x8_t a6)
{
  if (*(_DWORD *)(a1 + 1072) <= (signed int)a2)
  {
    int v9 = 1;
    int v10 = *(_DWORD *)(a1 + 1296);
    unsigned int v11 = a2;
    if (v10 != 3) {
      goto LABEL_8;
    }
LABEL_14:
    if (*(_DWORD *)(a1 + 2012)) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    uint64_t v6 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
    int v8 = *v6;
    int v7 = v6[1];
  }
  else
  {
    BOOL v12 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    int v8 = *v12;
    int v7 = v12[1];
  }
  int v9 = v7 - v8;
  int v10 = *(_DWORD *)(a1 + 1296);
  unsigned int v11 = a2;
  if (v10 == 3) {
    goto LABEL_14;
  }
LABEL_8:
  if (v10 != 4)
  {
    unsigned int v11 = 0;
    goto LABEL_14;
  }
  unsigned int v11 = a2;
  if (*(_DWORD *)(a1 + 2012)) {
    goto LABEL_14;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    unsigned int v11 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    if (*(_DWORD *)(a1 + 2012)) {
      goto LABEL_18;
    }
  }
  else
  {
    unsigned int v11 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    if (*(_DWORD *)(a1 + 2012)) {
      goto LABEL_18;
    }
  }
LABEL_15:
  if (*(_DWORD *)(a1 + 1176)) {
    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
  }
  else {
    a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
  }
LABEL_18:
  int v13 = v9 - 1;
  if (v9 < 1)
  {
    unsigned int v24 = 0x40000000;
    return (__int16)(((v24 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                  + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
  }
  uint64_t v14 = *(unsigned int *)(a1 + 1104);
  uint64_t v15 = *(void *)(a1 + 160);
  int v16 = (unsigned int *)(v15 + 4 * (int)a2);
  if ((int)v14 > 0)
  {
    uint64_t v17 = *(int8x16_t **)(a1 + 1544);
    uint64_t v18 = *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)v11;
    uint64_t v19 = *(void *)(a1 + 176) + 2 * (int)(*(_DWORD *)(a1 + 1120) * a2);
    uint64_t v20 = *(int *)(a1 + 1100);
    uint64_t v21 = v14 & 0xFFFFFFE0;
    uint64_t v22 = v14 & 0xFFFFFFF8;
    uint64_t v23 = *(uint16x8_t **)(a1 + 1584);
    unsigned int v24 = 0x40000000;
    while (1)
    {
      unsigned int v26 = *v16;
      if (v14 < 8)
      {
        for (uint64_t i = 0; i != v14; ++i)
LABEL_35:
          v26 -= 2 * *(unsigned __int16 *)(v19 + 2 * i) * v17->u8[i];
        goto LABEL_36;
      }
      if (v14 >= 0x20)
      {
        uint64_t v29 = 0;
        int32x4_t v30 = 0uLL;
        int32x4_t v31 = (int32x4_t)*v16;
        int32x4_t v32 = v17 + 1;
        int32x4_t v33 = 0uLL;
        int32x4_t v34 = 0uLL;
        int32x4_t v35 = 0uLL;
        int32x4_t v36 = 0uLL;
        int32x4_t v37 = 0uLL;
        int32x4_t v38 = 0uLL;
        do
        {
          uint16x8_t v39 = *(uint16x8_t *)(v19 + v29);
          uint16x8_t v40 = *(uint16x8_t *)(v19 + v29 + 16);
          uint16x8_t v41 = *(uint16x8_t *)(v19 + v29 + 32);
          uint16x8_t v42 = *(uint16x8_t *)(v19 + v29 + 48);
          int8x16_t v43 = v32[-1];
          int16x8_t v44 = (int16x8_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_1000F47E0);
          int16x8_t v45 = (int16x8_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_1000F47F0);
          uint16x8_t v46 = (uint16x8_t)vuzp1q_s16((int16x8_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_1000F4810), (int16x8_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_1000F4800));
          int32x4_t v47 = (int32x4_t)vmull_u16(*(uint16x4_t *)v39.i8, *(uint16x4_t *)v46.i8);
          uint16x8_t v48 = (uint16x8_t)vuzp1q_s16(v45, v44);
          int32x4_t v49 = (int32x4_t)vmull_u16(*(uint16x4_t *)v40.i8, *(uint16x4_t *)v48.i8);
          int32x4_t v50 = (int32x4_t)vmull_high_u16(v39, v46);
          int32x4_t v51 = (int32x4_t)vmull_high_u16(v40, v48);
          uint16x8_t v52 = (uint16x8_t)vuzp1q_s16((int16x8_t)vqtbl1q_s8(*v32, (int8x16_t)xmmword_1000F4810), (int16x8_t)vqtbl1q_s8(*v32, (int8x16_t)xmmword_1000F4800));
          int32x4_t v53 = (int32x4_t)vmull_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)v52.i8);
          uint16x8_t v54 = (uint16x8_t)vuzp1q_s16((int16x8_t)vqtbl1q_s8(*v32, (int8x16_t)xmmword_1000F47F0), (int16x8_t)vqtbl1q_s8(*v32, (int8x16_t)xmmword_1000F47E0));
          int32x4_t v55 = (int32x4_t)vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v54.i8);
          int32x4_t v56 = (int32x4_t)vmull_high_u16(v41, v52);
          int32x4_t v57 = (int32x4_t)vmull_high_u16(v42, v54);
          int32x4_t v34 = vsubq_s32(v34, vaddq_s32(v51, v51));
          int32x4_t v30 = vsubq_s32(v30, vaddq_s32(v50, v50));
          int32x4_t v33 = vsubq_s32(v33, vaddq_s32(v49, v49));
          int32x4_t v31 = vsubq_s32(v31, vaddq_s32(v47, v47));
          int32x4_t v38 = vsubq_s32(v38, vaddq_s32(v57, v57));
          int32x4_t v36 = vsubq_s32(v36, vaddq_s32(v56, v56));
          int32x4_t v37 = vsubq_s32(v37, vaddq_s32(v55, v55));
          int32x4_t v35 = vsubq_s32(v35, vaddq_s32(v53, v53));
          v29 += 64;
          v32 += 2;
        }
        while (((2 * v14) & 0x1FFFFFFC0) != v29);
        a6 = (int16x8_t)vaddq_s32(v38, v34);
        unsigned int v26 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v35, v31), vaddq_s32(v37, v33)), vaddq_s32(vaddq_s32(v36, v30), (int32x4_t)a6)));
        if (v21 == v14) {
          goto LABEL_36;
        }
        uint64_t v28 = v14 & 0x7FFFFFE0;
        uint64_t i = v14 & 0xFFFFFFE0;
        if ((v14 & 0x18) == 0) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v28 = 0;
      }
      int32x4_t v58 = 0uLL;
      int32x4_t v59 = (int32x4_t)v26;
      uint64_t v60 = 2 * v28;
      int32x4_t v61 = (unint64_t *)((char *)v17->u64 + v28);
      uint64_t v62 = v28 - (v14 & 0xFFFFFFF8);
      do
      {
        uint16x8_t v63 = *(uint16x8_t *)(v19 + v60);
        unint64_t v64 = *v61++;
        a6.i64[0] = v64;
        a6 = vuzp1q_s16((int16x8_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_1000F4810), (int16x8_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_1000F4800));
        int32x4_t v65 = (int32x4_t)vmull_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)a6.i8);
        int32x4_t v66 = (int32x4_t)vmull_high_u16(v63, (uint16x8_t)a6);
        int32x4_t v58 = vsubq_s32(v58, vaddq_s32(v66, v66));
        int32x4_t v59 = vsubq_s32(v59, vaddq_s32(v65, v65));
        v60 += 16;
        v62 += 8;
      }
      while (v62);
      unsigned int v26 = vaddvq_s32(vaddq_s32(v59, v58));
      uint64_t i = v14 & 0xFFFFFFF8;
      if (v22 != v14) {
        goto LABEL_35;
      }
LABEL_36:
      if (v14 >= 8)
      {
        if (v14 < 0x20)
        {
          uint64_t v68 = 0;
LABEL_44:
          int32x4_t v89 = 0uLL;
          int32x4_t v90 = (int32x4_t)v26;
          uint64_t v91 = (uint16x8_t *)((char *)v23 + 2 * v68);
          do
          {
            uint16x8_t v92 = *v91++;
            a6 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v18 + v68));
            int32x4_t v89 = (int32x4_t)vmlal_high_u16((uint32x4_t)v89, (uint16x8_t)a6, v92);
            int32x4_t v90 = (int32x4_t)vmlal_u16((uint32x4_t)v90, *(uint16x4_t *)a6.i8, *(uint16x4_t *)v92.i8);
            v68 += 8;
          }
          while (v22 != v68);
          unsigned int v26 = vaddvq_s32(vaddq_s32(v90, v89));
          uint64_t v67 = v14 & 0xFFFFFFF8;
          if (v22 == v14) {
            goto LABEL_21;
          }
          goto LABEL_47;
        }
        uint64_t v69 = 0;
        int32x4_t v70 = 0uLL;
        int32x4_t v71 = (int32x4_t)v26;
        signed int v72 = v23 + 2;
        int32x4_t v73 = 0uLL;
        int32x4_t v74 = 0uLL;
        int32x4_t v75 = 0uLL;
        int32x4_t v76 = 0uLL;
        int32x4_t v77 = 0uLL;
        int32x4_t v78 = 0uLL;
        do
        {
          uint16x8_t v80 = v72[-2];
          uint16x8_t v79 = v72[-1];
          uint16x8_t v82 = *v72;
          uint16x8_t v81 = v72[1];
          v72 += 4;
          uint8x16_t v83 = *(uint8x16_t *)(v18 + v69);
          uint8x16_t v84 = *(uint8x16_t *)(v18 + v69 + 16);
          uint16x8_t v85 = vmovl_u8(*(uint8x8_t *)v83.i8);
          uint16x8_t v86 = vmovl_high_u8(v83);
          uint16x8_t v87 = vmovl_u8(*(uint8x8_t *)v84.i8);
          uint16x8_t v88 = vmovl_high_u8(v84);
          int32x4_t v74 = (int32x4_t)vmlal_high_u16((uint32x4_t)v74, v86, v79);
          int32x4_t v73 = (int32x4_t)vmlal_u16((uint32x4_t)v73, *(uint16x4_t *)v86.i8, *(uint16x4_t *)v79.i8);
          int32x4_t v70 = (int32x4_t)vmlal_high_u16((uint32x4_t)v70, v85, v80);
          int32x4_t v71 = (int32x4_t)vmlal_u16((uint32x4_t)v71, *(uint16x4_t *)v85.i8, *(uint16x4_t *)v80.i8);
          int32x4_t v78 = (int32x4_t)vmlal_high_u16((uint32x4_t)v78, v88, v81);
          int32x4_t v77 = (int32x4_t)vmlal_u16((uint32x4_t)v77, *(uint16x4_t *)v88.i8, *(uint16x4_t *)v81.i8);
          int32x4_t v76 = (int32x4_t)vmlal_high_u16((uint32x4_t)v76, v87, v82);
          int32x4_t v75 = (int32x4_t)vmlal_u16((uint32x4_t)v75, *(uint16x4_t *)v87.i8, *(uint16x4_t *)v82.i8);
          v69 += 32;
        }
        while (v21 != v69);
        a6 = (int16x8_t)vaddq_s32(v78, v74);
        unsigned int v26 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v75, v71), vaddq_s32(v77, v73)), vaddq_s32(vaddq_s32(v76, v70), (int32x4_t)a6)));
        if (v21 == v14) {
          goto LABEL_21;
        }
        uint64_t v68 = v14 & 0x7FFFFFE0;
        uint64_t v67 = v14 & 0xFFFFFFE0;
        if ((v14 & 0x18) != 0) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v67 = 0;
      }
      do
      {
LABEL_47:
        v26 += *(unsigned __int8 *)(v18 + v67) * v23->u16[v67];
        ++v67;
      }
      while (v14 != v67);
LABEL_21:
      ++v16;
      if ((int)v26 < (int)v24) {
        unsigned int v24 = v26;
      }
      v18 += v20;
      v19 += 2 * v20;
      if (v13-- <= 0) {
        return (__int16)(((v24 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
      }
                                      + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
    }
  }
  if (v9 >= 8)
  {
    uint64_t v93 = v9;
    uint64_t v94 = v9 & 0xFFFFFFF8;
    v13 -= v94;
    v16 += v94;
    unint64_t v95 = (int32x4_t *)(v15 + 4 * (int)a2 + 16);
    v96.i64[0] = 0x4000000040000000;
    v96.i64[1] = 0x4000000040000000;
    uint64_t v97 = v94;
    v98.i64[0] = 0x4000000040000000;
    v98.i64[1] = 0x4000000040000000;
    do
    {
      int32x4_t v96 = vminq_s32(v95[-1], v96);
      int32x4_t v98 = vminq_s32(*v95, v98);
      v95 += 2;
      v97 -= 8;
    }
    while (v97);
    unsigned int v24 = vminvq_s32(vminq_s32(v96, v98));
    if (v94 == v93) {
      return (__int16)(((v24 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
    }
                                    + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
  }
  else
  {
    unsigned int v24 = 0x40000000;
  }
  int v99 = v13 + 1;
  do
  {
    signed int v101 = *v16++;
    unsigned int v100 = v101;
    if (v101 < (int)v24) {
      unsigned int v24 = v100;
    }
    --v99;
  }
  while (v99);
  return (__int16)(((v24 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_100013AA0(uint64_t a1, unsigned int a2, int a3, double a4, double a5, double a6, double a7, double a8, int16x8_t a9)
{
  uint64_t v9 = *(unsigned int *)(a1 + 1104);
  int v10 = *(_DWORD *)(a1 + 1296);
  if (v10 == 3) {
    goto LABEL_4;
  }
  if (v10 == 4)
  {
    if (*(_DWORD *)(a1 + 2012))
    {
LABEL_4:
      unsigned int v11 = a2;
      goto LABEL_6;
    }
    if (*(_DWORD *)(a1 + 1176)) {
      unsigned int v11 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2) + a3;
    }
    else {
      unsigned int v11 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2) + a3;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
LABEL_6:
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (*(_DWORD *)(a1 + 1176)) {
      int v12 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    }
    else {
      int v12 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    }
    a2 = v12 + a3;
  }
  unsigned int v13 = *(_DWORD *)(*(void *)(a1 + 160) + 4 * (int)a2);
  if ((int)v9 < 1) {
    return (__int16)(((v13 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
  }
                                  + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
  uint64_t v14 = *(int8x16_t **)(a1 + 1544);
  uint64_t v15 = *(void *)(a1 + 176);
  uint64_t v16 = (int)(*(_DWORD *)(a1 + 1120) * a2);
  if (v9 >= 8)
  {
    if (v9 >= 0x20)
    {
      uint64_t v17 = v9 & 0x7FFFFFE0;
      int32x4_t v18 = 0uLL;
      int32x4_t v19 = (int32x4_t)*(unsigned int *)(*(void *)(a1 + 160) + 4 * (int)a2);
      uint64_t v20 = (uint16x8_t *)(v15 + 2 * v16 + 32);
      uint64_t v21 = v14 + 1;
      a9.i64[1] = 0xFFFFFF03FFFFFF02;
      uint64_t v22 = v9 & 0xFFFFFFE0;
      int32x4_t v23 = 0uLL;
      int32x4_t v24 = 0uLL;
      int32x4_t v25 = 0uLL;
      int32x4_t v26 = 0uLL;
      int32x4_t v27 = 0uLL;
      int32x4_t v28 = 0uLL;
      do
      {
        uint16x8_t v29 = v20[-2];
        uint16x8_t v30 = v20[-1];
        uint16x8_t v31 = *v20;
        uint16x8_t v32 = v20[1];
        v20 += 4;
        int8x16_t v33 = v21[-1];
        int16x8_t v34 = (int16x8_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1000F47E0);
        int16x8_t v35 = (int16x8_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1000F47F0);
        uint16x8_t v36 = (uint16x8_t)vuzp1q_s16((int16x8_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1000F4810), (int16x8_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1000F4800));
        int32x4_t v37 = (int32x4_t)vmull_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v36.i8);
        uint16x8_t v38 = (uint16x8_t)vuzp1q_s16(v35, v34);
        int32x4_t v39 = (int32x4_t)vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v38.i8);
        int32x4_t v40 = (int32x4_t)vmull_high_u16(v29, v36);
        int32x4_t v41 = (int32x4_t)vmull_high_u16(v30, v38);
        uint16x8_t v42 = (uint16x8_t)vuzp1q_s16((int16x8_t)vqtbl1q_s8(*v21, (int8x16_t)xmmword_1000F4810), (int16x8_t)vqtbl1q_s8(*v21, (int8x16_t)xmmword_1000F4800));
        int32x4_t v43 = (int32x4_t)vmull_u16(*(uint16x4_t *)v31.i8, *(uint16x4_t *)v42.i8);
        uint16x8_t v44 = (uint16x8_t)vuzp1q_s16((int16x8_t)vqtbl1q_s8(*v21, (int8x16_t)xmmword_1000F47F0), (int16x8_t)vqtbl1q_s8(*v21, (int8x16_t)xmmword_1000F47E0));
        int32x4_t v45 = (int32x4_t)vmull_u16(*(uint16x4_t *)v32.i8, *(uint16x4_t *)v44.i8);
        int32x4_t v46 = (int32x4_t)vmull_high_u16(v31, v42);
        int32x4_t v47 = (int32x4_t)vmull_high_u16(v32, v44);
        int32x4_t v24 = vsubq_s32(v24, vaddq_s32(v41, v41));
        int32x4_t v18 = vsubq_s32(v18, vaddq_s32(v40, v40));
        int32x4_t v23 = vsubq_s32(v23, vaddq_s32(v39, v39));
        int32x4_t v19 = vsubq_s32(v19, vaddq_s32(v37, v37));
        int32x4_t v28 = vsubq_s32(v28, vaddq_s32(v47, v47));
        int32x4_t v26 = vsubq_s32(v26, vaddq_s32(v46, v46));
        int32x4_t v27 = vsubq_s32(v27, vaddq_s32(v45, v45));
        int32x4_t v25 = vsubq_s32(v25, vaddq_s32(v43, v43));
        v21 += 2;
        v22 -= 32;
      }
      while (v22);
      unsigned int v13 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v25, v19), vaddq_s32(v27, v23)), vaddq_s32(vaddq_s32(v26, v18), vaddq_s32(v28, v24))));
      if (v17 == v9) {
        goto LABEL_25;
      }
      if ((v9 & 0x18) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v48 = v17;
    uint64_t v17 = v9 & 0xFFFFFFF8;
    int32x4_t v49 = 0uLL;
    int32x4_t v50 = (int32x4_t)v13;
    int32x4_t v51 = (uint16x8_t *)(v15 + 2 * v48 + 2 * v16);
    uint16x8_t v52 = (uint64_t *)((char *)v14->i64 + v48);
    uint64_t v53 = v48 - v17;
    do
    {
      uint16x8_t v54 = *v51++;
      uint16x8_t v55 = v54;
      v54.i64[0] = *v52++;
      a9.i64[0] = v54.i64[0];
      a9 = vuzp1q_s16((int16x8_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_1000F4810), (int16x8_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_1000F4800));
      int32x4_t v56 = (int32x4_t)vmull_u16(*(uint16x4_t *)v55.i8, *(uint16x4_t *)a9.i8);
      int32x4_t v57 = (int32x4_t)vmull_high_u16(v55, (uint16x8_t)a9);
      int32x4_t v49 = vsubq_s32(v49, vaddq_s32(v57, v57));
      int32x4_t v50 = vsubq_s32(v50, vaddq_s32(v56, v56));
      v53 += 8;
    }
    while (v53);
    unsigned int v13 = vaddvq_s32(vaddq_s32(v50, v49));
    if (v17 == v9) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  uint64_t v17 = 0;
LABEL_23:
  int32x4_t v58 = &v14->u8[v17];
  int32x4_t v59 = (unsigned __int16 *)(v15 + 2 * v17 + 2 * v16);
  uint64_t v60 = v9 - v17;
  do
  {
    int v62 = *v59++;
    int v61 = v62;
    int v63 = *v58++;
    v13 -= 2 * v61 * v63;
    --v60;
  }
  while (v60);
LABEL_25:
  uint64_t v64 = *(int *)(a1 + 1124) * (uint64_t)(int)v11;
  uint64_t v65 = *(void *)(a1 + 1216);
  int32x4_t v66 = *(uint16x8_t **)(a1 + 1584);
  if (v9 < 8)
  {
    uint64_t v67 = 0;
    goto LABEL_36;
  }
  if (v9 >= 0x20)
  {
    uint64_t v67 = v9 & 0x7FFFFFE0;
    int32x4_t v68 = 0uLL;
    int32x4_t v69 = (int32x4_t)v13;
    int32x4_t v70 = v66 + 2;
    int32x4_t v71 = (uint8x8_t *)(v64 + v65 + 16);
    uint64_t v72 = v9 & 0xFFFFFFE0;
    int32x4_t v73 = 0uLL;
    int32x4_t v74 = 0uLL;
    int32x4_t v75 = 0uLL;
    int32x4_t v76 = 0uLL;
    int32x4_t v77 = 0uLL;
    int32x4_t v78 = 0uLL;
    do
    {
      uint16x8_t v80 = v70[-2];
      uint16x8_t v79 = v70[-1];
      uint16x8_t v82 = *v70;
      uint16x8_t v81 = v70[1];
      v70 += 4;
      uint8x16_t v83 = *(uint8x16_t *)v71[-2].i8;
      uint16x8_t v84 = vmovl_u8(*(uint8x8_t *)v83.i8);
      uint16x8_t v85 = vmovl_high_u8(v83);
      uint16x8_t v86 = vmovl_u8(*v71);
      uint16x8_t v87 = vmovl_high_u8(*(uint8x16_t *)v71->i8);
      int32x4_t v74 = (int32x4_t)vmlal_high_u16((uint32x4_t)v74, v85, v79);
      int32x4_t v73 = (int32x4_t)vmlal_u16((uint32x4_t)v73, *(uint16x4_t *)v85.i8, *(uint16x4_t *)v79.i8);
      int32x4_t v68 = (int32x4_t)vmlal_high_u16((uint32x4_t)v68, v84, v80);
      int32x4_t v69 = (int32x4_t)vmlal_u16((uint32x4_t)v69, *(uint16x4_t *)v84.i8, *(uint16x4_t *)v80.i8);
      int32x4_t v78 = (int32x4_t)vmlal_high_u16((uint32x4_t)v78, v87, v81);
      int32x4_t v77 = (int32x4_t)vmlal_u16((uint32x4_t)v77, *(uint16x4_t *)v87.i8, *(uint16x4_t *)v81.i8);
      int32x4_t v76 = (int32x4_t)vmlal_high_u16((uint32x4_t)v76, v86, v82);
      int32x4_t v75 = (int32x4_t)vmlal_u16((uint32x4_t)v75, *(uint16x4_t *)v86.i8, *(uint16x4_t *)v82.i8);
      v71 += 4;
      v72 -= 32;
    }
    while (v72);
    unsigned int v13 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v75, v69), vaddq_s32(v77, v73)), vaddq_s32(vaddq_s32(v76, v68), vaddq_s32(v78, v74))));
    if (v67 == v9) {
      return (__int16)(((v13 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
    }
                                    + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
    if ((v9 & 0x18) == 0)
    {
LABEL_36:
      uint64_t v97 = (unsigned __int8 *)(v65 + v67 + v64);
      int32x4_t v98 = (unsigned __int16 *)v66 + v67;
      uint64_t v99 = v9 - v67;
      do
      {
        int v101 = *v98++;
        int v100 = v101;
        int v102 = *v97++;
        v13 += v102 * v100;
        --v99;
      }
      while (v99);
      return (__int16)(((v13 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                    + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
    }
  }
  else
  {
    uint64_t v67 = 0;
  }
  uint64_t v88 = v67;
  uint64_t v67 = v9 & 0xFFFFFFF8;
  int32x4_t v89 = 0uLL;
  int32x4_t v90 = (int32x4_t)v13;
  uint64_t v91 = (uint16x8_t *)((char *)v66 + 2 * v88);
  uint16x8_t v92 = (uint64_t *)(v65 + v88 + v64);
  uint64_t v93 = v88 - v67;
  do
  {
    uint16x8_t v94 = *v91++;
    uint16x8_t v95 = v94;
    v94.i64[0] = *v92++;
    uint16x8_t v96 = vmovl_u8(*(uint8x8_t *)v94.i8);
    int32x4_t v89 = (int32x4_t)vmlal_high_u16((uint32x4_t)v89, v96, v95);
    int32x4_t v90 = (int32x4_t)vmlal_u16((uint32x4_t)v90, *(uint16x4_t *)v96.i8, *(uint16x4_t *)v95.i8);
    v93 += 8;
  }
  while (v93);
  unsigned int v13 = vaddvq_s32(vaddq_s32(v90, v89));
  if (v67 != v9) {
    goto LABEL_36;
  }
  return (__int16)(((v13 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_100013ED0(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 != v3)
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      int v5 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
      unsigned int v7 = *v5;
      int v6 = v5[1];
    }
    else
    {
      unsigned int v11 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      unsigned int v7 = *v11;
      int v6 = v11[1];
    }
    int v9 = v6 - v7;
    if (*(_DWORD *)(a1 + 2012)) {
      unsigned int v7 = a2;
    }
    uint64_t v12 = *(int *)(a1 + 1120) * (uint64_t)(int)v7;
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      int v8 = (uint8x8_t *)(*(void *)(a1 + 96) + v12);
      int v10 = *(_DWORD *)(a1 + 1296);
      if (v10 == 3) {
        goto LABEL_20;
      }
    }
    else
    {
      int v8 = (uint8x8_t *)(*(void *)(a1 + 16) + v12);
      int v10 = *(_DWORD *)(a1 + 1296);
      if (v10 == 3)
      {
LABEL_20:
        if (v9 >= 1) {
          goto LABEL_21;
        }
        goto LABEL_47;
      }
    }
  }
  else
  {
    int v8 = (uint8x8_t *)(*(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v4);
    int v9 = 1;
    int v10 = *(_DWORD *)(a1 + 1296);
    if (v10 == 3) {
      goto LABEL_20;
    }
  }
  if (v10 != 4)
  {
    a2 = 0;
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 2012)) {
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    if (v9 >= 1)
    {
LABEL_21:
      unsigned int v13 = *(uint8x8_t **)(a1 + 1544);
      uint64_t v14 = (_DWORD *)(*(void *)(a1 + 1240) + 4 * (int)a2);
      uint64_t v15 = (uint16x8_t *)(*(void *)(a1 + 1208) + 2 * (int)(*(_DWORD *)(a1 + 1124) * a2));
      BOOL v16 = v10 == 4;
      BOOL v17 = v10 == 4;
      if (v16) {
        uint64_t v18 = *(int *)(a1 + 1100);
      }
      else {
        uint64_t v18 = 0;
      }
      uint16x8_t v19 = vmovl_u8(*v13);
      int32x4_t v20 = (int32x4_t)vmovl_high_u16(v19);
      int32x4_t v21 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v19.i8);
      uint64_t v22 = v15 + 3;
      uint64_t v23 = 2 * v18;
      int32x4_t v24 = v13 + 3;
      unsigned int v25 = 0x40000000;
      while (1)
      {
        uint16x8_t v28 = vmovl_u8(*v8);
        int32x4_t v29 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v28.i8);
        int32x4_t v30 = vsubq_s32((int32x4_t)vmovl_high_u16(v28), v20);
        int32x4_t v31 = vsubq_s32(v29, v21);
        int v32 = vaddvq_s32(vmlaq_s32(vmulq_s32(vmulq_s32(v30, v30), (int32x4_t)vmovl_high_u16(*v15)), vmulq_s32(v31, v31), (int32x4_t)vmovl_u16(*(uint16x4_t *)v15->i8)));
        unsigned int v26 = v32;
        if (v32 > *(_DWORD *)(a1 + 1056))
        {
          unsigned int v26 = *(_DWORD *)(a1 + 1060) + v32;
        }
        else
        {
          uint64_t v33 = *(unsigned int *)(a1 + 1104);
          if ((int)v33 >= 9)
          {
            unint64_t v34 = v33 - 8;
            if ((unint64_t)(v33 - 8) < 8)
            {
              uint64_t v35 = 8;
              goto LABEL_44;
            }
            if (v34 >= 0x20)
            {
              unint64_t v37 = 0;
              int32x4_t v38 = 0uLL;
              int32x4_t v39 = (int32x4_t)v32;
              unint64_t v36 = v34 & 0xFFFFFFFFFFFFFFE0;
              int32x4_t v40 = v22;
              int32x4_t v41 = 0uLL;
              int32x4_t v42 = 0uLL;
              int32x4_t v43 = 0uLL;
              int32x4_t v44 = 0uLL;
              int32x4_t v45 = 0uLL;
              int32x4_t v46 = 0uLL;
              do
              {
                uint8x16_t v47 = *(uint8x16_t *)v8[v37 / 8 + 1].i8;
                uint8x16_t v48 = *(uint8x16_t *)v8[v37 / 8 + 3].i8;
                uint8x16_t v49 = *(uint8x16_t *)v24[v37 / 8 - 2].i8;
                uint8x16_t v50 = *(uint8x16_t *)v24[v37 / 8].i8;
                int16x8_t v51 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v49.i8);
                int16x8_t v52 = (int16x8_t)vsubl_high_u8(v47, v49);
                int16x8_t v53 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v50.i8);
                int16x8_t v54 = (int16x8_t)vsubl_high_u8(v48, v50);
                uint16x8_t v55 = v40[-2];
                uint16x8_t v56 = v40[-1];
                uint16x8_t v57 = *v40;
                uint16x8_t v58 = v40[1];
                v40 += 4;
                int32x4_t v42 = vmlaq_s32(v42, vmull_high_s16(v52, v52), (int32x4_t)vmovl_high_u16(v56));
                int32x4_t v41 = vmlaq_s32(v41, vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v52.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v56.i8));
                int32x4_t v38 = vmlaq_s32(v38, vmull_high_s16(v51, v51), (int32x4_t)vmovl_high_u16(v55));
                int32x4_t v39 = vmlaq_s32(v39, vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v55.i8));
                int32x4_t v46 = vmlaq_s32(v46, vmull_high_s16(v54, v54), (int32x4_t)vmovl_high_u16(v58));
                int32x4_t v45 = vmlaq_s32(v45, vmull_s16(*(int16x4_t *)v54.i8, *(int16x4_t *)v54.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v58.i8));
                int32x4_t v44 = vmlaq_s32(v44, vmull_high_s16(v53, v53), (int32x4_t)vmovl_high_u16(v57));
                int32x4_t v43 = vmlaq_s32(v43, vmull_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v53.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v57.i8));
                v37 += 32;
              }
              while (v36 != v37);
              unsigned int v26 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v43, v39), vaddq_s32(v45, v41)), vaddq_s32(vaddq_s32(v44, v38), vaddq_s32(v46, v42))));
              if (v34 == v36) {
                goto LABEL_26;
              }
              if ((v34 & 0x18) == 0)
              {
                uint64_t v35 = v36 | 8;
                do
                {
LABEL_44:
                  int v65 = v8->u8[v35] - v13->u8[v35];
                  v26 += v65 * v65 * v15->u16[v35++];
                }
                while (v33 != v35);
                goto LABEL_26;
              }
            }
            else
            {
              unint64_t v36 = 0;
            }
            unint64_t v59 = v34 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v35 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
            int32x4_t v60 = 0uLL;
            int32x4_t v61 = (int32x4_t)v26;
            uint64_t v62 = 2 * v36 + 16;
            do
            {
              int16x8_t v63 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)&v8[1] + v36), *(uint8x8_t *)((char *)v13 + v36 + 8));
              uint16x8_t v64 = *(uint16x8_t *)((char *)v15 + v62);
              int32x4_t v60 = vmlaq_s32(v60, vmull_high_s16(v63, v63), (int32x4_t)vmovl_high_u16(v64));
              int32x4_t v61 = vmlaq_s32(v61, vmull_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v63.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v64.i8));
              v62 += 16;
              v36 += 8;
            }
            while (v59 != v36);
            unsigned int v26 = vaddvq_s32(vaddq_s32(v61, v60));
            if (v34 == v59) {
              goto LABEL_26;
            }
            goto LABEL_44;
          }
        }
LABEL_26:
        if ((int)(*v14 + v26) < (int)v25) {
          unsigned int v25 = *v14 + v26;
        }
        int v8 = (uint8x8_t *)((char *)v8 + *(int *)(a1 + 1100));
        v14 += v17;
        uint64_t v15 = (uint16x8_t *)((char *)v15 + v23);
        uint64_t v22 = (uint16x8_t *)((char *)v22 + v23);
        if (v9-- <= 1) {
          return (__int16)(((v25 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
        }
                                        + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
      }
    }
  }
  else
  {
    a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    if (v9 >= 1) {
      goto LABEL_21;
    }
  }
LABEL_47:
  unsigned int v25 = 0x40000000;
  return (__int16)(((v25 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_1000142B4(uint64_t a1, unsigned int a2)
{
  int v4 = *(_DWORD *)(a1 + 1072);
  BOOL v5 = __OFSUB__(a2, v4);
  int v6 = a2 - v4;
  if (v6 < 0 != v5)
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      unsigned int v7 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
      unsigned int v9 = *v7;
      int v8 = v7[1];
    }
    else
    {
      unsigned int v13 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      unsigned int v9 = *v13;
      int v8 = v13[1];
    }
    int v11 = v8 - v9;
    if (*(_DWORD *)(a1 + 2012)) {
      unsigned int v9 = a2;
    }
    uint64_t v14 = *(int *)(a1 + 1120) * (uint64_t)(int)v9;
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      int v10 = (uint8x8_t *)(*(void *)(a1 + 96) + v14);
      int v12 = *(_DWORD *)(a1 + 1296);
      if (v12 == 3) {
        goto LABEL_20;
      }
    }
    else
    {
      int v10 = (uint8x8_t *)(*(void *)(a1 + 16) + v14);
      int v12 = *(_DWORD *)(a1 + 1296);
      if (v12 == 3)
      {
LABEL_20:
        if (v11 >= 1) {
          goto LABEL_21;
        }
        goto LABEL_47;
      }
    }
  }
  else
  {
    int v10 = (uint8x8_t *)(*(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v6);
    int v11 = 1;
    int v12 = *(_DWORD *)(a1 + 1296);
    if (v12 == 3) {
      goto LABEL_20;
    }
  }
  if (v12 != 4)
  {
    a2 = 0;
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 2012)) {
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    if (v11 >= 1)
    {
LABEL_21:
      uint64_t v15 = *(uint8x8_t **)(a1 + 1544);
      BOOL v16 = (_DWORD *)(*(void *)(a1 + 1240) + 4 * (int)a2);
      BOOL v17 = (uint64_t *)(*(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)a2);
      BOOL v18 = v12 == 4;
      BOOL v19 = v12 == 4;
      if (v18) {
        uint64_t v20 = *(int *)(a1 + 1100);
      }
      else {
        uint64_t v20 = 0;
      }
      uint16x8_t v21 = vmovl_u8(*v15);
      int32x4_t v22 = (int32x4_t)vmovl_high_u16(v21);
      int32x4_t v23 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v21.i8);
      unsigned int v24 = 0x40000000;
      while (1)
      {
        uint16x8_t v27 = vmovl_u8(*v10);
        int32x4_t v28 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v27.i8);
        int32x4_t v29 = vsubq_s32((int32x4_t)vmovl_high_u16(v27), v22);
        int32x4_t v30 = vsubq_s32(v28, v23);
        v2.i64[0] = *v17;
        int32x4_t v31 = (int32x4_t)vqtbl1q_s8((int8x16_t)v2, (int8x16_t)xmmword_1000F4810);
        int32x4_t v2 = (int32x4_t)vqtbl1q_s8((int8x16_t)v2, (int8x16_t)xmmword_1000F4800);
        v2.i32[0] = vaddvq_s32(vmlaq_s32(vmulq_s32(vmulq_s32(v29, v29), v2), vmulq_s32(v30, v30), v31));
        unsigned int v25 = v2.i32[0];
        if (v2.i32[0] > *(_DWORD *)(a1 + 1056))
        {
          unsigned int v25 = *(_DWORD *)(a1 + 1060) + v2.i32[0];
        }
        else
        {
          uint64_t v32 = *(unsigned int *)(a1 + 1104);
          if ((int)v32 >= 9)
          {
            unint64_t v33 = v32 - 8;
            if ((unint64_t)(v32 - 8) < 8)
            {
              uint64_t v34 = 8;
              goto LABEL_44;
            }
            if (v33 >= 0x20)
            {
              unint64_t v35 = v33 & 0xFFFFFFFFFFFFFFE0;
              int32x4_t v36 = 0uLL;
              int32x4_t v37 = (int32x4_t)v2.u32[0];
              uint64_t v38 = 3;
              int32x4_t v39 = 0uLL;
              int32x4_t v40 = 0uLL;
              int32x4_t v3 = 0uLL;
              int32x4_t v41 = 0uLL;
              int32x4_t v42 = 0uLL;
              int32x4_t v43 = 0uLL;
              do
              {
                uint8x16_t v44 = *(uint8x16_t *)v10[v38 - 2].i8;
                uint8x16_t v45 = *(uint8x16_t *)v10[v38].i8;
                uint8x16_t v46 = *(uint8x16_t *)v15[v38 - 2].i8;
                uint8x16_t v47 = *(uint8x16_t *)v15[v38].i8;
                int16x8_t v48 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v44.i8, *(uint8x8_t *)v46.i8);
                int16x8_t v49 = (int16x8_t)vsubl_high_u8(v44, v46);
                int16x8_t v50 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v47.i8);
                int16x8_t v51 = (int16x8_t)vsubl_high_u8(v45, v47);
                int8x16_t v52 = *(int8x16_t *)&v17[v38 - 2];
                int8x16_t v53 = *(int8x16_t *)&v17[v38];
                int32x4_t v40 = vmlaq_s32(v40, vmull_high_s16(v49, v49), (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1000F47E0));
                int32x4_t v39 = vmlaq_s32(v39, vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v49.i8), (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1000F47F0));
                int32x4_t v36 = vmlaq_s32(v36, vmull_high_s16(v48, v48), (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1000F4800));
                int32x4_t v37 = vmlaq_s32(v37, vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v48.i8), (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1000F4810));
                int32x4_t v43 = vmlaq_s32(v43, vmull_high_s16(v51, v51), (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F47E0));
                int32x4_t v42 = vmlaq_s32(v42, vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8), (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F47F0));
                int32x4_t v41 = vmlaq_s32(v41, vmull_high_s16(v50, v50), (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F4800));
                int32x4_t v3 = vmlaq_s32(v3, vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v50.i8), (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F4810));
                v38 += 4;
              }
              while (v38 * 8 - (v33 & 0xFFFFFFFFFFFFFFE0) != 24);
              int32x4_t v2 = vaddq_s32(v42, v39);
              unsigned int v25 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v3, v37), v2), vaddq_s32(vaddq_s32(v41, v36), vaddq_s32(v43, v40))));
              if (v33 == v35) {
                goto LABEL_26;
              }
              if ((v33 & 0x18) == 0)
              {
                uint64_t v34 = v35 | 8;
                do
                {
LABEL_44:
                  int v60 = v10->u8[v34] - v15->u8[v34];
                  v25 += v60 * v60 * *((unsigned __int8 *)v17 + v34++);
                }
                while (v32 != v34);
                goto LABEL_26;
              }
            }
            else
            {
              unint64_t v35 = 0;
            }
            uint64_t v34 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
            int32x4_t v54 = 0uLL;
            int32x4_t v55 = (int32x4_t)v25;
            unint64_t v56 = v35 + 8;
            do
            {
              int16x8_t v57 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v10 + v56), *(uint8x8_t *)((char *)v15 + v56));
              int32x4_t v58 = vmull_high_s16(v57, v57);
              int32x4_t v2 = vmull_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v57.i8);
              v3.i64[0] = *(uint64_t *)((char *)v17 + v56);
              int32x4_t v59 = (int32x4_t)vqtbl1q_s8((int8x16_t)v3, (int8x16_t)xmmword_1000F4800);
              int32x4_t v3 = (int32x4_t)vqtbl1q_s8((int8x16_t)v3, (int8x16_t)xmmword_1000F4810);
              int32x4_t v54 = vmlaq_s32(v54, v58, v59);
              int32x4_t v55 = vmlaq_s32(v55, v2, v3);
              v56 += 8;
            }
            while (v56 - (v33 & 0xFFFFFFFFFFFFFFF8) != 8);
            unsigned int v25 = vaddvq_s32(vaddq_s32(v55, v54));
            if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_26;
            }
            goto LABEL_44;
          }
        }
LABEL_26:
        if ((int)(*v16 + v25) < (int)v24) {
          unsigned int v24 = *v16 + v25;
        }
        int v10 = (uint8x8_t *)((char *)v10 + *(int *)(a1 + 1100));
        v16 += v19;
        BOOL v17 = (uint64_t *)((char *)v17 + v20);
        if (v11-- <= 1) {
          return (__int16)(((v24 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
        }
                                        + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
      }
    }
  }
  else
  {
    a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    if (v11 >= 1) {
      goto LABEL_21;
    }
  }
LABEL_47:
  unsigned int v24 = 0x40000000;
  return (__int16)(((v24 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_100014698(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9)
{
  int v10 = *(uint8x8_t **)(a1 + 1544);
  int v11 = *(_DWORD *)(a1 + 1072);
  BOOL v12 = __OFSUB__(a2, v11);
  int v13 = a2 - v11;
  if (v13 < 0 != v12)
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      uint64_t v14 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
      unsigned int v15 = *v14;
      int v16 = v14[1];
    }
    else
    {
      BOOL v19 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      unsigned int v15 = *v19;
      int v16 = v19[1];
    }
    int v18 = v16 - v15;
    if (*(_DWORD *)(a1 + 2012)) {
      unsigned int v15 = a2;
    }
    uint64_t v20 = *(int *)(a1 + 1120) * (uint64_t)(int)v15;
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2) {
      uint64_t v21 = *(void *)(a1 + 96);
    }
    else {
      uint64_t v21 = *(void *)(a1 + 16);
    }
    uint64_t v17 = v21 + v20;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v13;
    int v18 = 1;
  }
  int v22 = *(_DWORD *)(a1 + 1056);
  uint64_t v23 = *(int *)(a1 + 1100);
  uint64_t v24 = v18 - 1;
  int v25 = *(_DWORD *)(a1 + 1296);
  if (v25 != 3)
  {
    if (v25 == 4)
    {
      if (!*(_DWORD *)(a1 + 2012))
      {
        if (*(_DWORD *)(a1 + 1176)) {
          a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
        }
        else {
          a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
        }
      }
    }
    else
    {
      a2 = 0;
    }
  }
  uint64_t v26 = 0;
  uint64_t v27 = v24 * v23;
  uint64_t v28 = *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)a2;
  int32x4_t v29 = (_DWORD *)(*(void *)(a1 + 1240) + 4 * (int)a2);
  int v30 = *(_DWORD *)(a1 + 1140);
  uint16x8_t v31 = vmovl_u8(*v10);
  int32x4_t v32 = (int32x4_t)vmovl_high_u16(v31);
  int32x4_t v33 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v31.i8);
  while (1)
  {
    uint16x8_t v34 = vmovl_u8(*(uint8x8_t *)(v17 + v26));
    int32x4_t v35 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v34.i8);
    int32x4_t v36 = vsubq_s32((int32x4_t)vmovl_high_u16(v34), v32);
    int32x4_t v37 = vsubq_s32(v35, v33);
    a9.i64[0] = *(void *)(v28 + v26);
    int32x4_t v38 = (int32x4_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_1000F4810);
    a9 = (int32x4_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_1000F4800);
    int v39 = vaddvq_s32(vmlaq_s32(vmulq_s32(vmulq_s32(v36, v36), a9), vmulq_s32(v37, v37), v38));
    if (v39 <= v22)
    {
      int16x8_t v40 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v17 + v26 + 8), v10[1]);
      uint16x8_t v41 = vmovl_u8(*(uint8x8_t *)(v28 + v26 + 8));
      int32x4_t v42 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v41.i8);
      a9 = (int32x4_t)vmovl_high_u16(v41);
      int v43 = vaddvq_s32(vmlaq_s32(vmulq_s32(vmull_high_s16(v40, v40), a9), vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v40.i8), v42))+ *v29+ v39;
      if (v43 < v30)
      {
        int16x8_t v44 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v17 + v26 + 16), v10[2]);
        uint16x8_t v45 = vmovl_u8(*(uint8x8_t *)(v28 + v26 + 16));
        int32x4_t v46 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v45.i8);
        a9 = (int32x4_t)vmovl_high_u16(v45);
        int v47 = vaddvq_s32(vmlaq_s32(vmulq_s32(vmull_high_s16(v44, v44), a9), vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8), v46))+ v43;
        if (v47 < v30)
        {
          int16x8_t v48 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v17 + v26 + 24), v10[3]);
          int32x4_t v49 = vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v48.i8);
          uint16x8_t v50 = vmovl_u8(*(uint8x8_t *)(v28 + v26 + 24));
          int32x4_t v51 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v50.i8);
          int32x4_t v52 = (int32x4_t)vmovl_high_u16(v50);
          int32x4_t v53 = vmulq_s32(vmull_high_s16(v48, v48), v52);
          v52.i32[0] = *(_DWORD *)(v17 + v26 + 32);
          v9.i32[0] = v10[4].i32[0];
          uint16x4_t v54 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
          int32x4_t v55 = (int32x4_t)vsubl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v52.i8), v54);
          a9 = vmulq_s32(v55, v55);
          v54.i32[0] = *(_DWORD *)(v28 + v26 + 32);
          int32x4_t v9 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v54));
          int v56 = vaddvq_s32(vmlaq_s32(vmlaq_s32(v53, v49, v51), a9, v9)) + v47;
          if (v56 >= v22) {
            int v57 = v22;
          }
          else {
            int v57 = v56;
          }
          if (v56 < v30)
          {
            int v30 = v56;
            int v22 = v57;
          }
        }
      }
    }
    if (v27 == v26) {
      break;
    }
    ++v29;
    v26 += v23;
  }
  return (__int16)(((v30 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_100014948(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 1544);
  uint64_t v7 = sub_1000041EC(a1, a2, a3);
  uint64_t v8 = sub_10000507C(a1, a2, a3);
  if (*(_DWORD *)(a1 + 1296) == 5)
  {
    unsigned int v9 = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 1104);
    if ((int)v10 < 1) {
      return (__int16)((*(_DWORD *)(a1 + 1052) * v9 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
  }
  else
  {
    unsigned int v9 = *(_DWORD *)sub_100005290(a1, a2, a3);
    uint64_t v10 = *(unsigned int *)(a1 + 1104);
    if ((int)v10 < 1) {
      return (__int16)((*(_DWORD *)(a1 + 1052) * v9 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
  }
  if (v10 < 8)
  {
    uint64_t v11 = v10;
    goto LABEL_18;
  }
  if (v10 < 0x20)
  {
    uint64_t v12 = 0;
LABEL_13:
    uint64_t v11 = v10 & 7;
    int32x4_t v46 = 0uLL;
    int32x4_t v47 = (int32x4_t)v9;
    uint64_t v48 = ~v12 + v10;
    uint64_t v49 = v12 - (v10 & 0xFFFFFFF8);
    do
    {
      int16x8_t v50 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(v7 - 7 + v48)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(v6 - 7 + v48)));
      int8x16_t v51 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v8 - 14 + 2 * v48));
      uint16x8_t v52 = (uint16x8_t)vextq_s8(v51, v51, 8uLL);
      int32x4_t v46 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_high_s16(v50), (int32x4_t)vmovl_high_u16(v52))), v46);
      int32x4_t v47 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v50.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8))), v47);
      v48 -= 8;
      v49 += 8;
    }
    while (v49);
    unsigned int v9 = vaddvq_s32(vaddq_s32(v47, v46));
    if ((v10 & 0x7FFFFFF8) == v10) {
      return (__int16)((*(_DWORD *)(a1 + 1052) * v9 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
    goto LABEL_18;
  }
  uint64_t v12 = v10 & 0x7FFFFFE0;
  int32x4_t v13 = 0uLL;
  int32x4_t v14 = (int32x4_t)v9;
  uint64_t v15 = v10 - 1;
  uint64_t v16 = v10 & 0xFFFFFFE0;
  int32x4_t v17 = 0uLL;
  int32x4_t v18 = 0uLL;
  int32x4_t v19 = 0uLL;
  int32x4_t v20 = 0uLL;
  int32x4_t v21 = 0uLL;
  int32x4_t v22 = 0uLL;
  do
  {
    uint64_t v23 = v7 + v15;
    int8x16_t v24 = vrev64q_s8(*(int8x16_t *)(v23 - 15));
    uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v24, 8uLL);
    int8x16_t v26 = vrev64q_s8(*(int8x16_t *)(v23 - 31));
    uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v26, 8uLL);
    uint64_t v28 = v6 + v15;
    int8x16_t v29 = vrev64q_s8(*(int8x16_t *)(v28 - 15));
    uint8x16_t v30 = (uint8x16_t)vextq_s8(v29, v29, 8uLL);
    int8x16_t v31 = vrev64q_s8(*(int8x16_t *)(v28 - 31));
    uint8x16_t v32 = (uint8x16_t)vextq_s8(v31, v31, 8uLL);
    int16x8_t v33 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v30.i8);
    int16x8_t v34 = (int16x8_t)vsubl_high_u8(v25, v30);
    int16x8_t v35 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v32.i8);
    int16x8_t v36 = (int16x8_t)vsubl_high_u8(v27, v32);
    uint64_t v37 = v8 + 2 * v15;
    int8x16_t v38 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 30));
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v38, v38, 8uLL);
    int8x16_t v40 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 14));
    uint16x8_t v41 = (uint16x8_t)vextq_s8(v40, v40, 8uLL);
    int8x16_t v42 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 62));
    uint16x8_t v43 = (uint16x8_t)vextq_s8(v42, v42, 8uLL);
    int8x16_t v44 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 46));
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v44, v44, 8uLL);
    int32x4_t v18 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_high_s16(v34), (int32x4_t)vmovl_high_u16(v39))), v18);
    int32x4_t v17 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v34.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8))), v17);
    int32x4_t v13 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_high_s16(v33), (int32x4_t)vmovl_high_u16(v41))), v13);
    int32x4_t v14 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v33.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v41.i8))), v14);
    int32x4_t v22 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_high_s16(v36), (int32x4_t)vmovl_high_u16(v43))), v22);
    int32x4_t v21 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v36.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v43.i8))), v21);
    int32x4_t v20 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_high_s16(v35), (int32x4_t)vmovl_high_u16(v45))), v20);
    int32x4_t v19 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v35.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v45.i8))), v19);
    v15 -= 32;
    v16 -= 32;
  }
  while (v16);
  unsigned int v9 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
  if (v12 == v10) {
    return (__int16)((*(_DWORD *)(a1 + 1052) * v9 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  if ((v10 & 0x18) != 0) {
    goto LABEL_13;
  }
  uint64_t v11 = v10 & 0x1F;
LABEL_18:
  unint64_t v53 = v11 + 1;
  do
  {
    int v54 = (*(unsigned __int8 *)(v7 + (v53 - 2)) - *(unsigned __int8 *)(v6 + (v53 - 2)))
        * *(unsigned __int16 *)(v8 + 2 * (v53 - 2));
    if (v54 < 0) {
      int v54 = -v54;
    }
    v9 += v54;
    --v53;
  }
  while (v53 > 1);
  return (__int16)((*(_DWORD *)(a1 + 1052) * v9 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100014C8C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 1544);
  if (*(_DWORD *)(a1 + 1032))
  {
    uint64_t v5 = sub_100004278(a1, a2, a3);
    sub_100004380(a1, v5, *(void *)(a1 + 1512));
    uint64_t v6 = *(void *)(a1 + 1512);
    uint64_t v7 = *(unsigned int *)(a1 + 1104);
    if ((int)v7 >= 1) {
      goto LABEL_3;
    }
LABEL_6:
    unsigned int v8 = 0;
    return (__int16)((*(_DWORD *)(a1 + 1052) * v8 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  uint64_t v6 = sub_1000041EC(a1, a2, a3);
  uint64_t v7 = *(unsigned int *)(a1 + 1104);
  if ((int)v7 < 1) {
    goto LABEL_6;
  }
LABEL_3:
  if (v7 < 8)
  {
    unsigned int v8 = 0;
    uint64_t v9 = v7;
    goto LABEL_18;
  }
  if (v7 >= 0x20)
  {
    int32x4_t v11 = 0uLL;
    uint64_t v10 = v7 & 0xFFFFFFE0;
    int32x4_t v12 = 0uLL;
    uint64_t v13 = v7 - 1;
    uint64_t v14 = v10;
    int32x4_t v15 = 0uLL;
    int32x4_t v16 = 0uLL;
    int32x4_t v17 = 0uLL;
    int32x4_t v18 = 0uLL;
    int32x4_t v19 = 0uLL;
    int32x4_t v20 = 0uLL;
    do
    {
      uint64_t v21 = v6 + v13;
      int8x16_t v22 = vrev64q_s8(*(int8x16_t *)(v21 - 15));
      uint8x16_t v23 = (uint8x16_t)vextq_s8(v22, v22, 8uLL);
      int8x16_t v24 = vrev64q_s8(*(int8x16_t *)(v21 - 31));
      uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v24, 8uLL);
      uint64_t v26 = v4 + v13;
      int8x16_t v27 = vrev64q_s8(*(int8x16_t *)(v26 - 15));
      uint8x16_t v28 = (uint8x16_t)vextq_s8(v27, v27, 8uLL);
      int8x16_t v29 = vrev64q_s8(*(int8x16_t *)(v26 - 31));
      uint8x16_t v30 = (uint8x16_t)vextq_s8(v29, v29, 8uLL);
      int16x8_t v31 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)v28.i8);
      int16x8_t v32 = (int16x8_t)vsubl_high_u8(v23, v28);
      int16x8_t v33 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v30.i8);
      int16x8_t v34 = (int16x8_t)vsubl_high_u8(v25, v30);
      int32x4_t v16 = vmlal_high_s16(v16, v32, v32);
      int32x4_t v15 = vmlal_s16(v15, *(int16x4_t *)v32.i8, *(int16x4_t *)v32.i8);
      int32x4_t v12 = vmlal_high_s16(v12, v31, v31);
      int32x4_t v11 = vmlal_s16(v11, *(int16x4_t *)v31.i8, *(int16x4_t *)v31.i8);
      int32x4_t v20 = vmlal_high_s16(v20, v34, v34);
      int32x4_t v19 = vmlal_s16(v19, *(int16x4_t *)v34.i8, *(int16x4_t *)v34.i8);
      int32x4_t v18 = vmlal_high_s16(v18, v33, v33);
      int32x4_t v17 = vmlal_s16(v17, *(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8);
      v13 -= 32;
      v14 -= 32;
    }
    while (v14);
    unsigned int v8 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v17, v11), vaddq_s32(v19, v15)), vaddq_s32(vaddq_s32(v18, v12), vaddq_s32(v20, v16))));
    if (v10 == v7) {
      return (__int16)((*(_DWORD *)(a1 + 1052) * v8 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
    if ((v7 & 0x18) == 0)
    {
      uint64_t v9 = v7 & 0x1F;
LABEL_18:
      unint64_t v40 = v9 + 1;
      do
      {
        int v41 = *(unsigned __int8 *)(v6 + (v40 - 2)) - *(unsigned __int8 *)(v4 + (v40 - 2));
        v8 += v41 * v41;
        --v40;
      }
      while (v40 > 1);
      return (__int16)((*(_DWORD *)(a1 + 1052) * v8 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v9 = v7 & 7;
  int32x4_t v35 = (int32x4_t)v8;
  int32x4_t v36 = 0uLL;
  uint64_t v37 = ~v10 + v7;
  uint64_t v38 = v10 - (v7 & 0xFFFFFFF8);
  do
  {
    int16x8_t v39 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(v6 - 7 + v37)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(v4 - 7 + v37)));
    int32x4_t v36 = vmlal_high_s16(v36, v39, v39);
    int32x4_t v35 = vmlal_s16(v35, *(int16x4_t *)v39.i8, *(int16x4_t *)v39.i8);
    v37 -= 8;
    v38 += 8;
  }
  while (v38);
  unsigned int v8 = vaddvq_s32(vaddq_s32(v35, v36));
  if ((v7 & 0x7FFFFFF8) != v7) {
    goto LABEL_18;
  }
  return (__int16)((*(_DWORD *)(a1 + 1052) * v8 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100014EB4(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 1544);
  uint64_t v5 = sub_1000041EC(a1, a2, a3);
  uint64_t v6 = *(unsigned int *)(a1 + 1104);
  if ((int)v6 < 1)
  {
    unsigned int v7 = 0;
    return (__int16)((*(_DWORD *)(a1 + 1052) * v7 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  if (v6 < 8)
  {
    unsigned int v7 = 0;
    uint64_t v8 = *(unsigned int *)(a1 + 1104);
    goto LABEL_16;
  }
  if (v6 < 0x20)
  {
    unsigned int v7 = 0;
    uint64_t v9 = 0;
LABEL_11:
    uint64_t v8 = v6 & 7;
    int32x4_t v30 = (int32x4_t)v7;
    int32x4_t v31 = 0uLL;
    uint64_t v32 = ~v9 + v6;
    uint64_t v33 = v9 - (v6 & 0xFFFFFFF8);
    do
    {
      uint16x8_t v34 = vmovl_u8((uint8x8_t)vrev64_s8((int8x8_t)vabd_u8(*(uint8x8_t *)(v5 - 7 + v32), *(uint8x8_t *)(v4 - 7 + v32))));
      int32x4_t v31 = (int32x4_t)vaddw_high_u16((uint32x4_t)v31, v34);
      int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
      v32 -= 8;
      v33 += 8;
    }
    while (v33);
    unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v31));
    if ((v6 & 0x7FFFFFF8) == v6) {
      return (__int16)((*(_DWORD *)(a1 + 1052) * v7 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
    goto LABEL_16;
  }
  int32x4_t v10 = 0uLL;
  uint64_t v9 = v6 & 0xFFFFFFE0;
  int32x4_t v11 = 0uLL;
  uint64_t v12 = v6 - 1;
  uint64_t v13 = v9;
  int32x4_t v14 = 0uLL;
  int32x4_t v15 = 0uLL;
  int32x4_t v16 = 0uLL;
  int32x4_t v17 = 0uLL;
  int32x4_t v18 = 0uLL;
  int32x4_t v19 = 0uLL;
  do
  {
    uint64_t v20 = v5 + v12;
    uint64_t v21 = v4 + v12;
    int8x16_t v22 = vrev64q_s8((int8x16_t)vabdq_u8(*(uint8x16_t *)(v20 - 15), *(uint8x16_t *)(v21 - 15)));
    uint8x16_t v23 = (uint8x16_t)vextq_s8(v22, v22, 8uLL);
    uint16x8_t v24 = vmovl_u8(*(uint8x8_t *)v23.i8);
    uint16x8_t v25 = vmovl_high_u8(v23);
    int8x16_t v26 = vrev64q_s8((int8x16_t)vabdq_u8(*(uint8x16_t *)(v20 - 31), *(uint8x16_t *)(v21 - 31)));
    uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v26, 8uLL);
    uint16x8_t v28 = vmovl_u8(*(uint8x8_t *)v27.i8);
    uint16x8_t v29 = vmovl_high_u8(v27);
    int32x4_t v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v25);
    int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
    int32x4_t v11 = (int32x4_t)vaddw_high_u16((uint32x4_t)v11, v24);
    int32x4_t v10 = (int32x4_t)vaddw_u16((uint32x4_t)v10, *(uint16x4_t *)v24.i8);
    int32x4_t v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, v29);
    int32x4_t v18 = (int32x4_t)vaddw_u16((uint32x4_t)v18, *(uint16x4_t *)v29.i8);
    int32x4_t v17 = (int32x4_t)vaddw_high_u16((uint32x4_t)v17, v28);
    int32x4_t v16 = (int32x4_t)vaddw_u16((uint32x4_t)v16, *(uint16x4_t *)v28.i8);
    v12 -= 32;
    v13 -= 32;
  }
  while (v13);
  unsigned int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v16, v10), vaddq_s32(v18, v14)), vaddq_s32(vaddq_s32(v17, v11), vaddq_s32(v19, v15))));
  if (v9 == v6) {
    return (__int16)((*(_DWORD *)(a1 + 1052) * v7 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  if ((v6 & 0x18) != 0) {
    goto LABEL_11;
  }
  uint64_t v8 = v6 & 0x1F;
LABEL_16:
  unint64_t v35 = v8 + 1;
  do
  {
    int v36 = *(unsigned __int8 *)(v5 + (v35 - 2)) - *(unsigned __int8 *)(v4 + (v35 - 2));
    if (v36 < 0) {
      int v36 = *(unsigned __int8 *)(v4 + (v35 - 2)) - *(unsigned __int8 *)(v5 + (v35 - 2));
    }
    v7 += v36;
    --v35;
  }
  while (v35 > 1);
  return (__int16)((*(_DWORD *)(a1 + 1052) * v7 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_1000150A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = **(_DWORD **)(a1 + 1240);
  uint64_t v4 = *(unsigned int *)(a1 + 1104);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = *(void *)(a1 + 1208);
    if (v4 < 8)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 1104);
      goto LABEL_15;
    }
    if (v4 >= 0x20)
    {
      uint64_t v7 = v4 & 0x7FFFFFE0;
      int32x4_t v8 = 0uLL;
      int32x4_t v9 = (int32x4_t)**(unsigned int **)(a1 + 1240);
      uint64_t v10 = v4 - 1;
      uint64_t v11 = v4 & 0xFFFFFFE0;
      int32x4_t v12 = 0uLL;
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = 0uLL;
      int32x4_t v16 = 0uLL;
      int32x4_t v17 = 0uLL;
      do
      {
        uint64_t v18 = v5 + 2 * v10;
        int8x16_t v19 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v18 - 30));
        uint16x8_t v20 = (uint16x8_t)vextq_s8(v19, v19, 8uLL);
        int8x16_t v21 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v18 - 14));
        uint16x8_t v22 = (uint16x8_t)vextq_s8(v21, v21, 8uLL);
        int8x16_t v23 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v18 - 62));
        uint16x8_t v24 = (uint16x8_t)vextq_s8(v23, v23, 8uLL);
        int8x16_t v25 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v18 - 46));
        uint16x8_t v26 = (uint16x8_t)vextq_s8(v25, v25, 8uLL);
        uint64_t v27 = a2 + v10;
        int8x16_t v28 = vrev64q_s8(*(int8x16_t *)(v27 - 15));
        uint8x16_t v29 = (uint8x16_t)vextq_s8(v28, v28, 8uLL);
        int8x16_t v30 = vrev64q_s8(*(int8x16_t *)(v27 - 31));
        uint8x16_t v31 = (uint8x16_t)vextq_s8(v30, v30, 8uLL);
        uint64_t v32 = a3 + v10;
        int8x16_t v33 = vrev64q_s8(*(int8x16_t *)(v32 - 15));
        uint8x16_t v34 = (uint8x16_t)vextq_s8(v33, v33, 8uLL);
        int8x16_t v35 = vrev64q_s8(*(int8x16_t *)(v32 - 31));
        uint8x16_t v36 = (uint8x16_t)vextq_s8(v35, v35, 8uLL);
        int16x8_t v37 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v34.i8);
        int32x4_t v38 = vmovl_s16(*(int16x4_t *)v37.i8);
        int32x4_t v39 = vmovl_high_s16(v37);
        int16x8_t v40 = (int16x8_t)vsubl_high_u8(v29, v34);
        int32x4_t v41 = vmovl_s16(*(int16x4_t *)v40.i8);
        int32x4_t v42 = vmovl_high_s16(v40);
        int16x8_t v43 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v36.i8);
        int32x4_t v44 = vmovl_s16(*(int16x4_t *)v43.i8);
        int32x4_t v45 = vmovl_high_s16(v43);
        int16x8_t v46 = (int16x8_t)vsubl_high_u8(v31, v36);
        int32x4_t v47 = vmovl_s16(*(int16x4_t *)v46.i8);
        int32x4_t v48 = vmovl_high_s16(v46);
        int32x4_t v13 = vmlaq_s32(v13, vmulq_s32(v42, (int32x4_t)vmovl_high_u16(v20)), v42);
        int32x4_t v12 = vmlaq_s32(v12, vmulq_s32(v41, (int32x4_t)vmovl_u16(*(uint16x4_t *)v20.i8)), v41);
        int32x4_t v8 = vmlaq_s32(v8, vmulq_s32(v39, (int32x4_t)vmovl_high_u16(v22)), v39);
        int32x4_t v9 = vmlaq_s32(v9, vmulq_s32(v38, (int32x4_t)vmovl_u16(*(uint16x4_t *)v22.i8)), v38);
        int32x4_t v17 = vmlaq_s32(v17, vmulq_s32(v48, (int32x4_t)vmovl_high_u16(v24)), v48);
        int32x4_t v16 = vmlaq_s32(v16, vmulq_s32(v47, (int32x4_t)vmovl_u16(*(uint16x4_t *)v24.i8)), v47);
        int32x4_t v15 = vmlaq_s32(v15, vmulq_s32(v45, (int32x4_t)vmovl_high_u16(v26)), v45);
        int32x4_t v14 = vmlaq_s32(v14, vmulq_s32(v44, (int32x4_t)vmovl_u16(*(uint16x4_t *)v26.i8)), v44);
        v10 -= 32;
        v11 -= 32;
      }
      while (v11);
      unsigned int v3 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v14, v9), vaddq_s32(v16, v12)), vaddq_s32(vaddq_s32(v15, v8), vaddq_s32(v17, v13))));
      if (v7 == v4) {
        return (__int16)(((v3 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
      }
                                      + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
      if ((v4 & 0x18) == 0)
      {
        uint64_t v6 = v4 & 0x1F;
LABEL_15:
        unint64_t v58 = v6 + 1;
        do
        {
          uint64_t v59 = (v58 - 2);
          int v60 = *(unsigned __int16 *)(v5 + 2 * v59);
          LODWORD(v59) = *(unsigned __int8 *)(a2 + v59) - *(unsigned __int8 *)(a3 + v59);
          v3 += v59 * v60 * v59;
          --v58;
        }
        while (v58 > 1);
        return (__int16)(((v3 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                      + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v6 = v4 & 7;
    int32x4_t v49 = 0uLL;
    int32x4_t v50 = (int32x4_t)v3;
    uint64_t v51 = ~v7 + v4;
    uint64_t v52 = v7 - (v4 & 0xFFFFFFF8);
    do
    {
      int8x16_t v53 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v5 - 14 + 2 * v51));
      uint16x8_t v54 = (uint16x8_t)vextq_s8(v53, v53, 8uLL);
      int16x8_t v55 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(a2 - 7 + v51)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(a3 - 7 + v51)));
      int32x4_t v56 = vmovl_s16(*(int16x4_t *)v55.i8);
      int32x4_t v57 = vmovl_high_s16(v55);
      int32x4_t v49 = vmlaq_s32(v49, vmulq_s32(v57, v57), (int32x4_t)vmovl_high_u16(v54));
      int32x4_t v50 = vmlaq_s32(v50, vmulq_s32(v56, v56), (int32x4_t)vmovl_u16(*(uint16x4_t *)v54.i8));
      v51 -= 8;
      v52 += 8;
    }
    while (v52);
    unsigned int v3 = vaddvq_s32(vaddq_s32(v50, v49));
    if ((v4 & 0x7FFFFFF8) != v4) {
      goto LABEL_15;
    }
  }
  return (__int16)(((v3 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_100015348(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[276];
  if ((int)v3 < 1)
  {
    unsigned int v4 = 0;
    return (__int16)((a1[263] * v4 + a1[298] / 2) >> a1[299]);
  }
  if (v3 < 8)
  {
    unsigned int v4 = 0;
    uint64_t v5 = a1[276];
    goto LABEL_16;
  }
  if (v3 >= 0x20)
  {
    int32x4_t v7 = 0uLL;
    uint64_t v6 = v3 & 0xFFFFFFE0;
    int32x4_t v8 = 0uLL;
    uint64_t v9 = v3 - 1;
    uint64_t v10 = v6;
    int32x4_t v11 = 0uLL;
    int32x4_t v12 = 0uLL;
    int32x4_t v13 = 0uLL;
    int32x4_t v14 = 0uLL;
    int32x4_t v15 = 0uLL;
    int32x4_t v16 = 0uLL;
    do
    {
      uint64_t v17 = a2 + v9;
      int8x16_t v18 = vrev64q_s8(*(int8x16_t *)(v17 - 15));
      uint8x16_t v19 = (uint8x16_t)vextq_s8(v18, v18, 8uLL);
      int8x16_t v20 = vrev64q_s8(*(int8x16_t *)(v17 - 31));
      uint8x16_t v21 = (uint8x16_t)vextq_s8(v20, v20, 8uLL);
      uint64_t v22 = a3 + v9;
      int8x16_t v23 = vrev64q_s8(*(int8x16_t *)(v22 - 15));
      uint8x16_t v24 = (uint8x16_t)vextq_s8(v23, v23, 8uLL);
      int8x16_t v25 = vrev64q_s8(*(int8x16_t *)(v22 - 31));
      uint8x16_t v26 = (uint8x16_t)vextq_s8(v25, v25, 8uLL);
      int16x8_t v27 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v24.i8);
      int16x8_t v28 = (int16x8_t)vsubl_high_u8(v19, v24);
      int16x8_t v29 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v26.i8);
      int16x8_t v30 = (int16x8_t)vsubl_high_u8(v21, v26);
      int32x4_t v12 = vmlal_high_s16(v12, v28, v28);
      int32x4_t v11 = vmlal_s16(v11, *(int16x4_t *)v28.i8, *(int16x4_t *)v28.i8);
      int32x4_t v8 = vmlal_high_s16(v8, v27, v27);
      int32x4_t v7 = vmlal_s16(v7, *(int16x4_t *)v27.i8, *(int16x4_t *)v27.i8);
      int32x4_t v16 = vmlal_high_s16(v16, v30, v30);
      int32x4_t v15 = vmlal_s16(v15, *(int16x4_t *)v30.i8, *(int16x4_t *)v30.i8);
      int32x4_t v14 = vmlal_high_s16(v14, v29, v29);
      int32x4_t v13 = vmlal_s16(v13, *(int16x4_t *)v29.i8, *(int16x4_t *)v29.i8);
      v9 -= 32;
      v10 -= 32;
    }
    while (v10);
    unsigned int v4 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v13, v7), vaddq_s32(v15, v11)), vaddq_s32(vaddq_s32(v14, v8), vaddq_s32(v16, v12))));
    if (v6 == v3) {
      return (__int16)((a1[263] * v4 + a1[298] / 2) >> a1[299]);
    }
    if ((v3 & 0x18) == 0)
    {
      uint64_t v5 = v3 & 0x1F;
LABEL_16:
      unint64_t v36 = v5 + 1;
      do
      {
        int v37 = *(unsigned __int8 *)(a2 + (v36 - 2)) - *(unsigned __int8 *)(a3 + (v36 - 2));
        v4 += v37 * v37;
        --v36;
      }
      while (v36 > 1);
      return (__int16)((a1[263] * v4 + a1[298] / 2) >> a1[299]);
    }
  }
  else
  {
    unsigned int v4 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v5 = v3 & 7;
  int32x4_t v31 = (int32x4_t)v4;
  int32x4_t v32 = 0uLL;
  uint64_t v33 = ~v6 + v3;
  uint64_t v34 = v6 - (v3 & 0xFFFFFFF8);
  do
  {
    int16x8_t v35 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(a2 - 7 + v33)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(a3 - 7 + v33)));
    int32x4_t v32 = vmlal_high_s16(v32, v35, v35);
    int32x4_t v31 = vmlal_s16(v31, *(int16x4_t *)v35.i8, *(int16x4_t *)v35.i8);
    v33 -= 8;
    v34 += 8;
  }
  while (v34);
  unsigned int v4 = vaddvq_s32(vaddq_s32(v31, v32));
  if ((v3 & 0x7FFFFFF8) != v3) {
    goto LABEL_16;
  }
  return (__int16)((a1[263] * v4 + a1[298] / 2) >> a1[299]);
}

uint64_t sub_100015518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 1104);
  if ((int)v3 < 1) {
    return 0;
  }
  if (v3 < 8)
  {
    unsigned int v4 = 0;
    uint64_t v5 = *(unsigned int *)(a1 + 1104);
    goto LABEL_18;
  }
  if (v3 < 0x20)
  {
    unsigned int v4 = 0;
    uint64_t v7 = 0;
    goto LABEL_11;
  }
  int32x4_t v8 = 0uLL;
  uint64_t v7 = v3 & 0xFFFFFFE0;
  int32x4_t v9 = 0uLL;
  uint64_t v10 = v3 - 1;
  uint64_t v11 = v7;
  int32x4_t v12 = 0uLL;
  int32x4_t v13 = 0uLL;
  int32x4_t v14 = 0uLL;
  int32x4_t v15 = 0uLL;
  int32x4_t v16 = 0uLL;
  int32x4_t v17 = 0uLL;
  do
  {
    uint64_t v18 = a2 + v10;
    int8x16_t v19 = vrev64q_s8(*(int8x16_t *)(v18 - 15));
    uint8x16_t v20 = (uint8x16_t)vextq_s8(v19, v19, 8uLL);
    int8x16_t v21 = vrev64q_s8(*(int8x16_t *)(v18 - 31));
    uint8x16_t v22 = (uint8x16_t)vextq_s8(v21, v21, 8uLL);
    uint64_t v23 = a3 + v10;
    int8x16_t v24 = vrev64q_s8(*(int8x16_t *)(v23 - 15));
    uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v24, 8uLL);
    int8x16_t v26 = vrev64q_s8(*(int8x16_t *)(v23 - 31));
    uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v26, 8uLL);
    int16x8_t v28 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)v25.i8);
    int16x8_t v29 = (int16x8_t)vsubl_high_u8(v20, v25);
    int16x8_t v30 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v27.i8);
    int16x8_t v31 = (int16x8_t)vsubl_high_u8(v22, v27);
    int32x4_t v13 = vmlal_high_s16(v13, v29, v29);
    int32x4_t v12 = vmlal_s16(v12, *(int16x4_t *)v29.i8, *(int16x4_t *)v29.i8);
    int32x4_t v9 = vmlal_high_s16(v9, v28, v28);
    int32x4_t v8 = vmlal_s16(v8, *(int16x4_t *)v28.i8, *(int16x4_t *)v28.i8);
    int32x4_t v17 = vmlal_high_s16(v17, v31, v31);
    int32x4_t v16 = vmlal_s16(v16, *(int16x4_t *)v31.i8, *(int16x4_t *)v31.i8);
    int32x4_t v15 = vmlal_high_s16(v15, v30, v30);
    int32x4_t v14 = vmlal_s16(v14, *(int16x4_t *)v30.i8, *(int16x4_t *)v30.i8);
    v10 -= 32;
    v11 -= 32;
  }
  while (v11);
  unsigned int v4 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v14, v8), vaddq_s32(v16, v12)), vaddq_s32(vaddq_s32(v15, v9), vaddq_s32(v17, v13))));
  if (v7 == v3) {
    goto LABEL_14;
  }
  if ((v3 & 0x18) != 0)
  {
LABEL_11:
    uint64_t v5 = v3 & 7;
    int32x4_t v32 = (int32x4_t)v4;
    int32x4_t v33 = 0uLL;
    uint64_t v34 = ~v7 + v3;
    uint64_t v35 = v7 - (v3 & 0xFFFFFFF8);
    do
    {
      int16x8_t v36 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(a2 - 7 + v34)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(a3 - 7 + v34)));
      int32x4_t v33 = vmlal_high_s16(v33, v36, v36);
      int32x4_t v32 = vmlal_s16(v32, *(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8);
      v34 -= 8;
      v35 += 8;
    }
    while (v35);
    unsigned int v4 = vaddvq_s32(vaddq_s32(v32, v33));
    if ((v3 & 0x7FFFFFF8) == v3) {
      goto LABEL_14;
    }
    goto LABEL_18;
  }
  uint64_t v5 = v3 & 0x1F;
LABEL_18:
  unint64_t v37 = v5 + 1;
  do
  {
    int v38 = *(unsigned __int8 *)(a2 + (v37 - 2)) - *(unsigned __int8 *)(a3 + (v37 - 2));
    v4 += v38 * v38;
    --v37;
  }
  while (v37 > 1);
LABEL_14:
  if (v4 >= 0x7FFF) {
    return 0x7FFFLL;
  }
  else {
    return v4;
  }
}

uint64_t sub_1000156DC(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 1544);
  uint64_t v7 = sub_1000041EC(a1, a2, a3);
  uint64_t v8 = sub_10000507C(a1, a2, a3);
  unsigned int v9 = *(_DWORD *)sub_100005290(a1, a2, a3);
  int v10 = *(_DWORD *)(a1 + 1104);
  uint64_t v11 = (v10 - 2);
  if (v10 >= 2)
  {
    uint64_t v12 = (v10 - 1);
    LODWORD(v13) = v10 + 1;
    int32x4_t v14 = (unsigned __int8 *)(v6 + v12);
    int32x4_t v15 = (unsigned __int8 *)(v6 + v11);
    do
    {
      unint64_t v13 = (v13 - 2);
      unsigned int v16 = *(unsigned __int8 *)(v7 + (v13 >> 1));
      int v17 = *v14;
      v14 -= 2;
      int v18 = (v16 >> 4) - v17;
      int v19 = *v15;
      v15 -= 2;
      v9 += v18 * v18 * (*(unsigned __int8 *)(v8 + (v13 >> 1)) >> 4)
          + ((v16 & 0xF) - v19) * (*(unsigned char *)(v8 + (v13 >> 1)) & 0xF) * ((v16 & 0xF) - v19);
    }
    while (v13 > 2);
  }
  return (__int16)(((v9 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_1000157DC(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 1544);
  if (*(_DWORD *)(a1 + 1032))
  {
    uint64_t v5 = sub_100004278(a1, a2, a3);
    sub_100004380(a1, v5, *(void *)(a1 + 1512));
    uint64_t v6 = *(void *)(a1 + 1512);
    int v7 = *(_DWORD *)(a1 + 1104);
    if (v7 >= 2) {
      goto LABEL_3;
    }
LABEL_9:
    int v11 = 0;
    return (__int16)((*(_DWORD *)(a1 + 1052) * v11 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  uint64_t v6 = sub_1000041EC(a1, a2, a3);
  int v7 = *(_DWORD *)(a1 + 1104);
  if (v7 < 2) {
    goto LABEL_9;
  }
LABEL_3:
  unsigned int v8 = v7 - 1;
  if ((v7 - 1) >= 2) {
    int v9 = 2;
  }
  else {
    int v9 = v7 - 1;
  }
  unsigned int v10 = v7 - v9;
  if (v10 < 2)
  {
    int v11 = 0;
LABEL_13:
    uint64_t v23 = (unsigned __int8 *)(v4 + v8);
    int8x16_t v24 = (unsigned __int8 *)(v4 + v8 - 1);
    do
    {
      unsigned int v25 = *(unsigned __int8 *)(v6 + ((unint64_t)v8 >> 1));
      int v26 = *v23;
      v23 -= 2;
      int v27 = (v25 >> 4) - v26;
      int v28 = *v24;
      v24 -= 2;
      v11 += v27 * v27 + ((v25 & 0xF) - v28) * ((v25 & 0xF) - v28);
      BOOL v29 = v8 >= 2;
      v8 -= 2;
    }
    while (v8 != 0 && v29);
    return (__int16)((*(_DWORD *)(a1 + 1052) * v11 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  int v12 = 0;
  int v13 = 0;
  int v14 = (v10 >> 1) + 1;
  v8 -= 2 * (v14 & 0x7FFFFFFE);
  unsigned int v15 = v7 - 4;
  int v16 = v14 & 0x7FFFFFFE;
  do
  {
    unint64_t v17 = v15 + 3;
    unint64_t v18 = v15 + 1;
    unsigned int v19 = *(unsigned __int8 *)(v6 + (v17 >> 1));
    unsigned int v20 = *(unsigned __int8 *)(v6 + (v18 >> 1));
    LODWORD(v17) = (v19 >> 4) - *(unsigned __int8 *)(v4 + v17);
    LODWORD(v18) = (v20 >> 4) - *(unsigned __int8 *)(v4 + v18);
    int v21 = (v19 & 0xF) - *(unsigned __int8 *)(v4 + v15 + 2);
    int v22 = (v20 & 0xF) - *(unsigned __int8 *)(v4 + v15);
    v12 += v17 * v17 + v21 * v21;
    v13 += v18 * v18 + v22 * v22;
    v15 -= 4;
    v16 -= 2;
  }
  while (v16);
  int v11 = v13 + v12;
  if (v14 != (v14 & 0x7FFFFFFE)) {
    goto LABEL_13;
  }
  return (__int16)((*(_DWORD *)(a1 + 1052) * v11 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

void sub_100015968(uint64_t a1)
{
  *(void *)(a1 + 1608) = 0x1FFFF4000;
  int v1 = *(_DWORD *)(a1 + 1824);
  if (v1 >= *(_DWORD *)(a1 + 1828))
  {
    *(_DWORD *)(a1 + 1824) = 0;
    unsigned int v3 = *(_DWORD *)(a1 + 1808);
    if (v3 >= 2)
    {
      signed int v4 = v3 - 1;
      int v5 = v3 >> 1;
      if (v5 >= 1) {
        int v6 = 1;
      }
      else {
        int v6 = v5;
      }
      memset_pattern16((void *)(*(void *)(a1 + 1800) - 8 * (v5 - v6) + 4 * v4 - 4), &unk_1000F4890, 8 * (v5 - v6) + 8);
    }
  }
  else
  {
    if (v1 >= 1)
    {
      uint64_t v2 = 0;
      do
        *(_WORD *)(*(void *)(a1 + 1792) + 2 * *(unsigned __int16 *)(*(void *)(a1 + 1832) + 2 * v2++)) = 0x4000;
      while (v2 < *(int *)(a1 + 1824));
    }
    *(_DWORD *)(a1 + 1824) = 0;
  }
}

uint64_t sub_100015A08(uint64_t a1, int a2, _DWORD *a3)
{
  int v3 = *(_DWORD *)(a1 + 1096);
  uint64_t v4 = *(void *)(a1 + 1368);
  int v5 = v3;
  if (*(unsigned __int16 *)(a1 + 1390) == a2) {
    int v5 = *(_DWORD *)(a1 + 1392);
  }
  *a3 = v5;
  return v4 + 2 * v3 * a2;
}

uint64_t sub_100015A34(uint64_t a1, int a2)
{
  return *(void *)(a1 + 1368) + 2 * *(_DWORD *)(a1 + 1096) * a2;
}

uint64_t sub_100015A48(uint64_t a1, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 1712))();
  *(_WORD *)(*(void *)(a1 + 1792) + 2 * a2) = result;
  uint64_t v5 = *(int *)(a1 + 1824);
  if ((int)v5 < *(_DWORD *)(a1 + 1828))
  {
    uint64_t v6 = *(void *)(a1 + 1832);
    *(_DWORD *)(a1 + 1824) = v5 + 1;
    *(_WORD *)(v6 + 2 * v5) = a2;
  }
  int v7 = *(__int16 *)(a1 + 1608);
  if ((int)result <= v7
    && ((int)result < v7 || *(unsigned __int16 *)(a1 + 1610) > a2)
    && *(unsigned __int16 *)(a1 + 1960) != a2
    && *(unsigned __int16 *)(a1 + 1388) != a2)
  {
    *(_WORD *)(a1 + 1608) = result;
    *(_WORD *)(a1 + 1610) = a2;
    *(_DWORD *)(a1 + 1612) = 1;
  }
  return result;
}

uint64_t sub_100015AE0(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  unsigned int v3 = a2 - v2;
  if ((int)a2 >= v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 792);
    uint64_t v5 = (uint64_t *)(a1 + 800);
    uint64_t v6 = (uint64_t *)(a1 + 808);
    int v7 = 6 * v3;
  }
  else
  {
    unsigned int v3 = a2;
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      }
      else {
        unsigned int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      }
    }
    int v7 = *(_DWORD *)(a1 + 1128) * v3;
    int v8 = *(_DWORD *)(a1 + 1080);
    BOOL v9 = v8 <= (int)a2;
    uint64_t v4 = (uint64_t *)(a1 + 144);
    if (v8 <= (int)a2)
    {
      uint64_t v5 = (uint64_t *)(a1 + 104);
    }
    else
    {
      uint64_t v4 = (uint64_t *)(a1 + 136);
      uint64_t v5 = (uint64_t *)(a1 + 32);
    }
    if (v9) {
      uint64_t v6 = (uint64_t *)(a1 + 120);
    }
    else {
      uint64_t v6 = (uint64_t *)(a1 + 48);
    }
  }
  uint64_t v10 = *v6;
  uint64_t v11 = *v5;
  uint64_t v12 = *v4;
  uint64_t v13 = 4 * (int)v3;
  int v14 = (_DWORD *)(v10 + v13);
  if (!v10) {
    int v14 = 0;
  }
  uint64_t v15 = *(void *)(a1 + 1552);
  uint32x2_t v16 = *(uint32x2_t *)v15;
  uint32x4_t v17 = *(uint32x4_t *)(v15 + 8);
  if ((int)a2 >= v2)
  {
    int v18 = 1;
  }
  else if (*(_DWORD *)(a1 + 1176))
  {
    int v18 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2 + 4) - *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    if (v18 < 1) {
      goto LABEL_28;
    }
  }
  else
  {
    int v18 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2 + 2)
        - *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    if (v18 < 1)
    {
LABEL_28:
      int v28 = 0x40000000;
      return (__int16)((*(_DWORD *)(a1 + 1052) * v28 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
  }
  unsigned int v19 = (int *)(v11 + v13);
  uint32x2_t v20 = vshr_n_u32(v16, 8uLL);
  uint64_t v21 = *(void *)&v16 & 0xFF00FF00FF00FFLL;
  unint64_t v22 = *(void *)&v20 & 0xFFFF00FFFFFF00FFLL;
  uint32x4_t v23 = vshrq_n_u32(v17, 8uLL);
  unsigned long long v24 = *(_OWORD *)&v17 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
  unsigned long long v25 = *(_OWORD *)&v23 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  unsigned int v26 = v18 + 1;
  int v27 = (uint32x4_t *)(v12 + 4 * v7 + 8);
  int v28 = 0x40000000;
  do
  {
    int v31 = *v19++;
    v32.i16[0] = v27[-1].i64[1];
    v32.i16[1] = BYTE2(v27[-1].i64[1]);
    v32.i16[2] = BYTE4(v27[-1].i64[1]);
    v32.i16[3] = BYTE6(v27[-1].i64[1]);
    uint32x2_t v33 = (uint32x2_t)vmla_s32(vmul_s32(v32, (int32x2_t)v21), (int32x2_t)(*(void *)&vshr_n_u32((uint32x2_t)v27[-1].u64[1], 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)v22);
    signed __int32 v34 = *(_DWORD *)(a1 + 1572)
        + v31
        - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v33, 0xFuLL), 1), v33, 0xFuLL).u32[0];
    if (v34 <= *(_DWORD *)(a1 + 1056))
    {
      v29.i16[0] = v27->u8[0];
      v29.i16[1] = BYTE2(v27->u32[0]);
      v29.i16[2] = BYTE4(v27->i64[0]);
      v29.i16[3] = BYTE6(v27->i64[0]);
      v29.i16[4] = v27->i64[1];
      v29.i16[5] = BYTE2(v27->i64[1]);
      v29.i16[6] = BYTE12(*(unsigned long long *)v27);
      v29.i16[7] = BYTE14(*(unsigned long long *)v27);
      int v30 = *v14
          + *(_DWORD *)(a1 + 1576)
          + v34
          - vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v29, (int32x4_t)v24), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v27, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)v25), 0xFuLL));
    }
    else
    {
      int v30 = *(_DWORD *)(a1 + 1060) + v34;
    }
    ++v14;
    if (v30 < v28) {
      int v28 = v30;
    }
    --v26;
    int v27 = (uint32x4_t *)((char *)v27 + 24);
  }
  while (v26 > 1);
  return (__int16)((*(_DWORD *)(a1 + 1052) * v28 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100015CE0(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  unsigned int v3 = a2 - v2;
  if ((int)a2 >= v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 792);
    uint64_t v5 = (uint64_t *)(a1 + 800);
    int v6 = 6 * v3;
  }
  else
  {
    unsigned int v3 = a2;
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      }
      else {
        unsigned int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      }
    }
    int v6 = *(_DWORD *)(a1 + 1128) * v3;
    uint64_t v4 = (uint64_t *)(a1 + 136);
    uint64_t v5 = (uint64_t *)(a1 + 32);
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      uint64_t v4 = (uint64_t *)(a1 + 144);
      uint64_t v5 = (uint64_t *)(a1 + 104);
    }
  }
  uint64_t v7 = *v5;
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(a1 + 1552);
  uint32x4_t v10 = *(uint32x4_t *)v9;
  uint32x2_t v11 = *(uint32x2_t *)(v9 + 16);
  if ((int)a2 >= v2)
  {
    int v12 = 1;
  }
  else if (*(_DWORD *)(a1 + 1176))
  {
    int v12 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2 + 4) - *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    if (v12 < 1) {
      goto LABEL_25;
    }
  }
  else
  {
    int v12 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2 + 2)
        - *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    if (v12 < 1)
    {
LABEL_25:
      int v22 = 0x40000000;
      return (__int16)(((*(_DWORD *)(a1 + 1568) + v22) * *(_DWORD *)(a1 + 1052)
                                                  + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
  }
  uint64_t v13 = (int32x4_t *)(v8 + 4 * v6);
  int v14 = (int *)(v7 + 4 * (int)v3);
  uint32x4_t v15 = vshrq_n_u32(v10, 8uLL);
  unsigned long long v16 = *(_OWORD *)&v10 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
  unsigned long long v17 = *(_OWORD *)&v15 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  uint32x2_t v18 = vshr_n_u32(v11, 8uLL);
  uint64_t v19 = *(void *)&v11 & 0xFF00FF00FF00FFLL;
  unint64_t v20 = *(void *)&v18 & 0xFFFF00FFFFFF00FFLL;
  uint64_t v21 = (v12 - 1);
  if (v21 >= 7)
  {
    uint64_t v24 = (int)v3;
    uint64_t v25 = v21 + 1;
    v12 -= v25 & 0xFFFFFFF8;
    uint32x4_t v23 = (int32x4_t *)((char *)v13 + 24 * (v25 & 0x1FFFFFFF8));
    int32x4_t v88 = vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    int32x4_t v89 = vdupq_lane_s32(*(int32x2_t *)&v16, 0);
    int32x4_t v86 = vdupq_lane_s32(*(int32x2_t *)&v17, 1);
    int32x4_t v87 = vdupq_lane_s32(*(int32x2_t *)&v16, 1);
    int32x4_t v26 = vdupq_laneq_s32((int32x4_t)v16, 2);
    int32x4_t v27 = vdupq_laneq_s32((int32x4_t)v17, 2);
    v14 += v25 & 0x1FFFFFFF8;
    uint64_t v84 = v19;
    unsigned long long v85 = v16;
    int32x4_t v28 = vdupq_laneq_s32((int32x4_t)v16, 3);
    unint64_t v82 = v20;
    unsigned long long v83 = v17;
    int32x4_t v29 = vdupq_laneq_s32((int32x4_t)v17, 3);
    int32x4_t v30 = vdupq_lane_s32((int32x2_t)v19, 0);
    int v31 = (int32x4_t *)(v7 + 4 * v24 + 16);
    int32x4_t v32 = vdupq_lane_s32((int32x2_t)v20, 0);
    v33.i64[0] = 0x4000000040000000;
    v33.i64[1] = 0x4000000040000000;
    int32x4_t v34 = vdupq_lane_s32((int32x2_t)v19, 1);
    uint64_t v35 = v25 & 0x1FFFFFFF8;
    int32x4_t v36 = vdupq_lane_s32((int32x2_t)v20, 1);
    v37.i64[0] = 0x4000000040000000;
    v37.i64[1] = 0x4000000040000000;
    do
    {
      int32x4_t v38 = v13[4];
      int32x4_t v39 = v13[5];
      int32x4_t v41 = v13[2];
      int32x4_t v40 = v13[3];
      int32x4_t v42 = *v13;
      int32x4_t v43 = v13[1];
      int32x4_t v44 = v13[10];
      int32x4_t v45 = v13[11];
      int32x4_t v47 = v13[8];
      int32x4_t v46 = v13[9];
      int32x4_t v48 = v13[6];
      int32x4_t v49 = v13[7];
      v50.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v43, *v13), *(int8x16_t *)v13, 4uLL).u64[0];
      v51.i64[0] = vzip2q_s32(*v13, vuzp1q_s32(*v13, v41)).u64[0];
      v52.i32[1] = HIDWORD(v13[2].i64[0]);
      v52.i32[0] = HIDWORD(*(unsigned long long *)v13);
      int32x4_t v53 = vtrn1q_s32(vuzp1q_s32(v40, v40), v38);
      v54.i64[0] = vzip2q_s32(v48, vuzp1q_s32(v48, v47)).u64[0];
      v42.i32[1] = v13[1].i64[1];
      v55.i32[0] = v48.i32[0];
      LODWORD(v56) = v13[3].i64[1];
      HIDWORD(v56) = v39.i32[0];
      v55.i32[1] = v13[7].i64[1];
      LODWORD(v57) = v13[9].i64[1];
      HIDWORD(v57) = v45.i32[0];
      int32x4_t v58 = (int32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v39, 8uLL);
      v51.i64[1] = v56;
      int32x4_t v59 = vtrn1q_s32(vuzp1q_s32(v38, v38), v39);
      v39.i32[2] = HIDWORD(v13[4].i64[0]);
      v54.i64[1] = v57;
      v38.i32[2] = HIDWORD(v13[3].i64[0]);
      v42.i64[1] = v53.i64[1];
      v52.i64[1] = vzip2q_s32(v40, v58).i64[1];
      v55.i64[1] = vtrn1q_s32(vuzp1q_s32(v46, v46), v44).i64[1];
      v60.i32[1] = HIDWORD(v13[8].i64[0]);
      int32x4_t v61 = (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v45, 8uLL);
      v60.i32[0] = v48.i32[3];
      int32x4_t v62 = vtrn1q_s32(vuzp1q_s32(v44, v44), v45);
      v45.i32[2] = HIDWORD(v13[10].i64[0]);
      HIDWORD(v57) = v44.i32[3];
      LODWORD(v57) = HIDWORD(v13[9].i64[0]);
      v48.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v49, v48), (int8x16_t)v48, 4uLL).u64[0];
      v60.i64[1] = vzip2q_s32(v46, v61).i64[1];
      v50.i64[1] = v38.i64[1];
      v38.i32[0] = v43.i32[0];
      v38.i32[1] = v13[2].i64[1];
      v38.i64[1] = v59.i64[1];
      v44.i32[0] = v49.i32[0];
      v44.i32[1] = v13[8].i64[1];
      v44.i64[1] = v62.i64[1];
      v48.i64[1] = v57;
      v63.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v41, v43), (int8x16_t)v43, 4uLL).u64[0];
      v63.i64[1] = v39.i64[1];
      v39.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v47, v49), (int8x16_t)v49, 4uLL).u64[0];
      v39.i64[1] = v45.i64[1];
      uint32x4_t v64 = vshrq_n_u32((uint32x4_t)v42, 8uLL);
      v42.i16[0] = v13->u8[0];
      v42.i16[1] = BYTE2(v13->u32[0]);
      v42.i16[2] = v13[1].i64[1];
      v42.i16[3] = BYTE2(v13[1].i64[1]);
      v42.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v65 = (uint32x4_t)vmlaq_s32(vmulq_s32(v42, v89), (int32x4_t)(*(_OWORD *)&v64 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v88);
      uint32x4_t v66 = vshrq_n_u32(v55, 8uLL);
      v55.i16[0] = *(_OWORD *)&v13[6];
      v55.i16[1] = BYTE2(*(_OWORD *)&v13[6]);
      v55.i16[2] = v13[7].i64[1];
      v55.i16[3] = BYTE2(v13[7].i64[1]);
      v55.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v67 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v87), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v48, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v86);
      uint32x4_t v68 = vshrq_n_u32(v52, 8uLL);
      v52.i16[0] = v52.u8[0];
      v52.i16[1] = BYTE14(*(unsigned long long *)v13);
      v52.i16[2] = v52.u8[4];
      v52.i16[3] = BYTE6(v13[2].i64[0]);
      v52.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v69 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v52, v28), (int32x4_t)(*(_OWORD *)&v68 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v29);
      uint32x4_t v70 = vshrq_n_u32((uint32x4_t)v38, 8uLL);
      v38.i16[0] = v43.u8[0];
      v38.i16[1] = v43.u8[2];
      v38.i16[2] = v13[2].i64[1];
      v38.i16[3] = BYTE2(v13[2].i64[1]);
      v38.i64[1] = v59.i64[1] & 0xFF00FF00FF00FFLL;
      uint32x4_t v71 = (uint32x4_t)vmlaq_s32(vmulq_s32(v38, v30), (int32x4_t)(*(_OWORD *)&v70 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v32);
      uint32x4_t v72 = vshrq_n_u32(v60, 8uLL);
      v60.i16[0] = BYTE12(*(_OWORD *)&v13[6]);
      v60.i16[1] = BYTE14(*(_OWORD *)&v13[6]);
      v60.i16[2] = v60.u8[4];
      v60.i16[3] = BYTE6(v13[8].i64[0]);
      v60.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v73 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v60, v28), (int32x4_t)(*(_OWORD *)&v72 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v29);
      uint32x4_t v74 = vshrq_n_u32((uint32x4_t)v44, 8uLL);
      v44.i16[0] = v49.u8[0];
      v44.i16[1] = v49.u8[2];
      v44.i16[2] = v13[8].i64[1];
      v44.i16[3] = BYTE2(v13[8].i64[1]);
      v44.i64[1] = v62.i64[1] & 0xFF00FF00FF00FFLL;
      int32x4_t v33 = vminq_s32(vsubq_s32(v31[-1], (int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v65, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v50 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v87), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v50, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v86), 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32(
                                                   (int32x4_t)(*(_OWORD *)&v51 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v26), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v51, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v27), 0xFuLL), v69, 0xFuLL), v71, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v63 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v34), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v63, 8uLL) & __PAIR128__(
                                                                                              0xFFFF00FFFFFF00FFLL,
                                                                                              0xFFFF00FFFFFF00FFLL)),
                                           v36),
                             0xFuLL)),
              v33);
      int32x4_t v37 = vminq_s32(vsubq_s32(*v31, (int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v55, v89), (int32x4_t)(*(_OWORD *)&v66 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v88), 0xFuLL), v67, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32(
                                                   (int32x4_t)(*(_OWORD *)&v54 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v26), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v54, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v27), 0xFuLL), v73, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32(v44, v30), (int32x4_t)(*(_OWORD *)&v74 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v32), 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32(
                                             (int32x4_t)(*(_OWORD *)&v39 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v34), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v39, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v36), 0xFuLL)), v37);
      v31 += 2;
      v13 += 12;
      v35 -= 8;
    }
    while (v35);
    int v22 = vminvq_s32(vminq_s32(v33, v37));
    uint64_t v19 = v84;
    unsigned long long v16 = v85;
    unint64_t v20 = v82;
    unsigned long long v17 = v83;
    if (v25 == (v25 & 0x1FFFFFFF8)) {
      return (__int16)(((*(_DWORD *)(a1 + 1568) + v22) * *(_DWORD *)(a1 + 1052)
    }
                                                  + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  else
  {
    int v22 = 0x40000000;
    uint32x4_t v23 = v13;
  }
  unsigned int v75 = v12 + 1;
  do
  {
    v76.i16[0] = v23->u8[0];
    v76.i16[1] = BYTE2(v23->u32[0]);
    v76.i16[2] = BYTE4(v23->i64[0]);
    v76.i16[3] = BYTE6(v23->i64[0]);
    v76.i16[4] = v23->i64[1];
    v76.i16[5] = BYTE2(v23->i64[1]);
    v76.i16[6] = BYTE12(*(unsigned long long *)v23);
    v76.i16[7] = BYTE14(*(unsigned long long *)v23);
    v77.i16[0] = v23[1].i64[0];
    v77.i16[1] = BYTE2(v23[1].i64[0]);
    v77.i16[2] = BYTE4(v23[1].i64[0]);
    v77.i16[3] = BYTE6(v23[1].i64[0]);
    uint32x2_t v78 = vshr_n_u32((uint32x2_t)vmla_s32(vmul_s32(v77, (int32x2_t)v19), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v23[1].i8, 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)v20), 0xFuLL);
    int v79 = *v14++;
    __int32 v80 = v79
        - (vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v76, (int32x4_t)v16), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v23, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)v17), 0xFuLL))+ v78.i32[0])- v78.i32[1];
    if (v80 < v22) {
      int v22 = v80;
    }
    --v75;
    uint32x4_t v23 = (int32x4_t *)((char *)v23 + 24);
  }
  while (v75 > 1);
  return (__int16)(((*(_DWORD *)(a1 + 1568) + v22) * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100016194(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 != v3)
  {
    int v5 = *(_DWORD *)(a1 + 1176);
    BOOL v6 = v5 == 0;
    if (*(_DWORD *)(a1 + 2012))
    {
      unsigned int v7 = a2;
    }
    else if (v5)
    {
      BOOL v6 = 0;
      unsigned int v7 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    }
    else
    {
      unsigned int v7 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      BOOL v6 = 1;
    }
    uint64_t v14 = 144;
    if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
      uint64_t v14 = 136;
    }
    uint64_t v15 = 104;
    if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
      uint64_t v15 = 32;
    }
    if (v6)
    {
      int v13 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2 + 2)
          - *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      if (v13 < 1)
      {
LABEL_14:
        int v16 = 0x40000000;
        return (__int16)(((*(_DWORD *)(a1 + 1568) + v16) * *(_DWORD *)(a1 + 1052)
                                                    + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
      }
    }
    else
    {
      int v13 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2 + 4) - *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      if (v13 < 1) {
        goto LABEL_14;
      }
    }
    unsigned long long v17 = *(uint32x2_t **)(a1 + 1552);
    uint64_t v8 = *(void *)(a1 + v14) + 4 * (int)(*(_DWORD *)(a1 + 1128) * v7);
    uint64_t v9 = (int32x4_t *)(*(void *)(a1 + v15) + 4 * (int)v7);
    unsigned __int32 v12 = v17[1].u32[0];
    uint32x2_t v11 = *v17;
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)(a1 + 792) + 24 * v4;
  uint64_t v9 = (int32x4_t *)(*(void *)(a1 + 800) + 4 * v4);
  uint32x4_t v10 = *(uint32x2_t **)(a1 + 1552);
  uint32x2_t v11 = *v10;
  unsigned __int32 v12 = v10[1].u32[0];
  int v13 = 1;
LABEL_17:
  uint32x2_t v18 = vshr_n_u32(v11, 8uLL);
  uint64_t v19 = *(void *)&v11 & 0xFF00FF00FF00FFLL;
  unint64_t v20 = *(void *)&v18 & 0xFFFF00FFFFFF00FFLL;
  unsigned int v21 = v12 & 0xFF00FF;
  unsigned int v22 = (v12 >> 8) & 0xFF00FF;
  uint64_t v23 = (v13 - 1);
  if (v23 >= 8)
  {
    uint64_t v24 = v23 + 1;
    uint64_t v25 = v24 & 7;
    if ((v24 & 7) == 0) {
      uint64_t v25 = 8;
    }
    uint64_t v26 = v24 - v25;
    v13 -= v26;
    uint64_t v27 = v8 + 24 * v26;
    int32x4_t v28 = vdupq_lane_s32((int32x2_t)v19, 0);
    int32x4_t v29 = vdupq_lane_s32((int32x2_t)v20, 0);
    int32x4_t v30 = vdupq_lane_s32((int32x2_t)v19, 1);
    int32x4_t v31 = vdupq_lane_s32((int32x2_t)v20, 1);
    int32x4_t v32 = vdupq_n_s32(v21);
    int32x4_t v33 = (int32x4_t *)((char *)v9 + 4 * v26);
    int32x4_t v34 = vdupq_n_s32(v22);
    uint64_t v35 = v9 + 1;
    v36.i64[0] = 0x4000000040000000;
    v36.i64[1] = 0x4000000040000000;
    v37.i64[0] = 0x4000000040000000;
    v37.i64[1] = 0x4000000040000000;
    do
    {
      int32x4_t v39 = *(int32x4_t *)(v8 + 48);
      int32x4_t v38 = *(int32x4_t *)(v8 + 64);
      int32x4_t v40 = *(int32x4_t *)v8;
      int32x4_t v42 = *(int32x4_t *)(v8 + 144);
      int32x4_t v41 = *(int32x4_t *)(v8 + 160);
      int32x4_t v43 = *(int32x4_t *)(v8 + 96);
      v44.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(*(int32x4_t *)(v8 + 16), *(int32x4_t *)v8), *(int8x16_t *)v8, 4uLL).u64[0];
      v45.i64[0] = vzip2q_s32(*(int32x4_t *)v8, vuzp1q_s32(*(int32x4_t *)v8, *(int32x4_t *)(v8 + 32))).u64[0];
      int32x4_t v46 = vtrn1q_s32(vuzp1q_s32(v39, v39), v38);
      v40.i32[1] = *(void *)(v8 + 24);
      v47.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(*(int32x4_t *)(v8 + 112), v43), (int8x16_t)v43, 4uLL).u64[0];
      v48.i64[0] = vzip2q_s32(v43, vuzp1q_s32(v43, *(int32x4_t *)(v8 + 128))).u64[0];
      v43.i32[1] = *(void *)(v8 + 120);
      int32x4_t v49 = vtrn1q_s32(vuzp1q_s32(v42, v42), v41);
      v38.i32[2] = HIDWORD(*(void *)(v8 + 48));
      v44.i64[1] = v38.i64[1];
      v41.i32[2] = HIDWORD(*(void *)(v8 + 144));
      v47.i64[1] = v41.i64[1];
      v40.i64[1] = v46.i64[1];
      v39.i32[3] = *(_DWORD *)(v8 + 80);
      v45.i64[1] = v39.i64[1];
      v43.i64[1] = v49.i64[1];
      v42.i32[3] = *(_DWORD *)(v8 + 176);
      v48.i64[1] = v42.i64[1];
      uint32x4_t v50 = vshrq_n_u32((uint32x4_t)v40, 8uLL);
      v40.i16[0] = *(_OWORD *)v8;
      v40.i16[1] = BYTE2(*(_OWORD *)v8);
      v40.i16[2] = *(void *)(v8 + 24);
      v40.i16[3] = BYTE2(*(void *)(v8 + 24));
      v40.i64[1] = v46.i64[1] & 0xFF00FF00FF00FFLL;
      uint32x4_t v51 = vshrq_n_u32((uint32x4_t)v43, 8uLL);
      v43.i16[0] = *(_OWORD *)(v8 + 96);
      v43.i16[1] = BYTE2(*(_OWORD *)(v8 + 96));
      v43.i16[2] = *(void *)(v8 + 120);
      v43.i16[3] = BYTE2(*(void *)(v8 + 120));
      v43.i64[1] = v49.i64[1] & 0xFF00FF00FF00FFLL;
      uint32x4_t v52 = vshrq_n_u32(v47, 8uLL);
      v47.i64[0] &= 0xFF00FF00FF00FFuLL;
      v47.i32[2] = v41.i32[2] & 0xFF00FF;
      v47.i16[6] = BYTE12(*(_OWORD *)(v8 + 160));
      v47.i16[7] = BYTE14(*(_OWORD *)(v8 + 160));
      int32x4_t v36 = vminq_s32(vsubq_s32(v35[-1], (int32x4_t)vsraq_n_u32(vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v40, v28), (int32x4_t)(*(_OWORD *)&v50 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v29), 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v44 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v30), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v44, 8uLL) & __PAIR128__(
                                                                                                0xFFFF00FFFFFF00FFLL,
                                                                                                0xFFFF00FFFFFF00FFLL)),
                                             v31),
                               0xFuLL),
                             (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v45 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v32), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v45, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v34), 0xFuLL)), v36);
      int32x4_t v37 = vminq_s32(vsubq_s32(*v35, (int32x4_t)vsraq_n_u32(vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v43, v28), (int32x4_t)(*(_OWORD *)&v51 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v29), 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v47, v30), (int32x4_t)(*(_OWORD *)&v52 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v31), 0xFuLL),
                             (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v32), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v48, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v34), 0xFuLL)), v37);
      v35 += 2;
      v8 += 192;
      v26 -= 8;
    }
    while (v26);
    int v16 = vminvq_s32(vminq_s32(v36, v37));
    uint64_t v8 = v27;
    uint64_t v9 = v33;
  }
  else
  {
    int v16 = 0x40000000;
  }
  unsigned int v53 = v13 + 1;
  uint32x4_t v54 = (_DWORD *)(v8 + 8);
  do
  {
    __int32 v55 = v9->i32[0];
    uint64_t v9 = (int32x4_t *)((char *)v9 + 4);
    v56.i16[0] = *((void *)v54 - 1);
    v56.i16[1] = BYTE2(*((void *)v54 - 1));
    v56.i16[2] = BYTE4(*((void *)v54 - 1));
    v56.i16[3] = BYTE6(*((void *)v54 - 1));
    uint32x2_t v57 = (uint32x2_t)vmla_s32(vmul_s32(v56, (int32x2_t)v19), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v54 - 2), 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)v20);
    int v58 = v55
        - (vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v57, 0xFuLL), 1), v57, 0xFuLL).u32[0]
         + (((*v54 & 0xFF00FF) * v21 + ((*v54 >> 8) & 0xFF00FF) * v22) >> 15));
    if (v58 < v16) {
      int v16 = v58;
    }
    --v53;
    v54 += 6;
  }
  while (v53 > 1);
  return (__int16)(((*(_DWORD *)(a1 + 1568) + v16) * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_1000164EC(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1072) <= (signed int)a2)
  {
    int v5 = 1;
    if (*(_DWORD *)(a1 + 2012)) {
      goto LABEL_10;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      int v2 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
      int v4 = *v2;
      int v3 = v2[1];
    }
    else
    {
      BOOL v6 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      int v4 = *v6;
      int v3 = v6[1];
    }
    int v5 = v3 - v4;
    if (*(_DWORD *)(a1 + 2012))
    {
LABEL_10:
      if (v5 >= 1) {
        goto LABEL_11;
      }
LABEL_17:
      unsigned int v32 = 0x40000000;
      return (__int16)(((v32 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                    + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
    }
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    goto LABEL_10;
  }
  a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
  if (v5 < 1) {
    goto LABEL_17;
  }
LABEL_11:
  unsigned int v7 = *(int32x4_t **)(a1 + 1592);
  uint64_t v8 = *(_DWORD **)(a1 + 1552);
  uint64_t v9 = (_DWORD *)(*(void *)(a1 + 1232) + 4 * (int)(*(_DWORD *)(a1 + 1128) * a2));
  uint32x4_t v10 = (int *)(*(void *)(a1 + 160) + 4 * (int)a2);
  uint32x2_t v11 = (int32x4_t *)(*(void *)(a1 + 192) + 72 * (int)a2);
  unsigned int v12 = v8[1];
  unsigned int v13 = v8[2];
  unsigned int v14 = v8[3];
  unsigned int v15 = v8[4];
  unsigned int v16 = v8[5];
  unsigned int v17 = v8[6];
  unsigned int v18 = v8[8];
  v19.i16[0] = v17;
  v19.i16[1] = BYTE2(v17);
  v19.i16[2] = BYTE1(v17);
  v19.i16[3] = v17 >> 8 >> 16;
  v19.i16[4] = v8[7];
  v19.i16[5] = BYTE2(v8[7]);
  v19.i16[6] = BYTE1(v8[7]);
  v19.i16[7] = (v8[7] >> 8 >> 16);
  v20.i16[0] = v15;
  v20.i16[1] = BYTE2(v15);
  v20.i16[2] = BYTE1(v15);
  v20.i16[3] = v15 >> 8 >> 16;
  v20.i16[4] = v16;
  v20.i16[5] = BYTE2(v16);
  v20.i16[6] = BYTE1(v16);
  v21.i16[0] = v13;
  v21.i16[1] = BYTE2(v13);
  v21.i16[2] = BYTE1(v13);
  v21.i16[3] = v13 >> 8 >> 16;
  v21.i16[4] = v14;
  v21.i16[5] = BYTE2(v14);
  v21.i16[6] = BYTE1(v14);
  v22.i16[0] = *v8;
  v22.i16[1] = BYTE2(*v8);
  v22.i16[2] = BYTE1(*v8);
  v22.i16[3] = (*v8 >> 8 >> 16);
  v22.i16[4] = v12;
  v22.i16[5] = BYTE2(v12);
  v22.i16[6] = BYTE1(v12);
  v22.i16[7] = v12 >> 8 >> 16;
  int v23 = v18 & 0xFF00FF;
  int v24 = (v18 >> 8) & 0xFF00FF;
  int32x4_t v26 = v7[2];
  int32x4_t v25 = v7[3];
  int32x4_t v28 = *v7;
  int32x4_t v27 = v7[1];
  __int32 v29 = v7[4].i32[0];
  __int32 v30 = v7[4].i32[1];
  unsigned int v31 = v5 + 1;
  unsigned int v32 = 0x40000000;
  do
  {
    int v33 = *v10++;
    unsigned int v34 = v9[1];
    unsigned int v35 = v9[3];
    unsigned int v36 = v9[5];
    unsigned int v37 = v9[6];
    unsigned int v38 = v9[7];
    v39.i16[0] = *v9;
    v39.i16[1] = BYTE2(*v9);
    v39.i16[2] = BYTE1(*v9);
    v39.i16[3] = (*v9 >> 8 >> 16);
    v39.i16[4] = v34;
    v39.i16[5] = BYTE2(v34);
    v39.i16[6] = BYTE1(v34);
    v39.i16[7] = v34 >> 8 >> 16;
    v40.i16[0] = v9[2];
    v40.i16[1] = BYTE2(v9[2]);
    v40.i16[2] = BYTE1(v9[2]);
    v40.i16[3] = (v9[2] >> 8 >> 16);
    v40.i16[4] = v35;
    v40.i16[5] = BYTE2(v35);
    v40.i16[6] = BYTE1(v35);
    v40.i16[7] = v35 >> 8 >> 16;
    v41.i16[0] = v37;
    v41.i16[1] = BYTE2(v37);
    v41.i16[2] = BYTE1(v37);
    v41.i16[3] = v37 >> 8 >> 16;
    v41.i16[4] = v38;
    v41.i16[5] = BYTE2(v38);
    v41.i16[6] = BYTE1(v38);
    v41.i16[7] = v38 >> 8 >> 16;
    v42.i16[0] = v9[4];
    v42.i16[1] = BYTE2(v9[4]);
    v42.i16[2] = BYTE1(v9[4]);
    v42.i16[3] = (v9[4] >> 8 >> 16);
    v42.i16[4] = v36;
    v42.i16[5] = BYTE2(v36);
    v42.i16[6] = BYTE1(v36);
    v42.i16[7] = v36 >> 8 >> 16;
    v21.i16[7] = v14 >> 8 >> 16;
    v20.i16[7] = v16 >> 8 >> 16;
    signed int v43 = vaddvq_s32(vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(v39, v28), 0x10uLL), (uint32x4_t)vmulq_s32(v42, v26), 0x10uLL), (int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(v40, v27), 0x10uLL), (uint32x4_t)vmulq_s32(v41, v25), 0x10uLL)))+ ((v29 * (v9[8] & 0xFF00FFu)) >> 16)+ v33- (vaddvq_s32(vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(v22, *v11), 0xFuLL), (uint32x4_t)vmulq_s32(v20, v11[2]), 0xFuLL), (int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(v21, v11[1]), 0xFuLL),
                            (uint32x4_t)vmulq_s32(v19, v11[3]),
                            0xFuLL)))
         + ((v11[4].i32[0] * v23) >> 15)
         + ((v11[4].i32[1] * v24) >> 15))
        + ((v30 * ((v9[8] >> 8) & 0xFF00FFu)) >> 16);
    if (v43 < (int)v32) {
      unsigned int v32 = v43;
    }
    --v31;
    uint32x2_t v11 = (int32x4_t *)((char *)v11 + 72);
    v9 += 9;
  }
  while (v31 > 1);
  return (__int16)(((v32 >> (*(_DWORD *)(a1 + 1196) - 2)) * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_1000167DC(uint64_t a1, unsigned int a2, int a3)
{
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (*(_DWORD *)(a1 + 1176)) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    }
    else {
      int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    }
    a2 = v3 + a3;
  }
  int v4 = (int32x4_t *)(*(void *)(a1 + 192) + 72 * (int)a2);
  int v5 = (_DWORD *)(*(void *)(a1 + 1232) + 4 * (int)(*(_DWORD *)(a1 + 1128) * a2));
  BOOL v6 = *(int **)(a1 + 1552);
  int v7 = *(_DWORD *)(*(void *)(a1 + 160) + 4 * (int)a2);
  uint64_t v8 = *(int32x4_t **)(a1 + 1592);
  int v9 = *v6;
  unsigned int v10 = v6[1];
  unsigned int v11 = *v6 >> 8;
  unsigned int v13 = v6[2];
  unsigned int v12 = v6[3];
  unsigned int v14 = v6[4];
  unsigned int v15 = v6[5];
  unsigned int v16 = v6[6];
  unsigned int v17 = v6[7];
  LODWORD(v6) = v6[8];
  v18.i32[0] = v9 & 0xFF00FF;
  v18.i32[1] = v11 & 0xFF00FF;
  v18.i32[2] = v10 & 0xFF00FF;
  v18.i16[6] = BYTE1(v10);
  v18.i16[7] = v10 >> 8 >> 16;
  v19.i32[0] = v13 & 0xFF00FF;
  v19.i16[2] = BYTE1(v13);
  v19.i16[3] = v13 >> 8 >> 16;
  v19.i32[2] = v12 & 0xFF00FF;
  v19.i16[6] = BYTE1(v12);
  v19.i16[7] = v12 >> 8 >> 16;
  v20.i32[0] = v16 & 0xFF00FF;
  v20.i16[2] = BYTE1(v16);
  v20.i16[3] = v16 >> 8 >> 16;
  v20.i32[2] = v17 & 0xFF00FF;
  v20.i16[6] = BYTE1(v17);
  v20.i16[7] = v17 >> 8 >> 16;
  v21.i32[0] = v14 & 0xFF00FF;
  v21.i16[2] = BYTE1(v14);
  v21.i16[3] = v14 >> 8 >> 16;
  v21.i32[2] = v15 & 0xFF00FF;
  v21.i16[6] = BYTE1(v15);
  v21.i16[7] = v15 >> 8 >> 16;
  uint32x4_t v22 = (uint32x4_t)vmulq_s32(v21, v4[2]);
  uint32x4_t v23 = (uint32x4_t)vmulq_s32(v20, v4[3]);
  int32x4_t v24 = vmulq_s32(v19, v4[1]);
  uint32x4_t v25 = vshrq_n_u32((uint32x4_t)vmulq_s32(v18, *v4), 0xFuLL);
  uint32x4_t v26 = vshrq_n_u32((uint32x4_t)v24, 0xFuLL);
  __int32 v27 = v4[4].i32[1];
  LODWORD(v4) = v4[4].i32[0] * (v6 & 0xFF00FF);
  LODWORD(v6) = v27 * ((v6 >> 8) & 0xFF00FF);
  unsigned int v28 = v5[1];
  unsigned int v30 = v5[2];
  unsigned int v29 = v5[3];
  unsigned int v31 = v5[5];
  unsigned int v32 = v5[6];
  unsigned int v33 = v5[7];
  v34.i16[0] = *v5;
  v34.i16[1] = BYTE2(*v5);
  v34.i32[1] = (*v5 >> 8) & 0xFF00FF;
  v34.i16[4] = v28;
  v34.i16[5] = BYTE2(v28);
  v34.i16[6] = BYTE1(v28);
  v34.i16[7] = v28 >> 8 >> 16;
  v35.i32[0] = v30 & 0xFF00FF;
  v35.i16[2] = BYTE1(v30);
  v35.i16[3] = v30 >> 8 >> 16;
  v35.i32[2] = v29 & 0xFF00FF;
  v35.i16[6] = BYTE1(v29);
  v35.i16[7] = v29 >> 8 >> 16;
  v36.i32[0] = v32 & 0xFF00FF;
  v36.i16[2] = BYTE1(v32);
  v36.i16[3] = v32 >> 8 >> 16;
  v36.i32[2] = v33 & 0xFF00FF;
  v36.i16[6] = BYTE1(v33);
  v36.i16[7] = v33 >> 8 >> 16;
  v24.i16[0] = v5[4];
  v24.i16[1] = BYTE2(v5[4]);
  v24.i16[2] = BYTE1(v5[4]);
  v24.i16[3] = (v5[4] >> 8 >> 16);
  v24.i32[2] = v31 & 0xFF00FF;
  v24.i16[6] = BYTE1(v31);
  v24.i16[7] = v31 >> 8 >> 16;
  return (__int16)((((vaddvq_s32(vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(v34, *v8), 0x10uLL), (uint32x4_t)vmulq_s32(v24, v8[2]), 0x10uLL), (int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(v35, v8[1]), 0x10uLL), (uint32x4_t)vmulq_s32(v36, v8[3]), 0x10uLL)))+ ((v8[4].i32[0] * (v5[8] & 0xFF00FFu)) >> 16)+ v7- (vaddvq_s32(vaddq_s32((int32x4_t)vsraq_n_u32(v25, v22, 0xFuLL), (int32x4_t)vsraq_n_u32(v26, v23, 0xFuLL)))+ (v4 >> 15)+ (v6 >> 15))+ ((v8[4].i32[1] * ((v5[8] >> 8) & 0xFF00FFu)) >> 16)) >> (*(_DWORD *)(a1 + 1196) - 2))* *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_100016A30(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 != v4)
  {
    int v5 = a2;
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        int v6 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      }
      else {
        int v6 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      }
      int v5 = v6 + a3;
    }
    int v9 = *(_DWORD *)(a1 + 1128) * v5;
    int v7 = (void *)(a1 + 136);
    uint64_t v8 = (void *)(a1 + 32);
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      int v7 = (void *)(a1 + 144);
      uint64_t v8 = (void *)(a1 + 104);
    }
  }
  else
  {
    int v7 = (void *)(a1 + 792);
    uint64_t v8 = (void *)(a1 + 800);
    int v9 = 6 * v5;
  }
  uint64_t v10 = *v7 + 4 * v9;
  uint64_t v11 = *(void *)(a1 + 1552);
  v12.i16[0] = *(_OWORD *)v10;
  v12.i16[1] = BYTE2(*(_OWORD *)v10);
  v12.i16[2] = BYTE4(*(void *)v10);
  v12.i16[3] = BYTE6(*(void *)v10);
  v12.i16[4] = *(void *)(v10 + 8);
  v12.i16[5] = BYTE2(*(void *)(v10 + 8));
  v12.i16[6] = BYTE12(*(_OWORD *)v10);
  v12.i16[7] = BYTE14(*(_OWORD *)v10);
  v13.i16[0] = *(_OWORD *)v11;
  v13.i16[1] = BYTE2(*(_OWORD *)v11);
  v13.i16[2] = BYTE4(*(void *)v11);
  v13.i16[3] = BYTE6(*(void *)v11);
  v13.i16[4] = *(void *)(v11 + 8);
  v13.i16[5] = BYTE2(*(void *)(v11 + 8));
  v13.i16[6] = BYTE12(*(_OWORD *)v11);
  v13.i16[7] = BYTE14(*(_OWORD *)v11);
  int32x4_t v14 = (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v12, v13), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v10, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v11, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 0xFuLL);
  v12.i16[2] = BYTE4(*(void *)(v11 + 16));
  v15.i16[3] = BYTE6(*(void *)(v10 + 16));
  v12.i16[1] = BYTE2(*(void *)(v11 + 16));
  v15.i16[2] = BYTE4(*(void *)(v10 + 16));
  v12.i16[0] = *(void *)(v11 + 16);
  v15.i16[1] = BYTE2(*(void *)(v10 + 16));
  v15.i16[0] = *(void *)(v10 + 16);
  *(uint32x2_t *)v12.i8 = vshr_n_u32((uint32x2_t)vmla_s32(vmul_s32(v15, *(int32x2_t *)v12.i8), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v10 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v11 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL)), 0xFuLL);
  v12.i16[3] = BYTE6(*(void *)(v11 + 16));
  return (__int16)(((*(_DWORD *)(*v8 + 4 * v5)
                                               + *(_DWORD *)(a1 + 1568)
                                               - (vaddvq_s32(v14)
                                                + v12.i32[0])
                                               - v12.i32[1])
                                              * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100016B60(uint64_t a1, unsigned int a2, int a3)
{
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (*(_DWORD *)(a1 + 1176)) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    }
    else {
      int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    }
    a2 = v3 + a3;
  }
  uint64_t v4 = *(void *)(a1 + 136) + 24 * (int)a2;
  uint64_t v5 = *(void *)(a1 + 1552);
  v6.i16[0] = *(_OWORD *)v4;
  v6.i16[1] = BYTE2(*(_OWORD *)v4);
  v6.i16[2] = BYTE4(*(void *)v4);
  v6.i16[3] = BYTE6(*(void *)v4);
  v6.i16[4] = *(void *)(v4 + 8);
  v6.i16[5] = BYTE2(*(void *)(v4 + 8));
  v6.i16[6] = BYTE12(*(_OWORD *)v4);
  v6.i16[7] = BYTE14(*(_OWORD *)v4);
  v7.i16[0] = *(_OWORD *)v5;
  v7.i16[1] = BYTE2(*(_OWORD *)v5);
  v7.i16[2] = BYTE4(*(void *)v5);
  v7.i16[3] = BYTE6(*(void *)v5);
  v7.i16[4] = *(void *)(v5 + 8);
  v7.i16[5] = BYTE2(*(void *)(v5 + 8));
  v7.i16[6] = BYTE12(*(_OWORD *)v5);
  v7.i16[7] = BYTE14(*(_OWORD *)v5);
  int32x4_t v8 = (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v6, v7), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v4, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v5, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 0xFuLL);
  v6.i16[2] = BYTE4(*(void *)(v5 + 16));
  v9.i16[3] = BYTE6(*(void *)(v4 + 16));
  v6.i16[1] = BYTE2(*(void *)(v5 + 16));
  v9.i16[2] = BYTE4(*(void *)(v4 + 16));
  v6.i16[0] = *(void *)(v5 + 16);
  v9.i16[1] = BYTE2(*(void *)(v4 + 16));
  v9.i16[0] = *(void *)(v4 + 16);
  *(uint32x2_t *)v6.i8 = vshr_n_u32((uint32x2_t)vmla_s32(vmul_s32(v9, *(int32x2_t *)v6.i8), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v4 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v5 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL)), 0xFuLL);
  v6.i16[3] = BYTE6(*(void *)(v5 + 16));
  return (__int16)(((*(_DWORD *)(*(void *)(a1 + 32) + 4 * (int)a2)
                                               + *(_DWORD *)(a1 + 1568)
                                               - (vaddvq_s32(v8)
                                                + v6.i32[0])
                                               - v6.i32[1])
                                              * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100016C48(uint64_t a1, unsigned int a2, int a3)
{
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (*(_DWORD *)(a1 + 1176)) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    }
    else {
      int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    }
    a2 = v3 + a3;
  }
  uint64_t v4 = (uint32x4_t *)(*(void *)(a1 + 136) + 36 * (int)a2);
  uint64_t v5 = *(uint32x4_t **)(a1 + 1552);
  v9.i16[7] = BYTE14(*(unsigned long long *)v5);
  v8.i16[7] = BYTE14(*(_OWORD *)&v5[1]);
  v7.i16[7] = BYTE14(*(unsigned long long *)v4);
  v6.i16[7] = BYTE14(*(_OWORD *)&v4[1]);
  v9.i16[6] = BYTE12(*(unsigned long long *)v5);
  v8.i16[6] = BYTE12(*(_OWORD *)&v5[1]);
  v7.i16[6] = BYTE12(*(unsigned long long *)v4);
  v6.i16[6] = BYTE12(*(_OWORD *)&v4[1]);
  v9.i16[5] = BYTE2(v5->i64[1]);
  v8.i16[5] = BYTE2(v5[1].i64[1]);
  v7.i16[5] = BYTE2(v4->i64[1]);
  v6.i16[5] = BYTE2(v4[1].i64[1]);
  v9.i16[4] = v5->i64[1];
  v8.i16[4] = v5[1].i64[1];
  v7.i16[4] = v4->i64[1];
  v6.i16[4] = v4[1].i64[1];
  v9.i16[3] = BYTE6(v5->i64[0]);
  v8.i16[3] = BYTE6(v5[1].i64[0]);
  v7.i16[3] = BYTE6(v4->i64[0]);
  v6.i16[3] = BYTE6(v4[1].i64[0]);
  v9.i16[2] = BYTE4(v5->i64[0]);
  v8.i16[2] = BYTE4(v5[1].i64[0]);
  v7.i16[2] = BYTE4(v4->i64[0]);
  v6.i16[2] = BYTE4(v4[1].i64[0]);
  v9.i16[1] = BYTE2(v5->u32[0]);
  v8.i16[1] = BYTE2(*(_OWORD *)&v5[1]);
  v7.i16[1] = BYTE2(v4->u32[0]);
  v6.i16[1] = BYTE2(*(_OWORD *)&v4[1]);
  v9.i16[0] = v5->u8[0];
  v8.i16[0] = *(_OWORD *)&v5[1];
  v7.i16[0] = v4->u8[0];
  v6.i16[0] = *(_OWORD *)&v4[1];
  return (__int16)(((*(_DWORD *)(*(void *)(a1 + 32) + 4 * (int)a2)
                                 + *(_DWORD *)(a1 + 1568)
                                 - (vaddvq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v7, v9), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v4, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v5, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32(v6, v8), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v4[1], 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v5[1], 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 0xFuLL))+ (((v4[2].i32[0] & 0xFF00FF) * (v5[2].i32[0] & 0xFF00FF)+ (((unsigned __int32)v4[2].i32[0] >> 8) & 0xFF00FF)* (((unsigned __int32)v5[2].i32[0] >> 8) & 0xFF00FF)) >> 15)))* *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100016D44(uint64_t a1, unsigned int a2, int a3)
{
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (*(_DWORD *)(a1 + 1176)) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    }
    else {
      int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    }
    a2 = v3 + a3;
  }
  uint64_t v4 = (uint32x2_t *)(*(void *)(a1 + 136) + 24 * (int)a2);
  uint64_t v5 = *(uint32x2_t **)(a1 + 1552);
  v7.i16[3] = BYTE6(*(unint64_t *)v5);
  v6.i16[3] = BYTE6(*(unint64_t *)v4);
  v7.i16[2] = BYTE4(*(unint64_t *)v5);
  v6.i16[2] = BYTE4(*(unint64_t *)v4);
  v7.i16[1] = BYTE2(v5->u32[0]);
  v6.i16[1] = BYTE2(v4->u32[0]);
  v7.i16[0] = v5->u8[0];
  v6.i16[0] = v4->u8[0];
  uint32x2_t v8 = (uint32x2_t)vmla_s32(vmul_s32(v6, v7), (int32x2_t)(*(void *)&vshr_n_u32(*v4, 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)(*(void *)&vshr_n_u32(*v5, 8uLL) & 0xFFFF00FFFFFF00FFLL));
  return (__int16)(((*(_DWORD *)(a1 + 1568)
                                 + *(_DWORD *)(*(void *)(a1 + 32) + 4 * (int)a2)
                                 - (vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v8, 0xFuLL), 1), v8, 0xFuLL).u32[0]+ (((v4[1].i32[0] & 0xFF00FF) * (v5[1].i32[0] & 0xFF00FF)+ (((unsigned __int32)v4[1].i32[0] >> 8) & 0xFF00FF)* (((unsigned __int32)v5[1].i32[0] >> 8) & 0xFF00FF)) >> 15)))* *(_DWORD *)(a1 + 1052)+ *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100016E20(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 != v4)
  {
    int v5 = a2;
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        int v6 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      }
      else {
        int v6 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      }
      int v5 = v6 + a3;
    }
    int v10 = *(_DWORD *)(a1 + 1128) * v5;
    int32x2_t v7 = (uint64_t *)(a1 + 136);
    uint32x2_t v8 = (uint64_t *)(a1 + 32);
    int32x4_t v9 = (void *)(a1 + 48);
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      int32x2_t v7 = (uint64_t *)(a1 + 144);
      uint32x2_t v8 = (uint64_t *)(a1 + 104);
      int32x4_t v9 = (void *)(a1 + 120);
    }
  }
  else
  {
    int32x2_t v7 = (uint64_t *)(a1 + 792);
    uint32x2_t v8 = (uint64_t *)(a1 + 800);
    int32x4_t v9 = (void *)(a1 + 808);
    int v10 = 6 * v5;
  }
  uint64_t v11 = *v8;
  uint64_t v12 = *v7;
  int32x4_t v13 = *(uint32x2_t **)(a1 + 1552);
  *(uint32x2_t *)v14.i8 = *v13;
  int v15 = *(_DWORD *)(v11 + 4 * v5);
  if (*(_DWORD *)(a1 + 1044)) {
    v15 += *(_DWORD *)(*v9 + 4 * v5);
  }
  uint64_t v16 = v12 + 4 * v10;
  v17.i16[0] = *(_OWORD *)v16;
  v17.i16[1] = BYTE2(*(_OWORD *)v16);
  v17.i16[2] = BYTE4(*(void *)v16);
  v17.i16[3] = BYTE6(*(void *)v16);
  v17.i16[4] = *(void *)(v16 + 8);
  v17.i16[5] = BYTE2(*(void *)(v16 + 8));
  v17.i16[6] = BYTE12(*(_OWORD *)v16);
  v17.i16[7] = BYTE14(*(_OWORD *)v16);
  v14.u64[1] = (unint64_t)v13[1];
  v18.i64[0] = v14.i64[0] & 0xFF00FF00FF00FFLL;
  v18.i16[4] = v13[1].i32[0];
  v18.i16[5] = BYTE2(v13[1].i32[0]);
  v18.i16[6] = v13[1].i32[1];
  v18.i16[7] = BYTE2(v13[1].i32[1]);
  int32x4_t v19 = (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v17, v18), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v16, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v14, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 0xFuLL);
  v17.i16[2] = BYTE4(*(void *)&v13[2]);
  v20.i16[3] = BYTE6(*(void *)(v16 + 16));
  v17.i16[1] = BYTE2(*(void *)&v13[2]);
  v20.i16[2] = BYTE4(*(void *)(v16 + 16));
  v17.i16[0] = *(void *)&v13[2];
  v20.i16[1] = BYTE2(*(void *)(v16 + 16));
  v20.i16[0] = *(void *)(v16 + 16);
  *(uint32x2_t *)v17.i8 = vshr_n_u32((uint32x2_t)vmla_s32(vmul_s32(v20, *(int32x2_t *)v17.i8), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v16 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)(*(void *)&vshr_n_u32(v13[2], 8uLL) & 0xFFFF00FFFFFF00FFLL)), 0xFuLL);
  v17.i16[3] = BYTE6(*(void *)&v13[2]);
  return (__int16)(((v15
                                               + *(_DWORD *)(a1 + 1568)
                                               - v17.i32[1]
                                               - (vaddvq_s32(v19)
                                                + v17.i32[0]))
                                              * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100016F8C(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1072) > (signed int)a2)
  {
    int v3 = *(_DWORD *)(a1 + 1176);
    if (v3)
    {
      BOOL v4 = (_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      int v5 = v4[1] - *v4;
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      uint32x4_t v22 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      int v5 = v22[1] - *v22;
      if ((v5 & 1) == 0)
      {
LABEL_4:
        signed int v6 = a2;
        if (!*(_DWORD *)(a1 + 2012))
        {
          if (!v3)
          {
            signed int v6 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
            if (v5 >= 2) {
              goto LABEL_8;
            }
            goto LABEL_29;
          }
          signed int v6 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
        }
        if (v5 >= 2)
        {
LABEL_8:
          unsigned int v7 = v5 >> 1;
          uint64_t v8 = *(void *)(a1 + 1552);
          uint64_t v9 = 104;
          if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
            uint64_t v9 = 32;
          }
          uint64_t v10 = *(void *)(a1 + v9);
          uint64_t v11 = (int *)(v10 + 4 * v6);
          uint64_t v12 = 144;
          if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
            uint64_t v12 = 136;
          }
          uint64_t v13 = *(void *)(a1 + v12);
          int v14 = *(_DWORD *)(a1 + 1128) * v6;
          uint64_t v15 = v13 + 4 * v14;
          v16.i16[0] = *(_OWORD *)v8;
          v16.i16[1] = BYTE2(*(_OWORD *)v8);
          v16.i16[2] = BYTE4(*(void *)v8);
          v16.i16[3] = BYTE6(*(void *)v8);
          v16.i16[4] = *(void *)(v8 + 8);
          v16.i16[5] = BYTE2(*(void *)(v8 + 8));
          v16.i16[6] = BYTE12(*(_OWORD *)v8);
          v16.i16[7] = BYTE14(*(_OWORD *)v8);
          unsigned long long v17 = *(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v8, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
          v18.i16[0] = *(void *)(v8 + 16);
          v18.i16[1] = BYTE2(*(void *)(v8 + 16));
          v18.i16[2] = BYTE4(*(void *)(v8 + 16));
          v18.i16[3] = BYTE6(*(void *)(v8 + 16));
          unint64_t v19 = *(void *)&vshr_n_u32(*(uint32x2_t *)(v8 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL;
          uint64_t v20 = v7 - 1;
          if (v20 < 7)
          {
            int v21 = 0x40000000;
            goto LABEL_21;
          }
          uint64_t v24 = v6;
          uint64_t v25 = v14;
          uint64_t v26 = v20 + 1;
          uint64_t v27 = (v20 + 1) & 0x1FFFFFFF8;
          v7 -= v27;
          v15 += 48 * v27;
          int32x4_t v144 = vdupq_lane_s32(*(int32x2_t *)v16.i8, 1);
          int32x4_t v131 = vdupq_lane_s32(*(int32x2_t *)&v17, 1);
          int32x4_t v142 = vdupq_lane_s32(*(int32x2_t *)v16.i8, 0);
          int32x4_t v143 = vdupq_laneq_s32(v16, 2);
          unsigned long long v122 = v17;
          int32x4_t v123 = v16;
          int32x4_t v129 = vdupq_laneq_s32(v16, 3);
          int32x4_t v130 = vdupq_laneq_s32((int32x4_t)v17, 2);
          v11 += 2 * v27;
          int32x4_t v127 = vdupq_lane_s32(v18, 0);
          int32x4_t v128 = vdupq_laneq_s32((int32x4_t)v17, 3);
          unsigned int v28 = (const float *)(v10 + 4 * v24 + 32);
          unint64_t v120 = v19;
          int32x2_t v121 = v18;
          int32x4_t v125 = vdupq_lane_s32(v18, 1);
          int32x4_t v126 = vdupq_lane_s32((int32x2_t)v19, 0);
          int32x4_t v124 = vdupq_lane_s32((int32x2_t)v19, 1);
          unsigned int v29 = (__int32 *)(v13 + 4 * v25 + 192);
          v30.i64[0] = 0x4000000040000000;
          v30.i64[1] = 0x4000000040000000;
          uint64_t v31 = v27;
          v32.i64[0] = 0x4000000040000000;
          v32.i64[1] = 0x4000000040000000;
          int32x4_t v33 = vdupq_lane_s32(*(int32x2_t *)&v17, 0);
          do
          {
            int32x4_t v139 = v32;
            int32x4_t v141 = v30;
            int32x4_t v34 = v28 - 8;
            v35.i32[0] = *v29;
            v36.i32[0] = v29[1];
            float32x4x2_t v145 = vld2q_f32(v34);
            float32x4x2_t v140 = v145;
            v35.i32[1] = v29[12];
            v35.i32[2] = v29[24];
            v145.val[0].i32[0] = *(v29 - 48);
            v145.val[0].i32[1] = *(v29 - 36);
            v36.i32[1] = v29[13];
            v37.i32[0] = *(v29 - 47);
            v37.i32[1] = *(v29 - 35);
            v36.i32[2] = v29[25];
            v35.i32[3] = v29[36];
            v36.i32[3] = v29[37];
            v145.val[0].i32[2] = *(v29 - 24);
            v37.i32[2] = *(v29 - 23);
            v38.i32[0] = *(v29 - 46);
            v38.i32[1] = *(v29 - 34);
            v145.val[0].i32[3] = *(v29 - 12);
            v38.i32[2] = *(v29 - 22);
            v37.i32[3] = *(v29 - 11);
            v145.val[1].i32[0] = v29[2];
            v39.i32[0] = v29[3];
            v38.i32[3] = *(v29 - 10);
            v145.val[1].i32[1] = v29[14];
            v145.val[1].i32[2] = v29[26];
            uint32x4_t v40 = vshrq_n_u32(v35, 8uLL);
            v145.val[1].i32[3] = v29[38];
            v41.i32[0] = *(v29 - 45);
            v35.i16[0] = *v29;
            v35.i16[1] = BYTE2(*v29);
            v35.i16[2] = v35.u8[4];
            v35.i16[3] = BYTE2(v29[12]);
            v35.i16[4] = v35.u8[8];
            v35.i16[5] = BYTE2(v29[24]);
            v35.i16[6] = v35.u8[12];
            v35.i16[7] = BYTE2(v29[36]);
            v41.i32[1] = *(v29 - 33);
            v41.i32[2] = *(v29 - 21);
            uint32x4_t v42 = vshrq_n_u32(v36, 8uLL);
            v36.i16[0] = v36.u8[0];
            v36.i16[1] = BYTE2(v29[1]);
            v36.i16[2] = v36.u8[4];
            v36.i16[3] = BYTE2(v29[13]);
            v36.i16[4] = v36.u8[8];
            v36.i16[5] = BYTE2(v29[25]);
            v36.i16[6] = v36.u8[12];
            v36.i16[7] = BYTE2(v29[37]);
            v41.i32[3] = *(v29 - 9);
            int32x4_t v43 = vmulq_s32((int32x4_t)v35, v142);
            v39.i32[1] = v29[15];
            v39.i32[2] = v29[27];
            int32x4_t v44 = (int32x4_t)vshrq_n_u32((uint32x4_t)v145.val[1], 8uLL);
            v39.i32[3] = v29[39];
            int32x4_t v45 = vmulq_s32((int32x4_t)v36, v144);
            v46.i32[0] = *(v29 - 44);
            v46.i32[1] = *(v29 - 32);
            v145.val[1].i16[0] = v145.val[1].u8[0];
            v145.val[1].i16[1] = BYTE2(v29[2]);
            v145.val[1].i16[2] = v145.val[1].u8[4];
            v145.val[1].i16[3] = BYTE2(v29[14]);
            v145.val[1].i16[4] = v145.val[1].u8[8];
            v145.val[1].i16[5] = BYTE2(v29[26]);
            v145.val[1].i16[6] = v145.val[1].u8[12];
            v145.val[1].i16[7] = BYTE2(v29[38]);
            v46.i32[2] = *(v29 - 20);
            int32x4_t v47 = vmulq_s32((int32x4_t)v145.val[1], v143);
            v46.i32[3] = *(v29 - 8);
            v48.i32[0] = v29[4];
            v49.i32[0] = v29[5];
            v145.val[1] = (float32x4_t)vshrq_n_u32((uint32x4_t)v145.val[0], 8uLL);
            v48.i32[1] = v29[16];
            v48.i32[2] = v29[28];
            v145.val[0].i16[0] = v145.val[0].u8[0];
            v145.val[0].i16[1] = BYTE2(*(v29 - 48));
            v145.val[0].i16[2] = v145.val[0].u8[4];
            v145.val[0].i16[3] = BYTE2(*(v29 - 36));
            v145.val[0].i16[4] = v145.val[0].u8[8];
            v145.val[0].i16[5] = BYTE2(*(v29 - 24));
            v145.val[0].i16[6] = v145.val[0].u8[12];
            v145.val[0].i16[7] = BYTE2(*(v29 - 12));
            v48.i32[3] = v29[40];
            v50.i32[0] = *(v29 - 43);
            uint32x4_t v51 = vshrq_n_u32(v37, 8uLL);
            v50.i32[1] = *(v29 - 31);
            v50.i32[2] = *(v29 - 19);
            v37.i16[0] = v37.u8[0];
            v37.i16[1] = BYTE2(*(v29 - 47));
            v37.i16[2] = v37.u8[4];
            v37.i16[3] = BYTE2(*(v29 - 35));
            v37.i16[4] = v37.u8[8];
            v37.i16[5] = BYTE2(*(v29 - 23));
            v37.i16[6] = v37.u8[12];
            v37.i16[7] = BYTE2(*(v29 - 11));
            v50.i32[3] = *(v29 - 7);
            uint32x4_t v52 = vshrq_n_u32(v38, 8uLL);
            v49.i32[1] = v29[17];
            v49.i32[2] = v29[29];
            v38.i16[0] = v38.u8[0];
            v38.i16[1] = BYTE2(*(v29 - 46));
            v38.i16[2] = v38.u8[4];
            v38.i16[3] = BYTE2(*(v29 - 34));
            v38.i16[4] = v38.u8[8];
            v38.i16[5] = BYTE2(*(v29 - 22));
            v38.i16[6] = v38.u8[12];
            v38.i16[7] = BYTE2(*(v29 - 10));
            v49.i32[3] = v29[41];
            uint32x4_t v53 = vshrq_n_u32(v41, 8uLL);
            uint32x4_t v54 = vshrq_n_u32(v39, 8uLL);
            v41.i16[0] = v41.u8[0];
            v41.i16[1] = BYTE2(*(v29 - 45));
            v41.i16[2] = v41.u8[4];
            v41.i16[3] = BYTE2(*(v29 - 33));
            v41.i16[4] = v41.u8[8];
            v41.i16[5] = BYTE2(*(v29 - 21));
            v41.i16[6] = v41.u8[12];
            v41.i16[7] = BYTE2(*(v29 - 9));
            v39.i16[0] = v39.u8[0];
            v39.i16[1] = BYTE2(v29[3]);
            v39.i16[2] = v39.u8[4];
            v39.i16[3] = BYTE2(v29[15]);
            v39.i16[4] = v39.u8[8];
            v39.i16[5] = BYTE2(v29[27]);
            v39.i16[6] = v39.u8[12];
            v39.i16[7] = BYTE2(v29[39]);
            int32x4_t v55 = vmulq_s32((int32x4_t)v39, v129);
            uint32x4_t v56 = vshrq_n_u32(v46, 8uLL);
            v46.i16[0] = v46.u8[0];
            v46.i16[1] = BYTE2(*(v29 - 44));
            v46.i16[2] = v46.u8[4];
            v46.i16[3] = BYTE2(*(v29 - 32));
            v46.i16[4] = v46.u8[8];
            v46.i16[5] = BYTE2(*(v29 - 20));
            v46.i16[6] = v46.u8[12];
            v46.i16[7] = BYTE2(*(v29 - 8));
            int32x4_t v137 = vmulq_s32((int32x4_t)v145.val[0], v142);
            uint32x4_t v57 = vshrq_n_u32(v48, 8uLL);
            v48.i16[0] = v48.u8[0];
            v48.i16[1] = BYTE2(v29[4]);
            v48.i16[2] = v48.u8[4];
            v48.i16[3] = BYTE2(v29[16]);
            v48.i16[4] = v48.u8[8];
            v48.i16[5] = BYTE2(v29[28]);
            v48.i16[6] = v48.u8[12];
            v48.i16[7] = BYTE2(v29[40]);
            uint32x4_t v134 = v56;
            uint32x4_t v136 = vshrq_n_u32(v50, 8uLL);
            v50.i16[0] = v50.u8[0];
            v50.i16[1] = BYTE2(*(v29 - 43));
            v50.i16[2] = v50.u8[4];
            v50.i16[3] = BYTE2(*(v29 - 31));
            v50.i16[4] = v50.u8[8];
            v50.i16[5] = BYTE2(*(v29 - 19));
            v50.i16[6] = v50.u8[12];
            v50.i16[7] = BYTE2(*(v29 - 7));
            v58.i32[0] = *(v29 - 39);
            uint32x4_t v59 = (uint32x4_t)vmlaq_s32(v43, (int32x4_t)(*(_OWORD *)&v40 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v33);
            v58.i32[1] = *(v29 - 27);
            v58.i32[2] = *(v29 - 15);
            int32x4_t v60 = vmulq_s32((int32x4_t)v37, v144);
            uint32x4_t v61 = vshrq_n_u32(v49, 8uLL);
            v58.i32[3] = *(v29 - 3);
            v37.i32[0] = v29[8];
            v62.i32[0] = v29[9];
            v62.i32[1] = v29[21];
            uint32x4_t v63 = (uint32x4_t)vmlaq_s32(v45, (int32x4_t)(*(_OWORD *)&v42 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v131);
            v62.i32[2] = v29[33];
            v62.i32[3] = v29[45];
            v49.i16[0] = v49.u8[0];
            v49.i16[1] = BYTE2(v29[5]);
            v49.i16[2] = v49.u8[4];
            v49.i16[3] = BYTE2(v29[17]);
            v49.i16[4] = v49.u8[8];
            v49.i16[5] = BYTE2(v29[29]);
            v49.i16[6] = v49.u8[12];
            v49.i16[7] = BYTE2(v29[41]);
            v64.i32[0] = *(v29 - 38);
            v64.i32[1] = *(v29 - 26);
            v64.i32[2] = *(v29 - 14);
            uint32x4_t v65 = (uint32x4_t)vmlaq_s32(v47, (int32x4_t)(*(_OWORD *)&v44 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v130);
            v145.val[0] = (float32x4_t)vmulq_s32((int32x4_t)v49, v125);
            v64.i32[3] = *(v29 - 2);
            int32x4_t v66 = vmulq_s32((int32x4_t)v41, v129);
            v41.i32[0] = v29[10];
            v44.i32[0] = v29[11];
            v41.i32[1] = v29[22];
            v41.i32[2] = v29[34];
            v41.i32[3] = v29[46];
            uint32x4_t v133 = (uint32x4_t)vmlaq_s32(v55, (int32x4_t)(*(_OWORD *)&v54 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v128);
            v49.i32[0] = *(v29 - 37);
            v49.i32[1] = *(v29 - 25);
            int32x4_t v132 = vmulq_s32((int32x4_t)v46, v127);
            v49.i32[2] = *(v29 - 13);
            v49.i32[3] = *(v29 - 1);
            unsigned long long v67 = *(_OWORD *)&v134 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
            v44.i32[1] = v29[23];
            v44.i32[2] = v29[35];
            v44.i32[3] = v29[47];
            int32x4_t v68 = vmulq_s32((int32x4_t)v50, v125);
            uint32x4_t v135 = (uint32x4_t)vmlaq_s32((int32x4_t)v145.val[0], (int32x4_t)(*(_OWORD *)&v61 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v124);
            int32x4_t v69 = (int32x4_t)vshrq_n_u32(v58, 8uLL);
            v58.i16[0] = v58.u8[0];
            v58.i16[1] = BYTE2(*(v29 - 39));
            v58.i16[2] = v58.u8[4];
            v58.i16[3] = BYTE2(*(v29 - 27));
            v58.i16[4] = v58.u8[8];
            v58.i16[5] = BYTE2(*(v29 - 15));
            v58.i16[6] = v58.u8[12];
            v58.i16[7] = BYTE2(*(v29 - 3));
            int32x4_t v70 = (int32x4_t)vshrq_n_u32(v62, 8uLL);
            v62.i16[0] = v62.u8[0];
            v62.i16[1] = BYTE2(v29[9]);
            v62.i16[2] = v62.u8[4];
            v62.i16[3] = BYTE2(v29[21]);
            v62.i16[4] = v62.u8[8];
            v62.i16[5] = BYTE2(v29[33]);
            v62.i16[6] = v62.u8[12];
            v62.i16[7] = BYTE2(v29[45]);
            int32x4_t v71 = vmulq_s32((int32x4_t)v58, v129);
            uint32x4_t v72 = (uint32x4_t)vmlaq_s32(v137, (int32x4_t)(*(_OWORD *)&v145.val[1] & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v33);
            uint32x4_t v138 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v62, v129), (int32x4_t)(*(_OWORD *)&v70 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v128);
            uint32x4_t v73 = vshrq_n_u32(v64, 8uLL);
            v64.i16[0] = v64.u8[0];
            v64.i16[1] = BYTE2(*(v29 - 38));
            v64.i16[2] = v64.u8[4];
            v64.i16[3] = BYTE2(*(v29 - 26));
            v64.i16[4] = v64.u8[8];
            v64.i16[5] = BYTE2(*(v29 - 14));
            v64.i16[6] = v64.u8[12];
            v64.i16[7] = BYTE2(*(v29 - 2));
            uint32x4_t v74 = vshrq_n_u32(v41, 8uLL);
            v41.i16[0] = v41.u8[0];
            v41.i16[1] = BYTE2(v29[10]);
            v41.i16[2] = v41.u8[4];
            v41.i16[3] = BYTE2(v29[22]);
            v41.i16[4] = v41.u8[8];
            v41.i16[5] = BYTE2(v29[34]);
            v41.i16[6] = v41.u8[12];
            v41.i16[7] = BYTE2(v29[46]);
            uint32x4_t v75 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v38, v143), (int32x4_t)(*(_OWORD *)&v52 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v130);
            int32x4_t v76 = vmulq_s32((int32x4_t)v64, v127);
            uint32x4_t v77 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v41, v127), (int32x4_t)(*(_OWORD *)&v74 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v126);
            int32x4_t v78 = (int32x4_t)vshrq_n_u32(v49, 8uLL);
            v49.i16[0] = v49.u8[0];
            v49.i16[1] = BYTE2(*(v29 - 37));
            v49.i16[2] = v49.u8[4];
            v49.i16[3] = BYTE2(*(v29 - 25));
            v49.i16[4] = v49.u8[8];
            v49.i16[5] = BYTE2(*(v29 - 13));
            v49.i16[6] = v49.u8[12];
            v49.i16[7] = BYTE2(*(v29 - 1));
            uint32x4_t v79 = vshrq_n_u32((uint32x4_t)v44, 8uLL);
            v44.i16[0] = v44.u8[0];
            v44.i16[1] = BYTE2(v29[11]);
            v44.i16[2] = v44.u8[4];
            v44.i16[3] = BYTE2(v29[23]);
            v44.i16[4] = v44.u8[8];
            v44.i16[5] = BYTE2(v29[35]);
            v44.i16[6] = v44.u8[12];
            v44.i16[7] = BYTE2(v29[47]);
            int32x4_t v80 = vmulq_s32((int32x4_t)v49, v125);
            v49.i32[0] = *(v29 - 42);
            v49.i32[1] = *(v29 - 30);
            v49.i32[2] = *(v29 - 18);
            v49.i32[3] = *(v29 - 6);
            uint32x4_t v81 = (uint32x4_t)vmlaq_s32(v71, (int32x4_t)(*(_OWORD *)&v69 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v128);
            v69.i32[0] = v29[6];
            v70.i32[0] = v29[7];
            v69.i32[1] = v29[18];
            uint32x4_t v82 = (uint32x4_t)vmlaq_s32(v76, (int32x4_t)(*(_OWORD *)&v73 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v126);
            v69.i32[2] = v29[30];
            v69.i32[3] = v29[42];
            uint32x4_t v83 = (uint32x4_t)vmlaq_s32(v80, (int32x4_t)(*(_OWORD *)&v78 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v124);
            uint32x4_t v84 = (uint32x4_t)vmlaq_s32(vmulq_s32(v44, v125), (int32x4_t)(*(_OWORD *)&v79 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v124);
            v78.i32[0] = *(v29 - 41);
            v78.i32[1] = *(v29 - 29);
            v78.i32[2] = *(v29 - 17);
            v78.i32[3] = *(v29 - 5);
            v70.i32[1] = v29[19];
            v70.i32[2] = v29[31];
            v70.i32[3] = v29[43];
            uint32x4_t v85 = vshrq_n_u32(v49, 8uLL);
            v49.i16[0] = v49.u8[0];
            v49.i16[1] = BYTE2(*(v29 - 42));
            v49.i16[2] = v49.u8[4];
            v49.i16[3] = BYTE2(*(v29 - 30));
            v49.i16[4] = v49.u8[8];
            v49.i16[5] = BYTE2(*(v29 - 18));
            v49.i16[6] = v49.u8[12];
            v49.i16[7] = BYTE2(*(v29 - 6));
            uint32x4_t v86 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v49, v142), (int32x4_t)(*(_OWORD *)&v85 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v33);
            uint32x4_t v87 = vshrq_n_u32((uint32x4_t)v69, 8uLL);
            v69.i16[0] = v69.u8[0];
            v69.i16[1] = BYTE2(v29[6]);
            v69.i16[2] = v69.u8[4];
            v69.i16[3] = BYTE2(v29[18]);
            v69.i16[4] = v69.u8[8];
            v69.i16[5] = BYTE2(v29[30]);
            v69.i16[6] = v69.u8[12];
            v69.i16[7] = BYTE2(v29[42]);
            uint32x4_t v88 = (uint32x4_t)vmlaq_s32(vmulq_s32(v69, v142), (int32x4_t)(*(_OWORD *)&v87 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v33);
            uint32x4_t v89 = vshrq_n_u32((uint32x4_t)v78, 8uLL);
            v78.i16[0] = v78.u8[0];
            v78.i16[1] = BYTE2(*(v29 - 41));
            v78.i16[2] = v78.u8[4];
            v78.i16[3] = BYTE2(*(v29 - 29));
            v78.i16[4] = v78.u8[8];
            v78.i16[5] = BYTE2(*(v29 - 17));
            v78.i16[6] = v78.u8[12];
            v78.i16[7] = BYTE2(*(v29 - 5));
            uint32x4_t v90 = (uint32x4_t)vmlaq_s32(vmulq_s32(v78, v144), (int32x4_t)(*(_OWORD *)&v89 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v131);
            int32x4_t v91 = (int32x4_t)vshrq_n_u32((uint32x4_t)v70, 8uLL);
            v70.i16[0] = v70.u8[0];
            v70.i16[1] = BYTE2(v29[7]);
            v70.i16[2] = v70.u8[4];
            v70.i16[3] = BYTE2(v29[19]);
            v70.i16[4] = v70.u8[8];
            v70.i16[5] = BYTE2(v29[31]);
            v70.i16[6] = v70.u8[12];
            v70.i16[7] = BYTE2(v29[43]);
            uint32x4_t v92 = (uint32x4_t)vmlaq_s32(vmulq_s32(v70, v144), (int32x4_t)(*(_OWORD *)&v91 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v131);
            v91.i32[0] = *(v29 - 40);
            v91.i32[1] = *(v29 - 28);
            v145.val[0] = (float32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v72, 0xFuLL), (uint32x4_t)vmlaq_s32(v60, (int32x4_t)(*(_OWORD *)&v51 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v131), 0xFuLL), v75, 0xFuLL), (uint32x4_t)vmlaq_s32(v66, (int32x4_t)(*(_OWORD *)&v53 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v128), 0xFuLL);
            v91.i32[2] = *(v29 - 16);
            v91.i32[3] = *(v29 - 4);
            int32x4_t v93 = (int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v59, 0xFuLL), v63, 0xFuLL), v65, 0xFuLL), v133, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v48, v127), (int32x4_t)(*(_OWORD *)&v57 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v126), 0xFuLL), v135, 0xFuLL);
            uint32x4_t v94 = vshrq_n_u32((uint32x4_t)v91, 8uLL);
            v91.i32[0] &= 0xFF00FFu;
            v91.i16[2] = v91.u8[4];
            v91.i16[3] = BYTE2(*(v29 - 28));
            v91.i16[4] = v91.u8[8];
            v91.i16[5] = BYTE2(*(v29 - 16));
            v91.i16[6] = v91.u8[12];
            v91.i16[7] = BYTE2(*(v29 - 4));
            float32x4x2_t v146 = vld2q_f32(v28);
            v37.i32[1] = v29[20];
            v37.i32[2] = v29[32];
            v37.i32[3] = v29[44];
            uint32x4_t v95 = vshrq_n_u32(v37, 8uLL);
            v37.i16[0] = v37.u8[0];
            v37.i16[1] = BYTE2(v29[8]);
            v37.i16[2] = v37.u8[4];
            v37.i16[3] = BYTE2(v29[20]);
            v37.i16[4] = v37.u8[8];
            v37.i16[5] = BYTE2(v29[32]);
            v37.i16[6] = v37.u8[12];
            v37.i16[7] = BYTE2(v29[44]);
            v28 += 16;
            int32x4_t v30 = vminq_s32(vsubq_s32((int32x4_t)v140.val[1], (int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v81, 0xFuLL), v82, 0xFuLL), v83, 0xFuLL), v86, 0xFuLL), v90, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32(v91, v143), (int32x4_t)(*(_OWORD *)&v94 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v130), 0xFuLL)), vminq_s32(vsubq_s32(
                        (int32x4_t)v140.val[0],
                        (int32x4_t)vsraq_n_u32(vsraq_n_u32((uint32x4_t)v145.val[0], (uint32x4_t)vmlaq_s32(v132, (int32x4_t)v67, v126), 0xFuLL), (uint32x4_t)vmlaq_s32(v68, (int32x4_t)(*(_OWORD *)&v136 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v124), 0xFuLL)), v141));
            v29 += 96;
            int32x4_t v32 = vminq_s32(vsubq_s32((int32x4_t)v146.val[1], (int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v138, 0xFuLL), v77, 0xFuLL), v84, 0xFuLL), v88, 0xFuLL), v92, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v37, v143), (int32x4_t)(*(_OWORD *)&v95 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v130), 0xFuLL)), vminq_s32(vsubq_s32((int32x4_t)v146.val[0], v93), v139));
            v31 -= 8;
          }
          while (v31);
          int v21 = vminvq_s32(vminq_s32(v30, v32));
          unsigned long long v17 = v122;
          int32x4_t v16 = v123;
          unint64_t v19 = v120;
          int32x2_t v18 = v121;
          if (v26 != v27)
          {
LABEL_21:
            int32x2_t v96 = vzip1_s32(vdup_laneq_s32(v16, 3), v18);
            int32x2_t v97 = vzip1_s32(vdup_laneq_s32((int32x4_t)v17, 3), (int32x2_t)v19);
            int32x2_t v98 = vzip2_s32((int32x2_t)v19, v18);
            int32x2_t v99 = (int32x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL).u64[0];
            int32x2_t v100 = (int32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL).u64[0];
            unsigned int v101 = v7 + 1;
            do
            {
              v102.i16[0] = *(_OWORD *)v15;
              v102.i16[1] = BYTE2(*(_OWORD *)v15);
              v102.i16[2] = BYTE4(*(void *)v15);
              v102.i16[3] = BYTE6(*(void *)v15);
              v102.i16[4] = *(void *)(v15 + 8);
              v102.i16[5] = BYTE2(*(void *)(v15 + 8));
              v102.i16[6] = BYTE12(*(_OWORD *)v15);
              v102.i16[7] = BYTE14(*(_OWORD *)v15);
              v103.i16[0] = *(void *)(v15 + 16);
              v103.i16[1] = BYTE2(*(void *)(v15 + 16));
              v103.i16[2] = BYTE4(*(void *)(v15 + 16));
              v103.i16[3] = BYTE6(*(void *)(v15 + 16));
              uint32x2_t v104 = vshr_n_u32((uint32x2_t)vmla_s32(vmul_s32(v103, v18), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v15 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)v19), 0xFuLL);
              __int32 v105 = v104.i32[1];
              int v106 = *v11;
              int v107 = v11[1];
              v11 += 2;
              __int32 v108 = vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v102, v16), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v15, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)v17), 0xFuLL))+ v104.i32[0];
              unsigned int v109 = *(_DWORD *)(v15 + 44);
              v102.i16[0] = *(void *)(v15 + 36);
              v102.i16[1] = BYTE2(*(void *)(v15 + 36));
              v102.i16[2] = BYTE4(*(void *)(v15 + 36));
              v102.i16[3] = BYTE6(*(void *)(v15 + 36));
              uint32x2_t v110 = (uint32x2_t)vmla_s32(vmul_s32(*(int32x2_t *)v102.i8, v96), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v15 + 36), 8uLL) & 0xFFFF00FFFFFF00FFLL), v97);
              int32x2_t v111 = (int32x2_t)vshr_n_u32(v110, 0xFuLL);
              int v112 = v106 - v108 - v105;
              v113.i16[0] = BYTE1(v109);
              v113.i16[1] = v109 >> 8 >> 16;
              v113.i16[2] = v109;
              v113.i16[3] = BYTE2(v109);
              int32x2_t v114 = vmul_s32(v113, v98);
              uint32x2_t v115 = vshr_n_u32(*(uint32x2_t *)(v15 + 28), 8uLL);
              v116.i16[0] = *(void *)(v15 + 28);
              v116.i16[1] = BYTE2(*(void *)(v15 + 28));
              v116.i16[2] = BYTE4(*(void *)(v15 + 28));
              v116.i16[3] = BYTE6(*(void *)(v15 + 28));
              int32x2_t v117 = vmul_s32(v116, v99);
              if (v112 < v21) {
                int v21 = v112;
              }
              uint32x2_t v118 = vshr_n_u32((uint32x2_t)vmla_s32(v117, (int32x2_t)(*(void *)&v115 & 0xFFFF00FFFFFF00FFLL), v100), 0xFuLL);
              signed __int32 v119 = v107
                   - (v118.i32[0]
                    + v118.i32[1])
                   - (vsra_n_u32((uint32x2_t)vdup_lane_s32(v111, 1), v110, 0xFuLL).u32[0]
                    + (vadd_s32(v114, vdup_lane_s32(v114, 1)).u32[0] >> 15)
                    + (((*(_DWORD *)(v15 + 24) & 0xFF00FF) * v16.i32[0]
                      + ((*(_DWORD *)(v15 + 24) >> 8) & 0xFF00FF) * v17) >> 15));
              if (v119 < v21) {
                int v21 = v119;
              }
              --v101;
              v15 += 48;
            }
            while (v101 > 1);
          }
          return (__int16)(((*(_DWORD *)(a1 + 1568) + v21) * *(_DWORD *)(a1 + 1052)
                                                      + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
        }
LABEL_29:
        int v21 = 0x40000000;
        return (__int16)(((*(_DWORD *)(a1 + 1568) + v21) * *(_DWORD *)(a1 + 1052)
                                                    + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
      }
    }
  }
  return sub_100015CE0(a1, a2);
}

uint64_t sub_1000178B0(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 1176);
  if (v3)
  {
    BOOL v4 = (_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    int v5 = v4[1] - *v4;
    if ((v5 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    int32x2_t v18 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    int v5 = v18[1] - *v18;
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if (!*(_DWORD *)(a1 + 2012))
      {
        if (!v3)
        {
          a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
          if (v5 >= 2) {
            goto LABEL_7;
          }
          goto LABEL_24;
        }
        a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      }
      if (v5 >= 2)
      {
LABEL_7:
        unsigned int v6 = v5 >> 1;
        uint64_t v7 = *(void *)(a1 + 1552);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = (int *)(v8 + 4 * (int)a2);
        uint64_t v10 = *(void *)(a1 + 136);
        uint64_t v11 = v10 + 24 * (int)a2;
        v12.i16[0] = *(_OWORD *)v7;
        v12.i16[1] = BYTE2(*(_OWORD *)v7);
        v12.i16[2] = BYTE4(*(void *)v7);
        v12.i16[3] = BYTE6(*(void *)v7);
        v12.i16[4] = *(void *)(v7 + 8);
        v12.i16[5] = BYTE2(*(void *)(v7 + 8));
        v12.i16[6] = BYTE12(*(_OWORD *)v7);
        v12.i16[7] = BYTE14(*(_OWORD *)v7);
        unsigned long long v13 = *(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v7, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
        v14.i16[0] = *(void *)(v7 + 16);
        v14.i16[1] = BYTE2(*(void *)(v7 + 16));
        v14.i16[2] = BYTE4(*(void *)(v7 + 16));
        v14.i16[3] = BYTE6(*(void *)(v7 + 16));
        unint64_t v15 = *(void *)&vshr_n_u32(*(uint32x2_t *)(v7 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL;
        uint64_t v16 = v6 - 1;
        if (v16 < 7)
        {
          int v17 = 0x40000000;
          goto LABEL_16;
        }
        uint64_t v20 = v16 + 1;
        uint64_t v21 = (v16 + 1) & 0x1FFFFFFF8;
        v6 -= v21;
        v11 += 48 * v21;
        int32x4_t v138 = vdupq_lane_s32(*(int32x2_t *)v12.i8, 1);
        int32x4_t v125 = vdupq_lane_s32(*(int32x2_t *)&v13, 1);
        int32x4_t v136 = vdupq_lane_s32(*(int32x2_t *)v12.i8, 0);
        int32x4_t v137 = vdupq_laneq_s32(v12, 2);
        unsigned long long v116 = v13;
        int32x4_t v117 = v12;
        int32x4_t v123 = vdupq_laneq_s32(v12, 3);
        int32x4_t v124 = vdupq_laneq_s32((int32x4_t)v13, 2);
        v9 += 2 * v21;
        int32x4_t v121 = vdupq_lane_s32(v14, 0);
        int32x4_t v122 = vdupq_laneq_s32((int32x4_t)v13, 3);
        uint32x4_t v22 = (const float *)(v8 + 4 * (int)a2 + 32);
        unint64_t v114 = v15;
        int32x2_t v115 = v14;
        int32x4_t v119 = vdupq_lane_s32(v14, 1);
        int32x4_t v120 = vdupq_lane_s32((int32x2_t)v15, 0);
        uint32x4_t v23 = (__int32 *)(v10 + 24 * (int)a2 + 192);
        int32x4_t v118 = vdupq_lane_s32((int32x2_t)v15, 1);
        v24.i64[0] = 0x4000000040000000;
        v24.i64[1] = 0x4000000040000000;
        uint64_t v25 = v21;
        v26.i64[0] = 0x4000000040000000;
        v26.i64[1] = 0x4000000040000000;
        int32x4_t v27 = vdupq_lane_s32(*(int32x2_t *)&v13, 0);
        do
        {
          int32x4_t v133 = v26;
          int32x4_t v135 = v24;
          unsigned int v28 = v22 - 8;
          v29.i32[0] = *v23;
          v30.i32[0] = v23[1];
          float32x4x2_t v139 = vld2q_f32(v28);
          float32x4x2_t v134 = v139;
          v29.i32[1] = v23[12];
          v29.i32[2] = v23[24];
          v139.val[0].i32[0] = *(v23 - 48);
          v139.val[0].i32[1] = *(v23 - 36);
          v30.i32[1] = v23[13];
          v31.i32[0] = *(v23 - 47);
          v31.i32[1] = *(v23 - 35);
          v30.i32[2] = v23[25];
          v29.i32[3] = v23[36];
          v30.i32[3] = v23[37];
          v139.val[0].i32[2] = *(v23 - 24);
          v31.i32[2] = *(v23 - 23);
          v32.i32[0] = *(v23 - 46);
          v32.i32[1] = *(v23 - 34);
          v139.val[0].i32[3] = *(v23 - 12);
          v32.i32[2] = *(v23 - 22);
          v31.i32[3] = *(v23 - 11);
          v139.val[1].i32[0] = v23[2];
          v33.i32[0] = v23[3];
          v32.i32[3] = *(v23 - 10);
          v139.val[1].i32[1] = v23[14];
          v139.val[1].i32[2] = v23[26];
          uint32x4_t v34 = vshrq_n_u32(v29, 8uLL);
          v139.val[1].i32[3] = v23[38];
          v35.i32[0] = *(v23 - 45);
          v29.i16[0] = *v23;
          v29.i16[1] = BYTE2(*v23);
          v29.i16[2] = v29.u8[4];
          v29.i16[3] = BYTE2(v23[12]);
          v29.i16[4] = v29.u8[8];
          v29.i16[5] = BYTE2(v23[24]);
          v29.i16[6] = v29.u8[12];
          v29.i16[7] = BYTE2(v23[36]);
          v35.i32[1] = *(v23 - 33);
          v35.i32[2] = *(v23 - 21);
          uint32x4_t v36 = vshrq_n_u32(v30, 8uLL);
          v30.i16[0] = v30.u8[0];
          v30.i16[1] = BYTE2(v23[1]);
          v30.i16[2] = v30.u8[4];
          v30.i16[3] = BYTE2(v23[13]);
          v30.i16[4] = v30.u8[8];
          v30.i16[5] = BYTE2(v23[25]);
          v30.i16[6] = v30.u8[12];
          v30.i16[7] = BYTE2(v23[37]);
          v35.i32[3] = *(v23 - 9);
          int32x4_t v37 = vmulq_s32((int32x4_t)v29, v136);
          v33.i32[1] = v23[15];
          v33.i32[2] = v23[27];
          int32x4_t v38 = (int32x4_t)vshrq_n_u32((uint32x4_t)v139.val[1], 8uLL);
          v33.i32[3] = v23[39];
          int32x4_t v39 = vmulq_s32((int32x4_t)v30, v138);
          v40.i32[0] = *(v23 - 44);
          v40.i32[1] = *(v23 - 32);
          v139.val[1].i16[0] = v139.val[1].u8[0];
          v139.val[1].i16[1] = BYTE2(v23[2]);
          v139.val[1].i16[2] = v139.val[1].u8[4];
          v139.val[1].i16[3] = BYTE2(v23[14]);
          v139.val[1].i16[4] = v139.val[1].u8[8];
          v139.val[1].i16[5] = BYTE2(v23[26]);
          v139.val[1].i16[6] = v139.val[1].u8[12];
          v139.val[1].i16[7] = BYTE2(v23[38]);
          v40.i32[2] = *(v23 - 20);
          int32x4_t v41 = vmulq_s32((int32x4_t)v139.val[1], v137);
          v40.i32[3] = *(v23 - 8);
          v42.i32[0] = v23[4];
          v43.i32[0] = v23[5];
          v139.val[1] = (float32x4_t)vshrq_n_u32((uint32x4_t)v139.val[0], 8uLL);
          v42.i32[1] = v23[16];
          v42.i32[2] = v23[28];
          v139.val[0].i16[0] = v139.val[0].u8[0];
          v139.val[0].i16[1] = BYTE2(*(v23 - 48));
          v139.val[0].i16[2] = v139.val[0].u8[4];
          v139.val[0].i16[3] = BYTE2(*(v23 - 36));
          v139.val[0].i16[4] = v139.val[0].u8[8];
          v139.val[0].i16[5] = BYTE2(*(v23 - 24));
          v139.val[0].i16[6] = v139.val[0].u8[12];
          v139.val[0].i16[7] = BYTE2(*(v23 - 12));
          v42.i32[3] = v23[40];
          v44.i32[0] = *(v23 - 43);
          uint32x4_t v45 = vshrq_n_u32(v31, 8uLL);
          v44.i32[1] = *(v23 - 31);
          v44.i32[2] = *(v23 - 19);
          v31.i16[0] = v31.u8[0];
          v31.i16[1] = BYTE2(*(v23 - 47));
          v31.i16[2] = v31.u8[4];
          v31.i16[3] = BYTE2(*(v23 - 35));
          v31.i16[4] = v31.u8[8];
          v31.i16[5] = BYTE2(*(v23 - 23));
          v31.i16[6] = v31.u8[12];
          v31.i16[7] = BYTE2(*(v23 - 11));
          v44.i32[3] = *(v23 - 7);
          uint32x4_t v46 = vshrq_n_u32(v32, 8uLL);
          v43.i32[1] = v23[17];
          v43.i32[2] = v23[29];
          v32.i16[0] = v32.u8[0];
          v32.i16[1] = BYTE2(*(v23 - 46));
          v32.i16[2] = v32.u8[4];
          v32.i16[3] = BYTE2(*(v23 - 34));
          v32.i16[4] = v32.u8[8];
          v32.i16[5] = BYTE2(*(v23 - 22));
          v32.i16[6] = v32.u8[12];
          v32.i16[7] = BYTE2(*(v23 - 10));
          v43.i32[3] = v23[41];
          uint32x4_t v47 = vshrq_n_u32(v35, 8uLL);
          uint32x4_t v48 = vshrq_n_u32(v33, 8uLL);
          v35.i16[0] = v35.u8[0];
          v35.i16[1] = BYTE2(*(v23 - 45));
          v35.i16[2] = v35.u8[4];
          v35.i16[3] = BYTE2(*(v23 - 33));
          v35.i16[4] = v35.u8[8];
          v35.i16[5] = BYTE2(*(v23 - 21));
          v35.i16[6] = v35.u8[12];
          v35.i16[7] = BYTE2(*(v23 - 9));
          v33.i16[0] = v33.u8[0];
          v33.i16[1] = BYTE2(v23[3]);
          v33.i16[2] = v33.u8[4];
          v33.i16[3] = BYTE2(v23[15]);
          v33.i16[4] = v33.u8[8];
          v33.i16[5] = BYTE2(v23[27]);
          v33.i16[6] = v33.u8[12];
          v33.i16[7] = BYTE2(v23[39]);
          int32x4_t v49 = vmulq_s32((int32x4_t)v33, v123);
          uint32x4_t v50 = vshrq_n_u32(v40, 8uLL);
          v40.i16[0] = v40.u8[0];
          v40.i16[1] = BYTE2(*(v23 - 44));
          v40.i16[2] = v40.u8[4];
          v40.i16[3] = BYTE2(*(v23 - 32));
          v40.i16[4] = v40.u8[8];
          v40.i16[5] = BYTE2(*(v23 - 20));
          v40.i16[6] = v40.u8[12];
          v40.i16[7] = BYTE2(*(v23 - 8));
          int32x4_t v131 = vmulq_s32((int32x4_t)v139.val[0], v136);
          uint32x4_t v51 = vshrq_n_u32(v42, 8uLL);
          v42.i16[0] = v42.u8[0];
          v42.i16[1] = BYTE2(v23[4]);
          v42.i16[2] = v42.u8[4];
          v42.i16[3] = BYTE2(v23[16]);
          v42.i16[4] = v42.u8[8];
          v42.i16[5] = BYTE2(v23[28]);
          v42.i16[6] = v42.u8[12];
          v42.i16[7] = BYTE2(v23[40]);
          uint32x4_t v128 = v50;
          uint32x4_t v130 = vshrq_n_u32(v44, 8uLL);
          v44.i16[0] = v44.u8[0];
          v44.i16[1] = BYTE2(*(v23 - 43));
          v44.i16[2] = v44.u8[4];
          v44.i16[3] = BYTE2(*(v23 - 31));
          v44.i16[4] = v44.u8[8];
          v44.i16[5] = BYTE2(*(v23 - 19));
          v44.i16[6] = v44.u8[12];
          v44.i16[7] = BYTE2(*(v23 - 7));
          v52.i32[0] = *(v23 - 39);
          uint32x4_t v53 = (uint32x4_t)vmlaq_s32(v37, (int32x4_t)(*(_OWORD *)&v34 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v27);
          v52.i32[1] = *(v23 - 27);
          v52.i32[2] = *(v23 - 15);
          int32x4_t v54 = vmulq_s32((int32x4_t)v31, v138);
          uint32x4_t v55 = vshrq_n_u32(v43, 8uLL);
          v52.i32[3] = *(v23 - 3);
          v31.i32[0] = v23[8];
          v56.i32[0] = v23[9];
          v56.i32[1] = v23[21];
          uint32x4_t v57 = (uint32x4_t)vmlaq_s32(v39, (int32x4_t)(*(_OWORD *)&v36 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v125);
          v56.i32[2] = v23[33];
          v56.i32[3] = v23[45];
          v43.i16[0] = v43.u8[0];
          v43.i16[1] = BYTE2(v23[5]);
          v43.i16[2] = v43.u8[4];
          v43.i16[3] = BYTE2(v23[17]);
          v43.i16[4] = v43.u8[8];
          v43.i16[5] = BYTE2(v23[29]);
          v43.i16[6] = v43.u8[12];
          v43.i16[7] = BYTE2(v23[41]);
          v58.i32[0] = *(v23 - 38);
          v58.i32[1] = *(v23 - 26);
          v58.i32[2] = *(v23 - 14);
          uint32x4_t v59 = (uint32x4_t)vmlaq_s32(v41, (int32x4_t)(*(_OWORD *)&v38 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v124);
          v139.val[0] = (float32x4_t)vmulq_s32((int32x4_t)v43, v119);
          v58.i32[3] = *(v23 - 2);
          int32x4_t v60 = vmulq_s32((int32x4_t)v35, v123);
          v35.i32[0] = v23[10];
          v38.i32[0] = v23[11];
          v35.i32[1] = v23[22];
          v35.i32[2] = v23[34];
          v35.i32[3] = v23[46];
          uint32x4_t v127 = (uint32x4_t)vmlaq_s32(v49, (int32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v122);
          v43.i32[0] = *(v23 - 37);
          v43.i32[1] = *(v23 - 25);
          int32x4_t v126 = vmulq_s32((int32x4_t)v40, v121);
          v43.i32[2] = *(v23 - 13);
          v43.i32[3] = *(v23 - 1);
          unsigned long long v61 = *(_OWORD *)&v128 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
          v38.i32[1] = v23[23];
          v38.i32[2] = v23[35];
          v38.i32[3] = v23[47];
          int32x4_t v62 = vmulq_s32((int32x4_t)v44, v119);
          uint32x4_t v129 = (uint32x4_t)vmlaq_s32((int32x4_t)v139.val[0], (int32x4_t)(*(_OWORD *)&v55 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v118);
          int32x4_t v63 = (int32x4_t)vshrq_n_u32(v52, 8uLL);
          v52.i16[0] = v52.u8[0];
          v52.i16[1] = BYTE2(*(v23 - 39));
          v52.i16[2] = v52.u8[4];
          v52.i16[3] = BYTE2(*(v23 - 27));
          v52.i16[4] = v52.u8[8];
          v52.i16[5] = BYTE2(*(v23 - 15));
          v52.i16[6] = v52.u8[12];
          v52.i16[7] = BYTE2(*(v23 - 3));
          int32x4_t v64 = (int32x4_t)vshrq_n_u32(v56, 8uLL);
          v56.i16[0] = v56.u8[0];
          v56.i16[1] = BYTE2(v23[9]);
          v56.i16[2] = v56.u8[4];
          v56.i16[3] = BYTE2(v23[21]);
          v56.i16[4] = v56.u8[8];
          v56.i16[5] = BYTE2(v23[33]);
          v56.i16[6] = v56.u8[12];
          v56.i16[7] = BYTE2(v23[45]);
          int32x4_t v65 = vmulq_s32((int32x4_t)v52, v123);
          uint32x4_t v66 = (uint32x4_t)vmlaq_s32(v131, (int32x4_t)(*(_OWORD *)&v139.val[1] & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v27);
          uint32x4_t v132 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v56, v123), (int32x4_t)(*(_OWORD *)&v64 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v122);
          uint32x4_t v67 = vshrq_n_u32(v58, 8uLL);
          v58.i16[0] = v58.u8[0];
          v58.i16[1] = BYTE2(*(v23 - 38));
          v58.i16[2] = v58.u8[4];
          v58.i16[3] = BYTE2(*(v23 - 26));
          v58.i16[4] = v58.u8[8];
          v58.i16[5] = BYTE2(*(v23 - 14));
          v58.i16[6] = v58.u8[12];
          v58.i16[7] = BYTE2(*(v23 - 2));
          uint32x4_t v68 = vshrq_n_u32(v35, 8uLL);
          v35.i16[0] = v35.u8[0];
          v35.i16[1] = BYTE2(v23[10]);
          v35.i16[2] = v35.u8[4];
          v35.i16[3] = BYTE2(v23[22]);
          v35.i16[4] = v35.u8[8];
          v35.i16[5] = BYTE2(v23[34]);
          v35.i16[6] = v35.u8[12];
          v35.i16[7] = BYTE2(v23[46]);
          uint32x4_t v69 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v32, v137), (int32x4_t)(*(_OWORD *)&v46 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v124);
          int32x4_t v70 = vmulq_s32((int32x4_t)v58, v121);
          uint32x4_t v71 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v35, v121), (int32x4_t)(*(_OWORD *)&v68 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v120);
          int32x4_t v72 = (int32x4_t)vshrq_n_u32(v43, 8uLL);
          v43.i16[0] = v43.u8[0];
          v43.i16[1] = BYTE2(*(v23 - 37));
          v43.i16[2] = v43.u8[4];
          v43.i16[3] = BYTE2(*(v23 - 25));
          v43.i16[4] = v43.u8[8];
          v43.i16[5] = BYTE2(*(v23 - 13));
          v43.i16[6] = v43.u8[12];
          v43.i16[7] = BYTE2(*(v23 - 1));
          uint32x4_t v73 = vshrq_n_u32((uint32x4_t)v38, 8uLL);
          v38.i16[0] = v38.u8[0];
          v38.i16[1] = BYTE2(v23[11]);
          v38.i16[2] = v38.u8[4];
          v38.i16[3] = BYTE2(v23[23]);
          v38.i16[4] = v38.u8[8];
          v38.i16[5] = BYTE2(v23[35]);
          v38.i16[6] = v38.u8[12];
          v38.i16[7] = BYTE2(v23[47]);
          int32x4_t v74 = vmulq_s32((int32x4_t)v43, v119);
          v43.i32[0] = *(v23 - 42);
          v43.i32[1] = *(v23 - 30);
          v43.i32[2] = *(v23 - 18);
          v43.i32[3] = *(v23 - 6);
          uint32x4_t v75 = (uint32x4_t)vmlaq_s32(v65, (int32x4_t)(*(_OWORD *)&v63 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v122);
          v63.i32[0] = v23[6];
          v64.i32[0] = v23[7];
          v63.i32[1] = v23[18];
          uint32x4_t v76 = (uint32x4_t)vmlaq_s32(v70, (int32x4_t)(*(_OWORD *)&v67 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v120);
          v63.i32[2] = v23[30];
          v63.i32[3] = v23[42];
          uint32x4_t v77 = (uint32x4_t)vmlaq_s32(v74, (int32x4_t)(*(_OWORD *)&v72 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v118);
          uint32x4_t v78 = (uint32x4_t)vmlaq_s32(vmulq_s32(v38, v119), (int32x4_t)(*(_OWORD *)&v73 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v118);
          v72.i32[0] = *(v23 - 41);
          v72.i32[1] = *(v23 - 29);
          v72.i32[2] = *(v23 - 17);
          v72.i32[3] = *(v23 - 5);
          v64.i32[1] = v23[19];
          v64.i32[2] = v23[31];
          v64.i32[3] = v23[43];
          uint32x4_t v79 = vshrq_n_u32(v43, 8uLL);
          v43.i16[0] = v43.u8[0];
          v43.i16[1] = BYTE2(*(v23 - 42));
          v43.i16[2] = v43.u8[4];
          v43.i16[3] = BYTE2(*(v23 - 30));
          v43.i16[4] = v43.u8[8];
          v43.i16[5] = BYTE2(*(v23 - 18));
          v43.i16[6] = v43.u8[12];
          v43.i16[7] = BYTE2(*(v23 - 6));
          uint32x4_t v80 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v43, v136), (int32x4_t)(*(_OWORD *)&v79 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v27);
          uint32x4_t v81 = vshrq_n_u32((uint32x4_t)v63, 8uLL);
          v63.i16[0] = v63.u8[0];
          v63.i16[1] = BYTE2(v23[6]);
          v63.i16[2] = v63.u8[4];
          v63.i16[3] = BYTE2(v23[18]);
          v63.i16[4] = v63.u8[8];
          v63.i16[5] = BYTE2(v23[30]);
          v63.i16[6] = v63.u8[12];
          v63.i16[7] = BYTE2(v23[42]);
          uint32x4_t v82 = (uint32x4_t)vmlaq_s32(vmulq_s32(v63, v136), (int32x4_t)(*(_OWORD *)&v81 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v27);
          uint32x4_t v83 = vshrq_n_u32((uint32x4_t)v72, 8uLL);
          v72.i16[0] = v72.u8[0];
          v72.i16[1] = BYTE2(*(v23 - 41));
          v72.i16[2] = v72.u8[4];
          v72.i16[3] = BYTE2(*(v23 - 29));
          v72.i16[4] = v72.u8[8];
          v72.i16[5] = BYTE2(*(v23 - 17));
          v72.i16[6] = v72.u8[12];
          v72.i16[7] = BYTE2(*(v23 - 5));
          uint32x4_t v84 = (uint32x4_t)vmlaq_s32(vmulq_s32(v72, v138), (int32x4_t)(*(_OWORD *)&v83 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v125);
          int32x4_t v85 = (int32x4_t)vshrq_n_u32((uint32x4_t)v64, 8uLL);
          v64.i16[0] = v64.u8[0];
          v64.i16[1] = BYTE2(v23[7]);
          v64.i16[2] = v64.u8[4];
          v64.i16[3] = BYTE2(v23[19]);
          v64.i16[4] = v64.u8[8];
          v64.i16[5] = BYTE2(v23[31]);
          v64.i16[6] = v64.u8[12];
          v64.i16[7] = BYTE2(v23[43]);
          uint32x4_t v86 = (uint32x4_t)vmlaq_s32(vmulq_s32(v64, v138), (int32x4_t)(*(_OWORD *)&v85 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v125);
          v85.i32[0] = *(v23 - 40);
          v85.i32[1] = *(v23 - 28);
          v139.val[0] = (float32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v66, 0xFuLL), (uint32x4_t)vmlaq_s32(v54, (int32x4_t)(*(_OWORD *)&v45 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v125), 0xFuLL), v69, 0xFuLL), (uint32x4_t)vmlaq_s32(v60, (int32x4_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v122), 0xFuLL);
          v85.i32[2] = *(v23 - 16);
          v85.i32[3] = *(v23 - 4);
          int32x4_t v87 = (int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v53, 0xFuLL), v57, 0xFuLL), v59, 0xFuLL), v127, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v42, v121), (int32x4_t)(*(_OWORD *)&v51 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v120), 0xFuLL), v129, 0xFuLL);
          uint32x4_t v88 = vshrq_n_u32((uint32x4_t)v85, 8uLL);
          v85.i32[0] &= 0xFF00FFu;
          v85.i16[2] = v85.u8[4];
          v85.i16[3] = BYTE2(*(v23 - 28));
          v85.i16[4] = v85.u8[8];
          v85.i16[5] = BYTE2(*(v23 - 16));
          v85.i16[6] = v85.u8[12];
          v85.i16[7] = BYTE2(*(v23 - 4));
          float32x4x2_t v140 = vld2q_f32(v22);
          v31.i32[1] = v23[20];
          v31.i32[2] = v23[32];
          v31.i32[3] = v23[44];
          uint32x4_t v89 = vshrq_n_u32(v31, 8uLL);
          v31.i16[0] = v31.u8[0];
          v31.i16[1] = BYTE2(v23[8]);
          v31.i16[2] = v31.u8[4];
          v31.i16[3] = BYTE2(v23[20]);
          v31.i16[4] = v31.u8[8];
          v31.i16[5] = BYTE2(v23[32]);
          v31.i16[6] = v31.u8[12];
          v31.i16[7] = BYTE2(v23[44]);
          v22 += 16;
          int32x4_t v24 = vminq_s32(vsubq_s32((int32x4_t)v134.val[1], (int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v75, 0xFuLL), v76, 0xFuLL), v77, 0xFuLL), v80, 0xFuLL), v84, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32(v85, v137), (int32x4_t)(*(_OWORD *)&v88 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v124), 0xFuLL)), vminq_s32(vsubq_s32(
                      (int32x4_t)v134.val[0],
                      (int32x4_t)vsraq_n_u32(vsraq_n_u32((uint32x4_t)v139.val[0], (uint32x4_t)vmlaq_s32(v126, (int32x4_t)v61, v120), 0xFuLL), (uint32x4_t)vmlaq_s32(v62, (int32x4_t)(*(_OWORD *)&v130 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v118), 0xFuLL)), v135));
          v23 += 96;
          int32x4_t v26 = vminq_s32(vsubq_s32((int32x4_t)v140.val[1], (int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v132, 0xFuLL), v71, 0xFuLL), v78, 0xFuLL), v82, 0xFuLL), v86, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v31, v137), (int32x4_t)(*(_OWORD *)&v89 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v124), 0xFuLL)), vminq_s32(vsubq_s32((int32x4_t)v140.val[0], v87), v133));
          v25 -= 8;
        }
        while (v25);
        int v17 = vminvq_s32(vminq_s32(v24, v26));
        unsigned long long v13 = v116;
        int32x4_t v12 = v117;
        unint64_t v15 = v114;
        int32x2_t v14 = v115;
        if (v20 != v21)
        {
LABEL_16:
          int32x2_t v90 = vzip1_s32(vdup_laneq_s32(v12, 3), v14);
          int32x2_t v91 = vzip1_s32(vdup_laneq_s32((int32x4_t)v13, 3), (int32x2_t)v15);
          int32x2_t v92 = vzip2_s32((int32x2_t)v15, v14);
          int32x2_t v93 = (int32x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL).u64[0];
          int32x2_t v94 = (int32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL).u64[0];
          unsigned int v95 = v6 + 1;
          do
          {
            v96.i16[0] = *(_OWORD *)v11;
            v96.i16[1] = BYTE2(*(_OWORD *)v11);
            v96.i16[2] = BYTE4(*(void *)v11);
            v96.i16[3] = BYTE6(*(void *)v11);
            v96.i16[4] = *(void *)(v11 + 8);
            v96.i16[5] = BYTE2(*(void *)(v11 + 8));
            v96.i16[6] = BYTE12(*(_OWORD *)v11);
            v96.i16[7] = BYTE14(*(_OWORD *)v11);
            v97.i16[0] = *(void *)(v11 + 16);
            v97.i16[1] = BYTE2(*(void *)(v11 + 16));
            v97.i16[2] = BYTE4(*(void *)(v11 + 16));
            v97.i16[3] = BYTE6(*(void *)(v11 + 16));
            uint32x2_t v98 = vshr_n_u32((uint32x2_t)vmla_s32(vmul_s32(v97, v14), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v11 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)v15), 0xFuLL);
            __int32 v99 = v98.i32[1];
            int v100 = *v9;
            int v101 = v9[1];
            v9 += 2;
            __int32 v102 = vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v96, v12), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v11, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)v13), 0xFuLL))+ v98.i32[0];
            unsigned int v103 = *(_DWORD *)(v11 + 44);
            v96.i16[0] = *(void *)(v11 + 36);
            v96.i16[1] = BYTE2(*(void *)(v11 + 36));
            v96.i16[2] = BYTE4(*(void *)(v11 + 36));
            v96.i16[3] = BYTE6(*(void *)(v11 + 36));
            uint32x2_t v104 = (uint32x2_t)vmla_s32(vmul_s32(*(int32x2_t *)v96.i8, v90), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v11 + 36), 8uLL) & 0xFFFF00FFFFFF00FFLL), v91);
            int32x2_t v105 = (int32x2_t)vshr_n_u32(v104, 0xFuLL);
            int v106 = v100 - v102 - v99;
            v107.i16[0] = BYTE1(v103);
            v107.i16[1] = v103 >> 8 >> 16;
            v107.i16[2] = v103;
            v107.i16[3] = BYTE2(v103);
            int32x2_t v108 = vmul_s32(v107, v92);
            uint32x2_t v109 = vshr_n_u32(*(uint32x2_t *)(v11 + 28), 8uLL);
            v110.i16[0] = *(void *)(v11 + 28);
            v110.i16[1] = BYTE2(*(void *)(v11 + 28));
            v110.i16[2] = BYTE4(*(void *)(v11 + 28));
            v110.i16[3] = BYTE6(*(void *)(v11 + 28));
            int32x2_t v111 = vmul_s32(v110, v93);
            if (v106 < v17) {
              int v17 = v106;
            }
            uint32x2_t v112 = vshr_n_u32((uint32x2_t)vmla_s32(v111, (int32x2_t)(*(void *)&v109 & 0xFFFF00FFFFFF00FFLL), v94), 0xFuLL);
            signed __int32 v113 = v101
                 - (v112.i32[0]
                  + v112.i32[1])
                 - (vsra_n_u32((uint32x2_t)vdup_lane_s32(v105, 1), v104, 0xFuLL).u32[0]
                  + (vadd_s32(v108, vdup_lane_s32(v108, 1)).u32[0] >> 15)
                  + (((*(_DWORD *)(v11 + 24) & 0xFF00FF) * v12.i32[0]
                    + ((*(_DWORD *)(v11 + 24) >> 8) & 0xFF00FF) * v13) >> 15));
            if (v113 < v17) {
              int v17 = v113;
            }
            --v95;
            v11 += 48;
          }
          while (v95 > 1);
        }
        return (__int16)(((*(_DWORD *)(a1 + 1568) + v17) * *(_DWORD *)(a1 + 1052)
                                                    + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
      }
LABEL_24:
      int v17 = 0x40000000;
      return (__int16)(((*(_DWORD *)(a1 + 1568) + v17) * *(_DWORD *)(a1 + 1052)
                                                  + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
  }
  return sub_1000181A0(a1, a2);
}

uint64_t sub_1000181A0(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1176))
  {
    uint64_t v2 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
    unsigned int v3 = *v2;
    int v4 = v2[1] - *v2;
    if (v4 >= 1) {
      goto LABEL_3;
    }
LABEL_9:
    int v14 = 0x40000000;
    return (__int16)(((*(_DWORD *)(a1 + 1568) + v14) * *(_DWORD *)(a1 + 1052)
                                                + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  uint64_t v16 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
  unsigned int v3 = *v16;
  int v4 = v16[1] - v3;
  if (v4 < 1) {
    goto LABEL_9;
  }
LABEL_3:
  if (*(_DWORD *)(a1 + 2012)) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = v3;
  }
  uint64_t v6 = *(void *)(a1 + 1552);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = (int *)(v7 + 4 * (int)v5);
  uint64_t v9 = *(void *)(a1 + 136) + 24 * (int)v5;
  v10.i16[0] = *(_OWORD *)v6;
  v10.i16[1] = BYTE2(*(_OWORD *)v6);
  v10.i16[2] = BYTE4(*(void *)v6);
  v10.i16[3] = BYTE6(*(void *)v6);
  v10.i16[4] = *(void *)(v6 + 8);
  v10.i16[5] = BYTE2(*(void *)(v6 + 8));
  v10.i16[6] = BYTE12(*(_OWORD *)v6);
  v10.i16[7] = BYTE14(*(_OWORD *)v6);
  unsigned long long v11 = *(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v6, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  v12.i16[0] = *(void *)(v6 + 16);
  v12.i16[1] = BYTE2(*(void *)(v6 + 16));
  v12.i16[2] = BYTE4(*(void *)(v6 + 16));
  v12.i16[3] = BYTE6(*(void *)(v6 + 16));
  unint64_t v13 = *(void *)&vshr_n_u32(*(uint32x2_t *)(v6 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL;
  if (v4 >= 8)
  {
    uint64_t v17 = (int)v5;
    uint64_t v18 = v4;
    uint64_t v19 = v4 & 0xFFFFFFF8;
    v4 -= v19;
    v8 += v19;
    int32x4_t v85 = vdupq_lane_s32(*(int32x2_t *)&v11, 0);
    int32x4_t v86 = vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
    int32x4_t v83 = vdupq_lane_s32(*(int32x2_t *)&v11, 1);
    int32x4_t v84 = vdupq_lane_s32(*(int32x2_t *)v10.i8, 1);
    int32x4_t v20 = vdupq_laneq_s32(v10, 2);
    int32x4_t v21 = vdupq_laneq_s32((int32x4_t)v11, 2);
    uint64_t v15 = v9 + 24 * v19;
    unsigned long long v81 = v11;
    int32x4_t v82 = v10;
    int32x4_t v22 = vdupq_laneq_s32(v10, 3);
    int32x4_t v23 = vdupq_laneq_s32((int32x4_t)v11, 3);
    int32x4_t v24 = vdupq_lane_s32(v12, 0);
    uint64_t v25 = (int32x4_t *)(v7 + 4 * v17 + 16);
    int32x4_t v26 = vdupq_lane_s32((int32x2_t)v13, 0);
    v27.i64[0] = 0x4000000040000000;
    v27.i64[1] = 0x4000000040000000;
    unint64_t v79 = v13;
    int32x2_t v80 = v12;
    int32x4_t v28 = vdupq_lane_s32(v12, 1);
    uint64_t v29 = v19;
    int32x4_t v30 = vdupq_lane_s32((int32x2_t)v13, 1);
    v31.i64[0] = 0x4000000040000000;
    v31.i64[1] = 0x4000000040000000;
    do
    {
      int32x4_t v32 = *(int32x4_t *)(v9 + 64);
      int32x4_t v33 = *(int32x4_t *)(v9 + 80);
      int32x4_t v35 = *(int32x4_t *)(v9 + 32);
      int32x4_t v34 = *(int32x4_t *)(v9 + 48);
      int32x4_t v36 = *(int32x4_t *)v9;
      int32x4_t v37 = *(int32x4_t *)(v9 + 16);
      int32x4_t v38 = *(int32x4_t *)(v9 + 160);
      int32x4_t v39 = *(int32x4_t *)(v9 + 176);
      int32x4_t v41 = *(int32x4_t *)(v9 + 128);
      int32x4_t v40 = *(int32x4_t *)(v9 + 144);
      int32x4_t v42 = *(int32x4_t *)(v9 + 96);
      int32x4_t v43 = *(int32x4_t *)(v9 + 112);
      v44.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v37, *(int32x4_t *)v9), *(int8x16_t *)v9, 4uLL).u64[0];
      v45.i64[0] = vzip2q_s32(*(int32x4_t *)v9, vuzp1q_s32(*(int32x4_t *)v9, v35)).u64[0];
      v46.i32[1] = HIDWORD(*(void *)(v9 + 32));
      v46.i32[0] = HIDWORD(*(_OWORD *)v9);
      int32x4_t v47 = vtrn1q_s32(vuzp1q_s32(v34, v34), v32);
      v48.i64[0] = vzip2q_s32(v42, vuzp1q_s32(v42, v41)).u64[0];
      v36.i32[1] = *(void *)(v9 + 24);
      v49.i32[0] = v42.i32[0];
      LODWORD(v50) = *(void *)(v9 + 56);
      HIDWORD(v50) = v33.i32[0];
      v49.i32[1] = *(void *)(v9 + 120);
      LODWORD(v51) = *(void *)(v9 + 152);
      HIDWORD(v51) = v39.i32[0];
      int32x4_t v52 = (int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v33, 8uLL);
      v45.i64[1] = v50;
      int32x4_t v53 = vtrn1q_s32(vuzp1q_s32(v32, v32), v33);
      v33.i32[2] = HIDWORD(*(void *)(v9 + 64));
      v48.i64[1] = v51;
      v32.i32[2] = HIDWORD(*(void *)(v9 + 48));
      v36.i64[1] = v47.i64[1];
      v46.i64[1] = vzip2q_s32(v34, v52).i64[1];
      v49.i64[1] = vtrn1q_s32(vuzp1q_s32(v40, v40), v38).i64[1];
      v54.i32[1] = HIDWORD(*(void *)(v9 + 128));
      int32x4_t v55 = (int32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v39, 8uLL);
      v54.i32[0] = v42.i32[3];
      int32x4_t v56 = vtrn1q_s32(vuzp1q_s32(v38, v38), v39);
      v39.i32[2] = HIDWORD(*(void *)(v9 + 160));
      HIDWORD(v51) = v38.i32[3];
      LODWORD(v51) = HIDWORD(*(void *)(v9 + 144));
      v42.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v43, v42), (int8x16_t)v42, 4uLL).u64[0];
      v54.i64[1] = vzip2q_s32(v40, v55).i64[1];
      v44.i64[1] = v32.i64[1];
      v32.i32[0] = v37.i32[0];
      v32.i32[1] = *(void *)(v9 + 40);
      v32.i64[1] = v53.i64[1];
      v38.i32[0] = v43.i32[0];
      v38.i32[1] = *(void *)(v9 + 136);
      v38.i64[1] = v56.i64[1];
      v42.i64[1] = v51;
      v57.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v35, v37), (int8x16_t)v37, 4uLL).u64[0];
      v57.i64[1] = v33.i64[1];
      v33.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v41, v43), (int8x16_t)v43, 4uLL).u64[0];
      v33.i64[1] = v39.i64[1];
      uint32x4_t v58 = vshrq_n_u32((uint32x4_t)v36, 8uLL);
      v36.i16[0] = *(_OWORD *)v9;
      v36.i16[1] = BYTE2(*(_OWORD *)v9);
      v36.i16[2] = *(void *)(v9 + 24);
      v36.i16[3] = BYTE2(*(void *)(v9 + 24));
      v36.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v59 = (uint32x4_t)vmlaq_s32(vmulq_s32(v36, v86), (int32x4_t)(*(_OWORD *)&v58 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v85);
      uint32x4_t v60 = vshrq_n_u32(v49, 8uLL);
      v49.i16[0] = *(_OWORD *)(v9 + 96);
      v49.i16[1] = BYTE2(*(_OWORD *)(v9 + 96));
      v49.i16[2] = *(void *)(v9 + 120);
      v49.i16[3] = BYTE2(*(void *)(v9 + 120));
      v49.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v61 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v42 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v84), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v42, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v83);
      uint32x4_t v62 = vshrq_n_u32(v46, 8uLL);
      v46.i16[0] = v46.u8[0];
      v46.i16[1] = BYTE14(*(_OWORD *)v9);
      v46.i16[2] = v46.u8[4];
      v46.i16[3] = BYTE6(*(void *)(v9 + 32));
      v46.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v63 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v46, v22), (int32x4_t)(*(_OWORD *)&v62 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v23);
      uint32x4_t v64 = vshrq_n_u32((uint32x4_t)v32, 8uLL);
      v32.i16[0] = v37.u8[0];
      v32.i16[1] = v37.u8[2];
      v32.i16[2] = *(void *)(v9 + 40);
      v32.i16[3] = BYTE2(*(void *)(v9 + 40));
      v32.i64[1] = v53.i64[1] & 0xFF00FF00FF00FFLL;
      uint32x4_t v65 = (uint32x4_t)vmlaq_s32(vmulq_s32(v32, v24), (int32x4_t)(*(_OWORD *)&v64 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v26);
      uint32x4_t v66 = vshrq_n_u32(v54, 8uLL);
      v54.i16[0] = BYTE12(*(_OWORD *)(v9 + 96));
      v54.i16[1] = BYTE14(*(_OWORD *)(v9 + 96));
      v54.i16[2] = v54.u8[4];
      v54.i16[3] = BYTE6(*(void *)(v9 + 128));
      v54.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v67 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v54, v22), (int32x4_t)(*(_OWORD *)&v66 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v23);
      uint32x4_t v68 = vshrq_n_u32((uint32x4_t)v38, 8uLL);
      v38.i16[0] = v43.u8[0];
      v38.i16[1] = v43.u8[2];
      v38.i16[2] = *(void *)(v9 + 136);
      v38.i16[3] = BYTE2(*(void *)(v9 + 136));
      v38.i64[1] = v56.i64[1] & 0xFF00FF00FF00FFLL;
      uint32x4_t v69 = (uint32x4_t)vmlaq_s32(vmulq_s32(v38, v24), (int32x4_t)(*(_OWORD *)&v68 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v26);
      int32x4_t v70 = vsubq_s32(v25[-1], (int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v59, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v44 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v84), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v44, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v83), 0xFuLL), (uint32x4_t)vmlaq_s32(
                                               vmulq_s32((int32x4_t)(*(_OWORD *)&v45 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v20), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v45, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v21), 0xFuLL), v63, 0xFuLL), v65, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v57 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v28),
                                         (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v57, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v30), 0xFuLL));
      int32x4_t v71 = *v25;
      v25 += 2;
      int32x4_t v27 = vminq_s32(v70, v27);
      int32x4_t v31 = vminq_s32(vsubq_s32(v71, (int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v49, v86), (int32x4_t)(*(_OWORD *)&v60 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v85), 0xFuLL), v61, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32(
                                                   (int32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v20), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v48, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v21), 0xFuLL), v67, 0xFuLL), v69, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v33 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v28), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v33, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),
                                           v30),
                             0xFuLL)),
              v31);
      v9 += 192;
      v29 -= 8;
    }
    while (v29);
    int v14 = vminvq_s32(vminq_s32(v27, v31));
    unsigned long long v11 = v81;
    int32x4_t v10 = v82;
    unint64_t v13 = v79;
    int32x2_t v12 = v80;
    if (v19 == v18) {
      return (__int16)(((*(_DWORD *)(a1 + 1568) + v14) * *(_DWORD *)(a1 + 1052)
    }
                                                  + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  else
  {
    int v14 = 0x40000000;
    uint64_t v15 = *(void *)(a1 + 136) + 24 * (int)v5;
  }
  unsigned int v72 = v4 + 1;
  do
  {
    v73.i16[0] = *(_OWORD *)v15;
    v73.i16[1] = BYTE2(*(_OWORD *)v15);
    v73.i16[2] = BYTE4(*(void *)v15);
    v73.i16[3] = BYTE6(*(void *)v15);
    v73.i16[4] = *(void *)(v15 + 8);
    v73.i16[5] = BYTE2(*(void *)(v15 + 8));
    v73.i16[6] = BYTE12(*(_OWORD *)v15);
    v73.i16[7] = BYTE14(*(_OWORD *)v15);
    v74.i16[0] = *(void *)(v15 + 16);
    v74.i16[1] = BYTE2(*(void *)(v15 + 16));
    v74.i16[2] = BYTE4(*(void *)(v15 + 16));
    v74.i16[3] = BYTE6(*(void *)(v15 + 16));
    uint32x2_t v75 = vshr_n_u32((uint32x2_t)vmla_s32(vmul_s32(v74, v12), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v15 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)v13), 0xFuLL);
    int v76 = *v8++;
    __int32 v77 = v76
        - (vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v73, v10), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v15, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)v11), 0xFuLL))+ v75.i32[0])- v75.i32[1];
    if (v77 < v14) {
      int v14 = v77;
    }
    --v72;
    v15 += 24;
  }
  while (v72 > 1);
  return (__int16)(((*(_DWORD *)(a1 + 1568) + v14) * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_1000185DC(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1176))
  {
    uint64_t v2 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
    unsigned int v3 = *v2;
    int v4 = v2[1] - *v2;
    if (v4 >= 1)
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 2012)) {
        unsigned int v5 = a2;
      }
      else {
        unsigned int v5 = v3;
      }
      uint64_t v6 = *(void *)(a1 + 1552);
      uint64_t v7 = (int *)(*(void *)(a1 + 32) + 4 * (int)v5);
      uint64_t v8 = *(void *)(a1 + 136) + 4 * (int)(*(_DWORD *)(a1 + 1128) * v5);
      v9.i16[0] = *(_OWORD *)v6;
      v9.i16[1] = BYTE2(*(_OWORD *)v6);
      v9.i16[2] = BYTE4(*(void *)v6);
      v9.i16[3] = BYTE6(*(void *)v6);
      v9.i16[4] = *(void *)(v6 + 8);
      v9.i16[5] = BYTE2(*(void *)(v6 + 8));
      v9.i16[6] = BYTE12(*(_OWORD *)v6);
      v9.i16[7] = BYTE14(*(_OWORD *)v6);
      unsigned long long v10 = *(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v6, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
      v11.i16[0] = *(void *)(v6 + 16);
      v11.i16[1] = BYTE2(*(void *)(v6 + 16));
      v11.i16[2] = BYTE4(*(void *)(v6 + 16));
      v11.i16[3] = BYTE6(*(void *)(v6 + 16));
      unint64_t v12 = *(void *)&vshr_n_u32(*(uint32x2_t *)(v6 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL;
      unint64_t v13 = (_DWORD *)(v6 + 24);
      HIDWORD(v15) = *(_DWORD *)(a1 + 1100);
      LODWORD(v15) = HIDWORD(v15) - 24;
      int v14 = v15 >> 2;
      uint64_t v16 = (unsigned int *)(v6 + 28);
      int v17 = v4 + 1;
      int v18 = 0x40000000;
      while (1)
      {
        int v27 = *v7++;
        v28.i16[0] = *(_OWORD *)v8;
        v28.i16[1] = BYTE2(*(_OWORD *)v8);
        v28.i16[2] = BYTE4(*(void *)v8);
        v28.i16[3] = BYTE6(*(void *)v8);
        v28.i16[4] = *(void *)(v8 + 8);
        v28.i16[5] = BYTE2(*(void *)(v8 + 8));
        v28.i16[6] = BYTE12(*(_OWORD *)v8);
        v28.i16[7] = BYTE14(*(_OWORD *)v8);
        v29.i16[0] = *(void *)(v8 + 16);
        v29.i16[1] = BYTE2(*(void *)(v8 + 16));
        v29.i16[2] = BYTE4(*(void *)(v8 + 16));
        v29.i16[3] = BYTE6(*(void *)(v8 + 16));
        uint32x2_t v30 = vshr_n_u32((uint32x2_t)vmla_s32(vmul_s32(v29, v11), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v8 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)v12), 0xFuLL);
        int32x4_t v21 = (unsigned int *)(v8 + 24);
        __int32 v25 = v27
            - (vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v28, v9), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v8, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)v10), 0xFuLL))+ v30.i32[0])- v30.i32[1];
        if (v14 == 1)
        {
          int32x4_t v23 = v13;
        }
        else
        {
          if (v14 == 2)
          {
            uint64_t v19 = v13;
          }
          else
          {
            if (v14 != 3) {
              goto LABEL_10;
            }
            int32x4_t v21 = (unsigned int *)(v8 + 28);
            v25 -= ((*v13 & 0xFF00FF) * (*(_DWORD *)(v8 + 24) & 0xFF00FF)
                  + ((*v13 >> 8) & 0xFF00FF) * ((*(_DWORD *)(v8 + 24) >> 8) & 0xFF00FFu)) >> 15;
            uint64_t v19 = v16;
          }
          unsigned int v22 = *v21++;
          unsigned int v20 = v22;
          unsigned int v24 = *v19;
          int32x4_t v23 = v19 + 1;
          v25 -= ((v24 & 0xFF00FF) * (v20 & 0xFF00FF) + ((v24 >> 8) & 0xFF00FF) * ((v20 >> 8) & 0xFF00FF)) >> 15;
        }
        unsigned int v26 = *v21++;
        v25 -= ((*v23 & 0xFF00FF) * (v26 & 0xFF00FF) + ((*v23 >> 8) & 0xFF00FF) * ((v26 >> 8) & 0xFF00FF)) >> 15;
LABEL_10:
        if (v25 < v18) {
          int v18 = v25;
        }
        --v17;
        uint64_t v8 = (uint64_t)v21;
        if (v17 <= 1) {
          return (__int16)(((*(_DWORD *)(a1 + 1568) + v18) * *(_DWORD *)(a1 + 1052)
        }
                                                      + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
      }
    }
  }
  else
  {
    int32x4_t v31 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    unsigned int v3 = *v31;
    int v4 = v31[1] - v3;
    if (v4 >= 1) {
      goto LABEL_3;
    }
  }
  int v18 = 0x40000000;
  return (__int16)(((*(_DWORD *)(a1 + 1568) + v18) * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_1000187CC(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1176))
  {
    uint64_t v2 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
    unsigned int v3 = *v2;
    int v4 = v2[1] - *v2;
    if (v4 >= 1) {
      goto LABEL_3;
    }
LABEL_8:
    int v14 = 0x40000000;
    return (__int16)(((*(_DWORD *)(a1 + 1568) + v14) * *(_DWORD *)(a1 + 1052)
                                                + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  int v17 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
  unsigned int v3 = *v17;
  int v4 = v17[1] - v3;
  if (v4 < 1) {
    goto LABEL_8;
  }
LABEL_3:
  if (*(_DWORD *)(a1 + 2012)) {
    unsigned int v3 = a2;
  }
  unsigned int v5 = *(uint32x4_t **)(a1 + 1552);
  uint64_t v6 = (int32x4_t *)(*(void *)(a1 + 32) + 4 * (int)v3);
  uint64_t v7 = *(void *)(a1 + 136) + 36 * (int)v3;
  v8.i16[0] = *(_OWORD *)&v5[1];
  v8.i16[1] = BYTE2(*(_OWORD *)&v5[1]);
  v8.i16[2] = BYTE4(v5[1].i64[0]);
  v8.i16[3] = BYTE6(v5[1].i64[0]);
  v8.i16[4] = v5[1].i64[1];
  v8.i16[5] = BYTE2(v5[1].i64[1]);
  v8.i16[6] = BYTE12(*(_OWORD *)&v5[1]);
  v8.i16[7] = BYTE14(*(_OWORD *)&v5[1]);
  v9.i16[0] = v5->u8[0];
  v9.i16[1] = BYTE2(v5->u32[0]);
  v9.i16[2] = BYTE4(v5->i64[0]);
  v9.i16[3] = BYTE6(v5->i64[0]);
  v9.i16[4] = v5->i64[1];
  v9.i16[5] = BYTE2(v5->i64[1]);
  v9.i16[6] = BYTE12(*(unsigned long long *)v5);
  v9.i16[7] = BYTE14(*(unsigned long long *)v5);
  unsigned long long v10 = *(_OWORD *)&vshrq_n_u32(v5[1], 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  unsigned long long v11 = *(_OWORD *)&vshrq_n_u32(*v5, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  LODWORD(v5) = v5[2].i32[0];
  unsigned int v12 = v5 & 0xFF00FF;
  unsigned int v13 = (v5 >> 8) & 0xFF00FF;
  if (v4 >= 4)
  {
    int32x4_t v69 = vdupq_lane_s32(*(int32x2_t *)&v11, 0);
    int32x4_t v70 = vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
    uint64_t v18 = v4;
    uint64_t v19 = v4 & 0xFFFFFFFC;
    v4 -= v19;
    int32x4_t v67 = vdupq_lane_s32(*(int32x2_t *)&v11, 1);
    int32x4_t v68 = vdupq_lane_s32(*(int32x2_t *)v9.i8, 1);
    unint64_t v15 = (int32x4_t *)((char *)v6 + 4 * v19);
    int32x4_t v66 = vdupq_laneq_s32(v9, 2);
    int32x4_t v20 = vdupq_laneq_s32((int32x4_t)v11, 2);
    int32x4_t v21 = vdupq_laneq_s32(v9, 3);
    int32x4_t v22 = vdupq_laneq_s32((int32x4_t)v11, 3);
    int32x4_t v23 = vdupq_lane_s32(*(int32x2_t *)v8.i8, 0);
    int32x4_t v24 = vdupq_lane_s32(*(int32x2_t *)&v10, 0);
    int32x4_t v25 = vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
    int32x4_t v26 = vdupq_lane_s32(*(int32x2_t *)&v10, 1);
    int32x4_t v27 = vdupq_laneq_s32(v8, 2);
    int32x4_t v28 = vdupq_laneq_s32((int32x4_t)v10, 2);
    uint64_t v16 = v7 + 36 * v19;
    int32x4_t v29 = vdupq_laneq_s32(v8, 3);
    int32x4_t v30 = vdupq_laneq_s32((int32x4_t)v10, 3);
    int32x4_t v31 = (__int32 *)(v7 + 72);
    int32x4_t v32 = vdupq_n_s32(v12);
    v33.i64[0] = 0x4000000040000000;
    v33.i64[1] = 0x4000000040000000;
    uint64_t v34 = v19;
    int32x4_t v35 = vdupq_n_s32(v13);
    do
    {
      v36.i32[0] = *(v31 - 18);
      v36.i32[1] = *(v31 - 9);
      int32x4_t v37 = *v6++;
      v36.i32[2] = *v31;
      v36.i32[3] = v31[9];
      v38.i32[0] = *(v31 - 17);
      v38.i32[1] = *(v31 - 8);
      v39.i32[0] = *(v31 - 16);
      v38.i32[2] = v31[1];
      v39.i32[1] = *(v31 - 7);
      v39.i32[2] = v31[2];
      v39.i32[3] = v31[11];
      v38.i32[3] = v31[10];
      v40.i32[0] = *(v31 - 15);
      uint32x4_t v41 = vshrq_n_u32(v36, 8uLL);
      v36.i16[0] = v36.u8[0];
      v36.i16[1] = BYTE2(*(v31 - 18));
      v36.i16[2] = v36.u8[4];
      v36.i16[3] = BYTE2(*(v31 - 9));
      v36.i16[4] = *v31;
      v36.i16[5] = BYTE2(*v31);
      v36.i16[6] = v36.u8[12];
      v36.i16[7] = BYTE2(v31[9]);
      uint32x4_t v42 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v36, v70), (int32x4_t)(*(_OWORD *)&v41 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v69);
      v40.i32[1] = *(v31 - 6);
      v40.i32[2] = v31[3];
      uint32x4_t v43 = vshrq_n_u32(v39, 8uLL);
      v39.i16[0] = v39.u8[0];
      v39.i16[1] = BYTE2(*(v31 - 16));
      v39.i16[2] = v39.u8[4];
      v39.i16[3] = BYTE2(*(v31 - 7));
      v39.i16[4] = v39.u8[8];
      v39.i16[5] = BYTE2(v31[2]);
      v39.i16[6] = v39.u8[12];
      v39.i16[7] = BYTE2(v31[11]);
      v40.i32[3] = v31[12];
      v44.i32[0] = *(v31 - 14);
      v44.i32[1] = *(v31 - 5);
      v44.i32[2] = v31[4];
      uint32x4_t v45 = vshrq_n_u32(v38, 8uLL);
      v44.i32[3] = v31[13];
      v38.i16[0] = v38.u8[0];
      v38.i16[1] = BYTE2(*(v31 - 17));
      v38.i16[2] = v38.u8[4];
      v38.i16[3] = BYTE2(*(v31 - 8));
      v38.i16[4] = v38.u8[8];
      v38.i16[5] = BYTE2(v31[1]);
      v38.i16[6] = v38.u8[12];
      v38.i16[7] = BYTE2(v31[10]);
      v46.i32[0] = *(v31 - 13);
      v46.i32[1] = *(v31 - 4);
      v46.i32[2] = v31[5];
      v46.i32[3] = v31[14];
      int32x4_t v47 = (int32x4_t)vshrq_n_u32(v40, 8uLL);
      v40.i16[0] = v40.u8[0];
      v40.i16[1] = BYTE2(*(v31 - 15));
      v40.i16[2] = v40.u8[4];
      v40.i16[3] = BYTE2(*(v31 - 6));
      v40.i16[4] = v40.u8[8];
      v40.i16[5] = BYTE2(v31[3]);
      v40.i16[6] = v40.u8[12];
      v40.i16[7] = BYTE2(v31[12]);
      uint32x4_t v48 = vshrq_n_u32(v44, 8uLL);
      v44.i16[0] = v44.u8[0];
      v44.i16[1] = BYTE2(*(v31 - 14));
      v44.i16[2] = v44.u8[4];
      v44.i16[3] = BYTE2(*(v31 - 5));
      v44.i16[4] = v44.u8[8];
      v44.i16[5] = BYTE2(v31[4]);
      v44.i16[6] = v44.u8[12];
      v44.i16[7] = BYTE2(v31[13]);
      uint32x4_t v49 = vshrq_n_u32(v46, 8uLL);
      v46.i16[0] = v46.u8[0];
      v46.i16[1] = BYTE2(*(v31 - 13));
      v46.i16[2] = v46.u8[4];
      v46.i16[3] = BYTE2(*(v31 - 4));
      v46.i16[4] = v46.u8[8];
      v46.i16[5] = BYTE2(v31[5]);
      v46.i16[6] = v46.u8[12];
      v46.i16[7] = BYTE2(v31[14]);
      v50.i32[0] = *(v31 - 12);
      v50.i32[1] = *(v31 - 3);
      v50.i32[2] = v31[6];
      v50.i32[3] = v31[15];
      v51.i32[0] = *(v31 - 11);
      v51.i32[1] = *(v31 - 2);
      v51.i32[2] = v31[7];
      uint32x4_t v52 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v40, v21), (int32x4_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v22);
      v51.i32[3] = v31[16];
      v47.i32[0] = *(v31 - 10);
      v47.i32[1] = *(v31 - 1);
      v47.i32[2] = v31[8];
      uint32x4_t v53 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v44, v23), (int32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v24);
      v47.i32[3] = v31[17];
      uint32x4_t v54 = vshrq_n_u32(v50, 8uLL);
      v50.i16[0] = v50.u8[0];
      v50.i16[1] = BYTE2(*(v31 - 12));
      v50.i16[2] = v50.u8[4];
      v50.i16[3] = BYTE2(*(v31 - 3));
      v50.i16[4] = v50.u8[8];
      v50.i16[5] = BYTE2(v31[6]);
      v50.i16[6] = v50.u8[12];
      v50.i16[7] = BYTE2(v31[15]);
      uint32x4_t v55 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v46, v25), (int32x4_t)(*(_OWORD *)&v49 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v26);
      uint32x4_t v56 = vshrq_n_u32(v51, 8uLL);
      v51.i16[0] = v51.u8[0];
      v51.i16[1] = BYTE2(*(v31 - 11));
      v51.i16[2] = v51.u8[4];
      v51.i16[3] = BYTE2(*(v31 - 2));
      v51.i16[4] = v51.u8[8];
      v51.i16[5] = BYTE2(v31[7]);
      v51.i16[6] = v51.u8[12];
      v51.i16[7] = BYTE2(v31[16]);
      uint32x4_t v57 = (uint32x4_t)vmlaq_s32(vmulq_s32(v27, (int32x4_t)v50), v28, (int32x4_t)(*(_OWORD *)&v54 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)));
      uint32x4_t v58 = vshrq_n_u32((uint32x4_t)v47, 8uLL);
      v47.i16[0] = v47.u8[0];
      v47.i16[1] = BYTE2(*(v31 - 10));
      v47.i16[2] = v47.u8[4];
      v47.i16[3] = BYTE2(*(v31 - 1));
      v47.i16[4] = v47.u8[8];
      v47.i16[5] = BYTE2(v31[8]);
      v47.i16[6] = v47.u8[12];
      v47.i16[7] = BYTE2(v31[17]);
      int32x4_t v33 = vminq_s32(vsubq_s32(v37, (int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v42, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v38, v68), (int32x4_t)(*(_OWORD *)&v45 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v67), 0xFuLL), (uint32x4_t)vmlaq_s32(
                                                       vmulq_s32((int32x4_t)v39, v66),
                                                       (int32x4_t)(*(_OWORD *)&v43 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v20), 0xFuLL), v52, 0xFuLL), v53, 0xFuLL), v55, 0xFuLL), v57, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32(v29, (int32x4_t)v51), v30, (int32x4_t)(*(_OWORD *)&v56 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 0xFuLL),
                             (uint32x4_t)vmlaq_s32(vmulq_s32(v32, v47), v35, (int32x4_t)(*(_OWORD *)&v58 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 0xFuLL)), v33);
      v31 += 36;
      v34 -= 4;
    }
    while (v34);
    int v14 = vminvq_s32(v33);
    if (v19 == v18) {
      return (__int16)(((*(_DWORD *)(a1 + 1568) + v14) * *(_DWORD *)(a1 + 1052)
    }
                                                  + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  else
  {
    int v14 = 0x40000000;
    unint64_t v15 = v6;
    uint64_t v16 = v7;
  }
  unsigned int v59 = v4 + 1;
  uint32x4_t v60 = (_DWORD *)(v16 + 32);
  do
  {
    __int32 v61 = v15->i32[0];
    unint64_t v15 = (int32x4_t *)((char *)v15 + 4);
    v62.i16[0] = *((_OWORD *)v60 - 1);
    v62.i16[1] = BYTE2(*((_OWORD *)v60 - 1));
    v62.i16[2] = BYTE4(*((void *)v60 - 2));
    v62.i16[3] = BYTE6(*((void *)v60 - 2));
    v62.i16[4] = *((void *)v60 - 1);
    v62.i16[5] = BYTE2(*((void *)v60 - 1));
    v62.i16[6] = BYTE12(*((_OWORD *)v60 - 1));
    v62.i16[7] = BYTE14(*((_OWORD *)v60 - 1));
    v63.i16[0] = *((_OWORD *)v60 - 2);
    v63.i16[1] = BYTE2(*((_OWORD *)v60 - 2));
    v63.i16[2] = BYTE4(*((void *)v60 - 4));
    v63.i16[3] = BYTE6(*((void *)v60 - 4));
    v63.i16[4] = *((void *)v60 - 3);
    v63.i16[5] = BYTE2(*((void *)v60 - 3));
    v63.i16[6] = BYTE12(*((_OWORD *)v60 - 2));
    v63.i16[7] = BYTE14(*((_OWORD *)v60 - 2));
    int v64 = v61
        - (vaddvq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v9, v63), (int32x4_t)v11, (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*((uint32x4_t *)v60 - 2), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32(v8, v62), (int32x4_t)v10, (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*((uint32x4_t *)v60 - 1), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 0xFuLL))+ ((v12 * (*v60 & 0xFF00FF) + v13 * ((*v60 >> 8) & 0xFF00FF)) >> 15));
    if (v64 < v14) {
      int v14 = v64;
    }
    --v59;
    v60 += 9;
  }
  while (v59 > 1);
  return (__int16)(((*(_DWORD *)(a1 + 1568) + v14) * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100018BF0(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 1176);
  if (v3)
  {
    int v4 = (_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    int v5 = v4[1] - *v4;
    if ((v5 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v19 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    int v5 = v19[1] - *v19;
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if (!*(_DWORD *)(a1 + 2012))
      {
        if (!v3)
        {
          a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
          if (v5 >= 2) {
            goto LABEL_7;
          }
          goto LABEL_25;
        }
        a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      }
      if (v5 >= 2)
      {
LABEL_7:
        unsigned int v6 = v5 >> 1;
        uint64_t v7 = *(uint32x2_t **)(a1 + 1552);
        unsigned __int32 v8 = v7[1].u32[0];
        uint64_t v9 = *(void *)(a1 + 32);
        unsigned long long v10 = (int *)(v9 + 4 * (int)a2);
        uint64_t v11 = *(void *)(a1 + 136);
        uint64_t v12 = v11 + 24 * (int)a2;
        v13.i16[0] = v7->u8[0];
        v13.i16[1] = BYTE2(v7->u32[0]);
        v13.i16[2] = BYTE4(*(unint64_t *)v7);
        v13.i16[3] = BYTE6(*(unint64_t *)v7);
        unint64_t v14 = *(void *)&vshr_n_u32(*v7, 8uLL) & 0xFFFF00FFFFFF00FFLL;
        unsigned int v15 = v8 & 0xFF00FF;
        unsigned int v16 = (v8 >> 8) & 0xFF00FF;
        uint64_t v17 = v6 - 1;
        if (v17 < 7)
        {
          int v18 = 0x40000000;
          goto LABEL_16;
        }
        uint64_t v21 = v17 + 1;
        uint64_t v22 = (v17 + 1) & 0x1FFFFFFF8;
        v6 -= v22;
        v12 += 48 * v22;
        int32x4_t v23 = vdupq_lane_s32(v13, 0);
        int32x4_t v24 = vdupq_lane_s32((int32x2_t)v14, 0);
        int32x4_t v25 = vdupq_lane_s32(v13, 1);
        int32x4_t v26 = vdupq_lane_s32((int32x2_t)v14, 1);
        v10 += 2 * v22;
        int32x4_t v27 = vdupq_n_s32(v15);
        int32x4_t v28 = vdupq_n_s32(v16);
        int32x4_t v29 = (const float *)(v9 + 4 * (int)a2 + 32);
        int32x4_t v30 = (__int32 *)(v11 + 24 * (int)a2 + 192);
        v31.i64[0] = 0x4000000040000000;
        v31.i64[1] = 0x4000000040000000;
        uint64_t v32 = v22;
        v33.i64[0] = 0x4000000040000000;
        v33.i64[1] = 0x4000000040000000;
        do
        {
          float32x4x2_t v80 = vld2q_f32(v29);
          uint64_t v34 = v29 - 8;
          float32x4x2_t v81 = vld2q_f32(v34);
          v35.i32[0] = *v30;
          v36.i32[0] = v30[1];
          v35.i32[1] = v30[12];
          v36.i32[1] = v30[13];
          v35.i32[2] = v30[24];
          v37.i32[0] = *(v30 - 48);
          v37.i32[1] = *(v30 - 36);
          v36.i32[2] = v30[25];
          v38.i32[0] = *(v30 - 47);
          v38.i32[1] = *(v30 - 35);
          v35.i32[3] = v30[36];
          v39.i32[0] = *(v30 - 46);
          v39.i32[1] = *(v30 - 34);
          v36.i32[3] = v30[37];
          v37.i32[2] = *(v30 - 24);
          v38.i32[2] = *(v30 - 23);
          v39.i32[2] = *(v30 - 22);
          v40.i32[0] = v30[2];
          v37.i32[3] = *(v30 - 12);
          v40.i32[1] = v30[14];
          v40.i32[2] = v30[26];
          v38.i32[3] = *(v30 - 11);
          v40.i32[3] = v30[38];
          v39.i32[3] = *(v30 - 10);
          int32x4_t v41 = (int32x4_t)vshrq_n_u32(v37, 8uLL);
          v37.i16[0] = v37.u8[0];
          v37.i16[1] = BYTE2(*(v30 - 48));
          v37.i16[2] = v37.u8[4];
          v37.i16[3] = BYTE2(*(v30 - 36));
          v37.i16[4] = v37.u8[8];
          v37.i16[5] = BYTE2(*(v30 - 24));
          v37.i16[6] = v37.u8[12];
          v37.i16[7] = BYTE2(*(v30 - 12));
          v42.i32[0] = *(v30 - 42);
          uint32x4_t v43 = vshrq_n_u32(v35, 8uLL);
          v35.i16[0] = *v30;
          v35.i16[1] = BYTE2(*v30);
          v35.i16[2] = v35.u8[4];
          v35.i16[3] = BYTE2(v30[12]);
          v35.i16[4] = v35.u8[8];
          v35.i16[5] = BYTE2(v30[24]);
          v35.i16[6] = v35.u8[12];
          v35.i16[7] = BYTE2(v30[36]);
          uint32x4_t v44 = vshrq_n_u32(v38, 8uLL);
          v38.i16[0] = v38.u8[0];
          v38.i16[1] = BYTE2(*(v30 - 47));
          v38.i16[2] = v38.u8[4];
          v38.i16[3] = BYTE2(*(v30 - 35));
          v38.i16[4] = v38.u8[8];
          v38.i16[5] = BYTE2(*(v30 - 23));
          v38.i16[6] = v38.u8[12];
          v38.i16[7] = BYTE2(*(v30 - 11));
          uint32x4_t v45 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v35, v23), (int32x4_t)(*(_OWORD *)&v43 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v24);
          int32x4_t v46 = (int32x4_t)vshrq_n_u32(v36, 8uLL);
          v36.i16[0] = v36.u8[0];
          v36.i16[1] = BYTE2(v30[1]);
          v36.i16[2] = v36.u8[4];
          v36.i16[3] = BYTE2(v30[13]);
          v36.i16[4] = v36.u8[8];
          v36.i16[5] = BYTE2(v30[25]);
          v36.i16[6] = v36.u8[12];
          v36.i16[7] = BYTE2(v30[37]);
          uint32x4_t v47 = vshrq_n_u32(v39, 8uLL);
          v39.i16[0] = v39.u8[0];
          v39.i16[1] = BYTE2(*(v30 - 46));
          v39.i16[2] = v39.u8[4];
          v39.i16[3] = BYTE2(*(v30 - 34));
          v39.i16[4] = v39.u8[8];
          v39.i16[5] = BYTE2(*(v30 - 22));
          v39.i16[6] = v39.u8[12];
          v39.i16[7] = BYTE2(*(v30 - 10));
          int32x4_t v48 = (int32x4_t)vshrq_n_u32(v40, 8uLL);
          v40.i16[0] = v40.u8[0];
          v40.i16[1] = BYTE2(v30[2]);
          v40.i16[2] = v40.u8[4];
          v40.i16[3] = BYTE2(v30[14]);
          v40.i16[4] = v40.u8[8];
          v40.i16[5] = BYTE2(v30[26]);
          v40.i16[6] = v40.u8[12];
          v40.i16[7] = BYTE2(v30[38]);
          v42.i32[1] = *(v30 - 30);
          v42.i32[2] = *(v30 - 18);
          v42.i32[3] = *(v30 - 6);
          uint32x4_t v49 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v36, v25), (int32x4_t)(*(_OWORD *)&v46 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v26);
          v46.i32[0] = v30[6];
          v50.i32[0] = v30[7];
          v46.i32[1] = v30[18];
          v46.i32[2] = v30[30];
          v46.i32[3] = v30[42];
          uint32x4_t v51 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v40, v27), (int32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v28);
          v48.i32[0] = *(v30 - 41);
          v48.i32[1] = *(v30 - 29);
          v48.i32[2] = *(v30 - 17);
          v48.i32[3] = *(v30 - 5);
          uint32x4_t v52 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v37, v23), (int32x4_t)(*(_OWORD *)&v41 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v24);
          v50.i32[1] = v30[19];
          v50.i32[2] = v30[31];
          v50.i32[3] = v30[43];
          v41.i32[0] = *(v30 - 40);
          v41.i32[1] = *(v30 - 28);
          v41.i32[2] = *(v30 - 16);
          uint32x4_t v53 = vsraq_n_u32(vshrq_n_u32(v45, 0xFuLL), v49, 0xFuLL);
          v41.i32[3] = *(v30 - 4);
          uint32x4_t v54 = vshrq_n_u32(v42, 8uLL);
          v42.i16[0] = v42.u8[0];
          v42.i16[1] = BYTE2(*(v30 - 42));
          v42.i16[2] = v42.u8[4];
          v42.i16[3] = BYTE2(*(v30 - 30));
          v42.i16[4] = v42.u8[8];
          v42.i16[5] = BYTE2(*(v30 - 18));
          v42.i16[6] = v42.u8[12];
          v42.i16[7] = BYTE2(*(v30 - 6));
          int32x4_t v55 = (int32x4_t)vsraq_n_u32(v53, v51, 0xFuLL);
          uint32x4_t v56 = (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v42, v23), (int32x4_t)(*(_OWORD *)&v54 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v24);
          int32x4_t v57 = (int32x4_t)vshrq_n_u32((uint32x4_t)v46, 8uLL);
          v46.i16[0] = v46.u8[0];
          v46.i16[1] = BYTE2(v30[6]);
          v46.i16[2] = v46.u8[4];
          v46.i16[3] = BYTE2(v30[18]);
          v46.i16[4] = v46.u8[8];
          v46.i16[5] = BYTE2(v30[30]);
          v46.i16[6] = v46.u8[12];
          v46.i16[7] = BYTE2(v30[42]);
          uint32x4_t v58 = (uint32x4_t)vmlaq_s32(vmulq_s32(v46, v23), (int32x4_t)(*(_OWORD *)&v57 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v24);
          v57.i32[0] = v30[8];
          v57.i32[1] = v30[20];
          uint32x4_t v59 = vsraq_n_u32(vshrq_n_u32(v52, 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v38, v25), (int32x4_t)(*(_OWORD *)&v44 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v26), 0xFuLL);
          v57.i32[2] = v30[32];
          v57.i32[3] = v30[44];
          uint32x4_t v60 = vshrq_n_u32(v56, 0xFuLL);
          int32x4_t v61 = (int32x4_t)vsraq_n_u32(v59, (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v39, v27), (int32x4_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v28), 0xFuLL);
          uint32x4_t v62 = vshrq_n_u32(v58, 0xFuLL);
          uint32x4_t v63 = vshrq_n_u32((uint32x4_t)v48, 8uLL);
          v48.i16[0] = v48.u8[0];
          v48.i16[1] = BYTE2(*(v30 - 41));
          v48.i16[2] = v48.u8[4];
          v48.i16[3] = BYTE2(*(v30 - 29));
          v48.i16[4] = v48.u8[8];
          v48.i16[5] = BYTE2(*(v30 - 17));
          v48.i16[6] = v48.u8[12];
          v48.i16[7] = BYTE2(*(v30 - 5));
          uint32x4_t v64 = (uint32x4_t)vmlaq_s32(vmulq_s32(v48, v25), (int32x4_t)(*(_OWORD *)&v63 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v26);
          uint32x4_t v65 = vshrq_n_u32(v50, 8uLL);
          v50.i16[0] = v50.u8[0];
          v50.i16[1] = BYTE2(v30[7]);
          v50.i16[2] = v50.u8[4];
          v50.i16[3] = BYTE2(v30[19]);
          v50.i16[4] = v50.u8[8];
          v50.i16[5] = BYTE2(v30[31]);
          v50.i16[6] = v50.u8[12];
          v50.i16[7] = BYTE2(v30[43]);
          int32x4_t v66 = vminq_s32(vsubq_s32((int32x4_t)v80.val[0], v55), v33);
          uint32x4_t v67 = vshrq_n_u32((uint32x4_t)v41, 8uLL);
          v41.i16[0] = v41.u8[0];
          v41.i16[1] = BYTE2(*(v30 - 40));
          v41.i16[2] = v41.u8[4];
          v41.i16[3] = BYTE2(*(v30 - 28));
          v41.i16[4] = v41.u8[8];
          v41.i16[5] = BYTE2(*(v30 - 16));
          v41.i16[6] = v41.u8[12];
          v41.i16[7] = BYTE2(*(v30 - 4));
          uint32x4_t v68 = (uint32x4_t)vmlaq_s32(vmulq_s32(v41, v27), (int32x4_t)(*(_OWORD *)&v67 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v28);
          uint32x4_t v69 = vshrq_n_u32((uint32x4_t)v57, 8uLL);
          v57.i16[0] = v57.u8[0];
          v57.i16[1] = BYTE2(v30[8]);
          v57.i16[2] = v57.u8[4];
          v57.i16[3] = BYTE2(v30[20]);
          v57.i16[4] = v57.u8[8];
          v57.i16[5] = BYTE2(v30[32]);
          v57.i16[6] = v57.u8[12];
          v57.i16[7] = BYTE2(v30[44]);
          v29 += 16;
          int32x4_t v31 = vminq_s32(vsubq_s32((int32x4_t)v81.val[1], (int32x4_t)vsraq_n_u32(vsraq_n_u32(v60, v64, 0xFuLL), v68, 0xFuLL)), vminq_s32(vsubq_s32((int32x4_t)v81.val[0], v61), v31));
          v30 += 96;
          int32x4_t v33 = vminq_s32(vsubq_s32((int32x4_t)v80.val[1], (int32x4_t)vsraq_n_u32(vsraq_n_u32(v62, (uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)v50, v25), (int32x4_t)(*(_OWORD *)&v65 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v26), 0xFuLL), (uint32x4_t)vmlaq_s32(vmulq_s32(v57, v27), (int32x4_t)(*(_OWORD *)&v69 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v28), 0xFuLL)),
                  v66);
          v32 -= 8;
        }
        while (v32);
        int v18 = vminvq_s32(vminq_s32(v31, v33));
        if (v21 != v22)
        {
LABEL_16:
          unsigned int v70 = v6 + 1;
          int32x4_t v71 = (_DWORD *)(v12 + 32);
          do
          {
            v72.i16[0] = *((void *)v71 - 4);
            v72.i16[1] = BYTE2(*((void *)v71 - 4));
            v72.i16[2] = BYTE4(*((void *)v71 - 4));
            v72.i16[3] = BYTE6(*((void *)v71 - 4));
            int32x2_t v73 = vmla_s32(vmul_s32(v72, v13), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v71 - 8), 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)v14);
            int v74 = *v10;
            int v75 = v10[1];
            v10 += 2;
            unsigned __int32 v76 = vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32((uint32x2_t)v73, 0xFuLL), 1), (uint32x2_t)v73, 0xFuLL).u32[0];
            v73.i16[0] = *((void *)v71 - 1);
            v73.i16[1] = BYTE2(*((void *)v71 - 1));
            v73.i16[2] = BYTE4(*((void *)v71 - 1));
            v73.i16[3] = BYTE6(*((void *)v71 - 1));
            uint32x2_t v77 = (uint32x2_t)vmla_s32(vmul_s32(v73, v13), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v71 - 2), 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)v14);
            int v78 = v74 - (v76 + (((*(v71 - 6) & 0xFF00FF) * v15 + ((*(v71 - 6) >> 8) & 0xFF00FF) * v16) >> 15));
            int v79 = v75
                - (vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v77, 0xFuLL), 1), v77, 0xFuLL).u32[0]
                 + (((*v71 & 0xFF00FF) * v15 + ((*v71 >> 8) & 0xFF00FF) * v16) >> 15));
            if (v78 >= v18) {
              int v78 = v18;
            }
            if (v79 >= v78) {
              int v18 = v78;
            }
            else {
              int v18 = v79;
            }
            --v70;
            v71 += 12;
          }
          while (v70 > 1);
        }
        return (__int16)(((*(_DWORD *)(a1 + 1568) + v18) * *(_DWORD *)(a1 + 1052)
                                                    + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
      }
LABEL_25:
      int v18 = 0x40000000;
      return (__int16)(((*(_DWORD *)(a1 + 1568) + v18) * *(_DWORD *)(a1 + 1052)
                                                  + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
  }
  return sub_100016194(a1, a2);
}

float sub_1000190D8(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, float *a5, int8x16_t a6, int8x16_t a7)
{
  int v7 = *(_DWORD *)(a1 + 1072);
  BOOL v8 = __OFSUB__(a2, v7);
  int v9 = a2 - v7;
  if (v9 < 0 != v8)
  {
    unsigned int v10 = a2;
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        int v11 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      }
      else {
        int v11 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      }
      unsigned int v10 = v11 + a3;
    }
    int v13 = *(_DWORD *)(a1 + 1128) * v10;
    uint64_t v12 = (void *)(a1 + 136);
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2) {
      uint64_t v12 = (void *)(a1 + 144);
    }
  }
  else
  {
    uint64_t v12 = (void *)(a1 + 792);
    int v13 = 6 * v9;
  }
  uint64_t v14 = *v12 + 4 * v13;
  *(int8x8_t *)a7.i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v14, 0x10uLL), (int8x8_t)vshr_n_u32(*(uint32x2_t *)v14, 0x10uLL));
  a6.i16[0] = *(void *)v14;
  a6.i16[1] = BYTE2(*(void *)v14);
  a6.i16[2] = BYTE4(*(void *)v14);
  a6.i16[3] = BYTE6(*(void *)v14);
  uint32x2_t v15 = vshr_n_u32(*(uint32x2_t *)a7.i8, 8uLL);
  a7.i32[0] &= 0xFF00FFu;
  a7.i16[2] = a7.u8[4];
  a7.i16[3] = a7.u8[6];
  *(int32x2_t *)a6.i8 = vmla_s32(vmul_s32(*(int32x2_t *)a7.i8, *(int32x2_t *)a6.i8), (int32x2_t)(*(void *)&v15 & 0xFFFF00FFFFFF00FFLL), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v14, 8uLL) & 0xFFFF00FFFFFF00FFLL));
  a7.i32[0] = vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(*(uint32x2_t *)a6.i8, 0x10uLL), 1), *(uint32x2_t *)a6.i8, 0x10uLL).u32[0];
  a6.i32[0] = *(_DWORD *)(v14 + 8);
  *a4 = a7.i32[0];
  a7.i64[0] = *(void *)(v14 + 12);
  int32x4_t v16 = (int32x4_t)vextq_s8(vextq_s8(a6, a6, 4uLL), a7, 0xCuLL);
  v16.i32[3] = *(_DWORD *)(v14 + 20);
  uint32x4_t v17 = (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v16, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v16, 0x10uLL));
  uint32x4_t v18 = vshrq_n_u32((uint32x4_t)v16, 8uLL);
  v16.i64[0] &= 0xFF00FF00FF00FFuLL;
  v16.i32[2] &= 0xFF00FFu;
  v16.i16[6] = v16.u8[12];
  v16.i16[7] = BYTE2(*(_DWORD *)(v14 + 20));
  float result = COERCE_FLOAT(vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v17 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v16), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v17, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)(*(_OWORD *)&v18 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 0x10uLL)));
  *a5 = result;
  return result;
}

uint32x2_t sub_1000191DC(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  int v5 = *(_DWORD *)(a1 + 1072);
  BOOL v6 = __OFSUB__(a2, v5);
  int v7 = a2 - v5;
  if (v7 < 0 != v6)
  {
    unsigned int v8 = a2;
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        int v9 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      }
      else {
        int v9 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      }
      unsigned int v8 = v9 + a3;
    }
    int v11 = *(_DWORD *)(a1 + 1128) * v8;
    unsigned int v10 = (void *)(a1 + 136);
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2) {
      unsigned int v10 = (void *)(a1 + 144);
    }
  }
  else
  {
    unsigned int v10 = (void *)(a1 + 792);
    int v11 = 6 * v7;
  }
  uint64_t v12 = (int32x2_t *)(*v10 + 4 * v11);
  unsigned __int32 v13 = v12[1].u32[0];
  uint32x2_t v14 = (uint32x2_t)vorr_s8((int8x8_t)vshl_n_s32(*v12, 0x10uLL), (int8x8_t)vshr_n_u32((uint32x2_t)*v12, 0x10uLL));
  v15.i16[0] = v12->u8[0];
  v15.i16[1] = BYTE2(v12->u32[0]);
  v15.i16[2] = BYTE4(*(unint64_t *)v12);
  v15.i16[3] = BYTE6(*(unint64_t *)v12);
  uint32x2_t result = (uint32x2_t)vmla_s32(vmul_s32((int32x2_t)(*(void *)&v14 & 0xFF00FF00FF00FFLL), v15), (int32x2_t)(*(void *)&vshr_n_u32(v14, 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)(*(void *)&vshr_n_u32((uint32x2_t)*v12, 8uLL) & 0xFFFF00FFFFFF00FFLL));
  *a4 = vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(result, 0x10uLL), 1), result, 0x10uLL).u32[0];
  HIDWORD(v17) = v13;
  LODWORD(v17) = v13;
  *a5 = (((v17 >> 16) & 0xFF00FF) * (v13 & 0xFF00FF)
       + (((v17 >> 16) >> 8) & 0xFF00FF) * ((v13 >> 8) & 0xFF00FF)) >> 16;
  return result;
}

uint64_t sub_1000192C0(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1072) <= (signed int)a2) {
    return sub_100015AE0(a1, a2);
  }
  int v2 = *(_DWORD *)(a1 + 1176);
  if (v2)
  {
    int v3 = (_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    int v4 = v3[1] - *v3;
    if ((v4 & 1) == 0) {
      goto LABEL_4;
    }
    return sub_100015AE0(a1, a2);
  }
  uint32x4_t v47 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
  int v4 = v47[1] - *v47;
  if (v4) {
    return sub_100015AE0(a1, a2);
  }
LABEL_4:
  signed int v5 = a2;
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (!v2)
    {
      signed int v5 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      if (v4 >= 2) {
        goto LABEL_8;
      }
      goto LABEL_32;
    }
    signed int v5 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
  }
  if (v4 >= 2)
  {
LABEL_8:
    signed __int32 v6 = *(_DWORD *)(a1 + 1064);
    int v7 = *(_DWORD *)(a1 + 1068);
    unsigned int v8 = v4 >> 1;
    int v9 = *(uint32x2_t **)(a1 + 1552);
    unsigned __int32 v10 = v9[1].u32[0];
    BOOL v11 = *(_DWORD *)(a1 + 1080) <= (int)a2;
    uint64_t v12 = 120;
    if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
      uint64_t v12 = 48;
    }
    uint64_t v13 = *(void *)(a1 + v12);
    uint64_t v14 = 4 * v5;
    uint64_t v15 = v13 + v14;
    uint64_t v16 = 104;
    if (!v11) {
      uint64_t v16 = 32;
    }
    uint64_t v17 = 144;
    if (!v11) {
      uint64_t v17 = 136;
    }
    BOOL v18 = v13 == 0;
    uint64_t v19 = (_DWORD *)(*(void *)(a1 + v16) + v14);
    if (v18) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v15;
    }
    uint64_t v21 = *(void *)(a1 + v17) + 4 * *(_DWORD *)(a1 + 1128) * v5;
    v22.i16[0] = v9->u8[0];
    v22.i16[1] = BYTE2(v9->u32[0]);
    v22.i16[2] = BYTE4(*(unint64_t *)v9);
    v22.i16[3] = BYTE6(*(unint64_t *)v9);
    unint64_t v23 = *(void *)&vshr_n_u32(*v9, 8uLL) & 0xFFFF00FFFFFF00FFLL;
    int v24 = (v10 >> 8) & 0xFF00FF;
    int v25 = v10 & 0xFF00FF;
    int v26 = v8 + 1;
    int32x4_t v27 = (_DWORD *)(v20 + 4);
    int v28 = 0x40000000;
    do
    {
      v35.i16[0] = *(void *)v21;
      v35.i16[1] = BYTE2(*(void *)v21);
      v35.i16[2] = BYTE4(*(void *)v21);
      v35.i16[3] = BYTE6(*(void *)v21);
      uint32x2_t v36 = (uint32x2_t)vmla_s32(vmul_s32(v35, v22), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v21, 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)v23);
      signed __int32 v37 = *v19 - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v36, 0xFuLL), 1), v36, 0xFuLL).u32[0];
      if (v37 <= v6)
      {
        unsigned __int32 v39 = v9[1].u32[1];
        LOWORD(v40) = *(void *)&v9[2];
        WORD1(v40) = BYTE2(*(void *)&v9[2]);
        WORD2(v40) = BYTE4(*(void *)&v9[2]);
        HIWORD(v40) = BYTE6(*(void *)&v9[2]);
        v41.i16[0] = *(_OWORD *)(v21 + 8);
        v41.i16[1] = BYTE2(*(_OWORD *)(v21 + 8));
        v41.i16[2] = BYTE4(*(void *)(v21 + 8));
        v41.i16[3] = BYTE6(*(void *)(v21 + 8));
        v41.i16[4] = *(void *)(v21 + 16);
        v41.i16[5] = BYTE2(*(void *)(v21 + 16));
        v41.i16[6] = BYTE12(*(_OWORD *)(v21 + 8));
        v41.i16[7] = BYTE14(*(_OWORD *)(v21 + 8));
        v42.i32[0] = v25;
        v42.i32[1] = v39 & 0xFF00FF;
        v42.i64[1] = v40;
        int32x4_t v43 = vmulq_s32(v41, v42);
        v41.i32[0] = v24;
        v41.i32[1] = (v39 >> 8) & 0xFF00FF;
        v41.i64[1] = *(void *)&vshr_n_u32(v9[2], 8uLL) & 0xFFFF00FFFFFF00FFLL;
        int v38 = *(v27 - 1)
            + v37
            - vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(v43, (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)(v21 + 8), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v41), 0xFuLL));
      }
      else
      {
        int v38 = v37 + v7;
      }
      if (v38 < v28) {
        int v28 = v38;
      }
      v44.i16[0] = *(void *)(v21 + 24);
      v44.i16[1] = BYTE2(*(void *)(v21 + 24));
      v44.i16[2] = BYTE4(*(void *)(v21 + 24));
      v44.i16[3] = BYTE6(*(void *)(v21 + 24));
      uint32x2_t v45 = (uint32x2_t)vmla_s32(vmul_s32(v44, v22), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v21 + 24), 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)v23);
      signed __int32 v46 = v19[1] - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v45, 0xFuLL), 1), v45, 0xFuLL).u32[0];
      if (v46 <= v6)
      {
        unsigned __int32 v29 = v9[1].u32[1];
        LOWORD(v30) = *(void *)&v9[2];
        WORD1(v30) = BYTE2(*(void *)&v9[2]);
        WORD2(v30) = BYTE4(*(void *)&v9[2]);
        HIWORD(v30) = BYTE6(*(void *)&v9[2]);
        v31.i16[0] = *(_OWORD *)(v21 + 32);
        v31.i16[1] = BYTE2(*(_OWORD *)(v21 + 32));
        v31.i16[2] = BYTE4(*(void *)(v21 + 32));
        v31.i16[3] = BYTE6(*(void *)(v21 + 32));
        v31.i16[4] = *(void *)(v21 + 40);
        v31.i16[5] = BYTE2(*(void *)(v21 + 40));
        v31.i16[6] = BYTE12(*(_OWORD *)(v21 + 32));
        v31.i16[7] = BYTE14(*(_OWORD *)(v21 + 32));
        v32.i32[0] = v25;
        v32.i32[1] = v29 & 0xFF00FF;
        v32.i64[1] = v30;
        int32x4_t v33 = vmulq_s32(v31, v32);
        v31.i32[0] = v24;
        v31.i32[1] = (v29 >> 8) & 0xFF00FF;
        v31.i64[1] = *(void *)&vshr_n_u32(v9[2], 8uLL) & 0xFFFF00FFFFFF00FFLL;
        int v34 = *v27
            + v46
            - vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(v33, (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)(v21 + 32), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v31), 0xFuLL));
      }
      else
      {
        int v34 = v46 + v7;
      }
      if (v34 < v28) {
        int v28 = v34;
      }
      --v26;
      v27 += 2;
      v19 += 2;
      v21 += 48;
    }
    while (v26 > 1);
    return (__int16)(((*(_DWORD *)(a1 + 1568) + v28) * *(_DWORD *)(a1 + 1052)
                                                + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
LABEL_32:
  int v28 = 0x40000000;
  return (__int16)(((*(_DWORD *)(a1 + 1568) + v28) * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100019580(uint64_t a1, signed int a2, int8x16_t a3, double a4, double a5, int8x16_t a6)
{
  int v6 = *(_DWORD *)(a1 + 1072);
  int v7 = a2 - v6;
  if (a2 >= v6)
  {
    BOOL v11 = (uint64_t *)(a1 + 792);
    uint64_t v12 = (void *)(a1 + 800);
    uint64_t v13 = (uint64_t *)(a1 + 808);
    int v14 = 6 * v7;
    int v15 = 1;
  }
  else
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      unsigned int v8 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
      int v9 = *v8;
      int v10 = v8[1];
    }
    else
    {
      uint64_t v16 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      int v9 = *v16;
      int v10 = v16[1];
    }
    int v15 = v10 - v9;
    if (*(_DWORD *)(a1 + 2012)) {
      int v7 = a2;
    }
    else {
      int v7 = v9;
    }
    int v14 = *(_DWORD *)(a1 + 1128) * v7;
    BOOL v17 = *(_DWORD *)(a1 + 1080) <= a2;
    BOOL v11 = (uint64_t *)(a1 + 136);
    if (*(_DWORD *)(a1 + 1080) > a2)
    {
      uint64_t v12 = (void *)(a1 + 32);
    }
    else
    {
      BOOL v11 = (uint64_t *)(a1 + 144);
      uint64_t v12 = (void *)(a1 + 104);
    }
    if (v17) {
      uint64_t v13 = (uint64_t *)(a1 + 120);
    }
    else {
      uint64_t v13 = (uint64_t *)(a1 + 48);
    }
  }
  uint64_t v18 = *v13;
  uint64_t v19 = *v11;
  if (v18) {
    uint64_t v20 = v18 + 4 * v7;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint32x2_t **)(a1 + 1552);
  unsigned int v22 = v21[1].u32[0];
  if (v15 < 1)
  {
    int v24 = 0;
    int v31 = 0x40000000;
LABEL_30:
    uint64_t v41 = v19 + 4 * v14 + 24 * v24;
    *(uint32x2_t *)a3.i8 = *(uint32x2_t *)((char *)v21 + 12);
    v42.i16[0] = *(_OWORD *)(v41 + 8);
    v42.i16[1] = BYTE2(*(_OWORD *)(v41 + 8));
    v42.i16[2] = BYTE4(*(void *)(v41 + 8));
    v42.i16[3] = BYTE6(*(void *)(v41 + 8));
    v42.i16[4] = *(void *)(v41 + 16);
    v42.i16[5] = BYTE2(*(void *)(v41 + 16));
    v42.i16[6] = BYTE12(*(_OWORD *)(v41 + 8));
    v42.i16[7] = BYTE14(*(_OWORD *)(v41 + 8));
    a6.i32[0] = v21[1].i32[0];
    int32x4_t v43 = (int32x4_t)vextq_s8(vextq_s8(a6, a6, 4uLL), a3, 0xCuLL);
    v43.i32[3] = v21[2].i32[1];
    uint32x4_t v44 = vshrq_n_u32((uint32x4_t)v43, 8uLL);
    v43.i64[0] &= 0xFF00FF00FF00FFuLL;
    v43.i32[2] &= 0xFF00FFu;
    v43.i16[6] = v43.u8[12];
    v43.i16[7] = BYTE2(v21[2].i32[1]);
    int v30 = *(_DWORD *)(v20 + 4 * v24)
        + v31
        - vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32(v42, v43), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)(v41 + 8), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), (int32x4_t)(*(_OWORD *)&v44 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 0xFuLL));
    return (__int16)(((*(_DWORD *)(a1 + 1568) + v30) * *(_DWORD *)(a1 + 1052)
                                                + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  uint64_t v23 = 0;
  int v24 = 0;
  uint64_t v25 = *v12 + 4 * v7;
  unint64_t v27 = *(void *)&vshr_n_u32(*v21, 8uLL) & 0xFFFF00FFFFFF00FFLL;
  int v28 = v15;
  unsigned __int32 v29 = (_OWORD *)(v19 + 4 * v14 + 8);
  int v30 = 0x40000000;
  int v31 = 0x40000000;
  do
  {
    while (1)
    {
      v38.i16[0] = *((void *)v29 - 1);
      v38.i16[1] = BYTE2(*((void *)v29 - 1));
      v38.i16[2] = BYTE4(*((void *)v29 - 1));
      v38.i16[3] = BYTE6(*((void *)v29 - 1));
      v26.i16[3] = BYTE6(*(unint64_t *)v21);
      v26.i16[2] = BYTE4(*(unint64_t *)v21);
      v26.i16[1] = BYTE2(v21->u32[0]);
      v26.i16[0] = v21->u8[0];
      uint32x2_t v39 = (uint32x2_t)vmla_s32(vmul_s32(v38, v26), (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)((char *)v29 - 8), 8uLL) & 0xFFFF00FFFFFF00FFLL), (int32x2_t)v27);
      signed __int32 v40 = *(_DWORD *)(v25 + 4 * v23)
          - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v39, 0xFuLL), 1), v39, 0xFuLL).u32[0];
      if (v40 <= *(_DWORD *)(a1 + 1064)) {
        break;
      }
      if (v40 < v31)
      {
        int v31 = v40;
        int v24 = v23;
      }
      ++v23;
      unsigned __int32 v29 = (_OWORD *)((char *)v29 + 24);
      if (v28 == v23) {
        goto LABEL_27;
      }
    }
    unsigned int v32 = v21[1].u32[1];
    LOWORD(v33) = *(void *)&v21[2];
    WORD1(v33) = BYTE2(*(void *)&v21[2]);
    WORD2(v33) = BYTE4(*(void *)&v21[2]);
    HIWORD(v33) = BYTE6(*(void *)&v21[2]);
    uint32x4_t v34 = *(uint32x4_t *)v29;
    unsigned __int32 v29 = (_OWORD *)((char *)v29 + 24);
    v35.i32[0] = v22 & 0xFF00FF;
    v35.i32[1] = v32 & 0xFF00FF;
    v35.i64[1] = v33;
    v36.i32[0] = (v22 >> 8) & 0xFF00FF;
    v36.i32[1] = (v32 >> 8) & 0xFF00FF;
    v36.i64[1] = *(void *)&vshr_n_u32(v21[2], 8uLL) & 0xFFFF00FFFFFF00FFLL;
    int v37 = *(_DWORD *)(v20 + 4 * v23)
        + v40
        - vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v34 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v35), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v34, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v36), 0xFuLL));
    if (v37 < v30) {
      int v30 = v37;
    }
    ++v23;
  }
  while (v28 != v23);
LABEL_27:
  if (v30 == 0x40000000) {
    goto LABEL_30;
  }
  return (__int16)(((*(_DWORD *)(a1 + 1568) + v30) * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100019814(uint64_t a1, unsigned int a2)
{
  int v2 = *(unsigned __int8 **)(a1 + 1544);
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 == v4)
  {
    int v9 = *(_DWORD *)(a1 + 1120);
    int v10 = (unsigned __int8 *)(*(void *)(a1 + 784) + v9 * v5);
    int v11 = 1;
LABEL_12:
    int v20 = 0x40000000;
    v22.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v22.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    while (1)
    {
      unsigned int v26 = v10[1];
      int v18 = v2[5];
      int v19 = v2[4];
      int v21 = v2[7];
      int v23 = v2[6];
      int v14 = v2[1];
      int v15 = *v2;
      int v16 = v2[3];
      int v17 = v2[2];
      int v24 = ((*v10 & 0xF) - v15) * ((*v10 & 0xF) - v15)
          + ((*v10 >> 4) - v14) * ((*v10 >> 4) - v14)
          + ((v26 >> 4) - v16) * ((v26 >> 4) - v16)
          + ((v26 & 0xF) - v17) * ((v26 & 0xF) - v17)
          + ((v10[2] >> 4) - v18) * ((v10[2] >> 4) - v18)
          + ((v10[2] & 0xF) - v19) * ((v10[2] & 0xF) - v19)
          + ((v10[3] >> 4) - v21) * ((v10[3] >> 4) - v21)
          + ((v10[3] & 0xF) - v23) * ((v10[3] & 0xF) - v23);
      if (v24 > *(_DWORD *)(a1 + 1056))
      {
        v24 += *(_DWORD *)(a1 + 1060);
      }
      else
      {
        unint64_t v27 = *(unsigned int *)(a1 + 1104);
        if ((int)v27 >= 9)
        {
          if (v27 <= 0xA) {
            uint64_t v28 = 10;
          }
          else {
            uint64_t v28 = *(unsigned int *)(a1 + 1104);
          }
          unint64_t v29 = v28 - 9;
          if ((unint64_t)(v28 - 9) < 0xE)
          {
            unint64_t v30 = 8;
            goto LABEL_34;
          }
          uint64_t v31 = (v29 >> 1) + 1;
          if (v29 >= 0x1E)
          {
            uint64_t v33 = 0;
            uint64_t v32 = v31 & 0x7FFFFFFFFFFFFFF0;
            int32x4_t v34 = 0uLL;
            int32x4_t v35 = (int32x4_t)v24;
            int32x4_t v36 = (const char *)(v2 + 8);
            int32x4_t v37 = 0uLL;
            int32x4_t v38 = 0uLL;
            do
            {
              int8x16_t v39 = *(int8x16_t *)&v10[(v33 & 0x7FFFFFFFFFFFFFF0) + 4];
              uint8x16_t v40 = vshrq_n_u8((uint8x16_t)v39, 4uLL);
              int8x16x2_t v59 = vld2q_s8(v36);
              v36 += 32;
              int16x8_t v41 = (int16x8_t)vsubl_high_u8(v40, (uint8x16_t)v59.val[1]);
              int16x8_t v42 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v40.i8, *(uint8x8_t *)v59.val[1].i8);
              uint8x16_t v43 = (uint8x16_t)vandq_s8(v39, v22);
              int16x8_t v44 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v59.val[0].i8);
              int16x8_t v45 = (int16x8_t)vsubl_high_u8(v43, (uint8x16_t)v59.val[0]);
              int32x4_t v38 = vmlal_high_s16(vmlal_high_s16(v38, v41, v41), v45, v45);
              int32x4_t v37 = vmlal_s16(vmlal_s16(v37, *(int16x4_t *)v41.i8, *(int16x4_t *)v41.i8), *(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8);
              int32x4_t v34 = vmlal_high_s16(vmlal_high_s16(v34, v42, v42), v44, v44);
              int32x4_t v35 = vmlal_s16(vmlal_s16(v35, *(int16x4_t *)v42.i8, *(int16x4_t *)v42.i8), *(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8);
              v33 += 16;
            }
            while (v32 != v33);
            int v24 = vaddvq_s32(vaddq_s32(vaddq_s32(v35, v37), vaddq_s32(v34, v38)));
            if (v31 == v32) {
              goto LABEL_14;
            }
            if ((v31 & 8) == 0)
            {
              unint64_t v30 = (2 * v32) | 8;
LABEL_34:
              unint64_t v53 = v30 >> 1;
              do
              {
                unsigned int v54 = v10[v53];
                int v55 = (v54 >> 4) - v2[v30 | 1];
                int v56 = (v54 & 0xF) - v2[v30];
                v24 += v55 * v55 + v56 * v56;
                v30 += 2;
                ++v53;
              }
              while (v30 < v27);
              goto LABEL_14;
            }
          }
          else
          {
            uint64_t v32 = 0;
          }
          uint64_t v46 = v31 & 0x7FFFFFFFFFFFFFF8;
          unint64_t v30 = (16 * ((v31 & 0x7FFFFFFFFFFFFFF8uLL) >> 3)) | 8;
          int32x4_t v47 = 0uLL;
          int32x4_t v48 = (int32x4_t)v24;
          uint32x4_t v49 = (const char *)&v2[2 * v32 + 8];
          do
          {
            int8x8_t v50 = *(int8x8_t *)&v10[(v32 & 0x7FFFFFFFFFFFFFF8) + 4];
            int8x8x2_t v58 = vld2_s8(v49);
            v49 += 16;
            int16x8_t v51 = (int16x8_t)vsubl_u8(vshr_n_u8((uint8x8_t)v50, 4uLL), (uint8x8_t)v58.val[1]);
            int16x8_t v52 = (int16x8_t)vsubl_u8((uint8x8_t)vand_s8(v50, (int8x8_t)0xF0F0F0F0F0F0F0FLL), (uint8x8_t)v58.val[0]);
            int32x4_t v47 = vmlal_high_s16(vmlal_high_s16(v47, v51, v51), v52, v52);
            int32x4_t v48 = vmlal_s16(vmlal_s16(v48, *(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v52.i8, *(int16x4_t *)v52.i8);
            v32 += 8;
          }
          while (v46 != v32);
          int v24 = vaddvq_s32(vaddq_s32(v48, v47));
          if (v31 == v46) {
            goto LABEL_14;
          }
          goto LABEL_34;
        }
      }
LABEL_14:
      if (v24 < v20) {
        int v20 = v24;
      }
      v10 += v9;
      if (v11-- <= 1) {
        return (__int16)((*(_DWORD *)(a1 + 1052) * v20 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
      }
    }
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    int v6 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
    unsigned int v8 = *v6;
    int v7 = v6[1];
  }
  else
  {
    uint64_t v12 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    unsigned int v8 = *v12;
    int v7 = v12[1];
  }
  int v11 = v7 - v8;
  if (*(_DWORD *)(a1 + 2012)) {
    unsigned int v8 = a2;
  }
  uint64_t v13 = 96;
  if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
    uint64_t v13 = 16;
  }
  if (v11 >= 1)
  {
    int v9 = *(_DWORD *)(a1 + 1120);
    int v10 = (unsigned __int8 *)(*(void *)(a1 + v13) + (int)(v9 * v8));
    goto LABEL_12;
  }
  int v20 = 0x40000000;
  return (__int16)((*(_DWORD *)(a1 + 1052) * v20 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100019B54(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 == v4)
  {
    uint64_t v8 = *(void *)(a1 + 792) + 12 * v5;
    goto LABEL_9;
  }
  if (!*(_DWORD *)(a1 + 1176))
  {
    uint64_t v6 = 3 * (*(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2) + a3);
    if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v7 = *(void *)(a1 + 144);
    goto LABEL_8;
  }
  uint64_t v6 = 3 * (*(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2) + a3);
  if (*(_DWORD *)(a1 + 1080) <= (signed int)a2) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v7 = *(void *)(a1 + 136);
LABEL_8:
  uint64_t v8 = v7 + 4 * v6;
LABEL_9:
  uint64_t v9 = *(void *)(a1 + 1560);
  int v10 = *(_DWORD *)v9 - *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= *(_DWORD *)v9) {
    int v10 = *(_DWORD *)v8 - *(_DWORD *)v9;
  }
  unsigned int v11 = ((*(_DWORD *)v8 ^ *(_DWORD *)v9 ^ v10) & 0x11111111)
      - (((*(_DWORD *)v8 ^ *(_DWORD *)v9 ^ v10) & 0x11111111u) >> 4);
  signed int v12 = (16843009 * (((((v11 + v10) ^ v11) >> 4) & 0xF0F0F0F) + (((v11 + v10) ^ v11) & 0xF0F0F0F))) >> 24;
  if (v12 <= *(_DWORD *)(a1 + 1056))
  {
    int8x8_t v14 = *(int8x8_t *)(v8 + 4);
    int8x8_t v15 = *(int8x8_t *)(v9 + 4);
    int32x2_t v16 = (int32x2_t)vand_s8(veor_s8(veor_s8(v15, v14), (int8x8_t)vabd_u32((uint32x2_t)v14, (uint32x2_t)v15)), (int8x8_t)0x1111111111111111);
    int8x8_t v17 = (int8x8_t)vsub_s32(v16, (int32x2_t)vshr_n_u32((uint32x2_t)v16, 4uLL));
    int8x8_t v18 = veor_s8((int8x8_t)vaba_u32((uint32x2_t)v17, (uint32x2_t)v14, (uint32x2_t)v15), v17);
    uint32x2_t v19 = vshr_n_u32((uint32x2_t)vmul_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v18, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL), (int32x2_t)vand_s8(v18, (int8x8_t)0xF0F0F0F0F0F0F0FLL)), (int32x2_t)0x101010101010101), 0x18uLL);
    __int32 v13 = v19.i32[1];
    v12 += v19.i32[0];
  }
  else
  {
    __int32 v13 = *(_DWORD *)(a1 + 1060);
  }
  return (__int16)((*(_DWORD *)(a1 + 1052) * (v13 + v12) + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100019CB4(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 == v3)
  {
    uint64_t v36 = *(void *)(a1 + 792) + 12 * v4;
    int v37 = 1;
    goto LABEL_29;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    int v5 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
    int v6 = *v5;
    int v37 = v5[1] - *v5;
    if ((v37 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_25:
    uint64_t v39 = 144;
    if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
      uint64_t v39 = 136;
    }
    if (v37 >= 1)
    {
      uint64_t v36 = *(void *)(a1 + v39) + 12 * v6;
LABEL_29:
      uint8x16_t v40 = *(int **)(a1 + 1560);
      unsigned int v41 = *v40;
      int8x8_t v42 = *(int8x8_t *)(v40 + 1);
      int v43 = v37 + 1;
      int16x8_t v44 = (int8x8_t *)(v36 + 4);
      int v14 = 0x40000000;
      do
      {
        unsigned __int32 v52 = v44[-1].u32[1];
        int v53 = v41 - v52;
        if (v52 >= v41) {
          int v53 = v52 - v41;
        }
        unsigned int v54 = ((v52 ^ v41 ^ v53) & 0x11111111) - (((v52 ^ v41 ^ v53) & 0x11111111) >> 4);
        signed int v50 = (16843009 * (((((v54 + v53) ^ v54) >> 4) & 0xF0F0F0F) + (((v54 + v53) ^ v54) & 0xF0F0F0F))) >> 24;
        if (v50 <= *(_DWORD *)(a1 + 1056))
        {
          int32x2_t v45 = (int32x2_t)vand_s8(veor_s8(veor_s8(*v44, v42), (int8x8_t)vabd_u32((uint32x2_t)*v44, (uint32x2_t)v42)), (int8x8_t)0x1111111111111111);
          int8x8_t v46 = (int8x8_t)vsub_s32(v45, (int32x2_t)vshr_n_u32((uint32x2_t)v45, 4uLL));
          int8x8_t v47 = veor_s8((int8x8_t)vaba_u32((uint32x2_t)v46, (uint32x2_t)*v44, (uint32x2_t)v42), v46);
          uint32x2_t v48 = vshr_n_u32((uint32x2_t)vmul_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v47, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL), (int32x2_t)vand_s8(v47, (int8x8_t)0xF0F0F0F0F0F0F0FLL)), (int32x2_t)0x101010101010101), 0x18uLL);
          __int32 v49 = v48.i32[1];
          v50 += v48.i32[0];
        }
        else
        {
          __int32 v49 = *(_DWORD *)(a1 + 1060);
        }
        int v51 = v49 + v50;
        if (v51 < v14) {
          int v14 = v51;
        }
        --v43;
        int16x8_t v44 = (int8x8_t *)((char *)v44 + 12);
      }
      while (v43 > 1);
      return (__int16)((*(_DWORD *)(a1 + 1052) * v14 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
LABEL_38:
    int v14 = 0x40000000;
    return (__int16)((*(_DWORD *)(a1 + 1052) * v14 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  int32x4_t v38 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
  int v6 = *v38;
  int v37 = v38[1] - v6;
  if (v37) {
    goto LABEL_25;
  }
LABEL_5:
  if (v37 < 2) {
    goto LABEL_38;
  }
  uint64_t v7 = *(int **)(a1 + 1560);
  unsigned int v8 = *v7;
  int8x8_t v9 = *(int8x8_t *)(v7 + 1);
  uint64_t v10 = 144;
  if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
    uint64_t v10 = 136;
  }
  uint64_t v11 = *(void *)(a1 + v10) + 12 * v6;
  signed int v12 = *(_DWORD *)(a1 + 1056);
  int v13 = (v37 >> 1) + 1;
  int v14 = 0x40000000;
  do
  {
    unsigned int v23 = v8 - *(_DWORD *)v11;
    if (*(_DWORD *)v11 >= v8) {
      unsigned int v23 = *(_DWORD *)v11 - v8;
    }
    unsigned int v24 = ((*(_DWORD *)v11 ^ v8 ^ v23) & 0x11111111) - (((*(_DWORD *)v11 ^ v8 ^ v23) & 0x11111111) >> 4);
    signed int v25 = (16843009 * (((((v24 + v23) ^ v24) >> 4) & 0xF0F0F0F) + (((v24 + v23) ^ v24) & 0xF0F0F0F))) >> 24;
    if (v25 <= v12)
    {
      int8x8_t v27 = *(int8x8_t *)(v11 + 4);
      int32x2_t v28 = (int32x2_t)vand_s8(veor_s8(veor_s8(v27, v9), (int8x8_t)vabd_u32((uint32x2_t)v27, (uint32x2_t)v9)), (int8x8_t)0x1111111111111111);
      int8x8_t v29 = (int8x8_t)vsub_s32(v28, (int32x2_t)vshr_n_u32((uint32x2_t)v28, 4uLL));
      int8x8_t v30 = veor_s8((int8x8_t)vaba_u32((uint32x2_t)v29, (uint32x2_t)v27, (uint32x2_t)v9), v29);
      uint32x2_t v31 = vshr_n_u32((uint32x2_t)vmul_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v30, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL), (int32x2_t)vand_s8(v30, (int8x8_t)0xF0F0F0F0F0F0F0FLL)), (int32x2_t)0x101010101010101), 0x18uLL);
      __int32 v26 = v31.i32[1];
      v25 += v31.i32[0];
    }
    else
    {
      __int32 v26 = *(_DWORD *)(a1 + 1060);
    }
    int v32 = v26 + v25;
    if (v32 < v14) {
      int v14 = v32;
    }
    unsigned int v33 = *(_DWORD *)(v11 + 12);
    unsigned int v34 = v8 - v33;
    if (v33 >= v8) {
      unsigned int v34 = v33 - v8;
    }
    unsigned int v35 = ((v33 ^ v8 ^ v34) & 0x11111111) - (((v33 ^ v8 ^ v34) & 0x11111111) >> 4);
    signed int v21 = (16843009 * (((((v35 + v34) ^ v35) >> 4) & 0xF0F0F0F) + (((v35 + v34) ^ v35) & 0xF0F0F0F))) >> 24;
    if (v21 <= v12)
    {
      int8x8_t v15 = *(int8x8_t *)(v11 + 16);
      int32x2_t v16 = (int32x2_t)vand_s8(veor_s8(veor_s8(v15, v9), (int8x8_t)vabd_u32((uint32x2_t)v15, (uint32x2_t)v9)), (int8x8_t)0x1111111111111111);
      int8x8_t v17 = (int8x8_t)vsub_s32(v16, (int32x2_t)vshr_n_u32((uint32x2_t)v16, 4uLL));
      int8x8_t v18 = veor_s8((int8x8_t)vaba_u32((uint32x2_t)v17, (uint32x2_t)v15, (uint32x2_t)v9), v17);
      uint32x2_t v19 = vshr_n_u32((uint32x2_t)vmul_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v18, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL), (int32x2_t)vand_s8(v18, (int8x8_t)0xF0F0F0F0F0F0F0FLL)), (int32x2_t)0x101010101010101), 0x18uLL);
      __int32 v20 = v19.i32[1];
      v21 += v19.i32[0];
    }
    else
    {
      __int32 v20 = *(_DWORD *)(a1 + 1060);
    }
    int v22 = v20 + v21;
    if (v22 < v14) {
      int v14 = v22;
    }
    --v13;
    v11 += 24;
  }
  while (v13 > 1);
  return (__int16)((*(_DWORD *)(a1 + 1052) * v14 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_10001A004(uint64_t a1, unsigned int a2, int a3)
{
  int v6 = *(_DWORD *)(a1 + 1072);
  BOOL v7 = __OFSUB__(a2, v6);
  int v8 = a2 - v6;
  if (v8 < 0 == v7)
  {
    uint64_t v11 = *(void *)(a1 + 792) + 12 * v8;
    goto LABEL_9;
  }
  if (!*(_DWORD *)(a1 + 1176))
  {
    uint64_t v9 = 3 * (*(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2) + a3);
    if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v10 = *(void *)(a1 + 144);
    goto LABEL_8;
  }
  uint64_t v9 = 3 * (*(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2) + a3);
  if (*(_DWORD *)(a1 + 1080) <= (signed int)a2) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v10 = *(void *)(a1 + 136);
LABEL_8:
  uint64_t v11 = v10 + 4 * v9;
LABEL_9:
  uint64_t v12 = sub_100005228(a1, a2, a3);
  int v13 = (_DWORD *)sub_100005290(a1, a2, a3);
  uint64_t v14 = *(void *)(a1 + 1560);
  int v15 = *(_DWORD *)v14 - *(_DWORD *)v11;
  if (*(_DWORD *)v11 >= *(_DWORD *)v14) {
    int v15 = *(_DWORD *)v11 - *(_DWORD *)v14;
  }
  unsigned int v16 = ((*(_DWORD *)v11 ^ *(_DWORD *)v14 ^ v15) & 0x11111111)
      - (((*(_DWORD *)v11 ^ *(_DWORD *)v14 ^ v15) & 0x11111111u) >> 4);
  signed int v17 = ((((((v16 + v15) ^ v16) >> 4) & 0xF0F0F0F) * ((*(_DWORD *)v12 >> 4) & 0xF0F0F0F)) >> 24)
      + (((((v16 + v15) ^ v16) & 0xF0F0F0F) * (*(_DWORD *)v12 & 0xF0F0F0F)) >> 24);
  if (v17 <= *(_DWORD *)(a1 + 1056))
  {
    int8x8_t v19 = *(int8x8_t *)(v12 + 4);
    int8x8_t v20 = *(int8x8_t *)(v11 + 4);
    int8x8_t v21 = *(int8x8_t *)(v14 + 4);
    int32x2_t v22 = (int32x2_t)vand_s8(veor_s8(veor_s8(v21, v20), (int8x8_t)vabd_u32((uint32x2_t)v20, (uint32x2_t)v21)), (int8x8_t)0x1111111111111111);
    int8x8_t v23 = (int8x8_t)vsub_s32(v22, (int32x2_t)vshr_n_u32((uint32x2_t)v22, 4uLL));
    int8x8_t v24 = veor_s8((int8x8_t)vaba_u32((uint32x2_t)v23, (uint32x2_t)v20, (uint32x2_t)v21), v23);
    uint32x2_t v25 = vshr_n_u32((uint32x2_t)vmul_s32((int32x2_t)vand_s8(v24, (int8x8_t)0xF0F0F0F0F0F0F0FLL), (int32x2_t)vand_s8(v19, (int8x8_t)0xF0F0F0F0F0F0F0FLL)), 0x18uLL);
    uint32x2_t v26 = vshr_n_u32((uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v24, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v19, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL)), 0x18uLL);
    __int32 v18 = v25.i32[1] + v17 + v25.i32[0] + v26.i32[0] + v26.i32[1];
  }
  else
  {
    __int32 v18 = *(_DWORD *)(a1 + 1060) + v17;
  }
  return (__int16)(((*v13 + v18) * *(_DWORD *)(a1 + 1052) + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_10001A1F8(uint64_t a1, unsigned int a2)
{
  int v4 = *(_DWORD *)(a1 + 1296);
  int v5 = *(_DWORD *)(a1 + 1072);
  BOOL v6 = __OFSUB__(a2, v5);
  int v7 = a2 - v5;
  if (v7 < 0 == v6)
  {
    uint64_t v44 = *(void *)(a1 + 792) + 12 * v7;
    int v45 = 1;
    goto LABEL_47;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    int v8 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
    int v9 = *v8;
    int v45 = v8[1] - *v8;
    if ((v45 & 1) == 0)
    {
LABEL_5:
      uint64_t v10 = 144;
      if (*(_DWORD *)(a1 + 1080) > (signed int)a2) {
        uint64_t v10 = 136;
      }
      uint64_t v11 = *(void *)(a1 + v10);
      uint64_t v12 = sub_100005228(a1, a2, 0);
      int v13 = (int *)sub_100005290(a1, a2, 0);
      if (v45 < 2) {
        goto LABEL_60;
      }
      uint64_t v14 = *(unsigned int **)(a1 + 1560);
      unsigned int v15 = *v14;
      unsigned int v16 = v14[1];
      unsigned int v17 = v14[2];
      __int32 v18 = (_DWORD *)(v11 + 12 * v9);
      int v19 = (v45 >> 1) + 1;
      int v20 = 0x40000000;
      int8x8_t v21 = (_DWORD *)v12;
      while (1)
      {
        if (v4 == 2) {
          int32x2_t v22 = (_DWORD *)v12;
        }
        else {
          int32x2_t v22 = v21;
        }
        unsigned int v23 = v18[1];
        unsigned int v24 = v18[2];
        unsigned int v25 = v15 - *v18;
        if (*v18 >= v15) {
          unsigned int v25 = *v18 - v15;
        }
        unsigned int v26 = ((*v18 ^ v15 ^ v25) & 0x11111111) - (((*v18 ^ v15 ^ v25) & 0x11111111) >> 4);
        signed int v70 = (((((v26 + v25) ^ v26) & 0xF0F0F0F) * (*v22 & 0xF0F0F0F)) >> 24)
            + ((((((v26 + v25) ^ v26) >> 4) & 0xF0F0F0F) * ((*v22 >> 4) & 0xF0F0F0F)) >> 24);
        signed int v27 = *(_DWORD *)(a1 + 1056);
        if (v70 <= v27)
        {
          unsigned int v29 = v16 - v23;
          if (v23 >= v16) {
            unsigned int v29 = v23 - v16;
          }
          unsigned int v30 = ((v23 ^ v16 ^ v29) & 0x11111111) - (((v23 ^ v16 ^ v29) & 0x11111111) >> 4);
          unsigned int v73 = v70
              + (((((v30 + v29) ^ v30) & 0xF0F0F0F) * (v22[1] & 0xF0F0F0F)) >> 24)
              + ((((((v30 + v29) ^ v30) >> 4) & 0xF0F0F0F) * ((v22[1] >> 4) & 0xF0F0F0F)) >> 24);
          unsigned int v31 = v17 - v24;
          if (v24 >= v17) {
            unsigned int v31 = v24 - v17;
          }
          unsigned int v32 = ((v24 ^ v17 ^ v31) & 0x11111111) - (((v24 ^ v17 ^ v31) & 0x11111111) >> 4);
          unsigned int v71 = v73
              + (((((v32 + v31) ^ v32) & 0xF0F0F0F) * (v22[2] & 0xF0F0F0F)) >> 24)
              + ((((((v32 + v31) ^ v32) >> 4) & 0xF0F0F0F) * ((v22[2] >> 4) & 0xF0F0F0F)) >> 24);
          if (v4 == 2)
          {
LABEL_25:
            signed int v72 = v71 + *v13;
            if (v72 >= v20) {
              goto LABEL_27;
            }
LABEL_26:
            int v20 = v72;
            goto LABEL_27;
          }
        }
        else
        {
          unsigned int v71 = v70 + *(_DWORD *)(a1 + 1060);
          if (v4 == 2) {
            goto LABEL_25;
          }
        }
        int v28 = *v13++;
        signed int v72 = v71 + v28;
        if (v72 < v20) {
          goto LABEL_26;
        }
LABEL_27:
        unsigned int v33 = v22 + 3;
        if (v4 == 2) {
          unsigned int v33 = (_DWORD *)v12;
        }
        unsigned int v35 = v18[3];
        unsigned int v34 = v18[4];
        unsigned int v36 = v18[5];
        unsigned int v37 = v15 - v35;
        if (v35 >= v15) {
          unsigned int v37 = v35 - v15;
        }
        unsigned int v38 = ((v35 ^ v15 ^ v37) & 0x11111111) - (((v35 ^ v15 ^ v37) & 0x11111111) >> 4);
        signed int v74 = (((((v38 + v37) ^ v38) & 0xF0F0F0F) * (*v33 & 0xF0F0F0F)) >> 24)
            + ((((((v38 + v37) ^ v38) >> 4) & 0xF0F0F0F) * ((*v33 >> 4) & 0xF0F0F0F)) >> 24);
        if (v74 <= v27)
        {
          unsigned int v40 = v16 - v34;
          if (v34 >= v16) {
            unsigned int v40 = v34 - v16;
          }
          unsigned int v41 = ((v34 ^ v16 ^ v40) & 0x11111111) - (((v34 ^ v16 ^ v40) & 0x11111111) >> 4);
          unsigned int v77 = v74
              + (((((v41 + v40) ^ v41) & 0xF0F0F0F) * (v33[1] & 0xF0F0F0F)) >> 24)
              + ((((((v41 + v40) ^ v41) >> 4) & 0xF0F0F0F) * ((v33[1] >> 4) & 0xF0F0F0F)) >> 24);
          unsigned int v42 = v17 - v36;
          if (v36 >= v17) {
            unsigned int v42 = v36 - v17;
          }
          unsigned int v43 = ((v36 ^ v17 ^ v42) & 0x11111111) - (((v36 ^ v17 ^ v42) & 0x11111111) >> 4);
          unsigned int v75 = v77
              + (((((v43 + v42) ^ v43) & 0xF0F0F0F) * (v33[2] & 0xF0F0F0F)) >> 24)
              + ((((((v43 + v42) ^ v43) >> 4) & 0xF0F0F0F) * ((v33[2] >> 4) & 0xF0F0F0F)) >> 24);
          if (v4 != 2)
          {
LABEL_33:
            int v39 = *v13++;
            signed int v76 = v75 + v39;
            if (v76 >= v20) {
              goto LABEL_10;
            }
            goto LABEL_9;
          }
        }
        else
        {
          unsigned int v75 = v74 + *(_DWORD *)(a1 + 1060);
          if (v4 != 2) {
            goto LABEL_33;
          }
        }
        signed int v76 = v75 + *v13;
        if (v76 >= v20) {
          goto LABEL_10;
        }
LABEL_9:
        int v20 = v76;
LABEL_10:
        int8x8_t v21 = v33 + 3;
        --v19;
        v18 += 6;
        if (v19 <= 1) {
          return (__int16)((*(_DWORD *)(a1 + 1052) * v20 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
        }
      }
    }
  }
  else
  {
    int8x8_t v46 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
    int v9 = *v46;
    int v45 = v46[1] - v9;
    if ((v45 & 1) == 0) {
      goto LABEL_5;
    }
  }
  if (*(_DWORD *)(a1 + 1080) <= (signed int)a2) {
    uint64_t v47 = *(void *)(a1 + 144);
  }
  else {
    uint64_t v47 = *(void *)(a1 + 136);
  }
  uint64_t v44 = v47 + 12 * v9;
LABEL_47:
  uint64_t v48 = sub_100005228(a1, a2, 0);
  __int32 v49 = (_DWORD *)sub_100005290(a1, a2, 0);
  if (v45 < 1)
  {
LABEL_60:
    int v20 = 0x40000000;
    return (__int16)((*(_DWORD *)(a1 + 1052) * v20 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  signed int v50 = *(int **)(a1 + 1560);
  unsigned int v51 = *v50;
  int8x8_t v52 = *(int8x8_t *)(v50 + 1);
  int v53 = v45 + 1;
  unsigned int v54 = (int8x8_t *)(v44 + 4);
  int v20 = 0x40000000;
  uint64_t v55 = v48;
  do
  {
    if (v4 == 2) {
      uint64_t v64 = v48;
    }
    else {
      uint64_t v64 = v55;
    }
    unsigned __int32 v65 = v54[-1].u32[1];
    uint64_t v55 = v64 + 12;
    int v66 = v51 - v65;
    if (v65 >= v51) {
      int v66 = v65 - v51;
    }
    unsigned int v67 = ((v65 ^ v51 ^ v66) & 0x11111111) - (((v65 ^ v51 ^ v66) & 0x11111111) >> 4);
    signed int v68 = ((((((v67 + v66) ^ v67) >> 4) & 0xF0F0F0F) * ((*(_DWORD *)v64 >> 4) & 0xF0F0F0F)) >> 24)
        + (((((v67 + v66) ^ v67) & 0xF0F0F0F) * (*(_DWORD *)v64 & 0xF0F0F0F)) >> 24);
    if (v68 <= *(_DWORD *)(a1 + 1056))
    {
      int8x8_t v56 = *(int8x8_t *)(v64 + 4);
      int32x2_t v57 = (int32x2_t)vand_s8(veor_s8(veor_s8(*v54, v52), (int8x8_t)vabd_u32((uint32x2_t)*v54, (uint32x2_t)v52)), (int8x8_t)0x1111111111111111);
      int8x8_t v58 = (int8x8_t)vsub_s32(v57, (int32x2_t)vshr_n_u32((uint32x2_t)v57, 4uLL));
      int8x8_t v59 = veor_s8((int8x8_t)vaba_u32((uint32x2_t)v58, (uint32x2_t)*v54, (uint32x2_t)v52), v58);
      uint32x2_t v60 = vshr_n_u32((uint32x2_t)vmul_s32((int32x2_t)vand_s8(v59, (int8x8_t)0xF0F0F0F0F0F0F0FLL), (int32x2_t)vand_s8(v56, (int8x8_t)0xF0F0F0F0F0F0F0FLL)), 0x18uLL);
      uint32x2_t v61 = vshr_n_u32((uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v59, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v56, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL)), 0x18uLL);
      __int32 v62 = v60.i32[1] + v68 + v60.i32[0] + v61.i32[0] + v61.i32[1];
    }
    else
    {
      __int32 v62 = *(_DWORD *)(a1 + 1060) + v68;
    }
    int v63 = *v49 + v62;
    if (v63 < v20) {
      int v20 = v63;
    }
    --v53;
    v49 += v4 != 2;
    unsigned int v54 = (int8x8_t *)((char *)v54 + 12);
  }
  while (v53 > 1);
  return (__int16)((*(_DWORD *)(a1 + 1052) * v20 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_10001A7F4(uint64_t a1, signed int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 == v3)
  {
    uint64_t v30 = *(void *)(a1 + 792) + 12 * v4;
    unsigned int v31 = (int16x8_t *)(*(void *)(a1 + 816) + 2 * v4);
    int v32 = 1;
LABEL_23:
    unsigned int v36 = *(uint32x2_t **)(a1 + 1552);
    unsigned __int32 v37 = v36[1].u32[0];
    int8x8_t v38 = (int8x8_t)*v36;
    int8x8_t v39 = (int8x8_t)vshr_n_u32(*v36, 4uLL);
    int8x8_t v40 = (int8x8_t)vshr_n_u32(*v36, 8uLL);
    int8x8_t v41 = (int8x8_t)vshr_n_u32(*v36, 0xCuLL);
    unsigned int v42 = v37 & 0xF000F;
    int32x2_t v43 = (int32x2_t)vand_s8(v38, (int8x8_t)0xF000F000F000FLL);
    int32x2_t v44 = (int32x2_t)vand_s8(v39, (int8x8_t)0xF000F000F000FLL);
    int32x2_t v45 = (int32x2_t)vand_s8(v40, (int8x8_t)0xF000F000F000FLL);
    int32x2_t v46 = (int32x2_t)vand_s8(v41, (int8x8_t)0xF000F000F000FLL);
    unsigned int v47 = (v37 >> 4) & 0xF000F;
    unsigned int v48 = (v37 >> 8) & 0xF000F;
    unsigned int v49 = (v37 >> 12) & 0xF000F;
    uint64_t v50 = (v32 - 1);
    if (v50 >= 7)
    {
      uint64_t v53 = v50 + 1;
      uint64_t v54 = (v50 + 1) & 0x1FFFFFFF8;
      v32 -= v54;
      unsigned int v51 = (int16x8_t *)((char *)v31 + 2 * v54);
      uint64_t v52 = v30 + 12 * v54;
      int32x2_t v136 = v43;
      int32x4_t v138 = vdupq_lane_s32(v43, 0);
      int32x4_t v55 = vdupq_lane_s32(v44, 0);
      int32x4_t v56 = vdupq_lane_s32(v45, 0);
      int32x4_t v57 = vdupq_lane_s32(v46, 0);
      int32x4_t v58 = vdupq_lane_s32(v43, 1);
      int32x2_t v134 = v44;
      int32x4_t v59 = vdupq_lane_s32(v44, 1);
      int32x4_t v60 = vdupq_lane_s32(v45, 1);
      int32x4_t v61 = vdupq_lane_s32(v46, 1);
      v62.i64[0] = 0x4000000040000000;
      v62.i64[1] = 0x4000000040000000;
      int32x4_t v63 = vdupq_n_s32(v42);
      int32x4_t v64 = vdupq_n_s32(v47);
      v65.i64[0] = 0xF000F000F000FLL;
      v65.i64[1] = 0xF000F000F000FLL;
      uint64_t v66 = v54;
      int32x4_t v67 = vdupq_n_s32(v48);
      v68.i64[0] = 0x4000000040000000;
      v68.i64[1] = 0x4000000040000000;
      int32x4_t v69 = vdupq_n_s32(v49);
      do
      {
        int16x8_t v70 = *v31++;
        unsigned int v71 = (const float *)v30;
        float32x4x3_t v141 = vld3q_f32(v71);
        v71 += 12;
        float32x4x3_t v142 = vld3q_f32(v71);
        int32x4_t v62 = vminq_s32(vsubq_s32(vmovl_s16(*(int16x4_t *)v70.i8), (int32x4_t)vsraq_n_u32(vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v141.val[0], v65), v138), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[0], 4uLL), v65), v55), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[0], 8uLL), v65), v56), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[0], 0xCuLL),
                                                              v65),
                                                 v57),
                                   0xFuLL),
                                 (uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v141.val[1], v65), v58), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[1], 4uLL), v65), v59), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[1], 8uLL), v65), v60), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[1], 0xCuLL), v65), v61), 0xFuLL), (uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(
                                                 vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v141.val[2], v65), v63),
                                                 (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[2], 4uLL), v65), v64), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[2], 8uLL), v65), v67), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[2], 0xCuLL), v65), v69), 0xFuLL)), v62);
        int32x4_t v68 = vminq_s32(vsubq_s32(vmovl_high_s16(v70), (int32x4_t)vsraq_n_u32(vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v142.val[0], v65), v138), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[0], 4uLL), v65), v55), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[0], 8uLL), v65), v56), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[0], 0xCuLL),
                                                              v65),
                                                 v57),
                                   0xFuLL),
                                 (uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v142.val[1], v65), v58), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[1], 4uLL), v65), v59), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[1], 8uLL), v65), v60), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[1], 0xCuLL), v65), v61), 0xFuLL), (uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(
                                                 vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v142.val[2], v65), v63),
                                                 (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[2], 4uLL), v65), v64), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[2], 8uLL), v65), v67), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[2], 0xCuLL), v65), v69), 0xFuLL)), v68);
        v30 += 96;
        v66 -= 8;
      }
      while (v66);
      int v27 = vminvq_s32(vminq_s32(v62, v68));
      int32x2_t v44 = v134;
      int32x2_t v43 = v136;
      if (v53 == v54) {
        return (__int16)(((*(_DWORD *)(a1 + 1568) + v27) * *(_DWORD *)(a1 + 1052)
      }
                                                    + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
    else
    {
      int v27 = 0x40000000;
      unsigned int v51 = v31;
      uint64_t v52 = v30;
    }
    unsigned int v72 = v32 + 1;
    unsigned int v73 = (unsigned int *)(v52 + 8);
    do
    {
      int v75 = v51->i16[0];
      unsigned int v51 = (int16x8_t *)((char *)v51 + 2);
      int v74 = v75;
      int8x8_t v76 = *(int8x8_t *)(v73 - 2);
      unsigned int v77 = *v73;
      v73 += 3;
      uint32x2_t v78 = (uint32x2_t)vmla_s32(vmla_s32(vmla_s32(vmul_s32((int32x2_t)vand_s8(v76, (int8x8_t)0xF000F000F000FLL), v43), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v76, 4uLL), (int8x8_t)0xF000F000F000FLL), v44), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v76, 8uLL), (int8x8_t)0xF000F000F000FLL), v45), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v76, 0xCuLL), (int8x8_t)0xF000F000F000FLL), v46);
      int v79 = v74
          - (vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v78, 0xFuLL), 1), v78, 0xFuLL).u32[0]
           + (((v77 & 0xF000F) * v42
             + ((v77 >> 4) & 0xF000F) * v47
             + ((v77 >> 8) & 0xF000F) * v48
             + ((v77 >> 12) & 0xF000F) * v49) >> 15));
      if (v79 < v27) {
        int v27 = v79;
      }
      --v72;
    }
    while (v72 > 1);
    return (__int16)(((*(_DWORD *)(a1 + 1568) + v27) * *(_DWORD *)(a1 + 1052)
                                                + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    int v5 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
    int v6 = *v5;
    int v32 = v5[1] - *v5;
    if ((v32 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_15:
    if (*(_DWORD *)(a1 + 2012)) {
      int v6 = a2;
    }
    uint64_t v34 = 112;
    if (*(_DWORD *)(a1 + 1080) > a2) {
      uint64_t v34 = 64;
    }
    uint64_t v35 = 144;
    if (*(_DWORD *)(a1 + 1080) > a2) {
      uint64_t v35 = 136;
    }
    if (v32 >= 1)
    {
      uint64_t v30 = *(void *)(a1 + v35) + 12 * v6;
      unsigned int v31 = (int16x8_t *)(*(void *)(a1 + v34) + 2 * v6);
      goto LABEL_23;
    }
LABEL_33:
    int v27 = 0x40000000;
    return (__int16)(((*(_DWORD *)(a1 + 1568) + v27) * *(_DWORD *)(a1 + 1052)
                                                + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  unsigned int v33 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
  int v6 = *v33;
  int v32 = v33[1] - v6;
  if (v32) {
    goto LABEL_15;
  }
LABEL_5:
  if (v32 < 2) {
    goto LABEL_33;
  }
  if (*(_DWORD *)(a1 + 2012)) {
    int v6 = a2;
  }
  uint64_t v7 = 144;
  if (*(_DWORD *)(a1 + 1080) > a2) {
    uint64_t v7 = 136;
  }
  uint64_t v8 = 112;
  if (*(_DWORD *)(a1 + 1080) > a2) {
    uint64_t v8 = 64;
  }
  int v9 = (const __int16 *)(*(void *)(a1 + v8) + 2 * v6);
  uint64_t v10 = *(void *)(a1 + v7) + 12 * v6;
  unsigned int v11 = v32 >> 1;
  uint64_t v12 = *(uint32x2_t **)(a1 + 1552);
  unsigned __int32 v13 = v12[1].u32[0];
  int8x8_t v14 = (int8x8_t)*v12;
  int8x8_t v15 = (int8x8_t)vshr_n_u32(*v12, 4uLL);
  int8x8_t v16 = (int8x8_t)vshr_n_u32(*v12, 8uLL);
  int8x8_t v17 = (int8x8_t)vshr_n_u32(*v12, 0xCuLL);
  unsigned int v18 = v13 & 0xF000F;
  int32x2_t v19 = (int32x2_t)vand_s8(v14, (int8x8_t)0xF000F000F000FLL);
  int32x2_t v20 = (int32x2_t)vand_s8(v15, (int8x8_t)0xF000F000F000FLL);
  int32x2_t v21 = (int32x2_t)vand_s8(v16, (int8x8_t)0xF000F000F000FLL);
  int32x2_t v22 = (int32x2_t)vand_s8(v17, (int8x8_t)0xF000F000F000FLL);
  unsigned int v23 = (v13 >> 4) & 0xF000F;
  unsigned int v24 = (v13 >> 8) & 0xF000F;
  unsigned int v25 = (v13 >> 12) & 0xF000F;
  uint64_t v26 = v11 - 1;
  if (v26 >= 7)
  {
    uint64_t v80 = v26 + 1;
    uint64_t v81 = (v26 + 1) & 0x1FFFFFFF8;
    v11 -= v81;
    uint64_t v28 = v10 + 24 * v81;
    unsigned int v29 = &v9[2 * v81];
    int32x4_t v133 = vdupq_lane_s32(v20, 0);
    int32x4_t v135 = vdupq_lane_s32(v19, 0);
    int32x4_t v131 = vdupq_lane_s32(v22, 0);
    int32x4_t v132 = vdupq_lane_s32(v21, 0);
    int32x2_t v123 = v20;
    int32x2_t v124 = v19;
    int32x4_t v129 = vdupq_lane_s32(v20, 1);
    int32x4_t v130 = vdupq_lane_s32(v19, 1);
    int32x2_t v121 = v22;
    int32x2_t v122 = v21;
    int32x4_t v127 = vdupq_lane_s32(v22, 1);
    int32x4_t v128 = vdupq_lane_s32(v21, 1);
    v82.i64[0] = 0x4000000040000000;
    v82.i64[1] = 0x4000000040000000;
    int32x4_t v125 = vdupq_n_s32(v23);
    int32x4_t v126 = vdupq_n_s32(v18);
    v83.i64[0] = 0xF000F000F000FLL;
    v83.i64[1] = 0xF000F000F000FLL;
    uint64_t v84 = v81;
    v85.i64[0] = 0x4000000040000000;
    v85.i64[1] = 0x4000000040000000;
    int32x4_t v86 = vdupq_n_s32(v24);
    int32x4_t v87 = vdupq_n_s32(v25);
    do
    {
      int32x4_t v137 = v82;
      int32x4_t v139 = v85;
      int16x8x2_t v140 = vld2q_s16(v9);
      v9 += 16;
      int32x4_t v89 = *(int32x4_t *)(v10 + 32);
      int32x4_t v88 = *(int32x4_t *)(v10 + 48);
      int32x4_t v91 = *(int32x4_t *)(v10 + 128);
      int32x4_t v90 = *(int32x4_t *)(v10 + 144);
      int32x4_t v92 = *(int32x4_t *)(v10 + 16);
      int32x4_t v93 = *(int32x4_t *)(v10 + 160);
      int32x4_t v94 = *(int32x4_t *)(v10 + 176);
      int8x16_t v95 = (int8x16_t)vtrn1q_s32(vuzp1q_s32(v90, v90), v93);
      LODWORD(v96) = *(void *)(v10 + 152);
      HIDWORD(v96) = v94.i32[0];
      int32x4_t v97 = (int32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v94, 8uLL);
      v98.i64[0] = vzip2q_s32(*(int32x4_t *)v10, vuzp1q_s32(*(int32x4_t *)v10, v89)).u64[0];
      int32x4_t v99 = vtrn1q_s32(vuzp1q_s32(v93, v93), v94);
      v94.i32[2] = HIDWORD(*(void *)(v10 + 160));
      v100.i32[0] = *(_OWORD *)v10;
      v100.i32[1] = *(void *)(v10 + 24);
      int32x4_t v102 = *(int32x4_t *)(v10 + 64);
      int32x4_t v101 = *(int32x4_t *)(v10 + 80);
      LODWORD(v103) = *(void *)(v10 + 56);
      v93.i32[2] = HIDWORD(*(void *)(v10 + 144));
      HIDWORD(v103) = v101.i32[0];
      int32x4_t v104 = *(int32x4_t *)(v10 + 96);
      v98.i64[1] = v103;
      v105.i64[0] = vzip2q_s32(v104, vuzp1q_s32(v104, v91)).u64[0];
      v106.i32[1] = HIDWORD(*(void *)(v10 + 128));
      v106.i32[0] = v104.i32[3];
      v105.i64[1] = v96;
      v106.i64[1] = vzip2q_s32(v90, v97).i64[1];
      v100.i64[1] = vtrn1q_s32(vuzp1q_s32(v88, v88), v102).i64[1];
      int32x4_t v107 = (int32x4_t)vextq_s8((int8x16_t)v88, (int8x16_t)v101, 8uLL);
      v108.i32[1] = HIDWORD(*(void *)(v10 + 32));
      v108.i32[0] = HIDWORD(*(_OWORD *)v10);
      int32x4_t v109 = vtrn1q_s32(vuzp1q_s32(v102, v102), v101);
      v101.i32[2] = HIDWORD(*(void *)(v10 + 64));
      v102.i32[2] = HIDWORD(*(void *)(v10 + 48));
      v90.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v92, *(int32x4_t *)v10), *(int8x16_t *)v10, 4uLL).u64[0];
      int32x4_t v110 = *(int32x4_t *)(v10 + 112);
      v108.i64[1] = vzip2q_s32(v88, v107).i64[1];
      v107.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v110, v104), (int8x16_t)v104, 4uLL).u64[0];
      v104.i32[1] = *(void *)(v10 + 120);
      v104.i64[1] = v95.i64[1];
      v88.i32[0] = v92.i32[0];
      v88.i32[1] = *(void *)(v10 + 40);
      v88.i64[1] = v109.i64[1];
      v95.i32[0] = v110.i32[0];
      v95.i32[1] = *(void *)(v10 + 136);
      v95.i64[1] = v99.i64[1];
      v107.i64[1] = v93.i64[1];
      v91.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v91, v110), (int8x16_t)v110, 4uLL).u64[0];
      v91.i64[1] = v94.i64[1];
      v90.i64[1] = v102.i64[1];
      v89.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v89, v92), (int8x16_t)v92, 4uLL).u64[0];
      v89.i64[1] = v101.i64[1];
      int32x4_t v85 = vminq_s32(vsubq_s32(vmovl_high_s16(v140.val[1]), (int32x4_t)vsraq_n_u32(vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8(v106, v83), v135), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v106, 4uLL), v83), v133), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v106, 8uLL), v83), v132), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v106, 0xCuLL),
                                                            v83),
                                               v131),
                                 0xFuLL),
                               (uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8(v95, v83), v130), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v95, 4uLL), v83), v129), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v95, 8uLL), v83), v128), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v95, 0xCuLL), v83), v127), 0xFuLL), (uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v91, v83), v126), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v91, 4uLL), v83), v125), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v91, 8uLL), v83), v86), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v91, 0xCuLL), v83),
                                           v87),
                             0xFuLL)),
              vminq_s32(vsubq_s32(vmovl_high_s16(v140.val[0]), (int32x4_t)vsraq_n_u32(vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v104, v83), v135), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v104, 4uLL), v83), v133), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v104, 8uLL), v83), v132), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v104, 0xCuLL),
                                                              v83),
                                                 v131),
                                   0xFuLL),
                                 (uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v107, v83), v130), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v107, 4uLL), v83), v129), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v107, 8uLL), v83), v128), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v107, 0xCuLL), v83), v127), 0xFuLL), (uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(
                                                 vmulq_s32((int32x4_t)vandq_s8(v105, v83), v126),
                                                 (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v105, 4uLL), v83), v125), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v105, 8uLL), v83), v86), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v105, 0xCuLL), v83), v87), 0xFuLL)), v139));
      v10 += 192;
      int32x4_t v82 = vminq_s32(vsubq_s32(vmovl_s16(*(int16x4_t *)v140.val[1].i8), (int32x4_t)vsraq_n_u32(vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8(v108, v83), v135), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v108, 4uLL), v83), v133), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v108, 8uLL), v83), v132), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v108, 0xCuLL),
                                                            v83),
                                               v131),
                                 0xFuLL),
                               (uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v88, v83), v130), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v88, 4uLL), v83), v129), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v88, 8uLL), v83), v128), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v88, 0xCuLL), v83), v127), 0xFuLL), (uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v89, v83), v126), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v89, 4uLL), v83), v125), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v89, 8uLL), v83), v86), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v89, 0xCuLL), v83),
                                           v87),
                             0xFuLL)),
              vminq_s32(vsubq_s32(vmovl_s16(*(int16x4_t *)v140.val[0].i8), (int32x4_t)vsraq_n_u32(vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8(v100, v83), v135), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v100, 4uLL), v83), v133), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v100, 8uLL), v83), v132), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v100, 0xCuLL),
                                                              v83),
                                                 v131),
                                   0xFuLL),
                                 (uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v90, v83), v130), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v90, 4uLL), v83), v129), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v90, 8uLL), v83), v128), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v90, 0xCuLL), v83), v127), 0xFuLL), (uint32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)vandq_s8(v98, v83), v126), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v98, 4uLL), v83), v125), (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v98, 8uLL), v83),
                                               v86),
                                             (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v98, 0xCuLL), v83),
                                             v87),
                               0xFuLL)),
                v137));
      v84 -= 8;
    }
    while (v84);
    int v27 = vminvq_s32(vminq_s32(v82, v85));
    int32x2_t v20 = v123;
    int32x2_t v19 = v124;
    int32x2_t v22 = v121;
    int32x2_t v21 = v122;
    if (v80 == v81) {
      return (__int16)(((*(_DWORD *)(a1 + 1568) + v27) * *(_DWORD *)(a1 + 1052)
    }
                                                  + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  else
  {
    int v27 = 0x40000000;
    uint64_t v28 = v10;
    unsigned int v29 = v9;
  }
  unsigned int v111 = v11 + 1;
  uint32x2_t v112 = (int8x8_t *)(v28 + 12);
  do
  {
    uint32x2_t v113 = (uint32x2_t)vmla_s32(vmla_s32(vmla_s32(vmul_s32((int32x2_t)vand_s8(*(int8x8_t *)((char *)v112 - 12), (int8x8_t)0xF000F000F000FLL), v19), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)((char *)&v112[-2] + 4), 4uLL), (int8x8_t)0xF000F000F000FLL), v20), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)((char *)&v112[-2] + 4), 8uLL), (int8x8_t)0xF000F000F000FLL), v21), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)((char *)&v112[-2] + 4), 0xCuLL), (int8x8_t)0xF000F000F000FLL), v22);
    unsigned int v114 = (v112[-1].i32[1] & 0xF000F) * v18
         + (((unsigned __int32)v112[-1].i32[1] >> 4) & 0xF000F) * v23
         + (((unsigned __int32)v112[-1].i32[1] >> 8) & 0xF000F) * v24
         + (((unsigned __int32)v112[-1].i32[1] >> 12) & 0xF000F) * v25;
    unsigned __int32 v115 = v112[1].u32[0];
    int8x8_t v116 = *v112;
    v112 += 3;
    signed __int32 v117 = *v29
         - (vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v113, 0xFuLL), 1), v113, 0xFuLL).u32[0]
          + (v114 >> 15));
    uint32x2_t v118 = (uint32x2_t)vmla_s32(vmla_s32(vmla_s32(vmul_s32((int32x2_t)vand_s8(v116, (int8x8_t)0xF000F000F000FLL), v19), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v116, 4uLL), (int8x8_t)0xF000F000F000FLL), v20), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v116, 8uLL), (int8x8_t)0xF000F000F000FLL), v21), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v116, 0xCuLL), (int8x8_t)0xF000F000F000FLL), v22);
    signed __int32 v119 = v29[1]
         - (vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v118, 0xFuLL), 1), v118, 0xFuLL).u32[0]
          + (((v115 & 0xF000F) * v18
            + ((v115 >> 4) & 0xF000F) * v23
            + ((v115 >> 8) & 0xF000F) * v24
            + ((v115 >> 12) & 0xF000F) * v25) >> 15));
    if (v117 >= v27) {
      signed __int32 v117 = v27;
    }
    if (v119 >= v117) {
      int v27 = v117;
    }
    else {
      int v27 = v119;
    }
    --v111;
    v29 += 2;
  }
  while (v111 > 1);
  return (__int16)(((*(_DWORD *)(a1 + 1568) + v27) * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_10001B1D0(uint64_t a1, signed int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  int v3 = a2 - v2;
  if (a2 >= v2)
  {
    uint64_t v7 = *(void *)(a1 + 792) + 12 * v3;
    uint64_t v8 = 2 * v3;
    uint64_t v9 = *(void *)(a1 + 816) + v8;
    uint64_t v10 = *(void *)(a1 + 824) + v8;
    unsigned int v11 = *(int **)(a1 + 1552);
    int8x8_t v12 = *(int8x8_t *)(v11 + 1);
    int v13 = 1;
  }
  else
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      int v4 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
      int v5 = *v4;
      int v6 = v4[1];
    }
    else
    {
      int8x8_t v14 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
      int v5 = *v14;
      int v6 = v14[1];
    }
    int v13 = v6 - v5;
    if (*(_DWORD *)(a1 + 2012)) {
      int v15 = a2;
    }
    else {
      int v15 = v5;
    }
    int v16 = *(_DWORD *)(a1 + 1080);
    BOOL v17 = v16 <= a2;
    if (v16 <= a2) {
      uint64_t v18 = 128;
    }
    else {
      uint64_t v18 = 80;
    }
    uint64_t v19 = 64;
    if (v16 <= a2) {
      uint64_t v19 = 112;
    }
    uint64_t v20 = 144;
    if (!v17) {
      uint64_t v20 = 136;
    }
    uint64_t v7 = *(void *)(a1 + v20) + 12 * v15;
    uint64_t v21 = 2 * v15;
    uint64_t v10 = *(void *)(a1 + v18) + v21;
    unsigned int v11 = *(int **)(a1 + 1552);
    int8x8_t v12 = *(int8x8_t *)(v11 + 1);
    if (v13 < 1)
    {
      int v23 = 0;
      signed int v36 = 0x40000000;
LABEL_29:
      int8x8_t v41 = *(int8x8_t *)(v7 + 12 * v23 + 4);
      uint32x2_t v42 = (uint32x2_t)vmla_s32(vmla_s32(vmla_s32(vmul_s32((int32x2_t)vand_s8(v41, (int8x8_t)0xF000F000F000FLL), (int32x2_t)vand_s8(v12, (int8x8_t)0xF000F000F000FLL)), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v41, 4uLL), (int8x8_t)0xF000F000F000FLL), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v12, 4uLL), (int8x8_t)0xF000F000F000FLL)), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v41, 8uLL), (int8x8_t)0xF000F000F000FLL), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v12, 8uLL), (int8x8_t)0xF000F000F000FLL)), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v41, 0xCuLL), (int8x8_t)0xF000F000F000FLL), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v12, 0xCuLL), (int8x8_t)0xF000F000F000FLL));
      signed __int32 v35 = v36
          + *(__int16 *)(v10 + 2 * v23)
          - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v42, 0xFuLL), 1), v42, 0xFuLL).u32[0];
      return (__int16)(((*(_DWORD *)(a1 + 1568) + v35) * *(_DWORD *)(a1 + 1052)
                                                  + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
    uint64_t v9 = *(void *)(a1 + v19) + v21;
  }
  uint64_t v22 = 0;
  int v23 = 0;
  unsigned int v24 = *v11;
  int v25 = *v11 & 0xF000F;
  int v26 = (v24 >> 4) & 0xF000F;
  int v27 = (v24 >> 8) & 0xF000F;
  int v28 = (v24 >> 12) & 0xF000F;
  int32x2_t v29 = (int32x2_t)vand_s8(v12, (int8x8_t)0xF000F000F000FLL);
  int32x2_t v30 = (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v12, 4uLL), (int8x8_t)0xF000F000F000FLL);
  int32x2_t v31 = (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v12, 8uLL), (int8x8_t)0xF000F000F000FLL);
  int32x2_t v32 = (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v12, 0xCuLL), (int8x8_t)0xF000F000F000FLL);
  int v33 = v13;
  uint64_t v34 = (void *)(v7 + 4);
  signed __int32 v35 = 0x40000000;
  signed int v36 = 0x40000000;
  do
  {
    while (1)
    {
      signed int v40 = *(__int16 *)(v9 + 2 * v22)
          - (((*((_DWORD *)v34 - 1) & 0xF000F) * v25
            + ((*((_DWORD *)v34 - 1) >> 4) & 0xF000F) * v26
            + ((*((_DWORD *)v34 - 1) >> 8) & 0xF000F) * v27
            + ((*((_DWORD *)v34 - 1) >> 12) & 0xF000Fu) * v28) >> 15);
      if (v40 <= *(_DWORD *)(a1 + 1064)) {
        break;
      }
      if (v40 < v36)
      {
        signed int v36 = *(__int16 *)(v9 + 2 * v22)
            - (((*((_DWORD *)v34 - 1) & 0xF000F) * v25
              + ((*((_DWORD *)v34 - 1) >> 4) & 0xF000F) * v26
              + ((*((_DWORD *)v34 - 1) >> 8) & 0xF000F) * v27
              + ((*((_DWORD *)v34 - 1) >> 12) & 0xF000Fu) * v28) >> 15);
        int v23 = v22;
      }
      ++v22;
      uint64_t v34 = (void *)((char *)v34 + 12);
      if (v33 == v22) {
        goto LABEL_26;
      }
    }
    int8x8_t v37 = *(int8x8_t *)v34;
    uint64_t v34 = (void *)((char *)v34 + 12);
    uint32x2_t v38 = (uint32x2_t)vmla_s32(vmla_s32(vmla_s32(vmul_s32((int32x2_t)vand_s8(v37, (int8x8_t)0xF000F000F000FLL), v29), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v37, 4uLL), (int8x8_t)0xF000F000F000FLL), v30), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v37, 8uLL), (int8x8_t)0xF000F000F000FLL), v31), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v37, 0xCuLL), (int8x8_t)0xF000F000F000FLL), v32);
    signed __int32 v39 = v40
        + *(__int16 *)(v10 + 2 * v22)
        - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v38, 0xFuLL), 1), v38, 0xFuLL).u32[0];
    if (v39 < v35) {
      signed __int32 v35 = v39;
    }
    ++v22;
  }
  while (v33 != v22);
LABEL_26:
  if (v35 == 0x40000000) {
    goto LABEL_29;
  }
  return (__int16)(((*(_DWORD *)(a1 + 1568) + v35) * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_10001B47C(uint64_t a1, signed int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 == v3)
  {
    uint64_t v40 = *(void *)(a1 + 792) + 12 * v4;
    uint64_t v41 = 2 * v4;
    uint32x2_t v42 = (__int16 *)(*(void *)(a1 + 816) + v41);
    int32x2_t v43 = (__int16 *)(*(void *)(a1 + 824) + v41);
    int v44 = 1;
    goto LABEL_39;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    int v5 = (int *)(*(void *)(a1 + 1160) + 4 * a2);
    int v6 = *v5;
    int v44 = v5[1] - *v5;
    if ((v44 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_28:
    if (*(_DWORD *)(a1 + 2012)) {
      int v46 = a2;
    }
    else {
      int v46 = v6;
    }
    uint64_t v47 = 80;
    if (*(_DWORD *)(a1 + 1080) <= a2) {
      uint64_t v47 = 128;
    }
    uint64_t v48 = 144;
    if (*(_DWORD *)(a1 + 1080) > a2) {
      uint64_t v48 = 136;
    }
    uint64_t v49 = 112;
    if (*(_DWORD *)(a1 + 1080) > a2) {
      uint64_t v49 = 64;
    }
    if (v44 >= 1)
    {
      uint64_t v50 = 2 * v46;
      uint64_t v51 = *(void *)(a1 + v48);
      uint32x2_t v42 = (__int16 *)(*(void *)(a1 + v49) + v50);
      uint64_t v40 = v51 + 12 * v46;
      int32x2_t v43 = (__int16 *)(*(void *)(a1 + v47) + v50);
LABEL_39:
      uint64_t v52 = *(void *)(a1 + 1552);
      int v53 = *(_DWORD *)v52 & 0xF000F;
      int v54 = (*(_DWORD *)v52 >> 4) & 0xF000F;
      int v55 = (*(_DWORD *)v52 >> 8) & 0xF000F;
      int v56 = (*(_DWORD *)v52 >> 12) & 0xF000F;
      int8x8_t v57 = *(int8x8_t *)(v52 + 4);
      int8x8_t v58 = (int8x8_t)vshr_n_u32((uint32x2_t)v57, 4uLL);
      int8x8_t v59 = (int8x8_t)vshr_n_u32((uint32x2_t)v57, 8uLL);
      int8x8_t v60 = (int8x8_t)vshr_n_u32((uint32x2_t)v57, 0xCuLL);
      int32x2_t v61 = (int32x2_t)vand_s8(v57, (int8x8_t)0xF000F000F000FLL);
      int32x2_t v62 = (int32x2_t)vand_s8(v58, (int8x8_t)0xF000F000F000FLL);
      int32x2_t v63 = (int32x2_t)vand_s8(v59, (int8x8_t)0xF000F000F000FLL);
      int32x2_t v64 = (int32x2_t)vand_s8(v60, (int8x8_t)0xF000F000F000FLL);
      int v65 = v44 + 1;
      uint64_t v66 = (int8x8_t *)(v40 + 4);
      int v33 = 0x40000000;
      do
      {
        int v69 = *v42++;
        int v70 = v69
            - (((v66[-1].i32[1] & 0xF000F) * v53
              + (((unsigned __int32)v66[-1].i32[1] >> 4) & 0xF000F) * v54
              + (((unsigned __int32)v66[-1].i32[1] >> 8) & 0xF000F) * v55
              + (((unsigned __int32)v66[-1].i32[1] >> 12) & 0xF000F) * v56) >> 15);
        if (v70 <= *(_DWORD *)(a1 + 1064))
        {
          uint32x2_t v67 = (uint32x2_t)vmla_s32(vmla_s32(vmla_s32(vmul_s32((int32x2_t)vand_s8(*v66, (int8x8_t)0xF000F000F000FLL), v61), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)*v66, 4uLL), (int8x8_t)0xF000F000F000FLL), v62), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)*v66, 8uLL), (int8x8_t)0xF000F000F000FLL), v63), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)*v66, 0xCuLL), (int8x8_t)0xF000F000F000FLL), v64);
          signed __int32 v68 = v70
              + *v43
              - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v67, 0xFuLL), 1), v67, 0xFuLL).u32[0];
        }
        else
        {
          signed __int32 v68 = v70 + *(_DWORD *)(a1 + 1068);
        }
        ++v43;
        if (v68 < v33) {
          int v33 = v68;
        }
        --v65;
        uint64_t v66 = (int8x8_t *)((char *)v66 + 12);
      }
      while (v65 > 1);
      return (__int16)(((*(_DWORD *)(a1 + 1568) + v33) * *(_DWORD *)(a1 + 1052)
                                                  + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
LABEL_46:
    int v33 = 0x40000000;
    return (__int16)(((*(_DWORD *)(a1 + 1568) + v33) * *(_DWORD *)(a1 + 1052)
                                                + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  int32x2_t v45 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
  int v6 = *v45;
  int v44 = v45[1] - v6;
  if (v44) {
    goto LABEL_28;
  }
LABEL_5:
  if (v44 < 2) {
    goto LABEL_46;
  }
  signed int v7 = *(_DWORD *)(a1 + 1064);
  int v8 = *(_DWORD *)(a1 + 1068);
  uint64_t v9 = 144;
  if (*(_DWORD *)(a1 + 1080) > a2) {
    uint64_t v9 = 136;
  }
  uint64_t v10 = 112;
  if (*(_DWORD *)(a1 + 1080) > a2) {
    uint64_t v10 = 64;
  }
  uint64_t v11 = 128;
  if (*(_DWORD *)(a1 + 1080) > a2) {
    uint64_t v11 = 80;
  }
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a1 + v9);
  if (*(_DWORD *)(a1 + 2012)) {
    int v14 = a2;
  }
  else {
    int v14 = v6;
  }
  uint64_t v15 = v13 + 12 * v14;
  uint64_t v16 = 2 * v14;
  BOOL v17 = (__int16 *)(*(void *)(a1 + v10) + v16);
  uint64_t v18 = *(void *)(a1 + 1552);
  int v19 = *(_DWORD *)v18 & 0xF000F;
  int v20 = (*(_DWORD *)v18 >> 4) & 0xF000F;
  int v21 = (*(_DWORD *)v18 >> 8) & 0xF000F;
  int v22 = (*(_DWORD *)v18 >> 12) & 0xF000F;
  int8x8_t v23 = *(int8x8_t *)(v18 + 4);
  int8x8_t v24 = (int8x8_t)vshr_n_u32((uint32x2_t)v23, 4uLL);
  int8x8_t v25 = (int8x8_t)vshr_n_u32((uint32x2_t)v23, 8uLL);
  int8x8_t v26 = (int8x8_t)vshr_n_u32((uint32x2_t)v23, 0xCuLL);
  int32x2_t v27 = (int32x2_t)vand_s8(v23, (int8x8_t)0xF000F000F000FLL);
  int32x2_t v28 = (int32x2_t)vand_s8(v24, (int8x8_t)0xF000F000F000FLL);
  int32x2_t v29 = (int32x2_t)vand_s8(v25, (int8x8_t)0xF000F000F000FLL);
  int32x2_t v30 = (int32x2_t)vand_s8(v26, (int8x8_t)0xF000F000F000FLL);
  int v31 = (v44 >> 1) + 1;
  int32x2_t v32 = (__int16 *)(v16 + v12 + 2);
  int v33 = 0x40000000;
  do
  {
    signed int v36 = *v17
        - (((*(_DWORD *)v15 & 0xF000F) * v19
          + ((*(_DWORD *)v15 >> 4) & 0xF000F) * v20
          + ((*(_DWORD *)v15 >> 8) & 0xF000F) * v21
          + ((*(_DWORD *)v15 >> 12) & 0xF000Fu) * v22) >> 15);
    if (v36 <= v7)
    {
      uint32x2_t v38 = (uint32x2_t)vmla_s32(vmla_s32(vmla_s32(vmul_s32((int32x2_t)vand_s8(*(int8x8_t *)(v15 + 4), (int8x8_t)0xF000F000F000FLL), v27), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)(v15 + 4), 4uLL), (int8x8_t)0xF000F000F000FLL), v28), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)(v15 + 4), 8uLL), (int8x8_t)0xF000F000F000FLL), v29), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)(v15 + 4), 0xCuLL), (int8x8_t)0xF000F000F000FLL), v30);
      signed __int32 v37 = v36
          + *(v32 - 1)
          - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v38, 0xFuLL), 1), v38, 0xFuLL).u32[0];
    }
    else
    {
      signed __int32 v37 = v36 + v8;
    }
    if (v37 < v33) {
      int v33 = v37;
    }
    signed int v39 = v17[1]
        - (((*(_DWORD *)(v15 + 12) & 0xF000F) * v19
          + ((*(_DWORD *)(v15 + 12) >> 4) & 0xF000F) * v20
          + ((*(_DWORD *)(v15 + 12) >> 8) & 0xF000F) * v21
          + ((*(_DWORD *)(v15 + 12) >> 12) & 0xF000Fu) * v22) >> 15);
    if (v39 <= v7)
    {
      uint32x2_t v34 = (uint32x2_t)vmla_s32(vmla_s32(vmla_s32(vmul_s32((int32x2_t)vand_s8(*(int8x8_t *)(v15 + 16), (int8x8_t)0xF000F000F000FLL), v27), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)(v15 + 16), 4uLL), (int8x8_t)0xF000F000F000FLL), v28), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)(v15 + 16), 8uLL), (int8x8_t)0xF000F000F000FLL), v29), (int32x2_t)vand_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)(v15 + 16), 0xCuLL), (int8x8_t)0xF000F000F000FLL), v30);
      signed __int32 v35 = v39
          + *v32
          - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v34, 0xFuLL), 1), v34, 0xFuLL).u32[0];
    }
    else
    {
      signed __int32 v35 = v39 + v8;
    }
    if (v35 < v33) {
      int v33 = v35;
    }
    --v31;
    v32 += 2;
    v15 += 24;
    v17 += 2;
  }
  while (v31 > 1);
  return (__int16)(((*(_DWORD *)(a1 + 1568) + v33) * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_10001B884(uint64_t result, uint8x8_t a2)
{
  unint64_t v2 = *(void *)(result + 632);
  BOOL v3 = *(uint32x4_t **)(result + 536);
  unint64_t v4 = *(void *)(result + 552);
  int v5 = *(__int32 **)(result + 1544);
  a2.i32[0] = *v5;
  uint16x4_t v6 = (uint16x4_t)vmovl_u8(a2).u64[0];
  int32x4_t v7 = (int32x4_t)vmull_u16(v6, v6);
  **(_WORD **)(result + 568) = vaddvq_s32(v7);
  v7.i32[0] = v5[1];
  v7.i64[0] = vmovl_u8(*(uint8x8_t *)v7.i8).u64[0];
  int32x4_t v8 = (int32x4_t)vmull_u16(*(uint16x4_t *)v7.i8, *(uint16x4_t *)v7.i8);
  *(_WORD *)(*(void *)(result + 568) + 2) = vaddvq_s32(v8);
  v8.i32[0] = v5[2];
  v8.i64[0] = vmovl_u8(*(uint8x8_t *)v8.i8).u64[0];
  int32x4_t v9 = (int32x4_t)vmull_u16(*(uint16x4_t *)v8.i8, *(uint16x4_t *)v8.i8);
  *(_WORD *)(*(void *)(result + 568) + 4) = vaddvq_s32(v9);
  v9.i32[0] = v5[3];
  v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
  int32x4_t v10 = (int32x4_t)vmull_u16(*(uint16x4_t *)v9.i8, *(uint16x4_t *)v9.i8);
  *(_WORD *)(*(void *)(result + 568) + 6) = vaddvq_s32(v10);
  v10.i32[0] = v5[4];
  v10.i64[0] = vmovl_u8(*(uint8x8_t *)v10.i8).u64[0];
  int32x4_t v11 = (int32x4_t)vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)v10.i8);
  *(_WORD *)(*(void *)(result + 568) + 8) = vaddvq_s32(v11);
  v11.i32[0] = v5[5];
  v11.i64[0] = vmovl_u8(*(uint8x8_t *)v11.i8).u64[0];
  *(_WORD *)(*(void *)(result + 568) + 10) = vaddvq_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v11.i8, *(uint16x4_t *)v11.i8));
  uint64_t v12 = *(_DWORD **)(result + 1552);
  unsigned int v13 = **(unsigned __int16 **)(result + 568);
  unsigned int v14 = *v12 & 0xFF00FF;
  unsigned int v15 = (*v12 >> 8) & 0xFF00FF;
  unint64_t v16 = v2 + 512;
  unint64_t v17 = (unint64_t)&v3[64];
  unint64_t v18 = v4 + 512;
  BOOL v20 = v2 < v4 + 512 && v4 < v16;
  BOOL v21 = (unint64_t)v3 >= v16 || v2 >= v17;
  if (!v21 || v20)
  {
    uint64_t v28 = 0;
    do
    {
      unsigned __int32 v29 = v3->i32[0];
      BOOL v3 = (uint32x4_t *)((char *)v3 + 4);
      *(_WORD *)(v2 + v28) = *(_WORD *)(v4 + v28)
                           + v13
                           - (((v29 & 0xFF00FF) * v14 + ((v29 >> 8) & 0xFF00FF) * v15) >> 15);
      v28 += 2;
    }
    while (v28 != 512);
    unint64_t v18 = v4 + v28;
    unint64_t v16 = v2 + v28;
  }
  else
  {
    uint64_t v22 = 0;
    uint32x4_t v23 = (uint32x4_t)vdupq_n_s32(v13);
    int32x4_t v24 = vdupq_n_s32(v14);
    int32x4_t v25 = vdupq_n_s32(v15);
    do
    {
      uint32x4_t v26 = *v3;
      uint32x4_t v27 = v3[1];
      v3 += 2;
      *(int16x8_t *)(v2 + v22) = vuzp1q_s16((int16x8_t)vsubq_s32((int32x4_t)vaddw_u16(v23, *(uint16x4_t *)(v4 + v22)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v26 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v24), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v26, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v25), 0xFuLL)), (int16x8_t)vsubq_s32((int32x4_t)vaddw_high_u16(v23, *(uint16x8_t *)(v4 + v22)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v27 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v24),
                                                                           (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v27, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v25), 0xFuLL)));
      v22 += 16;
    }
    while (v22 != 512);
    BOOL v3 = (uint32x4_t *)v17;
  }
  unsigned int v30 = v12[1];
  unsigned int v31 = *(unsigned __int16 *)(*(void *)(result + 568) + 2);
  unsigned int v32 = v30 & 0xFF00FF;
  unsigned int v33 = (v30 >> 8) & 0xFF00FF;
  unint64_t v34 = v16 + 512;
  unint64_t v35 = (unint64_t)&v3[64];
  unint64_t v36 = v18 + 512;
  BOOL v38 = v16 < v18 + 512 && v18 < v34;
  BOOL v39 = (unint64_t)v3 >= v34 || v16 >= v35;
  if (!v39 || v38)
  {
    uint64_t v46 = 0;
    do
    {
      unsigned __int32 v47 = v3->i32[0];
      BOOL v3 = (uint32x4_t *)((char *)v3 + 4);
      *(_WORD *)(v16 + v46) = *(_WORD *)(v18 + v46)
                            + v31
                            - (((v47 & 0xFF00FF) * v32 + ((v47 >> 8) & 0xFF00FF) * v33) >> 15);
      v46 += 2;
    }
    while (v46 != 512);
    unint64_t v36 = v18 + v46;
    unint64_t v34 = v16 + v46;
  }
  else
  {
    uint64_t v40 = 0;
    uint32x4_t v41 = (uint32x4_t)vdupq_n_s32(v31);
    int32x4_t v42 = vdupq_n_s32(v32);
    int32x4_t v43 = vdupq_n_s32(v33);
    do
    {
      uint32x4_t v44 = *v3;
      uint32x4_t v45 = v3[1];
      v3 += 2;
      *(int16x8_t *)(v16 + v40) = vuzp1q_s16((int16x8_t)vsubq_s32((int32x4_t)vaddw_u16(v41, *(uint16x4_t *)(v18 + v40)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v44 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v42), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v44, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v43), 0xFuLL)), (int16x8_t)vsubq_s32((int32x4_t)vaddw_high_u16(v41, *(uint16x8_t *)(v18 + v40)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v45 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v42), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v45, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v43),
                                                              0xFuLL)));
      v40 += 16;
    }
    while (v40 != 512);
    BOOL v3 = (uint32x4_t *)v35;
  }
  unsigned int v48 = v12[2];
  unsigned int v49 = *(unsigned __int16 *)(*(void *)(result + 568) + 4);
  unsigned int v50 = v48 & 0xFF00FF;
  unsigned int v51 = (v48 >> 8) & 0xFF00FF;
  unint64_t v52 = v34 + 512;
  unint64_t v53 = (unint64_t)&v3[64];
  unint64_t v54 = v36 + 512;
  BOOL v56 = v34 < v36 + 512 && v36 < v52;
  BOOL v57 = (unint64_t)v3 >= v52 || v34 >= v53;
  if (!v57 || v56)
  {
    uint64_t v64 = 0;
    do
    {
      unsigned __int32 v65 = v3->i32[0];
      BOOL v3 = (uint32x4_t *)((char *)v3 + 4);
      *(_WORD *)(v34 + v64) = *(_WORD *)(v36 + v64)
                            + v49
                            - (((v65 & 0xFF00FF) * v50 + ((v65 >> 8) & 0xFF00FF) * v51) >> 15);
      v64 += 2;
    }
    while (v64 != 512);
    unint64_t v54 = v36 + v64;
    unint64_t v52 = v34 + v64;
  }
  else
  {
    uint64_t v58 = 0;
    uint32x4_t v59 = (uint32x4_t)vdupq_n_s32(v49);
    int32x4_t v60 = vdupq_n_s32(v50);
    int32x4_t v61 = vdupq_n_s32(v51);
    do
    {
      uint32x4_t v62 = *v3;
      uint32x4_t v63 = v3[1];
      v3 += 2;
      *(int16x8_t *)(v34 + v58) = vuzp1q_s16((int16x8_t)vsubq_s32((int32x4_t)vaddw_u16(v59, *(uint16x4_t *)(v36 + v58)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v62 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v60), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v62, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v61), 0xFuLL)), (int16x8_t)vsubq_s32((int32x4_t)vaddw_high_u16(v59, *(uint16x8_t *)(v36 + v58)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v63 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v60), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v63, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v61),
                                                              0xFuLL)));
      v58 += 16;
    }
    while (v58 != 512);
    BOOL v3 = (uint32x4_t *)v53;
  }
  unsigned int v66 = v12[3];
  unsigned int v67 = *(unsigned __int16 *)(*(void *)(result + 568) + 6);
  unsigned int v68 = v66 & 0xFF00FF;
  unsigned int v69 = (v66 >> 8) & 0xFF00FF;
  unint64_t v70 = v52 + 512;
  unint64_t v71 = (unint64_t)&v3[64];
  unint64_t v72 = v54 + 512;
  BOOL v74 = v52 < v54 + 512 && v54 < v70;
  BOOL v75 = (unint64_t)v3 >= v70 || v52 >= v71;
  if (!v75 || v74)
  {
    uint64_t v82 = 0;
    do
    {
      unsigned __int32 v83 = v3->i32[0];
      BOOL v3 = (uint32x4_t *)((char *)v3 + 4);
      *(_WORD *)(v52 + v82) = *(_WORD *)(v54 + v82)
                            + v67
                            - (((v83 & 0xFF00FF) * v68 + ((v83 >> 8) & 0xFF00FF) * v69) >> 15);
      v82 += 2;
    }
    while (v82 != 512);
    unint64_t v72 = v54 + v82;
    unint64_t v70 = v52 + v82;
  }
  else
  {
    uint64_t v76 = 0;
    uint32x4_t v77 = (uint32x4_t)vdupq_n_s32(v67);
    int32x4_t v78 = vdupq_n_s32(v68);
    int32x4_t v79 = vdupq_n_s32(v69);
    do
    {
      uint32x4_t v80 = *v3;
      uint32x4_t v81 = v3[1];
      v3 += 2;
      *(int16x8_t *)(v52 + v76) = vuzp1q_s16((int16x8_t)vsubq_s32((int32x4_t)vaddw_u16(v77, *(uint16x4_t *)(v54 + v76)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v80 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v78), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v80, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v79), 0xFuLL)), (int16x8_t)vsubq_s32((int32x4_t)vaddw_high_u16(v77, *(uint16x8_t *)(v54 + v76)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v81 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v78), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v81, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v79),
                                                              0xFuLL)));
      v76 += 16;
    }
    while (v76 != 512);
    BOOL v3 = (uint32x4_t *)v71;
  }
  unsigned int v84 = v12[4];
  unsigned int v85 = *(unsigned __int16 *)(*(void *)(result + 568) + 8);
  unsigned int v86 = v84 & 0xFF00FF;
  unsigned int v87 = (v84 >> 8) & 0xFF00FF;
  unint64_t v88 = v70 + 512;
  unint64_t v89 = (unint64_t)&v3[64];
  unint64_t v90 = v72 + 512;
  BOOL v92 = v70 < v72 + 512 && v72 < v88;
  BOOL v93 = (unint64_t)v3 >= v88 || v70 >= v89;
  if (!v93 || v92)
  {
    uint64_t v100 = 0;
    do
    {
      unsigned __int32 v101 = v3->i32[0];
      BOOL v3 = (uint32x4_t *)((char *)v3 + 4);
      *(_WORD *)(v70 + v100) = *(_WORD *)(v72 + v100)
                             + v85
                             - (((v101 & 0xFF00FF) * v86 + ((v101 >> 8) & 0xFF00FF) * v87) >> 15);
      v100 += 2;
    }
    while (v100 != 512);
    unint64_t v90 = v72 + v100;
    unint64_t v88 = v70 + v100;
  }
  else
  {
    uint64_t v94 = 0;
    uint32x4_t v95 = (uint32x4_t)vdupq_n_s32(v85);
    int32x4_t v96 = vdupq_n_s32(v86);
    int32x4_t v97 = vdupq_n_s32(v87);
    do
    {
      uint32x4_t v98 = *v3;
      uint32x4_t v99 = v3[1];
      v3 += 2;
      *(int16x8_t *)(v70 + v94) = vuzp1q_s16((int16x8_t)vsubq_s32((int32x4_t)vaddw_u16(v95, *(uint16x4_t *)(v72 + v94)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v98 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v96), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v98, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v97), 0xFuLL)), (int16x8_t)vsubq_s32((int32x4_t)vaddw_high_u16(v95, *(uint16x8_t *)(v72 + v94)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v99 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v96), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v99, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v97),
                                                              0xFuLL)));
      v94 += 16;
    }
    while (v94 != 512);
    BOOL v3 = (uint32x4_t *)v89;
  }
  unsigned int v102 = v12[5];
  unsigned int v103 = *(unsigned __int16 *)(*(void *)(result + 568) + 10);
  unsigned int v104 = v102 & 0xFF00FF;
  unsigned int v105 = (v102 >> 8) & 0xFF00FF;
  unint64_t v106 = v88 + 512;
  BOOL v108 = v88 < v90 + 512 && v90 < v106;
  BOOL v109 = (unint64_t)v3 >= v106 || v88 >= (unint64_t)&v3[64];
  if (!v109 || v108)
  {
    uint64_t v116 = 0;
    do
    {
      uint32x2_t result = *(unsigned __int16 *)(v90 + 2 * v116) + v103;
      *(_WORD *)(v88 + 2 * v116) = *(_WORD *)(v90 + 2 * v116)
                                 + v103
                                 - (((v3->i32[v116] & 0xFF00FF) * v104
                                   + (((unsigned __int32)v3->i32[v116] >> 8) & 0xFF00FF) * v105) >> 15);
      ++v116;
    }
    while (v116 != 256);
  }
  else
  {
    uint64_t v110 = 0;
    uint32x4_t v111 = (uint32x4_t)vdupq_n_s32(v103);
    int32x4_t v112 = vdupq_n_s32(v104);
    int32x4_t v113 = vdupq_n_s32(v105);
    do
    {
      uint32x4_t v114 = *v3;
      uint32x4_t v115 = v3[1];
      v3 += 2;
      *(int16x8_t *)(v88 + v110) = vuzp1q_s16((int16x8_t)vsubq_s32((int32x4_t)vaddw_u16(v111, *(uint16x4_t *)(v90 + v110)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v114 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v112), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v114, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v113), 0xFuLL)), (int16x8_t)vsubq_s32((int32x4_t)vaddw_high_u16(v111, *(uint16x8_t *)(v90 + v110)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)(*(_OWORD *)&v115 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), v112), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v115, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v113),
                                                               0xFuLL)));
      v110 += 16;
    }
    while (v110 != 512);
  }
  return result;
}

uint64_t sub_10001BECC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 616);
  uint64_t v3 = *(int *)(a1 + 576);
  uint64_t v4 = *(void *)(a1 + 632);
  signed int v5 = *(_DWORD *)(a1 + 736);
  uint16x4_t v6 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
  int v7 = *v6;
  if (*(_DWORD *)(a1 + 1072) > (signed int)a2)
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      int32x4_t v8 = (_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
      int v9 = v8[1] - *v8;
      if (v9 >= 1) {
        goto LABEL_4;
      }
    }
    else
    {
      int v9 = v6[1] - v7;
      if (v9 >= 1)
      {
LABEL_4:
        uint64_t v10 = *(unsigned int *)(a1 + 576);
        int v11 = v9 - 1;
        if ((int)v3 > 0) {
          goto LABEL_5;
        }
        goto LABEL_15;
      }
    }
    int v14 = 0x40000000;
    goto LABEL_43;
  }
  int v9 = 1;
  uint64_t v10 = *(unsigned int *)(a1 + 576);
  int v11 = 0;
  if ((int)v3 > 0)
  {
LABEL_5:
    uint64_t v12 = *(void *)(a1 + 640) + (int)v3 * (uint64_t)v7;
    if (v3 == 1)
    {
      uint64_t v13 = v10 + 1;
      int v14 = 0x40000000;
      do
      {
        uint64_t v15 = v13;
        int v16 = *(_DWORD *)(a1 + 736);
        do
        {
          v16 += *(unsigned __int16 *)(v4
                                     + 2
                                     * (*(_DWORD *)(v2 + 4 * (v15 - 2))
                                      + *(unsigned __int8 *)(v12 + (v15 - 2))));
          --v15;
        }
        while (v15 > 1);
        if (v16 < v14) {
          int v14 = v16;
        }
        v12 += v3;
        BOOL v17 = v11-- <= 0;
      }
      while (!v17);
    }
    else if ((unint64_t)(v10 - 1) >> 32)
    {
      uint64_t v28 = v10 + 1;
      int v14 = 0x40000000;
      do
      {
        uint64_t v29 = v28;
        int v30 = *(_DWORD *)(a1 + 736);
        do
        {
          v30 += *(unsigned __int16 *)(v4
                                     + 2
                                     * (*(_DWORD *)(v2 + 4 * (v29 - 2))
                                      + *(unsigned __int8 *)(v12 + (v29 - 2))));
          --v29;
        }
        while (v29 > 1);
        if (v30 < v14) {
          int v14 = v30;
        }
        v12 += v3;
        BOOL v17 = v11-- <= 0;
      }
      while (!v17);
    }
    else
    {
      int v14 = 0x40000000;
      do
      {
        int v18 = 0;
        uint64_t v19 = v10 + 4294967294;
        uint64_t v20 = v10 & 0xFFFFFFFE;
        int v21 = *(_DWORD *)(a1 + 736);
        do
        {
          v21 += *(unsigned __int16 *)(v4
                                     + 2
                                     * (*(_DWORD *)(v2 + 4 * (v19 + 1))
                                      + *(unsigned __int8 *)(v12 + (v19 + 1))));
          v18 += *(unsigned __int16 *)(v4
                                     + 2
                                     * (*(_DWORD *)(v2 + 4 * v19)
                                      + *(unsigned __int8 *)(v12 + v19)));
          v19 -= 2;
          v20 -= 2;
        }
        while (v20);
        int v22 = v18 + v21;
        if ((v10 & 0xFFFFFFFE) != v10) {
          v22 += *(unsigned __int16 *)(v4
        }
                                     + 2
                                     * (*(_DWORD *)(v2 + 4 * ((v10 & 1) - 1))
                                      + *(unsigned __int8 *)(v12 + (v10 & 1) - 1)));
        if (v22 < v14) {
          int v14 = v22;
        }
        v12 += v3;
        BOOL v17 = v11-- <= 0;
      }
      while (!v17);
    }
    goto LABEL_43;
  }
LABEL_15:
  if (v9 >= 8)
  {
    v11 -= v9 & 0xFFFFFFF8;
    int32x4_t v23 = vdupq_n_s32(v5);
    v24.i64[0] = 0x4000000040000000;
    v24.i64[1] = 0x4000000040000000;
    unsigned int v25 = v9 & 0xFFFFFFF8;
    v26.i64[0] = 0x4000000040000000;
    v26.i64[1] = 0x4000000040000000;
    do
    {
      int32x4_t v24 = vminq_s32(v23, v24);
      int32x4_t v26 = vminq_s32(v23, v26);
      v25 -= 8;
    }
    while (v25);
    int v14 = vminvq_s32(vminq_s32(v24, v26));
    if (v9 == (v9 & 0x7FFFFFF8)) {
      goto LABEL_43;
    }
  }
  else
  {
    int v14 = 0x40000000;
  }
  int v27 = v11 + 1;
  do
  {
    if (v5 < v14) {
      int v14 = *(_DWORD *)(a1 + 736);
    }
    --v27;
  }
  while (v27);
LABEL_43:
  if (*(_DWORD *)(a1 + 1296) == 5)
  {
    unsigned int v31 = *(__int16 *)(a1 + 1136);
    unsigned int v32 = (__int16)((unint64_t)(*(int *)(a1 + 732) + *(int *)(a1 + 1052) * (uint64_t)v14) >> *(_DWORD *)(a1 + 728));
    if ((int)v31 >= (int)v32) {
      return v32;
    }
    else {
      return v31;
    }
  }
  else
  {
    unsigned int v34 = *(__int16 *)(a1 + 1136);
    unsigned int v35 = (__int16)(int)((double)v14 * *(double *)(a1 + 512) + 0.5);
    if ((int)v34 >= (int)v35) {
      return v35;
    }
    else {
      return v34;
    }
  }
}

uint64_t sub_10001C190(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2);
  unsigned int v4 = *v3;
  if (*(_DWORD *)(a1 + 1072) <= (signed int)a2)
  {
    int v6 = 1;
  }
  else if (*(_DWORD *)(a1 + 1176))
  {
    signed int v5 = (_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
    int v6 = v5[1] - *v5;
    if (v6 < 1) {
      goto LABEL_12;
    }
  }
  else
  {
    int v6 = v3[1] - v4;
    if (v6 < 1)
    {
LABEL_12:
      int v9 = 0x40000000;
      goto LABEL_13;
    }
  }
  int v7 = (unsigned __int8 *)(*(void *)(a1 + 640) + 6 * v4);
  unsigned int v8 = v6 + 1;
  int v9 = 0x40000000;
  do
  {
    uint64_t v2 = *(void *)(a1 + 632);
    if (*(unsigned __int16 *)(v2 + 512 + 2 * v7[1])
       + *(unsigned __int16 *)(v2 + 2 * *v7)
       + *(unsigned __int16 *)(v2 + 1024 + 2 * v7[2])
       + *(unsigned __int16 *)(v2 + 1536 + 2 * v7[3])
       + *(unsigned __int16 *)(v2 + 2048 + 2 * v7[4])
       + *(unsigned __int16 *)(v2 + 2560 + 2 * v7[5]) < v9)
      int v9 = *(unsigned __int16 *)(v2 + 512 + 2 * v7[1])
         + *(unsigned __int16 *)(v2 + 2 * *v7)
         + *(unsigned __int16 *)(v2 + 1024 + 2 * v7[2])
         + *(unsigned __int16 *)(v2 + 1536 + 2 * v7[3])
         + *(unsigned __int16 *)(v2 + 2048 + 2 * v7[4])
         + *(unsigned __int16 *)(v2 + 2560 + 2 * v7[5]);
    --v8;
    v7 += 6;
  }
  while (v8 > 1);
LABEL_13:
  unsigned int v10 = (__int16)((unint64_t)(*(int *)(a1 + 732) + (*(int *)(a1 + 736) + (uint64_t)v9) * *(int *)(a1 + 1052)) >> *(_DWORD *)(a1 + 728));
  unsigned int v11 = *(__int16 *)(a1 + 1136);
  if ((int)v11 >= (int)v10) {
    return v10;
  }
  else {
    return v11;
  }
}

BOOL sub_10001C2A4(uint64_t a1, uint64_t a2, char *a3, int a4, int a5)
{
  int v7 = "bamp2";
  if (!a5) {
    int v7 = "bamp0";
  }
  if (a4) {
    unsigned int v8 = "bamp1";
  }
  else {
    unsigned int v8 = (char *)v7;
  }
  uint64_t v9 = sub_1000BFC50(a2, v8, a3);
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t v12 = *(void *)(a1 + 984);
    if ((!v12 || !*(void *)(v12 + 168))
      && !*(_DWORD *)(a1 + 2008)
      && (!*(_DWORD *)(a1 + 1004) || !*(void *)(a1 + 528)))
    {
      if (!sub_1000BFD58(v9, *(_DWORD *)(a1 + 2000), v10)) {
        goto LABEL_100;
      }
      if (*(_DWORD *)(a1 + 2000))
      {
        int v16 = *(_DWORD *)(a1 + 1120) * *(_DWORD *)(a1 + 1184);
        int v17 = *(_DWORD *)(a1 + 1032);
        if (*(_DWORD *)(a1 + 996))
        {
          if (v17)
          {
            if (*(_DWORD *)(a1 + 1760)) {
              int v18 = 0;
            }
            else {
              int v18 = *(_DWORD *)(a1 + 1184);
            }
            goto LABEL_23;
          }
        }
        else if (v17)
        {
          int v18 = 0;
LABEL_23:
          int v19 = v16 / 4;
          sub_1000C34DC(*(void *)(a1 + 152));
          int v21 = *(void **)(a1 + 152);
          if (v21) {
            unsigned int v22 = v19;
          }
          else {
            unsigned int v22 = 0;
          }
          if (!sub_1000BFDB0(v11, v21, v22, 4, v20)) {
            goto LABEL_100;
          }
          sub_1000C34DC(*(void *)(a1 + 72));
          int32x4_t v24 = *(void **)(a1 + 72);
          unsigned int v25 = v24 ? v18 : 0;
          if (!sub_1000BFDB0(v11, v24, v25, 2, v23)) {
            goto LABEL_100;
          }
          sub_1000C34DC(*(void *)(a1 + 88));
          int v27 = *(void **)(a1 + 88);
          unsigned int v28 = v27 ? v18 : 0;
          if (!sub_1000BFDB0(v11, v27, v28, 2, v26)) {
            goto LABEL_100;
          }
          sub_1000C34DC(*(void *)(a1 + 40));
          int v30 = *(void **)(a1 + 40);
          unsigned int v31 = v30 ? v18 : 0;
          if (!sub_1000BFDB0(v11, v30, v31, 4, v29)) {
            goto LABEL_100;
          }
          sub_1000C34DC(*(void *)(a1 + 56));
          unsigned int v33 = *(void **)(a1 + 56);
          unsigned int v34 = v33 ? v18 : 0;
          if (!sub_1000BFDB0(v11, v33, v34, 4, v32)) {
            goto LABEL_100;
          }
          goto LABEL_58;
        }
        if (*(_DWORD *)(a1 + 1036))
        {
          int v35 = *(_DWORD *)(a1 + 1180);
          int v36 = *(_DWORD *)(a1 + 1132);
          sub_1000C34DC(*(void *)(a1 + 168));
          BOOL v38 = *(void **)(a1 + 168);
          if (v38) {
            unsigned int v39 = *(_DWORD *)(a1 + 1180);
          }
          else {
            unsigned int v39 = 0;
          }
          if (!sub_1000BFDB0(v11, v38, v39, 4, v37)) {
            goto LABEL_100;
          }
          int v43 = v36 * v35;
          sub_1000C34DC(*(void *)(a1 + 200));
          uint32x4_t v45 = *(void **)(a1 + 200);
          unsigned int v46 = v45 ? v43 : 0;
          if (!sub_1000BFDB0(v11, v45, v46, 4, v44)) {
            goto LABEL_100;
          }
        }
        else
        {
          sub_1000C34DC(*(void *)(a1 + 24));
          uint32x4_t v41 = *(void **)(a1 + 24);
          if (v41) {
            unsigned int v42 = v16;
          }
          else {
            unsigned int v42 = 0;
          }
          if (!sub_1000BFDB0(v11, v41, v42, 1, v40)) {
            goto LABEL_100;
          }
        }
      }
LABEL_58:
      if (!*(_DWORD *)(a1 + 1024)) {
        goto LABEL_104;
      }
      int v47 = *(_DWORD *)(a1 + 776);
      int v48 = *(_DWORD *)(a1 + 1120);
      int v49 = *(_DWORD *)(a1 + 1128) * v47;
      int v50 = v47 >= -7 ? v47 + 7 : v47 + 14;
      int v51 = *(_DWORD *)(a1 + 752);
      int v53 = v51 + 8;
      BOOL v52 = v51 < -8;
      int v54 = v51 + 15;
      int v55 = v52 ? v54 : v53;
      sub_1000C34DC(*(void *)(a1 + 792));
      BOOL v57 = *(void **)(a1 + 792);
      unsigned int v58 = v57 ? v49 : 0;
      if (sub_1000BFDB0(v11, v57, v58, 4, v56))
      {
        int v59 = v48 * v47;
        sub_1000C34DC(*(void *)(a1 + 784));
        int32x4_t v61 = *(void **)(a1 + 784);
        unsigned int v62 = v61 ? v59 : 0;
        if (sub_1000BFDB0(v11, v61, v62, 1, v60))
        {
          sub_1000C34DC(*(void *)(a1 + 800));
          uint64_t v64 = *(void **)(a1 + 800);
          unsigned int v65 = v64 ? *(_DWORD *)(a1 + 776) : 0;
          if (sub_1000BFDB0(v11, v64, v65, 4, v63))
          {
            sub_1000C34DC(*(void *)(a1 + 808));
            unsigned int v67 = *(void **)(a1 + 808);
            unsigned int v68 = v67 ? *(_DWORD *)(a1 + 776) : 0;
            if (sub_1000BFDB0(v11, v67, v68, 4, v66))
            {
              sub_1000C34DC(*(void *)(a1 + 816));
              unint64_t v70 = *(void **)(a1 + 816);
              unsigned int v71 = v70 ? *(_DWORD *)(a1 + 776) : 0;
              if (sub_1000BFDB0(v11, v70, v71, 2, v69))
              {
                sub_1000C34DC(*(void *)(a1 + 824));
                unsigned int v73 = *(void **)(a1 + 824);
                unsigned int v74 = v73 ? *(_DWORD *)(a1 + 776) : 0;
                if (sub_1000BFDB0(v11, v73, v74, 2, v72))
                {
                  int v75 = v55 >> 3;
                  sub_1000C34DC(*(void *)(a1 + 760));
                  uint32x4_t v77 = *(void **)(a1 + 760);
                  unsigned int v78 = v77 ? v75 : 0;
                  if (sub_1000BFDB0(v11, v77, v78, 1, v76))
                  {
                    int v79 = v50 >> 3;
                    sub_1000C34DC(*(void *)(a1 + 768));
                    uint32x4_t v81 = *(void **)(a1 + 768);
                    unsigned int v82 = v81 ? v79 : 0;
                    if (sub_1000BFDB0(v11, v81, v82, 1, v80))
                    {
LABEL_104:
                      if (sub_1000BFD58(v11, *(_DWORD *)(a1 + 1992), v15)
                        && sub_1000BFD58(v11, *(_DWORD *)(a1 + 1996), v83))
                      {
                        BOOL v13 = sub_1000BFD58(v11, *(char *)(a1 + 292), v84);
LABEL_101:
                        sub_1000BFD14(v11);
                        return v13;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_100:
      BOOL v13 = 0;
      goto LABEL_101;
    }
  }
  return 0;
}

BOOL sub_10001C6B0(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v10 = "bamp2";
  if (!a5) {
    uint8x8_t v10 = "bamp0";
  }
  if (a4) {
    uint64_t v11 = "bamp1";
  }
  else {
    uint64_t v11 = (char *)v10;
  }
  uint64_t v12 = sub_1000BEC58(a2, v11, a3, a4, a5, a6, a7, a8);
  if (v12)
  {
    uint64_t v13 = (uint64_t)v12;
    uint64_t v14 = *(void *)(a1 + 984);
    if ((!v14 || !*(void *)(v14 + 168))
      && !*(_DWORD *)(a1 + 2008)
      && (!*(_DWORD *)(a1 + 1004) || !*(void *)(a1 + 528)))
    {
      if (!sub_1000BEE7C((uint64_t)v12, (_DWORD *)(a1 + 2000))) {
        goto LABEL_95;
      }
      if (*(_DWORD *)(a1 + 2000))
      {
        int v17 = *(_DWORD *)(a1 + 1120) * *(_DWORD *)(a1 + 1184);
        int v18 = *(_DWORD *)(a1 + 1032);
        if (*(_DWORD *)(a1 + 996))
        {
          if (v18)
          {
            if (*(_DWORD *)(a1 + 1760)) {
              int v19 = 0;
            }
            else {
              int v19 = *(_DWORD *)(a1 + 1184);
            }
LABEL_23:
            int v20 = v17 / 4;
            unsigned int v22 = (void **)(a1 + 152);
            uint64_t v21 = *(void *)(a1 + 152);
            if (v21)
            {
              sub_1000C34DC(v21);
              if (!sub_1000BEFCC(v13, *v22, v20, 4)) {
                goto LABEL_95;
              }
            }
            else
            {
              int v52 = 0;
              if (!sub_1000BF078(v13, 4, (uint64_t *)(a1 + 152), &v52)) {
                goto LABEL_95;
              }
              int v36 = *v22;
              if (*v22)
              {
                if (v52 != v20) {
                  goto LABEL_95;
                }
              }
              if (v36) {
                *(void *)(a1 + 136) = v36;
              }
            }
            int32x4_t v24 = (void **)(a1 + 72);
            uint64_t v23 = *(void *)(a1 + 72);
            if (v23)
            {
              sub_1000C34DC(v23);
              if (!sub_1000BEFCC(v13, *v24, v19, 2)) {
                goto LABEL_95;
              }
            }
            else
            {
              int v52 = 0;
              if (!sub_1000BF078(v13, 2, (uint64_t *)(a1 + 72), &v52)) {
                goto LABEL_95;
              }
              int v47 = *v24;
              if (*v24)
              {
                if (v52 != v19) {
                  goto LABEL_95;
                }
              }
              if (v47) {
                *(void *)(a1 + 64) = v47;
              }
            }
            uint8x8_t v26 = (void **)(a1 + 88);
            uint64_t v25 = *(void *)(a1 + 88);
            if (v25)
            {
              sub_1000C34DC(v25);
              if (!sub_1000BEFCC(v13, *v26, v19, 2)) {
                goto LABEL_95;
              }
            }
            else
            {
              int v52 = 0;
              if (!sub_1000BF078(v13, 2, (uint64_t *)(a1 + 88), &v52)) {
                goto LABEL_95;
              }
              int v48 = *v26;
              if (*v26)
              {
                if (v52 != v19) {
                  goto LABEL_95;
                }
              }
              if (v48) {
                *(void *)(a1 + 80) = v48;
              }
            }
            unsigned int v28 = (void **)(a1 + 40);
            uint64_t v27 = *(void *)(a1 + 40);
            if (v27)
            {
              sub_1000C34DC(v27);
              if (!sub_1000BEFCC(v13, *v28, v19, 4)) {
                goto LABEL_95;
              }
            }
            else
            {
              int v52 = 0;
              if (!sub_1000BF078(v13, 4, (uint64_t *)(a1 + 40), &v52)) {
                goto LABEL_95;
              }
              int v51 = *v28;
              if (*v28)
              {
                if (v52 != v19) {
                  goto LABEL_95;
                }
              }
              if (v51) {
                *(void *)(a1 + 32) = v51;
              }
            }
            int v30 = (void **)(a1 + 56);
            uint64_t v29 = *(void *)(a1 + 56);
            if (!v29)
            {
              int v52 = 0;
              if (!sub_1000BF078(v13, 4, (uint64_t *)(a1 + 56), &v52)) {
                goto LABEL_95;
              }
              unsigned int v31 = *v30;
              if (*v30)
              {
                if (v52 != v19) {
                  goto LABEL_95;
                }
              }
              if (v31) {
                *(void *)(a1 + 48) = v31;
              }
              goto LABEL_50;
            }
LABEL_41:
            sub_1000C34DC(v29);
            if (!sub_1000BEFCC(v13, *v30, v19, 4)) {
              goto LABEL_95;
            }
            goto LABEL_50;
          }
        }
        else if (v18)
        {
          int v19 = 0;
          goto LABEL_23;
        }
        if (!*(_DWORD *)(a1 + 1036))
        {
          BOOL v38 = (void **)(a1 + 24);
          uint64_t v37 = *(void *)(a1 + 24);
          if (v37)
          {
            sub_1000C34DC(v37);
            if (!sub_1000BEFCC(v13, *v38, v17, 1)) {
              goto LABEL_95;
            }
          }
          else
          {
            int v52 = 0;
            if (!sub_1000BF078(v13, 1, (uint64_t *)(a1 + 24), &v52)) {
              goto LABEL_95;
            }
            int v49 = *v38;
            if (*v38)
            {
              if (v52 != v17) {
                goto LABEL_95;
              }
            }
            if (v49) {
              *(void *)(a1 + 16) = v49;
            }
          }
          goto LABEL_50;
        }
        unsigned int v33 = (void *)(a1 + 168);
        uint64_t v32 = *(void *)(a1 + 168);
        int v34 = *(_DWORD *)(a1 + 1180);
        int v35 = *(_DWORD *)(a1 + 1132);
        if (v32)
        {
          sub_1000C34DC(v32);
          if (!sub_1000BEFCC(v13, *(void **)(a1 + 168), *(_DWORD *)(a1 + 1180), 4)) {
            goto LABEL_95;
          }
        }
        else
        {
          int v52 = 0;
          if (!sub_1000BF078(v13, 4, (uint64_t *)(a1 + 168), &v52)) {
            goto LABEL_95;
          }
          if (*v33)
          {
            if (v52 != *(_DWORD *)(a1 + 1180)) {
              goto LABEL_95;
            }
            *(void *)(a1 + 160) = *v33;
          }
        }
        int v19 = v35 * v34;
        int v30 = (void **)(a1 + 200);
        uint64_t v29 = *(void *)(a1 + 200);
        if (v29) {
          goto LABEL_41;
        }
        int v52 = 0;
        if (!sub_1000BF078(v13, 4, (uint64_t *)(a1 + 200), &v52)) {
          goto LABEL_95;
        }
        int v50 = *v30;
        if (*v30)
        {
          if (v52 != v19) {
            goto LABEL_95;
          }
        }
        if (v50) {
          *(void *)(a1 + 192) = v50;
        }
      }
LABEL_50:
      if (!*(_DWORD *)(a1 + 1024)) {
        goto LABEL_101;
      }
      int v39 = *(_DWORD *)(a1 + 776);
      int v40 = *(_DWORD *)(a1 + 1120);
      int v41 = v39 >= -7 ? v39 + 7 : v39 + 14;
      int v42 = *(_DWORD *)(a1 + 752);
      int v44 = v42 + 8;
      BOOL v43 = v42 < -8;
      int v45 = v42 + 15;
      int v46 = v43 ? v45 : v44;
      if (sub_1000BEFCC(v13, *(void **)(a1 + 792), *(_DWORD *)(a1 + 1128) * v39, 4)
        && sub_1000BEFCC(v13, *(void **)(a1 + 784), v40 * v39, 1)
        && sub_1000BEFCC(v13, *(void **)(a1 + 800), *(_DWORD *)(a1 + 776), 4)
        && sub_1000BEFCC(v13, *(void **)(a1 + 808), *(_DWORD *)(a1 + 776), 4)
        && sub_1000BEFCC(v13, *(void **)(a1 + 816), *(_DWORD *)(a1 + 776), 2)
        && sub_1000BEFCC(v13, *(void **)(a1 + 824), *(_DWORD *)(a1 + 776), 2)
        && sub_1000BEFCC(v13, *(void **)(a1 + 760), v46 >> 3, 1)
        && sub_1000BEFCC(v13, *(void **)(a1 + 768), v41 >> 3, 1))
      {
LABEL_101:
        if (sub_1000BEE7C(v13, (_DWORD *)(a1 + 1992)) && sub_1000BEECC(v13, (void *)(a1 + 1996)))
        {
          BOOL v15 = sub_1000BEF1C(v13, (unsigned char *)(a1 + 292)) != 0;
LABEL_96:
          sub_1000BED3C(v13);
          return v15;
        }
      }
LABEL_95:
      BOOL v15 = 0;
      goto LABEL_96;
    }
  }
  return 0;
}

void *sub_10001CC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (*(_DWORD *)(a1 + 752) - *(_DWORD *)(a1 + 1884));
  uint64_t v11 = sub_1000CD454(*(int *)(a1 + 1100), a2, a3, a4, a5, a6, a7, a8);
  if ((int)v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      int v19 = *(_DWORD *)(a1 + 1884);
      uint64_t v20 = *(void *)(a1 + 760);
      uint64_t v21 = (unsigned __int16)(v19 + i) >> 3;
      int v22 = *(unsigned __int8 *)(v20 + v21);
      int v23 = byte_1000F594C[(v19 + (int)i) & 7];
      if (*(unsigned __int8 *)(a2 + i) == 255 && (v23 & v22) != 0)
      {
        int v25 = *(_DWORD *)(a1 + 1096);
        if (v25 >= 1)
        {
          int v26 = 0;
          __int16 v27 = v19 + i;
          do
          {
            sub_10001CD50(a1, (unsigned __int16)(v26++ + *(_DWORD *)(a1 + 1072) + v25 * (v27 - *(_WORD *)(a1 + 1884))), 0, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
            int v25 = *(_DWORD *)(a1 + 1096);
          }
          while (v26 < v25);
          uint64_t v20 = *(void *)(a1 + 760);
          LOBYTE(v22) = *(unsigned char *)(v20 + v21);
        }
        *(unsigned char *)(v20 + v21) = v22 & ~(_BYTE)v23;
      }
    }
  }
  uint64_t v28 = *(int *)(a1 + 1100);
  return sub_1000CD4D0(v11, v28);
}

uint64_t sub_10001CD30(uint64_t a1, __int16 a2, __int16 a3)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 1072) + a3 + *(_DWORD *)(a1 + 1096) * (a2 - *(_WORD *)(a1 + 1884)));
}

uint64_t sub_10001CD50(uint64_t a1, unsigned int a2, int a3, uint64_t a4, double a5, double a6, int8x16_t a7, int8x16_t a8, int8x16_t a9, int8x16_t a10)
{
  *(unsigned char *)(*(void *)(a1 + 768) + ((unint64_t)(a2 - *(_DWORD *)(a1 + 1072)) >> 3)) |= byte_1000F594C[(a2 - *(_DWORD *)(a1 + 1072)) & 7];
  uint64_t result = sub_10000483C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  if (*(_DWORD *)(a1 + 1032))
  {
    int v46 = 0;
    sub_1000043BC(a1, a2, a3, (unint64_t *)&v46);
    int v14 = *v46 * *v46
        + v46[1] * v46[1]
        + v46[2] * v46[2]
        + v46[3] * v46[3]
        + v46[4] * v46[4]
        + v46[5] * v46[5]
        + v46[6] * v46[6]
        + v46[7] * v46[7];
    uint64_t v15 = *(unsigned int *)(a1 + 1100);
    if ((int)v15 < 9)
    {
      unsigned int v17 = 0;
LABEL_19:
      if (*(_DWORD *)(a1 + 1108))
      {
        int v44 = 0;
        int v45 = 0;
        uint64_t result = sub_10000519C(a1, a2, a3, &v45, &v44);
        if (*(_DWORD *)(a1 + 1044))
        {
          *int v45 = v14;
          *int v44 = v17;
        }
        else
        {
          *int v45 = v17 + v14;
        }
      }
      else
      {
        int v44 = 0;
        int v45 = 0;
        uint64_t result = sub_100005110(a1, a2, a3, &v45, &v44);
        if (*(_DWORD *)(a1 + 1044))
        {
          *(_DWORD *)int v45 = v14;
          *(_DWORD *)int v44 = v17;
        }
        else
        {
          *(_DWORD *)int v45 = v17 + v14;
        }
      }
      return result;
    }
    unint64_t v16 = v15 - 8;
    if ((unint64_t)(v15 - 8) < 8)
    {
      unsigned int v17 = 0;
      uint64_t v18 = 8;
      goto LABEL_17;
    }
    if (v16 >= 0x20)
    {
      int32x4_t v20 = 0uLL;
      unint64_t v19 = v16 & 0xFFFFFFFFFFFFFFE0;
      int32x4_t v21 = 0uLL;
      int v22 = (uint8x8_t *)(v46 + 24);
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      int32x4_t v24 = 0uLL;
      int32x4_t v25 = 0uLL;
      int32x4_t v26 = 0uLL;
      int32x4_t v27 = 0uLL;
      int32x4_t v28 = 0uLL;
      int32x4_t v29 = 0uLL;
      do
      {
        uint8x16_t v30 = *(uint8x16_t *)v22[-2].i8;
        uint16x8_t v31 = vmovl_u8(*(uint8x8_t *)v30.i8);
        uint16x8_t v32 = vmovl_high_u8(v30);
        uint16x8_t v33 = vmovl_u8(*v22);
        uint16x8_t v34 = vmovl_high_u8(*(uint8x16_t *)v22->i8);
        int32x4_t v25 = (int32x4_t)vmlal_high_u16((uint32x4_t)v25, v32, v32);
        int32x4_t v24 = (int32x4_t)vmlal_u16((uint32x4_t)v24, *(uint16x4_t *)v32.i8, *(uint16x4_t *)v32.i8);
        int32x4_t v21 = (int32x4_t)vmlal_high_u16((uint32x4_t)v21, v31, v31);
        int32x4_t v20 = (int32x4_t)vmlal_u16((uint32x4_t)v20, *(uint16x4_t *)v31.i8, *(uint16x4_t *)v31.i8);
        int32x4_t v29 = (int32x4_t)vmlal_high_u16((uint32x4_t)v29, v34, v34);
        int32x4_t v28 = (int32x4_t)vmlal_u16((uint32x4_t)v28, *(uint16x4_t *)v34.i8, *(uint16x4_t *)v34.i8);
        int32x4_t v27 = (int32x4_t)vmlal_high_u16((uint32x4_t)v27, v33, v33);
        int32x4_t v26 = (int32x4_t)vmlal_u16((uint32x4_t)v26, *(uint16x4_t *)v33.i8, *(uint16x4_t *)v33.i8);
        v22 += 4;
        v23 -= 32;
      }
      while (v23);
      unsigned int v17 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v26, v20), vaddq_s32(v28, v24)), vaddq_s32(vaddq_s32(v27, v21), vaddq_s32(v29, v25))));
      if (v16 == v19) {
        goto LABEL_19;
      }
      if ((v16 & 0x18) == 0)
      {
        uint64_t v18 = v19 | 8;
LABEL_17:
        int v41 = &v46[v18];
        uint64_t v42 = v15 - v18;
        do
        {
          int v43 = *v41++;
          v17 += v43 * v43;
          --v42;
        }
        while (v42);
        goto LABEL_19;
      }
    }
    else
    {
      unsigned int v17 = 0;
      unint64_t v19 = 0;
    }
    uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    int32x4_t v35 = 0uLL;
    int32x4_t v36 = (int32x4_t)v17;
    unint64_t v37 = v19 - (v16 & 0xFFFFFFFFFFFFFFF8);
    BOOL v38 = (uint8x8_t *)&v46[v19 + 8];
    do
    {
      uint8x8_t v39 = *v38++;
      uint16x8_t v40 = vmovl_u8(v39);
      int32x4_t v35 = (int32x4_t)vmlal_high_u16((uint32x4_t)v35, v40, v40);
      int32x4_t v36 = (int32x4_t)vmlal_u16((uint32x4_t)v36, *(uint16x4_t *)v40.i8, *(uint16x4_t *)v40.i8);
      v37 += 8;
    }
    while (v37);
    unsigned int v17 = vaddvq_s32(vaddq_s32(v36, v35));
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_10001D040(uint64_t a1)
{
  if (*(void *)(a1 + 784) || *(void *)(a1 + 792)) {
    return 1;
  }
  int v3 = *(_DWORD *)(a1 + 752);
  int v4 = *(_DWORD *)(a1 + 1884);
  int v5 = *(_DWORD *)(a1 + 1096);
  int v6 = v3 + 8;
  if (v3 < -8) {
    int v6 = v3 + 15;
  }
  uint64_t result = sub_1000C33A0((uint64_t)v6 >> 3);
  *(void *)(a1 + 760) = result;
  if (result)
  {
    uint64_t v7 = v5 * (uint64_t)(v3 - v4 + 1);
    int v8 = v7 + 7;
    if ((int)v7 < -7) {
      int v8 = v7 + 14;
    }
    uint64_t result = sub_1000C33A0((uint64_t)v8 >> 3);
    *(void *)(a1 + 768) = result;
    if (result)
    {
      *(_DWORD *)(a1 + 776) = v7;
      *(_OWORD *)(a1 + 800) = 0u;
      *(_OWORD *)(a1 + 816) = 0u;
      if (*(_DWORD *)(a1 + 1032))
      {
        uint64_t result = sub_1000C33A0(4 * *(_DWORD *)(a1 + 1128) * (int)v7);
        *(void *)(a1 + 792) = result;
        if (!result) {
          return result;
        }
        uint64_t v9 = (int)v7;
        if (*(_DWORD *)(a1 + 1108))
        {
          uint64_t v10 = 2 * (int)v7;
          uint64_t result = sub_1000C33A0(2 * v9);
          *(void *)(a1 + 816) = result;
          if (!result) {
            return result;
          }
          uint64_t v11 = (uint64_t *)(a1 + 824);
        }
        else
        {
          uint64_t v10 = 4 * (int)v7;
          uint64_t result = sub_1000C33A0(4 * v9);
          *(void *)(a1 + 800) = result;
          if (!result) {
            return result;
          }
          uint64_t v11 = (uint64_t *)(a1 + 808);
        }
        if (*(_DWORD *)(a1 + 1044))
        {
          uint64_t result = sub_1000C33A0(v10);
          *uint64_t v11 = result;
          if (!result) {
            return result;
          }
        }
        else
        {
          *uint64_t v11 = 0;
        }
      }
      else
      {
        uint64_t result = sub_1000C33A0(*(int *)(a1 + 1120) * v7);
        *(void *)(a1 + 784) = result;
        if (!result) {
          return result;
        }
      }
      return 1;
    }
  }
  return result;
}

double sub_10001D178(uint64_t a1)
{
  uint64_t v2 = (_OWORD *)(a1 + 800);
  sub_1000C321C(*(void *)(a1 + 800));
  sub_1000C321C(*(void *)(a1 + 816));
  if (*(_DWORD *)(a1 + 1044))
  {
    sub_1000C321C(*(void *)(a1 + 808));
    sub_1000C321C(*(void *)(a1 + 824));
  }
  sub_1000C321C(*(void *)(a1 + 784));
  sub_1000C321C(*(void *)(a1 + 792));
  sub_1000C321C(*(void *)(a1 + 768));
  sub_1000C321C(*(void *)(a1 + 760));
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  double result = 0.0;
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  return result;
}

uint64_t sub_10001D1F8(uint64_t result, uint64_t a2)
{
  if (qword_100101CC0)
  {
    int v2 = *(_DWORD *)(qword_100101CC0 + 592);
    uint64_t v3 = *(void *)(result + 1984);
    if (*(int *)(v3 + 8) < 1) {
      return result;
    }
  }
  else
  {
    int v2 = 0;
    uint64_t v3 = *(void *)(result + 1984);
    if (*(int *)(v3 + 8) < 1) {
      return result;
    }
  }
  uint64_t v4 = *(int *)(v3 + 12);
  int v5 = v4 - v2;
  if ((int)v4 >= 0) {
    int v6 = *(_DWORD *)(v3 + 12);
  }
  else {
    int v6 = v4 + 1;
  }
  int v7 = v6 >> 1;
  if ((int)v4 <= v2)
  {
    uint64_t v17 = 0;
    int v18 = v7 / v5;
    do
    {
      int v19 = *(unsigned __int8 *)(result + 1771);
      if (v18 < v19) {
        int v19 = v18;
      }
      if (v19 <= *(unsigned __int8 *)(result + 1770)) {
        LOBYTE(v19) = *(unsigned char *)(result + 1770);
      }
      *(unsigned char *)(*(void *)(v3 + 48) + v17++) = v19;
    }
    while (v17 < *(int *)(v3 + 8));
  }
  else
  {
    uint64_t v8 = v2;
    unint64_t v9 = v4 - v2;
    if (v9 > 1)
    {
      unint64_t v20 = v9 & 0xFFFFFFFFFFFFFFFELL;
      int64_t v21 = v9 - (v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v9 == (v9 & 0xFFFFFFFFFFFFFFFELL))
      {
        uint64_t v22 = a2 + 8 * v8 + 8;
        do
        {
          int v23 = 0;
          int v24 = 0;
          int32x4_t v25 = (void *)v22;
          unint64_t v26 = v20;
          do
          {
            v23 += *(unsigned __int8 *)(*(v25 - 1) + v21);
            v24 += *(unsigned __int8 *)(*v25 + v21);
            v25 += 2;
            v26 -= 2;
          }
          while (v26);
          int v27 = (v24 + v23 + v7) / v5;
          if (v27 >= *(unsigned __int8 *)(result + 1771)) {
            int v27 = *(unsigned __int8 *)(result + 1771);
          }
          if (v27 <= *(unsigned __int8 *)(result + 1770)) {
            LOBYTE(v27) = *(unsigned char *)(result + 1770);
          }
          *(unsigned char *)(*(void *)(v3 + 48) + v21++) = v27;
        }
        while (v21 < *(int *)(v3 + 8));
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = a2 + 8 * v8;
        uint8x16_t v30 = (void *)(v29 + 8);
        uint16x8_t v31 = (uint64_t *)(v29 + 16 * (v9 >> 1));
        do
        {
          int v32 = 0;
          int v33 = 0;
          uint16x8_t v34 = v30;
          unint64_t v35 = v20;
          do
          {
            v32 += *(unsigned __int8 *)(*(v34 - 1) + v28);
            v33 += *(unsigned __int8 *)(*v34 + v28);
            v34 += 2;
            v35 -= 2;
          }
          while (v35);
          int v36 = v33 + v32;
          int64_t v37 = v21;
          BOOL v38 = v31;
          do
          {
            uint64_t v39 = *v38++;
            v36 += *(unsigned __int8 *)(v39 + v28);
            --v37;
          }
          while (v37);
          int v40 = (v36 + v7) / v5;
          if (v40 >= *(unsigned __int8 *)(result + 1771)) {
            int v40 = *(unsigned __int8 *)(result + 1771);
          }
          if (v40 <= *(unsigned __int8 *)(result + 1770)) {
            LOBYTE(v40) = *(unsigned char *)(result + 1770);
          }
          *(unsigned char *)(*(void *)(v3 + 48) + v28++) = v40;
        }
        while (v28 < *(int *)(v3 + 8));
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (uint64_t *)(a2 + 8 * v8);
      do
      {
        int v12 = 0;
        double v13 = v11;
        unint64_t v14 = v9;
        do
        {
          uint64_t v15 = *v13++;
          v12 += *(unsigned __int8 *)(v15 + v10);
          --v14;
        }
        while (v14);
        int v16 = (v12 + v7) / v5;
        if (v16 >= *(unsigned __int8 *)(result + 1771)) {
          int v16 = *(unsigned __int8 *)(result + 1771);
        }
        if (v16 <= *(unsigned __int8 *)(result + 1770)) {
          LOBYTE(v16) = *(unsigned char *)(result + 1770);
        }
        *(unsigned char *)(*(void *)(v3 + 48) + v10++) = v16;
      }
      while (v10 < *(int *)(v3 + 8));
    }
  }
  return result;
}

uint64_t sub_10001D424(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 1984);
  int v3 = *(__int16 *)(*(void *)(v2 + 32) + 2 * a2);
  if (v3 == -1) {
    return 1;
  }
  uint64_t v4 = *(unsigned int *)(v2 + 8);
  if (*(_DWORD *)(v2 + 40)) {
    int v5 = 0;
  }
  else {
    int v5 = *(__int16 *)(*(void *)(v2 + 32) + 2 * a2);
  }
  unsigned int v6 = *(_DWORD *)(*(void *)(v2 + 72) + 4 * v5);
  if ((int)v4 >= 1)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    uint64_t v8 = *(void *)(v2 + 56) + (int)v4 * v3;
    uint64_t v9 = *(void *)(v2 + 64) + 2 * (int)v4 * v5;
    if (v4 < 8)
    {
      uint64_t v10 = *(unsigned int *)(v2 + 8);
      goto LABEL_20;
    }
    if (v4 >= 0x20)
    {
      uint64_t v12 = v4 & 0x7FFFFFE0;
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = (int32x4_t)v6;
      uint64_t v15 = v4 - 1;
      uint64_t v16 = v4 & 0xFFFFFFE0;
      int32x4_t v17 = 0uLL;
      int32x4_t v18 = 0uLL;
      int32x4_t v19 = 0uLL;
      int32x4_t v20 = 0uLL;
      int32x4_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      do
      {
        uint64_t v23 = v8 + v15;
        int8x16_t v24 = vrev64q_s8(*(int8x16_t *)(v23 - 15));
        uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v24, 8uLL);
        int8x16_t v26 = vrev64q_s8(*(int8x16_t *)(v23 - 31));
        uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v26, 8uLL);
        uint64_t v28 = v7 + v15;
        int8x16_t v29 = vrev64q_s8(*(int8x16_t *)(v28 - 15));
        uint8x16_t v30 = (uint8x16_t)vextq_s8(v29, v29, 8uLL);
        int8x16_t v31 = vrev64q_s8(*(int8x16_t *)(v28 - 31));
        uint8x16_t v32 = (uint8x16_t)vextq_s8(v31, v31, 8uLL);
        int16x8_t v33 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v30.i8);
        int16x8_t v34 = (int16x8_t)vsubl_high_u8(v25, v30);
        int16x8_t v35 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v32.i8);
        int16x8_t v36 = (int16x8_t)vsubl_high_u8(v27, v32);
        uint64_t v37 = v9 + 2 * v15;
        int8x16_t v38 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 14));
        uint16x8_t v39 = (uint16x8_t)vextq_s8(v38, v38, 8uLL);
        int8x16_t v40 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 30));
        uint16x8_t v41 = (uint16x8_t)vextq_s8(v40, v40, 8uLL);
        int8x16_t v42 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 46));
        uint16x8_t v43 = (uint16x8_t)vextq_s8(v42, v42, 8uLL);
        int8x16_t v44 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 62));
        uint16x8_t v45 = (uint16x8_t)vextq_s8(v44, v44, 8uLL);
        int32x4_t v18 = vmlaq_s32(v18, vmull_high_s16(v34, v34), (int32x4_t)vmovl_high_u16(v41));
        int32x4_t v17 = vmlaq_s32(v17, vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v34.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v41.i8));
        int32x4_t v13 = vmlaq_s32(v13, vmull_high_s16(v33, v33), (int32x4_t)vmovl_high_u16(v39));
        int32x4_t v14 = vmlaq_s32(v14, vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8));
        int32x4_t v22 = vmlaq_s32(v22, vmull_high_s16(v36, v36), (int32x4_t)vmovl_high_u16(v45));
        int32x4_t v21 = vmlaq_s32(v21, vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v45.i8));
        int32x4_t v20 = vmlaq_s32(v20, vmull_high_s16(v35, v35), (int32x4_t)vmovl_high_u16(v43));
        int32x4_t v19 = vmlaq_s32(v19, vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v35.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v43.i8));
        v15 -= 32;
        v16 -= 32;
      }
      while (v16);
      unsigned int v6 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
      if (v12 == v4) {
        goto LABEL_22;
      }
      if ((v4 & 0x18) == 0)
      {
        uint64_t v10 = v4 & 0x1F;
LABEL_20:
        unint64_t v53 = v10 + 1;
        do
        {
          uint64_t v54 = (v53 - 2);
          v6 += (*(unsigned __int8 *)(v8 + v54) - *(unsigned __int8 *)(v7 + v54))
              * (*(unsigned __int8 *)(v8 + v54) - *(unsigned __int8 *)(v7 + v54))
              * *(unsigned __int16 *)(v9 + 2 * v54);
          --v53;
        }
        while (v53 > 1);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v10 = v4 & 7;
    int32x4_t v46 = 0uLL;
    int32x4_t v47 = (int32x4_t)v6;
    uint64_t v48 = ~v12 + v4;
    uint64_t v49 = v12 - (v4 & 0xFFFFFFF8);
    do
    {
      int16x8_t v50 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(v8 - 7 + v48)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(v7 - 7 + v48)));
      int8x16_t v51 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v9 - 14 + 2 * v48));
      uint16x8_t v52 = (uint16x8_t)vextq_s8(v51, v51, 8uLL);
      int32x4_t v46 = vmlaq_s32(v46, vmull_high_s16(v50, v50), (int32x4_t)vmovl_high_u16(v52));
      int32x4_t v47 = vmlaq_s32(v47, vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v50.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8));
      v48 -= 8;
      v49 += 8;
    }
    while (v49);
    unsigned int v6 = vaddvq_s32(vaddq_s32(v47, v46));
    if ((v4 & 0x7FFFFFF8) != v4) {
      goto LABEL_20;
    }
  }
LABEL_22:
  int v55 = (int)((double)(int)v6 * *(double *)v2 + 0.5);
  if (*(__int16 *)(a1 + 1136) < v55) {
    LOWORD(v55) = *(_WORD *)(a1 + 1136);
  }
  return (__int16)v55;
}

uint64_t sub_10001D6D4(uint64_t result)
{
  if (*(int *)(result + 576) >= 1)
  {
    uint64_t v1 = 0;
    uint64_t v2 = *(void *)(result + 1544);
    uint64_t v3 = *(void *)(result + 1208);
    uint64_t v4 = *(uint8x8_t **)(result + 520);
    uint64_t v5 = *(void *)(result + 616);
    do
    {
      uint64_t v6 = 4 * v1++;
      uint64_t v7 = *(int *)(v5 + v6);
      if ((int)v7 < *(_DWORD *)(v5 + 4 * v1))
      {
        uint64_t v8 = *(void *)(result + 600);
        uint64_t v9 = *(int *)(v8 + v6);
        uint64_t v10 = *(int *)(v8 + 4 * v1);
        if ((int)v9 >= (int)v10)
        {
          do
          {
            *(_WORD *)(*(void *)(result + 632) + 2 * v7++) = 0;
            uint64_t v5 = *(void *)(result + 616);
          }
          while (v7 < *(int *)(v5 + 4 * v1));
        }
        else
        {
          unint64_t v11 = v10 - v9;
          if (v11 >= 0x20)
          {
            unint64_t v23 = v11 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v24 = (v11 & 0xFFFFFFFFFFFFFFE0) + v9;
            uint64_t v25 = 2 * v9;
            uint64_t v26 = v3 + 32 + 2 * v9;
            uint8x16_t v27 = (uint8x8_t *)(v2 + 16 + v9);
            uint64_t v28 = (unsigned __int8 *)(v2 + v24);
            int8x16_t v29 = (unsigned __int16 *)(v3 + v25 + (v11 >> 5 << 6));
            do
            {
              int32x4_t v31 = 0uLL;
              int32x4_t v32 = 0uLL;
              int16x8_t v33 = v4 + 2;
              uint64_t v4 = (uint8x8_t *)((char *)v4 + v23);
              int16x8_t v34 = v27;
              unint64_t v35 = v11 & 0xFFFFFFFFFFFFFFE0;
              int16x8_t v36 = (uint16x8_t *)v26;
              int32x4_t v37 = 0uLL;
              int32x4_t v38 = 0uLL;
              int32x4_t v39 = 0uLL;
              int32x4_t v40 = 0uLL;
              int32x4_t v41 = 0uLL;
              int32x4_t v42 = 0uLL;
              do
              {
                uint8x16_t v43 = *(uint8x16_t *)v33[-2].i8;
                uint8x16_t v44 = *(uint8x16_t *)v34[-2].i8;
                int16x8_t v45 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v44.i8);
                int16x8_t v46 = (int16x8_t)vsubl_high_u8(v43, v44);
                int16x8_t v47 = (int16x8_t)vsubl_u8(*v33, *v34);
                int16x8_t v48 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v33->i8, *(uint8x16_t *)v34->i8);
                uint16x8_t v49 = v36[-2];
                uint16x8_t v50 = v36[-1];
                uint16x8_t v51 = *v36;
                uint16x8_t v52 = v36[1];
                v36 += 4;
                int32x4_t v38 = vmlaq_s32(v38, vmull_high_s16(v46, v46), (int32x4_t)vmovl_high_u16(v50));
                int32x4_t v37 = vmlaq_s32(v37, vmull_s16(*(int16x4_t *)v46.i8, *(int16x4_t *)v46.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v50.i8));
                int32x4_t v32 = vmlaq_s32(v32, vmull_high_s16(v45, v45), (int32x4_t)vmovl_high_u16(v49));
                int32x4_t v31 = vmlaq_s32(v31, vmull_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v49.i8));
                int32x4_t v42 = vmlaq_s32(v42, vmull_high_s16(v48, v48), (int32x4_t)vmovl_high_u16(v52));
                int32x4_t v41 = vmlaq_s32(v41, vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v48.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8));
                int32x4_t v40 = vmlaq_s32(v40, vmull_high_s16(v47, v47), (int32x4_t)vmovl_high_u16(v51));
                int32x4_t v39 = vmlaq_s32(v39, vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v47.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v51.i8));
                v33 += 4;
                v34 += 4;
                v35 -= 32;
              }
              while (v35);
              unsigned int v30 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v39, v31), vaddq_s32(v41, v37)), vaddq_s32(vaddq_s32(v40, v32), vaddq_s32(v42, v38))));
              if (v11 != v23)
              {
                unint64_t v53 = v11 - (v11 & 0xFFFFFFFFFFFFFFE0);
                uint64_t v54 = v29;
                int v55 = v28;
                do
                {
                  int v57 = v4->u8[0];
                  uint64_t v4 = (uint8x8_t *)((char *)v4 + 1);
                  int v56 = v57;
                  int v58 = *v55++;
                  int v59 = (v56 - v58) * (v56 - v58);
                  int v60 = *v54++;
                  v30 += v59 * v60;
                  --v53;
                }
                while (v53);
              }
              if (v30 >= 0xFFFF) {
                LOWORD(v30) = -1;
              }
              *(_WORD *)(*(void *)(result + 632) + 2 * v7++) = v30;
              uint64_t v5 = *(void *)(result + 616);
            }
            while (v7 < *(int *)(v5 + 4 * v1));
          }
          else
          {
            uint64_t v12 = (unsigned __int16 *)(v3 + 2 * v9);
            int32x4_t v13 = (unsigned __int8 *)(v2 + v9);
            do
            {
              unsigned int v14 = 0;
              uint64_t v15 = v13;
              uint64_t v16 = v12;
              unint64_t v17 = v11;
              do
              {
                int v19 = v4->u8[0];
                uint64_t v4 = (uint8x8_t *)((char *)v4 + 1);
                int v18 = v19;
                int v20 = *v15++;
                int v21 = (v18 - v20) * (v18 - v20);
                int v22 = *v16++;
                v14 += v21 * v22;
                --v17;
              }
              while (v17);
              if (v14 >= 0xFFFF) {
                LOWORD(v14) = -1;
              }
              *(_WORD *)(*(void *)(result + 632) + 2 * v7++) = v14;
              uint64_t v5 = *(void *)(result + 616);
            }
            while (v7 < *(int *)(v5 + 4 * v1));
          }
        }
      }
    }
    while (v1 < *(int *)(result + 576));
  }
  return result;
}

void sub_10001D950(uint64_t a1)
{
  if (*(int *)(a1 + 576) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v56 = *(void *)(a1 + 1544);
    int v3 = **(_DWORD **)(a1 + 600);
    int v4 = **(_DWORD **)(a1 + 616);
    uint64_t v5 = *(void *)(a1 + 520);
    do
    {
      ++v2;
      int v6 = *(_DWORD *)(*(void *)(a1 + 600) + 4 * v2);
      int v7 = *(_DWORD *)(*(void *)(a1 + 616) + 4 * v2);
      uint64_t v8 = (v7 + ~v4);
      if (v7 + ~v4 >= 0)
      {
        uint64_t v9 = v3;
        uint64_t v10 = (v6 - v3);
        unint64_t v11 = (_WORD *)(*(void *)(a1 + 632) + 2 * v4);
        uint64_t v12 = (int)v10;
        if ((int)v10 > 0)
        {
          uint64_t v13 = v56 + v3;
          uint64_t v14 = (v6 + ~v3);
          if (v14 < 7)
          {
            do
            {
              unsigned int v15 = 0;
              uint64_t v16 = -1;
              do
              {
                v15 += (*(unsigned __int8 *)(v5 + (v10 + v16))
                      - *(unsigned __int8 *)(v13 + (v10 + v16)))
                     * (*(unsigned __int8 *)(v5 + (v10 + v16))
                      - *(unsigned __int8 *)(v13 + (v10 + v16)));
                --v16;
              }
              while ((int)v10 + (int)v16 + 2 > 1);
              if (v15 >= 0xFFFF) {
                LOWORD(v15) = -1;
              }
              *v11++ = v15;
              v5 += (int)v10;
              BOOL v17 = (int)v8 <= 0;
              LODWORD(v8) = v8 - 1;
            }
            while (!v17);
            goto LABEL_4;
          }
          uint64_t v18 = v14 + 1;
          uint64_t v19 = (v14 + 1) & 0x1FFFFFFF8;
          uint64_t v20 = v10 - 1;
          while (2)
          {
            if (v14 >= 0x1F)
            {
              int32x4_t v23 = 0uLL;
              uint64_t v24 = (v14 + 1) & 0x1FFFFFFE0;
              int32x4_t v25 = 0uLL;
              uint64_t v26 = v20;
              int32x4_t v27 = 0uLL;
              int32x4_t v28 = 0uLL;
              int32x4_t v29 = 0uLL;
              int32x4_t v30 = 0uLL;
              int32x4_t v31 = 0uLL;
              int32x4_t v32 = 0uLL;
              do
              {
                uint64_t v33 = v5 + v26;
                int8x16_t v34 = vrev64q_s8(*(int8x16_t *)(v33 - 15));
                uint8x16_t v35 = (uint8x16_t)vextq_s8(v34, v34, 8uLL);
                int8x16_t v36 = vrev64q_s8(*(int8x16_t *)(v33 - 31));
                uint8x16_t v37 = (uint8x16_t)vextq_s8(v36, v36, 8uLL);
                uint64_t v38 = v13 + v26;
                int8x16_t v39 = vrev64q_s8(*(int8x16_t *)(v38 - 15));
                uint8x16_t v40 = (uint8x16_t)vextq_s8(v39, v39, 8uLL);
                int8x16_t v41 = vrev64q_s8(*(int8x16_t *)(v38 - 31));
                uint8x16_t v42 = (uint8x16_t)vextq_s8(v41, v41, 8uLL);
                int16x8_t v43 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v40.i8);
                int16x8_t v44 = (int16x8_t)vsubl_high_u8(v35, v40);
                int16x8_t v45 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v42.i8);
                int16x8_t v46 = (int16x8_t)vsubl_high_u8(v37, v42);
                int32x4_t v28 = vmlal_high_s16(v28, v44, v44);
                int32x4_t v27 = vmlal_s16(v27, *(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8);
                int32x4_t v25 = vmlal_high_s16(v25, v43, v43);
                int32x4_t v23 = vmlal_s16(v23, *(int16x4_t *)v43.i8, *(int16x4_t *)v43.i8);
                int32x4_t v32 = vmlal_high_s16(v32, v46, v46);
                int32x4_t v31 = vmlal_s16(v31, *(int16x4_t *)v46.i8, *(int16x4_t *)v46.i8);
                int32x4_t v30 = vmlal_high_s16(v30, v45, v45);
                int32x4_t v29 = vmlal_s16(v29, *(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8);
                v26 -= 32;
                v24 -= 32;
              }
              while (v24);
              unsigned int v21 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v29, v23), vaddq_s32(v31, v27)), vaddq_s32(vaddq_s32(v30, v25), vaddq_s32(v32, v28))));
              if (v18 != ((v14 + 1) & 0x1FFFFFFE0))
              {
                uint64_t v22 = (v14 + 1) & 0x1FFFFFFE0;
                uint64_t v47 = v22;
                if (((v14 + 1) & 0x18) != 0) {
                  goto LABEL_25;
                }
                goto LABEL_28;
              }
            }
            else
            {
              unsigned int v21 = 0;
              uint64_t v22 = 0;
LABEL_25:
              int32x4_t v48 = 0uLL;
              int32x4_t v49 = (int32x4_t)v21;
              uint64_t v50 = v20 - v22;
              uint64_t v51 = v22 - v19;
              do
              {
                int16x8_t v52 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(v5 - 7 + v50)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(v13 - 7 + v50)));
                int32x4_t v48 = vmlal_high_s16(v48, v52, v52);
                int32x4_t v49 = vmlal_s16(v49, *(int16x4_t *)v52.i8, *(int16x4_t *)v52.i8);
                v50 -= 8;
                v51 += 8;
              }
              while (v51);
              unsigned int v21 = vaddvq_s32(vaddq_s32(v49, v48));
              uint64_t v47 = (v14 + 1) & 0x1FFFFFFF8;
              if (v18 != v19)
              {
LABEL_28:
                int v53 = v6 - v9 + 1 - v47;
                uint64_t v54 = v20 - v47;
                do
                {
                  int v55 = *(unsigned __int8 *)(v5 + v54) - *(unsigned __int8 *)(v13 + v54);
                  v21 += v55 * v55;
                  --v53;
                  --v54;
                }
                while (v53 > 1);
              }
            }
            if (v21 >= 0xFFFF) {
              LOWORD(v21) = -1;
            }
            *v11++ = v21;
            v5 += v12;
            BOOL v17 = (int)v8 <= 0;
            LODWORD(v8) = v8 - 1;
            if (v17) {
              goto LABEL_4;
            }
            continue;
          }
        }
        bzero(v11, 2 * (v7 - v4));
        v5 += v6 + v12 * v8 - v9;
      }
LABEL_4:
      int v3 = v6;
      int v4 = v7;
    }
    while (v2 < *(int *)(a1 + 576));
  }
}

uint64_t sub_10001DC68(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 576);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    int v4 = *(int **)(a1 + 616);
    int v5 = *v4;
    uint64_t v6 = *(void *)(a1 + 632);
    int v7 = *v4;
    while (1)
    {
      int v9 = v7;
      int v7 = v5;
      int v5 = v4[++v2];
      uint64_t v10 = (v5 + ~v7);
      if (v5 + ~v7 < 0)
      {
        int v8 = 0x40000000;
      }
      else
      {
        uint64_t v11 = (v5 - v7);
        if (v11 < 0x10)
        {
          int v8 = 0x40000000;
          uint64_t v12 = (v5 + ~v7);
LABEL_11:
          int v23 = v12 + 1;
          uint64_t v24 = (unsigned __int16 *)(v6 + 2 * v12 + 2 * v9);
          do
          {
            int v26 = *v24--;
            int v25 = v26;
            if (v8 >= v26) {
              int v8 = v25;
            }
            --v23;
          }
          while (v23 > 0);
          goto LABEL_4;
        }
        uint64_t v12 = v10 - (v11 & 0xFFFFFFF0);
        uint64_t v13 = (int16x8_t *)(v6 - 14 + 2 * v9 + 2 * v10);
        v14.i64[0] = 0x4000000040000000;
        v14.i64[1] = 0x4000000040000000;
        uint64_t v15 = v11 & 0xFFFFFFF0;
        v16.i64[0] = 0x4000000040000000;
        v16.i64[1] = 0x4000000040000000;
        v17.i64[0] = 0x4000000040000000;
        v17.i64[1] = 0x4000000040000000;
        v18.i64[0] = 0x4000000040000000;
        v18.i64[1] = 0x4000000040000000;
        do
        {
          int8x16_t v19 = (int8x16_t)vrev64q_s16(*v13);
          uint16x8_t v20 = (uint16x8_t)vextq_s8(v19, v19, 8uLL);
          int8x16_t v21 = (int8x16_t)vrev64q_s16(v13[-1]);
          uint16x8_t v22 = (uint16x8_t)vextq_s8(v21, v21, 8uLL);
          int32x4_t v16 = vminq_s32(v16, (int32x4_t)vmovl_high_u16(v20));
          int32x4_t v14 = vminq_s32(v14, (int32x4_t)vmovl_u16(*(uint16x4_t *)v20.i8));
          int32x4_t v18 = vminq_s32(v18, (int32x4_t)vmovl_high_u16(v22));
          int32x4_t v17 = vminq_s32(v17, (int32x4_t)vmovl_u16(*(uint16x4_t *)v22.i8));
          v13 -= 2;
          v15 -= 16;
        }
        while (v15);
        int v8 = vminvq_s32(vminq_s32(vminq_s32(v14, v17), vminq_s32(v16, v18)));
        if ((v11 & 0xFFFFFFF0) != v11) {
          goto LABEL_11;
        }
      }
LABEL_4:
      v3 += v8;
      if (v2 == v1) {
        goto LABEL_17;
      }
    }
  }
  int v3 = 0;
LABEL_17:
  if (*(_DWORD *)(a1 + 1296) == 5)
  {
    unsigned int v27 = *(__int16 *)(a1 + 1136);
    unsigned int v28 = (__int16)((unint64_t)(*(int *)(a1 + 732) + *(int *)(a1 + 1052) * (uint64_t)v3) >> *(_DWORD *)(a1 + 728));
    if ((int)v27 >= (int)v28) {
      return v28;
    }
    else {
      return v27;
    }
  }
  else
  {
    unsigned int v30 = *(__int16 *)(a1 + 1136);
    unsigned int v31 = (__int16)(int)((double)v3 * *(double *)(a1 + 8) + 0.5);
    if ((int)v30 >= (int)v31) {
      return v31;
    }
    else {
      return v30;
    }
  }
}

uint64_t sub_10001DDEC(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 576);
  int v4 = *(_DWORD *)(a1 + 1296);
  if (v4 == 5)
  {
    int v5 = 0;
    if ((int)v3 < 1) {
      goto LABEL_12;
    }
  }
  else
  {
    int v5 = **(_DWORD **)(a1 + 1240);
    if ((int)v3 < 1) {
      goto LABEL_12;
    }
  }
  uint64_t v6 = *(void *)(a1 + 632);
  int v7 = *(int **)(a1 + 616);
  uint64_t v8 = *(void *)(a1 + 640);
  uint64_t v9 = (*(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a2) + a3) * (int)v3;
  uint64_t v10 = (unsigned __int8 *)(v8 + v9);
  if (v3 == 1)
  {
    int v11 = 1;
  }
  else
  {
    int v12 = 0;
    int v11 = v3 - (v3 & 0xFFFFFFFE);
    v10 += v3 & 0xFFFFFFFE;
    uint64_t v13 = (unsigned __int8 *)(v9 + v8 + 1);
    int32x4_t v14 = v7 + 1;
    uint64_t v15 = v3 & 0xFFFFFFFE;
    v7 += v15;
    do
    {
      int v16 = *(v13 - 1);
      int v17 = *v13;
      v13 += 2;
      v5 += *(unsigned __int16 *)(v6 + 2 * (*(v14 - 1) + v16));
      v12 += *(unsigned __int16 *)(v6 + 2 * (*v14 + v17));
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    v5 += v12;
    if ((v3 & 0xFFFFFFFE) == v3) {
      goto LABEL_12;
    }
  }
  unsigned int v18 = v11 + 1;
  do
  {
    int v20 = *v7++;
    int v19 = v20;
    int v21 = *v10++;
    v5 += *(unsigned __int16 *)(v6 + 2 * (v19 + v21));
    --v18;
  }
  while (v18 > 1);
LABEL_12:
  if (v4 == 5)
  {
    unsigned int v22 = *(__int16 *)(a1 + 1136);
    unsigned int v23 = (__int16)((unint64_t)(*(int *)(a1 + 732) + *(int *)(a1 + 1052) * (uint64_t)v5) >> *(_DWORD *)(a1 + 728));
    if ((int)v22 >= (int)v23) {
      return v23;
    }
    else {
      return v22;
    }
  }
  else
  {
    unsigned int v25 = *(__int16 *)(a1 + 1136);
    unsigned int v26 = (__int16)(int)((double)v5 * *(double *)(a1 + 8) + 0.5);
    if ((int)v25 >= (int)v26) {
      return v26;
    }
    else {
      return v25;
    }
  }
}

uint64_t sub_10001DF2C(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 704);
  if (v1)
  {
    uint64_t v2 = result;
    sub_1000C321C(*v1);
    sub_1000C321C(*(void *)(*(void *)(v2 + 704) + 8));
    **(void **)(v2 + 704) = 0;
    *(void *)(*(void *)(v2 + 704) + 8) = 0;
    double result = sub_1000C321C(*(void *)(v2 + 704));
    *(void *)(v2 + 704) = 0;
  }
  return result;
}

uint64_t sub_10001DF84(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = 0;
  if (!a3 && qword_100101CC0) {
    int v4 = *(_DWORD *)(qword_100101CC0 + 944);
  }
  int v5 = *(uint64_t **)(a1 + 704);
  if (v5)
  {
    sub_1000C321C(*v5);
    sub_1000C321C(*(void *)(*(void *)(a1 + 704) + 8));
    **(void **)(a1 + 704) = 0;
    *(void *)(*(void *)(a1 + 704) + 8) = 0;
    sub_1000C321C(*(void *)(a1 + 704));
    *(void *)(a1 + 704) = 0;
  }
  uint64_t v6 = 4 * *(int *)(a1 + 576);
  uint64_t v7 = *(int *)(*(void *)(a1 + 616) + v6);
  uint64_t v8 = *(int *)(*(void *)(a1 + 584) + v6);
  uint64_t result = sub_1000C33A0(16);
  *(void *)(a1 + 704) = result;
  if (result)
  {
    *(void *)(*(void *)(a1 + 704) + 8) = sub_1000C33A0(2 * v8);
    if (*(void *)(*(void *)(a1 + 704) + 8) && (**(void **)(a1 + 704) = sub_1000C33A0(2 * v7)) != 0)
    {
      *(_DWORD *)(a1 + 712) = v4;
      if ((int)v7 >= 1)
      {
        uint64_t v10 = 0;
        int v11 = *(_DWORD *)(a1 + 1404) * v4;
        do
        {
          *(_WORD *)(**(void **)(a1 + 704) + v10) = v11;
          v10 += 2;
        }
        while (2 * v7 != v10);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10001E0B0(uint64_t a1, unsigned __int8 *a2, unsigned int a3, int a4, __int16 a5)
{
  int v5 = *(_DWORD *)(a1 + 576);
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(uint64_t **)(a1 + 704);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(a1 + 640) + v5 * (*(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * a3) + a4);
    do
    {
      uint64_t v11 = *(void *)(a1 + 600);
      uint64_t v12 = 4 * v6;
      uint64_t v13 = *(unsigned __int8 *)(v10 + v6++);
      int v14 = *(_DWORD *)(v11 + 4 * v6);
      int v15 = *(_DWORD *)(v11 + v12);
      uint64_t v16 = *(int *)(*(void *)(a1 + 616) + v12) + v13;
      int v17 = *(_DWORD *)(*(void *)(a1 + 584) + v12);
      uint64_t v18 = 2 * v16;
      int v19 = v14 - v15;
      __int16 v20 = *(_WORD *)(v8 + 2 * v16) + a5;
      *(_WORD *)(v8 + 2 * v16) = v20;
      unsigned __int16 v21 = v20 - 16385;
      if (v14 - v15 < 1)
      {
        if (v21 <= 0x7FFEu) {
          *(_WORD *)(v8 + 2 * v16) = (__int16)(v20 + ((unsigned __int16)(v20 & 0x8000) >> 15)) >> 1;
        }
        continue;
      }
      BOOL v22 = v21 < 0x7FFFu;
      uint64_t v23 = v17 + v19 * (int)v13;
      uint64_t v24 = v23;
      do
      {
        __int16 v25 = *a2++;
        __int16 v26 = *(_WORD *)(v9 + 2 * v24) + (v25 - *(unsigned __int8 *)(*(void *)(a1 + 520) + v24)) * a5;
        *(_WORD *)(v9 + 2 * v24) = v26;
        if ((unsigned __int16)(v26 - 16385) < 0x7FFFu) {
          BOOL v22 = 1;
        }
        ++v24;
        --v19;
      }
      while (v19);
      if (v22)
      {
        *(_WORD *)(v8 + v18) = (__int16)(*(_WORD *)(v8 + v18) + (*(_WORD *)(v8 + v18) >> 15)) >> 1;
        uint64_t v27 = (v14 + ~v15);
        if (v27 >= 7)
        {
          uint64_t v30 = v27 + 1;
          uint64_t v28 = (v27 + 1) & 0x1FFFFFFF8;
          uint64_t v29 = v28 + v23;
          unsigned int v31 = (uint16x8_t *)(v9 + 2 * v23);
          uint64_t v32 = v28;
          do
          {
            *(int16x8_t *)unsigned int v31 = vshrq_n_s16((int16x8_t)vsraq_n_u16(*v31, *v31, 0xFuLL), 1uLL);
            ++v31;
            v32 -= 8;
          }
          while (v32);
          if (v30 == v28) {
            continue;
          }
        }
        else
        {
          LODWORD(v28) = 0;
          uint64_t v29 = v23;
        }
        uint64_t v33 = (_WORD *)(v9 + 2 * v29);
        int v34 = v28 + v15 - v14;
        do
        {
          *uint64_t v33 = (__int16)(*v33 + (*v33 >> 15)) >> 1;
          ++v33;
        }
        while (!__CFADD__(v34++, 1));
      }
    }
    while (v6 < *(int *)(a1 + 576));
  }
  return 1;
}

uint64_t sub_10001E258(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 984) + 312);
  uint64_t v2 = *(unsigned __int16 **)(v1 + 40);
  int v3 = *v2;
  if (v3 != 0xFFFF) {
    goto LABEL_2;
  }
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(unsigned int *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 80);
  if ((int)v6 > 0)
  {
    LOWORD(v8) = 0;
    uint64_t v9 = *(void *)(result + 1544);
    uint64_t v11 = *(void *)(v1 + 64);
    uint64_t v10 = *(void *)(v1 + 72);
    uint64_t v12 = v6 - 1;
    uint64_t result = v9 - 7;
    uint64_t v13 = v6 & 0xFFFFFFE0;
    uint64_t v14 = v6 & 0xFFFFFFF8;
    if ((unint64_t)(v6 - 1) >> 32) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v6 >= 8;
    }
    char v16 = !v15;
    while (1)
    {
      uint64_t v17 = 2 * (__int16)v8;
      uint64_t v8 = *(__int16 *)(v4 + v17);
      uint64_t v18 = v10 + 2 * (int)v6 * (int)v8;
      uint64_t v19 = v11 + (int)v6 * (int)v8;
      int v20 = *(_DWORD *)(v7 + 4 * v8);
      if (v16)
      {
        uint64_t v21 = *(unsigned int *)(v1 + 16);
LABEL_24:
        unint64_t v63 = v21 + 1;
        do
        {
          uint64_t v64 = (v63 - 2);
          v20 += (*(unsigned __int8 *)(v19 + v64) - *(unsigned __int8 *)(v9 + v64))
               * (*(unsigned __int8 *)(v19 + v64) - *(unsigned __int8 *)(v9 + v64))
               * *(unsigned __int16 *)(v18 + 2 * v64);
          --v63;
        }
        while (v63 > 1);
        goto LABEL_26;
      }
      if (v6 >= 0x20)
      {
        int32x4_t v23 = 0uLL;
        int32x4_t v24 = (int32x4_t)*(unsigned int *)(v7 + 4 * v8);
        uint64_t v25 = v6 & 0xFFFFFFE0;
        uint64_t v26 = v6 - 1;
        int32x4_t v27 = 0uLL;
        int32x4_t v28 = 0uLL;
        int32x4_t v29 = 0uLL;
        int32x4_t v30 = 0uLL;
        int32x4_t v31 = 0uLL;
        int32x4_t v32 = 0uLL;
        do
        {
          uint64_t v33 = v19 + v26;
          int8x16_t v34 = vrev64q_s8(*(int8x16_t *)(v33 - 15));
          uint8x16_t v35 = (uint8x16_t)vextq_s8(v34, v34, 8uLL);
          int8x16_t v36 = vrev64q_s8(*(int8x16_t *)(v33 - 31));
          uint8x16_t v37 = (uint8x16_t)vextq_s8(v36, v36, 8uLL);
          uint64_t v38 = v9 + v26;
          int8x16_t v39 = vrev64q_s8(*(int8x16_t *)(v38 - 15));
          uint8x16_t v40 = (uint8x16_t)vextq_s8(v39, v39, 8uLL);
          int8x16_t v41 = vrev64q_s8(*(int8x16_t *)(v38 - 31));
          uint8x16_t v42 = (uint8x16_t)vextq_s8(v41, v41, 8uLL);
          int16x8_t v43 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v40.i8);
          int16x8_t v44 = (int16x8_t)vsubl_high_u8(v35, v40);
          int16x8_t v45 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v42.i8);
          int16x8_t v46 = (int16x8_t)vsubl_high_u8(v37, v42);
          uint64_t v47 = v18 + 2 * v26;
          int8x16_t v48 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v47 - 14));
          uint16x8_t v49 = (uint16x8_t)vextq_s8(v48, v48, 8uLL);
          int8x16_t v50 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v47 - 30));
          uint16x8_t v51 = (uint16x8_t)vextq_s8(v50, v50, 8uLL);
          int8x16_t v52 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v47 - 46));
          uint16x8_t v53 = (uint16x8_t)vextq_s8(v52, v52, 8uLL);
          int8x16_t v54 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v47 - 62));
          uint16x8_t v55 = (uint16x8_t)vextq_s8(v54, v54, 8uLL);
          int32x4_t v28 = vmlaq_s32(v28, vmull_high_s16(v44, v44), (int32x4_t)vmovl_high_u16(v51));
          int32x4_t v27 = vmlaq_s32(v27, vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v51.i8));
          int32x4_t v23 = vmlaq_s32(v23, vmull_high_s16(v43, v43), (int32x4_t)vmovl_high_u16(v49));
          int32x4_t v24 = vmlaq_s32(v24, vmull_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v43.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v49.i8));
          int32x4_t v32 = vmlaq_s32(v32, vmull_high_s16(v46, v46), (int32x4_t)vmovl_high_u16(v55));
          int32x4_t v31 = vmlaq_s32(v31, vmull_s16(*(int16x4_t *)v46.i8, *(int16x4_t *)v46.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v55.i8));
          int32x4_t v30 = vmlaq_s32(v30, vmull_high_s16(v45, v45), (int32x4_t)vmovl_high_u16(v53));
          int32x4_t v29 = vmlaq_s32(v29, vmull_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v53.i8));
          v26 -= 32;
          v25 -= 32;
        }
        while (v25);
        int v20 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v29, v24), vaddq_s32(v31, v27)), vaddq_s32(vaddq_s32(v30, v23), vaddq_s32(v32, v28))));
        if (v13 == v6) {
          goto LABEL_26;
        }
        uint64_t v22 = v6 & 0x7FFFFFE0;
        uint64_t v21 = v6 & 0x1F;
        if ((v6 & 0x18) == 0) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      int32x4_t v56 = 0uLL;
      int32x4_t v57 = (int32x4_t)v20;
      uint64_t v58 = v12 - v22;
      uint64_t v59 = v22 - v14;
      do
      {
        int16x8_t v60 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(v19 - 7 + v58)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(result + v58)));
        int8x16_t v61 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v18 - 14 + 2 * v58));
        uint16x8_t v62 = (uint16x8_t)vextq_s8(v61, v61, 8uLL);
        int32x4_t v56 = vmlaq_s32(v56, vmull_high_s16(v60, v60), (int32x4_t)vmovl_high_u16(v62));
        int32x4_t v57 = vmlaq_s32(v57, vmull_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v60.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v62.i8));
        v58 -= 8;
        v59 += 8;
      }
      while (v59);
      int v20 = vaddvq_s32(vaddq_s32(v57, v56));
      uint64_t v21 = v6 & 7;
      if (v14 != v6) {
        goto LABEL_24;
      }
LABEL_26:
      int v65 = *(__int16 *)(v5 + v17);
      uint64_t v66 = v10 + 2 * (int)v6 * v65;
      uint64_t v67 = v11 + (int)v6 * v65;
      int v68 = *(_DWORD *)(v7 + 4 * v65);
      if (v16)
      {
        uint64_t v69 = *(unsigned int *)(v1 + 16);
      }
      else
      {
        if (v6 < 0x20)
        {
          uint64_t v70 = 0;
LABEL_34:
          int32x4_t v104 = 0uLL;
          int32x4_t v105 = (int32x4_t)v68;
          uint64_t v106 = v12 - v70;
          uint64_t v107 = v70 - v14;
          do
          {
            int16x8_t v108 = (int16x8_t)vsubl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)(v67 - 7 + v106)), (uint8x8_t)vrev64_s8(*(int8x8_t *)(result + v106)));
            int8x16_t v109 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v66 - 14 + 2 * v106));
            uint16x8_t v110 = (uint16x8_t)vextq_s8(v109, v109, 8uLL);
            int32x4_t v104 = vmlaq_s32(v104, vmull_high_s16(v108, v108), (int32x4_t)vmovl_high_u16(v110));
            int32x4_t v105 = vmlaq_s32(v105, vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v108.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v110.i8));
            v106 -= 8;
            v107 += 8;
          }
          while (v107);
          int v68 = vaddvq_s32(vaddq_s32(v105, v104));
          uint64_t v69 = v6 & 7;
          if (v14 == v6) {
            goto LABEL_10;
          }
          goto LABEL_37;
        }
        int32x4_t v71 = 0uLL;
        int32x4_t v72 = (int32x4_t)*(unsigned int *)(v7 + 4 * v65);
        uint64_t v73 = v6 & 0xFFFFFFE0;
        uint64_t v74 = v6 - 1;
        int32x4_t v75 = 0uLL;
        int32x4_t v76 = 0uLL;
        int32x4_t v77 = 0uLL;
        int32x4_t v78 = 0uLL;
        int32x4_t v79 = 0uLL;
        int32x4_t v80 = 0uLL;
        do
        {
          uint64_t v81 = v67 + v74;
          int8x16_t v82 = vrev64q_s8(*(int8x16_t *)(v81 - 15));
          uint8x16_t v83 = (uint8x16_t)vextq_s8(v82, v82, 8uLL);
          int8x16_t v84 = vrev64q_s8(*(int8x16_t *)(v81 - 31));
          uint8x16_t v85 = (uint8x16_t)vextq_s8(v84, v84, 8uLL);
          uint64_t v86 = v9 + v74;
          int8x16_t v87 = vrev64q_s8(*(int8x16_t *)(v86 - 15));
          uint8x16_t v88 = (uint8x16_t)vextq_s8(v87, v87, 8uLL);
          int8x16_t v89 = vrev64q_s8(*(int8x16_t *)(v86 - 31));
          uint8x16_t v90 = (uint8x16_t)vextq_s8(v89, v89, 8uLL);
          int16x8_t v91 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v83.i8, *(uint8x8_t *)v88.i8);
          int16x8_t v92 = (int16x8_t)vsubl_high_u8(v83, v88);
          int16x8_t v93 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v85.i8, *(uint8x8_t *)v90.i8);
          int16x8_t v94 = (int16x8_t)vsubl_high_u8(v85, v90);
          uint64_t v95 = v66 + 2 * v74;
          int8x16_t v96 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v95 - 14));
          uint16x8_t v97 = (uint16x8_t)vextq_s8(v96, v96, 8uLL);
          int8x16_t v98 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v95 - 30));
          uint16x8_t v99 = (uint16x8_t)vextq_s8(v98, v98, 8uLL);
          int8x16_t v100 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v95 - 46));
          uint16x8_t v101 = (uint16x8_t)vextq_s8(v100, v100, 8uLL);
          int8x16_t v102 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v95 - 62));
          uint16x8_t v103 = (uint16x8_t)vextq_s8(v102, v102, 8uLL);
          int32x4_t v76 = vmlaq_s32(v76, vmull_high_s16(v92, v92), (int32x4_t)vmovl_high_u16(v99));
          int32x4_t v75 = vmlaq_s32(v75, vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v92.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v99.i8));
          int32x4_t v71 = vmlaq_s32(v71, vmull_high_s16(v91, v91), (int32x4_t)vmovl_high_u16(v97));
          int32x4_t v72 = vmlaq_s32(v72, vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v91.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v97.i8));
          int32x4_t v80 = vmlaq_s32(v80, vmull_high_s16(v94, v94), (int32x4_t)vmovl_high_u16(v103));
          int32x4_t v79 = vmlaq_s32(v79, vmull_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v94.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v103.i8));
          int32x4_t v78 = vmlaq_s32(v78, vmull_high_s16(v93, v93), (int32x4_t)vmovl_high_u16(v101));
          int32x4_t v77 = vmlaq_s32(v77, vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v93.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v101.i8));
          v74 -= 32;
          v73 -= 32;
        }
        while (v73);
        int v68 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v77, v72), vaddq_s32(v79, v75)), vaddq_s32(vaddq_s32(v78, v71), vaddq_s32(v80, v76))));
        if (v13 == v6) {
          goto LABEL_10;
        }
        uint64_t v70 = v6 & 0x7FFFFFE0;
        uint64_t v69 = v6 & 0x1F;
        if ((v6 & 0x18) != 0) {
          goto LABEL_34;
        }
      }
LABEL_37:
      unint64_t v111 = v69 + 1;
      do
      {
        uint64_t v112 = (v111 - 2);
        v68 += (*(unsigned __int8 *)(v67 + v112) - *(unsigned __int8 *)(v9 + v112))
             * (*(unsigned __int8 *)(v67 + v112) - *(unsigned __int8 *)(v9 + v112))
             * *(unsigned __int16 *)(v66 + 2 * v112);
        --v111;
      }
      while (v111 > 1);
LABEL_10:
      if (v20 > v68) {
        LOWORD(v8) = v65;
      }
      int v3 = v2[(__int16)v8];
      if (v3 != 0xFFFF) {
        goto LABEL_2;
      }
    }
  }
  LOWORD(v113) = 0;
  do
  {
    uint64_t v114 = 2 * (__int16)v113;
    uint64_t v115 = *(__int16 *)(v4 + v114);
    uint64_t v113 = *(__int16 *)(v5 + v114);
    if (*(_DWORD *)(v7 + 4 * v115) <= *(_DWORD *)(v7 + 4 * v113)) {
      LODWORD(v113) = v115;
    }
    int v3 = v2[(int)v113];
  }
  while (v3 == 0xFFFF);
LABEL_2:
  *(_DWORD *)(v1 + 32) = (__int16)v3;
  return result;
}

uint64_t sub_10001E7C8(uint64_t a1, int a2)
{
  return *(__int16 *)(*(void *)(*(void *)(*(void *)(a1 + 984) + 312) + 88)
                                  + 2
                                  * (*(_DWORD *)(*(void *)(*(void *)(a1 + 984) + 312) + 32)
                                   + **(_DWORD **)(*(void *)(a1 + 984) + 312) * a2));
}

uint64_t sub_10001E7E8(uint64_t a1)
{
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v1 = qword_100101CC0;
  if (qword_100101CC0) {
    unint64_t v2 = (unint64_t)(*(void *)(qword_100101CC0 + 5464) + 255) >> 8;
  }
  else {
    LODWORD(v2) = 0;
  }
  *(_DWORD *)(a1 + 168) = v2;
  *(_DWORD *)(a1 + 192) = v2;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 172) = 0;
  *(void *)(a1 + 196) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 208) = 0;
  if (v1)
  {
    double v3 = *(double *)(v1 + 5472) * (double)*(unint64_t *)(v1 + 5464);
    int v4 = (int)v3 + 510;
    if ((int)v3 >= -255) {
      int v4 = (int)v3 + 255;
    }
    int v5 = v4 >> 8;
  }
  else
  {
    int v5 = 0;
  }
  *(_DWORD *)(a1 + 216) = v5;
  *(_DWORD *)(a1 + 248) = v5;
  *(_DWORD *)(a1 + 280) = v5;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 292) = -1;
  uint64_t v6 = *(int *)(a1 + 88);
  *(_DWORD *)(a1 + 288) = v6 - 1;
  if (v1)
  {
    *(_DWORD *)(a1 + 268) = (unint64_t)(v6 + *(void *)(v1 + 5464) + 255) >> 8;
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(v1 + 808);
  }
  else
  {
    *(_DWORD *)(a1 + 268) = (unint64_t)(v6 + 255) >> 8;
    *(_DWORD *)(a1 + 204) = 0;
  }
  return sub_10001EAB0(a1, v6);
}

uint64_t sub_10001E8C0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(int *)(result + 172) >= 1)
    {
      uint64_t v2 = 0;
      do
      {
        sub_1000C321C(*(void *)(*(void *)(v1 + 160) + 8 * v2));
        sub_1000C321C(*(void *)(*(void *)(v1 + 184) + 8 * v2++));
      }
      while (v2 < *(int *)(v1 + 172));
    }
    sub_1000C321C(*(void *)(v1 + 160));
    sub_1000C321C(*(void *)(v1 + 184));
    if (*(int *)(v1 + 220) >= 1)
    {
      uint64_t v3 = 0;
      do
        sub_1000C321C(*(void *)(*(void *)(v1 + 208) + 8 * v3++));
      while (v3 < *(int *)(v1 + 220));
    }
    sub_1000C321C(*(void *)(v1 + 208));
    if (*(int *)(v1 + 220) >= 1)
    {
      uint64_t v4 = 0;
      do
        sub_1000C321C(*(void *)(*(void *)(v1 + 240) + 8 * v4++));
      while (v4 < *(int *)(v1 + 220));
    }
    sub_1000C321C(*(void *)(v1 + 240));
    if (*(_DWORD *)(v1 + 204))
    {
      if (*(int *)(v1 + 264) >= 1)
      {
        uint64_t v5 = 0;
        do
          sub_1000C321C(*(void *)(*(void *)(v1 + 256) + 8 * v5++));
        while (v5 < *(int *)(v1 + 264));
      }
      sub_1000C321C(*(void *)(v1 + 256));
    }
    if (*(int *)(v1 + 220) >= 1)
    {
      uint64_t v6 = 0;
      do
        sub_1000C321C(*(void *)(*(void *)(v1 + 272) + 8 * v6++));
      while (v6 < *(int *)(v1 + 220));
    }
    uint64_t v7 = *(void *)(v1 + 272);
    return sub_1000C321C(v7);
  }
  return result;
}

uint64_t sub_10001EA20(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_10001E8C0(result);
    sub_1000C321C(v1[10]);
    sub_1000C321C(v1[3]);
    sub_1000C321C(v1[6]);
    sub_1000C321C(v1[13]);
    sub_1000C321C(v1[39]);
    sub_1000C321C(v1[40]);
    sub_1000C321C(v1[17]);
    sub_1000C321C(v1[19]);
    sub_1000C321C(v1[15]);
    sub_1000C4364(v1[38]);
    return sub_1000C321C((uint64_t)v1);
  }
  return result;
}

uint64_t sub_10001EAB0(uint64_t a1, int a2)
{
  uint64_t result = 1;
  if (a2)
  {
    if (*(_DWORD *)(a1 + 204))
    {
      int v4 = *(_DWORD *)(a1 + 264);
      uint64_t result = sub_1000C3A90((const void **)(a1 + 256), (int *)(a1 + 268), (signed int *)(a1 + 264), 8, 2, a2);
      if (result)
      {
        int v5 = *(_DWORD *)(a1 + 264);
        if (v4 < v5)
        {
          if (*(_DWORD *)(a1 + 204))
          {
            int v6 = v5 << 8;
            if (v6 >= 1)
            {
              for (unsigned int i = 0; i != v6; ++i)
              {
                int v9 = *(_DWORD *)(a1 + 224);
                int v10 = v9 - 1;
                if (v9 < 1)
                {
                  LOWORD(v8) = 0;
                }
                else
                {
                  signed int v8 = 0;
                  do
                  {
                    int v11 = v8 + v10;
                    if (v8 + v10 < 0 != __OFADD__(v8, v10)) {
                      ++v11;
                    }
                    unsigned int v12 = v11 >> 1;
                    if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208)
                                                         + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8 * (v12 >> 8)) + 2 * v12) >> 5) & 0x7F8))
                                             + 2
                                             * *(_WORD *)(*(void *)(*(void *)(a1 + 240)
                                                                                     + 8 * (v12 >> 8))
                                                                         + 2 * v12)) >= (unsigned __int16)i)
                      int v10 = v12 - 1;
                    else {
                      signed int v8 = v12 + 1;
                    }
                  }
                  while (v8 <= v10);
                }
                *(_WORD *)(*(void *)(*(void *)(a1 + 256) + 8 * (i >> 8)) + 2 * i) = v8;
              }
            }
          }
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_10001EBC4(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFFFD) {
    return 0xFFFFFFLL;
  }
  signed int v4 = *(_DWORD *)(a1 + 88);
  if (v4 <= (int)a2)
  {
    unsigned int v5 = (unsigned __int16)(a2 - v4);
    if ((signed int)v5 < *(_DWORD *)(a1 + 172) << 8) {
      return *(unsigned int *)(*(void *)(*(void *)(a1 + 160) + 8 * (v5 >> 8)) + 4 * v5);
    }
    return 0xFFFFFFLL;
  }
  if (*(_DWORD *)a1) {
    return *(_DWORD *)(a1 + 8) + a2;
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (!v6)
  {
    int v7 = *(_DWORD *)(a1 + 56);
    int v8 = 0;
    int v9 = v7 - 1;
    if (v7 <= 1)
    {
      uint64_t v10 = *(void *)(a1 + 40);
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 40);
      do
      {
        if (v8 + v9 + 1 >= 0) {
          int v11 = v8 + v9 + 1;
        }
        else {
          int v11 = v8 + v9 + 2;
        }
        int v12 = v11 >> 1;
        if (*(unsigned __int16 *)(v10 + 2 * v12) > a2) {
          int v9 = v12 - 1;
        }
        else {
          int v8 = v12;
        }
      }
      while (v8 < v9);
    }
    int v13 = *(unsigned __int16 *)(v10 + 2 * v8);
    uint64_t result = (*(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 60) * v8);
    uint64_t v14 = *(void *)(a1 + 16);
    uint64_t v15 = v8 << (*(_DWORD *)(a1 + 64) - 3);
    int v16 = *(unsigned __int8 *)(v14 + v15);
    unsigned int v17 = byte_1000F5954[*(unsigned __int8 *)(v14 + v15)] + v13;
    if (v17 <= a2)
    {
      uint64_t v18 = (unsigned __int8 *)(v15 + v14 + 1);
      do
      {
        LOWORD(v13) = v17;
        uint64_t result = (result + 8);
        int v19 = *v18++;
        int v16 = v19;
        unsigned int v17 = byte_1000F5954[v19] + (unsigned __int16)v17;
      }
      while (v17 <= a2);
    }
    int v20 = byte_1000F594C;
    while (1)
    {
      int v21 = *v20++;
      if ((v21 & v16) != 0)
      {
        if (a2 == (unsigned __int16)v13) {
          return result;
        }
        LOWORD(v13) = v13 + 1;
      }
      uint64_t result = (result + 1);
    }
  }
  return *(unsigned int *)(v6 + 4 * a2);
}

uint64_t sub_10001ED14(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  if (a2 >= 0xFFFE)
  {
    if (a2 == 65534) {
      LOWORD(v3) = -2;
    }
    else {
      LOWORD(v3) = -1;
    }
    return (unsigned __int16)v3;
  }
  int v5 = a2 - *(_DWORD *)(a1 + 92);
  if (v5 < 0)
  {
    uint64_t v6 = *(void *)(a1 + 96);
    int v3 = *(unsigned __int16 *)(v6 + 2 * a2);
    if (!a3) {
      return (unsigned __int16)v3;
    }
    uint64_t v7 = a2;
    while (v7-- >= 1)
    {
      if (v3 != *(unsigned __int16 *)(v6 + 2 * v7))
      {
        *a3 = a2 - (v7 + 1);
        return (unsigned __int16)v3;
      }
    }
    *a3 = a2;
    return (unsigned __int16)v3;
  }
  else if (v5 <= *(_DWORD *)(a1 + 292))
  {
    uint64_t v9 = v5 >> 8;
    uint64_t v10 = (a2 - *(unsigned char *)(a1 + 92));
    if (a3) {
      *a3 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 272) + 8 * v9) + v10);
    }
    return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) + 8 * v9) + 2 * v10);
  }
  else
  {
    return 0xFFFFLL;
  }
}

uint64_t sub_10001EDE8(uint64_t a1, int a2)
{
  if (a2 == 0xFFFFFF) {
    return 0xFFFFLL;
  }
  if (*(_DWORD *)a1)
  {
    int v2 = *(_DWORD *)(a1 + 8);
    LOWORD(v3) = a2 - v2;
    if (a2 < v2 || *(_DWORD *)(a1 + 88) + v2 <= a2) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 72);
    if (v5)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 88);
      if ((int)v6 < 1) {
        goto LABEL_24;
      }
      uint64_t v3 = 0;
      while (*(_DWORD *)(v5 + 4 * v3) != a2)
      {
        if (v6 == ++v3) {
          goto LABEL_24;
        }
      }
    }
    else
    {
      int v7 = *(_DWORD *)(a1 + 8);
      unsigned int v8 = a2 - v7;
      if (a2 < v7) {
        goto LABEL_24;
      }
      if (*(_DWORD *)(a1 + 12) < a2) {
        goto LABEL_24;
      }
      uint64_t v9 = *(void *)(a1 + 16);
      if ((byte_1000F594C[((_BYTE)a2 - (_BYTE)v7) & 7] & *(unsigned char *)(v9
                                                                                    + ((unint64_t)(a2 - v7) >> 3))) == 0)
        goto LABEL_24;
      int v10 = *(_DWORD *)(a1 + 64);
      unsigned int v11 = v8 >> v10;
      __int16 v12 = *(_WORD *)(*(void *)(a1 + 40) + 2 * (int)(v8 >> v10)) - 1;
      int v13 = v7 + *(_DWORD *)(a1 + 60) * v11;
      char v14 = v13 - 1;
      uint64_t v15 = (int)(v11 << (v10 - 3));
      int v16 = (unsigned __int8 *)(v9 + v15);
      int v17 = v13 + 7;
      if (v13 + 7 < a2)
      {
        int v18 = v13 + 15;
        if (a2 > v13 + 15) {
          int v18 = a2;
        }
        unsigned int v19 = v18 - v13 - 8;
        if (v19 < 8) {
          goto LABEL_39;
        }
        __int16 v20 = 0;
        uint64_t v21 = (v19 >> 3) + 1;
        int v22 = 8 * (v21 & 0x3FFFFFFE);
        v17 += v22;
        v16 += v21 & 0x3FFFFFFE;
        int32x4_t v23 = (unsigned __int8 *)(v15 + v9 + 1);
        uint64_t v24 = v21 & 0x3FFFFFFE;
        do
        {
          uint64_t v25 = *(v23 - 1);
          int v26 = *v23;
          v23 += 2;
          v12 += byte_1000F5954[v25];
          v20 += byte_1000F5954[v26];
          v24 -= 2;
        }
        while (v24);
        v12 += v20;
        if ((v21 & 0x3FFFFFFE) == v21)
        {
          v14 += v22;
        }
        else
        {
LABEL_39:
          do
          {
            int v32 = *v16++;
            v12 += byte_1000F5954[v32];
            v17 += 8;
          }
          while (v17 < a2);
          char v14 = v17 - 8;
        }
      }
      LOWORD(v3) = v12 + byte_1000F5954[*v16 & (unint64_t)~(255 << (a2 - v14))];
    }
  }
  if ((_WORD)v3 != 0xFFFF) {
    return (unsigned __int16)v3;
  }
LABEL_24:
  int v27 = *(_DWORD *)(a1 + 176);
  int v28 = v27 - 1;
  if (v27 >= 1)
  {
    int v29 = 0;
    do
    {
      unsigned int v30 = (v28 + v29) >> 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 160)
                                 + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 184)
                                                                                       + 8
                                                                                       * ((v28 + v29) >> 9))
                                                                           + 2 * v30) >> 5) & 0x7F8))
                     + 4
                     * *(_WORD *)(*(void *)(*(void *)(a1 + 184)
                                                             + 8 * ((v28 + v29) >> 9))
                                                 + 2 * v30)) >= a2)
        int v28 = v30 - 1;
      else {
        int v29 = v30 + 1;
      }
    }
    while (v29 <= v28);
    if (v29 < v27)
    {
      unint64_t v31 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 184) + 8 * (v29 >> 8))
                                + 2 * v29);
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 160) + ((v31 >> 5) & 0x7F8)) + 4 * v31) == a2) {
        return (unsigned __int16)(v31 + *(_WORD *)(a1 + 88));
      }
    }
  }
  return 0xFFFFLL;
}

uint64_t sub_10001F04C(uint64_t a1, int a2)
{
  int v2 = (int *)(a1 + 168);
  int v3 = *(_DWORD *)(a1 + 176);
  if (v3 == *(_DWORD *)(a1 + 168) << 8) {
    goto LABEL_2;
  }
  int v7 = (signed int *)(a1 + 172);
  int v8 = *(_DWORD *)(a1 + 172) << 8;
  int v9 = *(_DWORD *)(a1 + 200);
  if (v9 == v3 - 1) {
    unsigned int v10 = *(_DWORD *)(a1 + 176);
  }
  else {
    unsigned int v10 = 0;
  }
  if ((int)v10 < v8)
  {
    while (*(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8 * (v10 >> 8)) + 4 * v10) != 0xFFFFFF)
    {
      if (v8 == ++v10)
      {
        unsigned int v10 = *(_DWORD *)(a1 + 172) << 8;
        break;
      }
    }
  }
  int v4 = *(_DWORD *)(a1 + 88) + v10;
  if (v4 > 65530)
  {
    LOWORD(v4) = 0;
    return (unsigned __int16)v4;
  }
  int v11 = (unsigned __int16)(*(_WORD *)(a1 + 88) + v10);
  if (v11 >= *(_DWORD *)(a1 + 288))
  {
    if (!sub_10001EAB0(a1, v11 + 1))
    {
LABEL_2:
      LOWORD(v4) = -1;
      return (unsigned __int16)v4;
    }
    *(_DWORD *)(a1 + 288) = v11;
    int v9 = *(_DWORD *)(a1 + 200);
  }
  if ((int)v10 > v9)
  {
    uint64_t v12 = *(int *)(a1 + 172);
    if (!sub_1000C3A90((const void **)(a1 + 160), v2, v7, 8, 4, v10 + 1)) {
      goto LABEL_2;
    }
    if ((int)v12 < *v7)
    {
      do
        memset_pattern16(*(void **)(*(void *)(a1 + 160) + 8 * v12++), &unk_1000F48B0, 0x400uLL);
      while (v12 < *v7);
    }
    if (!sub_1000C3A90((const void **)(a1 + 184), (int *)(a1 + 192), (signed int *)(a1 + 196), 8, 2, v10 + 1))goto LABEL_2; {
    *(_DWORD *)(a1 + 200) = v10;
    }
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8 * (v10 >> 8)) + 4 * v10) = a2;
  uint64_t v13 = *(unsigned int *)(a1 + 176);
  int v14 = 0;
  int v15 = v13 - 1;
  if ((int)v13 >= 1)
  {
    do
    {
      unsigned int v16 = (v15 + v14) >> 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 160)
                                 + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 184)
                                                                                       + 8
                                                                                       * ((v15 + v14) >> 9))
                                                                           + 2 * v16) >> 5) & 0x7F8))
                     + 4
                     * *(_WORD *)(*(void *)(*(void *)(a1 + 184)
                                                             + 8 * ((v15 + v14) >> 9))
                                                 + 2 * v16)) >= a2)
        int v15 = v16 - 1;
      else {
        int v14 = v16 + 1;
      }
    }
    while (v14 <= v15);
  }
  if ((int)v13 > v14) {
    sub_1000C403C(*(void **)(a1 + 184), v13, 256, 2, v14, v13 - v14, v14 + 1);
  }
  *(_WORD *)(*(void *)(*(void *)(a1 + 184) + 8 * (v14 >> 8)) + 2 * v14) = v10;
  ++*(_DWORD *)(a1 + 176);
  return (unsigned __int16)v4;
}

uint64_t sub_10001F288(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 224);
  if (*(_DWORD *)(a1 + 92) + v2 > 65532)
  {
    LOWORD(v3) = -1;
    return (unsigned __int16)v3;
  }
  if (*(_DWORD *)(a1 + 288) <= (signed int)a2)
  {
    *(_DWORD *)(a1 + 288) = a2;
    if (!sub_10001EAB0(a1, a2 + 1)) {
      return 0xFFFFLL;
    }
    int v2 = *(_DWORD *)(a1 + 224);
  }
  int v7 = v2 + 1;
  int v8 = (int *)(a1 + 220);
  uint64_t v9 = *(int *)(a1 + 220);
  if (sub_1000C3A90((const void **)(a1 + 208), (int *)(a1 + 216), (signed int *)(a1 + 220), 8, 2, v2 + 1))
  {
    if ((int)v9 < *v8)
    {
      *(void *)&long long v10 = -1;
      *((void *)&v10 + 1) = -1;
      do
      {
        int v11 = *(_OWORD **)(*(void *)(a1 + 208) + 8 * v9);
        v11[30] = v10;
        v11[31] = v10;
        v11[28] = v10;
        v11[29] = v10;
        v11[26] = v10;
        v11[27] = v10;
        v11[24] = v10;
        v11[25] = v10;
        v11[22] = v10;
        v11[23] = v10;
        v11[20] = v10;
        v11[21] = v10;
        v11[18] = v10;
        v11[19] = v10;
        v11[16] = v10;
        v11[17] = v10;
        v11[14] = v10;
        v11[15] = v10;
        v11[12] = v10;
        v11[13] = v10;
        v11[10] = v10;
        v11[11] = v10;
        v11[8] = v10;
        v11[9] = v10;
        v11[6] = v10;
        v11[7] = v10;
        v11[4] = v10;
        v11[5] = v10;
        v11[2] = v10;
        v11[3] = v10;
        *int v11 = v10;
        v11[1] = v10;
        ++v9;
      }
      while (v9 < *v8);
    }
    if (sub_1000C3A90((const void **)(a1 + 272), (int *)(a1 + 280), (signed int *)(a1 + 284), 8, 1, v7))
    {
      uint64_t v12 = (void *)(a1 + 240);
      if (sub_1000C3A90((const void **)(a1 + 240), (int *)(a1 + 248), (signed int *)(a1 + 252), 8, 2, v7))
      {
        if (*(_DWORD *)(a1 + 88) <= (signed int)a2)
        {
          char v13 = 0;
          if (!*(_DWORD *)(a1 + 204))
          {
LABEL_16:
            int v14 = *(_DWORD *)(a1 + 224);
            uint64_t v15 = *(void *)(a1 + 208);
            int v16 = 0;
            int v17 = v14 - 1;
            if (v14 >= 1)
            {
              do
              {
                int v18 = v16 + v17;
                if (v16 + v17 < 0 != __OFADD__(v16, v17)) {
                  ++v18;
                }
                unsigned int v19 = v18 >> 1;
                if (*(unsigned __int16 *)(*(void *)(v15
                                                     + (((unint64_t)*(unsigned __int16 *)(*(void *)(*v12 + 8 * (v19 >> 8))
                                                                                               + 2
                                                                                               * v19) >> 5) & 0x7F8))
                                         + 2
                                         * *(_WORD *)(*(void *)(*v12 + 8 * (v19 >> 8))
                                                                     + 2 * v19)) >= a2)
                  int v17 = v19 - 1;
                else {
                  int v16 = v19 + 1;
                }
              }
              while (v16 <= v17);
            }
            goto LABEL_27;
          }
        }
        else if (*(void *)(a1 + 144))
        {
          char v13 = *(unsigned char *)(*(void *)(a1 + 128) + a2);
          if (!*(_DWORD *)(a1 + 204)) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v29 = *(int *)(a1 + 92);
          uint64_t v30 = *(void *)(a1 + 96);
          if ((int)v29 < 1)
          {
            int v31 = 0;
          }
          else
          {
            int v31 = 0;
            int v32 = v29 - 1;
            do
            {
              int v33 = v32 + v31;
              if (v32 + v31 < 0 != __OFADD__(v32, v31)) {
                ++v33;
              }
              int v34 = v33 >> 1;
              if (*(unsigned __int16 *)(v30 + 2 * v34) < a2) {
                int v31 = v34 + 1;
              }
              else {
                int v32 = v34 - 1;
              }
            }
            while (v31 <= v32);
          }
          if ((int)v29 <= v31 + 1) {
            char v35 = v31 + 1;
          }
          else {
            char v35 = *(_DWORD *)(a1 + 92);
          }
          uint64_t v36 = v31 + 1;
          char v37 = v31;
          while (v36 < v29)
          {
            int v38 = *(unsigned __int16 *)(v30 + 2 * v36);
            ++v37;
            ++v36;
            if (v38 != a2) {
              goto LABEL_64;
            }
          }
          char v37 = v35;
LABEL_64:
          char v13 = v37 - v31;
          if (!*(_DWORD *)(a1 + 204)) {
            goto LABEL_16;
          }
        }
        int v16 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 256) + 8 * (a2 >> 8)) + 2 * a2);
        int v14 = *(_DWORD *)(a1 + 224);
        uint64_t v15 = *(void *)(a1 + 208);
LABEL_27:
        if (v16 < v14)
        {
          char v20 = v13 + v14 - v16;
          while (*(unsigned __int16 *)(*(void *)(v15
                                                  + (((unint64_t)*(unsigned __int16 *)(*(void *)(*v12 + 8 * (v16 >> 8))
                                                                                            + 2 * v16) >> 5) & 0x7F8))
                                      + 2
                                      * *(_WORD *)(*(void *)(*v12 + 8 * (v16 >> 8))
                                                                  + 2 * v16)) == a2)
          {
            ++v13;
            if (v14 == ++v16)
            {
              char v13 = v20;
              int v16 = v14;
              break;
            }
          }
        }
        int v21 = *(_DWORD *)(a1 + 292);
        if (v21 < 0)
        {
          unsigned int v22 = 0;
        }
        else
        {
          unsigned int v22 = 0;
          unsigned int v23 = v21 + 1;
          while (*(__int16 *)(*(void *)(v15 + 8 * (v22 >> 8)) + 2 * v22) != -1)
          {
            if (v23 == ++v22)
            {
              unsigned int v22 = v23;
              break;
            }
          }
        }
        uint64_t v24 = 8 * (v22 >> 8);
        *(_WORD *)(*(void *)(v15 + v24) + 2 * v22) = a2;
        *(unsigned char *)(*(void *)(*(void *)(a1 + 272) + v24) + v22) = v13;
        for (int i = *(_DWORD *)(a1 + 224); i > v16; --i)
          *(_WORD *)(*(void *)(*v12 + 8 * (i >> 8)) + 2 * i) = *(_WORD *)(*(void *)(*v12 + 8 * ((i - 1) >> 8)) + 2 * (i - 1));
        *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8 * (v16 >> 8)) + 2 * v16) = v22;
        if ((signed int)v22 > *(_DWORD *)(a1 + 292)) {
          *(_DWORD *)(a1 + 292) = v22;
        }
        ++*(_DWORD *)(a1 + 224);
        unsigned int v3 = *(_DWORD *)(a1 + 92) + v22;
        if (*(_DWORD *)(a1 + 204))
        {
          signed int v26 = *(_DWORD *)(a1 + 264) << 8;
          unsigned int v27 = a2 + 1;
          if ((int)(a2 + 1) < v26)
          {
            do
            {
              uint64_t v28 = *(void *)(*(void *)(a1 + 256) + 8 * (v27 >> 8));
              ++*(_WORD *)(v28 + 2 * v27++);
            }
            while (v26 != v27);
          }
        }
        return (unsigned __int16)v3;
      }
    }
  }
  return 0xFFFFLL;
}

BOOL sub_10001F6B8(uint64_t a1, unsigned int a2)
{
  return a2 <= 0xFFFD && *(_DWORD *)(a1 + 88) <= (int)a2;
}

uint64_t sub_10001F6DC(uint64_t a1, unsigned int a2, int a3)
{
  if (a2 > 0xFFFD) {
    return 0;
  }
  signed int v6 = *(_DWORD *)(a1 + 88);
  unsigned int v7 = a2 - v6;
  if ((int)a2 < v6) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v9 = *(void *)(v8 + 8 * (v7 >> 8));
  uint64_t v10 = v7;
  int v11 = *(_DWORD *)(v9 + 4 * v7);
  if (v11 != 0xFFFFFF)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 176);
    if ((int)v13 <= 0)
    {
      int v14 = 0;
      int v16 = *(void **)(a1 + 184);
    }
    else
    {
      int v14 = 0;
      int v15 = v13 - 1;
      int v16 = *(void **)(a1 + 184);
      do
      {
        unsigned int v17 = (v15 + v14) >> 1;
        if (v11 <= *(_DWORD *)(*(void *)(v8
                                          + (((unint64_t)*(unsigned __int16 *)(v16[(v15 + v14) >> 9]
                                                                                    + 2 * v17) >> 5) & 0x7F8))
                              + 4
                              * *(_WORD *)(v16[(v15 + v14) >> 9]
                                                          + 2 * v17)))
          int v15 = v17 - 1;
        else {
          int v14 = v17 + 1;
        }
      }
      while (v14 <= v15);
    }
    sub_1000C403C(v16, v13, 256, 2, v14 + 1, v13 + ~v14, v14);
    *(_DWORD *)(v9 + 4 * v10) = 0xFFFFFF;
    --*(_DWORD *)(a1 + 176);
    if (a3)
    {
      if (*(_DWORD *)(a1 + 204))
      {
        int v18 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 256) + 8 * (a2 >> 8)) + 2 * a2);
        int v19 = *(_DWORD *)(a1 + 224);
      }
      else
      {
        int v19 = *(_DWORD *)(a1 + 224);
        int v18 = 0;
        int v23 = v19 - 1;
        if (v19 >= 1)
        {
          do
          {
            int v24 = v18 + v23;
            if (v18 + v23 < 0 != __OFADD__(v18, v23)) {
              ++v24;
            }
            unsigned int v25 = v24 >> 1;
            if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208)
                                                 + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8 * (v25 >> 8))
                                                                                           + 2 * v25) >> 5) & 0x7F8))
                                     + 2
                                     * *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8 * (v25 >> 8))
                                                                 + 2 * v25)) >= a2)
              int v23 = v25 - 1;
            else {
              int v18 = v25 + 1;
            }
          }
          while (v18 <= v23);
        }
      }
    }
    else
    {
      int v19 = *(_DWORD *)(a1 + 224);
      int v18 = 0;
      int v20 = v19 - 1;
      if (v19 >= 1)
      {
        do
        {
          int v21 = v18 + v20;
          if (v18 + v20 < 0 != __OFADD__(v18, v20)) {
            ++v21;
          }
          unsigned int v22 = v21 >> 1;
          if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208)
                                               + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8 * (v22 >> 8))
                                                                                         + 2 * v22) >> 5) & 0x7F8))
                                   + 2
                                   * *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8 * (v22 >> 8))
                                                               + 2 * v22)) >= a2)
            int v20 = v22 - 1;
          else {
            int v18 = v22 + 1;
          }
        }
        while (v18 <= v20);
      }
    }
    if (v18 >= v19)
    {
      int v26 = 0;
    }
    else
    {
      int v26 = 0;
      do
      {
        unint64_t v27 = (unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240)
                                                                + 8 * ((v18 + v26) >> 8))
                                                    + 2 * (v18 + v26)) >> 8;
        uint64_t v28 = *(void *)(*(void *)(a1 + 208) + 8 * v27);
        uint64_t v29 = *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8 * ((v18 + v26) >> 8))
                                        + 2 * (v18 + v26));
        if (*(unsigned __int16 *)(v28 + 2 * v29) != a2) {
          break;
        }
        *(_WORD *)(v28 + 2 * v29) = -1;
        *(unsigned char *)(*(void *)(*(void *)(a1 + 272) + 8 * v27) + v29) = 0;
        int v30 = *(_DWORD *)(a1 + 224) - 1;
        *(_DWORD *)(a1 + 224) = v30;
        ++v26;
      }
      while (v18 < v30);
    }
    while (v18 < *(_DWORD *)(a1 + 224))
    {
      *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8 * (v18 >> 8)) + 2 * v18) = *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8 * ((v26 + v18) >> 8)) + 2 * (v26 + v18));
      ++v18;
    }
    if (a3)
    {
      if (*(_DWORD *)(a1 + 204))
      {
        int v31 = *(_DWORD *)(a1 + 264) << 8;
        if (v31 >= 1)
        {
          for (unsigned int i = 0; i != v31; ++i)
          {
            int v34 = *(_DWORD *)(a1 + 224);
            int v35 = v34 - 1;
            if (v34 < 1)
            {
              LOWORD(v33) = 0;
            }
            else
            {
              signed int v33 = 0;
              do
              {
                int v36 = v33 + v35;
                if (v33 + v35 < 0 != __OFADD__(v33, v35)) {
                  ++v36;
                }
                unsigned int v37 = v36 >> 1;
                if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208)
                                                     + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8 * (v37 >> 8))
                                                                                               + 2
                                                                                               * v37) >> 5) & 0x7F8))
                                         + 2
                                         * *(_WORD *)(*(void *)(*(void *)(a1 + 240)
                                                                                 + 8 * (v37 >> 8))
                                                                     + 2 * v37)) >= (unsigned __int16)i)
                  int v35 = v37 - 1;
                else {
                  signed int v33 = v37 + 1;
                }
              }
              while (v33 <= v35);
            }
            *(_WORD *)(*(void *)(*(void *)(a1 + 256) + 8 * (i >> 8)) + 2 * i) = v33;
          }
        }
      }
    }
    int v38 = *(_DWORD *)(a1 + 200);
    if ((v38 & 0x80000000) == 0)
    {
      while (*(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8 * (v38 >> 8))
                        + 4 * v38) == 0xFFFFFF)
      {
        BOOL v39 = v38-- <= 0;
        if (v39)
        {
          int v38 = -1;
          break;
        }
      }
    }
    *(_DWORD *)(a1 + 200) = v38;
    int v40 = *(_DWORD *)(a1 + 292);
    if ((v40 & 0x80000000) == 0)
    {
      while (*(__int16 *)(*(void *)(*(void *)(a1 + 208) + 8 * (v40 >> 8))
                         + 2 * v40) == -1)
      {
        BOOL v39 = v40-- <= 0;
        if (v39)
        {
          int v40 = -1;
          break;
        }
      }
    }
    *(_DWORD *)(a1 + 292) = v40;
  }
  return 1;
}

uint64_t sub_10001FAD0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 200) + *(_DWORD *)(a1 + 88);
  if (v1 <= 1) {
    LOWORD(v1) = 1;
  }
  return (unsigned __int16)v1;
}

uint64_t sub_10001FAEC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 292) + *(_DWORD *)(a1 + 92));
}

uint64_t sub_10001FAFC(uint64_t a1, unsigned int a2, int16x8_t *a3, int a4)
{
  uint64_t v4 = 0;
  if (!a3 || !a4) {
    return v4;
  }
  if (a2 != 65534)
  {
    if (*(_DWORD *)(a1 + 88) <= (signed int)a2)
    {
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 144);
      if (v6)
      {
        int v7 = *(unsigned __int8 *)(*(void *)(a1 + 128) + a2);
        signed int v8 = *(unsigned __int16 *)(v6 + 2 * a2);
        uint64_t v4 = 0;
        BOOL v9 = __OFSUB__(v7, 1);
        int v10 = v7 - 1;
        if (v10 < 0 != v9) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v11 = *(int *)(a1 + 92);
        uint64_t v12 = *(void *)(a1 + 96);
        if ((int)v11 < 1)
        {
          signed int v8 = 0;
        }
        else
        {
          signed int v8 = 0;
          signed int v13 = v11 - 1;
          do
          {
            int v14 = v13 + v8;
            if (v13 + v8 < 0 != __OFADD__(v13, v8)) {
              ++v14;
            }
            int v15 = v14 >> 1;
            if (*(unsigned __int16 *)(v12 + 2 * v15) < a2) {
              signed int v8 = v15 + 1;
            }
            else {
              signed int v13 = v15 - 1;
            }
          }
          while (v8 <= v13);
        }
        if ((int)v11 <= v8 + 1) {
          int v16 = v8 + 1;
        }
        else {
          int v16 = *(_DWORD *)(a1 + 92);
        }
        uint64_t v17 = v8 + 1;
        signed int v18 = v8;
        while (v17 < v11)
        {
          int v19 = *(unsigned __int16 *)(v12 + 2 * v17);
          ++v18;
          ++v17;
          if (v19 != a2) {
            goto LABEL_32;
          }
        }
        signed int v18 = v16;
LABEL_32:
        uint64_t v4 = 0;
        int v10 = v18 - v8 - 1;
        if (v18 - v8 < 1) {
          goto LABEL_43;
        }
      }
      if (a4 >= 1)
      {
        if (v10 >= (a4 - 1)) {
          int v10 = a4 - 1;
        }
        uint64_t v20 = (v10 + 1);
        uint64_t v4 = v20;
        if (v10 >= 0xF)
        {
          uint64_t v21 = v20 & 0xFFFFFFF0;
          signed int v22 = v8 + (v20 & 0xFFFFFFF0);
          int16x8_t v23 = vaddq_s16(vdupq_n_s16(v8), (int16x8_t)xmmword_1000F48A0);
          int v24 = a3 + 1;
          v25.i64[0] = 0x8000800080008;
          v25.i64[1] = 0x8000800080008;
          v26.i64[0] = 0x10001000100010;
          v26.i64[1] = 0x10001000100010;
          uint64_t v27 = v21;
          do
          {
            v24[-1] = v23;
            *int v24 = vaddq_s16(v23, v25);
            int16x8_t v23 = vaddq_s16(v23, v26);
            v24 += 2;
            v27 -= 16;
          }
          while (v27);
          if (v21 == v20) {
            goto LABEL_43;
          }
        }
        else
        {
          uint64_t v21 = 0;
          signed int v22 = v8;
        }
        uint64_t v28 = &a3->i16[v21];
        uint64_t v29 = v20 - v21;
        do
        {
          *v28++ = v22++;
          --v29;
        }
        while (v29);
      }
    }
LABEL_43:
    if (*(_DWORD *)(a1 + 204))
    {
      int v30 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 256) + 8 * (a2 >> 8)) + 2 * a2);
      int v31 = *(_DWORD *)(a1 + 224);
    }
    else
    {
      int v31 = *(_DWORD *)(a1 + 224);
      int v30 = 0;
      int v32 = v31 - 1;
      if (v31 >= 1)
      {
        do
        {
          int v33 = v30 + v32;
          if (v30 + v32 < 0 != __OFADD__(v30, v32)) {
            ++v33;
          }
          unsigned int v34 = v33 >> 1;
          if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208)
                                               + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8 * (v34 >> 8))
                                                                                         + 2 * v34) >> 5) & 0x7F8))
                                   + 2
                                   * *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8 * (v34 >> 8))
                                                               + 2 * v34)) >= a2)
            int v32 = v34 - 1;
          else {
            int v30 = v34 + 1;
          }
        }
        while (v30 <= v32);
      }
    }
    if (v30 < v31 && (int)v4 < a4)
    {
      uint64_t v4 = v4;
      do
      {
        unint64_t v36 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8 * (v30 >> 8))
                                  + 2 * v30);
        if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) + ((v36 >> 5) & 0x7F8))
                                 + 2
                                 * *(_WORD *)(*(void *)(*(void *)(a1 + 240)
                                                                         + 8 * (v30 >> 8))
                                                             + 2 * v30)) != a2)
          break;
        a3->i16[v4++] = v36 + *(_WORD *)(a1 + 92);
        if (++v30 >= *(_DWORD *)(a1 + 224)) {
          break;
        }
      }
      while (v4 < a4);
    }
    return v4;
  }
  if (a4 >= 1) {
    a3->i16[0] = -2;
  }
  return 1;
}

uint64_t sub_10001FD90(uint64_t a1, unsigned int a2)
{
  if (a2 == 0xFFFF) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 88) <= (signed int)a2)
  {
    uint64_t v2 = 0;
    if (!*(_DWORD *)(a1 + 204)) {
      goto LABEL_26;
    }
LABEL_8:
    int v3 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 256) + 8 * (a2 >> 8)) + 2 * a2);
    int v4 = *(_DWORD *)(a1 + 224);
    goto LABEL_33;
  }
  if (!*(void *)(a1 + 144))
  {
    uint64_t v5 = *(int *)(a1 + 92);
    uint64_t v6 = *(void *)(a1 + 96);
    if ((int)v5 < 1)
    {
      int v7 = 0;
    }
    else
    {
      int v7 = 0;
      int v8 = v5 - 1;
      do
      {
        int v9 = v8 + v7;
        if (v8 + v7 < 0 != __OFADD__(v8, v7)) {
          ++v9;
        }
        int v10 = v9 >> 1;
        if (*(unsigned __int16 *)(v6 + 2 * v10) < a2) {
          int v7 = v10 + 1;
        }
        else {
          int v8 = v10 - 1;
        }
      }
      while (v7 <= v8);
    }
    if ((int)v5 <= v7 + 1) {
      int v11 = v7 + 1;
    }
    else {
      int v11 = *(_DWORD *)(a1 + 92);
    }
    uint64_t v12 = v7 + 1;
    int v13 = v7;
    while (v12 < v5)
    {
      int v14 = *(unsigned __int16 *)(v6 + 2 * v12);
      ++v13;
      ++v12;
      if (v14 != a2)
      {
        uint64_t v2 = (v13 - v7);
        if (*(_DWORD *)(a1 + 204)) {
          goto LABEL_8;
        }
        goto LABEL_26;
      }
    }
    uint64_t v2 = (v11 - v7);
    if (*(_DWORD *)(a1 + 204)) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(a1 + 128) + a2);
  if (*(_DWORD *)(a1 + 204)) {
    goto LABEL_8;
  }
LABEL_26:
  int v4 = *(_DWORD *)(a1 + 224);
  int v3 = 0;
  int v15 = v4 - 1;
  if (v4 >= 1)
  {
    do
    {
      int v16 = v3 + v15;
      if (v3 + v15 < 0 != __OFADD__(v3, v15)) {
        ++v16;
      }
      unsigned int v17 = v16 >> 1;
      if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208)
                                           + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240)
                                                                                                 + 8 * (v17 >> 8))
                                                                                     + 2 * v17) >> 5) & 0x7F8))
                               + 2
                               * *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8 * (v17 >> 8))
                                                           + 2 * v17)) >= a2)
        int v15 = v17 - 1;
      else {
        int v3 = v17 + 1;
      }
    }
    while (v3 <= v15);
  }
LABEL_33:
  if (v3 < v4)
  {
    uint64_t v18 = (v2 + v4 - v3);
    while (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208)
                                            + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240)
                                                                                                  + 8 * (v3 >> 8))
                                                                                      + 2 * v3) >> 5) & 0x7F8))
                                + 2
                                * *(_WORD *)(*(void *)(*(void *)(a1 + 240)
                                                                        + 8 * (v3 >> 8))
                                                            + 2 * v3)) == a2)
    {
      uint64_t v2 = (v2 + 1);
      if (v4 == ++v3) {
        return v18;
      }
    }
  }
  return v2;
}

BOOL sub_10001FF54(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFFFD) {
    return 1;
  }
  int v2 = *(_DWORD *)(a1 + 88);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 != v3) {
    return 1;
  }
  if (v4 <= *(_DWORD *)(a1 + 200)) {
    return *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8 * (v4 >> 8)) + 4 * v4) != 0xFFFFFF;
  }
  return 0;
}

uint64_t sub_10001FFAC(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFFFD) {
    return 1;
  }
  int v3 = a2 - *(_DWORD *)(a1 + 92);
  if (v3 < 0) {
    return *(__int16 *)(*(void *)(a1 + 96) + 2 * a2) != -1;
  }
  if (v3 >= *(_DWORD *)(a1 + 220) << 8) {
    return 0;
  }
  return *(__int16 *)(*(void *)(*(void *)(a1 + 208) + 8 * ((a2 - *(_DWORD *)(a1 + 92)) >> 8))
                    + 2 * (a2 - *(unsigned char *)(a1 + 92))) != -1;
}

uint64_t sub_100020020(uint64_t a1, unsigned int a2, int a3)
{
  if (*(_DWORD *)(a1 + 88) <= (signed int)a2)
  {
    LOWORD(v3) = -1;
    int v6 = a3;
    if (a3 >= 0) {
      goto LABEL_24;
    }
    return (unsigned __int16)(v3 + a3);
  }
  uint64_t v3 = *(void *)(a1 + 144);
  if (!v3)
  {
    uint64_t v8 = *(int *)(a1 + 92);
    uint64_t v9 = *(void *)(a1 + 96);
    if ((int)v8 < 1)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      LODWORD(v3) = 0;
      int v10 = v8 - 1;
      do
      {
        int v11 = v10 + v3;
        if (v10 + (int)v3 < 0 != __OFADD__(v10, v3)) {
          ++v11;
        }
        int v12 = v11 >> 1;
        if (*(unsigned __int16 *)(v9 + 2 * v12) < a2) {
          LODWORD(v3) = v12 + 1;
        }
        else {
          int v10 = v12 - 1;
        }
      }
      while ((int)v3 <= v10);
    }
    if ((int)v8 <= (int)v3 + 1) {
      int v13 = v3 + 1;
    }
    else {
      int v13 = *(_DWORD *)(a1 + 92);
    }
    uint64_t v14 = (int)v3 + 1;
    int v15 = v3;
    while (v14 < v8)
    {
      int v16 = *(unsigned __int16 *)(v9 + 2 * v14);
      ++v15;
      ++v14;
      if (v16 != a2)
      {
        int v6 = a3 - (v15 - v3);
        if (a3 < v15 - (int)v3) {
          return (unsigned __int16)(v3 + a3);
        }
        goto LABEL_24;
      }
    }
    int v6 = a3 - (v13 - v3);
    if (a3 < v13 - (int)v3) {
      return (unsigned __int16)(v3 + a3);
    }
    goto LABEL_24;
  }
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 128) + a2);
  LOWORD(v3) = *(_WORD *)(v3 + 2 * a2);
  BOOL v5 = __OFSUB__(a3, v4);
  int v6 = a3 - v4;
  if (v6 < 0 != v5) {
    return (unsigned __int16)(v3 + a3);
  }
LABEL_24:
  if (*(_DWORD *)(a1 + 204))
  {
    int v17 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 256) + 8 * (a2 >> 8)) + 2 * a2);
    int v18 = *(_DWORD *)(a1 + 224);
  }
  else
  {
    int v18 = *(_DWORD *)(a1 + 224);
    int v17 = 0;
    int v19 = v18 - 1;
    if (v18 >= 1)
    {
      do
      {
        int v20 = v17 + v19;
        if (v17 + v19 < 0 != __OFADD__(v17, v19)) {
          ++v20;
        }
        unsigned int v21 = v20 >> 1;
        if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208)
                                             + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8 * (v21 >> 8))
                                                                                       + 2 * v21) >> 5) & 0x7F8))
                                 + 2
                                 * *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8 * (v21 >> 8))
                                                             + 2 * v21)) >= a2)
          int v19 = v21 - 1;
        else {
          int v17 = v21 + 1;
        }
      }
      while (v17 <= v19);
    }
  }
  if (v17 < v18)
  {
    uint64_t v22 = *(void *)(a1 + 240);
    do
    {
      unint64_t v23 = *(unsigned __int16 *)(*(void *)(v22 + 8 * (v17 >> 8)) + 2 * v17);
      if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) + ((v23 >> 5) & 0x7F8))
                               + 2
                               * *(_WORD *)(*(void *)(v22 + 8 * (v17 >> 8))
                                                           + 2 * v17)) != a2)
        break;
      if (!v6) {
        return (unsigned __int16)(v23 + *(_WORD *)(a1 + 92));
      }
      ++v17;
      --v6;
    }
    while (v18 != v17);
  }
  return 0xFFFFLL;
}

uint64_t sub_1000201F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t sub_1000201FC(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(result + 292);
  if ((v3 & 0x80000000) == 0)
  {
    int v4 = 0;
    unsigned int v5 = 0;
    do
    {
      if (*(__int16 *)(*(void *)(*(void *)(result + 208) + 8 * (v5 >> 8)) + 2 * v5) != -1)
      {
        if (v4 >= a3) {
          return result;
        }
        *(_WORD *)(a2 + 2 * v4++) = v5 + *(_DWORD *)(result + 92);
        int v3 = *(_DWORD *)(result + 292);
      }
    }
    while ((int)v5++ < v3);
  }
  return result;
}

BOOL sub_10002025C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(a1 + 92);
  if (v3 <= (int)a2) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 112);
  if (!v4) {
    return 1;
  }
  int v5 = *(unsigned __int8 *)(v4 + a2);
  if (v3 <= (int)a3 || v5 == 2) {
    return 1;
  }
  int v8 = *(unsigned __int8 *)(v4 + a3);
  if (v5) {
    return v8 != 0;
  }
  else {
    return v8 != 1;
  }
}

uint64_t sub_1000202A8(uint64_t a1)
{
  unsigned int v2 = sub_1000C085C(*(_DWORD *)a1, 4, 0xFFFFFFFF);
  unsigned int v3 = sub_1000C085C(*(_DWORD *)(a1 + 8), 4, v2);
  uint64_t v4 = sub_1000C085C(*(_DWORD *)(a1 + 12), 4, v3);
  int v5 = *(unint64_t **)(a1 + 16);
  if (v5) {
    LODWORD(v4) = sub_1000C09B0(v5, 1, *(_DWORD *)(a1 + 32), v4);
  }
  uint64_t v6 = sub_1000C085C(*(_DWORD *)(a1 + 32), 4, v4);
  int v7 = *(unint64_t **)(a1 + 40);
  if (v7) {
    LODWORD(v6) = sub_1000C09B0(v7, 2, *(_DWORD *)(a1 + 56), v6);
  }
  unsigned int v8 = sub_1000C085C(*(_DWORD *)(a1 + 56), 4, v6);
  unsigned int v9 = sub_1000C085C(*(_DWORD *)(a1 + 60), 4, v8);
  uint64_t v10 = sub_1000C085C(*(_DWORD *)(a1 + 64), 4, v9);
  int v11 = *(unint64_t **)(a1 + 72);
  if (v11) {
    LODWORD(v10) = sub_1000C09B0(v11, 4, *(_DWORD *)(a1 + 88), v10);
  }
  unsigned int v12 = sub_1000C085C(*(_DWORD *)(a1 + 88), 4, v10);
  uint64_t v13 = sub_1000C085C(*(_DWORD *)(a1 + 92), 4, v12);
  uint64_t v14 = *(unint64_t **)(a1 + 96);
  if (v14) {
    uint64_t v13 = sub_1000C09B0(v14, 2, *(_DWORD *)(a1 + 92), v13);
  }
  int v15 = *(unint64_t **)(a1 + 128);
  if (v15) {
    uint64_t v13 = sub_1000C09B0(v15, 1, *(_DWORD *)(a1 + 88), v13);
  }
  int v16 = *(unint64_t **)(a1 + 144);
  if (!v16) {
    return v13;
  }
  int v17 = *(_DWORD *)(a1 + 88);
  return sub_1000C09B0(v16, 2, v17, v13);
}

uint64_t sub_100020410(uint64_t a1)
{
  uint64_t v2 = sub_1000202A8(a1);
  if (*(void *)(a1 + 160) && *(int *)(a1 + 172) >= 1)
  {
    uint64_t v3 = 0;
    do
      uint64_t v2 = sub_1000C09B0(*(unint64_t **)(*(void *)(a1 + 160) + 8 * v3++), 4, 256, v2);
    while (v3 < *(int *)(a1 + 172));
  }
  unsigned int v4 = sub_1000C085C(*(_DWORD *)(a1 + 168), 4, v2);
  unsigned int v5 = sub_1000C085C(*(_DWORD *)(a1 + 172), 4, v4);
  unsigned int v6 = sub_1000C085C(*(_DWORD *)(a1 + 176), 4, v5);
  uint64_t v7 = sub_1000C085C(*(_DWORD *)(a1 + 200), 4, v6);
  if (*(void *)(a1 + 208) && *(int *)(a1 + 220) >= 1)
  {
    uint64_t v8 = 0;
    do
      uint64_t v7 = sub_1000C09B0(*(unint64_t **)(*(void *)(a1 + 208) + 8 * v8++), 2, 256, v7);
    while (v8 < *(int *)(a1 + 220));
  }
  unsigned int v9 = sub_1000C085C(*(_DWORD *)(a1 + 216), 4, v7);
  unsigned int v10 = sub_1000C085C(*(_DWORD *)(a1 + 220), 4, v9);
  uint64_t v11 = sub_1000C085C(*(_DWORD *)(a1 + 224), 4, v10);
  if (*(int *)(a1 + 252) >= 1)
  {
    uint64_t v12 = 0;
    do
      uint64_t v11 = sub_1000C09B0(*(unint64_t **)(*(void *)(a1 + 240) + 8 * v12++), 2, 256, v11);
    while (v12 < *(int *)(a1 + 252));
  }
  LODWORD(v13) = *(_DWORD *)(a1 + 264);
  if (*(void *)(a1 + 256)) {
    BOOL v14 = (int)v13 < 1;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v11 = sub_1000C09B0(*(unint64_t **)(*(void *)(a1 + 256) + 8 * v15++), 2, 256, v11);
      uint64_t v13 = *(int *)(a1 + 264);
    }
    while (v15 < v13);
  }
  unsigned int v16 = sub_1000C085C(v13, 4, v11);
  uint64_t v17 = sub_1000C085C(*(_DWORD *)(a1 + 268), 4, v16);
  if (*(void *)(a1 + 272) && *(int *)(a1 + 284) >= 1)
  {
    uint64_t v18 = 0;
    do
      uint64_t v17 = sub_1000C09B0(*(unint64_t **)(*(void *)(a1 + 272) + 8 * v18++), 1, 256, v17);
    while (v18 < *(int *)(a1 + 284));
  }
  unsigned int v19 = sub_1000C085C(*(_DWORD *)(a1 + 288), 4, v17);
  unsigned int v20 = *(_DWORD *)(a1 + 292);
  return sub_1000C085C(v20, 4, v19);
}

uint64_t sub_100020634(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = sub_1000BFC50(a2, "bacm0", a3);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = v4;
  if (sub_1000BFD58(v4, *(_DWORD *)(a1 + 204), v5)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 168), v7)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 172), v8)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 192), v9)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 196), v10)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 176), v11)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 200), v12)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 216), v13)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 220), v14)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 248), v15)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 252), v16)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 280), v17)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 284), v18)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 224), v19)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 228), v20)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 232), v21)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 268), v22)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 264), v23)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 288), v24)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 292), v25)
    && sub_1000BFD58(v6, *(_DWORD *)(a1 + 296), v26)
    && sub_1000BFFFC(v6, *(void ***)(a1 + 160), *(_DWORD *)(a1 + 172), 0x100u, 4, v27)
    && sub_1000BFFFC(v6, *(void ***)(a1 + 184), *(_DWORD *)(a1 + 196), 0x100u, 2, v28)
    && sub_1000BFFFC(v6, *(void ***)(a1 + 208), *(_DWORD *)(a1 + 220), 0x100u, 2, v29)
    && sub_1000BFFFC(v6, *(void ***)(a1 + 240), *(_DWORD *)(a1 + 252), 0x100u, 2, v30)
    && sub_1000BFFFC(v6, *(void ***)(a1 + 272), *(_DWORD *)(a1 + 284), 0x100u, 1, v31)
    && (!*(_DWORD *)(a1 + 204)
     || sub_1000BFFFC(v6, *(void ***)(a1 + 256), *(_DWORD *)(a1 + 264), 0x100u, 2, v32)))
  {
    sub_1000BFD14(v6);
    return 1;
  }
  else
  {
    sub_1000BFD14(v6);
    return 0;
  }
}

uint64_t sub_1000208AC(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9 = sub_1000BEC58(a2, "bacm0", a3, a4, a5, a6, a7, a8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = (uint64_t)v9;
  int v35 = 0;
  int v34 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  int v11 = *(_DWORD *)(a1 + 264);
  uint64_t v12 = *(unsigned int *)(a1 + 268);
  int v24 = 0;
  if (!sub_1000BEE7C((uint64_t)v9, &v25)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, &v35)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, &v34)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, (char *)&v33 + 4)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, &v33)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, (char *)&v32 + 4)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, &v32)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, (char *)&v31 + 4)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, &v31)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, (char *)&v30 + 4)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, &v30)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, (char *)&v29 + 4)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, &v29)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, (char *)&v28 + 4)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, &v28)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, (char *)&v27 + 4)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, &v27)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, (char *)&v26 + 4)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, &v26)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, (char *)&v25 + 4)) {
    goto LABEL_52;
  }
  if (!sub_1000BEECC(v10, &v24)) {
    goto LABEL_52;
  }
  if (*(void *)(a1 + 160)) {
    goto LABEL_52;
  }
  if (*(void *)(a1 + 184)) {
    goto LABEL_52;
  }
  if (*(void *)(a1 + 208)) {
    goto LABEL_52;
  }
  if (*(void *)(a1 + 240)) {
    goto LABEL_52;
  }
  if (*(void *)(a1 + 272)) {
    goto LABEL_52;
  }
  if (*(_DWORD *)(a1 + 204) != v25) {
    goto LABEL_52;
  }
  int v13 = v24;
  if (v13 != sub_1000202A8(a1)) {
    goto LABEL_52;
  }
  int v14 = v25;
  int v15 = v35;
  int v16 = v34;
  *(_DWORD *)(a1 + 168) = v35;
  *(_DWORD *)(a1 + 172) = v16;
  int v17 = v33;
  *(_DWORD *)(a1 + 192) = HIDWORD(v33);
  *(_DWORD *)(a1 + 196) = v17;
  *(_DWORD *)(a1 + 176) = HIDWORD(v32);
  *(_DWORD *)(a1 + 200) = v32;
  *(_DWORD *)(a1 + 204) = v14;
  int v18 = v31;
  *(_DWORD *)(a1 + 216) = HIDWORD(v31);
  *(_DWORD *)(a1 + 220) = v18;
  int v19 = v30;
  *(_DWORD *)(a1 + 248) = HIDWORD(v30);
  *(_DWORD *)(a1 + 252) = v19;
  *(_DWORD *)(a1 + 280) = HIDWORD(v29);
  *(_DWORD *)(a1 + 284) = v29;
  int v20 = v28;
  *(_DWORD *)(a1 + 224) = HIDWORD(v28);
  *(_DWORD *)(a1 + 228) = v20;
  *(_DWORD *)(a1 + 232) = HIDWORD(v27);
  *(_DWORD *)(a1 + 268) = v27;
  *(_DWORD *)(a1 + 264) = HIDWORD(v26);
  *(_DWORD *)(a1 + 288) = v26;
  *(_DWORD *)(a1 + 292) = HIDWORD(v25);
  *(_DWORD *)(a1 + 296) = v24;
  int v23 = 0;
  if (!sub_1000BF88C(v10, (uint64_t *)(a1 + 160), v15, 256, 4, &v23)
    || *(void *)(a1 + 160) && v23 != *(_DWORD *)(a1 + 172))
  {
    goto LABEL_52;
  }
  int v23 = 0;
  if (!sub_1000BF88C(v10, (uint64_t *)(a1 + 184), *(_DWORD *)(a1 + 192), 256, 2, &v23)
    || *(void *)(a1 + 184) && v23 != *(_DWORD *)(a1 + 196))
  {
    goto LABEL_52;
  }
  int v23 = 0;
  if (!sub_1000BF88C(v10, (uint64_t *)(a1 + 208), *(_DWORD *)(a1 + 216), 256, 2, &v23)
    || *(void *)(a1 + 208) && v23 != *(_DWORD *)(a1 + 220))
  {
    goto LABEL_52;
  }
  int v23 = 0;
  if (!sub_1000BF88C(v10, (uint64_t *)(a1 + 240), *(_DWORD *)(a1 + 248), 256, 2, &v23)
    || *(void *)(a1 + 240) && v23 != *(_DWORD *)(a1 + 252))
  {
    goto LABEL_52;
  }
  int v23 = 0;
  if (!sub_1000BF88C(v10, (uint64_t *)(a1 + 272), *(_DWORD *)(a1 + 280), 256, 1, &v23)
    || *(void *)(a1 + 272) && v23 != *(_DWORD *)(a1 + 284))
  {
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a1 + 204)) {
    goto LABEL_51;
  }
  if (v11 >= 1)
  {
    sub_1000C3F24(*(void *)(a1 + 256), v12, v11);
    *(void *)(a1 + 256) = 0;
  }
  int v23 = 0;
  if (sub_1000BF88C(v10, (uint64_t *)(a1 + 256), *(_DWORD *)(a1 + 268), 256, 2, &v23)
    && (!*(void *)(a1 + 256) || v23 == *(_DWORD *)(a1 + 264)))
  {
LABEL_51:
    uint64_t v21 = 1;
  }
  else
  {
LABEL_52:
    uint64_t v21 = 0;
  }
  sub_1000BED3C(v10);
  return v21;
}

uint64_t sub_100020D10(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v8 = sub_1000BEC58(a1, "bacm0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C33A0(328);
  if (!v10)
  {
    sub_1000BED3C(v9);
    return v10;
  }
  if (!sub_1000BEE7C(v9, (_DWORD *)v10)) {
    goto LABEL_48;
  }
  if (!sub_1000BEE7C(v9, (_DWORD *)(v10 + 4))) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v9, (void *)(v10 + 8))) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v9, (void *)(v10 + 12))) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v9, (void *)(v10 + 32))) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v9, (void *)(v10 + 56))) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v9, (void *)(v10 + 60))) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v9, (void *)(v10 + 64))) {
    goto LABEL_48;
  }
  int v11 = (_DWORD *)(v10 + 88);
  if (!sub_1000BEECC(v9, (void *)(v10 + 88))) {
    goto LABEL_48;
  }
  uint64_t v12 = (_DWORD *)(v10 + 92);
  if (!sub_1000BEECC(v9, (void *)(v10 + 92))) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v9, (void *)(v10 + 168))) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v9, (void *)(v10 + 216))) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v9, (void *)(v10 + 248))) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v9, (void *)(v10 + 280))) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v9, (void *)(v10 + 268))) {
    goto LABEL_48;
  }
  int v22 = 0;
  int v13 = (void *)(v10 + 24);
  if (!sub_1000BF078(v9, 1, (uint64_t *)(v10 + 24), &v22)) {
    goto LABEL_48;
  }
  if (*v13)
  {
    if (v22 != *(_DWORD *)(v10 + 32)) {
      goto LABEL_48;
    }
    *(void *)(v10 + 16) = *v13;
  }
  int v22 = 0;
  int v14 = (void *)(v10 + 48);
  if (!sub_1000BF078(v9, 2, (uint64_t *)(v10 + 48), &v22)) {
    goto LABEL_48;
  }
  if (*v14)
  {
    if (v22 != *(_DWORD *)(v10 + 56)) {
      goto LABEL_48;
    }
    *(void *)(v10 + 40) = *v14;
  }
  int v22 = 0;
  int v15 = (void *)(v10 + 80);
  if (!sub_1000BF078(v9, 4, (uint64_t *)(v10 + 80), &v22)) {
    goto LABEL_48;
  }
  if (*v15)
  {
    if (v22 != *v11) {
      goto LABEL_48;
    }
    *(void *)(v10 + 72) = *v15;
  }
  int v22 = 0;
  int v16 = (void *)(v10 + 104);
  if (!sub_1000BF078(v9, 2, (uint64_t *)(v10 + 104), &v22)) {
    goto LABEL_48;
  }
  if (*v16)
  {
    if (v22 != *v12) {
      goto LABEL_48;
    }
    *(void *)(v10 + 96) = *v16;
  }
  int v22 = 0;
  int v17 = (void *)(v10 + 136);
  if (!sub_1000BF078(v9, 1, (uint64_t *)(v10 + 136), &v22)) {
    goto LABEL_48;
  }
  if (*v17)
  {
    if (v22 != *v11) {
      goto LABEL_48;
    }
    *(void *)(v10 + 128) = *v17;
  }
  int v22 = 0;
  int v18 = (void *)(v10 + 152);
  if (!sub_1000BF078(v9, 2, (uint64_t *)(v10 + 152), &v22)) {
    goto LABEL_48;
  }
  if (*v18)
  {
    if (v22 != *v11) {
      goto LABEL_48;
    }
    *(void *)(v10 + 144) = *v18;
  }
  int v22 = 0;
  int v19 = (void *)(v10 + 120);
  if (!sub_1000BF078(v9, 1, (uint64_t *)(v10 + 120), &v22)) {
    goto LABEL_48;
  }
  if (!*v19) {
    goto LABEL_46;
  }
  if (v22 != *v12)
  {
LABEL_48:
    sub_1000BED3C(v9);
    goto LABEL_49;
  }
  *(void *)(v10 + 112) = *v19;
LABEL_46:
  int v20 = sub_10001E7E8(v10);
  sub_1000BED3C(v9);
  if (!v20)
  {
LABEL_49:
    sub_10001EA20(v10);
    return 0;
  }
  *(_DWORD *)(v10 + 296) = sub_1000202A8(v10);
  return v10;
}

uint64_t sub_100021064(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C321C(*(void *)(result + 32));
    sub_1000C321C(*(void *)(v1 + 48));
    sub_1000C321C(*(void *)(v1 + 56));
    return sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_1000210B8(int *a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v10 = a1[1];
  uint64_t v11 = *a1;
  uint64_t v12 = (int)v10;
  int v199 = a1[2];
  uint64_t v13 = *a1;
  signed int v198 = a5;
  if (!a1[4])
  {
    uint64_t v33 = (int32x4_t *)*((void *)a1 + 7);
    if (a6 || (int)v11 <= a5)
    {
      if (v199 >= 2 * (int)v10)
      {
        if ((int)v13 >= 0) {
          int v110 = *a1;
        }
        else {
          int v110 = v13 + 1;
        }
        int v36 = v110 >> 1;
        goto LABEL_111;
      }
      int v35 = 10;
    }
    else
    {
      if ((int)v13 >= 0) {
        int v34 = *a1;
      }
      else {
        int v34 = v13 + 1;
      }
      int v35 = 10;
      if (a1[3])
      {
        int v36 = v34 >> 1;
        if (v34 >> 1 <= a5 && v199 >= 2 * (int)v10)
        {
LABEL_111:
          int v197 = *a1;
          int v196 = a3;
          int v111 = (a4 & ((a3 - v36) >> 31)) + a3 - v36;
          int v112 = *a1;
          bzero(v33, 4 * (int)v10);
          LODWORD(v11) = v112;
          if (v112 <= 1)
          {
            int v35 = 10;
            LODWORD(v13) = v197;
            a5 = v198;
LABEL_113:
            if ((int)v10 >= 1)
            {
              uint64_t v113 = (_WORD *)(*(void *)(a2 + 8 * v111) + 2 * (int)v10);
              uint64_t v114 = v10;
              uint64_t v115 = v33;
              do
              {
                __int32 v116 = v115->i32[0];
                uint64_t v115 = (int32x4_t *)((char *)v115 + 4);
                *v113++ = v116 / v35;
                --v114;
              }
              while (v114);
            }
            a3 = v196;
            goto LABEL_117;
          }
          LODWORD(v13) = v197;
          a5 = v198;
          int32x2_t v124 = (int16x4_t *)((char *)v33 + 4 * v10);
          uint64_t v125 = 2 * v10;
          uint64_t v126 = 2 * (v10 & 0xFFFFFFF0);
          unsigned int v127 = 1;
          int v35 = 10;
          while (1)
          {
            int v128 = v127 + v111;
            int v129 = a1[3];
            if (a6 && v129 && v128 >= (v198 - 1) % a4) {
              int v128 = (v198 - 1) % a4;
            }
            if ((int)v10 < 1) {
              goto LABEL_129;
            }
            if ((int)(v127 + v36) > v198 && v129 != 0 && a6 == 0) {
              int v132 = 0;
            }
            else {
              int v132 = v111 - v127;
            }
            int32x4_t v133 = *(int16x4_t **)(a2 + 8 * ((a4 & (v132 >> 31)) + v132));
            if (v128 >= a4) {
              int v134 = a4;
            }
            else {
              int v134 = 0;
            }
            int32x4_t v135 = *(int16x4_t **)(a2 + 8 * (v128 - v134));
            if (v10 >= 0x10)
            {
              uint64_t v136 = 0;
              BOOL v143 = v33 < (int32x4_t *)((char *)v133 + v125) && v133 < v124;
              if ((v135 >= v124 || v33 >= (int32x4_t *)((char *)v135 + v125)) && !v143)
              {
                float32x4x2_t v145 = (__int16 *)((char *)v133 + v126);
                float32x4x2_t v146 = (__int16 *)((char *)v135 + v126);
                int32x4_t v147 = vdupq_n_s32(v127);
                int v148 = v135 + 2;
                v149 = v133 + 2;
                uint64_t v150 = v10 & 0xFFFFFFF0;
                int32x4_t v151 = v33 + 2;
                do
                {
                  int16x8_t v152 = *(int16x8_t *)v148[-2].i8;
                  int16x8_t v153 = *(int16x8_t *)v149[-2].i8;
                  int32x4_t v154 = vmlaq_s32(v151[-1], vsubl_high_s16(v152, v153), v147);
                  int32x4_t v155 = vmlaq_s32(*v151, vsubl_s16(*v148, *v149), v147);
                  int32x4_t v156 = vmlaq_s32(v151[1], vsubl_high_s16(*(int16x8_t *)v148->i8, *(int16x8_t *)v149->i8), v147);
                  v151[-2] = vmlaq_s32(v151[-2], vsubl_s16(*(int16x4_t *)v152.i8, *(int16x4_t *)v153.i8), v147);
                  v151[-1] = v154;
                  *int32x4_t v151 = v155;
                  v151[1] = v156;
                  v151 += 4;
                  v148 += 4;
                  v149 += 4;
                  v150 -= 16;
                }
                while (v150);
                uint64_t v136 = v10 & 0x7FFFFFF0;
                int32x4_t v133 = (int16x4_t *)v145;
                int32x4_t v135 = (int16x4_t *)v146;
                if ((v10 & 0xFFFFFFF0) == v10) {
                  goto LABEL_129;
                }
              }
            }
            else
            {
              uint64_t v136 = 0;
            }
            int32x4_t v137 = &v33->i32[v136];
            uint64_t v138 = v10 - v136;
            do
            {
              int v140 = v135->i16[0];
              int32x4_t v135 = (int16x4_t *)((char *)v135 + 2);
              int v139 = v140;
              int v141 = v133->i16[0];
              int32x4_t v133 = (int16x4_t *)((char *)v133 + 2);
              *v137++ += (v139 - v141) * v127;
              --v138;
            }
            while (v138);
LABEL_129:
            if (v127 == 1) {
              int v35 = 2;
            }
            else {
              v35 += 2 * v127 * v127;
            }
            BOOL v48 = v127++ == v36;
            if (v48) {
              goto LABEL_113;
            }
          }
        }
      }
    }
LABEL_117:
    if (!a6 && 2 * (int)v11 > a5)
    {
      uint64_t result = 0;
      if (!a1[3] || (int)v13 > a5) {
        return result;
      }
    }
    if (v199 < 3 * (int)v10) {
      return 1;
    }
    int v117 = a3 - v13;
    int v118 = v13;
    int v119 = v11;
    bzero(v33, 4 * (int)v10);
    int v120 = v118;
    int v121 = (a4 & (v117 >> 31)) + v117;
    if (v119 <= 1)
    {
LABEL_123:
      if ((int)v10 >= 1)
      {
        int32x2_t v122 = (_WORD *)(*(void *)(a2 + 8 * v121) + 4 * v10);
        do
        {
          __int32 v123 = v33->i32[0];
          uint64_t v33 = (int32x4_t *)((char *)v33 + 4);
          *v122++ = v123 / v35;
          --v10;
        }
        while (v10);
      }
      return 1;
    }
    float64x2_t v157 = &v33->i16[2 * v10];
    uint64_t v158 = 2 * ((int)v10 + v10);
    uint64_t v159 = 2 * (v10 & 0xFFFFFFF0);
    uint64_t v160 = 2 * (int)v10;
    uint64_t v161 = v160 + 16;
    unsigned int v162 = 1;
    while (1)
    {
      int v163 = v162 + v121;
      int v164 = a1[3];
      if (a6)
      {
        signed int v165 = v198;
        if (v164 && v163 >= (v198 - 1) % a4) {
          int v163 = (v198 - 1) % a4;
        }
        if ((int)v10 < 1) {
          goto LABEL_172;
        }
      }
      else
      {
        signed int v165 = v198;
        if ((int)v10 < 1) {
          goto LABEL_172;
        }
      }
      if ((int)(v162 + v120) > v165 && v164 != 0 && a6 == 0) {
        int v168 = 0;
      }
      else {
        int v168 = v117 - v162;
      }
      uint64_t v169 = *(void *)(a2 + 8 * ((a4 & (v168 >> 31)) + v168));
      v170 = (__int16 *)(v169 + v160);
      if (v163 >= a4) {
        int v171 = a4;
      }
      else {
        int v171 = 0;
      }
      uint64_t v172 = *(void *)(a2 + 8 * (v163 - v171));
      double v173 = (__int16 *)(v172 + v160);
      if (v10 >= 0x10)
      {
        uint64_t v174 = 0;
        BOOL v181 = (unint64_t)v33 < v169 + v158 && v170 < v157;
        if ((v173 >= v157 || (unint64_t)v33 >= v172 + v158) && !v181)
        {
          v170 = (__int16 *)((char *)v170 + v159);
          double v173 = (__int16 *)((char *)v173 + v159);
          int32x4_t v183 = vdupq_n_s32(v162);
          BOOL v184 = (int16x4_t *)(v169 + v161);
          float64x2_t v185 = (int16x4_t *)(v172 + v161);
          uint16x4_t v186 = v33 + 2;
          uint64_t v187 = v10 & 0xFFFFFFF0;
          do
          {
            int16x8_t v188 = *(int16x8_t *)v185[-2].i8;
            int16x8_t v189 = *(int16x8_t *)v184[-2].i8;
            int32x4_t v190 = vmlaq_s32(v186[-1], vsubl_high_s16(v188, v189), v183);
            int32x4_t v191 = vmlaq_s32(*v186, vsubl_s16(*v185, *v184), v183);
            int32x4_t v192 = vmlaq_s32(v186[1], vsubl_high_s16(*(int16x8_t *)v185->i8, *(int16x8_t *)v184->i8), v183);
            v186[-2] = vmlaq_s32(v186[-2], vsubl_s16(*(int16x4_t *)v188.i8, *(int16x4_t *)v189.i8), v183);
            v186[-1] = v190;
            *uint16x4_t v186 = v191;
            v186[1] = v192;
            v186 += 4;
            v184 += 4;
            v185 += 4;
            v187 -= 16;
          }
          while (v187);
          uint64_t v174 = v10 & 0x7FFFFFF0;
          if ((v10 & 0xFFFFFFF0) == v10) {
            goto LABEL_172;
          }
        }
      }
      else
      {
        uint64_t v174 = 0;
      }
      double v175 = &v33->i32[v174];
      uint64_t v176 = v10 - v174;
      do
      {
        int v178 = *v173++;
        int v177 = v178;
        int v179 = *v170++;
        *v175++ += (v177 - v179) * v162;
        --v176;
      }
      while (v176);
LABEL_172:
      BOOL v48 = v162++ == v119 >> 1;
      if (v48) {
        goto LABEL_123;
      }
    }
  }
  if (a6 || 2 * (int)v11 <= a5 || (uint64_t result = 0, a1[3]) && (int)v13 <= a5)
  {
    int v15 = (a4 & ((a3 - (int)v13) >> 31)) + a3 - v13;
    uint64_t v16 = 2 * (int)v10;
    if (v199 >= 2 * (int)v10 && (int)v10 >= 1)
    {
      int v17 = *(__int16 **)(a2 + 8 * v15);
      int v18 = *(__int16 *)(*((void *)a1 + 3) + 2 * v11);
      uint64_t v19 = v10;
      int v20 = v10;
      do
      {
        v17[v19++] = (*v17 * v18 + 0x2000) >> 14;
        --v20;
      }
      while (v20);
    }
    BOOL v21 = v199 < 3 * (int)v10 || (int)v10 < 1;
    char v22 = v21;
    if (!v21)
    {
      LODWORD(v23) = 0;
      int v24 = *(int16x8_t **)(a2 + 8 * v15);
      uint64_t v25 = &v24->i16[2 * (int)v10];
      unsigned int v26 = *(__int16 *)(*((void *)a1 + 5) + 2 * v11);
      if (v10 >= 0x10 && (v16 & 0x7FFFFFFFFFFFFFF0) != 0)
      {
        uint64_t v23 = v10 & 0xFFFFFFF0;
        v25 += v23;
        uint64_t v27 = &v24->i16[v23];
        int16x8_t v28 = vdupq_n_s16(v26);
        uint64_t v29 = v23;
        do
        {
          uint64_t v30 = (int16x8_t *)((char *)v24 + 4 * (int)v10);
          int16x8_t v31 = *v24;
          int16x8_t v32 = v24[1];
          v24 += 2;
          *uint64_t v30 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v31.i8), 0xEuLL), vmull_high_s16(v28, v31), 0xEuLL);
          v30[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v32.i8), 0xEuLL), vmull_high_s16(v28, v32), 0xEuLL);
          v29 -= 16;
        }
        while (v29);
        if (v23 == v10) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v27 = *(__int16 **)(a2 + 8 * v15);
      }
      int v38 = v10 - v23;
      do
      {
        int v39 = *v27++;
        *v25++ = (v39 * v26 + 0x2000) >> 14;
        --v38;
      }
      while (v38);
    }
LABEL_40:
    if ((int)v11 >= 1)
    {
      uint64_t v40 = v11;
      uint64_t v41 = a5;
      uint64_t v42 = v13 + 1;
      uint64_t v43 = (v10 - 1);
      uint64_t v195 = 2 * ((int)v16 + v43) + 2;
      uint64_t v44 = 2 * v43 + 2;
      uint64_t v193 = 2 * ((int)v10 + v43) + 2;
      uint64_t v45 = v10 & 0xFFFFFFF8;
      uint64_t v194 = v45;
      uint64_t v46 = 1;
      while (1)
      {
        int v47 = a1[3];
        BOOL v48 = v47 == 0;
        if (v47) {
          BOOL v49 = v46 > v41;
        }
        else {
          BOOL v49 = 0;
        }
        BOOL v50 = v48 || a6 != 0;
        if (a6 != 0 && v49) {
          int v51 = a5;
        }
        else {
          int v51 = v46;
        }
        int v52 = v51 + v15;
        if (v52 >= a4) {
          int v53 = a4;
        }
        else {
          int v53 = 0;
        }
        int v54 = v52 - v53;
        uint64_t v55 = v46 + v40;
        if (v46 + v40 <= v41 || v50) {
          int v57 = v15 - v46;
        }
        else {
          int v57 = 0;
        }
        int v58 = (a4 & (v57 >> 31)) + v57;
        if (v199 >= (int)v16)
        {
          if ((int)v10 < 1) {
            goto LABEL_42;
          }
          uint64_t v59 = *(void *)(a2 + 8 * v15);
          uint64_t v60 = *((void *)a1 + 3);
          unsigned int v61 = *(__int16 *)(v60 + 2 * (v40 - v46));
          unsigned int v62 = *(__int16 *)(v60 + 2 * v55);
          uint64_t v63 = v12;
          uint64_t v64 = (int16x8_t *)(v59 + 2 * v12);
          int v65 = *(int16x8_t **)(a2 + 8 * v58);
          uint64_t v66 = *(int16x8_t **)(a2 + 8 * v54);
          if (v10 < 8)
          {
            int v67 = 0;
LABEL_81:
            int32x4_t v72 = v64;
            uint64_t v73 = *(__int16 **)(a2 + 8 * v58);
            uint64_t v74 = *(__int16 **)(a2 + 8 * v54);
            uint64_t v12 = v63;
            a5 = v198;
LABEL_82:
            int v81 = v10 - v67;
            do
            {
              int v82 = *v74++;
              int v83 = v82 * v62;
              int v84 = *v73++;
              v72->i16[0] += (4 * (v83 + v84 * v61) + 0x8000) >> 16;
              int32x4_t v72 = (int16x8_t *)((char *)v72 + 2);
              --v81;
            }
            while (v81);
            goto LABEL_84;
          }
          int v67 = 0;
          unint64_t v68 = v59 + v193;
          BOOL v70 = v64 < (int16x8_t *)&v65->i8[v44] && (unint64_t)v65 < v68;
          BOOL v71 = (unint64_t)v66 >= v68 || v64 >= (int16x8_t *)&v66->i8[v44];
          if (!v71 || v70) {
            goto LABEL_81;
          }
          int32x4_t v72 = (int16x8_t *)((char *)v64 + v194 * 2);
          uint64_t v73 = &v65->i16[v194];
          uint64_t v74 = &v66->i16[v194];
          uint64_t v75 = v10 & 0xFFFFFFF8;
          do
          {
            int16x8_t v76 = *v66++;
            int16x8_t v77 = v76;
            int16x8_t v78 = vdupq_n_s16(v62);
            int16x8_t v79 = *v65++;
            int16x8_t v80 = vdupq_n_s16(v61);
            *uint64_t v64 = vaddq_s16(*v64, vraddhn_high_s32(vraddhn_s32(vshlq_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v79.i8), *(int16x4_t *)v78.i8, *(int16x4_t *)v77.i8), 2uLL), (int32x4_t)0), vshlq_n_s32(vmlal_high_s16(vmull_high_s16(v80, v79), v78, v77), 2uLL), (int32x4_t)0));
            ++v64;
            v75 -= 8;
          }
          while (v75);
          int v67 = v10 & 0x7FFFFFF8;
          uint64_t v12 = v63;
          a5 = v198;
          if (v45 != v10) {
            goto LABEL_82;
          }
        }
LABEL_84:
        if ((v22 & 1) == 0)
        {
          uint64_t v85 = *(void *)(a2 + 8 * v15);
          uint64_t v86 = *((void *)a1 + 5);
          unsigned int v87 = *(__int16 *)(v86 + 2 * (v40 - v46));
          unsigned int v88 = *(__int16 *)(v86 + 2 * v55);
          int8x16_t v89 = (int16x8_t *)(v85 + 2 * (int)v16);
          uint8x16_t v90 = *(int16x8_t **)(a2 + 8 * v58);
          int16x8_t v91 = *(int16x8_t **)(a2 + 8 * v54);
          if (v10 < 8)
          {
            int v92 = 0;
            goto LABEL_103;
          }
          int v92 = 0;
          unint64_t v93 = v85 + v195;
          BOOL v95 = v89 < (int16x8_t *)&v90->i8[v44] && (unint64_t)v90 < v93;
          BOOL v96 = (unint64_t)v91 >= v93 || v89 >= (int16x8_t *)&v91->i8[v44];
          if (!v96 || v95)
          {
LABEL_103:
            uint16x8_t v97 = (__int16 *)(v85 + 2 * (int)v16);
            int8x16_t v98 = v90;
            uint16x8_t v99 = v91;
          }
          else
          {
            uint16x8_t v97 = &v89->i16[v194];
            int8x16_t v98 = (int16x8_t *)((char *)v90 + v194 * 2);
            uint16x8_t v99 = (int16x8_t *)((char *)v91 + v194 * 2);
            uint64_t v100 = v10 & 0xFFFFFFF8;
            do
            {
              int16x8_t v101 = *v91++;
              int16x8_t v102 = v101;
              int16x8_t v103 = vdupq_n_s16(v88);
              int16x8_t v104 = *v90++;
              int16x8_t v105 = vdupq_n_s16(v87);
              *int8x16_t v89 = vaddq_s16(*v89, vraddhn_high_s32(vraddhn_s32(vshlq_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v104.i8), *(int16x4_t *)v103.i8, *(int16x4_t *)v102.i8), 2uLL), (int32x4_t)0), vshlq_n_s32(vmlal_high_s16(vmull_high_s16(v105, v104), v103, v102), 2uLL), (int32x4_t)0));
              ++v89;
              v100 -= 8;
            }
            while (v100);
            int v92 = v10 & 0xFFFFFFF8;
            if (v45 == v10) {
              goto LABEL_42;
            }
          }
          int v106 = v10 - v92;
          do
          {
            int v107 = v99->i16[0];
            uint16x8_t v99 = (int16x8_t *)((char *)v99 + 2);
            int v108 = v107 * v88;
            int v109 = v98->i16[0];
            int8x16_t v98 = (int16x8_t *)((char *)v98 + 2);
            *v97++ += (4 * (v108 + v109 * v87) + 0x8000) >> 16;
            --v106;
          }
          while (v106);
        }
LABEL_42:
        if (++v46 == v42) {
          return 1;
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_1000219EC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v8 = sub_1000BEC58(a1, "bdf0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C33A0(64);
  if (!v10) {
    goto LABEL_20;
  }
  if (sub_1000BEECC(v9, (void *)v10)
    && sub_1000BEECC(v9, (void *)(v10 + 4))
    && sub_1000BEECC(v9, (void *)(v10 + 8))
    && sub_1000BEE7C(v9, (_DWORD *)(v10 + 12))
    && sub_1000BEE7C(v9, (_DWORD *)(v10 + 16)))
  {
    if (*(_DWORD *)(v10 + 16))
    {
      uint64_t v11 = (uint64_t *)(v10 + 32);
      int v12 = *(_DWORD *)v10;
      int v20 = 0;
      if (sub_1000BF078(v9, 2, (uint64_t *)(v10 + 32), &v20))
      {
        int v13 = (2 * v12) | 1;
        uint64_t v14 = *v11;
        if (!*v11 || v20 == v13)
        {
          if (v14) {
            *(void *)(v10 + 24) = v14;
          }
          int v19 = 0;
          int v15 = (uint64_t *)(v10 + 48);
          if (sub_1000BF078(v9, 2, (uint64_t *)(v10 + 48), &v19))
          {
            uint64_t v16 = *v15;
            if (!*v15 || v19 == v13)
            {
              if (v16) {
                *(void *)(v10 + 40) = v16;
              }
              goto LABEL_20;
            }
          }
        }
      }
      goto LABEL_21;
    }
    uint64_t v17 = sub_1000C33A0(4 * *(int *)(v10 + 4));
    *(void *)(v10 + 56) = v17;
    if (v17)
    {
LABEL_20:
      sub_1000BED3C(v9);
      return v10;
    }
  }
LABEL_21:
  sub_1000C321C(*(void *)(v10 + 32));
  sub_1000C321C(*(void *)(v10 + 48));
  sub_1000C321C(*(void *)(v10 + 56));
  sub_1000C321C(v10);
  return 0;
}

uint64_t sub_100021B80(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100021B8C(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v17 = sub_10005A750(a1);
  uint64_t result = sub_10005A788(a1);
  if (a4 >= 0)
  {
    if (a2[5] + (((a2[5] << 14) + 0x8000) >> 16) < 0)
    {
      *((_WORD *)a2 + 12) = 0;
      *((void *)a2 + 1) = 0;
      a2[4] = 0;
      a2[5] = 0;
      return result;
    }
    int v19 = a2[3];
    unsigned int v20 = v19 >= 0 ? a2[3] : -v19;
    if (!(v20 >> 15))
    {
      int v21 = a2[4];
      if (v21 <= 1073741822)
      {
        int v22 = a2[2];
        if (v22 != 0x7FFFFFFF)
        {
          int v23 = a2[1];
          if (v23 >= 1)
          {
            int v24 = 0;
            int v25 = 0;
            int v26 = 0;
            int v27 = 0;
            int v28 = *a2;
            uint64_t result = (*a2 - 1);
            int v29 = result + 2 * *a2;
            int v30 = -1;
            while (1)
            {
              if (v17 < 1)
              {
                int v35 = result + 2 * v28;
                int v36 = v29 % v28;
                uint64_t v37 = a3 + 2 * v29;
                if (v29 % v28 >= 1) {
                  goto LABEL_28;
                }
              }
              else
              {
                uint64_t v34 = 0;
                int v35 = result + 2 * v28;
                do
                {
                  if (*(_DWORD *)(a7 + 4 * v34) > v30 && *(_DWORD *)(a7 + 4 * v34) < v35)
                  {
                    int v35 = *(_DWORD *)(a7 + 4 * v34);
                    int v24 = v34;
                  }
                  ++v34;
                }
                while (v17 != v34);
                int v36 = v35 % v28;
                uint64_t v37 = a3 + 2 * v35;
                if (v35 % v28 >= 1)
                {
LABEL_28:
                  if (v36 >= 6) {
                    int v38 = 6;
                  }
                  else {
                    int v38 = v36;
                  }
                  int v39 = (v38 - 1) * *(__int16 *)(v37 - 2);
                  if (v36 >= (int)result) {
                    goto LABEL_12;
                  }
LABEL_35:
                  if (v36 >= 4) {
                    int v40 = 4;
                  }
                  else {
                    int v40 = v36;
                  }
                  v39 += *(__int16 *)(v37 + 2) * ~v40;
                  goto LABEL_12;
                }
              }
              int v39 = 0;
              if (v36 < (int)result) {
                goto LABEL_35;
              }
LABEL_12:
              if (v39 >= 0x7FFF) {
                int v31 = 0x7FFF;
              }
              else {
                int v31 = v39;
              }
              if (v31 <= -32768) {
                int v31 = -32768;
              }
              int v32 = v31 * *(__int16 *)(a5 + 2 * v35);
              int v33 = (v32 + (((v32 >> 31) | 1) << (a6 - 1))) >> a6;
              if (v33 >= 0x7FFF) {
                int v33 = 0x7FFF;
              }
              if (v33 <= -32768) {
                int v33 = -32768;
              }
              v26 += (*(unsigned __int8 *)(a9 + v24) - *(unsigned __int8 *)(a8 + v24)) * v33;
              v25 += v33 * v33;
              ++v27;
              int v30 = v35;
              if (v27 == v23)
              {
                unsigned int v41 = (v25 + 16) >> 5;
                if (v26 < 0) {
                  int v42 = -16;
                }
                else {
                  int v42 = 16;
                }
                int v43 = (v42 + v26) >> 5;
                int v22 = a2[2];
                goto LABEL_44;
              }
            }
          }
          unsigned int v41 = 0;
          int v43 = 0;
LABEL_44:
          int v44 = v43 + v19;
          a2[3] = v44;
          if (v44 >= 0) {
            unsigned int v45 = v44;
          }
          else {
            unsigned int v45 = -v44;
          }
          if (!(v45 >> 15))
          {
            int v46 = v41 + v21;
            a2[4] = v46;
            a2[2] = v22 + 1;
            if (v22 < 7 || v46 < 1)
            {
              *((_WORD *)a2 + 12) = 0;
            }
            else
            {
              int v47 = (v44 << 15) / v46;
              if (v47 >= 0x7FFF) {
                int v47 = 0x7FFF;
              }
              if (v47 <= -32768) {
                LOWORD(v47) = 0x8000;
              }
              *((_WORD *)a2 + 12) = v47;
            }
          }
        }
      }
    }
  }
  return result;
}

void *sub_100021E7C(void *result, int *a2, uint64_t a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_WORD *)a2 + 12))
  {
    uint64_t v9 = (int *)a3;
    uint64_t v11 = (uint64_t)result;
    unint64_t v12 = sub_1000CD3E8(6 * *a2, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    int v13 = (char *)v12;
    if (*a2 >= 1)
    {
      uint64_t v14 = 0;
      do
      {
        *(_WORD *)(v12 + 2 * v14) = a4[v14];
        ++v14;
      }
      while (v14 < 3 * *a2);
    }
    int v15 = sub_10005A750(v11);
    if (v15 >= 1)
    {
      uint64_t v16 = v15;
      while (1)
      {
        uint64_t v20 = *v9++;
        uint64_t v19 = v20;
        int v21 = *a2;
        int v22 = (int)v20 % *a2;
        if (v22 >= 1) {
          break;
        }
        int v25 = 0;
        if (v22 < v21 - 1) {
          goto LABEL_23;
        }
LABEL_7:
        uint64_t v17 = 2 * v19;
        int v18 = *(__int16 *)&v13[v17] + (v25 >> 15);
        if (v18 >= 0x7FFF) {
          int v18 = 0x7FFF;
        }
        if (v18 <= -32768) {
          LOWORD(v18) = 0x8000;
        }
        *(_WORD *)&v13[v17] = v18;
        if (!--v16) {
          goto LABEL_30;
        }
      }
      if (v22 >= 6) {
        int v23 = 6;
      }
      else {
        int v23 = v22;
      }
      int v24 = (v23 - 1) * *((__int16 *)a2 + 12);
      if (v24 >= 0x7FFF) {
        int v24 = 0x7FFF;
      }
      if (v24 <= -32768) {
        int v24 = -32768;
      }
      int v25 = v24 * a4[(int)v19 - 1];
      if (v22 >= v21 - 1) {
        goto LABEL_7;
      }
LABEL_23:
      if (v22 >= 4) {
        int v22 = 4;
      }
      int v26 = *((__int16 *)a2 + 12) + *((__int16 *)a2 + 12) * v22;
      if (v26 >= 0x7FFF) {
        int v26 = 0x7FFF;
      }
      if (v26 <= -32768) {
        int v26 = -32768;
      }
      v25 -= v26 * a4[(int)v19 + 1];
      goto LABEL_7;
    }
LABEL_30:
    j__memmove(a4, v13, 6 * *a2);
    uint64_t v27 = 6 * *a2;
    return sub_1000CD4D0(v13, v27);
  }
  return result;
}

uint64_t sub_100022038(uint64_t result, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _WORD *a6)
{
  if (result)
  {
    *a2 = *(_DWORD *)(result + 8);
    *a3 = *(_DWORD *)(result + 12);
    *a4 = *(_DWORD *)(result + 16);
    *a5 = *(_DWORD *)(result + 20);
    *a6 = *(_WORD *)(result + 24);
  }
  else
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
    *a5 = 0;
    *a6 = 0;
  }
  return result;
}

uint64_t sub_100022080(uint64_t result, int a2, int a3, int a4, int a5, __int16 a6)
{
  if (result)
  {
    *(_DWORD *)(result + 8) = a2;
    *(_DWORD *)(result + 12) = a3;
    *(_DWORD *)(result + 16) = a4;
    *(_DWORD *)(result + 20) = a5;
    *(_WORD *)(result + 24) = a6;
  }
  return result;
}

uint64_t sub_100022094(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 4);
  }
  return result;
}

uint64_t sub_1000220A0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v8 = sub_1000BEC58(a1, "bcw0", a2, a4, a5, a6, a7, a8);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    uint64_t v10 = sub_1000C33A0(28);
    if (!v10)
    {
      sub_1000BED3C(v9);
      return 0;
    }
    if (sub_1000BEECC(v9, (void *)v10))
    {
      BOOL v11 = sub_1000BEECC(v9, (void *)(v10 + 4));
      sub_1000BED3C(v9);
      if (v11)
      {
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
        *(_WORD *)(v10 + 24) = 0;
        return v10;
      }
    }
    else
    {
      sub_1000BED3C(v9);
    }
    sub_1000C321C(v10);
  }
  return 0;
}

uint64_t sub_100022168(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C321C(*(void *)(result + 80));
    sub_1000C321C(v1[9]);
    sub_1000C321C(v1[3]);
    sub_1000C321C(v1[7]);
    sub_1000C321C(v1[8]);
    sub_1000C321C(v1[1]);
    sub_1000C321C(v1[5]);
    return sub_1000C321C((uint64_t)v1);
  }
  return result;
}

void *sub_1000221DC(uint64_t a1)
{
  uint64_t result = memcpy(*(void **)a1, *(const void **)(a1 + 32), 2 * *(int *)(a1 + 104));
  *(_DWORD *)(a1 + 120) = 0;
  if (qword_100101CC0)
  {
    if (*(_DWORD *)(qword_100101CC0 + 2448))
    {
      if (!*(_DWORD *)(qword_100101CC0 + 2908))
      {
        *(_DWORD *)(a1 + 120) = 1;
        uint64_t result = memcpy(*(void **)(a1 + 16), *(const void **)(a1 + 48), 2 * *(int *)(a1 + 104));
        if (*(int *)(a1 + 104) >= 1)
        {
          uint64_t v3 = 0;
          do
          {
            int v4 = *(__int16 *)(*(void *)a1 + 2 * v3);
            *(_DWORD *)(*(void *)(a1 + 72) + 4 * v3) = v4 * v4
                                                       + *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v3)
                                                       * *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v3);
            ++v3;
          }
          while (v3 < *(int *)(a1 + 104));
        }
      }
    }
  }
  return result;
}

uint64_t sub_100022294(uint64_t result)
{
  int v1 = qword_100101CC0;
  if (qword_100101CC0) {
    int v1 = *(_DWORD *)(qword_100101CC0 + 2448);
  }
  *(_DWORD *)(result + 120) = v1;
  return result;
}

void sub_1000222B0(uint64_t a1, int a2)
{
  if (a2)
  {
    *(void *)(a1 + 132) = 0x100000001;
    bzero(*(void **)(a1 + 64), 4 * *(int *)(a1 + 104));
    *(_DWORD *)(a1 + 112) = 0;
    if (*(_DWORD *)(a1 + 120))
    {
      bzero(*(void **)(a1 + 72), 4 * *(int *)(a1 + 104));
      bzero(*(void **)(a1 + 80), 2 * *(int *)(a1 + 104));
    }
    *(_DWORD *)(a1 + 140) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 132) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 140) = 0;
  }
}

uint64_t sub_100022330(uint64_t result, uint64_t a2, char a3)
{
  if (*(_DWORD *)(result + 136) && ((a3 & 1) != 0 || *(_DWORD *)(result + 124)))
  {
    if (*(int *)(result + 104) >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        *(_DWORD *)(*(void *)(result + 64) + 4 * v3) += *(__int16 *)(a2 + 2 * v3);
        if (*(_DWORD *)(result + 120))
        {
          *(_DWORD *)(*(void *)(result + 72) + 4 * v3) += (*(__int16 *)(a2 + 2 * v3)
                                                                         * *(__int16 *)(a2 + 2 * v3)) >> *(_WORD *)(*(void *)(result + 80) + 2 * v3);
          uint64_t v4 = *(void *)(result + 72);
          unsigned int v5 = *(_DWORD *)(v4 + 4 * v3);
          if (v5 >> 30)
          {
            *(_DWORD *)(v4 + 4 * v3) = v5 >> 2;
            *(_WORD *)(*(void *)(result + 80) + 2 * v3) += 2;
          }
        }
        ++v3;
      }
      while (v3 < *(int *)(result + 104));
    }
    ++*(_DWORD *)(result + 112);
  }
  return result;
}

uint64_t sub_1000223E8(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 136)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 112) <= *(_DWORD *)(a1 + 108))
  {
    if (*(_DWORD *)(a1 + 120) && *(int *)(a1 + 104) >= 1)
    {
      uint64_t v8 = 0;
      do
      {
        int v9 = *(__int16 *)(*(void *)a1 + 2 * v8);
        *(_DWORD *)(*(void *)(a1 + 72) + 4 * v8) = v9 * v9
                                                   + *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v8)
                                                   * *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v8);
        ++v8;
      }
      while (v8 < *(int *)(a1 + 104));
    }
  }
  else if (*(int *)(a1 + 104) >= 1)
  {
    uint64_t v2 = 0;
    while (1)
    {
      unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 64) + 4 * v2);
      if ((v3 & 0x80000000) == 0) {
        break;
      }
      *(_WORD *)(*(void *)a1 + 2 * v2) = -(__int16)(-v3 / *(_DWORD *)(a1 + 112));
      if (*(_DWORD *)(a1 + 120)) {
        goto LABEL_10;
      }
LABEL_5:
      if (++v2 >= *(int *)(a1 + 104)) {
        goto LABEL_16;
      }
    }
    *(_WORD *)(*(void *)a1 + 2 * v2) = v3 / *(_DWORD *)(a1 + 112);
    if (!*(_DWORD *)(a1 + 120)) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v4 = 4 * v2;
    *(_DWORD *)(*(void *)(a1 + 72) + v4) = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v2) / *(_DWORD *)(a1 + 112);
    *(_DWORD *)(*(void *)(a1 + 72) + v4) = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v2) << *(_WORD *)(*(void *)(a1 + 80) + 2 * v2);
    int v5 = *(__int16 *)(*(void *)a1 + 2 * v2);
    unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v2) - v5 * v5;
    *(_WORD *)(*(void *)(a1 + 16) + 2 * v2) = sub_10007D818(v6);
    *(_DWORD *)(*(void *)(a1 + 72) + 4 * v2) = v6;
    goto LABEL_5;
  }
LABEL_16:
  *(_DWORD *)(a1 + 136) = 0;
  return 1;
}

uint64_t sub_100022564(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_10002256C(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 136)) {
    return 0;
  }
  int v8 = *(_DWORD *)(a1 + 88);
  if (!*(_DWORD *)(a1 + 116) || (*a3 & 9) != 1)
  {
    if (*(_DWORD *)(a1 + 128))
    {
      LODWORD(v29) = *(_DWORD *)(a1 + 100);
      if ((int)v29 >= 1)
      {
        uint64_t v30 = 0;
        do
        {
          __int16 v31 = *(_WORD *)(a2 + 2 * v30) - *(_WORD *)(*(void *)a1 + 2 * v30);
          *(_WORD *)(a4 + 2 * v30) = v31;
          if (*(_DWORD *)(a1 + 120))
          {
            unsigned int v32 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v30);
            if (v31 < 0) {
              int v33 = -(int)(((v32 >> 1) - (v31 << v8)) / v32);
            }
            else {
              LOWORD(v33) = ((v32 >> 1) + (v31 << v8)) / v32;
            }
            *(_WORD *)(a4 + 2 * v30) = v33;
          }
          ++v30;
        }
        while (v30 < *(int *)(a1 + 100));
        LODWORD(v29) = *(_DWORD *)(a1 + 100);
      }
      if ((int)v29 < *(_DWORD *)(a1 + 104))
      {
        uint64_t v29 = (int)v29;
        do
        {
          __int16 v34 = *(_WORD *)(a2 + 2 * v29) - *(_WORD *)(*(void *)a1 + 2 * v29);
          *(_WORD *)(a4 + 2 * v29) = v34;
          if (*(_DWORD *)(a1 + 120))
          {
            unsigned int v35 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v29);
            if (v34 < 0) {
              int v36 = -(int)(((v35 >> 1) - (v34 << v8)) / v35);
            }
            else {
              LOWORD(v36) = ((v35 >> 1) + (v34 << v8)) / v35;
            }
            *(_WORD *)(a4 + 2 * v29) = v36;
          }
          ++v29;
        }
        while (v29 < *(int *)(a1 + 104));
      }
    }
    else if (*(int *)(a1 + 104) >= 1)
    {
      uint64_t v37 = 0;
      do
      {
        __int16 v38 = *(_WORD *)(a2 + 2 * v37) - *(_WORD *)(*(void *)a1 + 2 * v37);
        *(_WORD *)(a4 + 2 * v37) = v38;
        if (*(_DWORD *)(a1 + 120))
        {
          unsigned int v39 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v37);
          if (v38 < 0) {
            int v40 = -(int)(((v39 >> 1) - (v38 << v8)) / v39);
          }
          else {
            LOWORD(v40) = ((v39 >> 1) + (v38 << v8)) / v39;
          }
          *(_WORD *)(a4 + 2 * v37) = v40;
        }
        ++v37;
      }
      while (v37 < *(int *)(a1 + 104));
    }
    return 1;
  }
  if (*(_DWORD *)(a1 + 128))
  {
    LODWORD(v9) = *(_DWORD *)(a1 + 100);
    if ((int)v9 >= 1)
    {
      uint64_t v10 = 0;
      do
      {
        int v11 = *(unsigned __int16 *)(*(void *)a1 + 2 * v10);
        int v12 = *(__int16 *)(a2 + 2 * v10) - *(__int16 *)(*(void *)a1 + 2 * v10);
        char v13 = *(_DWORD *)(a1 + 92);
        int v14 = 1 << (v13 - 1);
        int v15 = v11 + ((v14 + v12) >> v13);
        int v16 = v11 - ((v14 - v12) >> v13);
        if (v12 < 0) {
          __int16 v17 = v16;
        }
        else {
          __int16 v17 = v15;
        }
        *(_WORD *)(*(void *)a1 + 2 * v10) = v17;
        __int16 v18 = *(_WORD *)(a2 + 2 * v10) - *(_WORD *)(*(void *)a1 + 2 * v10);
        *(_WORD *)(a4 + 2 * v10) = v18;
        if (*(_DWORD *)(a1 + 120))
        {
          uint64_t v19 = *(void *)(a1 + 72);
          int v20 = *(_DWORD *)(v19 + 4 * v10);
          int v21 = v18 * v18 - v20;
          char v22 = *(_DWORD *)(a1 + 96);
          int v23 = 1 << (v22 - 1);
          unsigned int v24 = ((v23 + v21) >> v22) + v20;
          unsigned int v25 = v20 - ((v23 - v21) >> v22);
          if (v21 < 0) {
            unsigned int v26 = v25;
          }
          else {
            unsigned int v26 = v24;
          }
          *(_DWORD *)(v19 + 4 * v10) = v26;
          *(_WORD *)(*(void *)(a1 + 16) + 2 * v10) = sub_10007D818(v26);
          int v27 = *(__int16 *)(a4 + 2 * v10);
          unsigned int v28 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v10);
          if (v27 < 0) {
            int v27 = -(int)(((v28 >> 1) - (v27 << v8)) / v28);
          }
          else {
            LOWORD(v27) = ((v28 >> 1) + (v27 << v8)) / v28;
          }
          *(_WORD *)(a4 + 2 * v10) = v27;
        }
        ++v10;
        uint64_t v9 = *(int *)(a1 + 100);
      }
      while (v10 < v9);
    }
    uint64_t v4 = 1;
    if ((int)v9 < *(_DWORD *)(a1 + 104))
    {
      uint64_t v41 = (int)v9;
      do
      {
        int v42 = *(unsigned __int16 *)(*(void *)a1 + 2 * v41);
        int v43 = *(__int16 *)(a2 + 2 * v41) - *(__int16 *)(*(void *)a1 + 2 * v41);
        char v44 = *(_DWORD *)(a1 + 92);
        int v45 = 1 << (v44 - 1);
        int v46 = v42 + ((v45 + v43) >> v44);
        int v47 = v42 - ((v45 - v43) >> v44);
        if (v43 < 0) {
          __int16 v48 = v47;
        }
        else {
          __int16 v48 = v46;
        }
        *(_WORD *)(*(void *)a1 + 2 * v41) = v48;
        int v49 = *(__int16 *)(a2 + 2 * v41);
        *(_WORD *)(a4 + 2 * v41) = *(_WORD *)(a2 + 2 * v41);
        if (*(_DWORD *)(a1 + 120))
        {
          uint64_t v50 = *(void *)(a1 + 72);
          int v51 = *(_DWORD *)(v50 + 4 * v41);
          int v52 = v49 * v49 - v51;
          char v53 = *(_DWORD *)(a1 + 96);
          int v54 = 1 << (v53 - 1);
          unsigned int v55 = ((v54 + v52) >> v53) + v51;
          unsigned int v56 = v51 - ((v54 - v52) >> v53);
          if (v52 < 0) {
            unsigned int v57 = v56;
          }
          else {
            unsigned int v57 = v55;
          }
          *(_DWORD *)(v50 + 4 * v41) = v57;
          *(_WORD *)(*(void *)(a1 + 16) + 2 * v41) = sub_10007D818(v57);
          int v58 = *(__int16 *)(a4 + 2 * v41);
          unsigned int v59 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v41);
          if (v58 < 0) {
            int v58 = -(int)(((v59 >> 1) - (v58 << v8)) / v59);
          }
          else {
            LOWORD(v58) = ((v59 >> 1) + (v58 << v8)) / v59;
          }
          *(_WORD *)(a4 + 2 * v41) = v58;
        }
        ++v41;
      }
      while (v41 < *(int *)(a1 + 104));
      return 1;
    }
  }
  else
  {
    if (*(int *)(a1 + 104) < 1) {
      return 1;
    }
    uint64_t v60 = 0;
    do
    {
      int v61 = *(unsigned __int16 *)(*(void *)a1 + 2 * v60);
      int v62 = *(__int16 *)(a2 + 2 * v60) - *(__int16 *)(*(void *)a1 + 2 * v60);
      char v63 = *(_DWORD *)(a1 + 92);
      int v64 = 1 << (v63 - 1);
      int v65 = v61 + ((v64 + v62) >> v63);
      int v66 = v61 - ((v64 - v62) >> v63);
      if (v62 < 0) {
        __int16 v67 = v66;
      }
      else {
        __int16 v67 = v65;
      }
      *(_WORD *)(*(void *)a1 + 2 * v60) = v67;
      __int16 v68 = *(_WORD *)(a2 + 2 * v60) - *(_WORD *)(*(void *)a1 + 2 * v60);
      *(_WORD *)(a4 + 2 * v60) = v68;
      if (*(_DWORD *)(a1 + 120))
      {
        uint64_t v69 = *(void *)(a1 + 72);
        int v70 = *(_DWORD *)(v69 + 4 * v60);
        int v71 = v68 * v68 - v70;
        char v72 = *(_DWORD *)(a1 + 96);
        int v73 = 1 << (v72 - 1);
        unsigned int v74 = ((v73 + v71) >> v72) + v70;
        unsigned int v75 = v70 - ((v73 - v71) >> v72);
        if (v71 < 0) {
          unsigned int v76 = v75;
        }
        else {
          unsigned int v76 = v74;
        }
        *(_DWORD *)(v69 + 4 * v60) = v76;
        *(_WORD *)(*(void *)(a1 + 16) + 2 * v60) = sub_10007D818(v76);
        int v77 = *(__int16 *)(a4 + 2 * v60);
        unsigned int v78 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v60);
        if (v77 < 0) {
          int v77 = -(int)(((v78 >> 1) - (v77 << v8)) / v78);
        }
        else {
          LOWORD(v77) = ((v78 >> 1) + (v77 << v8)) / v78;
        }
        *(_WORD *)(a4 + 2 * v60) = v77;
      }
      ++v60;
      uint64_t v4 = 1;
    }
    while (v60 < *(int *)(a1 + 104));
  }
  return v4;
}

uint64_t sub_100022A84(uint64_t result, uint64_t a2)
{
  if (*(int *)(result + 104) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      *(_WORD *)(a2 + 2 * v2) = *(_WORD *)(*(void *)result + 2 * v2);
      ++v2;
    }
    while (v2 < *(int *)(result + 104));
  }
  return result;
}

uint64_t sub_100022AB8(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 104);
  if (*(_DWORD *)(result + 120))
  {
    if (v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        *(_WORD *)(a2 + 2 * v3) = *(_WORD *)(*(void *)(result + 16) + 2 * v3);
        ++v3;
      }
      while (v3 < *(int *)(result + 104));
    }
  }
  else if (v2 >= 1)
  {
    uint64_t v4 = 0;
    do
      *(_WORD *)(a2 + 2 * v4++) = 1 << *(_DWORD *)(result + 88);
    while (v4 < *(int *)(result + 104));
  }
  return result;
}

uint64_t sub_100022B20(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 104);
  if (*(_DWORD *)(result + 120))
  {
    if (v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)(*(void *)(result + 72) + 4 * v3);
        ++v3;
      }
      while (v3 < *(int *)(result + 104));
    }
  }
  else if (v2 >= 1)
  {
    uint64_t v4 = 0;
    do
      *(_DWORD *)(a2 + 4 * v4++) = 1 << (2 * *(unsigned char *)(result + 88));
    while (v4 < *(int *)(result + 104));
  }
  return result;
}

uint64_t sub_100022B8C(uint64_t result, uint64_t a2)
{
  if (*(int *)(result + 104) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      *(_WORD *)(*(void *)result + 2 * v2) = *(_WORD *)(a2 + 2 * v2);
      ++v2;
    }
    while (v2 < *(int *)(result + 104));
  }
  return result;
}

uint64_t sub_100022BC0(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 120) && *(int *)(result + 104) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      *(_WORD *)(*(void *)(result + 16) + 2 * v2) = *(_WORD *)(a2 + 2 * v2);
      ++v2;
    }
    while (v2 < *(int *)(result + 104));
  }
  return result;
}

uint64_t sub_100022BFC(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 120) && *(int *)(result + 104) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      *(_DWORD *)(*(void *)(result + 72) + 4 * v2) = *(_DWORD *)(a2 + 4 * v2);
      ++v2;
    }
    while (v2 < *(int *)(result + 104));
  }
  return result;
}

uint64_t sub_100022C38(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_1000BEC58(a1, "bch0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C33A0(144);
  uint64_t v11 = v10;
  if (v10)
  {
    if (!sub_1000BEECC(v9, (void *)(v10 + 88))) {
      goto LABEL_38;
    }
    if (!sub_1000BEECC(v9, (void *)(v11 + 92))) {
      goto LABEL_38;
    }
    if (!sub_1000BEECC(v9, (void *)(v11 + 96))) {
      goto LABEL_38;
    }
    if (!sub_1000BEECC(v9, (void *)(v11 + 100))) {
      goto LABEL_38;
    }
    if (!sub_1000BEECC(v9, (void *)(v11 + 104))) {
      goto LABEL_38;
    }
    if (!sub_1000BEECC(v9, (void *)(v11 + 108))) {
      goto LABEL_38;
    }
    if (!sub_1000BEE7C(v9, (_DWORD *)(v11 + 116))) {
      goto LABEL_38;
    }
    if (!sub_1000BEE7C(v9, (_DWORD *)(v11 + 120))) {
      goto LABEL_38;
    }
    if (!sub_1000BEE7C(v9, (_DWORD *)(v11 + 124))) {
      goto LABEL_38;
    }
    if (!sub_1000BEE7C(v9, (_DWORD *)(v11 + 128))) {
      goto LABEL_38;
    }
    uint64_t v12 = *(int *)(v11 + 104);
    int v25 = 0;
    char v13 = (uint64_t *)(v11 + 8);
    if (!sub_1000BF078(v9, 2, (uint64_t *)(v11 + 8), &v25)) {
      goto LABEL_38;
    }
    uint64_t v14 = *v13;
    if (*v13)
    {
      if (v25 != v12) {
        goto LABEL_38;
      }
    }
    if (v14) {
      *(void *)uint64_t v11 = v14;
    }
    int v25 = 0;
    int v15 = (uint64_t *)(v11 + 24);
    if (!sub_1000BF078(v9, 2, (uint64_t *)(v11 + 24), &v25)) {
      goto LABEL_38;
    }
    uint64_t v16 = *v15;
    if (*v15)
    {
      if (v25 != v12) {
        goto LABEL_38;
      }
    }
    if (v16) {
      *(void *)(v11 + 16) = v16;
    }
    int v25 = 0;
    __int16 v17 = (uint64_t *)(v11 + 40);
    if (!sub_1000BF078(v9, 2, (uint64_t *)(v11 + 40), &v25)) {
      goto LABEL_38;
    }
    uint64_t v18 = *v17;
    if (*v17)
    {
      if (v25 != v12) {
        goto LABEL_38;
      }
    }
    if (v18) {
      *(void *)(v11 + 32) = v18;
    }
    int v25 = 0;
    uint64_t v19 = (uint64_t *)(v11 + 56);
    if (!sub_1000BF078(v9, 2, (uint64_t *)(v11 + 56), &v25)) {
      goto LABEL_38;
    }
    uint64_t v20 = *v19;
    if (*v19)
    {
      if (v25 != v12) {
        goto LABEL_38;
      }
    }
    if (v20) {
      *(void *)(v11 + 48) = v20;
    }
    uint64_t v21 = sub_1000C33A0(4 * v12);
    *(void *)(v11 + 64) = v21;
    if (v21
      && (!*(_DWORD *)(v11 + 120)
       || (uint64_t v22 = sub_1000C33A0(4 * v12), (*(void *)(v11 + 72) = v22) != 0)
       && (uint64_t v23 = sub_1000C33A0(2 * v12), (*(void *)(v11 + 80) = v23) != 0)))
    {
      sub_1000221DC(v11);
    }
    else
    {
LABEL_38:
      sub_100022168(v11);
      uint64_t v11 = 0;
    }
  }
  sub_1000BED3C(v9);
  return v11;
}

uint64_t sub_100022E94(int *a1)
{
  uint64_t result = sub_1000C33A0(2 * *a1);
  *((void *)a1 + 8) = result;
  if (result)
  {
    a1[4] = 0;
    uint64_t result = 1;
    a1[20] = 1;
    __int16 v3 = *((_WORD *)a1 + 36);
    *((_WORD *)a1 + 42) = v3;
    *((_WORD *)a1 + 43) = v3;
  }
  return result;
}

uint64_t sub_100022EE0(uint64_t result)
{
  if (result)
  {
    int v1 = (void *)result;
    sub_1000C321C(*(void *)(result + 40));
    v1[4] = 0;
    v1[5] = 0;
    sub_1000C321C(v1[7]);
    v1[6] = 0;
    v1[7] = 0;
    sub_1000C321C(v1[8]);
    v1[8] = 0;
    return sub_1000C321C((uint64_t)v1);
  }
  return result;
}

void sub_100022F40(int *a1, int a2)
{
  if (a2)
  {
    int v3 = *((__int16 *)a1 + 41);
    int v4 = *((__int16 *)a1 + 40);
    unint64_t v5 = 1374389535 * (v3 - v4 + 100) * *((__int16 *)a1 + 39);
    LOWORD(v5) = (v5 >> 38) + (v5 >> 63);
    *((_WORD *)a1 + 40) = v4 + v5;
    *((_WORD *)a1 + 41) = v3 - v5;
  }
  else
  {
    a1[4] = 0;
    bzero(*((void **)a1 + 8), 2 * *a1);
    a1[20] = 1;
    __int16 v6 = *((_WORD *)a1 + 36);
    *((_WORD *)a1 + 42) = v6;
    *((_WORD *)a1 + 43) = v6;
  }
}

uint64_t sub_100022FD8(uint64_t result, _WORD *a2, _WORD *a3)
{
  *a2 = *(_WORD *)(result + 80);
  *a3 = *(_WORD *)(result + 82);
  return result;
}

uint64_t sub_100022FEC(uint64_t result, int a2)
{
  int v2 = *(__int16 *)(result + 82);
  int v3 = *(__int16 *)(result + 80);
  if (v2 < v3)
  {
    *(_WORD *)(result + 80) = a2;
LABEL_6:
    *(_WORD *)(result + 82) = a2;
    return result;
  }
  if (v3 > a2)
  {
    *(_WORD *)(result + 80) = a2;
    return result;
  }
  if (v2 < a2) {
    goto LABEL_6;
  }
  return result;
}

int *sub_100023024(int *result, __int16 *a2, uint64_t a3)
{
  int v3 = *((__int16 *)result + 41);
  int v4 = *((__int16 *)result + 40);
  int v5 = *a2;
  if (v3 < v4)
  {
    *((_WORD *)result + 40) = v5;
    LOWORD(v5) = *a2;
LABEL_6:
    *((_WORD *)result + 41) = v5;
    goto LABEL_7;
  }
  if (v5 < v4)
  {
    *((_WORD *)result + 40) = v5;
    goto LABEL_7;
  }
  if (v5 > v3) {
    goto LABEL_6;
  }
LABEL_7:
  int v6 = result[4];
  int v7 = *result;
  if (v6 >= result[3])
  {
    if (v7 >= 1)
    {
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = *((void *)result + 8);
        int v16 = *(unsigned __int16 *)(v15 + 2 * v14);
        int v17 = a2[v14] - *(__int16 *)(v15 + 2 * v14);
        char v18 = result[5];
        int v19 = 1 << (v18 - 1);
        int v20 = v16 + ((v19 + v17) >> v18);
        int v21 = v16 - ((v19 - v17) >> v18);
        if (v17 < 0) {
          __int16 v22 = v21;
        }
        else {
          __int16 v22 = v20;
        }
        *(_WORD *)(v15 + 2 * v14++) = v22;
      }
      while (v14 < *result);
    }
  }
  else
  {
    if (v7 >= 1)
    {
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = *((void *)result + 8);
        int v10 = result[4];
        int v11 = a2[v8] + v10 * *(__int16 *)(v9 + 2 * v8);
        int v12 = v10 + 1;
        if (v11 >= 0) {
          int v13 = 2;
        }
        else {
          int v13 = -2;
        }
        *(_WORD *)(v9 + 2 * v8++) = (v11 + v12 / v13) / v12;
      }
      while (v8 < *result);
      int v6 = result[4];
    }
    result[4] = v6 + 1;
  }
  int v23 = *((__int16 *)result + 40);
  int v24 = (__int16)(*((_WORD *)result + 41) - *((_WORD *)result + 40));
  if (v24 <= (__int16)(*((_WORD *)result + 38) + ((*((__int16 *)result + 37) * v23) >> 15))) {
    int v24 = (__int16)(*((_WORD *)result + 38) + ((*((__int16 *)result + 37) * v23) >> 15));
  }
  if (v24 <= *((__int16 *)result + 36)) {
    int v24 = *((__int16 *)result + 36);
  }
  *((_WORD *)result + 43) += (v24 - *((__int16 *)result + 43) + 32) >> 6;
  *((_WORD *)result + 42) = v24;
  int v25 = (((1 << (result[2] - 1)) + (**((__int16 **)result + 6) << result[2]) + **((__int16 **)result + 4) * v24) >> result[2])
      + v23;
  if (v25 >= 0x7FFF) {
    int v25 = 0x7FFF;
  }
  if (v25 <= -32768) {
    LOWORD(v25) = 0x8000;
  }
  **(_WORD **)a3 = v25;
  LODWORD(v26) = *result;
  if (*result > 1)
  {
    uint64_t v27 = 1;
    do
    {
      *(_WORD *)(*(void *)a3 + 2 * v27) = *(_WORD *)(*((void *)result + 8) + 2 * v27);
      ++v27;
    }
    while (v27 < *result);
    LODWORD(v26) = *result;
  }
  LODWORD(v28) = *(_DWORD *)(a3 + 104);
  if ((int)v26 < (int)v28)
  {
    uint64_t v26 = (int)v26;
    do
    {
      *(_WORD *)(*(void *)a3 + 2 * v26++) = 0;
      uint64_t v28 = *(int *)(a3 + 104);
    }
    while (v26 < v28);
  }
  if (*(_DWORD *)(a3 + 120)) {
    BOOL v29 = (int)v28 < 1;
  }
  else {
    BOOL v29 = 1;
  }
  if (!v29)
  {
    uint64_t v30 = 0;
    do
    {
      signed int v31 = ((1 << (result[2] - 1))
                         + (*(__int16 *)(*((void *)result + 6) + 2 * v30 + 2) << result[2])
                         + *(__int16 *)(*((void *)result + 4) + 2 * v30 + 2) * v24) >> result[2];
      if (v31 >= 0x7FFF) {
        signed int v31 = 0x7FFF;
      }
      if (v31 <= 1) {
        signed int v31 = 1;
      }
      *(_WORD *)(*(void *)(a3 + 16) + 2 * v30) = v31;
      if (*(_DWORD *)(a3 + 116)) {
        *(_DWORD *)(*(void *)(a3 + 72) + 4 * v30) = v31 * v31;
      }
      ++v30;
    }
    while (v30 < *(int *)(a3 + 104));
  }
  return result;
}

BOOL sub_1000232DC(__int16 *a1)
{
  int v1 = a1[43] * a1[44] + 4096;
  int v2 = (__int16)(v1 >> 13);
  if (v1 >> 28) {
    int v2 = 0x7FFF;
  }
  if (v1 < 0x4000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  return v3 < a1[42];
}

void sub_100023318(uint64_t a1, int a2, char *a3, _WORD *a4, _WORD *a5, _WORD *a6, _DWORD *a7)
{
  if (a1)
  {
    *a7 = *(_DWORD *)(a1 + 16);
    if (a2 >= 1)
    {
      uint64_t v10 = 0;
      do
      {
        *(_WORD *)&a3[v10] = *(_WORD *)(*(void *)(a1 + 64) + v10);
        v10 += 2;
      }
      while (2 * a2 != v10);
    }
    *a4 = *(_WORD *)(a1 + 80);
    *a5 = *(_WORD *)(a1 + 82);
    *a6 = *(_WORD *)(a1 + 86);
  }
  else
  {
    *a7 = 0;
    bzero(a3, 2 * a2);
    *a4 = 1;
    *a5 = 0;
    *a6 = 0;
  }
}

int *sub_1000233C8(int *result, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, int a6)
{
  if (result)
  {
    result[4] = a6;
    if (*result >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        *(_WORD *)(*((void *)result + 8) + 2 * v6) = *(_WORD *)(a2 + 2 * v6);
        ++v6;
      }
      while (v6 < *result);
    }
    *((_WORD *)result + 40) = a3;
    *((_WORD *)result + 41) = a4;
    *((_WORD *)result + 43) = a5;
  }
  return result;
}

uint64_t sub_100023410(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1000BEC58(a1, "bcp0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C33A0(96);
  if (v10)
  {
    if (!sub_1000BEECC(v9, (void *)v10)) {
      goto LABEL_24;
    }
    int v11 = (_DWORD *)(v10 + 4);
    if (!sub_1000BEECC(v9, (void *)(v10 + 4))) {
      goto LABEL_24;
    }
    if (!sub_1000BEECC(v9, (void *)(v10 + 8))) {
      goto LABEL_24;
    }
    if (!sub_1000BEECC(v9, (void *)(v10 + 12))) {
      goto LABEL_24;
    }
    if (!sub_1000BEECC(v9, (void *)(v10 + 20))) {
      goto LABEL_24;
    }
    if (!sub_1000BEECC(v9, (void *)(v10 + 24))) {
      goto LABEL_24;
    }
    if (!sub_1000BEF74(v9, (_WORD *)(v10 + 72))) {
      goto LABEL_24;
    }
    if (!sub_1000BEF74(v9, (_WORD *)(v10 + 74))) {
      goto LABEL_24;
    }
    if (!sub_1000BEF74(v9, (_WORD *)(v10 + 76))) {
      goto LABEL_24;
    }
    if (!sub_1000BEF74(v9, (_WORD *)(v10 + 78))) {
      goto LABEL_24;
    }
    if (!sub_1000BEF74(v9, (_WORD *)(v10 + 88))) {
      goto LABEL_24;
    }
    int v16 = 0;
    int v12 = (void *)(v10 + 40);
    if (!sub_1000BF078(v9, 2, (uint64_t *)(v10 + 40), &v16)) {
      goto LABEL_24;
    }
    if (*v12)
    {
      if (v16 != *v11) {
        goto LABEL_24;
      }
      *(void *)(v10 + 32) = *v12;
    }
    int v15 = 0;
    int v13 = (void *)(v10 + 56);
    if (sub_1000BF078(v9, 2, (uint64_t *)(v10 + 56), &v15))
    {
      if (!*v13) {
        goto LABEL_22;
      }
      if (v15 == *v11)
      {
        *(void *)(v10 + 48) = *v13;
LABEL_22:
        sub_1000BED3C(v9);
        if (sub_100022E94((int *)v10)) {
          return v10;
        }
        goto LABEL_25;
      }
    }
LABEL_24:
    sub_1000BED3C(v9);
LABEL_25:
    sub_1000C321C(*(void *)(v10 + 40));
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    sub_1000C321C(*(void *)(v10 + 56));
    *(void *)(v10 + 48) = 0;
    *(void *)(v10 + 56) = 0;
    sub_1000C321C(*(void *)(v10 + 64));
    *(void *)(v10 + 64) = 0;
    sub_1000C321C(v10);
    return 0;
  }
  sub_1000BED3C(v9);
  return 0;
}

uint64_t sub_100023604(unsigned __int8 *a1)
{
  uint64_t result = sub_1000CAF00(a1, "zhcn");
  if (result)
  {
    uint64_t result = sub_1000CAF00(a1, "zhhk");
    if (result)
    {
      uint64_t result = sub_1000CAF00(a1, "zhtw");
      if (result) {
        return sub_1000CAF00(a1, "zhct") != 0;
      }
    }
  }
  return result;
}

void *sub_100023674(uint64_t a1, uint64_t a2, int *a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v25 = a4;
  if (a8)
  {
    uint64_t v13 = 0;
    int v14 = 0;
    while (v13 < *a3)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 4);
      int v16 = v14 + 1;
      if (v14 + 1 + (int)v15 >= a6) {
        break;
      }
      if ((int)v15 >= 1)
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          *(_DWORD *)(a7 + 4 * v14 + 4 * i) = sub_1000BD96C(a2, *(unsigned __int16 *)(a1 + 2 * i + 16));
          *(unsigned char *)(a8 + v14 + i) = *(unsigned char *)(a1 + i + 88);
        }
        v14 += i;
        int v16 = v14 + 1;
      }
      *(_DWORD *)(a7 + 4 * v14) = -1;
      *(_DWORD *)(a5 + 4 * v13++) = *(_DWORD *)(a1 + 12);
      a1 += 128;
      int v14 = v16;
      if (v13 == v25)
      {
        int v14 = v16;
        int v18 = a4;
        uint64_t result = a9;
        if (a9) {
          goto LABEL_23;
        }
        goto LABEL_25;
      }
    }
  }
  else
  {
    int v18 = a4;
    uint64_t v13 = 0;
    int v14 = 0;
    while (v13 < *a3)
    {
      uint64_t v19 = *(unsigned int *)(a1 + 4);
      int v20 = v14 + 1;
      if (v14 + 1 + (int)v19 >= a6) {
        break;
      }
      if ((int)v19 >= 1)
      {
        for (uint64_t j = 0; j != v19; ++j)
          *(_DWORD *)(a7 + 4 * v14 + 4 * j) = sub_1000BD96C(a2, *(unsigned __int16 *)(a1 + 2 * j + 16));
        v14 += j;
        int v20 = v14 + 1;
      }
      *(_DWORD *)(a7 + 4 * v14) = -1;
      *(_DWORD *)(a5 + 4 * v13++) = *(_DWORD *)(a1 + 12);
      a1 += 128;
      int v14 = v20;
      if (v13 == v25)
      {
        int v14 = v20;
        uint64_t result = a9;
        if (!a9) {
          goto LABEL_25;
        }
        goto LABEL_23;
      }
    }
  }
  int v18 = v13;
  uint64_t result = a9;
  if (a9)
  {
LABEL_23:
    if (v14 >= 1) {
      uint64_t result = memset(result, 255, 2 * v14);
    }
  }
LABEL_25:
  *a3 = v18;
  return result;
}

uint64_t sub_100023880(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a2 + 12));
  if (v2) {
    return v2;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 4);
  int v4 = *(_DWORD *)(a2 + 4);
  if (v3 != v4) {
    return (v3 - v4);
  }
  if ((int)v3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 88;
    uint64_t v7 = a2 + 88;
    while (1)
    {
      uint64_t v2 = *(unsigned __int16 *)(v6 + 2 * v5 - 72) - *(unsigned __int16 *)(v7 + 2 * v5 - 72);
      if (v2) {
        return v2;
      }
      int v8 = *(unsigned __int8 *)(v6 + v5);
      int v9 = *(unsigned __int8 *)(v7 + v5);
      if (v8 != v9) {
        return ((char)v8 - (char)v9);
      }
      if (v3 == ++v5)
      {
        int v10 = *(unsigned __int8 *)(a1 + v3 + 88);
        int v11 = *(unsigned __int8 *)(a2 + v3 + 88);
        if (v10 != v11) {
          return ((char)v10 - (char)v11);
        }
        goto LABEL_9;
      }
    }
  }
  int v10 = *(unsigned __int8 *)(a1 + 88);
  int v11 = *(unsigned __int8 *)(a2 + 88);
  if (v10 == v11)
  {
LABEL_9:
    if (*(_DWORD *)a1 >= *(_DWORD *)a2) {
      LODWORD(v2) = 0;
    }
    else {
      LODWORD(v2) = -1;
    }
    if (*(_DWORD *)a1 <= *(_DWORD *)a2) {
      return v2;
    }
    else {
      return 1;
    }
  }
  return ((char)v10 - (char)v11);
}

BOOL sub_100023968(int *a1, _DWORD *a2, int a3)
{
  size_t v3 = a1[1];
  return v3 == a2[1] && !memcmp(a1 + 4, a2 + 4, 2 * v3) && (!a3 || !memcmp(a1 + 22, a2 + 22, v3));
}

void sub_1000239EC(void *a1, int a2)
{
}

uint64_t sub_100023A08(uint64_t a1, long long *a2, _OWORD *__src, int *a4, int a5)
{
  if (!a2) {
    return 0x7FFFFFFFLL;
  }
  uint64_t v7 = *a4;
  if (!v7)
  {
    uint64_t v9 = 0;
    *a4 = 1;
    long long v26 = *a2;
    long long v27 = a2[1];
    long long v28 = a2[3];
    __src[2] = a2[2];
    __src[3] = v28;
    *__src = v26;
    __src[1] = v27;
    long long v29 = a2[4];
    long long v30 = a2[5];
    long long v31 = a2[7];
    __src[6] = a2[6];
    __src[7] = v31;
    __src[4] = v29;
    __src[5] = v30;
    return v9;
  }
  if ((int)v7 < 1)
  {
LABEL_23:
    int v23 = *((_DWORD *)a2 + 3) - *((_DWORD *)__src + 3) + 10;
    uint64_t v25 = a4;
    int v24 = *a4;
    if (*a4 >= a5) {
      goto LABEL_24;
    }
LABEL_20:
    *uint64_t v25 = v24 + 1;
LABEL_25:
    uint64_t v9 = 0x7FFFFFFFLL;
LABEL_26:
    if (v24 >= 1) {
      j__memmove(__src + 8, __src, (unint64_t)v24 << 7);
    }
    goto LABEL_29;
  }
  uint64_t v9 = 0;
  int v10 = (char *)(__src + 1);
  int v11 = a2 + 1;
  while (1)
  {
    uint64_t v12 = *((unsigned int *)a2 + 1);
    if (v12 != DWORD1(__src[8 * v9])) {
      goto LABEL_5;
    }
    if (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 1760)) {
      break;
    }
    uint64_t v13 = (unsigned __int16 *)(a2 + 1);
    int v14 = (unsigned __int16 *)v10;
    if ((int)v12 < 1) {
      goto LABEL_17;
    }
    while (1)
    {
      int v16 = *v13++;
      int v15 = v16;
      int v17 = *v14++;
      if (v15 != v17) {
        break;
      }
      if (!--v12) {
        goto LABEL_17;
      }
    }
LABEL_5:
    ++v9;
    v10 += 128;
    if (v9 == v7) {
      goto LABEL_23;
    }
  }
  if ((int)v12 >= 1)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 2 * v12;
    do
    {
      unsigned int v20 = sub_1000BD964(a1, *(unsigned __int16 *)((char *)v11 + v18), 0);
      int v21 = sub_1000BD980(a1, v20);
      unsigned int v22 = sub_1000BD964(a1, *(unsigned __int16 *)&v10[v18], 0);
      if (v21 != sub_1000BD980(a1, v22)) {
        goto LABEL_5;
      }
      v18 += 2;
    }
    while (v19 != v18);
  }
LABEL_17:
  int v23 = *((_DWORD *)a2 + 3) - *((_DWORD *)__src + 3);
  if (v9)
  {
    v23 += 10;
    int v24 = v9;
    uint64_t v25 = a4;
    if (v9 == 0x7FFFFFFF)
    {
      int v24 = *a4;
      if (*a4 < a5) {
        goto LABEL_20;
      }
LABEL_24:
      --v24;
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  uint64_t v25 = a4;
LABEL_29:
  long long v32 = *a2;
  long long v33 = a2[1];
  long long v34 = a2[3];
  __src[2] = a2[2];
  __src[3] = v34;
  *__src = v32;
  __src[1] = v33;
  long long v35 = a2[4];
  long long v36 = a2[5];
  long long v37 = a2[7];
  __src[6] = a2[6];
  __src[7] = v37;
  __src[4] = v35;
  __src[5] = v36;
  uint64_t v38 = (*v25 - 1);
  if (*v25 > 1)
  {
    if (*v25 == 2)
    {
      uint64_t v39 = 0;
      goto LABEL_35;
    }
    uint64_t v39 = v38 & 0xFFFFFFFE;
    int v40 = (_DWORD *)__src + 67;
    uint64_t v41 = v39;
    do
    {
      int v42 = *v40 + v23;
      *(v40 - 32) += v23;
      _DWORD *v40 = v42;
      v40 += 64;
      v41 -= 2;
    }
    while (v41);
    if (v39 != v38)
    {
LABEL_35:
      uint64_t v43 = v38 - v39;
      char v44 = (_DWORD *)&__src[8 * v39 + 8] + 3;
      do
      {
        *v44 += v23;
        v44 += 32;
        --v43;
      }
      while (v43);
    }
  }
  return v9;
}

uint64_t sub_100023CAC(int a1)
{
  uint64_t v2 = sub_1000C33A0(32);
  uint64_t v3 = v2;
  if (!v2 || sub_1000C036C(v2, a1, 0)) {
    return v3;
  }
  sub_1000C321C(v3);
  return 0;
}

uint64_t *sub_100023D10(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    sub_1000C03F8(result);
    return (uint64_t *)sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_100023D50(uint64_t a1, uint64_t a2, char *a3)
{
  if (!a1) {
    return 1;
  }
  uint64_t v4 = sub_1000BFC50(a2, "bcld0", a3);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = v4;
  BOOL v7 = sub_1000C0484(a1, v4, v5);
  sub_1000BFD14(v6);
  return v7;
}

BOOL sub_100023DD8(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_1000BEC58(a2, "bcld0", a3, a4, a5, a6, a7, a8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = (uint64_t)v9;
  BOOL v11 = sub_1000C0524(a1, (uint64_t)v9) != 0;
  sub_1000BED3C(v10);
  return v11;
}

void *sub_100023E48(void *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    if (!*result)
    {
      sub_1000C321C(result[8]);
      sub_1000C321C(*(void *)(v1 + 48));
      sub_1000C321C(*(void *)(v1 + 32));
      return (void *)sub_1000C321C(v1);
    }
  }
  return result;
}

uint64_t sub_100023EAC(uint64_t a1)
{
  unsigned int v2 = sub_1000C085C(*(_DWORD *)(a1 + 8), 4, 0xFFFFFFFF);
  unsigned int v3 = sub_1000C085C(*(_DWORD *)(a1 + 12), 4, v2);
  unsigned int v4 = sub_1000C085C(*(_DWORD *)(a1 + 16), 4, v3);
  unsigned int v5 = sub_1000C085C(*(_DWORD *)(a1 + 20), 4, v4);
  unsigned int v6 = sub_1000C09B0(*(unint64_t **)(a1 + 24), 4, *(_DWORD *)(a1 + 20), 0xFFFFFFFFLL);
  unsigned int v7 = sub_1000C085C(v6, 4, v5);
  unsigned int v8 = sub_1000C09B0(*(unint64_t **)(a1 + 40), 4, *(_DWORD *)(a1 + 20), 0xFFFFFFFFLL);
  unsigned int v9 = sub_1000C085C(v8, 4, v7);
  unsigned int v10 = sub_1000C09B0(*(unint64_t **)(a1 + 56), 2, *(_DWORD *)(a1 + 20), 0xFFFFFFFFLL);
  return sub_1000C085C(v10, 4, v9);
}

void *sub_100023F84(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = sub_1000BEC58(a1, "bcl0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C33A0(72);
  BOOL v11 = (void *)v10;
  if (!v10) {
    goto LABEL_19;
  }
  if (sub_1000BEECC(v9, (void *)(v10 + 8)) && sub_1000BEECC(v9, (char *)v11 + 12) && sub_1000BEECC(v9, v11 + 2))
  {
    uint64_t v12 = (_DWORD *)v11 + 5;
    if (sub_1000BEECC(v9, (char *)v11 + 20))
    {
      int v19 = 0;
      uint64_t v13 = v11 + 4;
      if (sub_1000BF078(v9, 4, v11 + 4, &v19))
      {
        if (*v13)
        {
          if (v19 != *v12) {
            goto LABEL_20;
          }
          v11[3] = *v13;
        }
        int v18 = 0;
        int v14 = v11 + 6;
        if (sub_1000BF078(v9, 4, v11 + 6, &v18))
        {
          if (*v14)
          {
            if (v18 != *v12) {
              goto LABEL_20;
            }
            v11[5] = *v14;
          }
          int v17 = 0;
          int v15 = v11 + 8;
          if (sub_1000BF078(v9, 2, v11 + 8, &v17))
          {
            if (*v15)
            {
              if (v17 == *v12)
              {
                v11[7] = *v15;
                goto LABEL_19;
              }
              goto LABEL_20;
            }
LABEL_19:
            sub_1000BED3C(v9);
            return v11;
          }
        }
      }
    }
  }
LABEL_20:
  sub_1000BED3C(v9);
  if (!*v11)
  {
    sub_1000C321C(v11[8]);
    sub_1000C321C(v11[6]);
    sub_1000C321C(v11[4]);
    sub_1000C321C((uint64_t)v11);
  }
  return 0;
}

void *sub_100024128(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = sub_1000C33A0(24);
    unsigned int v5 = (void *)v4;
    if (!v4) {
      return v5;
    }
    *(_DWORD *)(v4 + 8) = a2;
    *(_DWORD *)(v4 + 12) = 0;
    *(void *)(v4 + 16) = a1;
    uint64_t v6 = sub_1000C33A0(12 * a2);
    *unsigned int v5 = v6;
    if (v6) {
      return v5;
    }
    sub_1000C321C((uint64_t)v5);
  }
  return 0;
}

uint64_t sub_1000241A8(uint64_t *a1)
{
  sub_1000C321C(*a1);
  return sub_1000C321C((uint64_t)a1);
}

uint64_t sub_1000241E4(uint64_t result)
{
  *(_DWORD *)(result + 12) = 0;
  return result;
}

uint64_t *sub_1000241EC(uint64_t *result, int a2, int a3, __int16 a4, __int16 a5)
{
  uint64_t v5 = qword_100101CC0;
  if (qword_100101CC0)
  {
    if (*(_DWORD *)(qword_100101CC0 + 1208)) {
      a5 = a4;
    }
    uint64_t v5 = *(void *)(qword_100101CC0 + 1200);
  }
  if (v5 >= a5)
  {
    uint64_t v6 = *result;
    int v7 = *((_DWORD *)result + 3);
    if (v7 < 1)
    {
      __int16 v11 = -16384;
      int v10 = -1;
LABEL_16:
      if (v7 >= *((_DWORD *)result + 2))
      {
        if (a5 >= v11) {
          return result;
        }
      }
      else
      {
        *((_DWORD *)result + 3) = v7 + 1;
        int v10 = v7;
      }
      uint64_t v14 = v6 + 12 * v10;
      *(_DWORD *)uint64_t v14 = a2;
      *(_DWORD *)(v14 + 4) = a3;
      *(_WORD *)(v14 + 8) = a4;
      *(_WORD *)(v14 + 10) = a5;
    }
    else
    {
      int v8 = 0;
      uint64_t v9 = (__int16 *)(v6 + 10);
      int v10 = -1;
      __int16 v11 = -16384;
      while (*(_DWORD *)(v9 - 5) != a2 || *(_DWORD *)(v9 - 3) != a3)
      {
        int v13 = *v9;
        v9 += 6;
        __int16 v12 = v13;
        if (v13 > v11)
        {
          int v10 = v8;
          __int16 v11 = v12;
        }
        if (v7 == ++v8) {
          goto LABEL_16;
        }
      }
      if (*v9 > a5)
      {
        *uint64_t v9 = a5;
        *(v9 - 1) = a4;
      }
    }
  }
  return result;
}

uint64_t sub_1000242D0(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2 = (*a1 - *a2);
  if (*a1 == *a2)
  {
    uint64_t v3 = a1[2];
    int v4 = a2[2];
    if (v3 != v4) {
      return (v3 - v4);
    }
    if ((int)v3 < 1)
    {
LABEL_7:
      uint64_t v2 = qword_100101CC0;
      if (qword_100101CC0)
      {
        if (*(_DWORD *)(qword_100101CC0 + 4776)) {
          BOOL v11 = (int)v3 < 1;
        }
        else {
          BOOL v11 = 1;
        }
        if (v11) {
          return 0;
        }
        int v13 = a1 + 96;
        uint64_t v14 = a2 + 96;
        uint64_t v15 = a1[2];
        while (1)
        {
          int v17 = *v13++;
          int v16 = v17;
          int v18 = *v14++;
          uint64_t v2 = (v16 - v18);
          if (v2) {
            break;
          }
          if (!--v15)
          {
            int v19 = a1 + 155;
            unsigned int v20 = a2 + 155;
            do
            {
              int v22 = *v19++;
              int v21 = v22;
              int v23 = *v20++;
              uint64_t v2 = (v21 - v23);
              if (v2) {
                break;
              }
              --v3;
            }
            while (v3);
            return v2;
          }
        }
      }
    }
    else
    {
      uint64_t v5 = (unsigned __int16 *)(a1 + 7);
      uint64_t v6 = (unsigned __int16 *)(a2 + 7);
      uint64_t v7 = a1[2];
      while (1)
      {
        int v9 = *v5++;
        int v8 = v9;
        int v10 = *v6++;
        uint64_t v2 = (v8 - v10);
        if (v2) {
          break;
        }
        if (!--v7) {
          goto LABEL_7;
        }
      }
    }
  }
  return v2;
}

uint64_t sub_100024398(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  int v3 = *(_DWORD *)(a2 + 8);
  if (v2 != v3) {
    return (v2 - v3);
  }
  if ((int)v2 < 1)
  {
LABEL_6:
    uint64_t v10 = qword_100101CC0;
    if (qword_100101CC0)
    {
      if (*(_DWORD *)(qword_100101CC0 + 4776)) {
        BOOL v11 = (int)v2 < 1;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11) {
        return 0;
      }
      int v13 = (int *)(a1 + 384);
      uint64_t v14 = (int *)(a2 + 384);
      uint64_t v15 = *(unsigned int *)(a1 + 8);
      while (1)
      {
        int v17 = *v13++;
        int v16 = v17;
        int v18 = *v14++;
        uint64_t v10 = (v16 - v18);
        if (v10) {
          break;
        }
        if (!--v15)
        {
          int v19 = (int *)(a1 + 620);
          unsigned int v20 = (int *)(a2 + 620);
          do
          {
            int v22 = *v19++;
            int v21 = v22;
            int v23 = *v20++;
            uint64_t v10 = (v21 - v23);
            if (v10) {
              break;
            }
            --v2;
          }
          while (v2);
          return v10;
        }
      }
    }
  }
  else
  {
    int v4 = (unsigned __int16 *)(a1 + 28);
    uint64_t v5 = (unsigned __int16 *)(a2 + 28);
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    while (1)
    {
      int v8 = *v4++;
      int v7 = v8;
      int v9 = *v5++;
      uint64_t v10 = (v7 - v9);
      if (v10) {
        break;
      }
      if (!--v6) {
        goto LABEL_6;
      }
    }
  }
  return v10;
}

uint64_t sub_100024450(int *a1, _DWORD *a2)
{
  int v3 = *a1;
  uint64_t result = (*a1 - *a2);
  if (v3 == *a2) {
    return (a1[6] - a2[6]);
  }
  return result;
}

uint64_t sub_100024474(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v7 = result;
    uint64_t v8 = 0;
    int v21 = 0;
    uint64_t v9 = a4;
    uint64_t v10 = a5;
    do
    {
      uint64_t v11 = a4 + 1096 * v8;
      uint64_t result = sub_10009EFC4(v7, *(_DWORD *)(v11 + 24), v11 + 28, v11 + 384, v11 + 323, v11 + 856, (__int16 *)(v11 + 146), v11 + 264, 59, &v21);
      *(_DWORD *)(v11 + 8) = result;
      int v17 = (int *)(v11 + 8);
      if ((int)result >= 1)
      {
        uint64_t v18 = 0;
        do
        {
          int v19 = (unsigned int *)(v9 + 4 * v18);
          uint64_t result = sub_100031A50(a2, v19[96], v19[214], v12, v13, v14, v15, v16);
          v19[155] = result;
          ++v18;
        }
        while (v18 < *v17);
      }
      *(void *)(a4 + 1096 * v8++ + 16) = *(void *)(a3 + 8 * v21);
      v9 += 1096;
    }
    while (v8 != v10);
  }
  return result;
}

uint64_t sub_100024580(uint64_t result, uint64_t a2, uint64_t a3, char *a4, int *a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v9 = *a5;
  int v76 = v9;
  if (!v9) {
    return result;
  }
  int v10 = a6;
  int v13 = a6 - 1;
  if (a6 == 1)
  {
    *a5 = 1;
    uint64_t v14 = *(void *)(a3 + 16);
    int v77 = 0;
    uint64_t result = sub_10009EFC4(v14, *((_DWORD *)a4 + 6), (uint64_t)(a4 + 28), (uint64_t)(a4 + 384), (uint64_t)(a4 + 323), (uint64_t)(a4 + 856), (__int16 *)a4 + 73, (uint64_t)(a4 + 264), 59, &v77);
    *((_DWORD *)a4 + 2) = result;
    if ((int)result >= 1)
    {
      uint64_t v20 = 0;
      do
      {
        int v21 = (unsigned int *)&a4[4 * v20];
        uint64_t result = sub_100031A50(a2, v21[96], v21[214], v15, v16, v17, v18, v19);
        v21[155] = result;
        ++v20;
      }
      while (v20 < *((int *)a4 + 2));
    }
    *((void *)a4 + 2) = *(void *)(a7 + 8 * v77);
    return result;
  }
  uint64_t v65 = result;
  qsort(*(void **)a3, *(int *)(a3 + 12), 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_100024B74);
  long long v29 = (char *)sub_1000CD3E8(1096, v22, v23, v24, v25, v26, v27, v28);
  long long v30 = *(unsigned int **)a3;
  *(_OWORD *)(v29 + 264) = 0u;
  *(_OWORD *)(v29 + 280) = 0u;
  *(_OWORD *)(v29 + 296) = 0u;
  *(_OWORD *)(v29 + 307) = 0u;
  *((_WORD *)v29 + 2) = 0;
  *((_DWORD *)v29 + 3) = 1;
  if (*(int *)(a3 + 12) < 1) {
    goto LABEL_66;
  }
  int v31 = 0;
  uint64_t v69 = &a4[1096 * v13];
  int v70 = v10;
  while (1)
  {
    int v68 = v31;
    if ((int)v9 >= 1) {
      break;
    }
LABEL_10:
    v30 += 3;
    int v31 = v68 + 1;
    if (v68 + 1 >= *(_DWORD *)(a3 + 12)) {
      goto LABEL_66;
    }
  }
  if (v9 == 1)
  {
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v32 = v9 & 0xFFFFFFFE;
    uint64_t v33 = v32;
    long long v34 = a4;
    do
    {
      *((_DWORD *)v34 + 3) = 0;
      *((_DWORD *)v34 + 277) = 0;
      v34 += 2192;
      v33 -= 2;
    }
    while (v33);
    if (v32 == v9) {
      goto LABEL_19;
    }
  }
  long long v35 = &a4[1096 * v32 + 12];
  uint64_t v36 = v9 - v32;
  do
  {
    *(_DWORD *)long long v35 = 0;
    v35 += 1096;
    --v36;
  }
  while (v36);
LABEL_19:
  int v37 = 0;
  uint64_t v38 = a4;
  int v71 = v30;
  while (1)
  {
    if (*((_DWORD *)v38 + 3)) {
      goto LABEL_22;
    }
    LODWORD(v39) = qword_100101CC0;
    if (qword_100101CC0)
    {
      unint64_t v40 = (unint64_t)(*(void *)(qword_100101CC0 + 1184) * *((__int16 *)v30 + 5) + 16) >> 5;
      uint64_t v39 = *(void *)(qword_100101CC0 + 1192);
    }
    else
    {
      LODWORD(v40) = 0;
    }
    int v41 = *(_DWORD *)v38 + *((__int16 *)v30 + 4) + (((v40 & 0x7FFFFFF) + v39) & ~((int)((v40 & 0x7FFFFFF) + v39) >> 31));
    *(_DWORD *)long long v29 = v41;
    if (v9 == v10 && v41 > *(_DWORD *)v69) {
      break;
    }
    if (sub_10009EBD0(*(void *)(a3 + 16), (uint64_t)v29, (uint64_t)v38, v30))
    {
      int v42 = &a4[1096 * (int)v9];
      uint64_t v43 = (v9 - 1);
      if ((int)v9 < 1)
      {
        __int16 v48 = a4;
        uint64_t v43 = v9;
        int v46 = &a4[1096 * (int)v9];
      }
      else
      {
        uint64_t v44 = 0;
        BOOL v45 = 0;
        int v46 = &a4[1096 * (int)v9];
        while (1)
        {
          __int16 v48 = &a4[v44];
          int v47 = *((_DWORD *)v29 + 6) - *(_DWORD *)&a4[v44 + 24];
          if (!v47) {
            break;
          }
          if (v45)
          {
            BOOL v45 = 1;
            v44 += 1096;
            __int16 v48 = &a4[v44];
            if (&a4[v44] >= v42) {
              goto LABEL_40;
            }
          }
          else
          {
            if (*(_DWORD *)v29 != *(_DWORD *)v48) {
              int v47 = *(_DWORD *)v29 - *(_DWORD *)v48;
            }
            BOOL v45 = v47 < 0;
            if (v47 < 0) {
              int v46 = &a4[1096 * (v44 == 0) + v44];
            }
            v44 += 1096;
            __int16 v48 = &a4[v44];
            if (&a4[v44] >= v42)
            {
LABEL_40:
              uint64_t v43 = v9;
              if (!v45) {
                goto LABEL_47;
              }
LABEL_54:
              int v10 = v70;
              long long v30 = v71;
              goto LABEL_57;
            }
          }
        }
        if (*(_DWORD *)v29 >= *(_DWORD *)v48) {
          goto LABEL_64;
        }
        if (!v44)
        {
          *(_DWORD *)a4 = *(_DWORD *)v29;
LABEL_64:
          int v10 = v70;
          long long v30 = v71;
          goto LABEL_22;
        }
        j__memmove(v48, &a4[v44 + 1096], 1096 * (int)v9 - v44 - 1096);
        v42 -= 1096;
        if (v45) {
          goto LABEL_54;
        }
        int v46 = v42;
      }
LABEL_47:
      if (v48 >= v42) {
        goto LABEL_54;
      }
      int v49 = *(_DWORD *)v29;
      long long v30 = v71;
      while (1)
      {
        int v50 = v49 - *(_DWORD *)v48;
        if (v49 == *(_DWORD *)v48) {
          int v50 = *((_DWORD *)v29 + 6) - *((_DWORD *)v48 + 6);
        }
        if (v50 < 0) {
          break;
        }
        v48 += 1096;
        if (v48 >= v42) {
          goto LABEL_56;
        }
      }
      int v46 = v48;
LABEL_56:
      int v10 = v70;
LABEL_57:
      int v51 = 125400505 * ((unint64_t)(v42 - v46) >> 3);
      if ((int)v43 < v10)
      {
        uint64_t v9 = (v43 + 1);
        if (v51 < 1)
        {
LABEL_20:
          memcpy(v46, v29, 0x448uLL);
          int v76 = v9;
          if (v46 <= v38)
          {
            ++v37;
            v38 += 1096;
          }
          goto LABEL_22;
        }
LABEL_62:
        j__memmove(v46 + 1096, v46, 1096 * v51);
        goto LABEL_20;
      }
      if (v46 != v42)
      {
        --v51;
        uint64_t v9 = v43;
        if (v51 < 1) {
          goto LABEL_20;
        }
        goto LABEL_62;
      }
    }
LABEL_22:
    v38 += 1096;
    if (++v37 >= (int)v9) {
      goto LABEL_10;
    }
  }
  if (v37) {
    goto LABEL_10;
  }
  *a5 = v10;
LABEL_66:
  if ((int)v9 >= 1)
  {
    uint64_t v52 = 0;
    uint64_t v74 = *(void *)(a3 + 16);
    int v78 = 0;
    char v53 = a4;
    do
    {
      int v54 = &a4[1096 * v52];
      int v55 = sub_10009EFC4(v74, *((_DWORD *)v54 + 6), (uint64_t)(v54 + 28), (uint64_t)(v54 + 384), (uint64_t)(v54 + 323), (uint64_t)(v54 + 856), (__int16 *)v54 + 73, (uint64_t)(v54 + 264), 59, &v78);
      *((_DWORD *)v54 + 2) = v55;
      int v61 = (int *)(v54 + 8);
      if (v55 >= 1)
      {
        uint64_t v62 = 0;
        do
        {
          *(_DWORD *)&v53[4 * v62 + 620] = sub_100031A50(a2, *(unsigned int *)&v53[4 * v62 + 384], *(unsigned int *)&v53[4 * v62 + 856], v56, v57, v58, v59, v60);
          ++v62;
        }
        while (v62 < *v61);
      }
      *(void *)&a4[1096 * v52++ + 16] = *(void *)(a7 + 8 * v78);
      v53 += 1096;
    }
    while (v52 != v9);
  }
  qsort(a4, (int)v9, 0x448uLL, (int (__cdecl *)(const void *, const void *))sub_1000242D0);
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1180)) {
    sub_100024BF0(v65, (uint64_t)a4, &v76, a7, a8, a9, v63, v64);
  }
  sub_100024E48(v65, (unint64_t)a4, &v76);
  uint64_t result = (uint64_t)sub_1000CD4D0(v29, 1096);
  *a5 = v76;
  return result;
}

uint64_t sub_100024B74(uint64_t a1, uint64_t a2)
{
  if (*(__int16 *)(a1 + 8) < *(__int16 *)(a2 + 8)) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = *(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8);
  }
  if (v2) {
    return v2;
  }
  uint64_t v2 = *(__int16 *)(a1 + 10) < *(__int16 *)(a2 + 10)
     ? 0xFFFFFFFFLL
     : *(unsigned __int16 *)(a1 + 10) != *(unsigned __int16 *)(a2 + 10);
  if (v2) {
    return v2;
  }
  uint64_t v2 = *(_DWORD *)a1 < *(_DWORD *)a2 ? 0xFFFFFFFFLL : *(_DWORD *)a1 != *(_DWORD *)a2;
  if (v2) {
    return v2;
  }
  int v4 = *(_DWORD *)(a1 + 4);
  int v5 = *(_DWORD *)(a2 + 4);
  BOOL v6 = v4 < v5;
  LODWORD(v7) = v4 != v5;
  if (v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v7;
  }
}

void *sub_100024BF0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  unint64_t v9 = a2;
  uint64_t v11 = *a3;
  __dst = (void *)sub_1000CD3E8(1096, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  int v12 = v11 - 1;
  if ((int)v11 < 1)
  {
    int v15 = v11;
  }
  else
  {
    uint64_t v28 = a1;
    long long v29 = v8;
    int v13 = 0;
    uint64_t v14 = v9 + 1096 * v11 + 1096;
    int v15 = v11;
    unint64_t v30 = v9;
    do
    {
      uint64_t v16 = (int *)(v9 + 1096 * (v11 - 1));
      int v17 = *v16;
      int v18 = sub_10003BAA4((uint64_t)(v16 + 7), (uint64_t)(v16 + 96), (uint64_t)v16 + 323, (uint64_t)v16 + 146, 0, v16 + 2, v16);
      int v19 = *v16;
      if (*v16 == 0x40000000)
      {
        if (v11 < v15) {
          j__memmove(v16, (const void *)(v9 + 1096 * v11), 1096 * (v15 - (int)v11));
        }
        --v15;
      }
      else
      {
        if (v18 > v13) {
          int v13 = v18;
        }
        BOOL v20 = v17 < v19 && v11 < v15;
        if (v20)
        {
          int v21 = (_DWORD *)(v9 + 1096 * v11);
          if (v19 > *v21)
          {
            uint64_t v22 = 0;
            int v23 = v15 - 1;
            uint64_t v24 = (int *)v14;
            while (v11 + v22 + 1 < v15)
            {
              int v25 = *v24;
              ++v22;
              v24 += 274;
              if (v19 <= v25)
              {
                int v23 = v12 + v22;
                break;
              }
            }
            memcpy(__dst, v16, 0x448uLL);
            j__memmove(v16, v21, 1096 * (v23 - ((int)v11 - 1)));
            uint64_t v26 = (void *)(v30 + 1096 * v23);
            unint64_t v9 = v30;
            memcpy(v26, __dst, 0x448uLL);
          }
        }
      }
      --v12;
      v14 -= 1096;
      BOOL v20 = v11-- <= 1;
    }
    while (!v20);
    int v32 = v15;
    if (v13 < 1)
    {
      uint64_t v8 = v29;
    }
    else
    {
      uint64_t v8 = v29;
      if (v15 >= 2)
      {
        sub_100024E48(v28, v9, &v32);
        int v15 = v32;
      }
    }
  }
  *uint64_t v8 = v15;
  return sub_1000CD4D0(__dst, 1096);
}

uint64_t sub_100024E48(uint64_t result, unint64_t a2, int *a3)
{
  int v3 = *a3;
  if (*a3 >= 2)
  {
    uint64_t v4 = result;
    int v24 = v3 - 1;
    int v25 = (_DWORD *)(a2 + 1096 * (v3 - 1));
    int v5 = v25 - 179;
    do
    {
      uint64_t v8 = v25;
      v25 -= 274;
      if ((unint64_t)v25 >= a2)
      {
        unint64_t v9 = v5;
        int v10 = v8;
        uint64_t v11 = v25;
        while (1)
        {
          uint64_t v12 = *(v10 - 272);
          if (v12 == v8[2]) {
            break;
          }
LABEL_7:
          v11 -= 274;
          v10 -= 274;
          v9 -= 274;
          if ((unint64_t)v11 < a2) {
            goto LABEL_4;
          }
        }
        uint64_t v13 = qword_100101CC0;
        if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1760))
        {
          uint64_t v14 = *(v10 - 272);
          while ((int)v14 >= 1)
          {
            uint64_t v15 = 2 * v14--;
            if (*(unsigned __int16 *)((char *)v10 + v15 - 1070) != *(unsigned __int16 *)((char *)v8 + v15 + 26)) {
              goto LABEL_7;
            }
          }
        }
        else
        {
          uint64_t v16 = *(v10 - 272);
          while ((int)v16 >= 1)
          {
            uint64_t v17 = v16 - 1;
            uint64_t v18 = 2 * v16;
            int v19 = sub_1000BD964(v4, *((unsigned __int16 *)v10 + v16 - 535), 0);
            uint64_t result = sub_1000BD964(v4, *(unsigned __int16 *)((char *)v8 + v18 + 26), 0);
            uint64_t v16 = v17;
            if (v19 != result) {
              goto LABEL_7;
            }
          }
          uint64_t v13 = qword_100101CC0;
        }
        if (v13 && *(_DWORD *)(v13 + 4776))
        {
          BOOL v20 = &v9[v12];
          while ((int)v12 >= 1)
          {
            int v21 = &v8[v12];
            if (*v20 == v21[95])
            {
              int v22 = v20[59];
              --v20;
              --v12;
              if (v22 == v21[154]) {
                continue;
              }
            }
            goto LABEL_7;
          }
        }
        uint64_t v6 = *a3 - 1;
        *a3 = v6;
        uint64_t result = (uint64_t)j__memmove(v8, v8 + 274, 1096 * (v6 - v24));
      }
LABEL_4:
      v5 -= 274;
    }
    while (v24-- > 1);
  }
  return result;
}

void *sub_100025048(void *result, uint64_t a2, int *a3, char *a4, int *a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  int v9 = *a5;
  int v91 = v9;
  if (!v9) {
    return result;
  }
  int v10 = a6;
  int v11 = 1;
  int v12 = a6 - 1;
  if (a6 == 1) {
    goto LABEL_78;
  }
  uint64_t v13 = a3;
  uint64_t v75 = (uint64_t)result;
  int v76 = a5;
  int v90 = 0;
  qsort(*(void **)a3, a3[3], 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_100024B74);
  unint64_t v22 = sub_1000CD3E8(1096, v15, v16, v17, v18, v19, v20, v21);
  unint64_t v25 = v22;
  uint64_t v26 = *(void *)v13;
  *(_OWORD *)(v22 + 264) = 0u;
  *(_OWORD *)(v22 + 280) = 0u;
  *(_OWORD *)(v22 + 296) = 0u;
  *(_OWORD *)(v22 + 307) = 0u;
  *(_DWORD *)(v22 + 12) = 1;
  if (v13[3] < 1) {
    goto LABEL_74;
  }
  int v27 = 0;
  unsigned int v87 = &a4[1096 * v12];
  int v77 = (unsigned __int16 *)(v22 + 28);
  int v86 = v10;
  int16x8_t v79 = (uint64_t *)v13;
  while (1)
  {
    int v88 = sub_10009EFC4(*((void *)v13 + 2), *(_DWORD *)v26, (uint64_t)__src, (uint64_t)v99, (uint64_t)v93, (uint64_t)v95, v101, 0, 59, &v90);
    unsigned int v28 = sub_10009EFC4(*((void *)v13 + 2), *(_DWORD *)(v26 + 4), (uint64_t)v102, (uint64_t)v98, (uint64_t)v92, (uint64_t)v94, v100, 0, 59, &v90);
    int v83 = v27;
    if (v9 >= 1) {
      break;
    }
LABEL_6:
    v26 += 12;
    int v27 = v83 + 1;
    uint64_t v13 = (int *)v79;
    if (v83 + 1 >= *((_DWORD *)v79 + 3)) {
      goto LABEL_74;
    }
  }
  int v32 = v28;
  if (v9 == 1)
  {
    uint64_t v33 = 0;
    int v34 = v88;
  }
  else
  {
    uint64_t v33 = v9 & 0xFFFFFFFE;
    uint64_t v35 = v33;
    uint64_t v36 = a4;
    int v34 = v88;
    do
    {
      *((_DWORD *)v36 + 3) = 0;
      *((_DWORD *)v36 + 277) = 0;
      v36 += 2192;
      v35 -= 2;
    }
    while (v35);
    if (v33 == v9) {
      goto LABEL_15;
    }
  }
  int v37 = &a4[1096 * v33 + 12];
  uint64_t v38 = v9 - v33;
  do
  {
    *(_DWORD *)int v37 = 0;
    v37 += 1096;
    --v38;
  }
  while (v38);
LABEL_15:
  int v39 = 0;
  uint64_t v82 = v28;
  uint64_t v40 = 2 * v28;
  unint64_t v41 = (unint64_t)a4;
  uint64_t v80 = 2 * v34;
  uint64_t v81 = v34;
  int v89 = v28;
  while (*(_DWORD *)(v41 + 12))
  {
LABEL_20:
    v41 += 1096;
    ++v39;
    int v9 = v91;
    if (v39 >= v91) {
      goto LABEL_6;
    }
  }
  LODWORD(v42) = qword_100101CC0;
  if (qword_100101CC0)
  {
    unint64_t v43 = (unint64_t)(*(void *)(qword_100101CC0 + 1184) * *(__int16 *)(v26 + 10) + 16) >> 5;
    uint64_t v42 = *(void *)(qword_100101CC0 + 1192);
  }
  else
  {
    LODWORD(v43) = 0;
  }
  int v44 = *(_DWORD *)v41 + *(__int16 *)(v26 + 8) + (((v43 & 0x7FFFFFF) + v42) & ~((int)((v43 & 0x7FFFFFF) + v42) >> 31));
  *(_DWORD *)unint64_t v25 = v44;
  *(void *)(v25 + 16) = *(void *)(v41 + 16);
  if (v9 != v10 || v44 <= *(_DWORD *)v87)
  {
    if (*(_DWORD *)(v41 + 8) >= v32)
    {
      if (v32 < 1)
      {
LABEL_32:
        if (a2)
        {
          if (v34 >= 1)
          {
            int v46 = v97;
            int v47 = (unsigned int *)v95;
            __int16 v48 = (unsigned int *)v99;
            uint64_t v49 = v81;
            do
            {
              unsigned int v51 = *v48++;
              uint64_t v50 = v51;
              unsigned int v52 = *v47++;
              *v46++ = sub_100031A50(a2, v50, v52, v29, v30, v31, v23, v24);
              --v49;
            }
            while (v49);
          }
          if (v89 >= 1)
          {
            char v53 = v96;
            int v54 = (unsigned int *)v94;
            int v55 = (unsigned int *)v98;
            uint64_t v56 = v82;
            do
            {
              unsigned int v58 = *v55++;
              uint64_t v57 = v58;
              unsigned int v59 = *v54++;
              *v53++ = sub_100031A50(a2, v57, v59, v29, v30, v31, v23, v24);
              --v56;
            }
            while (v56);
          }
        }
        else
        {
          __memset_chk();
          __memset_chk();
        }
        int v34 = v88;
        int v32 = v89;
        sub_1000256A4((char *)v25, v41, __src, v99, v93, v97, v101, v88, v89);
        uint64_t v29 = *(unsigned int *)(v25 + 8);
        if ((int)v29 < 1)
        {
          int v10 = v86;
        }
        else
        {
          int v10 = v86;
          if ((!a8
             || qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1264)
             || sub_100026420(a7, a8, v77, v29))
            && sub_100025868(a4, v41, v86, &v91, (_DWORD *)v25))
          {
            ++v39;
            v41 += 1096;
          }
        }
      }
      else
      {
        uint64_t v45 = 0;
        while (*(unsigned __int16 *)(v41 + v45 + 28) == *(unsigned __int16 *)&v102[v45])
        {
          v45 += 2;
          if (v40 == v45) {
            goto LABEL_32;
          }
        }
      }
    }
    if (*(_WORD *)(v26 + 8) || *(_DWORD *)(v41 + 8) < v34) {
      goto LABEL_20;
    }
    if (v34 < 1)
    {
      if (!a2)
      {
LABEL_62:
        __memset_chk();
        __memset_chk();
LABEL_63:
        int v34 = v88;
        int v32 = v89;
        sub_1000256A4((char *)v25, v41, v102, v98, v92, v96, v100, v89, v88);
        uint64_t v29 = *(unsigned int *)(v25 + 8);
        if ((int)v29 < 1)
        {
          int v10 = v86;
        }
        else
        {
          int v10 = v86;
          if ((!a8
             || qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1264)
             || sub_100026420(a7, a8, v77, v29))
            && sub_100025868(a4, v41, v86, &v91, (_DWORD *)v25))
          {
            ++v39;
            v41 += 1096;
          }
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v60 = 0;
      do
      {
        if (*(unsigned __int16 *)(v41 + v60 + 28) != *(unsigned __int16 *)&__src[v60])
        {
          int v32 = v89;
          goto LABEL_20;
        }
        v60 += 2;
      }
      while (v80 != v60);
      if (!a2) {
        goto LABEL_62;
      }
      int v61 = v97;
      uint64_t v62 = (unsigned int *)v95;
      uint64_t v63 = (unsigned int *)v99;
      uint64_t v64 = v81;
      do
      {
        unsigned int v66 = *v63++;
        uint64_t v65 = v66;
        unsigned int v67 = *v62++;
        *v61++ = sub_100031A50(a2, v65, v67, v29, v30, v31, v23, v24);
        --v64;
      }
      while (v64);
    }
    if (v89 >= 1)
    {
      int v68 = v96;
      uint64_t v69 = (unsigned int *)v94;
      int v70 = (unsigned int *)v98;
      uint64_t v71 = v82;
      do
      {
        unsigned int v73 = *v70++;
        uint64_t v72 = v73;
        unsigned int v74 = *v69++;
        *v68++ = sub_100031A50(a2, v72, v74, v29, v30, v31, v23, v24);
        --v71;
      }
      while (v71);
    }
    goto LABEL_63;
  }
  int v9 = v10;
  if (v39) {
    goto LABEL_6;
  }
  int *v76 = v10;
LABEL_74:
  if (qword_100101CC0)
  {
    if (*(_DWORD *)(qword_100101CC0 + 1180)) {
      sub_100024BF0(v75, (uint64_t)a4, &v91, a7, a8, a9, v23, v24);
    }
  }
  sub_100024E48(v75, (unint64_t)a4, &v91);
  uint64_t result = sub_1000CD4D0((void *)v25, 1096);
  int v11 = v91;
  a5 = v76;
LABEL_78:
  *a5 = v11;
  return result;
}

char *sub_1000256A4(char *result, uint64_t a2, void *__src, const void *a4, const void *a5, const void *a6, const void *a7, int a8, int a9)
{
  uint64_t v10 = (uint64_t)result;
  int v11 = a9;
  int v12 = result + 28;
  uint64_t v13 = result + 384;
  uint64_t v14 = result + 323;
  uint64_t v15 = result + 620;
  uint64_t v30 = result + 146;
  if (a8 >= 1)
  {
    uint64_t v28 = a2;
    memcpy(result + 28, __src, (2 * a8));
    memcpy(v13, a4, 4 * a8);
    memcpy(v14, a5, a8);
    memcpy(v15, a6, 4 * a8);
    uint64_t result = (char *)memcpy(v30, a7, (2 * a8));
    int v11 = a9;
    a2 = v28;
  }
  size_t v18 = (*(_DWORD *)(a2 + 8) - v11);
  *(_DWORD *)(v10 + 8) = v18 + a8;
  if ((int)v18 + a8 < 60)
  {
    if ((int)v18 >= 1)
    {
      uint64_t v19 = v15;
      uint64_t v29 = 2 * a8;
      uint64_t v20 = &v12[v29];
      uint64_t v21 = a2;
      uint64_t v27 = a2 + 2 * v11;
      int v22 = v11;
      memcpy(v20, (const void *)(v27 + 28), (2 * v18));
      uint64_t v23 = 4 * a8;
      uint64_t v24 = v21 + 4 * v22;
      memcpy(&v13[v23], (const void *)(v24 + 384), 4 * (int)v18);
      memcpy(&v14[a8], (const void *)(v21 + v22 + 323), v18);
      memcpy(&v19[v23], (const void *)(v24 + 620), 4 * (int)v18);
      return (char *)memcpy(&v30[v29], (const void *)(v27 + 146), (2 * v18));
    }
  }
  else
  {
    *(_DWORD *)(v10 + 8) = 0;
  }
  return result;
}

BOOL sub_100025868(char *__dst, unint64_t a2, int a3, int *a4, _DWORD *a5)
{
  int v9 = *a4;
  uint64_t v10 = &__dst[1096 * *a4];
  BOOL v11 = 0;
  if (*a4 < 1)
  {
    uint64_t v19 = &__dst[1096 * v9];
    goto LABEL_47;
  }
  uint64_t v12 = a5[2];
  uint64_t v13 = 2 * v12;
  uint64_t v14 = a5 + 7;
  uint64_t v15 = 4 * v12;
  uint64_t v16 = a5 + 96;
  uint64_t v17 = a5 + 155;
  size_t v18 = __dst;
  uint64_t v19 = &__dst[1096 * v9];
  while (1)
  {
    int v20 = *((_DWORD *)v18 + 2);
    int v21 = v12 - v20;
    if (v12 != v20) {
      goto LABEL_20;
    }
    if ((int)v12 < 1) {
      break;
    }
    uint64_t v22 = 0;
    while (1)
    {
      int v21 = *(unsigned __int16 *)((char *)v14 + v22) - *(unsigned __int16 *)&v18[v22 + 28];
      if (v21) {
        break;
      }
      v22 += 2;
      if (v13 == v22) {
        goto LABEL_10;
      }
    }
LABEL_20:
    if (!v21) {
      goto LABEL_41;
    }
    if (v11)
    {
      BOOL v11 = 1;
    }
    else
    {
      int v25 = *a5 - *(_DWORD *)v18;
      if (*a5 != *(_DWORD *)v18) {
        goto LABEL_38;
      }
      int v25 = v12 - v20;
      if (v12 != v20) {
        goto LABEL_38;
      }
      if ((int)v12 >= 1)
      {
        uint64_t v26 = 0;
        do
        {
          int v25 = *(unsigned __int16 *)((char *)v14 + v26) - *(unsigned __int16 *)&v18[v26 + 28];
          if (v25) {
            goto LABEL_38;
          }
          v26 += 2;
        }
        while (v13 != v26);
      }
      BOOL v11 = 0;
      if (qword_100101CC0 && (int)v12 >= 1 && *(_DWORD *)(qword_100101CC0 + 4776))
      {
        unint64_t v27 = 0;
        while (1)
        {
          int v25 = v16[v27 / 4] - *(_DWORD *)&v18[v27 + 384];
          if (v25) {
            break;
          }
          v27 += 4;
          if (v15 == v27)
          {
            unint64_t v28 = 0;
            while (1)
            {
              int v25 = v17[v28 / 4] - *(_DWORD *)&v18[v28 + 620];
              if (v25) {
                goto LABEL_38;
              }
              v28 += 4;
              if (v15 == v28)
              {
                BOOL v11 = 0;
                goto LABEL_4;
              }
            }
          }
        }
LABEL_38:
        BOOL v11 = v25 < 0;
        if (v25 < 0) {
          uint64_t v19 = &v18[1096 * (v18 == __dst)];
        }
      }
    }
LABEL_4:
    v18 += 1096;
    if (v18 >= v10)
    {
      __dst = v18;
      if (v11) {
        goto LABEL_79;
      }
      goto LABEL_47;
    }
  }
LABEL_10:
  if (qword_100101CC0 && (int)v12 >= 1 && *(_DWORD *)(qword_100101CC0 + 4776))
  {
    unint64_t v23 = 0;
    while (1)
    {
      int v21 = v16[v23 / 4] - *(_DWORD *)&v18[v23 + 384];
      if (v21) {
        goto LABEL_20;
      }
      v23 += 4;
      if (v15 == v23)
      {
        unint64_t v24 = 0;
        while (1)
        {
          int v21 = v17[v24 / 4] - *(_DWORD *)&v18[v24 + 620];
          if (v21) {
            goto LABEL_20;
          }
          v24 += 4;
          if (v15 == v24) {
            goto LABEL_41;
          }
        }
      }
    }
  }
LABEL_41:
  if (*a5 >= *(_DWORD *)v18) {
    return 0;
  }
  if (v18 == __dst)
  {
    uint64_t v43 = 0;
    *(_DWORD *)__dst = *a5;
    return v43;
  }
  v10 -= 1096;
  j__memmove(v18, v18 + 1096, v10 - v18);
  __dst = v18;
  --v9;
  if (!v11)
  {
LABEL_47:
    if (__dst >= v10) {
      goto LABEL_79;
    }
    int v29 = *a5;
    if (qword_100101CC0)
    {
      while (1)
      {
        int v30 = v29 - *(_DWORD *)__dst;
        if (v29 != *(_DWORD *)__dst) {
          goto LABEL_51;
        }
        uint64_t v31 = a5[2];
        int v32 = *((_DWORD *)__dst + 2);
        if (v31 != v32) {
          break;
        }
        if ((int)v31 >= 1)
        {
          uint64_t v33 = 0;
          while (1)
          {
            int v30 = *(unsigned __int16 *)((char *)a5 + v33 + 28) - *(unsigned __int16 *)&__dst[v33 + 28];
            if (v30) {
              break;
            }
            v33 += 2;
            if (2 * v31 == v33)
            {
              if (!*(_DWORD *)(qword_100101CC0 + 4776)) {
                goto LABEL_52;
              }
              unint64_t v34 = 0;
              uint64_t v35 = 4 * v31;
              while (1)
              {
                int v30 = a5[v34 / 4 + 96] - *(_DWORD *)&__dst[v34 + 384];
                if (v30) {
                  goto LABEL_51;
                }
                v34 += 4;
                if (v35 == v34)
                {
                  unint64_t v36 = 0;
                  while (1)
                  {
                    int v30 = a5[v36 / 4 + 155] - *(_DWORD *)&__dst[v36 + 620];
                    if (v30) {
                      goto LABEL_51;
                    }
                    v36 += 4;
                    if (v35 == v36) {
                      goto LABEL_52;
                    }
                  }
                }
              }
            }
          }
LABEL_51:
          if (v30 < 0) {
            goto LABEL_78;
          }
        }
LABEL_52:
        __dst += 1096;
        if (__dst >= v10) {
          goto LABEL_79;
        }
      }
      int v30 = v31 - v32;
      goto LABEL_51;
    }
    do
    {
      int v37 = v29 - *(_DWORD *)__dst;
      if (v29 == *(_DWORD *)__dst)
      {
        uint64_t v38 = a5[2];
        int v39 = *((_DWORD *)__dst + 2);
        if (v38 == v39)
        {
          if ((int)v38 < 1) {
            goto LABEL_70;
          }
          uint64_t v40 = 0;
          uint64_t v41 = 2 * v38;
          while (1)
          {
            int v37 = *(unsigned __int16 *)((char *)a5 + v40 + 28) - *(unsigned __int16 *)&__dst[v40 + 28];
            if (v37) {
              break;
            }
            v40 += 2;
            if (v41 == v40) {
              goto LABEL_70;
            }
          }
        }
        else
        {
          int v37 = v38 - v39;
        }
      }
      if (v37 < 0)
      {
LABEL_78:
        uint64_t v19 = __dst;
        break;
      }
LABEL_70:
      __dst += 1096;
    }
    while (__dst < v10);
  }
LABEL_79:
  int v42 = 125400505 * ((unint64_t)(v10 - v19) >> 3);
  if (v9 < a3)
  {
    ++v9;
    if (v42 >= 1) {
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  if (v19 == v10) {
    return 0;
  }
  if (--v42 >= 1) {
LABEL_81:
  }
    j__memmove(v19 + 1096, v19, 1096 * v42);
LABEL_82:
  memcpy(v19, a5, 0x448uLL);
  *a4 = v9;
  return (unint64_t)v19 <= a2;
}

char *sub_100025CA8(char *result, int *a2)
{
  int v2 = *a2;
  if (*a2 >= 2)
  {
    uint64_t v4 = result;
    int v5 = v2 - 1;
    uint64_t v6 = &result[1096 * (v2 - 1)];
    uint64_t v7 = v6 - 1096;
    do
    {
      int v9 = v7;
      while (v9 >= v4)
      {
        int v10 = *((_DWORD *)v9 + 6);
        v9 -= 1096;
        if (v10 == *((_DWORD *)v6 + 6))
        {
          uint64_t v11 = *a2 - 1;
          *a2 = v11;
          uint64_t result = (char *)j__memmove(v6, v6 + 1096, 1096 * (v11 - v5));
          break;
        }
      }
      v6 -= 1096;
      v7 -= 1096;
      BOOL v8 = __OFSUB__(v5--, 1);
    }
    while (!((v5 < 0) ^ v8 | (v5 == 0)));
  }
  return result;
}

uint64_t sub_100025D50(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_100025D58(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_100025D60(uint64_t a1, int a2)
{
  if (a2 > 1024) {
    return 0;
  }
  if (a2 < 1) {
    return 1;
  }
  uint64_t v4 = a2;
  while (1)
  {
    if (*(void *)a1)
    {
      int v5 = *(uint64_t (**)(void))(*(void *)a1 + 232);
      if (v5)
      {
        uint64_t result = v5();
        if (!result) {
          break;
        }
      }
    }
    a1 += 8;
    if (!--v4) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_100025DE4(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = a2;
  do
  {
    if (*(void *)a1)
    {
      uint64_t v4 = *(unsigned int (**)(void))(*(void *)a1 + 200);
      if (!v4 || v4()) {
        return 1;
      }
    }
    a1 += 8;
    --v3;
  }
  while (v3);
  return 0;
}

uint64_t sub_100025E5C(void *a1, int a2)
{
  if (a2 > 1024) {
    return 0;
  }
  if (a2 < 1) {
    return 1;
  }
  uint64_t v4 = a2;
  uint64_t result = 1;
  do
  {
    if (*a1)
    {
      int v5 = *(uint64_t (**)(void))(*a1 + 152);
      if (v5)
      {
        uint64_t result = v5(*a1);
        if (!result) {
          break;
        }
      }
    }
    ++a1;
    --v4;
  }
  while (v4);
  return result;
}

uint64_t sub_100025ED4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 8 * ((a3 >> 53) & 0x3FF)) + 168);
  if (v3) {
    return v3();
  }
  else {
    return 0;
  }
}

uint64_t sub_100025F00(uint64_t *a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = a2;
  do
  {
    if (*(_DWORD *)*a1 == 3 && sub_100028D24(*a1)) {
      return 1;
    }
    ++a1;
    --v3;
  }
  while (v3);
  return 0;
}

uint64_t sub_100025F78(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100028718(a2, a1, a3, a4);
}

uint64_t sub_100025F88(uint64_t *a1, int a2, unsigned __int16 *a3)
{
  if (a2 < 1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = a2;
    LODWORD(v6) = 0;
    if (a3)
    {
      do
      {
        uint64_t v7 = *a1++;
        uint64_t v6 = sub_100028E3C(v7, (uint64_t)&a3[(int)v6]) + v6;
        --v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v8 = *a1++;
        uint64_t v6 = sub_100028E3C(v8, 0) + v6;
        --v5;
      }
      while (v5);
    }
  }
  if (a3)
  {
    qsort(a3, (int)v6, 2uLL, (int (__cdecl *)(const void *, const void *))sub_10002608C);
    if ((int)v6 < 2)
    {
      return 1;
    }
    else
    {
      int v9 = a3 + 1;
      uint64_t v10 = v6 - 1;
      uint64_t v6 = 1;
      do
      {
        int v12 = *v9++;
        unsigned __int16 v11 = v12;
        if (v12 != a3[(int)v6 - 1])
        {
          a3[(int)v6] = v11;
          uint64_t v6 = (v6 + 1);
        }
        --v10;
      }
      while (v10);
    }
  }
  return v6;
}

uint64_t sub_10002608C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 - *a2;
}

uint64_t sub_10002609C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = 4 * ((int)a2 + 1);
  unsigned __int16 v11 = (void *)sub_1000CD3E8(v10, a2, a3, a4, a5, a6, a7, a8);
  sub_10002A82C(a2, a1);
  *(_DWORD *)unsigned __int16 v11 = -1;
  if ((int)a2 < 1)
  {
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v12 = a2;
    uint64_t v13 = 1;
    do
    {
      if (*(void *)a1)
      {
        uint64_t v14 = *(uint64_t (**)(void))(*(void *)a1 + 176);
        if (v14)
        {
          uint64_t v13 = v14();
          if (!v13) {
            break;
          }
        }
      }
      a1 += 8;
      --v12;
    }
    while (v12);
  }
  sub_1000CD4D0(v11, v10);
  return v13;
}

uint64_t sub_100026168(uint64_t *a1, int a2, uint64_t a3, int a4, unsigned __int16 a5)
{
  if (a2 < 1) {
    return 1;
  }
  uint64_t v9 = a2;
  while (1)
  {
    uint64_t result = sub_10002A8C4(*a1, a3, a4, a5);
    if (!result) {
      break;
    }
    ++a1;
    if (!--v9) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1000261E4(uint64_t result, unsigned int a2)
{
  if (a2 - 1 <= 0x3FF)
  {
    int v2 = (uint64_t *)result;
    uint64_t v3 = a2;
    do
    {
      uint64_t result = *v2;
      uint64_t v4 = *(uint64_t (**)(void))(*v2 + 160);
      if (v4) {
        uint64_t result = v4();
      }
      ++v2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_10002623C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_100026244(uint64_t result)
{
  if (result)
  {
    *(_DWORD *)(result + 248) = 0;
    return (*(uint64_t (**)(void))(result + 80))();
  }
  return result;
}

uint64_t sub_100026258(uint64_t a1, uint64_t a2)
{
  return a2 << 53;
}

uint64_t sub_100026260(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = a2;
  while (!(*(unsigned int (**)(void))(*(void *)a1 + 128))())
  {
    a1 += 8;
    if (!--v3) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1000262E8(uint64_t a1, unsigned __int16 *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = 0;
  long long v15 = 0u;
  memset(v16, 0, sizeof(v16));
  long long v14 = 0u;
  sub_100028F14((_DWORD *)a1, (uint64_t)v16);
  uint64_t v10 = *(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, void))(a1 + 120);
  if (!v10) {
    uint64_t v10 = *(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, void))(a1 + 104);
  }
  v10(a1, v16, a4, a5, *a2);
  uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, long long *))(a1 + 112))(v16, a1, &v14);
  if (result)
  {
    if (a3 == 1)
    {
      while (!v15)
      {
        uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, long long *))(a1 + 112))(v16, a1, &v14);
        if (!result) {
          return result;
        }
      }
    }
    else
    {
      uint64_t v12 = a2 + 1;
      uint64_t v13 = (a3 - 1);
      while (!sub_1000262E8(a1, v12, v13, (unsigned __int16)v14, *((void *)&v14 + 1)))
      {
        uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, long long *))(a1 + 112))(v16, a1, &v14);
        if (!result) {
          return result;
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_100026420(uint64_t a1, int a2, unsigned __int16 *a3, int a4)
{
  int v4 = a4;
  uint64_t v5 = a3;
  if (a4 >= 1)
  {
    if ((__int16)*a3 != -2 || (v5 = a3 + 1, int v4 = a4 - 1, a4 != 1))
    {
      if ((__int16)v5[v4 - 1] == -2) {
        --v4;
      }
    }
  }
  int v8 = sub_1000286D4(a2, a1);
  if (v8)
  {
    uint64_t v9 = sub_1000C33A0(8 * a2);
    if (!v9) {
      return 0;
    }
    uint64_t v10 = v9;
    if (a2 >= 1)
    {
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = sub_100027F64(*(void *)(a1 + 8 * v11));
        *(void *)(v10 + 8 * v11) = v12;
        if (!v12) {
          break;
        }
        if (a2 == ++v11)
        {
          uint64_t v13 = v10;
          goto LABEL_14;
        }
      }
      if (v11)
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          uint64_t v23 = *(void *)(v10 + 8 * i);
          if (v23)
          {
            *(_DWORD *)(v23 + 248) = 0;
            (*(void (**)(void))(v23 + 80))();
          }
        }
      }
      sub_1000C321C(v10);
      return 0;
    }
    uint64_t v18 = 0;
    goto LABEL_29;
  }
  uint64_t v10 = 0;
  uint64_t v13 = a1;
  if (a2 < 1)
  {
LABEL_19:
    uint64_t v18 = 0;
    if (!v8) {
      return v18;
    }
    goto LABEL_22;
  }
LABEL_14:
  uint64_t v14 = a2;
  long long v15 = (uint64_t *)v13;
  while (1)
  {
    uint64_t v16 = *v15;
    uint64_t v17 = *(void (**)(void))(*v15 + 184);
    if (v17)
    {
      v17();
      uint64_t v16 = *v15;
    }
    if (sub_1000262E8(v16, v5, v4, 65534, 0)) {
      break;
    }
    ++v15;
    if (!--v14) {
      goto LABEL_19;
    }
  }
  uint64_t v18 = 1;
  if (v8)
  {
LABEL_22:
    if (a2 >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 8 * a2;
      do
      {
        if (*(void *)(a1 + v19) != *(void *)(v13 + v19))
        {
          uint64_t v21 = *(void *)(v10 + v19);
          if (v21)
          {
            *(_DWORD *)(v21 + 248) = 0;
            (*(void (**)(void))(v21 + 80))();
          }
        }
        v19 += 8;
      }
      while (v20 != v19);
    }
LABEL_29:
    sub_1000C321C(v10);
  }
  return v18;
}

uint64_t sub_1000265FC(uint64_t a1, int a2, int16x8_t *a3, int a4)
{
  int v4 = a4 - 1;
  if (a4 >= 1)
  {
    if (a4 < 0x10)
    {
      uint64_t v5 = 0;
LABEL_7:
      int v12 = ~v5 + a4;
      uint64_t v13 = (unsigned __int16 *)a3 + v5;
      uint64_t v14 = a4 - v5;
      do
      {
        unsigned __int16 v15 = *v13++;
        v17[v12--] = v15;
        --v14;
      }
      while (v14);
      return sub_100026420(a1, a2, v17, a4);
    }
    uint64_t v5 = a4 & 0x7FFFFFF0;
    uint64_t v6 = a3 + 1;
    uint64_t v7 = a4 & 0xFFFFFFF0;
    do
    {
      int16x8_t v8 = *v6;
      uint64_t v9 = &v17[v4];
      int8x16_t v10 = (int8x16_t)vrev64q_s16(v6[-1]);
      *(int8x16_t *)(v9 - 7) = vextq_s8(v10, v10, 8uLL);
      int8x16_t v11 = (int8x16_t)vrev64q_s16(v8);
      *(int8x16_t *)(v9 - 15) = vextq_s8(v11, v11, 8uLL);
      v6 += 2;
      v4 -= 16;
      v7 -= 16;
    }
    while (v7);
    if (v5 != a4) {
      goto LABEL_7;
    }
  }
  return sub_100026420(a1, a2, v17, a4);
}

uint64_t sub_1000266D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 192))();
}

uint64_t sub_1000266E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, _DWORD *a7, uint64_t a8)
{
  LODWORD(v12) = a2;
  int v37 = 0;
  *a7 = 0x40000000;
  uint64_t v14 = (int)a3;
  uint64_t v15 = 8 * (int)a3;
  uint64_t v23 = (void *)sub_1000CD3E8(v15, a2, a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
  size_t v34 = v14;
  uint64_t v35 = (void *)a8;
  if (!a8)
  {
    if ((int)v12 <= 0)
    {
      uint64_t v25 = 0;
      goto LABEL_26;
    }
    uint64_t v25 = 0;
    uint64_t v12 = v12;
    while (1)
    {
      int v29 = (_DWORD *)*a1;
      if ((*(unsigned int (**)(void, uint64_t, uint64_t, void *, int *, void))(*a1 + 136))(*a1, a3, a4, v23, &v37, 0))
      {
        int v30 = v37;
        if (v37 >= *a7)
        {
          uint64_t v25 = 1;
        }
        else
        {
          *a7 = v37;
          *a5 = v29;
          if (*v29 == 3) {
            memcpy(a6, v23, v15);
          }
          uint64_t v25 = 1;
          if (!v30) {
            goto LABEL_26;
          }
        }
      }
      ++a1;
      if (!--v12) {
        goto LABEL_26;
      }
    }
  }
  unint64_t v24 = (void *)sub_1000CD3E8(v14, v16, v17, v18, v19, v20, v21, v22);
  if ((int)v12 < 1)
  {
    uint64_t v25 = 0;
    goto LABEL_25;
  }
  size_t v32 = v15;
  uint64_t v25 = 0;
  uint64_t v26 = v12;
  while (1)
  {
    unint64_t v27 = (_DWORD *)*a1;
    if (!(*(unsigned int (**)(void, uint64_t, uint64_t, void *, int *, void *))(*a1 + 136))(*a1, a3, a4, v23, &v37, v24))goto LABEL_5; {
    int v28 = v37;
    }
    if (v37 < *a7) {
      break;
    }
    uint64_t v25 = 1;
LABEL_5:
    ++a1;
    if (!--v26) {
      goto LABEL_11;
    }
  }
  *a7 = v37;
  *a5 = v27;
  if (*v27 == 3) {
    memcpy(a6, v23, v32);
  }
  memcpy(v35, v24, v34);
  uint64_t v25 = 1;
  if (v28) {
    goto LABEL_5;
  }
LABEL_11:
  uint64_t v15 = v32;
  if (!v35) {
    goto LABEL_26;
  }
LABEL_25:
  sub_1000CD4D0(v24, v34);
LABEL_26:
  sub_1000CD4D0(v23, v15);
  return v25;
}

uint64_t sub_1000268F0(_DWORD *a1)
{
  if (*a1 == 3) {
    return sub_10002A5D8((uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100026908(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

_DWORD *sub_100026910(_DWORD *result, int a2, uint64_t a3)
{
  if (a2 >= 1)
  {
    int v4 = (_DWORD **)result;
    uint64_t v5 = a2;
    do
    {
      uint64_t result = *v4;
      if (**v4 == 3) {
        uint64_t result = sub_10002883C(result, a3);
      }
      ++v4;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_100026978(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 1;
  }
  uint64_t v3 = a2;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 88))();
    if (!result) {
      break;
    }
    a1 += 8;
    if (!--v3) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1000269D0(uint64_t a1, int a2, _DWORD *a3)
{
  *a3 = 0;
  if (a2 < 1)
  {
    int v7 = 0;
LABEL_14:
    *a3 = v7;
    return 1;
  }
  else
  {
    uint64_t v6 = 0;
    int v7 = 0;
    int v18 = 0;
    uint64_t v8 = a2;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 8 * v6);
      if (*(_DWORD *)v9 != 3) {
        return 0;
      }
      uint64_t result = sub_10002BD6C(a1, a2);
      if (!result) {
        return result;
      }
      if (*(int *)(v9 + 268) >= 2) {
        break;
      }
LABEL_3:
      if (++v6 == v8) {
        goto LABEL_14;
      }
    }
    uint64_t v16 = result;
    uint64_t v17 = 1;
    while (1)
    {
      uint64_t result = sub_1000338A4(v16, *(unsigned int *)(*(void *)(v9 + 272) + 4 * v17), &v18, v11, v12, v13, v14, v15);
      if (!result) {
        break;
      }
      if (v18 > v7) {
        int v7 = v18;
      }
      if (++v17 >= *(int *)(v9 + 268)) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

uint64_t sub_100026ACC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 224))();
}

uint64_t sub_100026AD4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 3) {
    return sub_10002A314(a1, a4);
  }
  if (a2 == 2) {
    return sub_100026AFC(a1, a3);
  }
  return 0;
}

uint64_t sub_100026AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000C33A0(272);
  uint64_t v5 = v4;
  if (!v4) {
    return v5;
  }
  *(_OWORD *)(v4 + 4) = 0u;
  uint64_t v6 = (_OWORD *)(v4 + 4);
  *(void *)(v4 + 256) = a2;
  *(_OWORD *)(v4 + 20) = 0u;
  *(_OWORD *)(v4 + 36) = 0u;
  *(_OWORD *)(v4 + 52) = 0u;
  if (sub_1000BEFCC(a1, (void *)(v4 + 4), 64, 1))
  {
    int v8 = sub_1000CAD44((unsigned __int8 *)(v5 + 4), (unsigned __int8 *)(v5 + 4), 64, v7);
    *(_DWORD *)uint64_t v5 = 2;
    if (v8)
    {
      *(_OWORD *)(v5 + 36) = 0u;
      *(_OWORD *)(v5 + 52) = 0u;
      _OWORD *v6 = 0u;
      *(_OWORD *)(v5 + 20) = 0u;
      sub_1000CAD88((unsigned char *)(v5 + 4), (char *)(v5 + 4), 64);
    }
    *(_DWORD *)(v5 + 68) = 0;
    *(_DWORD *)(v5 + 72) = 0;
    *(void *)(v5 + 80) = sub_100026DF4;
    *(void *)(v5 + 88) = sub_100026E04;
    *(void *)(v5 + 96) = sub_100026E0C;
    *(void *)(v5 + 104) = sub_100026E14;
    *(void *)(v5 + 112) = sub_100026E28;
    *(void *)(v5 + 120) = 0;
    *(void *)(v5 + 128) = sub_100026F48;
    *(void *)(v5 + 136) = sub_100026F50;
    *(void *)(v5 + 144) = nullsub_2;
    *(_OWORD *)(v5 + 152) = 0u;
    *(_OWORD *)(v5 + 168) = 0u;
    *(_OWORD *)(v5 + 184) = 0u;
    *(void *)(v5 + 208) = 0;
    *(void *)(v5 + 216) = 0;
    *(void *)(v5 + 200) = sub_100026FB0;
    *(void *)(v5 + 232) = 0;
    *(void *)(v5 + 240) = 0;
    *(void *)(v5 + 224) = sub_100026FB8;
    if (sub_1000BEECC(a1, (void *)(v5 + 264)))
    {
      *(_DWORD *)(v5 + 248) = 1;
      return v5;
    }
  }
  return 0;
}

uint64_t sub_100026C90(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(a1 + 240))();
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100026CA4(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1000C33A0(272);
  uint64_t v6 = v4;
  if (v4)
  {
    uint64_t v7 = (_OWORD *)(v4 + 4);
    int v8 = sub_1000CAD44("XWV", (unsigned __int8 *)(v4 + 4), 64, v5);
    *(_DWORD *)uint64_t v6 = 2;
    if (v8)
    {
      *(_OWORD *)(v6 + 36) = 0u;
      *(_OWORD *)(v6 + 52) = 0u;
      *uint64_t v7 = 0u;
      *(_OWORD *)(v6 + 20) = 0u;
      sub_1000CAD88((unsigned char *)(v6 + 4), "XWV", 64);
    }
    *(_DWORD *)(v6 + 68) = 0;
    *(_DWORD *)(v6 + 72) = 0;
    *(void *)(v6 + 80) = sub_100026DF4;
    *(void *)(v6 + 88) = sub_100026E04;
    *(void *)(v6 + 96) = sub_100026E0C;
    *(void *)(v6 + 104) = sub_100026E14;
    *(void *)(v6 + 112) = sub_100026E28;
    *(void *)(v6 + 120) = 0;
    *(void *)(v6 + 128) = sub_100026F48;
    *(void *)(v6 + 136) = sub_100026F50;
    *(void *)(v6 + 144) = nullsub_2;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(void *)(v6 + 208) = 0;
    *(void *)(v6 + 216) = 0;
    *(void *)(v6 + 200) = sub_100026FB0;
    *(void *)(v6 + 232) = 0;
    *(void *)(v6 + 240) = 0;
    *(void *)(v6 + 224) = sub_100026FB8;
    *(void *)(v6 + 256) = a1;
    *(_DWORD *)(v6 + 264) = a2;
    *(_DWORD *)(v6 + 248) = 1;
  }
  return v6;
}

uint64_t sub_100026DF4(uint64_t result)
{
  if (result)
  {
    *(_DWORD *)(result + 248) = 0;
    return sub_1000C321C(result);
  }
  return result;
}

uint64_t sub_100026E04()
{
  return 0;
}

uint64_t sub_100026E0C()
{
  return 1;
}

void sub_100026E14(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, __int16 a5)
{
  *(_WORD *)(a2 + 8) = a3;
  *(void *)a2 = (a4 >> 53) & 0x3FF;
  *(_WORD *)(a2 + 10) = a5;
}

BOOL sub_100026E28(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 264) && *((__int16 *)a1 + 4) != -2) {
    return 0;
  }
  *(void *)(a3 + 8) = ((unint64_t)*a1 << 53) | 1;
  *(_DWORD *)(a3 + 16) = 1;
  *(_WORD *)(a3 + 2) = 0;
  *(void *)(a3 + 24) = 0;
  unsigned int v6 = *((unsigned __int16 *)a1 + 5);
  uint64_t v7 = *(void *)(a2 + 256);
  if (v6 == 0xFFFF)
  {
    signed int v9 = sub_1000B51F0(v7);
    signed int v12 = a1[1];
    uint64_t v11 = (signed int *)(a1 + 1);
    signed int v10 = v12;
    if (v12 > v9)
    {
LABEL_11:
      if (v10 <= v9) {
        goto LABEL_16;
      }
    }
    else
    {
      while (1)
      {
        BOOL v13 = sub_1000B5D0C(*(void *)(a2 + 256), (unsigned __int16)v10);
        signed int v14 = *v11;
        if (v13) {
          break;
        }
        signed int v10 = v14 + 1;
        *uint64_t v11 = v14 + 1;
        if (v14 >= v9) {
          goto LABEL_11;
        }
      }
      signed int v10 = *v11;
      if (v14 <= v9) {
        goto LABEL_16;
      }
    }
    return 0;
  }
  BOOL result = sub_1000B5D0C(v7, v6);
  if (!result) {
    return result;
  }
  if (!a1[1])
  {
    LOWORD(v10) = *((_WORD *)a1 + 5);
    uint64_t v11 = (signed int *)(a1 + 1);
LABEL_16:
    *(_WORD *)a3 = v10;
    ++*v11;
    return 1;
  }
  return 0;
}

uint64_t sub_100026F48()
{
  return 1;
}

uint64_t sub_100026F50(int a1, int a2, int a3, void *a4, _DWORD *a5, unsigned char *a6)
{
  if (a6)
  {
    bzero(a6, a2);
    *a6 = 1;
  }
  *a5 = 0;
  return 1;
}

uint64_t sub_100026FB0()
{
  return 1;
}

BOOL sub_100026FB8(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  sub_1000BFDB0(a2, (void *)(a1 + 4), 0x40u, 1, a3);
  return sub_1000BFD58(a2, *(_DWORD *)(a1 + 264), v5);
}

uint64_t sub_100027004(unsigned __int8 *a1, uint64_t a2, int a3, int a4, int a5)
{
  if ((int)sub_1000CAD00((unint64_t)a1) > 63) {
    return 0;
  }
  uint64_t v10 = sub_1000C33A0(448);
  uint64_t v11 = v10;
  if (v10)
  {
    if (a3) {
      int v12 = a3 + 1;
    }
    else {
      int v12 = 0;
    }
    *(_DWORD *)(v10 + 264) = v12;
    *(void *)(v10 + 256) = a2;
    if (!sub_1000271F0(v10, a1)) {
      goto LABEL_20;
    }
    if (v12)
    {
      if (a4 > 0)
      {
        *(_DWORD *)(v11 + 376) = 1;
        uint64_t v13 = sub_1000C33A0(4 * v12);
        *(void *)(v11 + 272) = v13;
        if (v13)
        {
          signed int v14 = (uint64_t *)(v11 + 272);
          if (v12 >= 1)
          {
            uint64_t v15 = 0;
            do
            {
              *(_DWORD *)(*v14 + v15) = -1;
              v15 += 4;
            }
            while (4 * v12 != v15);
          }
          *(_DWORD *)(v11 + 268) = 1;
          uint64_t v16 = sub_1000C33A0(4 * (v12 + 1));
          *(void *)(v11 + 288) = v16;
          if (v16)
          {
            uint64_t v17 = v12;
            int v18 = (uint64_t *)(v11 + 288);
            uint64_t v19 = sub_1000C33A0(v17);
            *(void *)(v11 + 296) = v19;
            if (v19)
            {
              uint64_t v20 = v11 + 296;
              uint64_t v21 = sub_1000C33A0(4 * a4);
              *(void *)(v11 + 304) = v21;
              if (v21)
              {
                *(_DWORD *)(v11 + 368) = a4;
                *(_DWORD *)(v11 + 372) = 0;
                *(_DWORD *)(v11 + 336) = a5;
                if (!a5)
                {
LABEL_19:
                  **(_DWORD **)(v11 + 272) = 0;
                  **(_DWORD **)(v11 + 288) = 0;
                  *(_DWORD *)(*(void *)(v11 + 288) + 4) = 0;
                  **(unsigned char **)(v11 + 296) = 0;
                  *(_DWORD *)(v11 + 248) = 1;
                  return v11;
                }
                uint64_t v22 = a4;
                uint64_t v23 = v11 + 304;
                uint64_t v24 = sub_1000C33A0(v22);
                *(void *)(v11 + 352) = v24;
                if (v24)
                {
                  uint64_t v25 = sub_1000C33A0(v17);
                  *(void *)(v11 + 360) = v25;
                  if (v25) {
                    goto LABEL_19;
                  }
                  sub_1000C321C(*v14);
                  signed int v14 = (uint64_t *)(v11 + 288);
                  int v18 = (uint64_t *)(v11 + 296);
                  uint64_t v20 = v11 + 304;
                  uint64_t v23 = v11 + 352;
                }
                sub_1000C321C(*v14);
                signed int v14 = v18;
                int v18 = (uint64_t *)v20;
                uint64_t v20 = v23;
              }
              sub_1000C321C(*v14);
              signed int v14 = v18;
              int v18 = (uint64_t *)v20;
            }
            sub_1000C321C(*v14);
            signed int v14 = v18;
          }
          sub_1000C321C(*v14);
        }
        sub_100027400(v11);
        return 0;
      }
LABEL_20:
      sub_1000C321C(v11);
      return 0;
    }
  }
  return v11;
}

BOOL sub_1000271F0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = qword_100101CC0;
  uint8x8_t v5 = sub_10002B1EC;
  unsigned int v6 = sub_10002D658;
  if (!qword_100101CC0
    || (uint64_t v4 = *(unsigned int *)(qword_100101CC0 + 1072), v5 = sub_10002B1EC, v6 = sub_10002D658, !v4)
    || (result = sub_1000342B4(*(void *)(a1 + 256)), uint8x8_t v5 = sub_10002D50C, v6 = sub_10002D34C, result))
  {
    int v8 = v6;
    if (a2)
    {
      int v9 = sub_1000CAD44(a2, (unsigned __int8 *)(a1 + 4), 64, v4);
      *(_DWORD *)a1 = 3;
      if (v9)
      {
        *(_OWORD *)(a1 + 36) = 0u;
        *(_OWORD *)(a1 + 52) = 0u;
        *(_OWORD *)(a1 + 4) = 0u;
        *(_OWORD *)(a1 + 20) = 0u;
        sub_1000CAD88((unsigned char *)(a1 + 4), (char *)a2, 64);
      }
    }
    else
    {
      *(_DWORD *)a1 = 3;
    }
    *(void *)(a1 + 68) = 1;
    *(void *)(a1 + 80) = sub_100027400;
    *(void *)(a1 + 88) = sub_10002D664;
    *(void *)(a1 + 96) = sub_10002D688;
    *(void *)(a1 + 104) = v8;
    *(void *)(a1 + 112) = v5;
    *(void *)(a1 + 120) = sub_10002B1E4;
    *(void *)(a1 + 128) = sub_10002D690;
    *(void *)(a1 + 136) = sub_10002D940;
    *(void *)(a1 + 144) = nullsub_3;
    *(void *)(a1 + 152) = sub_10002DA24;
    *(void *)(a1 + 160) = sub_10002DC10;
    *(void *)(a1 + 168) = sub_10002B83C;
    *(void *)(a1 + 176) = sub_10002DC3C;
    *(void *)(a1 + 184) = sub_10002E10C;
    *(void *)(a1 + 192) = sub_10002E130;
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 200) = sub_10002E228;
    *(void *)(a1 + 224) = sub_10002E310;
    *(void *)(a1 + 232) = sub_10002E4E8;
    *(void *)(a1 + 240) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_100027400(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    *(_DWORD *)(result + 248) = 0;
    if (*(_DWORD *)(result + 376))
    {
      uint64_t v2 = *(void *)(result + 272);
      if (v2)
      {
        int v3 = *(_DWORD *)(result + 268);
        if (v3 > 2)
        {
          qsort((void *)(v2 + 4), (v3 - 1), 4uLL, (int (__cdecl *)(const void *, const void *))sub_10002D33C);
          int v3 = *(_DWORD *)(v1 + 268);
        }
        if (v3 >= 2)
        {
          unint64_t v4 = v3 + 1;
          do
          {
            uint64_t v5 = (v4 - 2);
            sub_1000334B0(*(void **)(v1 + 256), *(_DWORD *)(*(void *)(v1 + 272) + 4 * v5));
            uint64_t v6 = *(void *)(v1 + 280);
            if (v6) {
              sub_1000334B0(*(void **)(v1 + 256), *(_DWORD *)(v6 + 4 * v5));
            }
            --v4;
          }
          while (v4 > 2);
        }
        uint64_t v7 = *(void *)(v1 + 328);
        if (v7)
        {
          uint64_t v8 = *(unsigned int *)(v1 + 268);
          if ((int)v8 >= 2)
          {
            do
            {
              uint64_t v10 = *(void *)(v1 + 328);
              uint64_t v11 = (v8 - 1);
              uint64_t v12 = v10 + (v11 << 6);
              sub_1000C321C(*(void *)v12);
              signed int v14 = (uint64_t *)(v12 + 8);
              uint64_t v13 = *(void *)(v12 + 8);
              if (v13)
              {
                if (*(int *)(v12 + 20) >= 1)
                {
                  uint64_t v15 = 0;
                  do
                    sub_1000C321C(*(void *)(*v14 + 8 * v15++));
                  while (v15 < *(int *)(v12 + 20));
                  uint64_t v13 = *v14;
                }
                sub_1000C321C(v13);
              }
              uint64_t v18 = *(void *)(v12 + 24);
              uint64_t v17 = (uint64_t *)(v12 + 24);
              uint64_t v16 = v18;
              if (v18)
              {
                uint64_t v19 = qword_100101CC0;
                if (qword_100101CC0)
                {
                  uint64_t v20 = 0;
                  while (1)
                  {
                    uint64_t v16 = *v17;
                    if (*(void *)(v19 + 4136) <= v20) {
                      break;
                    }
                    sub_1000C321C(*(void *)(v16 + 8 * v20++));
                    uint64_t v19 = qword_100101CC0;
                    if (!qword_100101CC0)
                    {
                      uint64_t v16 = *v17;
                      break;
                    }
                  }
                }
                sub_1000C321C(v16);
              }
              uint64_t v21 = v10 + (v11 << 6);
              sub_1000C321C(*(void *)(v21 + 32));
              uint64_t v23 = (uint64_t *)(v21 + 40);
              uint64_t v22 = *(void *)(v21 + 40);
              if (v22)
              {
                int v25 = *(_DWORD *)(v21 + 52);
                uint64_t v24 = (int *)(v21 + 52);
                if (v25 >= 1)
                {
                  uint64_t v26 = 0;
                  do
                    sub_1000C321C(*(void *)(*v23 + 8 * v26++));
                  while (v26 < *v24);
                  uint64_t v22 = *v23;
                }
                sub_1000C321C(v22);
              }
            }
            while (v8-- > 2);
            uint64_t v7 = *(void *)(v1 + 328);
          }
          sub_1000C321C(v7);
        }
      }
      sub_1000C321C(*(void *)(v1 + 352));
      sub_1000C321C(*(void *)(v1 + 360));
      sub_1000C321C(*(void *)(v1 + 304));
      sub_1000C321C(*(void *)(v1 + 296));
      sub_1000C321C(*(void *)(v1 + 288));
      sub_1000C321C(*(void *)(v1 + 272));
      sub_1000C321C(*(void *)(v1 + 280));
      sub_1000C321C(*(void *)(v1 + 400));
      sub_1000C321C(*(void *)(v1 + 408));
      sub_1000C321C(*(void *)(v1 + 416));
      sub_1000C321C(*(void *)(v1 + 432));
      sub_1000C321C(*(void *)(v1 + 320));
    }
    return sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_10002766C(uint64_t a1, signed int a2, _DWORD *a3)
{
  uint64_t v6 = *(void *)(a1 + 256);
  if (*(_DWORD *)(v6 + 152) <= a2)
  {
    uint64_t v9 = *(int *)(v6 + 32) + 1;
    uint64_t v10 = (void *)sub_1000C33A0(4 * v9);
    j__memmove(v10, *(const void **)(v6 + 144), 4 * *(int *)(v6 + 152));
    sub_1000C321C(*(void *)(v6 + 144));
    *(void *)(v6 + 144) = v10;
    *(_DWORD *)(v6 + 152) = v9;
    int v7 = *((_DWORD *)v10 + a2);
    *a3 = v7;
    uint64_t result = 1;
    if (!a2) {
      return result;
    }
  }
  else
  {
    int v7 = *(_DWORD *)(*(void *)(v6 + 144) + 4 * a2);
    *a3 = v7;
    uint64_t result = 1;
    if (!a2) {
      return result;
    }
  }
  if (!v7)
  {
    int v11 = *(_DWORD *)(a1 + 268);
    if (v11 == *(_DWORD *)(a1 + 264))
    {
      uint64_t result = sub_1000277C8(a1);
      if (!result) {
        return result;
      }
      int v11 = *(_DWORD *)(a1 + 268);
    }
    *(_DWORD *)(*(void *)(a1 + 272) + 4 * v11) = a2;
    int v12 = *(_DWORD *)(a1 + 268);
    *a3 = v12;
    *(_DWORD *)(*(void *)(v6 + 144) + 4 * a2) = v12;
    uint64_t v13 = (_DWORD *)(*(void *)(a1 + 288) + 4 * *(int *)(a1 + 268));
    v13[1] = *v13;
    ++*(_DWORD *)(a1 + 268);
    sub_100031F40(v6, a2);
    uint64_t v15 = 0;
    int v14 = 0;
    sub_100033B80(*(void *)(a1 + 256), a2, &v15, &v14);
    if (v15) {
      *(_DWORD *)(a1 + 340) = 1;
    }
    return 1;
  }
  return result;
}

uint64_t sub_1000277C8(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 376)) {
    return 0;
  }
  uint64_t v2 = *(int *)(a1 + 264);
  uint64_t v3 = 8 * v2;
  uint64_t result = sub_1000C33A0(8 * v2);
  if (result)
  {
    uint64_t v5 = (void *)result;
    uint64_t v6 = 2 * v2;
    uint64_t v7 = sub_1000C33A0(4 * (int)(v6 | 1));
    if (!v7)
    {
      uint64_t v12 = (uint64_t)v5;
      goto LABEL_20;
    }
    uint64_t v8 = (void *)v7;
    uint64_t v9 = sub_1000C33A0(v6);
    if (!v9)
    {
      sub_1000C321C((uint64_t)v5);
      uint64_t v12 = (uint64_t)v8;
      goto LABEL_20;
    }
    uint64_t v10 = (void *)v9;
    if (*(void *)(a1 + 280))
    {
      int v11 = (void *)sub_1000C33A0(v3);
      if (!v11)
      {
        sub_1000C321C((uint64_t)v5);
        sub_1000C321C((uint64_t)v8);
        uint64_t v12 = (uint64_t)v10;
LABEL_20:
        sub_1000C321C(v12);
        return 0;
      }
    }
    else
    {
      int v11 = 0;
    }
    if (*(void *)(a1 + 328))
    {
      uint64_t v13 = (void *)sub_1000C33A0(v6 << 6);
      if (!v13)
      {
        sub_1000C321C((uint64_t)v5);
        sub_1000C321C((uint64_t)v8);
        sub_1000C321C((uint64_t)v10);
        uint64_t v12 = (uint64_t)v11;
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    if (*(void *)(a1 + 360))
    {
      int v14 = (void *)sub_1000C33A0(v6);
      if (!v14)
      {
        sub_1000C321C((uint64_t)v5);
        sub_1000C321C((uint64_t)v8);
        sub_1000C321C((uint64_t)v10);
        sub_1000C321C((uint64_t)v11);
        uint64_t v12 = (uint64_t)v13;
        goto LABEL_20;
      }
    }
    else
    {
      int v14 = 0;
    }
    j__memmove(v5, *(const void **)(a1 + 272), 4 * *(int *)(a1 + 268));
    sub_1000C321C(*(void *)(a1 + 272));
    *(void *)(a1 + 272) = v5;
    j__memmove(v8, *(const void **)(a1 + 288), 4 * *(_DWORD *)(a1 + 268) + 4);
    sub_1000C321C(*(void *)(a1 + 288));
    *(void *)(a1 + 288) = v8;
    j__memmove(v10, *(const void **)(a1 + 296), *(int *)(a1 + 268));
    sub_1000C321C(*(void *)(a1 + 296));
    *(void *)(a1 + 296) = v10;
    uint64_t v15 = *(const void **)(a1 + 280);
    if (v15)
    {
      j__memmove(v11, v15, 4 * *(int *)(a1 + 268));
      sub_1000C321C(*(void *)(a1 + 280));
      *(void *)(a1 + 280) = v11;
    }
    uint64_t v16 = *(const void **)(a1 + 328);
    if (v16)
    {
      j__memmove(v13, v16, (uint64_t)*(int *)(a1 + 268) << 6);
      sub_1000C321C(*(void *)(a1 + 328));
      *(void *)(a1 + 328) = v13;
    }
    uint64_t v17 = *(const void **)(a1 + 360);
    if (v17)
    {
      j__memmove(v14, v17, *(int *)(a1 + 268));
      sub_1000C321C(*(void *)(a1 + 360));
      *(void *)(a1 + 360) = v14;
    }
    *(_DWORD *)(a1 + 264) = v6;
    return 1;
  }
  return result;
}

uint64_t sub_100027A20(uint64_t a1, int a2)
{
  if (*(int *)(a1 + 268) < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = 1;
  while (1)
  {
    uint64_t v5 = sub_100033778(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v4));
    if (v5)
    {
      uint64_t v6 = *(unsigned int *)(v5 + 268);
      if ((int)v6 >= 2) {
        break;
      }
    }
LABEL_3:
    if (++v4 >= *(int *)(a1 + 268)) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v7 = 4 * v6;
  uint64_t v8 = 4;
  while (*(_DWORD *)(*(void *)(v5 + 280) + v8) != a2)
  {
    v8 += 4;
    if (v7 == v8) {
      goto LABEL_3;
    }
  }
  return *(unsigned int *)(*(void *)(v5 + 272) + v8);
}

uint64_t sub_100027AD4(uint64_t a1, int a2, int a3, int a4)
{
  if (sub_100025D50((unsigned int *)a1) != 3) {
    return 0;
  }
  if (!*(_DWORD *)(a1 + 376)) {
    return 0;
  }
  if (!a3)
  {
    if (!a2) {
      return 0;
    }
    uint64_t v20 = *(void *)(a1 + 296);
    if (*(unsigned char *)(v20 + a2))
    {
      if (!*(_DWORD *)(a1 + 336)) {
        return 1;
      }
      if (*(unsigned __int8 *)(*(void *)(a1 + 360) + a2) != a4) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 1;
      *(unsigned char *)(v20 + a2) = 1;
      if (!*(_DWORD *)(a1 + 336)) {
        return result;
      }
    }
    *(unsigned char *)(*(void *)(a1 + 360) + a2) = a4;
    return 1;
  }
  uint64_t v8 = (_DWORD *)(*(void *)(a1 + 288) + 4 * a2);
  LODWORD(v10) = *v8;
  int v9 = v8[1];
  int v11 = v10;
  int v12 = v9 - v10;
  if (v9 > (int)v10)
  {
    uint64_t v10 = (int)v10;
    while (*(_DWORD *)(*(void *)(a1 + 304) + 4 * v10) != a3)
    {
      ++v10;
      if (!--v12)
      {
        int v11 = v9;
        goto LABEL_9;
      }
    }
    return !*(_DWORD *)(a1 + 336) || *(unsigned __int8 *)(*(void *)(a1 + 352) + v10) == a4;
  }
LABEL_9:
  int v13 = *(_DWORD *)(a1 + 372);
  if (v13 != *(_DWORD *)(a1 + 368))
  {
    uint64_t v16 = *(char **)(a1 + 304);
    goto LABEL_23;
  }
  uint64_t v14 = v13;
  uint64_t result = sub_1000C33A0(8 * v13);
  if (result)
  {
    uint64_t v16 = (char *)result;
    uint64_t v17 = 2 * v14;
    if (!*(void *)(a1 + 352))
    {
LABEL_14:
      j__memmove(v16, *(const void **)(a1 + 304), 4 * *(int *)(a1 + 372));
      sub_1000C321C(*(void *)(a1 + 304));
      *(void *)(a1 + 304) = v16;
      *(_DWORD *)(a1 + 368) = v17;
      int v13 = *(_DWORD *)(a1 + 372);
LABEL_23:
      j__memmove(&v16[4 * v11 + 4], &v16[4 * v11], 4 * (v13 - v11));
      *(_DWORD *)(*(void *)(a1 + 304) + 4 * v11) = a3;
      if (*(_DWORD *)(a1 + 336))
      {
        j__memmove((void *)(*(void *)(a1 + 352) + v11 + 1), (const void *)(*(void *)(a1 + 352) + v11), *(int *)(a1 + 372) - (uint64_t)v11);
        *(unsigned char *)(*(void *)(a1 + 352) + v11) = a4;
      }
      ++*(_DWORD *)(a1 + 372);
      if (*(_DWORD *)(a1 + 268) > a2)
      {
        uint64_t v21 = a2;
        do
          ++*(_DWORD *)(*(void *)(a1 + 288) + 4 * v21++ + 4);
        while (v21 < *(int *)(a1 + 268));
      }
      return 1;
    }
    uint64_t v18 = (void *)sub_1000C33A0(v17);
    if (v18)
    {
      uint64_t v19 = v18;
      j__memmove(v18, *(const void **)(a1 + 352), *(int *)(a1 + 372));
      sub_1000C321C(*(void *)(a1 + 352));
      *(void *)(a1 + 352) = v19;
      goto LABEL_14;
    }
    sub_1000C321C((uint64_t)v16);
    return 0;
  }
  return result;
}

uint64_t sub_100027D30(uint64_t a1, int a2, unsigned int a3, int a4)
{
  int v12 = 0;
  uint64_t result = sub_100027E04(a1, a2, &v12);
  if (result)
  {
    int v11 = 0;
    uint64_t result = sub_100027E04(a1, a3, &v11);
    if (result)
    {
      int v8 = v11;
      uint64_t result = sub_100027AD4(a1, v12, v11, a4);
      if (result)
      {
        if (*(_DWORD *)(a1 + 340) == 1 && (uint64_t v10 = 0, v9 = 0, sub_100033B80(*(void *)(a1 + 256), a3, &v10, &v9), v10)) {
          return sub_100027AD4(a1, v8, v8, 0);
        }
        else {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100027E04(uint64_t a1, int a2, int *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 268);
  if (a2 < 0 || (int)v6 <= a2 || (LODWORD(v7) = a2, *(_DWORD *)(*(void *)(a1 + 272) + 4 * a2) != a2))
  {
    if ((int)v6 < 1)
    {
      LODWORD(v7) = 0;
    }
    else
    {
      uint64_t v7 = 0;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v7) != a2)
      {
        if (v6 == ++v7)
        {
          *a3 = -1;
          goto LABEL_15;
        }
      }
    }
  }
  BOOL v8 = v7 == v6;
  if (v7 == v6) {
    int v9 = -1;
  }
  else {
    int v9 = v7;
  }
  *a3 = v9;
  if (!v8) {
    return 1;
  }
LABEL_15:
  int v10 = *(_DWORD *)(a1 + 268);
  if (v10 == *(_DWORD *)(a1 + 264))
  {
    uint64_t result = sub_1000277C8(a1);
    if (!result) {
      return result;
    }
    int v10 = *(_DWORD *)(a1 + 268);
  }
  *(_DWORD *)(*(void *)(a1 + 272) + 4 * v10) = a2;
  *a3 = *(_DWORD *)(a1 + 268);
  int v12 = (_DWORD *)(*(void *)(a1 + 288) + 4 * *(int *)(a1 + 268));
  v12[1] = *v12;
  ++*(_DWORD *)(a1 + 268);
  sub_100031F40(*(void *)(a1 + 256), a2);
  if (sub_100033480(a2)) {
    *(_DWORD *)(a1 + 348) = 1;
  }
  uint64_t v15 = 0;
  int v14 = 0;
  uint64_t v13 = sub_100033778(*(void *)(a1 + 256), a2);
  if (!v13)
  {
    sub_100033B80(*(void *)(a1 + 256), a2, &v15, &v14);
    if (!v15) {
      return 1;
    }
    goto LABEL_22;
  }
  if (*(_DWORD *)(v13 + 340)) {
LABEL_22:
  }
    *(_DWORD *)(a1 + 340) = 1;
  return 1;
}

uint64_t sub_100027F64(uint64_t a1)
{
  long long v82 = xmmword_1000F48F0;
  long long v83 = unk_1000F4900;
  long long v84 = xmmword_1000F4910;
  long long v85 = unk_1000F4920;
  strcpy(__s, "00__ExpandedName");
  __s[17] = 0;
  __int16 v79 = 0;
  int v80 = 0;
  uint64_t v81 = 0;
  int v86 = 0;
  int v2 = strlen(__s);
  if (*(_DWORD *)a1 != 3 || !*(_DWORD *)(a1 + 348)) {
    return a1;
  }
  int v3 = v2;
  int v4 = *(_DWORD *)(a1 + 268);
  int v5 = *(_DWORD *)(a1 + 368);
  if (v4 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = sub_100033778(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v6));
      if (v7)
      {
        v4 += *(_DWORD *)(v7 + 268);
        v5 += *(_DWORD *)(v7 + 372);
      }
      uint64_t v8 = *(void *)(a1 + 288);
      unint64_t v9 = *(unsigned int *)(v8 + 4 * v6++);
      if (v9 < *(_DWORD *)(v8 + 4 * v6))
      {
        do
        {
          uint64_t v10 = sub_100033778(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * *(int *)(*(void *)(a1 + 304) + 4 * v9)));
          if (v10)
          {
            v4 += *(_DWORD *)(v10 + 268);
            v5 += *(_DWORD *)(v10 + 372);
          }
          ++v9;
        }
        while (v9 < *(unsigned int *)(*(void *)(a1 + 288) + 4 * v6));
      }
    }
    while (v6 < *(int *)(a1 + 268));
  }
  sprintf(&__s[v3], "%d", dword_100101CD8);
  ++dword_100101CD8;
  uint64_t v11 = sub_100027004((unsigned __int8 *)__s, *(void *)(a1 + 256), v4, v5, *(_DWORD *)(a1 + 336));
  if (!v11) {
    return 0;
  }
  uint64_t v19 = v11;
  uint64_t v20 = sub_1000CD454(*(int *)(a1 + 268), v12, v13, v14, v15, v16, v17, v18);
  LODWORD(v21) = *(_DWORD *)(a1 + 268);
  if ((int)v21 < 1)
  {
LABEL_80:
    uint64_t v62 = (int)v21;
    goto LABEL_98;
  }
  uint64_t v22 = 0;
  while (1)
  {
    int v76 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v22);
    uint64_t v23 = sub_100033778(*(void *)(a1 + 256), v76);
    uint64_t v24 = v23;
    if (!v23) {
      goto LABEL_23;
    }
    if (!sub_100028598(v23)) {
      goto LABEL_97;
    }
    LODWORD(v25) = *(_DWORD *)(v24 + 268);
    if ((int)v25 >= 2)
    {
      uint64_t v26 = 1;
      do
      {
        if (!sub_100027E04(v19, *(_DWORD *)(*(void *)(v24 + 280) + 4 * v26), &v77)) {
          goto LABEL_97;
        }
        ++v26;
        uint64_t v25 = *(int *)(v24 + 268);
      }
      while (v26 < v25);
    }
    if (*((unsigned char *)v20 + v22))
    {
LABEL_23:
      uint64_t v27 = *(void *)(a1 + 288);
      unint64_t v28 = *(unsigned int *)(v27 + 4 * v22++);
      if (v28 < *(_DWORD *)(v27 + 4 * v22)) {
        break;
      }
      goto LABEL_76;
    }
    if ((int)v25 >= 2)
    {
      uint64_t v53 = *(void *)(v24 + 280);
      uint64_t v52 = *(void *)(v24 + 288);
      uint64_t v54 = 1;
      do
      {
        uint64_t v55 = 4 * v54;
        unint64_t v56 = *(unsigned int *)(v52 + 4 * v54++);
        if (v56 < *(_DWORD *)(v52 + 4 * v54))
        {
          int v57 = *(_DWORD *)(v53 + v55);
          do
          {
            uint64_t v58 = *(void *)(v24 + 352);
            if (v58) {
              int v59 = *(unsigned __int8 *)(v58 + v56);
            }
            else {
              int v59 = 0;
            }
            if (!sub_100027D30(v19, v57, *(_DWORD *)(v53 + 4 * *(int *)(*(void *)(v24 + 304) + 4 * v56)), v59))goto LABEL_97; {
            ++v56;
            }
            uint64_t v52 = *(void *)(v24 + 288);
          }
          while (v56 < *(unsigned int *)(v52 + 4 * v54));
          LODWORD(v25) = *(_DWORD *)(v24 + 268);
        }
      }
      while (v54 < (int)v25);
    }
    *((unsigned char *)v20 + v22) = 1;
    uint64_t v60 = *(void *)(a1 + 288);
    unint64_t v28 = *(unsigned int *)(v60 + 4 * v22++);
    if (v28 < *(_DWORD *)(v60 + 4 * v22)) {
      break;
    }
LABEL_76:
    uint64_t v21 = *(int *)(a1 + 268);
    if (v22 >= v21)
    {
      if ((int)v21 > 1)
      {
        uint64_t v61 = 1;
        do
        {
          if (*(unsigned char *)(*(void *)(a1 + 296) + v61))
          {
            int v63 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v61);
            uint64_t v64 = sub_100033778(*(void *)(a1 + 256), v63);
            uint64_t v65 = v64;
            uint64_t v66 = *(void *)(a1 + 360);
            if (v66) {
              int v67 = *(unsigned __int8 *)(v66 + v61);
            }
            else {
              int v67 = 0;
            }
            if (v64)
            {
              int v68 = *(_DWORD *)(v64 + 268);
              if (v68 >= 2)
              {
                uint64_t v69 = *(void *)(v64 + 280);
                for (uint64_t i = 1; i < v68; ++i)
                {
                  if (*(unsigned char *)(*(void *)(v65 + 296) + i))
                  {
                    uint64_t v71 = *(void *)(v65 + 360);
                    if (v71) {
                      LOBYTE(v71) = *(unsigned char *)(v71 + i);
                    }
                    if (!sub_100027D30(v19, *(_DWORD *)(v69 + 4 * i), 0, (v71 + v67))) {
                      goto LABEL_97;
                    }
                    int v68 = *(_DWORD *)(v65 + 268);
                  }
                }
              }
            }
            else if (!sub_100027D30(v19, v63, 0, v67))
            {
              goto LABEL_97;
            }
          }
          ++v61;
          uint64_t v62 = *(int *)(a1 + 268);
        }
        while (v61 < v62);
        goto LABEL_98;
      }
      goto LABEL_80;
    }
  }
  uint64_t v75 = v22;
  while (1)
  {
    uint64_t v29 = *(int *)(*(void *)(a1 + 304) + 4 * v28);
    unsigned int v30 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v29);
    uint64_t v31 = sub_100033778(*(void *)(a1 + 256), v30);
    uint64_t v32 = v31;
    uint64_t v33 = *(void *)(a1 + 352);
    if (v33)
    {
      int v34 = *(unsigned __int8 *)(v33 + v28);
      if (v24) {
        goto LABEL_29;
      }
    }
    else
    {
      int v34 = 0;
      if (v24)
      {
LABEL_29:
        int v35 = *(_DWORD *)(v24 + 268);
        if (v35 >= 2)
        {
          uint64_t v36 = *(void *)(v24 + 280);
          uint64_t v37 = 1;
          while (1)
          {
            if (*(unsigned char *)(*(void *)(v24 + 296) + v37))
            {
              uint64_t v38 = *(void *)(v24 + 360);
              if (v38) {
                LOBYTE(v38) = *(unsigned char *)(v38 + v37);
              }
              if (!sub_100027D30(v19, *(_DWORD *)(v36 + 4 * v37), v30, (v38 + v34))) {
                goto LABEL_97;
              }
              int v35 = *(_DWORD *)(v24 + 268);
            }
            if (++v37 >= v35) {
              goto LABEL_26;
            }
          }
        }
        goto LABEL_26;
      }
    }
    if (!v31)
    {
      if (!sub_100027D30(v19, v76, v30, v34)) {
        goto LABEL_97;
      }
      goto LABEL_26;
    }
    if (!sub_100028598(v31)) {
      goto LABEL_97;
    }
    LODWORD(v39) = *(_DWORD *)(v32 + 268);
    if ((int)v39 >= 2) {
      break;
    }
LABEL_44:
    if (!*((unsigned char *)v20 + v29))
    {
      unsigned int v73 = v20;
      if ((int)v39 >= 2)
      {
        uint64_t v74 = *(void *)(v32 + 280);
        uint64_t v41 = *(void *)(v32 + 288);
        uint64_t v42 = 1;
        while (1)
        {
          uint64_t v43 = 4 * v42;
          unint64_t v44 = *(unsigned int *)(v41 + 4 * v42++);
          if (v44 < *(_DWORD *)(v41 + 4 * v42)) {
            break;
          }
LABEL_47:
          if (v42 >= (int)v39) {
            goto LABEL_56;
          }
        }
        int v45 = *(_DWORD *)(v74 + v43);
        while (1)
        {
          uint64_t v46 = *(void *)(v32 + 352);
          int v47 = v46 ? *(unsigned __int8 *)(v46 + v44) : 0;
          if (!sub_100027D30(v19, v45, *(_DWORD *)(v74 + 4 * *(int *)(*(void *)(v32 + 304) + 4 * v44)), v47))break; {
          ++v44;
          }
          uint64_t v41 = *(void *)(v32 + 288);
          if (v44 >= *(unsigned int *)(v41 + 4 * v42))
          {
            LODWORD(v39) = *(_DWORD *)(v32 + 268);
            goto LABEL_47;
          }
        }
        sub_100027400(v19);
        uint64_t v19 = 0;
        uint64_t v62 = *(int *)(a1 + 268);
        uint64_t v20 = v73;
        goto LABEL_98;
      }
LABEL_56:
      uint64_t v20 = v73;
      *((unsigned char *)v73 + v29) = 1;
    }
    __int16 v48 = *(unsigned int **)(v32 + 288);
    uint64_t v49 = *v48;
    if (v49 < v48[1])
    {
      uint64_t v50 = *(void *)(v32 + 280);
      do
      {
        uint64_t v51 = *(void *)(v32 + 352);
        if (v51) {
          LOBYTE(v51) = *(unsigned char *)(v51 + v49);
        }
        if (!sub_100027D30(v19, v76, *(_DWORD *)(v50 + 4 * *(int *)(*(void *)(v32 + 304) + 4 * v49)), (v51 + v34)))goto LABEL_97; {
      }
        }
      while (++v49 < (unint64_t)*(unsigned int *)(*(void *)(v32 + 288) + 4));
    }
LABEL_26:
    ++v28;
    uint64_t v22 = v75;
    if (v28 >= *(unsigned int *)(*(void *)(a1 + 288) + 4 * v75)) {
      goto LABEL_76;
    }
  }
  uint64_t v40 = 1;
  while (sub_100027E04(v19, *(_DWORD *)(*(void *)(v32 + 280) + 4 * v40), &v77))
  {
    ++v40;
    uint64_t v39 = *(int *)(v32 + 268);
    if (v40 >= v39) {
      goto LABEL_44;
    }
  }
LABEL_97:
  sub_100027400(v19);
  uint64_t v19 = 0;
  uint64_t v62 = *(int *)(a1 + 268);
LABEL_98:
  sub_1000CD4D0(v20, v62);
  return v19;
}

uint64_t sub_100028598(uint64_t a1)
{
  if (*(void *)(a1 + 280)) {
    return 1;
  }
  uint64_t result = sub_1000C33A0(4 * *(int *)(a1 + 264));
  *(void *)(a1 + 280) = result;
  if (result)
  {
    if (*(int *)(a1 + 268) < 2) {
      return 1;
    }
    uint64_t v3 = 1;
    while (1)
    {
      int v4 = sub_100034938();
      __sprintf_chk(v8, 0, 0x64uLL, "%s__CLCopyName", v4);
      *(_DWORD *)(*(void *)(a1 + 280) + 4 * v3) = sub_100031D7C(*(void *)(a1 + 256), v8, *(_DWORD *)(*(void *)(a1 + 272) + 4 * v3));
      uint64_t v5 = *(void *)(a1 + 280);
      unsigned int v6 = *(_DWORD *)(v5 + 4 * v3);
      if (v6 == -1) {
        break;
      }
      sub_100031F40(*(void *)(a1 + 256), v6);
      if (++v3 >= *(int *)(a1 + 268)) {
        return 1;
      }
    }
    if ((v3 & 0xFFFFFFFE) != 0)
    {
      uint64_t v7 = v3 + 1;
      do
        sub_1000334B0(*(void **)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 280) + 4 * (v7-- - 2)));
      while (v7 > 2);
      uint64_t v5 = *(void *)(a1 + 280);
    }
    sub_1000C321C(v5);
    uint64_t result = 0;
    *(void *)(a1 + 280) = 0;
  }
  return result;
}

uint64_t sub_1000286D4(int a1, uint64_t a2)
{
  if (a1 < 1) {
    return 0;
  }
  uint64_t v2 = a1;
  while (**(_DWORD **)a2 != 3 || !*(_DWORD *)(*(void *)a2 + 348))
  {
    a2 += 8;
    if (!--v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_100028718(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 >= 1)
  {
    v15[11] = v4;
    v15[12] = v5;
    uint64_t v8 = result;
    uint64_t v9 = 0;
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = (_DWORD *)(a3 + 4 * v9);
      *uint64_t v11 = 0;
      uint64_t v12 = (_DWORD *)(a4 + 4 * v9);
      _DWORD *v12 = 0;
      uint64_t v13 = *(void *)(v8 + 8 * v9);
      if (*(_DWORD *)v13 == 3 && *(int *)(v13 + 268) >= 2)
      {
        for (uint64_t i = 1; i < *(int *)(v13 + 268); ++i)
        {
          v15[0] = sub_100033778(*(void *)(v13 + 256), *(_DWORD *)(*(void *)(v13 + 272) + 4 * i));
          if (v15[0])
          {
            uint64_t result = sub_100028718(v15, 1, a3 + 4 * v9, a4 + 4 * v9);
            if (*v11) {
              break;
            }
          }
          else
          {
            uint64_t result = sub_100031D44(*(void *)(v13 + 256), *(_DWORD *)(*(void *)(v13 + 272) + 4 * i));
            if (result)
            {
              *uint64_t v11 = 1;
              uint64_t result = sub_100031D60(*(void *)(v13 + 256), *(_DWORD *)(*(void *)(v13 + 272) + 4 * i));
              _DWORD *v12 = result;
              break;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  return result;
}

_DWORD *sub_10002883C(_DWORD *result, uint64_t a2)
{
  if (*result == 3)
  {
    uint64_t v2 = result;
    if ((int)result[67] >= 2)
    {
      uint64_t v4 = 1;
      do
        uint64_t result = sub_100035588(*((void *)v2 + 32), a2, *(_DWORD *)(*((void *)v2 + 34) + 4 * v4++));
      while (v4 < (int)v2[67]);
    }
  }
  return result;
}

uint64_t sub_1000288A8(uint64_t a1, unsigned __int8 *a2)
{
  if (*(_DWORD *)a1 != 3) {
    return 0;
  }
  uint64_t v31 = *(void *)(a1 + 256);
  uint64_t v3 = sub_100027004(a2, v31, *(_DWORD *)(a1 + 264), *(_DWORD *)(a1 + 368), *(_DWORD *)(a1 + 336));
  if (v3 && *(int *)(a1 + 268) >= 1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 288);
      uint64_t v7 = 4 * v4;
      uint64_t v32 = *(int *)(v6 + 4 * v4);
      uint64_t v8 = v4 + 1;
      int v9 = *(_DWORD *)(v6 + 4 * v8);
      unsigned int v10 = *(_DWORD *)(*(void *)(a1 + 272) + v7);
      uint64_t v30 = v8;
      if (!v10)
      {
        int v12 = 0;
        uint64_t v13 = (v9 - v32);
        if ((int)v13 >= 1) {
          break;
        }
        goto LABEL_5;
      }
      unsigned int v11 = sub_100033488(v31, v10);
      int v12 = v11 ? v11 : v10;
      uint64_t v13 = (v9 - v32);
      if ((int)v13 >= 1) {
        break;
      }
LABEL_5:
      uint64_t v5 = *(int *)(a1 + 268);
      uint64_t v4 = v30;
      if (v30 >= v5)
      {
        if ((int)v5 >= 2)
        {
          uint64_t v25 = 1;
          do
          {
            if (*(unsigned char *)(*(void *)(a1 + 296) + v25))
            {
              unsigned int v27 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v25);
              int v28 = sub_100033488(v31, v27);
              if (v28) {
                int v29 = v28;
              }
              else {
                int v29 = v27;
              }
              if (*(void *)(a1 + 352)) {
                int v26 = *(unsigned __int8 *)(*(void *)(a1 + 360) + v25);
              }
              else {
                int v26 = 0;
              }
              sub_100027D30(v3, v29, 0, v26);
              LODWORD(v5) = *(_DWORD *)(a1 + 268);
            }
            ++v25;
          }
          while (v25 < (int)v5);
        }
        return v3;
      }
    }
    uint64_t v14 = 0;
    while (1)
    {
      int v15 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * *(int *)(*(void *)(a1 + 304) + 4 * (v14 + v32)));
      int v16 = sub_100033488(v31, v15);
      if (v16) {
        int v15 = v16;
      }
      if (v12 != v10 && v12 == v15) {
        goto LABEL_14;
      }
      uint64_t v17 = *(void *)(a1 + 352);
      if (v17)
      {
        int v18 = *(unsigned __int8 *)(v17 + v14 + v32);
        uint64_t v19 = *(unsigned int *)(v3 + 268);
        if (v12 < 0) {
          goto LABEL_25;
        }
      }
      else
      {
        int v18 = 0;
        uint64_t v19 = *(unsigned int *)(v3 + 268);
        if (v12 < 0) {
          goto LABEL_25;
        }
      }
      if ((int)v19 > v12)
      {
        LODWORD(v20) = v12;
        if (*(_DWORD *)(*(void *)(v3 + 272) + 4 * v12) == v12) {
          goto LABEL_31;
        }
      }
LABEL_25:
      if ((int)v19 < 1)
      {
        LODWORD(v20) = 0;
LABEL_31:
        if (v20 != v19) {
          goto LABEL_32;
        }
        goto LABEL_35;
      }
      uint64_t v20 = 0;
      while (*(_DWORD *)(*(void *)(v3 + 272) + 4 * v20) != v12)
      {
        if (v19 == ++v20) {
          goto LABEL_35;
        }
      }
      if (v20 != v19)
      {
LABEL_32:
        if (v15 < 0) {
          goto LABEL_46;
        }
        goto LABEL_44;
      }
LABEL_35:
      if (v19 == *(_DWORD *)(v3 + 264))
      {
        if (!sub_1000277C8(v3)) {
          goto LABEL_14;
        }
        LODWORD(v19) = *(_DWORD *)(v3 + 268);
      }
      *(_DWORD *)(*(void *)(v3 + 272) + 4 * (int)v19) = v12;
      uint64_t v20 = *(int *)(v3 + 268);
      *(_DWORD *)(*(void *)(v3 + 288) + 4 * ((int)v20 + 1)) = *(_DWORD *)(*(void *)(v3 + 288) + 4 * v20);
      ++*(_DWORD *)(v3 + 268);
      sub_100031F40(*(void *)(v3 + 256), v12);
      if (sub_100033480(v12)) {
        *(_DWORD *)(v3 + 348) = 1;
      }
      uint64_t v34 = 0;
      int v33 = 0;
      uint64_t v21 = sub_100033778(*(void *)(v3 + 256), v12);
      if (v21)
      {
        if (!*(_DWORD *)(v21 + 340)) {
          goto LABEL_43;
        }
LABEL_42:
        *(_DWORD *)(v3 + 340) = 1;
        goto LABEL_43;
      }
      sub_100033B80(*(void *)(v3 + 256), v12, &v34, &v33);
      if (v34) {
        goto LABEL_42;
      }
LABEL_43:
      LODWORD(v19) = *(_DWORD *)(v3 + 268);
      if (v15 < 0) {
        goto LABEL_46;
      }
LABEL_44:
      if ((int)v19 > v15)
      {
        LODWORD(v22) = v15;
        if (*(_DWORD *)(*(void *)(v3 + 272) + 4 * v15) == v15) {
          goto LABEL_52;
        }
      }
LABEL_46:
      if ((int)v19 < 1)
      {
        LODWORD(v22) = 0;
LABEL_52:
        if (v22 != v19) {
          goto LABEL_63;
        }
        goto LABEL_55;
      }
      uint64_t v22 = 0;
      while (*(_DWORD *)(*(void *)(v3 + 272) + 4 * v22) != v15)
      {
        if (v19 == ++v22) {
          goto LABEL_55;
        }
      }
      if (v22 != v19) {
        goto LABEL_63;
      }
LABEL_55:
      if (v19 != *(_DWORD *)(v3 + 264)) {
        goto LABEL_58;
      }
      if (sub_1000277C8(v3))
      {
        LODWORD(v19) = *(_DWORD *)(v3 + 268);
LABEL_58:
        *(_DWORD *)(*(void *)(v3 + 272) + 4 * (int)v19) = v15;
        uint64_t v22 = *(int *)(v3 + 268);
        *(_DWORD *)(*(void *)(v3 + 288) + 4 * ((int)v22 + 1)) = *(_DWORD *)(*(void *)(v3 + 288) + 4 * v22);
        ++*(_DWORD *)(v3 + 268);
        sub_100031F40(*(void *)(v3 + 256), v15);
        if (sub_100033480(v15)) {
          *(_DWORD *)(v3 + 348) = 1;
        }
        uint64_t v34 = 0;
        int v33 = 0;
        uint64_t v23 = sub_100033778(*(void *)(v3 + 256), v15);
        if (v23)
        {
          if (*(_DWORD *)(v23 + 340)) {
            goto LABEL_62;
          }
        }
        else
        {
          sub_100033B80(*(void *)(v3 + 256), v15, &v34, &v33);
          if (v34) {
LABEL_62:
          }
            *(_DWORD *)(v3 + 340) = 1;
        }
LABEL_63:
        if (sub_100027AD4(v3, v20, v22, v18))
        {
          if (*(_DWORD *)(v3 + 340) == 1)
          {
            uint64_t v34 = 0;
            int v33 = 0;
            sub_100033B80(*(void *)(v3 + 256), v15, &v34, &v33);
            if (v34) {
              sub_100027AD4(v3, v22, v22, 0);
            }
          }
        }
      }
LABEL_14:
      if (++v14 == v13) {
        goto LABEL_5;
      }
    }
  }
  return v3;
}

uint64_t sub_100028D24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 256);
  if (qword_100101CC0) {
    uint64_t v3 = (unsigned __int8 *)(qword_100101CC0 + 4220);
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = sub_100031BE8(v2, v3);
  uint64_t v5 = *(unsigned int *)(a1 + 268);
  if (v4 < 0 || (int)v5 <= v4 || *(_DWORD *)(*(void *)(a1 + 272) + 4 * v4) != v4)
  {
    if ((int)v5 >= 1)
    {
      uint64_t v6 = 0;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v6) != v4)
      {
        if (v5 == ++v6) {
          return 0;
        }
      }
      int v4 = v6;
      BOOL v10 = v6 == v5;
      if (v6 == v5) {
        int v9 = -1;
      }
      else {
        int v9 = v6;
      }
      if (!v10) {
        goto LABEL_23;
      }
      return 0;
    }
    int v4 = 0;
  }
  BOOL v8 = v4 == v5;
  if (v4 == v5) {
    int v9 = -1;
  }
  else {
    int v9 = v4;
  }
  if (v8) {
    return 0;
  }
LABEL_23:
  unsigned int v11 = (int *)(*(void *)(a1 + 288) + 4 * v4);
  int v12 = v11[1];
  uint64_t v13 = *v11;
  if (v12 <= (int)v13) {
    return 0;
  }
  uint64_t v14 = (int *)(*(void *)(a1 + 304) + 4 * v13);
  int v15 = v12 - v13;
  while (1)
  {
    int v16 = *v14++;
    if (v16 == v9) {
      break;
    }
    if (!--v15) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_100028E3C(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a1 + 268) < 2) {
    return 0;
  }
  LODWORD(v4) = 0;
  if (a2)
  {
    uint64_t v5 = 1;
    do
    {
      uint64_t v6 = sub_100031594(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v5));
      uint64_t v4 = sub_1000312CC(v6, a2 + 2 * (int)v4) + v4;
      ++v5;
    }
    while (v5 < *(int *)(a1 + 268));
  }
  else
  {
    uint64_t v8 = 1;
    do
    {
      uint64_t v9 = sub_100031594(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v8));
      uint64_t v4 = sub_1000312CC(v9, 0) + v4;
      ++v8;
    }
    while (v8 < *(int *)(a1 + 268));
  }
  return v4;
}

_DWORD *sub_100028F14(_DWORD *result, uint64_t a2)
{
  if (*result == 3)
  {
    *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
    *(_WORD *)(a2 + 212) = 0x4000;
  }
  return result;
}

uint64_t sub_100028F34(uint64_t a1, int a2, unsigned int a3, unint64_t a4, int a5, uint64_t a6, int a7, unint64_t a8)
{
  uint64_t v10 = a1;
  v163[0] = 0;
  uint64_t v160 = 0xFFFFFFFFLL;
  int v159 = 0;
  unsigned int v11 = (uint64_t *)sub_10003389C(*(void *)(a1 + 256));
  uint64_t v151 = sub_1000B5108((uint64_t)v11);
  uint64_t v162 = 0;
  uint64_t v146 = v10;
  if (a2 == 65534)
  {
    HIDWORD(v163[0]) = 1;
    uint64_t v12 = *(unsigned int *)(v10 + 268);
    if ((int)v12 < 1)
    {
      LODWORD(v14) = 0;
    }
    else
    {
      uint64_t v13 = *(_DWORD **)(v10 + 272);
      LODWORD(v14) = *v13;
      if (*v13)
      {
        uint64_t v14 = 0;
        while (v13[v14])
        {
          if (v12 == ++v14)
          {
            LODWORD(v14) = *(_DWORD *)(v10 + 268);
            break;
          }
        }
      }
    }
    LODWORD(v137) = 0;
    if (v14 == v12) {
      int v24 = -1;
    }
    else {
      int v24 = v14;
    }
    goto LABEL_61;
  }
  uint64_t v15 = (a4 >> 10) & 0x1FFFFFF;
  uint64_t v137 = (a4 >> 35) & 0x3FFFF;
  uint64_t v16 = sub_100031594(*(void *)(v10 + 256), (a4 >> 35) & 0x3FFFF);
  int v21 = sub_100030C4C(v16);
  if (*(_DWORD *)(v10 + 340)) {
    sub_1000314D0(v16, &v162, &v160);
  }
  sub_1000339F8(*(void *)(v10 + 256), v137, (a4 >> 10) & 0x1FFFFFF, (_DWORD *)v163 + 1, v17, v18, v19, v20);
  uint64_t v22 = *(unsigned int *)(v10 + 268);
  if ((int)v22 <= (int)v137
    || (LODWORD(v23) = (a4 >> 35) & 0x3FFFF, *(_DWORD *)(*(void *)(v10 + 272) + 4 * v137) != v137))
  {
    if ((int)v22 < 1)
    {
      LODWORD(v23) = 0;
    }
    else
    {
      uint64_t v23 = 0;
      while (*(_DWORD *)(*(void *)(v10 + 272) + 4 * v23) != v137)
      {
        if (v22 == ++v23)
        {
          LODWORD(v23) = *(_DWORD *)(v10 + 268);
          break;
        }
      }
    }
  }
  int v25 = a4 & 0x3FF;
  if (v23 == v22) {
    int v24 = -1;
  }
  else {
    int v24 = v23;
  }
  if (qword_100101CC0)
  {
    BOOL v27 = (a4 & 0x3FF) == 0 && *(_DWORD *)(qword_100101CC0 + 1172) != 0;
    if (v25 < HIDWORD(v163[0]) - 1)
    {
LABEL_33:
      unsigned int v143 = v25 + 1;
      unsigned int v152 = sub_100031390(v16, (a4 >> 10) & 0x1FFFFFF, v25 + 1, (_DWORD *)v163 + 1);
      if (qword_100101CC0 && *(void *)(qword_100101CC0 + 1280) <= v21 && *(_DWORD *)(qword_100101CC0 + 5324))
      {
        if (a5 < 1) {
          return 0;
        }
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v147 = v24;
        uint64_t v144 = (a4 & 0x7FFFFFFFFFFFFC00) + v143;
        uint64_t v140 = (a4 & 0x7FFFFFF800000000 | (((a4 >> 10) & 0x1FFFFFF) << 10)) + 1025;
        while (1)
        {
          int v30 = sub_10001ED14(v151, *(unsigned __int16 *)(a6 + 2 * v28), 0);
          HIWORD(v159) = v30;
          if (v152 != v30) {
            goto LABEL_48;
          }
          if (v25 == HIDWORD(v163[0]) - 2)
          {
            LODWORD(v163[0]) = *(unsigned char *)(*(void *)(v10 + 296) + v147) != 0;
            if (!v27) {
              goto LABEL_42;
            }
          }
          else
          {
            LODWORD(v163[0]) = 0;
            if (!v27)
            {
LABEL_42:
              __int16 v31 = 0;
              if ((int)v29 >= a7) {
                goto LABEL_47;
              }
LABEL_46:
              unint64_t v32 = a8 + 24 * (int)v29;
              *(_WORD *)unint64_t v32 = *(_WORD *)(a6 + 2 * v28);
              *(_WORD *)(v32 + 2) = v31;
              *(void *)(v32 + 8) = v144;
              *(_DWORD *)(v32 + 16) = v163[0];
              goto LABEL_47;
            }
          }
          __int16 v31 = sub_100031358(v16, v15);
          if ((int)v29 < a7) {
            goto LABEL_46;
          }
LABEL_47:
          uint64_t v29 = (v29 + 1);
LABEL_48:
          if (v27)
          {
            uint64_t v33 = sub_100030C4C(v16) - 1;
            if ((int)v15 < (int)v33)
            {
              uint64_t v34 = v140;
              uint64_t v35 = v15;
              do
              {
                if (!sub_100031408(v16, v35, &v159, v163)
                  || (unsigned __int16)v159 > HIWORD(v159))
                {
                  break;
                }
                if ((unsigned __int16)v159 == HIWORD(v159))
                {
                  if ((int)v29 < a7)
                  {
                    LODWORD(v163[0]) &= *(char *)(*(void *)(v146 + 296) + v147);
                    __int16 v36 = sub_100031358(v16, (int)v35 + 1);
                    unint64_t v37 = a8 + 24 * (int)v29;
                    *(_WORD *)unint64_t v37 = *(_WORD *)(a6 + 2 * v28);
                    *(_WORD *)(v37 + 2) = v36;
                    *(void *)(v37 + 8) = v34;
                    *(_DWORD *)(v37 + 16) = v163[0];
                  }
                  uint64_t v29 = (v29 + 1);
                }
                ++v35;
                v34 += 1024;
              }
              while (v33 != v35);
            }
          }
          ++v28;
          uint64_t v10 = v146;
          if (v28 == a5) {
            return v29;
          }
        }
      }
      BOOL v38 = v25 == HIDWORD(v163[0]) - 2 && *(unsigned char *)(*(void *)(v10 + 296) + v24) != 0;
      LODWORD(v163[0]) = v38;
      int v107 = sub_1000B5200(v11);
      uint64_t v115 = (int16x8_t *)sub_1000CD3E8(2 * v107, v108, v109, v110, v111, v112, v113, v114);
      uint64_t v29 = sub_10001FAFC(v151, v152, v115, v107);
      if (v27)
      {
        __int16 v116 = sub_100031358(v16, (a4 >> 10) & 0x1FFFFFF);
        uint64_t v150 = 2 * v107;
        if ((int)v29 < 1)
        {
LABEL_145:
          uint64_t v29 = 0;
LABEL_146:
          if (v27)
          {
            uint64_t v117 = (v21 - 1);
            if ((int)v15 < (int)v117)
            {
              uint64_t v156 = a4 & 0x7FFFFFF800000000;
              do
              {
                if (!sub_100031408(v16, v15, &v159, v163)) {
                  break;
                }
                uint64_t v118 = v15 + 1;
                int v119 = sub_10001FAFC(v151, (unsigned __int16)v159, v115, v107);
                __int16 v120 = sub_100031358(v16, v15);
                if (v119 >= 1)
                {
                  int v121 = v163[0];
                  uint64_t v122 = (int)v29;
                  uint64_t v123 = v119;
                  uint64_t v124 = a8 + 8 + 24 * (int)v29;
                  uint64_t v125 = v115;
                  do
                  {
                    if (v122 < a7)
                    {
                      *(_WORD *)(v124 - 8) = v125->i16[0];
                      *(_WORD *)(v124 - 6) = v120;
                      *(void *)uint64_t v124 = (v156 + (v118 << 10)) | 1;
                      *(_DWORD *)(v124 + 8) = v121;
                    }
                    ++v122;
                    uint64_t v125 = (int16x8_t *)((char *)v125 + 2);
                    v124 += 24;
                    --v123;
                  }
                  while (v123);
                  uint64_t v29 = v122;
                }
                ++v15;
              }
              while (v118 != v117);
            }
          }
          sub_1000CD4D0(v115, v150);
          return v29;
        }
      }
      else
      {
        __int16 v116 = 0;
        uint64_t v150 = 2 * v107;
        if ((int)v29 < 1) {
          goto LABEL_145;
        }
      }
      uint64_t v126 = 0;
      int v127 = v163[0];
      unint64_t v128 = a8 + 8;
      do
      {
        if (v126 < a7)
        {
          *(_WORD *)(v128 - 8) = v115->i16[v126];
          *(_WORD *)(v128 - 6) = v116;
          *(void *)unint64_t v128 = (a4 & 0x7FFFFFFFFFFFFC00) + v143;
          *(_DWORD *)(v128 + 8) = v127;
        }
        ++v126;
        v128 += 24;
      }
      while (v29 != v126);
      goto LABEL_146;
    }
  }
  else
  {
    BOOL v27 = 0;
    if (v25 < HIDWORD(v163[0]) - 1) {
      goto LABEL_33;
    }
  }
LABEL_61:
  uint64_t v39 = (int *)(*(void *)(v10 + 288) + 4 * v24);
  uint64_t v40 = *v39;
  uint64_t v41 = (v39[1] - v40);
  if (!v41) {
    return 0;
  }
  uint64_t v161 = 0;
  if (qword_100101CC0)
  {
    int v135 = *(unsigned __int16 *)(qword_100101CC0 + 4168);
    if ((int)v41 < 1) {
      return 0;
    }
  }
  else
  {
    int v135 = 0;
    if ((int)v41 < 1) {
      return 0;
    }
  }
  uint64_t v138 = v41;
  uint64_t v42 = 0;
  uint64_t v29 = 0;
  uint64_t v145 = a4 & 0x7FE0000000000000;
  int v141 = 1;
  unint64_t v43 = a8;
  uint64_t v130 = v40;
  do
  {
    uint64_t v44 = *(int *)(*(void *)(v10 + 304) + 4 * (v42 + v40));
    uint64_t v45 = *(void *)(v10 + 272);
    uint64_t v46 = *(unsigned int *)(v45 + 4 * v44);
    uint64_t v47 = sub_100031594(*(void *)(v10 + 256), *(_DWORD *)(v45 + 4 * v44));
    uint64_t v48 = sub_100031350(v47);
    int v56 = *(_DWORD *)(v48 + 16);
    if (v56 == -1)
    {
      int v141 = 0;
      goto LABEL_69;
    }
    if (v56)
    {
      uint64_t v29 = (v56 + v29);
      if ((int)v29 <= a7)
      {
        uint64_t v57 = v48;
        uint64_t v148 = v29;
        if (*(_DWORD *)(v10 + 336)) {
          __int16 v58 = *(unsigned __int8 *)(*(void *)(v10 + 352) + v42 + v40);
        }
        else {
          __int16 v58 = 0;
        }
        uint64_t v59 = v10;
        uint64_t v60 = *(void *)v48;
        uint64_t v61 = v145 + (v46 << 35);
        LODWORD(v163[0]) = *(char *)(*(void *)(v59 + 296) + v44);
        uint64_t v153 = v56;
        unint64_t v62 = v43 + 24 * v56;
        sub_1000314D0(v47, &v161, (_DWORD *)&v160 + 1);
        if (v161)
        {
          int v63 = *(__int16 **)(v59 + 432);
          if (v137 == v46)
          {
            sub_10005F970(v161, SHIDWORD(v160), a3, v153, *(unsigned __int16 **)(v57 + 8), v63);
            if ((int)v153 < 1) {
              goto LABEL_89;
            }
          }
          else
          {
            sub_10005FB50(v161, SHIDWORD(v160), v153, *(unsigned __int16 **)(v57 + 8), v63);
            if ((int)v153 < 1) {
              goto LABEL_89;
            }
          }
          do
          {
            *(_WORD *)unint64_t v43 = *(_WORD *)v60;
            __int16 v66 = *v63++;
            *(_WORD *)(v43 + 2) = v58 - v135 + v66;
            *(void *)(v43 + 8) = v61 | *(int *)(v60 + 4);
            *(_DWORD *)(v43 + 16) = v163[0];
            v43 += 24;
            v60 += 8;
          }
          while (v43 < v62);
LABEL_89:
          uint64_t v10 = v146;
          uint64_t v29 = v148;
          uint64_t v40 = v130;
          if (!sub_100030C54(v47)) {
            goto LABEL_69;
          }
LABEL_93:
          v43 -= 24 * v153;
          if ((int)v153 >= 1)
          {
            uint64_t v67 = 0;
            do
            {
              *(_WORD *)(v43 + 2) += sub_100031358(v47, *(_DWORD *)(*(void *)v57 + v67 + 4) >> 10);
              v43 += 24;
              v67 += 8;
            }
            while (8 * v153 != v67);
          }
          goto LABEL_69;
        }
        if (v162) {
          __int16 v58 = v58 - v135 + sub_10005FB88(v162, v160, a3);
        }
        uint64_t v40 = v130;
        if ((int)v153 < 1)
        {
          uint64_t v10 = v146;
        }
        else
        {
          uint64_t v64 = v60 + 2;
          uint64_t v10 = v146;
          do
          {
            *(_WORD *)unint64_t v43 = *(_WORD *)(v64 - 2);
            *(_WORD *)(v43 + 2) = v58;
            *(void *)(v43 + 8) = v61 | *(int *)(v64 + 2);
            int v65 = v163[0];
            if (LODWORD(v163[0])) {
              int v65 = *(_WORD *)v64 != 0;
            }
            *(_DWORD *)(v43 + 16) = v65;
            v43 += 24;
            v64 += 8;
          }
          while (v43 < v62);
        }
        uint64_t v29 = v148;
        if (sub_100030C54(v47)) {
          goto LABEL_93;
        }
      }
    }
LABEL_69:
    ++v42;
  }
  while (v42 != v138);
  if (!v141)
  {
    unint64_t v68 = sub_1000CD3E8(32 * (int)v138, v49, v50, v51, v52, v53, v54, v55);
    uint64_t v69 = 0;
    uint64_t v70 = 4 * v40;
    do
    {
      uint64_t v71 = *(int *)(*(void *)(v10 + 304) + v70);
      unsigned int v72 = *(_DWORD *)(*(void *)(v10 + 272) + 4 * v71);
      uint64_t v73 = sub_100031594(*(void *)(v10 + 256), v72);
      int v74 = sub_100030C4C(v73);
      int v75 = *(char *)(*(void *)(v10 + 296) + v71);
      uint64_t v76 = v68 + v69;
      *(_DWORD *)uint64_t v76 = v72;
      *(void *)(v76 + 8) = v73;
      *(_DWORD *)(v76 + 16) = v74;
      *(_DWORD *)(v76 + 20) = v75;
      *(void *)(v76 + 24) = sub_100031350(v73);
      v70 += 4;
      v69 += 32;
    }
    while (32 * v138 != v69);
    uint64_t v77 = 0;
    int v78 = a5;
    uint64_t v79 = a5;
    int32x4_t v131 = (void *)v68;
    while (1)
    {
      int v80 = (unsigned int *)(v68 + 32 * v77);
      uint64_t v134 = v77;
      if (*(_DWORD *)(*((void *)v80 + 3) + 16) == -1 && v78 >= 1) {
        break;
      }
LABEL_101:
      uint64_t v77 = v134 + 1;
      int v78 = a5;
      unint64_t v68 = (unint64_t)v131;
      if (v134 + 1 == v138)
      {
        sub_1000CD4D0(v131, 32 * (int)v138);
        return v29;
      }
    }
    unint64_t v81 = v68;
    uint64_t v82 = 0;
    uint64_t v83 = *((void *)v80 + 1);
    uint64_t v136 = v77 + v130;
    unint64_t v84 = v81 + 32 * v77;
    int32x4_t v154 = (_DWORD *)(v84 + 20);
    long long v85 = (_DWORD *)(v84 + 16);
    float32x4x3_t v142 = v80;
    while (1)
    {
      unsigned int v86 = sub_10001ED14(v151, *(unsigned __int16 *)(a6 + 2 * v82), 0);
      HIWORD(v159) = v86;
      int v87 = sub_1000310FC(v83, v86, (_DWORD *)v163 + 1);
      if (v87 != 0xFFFF) {
        break;
      }
LABEL_106:
      if (++v82 == v79) {
        goto LABEL_101;
      }
    }
    int v88 = v87;
    if (*(_DWORD *)(v10 + 336))
    {
      int v89 = v29;
      int v90 = *(unsigned __int8 *)(*(void *)(v10 + 352) + v136);
      uint64_t v91 = *v80;
      if (!*(_DWORD *)(v10 + 340)) {
        goto LABEL_119;
      }
    }
    else
    {
      int v89 = v29;
      int v90 = 0;
      uint64_t v91 = *v80;
      if (!*(_DWORD *)(v10 + 340)) {
        goto LABEL_119;
      }
    }
    __int16 v158 = 0;
    sub_1000314D0(v83, &v161, (_DWORD *)&v160 + 1);
    if (v161)
    {
      if (v137 == v91) {
        sub_10005F970(v161, SHIDWORD(v160), a3, 1, (unsigned __int16 *)&v159 + 1, &v158);
      }
      else {
        sub_10005FB50(v161, SHIDWORD(v160), 1, (unsigned __int16 *)&v159 + 1, &v158);
      }
      LOWORD(v90) = v90 - v135 + v158;
    }
    else if (v162)
    {
      int v90 = v90 - v135 + sub_10005FB88(v162, v160, a3);
    }
LABEL_119:
    uint64_t v92 = 0;
    uint64_t v93 = v89;
    uint64_t v94 = v145 + (v91 << 35);
    int v149 = v89;
    uint64_t v95 = a8 + 8 + 24 * v89;
    uint64_t v96 = v94 + ((uint64_t)v88 << 10);
    while (2)
    {
      uint64_t v97 = v92;
      if (v93 + v92 < a7)
      {
        if (HIDWORD(v163[0]) == 1)
        {
          int v98 = *v154 != 0;
          LODWORD(v163[0]) = v98;
          uint64_t v99 = qword_100101CC0;
          if (!qword_100101CC0) {
            goto LABEL_130;
          }
        }
        else
        {
          int v98 = 0;
          LODWORD(v163[0]) = 0;
          uint64_t v99 = qword_100101CC0;
          if (!qword_100101CC0) {
            goto LABEL_130;
          }
        }
        int v100 = *(_DWORD *)(v99 + 1172);
        BOOL v101 = HIDWORD(v163[0]) == 1 || v100 == 0;
        __int16 v102 = v90;
        if (v101)
        {
LABEL_130:
          __int16 v102 = v90 + sub_100031358(v83, v88 + (int)v97);
          int v98 = v163[0];
        }
        *(_WORD *)(v95 - 8) = *(_WORD *)(a6 + 2 * v82);
        *(_WORD *)(v95 - 6) = v102;
        *(void *)uint64_t v95 = v96;
        *(_DWORD *)(v95 + 8) = v98;
      }
      if (v161
        || qword_100101CC0
        && (*(_DWORD *)(qword_100101CC0 + 1172) ? (BOOL v103 = SHIDWORD(v163[0]) <= 1) : (BOOL v103 = 1), !v103)
        || (unsigned int v104 = v88 + v97 + 1, v104 == *v85)
        || (int v105 = HIWORD(v159),
            int v106 = sub_100031390(v83, v104, 0, (_DWORD *)v163 + 1),
            uint64_t v92 = v97 + 1,
            v96 += 1024,
            v95 += 24,
            v105 != v106))
      {
        uint64_t v29 = (v149 + v97 + 1);
        uint64_t v10 = v146;
        uint64_t v79 = a5;
        int v80 = v142;
        goto LABEL_106;
      }
      continue;
    }
  }
  return v29;
}

uint64_t sub_100029B58(uint64_t result, int a2, __int16 a3)
{
  *(_WORD *)(result + 212) = a3;
  *(_DWORD *)(result + 208) = a2;
  return result;
}

uint64_t sub_100029B64(uint64_t a1, int a2, unsigned int a3, int a4, unsigned int a5, int a6, int *a7, _WORD *a8, int a9)
{
  int v85 = 0;
  unsigned __int16 v87 = 0;
  uint64_t v86 = 0;
  uint64_t v16 = sub_10003389C(*(void *)(a1 + 256));
  uint64_t result = sub_100033B80(*(void *)(a1 + 256), a3, &v86, &v85);
  if (!v86) {
    return result;
  }
  unsigned int v18 = sub_1000BD964(v16, a5, 0);
  if (a2 != a3)
  {
    if (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 4548))
    {
      unsigned __int16 v87 = -3;
      uint64_t result = sub_10005F69C(v86, v85, 1, &v87, v18);
      *a8 += result;
      return result;
    }
    a4 = 65534;
  }
  uint64_t v19 = *(unsigned int *)(a1 + 268);
  uint64_t v73 = a7;
  if ((a3 & 0x80000000) != 0 || (int)v19 <= (int)a3 || *(_DWORD *)(*(void *)(a1 + 272) + 4 * a3) != a3)
  {
    if ((int)v19 < 1)
    {
      a3 = 0;
    }
    else
    {
      uint64_t v20 = 0;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v20) != a3)
      {
        if (v19 == ++v20)
        {
          a3 = *(_DWORD *)(a1 + 268);
          goto LABEL_17;
        }
      }
      a3 = v20;
    }
  }
LABEL_17:
  if (a3 == v19) {
    int v21 = -1;
  }
  else {
    int v21 = a3;
  }
  uint64_t v22 = *(void *)(a1 + 328);
  uint64_t v23 = v21;
  __int16 v24 = a6 - 1;
  uint64_t v83 = (unsigned __int16 *)(*(void *)(v22 + ((uint64_t)v21 << 6)) + 2 * (a6 - 1));
  uint64_t v25 = v83[1] - *v83;
  uint64_t result = sub_1000BD964(v16, a5, 0);
  unsigned int v26 = result;
  uint64_t v82 = v25;
  if (!qword_100101CC0)
  {
    uint64_t v29 = 0;
    uint64_t v28 = v25;
    goto LABEL_28;
  }
  if (*(_DWORD *)(qword_100101CC0 + 1076)) {
    BOOL v27 = (int)v25 < 1;
  }
  else {
    BOOL v27 = 1;
  }
  uint64_t v28 = v25;
  if (v27) {
    goto LABEL_26;
  }
  if (*(_DWORD *)(a1 + 376))
  {
    uint64_t v77 = v16;
    uint64_t v89 = 0;
    int v88 = 0;
    uint64_t v42 = *(void *)(a1 + 328);
    uint64_t result = v42 + (v23 << 6);
    unsigned int v72 = (void *)(result + 32);
    uint64_t v43 = v24;
    uint64_t v44 = *(int *)(*(void *)(result + 32) + 4 * v24);
    uint64_t v45 = (void *)(result + 24);
    uint64_t v46 = *(unsigned __int16 **)(*(void *)(result + 24) + 8 * v24);
    if (!v46)
    {
      uint64_t v47 = *(int *)(*v72 + 4 * v24);
      uint64_t v48 = sub_1000C33A0(8 * *(void *)(qword_100101CC0 + 4016));
      uint64_t v44 = v47;
      uint64_t v43 = v24;
      uint64_t v46 = (unsigned __int16 *)v48;
      uint64_t result = v42 + (v23 << 6);
      uint64_t v28 = v82;
      *(void *)(*v45 + 8 * v24) = v46;
    }
    v90[0] = 0;
    if ((int)v44 < 1)
    {
      uint64_t v16 = v77;
      uint64_t v52 = 0;
      uint64_t v53 = v46;
    }
    else
    {
      int v49 = 0;
      signed int v50 = v44 - 1;
      uint64_t v16 = v77;
      do
      {
        unsigned int v51 = (v49 + v50) >> 1;
        if (v46[4 * v51] >= v26) {
          signed int v50 = v51 - 1;
        }
        else {
          int v49 = v51 + 1;
        }
      }
      while (v49 <= v50);
      uint64_t v52 = v49;
      uint64_t v53 = &v46[4 * v49];
      if (v49 < (int)v44 && *v53 == v26)
      {
        unint64_t v54 = *(unsigned int *)&v46[4 * v49 + 2];
        uint64_t v29 = *(void *)(*(void *)(v42 + (v23 << 6) + 40) + ((v54 >> 7) & 0x1FFFFF8)) + 2 * (v54 & 0x3FF);
        goto LABEL_28;
      }
    }
    uint64_t v55 = qword_100101CC0;
    if (qword_100101CC0) {
      uint64_t v55 = *(void *)(qword_100101CC0 + 4016);
    }
    if (v55 != v44)
    {
      unint64_t v68 = v53;
      uint64_t v69 = v52;
      int v70 = v44;
      uint64_t v71 = v43;
      int v74 = a8;
      int v56 = (unsigned __int16 *)(*(void *)result + 2 * v43);
      uint64_t v57 = v56[1] - *v56;
      uint64_t v67 = v42;
      uint64_t v58 = v42 + (v23 << 6);
      unsigned int v61 = *(_DWORD *)(v58 + 56);
      uint64_t v60 = (const void **)(v58 + 56);
      unsigned int v59 = v61;
      unsigned int v62 = (v61 & 0xFFFFFC00) + 1024;
      if ((int)((v61 & 0x3FF) + v57) <= 1024) {
        unsigned int v63 = v59;
      }
      else {
        unsigned int v63 = v62;
      }
      uint64_t result = sub_1000C3A90(v60 - 2, (int *)v60 - 2, (signed int *)v60 - 1, 10, 2, v63 + v57);
      if (result)
      {
        unsigned int v79 = a5;
        uint64_t v81 = sub_10003389C(*(void *)(a1 + 256));
        sub_100033B80(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v23), &v89, &v88);
        uint64_t v29 = *((void *)*(v60 - 2) + (v63 >> 10)) + 2 * (v63 & 0x3FF);
        if ((int)v57 >= 1)
        {
          for (uint64_t i = 0; i != v57; ++i)
          {
            unsigned int v66 = *(unsigned __int16 *)(*(void *)(*(void *)(v67 + (v23 << 6) + 8)
                                                  + 8 * ((i + *v56) >> 10))
                                      + 12 * ((i + *v56) & 0x3FF));
            if (v66 == 65534) {
              unsigned __int16 v65 = -3;
            }
            else {
              unsigned __int16 v65 = sub_1000BD964(v81, v66, 0);
            }
            v90[0] = v65;
            *(_WORD *)(v29 + 2 * i) = sub_10005F69C(v89, v88, 1, v90, v26);
          }
        }
        uint64_t result = (uint64_t)j__memmove(v68 + 4, v68, 8 * (v70 - (int)v69));
        *unint64_t v68 = v26;
        *(_DWORD *)&v46[4 * v69 + 2] = v63;
        *(_DWORD *)uint64_t v60 = v63 + v57;
        ++*(_DWORD *)(*v72 + 4 * v71);
        a8 = v74;
        a5 = v79;
        uint64_t v16 = v77;
        uint64_t v28 = v82;
      }
      else
      {
        uint64_t v29 = 0;
        a8 = v74;
        uint64_t v16 = v77;
        uint64_t v28 = v82;
      }
LABEL_28:
      if ((int)v28 < 1) {
        goto LABEL_46;
      }
      goto LABEL_29;
    }
LABEL_26:
    uint64_t v29 = 0;
    goto LABEL_28;
  }
  uint64_t v29 = 0;
LABEL_29:
  unsigned int v75 = v26;
  unsigned int v78 = a5;
  uint64_t v30 = 0;
  __int16 v31 = (void *)(v22 + (v23 << 6) + 8);
  int v76 = -1;
  __int16 v80 = 0;
  int v32 = 0x40000000;
  do
  {
    unsigned int v33 = v30 + *v83;
    uint64_t v34 = *(void *)(*v31 + 8 * (v33 >> 10));
    unsigned int v35 = v33 & 0x3FF;
    __int16 v36 = (unsigned __int16 *)(v34 + 12 * (v33 & 0x3FF));
    unsigned int v37 = *v36;
    if (v37 == a4) {
      __int16 v80 = *(_WORD *)(v34 + 12 * (v33 & 0x3FF) + 8);
    }
    if (!a9 || v37 == 65534 || (result = sub_1000BDE10(v16, v37, v78), uint64_t v28 = v82, result))
    {
      if (v29)
      {
        uint64_t result = *(unsigned __int16 *)(v29 + 2 * v30);
        int v38 = *(__int16 *)(v34 + 12 * v35 + 8) + (__int16)result;
        if (v38 < v32) {
          goto LABEL_30;
        }
      }
      else
      {
        unsigned int v39 = *v36;
        if (v39 == 65534) {
          unsigned __int16 v40 = -3;
        }
        else {
          unsigned __int16 v40 = sub_1000BD964(v16, v39, 0);
        }
        unsigned __int16 v87 = v40;
        uint64_t result = sub_10005F69C(v86, v85, 1, &v87, v75);
        uint64_t v28 = v82;
        int v38 = *(__int16 *)(v34 + 12 * v35 + 8) + (__int16)result;
        if (v38 < v32)
        {
LABEL_30:
          int v76 = *(_DWORD *)(v34 + 12 * v35 + 4);
          int v32 = v38;
        }
      }
    }
    ++v30;
  }
  while (v28 != v30);
  if (v32 == 0x40000000)
  {
LABEL_46:
    *a8 = 0x4000;
  }
  else
  {
    LOWORD(v41) = qword_100101CC0;
    if (qword_100101CC0) {
      int v41 = *(_DWORD *)(qword_100101CC0 + 4168);
    }
    *a8 += v32 - (v80 + v41);
    int *v73 = v76;
  }
  return result;
}

uint64_t sub_10002A1D4(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 268);
  if (a2 < 0 || (int)v3 <= a2 || *(_DWORD *)(*(void *)(a1 + 272) + 4 * a2) != a2)
  {
    if ((int)v3 >= 1)
    {
      uint64_t v4 = 0;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v4) != a2)
      {
        if (v3 == ++v4) {
          return 0;
        }
      }
      if (v4 == v3) {
        return 0;
      }
      goto LABEL_16;
    }
    a2 = 0;
  }
  if (a2 == v3) {
    LODWORD(v4) = -1;
  }
  else {
    LODWORD(v4) = a2;
  }
  if (a2 == v3) {
    return 0;
  }
LABEL_16:
  if (a3 < 0 || (int)v3 <= a3 || *(_DWORD *)(*(void *)(a1 + 272) + 4 * a3) != a3)
  {
    if ((int)v3 >= 1)
    {
      uint64_t v5 = 0;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v5) != a3)
      {
        if (v3 == ++v5) {
          return 0;
        }
      }
      a3 = v5;
      BOOL v8 = v5 == v3;
      if (v5 == v3) {
        int v7 = -1;
      }
      else {
        int v7 = v5;
      }
      if (v8) {
        return 0;
      }
      goto LABEL_34;
    }
    a3 = 0;
  }
  BOOL v6 = a3 == v3;
  if (a3 == v3) {
    int v7 = -1;
  }
  else {
    int v7 = a3;
  }
  if (v6) {
    return 0;
  }
LABEL_34:
  if (!a3) {
    return *(char *)(*(void *)(a1 + 296) + (int)v4);
  }
  uint64_t v9 = (int *)(*(void *)(a1 + 288) + 4 * (int)v4);
  int v10 = v9[1];
  uint64_t v11 = *v9;
  if (v10 <= (int)v11) {
    return 0;
  }
  uint64_t v12 = (int *)(*(void *)(a1 + 304) + 4 * v11);
  int v13 = v10 - v11;
  while (1)
  {
    int v14 = *v12++;
    if (v14 == v7) {
      break;
    }
    uint64_t result = 0;
    if (!--v13) {
      return result;
    }
  }
  return 1;
}

uint64_t sub_10002A314(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000C33A0(448);
  uint64_t v5 = v4;
  if (v4)
  {
    *(_OWORD *)(v4 + 4) = 0u;
    *(_DWORD *)(v4 + 376) = 1;
    *(void *)(v4 + 256) = a2;
    *(_OWORD *)(v4 + 20) = 0u;
    *(_OWORD *)(v4 + 36) = 0u;
    *(_OWORD *)(v4 + 52) = 0u;
    if (sub_1000BEFCC(a1, (void *)(v4 + 4), 64, 1) && sub_1000271F0(v5, (unsigned __int8 *)(v5 + 4)))
    {
      if (sub_1000BEECC(a1, (void *)(v5 + 76)))
      {
        BOOL v6 = (_DWORD *)(v5 + 264);
        if (sub_1000BEECC(a1, (void *)(v5 + 264)) && sub_1000BEECC(a1, (void *)(v5 + 268)))
        {
          int v7 = (_DWORD *)(v5 + 368);
          if (sub_1000BEECC(a1, (void *)(v5 + 368))
            && sub_1000BEECC(a1, (void *)(v5 + 372))
            && sub_1000BEECC(a1, (void *)(v5 + 336))
            && sub_1000BEECC(a1, (void *)(v5 + 340))
            && sub_1000BEECC(a1, (void *)(v5 + 348)))
          {
            int v10 = 0;
            if (sub_1000BEECC(a1, &v10))
            {
              int v9 = 0;
              if (sub_1000BF078(a1, 4, (uint64_t *)(v5 + 272), &v9))
              {
                if (!*(void *)(v5 + 272) || v9 == *v6)
                {
                  int v9 = 0;
                  if (sub_1000BF078(a1, 4, (uint64_t *)(v5 + 288), &v9)
                    && (!*(void *)(v5 + 288) || v9 == *v6 + 1))
                  {
                    int v9 = 0;
                    if (sub_1000BF078(a1, 1, (uint64_t *)(v5 + 296), &v9)
                      && (!*(void *)(v5 + 296) || v9 == *v6))
                    {
                      int v9 = 0;
                      if (sub_1000BF078(a1, 4, (uint64_t *)(v5 + 304), &v9)
                        && (!*(void *)(v5 + 304) || v9 == *v7))
                      {
                        if (!*(_DWORD *)(v5 + 336)
                          || (int v9 = 0, sub_1000BF078(a1, 1, (uint64_t *)(v5 + 352), &v9))
                          && (!*(void *)(v5 + 352) || v9 == *v7)
                          && (int v9 = 0, sub_1000BF078(a1, 1, (uint64_t *)(v5 + 360), &v9))
                          && (!*(void *)(v5 + 360) || v9 == *v6))
                        {
                          if (v10)
                          {
                            int v9 = 0;
                            sub_1000BF078(a1, 4, (uint64_t *)(v5 + 280), &v9);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      *(_DWORD *)(v5 + 248) = 1;
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t sub_10002A5D8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 340);
}

uint64_t sub_10002A5E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1[38];
  uint64_t result = sub_1000315AC(a1[32], a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t result = 0;
    uint64_t v18 = 0;
    int v17 = 0;
    uint64_t v11 = (unsigned int *)a1[36];
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    if (v12 < v13)
    {
      int v14 = (int *)(v9 + 4 * v12);
      uint64_t v15 = v13 - v12;
      while (1)
      {
        uint64_t v16 = *v14++;
        sub_100033B80(a1[32], *(_DWORD *)(a1[34] + 4 * v16), &v18, &v17);
        if (v18) {
          break;
        }
        if (!--v15) {
          return 0;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_10002A68C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a1[38];
  uint64_t v16 = 0;
  if (sub_1000315AC(a1[32], a2, a3, a4, a5, a6, a7, a8))
  {
    uint64_t v27 = 0;
    int v17 = (unsigned int *)a1[36];
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    if (v18 < v19)
    {
      LODWORD(v16) = 0;
      if (a2)
      {
        do
        {
          uint64_t v24 = *(unsigned int *)(a1[34] + 4 * *(int *)(v10 + 4 * v18));
          sub_1000338A4(a1[32], v24, (_DWORD *)&v27 + 1, v11, v12, v13, v14, v15);
          int v25 = HIDWORD(v27);
          if (SHIDWORD(v27) >= 1)
          {
            uint64_t v26 = 0;
            do
            {
              *(_WORD *)(a2 + 2 * (int)v16 + 2 * v26) = sub_100033A98(a1[32], v24, v26, 0, &v27, v13, v14, v15);
              ++v26;
              int v25 = HIDWORD(v27);
            }
            while (v26 < SHIDWORD(v27));
          }
          uint64_t v16 = (v25 + v16);
          ++v18;
        }
        while (v18 != v19);
      }
      else
      {
        uint64_t v20 = (int *)(v10 + 4 * v18);
        uint64_t v21 = v19 - v18;
        do
        {
          uint64_t v22 = *v20++;
          sub_1000338A4(a1[32], *(unsigned int *)(a1[34] + 4 * v22), (_DWORD *)&v27 + 1, v11, v12, v13, v14, v15);
          uint64_t v16 = (HIDWORD(v27) + v16);
          --v21;
        }
        while (v21);
      }
    }
  }
  return v16;
}

BOOL sub_10002A7AC(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 268);
  if (a2 < 0 || (int)v2 <= a2 || *(_DWORD *)(*(void *)(a1 + 272) + 4 * a2) != a2)
  {
    if ((int)v2 < 1)
    {
      a2 = 0;
    }
    else
    {
      uint64_t v3 = 0;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v3) != a2)
      {
        if (v2 == ++v3)
        {
          a2 = *(_DWORD *)(a1 + 268);
          goto LABEL_11;
        }
      }
      a2 = v3;
    }
  }
LABEL_11:
  if (a2 == v2) {
    int v4 = -1;
  }
  else {
    int v4 = a2;
  }
  return *(_DWORD *)(*(void *)(a1 + 288) + 4 * v4 + 4) - *(_DWORD *)(*(void *)(a1 + 288) + 4 * v4) > 0;
}

uint64_t sub_10002A82C(uint64_t result, uint64_t a2)
{
  if ((int)result >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = *(void *)(a2 + 8 * v3);
      if (*(_DWORD *)v5 == 3 && *(int *)(v5 + 268) >= 2)
      {
        uint64_t v6 = 1;
        do
          uint64_t result = sub_10003234C(*(void *)(v5 + 256), *(_DWORD *)(*(void *)(v5 + 272) + 4 * v6++));
        while (v6 < *(int *)(v5 + 268));
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_10002A8C4(uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4)
{
  BOOL v8 = (uint64_t *)sub_10003389C(*(void *)(a1 + 256));
  if (sub_100025D50((unsigned int *)a1) != 3) {
    return 1;
  }
  uint64_t v9 = qword_100101CC0;
  if (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 4452))
  {
    LODWORD(v14) = *(_DWORD *)(a1 + 268);
    if ((int)v14 >= 2)
    {
      uint64_t v15 = 1;
      do
      {
        uint64_t v16 = sub_100031594(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v15));
        sub_100030C64(v16);
        ++v15;
        uint64_t v14 = *(int *)(a1 + 268);
      }
      while (v15 < v14);
      uint64_t v9 = qword_100101CC0;
    }
    if (v9 && *(_DWORD *)(v9 + 4544) && *(_DWORD *)(a1 + 340))
    {
      uint64_t v17 = *(int *)(a1 + 312);
      if (*(void *)(v9 + 4136) - 1 <= v17) {
        return 0;
      }
      uint64_t result = 1;
      *(_DWORD *)(a1 + 312) = v17 + 1;
      if (v17 != -1 && (int)v14 >= 2)
      {
        uint64_t v18 = 1;
        do
        {
          uint64_t v20 = *(void *)(a1 + 328);
          uint64_t v21 = (unint64_t *)(v20 + (v18 << 6));
          unint64_t v19 = *v21;
          if (*v21)
          {
            uint64_t v22 = 2 * *(int *)(a1 + 312);
            uint64_t v24 = (unsigned __int16 *)(v22 + v19 - 2);
            int v23 = *v24;
            LODWORD(v19) = *(unsigned __int16 *)(v22 + v19);
            if ((int)v19 - v23 >= 2)
            {
              sub_10002AB5C((uint64_t)v21, v23, (v19 - 1));
              unint64_t v19 = *v24;
              unsigned int v25 = v19 + 1;
              unsigned int v26 = v24[1];
              if ((int)v19 + 1 < v26)
              {
                uint64_t v27 = v20 + (v18 << 6);
                uint64_t v29 = *(void *)(v27 + 8);
                uint64_t v28 = (void *)(v27 + 8);
                uint64_t v30 = (unsigned __int16 *)(*(void *)(v29 + ((v19 >> 7) & 0x1F8)) + 12 * (v19 & 0x3FF));
                do
                {
                  __int16 v31 = (unsigned __int16 *)(*(void *)(*v28 + 8 * (v25 >> 10)) + 12 * (v25 & 0x3FF));
                  if (*v31 != *v30)
                  {
                    LODWORD(v19) = v19 + 1;
                    uint64_t v30 = (unsigned __int16 *)(*(void *)(*v28 + 8 * (v19 >> 10)) + 12 * (v19 & 0x3FF));
                    uint64_t v32 = *(void *)v31;
                    *((_DWORD *)v30 + 2) = *((_DWORD *)v31 + 2);
                    *(void *)uint64_t v30 = v32;
                    unsigned int v26 = v24[1];
                  }
                  ++v25;
                }
                while (v25 < v26);
              }
              LOWORD(v19) = v19 + 1;
              v24[1] = v19;
            }
            v24[2] = v19;
          }
          ++v18;
          uint64_t result = 1;
        }
        while (v18 < *(int *)(a1 + 268));
      }
      return result;
    }
    return 1;
  }
  if (*(_DWORD *)(a1 + 340) && *(_DWORD *)(a1 + 440) < a3)
  {
    uint64_t result = sub_1000C33A0(2 * a3);
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    sub_1000C321C(*(void *)(a1 + 432));
    *(void *)(a1 + 432) = v11;
    *(_DWORD *)(a1 + 440) = a3;
  }
  if (*(int *)(a1 + 268) < 2)
  {
LABEL_12:
    ++*(_DWORD *)(a1 + 312);
    return 1;
  }
  else
  {
    uint64_t v12 = 1;
    while (1)
    {
      uint64_t v13 = sub_100031594(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v12));
      uint64_t result = sub_100030C70(v13, a3, a2, a4, v8);
      if (!result) {
        break;
      }
      if (++v12 >= *(int *)(a1 + 268)) {
        goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t sub_10002AB5C(uint64_t a1, int a2, uint64_t a3)
{
  while (1)
  {
    uint64_t v3 = a3;
    uint64_t v4 = a1;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = (unsigned __int16 *)(*(void *)(v5 + 8 * ((a3 + a2) >> 11))
                            + 12 * (((a3 + a2) >> 1) & 0x3FF));
    int v7 = *v6;
    int v8 = *((_DWORD *)v6 + 1);
    int v9 = (__int16)v6[4];
    unsigned int v10 = a3;
    unsigned int v11 = a2;
LABEL_2:
    unsigned int v12 = v11 + 1;
    unsigned int v13 = v10 - v11;
    do
    {
      unsigned int v14 = v11;
      unsigned int v15 = v12;
      unsigned int v16 = v13;
      uint64_t v17 = *(void *)(v5 + 8 * (v11 >> 10));
      uint64_t v18 = (unsigned __int16 *)(v17 + 12 * (v11 & 0x3FF));
      int v19 = *v18 - v7;
      if (!v19)
      {
        int v19 = *(__int16 *)(v17 + 12 * (v11 & 0x3FF) + 8) - v9;
        if (!v19) {
          int v19 = *(_DWORD *)(v17 + 12 * (v11 & 0x3FF) + 4) - v8;
        }
      }
      ++v11;
      unsigned int v12 = v15 + 1;
      --v13;
    }
    while (v19 < 0);
    ++v10;
    do
    {
      unsigned int v20 = v16;
      uint64_t v21 = *(void *)(v5 + 8 * (--v10 >> 10));
      uint64_t v22 = (unsigned __int16 *)(v21 + 12 * (v10 & 0x3FF));
      uint64_t result = *v22;
      int v24 = result - v7;
      if (result == v7)
      {
        int v25 = *(__int16 *)(v21 + 12 * (v10 & 0x3FF) + 8);
        int v24 = v25 - v9;
        if (v25 == v9) {
          int v24 = *(_DWORD *)(v21 + 12 * (v10 & 0x3FF) + 4) - v8;
        }
      }
      unsigned int v16 = v20 - 1;
    }
    while (v24 > 0);
    if (v14 == v10)
    {
      unsigned int v10 = v11 - 1;
      if ((int)(v11 - 2) > a2) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v26 = v21 + 12 * (v10 & 0x3FF);
      uint64_t v27 = (__int16 *)(v26 + 8);
      uint64_t v28 = (_DWORD *)(v26 + 4);
      do
      {
        int v29 = *v18 - result;
        if (!v29)
        {
          int v29 = (__int16)v18[4] - *v27;
          if (!v29) {
            int v29 = *((_DWORD *)v18 + 1) - *v28;
          }
        }
        if (v29)
        {
          uint64_t v30 = *(void *)v18;
          int v32 = *((_DWORD *)v18 + 2);
          int v31 = *((_DWORD *)v22 + 2);
          *(void *)uint64_t v18 = *(void *)v22;
          *((_DWORD *)v18 + 2) = v31;
          *(void *)uint64_t v22 = v30;
          *((_DWORD *)v22 + 2) = v32;
          uint64_t v5 = *(void *)(v4 + 8);
          unsigned int v11 = v15 - 1;
          goto LABEL_2;
        }
        uint64_t v18 = (unsigned __int16 *)(*(void *)(v5 + 8 * (v15 >> 10)) + 12 * (v15 & 0x3FF));
        ++v15;
        --v20;
      }
      while (v20);
      if ((int)(v10 - 1) > a2) {
LABEL_22:
      }
        uint64_t result = sub_10002AB5C(v4);
    }
    a2 = v10 + 1;
    if ((int)(v10 + 1) >= (int)v3) {
      return result;
    }
    a1 = v4;
    a3 = v3;
  }
}

uint64_t sub_10002AD70(void *a1, int a2)
{
  if (a2 >= 1)
  {
    int v3 = 0;
    int v4 = 0;
    int v5 = 0;
    uint64_t v6 = a2;
    uint64_t v7 = a2;
    int v8 = a1;
    while (1)
    {
      int v9 = (_DWORD *)*v8;
      if (*(_DWORD *)*v8 != 3) {
        break;
      }
      uint64_t v10 = *((void *)v9 + 32);
      if (v10 != *(void *)(*a1 + 256)) {
        break;
      }
      v4 += v9[93];
      int v5 = v5 + v9[67] - 1;
      if (v9[84]) {
        int v3 = 1;
      }
      ++v8;
      if (!--v7)
      {
        uint64_t v11 = sub_100027004(0, v10, v5, v4, v3);
        if (!v11) {
          return v11;
        }
        uint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = a1[v12];
          if (*(int *)(v13 + 268) >= 1) {
            break;
          }
LABEL_28:
          if (++v12 == v6) {
            return v11;
          }
        }
        uint64_t v14 = 0;
        while (sub_100027E04(v11, *(_DWORD *)(*(void *)(v13 + 272) + 4 * v14), &v24))
        {
          ++v14;
          uint64_t v15 = *(int *)(v13 + 268);
          if (v14 >= v15)
          {
            if ((int)v15 < 1) {
              goto LABEL_28;
            }
            uint64_t v16 = 0;
            while (1)
            {
              int v17 = *(_DWORD *)(*(void *)(v13 + 272) + 4 * v16);
              uint64_t v18 = *(void *)(v13 + 288);
              uint64_t v19 = *(int *)(v18 + 4 * v16);
              uint64_t v20 = v16 + 1;
              uint64_t v21 = *(int *)(v18 + 4 * (v16 + 1));
              if ((int)v19 < (int)v21) {
                break;
              }
LABEL_22:
              if (*(unsigned char *)(*(void *)(v13 + 296) + v16))
              {
                if (*(_DWORD *)(v13 + 336))
                {
                  if (!sub_100027D30(v11, v17, 0, *(unsigned __int8 *)(*(void *)(v13 + 360) + v16))) {
                    goto LABEL_30;
                  }
                }
                else if (!sub_100027D30(v11, v17, 0, 0))
                {
                  goto LABEL_30;
                }
              }
              ++v16;
              if (v20 >= *(int *)(v13 + 268)) {
                goto LABEL_28;
              }
            }
            while (1)
            {
              int v22 = *(_DWORD *)(v13 + 336) ? *(unsigned __int8 *)(*(void *)(v13 + 352) + v19) : 0;
              if (!sub_100027D30(v11, v17, *(_DWORD *)(*(void *)(v13 + 272) + 4* *(int *)(*(void *)(v13 + 304) + 4 * v19)), v22))goto LABEL_30; {
              if (v21 == ++v19)
              }
                goto LABEL_22;
            }
          }
        }
LABEL_30:
        sub_100027400(v11);
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_10002AF68(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  v49[0] = 0;
  uint64_t v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  memset(v34, 0, sizeof(v34));
  uint64_t v11 = sub_100026258(a1, 0);
  if (a2 >= 1)
  {
    unint64_t v12 = v11;
    uint64_t v13 = 0;
    __int16 v14 = 0;
    LODWORD(v15) = 0;
    LODWORD(v16) = 0;
    int v29 = 0;
    unsigned __int16 v17 = -2;
    uint64_t v18 = a2;
    while (1)
    {
      if (*(_DWORD *)a1 == 3)
      {
        *(void *)&long long v36 = 0x7FFFFFFFFFFFFFFFLL;
        WORD2(v48) = 0x4000;
      }
      unsigned int v20 = *(unsigned __int16 *)(a3 + 2 * v13);
      DWORD2(v45) = 0;
      sub_10002E730(a1, (uint64_t)&v35, v17, v12, v20);
      DWORD1(v40) = a7;
      if (sub_10002B1EC((uint64_t)&v35, a1, (unsigned __int16 *)v34)) {
        break;
      }
LABEL_6:
      v14 += WORD1(v34[0]);
      unsigned __int16 v17 = *(_WORD *)(a3 + 2 * v13);
      unint64_t v12 = *((void *)&v34[0] + 1);
      if (++v13 == v18) {
        return (__int16)(sub_10002B83C(a1, v15, v16, v29) + v14);
      }
    }
    int v25 = (v12 & 0x3FF) + 1;
    while (1)
    {
      uint64_t v26 = *((void *)&v34[0] + 1);
      uint64_t v15 = (*((void *)&v34[0] + 1) >> 35) & 0x3FFFFLL;
      if (v15 != *(_DWORD *)(a4 + 4 * v13)) {
        goto LABEL_12;
      }
      uint64_t v16 = (*((void *)&v34[0] + 1) >> 10) & 0x1FFFFFFLL;
      if (v16 == *(_DWORD *)(a5 + 4 * v13))
      {
        int v27 = WORD4(v34[0]) & 0x3FF;
        int v29 = v27;
        if (*(unsigned char *)(a6 + v13)) {
          goto LABEL_20;
        }
      }
      else
      {
        if (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 1172))
        {
          sub_1000339F8(*(void *)(a1 + 256), (*((void *)&v34[0] + 1) >> 35) & 0x3FFFFLL, (*((void *)&v34[0] + 1) >> 10) & 0x1FFFFFFLL, v49, v21, v22, v23, v24);
          if (v49[0] >= 2 && !sub_100033BBC(*(void *)(a1 + 256), v15)) {
            goto LABEL_12;
          }
        }
        *((void *)&v34[0] + 1) = ((v26 & 0x7FFFFFF800000000)
                                  + ((unint64_t)*(unsigned int *)(a5 + 4 * v13) << 10)) & 0xFFFFFFFFFFFFFC00 | v26 & 0x3FF;
        int v27 = WORD4(v34[0]) & 0x3FF;
        int v29 = v27;
        if (*(unsigned char *)(a6 + v13))
        {
LABEL_20:
          if (!v27) {
            goto LABEL_5;
          }
          goto LABEL_12;
        }
      }
      if (v27 == v25)
      {
        int v29 = v25;
        goto LABEL_6;
      }
      if (!v27)
      {
        uint64_t v33 = 0;
        int v32 = 0;
        sub_100033B80(*(void *)(a1 + 256), *(_DWORD *)(a4 + 4 * v13), &v33, &v32);
        if (v33)
        {
LABEL_5:
          int v29 = 0;
          goto LABEL_6;
        }
      }
LABEL_12:
      if (!sub_10002B1EC((uint64_t)&v35, a1, (unsigned __int16 *)v34)) {
        goto LABEL_6;
      }
    }
  }
  int v29 = 0;
  LODWORD(v16) = 0;
  LODWORD(v15) = 0;
  __int16 v14 = 0;
  return (__int16)(sub_10002B83C(a1, v15, v16, v29) + v14);
}

uint64_t sub_10002B1E4(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unsigned int a5)
{
  *(_DWORD *)(a2 + 168) = 0;
  return sub_10002E730(a1, a2, a3, a4, a5);
}

uint64_t sub_10002B1EC(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v6 = sub_10003389C(*(void *)(a2 + 256));
  uint64_t v7 = (uint64_t *)(a1 + 192);
  int v9 = *(_DWORD *)(a1 + 104);
  int v8 = *(_DWORD *)(a1 + 108);
LABEL_2:
  if (v8 == v9)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 68);
    signed int v11 = v10 + 1;
    *(_DWORD *)(a1 + 68) = v10 + 1;
    if (!v9) {
      return 0;
    }
    int v45 = 0;
    unsigned __int16 v44 = 0;
    int v43 = 0;
    if (*(_DWORD *)(a1 + 116))
    {
      if (qword_100101CC0)
      {
        if (*(_DWORD *)(qword_100101CC0 + 1172))
        {
          if (!*(_DWORD *)(a1 + 36))
          {
            signed int v12 = *(_DWORD *)(a1 + 40);
            if (v12 < *(_DWORD *)(a1 + 72) - 1)
            {
              if (sub_100031408(*(void *)(a1 + 48), v12, &v44, &v43))
              {
                ++*(_DWORD *)(a1 + 40);
                unsigned int v13 = v44;
                *(_WORD *)(a1 + 76) = v44;
                *(_DWORD *)(a1 + 80) = v43 & *(char *)(*(void *)(a2 + 296) + *(int *)(a1 + 56));
                *(_DWORD *)(a1 + 104) = sub_10001FD90(*(void *)a1, v13);
                *(void *)(a1 + 96) = (((unint64_t)*(unsigned int *)(a1 + 44) << 35)
                                      + ((unint64_t)*(unsigned int *)(a1 + 8) << 53)
                                      + ((uint64_t)*(int *)(a1 + 40) << 10)) | 1;
                *(void *)(a1 + 160) = 0;
                *(void *)(a1 + 108) = &_mh_execute_header;
                goto LABEL_74;
              }
            }
          }
        }
      }
      return 0;
    }
    if (*(__int16 *)(a1 + 120) == -1)
    {
      if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1172))
      {
        signed int v11 = *(_DWORD *)(a1 + 68) + sub_1000314E4(*(void *)(a1 + 48), v10);
        *(_DWORD *)(a1 + 68) = v11;
      }
      *(_DWORD *)(a1 + 108) = 0;
      *(_WORD *)(a1 + 88) = *(_WORD *)(a1 + 90);
      if (v11 == *(_DWORD *)(a1 + 72))
      {
LABEL_28:
        while (1)
        {
          int v15 = *(_DWORD *)(a1 + 64);
          int v16 = *(_DWORD *)(a1 + 60) + 1;
          *(_DWORD *)(a1 + 60) = v16;
          if (v16 >= v15) {
            break;
          }
          int v17 = *(_DWORD *)(*(void *)(a2 + 288) + 4 * *(int *)(a1 + 32)) + v16;
          uint64_t v18 = *(int *)(*(void *)(a2 + 304) + 4 * v17);
          *(_DWORD *)(a1 + 56) = v18;
          unsigned int v19 = *(_DWORD *)(*(void *)(a2 + 272) + 4 * v18);
          *(_DWORD *)(a1 + 44) = v19;
          if (*(_DWORD *)(a2 + 340))
          {
            sub_100033B80(*(void *)(a2 + 256), v19, (void *)(a1 + 192), (_DWORD *)(a1 + 200));
            unsigned int v19 = *(_DWORD *)(a1 + 44);
          }
          uint64_t v20 = sub_100031594(*(void *)(a2 + 256), v19);
          *(void *)(a1 + 48) = v20;
          int v21 = *(_DWORD *)(a2 + 336);
          if (v21) {
            LOWORD(v21) = *(unsigned __int8 *)(*(void *)(a2 + 352) + v17);
          }
          *(_WORD *)(a1 + 88) = v21;
          *(_WORD *)(a1 + 90) = v21;
          int v22 = sub_100030C4C(v20);
          *(_DWORD *)(a1 + 72) = v22;
          if (v22 >= 1)
          {
            *(void *)(a1 + 160) = 0;
            if (*(_DWORD *)(a1 + 168))
            {
              uint64_t v23 = sub_100033BBC(*(void *)(a2 + 256), *(_DWORD *)(a1 + 44));
              *(void *)(a1 + 160) = v23;
              if (v23)
              {
                *(_DWORD *)(a1 + 104) = 1;
                uint64_t v32 = *(int *)(a1 + 56);
                *(_DWORD *)(a1 + 80) = *(char *)(*(void *)(a2 + 296) + v32);
                *(void *)(a1 + 96) = ((unint64_t)*(unsigned int *)(a1 + 44) << 35)
                                     + ((unint64_t)*(unsigned int *)(a1 + 8) << 53);
                if (qword_100101CC0)
                {
                  if (*(_DWORD *)(qword_100101CC0 + 4544))
                  {
                    if (*(_DWORD *)(a2 + 340))
                    {
                      if (*v7)
                      {
                        uint64_t v33 = (uint64_t *)(*(void *)(a2 + 328) + (v32 << 6));
                        long long v40 = v33 + 1;
                        long long v41 = (const void *)*v33;
                        unint64_t v34 = *(unsigned __int16 *)(*v33 + 2 * *(int *)(a2 + 312) + 2);
                        if (sub_1000C3A90((const void **)v33 + 1, (int *)v33 + 4, (signed int *)v33 + 5, 10, 12, (int)v34 + 1))
                        {
                          if (*(void *)(a1 + 176) == *(void *)(a1 + 192)) {
                            __int16 v35 = *(_WORD *)(a1 + 28);
                          }
                          else {
                            __int16 v35 = -2;
                          }
                          uint64_t v36 = *(void *)(*v40 + ((v34 >> 7) & 0x1F8)) + 12 * (v34 & 0x3FF);
                          *(_WORD *)uint64_t v36 = v35;
                          *(_DWORD *)(v36 + 4) = *(_DWORD *)(a1 + 208);
                          *(_WORD *)(v36 + 8) = *(_WORD *)(a1 + 212);
                          uint64_t v37 = (uint64_t)v41 + 2 * *(int *)(a2 + 312);
                          ++*(_WORD *)(v37 + 2);
                        }
                      }
                    }
                  }
                }
                goto LABEL_74;
              }
            }
            if (*(__int16 *)(a1 + 120) == -1)
            {
              int v24 = 0;
LABEL_40:
              *(_DWORD *)(a1 + 68) = v24;
              int v16 = *(_DWORD *)(a1 + 60);
              int v15 = *(_DWORD *)(a1 + 64);
              break;
            }
            int v24 = sub_1000310FC(*(void *)(a1 + 48), *(unsigned __int16 *)(a1 + 76), &v45);
            if (v24 != 0xFFFF) {
              goto LABEL_40;
            }
          }
        }
        if (v16 == v15) {
          return 0;
        }
        signed int v11 = *(_DWORD *)(a1 + 68);
      }
LABEL_43:
      unsigned int v25 = sub_100031390(*(void *)(a1 + 48), v11, 0, &v45);
      *(_WORD *)(a1 + 76) = v25;
      if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1172))
      {
        *(_DWORD *)(a1 + 112) = v45 == 1;
        if (!*(_DWORD *)(a2 + 340))
        {
LABEL_49:
          *(_DWORD *)(a1 + 104) = sub_10001FD90(*(void *)a1, v25);
          if (v45 == 1)
          {
LABEL_50:
            BOOL v26 = *(unsigned char *)(*(void *)(a2 + 296) + *(int *)(a1 + 56)) != 0;
LABEL_64:
            *(_DWORD *)(a1 + 80) = v26;
            *(void *)(a1 + 96) = ((unint64_t)*(unsigned int *)(a1 + 44) << 35)
                                 + ((unint64_t)*(unsigned int *)(a1 + 8) << 53)
                                 + ((uint64_t)*(int *)(a1 + 68) << 10);
            goto LABEL_74;
          }
LABEL_63:
          BOOL v26 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 112) = 1;
        if (!*(_DWORD *)(a2 + 340)) {
          goto LABEL_49;
        }
      }
      if (*(void *)(a1 + 160)) {
        goto LABEL_49;
      }
      __int16 v42 = 0x7FFF;
      uint64_t v27 = *v7;
      if (*v7)
      {
        int v28 = *(_DWORD *)(a1 + 200);
        if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 44)) {
          sub_10005F970(v27, v28, *(unsigned __int16 *)(a1 + 172), 1, (unsigned __int16 *)(a1 + 76), &v42);
        }
        else {
          sub_10005FB50(v27, v28, 1, (unsigned __int16 *)(a1 + 76), &v42);
        }
      }
      else
      {
        uint64_t v29 = *(void *)(a1 + 176);
        if (v29)
        {
          __int16 v30 = sub_10005FB88(v29, *(_DWORD *)(a1 + 184), *(unsigned __int16 *)(a1 + 172));
          goto LABEL_58;
        }
      }
      __int16 v30 = v42;
LABEL_58:
      if (v30 != 0x7FFF)
      {
        LOWORD(v31) = qword_100101CC0;
        if (qword_100101CC0) {
          uint64_t v31 = *(void *)(qword_100101CC0 + 4168);
        }
        *(_WORD *)(a1 + 88) = *(_WORD *)(a1 + 88) + v30 - v31;
      }
      *(_DWORD *)(a1 + 104) = sub_10001FD90(*(void *)a1, *(unsigned __int16 *)(a1 + 76));
      if (v45 == 1) {
        goto LABEL_50;
      }
      goto LABEL_63;
    }
    if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1172))
    {
      int v45 = sub_100031294(*(void *)(a1 + 48), v10);
      if (v45 <= 1)
      {
        signed int v11 = *(_DWORD *)(a1 + 68);
        signed int v14 = *(_DWORD *)(a1 + 72);
        if (v11 < v14) {
          goto LABEL_17;
        }
        goto LABEL_27;
      }
      signed int v11 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)(a1 + 68) = v11;
    }
    signed int v14 = *(_DWORD *)(a1 + 72);
    if (v11 < v14)
    {
LABEL_17:
      if (*(unsigned __int16 *)(a1 + 76) == sub_100031390(*(void *)(a1 + 48), v11, 0, &v45))
      {
        *(_DWORD *)(a1 + 108) = 0;
        *(_WORD *)(a1 + 88) = *(_WORD *)(a1 + 90);
        signed int v11 = *(_DWORD *)(a1 + 68);
        if (v11 == *(_DWORD *)(a1 + 72)) {
          goto LABEL_28;
        }
        goto LABEL_43;
      }
      signed int v14 = *(_DWORD *)(a1 + 72);
    }
LABEL_27:
    *(_DWORD *)(a1 + 68) = v14;
    signed int v11 = v14;
    *(_DWORD *)(a1 + 108) = 0;
    *(_WORD *)(a1 + 88) = *(_WORD *)(a1 + 90);
    if (v14 == *(_DWORD *)(a1 + 72)) {
      goto LABEL_28;
    }
    goto LABEL_43;
  }
  while (1)
  {
    if (v8 >= v9) {
      goto LABEL_2;
    }
    *a3 = sub_100020020(*(void *)a1, *(unsigned __int16 *)(a1 + 76), v8);
    ++*(_DWORD *)(a1 + 108);
    if (!*(_DWORD *)(a1 + 84) || sub_1000BDE10(v6, *(unsigned __int16 *)(a1 + 28), *a3) || *(void *)(a1 + 160))
    {
      int v38 = *(unsigned __int16 *)(a1 + 120);
      if (v38 == 0xFFFF || v38 == *a3) {
        break;
      }
    }
LABEL_74:
    int v9 = *(_DWORD *)(a1 + 104);
    int v8 = *(_DWORD *)(a1 + 108);
  }
  *((_DWORD *)a3 + 4) = *(_DWORD *)(a1 + 80);
  *((void *)a3 + 1) = *(void *)(a1 + 96);
  *((void *)a3 + 3) = *(void *)(a1 + 160);
  a3[1] = *(_WORD *)(a1 + 88);
  if (*(void *)(a1 + 160))
  {
    *(void *)(a1 + 104) = 0x100000001;
    *(void *)(a1 + 68) = &_mh_execute_header;
  }
  else if (*(_DWORD *)(a1 + 112))
  {
    a3[1] += sub_100031358(*(void *)(a1 + 48), *(_DWORD *)(a1 + 68));
  }
  return 1;
}

uint64_t sub_10002B83C(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  if (*(_DWORD *)(a1 + 336))
  {
    uint64_t v8 = *(unsigned int *)(a1 + 268);
    if ((a2 & 0x80000000) != 0
      || (int)v8 <= (int)a2
      || (LODWORD(v9) = a2, *(_DWORD *)(*(void *)(a1 + 272) + 4 * a2) != a2))
    {
      if ((int)v8 < 1)
      {
        LODWORD(v9) = 0;
      }
      else
      {
        uint64_t v9 = 0;
        while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v9) != a2)
        {
          if (v8 == ++v9)
          {
            LODWORD(v9) = *(_DWORD *)(a1 + 268);
            break;
          }
        }
      }
    }
    if (v9 == v8) {
      int v11 = -1;
    }
    else {
      int v11 = v9;
    }
    __int16 v10 = *(unsigned __int8 *)(*(void *)(a1 + 360) + v11);
  }
  else
  {
    __int16 v10 = 0;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_100033B80(*(void *)(a1 + 256), a2, &v18, (_DWORD *)&v17 + 1);
  if (v18)
  {
    uint64_t v12 = sub_100031594(*(void *)(a1 + 256), a2);
    unsigned int v13 = sub_100031390(v12, a3, a4, &v17);
    __int16 v14 = sub_10005FB88(v18, SHIDWORD(v17), v13) + v10;
    LOWORD(v15) = qword_100101CC0;
    if (qword_100101CC0) {
      uint64_t v15 = *(void *)(qword_100101CC0 + 4168);
    }
    return (__int16)(v14 - v15);
  }
  return v10;
}

uint64_t sub_10002B968(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 268);
  if (a2 < 0 || (int)v3 <= a2 || *(_DWORD *)(*(void *)(a1 + 272) + 4 * a2) != a2)
  {
    if ((int)v3 < 1)
    {
      a2 = 0;
    }
    else
    {
      uint64_t v4 = 0;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v4) != a2)
      {
        if (v3 == ++v4)
        {
          a2 = *(_DWORD *)(a1 + 268);
          goto LABEL_11;
        }
      }
      a2 = v4;
    }
  }
LABEL_11:
  if (a2 == v3) {
    int v5 = -1;
  }
  else {
    int v5 = a2;
  }
  uint64_t v6 = (int *)(*(void *)(a1 + 288) + 4 * v5);
  uint64_t v7 = *v6;
  uint64_t v8 = (v6[1] - v7);
  if (a3 && (int)v8 >= 1)
  {
    uint64_t v9 = (int *)(*(void *)(a1 + 304) + 4 * v7);
    uint64_t v10 = v8;
    do
    {
      uint64_t v11 = *v9++;
      *a3++ = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v11);
      --v10;
    }
    while (v10);
  }
  return v8;
}

uint64_t sub_10002BA18(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 268);
  if ((a2 & 0x80000000) == 0 && (int)v3 > a2)
  {
    LODWORD(v4) = a2;
    if (*(_DWORD *)(*(void *)(a1 + 272) + 4 * a2) == a2) {
      goto LABEL_9;
    }
  }
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v4) != a2)
    {
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a1 + 268);
        break;
      }
    }
LABEL_9:
    if (v4 == v3) {
      int v5 = -1;
    }
    else {
      int v5 = v4;
    }
    if (a2) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
  if (v3) {
    int v5 = 0;
  }
  else {
    int v5 = -1;
  }
  if (a2)
  {
LABEL_13:
    if ((int)v3 >= 1)
    {
      if (a3)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        do
        {
          uint64_t v8 = *(void *)(a1 + 288);
          uint64_t v9 = *(int *)(v8 + 4 * v6);
          uint64_t v10 = v6 + 1;
          uint64_t v11 = (*(_DWORD *)(v8 + 4 * (v6 + 1)) - v9);
          if ((int)v11 >= 1)
          {
            uint64_t v12 = (int *)(*(void *)(a1 + 304) + 4 * v9);
            while (1)
            {
              int v13 = *v12++;
              if (v13 == v5) {
                break;
              }
              if (!--v11) {
                goto LABEL_17;
              }
            }
            *(_DWORD *)(a3 + 4 * (int)v7) = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v6);
            uint64_t v7 = (v7 + 1);
            LODWORD(v3) = *(_DWORD *)(a1 + 268);
          }
LABEL_17:
          ++v6;
        }
        while (v10 < (int)v3);
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v7 = 0;
        uint64_t v17 = *(int **)(a1 + 288);
        int v18 = *v17;
        do
        {
          int v19 = v17[++v16];
          uint64_t v20 = (v19 - v18);
          if (v19 - v18 > 0)
          {
            int v21 = (int *)(*(void *)(a1 + 304) + 4 * v18);
            while (1)
            {
              int v22 = *v21++;
              if (v22 == v5) {
                break;
              }
              if (!--v20) {
                goto LABEL_36;
              }
            }
            uint64_t v7 = (v7 + 1);
          }
LABEL_36:
          int v18 = v17[v16];
        }
        while (v16 != v3);
      }
      return v7;
    }
    return 0;
  }
LABEL_27:
  if ((int)v3 < 2) {
    return 0;
  }
  if (a3)
  {
    uint64_t v7 = 0;
    uint64_t v14 = 1;
    do
    {
      if (*(unsigned char *)(*(void *)(a1 + 296) + v14))
      {
        *(_DWORD *)(a3 + 4 * (int)v7) = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v14);
        uint64_t v7 = (v7 + 1);
        LODWORD(v3) = *(_DWORD *)(a1 + 268);
      }
      ++v14;
    }
    while (v14 < (int)v3);
    return v7;
  }
  uint64_t v23 = *(void *)(a1 + 296);
  if (v3 < 9)
  {
    LODWORD(v7) = 0;
    unint64_t v24 = 1;
    goto LABEL_55;
  }
  uint64_t v25 = v3 - 1;
  if (v3 >= 0x21)
  {
    int32x4_t v27 = 0uLL;
    unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFE0;
    v28.i64[0] = 0x100000001;
    v28.i64[1] = 0x100000001;
    uint64_t v29 = (int8x16_t *)(v23 + 17);
    int32x4_t v30 = 0uLL;
    unint64_t v31 = v25 & 0xFFFFFFFFFFFFFFE0;
    int32x4_t v32 = 0uLL;
    int32x4_t v33 = 0uLL;
    int32x4_t v34 = 0uLL;
    int32x4_t v35 = 0uLL;
    int32x4_t v36 = 0uLL;
    int32x4_t v37 = 0uLL;
    do
    {
      uint8x16_t v38 = (uint8x16_t)vtstq_s8(v29[-1], v29[-1]);
      uint16x8_t v39 = vmovl_u8(*(uint8x8_t *)v38.i8);
      uint16x8_t v40 = vmovl_high_u8(v38);
      uint8x16_t v41 = (uint8x16_t)vtstq_s8(*v29, *v29);
      uint16x8_t v42 = vmovl_u8(*(uint8x8_t *)v41.i8);
      uint16x8_t v43 = vmovl_high_u8(v41);
      int32x4_t v33 = vaddq_s32(v33, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v40), v28));
      int32x4_t v32 = vaddq_s32(v32, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v40.i8), v28));
      int32x4_t v30 = vaddq_s32(v30, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v39), v28));
      int32x4_t v27 = vaddq_s32(v27, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v39.i8), v28));
      int32x4_t v37 = vaddq_s32(v37, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v43), v28));
      int32x4_t v36 = vaddq_s32(v36, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v43.i8), v28));
      int32x4_t v35 = vaddq_s32(v35, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v42), v28));
      int32x4_t v34 = vaddq_s32(v34, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v42.i8), v28));
      v29 += 2;
      v31 -= 32;
    }
    while (v31);
    uint64_t v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v34, v27), vaddq_s32(v36, v32)), vaddq_s32(vaddq_s32(v35, v30), vaddq_s32(v37, v33))));
    if (v25 == v26) {
      return v7;
    }
    if ((v25 & 0x18) == 0)
    {
      unint64_t v24 = v26 | 1;
      goto LABEL_55;
    }
  }
  else
  {
    LODWORD(v7) = 0;
    unint64_t v26 = 0;
  }
  unint64_t v24 = v25 & 0xFFFFFFFFFFFFFFF8 | 1;
  int32x4_t v44 = 0uLL;
  int32x4_t v45 = (int32x4_t)v7;
  long long v46 = (int8x8_t *)(v26 + v23 + 1);
  unint64_t v47 = v26 - (v25 & 0xFFFFFFFFFFFFFFF8);
  v48.i64[0] = 0x100000001;
  v48.i64[1] = 0x100000001;
  do
  {
    int8x8_t v49 = *v46++;
    uint16x8_t v50 = vmovl_u8((uint8x8_t)vtst_s8(v49, v49));
    int32x4_t v44 = vaddq_s32(v44, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v50), v48));
    int32x4_t v45 = vaddq_s32(v45, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v50.i8), v48));
    v47 += 8;
  }
  while (v47);
  uint64_t v7 = vaddvq_s32(vaddq_s32(v45, v44));
  if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_55:
    unsigned int v51 = (unsigned __int8 *)(v23 + v24);
    uint64_t v52 = v3 - v24;
    do
    {
      if (*v51++) {
        uint64_t v7 = (v7 + 1);
      }
      else {
        uint64_t v7 = v7;
      }
      --v52;
    }
    while (v52);
  }
  return v7;
}

uint64_t sub_10002BD4C(uint64_t a1, unint64_t a2)
{
  if (*(_DWORD *)a1 == 3) {
    return sub_100031D44(*(void *)(a1 + 256), (a2 >> 35) & 0x3FFFF);
  }
  else {
    return 0;
  }
}

uint64_t sub_10002BD6C(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = a2;
  do
  {
    if (**(_DWORD **)a1 == 3) {
      uint64_t v2 = *(void *)(*(void *)a1 + 256);
    }
    a1 += 8;
    --v3;
  }
  while (v3);
  return v2;
}

uint64_t sub_10002BDB0(int a1, uint64_t a2, int a3)
{
  if (a1 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  if (a3 < 0)
  {
    while (1)
    {
      uint64_t v9 = *(void *)(a2 + 8 * v3);
      if (*(_DWORD *)v9 == 3)
      {
        uint64_t v10 = *(unsigned int *)(v9 + 268);
        if ((int)v10 < 1)
        {
          LODWORD(v8) = 0;
        }
        else
        {
          uint64_t v8 = 0;
          uint64_t v11 = *(void *)(v9 + 272);
          while (*(_DWORD *)(v11 + 4 * v8) != a3)
          {
            if (v10 == ++v8) {
              goto LABEL_17;
            }
          }
        }
        if (v8 != v10) {
          break;
        }
      }
LABEL_17:
      if (++v3 == a1) {
        return 0;
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t v5 = *(void *)(a2 + 8 * v3);
      if (*(_DWORD *)v5 == 3)
      {
        uint64_t v6 = *(unsigned int *)(v5 + 268);
        if ((int)v6 <= a3 || (LODWORD(v4) = a3, *(_DWORD *)(*(void *)(v5 + 272) + 4 * a3) != a3))
        {
          if ((int)v6 < 1)
          {
            LODWORD(v4) = 0;
          }
          else
          {
            uint64_t v4 = 0;
            uint64_t v7 = *(void *)(v5 + 272);
            while (*(_DWORD *)(v7 + 4 * v4) != a3)
            {
              if (v6 == ++v4) {
                goto LABEL_6;
              }
            }
          }
        }
        if (v4 != v6) {
          break;
        }
      }
LABEL_6:
      if (++v3 == a1) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t sub_10002BEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9)
{
  int v10 = a6;
  int v246 = a4;
  uint64_t v12 = a1;
  uint64_t v250 = 0;
  uint64_t v13 = *(unsigned int *)(a1 + 268);
  BOOL v15 = (int)a8 >= 0 && (int)v13 > (int)a8;
  if (v15 && *(_DWORD *)(*(void *)(a1 + 272) + 4 * a8) == a8)
  {
    if (v13 == a8) {
      LODWORD(v16) = -1;
    }
    else {
      LODWORD(v16) = a8;
    }
    if (a8 == v13) {
      LODWORD(v17) = -1;
    }
    else {
      LODWORD(v17) = a8;
    }
    uint64_t v249 = a1;
    if (!a8) {
      goto LABEL_16;
    }
LABEL_44:
    if ((int)v13 >= 1)
    {
      uint64_t v24 = 0;
      int v19 = 0;
      uint64_t v25 = *(int **)(a1 + 288);
      int v26 = *v25;
      do
      {
        int v27 = v25[++v24];
        uint64_t v28 = (v27 - v26);
        if (v27 - v26 > 0)
        {
          uint64_t v29 = (int *)(*(void *)(v12 + 304) + 4 * v26);
          while (1)
          {
            int v30 = *v29++;
            if (v30 == v17) {
              break;
            }
            if (!--v28) {
              goto LABEL_47;
            }
          }
          ++v19;
LABEL_47:
          uint64_t v12 = v249;
        }
        int v26 = v25[v24];
      }
      while (v24 != v13);
LABEL_75:
      if (!v15 || (LODWORD(i) = a8, *(_DWORD *)(*(void *)(v12 + 272) + 4 * a8) != a8))
      {
        if ((int)v13 < 1)
        {
          LODWORD(i) = 0;
        }
        else
        {
          for (uint64_t i = 0; i != v13; ++i)
          {
            if (*(_DWORD *)(*(void *)(v12 + 272) + 4 * i) == a8) {
              goto LABEL_83;
            }
          }
          LODWORD(i) = *(_DWORD *)(a1 + 268);
        }
      }
LABEL_83:
      if (i == v13) {
        int v61 = -1;
      }
      else {
        int v61 = i;
      }
      unsigned int v62 = (int *)(*(void *)(v12 + 288) + 4 * v61);
      int v63 = *v62;
      int v64 = v62[1];
      uint64_t v247 = (v64 - *v62);
      if (!v19 || v64 == v63 && !*(unsigned char *)(*(void *)(v12 + 296) + (int)v16)) {
        return v12;
      }
      int v239 = v16;
      unsigned int v248 = a8;
      int32x4_t v245 = (void *)sub_1000CD3E8(4 * v19, a2, a3, a4, a5, a6, a7, a8);
      sub_10002BA18(v12, v248, (uint64_t)v245);
      if (v64 == v63)
      {
        uint32x4_t v243 = 0;
        uint64_t v72 = v249;
        uint64_t v73 = *(unsigned int *)(v249 + 268);
        int v74 = v248;
        if ((v248 & 0x80000000) != 0)
        {
LABEL_95:
          if ((int)v73 < 1)
          {
            LODWORD(j) = 0;
          }
          else
          {
            for (uint64_t j = 0; j != v73; ++j)
            {
              if (*(_DWORD *)(*(void *)(v72 + 272) + 4 * j) == v74) {
                goto LABEL_101;
              }
            }
            LODWORD(j) = v73;
          }
LABEL_101:
          if (j == v73) {
            LODWORD(j) = -1;
          }
          if (v243)
          {
            int v76 = (int *)(*(void *)(v72 + 288) + 4 * (int)j);
            uint64_t v77 = *v76;
            uint64_t v78 = (v76[1] - v77);
            if ((int)v78 >= 1)
            {
              unsigned int v79 = (int *)(*(void *)(v72 + 304) + 4 * v77);
              __int16 v80 = v243;
              do
              {
                uint64_t v81 = *v79++;
                *v80++ = *(_DWORD *)(*(void *)(v72 + 272) + 4 * v81);
                --v78;
              }
              while (v78);
              LODWORD(v73) = *(_DWORD *)(v72 + 268);
            }
          }
          uint64_t v82 = v73;
          int v83 = *(_DWORD *)(a2 + 268) + v73;
          int v84 = v19 * v246 + v247 * v10 + *(_DWORD *)(v72 + 372) + *(_DWORD *)(a2 + 372);
          BOOL v86 = v74 >= 0 && (int)v73 > v74;
          if (v86 && *(_DWORD *)(*(void *)(v72 + 272) + 4 * v74) == v74)
          {
            if (v73 == v74) {
              LODWORD(v87) = -1;
            }
            else {
              LODWORD(v87) = v74;
            }
            LODWORD(v88) = v74;
            goto LABEL_147;
          }
          if ((int)v73 < 1)
          {
            if (v73) {
              LODWORD(v87) = 0;
            }
            else {
              LODWORD(v87) = -1;
            }
            if (v86) {
              goto LABEL_128;
            }
          }
          else
          {
            uint64_t v87 = 0;
            do
            {
              if (*(_DWORD *)(*(void *)(v72 + 272) + 4 * v87) == v74) {
                goto LABEL_125;
              }
              ++v87;
            }
            while (v82 != v87);
            LODWORD(v87) = v82;
LABEL_125:
            if (v87 == v82) {
              LODWORD(v87) = -1;
            }
            if (v86)
            {
LABEL_128:
              int v89 = *(_DWORD *)(*(void *)(v72 + 272) + 4 * v74);
              BOOL v90 = v89 == v74;
              if (v89 == v74) {
                LODWORD(v88) = v74;
              }
              else {
                LODWORD(v88) = 0;
              }
              if (v90 || (int)v82 < 1) {
                goto LABEL_147;
              }
              goto LABEL_142;
            }
          }
          if ((int)v82 < 1)
          {
            LODWORD(v88) = 0;
LABEL_147:
            if (v88 == v82) {
              int v92 = -1;
            }
            else {
              int v92 = v88;
            }
            uint64_t v93 = (int *)(*(void *)(v72 + 288) + 4 * (int)v87);
            uint64_t v94 = *v93;
            uint64_t v95 = (v93[1] - v94);
            int v241 = v10;
            if ((int)v95 < 1)
            {
LABEL_154:
              uint64_t v98 = v72;
              uint64_t v99 = sub_100027004(a9, a7, v83, v84, *(_DWORD *)(v72 + 336));
              if (!v99) {
                goto LABEL_183;
              }
            }
            else
            {
              uint64_t v96 = (int *)(*(void *)(v72 + 304) + 4 * v94);
              while (1)
              {
                int v97 = *v96++;
                if (v97 == v92) {
                  break;
                }
                if (!--v95) {
                  goto LABEL_154;
                }
              }
              uint64_t v98 = v72;
              uint64_t v99 = sub_100027004(a9, a7, v83, (v10 - 1) * v246 - v10 + v84, *(_DWORD *)(v72 + 336));
              if (!v99)
              {
LABEL_183:
                if (v243) {
                  sub_1000CD4D0(v243, 4 * (int)v247);
                }
                sub_1000CD4D0(v245, 4 * v19);
                return v249;
              }
            }
            uint64_t v12 = v99;
            uint64_t v238 = 4 * v19;
            bzero(*(void **)(a7 + 144), 4 * *(int *)(a7 + 152));
            int v240 = v19;
            if (*(int *)(v98 + 268) >= 1)
            {
              uint64_t v100 = v98;
              int v101 = 0;
              uint64_t v102 = 0;
              unsigned __int8 v103 = 0;
              unsigned int v104 = v248;
              while (1)
              {
                signed int v106 = *(_DWORD *)(*(void *)(v100 + 272) + 4 * v102);
                if (v106 == v104)
                {
                  uint64_t v105 = v102 + 1;
                }
                else
                {
                  uint64_t v107 = *(void *)(v100 + 288);
                  uint64_t v108 = *(int *)(v107 + 4 * v102);
                  uint64_t v105 = v102 + 1;
                  uint64_t v109 = (*(_DWORD *)(v107 + 4 * (v102 + 1)) - v108);
                  uint64_t v110 = *(void *)(v100 + 304);
                  sub_10002766C(v12, v106, (_DWORD *)&v250 + 1);
                  if ((int)v109 < 1)
                  {
                    uint64_t v100 = v249;
                    unsigned int v104 = v248;
                  }
                  else
                  {
                    int v111 = HIDWORD(v250);
                    uint64_t v100 = v249;
                    unsigned int v104 = v248;
                    do
                    {
                      signed int v112 = *(_DWORD *)(*(void *)(v100 + 272) + 4 * *(int *)(v110 + 4 * v108));
                      if (v112 != v104)
                      {
                        sub_10002766C(v12, v112, &v250);
                        if (*(_DWORD *)(v249 + 336)) {
                          unsigned __int8 v103 = *(unsigned char *)(*(void *)(v249 + 352) + v108);
                        }
                        int v101 = v250;
                        sub_100027AD4(v12, v111, v250, v103);
                        uint64_t v100 = v249;
                        unsigned int v104 = v248;
                      }
                      ++v108;
                      --v109;
                    }
                    while (v109);
                  }
                  if (!*(unsigned char *)(*(void *)(v100 + 296) + v102)) {
                    goto LABEL_158;
                  }
                  if (*(_DWORD *)(v100 + 336)) {
                    unsigned __int8 v103 = *(unsigned char *)(*(void *)(v100 + 360) + v102);
                  }
                  uint64_t v113 = SHIDWORD(v250);
                  if (sub_100025D50((unsigned int *)v12) == 3 && *(_DWORD *)(v12 + 376))
                  {
                    uint64_t v100 = v249;
                    unsigned int v104 = v248;
                    if (v113)
                    {
                      uint64_t v114 = *(void *)(v12 + 296);
                      if (*(unsigned char *)(v114 + v113))
                      {
                        if (!*(_DWORD *)(v12 + 336)) {
                          goto LABEL_158;
                        }
                        uint64_t v115 = *(void *)(v12 + 360);
                        if (*(unsigned __int8 *)(v115 + v113) != v103) {
                          goto LABEL_158;
                        }
                        goto LABEL_181;
                      }
                      *(unsigned char *)(v114 + v113) = 1;
                      if (*(_DWORD *)(v12 + 336))
                      {
                        uint64_t v115 = *(void *)(v12 + 360);
LABEL_181:
                        *(unsigned char *)(v115 + v113) = v103;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v100 = v249;
                    unsigned int v104 = v248;
                  }
                }
LABEL_158:
                uint64_t v102 = v105;
                if (v105 >= *(int *)(v100 + 268)) {
                  goto LABEL_187;
                }
              }
            }
            int v101 = 0;
LABEL_187:
            if (*(int *)(a2 + 268) > 1)
            {
              uint64_t v116 = 1;
              while (1)
              {
                signed int v117 = *(_DWORD *)(*(void *)(a2 + 272) + 4 * v116);
                uint64_t v118 = *(void *)(a2 + 288);
                uint64_t v119 = *(int *)(v118 + 4 * v116++);
                uint64_t v120 = (*(_DWORD *)(v118 + 4 * v116) - v119);
                uint64_t v121 = *(void *)(a2 + 304);
                sub_10002766C(v12, v117, (_DWORD *)&v250 + 1);
                if ((int)v120 >= 1) {
                  break;
                }
LABEL_189:
                if (v116 >= *(int *)(a2 + 268)) {
                  goto LABEL_211;
                }
              }
              uint64_t v122 = (int *)(v121 + 4 * v119);
              int v123 = HIDWORD(v250);
              while (1)
              {
                uint64_t v124 = *v122++;
                signed int v125 = *(_DWORD *)(*(void *)(a2 + 272) + 4 * v124);
                uint64_t v126 = *(void *)(v12 + 256);
                if (*(_DWORD *)(v126 + 152) <= v125)
                {
                  uint64_t v129 = *(int *)(v126 + 32) + 1;
                  uint64_t v130 = (void *)sub_1000C33A0(4 * v129);
                  j__memmove(v130, *(const void **)(v126 + 144), 4 * *(int *)(v126 + 152));
                  sub_1000C321C(*(void *)(v126 + 144));
                  *(void *)(v126 + 144) = v130;
                  *(_DWORD *)(v126 + 152) = v129;
                  uint64_t v127 = v125;
                  int v101 = *((_DWORD *)v130 + v125);
                  if (v125) {
                    BOOL v131 = v101 == 0;
                  }
                  else {
                    BOOL v131 = 0;
                  }
                  if (!v131) {
                    goto LABEL_193;
                  }
                }
                else
                {
                  uint64_t v127 = v125;
                  int v101 = *(_DWORD *)(*(void *)(v126 + 144) + 4 * v125);
                  if (v125) {
                    BOOL v128 = v101 == 0;
                  }
                  else {
                    BOOL v128 = 0;
                  }
                  if (!v128) {
                    goto LABEL_193;
                  }
                }
                int v132 = *(_DWORD *)(v12 + 268);
                if (v132 != *(_DWORD *)(v12 + 264)) {
                  goto LABEL_209;
                }
                if (sub_1000277C8(v12))
                {
                  int v132 = *(_DWORD *)(v12 + 268);
LABEL_209:
                  *(_DWORD *)(*(void *)(v12 + 272) + 4 * v132) = v125;
                  int v101 = *(_DWORD *)(v12 + 268);
                  *(_DWORD *)(*(void *)(v126 + 144) + 4 * v127) = v101;
                  int32x4_t v133 = (_DWORD *)(*(void *)(v12 + 288) + 4 * *(int *)(v12 + 268));
                  v133[1] = *v133;
                  ++*(_DWORD *)(v12 + 268);
                  sub_100031F40(v126, v125);
                  uint64_t v252 = 0;
                  int v251 = 0;
                  sub_100033B80(*(void *)(v12 + 256), v125, &v252, &v251);
                  if (v252) {
                    *(_DWORD *)(v12 + 340) = 1;
                  }
                  goto LABEL_193;
                }
                int v101 = 0;
LABEL_193:
                sub_100027AD4(v12, v123, v101, 0);
                if (!--v120) {
                  goto LABEL_189;
                }
              }
            }
LABEL_211:
            int v134 = v248;
            if (v240 >= 1)
            {
              uint64_t v135 = 0;
              unsigned __int8 v136 = 0;
              uint64_t v137 = v240;
              uint64_t v138 = v249;
              int v139 = v243;
              while (1)
              {
                uint64_t v140 = *((unsigned int *)v245 + v135);
                if (v140 != v134) {
                  break;
                }
LABEL_214:
                if (++v135 == v137) {
                  goto LABEL_266;
                }
              }
              if (!*(_DWORD *)(v138 + 336)) {
                goto LABEL_249;
              }
              uint64_t v141 = *(unsigned int *)(v138 + 268);
              if ((v140 & 0x80000000) != 0
                || (int)v141 <= (int)v140
                || (LODWORD(m) = *((_DWORD *)v245 + v135),
                    *(_DWORD *)(*(void *)(v138 + 272) + 4 * v140) != v140))
              {
                if ((int)v141 < 1)
                {
                  if (v141) {
                    LODWORD(m) = 0;
                  }
                  else {
                    LODWORD(m) = -1;
                  }
                  if (v134 < 0) {
                    goto LABEL_235;
                  }
LABEL_233:
                  if ((int)v141 > v134)
                  {
                    LODWORD(k) = v134;
                    if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * v248) == v134)
                    {
LABEL_241:
                      if (k == v141) {
                        int v144 = -1;
                      }
                      else {
                        int v144 = k;
                      }
                      uint64_t v145 = (int *)(*(void *)(v138 + 288) + 4 * (int)m);
                      uint64_t v146 = *v145;
                      uint64_t v147 = (v145[1] - v146);
                      if ((int)v147 >= 1)
                      {
                        uint64_t v148 = (int *)(*(void *)(v138 + 304) + 4 * v146);
                        while (1)
                        {
                          int v149 = *v148++;
                          if (v149 == v144) {
                            break;
                          }
                          LODWORD(v146) = v146 + 1;
                          if (!--v147) {
                            goto LABEL_248;
                          }
                        }
                        unsigned __int8 v136 = *(unsigned char *)(*(void *)(v138 + 352) + (int)v146);
                        sub_10002766C(v12, v140, (_DWORD *)&v250 + 1);
                        if (v246 < 1)
                        {
LABEL_264:
                          uint64_t v138 = v249;
                          int v134 = v248;
                          goto LABEL_214;
                        }
LABEL_250:
                        int v150 = HIDWORD(v250);
                        uint64_t v151 = v246;
                        unsigned int v152 = (signed int *)a3;
                        while (1)
                        {
                          signed int v154 = *v152++;
                          signed int v153 = v154;
                          uint64_t v155 = *(void *)(v12 + 256);
                          if (*(_DWORD *)(v155 + 152) <= v154)
                          {
                            uint64_t v157 = *(int *)(v155 + 32) + 1;
                            __int16 v158 = (void *)sub_1000C33A0(4 * v157);
                            j__memmove(v158, *(const void **)(v155 + 144), 4 * *(int *)(v155 + 152));
                            sub_1000C321C(*(void *)(v155 + 144));
                            *(void *)(v155 + 144) = v158;
                            *(_DWORD *)(v155 + 152) = v157;
                            uint64_t v156 = v153;
                            int v101 = *((_DWORD *)v158 + v153);
                            if (!v153) {
                              goto LABEL_252;
                            }
                          }
                          else
                          {
                            uint64_t v156 = v153;
                            int v101 = *(_DWORD *)(*(void *)(v155 + 144) + 4 * v153);
                            if (!v153) {
                              goto LABEL_252;
                            }
                          }
                          if (!v101)
                          {
                            int v159 = *(_DWORD *)(v12 + 268);
                            if (v159 != *(_DWORD *)(v12 + 264)) {
                              goto LABEL_261;
                            }
                            if (sub_1000277C8(v12))
                            {
                              int v159 = *(_DWORD *)(v12 + 268);
LABEL_261:
                              *(_DWORD *)(*(void *)(v12 + 272) + 4 * v159) = v153;
                              int v101 = *(_DWORD *)(v12 + 268);
                              *(_DWORD *)(*(void *)(v155 + 144) + 4 * v156) = v101;
                              uint64_t v160 = (_DWORD *)(*(void *)(v12 + 288) + 4 * *(int *)(v12 + 268));
                              v160[1] = *v160;
                              ++*(_DWORD *)(v12 + 268);
                              sub_100031F40(v155, v153);
                              uint64_t v252 = 0;
                              int v251 = 0;
                              sub_100033B80(*(void *)(v12 + 256), v153, &v252, &v251);
                              if (v252) {
                                *(_DWORD *)(v12 + 340) = 1;
                              }
                              goto LABEL_252;
                            }
                            int v101 = 0;
                          }
LABEL_252:
                          sub_100027AD4(v12, v150, v101, v136);
                          if (!--v151)
                          {
                            uint64_t v138 = v249;
                            int v134 = v248;
                            int v139 = v243;
                            uint64_t v137 = v240;
                            goto LABEL_214;
                          }
                        }
                      }
LABEL_248:
                      unsigned __int8 v136 = 0;
LABEL_249:
                      sub_10002766C(v12, v140, (_DWORD *)&v250 + 1);
                      if (v246 >= 1) {
                        goto LABEL_250;
                      }
                      goto LABEL_264;
                    }
                  }
LABEL_235:
                  if ((int)v141 < 1)
                  {
                    LODWORD(k) = 0;
                  }
                  else
                  {
                    for (uint64_t k = 0; k != v141; ++k)
                    {
                      if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * k) == v134) {
                        goto LABEL_241;
                      }
                    }
                    LODWORD(k) = *(_DWORD *)(v138 + 268);
                  }
                  goto LABEL_241;
                }
                for (uint64_t m = 0; m != v141; ++m)
                {
                  if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * m) == v140) {
                    goto LABEL_225;
                  }
                }
                LODWORD(m) = *(_DWORD *)(v138 + 268);
              }
LABEL_225:
              if (m == v141) {
                LODWORD(m) = -1;
              }
              if (v134 < 0) {
                goto LABEL_235;
              }
              goto LABEL_233;
            }
            unsigned __int8 v136 = 0;
            uint64_t v138 = v249;
            int v139 = v243;
LABEL_266:
            LODWORD(v250) = v101;
            int v161 = HIDWORD(v250);
            if ((int)v247 >= 1)
            {
              uint64_t v162 = 0;
              while (1)
              {
                uint64_t v163 = *((unsigned int *)v139 + v162);
                if (v163 != v134) {
                  break;
                }
LABEL_269:
                if (++v162 == v247) {
                  goto LABEL_320;
                }
              }
              if (!*(_DWORD *)(v138 + 336)) {
                goto LABEL_304;
              }
              uint64_t v164 = *(unsigned int *)(v138 + 268);
              if (v134 < 0
                || (int)v164 <= v134
                || (LODWORD(ii) = v134, *(_DWORD *)(*(void *)(v138 + 272) + 4 * v248) != v134))
              {
                if ((int)v164 < 1)
                {
                  if (v164) {
                    LODWORD(ii) = 0;
                  }
                  else {
                    LODWORD(ii) = -1;
                  }
                  if ((v163 & 0x80000000) != 0) {
                    goto LABEL_290;
                  }
LABEL_288:
                  if ((int)v164 > (int)v163)
                  {
                    LODWORD(n) = *((_DWORD *)v139 + v162);
                    if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * v163) == v163)
                    {
LABEL_296:
                      if (n == v164) {
                        int v167 = -1;
                      }
                      else {
                        int v167 = n;
                      }
                      int v168 = (int *)(*(void *)(v138 + 288) + 4 * (int)ii);
                      uint64_t v169 = *v168;
                      uint64_t v170 = (v168[1] - v169);
                      if ((int)v170 >= 1)
                      {
                        int v171 = (int *)(*(void *)(v138 + 304) + 4 * v169);
                        while (1)
                        {
                          int v172 = *v171++;
                          if (v172 == v167) {
                            break;
                          }
                          LODWORD(v169) = v169 + 1;
                          if (!--v170) {
                            goto LABEL_303;
                          }
                        }
                        unsigned __int8 v136 = *(unsigned char *)(*(void *)(v138 + 352) + (int)v169);
                        sub_10002766C(v12, v163, &v250);
                        if (v241 < 1)
                        {
LABEL_319:
                          uint64_t v138 = v249;
                          int v134 = v248;
                          goto LABEL_269;
                        }
LABEL_305:
                        int v173 = v250;
                        uint64_t v174 = v241;
                        double v175 = (signed int *)a5;
                        while (1)
                        {
                          signed int v177 = *v175++;
                          signed int v176 = v177;
                          uint64_t v178 = *(void *)(v12 + 256);
                          if (*(_DWORD *)(v178 + 152) <= v177)
                          {
                            uint64_t v180 = *(int *)(v178 + 32) + 1;
                            BOOL v181 = (void *)sub_1000C33A0(4 * v180);
                            j__memmove(v181, *(const void **)(v178 + 144), 4 * *(int *)(v178 + 152));
                            sub_1000C321C(*(void *)(v178 + 144));
                            *(void *)(v178 + 144) = v181;
                            *(_DWORD *)(v178 + 152) = v180;
                            uint64_t v179 = v176;
                            int v161 = *((_DWORD *)v181 + v176);
                            if (!v176) {
                              goto LABEL_307;
                            }
                          }
                          else
                          {
                            uint64_t v179 = v176;
                            int v161 = *(_DWORD *)(*(void *)(v178 + 144) + 4 * v176);
                            if (!v176) {
                              goto LABEL_307;
                            }
                          }
                          if (!v161)
                          {
                            int v182 = *(_DWORD *)(v12 + 268);
                            if (v182 != *(_DWORD *)(v12 + 264)) {
                              goto LABEL_316;
                            }
                            if (sub_1000277C8(v12))
                            {
                              int v182 = *(_DWORD *)(v12 + 268);
LABEL_316:
                              *(_DWORD *)(*(void *)(v12 + 272) + 4 * v182) = v176;
                              int v161 = *(_DWORD *)(v12 + 268);
                              *(_DWORD *)(*(void *)(v178 + 144) + 4 * v179) = v161;
                              int32x4_t v183 = (_DWORD *)(*(void *)(v12 + 288) + 4 * *(int *)(v12 + 268));
                              v183[1] = *v183;
                              ++*(_DWORD *)(v12 + 268);
                              sub_100031F40(v178, v176);
                              uint64_t v252 = 0;
                              int v251 = 0;
                              sub_100033B80(*(void *)(v12 + 256), v176, &v252, &v251);
                              if (v252) {
                                *(_DWORD *)(v12 + 340) = 1;
                              }
                              goto LABEL_307;
                            }
                            int v161 = 0;
                          }
LABEL_307:
                          sub_100027AD4(v12, v161, v173, v136);
                          if (!--v174)
                          {
                            uint64_t v138 = v249;
                            int v134 = v248;
                            int v139 = v243;
                            goto LABEL_269;
                          }
                        }
                      }
LABEL_303:
                      unsigned __int8 v136 = 0;
LABEL_304:
                      sub_10002766C(v12, v163, &v250);
                      if (v241 >= 1) {
                        goto LABEL_305;
                      }
                      goto LABEL_319;
                    }
                  }
LABEL_290:
                  if ((int)v164 < 1)
                  {
                    LODWORD(n) = 0;
                  }
                  else
                  {
                    for (uint64_t n = 0; n != v164; ++n)
                    {
                      if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * n) == v163) {
                        goto LABEL_296;
                      }
                    }
                    LODWORD(n) = *(_DWORD *)(v138 + 268);
                  }
                  goto LABEL_296;
                }
                for (iuint64_t i = 0; ii != v164; ++ii)
                {
                  if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * ii) == v134) {
                    goto LABEL_280;
                  }
                }
                LODWORD(ii) = *(_DWORD *)(v138 + 268);
              }
LABEL_280:
              if (ii == v164) {
                LODWORD(ii) = -1;
              }
              if ((v163 & 0x80000000) != 0) {
                goto LABEL_290;
              }
              goto LABEL_288;
            }
LABEL_320:
            HIDWORD(v250) = v161;
            if (!*(unsigned char *)(*(void *)(v138 + 296) + v239)) {
              goto LABEL_351;
            }
            if (*(_DWORD *)(v138 + 336))
            {
              uint64_t v184 = *(unsigned int *)(v138 + 268);
              if (v134 < 0
                || (int)v184 <= v134
                || (LODWORD(jj) = v134, *(_DWORD *)(*(void *)(v138 + 272) + 4 * v134) != v134))
              {
                if ((int)v184 < 1)
                {
                  LODWORD(jj) = 0;
                }
                else
                {
                  for (juint64_t j = 0; jj != v184; ++jj)
                  {
                    if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * jj) == v134) {
                      goto LABEL_331;
                    }
                  }
                  LODWORD(jj) = *(_DWORD *)(v138 + 268);
                }
              }
LABEL_331:
              if (jj == v184) {
                int v186 = -1;
              }
              else {
                int v186 = jj;
              }
              unsigned __int8 v136 = *(unsigned char *)(*(void *)(v138 + 360) + v186);
            }
            if (v241 < 1) {
              goto LABEL_351;
            }
            uint64_t v187 = v241;
            int16x8_t v188 = (signed int *)a5;
            while (1)
            {
              signed int v189 = *v188++;
              sub_10002766C(v12, v189, (_DWORD *)&v250 + 1);
              uint64_t v190 = SHIDWORD(v250);
              if (sub_100025D50((unsigned int *)v12) != 3) {
                goto LABEL_338;
              }
              if (!*(_DWORD *)(v12 + 376) || v190 == 0) {
                goto LABEL_338;
              }
              uint64_t v192 = *(void *)(v12 + 296);
              if (*(unsigned char *)(v192 + v190))
              {
                if (!*(_DWORD *)(v12 + 336)) {
                  goto LABEL_338;
                }
                uint64_t v193 = *(void *)(v12 + 360);
                if (*(unsigned __int8 *)(v193 + v190) != v136) {
                  goto LABEL_338;
                }
              }
              else
              {
                *(unsigned char *)(v192 + v190) = 1;
                if (!*(_DWORD *)(v12 + 336)) {
                  goto LABEL_338;
                }
                uint64_t v193 = *(void *)(v12 + 360);
              }
              *(unsigned char *)(v193 + v190) = v136;
LABEL_338:
              if (!--v187)
              {
                uint64_t v138 = v249;
                int v134 = v248;
LABEL_351:
                uint64_t v194 = *(unsigned int *)(v138 + 268);
                BOOL v196 = v134 >= 0 && (int)v194 > v134;
                if (v196 && *(_DWORD *)(*(void *)(v138 + 272) + 4 * v134) == v134)
                {
                  if (v194 == v134) {
                    int v197 = -1;
                  }
                  else {
                    int v197 = v134;
                  }
                  LODWORD(v198) = v134;
                  goto LABEL_391;
                }
                if ((int)v194 < 1)
                {
                  if (v194) {
                    int v197 = 0;
                  }
                  else {
                    int v197 = -1;
                  }
                  if (v196) {
                    goto LABEL_372;
                  }
                }
                else
                {
                  uint64_t v199 = 0;
                  while (*(_DWORD *)(*(void *)(v138 + 272) + 4 * v199) != v134)
                  {
                    if (v194 == ++v199)
                    {
                      LODWORD(v199) = *(_DWORD *)(v138 + 268);
                      break;
                    }
                  }
                  if (v199 == v194) {
                    int v197 = -1;
                  }
                  else {
                    int v197 = v199;
                  }
                  if (v196)
                  {
LABEL_372:
                    int v200 = *(_DWORD *)(*(void *)(v138 + 272) + 4 * v134);
                    BOOL v201 = v200 == v134;
                    if (v200 == v134) {
                      LODWORD(v198) = v134;
                    }
                    else {
                      LODWORD(v198) = 0;
                    }
                    if (!v201 && (int)v194 >= 1) {
                      goto LABEL_386;
                    }
                    goto LABEL_391;
                  }
                }
                if ((int)v194 < 1)
                {
                  LODWORD(v198) = 0;
                  goto LABEL_391;
                }
LABEL_386:
                uint64_t v198 = 0;
                while (*(_DWORD *)(*(void *)(v138 + 272) + 4 * v198) != v134)
                {
                  if (v194 == ++v198)
                  {
                    LODWORD(v198) = *(_DWORD *)(v138 + 268);
                    break;
                  }
                }
LABEL_391:
                if (v198 == v194) {
                  int v203 = -1;
                }
                else {
                  int v203 = v198;
                }
                uint64_t v204 = *(void *)(v138 + 288);
                int64x2_t v205 = (int *)(v204 + 4 * v197);
                int v206 = *v205;
                uint64_t v207 = (v205[1] - *v205);
                if ((int)v207 >= 1)
                {
                  uint64_t v208 = *(void *)(v138 + 304);
                  float64x2_t v209 = (int *)(v208 + 4 * v206);
                  while (1)
                  {
                    int v210 = *v209++;
                    if (v210 == v203) {
                      break;
                    }
                    if (!--v207) {
                      goto LABEL_456;
                    }
                  }
                  if (*(_DWORD *)(v138 + 336))
                  {
                    if (v196 && *(_DWORD *)(*(void *)(v138 + 272) + 4 * v134) == v134)
                    {
                      if (v194 == v134) {
                        LODWORD(v211) = -1;
                      }
                      else {
                        LODWORD(v211) = v134;
                      }
                    }
                    else
                    {
                      if ((int)v194 < 1)
                      {
                        LODWORD(v211) = 0;
                      }
                      else
                      {
                        uint64_t v211 = 0;
                        while (*(_DWORD *)(*(void *)(v138 + 272) + 4 * v211) != v134)
                        {
                          if (v194 == ++v211)
                          {
                            LODWORD(v211) = *(_DWORD *)(v138 + 268);
                            break;
                          }
                        }
                      }
                      if (v211 == v194) {
                        LODWORD(v211) = -1;
                      }
                      if (v196)
                      {
                        int v212 = *(_DWORD *)(*(void *)(v138 + 272) + 4 * v134);
                        BOOL v213 = v212 == v134;
                        if (v212 == v134) {
                          int v214 = v134;
                        }
                        else {
                          int v214 = 0;
                        }
                        if (v213 || (int)v194 < 1)
                        {
                          int v134 = v214;
                          goto LABEL_430;
                        }
                      }
                      else if ((int)v194 < 1)
                      {
                        int v134 = 0;
                        goto LABEL_430;
                      }
                      uint64_t v216 = 0;
                      while (*(_DWORD *)(*(void *)(v138 + 272) + 4 * v216) != v134)
                      {
                        if (v194 == ++v216)
                        {
                          int v134 = *(_DWORD *)(v138 + 268);
                          goto LABEL_430;
                        }
                      }
                      int v134 = v216;
                    }
LABEL_430:
                    if (v134 == v194) {
                      int v217 = -1;
                    }
                    else {
                      int v217 = v134;
                    }
                    float64x2_t v218 = (int *)(v204 + 4 * (int)v211);
                    uint64_t v219 = *v218;
                    uint64_t v220 = (v218[1] - v219);
                    if ((int)v220 < 1)
                    {
LABEL_437:
                      unsigned __int8 v136 = 0;
                    }
                    else
                    {
                      uint32x4_t v221 = (int *)(v208 + 4 * v219);
                      while (1)
                      {
                        int v222 = *v221++;
                        if (v222 == v217) {
                          break;
                        }
                        LODWORD(v219) = v219 + 1;
                        if (!--v220) {
                          goto LABEL_437;
                        }
                      }
                      unsigned __int8 v136 = *(unsigned char *)(*(void *)(v138 + 352) + (int)v219);
                    }
                  }
                  if (v241 >= 1)
                  {
                    uint64_t v223 = 0;
                    int v224 = v136;
                    while (1)
                    {
                      sub_10002766C(v12, *(_DWORD *)(a5 + 4 * v223), (_DWORD *)&v250 + 1);
                      if (v246 >= 1) {
                        break;
                      }
LABEL_441:
                      if (++v223 == v241) {
                        goto LABEL_456;
                      }
                    }
                    int v225 = HIDWORD(v250);
                    uint64_t v226 = v246;
                    uint16x4_t v227 = (signed int *)a3;
                    while (2)
                    {
                      signed int v230 = *v227++;
                      signed int v229 = v230;
                      uint64_t v231 = *(void *)(v12 + 256);
                      if (*(_DWORD *)(v231 + 152) <= v230)
                      {
                        uint64_t v233 = *(int *)(v231 + 32) + 1;
                        v234 = (void *)sub_1000C33A0(4 * v233);
                        j__memmove(v234, *(const void **)(v231 + 144), 4 * *(int *)(v231 + 152));
                        sub_1000C321C(*(void *)(v231 + 144));
                        *(void *)(v231 + 144) = v234;
                        *(_DWORD *)(v231 + 152) = v233;
                        uint64_t v232 = v229;
                        int v228 = *((_DWORD *)v234 + v229);
                        if (!v229) {
                          goto LABEL_445;
                        }
                      }
                      else
                      {
                        uint64_t v232 = v229;
                        int v228 = *(_DWORD *)(*(void *)(v231 + 144) + 4 * v229);
                        if (!v229) {
                          goto LABEL_445;
                        }
                      }
                      if (!v228)
                      {
                        int v235 = *(_DWORD *)(v12 + 268);
                        if (v235 == *(_DWORD *)(v12 + 264))
                        {
                          if (!sub_1000277C8(v12))
                          {
                            int v228 = 0;
                            goto LABEL_445;
                          }
                          int v235 = *(_DWORD *)(v12 + 268);
                        }
                        *(_DWORD *)(*(void *)(v12 + 272) + 4 * v235) = v229;
                        int v228 = *(_DWORD *)(v12 + 268);
                        *(_DWORD *)(*(void *)(v231 + 144) + 4 * v232) = v228;
                        int32x4_t v236 = (_DWORD *)(*(void *)(v12 + 288) + 4 * *(int *)(v12 + 268));
                        v236[1] = *v236;
                        ++*(_DWORD *)(v12 + 268);
                        sub_100031F40(v231, v229);
                        uint64_t v252 = 0;
                        int v251 = 0;
                        sub_100033B80(*(void *)(v12 + 256), v229, &v252, &v251);
                        if (v252) {
                          *(_DWORD *)(v12 + 340) = 1;
                        }
                      }
LABEL_445:
                      sub_100027AD4(v12, v225, v228, v224);
                      if (!--v226) {
                        goto LABEL_441;
                      }
                      continue;
                    }
                  }
                }
LABEL_456:
                if (v243) {
                  sub_1000CD4D0(v243, 4 * (int)v247);
                }
                sub_1000CD4D0(v245, v238);
                return v12;
              }
            }
          }
LABEL_142:
          uint64_t v88 = 0;
          do
          {
            if (*(_DWORD *)(*(void *)(v72 + 272) + 4 * v88) == v74) {
              goto LABEL_147;
            }
            ++v88;
          }
          while (v82 != v88);
          LODWORD(v88) = v82;
          goto LABEL_147;
        }
      }
      else
      {
        uint32x4_t v243 = (void *)sub_1000CD3E8(4 * (int)v247, v65, v66, v67, v68, v69, v70, v71);
        uint64_t v72 = v249;
        uint64_t v73 = *(unsigned int *)(v249 + 268);
        int v74 = v248;
        if ((v248 & 0x80000000) != 0) {
          goto LABEL_95;
        }
      }
      if ((int)v73 > v74)
      {
        LODWORD(j) = v74;
        if (*(_DWORD *)(*(void *)(v72 + 272) + 4 * v74) == v74) {
          goto LABEL_101;
        }
      }
      goto LABEL_95;
    }
    goto LABEL_54;
  }
  if ((int)v13 < 1)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    uint64_t v16 = 0;
    while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v16) != a8)
    {
      if (v13 == ++v16) {
        return v12;
      }
    }
  }
  if (v16 != v13)
  {
    if (v15)
    {
      int v21 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * a8);
      BOOL v22 = v21 == a8;
      if (v21 == a8) {
        LODWORD(v17) = a8;
      }
      else {
        LODWORD(v17) = 0;
      }
      if (v22 || (int)v13 < 1) {
        goto LABEL_41;
      }
    }
    else if ((int)v13 < 1)
    {
      if (v13) {
        LODWORD(v17) = 0;
      }
      else {
        LODWORD(v17) = -1;
      }
      uint64_t v249 = a1;
      if (a8) {
        goto LABEL_44;
      }
      goto LABEL_16;
    }
    uint64_t v17 = 0;
    do
    {
      if (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v17) == a8) {
        goto LABEL_41;
      }
      ++v17;
    }
    while (v13 != v17);
    LODWORD(v17) = *(_DWORD *)(a1 + 268);
LABEL_41:
    if (v17 == v13) {
      LODWORD(v17) = -1;
    }
    uint64_t v249 = a1;
    if (a8) {
      goto LABEL_44;
    }
LABEL_16:
    if ((int)v13 >= 2)
    {
      uint64_t v18 = *(void *)(a1 + 296);
      if (v13 < 9)
      {
        int v19 = 0;
        unint64_t v20 = 1;
        goto LABEL_71;
      }
      uint64_t v31 = v13 - 1;
      if (v13 >= 0x21)
      {
        int32x4_t v33 = 0uLL;
        unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFE0;
        v34.i64[0] = 0x100000001;
        v34.i64[1] = 0x100000001;
        int32x4_t v35 = (int8x16_t *)(v18 + 17);
        int32x4_t v36 = 0uLL;
        unint64_t v37 = v31 & 0xFFFFFFFFFFFFFFE0;
        int32x4_t v38 = 0uLL;
        int32x4_t v39 = 0uLL;
        int32x4_t v40 = 0uLL;
        int32x4_t v41 = 0uLL;
        int32x4_t v42 = 0uLL;
        int32x4_t v43 = 0uLL;
        do
        {
          uint8x16_t v44 = (uint8x16_t)vtstq_s8(v35[-1], v35[-1]);
          uint16x8_t v45 = vmovl_u8(*(uint8x8_t *)v44.i8);
          uint16x8_t v46 = vmovl_high_u8(v44);
          uint8x16_t v47 = (uint8x16_t)vtstq_s8(*v35, *v35);
          uint16x8_t v48 = vmovl_u8(*(uint8x8_t *)v47.i8);
          uint16x8_t v49 = vmovl_high_u8(v47);
          int32x4_t v39 = vaddq_s32(v39, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v46), v34));
          int32x4_t v38 = vaddq_s32(v38, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v46.i8), v34));
          int32x4_t v36 = vaddq_s32(v36, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v45), v34));
          int32x4_t v33 = vaddq_s32(v33, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v45.i8), v34));
          int32x4_t v43 = vaddq_s32(v43, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v49), v34));
          int32x4_t v42 = vaddq_s32(v42, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v49.i8), v34));
          int32x4_t v41 = vaddq_s32(v41, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v48), v34));
          int32x4_t v40 = vaddq_s32(v40, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v48.i8), v34));
          v35 += 2;
          v37 -= 32;
        }
        while (v37);
        int v19 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v40, v33), vaddq_s32(v42, v38)), vaddq_s32(vaddq_s32(v41, v36), vaddq_s32(v43, v39))));
        if (v31 == v32) {
          goto LABEL_75;
        }
        if ((v31 & 0x18) == 0)
        {
          unint64_t v20 = v32 | 1;
LABEL_71:
          uint64_t v57 = v13 - v20;
          uint64_t v58 = (unsigned __int8 *)(v18 + v20);
          do
          {
            if (*v58++) {
              ++v19;
            }
            --v57;
          }
          while (v57);
          goto LABEL_75;
        }
      }
      else
      {
        int v19 = 0;
        unint64_t v32 = 0;
      }
      unint64_t v20 = v31 & 0xFFFFFFFFFFFFFFF8 | 1;
      int32x4_t v50 = 0uLL;
      int32x4_t v51 = (int32x4_t)v19;
      uint64_t v52 = (int8x8_t *)(v32 + v18 + 1);
      unint64_t v53 = v32 - (v31 & 0xFFFFFFFFFFFFFFF8);
      v54.i64[0] = 0x100000001;
      v54.i64[1] = 0x100000001;
      do
      {
        int8x8_t v55 = *v52++;
        uint16x8_t v56 = vmovl_u8((uint8x8_t)vtst_s8(v55, v55));
        int32x4_t v50 = vaddq_s32(v50, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v56), v54));
        int32x4_t v51 = vaddq_s32(v51, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v56.i8), v54));
        v53 += 8;
      }
      while (v53);
      int v19 = vaddvq_s32(vaddq_s32(v51, v50));
      if (v31 == (v31 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_75;
      }
      goto LABEL_71;
    }
LABEL_54:
    int v19 = 0;
    goto LABEL_75;
  }
  return v12;
}

uint64_t sub_10002D33C(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

uint64_t sub_10002D34C(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unsigned int a5)
{
  *(void *)(a2 + 144) = sub_10003439C(*(void *)(a1 + 256));
  *(void *)(a2 + 152) = sub_1000343A8(*(void *)(a1 + 256));
  if (a3 == 65534)
  {
    *(_DWORD *)(a2 + 168) = 1;
    uint64_t v10 = a1;
    uint64_t v11 = a2;
    int v12 = 65534;
LABEL_5:
    uint64_t result = sub_10002E730(v10, v11, v12, a4, a5);
    *(void *)(a2 + 128) = 0;
    return result;
  }
  uint64_t v13 = (a4 >> 35) & 0x3FFFF;
  uint64_t v14 = sub_100031594(*(void *)(a1 + 256), (a4 >> 35) & 0x3FFFF);
  if ((unsigned __int16)(a4 & 0x3FF) < (int)(sub_100031294(v14, (a4 >> 10) & 0x1FFFFFF) - 1))
  {
    *(_DWORD *)(a2 + 168) = 1;
    uint64_t v10 = a1;
    uint64_t v11 = a2;
    int v12 = a3;
    goto LABEL_5;
  }
  uint64_t v16 = (a4 >> 53) & 0x3FF;
  uint64_t v17 = *(unsigned int *)(a1 + 268);
  if ((int)v17 <= (int)v13 || *(_DWORD *)(*(void *)(a1 + 272) + 4 * v13) != v13)
  {
    if ((int)v17 < 1)
    {
      LODWORD(v13) = 0;
    }
    else
    {
      uint64_t v18 = 0;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v18) != v13)
      {
        if (v17 == ++v18)
        {
          LODWORD(v13) = *(_DWORD *)(a1 + 268);
          goto LABEL_16;
        }
      }
      LODWORD(v13) = v18;
    }
  }
LABEL_16:
  if (v13 == v17) {
    LODWORD(v13) = -1;
  }
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(*(void *)(a1 + 288) + 4 * (int)v13 + 4)
                       - *(_DWORD *)(*(void *)(a1 + 288) + 4 * (int)v13);
  *(_WORD *)(a2 + 120) = a5;
  uint64_t v19 = sub_10003389C(*(void *)(a1 + 256));
  *(void *)a2 = sub_1000B5108(v19);
  *(_DWORD *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a2 + 8) = v16;
  *(_WORD *)(a2 + 28) = a3;
  int v20 = qword_100101CC0;
  if (qword_100101CC0) {
    int v20 = *(_DWORD *)(qword_100101CC0 + 1288);
  }
  *(_DWORD *)(a2 + 84) = v20;
  uint64_t result = sub_10002E614(a2, a1);
  if (!result)
  {
    *(void *)(a2 + 128) = &unk_1000F4934;
    *(_DWORD *)(a2 + 136) = 0;
  }
  return result;
}

uint64_t sub_10002D50C(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v6 = sub_10003389C(*(void *)(a2 + 256));
  uint64_t v7 = *(unsigned __int16 **)(a1 + 128);
  if (v7)
  {
    uint64_t v8 = v6;
    while (1)
    {
      int v9 = *(_DWORD *)(a1 + 136);
      if (v9 == v7[1])
      {
        uint64_t result = sub_10002E614(a1, a2);
        if (!result) {
          return result;
        }
        uint64_t v7 = *(unsigned __int16 **)(a1 + 128);
        int v9 = *(_DWORD *)(a1 + 136);
      }
      int v11 = v9 + *v7;
      *(_DWORD *)(a1 + 136) = v9 + 1;
      unsigned int v12 = *(unsigned __int16 *)(*(void *)(a1 + 144) + 2 * v11);
      *a3 = v12;
      if (!*(_DWORD *)(a1 + 84) || sub_1000BDE10(v8, *(unsigned __int16 *)(a1 + 28), v12))
      {
        int v13 = *(unsigned __int16 *)(a1 + 120);
        if (v13 == 0xFFFF || v13 == *a3) {
          break;
        }
      }
    }
    __int16 v14 = *(_WORD *)(*(void *)(a1 + 152) + 2 * v11);
    if (*(unsigned char *)(*(void *)(a2 + 296) + *(int *)(a1 + 56))) {
      BOOL v15 = v14 < 0;
    }
    else {
      BOOL v15 = 0;
    }
    int v16 = v15;
    *((_DWORD *)a3 + 4) = v16;
    *((void *)a3 + 1) = *(void *)(a1 + 96) + ((unint64_t)(v14 & 0x7FFF) << 10);
    a3[1] = *(_WORD *)(a1 + 88);
    *((void *)a3 + 3) = 0;
    return 1;
  }
  else
  {
    return sub_10002B1EC(a1, a2, a3);
  }
}

uint64_t sub_10002D658(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unsigned int a5)
{
  *(_DWORD *)(a2 + 168) = 1;
  return sub_10002E730(a1, a2, a3, a4, a5);
}

BOOL sub_10002D664(uint64_t a1)
{
  return *(_DWORD *)(a1 + 268) == 2 && *(_DWORD *)(a1 + 372) == 1;
}

uint64_t sub_10002D688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100033BFC(*(void *)(a1 + 256), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10002D690(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v10 = sub_10003389C(*(void *)(a1 + 256));
  uint64_t v11 = *(void *)(a1 + 400);
  if (*(_DWORD *)(a1 + 424) >= a3)
  {
    __int16 v14 = *(unsigned __int16 **)(a1 + 408);
    unsigned int v34 = 0;
    if (a3 < 1) {
      goto LABEL_10;
    }
LABEL_8:
    uint64_t v16 = a3;
    uint64_t v17 = (_WORD *)v11;
    uint64_t v18 = v14;
    do
    {
      unsigned int v19 = *(unsigned __int16 *)(a2 + 2 * (int)--v16);
      *v17++ = v19;
      *v18++ = sub_1000BD964(v10, v19, &v34);
    }
    while (v16);
LABEL_10:
    for (uint64_t i = 0; ; i += 8)
    {
      uint64_t v35 = 0;
      unsigned int v21 = *v14;
      if (!i) {
        break;
      }
      if (*i != v21) {
        return 0;
      }
LABEL_30:
      while (1)
      {
        uint64_t v29 = *(unsigned int *)(*(void *)(a1 + 272) + 4 * *((int *)i + 1));
        sub_1000339F8(*(void *)(a1 + 256), v29, *((unsigned int *)i + 2), (_DWORD *)&v35 + 1, v6, v7, v8, v9);
        int v30 = *((_DWORD *)i + 3);
        uint64_t v31 = (HIDWORD(v35) - v30);
        if (a3 >= (int)v31)
        {
          uint64_t v32 = 1;
          if ((int)v31 >= 2)
          {
            while (sub_100033A98(*(void *)(a1 + 256), v29, *((unsigned int *)i + 2), (v30 + v32), &v35, v7, v8, v9) == v14[v32])
            {
              if (v31 == ++v32) {
                goto LABEL_34;
              }
            }
          }
          if (v32 == v31) {
            break;
          }
        }
        int v28 = i[8];
        i += 8;
        if (v28 != *v14) {
          return 0;
        }
      }
LABEL_34:
      if (a3 == v31)
      {
        if (*(unsigned char *)(*(void *)(a1 + 296) + *((int *)i + 1))) {
          return 1;
        }
      }
      else if (sub_1000262E8(a1, (unsigned __int16 *)(v11 + 2 * (int)v31), a3 - (int)v31, *(unsigned __int16 *)(v11 + 2 * ((int)v31 - 1)), ((unint64_t)*(unsigned int *)(*(void *)(a1 + 272) + 4 * *((int *)i + 1)) << 35)+ (int)v31- 1+ *((_DWORD *)i + 3)+ ((uint64_t)*((int *)i + 2) << 10)))
      {
        return 1;
      }
    }
    int v22 = *(_DWORD *)(a1 + 392);
    if (v22 <= 0)
    {
      uint64_t i = *(unsigned __int16 **)(a1 + 384);
      if (*i == v21) {
        goto LABEL_30;
      }
    }
    else
    {
      int v23 = 0;
      int v24 = v22 - 1;
      uint64_t v25 = *(void *)(a1 + 384);
      do
      {
        int v26 = v24 + v23;
        if (v24 + v23 < 0 != __OFADD__(v24, v23)) {
          ++v26;
        }
        int v27 = v26 >> 1;
        if (*(unsigned __int16 *)(v25 + 16 * v27) < v21) {
          int v23 = v27 + 1;
        }
        else {
          int v24 = v27 - 1;
        }
      }
      while (v23 <= v24);
      uint64_t i = (unsigned __int16 *)(v25 + 16 * v23);
      if (*i == v21) {
        goto LABEL_30;
      }
    }
    return 0;
  }
  sub_1000C321C(*(void *)(a1 + 400));
  sub_1000C321C(*(void *)(a1 + 408));
  sub_1000C321C(*(void *)(a1 + 416));
  uint64_t result = sub_1000C33A0(2 * a3);
  if (!result) {
    return result;
  }
  uint64_t v11 = result;
  uint64_t v13 = sub_1000C33A0(2 * a3);
  if (v13)
  {
    __int16 v14 = (unsigned __int16 *)v13;
    uint64_t v15 = sub_1000C33A0(4 * a3);
    if (v15)
    {
      *(void *)(a1 + 400) = v11;
      *(void *)(a1 + 408) = v14;
      *(void *)(a1 + 416) = v15;
      *(_DWORD *)(a1 + 424) = a3;
      unsigned int v34 = 0;
      if (a3 < 1) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    sub_1000C321C(v11);
    uint64_t v33 = (uint64_t)v14;
  }
  else
  {
    uint64_t v33 = v11;
  }
  sub_1000C321C(v33);
  return 0;
}

uint64_t sub_10002D940(uint64_t a1, int a2, unsigned int *a3, const char **a4, _DWORD *a5, BOOL *a6)
{
  uint64_t v11 = sub_10003389C(*(void *)(a1 + 256));
  unint64_t v19 = sub_1000CD3E8(2 * a2, v12, v13, v14, v15, v16, v17, v18);
  int v20 = (unsigned __int16 *)v19;
  if (a2 >= 1)
  {
    uint64_t v21 = a2;
    int v22 = (int16x8_t *)v19;
    do
    {
      unsigned int v23 = *a3++;
      sub_1000B594C(v11, v23, v22, 1);
      int v22 = (int16x8_t *)((char *)v22 + 2);
      --v21;
    }
    while (v21);
  }
  uint64_t v24 = sub_10002EE7C((_DWORD *)a1, v20, a2, 65534, 0, a4, a5, a6);
  sub_1000CD4D0(v20, 2 * a2);
  return v24;
}

uint64_t sub_10002DA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = 0;
  uint64_t v25 = 0;
  int v24 = 0;
  if (*(int *)(a1 + 268) >= 2)
  {
    int v9 = 0;
    uint64_t v10 = 1;
    do
    {
      uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 272) + 4 * v10);
      sub_1000338A4(*(void *)(a1 + 256), v11, (_DWORD *)&v25 + 1, a4, a5, a6, a7, a8);
      if (SHIDWORD(v25) >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          sub_1000339F8(*(void *)(a1 + 256), v11, v12, &v25, a5, a6, a7, a8);
          v9 += v25;
          uint64_t v12 = (v12 + 1);
        }
        while ((int)v12 < SHIDWORD(v25));
      }
      ++v10;
    }
    while (v10 < *(int *)(a1 + 268));
  }
  uint64_t result = sub_1000C33A0(16 * (v9 + 1));
  if (result)
  {
    unint64_t v19 = (_DWORD *)result;
    *(void *)(a1 + 384) = result;
    *(_DWORD *)(a1 + 392) = v9;
    if (*(int *)(a1 + 268) >= 2)
    {
      uint64_t v20 = 1;
      do
      {
        uint64_t v21 = *(unsigned int *)(*(void *)(a1 + 272) + 4 * v20);
        sub_1000338A4(*(void *)(a1 + 256), v21, (_DWORD *)&v25 + 1, v14, v15, v16, v17, v18);
        if (SHIDWORD(v25) >= 1)
        {
          uint64_t v22 = 0;
          do
          {
            sub_1000339F8(*(void *)(a1 + 256), v21, v22, &v25, v15, v16, v17, v18);
            if ((int)v25 >= 1)
            {
              uint64_t v23 = 0;
              do
              {
                *(_WORD *)unint64_t v19 = sub_100033A98(*(void *)(a1 + 256), v21, v22, v23, &v24, v16, v17, v18);
                v19[1] = (unsigned __int16)v20;
                v19[2] = (unsigned __int16)v22;
                v19[3] = (unsigned __int16)v23;
                v19 += 4;
                uint64_t v23 = (v23 + 1);
              }
              while ((int)v23 < (int)v25);
            }
            uint64_t v22 = (v22 + 1);
          }
          while ((int)v22 < SHIDWORD(v25));
        }
        *(_WORD *)unint64_t v19 = -1;
        ++v20;
      }
      while (v20 < *(int *)(a1 + 268));
      unint64_t v19 = *(_DWORD **)(a1 + 384);
    }
    qsort(v19, v9, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_10002F400);
    return 1;
  }
  return result;
}

uint64_t sub_10002DC10(uint64_t a1)
{
  uint64_t result = sub_1000C321C(*(void *)(a1 + 384));
  *(void *)(a1 + 384) = 0;
  return result;
}

uint64_t sub_10002DC3C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a3;
  *(_DWORD *)(a1 + 312) = -1;
  *(void *)(a1 + 104) = sub_10002D658;
  *(void *)(a1 + 112) = sub_10002B1EC;
  LODWORD(v12) = *(_DWORD *)(a1 + 268);
  if ((int)v12 < 2)
  {
LABEL_9:
    *(_DWORD *)(a1 + 344) = v9;
    if (!v9) {
      goto LABEL_34;
    }
    if ((int)v12 < 2)
    {
      uint64_t v20 = 0;
      LODWORD(v19) = 1;
LABEL_23:
      if (v19 != v12) {
        goto LABEL_32;
      }
    }
    else
    {
      unsigned int v17 = *a2;
      if (*a2 == -1) {
        goto LABEL_25;
      }
      uint64_t v18 = *(void *)(a1 + 272);
      uint64_t v19 = 1;
LABEL_14:
      uint64_t v20 = a2;
      do
      {
        if (v17 == *(_DWORD *)(v18 + 4 * v19))
        {
          *(void *)(a1 + 104) = sub_10002D658;
          *(void *)(a1 + 112) = sub_10002B1EC;
          if (*v20 == -1) {
            break;
          }
          goto LABEL_23;
        }
        unsigned int v21 = v20[1];
        ++v20;
        unsigned int v17 = v21;
      }
      while (v21 != -1);
      while (++v19 != v12)
      {
        unsigned int v17 = *a2;
        uint64_t v20 = a2;
        if (*a2 != -1) {
          goto LABEL_14;
        }
      }
    }
    a2 = v20;
    if ((int)v12 < 2)
    {
      LODWORD(v19) = 1;
LABEL_32:
      if (v19 == v12)
      {
        *(void *)(a1 + 104) = sub_10002D34C;
        *(void *)(a1 + 112) = sub_10002D50C;
      }
      goto LABEL_34;
    }
LABEL_25:
    uint64_t v22 = 1;
    while (1)
    {
      unsigned int v23 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v22);
      if (!sub_100034724(*(void *)(a1 + 256), v23, a3, a4, a5, a6, a7, a8)) {
        break;
      }
      ++v22;
      uint64_t v12 = *(int *)(a1 + 268);
      if (v22 >= v12) {
        goto LABEL_31;
      }
    }
    *a2 = v23;
    a2[1] = -1;
    LODWORD(v12) = *(_DWORD *)(a1 + 268);
LABEL_31:
    LODWORD(v19) = v22;
    goto LABEL_32;
  }
  uint64_t v13 = 1;
  while (1)
  {
    uint64_t v14 = sub_100031594(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v13));
    if (sub_100030C54(v14)) {
      break;
    }
    ++v13;
    uint64_t v12 = *(int *)(a1 + 268);
    if (v13 >= v12)
    {
      if ((int)v12 < 2) {
        goto LABEL_9;
      }
      uint64_t v15 = 1;
      while (1)
      {
        uint64_t v16 = sub_100031594(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v15));
        if (sub_100030C5C(v16)) {
          goto LABEL_21;
        }
        ++v15;
        uint64_t v12 = *(int *)(a1 + 268);
        if (v15 >= v12) {
          goto LABEL_9;
        }
      }
    }
  }
LABEL_21:
  *(_DWORD *)(a1 + 344) = 0;
LABEL_34:
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1228) && *(int *)(a1 + 268) >= 2)
  {
    uint64_t v24 = 1;
    do
      sub_100032368(*(uint64_t **)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v24++));
    while (v24 < *(int *)(a1 + 268));
  }
  uint64_t result = sub_100033EC0(*(void *)(a1 + 256), a4, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v26 = qword_100101CC0;
    if (qword_100101CC0)
    {
      if (*(_DWORD *)(qword_100101CC0 + 4452))
      {
        if (*(int *)(a1 + 268) >= 2)
        {
          uint64_t v27 = 1;
          do
            sub_1000324D4(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v27++));
          while (v27 < *(int *)(a1 + 268));
          uint64_t v26 = qword_100101CC0;
          if (!qword_100101CC0) {
            return 1;
          }
        }
      }
      if (!*(_DWORD *)(v26 + 4544) || !*(_DWORD *)(a1 + 340) || !*(_DWORD *)(a1 + 376)) {
        return 1;
      }
      if (*(void *)(a1 + 320)
        || (uint64_t result = sub_1000C33A0(4 * *(void *)(v26 + 4136)), (*(void *)(a1 + 320) = result) != 0))
      {
        if (*(void *)(a1 + 328)
          || (uint64_t result = sub_1000C33A0((uint64_t)*(int *)(a1 + 264) << 6), (*(void *)(a1 + 328) = result) != 0))
        {
          LODWORD(v28) = *(_DWORD *)(a1 + 268);
          if ((int)v28 >= 2)
          {
            uint64_t v29 = 1;
            uint64_t v30 = 64;
            do
            {
              uint64_t v42 = 0;
              int v41 = 0;
              sub_100033B80(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v29), &v42, &v41);
              if (v42
                && sub_100033BBC(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v29))
                && !*(void *)(*(void *)(a1 + 328) + v30))
              {
                uint64_t v31 = qword_100101CC0;
                if (qword_100101CC0) {
                  uint64_t v31 = *(void *)(qword_100101CC0 + 4136);
                }
                *(void *)(*(void *)(a1 + 328) + v30) = sub_1000C33A0(2 * v31 + 2);
                uint64_t v32 = *(_WORD **)(*(void *)(a1 + 328) + v30);
                if (!v32) {
                  return 0;
                }
                _WORD *v32 = 0;
                *(_WORD *)(*(void *)(*(void *)(a1 + 328) + v30) + 2) = 0;
                *(_WORD *)(*(void *)(*(void *)(a1 + 328) + v30) + 4) = 0;
              }
              ++v29;
              uint64_t v28 = *(int *)(a1 + 268);
              v30 += 64;
            }
            while (v29 < v28);
          }
          if (qword_100101CC0)
          {
            if (*(_DWORD *)(qword_100101CC0 + 1076) && (int)v28 >= 2)
            {
              uint64_t v34 = 0;
              uint64_t v35 = 1;
              while (1)
              {
                uint64_t v37 = *(void *)(a1 + 328) + v34;
                if (*(void *)(v37 + 88))
                {
                  uint64_t v38 = qword_100101CC0;
                  if (qword_100101CC0) {
                    uint64_t v38 = *(void *)(qword_100101CC0 + 4136);
                  }
                  bzero(*(void **)(v37 + 96), 4 * v38);
                  uint64_t v36 = *(void *)(a1 + 328);
                }
                else
                {
                  uint64_t v39 = qword_100101CC0;
                  if (qword_100101CC0) {
                    uint64_t v39 = *(void *)(qword_100101CC0 + 4136);
                  }
                  *(void *)(*(void *)(a1 + 328) + v34 + 88) = sub_1000C33A0(8 * v39);
                  if (!*(void *)(*(void *)(a1 + 328) + v34 + 88)) {
                    return 0;
                  }
                  uint64_t v40 = qword_100101CC0;
                  if (qword_100101CC0) {
                    uint64_t v40 = *(void *)(qword_100101CC0 + 4136);
                  }
                  *(void *)(*(void *)(a1 + 328) + v34 + 96) = sub_1000C33A0(4 * v40);
                  uint64_t v36 = *(void *)(a1 + 328);
                  if (!*(void *)(v36 + v34 + 96)) {
                    return 0;
                  }
                }
                *(_DWORD *)(v36 + v34 + 120) = 0;
                ++v35;
                v34 += 64;
                uint64_t result = 1;
                if (v35 >= *(int *)(a1 + 268)) {
                  return result;
                }
              }
            }
          }
          return 1;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_10002E10C(uint64_t result)
{
  *(void *)(result + 104) = sub_10002D658;
  *(void *)(result + 112) = sub_10002B1EC;
  return result;
}

uint64_t sub_10002E130(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, int *a5, BOOL *a6)
{
  uint64_t result = sub_1000340F4(*(uint64_t **)(a1 + 256), a2, a3, a4, a5, a6);
  uint64_t v10 = *(unsigned int *)(a1 + 268);
  if ((a2 & 0x80000000) == 0 && (int)v10 > (int)a2 && *(_DWORD *)(*(void *)(a1 + 272) + 4 * a2) == a2)
  {
    if (a2 == v10) {
      int v11 = -1;
    }
    else {
      int v11 = a2;
    }
    if (*(unsigned char *)(*(void *)(a1 + 296) + v11)) {
      return result;
    }
    goto LABEL_24;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v12 = 0;
    while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v12) != a2)
    {
      if (v10 == ++v12)
      {
        if (*(unsigned char *)(*(void *)(a1 + 296) - 1)) {
          return result;
        }
        goto LABEL_24;
      }
    }
    if (v12 == v10) {
      int v14 = -1;
    }
    else {
      int v14 = v12;
    }
    if (*(unsigned char *)(*(void *)(a1 + 296) + v14)) {
      return result;
    }
    goto LABEL_24;
  }
  if (v10) {
    int v13 = 0;
  }
  else {
    int v13 = -1;
  }
  if (!*(unsigned char *)(*(void *)(a1 + 296) + v13)) {
LABEL_24:
  }
    *a6 = 0;
  return result;
}

uint64_t sub_10002E228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(int *)(a1 + 268) < 2) {
    return 0;
  }
  uint64_t v13 = 0;
  uint64_t v9 = 1;
  while (*(_DWORD *)(*(void *)(a1 + 288) + 4 * v9 + 4) - *(_DWORD *)(*(void *)(a1 + 288) + 4 * v9) <= 0)
  {
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 272) + 4 * v9);
    sub_1000338A4(*(void *)(a1 + 256), v10, (_DWORD *)&v13 + 1, a4, a5, a6, a7, a8);
    if (SHIDWORD(v13) >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        sub_1000339F8(*(void *)(a1 + 256), v10, v11, &v13, a5, a6, a7, a8);
        if ((int)v13 > 1) {
          return 1;
        }
        uint64_t v11 = (v11 + 1);
      }
      while ((int)v11 < SHIDWORD(v13));
    }
    if (++v9 >= *(int *)(a1 + 268)) {
      return 0;
    }
  }
  return 1;
}

int8x8_t *sub_10002E310(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  sub_1000BFDB0(a2, (void *)(a1 + 4), 0x40u, 1, a3);
  uint64_t result = (int8x8_t *)sub_1000BFD58(a2, *(_DWORD *)(a1 + 76), v5);
  if (result)
  {
    uint64_t result = (int8x8_t *)sub_1000BFD58(a2, *(_DWORD *)(a1 + 264), v7);
    if (result)
    {
      uint64_t result = (int8x8_t *)sub_1000BFD58(a2, *(_DWORD *)(a1 + 268), v8);
      if (result)
      {
        uint64_t result = (int8x8_t *)sub_1000BFD58(a2, *(_DWORD *)(a1 + 368), v9);
        if (result)
        {
          uint64_t result = (int8x8_t *)sub_1000BFD58(a2, *(_DWORD *)(a1 + 372), v10);
          if (result)
          {
            uint64_t result = (int8x8_t *)sub_1000BFD58(a2, *(_DWORD *)(a1 + 336), v11);
            if (result)
            {
              uint64_t result = (int8x8_t *)sub_1000BFD58(a2, *(_DWORD *)(a1 + 340), v12);
              if (result)
              {
                uint64_t result = (int8x8_t *)sub_1000BFD58(a2, *(_DWORD *)(a1 + 348), v13);
                if (result)
                {
                  uint64_t v15 = *(void *)(a1 + 280);
                  uint64_t result = (int8x8_t *)sub_1000BFD58(a2, v15 != 0, v14);
                  if (result)
                  {
                    unsigned int v17 = *(void **)(a1 + 272);
                    unsigned int v18 = v17 ? *(_DWORD *)(a1 + 264) : 0;
                    uint64_t result = sub_1000BFDB0(a2, v17, v18, 4, v16);
                    if (result)
                    {
                      uint64_t v20 = *(void **)(a1 + 288);
                      unsigned int v21 = v20 ? *(_DWORD *)(a1 + 264) + 1 : 0;
                      uint64_t result = sub_1000BFDB0(a2, v20, v21, 4, v19);
                      if (result)
                      {
                        unsigned int v23 = *(void **)(a1 + 296);
                        unsigned int v24 = v23 ? *(_DWORD *)(a1 + 264) : 0;
                        uint64_t result = sub_1000BFDB0(a2, v23, v24, 1, v22);
                        if (result)
                        {
                          uint64_t v26 = *(void **)(a1 + 304);
                          unsigned int v27 = v26 ? *(_DWORD *)(a1 + 368) : 0;
                          uint64_t result = sub_1000BFDB0(a2, v26, v27, 4, v25);
                          if (result)
                          {
                            uint64_t v29 = *(void **)(a1 + 352);
                            if (!v29
                              || (uint64_t result = sub_1000BFDB0(a2, v29, *(_DWORD *)(a1 + 368), 1, v28), result)
                              && ((uint64_t v31 = *(void **)(a1 + 360)) == 0 ? (v32 = 0) : (v32 = *(_DWORD *)(a1 + 264)),
                                  uint64_t result = sub_1000BFDB0(a2, v31, v32, 1, v30),
                                  result))
                            {
                              if (!v15) {
                                return (int8x8_t *)1;
                              }
                              uint64_t v33 = *(void **)(a1 + 280);
                              unsigned int v34 = v33 ? *(_DWORD *)(a1 + 264) : 0;
                              uint64_t result = sub_1000BFDB0(a2, v33, v34, 4, v28);
                              if (result) {
                                return (int8x8_t *)1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10002E4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1000315AC(*(void *)(a1 + 256), a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    int v10 = *(_DWORD *)(a1 + 268);
    if (v10 <= 0x40000)
    {
      if (v10 < 2)
      {
        return 1;
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v11 = 1;
        while (1)
        {
          uint64_t v12 = *(void *)(a1 + 272);
          uint64_t v13 = *(unsigned int *)(v12 + 4 * v11);
          if (!sub_100033778(*(void *)(a1 + 256), *(_DWORD *)(v12 + 4 * v11)))
          {
            sub_1000338A4(*(void *)(a1 + 256), v13, (_DWORD *)&v24 + 1, v14, v15, v16, v17, v18);
            if (SHIDWORD(v24) > 0x2000000) {
              return 0;
            }
            if (SHIDWORD(v24) >= 1) {
              break;
            }
          }
LABEL_7:
          ++v11;
          uint64_t result = 1;
          if (v11 >= *(int *)(a1 + 268)) {
            return result;
          }
        }
        uint64_t v23 = 0;
        while (1)
        {
          sub_1000339F8(*(void *)(a1 + 256), v13, v23, &v24, v19, v20, v21, v22);
          if ((int)v24 > 1024) {
            return 0;
          }
          uint64_t v23 = (v23 + 1);
          if ((int)v23 >= SHIDWORD(v24)) {
            goto LABEL_7;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10002E614(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 60);
  if (v2 == *(_DWORD *)(a1 + 64)) {
    return 0;
  }
  for (uint64_t i = v2 + *(_DWORD *)(*(void *)(a2 + 288) + 4 * *(int *)(a1 + 32)); ; ++i)
  {
    *(_DWORD *)(a1 + 60) = v2 + 1;
    uint64_t v7 = *(int *)(*(void *)(a2 + 304) + 4 * i);
    *(_DWORD *)(a1 + 56) = v7;
    uint64_t v8 = *(void *)(a2 + 272);
    uint64_t v9 = *(unsigned int *)(v8 + 4 * v7);
    uint64_t v15 = (_WORD *)sub_1000343B4(*(void *)(a2 + 256), *(_DWORD *)(v8 + 4 * v7));
    if (!*v15) {
      sub_1000343C4(*(void *)(a2 + 256), *(void *)a1, v9, v10, v11, v12, v13, v14);
    }
    if (v15[1]) {
      break;
    }
    int v2 = *(_DWORD *)(a1 + 60);
    if (v2 == *(_DWORD *)(a1 + 64)) {
      return 0;
    }
  }
  uint64_t v16 = *(unsigned int *)(*(void *)(a2 + 272) + 4 * v7);
  *(_DWORD *)(a1 + 44) = v16;
  int v17 = *(_DWORD *)(a2 + 336);
  if (v17) {
    LOWORD(v17) = *(unsigned __int8 *)(*(void *)(a2 + 352) + i);
  }
  *(_WORD *)(a1 + 88) = v17;
  *(void *)(a1 + 96) = ((unint64_t)*(unsigned int *)(a1 + 8) << 53) + (v16 << 35);
  *(void *)(a1 + 128) = v15;
  *(_DWORD *)(a1 + 136) = 0;
  return 1;
}

uint64_t sub_10002E730(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unsigned int a5)
{
  uint64_t v48 = sub_10003389C(*(void *)(a1 + 256));
  uint64_t result = sub_1000B5108(v48);
  uint64_t v11 = result;
  int v12 = qword_100101CC0;
  if (qword_100101CC0) {
    int v12 = *(_DWORD *)(qword_100101CC0 + 1288);
  }
  int v50 = 0;
  unsigned __int16 v49 = 0;
  *(void *)(a2 + 176) = 0;
  uint64_t v13 = (uint64_t *)(a2 + 176);
  *(_DWORD *)(a2 + 84) = v12;
  *(_WORD *)(a2 + 120) = a5;
  *(void *)(a2 + 192) = 0;
  *(_WORD *)(a2 + 28) = a3;
  if (a3 == 65534)
  {
    LODWORD(v14) = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    int v17 = 1;
    int v50 = 1;
    *(void *)(a2 + 36) = -1;
    *(void *)(a2 + 16) = a4;
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v18 = *(unsigned int *)(a1 + 268);
    if ((int)v18 <= 0) {
      goto LABEL_13;
    }
LABEL_12:
    LODWORD(v19) = v16;
    if (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v16) == v16) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  int v15 = a4 & 0x3FF;
  uint64_t v14 = (a4 >> 10) & 0x1FFFFFF;
  uint64_t v16 = (a4 >> 35) & 0x3FFFF;
  uint64_t result = sub_100031594(*(void *)(a1 + 256), (a4 >> 35) & 0x3FFFF);
  *(void *)(a2 + 48) = result;
  if (*(_DWORD *)(a1 + 340)) {
    uint64_t result = sub_100033B80(*(void *)(a1 + 256), (a4 >> 35) & 0x3FFFF, (void *)(a2 + 176), (_DWORD *)(a2 + 184));
  }
  if (*(void *)(a2 + 16) == a4)
  {
    int v17 = *(_DWORD *)(a2 + 204);
    int v50 = v17;
    *(_DWORD *)(a2 + 40) = v14;
    uint64_t v18 = *(unsigned int *)(a1 + 268);
    if ((int)v18 <= (int)v16) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 36) = v15;
  uint64_t result = sub_100031390(*(void *)(a2 + 48), (a4 >> 10) & 0x1FFFFFF, a4 & 0x3FF, &v50);
  *(_WORD *)(a2 + 172) = result;
  *(void *)(a2 + 16) = a4;
  *(_DWORD *)(a2 + 24) = v16;
  int v17 = v50;
  *(_DWORD *)(a2 + 204) = v50;
  *(_DWORD *)(a2 + 40) = v14;
  uint64_t v18 = *(unsigned int *)(a1 + 268);
  if ((int)v18 > (int)v16) {
    goto LABEL_12;
  }
LABEL_13:
  if ((int)v18 < 1)
  {
    if (v18) {
      int v20 = 0;
    }
    else {
      int v20 = -1;
    }
    *(void *)(a2 + 160) = 0;
    if (v15 < v17 - 1) {
      goto LABEL_22;
    }
    goto LABEL_34;
  }
  uint64_t v19 = 0;
  while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v19) != v16)
  {
    if (v18 == ++v19)
    {
      LODWORD(v19) = v18;
      break;
    }
  }
LABEL_18:
  if (v19 == v18) {
    int v20 = -1;
  }
  else {
    int v20 = v19;
  }
  *(void *)(a2 + 160) = 0;
  if (v15 < v17 - 1)
  {
LABEL_22:
    *(_DWORD *)(a2 + 72) = sub_100030C4C(*(void *)(a2 + 48));
    *(_DWORD *)(a2 + 44) = v16;
    *(_DWORD *)(a2 + 56) = v20;
    *(_DWORD *)(a2 + 116) = 1;
    *(_WORD *)(a2 + 88) = 0;
    BOOL v21 = v15 == v50 - 2 && *(unsigned char *)(*(void *)(a1 + 296) + v20);
    *(_DWORD *)(a2 + 80) = v21;
    uint64_t result = sub_100031390(*(void *)(a2 + 48), v14, v15 + 1, &v50);
    *(_WORD *)(a2 + 76) = result;
    *(void *)(a2 + 96) = (a4 & 0x7FE0000000000000 | ((unint64_t)v14 << 10))
                         + (v15 + 1)
                         + (v16 << 35);
    if (*(_DWORD *)(a1 + 340)) {
      uint64_t result = sub_100033B80(*(void *)(a1 + 256), *(_DWORD *)(a2 + 44), (void *)(a2 + 192), (_DWORD *)(a2 + 200));
    }
    *(_DWORD *)(a2 + 112) = 0;
    if (*(void *)(a2 + 160)) {
      goto LABEL_29;
    }
    goto LABEL_80;
  }
LABEL_34:
  *(_DWORD *)(a2 + 116) = 0;
  int v22 = *(_DWORD *)(*(void *)(a1 + 288) + 4 * v20 + 4) - *(_DWORD *)(*(void *)(a1 + 288) + 4 * v20);
  *(_DWORD *)(a2 + 64) = v22;
  uint64_t v46 = v11;
  uint64_t v47 = a4;
  int v45 = v20;
  if (v22 < 1)
  {
    int v23 = 0;
    LODWORD(v14) = 0;
    goto LABEL_79;
  }
  if (a5 == 0xFFFF)
  {
    int v23 = 0;
    while (1)
    {
      int v31 = v23 + *(_DWORD *)(*(void *)(a1 + 288) + 4 * v20);
      uint64_t v28 = *(int *)(*(void *)(a1 + 304) + 4 * v31);
      *(_DWORD *)(a2 + 56) = v28;
      unsigned int v32 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v28);
      *(_DWORD *)(a2 + 44) = v32;
      uint64_t v33 = sub_100031594(*(void *)(a1 + 256), v32);
      *(void *)(a2 + 48) = v33;
      uint64_t result = sub_100030C4C(v33);
      *(_DWORD *)(a2 + 72) = result;
      if (result) {
        break;
      }
      if (++v23 >= *(_DWORD *)(a2 + 64))
      {
        LODWORD(v14) = 0;
        goto LABEL_79;
      }
    }
    *(_WORD *)(a2 + 88) = 0;
    if (*(_DWORD *)(a1 + 336))
    {
      __int16 v24 = *(unsigned __int8 *)(*(void *)(a1 + 352) + v31);
      *(_WORD *)(a2 + 88) = v24;
    }
    else
    {
      __int16 v24 = 0;
    }
    uint64_t v34 = v47;
    LODWORD(v14) = 0;
    *(_WORD *)(a2 + 76) = sub_100031390(*(void *)(a2 + 48), 0, 0, &v50);
    uint64_t v35 = (unsigned __int16 *)(a2 + 76);
    uint64_t v36 = qword_100101CC0;
    if (!qword_100101CC0)
    {
LABEL_57:
      int v40 = v50;
      uint64_t v38 = (uint64_t *)(a2 + 192);
      *(_DWORD *)(a2 + 112) = 1;
      if (v40 == 1) {
        goto LABEL_58;
      }
      goto LABEL_56;
    }
  }
  else
  {
    int v23 = 0;
    LODWORD(v14) = 0;
    while (1)
    {
      int v27 = v23 + *(_DWORD *)(*(void *)(a1 + 288) + 4 * v20);
      uint64_t v28 = *(int *)(*(void *)(a1 + 304) + 4 * v27);
      *(_DWORD *)(a2 + 56) = v28;
      unsigned int v29 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v28);
      *(_DWORD *)(a2 + 44) = v29;
      uint64_t v30 = sub_100031594(*(void *)(a1 + 256), v29);
      *(void *)(a2 + 48) = v30;
      uint64_t result = sub_100030C4C(v30);
      *(_DWORD *)(a2 + 72) = result;
      if (result)
      {
        *(_WORD *)(a2 + 88) = 0;
        if (*(_DWORD *)(a1 + 336))
        {
          __int16 v24 = *(unsigned __int8 *)(*(void *)(a1 + 352) + v27);
          *(_WORD *)(a2 + 88) = v24;
        }
        else
        {
          __int16 v24 = 0;
        }
        unsigned int v25 = sub_1000BD964(v48, a5, 0);
        __int16 v26 = v25;
        uint64_t result = sub_1000310FC(*(void *)(a2 + 48), v25, &v50);
        LODWORD(v14) = 0xFFFF;
        if (result != 0xFFFF) {
          break;
        }
      }
      if (++v23 >= *(_DWORD *)(a2 + 64)) {
        goto LABEL_79;
      }
    }
    LODWORD(v14) = result;
    uint64_t v34 = v47;
    *(_WORD *)(a2 + 76) = v26;
    uint64_t v35 = (unsigned __int16 *)(a2 + 76);
    uint64_t v36 = qword_100101CC0;
    if (!qword_100101CC0) {
      goto LABEL_57;
    }
  }
  if (!*(_DWORD *)(v36 + 1172)) {
    goto LABEL_57;
  }
  int v37 = v50;
  uint64_t v38 = (uint64_t *)(a2 + 192);
  *(_DWORD *)(a2 + 112) = v50 == 1;
  if (v37 == 1)
  {
LABEL_58:
    BOOL v39 = *(unsigned char *)(*(void *)(a1 + 296) + v28) != 0;
    goto LABEL_59;
  }
LABEL_56:
  BOOL v39 = 0;
LABEL_59:
  *(_DWORD *)(a2 + 80) = v39;
  uint64_t v41 = *(unsigned int *)(a2 + 44);
  *(void *)(a2 + 96) = (v34 & 0x7FE0000000000000) + ((uint64_t)(int)v14 << 10) + (v41 << 35);
  *(void *)(a2 + 160) = 0;
  uint64_t result = sub_100033B80(*(void *)(a1 + 256), v41, v38, (_DWORD *)(a2 + 200));
  if (*(_DWORD *)(a2 + 168))
  {
    uint64_t result = sub_100033BBC(*(void *)(a1 + 256), *(_DWORD *)(a2 + 44));
    *(void *)(a2 + 160) = result;
    if (result)
    {
      *(_DWORD *)(a2 + 80) = *(char *)(*(void *)(a1 + 296) + v28);
      *(_DWORD *)(a2 + 60) = v23;
      *(_WORD *)(a2 + 88) = v24;
      if (qword_100101CC0)
      {
        if (*(_DWORD *)(qword_100101CC0 + 4544) && *(_DWORD *)(a1 + 340) && *v38) {
          uint64_t result = sub_10002ED94(a1, a2);
        }
      }
    }
  }
  unsigned __int16 v49 = 0x7FFF;
  if (*(_DWORD *)(a1 + 340) && !*(void *)(a2 + 160))
  {
    uint64_t v42 = *v38;
    if (*v38)
    {
      int v43 = *(_DWORD *)(a2 + 200);
      if (*(_DWORD *)(a2 + 24) == *(_DWORD *)(a2 + 44)) {
        sub_10005F970(v42, v43, *(unsigned __int16 *)(a2 + 172), 1, v35, &v49);
      }
      else {
        sub_10005FB50(v42, v43, 1, v35, &v49);
      }
    }
    else if (*v13)
    {
      uint64_t result = sub_10005FB88(*v13, *(_DWORD *)(a2 + 184), *(unsigned __int16 *)(a2 + 172));
      unsigned __int16 v49 = result;
      goto LABEL_75;
    }
    uint64_t result = v49;
LABEL_75:
    if ((unsigned __int16)result != 0x7FFF)
    {
      LOWORD(v44) = qword_100101CC0;
      if (qword_100101CC0) {
        uint64_t v44 = *(void *)(qword_100101CC0 + 4168);
      }
      *(_WORD *)(a2 + 88) = *(_WORD *)(a2 + 88) + result - v44;
    }
  }
LABEL_79:
  *(_DWORD *)(a2 + 60) = v23;
  uint64_t v11 = v46;
  a4 = v47;
  int v20 = v45;
  if (*(void *)(a2 + 160))
  {
LABEL_29:
    *(_DWORD *)(a2 + 104) = 1;
    goto LABEL_83;
  }
LABEL_80:
  if (*(_DWORD *)(a2 + 116) || *(_DWORD *)(a2 + 60) < *(_DWORD *)(a2 + 64))
  {
    uint64_t result = sub_10001FD90(v11, *(unsigned __int16 *)(a2 + 76));
    *(_DWORD *)(a2 + 104) = result;
  }
  else
  {
    *(_DWORD *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 72) = 0;
  }
LABEL_83:
  *(_DWORD *)(a2 + 32) = v20;
  *(void *)a2 = v11;
  *(_DWORD *)(a2 + 8) = (a4 >> 53) & 0x3FF;
  *(_DWORD *)(a2 + 68) = v14;
  *(_DWORD *)(a2 + 108) = 0;
  *(_WORD *)(a2 + 90) = *(_WORD *)(a2 + 88);
  return result;
}

uint64_t sub_10002ED94(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 340))
  {
    if (*(void *)(a2 + 192))
    {
      uint64_t v3 = result;
      uint64_t v4 = *(void *)(result + 328) + ((uint64_t)*(int *)(a2 + 56) << 6);
      uint8x8_t v5 = (void *)(v4 + 8);
      uint64_t v6 = *(void *)v4;
      unint64_t v7 = *(unsigned __int16 *)(*(void *)v4 + 2 * *(int *)(result + 312) + 2);
      uint64_t result = sub_1000C3A90((const void **)(v4 + 8), (int *)(v4 + 16), (signed int *)(v4 + 20), 10, 12, (int)v7 + 1);
      if (result)
      {
        uint64_t v8 = *(void *)(*v5 + ((v7 >> 7) & 0x1F8));
        if (*(void *)(a2 + 176) == *(void *)(a2 + 192)) {
          __int16 v9 = *(_WORD *)(a2 + 28);
        }
        else {
          __int16 v9 = -2;
        }
        *(_WORD *)(v8 + 12 * (v7 & 0x3FF)) = v9;
        uint64_t v10 = v8 + 12 * (v7 & 0x3FF);
        *(_DWORD *)(v10 + 4) = *(_DWORD *)(a2 + 208);
        *(_WORD *)(v10 + 8) = *(_WORD *)(a2 + 212);
        uint64_t v11 = v6 + 2 * *(int *)(v3 + 312);
        ++*(_WORD *)(v11 + 2);
      }
    }
  }
  return result;
}

uint64_t sub_10002EE7C(_DWORD *a1, unsigned __int16 *a2, int a3, int a4, unint64_t a5, const char **a6, _DWORD *a7, BOOL *a8)
{
  uint64_t v72 = *((void *)a1 + 32);
  uint64_t v73 = a1;
  uint64_t v16 = a1;
  if (a1[87])
  {
    uint64_t v16 = (_DWORD *)sub_100027F64(a1);
    uint64_t v73 = v16;
    if (!v16) {
      return 0;
    }
  }
  uint64_t v90 = 0;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v77 = 0u;
  if (!sub_10002609C((uint64_t)&v73, 1, 0, 0, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8)) {
    return 0;
  }
  uint64_t v70 = a6;
  uint64_t v71 = a7;
  *a7 = 0x40000000;
  if (*v73 == 3)
  {
    *(void *)&long long v78 = 0x7FFFFFFFFFFFFFFFLL;
    WORD2(v90) = 0x4000;
  }
  long long v75 = 0u;
  long long v76 = 0u;
  unsigned int v17 = *a2;
  DWORD2(v87) = 0;
  sub_10002E730((uint64_t)v73, (uint64_t)&v77, a4, a5, v17);
  uint64_t v25 = (a3 - 1);
  if (a3 != 1)
  {
    uint64_t v69 = 8 * (int)v25;
    uint64_t v44 = (void *)sub_1000CD3E8(v69, v18, v19, v20, v21, v22, v23, v24);
    uint64_t v26 = 0;
    if (sub_10002B1EC((uint64_t)&v77, (uint64_t)v73, (unsigned __int16 *)&v75))
    {
      int v74 = 0;
      if (a8) {
        int v45 = a8 + 1;
      }
      else {
        int v45 = 0;
      }
      uint64_t v46 = a2 + 1;
      __dst = a6 + 1;
      do
      {
        unint64_t v49 = *((void *)&v75 + 1);
        if (sub_10002EE7C(v73, v46, v25, (unsigned __int16)v75, *((void *)&v75 + 1), v44, &v74, v45))
        {
          if (a8) {
            *a8 = (v49 & 0x3FF) == 0;
          }
          if (!*((void *)v16 + 44) && !v16[85])
          {
            uint64_t v61 = (v49 >> 35) & 0x3FFFF;
            unsigned int v62 = (char *)sub_100031CE0(v72, (v49 >> 35) & 0x3FFFF);
            int v63 = v62;
            if (v73 == a1)
            {
              uint64_t v65 = v70;
              int v64 = v71;
            }
            else
            {
              uint64_t v65 = v70;
              int v64 = v71;
              if (sub_100034A6C(v62))
              {
                unsigned int v66 = sub_100027A20((uint64_t)a1, v61);
                int v63 = sub_100031CE0(v72, v66);
              }
            }
            *uint64_t v65 = v63;
            *int v64 = 0;
            memcpy(__dst, v44, v69);
            uint64_t v26 = 1;
            break;
          }
          int v50 = v74 + SWORD1(v75);
          int v74 = v50;
          if (v50 < *v71)
          {
            uint64_t v51 = (v49 >> 35) & 0x3FFFF;
            uint64_t v52 = (char *)sub_100031CE0(v72, (v49 >> 35) & 0x3FFFF);
            uint64_t v48 = v52;
            if (v73 != a1 && sub_100034A6C(v52))
            {
              if ((int)a1[67] < 2)
              {
LABEL_57:
                unsigned int v47 = -1;
              }
              else
              {
                uint64_t v53 = 1;
                while (1)
                {
                  uint64_t v54 = sub_100033778(*((void *)a1 + 32), *(_DWORD *)(*((void *)a1 + 34) + 4 * v53));
                  if (v54)
                  {
                    uint64_t v55 = *(unsigned int *)(v54 + 268);
                    if ((int)v55 >= 2) {
                      break;
                    }
                  }
LABEL_72:
                  if (++v53 >= (int)a1[67]) {
                    goto LABEL_57;
                  }
                }
                uint64_t v56 = 4 * v55;
                uint64_t v57 = 4;
                while (*(_DWORD *)(*(void *)(v54 + 280) + v57) != v51)
                {
                  v57 += 4;
                  if (v56 == v57) {
                    goto LABEL_72;
                  }
                }
                unsigned int v47 = *(_DWORD *)(*(void *)(v54 + 272) + v57);
              }
              uint64_t v48 = sub_100031CE0(v72, v47);
            }
            unsigned int *v70 = v48;
            *uint64_t v71 = v50;
            memcpy(__dst, v44, v69);
          }
          uint64_t v26 = 1;
        }
      }
      while (sub_10002B1EC((uint64_t)&v77, (uint64_t)v73, (unsigned __int16 *)&v75));
    }
    sub_1000CD4D0(v44, v69);
    goto LABEL_90;
  }
  uint64_t v26 = 0;
  if (!sub_10002B1EC((uint64_t)&v77, (uint64_t)v73, (unsigned __int16 *)&v75)) {
    goto LABEL_90;
  }
  while (!v76)
  {
LABEL_14:
    if (!sub_10002B1EC((uint64_t)&v77, (uint64_t)v73, (unsigned __int16 *)&v75)) {
      goto LABEL_90;
    }
  }
  unint64_t v29 = *((void *)&v75 + 1);
  if (a8) {
    *a8 = (WORD4(v75) & 0x3FF) == 0;
  }
  uint64_t v30 = (v29 >> 35) & 0x3FFFF;
  uint64_t v31 = *((void *)v16 + 44);
  if (v31 || v16[85])
  {
    uint64_t v32 = v16[67];
    if ((int)v32 <= (int)v30 || (LODWORD(v33) = v30, *(_DWORD *)(*((void *)v16 + 34) + 4 * v30) != v30))
    {
      if ((int)v32 < 1)
      {
        LODWORD(v33) = 0;
        int v34 = SWORD1(v75);
        if (v31) {
          goto LABEL_28;
        }
        goto LABEL_32;
      }
      uint64_t v33 = 0;
      while (*(_DWORD *)(*((void *)v16 + 34) + 4 * v33) != v30)
      {
        if (v32 == ++v33)
        {
          LODWORD(v33) = v16[67];
          break;
        }
      }
    }
    int v34 = SWORD1(v75);
    if (v31)
    {
LABEL_28:
      if (v33 == v32) {
        int v35 = -1;
      }
      else {
        int v35 = v33;
      }
      v34 += *(unsigned __int8 *)(*((void *)v16 + 45) + v35);
    }
LABEL_32:
    if (v16[85] && (void)v89)
    {
      __int16 v36 = sub_10005FB88(v89, SDWORD2(v89), WORD6(v81));
      LOWORD(v37) = qword_100101CC0;
      if (qword_100101CC0) {
        uint64_t v37 = *(void *)(qword_100101CC0 + 4168);
      }
      int v34 = (__int16)(v34 + v36 - v37);
    }
    if (v34 < *v71)
    {
      uint64_t v38 = (char *)sub_100031CE0(v72, v30);
      uint64_t v28 = v38;
      if (v73 != a1 && sub_100034A6C(v38))
      {
        if ((int)a1[67] < 2)
        {
LABEL_10:
          unsigned int v27 = -1;
        }
        else
        {
          uint64_t v39 = 1;
          while (1)
          {
            uint64_t v40 = sub_100033778(*((void *)a1 + 32), *(_DWORD *)(*((void *)a1 + 34) + 4 * v39));
            if (v40)
            {
              uint64_t v41 = *(unsigned int *)(v40 + 268);
              if ((int)v41 >= 2) {
                break;
              }
            }
LABEL_42:
            if (++v39 >= (int)a1[67]) {
              goto LABEL_10;
            }
          }
          uint64_t v42 = 4 * v41;
          uint64_t v43 = 4;
          while (*(_DWORD *)(*(void *)(v40 + 280) + v43) != v30)
          {
            v43 += 4;
            if (v42 == v43) {
              goto LABEL_42;
            }
          }
          unsigned int v27 = *(_DWORD *)(*(void *)(v40 + 272) + v43);
        }
        uint64_t v28 = sub_100031CE0(v72, v27);
      }
      *a6 = v28;
      *uint64_t v71 = v34;
    }
    uint64_t v26 = 1;
    goto LABEL_14;
  }
  uint64_t v58 = (char *)sub_100031CE0(v72, v30);
  unsigned int v59 = v58;
  if (v73 != a1 && sub_100034A6C(v58))
  {
    unsigned int v60 = sub_100027A20((uint64_t)a1, v30);
    unsigned int v59 = sub_100031CE0(v72, v60);
  }
  *a6 = v59;
  *uint64_t v71 = 0;
  uint64_t v26 = 1;
LABEL_90:
  if (v73 != a1) {
    sub_100027400((uint64_t)v73);
  }
  return v26;
}

uint64_t sub_10002F400(_DWORD *a1, _DWORD *a2)
{
  int v3 = *(unsigned __int16 *)a1;
  int v4 = *(unsigned __int16 *)a2;
  uint64_t result = (v3 - v4);
  if (v3 == v4)
  {
    int v6 = a1[1];
    int v7 = a2[1];
    uint64_t result = (v6 - v7);
    if (v6 == v7)
    {
      int v8 = a1[2];
      int v9 = a2[2];
      uint64_t result = (v8 - v9);
      if (v8 == v9) {
        return (a1[3] - a2[3]);
      }
    }
  }
  return result;
}

_DWORD *sub_10002F444(int a1)
{
  uint64_t result = (_DWORD *)sub_1000C33A0(40);
  if (result)
  {
    result[2] = 0;
    result[3] = (a1 + 255) >> 8;
    result[5] = -1;
  }
  return result;
}

uint64_t sub_10002F484(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 8);
    int v3 = v2 << 8;
    if ((int)(v2 << 8) >= 1)
    {
      unsigned int v4 = 0;
      do
      {
        uint64_t v6 = v4 >> 8;
        if (*(void *)(*(void *)(*(void *)v1 + 8 * v6) + 8 * v4))
        {
          uint64_t v7 = *(void *)(*(void *)(v1 + 24) + 8 * v6);
          int v8 = *(_DWORD *)(v7 + 4 * v4);
          if ((v8 & 0x40000000) != 0)
          {
            unsigned int v9 = v8 & 0xBFFFFFFF;
            *(_DWORD *)(v7 + 4 * v4) = v9;
            if (!v9)
            {
              uint64_t v10 = *(void *)(*(void *)v1 + 8 * v6);
              uint64_t v11 = 8 * v4;
              uint64_t v12 = *(void *)(v10 + v11);
              *(void *)(v10 + v11) = 0;
              LODWORD(v11) = *(_DWORD *)(v1 + 20);
              --*(_DWORD *)(v1 + 16);
              if (v11 == v4)
              {
                int v5 = v4;
                while (1)
                {
                  BOOL v13 = __OFSUB__(v5--, 1);
                  if (v5 < 0 != v13) {
                    break;
                  }
                  if (*(void *)(*(void *)(*(void *)v1 + 8 * (v5 >> 8)) + 8
                                                                                              * v5))
                    goto LABEL_6;
                }
                int v5 = -1;
LABEL_6:
                *(_DWORD *)(v1 + 20) = v5;
              }
              sub_100026244(v12);
            }
          }
        }
        ++v4;
      }
      while (v4 != v3);
      uint64_t v2 = *(unsigned int *)(v1 + 8);
    }
    sub_1000C3F24(*(void *)v1, v2, v2);
    *(void *)uint64_t v1 = 0;
    sub_1000C3F24(*(void *)(v1 + 24), *(unsigned int *)(v1 + 36), *(_DWORD *)(v1 + 36));
    *(void *)(v1 + 24) = 0;
    return sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_10002F5A4(uint64_t a1, int a2)
{
  uint64_t v2 = a2 >> 8;
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 8 * v2);
  int v4 = *(_DWORD *)(v3 + 4 * a2);
  if ((v4 & 0x40000000) == 0) {
    return 0;
  }
  unsigned int v6 = v4 & 0xBFFFFFFF;
  *(_DWORD *)(v3 + 4 * a2) = v6;
  if (v6) {
    return 1;
  }
  uint64_t v7 = *(void *)(*(void *)a1 + 8 * v2);
  uint64_t v8 = 8 * a2;
  uint64_t v9 = *(void *)(v7 + v8);
  *(void *)(v7 + v8) = 0;
  LODWORD(v7) = *(_DWORD *)(a1 + 20);
  --*(_DWORD *)(a1 + 16);
  if (v7 == a2)
  {
    int v10 = (a2 & (a2 >> 31)) - 1;
    while (1)
    {
      BOOL v11 = __OFSUB__(a2--, 1);
      if (a2 < 0 != v11) {
        break;
      }
      if (*(void *)(*(void *)(*(void *)a1 + 8 * (a2 >> 8)) + 8 * a2)) {
        goto LABEL_11;
      }
    }
    a2 = v10;
LABEL_11:
    *(_DWORD *)(a1 + 20) = a2;
  }
  sub_100026244(v9);
  return 1;
}

uint64_t sub_10002F65C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (*(_DWORD *)(a1 + 8) << 8);
  int v7 = *(_DWORD *)(a1 + 20);
  if (v7 < (int)v6 - 1)
  {
    uint64_t v8 = (v7 + 1);
    uint64_t result = v8;
LABEL_3:
    *(_DWORD *)(a1 + 20) = v8;
LABEL_13:
    ++*(_DWORD *)(a1 + 16);
    uint64_t v10 = 8 * (result >> 8);
    *(void *)(*(void *)(*(void *)a1 + v10) + 8 * result) = a2;
    *(_DWORD *)(a2 + 76) = a3;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + v10) + 4 * result) = 0x40000000;
    return result;
  }
  if (*(_DWORD *)(a1 + 16) != v6)
  {
    if ((int)v6 < 1)
    {
LABEL_12:
      uint64_t result = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t result = 0;
      while (*(void *)(*(void *)(*(void *)a1 + 8 * (result >> 8)) + 8 * result))
      {
        uint64_t result = (result + 1);
        if (v6 == result) {
          goto LABEL_12;
        }
      }
    }
    goto LABEL_13;
  }
  if (sub_1000C3A90((const void **)a1, (int *)(a1 + 12), (signed int *)(a1 + 8), 8, 8, v6 | 1)&& sub_1000C3A90((const void **)(a1 + 24), (int *)(a1 + 32), (signed int *)(a1 + 36), 8, 4, v6 | 1))
  {
    LODWORD(v8) = *(_DWORD *)(a1 + 20) + 1;
    uint64_t result = v6;
    goto LABEL_3;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_10002F7A0(uint64_t a1, int a2)
{
  uint64_t result = sub_1000C3A90((const void **)a1, (int *)(a1 + 12), (signed int *)(a1 + 8), 8, 8, a2);
  if (result)
  {
    return sub_1000C3A90((const void **)(a1 + 24), (int *)(a1 + 32), (signed int *)(a1 + 36), 8, 4, a2);
  }
  return result;
}

uint64_t sub_10002F814(uint64_t *a1, uint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 2) << 8;
  if (v2 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = *a1;
  while (*(void *)(*(void *)(v5 + 8 * (result >> 8)) + 8 * result) != a2)
  {
    uint64_t result = (result + 1);
    if (v2 == result) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_10002F85C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8) << 8;
  if (v2 < 1) {
    return 0;
  }
  int v3 = 0;
  while (1)
  {
    uint64_t v4 = v3 >> 8;
    if (*(void *)(*(void *)(*(void *)a1 + 8 * v4) + 8 * v3) == a2) {
      break;
    }
    if (v2 == ++v3) {
      return 0;
    }
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8 * v4);
  int v6 = *(_DWORD *)(v5 + 4 * v3);
  if ((v6 & 0x40000000) == 0) {
    return 0;
  }
  unsigned int v8 = v6 & 0xBFFFFFFF;
  *(_DWORD *)(v5 + 4 * v3) = v8;
  if (v8) {
    return 1;
  }
  uint64_t v9 = *(void *)(*(void *)a1 + 8 * v4);
  uint64_t v10 = 8 * v3;
  uint64_t v11 = *(void *)(v9 + v10);
  *(void *)(v9 + v10) = 0;
  LODWORD(v10) = *(_DWORD *)(a1 + 20);
  --*(_DWORD *)(a1 + 16);
  if (v10 == v3)
  {
    while (1)
    {
      BOOL v12 = __OFSUB__(v3--, 1);
      if (v3 < 0 != v12) {
        break;
      }
      if (*(void *)(*(void *)(*(void *)a1 + 8 * (v3 >> 8)) + 8 * v3)) {
        goto LABEL_15;
      }
    }
    int v3 = -1;
LABEL_15:
    *(_DWORD *)(a1 + 20) = v3;
  }
  sub_100026244(v11);
  return 1;
}

uint64_t sub_10002F944(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 24) + 8 * (a2 >> 8));
  ++*(_DWORD *)(v2 + 4 * a2);
  return result;
}

uint64_t sub_10002F968(uint64_t result, int a2)
{
  uint64_t v2 = a2 >> 8;
  uint64_t v3 = *(void *)(*(void *)(result + 24) + 8 * v2);
  uint64_t v4 = 4 * a2;
  int v5 = *(_DWORD *)(v3 + v4) - 1;
  *(_DWORD *)(v3 + v4) = v5;
  if (!v5)
  {
    uint64_t v6 = *(void *)(*(void *)result + 8 * v2);
    uint64_t v7 = 8 * a2;
    uint64_t v8 = *(void *)(v6 + v7);
    *(void *)(v6 + v7) = 0;
    LODWORD(v6) = *(_DWORD *)(result + 20);
    --*(_DWORD *)(result + 16);
    if (v6 == a2)
    {
      int v9 = (a2 & (a2 >> 31)) - 1;
      while (1)
      {
        BOOL v10 = __OFSUB__(a2--, 1);
        if (a2 < 0 != v10) {
          break;
        }
        if (*(void *)(*(void *)(*(void *)result + 8 * (a2 >> 8)) + 8 * a2)) {
          goto LABEL_8;
        }
      }
      a2 = v9;
LABEL_8:
      *(_DWORD *)(result + 20) = a2;
    }
    return sub_100026244(v8);
  }
  return result;
}

BOOL sub_10002F9F4(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 20) < (signed int)a2) {
    return 0;
  }
  uint64_t v2 = a2 >> 8;
  return *(void *)(*(void *)(*(void *)a1 + 8 * v2) + 8 * a2)
      && *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8 * v2) + 4 * a2) == 0x40000000;
}

uint64_t sub_10002FA40(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 20) < (signed int)a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(*(void *)a1 + 8 * (a2 >> 8)) + 8 * a2);
  }
}

uint64_t sub_10002FA70(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 20);
  }
  return result;
}

uint64_t sub_10002FA7C(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)a1 + 8 * (v5 >> 8)) + 8 * v5);
      if (v7)
      {
        uint64_t v8 = (unsigned char *)sub_100025D58(v7);
        if (!sub_1000CAED0(v8, a2)) {
          return v5;
        }
        int v2 = *(_DWORD *)(a1 + 20);
      }
      BOOL v6 = (int)v5 < v2;
      uint64_t v5 = (v5 + 1);
    }
    while (v6);
  }
  return 0xFFFFFFFFLL;
}

BOOL sub_10002FB10(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = sub_1000BFC50(a2, "bcm0", a3);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = v4;
  if (!sub_1000BFD58(v4, *(_DWORD *)(a1 + 12), v5)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 8), v7)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 16), v8)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 20), v9)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 32), v10)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 36), v11))
  {
    goto LABEL_26;
  }
  if ((*(_DWORD *)(a1 + 20) & 0x80000000) == 0)
  {
    unsigned int v13 = 0;
    while (1)
    {
      uint64_t v17 = *(void *)(*(void *)a1 + 8 * (v13 >> 8));
      uint64_t v18 = *(unsigned int **)(v17 + 8 * v13);
      if (!v18)
      {
        if (!sub_1000BFD58(v6, 0, v12)) {
          goto LABEL_22;
        }
        goto LABEL_12;
      }
      if (sub_100025D50(*(unsigned int **)(v17 + 8 * v13)) == 3)
      {
        if (!sub_1000BFD58(v6, 1, v19)) {
          goto LABEL_22;
        }
      }
      else
      {
        int v20 = sub_100025D50(v18);
        if (!sub_1000BFD58(v6, v20 == 2, v21)) {
          goto LABEL_22;
        }
        if (v20 != 2) {
          goto LABEL_12;
        }
      }
      if (!sub_1000BFD58(v6, *v18, v12) || !sub_100026ACC((uint64_t)v18))
      {
LABEL_22:
        unsigned int v15 = v13;
        goto LABEL_24;
      }
LABEL_12:
      unsigned int v15 = v13 + 1;
      if ((int)v13++ >= *(_DWORD *)(a1 + 20)) {
        goto LABEL_24;
      }
    }
  }
  unsigned int v15 = 0;
LABEL_24:
  if (sub_1000BFFFC(v6, *(void ***)(a1 + 24), *(_DWORD *)(a1 + 36), 0x100u, 4, v12)) {
    BOOL v22 = v15 == *(_DWORD *)(a1 + 20) + 1;
  }
  else {
LABEL_26:
  }
    BOOL v22 = 0;
  sub_1000BFD14(v6);
  return v22;
}

BOOL sub_10002FCD8(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v11 = sub_1000BEC58(a2, "bcm0", a3, a4, a5, a6, a7, a8);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (uint64_t)v11;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if (!sub_1000BEECC((uint64_t)v11, (char *)&v28 + 4)
    || !sub_1000BEECC(v12, &v28)
    || !sub_1000BEECC(v12, (char *)&v26 + 4)
    || !sub_1000BEECC(v12, &v27)
    || !sub_1000BEECC(v12, &v26)
    || !sub_1000BEECC(v12, (char *)&v25 + 4)
    || !sub_1000C3D84((const void **)a1, (int *)(a1 + 12), SHIDWORD(v28))
    || (int)v28 >= 1 && !sub_10002F7A0(a1, v28 << 8))
  {
    goto LABEL_32;
  }
  int v13 = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(_DWORD *)(a1 + 20) = v13;
  if (v13 < 0)
  {
    int v16 = 0;
  }
  else
  {
    int v14 = 0;
    while (sub_1000BEECC(v12, &v25))
    {
      if (v25)
      {
        if (!sub_1000BEECC(v12, (char *)&v27 + 4)) {
          break;
        }
        uint64_t v18 = *(void *)(*(void *)a1 + 8 * (v14 >> 8));
        uint64_t v19 = sub_100026AD4(v12, SHIDWORD(v27), a4, a5);
        *(void *)(v18 + 8 * v14) = v19;
        if (!v19) {
          break;
        }
      }
      int v16 = v14 + 1;
      if (v14++ >= (int)v27) {
        goto LABEL_22;
      }
    }
    int v16 = v14;
  }
LABEL_22:
  uint8x8_t v21 = (uint64_t *)(a1 + 24);
  uint64_t v20 = *(void *)(a1 + 24);
  if (v20)
  {
    if (*(int *)(a1 + 36) >= 1)
    {
      uint64_t v22 = 0;
      do
        sub_1000C321C(*(void *)(*(void *)(a1 + 24) + 8 * v22++));
      while (v22 < *(int *)(a1 + 36));
      uint64_t v20 = *v21;
    }
    sub_1000C321C(v20);
  }
  int v24 = 0;
  if (sub_1000BF88C(v12, (uint64_t *)(a1 + 24), *(_DWORD *)(a1 + 32), 256, 4, &v24)
    && (!*v21 || v24 == *(_DWORD *)(a1 + 36)))
  {
    BOOL v15 = v16 == *(_DWORD *)(a1 + 20) + 1;
  }
  else
  {
LABEL_32:
    BOOL v15 = 0;
  }
  sub_1000BED3C(v12);
  return v15;
}

uint64_t sub_10002FF00(uint64_t a1, int a2, int a3, uint64_t *a4, int a5)
{
  uint64_t v10 = sub_1000C33A0(312);
  uint64_t v12 = v10;
  if (v10)
  {
    int v13 = (_OWORD *)(v10 + 4);
    int v14 = sub_1000CAD44(" XTR ", (unsigned __int8 *)(v10 + 4), 64, v11);
    *(_DWORD *)uint64_t v12 = 1;
    if (v14)
    {
      *(_OWORD *)(v12 + 36) = 0u;
      *(_OWORD *)(v12 + 52) = 0u;
      *int v13 = 0u;
      *(_OWORD *)(v12 + 20) = 0u;
      sub_1000CAD88((unsigned char *)(v12 + 4), " XTR ", 64);
    }
    *(void *)(v12 + 68) = 0x100000001;
    *(void *)(v12 + 80) = sub_1000303D4;
    *(void *)(v12 + 88) = sub_100030440;
    *(void *)(v12 + 96) = sub_100030448;
    *(void *)(v12 + 104) = sub_100030550;
    *(void *)(v12 + 112) = sub_10003056C;
    *(void *)(v12 + 120) = 0;
    *(void *)(v12 + 128) = sub_1000306F0;
    *(void *)(v12 + 136) = sub_10003078C;
    *(void *)(v12 + 144) = nullsub_4;
    *(_OWORD *)(v12 + 152) = 0u;
    *(_OWORD *)(v12 + 168) = 0u;
    *(_OWORD *)(v12 + 184) = 0u;
    *(void *)(v12 + 200) = sub_1000308FC;
    *(void *)(v12 + 208) = sub_100030904;
    *(_OWORD *)(v12 + 216) = 0u;
    *(_OWORD *)(v12 + 232) = 0u;
    *(void *)(v12 + 256) = a4;
    *(_DWORD *)(v12 + 264) = a2;
    BOOL v15 = (_DWORD *)sub_1000C33A0(4 * (a2 + 1));
    *(void *)(v12 + 272) = v15;
    if (!v15) {
      goto LABEL_51;
    }
    uint64_t v16 = a2;
    *BOOL v15 = 0;
    int v51 = a5;
    if (a2 >= 1)
    {
      if (a3 == 2)
      {
        uint64_t v19 = 0;
        int v18 = 0;
        do
        {
          v18 += sub_1000B594C((uint64_t)a4, *(_DWORD *)(a1 + v19), __src, 200);
          *(_DWORD *)(*(void *)(v12 + 272) + v19 + 4) = v18;
          v19 += 4;
        }
        while (4 * a2 != v19);
        goto LABEL_19;
      }
      if (a3 == 1)
      {
        uint64_t v20 = 0;
        int v18 = 0;
        do
        {
          unsigned int v21 = sub_1000BD980((uint64_t)a4, *(unsigned __int16 *)(a1 + 2 * v20));
          v18 += sub_1000B594C((uint64_t)a4, v21, __src, 200);
          *(_DWORD *)(*(void *)(v12 + 272) + 4 * v20++ + 4) = v18;
        }
        while (a2 != v20);
        goto LABEL_19;
      }
      uint64_t v17 = 0;
      if (!a3)
      {
        do
        {
          __src[0].i16[0] = *(_WORD *)(a1 + 2 * v17);
          *(_DWORD *)(*(void *)(v12 + 272) + 4 * v17 + 4) = v17 + 1;
          ++v17;
        }
        while (a2 != v17);
        int v18 = a2;
        goto LABEL_19;
      }
      do
      {
        *(_DWORD *)(*(void *)(v12 + 272) + v17 + 4) = 0;
        v17 += 4;
      }
      while (4 * a2 != v17);
    }
    int v18 = 0;
LABEL_19:
    uint64_t v22 = 2 * v18;
    uint64_t v23 = sub_1000C33A0(v22);
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v50 = v22;
      *(void *)(v12 + 280) = v23;
      if (a2 >= 1)
      {
        uint64_t v25 = 0;
        int v26 = 0;
        do
        {
          if (a3)
          {
            if (a3 == 1)
            {
              unsigned int v27 = sub_1000BD980((uint64_t)a4, *(unsigned __int16 *)(a1 + 2 * v25));
            }
            else
            {
              if (a3 != 2)
              {
                int v28 = 0;
                goto LABEL_24;
              }
              unsigned int v27 = *(_DWORD *)(a1 + 4 * v25);
            }
            int v28 = sub_1000B594C((uint64_t)a4, v27, __src, 200);
          }
          else
          {
            __src[0].i16[0] = *(_WORD *)(a1 + 2 * v25);
            int v28 = 1;
          }
LABEL_24:
          memcpy((void *)(v24 + 2 * v26), __src, 2 * v28);
          v26 += v28;
          ++v25;
        }
        while (a2 != v25);
      }
      *(_DWORD *)(v12 + 288) = v51;
      if (!v51) {
        goto LABEL_47;
      }
      uint64_t v29 = sub_1000C33A0(4 * (a2 + 1));
      *(void *)(v12 + 296) = v29;
      if (v29)
      {
        uint64_t v30 = sub_1000C33A0(v50);
        *(void *)(v12 + 304) = v30;
        if (v30)
        {
          **(_DWORD **)(v12 + 296) = 0;
          uint64_t v31 = 2 * (int)(sub_1000B51F8(a4) + 1);
          uint64_t v39 = (_DWORD *)sub_1000CD3E8(v31, v32, v33, v34, v35, v36, v37, v38);
          if (a2 >= 1)
          {
            uint64_t v40 = 0;
            int v41 = 0;
            do
            {
              uint64_t v42 = *(void *)(v12 + 272);
              uint64_t v43 = *(int *)(v42 + 4 * v40);
              uint64_t v44 = v40 + 1;
              if ((int)v43 < *(_DWORD *)(v42 + 4 * (v40 + 1)))
              {
                do
                {
                  sub_1000BB100(a4, *(unsigned __int16 *)(v24 + 2 * v43), v39);
                  uint64_t v45 = v41;
                  uint64_t v46 = v41;
                  while (v46 > *(int *)(*(void *)(v12 + 296) + 4 * v40))
                  {
                    uint64_t v47 = *(void *)(v12 + 304) + 2 * v46--;
                    if (*(unsigned __int16 *)v39 == *(unsigned __int16 *)(v47 - 2)) {
                      goto LABEL_40;
                    }
                  }
                  ++v41;
                  *(_WORD *)(*(void *)(v12 + 304) + 2 * v45) = *(_WORD *)v39;
LABEL_40:
                  ++v43;
                }
                while (v43 < *(int *)(*(void *)(v12 + 272) + 4 * v44));
              }
              *(_DWORD *)(*(void *)(v12 + 296) + 4 * v44) = v41;
              ++v40;
            }
            while (v44 != v16);
          }
          sub_1000CD4D0(v39, v31);
LABEL_47:
          *(_DWORD *)(v12 + 248) = 1;
          return v12;
        }
        sub_1000C321C(*(void *)(v12 + 272));
        sub_1000C321C(*(void *)(v12 + 280));
        uint64_t v48 = *(void *)(v12 + 296);
      }
      else
      {
        sub_1000C321C(*(void *)(v12 + 272));
        uint64_t v48 = *(void *)(v12 + 280);
      }
    }
    else
    {
      uint64_t v48 = *(void *)(v12 + 272);
    }
    sub_1000C321C(v48);
LABEL_51:
    sub_1000C321C(v12);
    return 0;
  }
  return v12;
}

uint64_t sub_1000303C4(uint64_t a1, int a2, uint64_t *a3, int a4)
{
  return sub_10002FF00(a1, a2, 2, a3, a4);
}

uint64_t sub_1000303D4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C321C(*(void *)(result + 280));
    v1[35] = 0;
    sub_1000C321C(v1[34]);
    v1[34] = 0;
    sub_1000C321C(v1[37]);
    v1[37] = 0;
    sub_1000C321C(v1[38]);
    v1[38] = 0;
    return sub_1000C321C((uint64_t)v1);
  }
  return result;
}

uint64_t sub_100030440()
{
  return 1;
}

uint64_t sub_100030448(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = sub_1000BD980(*(void *)(a1 + 256), a2);
  int v4 = sub_1000B594C(*(void *)(a1 + 256), v3, 0, 0);
  if (!v4) {
    return 1;
  }
  int v12 = v4;
  int v13 = (int16x8_t *)sub_1000CD3E8(2 * v4, v5, v6, v7, v8, v9, v10, v11);
  int v14 = sub_1000B594C(*(void *)(a1 + 256), v3, v13, v12);
  uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 272) + 4 * *(int *)(a1 + 264));
  if ((int)v15 < 1 || v14 < 1)
  {
    uint64_t v17 = 1;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 1;
    while (2)
    {
      uint64_t v18 = v14;
      uint64_t v19 = v13;
      do
      {
        int v20 = v19->u16[0];
        uint64_t v19 = (int16x8_t *)((char *)v19 + 2);
        if (*(unsigned __int16 *)(*(void *)(a1 + 280) + 2 * v16) == v20)
        {
          uint64_t v17 = 0;
          *(_DWORD *)(a1 + 264) = -1;
          goto LABEL_13;
        }
        --v18;
      }
      while (v18);
      if (++v16 != v15) {
        continue;
      }
      break;
    }
  }
LABEL_13:
  sub_1000CD4D0(v13, 2 * v14);
  return v17;
}

void sub_100030550(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, __int16 a5)
{
  *(_WORD *)(a2 + 8) = a3;
  *(void *)(a2 + 16) = a4 & 0x1FFFFFFFFFFFFFLL;
  *(void *)a2 = (a4 >> 53) & 0x3FF;
  *(_WORD *)(a2 + 24) = a5;
}

BOOL sub_10003056C(char *__s1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3 = *((void *)__s1 + 2);
  uint64_t v4 = v3 + 1;
  *((void *)a3 + 1) = v3 + 1 + ((unint64_t)*(unsigned int *)__s1 << 53);
  uint64_t v5 = *(int *)(a2 + 264);
  if (v3 >= v5) {
    return 0;
  }
  *((_DWORD *)a3 + 4) = v4 == v5;
  a3[1] = 0;
  *((void *)a3 + 3) = 0;
  uint64_t v9 = *(void *)(a2 + 272);
  uint64_t v10 = *(int *)(v9 + 4 * v3);
  uint64_t v11 = (char *)(*(void *)(a2 + 280) + 2 * v10);
  int v12 = *(_DWORD *)(v9 + 4 * v4) - v10;
  int v13 = __s1 + 24;
  if (*((__int16 *)__s1 + 12) == -1)
  {
    while (1)
    {
      uint64_t v15 = *((int *)__s1 + 1);
      if ((int)v15 >= v12) {
        break;
      }
      *a3 = *(_WORD *)&v11[2 * v15];
      ++*((_DWORD *)__s1 + 1);
      if (!qword_100101CC0
        || !*(_DWORD *)(qword_100101CC0 + 1288)
        || sub_1000BDE10(*(void *)(a2 + 256), *((unsigned __int16 *)__s1 + 4), *a3))
      {
        return 1;
      }
    }
    return 0;
  }
  if (!qword_100101CC0
    || !*(_DWORD *)(qword_100101CC0 + 1288)
    || (BOOL result = sub_1000BDE10(*(void *)(a2 + 256), *((unsigned __int16 *)__s1 + 4), *a3)))
  {
    if (*((_DWORD *)__s1 + 1)) {
      return 0;
    }
    if (sub_1000CAC8C(v13, 2, v11, v12) != -1)
    {
      *a3 = *((_WORD *)__s1 + 12);
      BOOL result = 1;
      *((_DWORD *)__s1 + 1) = 1;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1000306F0(uint64_t a1, char *__s1, int a3)
{
  uint64_t v3 = *(int *)(a1 + 264);
  if ((int)v3 < a3) {
    return 0;
  }
  if (a3 >= 1)
  {
    uint64_t v7 = 4 * v3;
    uint64_t v8 = a3;
    while (sub_1000CAC8C(__s1, 2, (char *)(*(void *)(a1 + 280) + 2 * *(int *)(*(void *)(a1 + 272) + v7 - 4)), *(_DWORD *)(*(void *)(a1 + 272) + v7) - *(_DWORD *)(*(void *)(a1 + 272) + v7 - 4)) != -1)
    {
      __s1 += 2;
      v7 -= 4;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_10003078C(uint64_t a1, int a2, uint64_t a3, void *a4, _DWORD *a5, unsigned char *a6)
{
  if (*(_DWORD *)(a1 + 264) != a2) {
    return 0;
  }
  uint64_t v35 = *(uint64_t **)(a1 + 256);
  int v9 = sub_1000B5200(v35);
  uint64_t v34 = 2 * v9;
  uint64_t v17 = (int16x8_t *)sub_1000CD3E8(v34, v10, v11, v12, v13, v14, v15, v16);
  if (a2 >= 1)
  {
    uint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = 4 * v18++;
      uint64_t v20 = *(void *)(a1 + 272);
      uint64_t v21 = *(void *)(a1 + 280);
      int v22 = *(_DWORD *)(v20 + 4 * v18);
      uint64_t v23 = *(int *)(v20 + v19);
      uint64_t v24 = a3;
      int v25 = sub_1000B594C((uint64_t)v35, *(_DWORD *)(a3 + v19), v17, v9);
      if (v25 < 1) {
        break;
      }
      int v26 = v22 - v23;
      unsigned int v27 = (char *)(v21 + 2 * v23);
      int v28 = v17;
      uint64_t v29 = v25;
      while (sub_1000CAC8C(v28, 2, v27, v26) == -1)
      {
        int v28 = (int16x8_t *)((char *)v28 + 2);
        if (!--v29) {
          goto LABEL_13;
        }
      }
      a3 = v24;
      if (v18 == a2) {
        goto LABEL_10;
      }
    }
LABEL_13:
    sub_1000CD4D0(v17, v34);
    return 0;
  }
LABEL_10:
  sub_1000CD4D0(v17, v34);
  bzero(a4, 8 * a2);
  if (a6)
  {
    bzero(a6, a2);
    *a6 = 1;
  }
  *a5 = 0;
  return 1;
}

uint64_t sub_1000308FC()
{
  return 0;
}

uint64_t sub_100030904(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(_DWORD *)(a1 + 288)) {
    return 0xFFFFLL;
  }
  if (*(_DWORD *)(a1 + 264) == a2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 304);
  uint64_t v5 = (int *)(*(void *)(a1 + 296) + 4 * a2);
  uint64_t result = (v5[1] - *v5);
  *a3 = v4 + 2 * *v5;
  return result;
}

uint64_t sub_100030948(int a1, unsigned int a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  uint64_t result = 0;
  if (a1 <= 0x2000000 && ((a2 | a1) & 0x80000000) == 0)
  {
    if (a1 || !a2)
    {
      if (!a1 || a2)
      {
        uint64_t result = sub_1000C33A0(224);
        if (result)
        {
          *(void *)(result + 204) = 0x100000001;
          if (a1)
          {
            unsigned int v15 = 0;
            unsigned int v16 = a1 + 1;
            do
            {
              ++v15;
              BOOL v17 = v16 > 1;
              v16 >>= 1;
            }
            while (v17);
            if (v15 >= 8) {
              unsigned int v15 = 8;
            }
          }
          else
          {
            unsigned int v15 = 8;
          }
          *(_DWORD *)uint64_t result = v15;
          *(_DWORD *)(result + 4) = 1 << v15;
          *(void *)(result + 24) = 0;
          *(_DWORD *)(result + 12) = 0;
          *(_DWORD *)(result + 16) = 0;
          int v18 = (a1 + (1 << v15) - 1) / (1 << v15);
          *(_DWORD *)(result + 8) = v18;
          if (a2)
          {
            unsigned int v19 = 0;
            unsigned int v20 = a2;
            do
            {
              ++v19;
              BOOL v17 = v20 > 1;
              v20 >>= 1;
            }
            while (v17);
            if (v19 >= 8) {
              unsigned int v19 = 8;
            }
          }
          else
          {
            unsigned int v19 = 8;
          }
          *(_DWORD *)(result + 32) = v19;
          int v21 = 1 << v19;
          *(_DWORD *)(result + 36) = v21;
          *(void *)(result + 40) = ((int)(a2 + v21 - 1) / v21);
          *(_DWORD *)(result + 48) = 0;
          *(_DWORD *)(result + 52) = a5;
          *(_DWORD *)(result + 148) = 0;
          *(_DWORD *)(result + 152) = a3;
          *(_DWORD *)(result + 172) = 0;
          *(_DWORD *)(result + 176) = a4;
          *(void *)(result + 128) = 0;
          *(void *)(result + 136) = 0;
          *(_DWORD *)(result + 144) = v18;
          *(void *)(result + 160) = 0;
          *(_DWORD *)(result + 168) = v18;
          *(void *)(result + 56) = a6;
          if (a6) {
            int v22 = a7;
          }
          else {
            int v22 = -1;
          }
          *(_DWORD *)(result + 64) = v22;
          *(_DWORD *)(result + 200) = 0;
          *(void *)(result + 216) = 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100030AEC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(result + 204))
    {
      if (*(int *)(result + 12) >= 1)
      {
        uint64_t v2 = 0;
        do
          sub_1000C321C(*(void *)(*(void *)(v1 + 24) + 8 * v2++));
        while (v2 < *(int *)(v1 + 12));
      }
      sub_1000C321C(*(void *)(v1 + 24));
      if (*(int *)(v1 + 44) >= 1)
      {
        uint64_t v3 = 0;
        do
          sub_1000C321C(*(void *)(*(void *)(v1 + 128) + 8 * v3++));
        while (v3 < *(int *)(v1 + 44));
      }
      sub_1000C321C(*(void *)(v1 + 128));
      if (*(_DWORD *)(v1 + 152))
      {
        if (*(int *)(v1 + 148) >= 1)
        {
          uint64_t v4 = 0;
          do
            sub_1000C321C(*(void *)(*(void *)(v1 + 136) + 8 * v4++));
          while (v4 < *(int *)(v1 + 148));
        }
        sub_1000C321C(*(void *)(v1 + 136));
      }
      if (*(int *)(v1 + 172) >= 1)
      {
        uint64_t v5 = 0;
        do
          sub_1000C321C(*(void *)(*(void *)(v1 + 160) + 8 * v5++));
        while (v5 < *(int *)(v1 + 172));
      }
      sub_1000C321C(*(void *)(v1 + 160));
      uint64_t v6 = *(void *)(v1 + 104);
      if (v6)
      {
        if (*(int *)(v1 + 116) >= 1)
        {
          uint64_t v7 = 0;
          do
            sub_1000C321C(*(void *)(*(void *)(v1 + 104) + 8 * v7++));
          while (v7 < *(int *)(v1 + 116));
          uint64_t v6 = *(void *)(v1 + 104);
        }
        sub_1000C321C(v6);
      }
      sub_1000C321C(*(void *)(v1 + 72));
      sub_1000C321C(*(void *)(v1 + 80));
      uint64_t result = sub_100037354(*(void *)(v1 + 216));
      *(void *)(v1 + 216) = 0;
    }
  }
  return result;
}

uint64_t sub_100030C4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_100030C54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 152);
}

uint64_t sub_100030C5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t sub_100030C64(uint64_t result)
{
  *(_DWORD *)(result + 88) = -1;
  return result;
}

uint64_t sub_100030C70(uint64_t a1, int a2, uint64_t a3, unsigned __int16 a4, uint64_t *a5)
{
  uint64_t v10 = sub_1000B5108((uint64_t)a5);
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = qword_100101CC0;
  if (qword_100101CC0) {
    uint64_t v12 = *(void *)(qword_100101CC0 + 1280);
  }
  if (v12 <= v11)
  {
    if (*(_DWORD *)(a1 + 188))
    {
      if (*(unsigned __int16 *)(a1 + 96) != a4)
      {
        if (*(_DWORD *)(a1 + 92) < a2)
        {
          uint64_t v19 = sub_1000C33A0(8 * a2);
          if (!v19) {
            goto LABEL_46;
          }
          uint64_t v20 = v19;
          uint64_t v21 = sub_1000C33A0(2 * a2);
          if (!v21)
          {
            uint64_t v62 = v20;
LABEL_45:
            sub_1000C321C(v62);
            goto LABEL_46;
          }
          uint64_t v22 = v21;
          sub_1000C321C(*(void *)(a1 + 72));
          sub_1000C321C(*(void *)(a1 + 80));
          *(void *)(a1 + 72) = v20;
          *(void *)(a1 + 80) = v22;
          *(_DWORD *)(a1 + 92) = a2;
        }
        if (a2 < 1)
        {
          int v24 = 0;
        }
        else
        {
          uint64_t v23 = 0;
          int v24 = 0;
          do
          {
            unsigned int v25 = sub_10001ED14(v10, *(unsigned __int16 *)(a3 + 2 * v23), 0);
            unsigned int v26 = sub_1000310FC(a1, v25, &v65);
            if (v26 != 0xFFFF)
            {
              unsigned int v27 = (_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8 * (int)(v26 >> *(_DWORD *)a1))
                             + 4 * (int)((*(_DWORD *)(a1 + 4) - 1) & v26));
              uint64_t v28 = v24;
              uint64_t v29 = 8 * v24;
              int v30 = v24 + 1;
              int v31 = v26 << 10;
              unsigned int v32 = v26 + 1;
              do
              {
                *(_WORD *)(*(void *)(a1 + 72) + v29) = *(_WORD *)(a3 + 2 * v23);
                *(_WORD *)(*(void *)(a1 + 80) + 2 * v28) = v25;
                int v24 = v30;
                uint64_t v33 = (_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8 * (int)(v32 >> *(_DWORD *)a1))
                               + 4 * (int)((*(_DWORD *)(a1 + 4) - 1) & v32));
                *(_WORD *)(*(void *)(a1 + 72) + v29 + 2) = *v33 == *v27 + 1;
                *(_DWORD *)(*(void *)(a1 + 72) + v29 + 4) = v31;
                int v34 = *(_DWORD *)(a1 + 16);
                if (v32 == v34) {
                  break;
                }
                if (v34 == *(_DWORD *)(a1 + 48)) {
                  break;
                }
                v29 += 8;
                int v30 = v24 + 1;
                v31 += 1024;
                ++v32;
                ++v28;
                unsigned int v27 = v33;
              }
              while (v25 == *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128)
                                                             + 8 * (int)(*v33 >> *(_DWORD *)(a1 + 32)))
                                                 + 2 * ((*(_DWORD *)(a1 + 36) - 1) & *v33)));
            }
            ++v23;
          }
          while (v23 != a2);
        }
        *(_DWORD *)(a1 + 88) = v24;
        *(_WORD *)(a1 + 96) = a4;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 88) = -1;
    }
    return 1;
  }
  if (v11 < 1)
  {
    int v13 = 0;
  }
  else
  {
    int v13 = 0;
    int v14 = 0;
    unsigned __int16 v15 = -1;
    do
    {
      unsigned int v16 = *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8 * (v14 >> *(_DWORD *)a1))
                      + 4 * ((*(_DWORD *)(a1 + 4) + 0x7FFFFFFF) & v14));
      int v17 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8 * (int)(v16 >> *(_DWORD *)(a1 + 32)))
                                + 2 * (int)((*(_DWORD *)(a1 + 36) - 1) & v16));
      if (v17 != v15)
      {
        unsigned int v18 = sub_1000BD980((uint64_t)a5, *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8 * (int)(v16 >> *(_DWORD *)(a1 + 32)))+ 2 * (int)((*(_DWORD *)(a1 + 36) - 1) & v16)));
        v13 += sub_1000B5C44(a5, v18);
        int v11 = *(_DWORD *)(a1 + 16);
        unsigned __int16 v15 = v17;
      }
      ++v14;
    }
    while (v14 < v11);
  }
  if (v13 <= *(_DWORD *)(a1 + 92)) {
    goto LABEL_29;
  }
  uint64_t v35 = sub_1000C33A0(8 * v13);
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = sub_1000C33A0(2 * v13);
    if (v37)
    {
      uint64_t v38 = v37;
      sub_1000C321C(*(void *)(a1 + 72));
      sub_1000C321C(*(void *)(a1 + 80));
      *(void *)(a1 + 72) = v36;
      *(void *)(a1 + 80) = v38;
      *(_DWORD *)(a1 + 92) = v13;
LABEL_29:
      int v39 = sub_1000B5200(a5);
      uint64_t v47 = (int16x8_t *)sub_1000CD3E8(2 * v39, v40, v41, v42, v43, v44, v45, v46);
      unsigned __int16 v64 = a4;
      int v48 = 0;
      if (*(int *)(a1 + 16) >= 1)
      {
        unsigned int v49 = 0;
        unsigned __int16 v50 = -1;
        do
        {
          uint64_t v51 = *(void *)(a1 + 24);
          int v52 = *(_DWORD *)(a1 + 4) - 1;
          unsigned int v53 = *(_DWORD *)(*(void *)(v51 + 8 * (v49 >> *(_DWORD *)a1)) + 4 * (v52 & v49));
          unsigned int v54 = v49 + 1;
          int v55 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8 * (int)(v53 >> *(_DWORD *)(a1 + 32)))
                                    + 2 * (int)((*(_DWORD *)(a1 + 36) - 1) & v53));
          if (v55 != v50)
          {
            int v56 = *(_DWORD *)(*(void *)(v51 + 8 * (v54 >> *(_DWORD *)a1)) + 4 * (v52 & v54));
            int v57 = sub_10001FAFC(v10, *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8 * (int)(v53 >> *(_DWORD *)(a1 + 32)))+ 2 * (int)((*(_DWORD *)(a1 + 36) - 1) & v53)), v47, v39);
            if (v57 >= 1)
            {
              uint64_t v58 = 0;
              uint64_t v59 = 8 * v48;
              uint64_t v60 = 2 * v48;
              v48 += v57;
              uint64_t v61 = v59;
              do
              {
                *(_WORD *)(*(void *)(a1 + 72) + v61) = v47->i16[v58];
                *(_WORD *)(*(void *)(a1 + 80) + v60 + v58 * 2) = v55;
                *(_WORD *)(*(void *)(a1 + 72) + v61 + 2) = v56 == v53 + 1;
                *(_DWORD *)(*(void *)(a1 + 72) + v59 + 2 * v58++ + 4) = v49 << 10;
                v61 += 8;
              }
              while (v57 != v58);
            }
            unsigned __int16 v50 = v55;
          }
          ++v49;
        }
        while ((signed int)v54 < *(_DWORD *)(a1 + 16));
      }
      sub_1000CD4D0(v47, 2 * v39);
      *(_DWORD *)(a1 + 88) = v48;
      *(_WORD *)(a1 + 96) = v64;
      return 1;
    }
    uint64_t v62 = v36;
    goto LABEL_45;
  }
LABEL_46:
  uint64_t result = 0;
  *(_DWORD *)(a1 + 88) = -1;
  return result;
}

uint64_t sub_1000310FC(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if (*(void *)(a1 + 104))
  {
    *a3 = 1;
    return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 104) + 8 * (a2 >> 8)) + 2 * a2);
  }
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 == *(_DWORD *)(a1 + 48))
  {
    uint64_t result = 0;
    int v6 = v5 - 1;
    if (v5 >= 1)
    {
      do
      {
        unsigned int v7 = (v6 + result) >> 1;
        unsigned int v8 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8 * (v7 >> *(_DWORD *)(a1 + 32)))
                                 + 2 * ((*(_DWORD *)(a1 + 36) + 0x7FFFFFFF) & v7));
        if (v8 < a2) {
          uint64_t result = v7 + 1;
        }
        else {
          uint64_t result = result;
        }
        if (v8 >= a2) {
          int v6 = v7 - 1;
        }
      }
      while ((int)result <= v6);
    }
    if ((int)result < v5
      && *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128)
                                         + 8 * (int)(result >> *(_DWORD *)(a1 + 32)))
                             + 2 * (int)((*(_DWORD *)(a1 + 36) - 1) & result)) == a2)
    {
      *a3 = 1;
      return result;
    }
  }
  else
  {
    uint64_t result = 0;
    int v9 = v5 - 1;
    if (v5 >= 1)
    {
      do
      {
        unsigned int v10 = (result + v9) >> 1;
        unsigned int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8 * (v10 >> *(_DWORD *)a1))
                        + 4 * (v10 & (*(_DWORD *)(a1 + 4) + 0x7FFFFFFF)));
        unsigned int v12 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8 * (int)(v11 >> *(_DWORD *)(a1 + 32)))
                                  + 2 * (int)(v11 & (*(_DWORD *)(a1 + 36) - 1)));
        if (v12 < a2) {
          uint64_t result = v10 + 1;
        }
        else {
          uint64_t result = result;
        }
        if (v12 >= a2) {
          int v9 = v10 - 1;
        }
      }
      while ((int)result <= v9);
    }
    if ((int)result < v5)
    {
      uint64_t v13 = *(void *)(a1 + 24);
      int v14 = *(_DWORD *)(a1 + 4) - 1;
      unsigned int v15 = *(_DWORD *)(*(void *)(v13 + 8 * (int)(result >> *(_DWORD *)a1)) + 4
                                                                                              * (int)(v14 & result));
      if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8 * (int)(v15 >> *(_DWORD *)(a1 + 32)))
                               + 2 * (int)((*(_DWORD *)(a1 + 36) - 1) & v15)) == a2)
      {
        *a3 = *(_DWORD *)(*(void *)(v13 + 8 * (int)((result + 1) >> *(_DWORD *)a1))
                        + 4 * (v14 & ((int)result + 1)))
            - v15;
        return result;
      }
    }
  }
  return 0xFFFFLL;
}

uint64_t sub_100031294(uint64_t a1, unsigned int a2)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8 * (int)((a2 + 1) >> *(_DWORD *)a1))
                                  + 4 * (int)((*(_DWORD *)(a1 + 4) - 1) & (a2 + 1)))
                      - *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8 * (int)(a2 >> *(_DWORD *)a1))
                                  + 4 * (int)((*(_DWORD *)(a1 + 4) - 1) & a2)));
}

uint64_t sub_1000312CC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(_DWORD *)(a1 + 48);
    if (v3 >= 1)
    {
      uint64_t v5 = 0;
      int v6 = 0;
      do
      {
        if (v3 >= *(_DWORD *)(a1 + 36)) {
          int v7 = *(_DWORD *)(a1 + 36);
        }
        else {
          int v7 = v3;
        }
        j__memmove((void *)(a2 + 2 * v6), *(const void **)(*(void *)(a1 + 128) + v5), 2 * v7);
        v6 += v7;
        v5 += 8;
        BOOL v8 = __OFSUB__(v3, v7);
        v3 -= v7;
      }
      while (!((v3 < 0) ^ v8 | (v3 == 0)));
    }
  }
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_100031350(uint64_t a1)
{
  return a1 + 72;
}

uint64_t sub_100031358(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 152)) {
    return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 136) + 8 * (int)(a2 >> *(_DWORD *)a1))
  }
                              + ((*(int *)(a1 + 4) - 1) & (int)a2));
  else {
    return 0;
  }
}

uint64_t sub_100031390(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(v4 + 8 * (int)(a2 >> *(_DWORD *)a1));
  uint64_t v6 = *(int *)(a1 + 4) - 1;
  int v7 = *(_DWORD *)(*(void *)(v4 + 8 * (int)((a2 + 1) >> *(_DWORD *)a1)) + 4 * (int)(v6 & (a2 + 1)));
  uint64_t v8 = v6 & (int)a2;
  int v9 = v7 - *(_DWORD *)(v5 + 4 * v8);
  *a4 = v9;
  if (v9 <= a3) {
    return 0xFFFFLL;
  }
  else {
    return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128)
  }
                                           + 8
                                           * (int)((*(_DWORD *)(v5 + 4 * v8) + a3) >> *(_DWORD *)(a1 + 32)))
                               + 2 * ((*(_DWORD *)(a1 + 36) - 1) & (*(_DWORD *)(v5 + 4 * v8) + a3)));
}

uint64_t sub_100031408(uint64_t a1, unsigned int a2, _WORD *a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(int *)(a1 + 4) - 1;
  uint64_t v6 = *(void *)(a1 + 128);
  unsigned int v7 = *(_DWORD *)(*(void *)(v4 + 8 * (int)(a2 >> *(_DWORD *)a1)) + 4 * (int)(v5 & a2));
  int v8 = *(_DWORD *)(a1 + 32);
  uint64_t v9 = *(void *)(v6 + 8 * (int)(v7 >> v8));
  int v10 = *(_DWORD *)(a1 + 36) - 1;
  int v11 = v10 & v7;
  uint64_t v12 = (int)a2 + 1;
  uint64_t v13 = *(void *)(v4 + 8 * (int)(v12 >> *(_DWORD *)a1));
  uint64_t v14 = v5 & v12;
  unsigned int v15 = *(_DWORD *)(v13 + 4 * v14);
  if (*(unsigned __int16 *)(v9 + 2 * v11) != *(unsigned __int16 *)(*(void *)(v6 + 8 * (int)(v15 >> v8))
                                                                    + 2 * (int)(v15 & v10)))
    return 0;
  *a4 = *(_DWORD *)(*(void *)(v4 + 8 * (int)((a2 + 2) >> *(_DWORD *)a1)) + 4 * (int)(v5 & (a2 + 2))) - v15 == 2;
  *a3 = *(_WORD *)(*(void *)(*(void *)(a1 + 128)
                             + 8 * (int)((*(_DWORD *)(v13 + 4 * v14) + 1) >> *(_DWORD *)(a1 + 32)))
                 + 2 * ((*(_DWORD *)(a1 + 36) - 1) & (*(_DWORD *)(v13 + 4 * v14) + 1)));
  return 1;
}

uint64_t sub_1000314D0(uint64_t result, void *a2, _DWORD *a3)
{
  *a2 = *(void *)(result + 56);
  *a3 = *(_DWORD *)(result + 64);
  return result;
}

uint64_t sub_1000314E4(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  int v3 = *(_DWORD *)(a1 + 4) - 1;
  unsigned int v4 = *(_DWORD *)(*(void *)(v2 + 8 * (int)(a2 >> *(_DWORD *)a1)) + 4 * (int)(v3 & a2));
  unsigned int v5 = a2 + 1;
  if ((int)(*(_DWORD *)(*(void *)(v2 + 8 * (int)(v5 >> *(_DWORD *)a1)) + 4 * (int)(v3 & v5)) - v4) < 2) {
    return 0;
  }
  int v7 = *(_DWORD *)(a1 + 16);
  if ((int)v5 < v7)
  {
    uint64_t v8 = *(void *)(a1 + 128);
    int v9 = *(_DWORD *)(a1 + 32);
    int v10 = *(_DWORD *)(a1 + 36) - 1;
    int v11 = *(unsigned __int16 *)(*(void *)(v8 + 8 * (int)(v4 >> v9)) + 2 * (int)(v10 & v4));
    while (1)
    {
      unsigned int v12 = *(_DWORD *)(*(void *)(v2 + 8 * (int)(v5 >> *(_DWORD *)a1)) + 4 * (int)(v5 & v3));
      if (*(unsigned __int16 *)(*(void *)(v8 + 8 * (int)(v12 >> v9)) + 2 * (int)(v12 & v10)) != v11) {
        break;
      }
      if (v7 == ++v5)
      {
        unsigned int v5 = *(_DWORD *)(a1 + 16);
        return v5 + ~a2;
      }
    }
  }
  return v5 + ~a2;
}

uint64_t sub_100031594(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (a2 >> 8)) + 8 * a2);
}

uint64_t sub_1000315AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *(unsigned int *)(a1 + 132);
  if (!v8) {
    return 1;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 40) + ((v8 >> 5) & 0x7FFFFF8))
                  + 8 * *(_DWORD *)(a1 + 132));
  uint64_t v11 = sub_1000351A4(*(void *)(a1 + 136), v10, a3, a4, a5, a6, a7, a8);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 136);
    *(_DWORD *)(a1 + 132) = 0;
    sub_1000C3E74(*(void *)(v12 + 24), *(unsigned int *)(v12 + 12), *(_DWORD *)(v12 + 12));
    *(_DWORD *)(v12 + 12) = 0;
    sub_1000C3E74(*(void *)(v12 + 128), *(unsigned int *)(v12 + 44), *(_DWORD *)(v12 + 44));
    *(_DWORD *)(v12 + 44) = 0;
    sub_1000C3E74(*(void *)(v12 + 136), *(unsigned int *)(v12 + 148), *(_DWORD *)(v12 + 148));
    *(_DWORD *)(v12 + 148) = 0;
    sub_1000C3E74(*(void *)(v12 + 160), *(unsigned int *)(v12 + 172), *(_DWORD *)(v12 + 172));
    *(_DWORD *)(v12 + 172) = 0;
    *(_DWORD *)(v12 + 16) = 0;
    *(_DWORD *)(v12 + 48) = 0;
    if (*(void *)(a1 + 72))
    {
      if (!*(_DWORD *)(v10 + 180))
      {
        int v13 = *(_DWORD *)(v10 + 16);
        if (v13 < 1)
        {
          int v14 = 0;
        }
        else
        {
          int v14 = 0;
          int v15 = 0;
          unsigned int v16 = *(uint64_t **)a1;
          unsigned __int16 v17 = -1;
          do
          {
            unsigned int v18 = *(_DWORD *)(*(void *)(*(void *)(v10 + 24) + 8 * (v15 >> *(_DWORD *)v10))
                            + 4 * ((*(_DWORD *)(v10 + 4) + 0x7FFFFFFF) & v15));
            int v19 = *(unsigned __int16 *)(*(void *)(*(void *)(v10 + 128) + 8 * (int)(v18 >> *(_DWORD *)(v10 + 32)))
                                      + 2 * (int)((*(_DWORD *)(v10 + 36) - 1) & v18));
            if (v19 != v17)
            {
              unsigned int v20 = sub_1000BD980((uint64_t)v16, *(unsigned __int16 *)(*(void *)(*(void *)(v10 + 128)+ 8 * (int)(v18 >> *(_DWORD *)(v10 + 32)))+ 2 * (int)((*(_DWORD *)(v10 + 36) - 1) & v18)));
              v14 += sub_1000B5C44(v16, v20);
              int v13 = *(_DWORD *)(v10 + 16);
              unsigned __int16 v17 = v19;
            }
            ++v15;
          }
          while (v15 < v13);
        }
        uint64_t v22 = qword_100101CC0;
        if (qword_100101CC0) {
          uint64_t v22 = *(void *)(qword_100101CC0 + 1272);
        }
        *(_DWORD *)(v10 + 180) = v22 <= v14;
      }
    }
  }
  return v11;
}

uint64_t sub_100031754(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(int *)(result + 32) >= 1)
    {
      int v2 = 0;
      do
      {
        uint64_t v3 = ++v2 >> 8;
        uint64_t v4 = *(void *)(*(void *)(*(void *)(v1 + 56) + 8 * v3) + 8 * v2);
        if (v4)
        {
          sub_1000C321C(v4);
          if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 104) + 8 * v3) + 4 * v2))
          {
            uint64_t v5 = *(void *)(*(void *)(*(void *)(v1 + 40) + 8 * v3) + 8 * v2);
            if (*(_DWORD *)(v5 + 204))
            {
              sub_100030AEC(v5);
              sub_1000C321C(v5);
            }
          }
        }
      }
      while (v2 < *(_DWORD *)(v1 + 32));
    }
    uint64_t v6 = *(void *)(v1 + 40);
    if (v6)
    {
      if (*(int *)(v1 + 52) >= 1)
      {
        uint64_t v7 = 0;
        do
          sub_1000C321C(*(void *)(*(void *)(v1 + 40) + 8 * v7++));
        while (v7 < *(int *)(v1 + 52));
        uint64_t v6 = *(void *)(v1 + 40);
      }
      sub_1000C321C(v6);
    }
    uint64_t v8 = *(void *)(v1 + 56);
    if (v8)
    {
      if (*(int *)(v1 + 68) >= 1)
      {
        uint64_t v9 = 0;
        do
          sub_1000C321C(*(void *)(*(void *)(v1 + 56) + 8 * v9++));
        while (v9 < *(int *)(v1 + 68));
        uint64_t v8 = *(void *)(v1 + 56);
      }
      sub_1000C321C(v8);
    }
    uint64_t v10 = *(void *)(v1 + 88);
    if (v10)
    {
      if (*(int *)(v1 + 100) >= 1)
      {
        uint64_t v11 = 0;
        do
          sub_1000C321C(*(void *)(*(void *)(v1 + 88) + 8 * v11++));
        while (v11 < *(int *)(v1 + 100));
        uint64_t v10 = *(void *)(v1 + 88);
      }
      sub_1000C321C(v10);
    }
    uint64_t v12 = *(void *)(v1 + 104);
    if (v12)
    {
      if (*(int *)(v1 + 116) >= 1)
      {
        uint64_t v13 = 0;
        do
          sub_1000C321C(*(void *)(*(void *)(v1 + 104) + 8 * v13++));
        while (v13 < *(int *)(v1 + 116));
        uint64_t v12 = *(void *)(v1 + 104);
      }
      sub_1000C321C(v12);
    }
    if (*(void *)(v1 + 72))
    {
      int v14 = *(_DWORD *)(v1 + 32);
      if (v14 >= 1)
      {
        int v15 = 0;
        do
        {
          ++v15;
          unsigned int v16 = *(_DWORD **)(*(void *)(*(void *)(v1 + 72) + 8 * (v15 >> 8))
                           + 8 * v15);
          if (v16)
          {
            sub_100061280(v16);
            int v14 = *(_DWORD *)(v1 + 32);
          }
        }
        while (v15 < v14);
      }
      if (*(int *)(v1 + 84) >= 1)
      {
        uint64_t v17 = 0;
        do
          sub_1000C321C(*(void *)(*(void *)(v1 + 72) + 8 * v17++));
        while (v17 < *(int *)(v1 + 84));
      }
      sub_1000C321C(*(void *)(v1 + 72));
    }
    uint64_t v18 = *(void *)(v1 + 136);
    sub_100030AEC(v18);
    sub_1000C321C(v18);
    int v19 = *(uint64_t **)(v1 + 120);
    if (v19)
    {
      sub_1000C321C(*v19);
      sub_1000C321C(v19[2]);
      sub_1000C321C(v19[4]);
      sub_1000C321C((uint64_t)v19);
    }
    return sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_1000319BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  unsigned int v9 = a2;
  if (*(_DWORD *)(a1 + 132)) {
    sub_1000315AC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (v9 >> 8)) + 8 * v9);
  if (*(_DWORD *)(v11 + 152)) {
    return *(unsigned __int8 *)(*(void *)(*(void *)(v11 + 136) + 8 * (int)(v8 >> *(_DWORD *)v11))
  }
                              + ((*(int *)(v11 + 4) - 1) & (int)v8));
  else {
    return 0;
  }
}

uint64_t sub_100031A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  unsigned int v9 = a2;
  if (*(_DWORD *)(a1 + 132)) {
    sub_1000315AC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (v9 >> 8)) + 8 * v9);
  return *(unsigned int *)(*(void *)(*(void *)(v11 + 160) + 8 * (int)(v8 >> *(_DWORD *)v11))
                         + 4 * (int)((*(_DWORD *)(v11 + 4) - 1) & v8));
}

uint64_t sub_100031AC0(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = 0;
  if (!sub_1000CAED0(a2, "<s>") || !sub_1000CAED0(a2, "<e>")) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 32);
  if (v6 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = 1;
  while (1)
  {
    uint64_t v9 = v7 >> 8;
    uint64_t v10 = *(unsigned char **)(*(void *)(*(void *)(a1 + 56) + 8 * v9) + 8 * v7);
    if (!v10) {
      goto LABEL_6;
    }
    if (!sub_1000CAED0(v10, a2)) {
      break;
    }
    int v6 = *(_DWORD *)(a1 + 32);
LABEL_6:
    BOOL v8 = (int)v7 < v6;
    uint64_t v7 = (v7 + 1);
    if (!v8) {
      return 0xFFFFFFFFLL;
    }
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v9) + 8 * v7)) {
    return v7;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 104) + 8 * v9);
  *a3 = 1;
  return *(unsigned int *)(v12 + 4 * v7);
}

uint64_t sub_100031BE8(uint64_t a1, unsigned __int8 *a2)
{
  if (sub_1000CAED0(a2, "<s>") && sub_1000CAED0(a2, "<e>"))
  {
    int v4 = *(_DWORD *)(a1 + 32);
    if (v4 >= 1)
    {
      unsigned int v5 = 1;
      do
      {
        uint64_t v7 = v5 >> 8;
        BOOL v8 = *(unsigned char **)(*(void *)(*(void *)(a1 + 56) + 8 * v7) + 8 * v5);
        if (v8)
        {
          if (!sub_1000CAED0(v8, a2))
          {
            if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v7) + 8 * v5))
            {
              char v9 = 0;
            }
            else
            {
              unsigned int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v7) + 4 * v5);
              char v9 = 1;
            }
            goto LABEL_14;
          }
          int v4 = *(_DWORD *)(a1 + 32);
        }
      }
      while ((int)v5++ < v4);
    }
    char v9 = 0;
    unsigned int v5 = -1;
  }
  else
  {
    char v9 = 0;
    unsigned int v5 = 0;
  }
LABEL_14:
  if ((v9 & (v5 != -1)) != 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v5;
  }
}

const char *sub_100031CE0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return "<s>";
  }
  if ((a2 & 0x40000000) == 0) {
    return *(const char **)(*(void *)(*(void *)(a1 + 56) + 8 * (a2 >> 8)) + 8 * a2);
  }
  uint64_t v3 = sub_10002FA40(*(void *)(a1 + 16), a2 & 0x3FFFFFFF);
  return (const char *)sub_100025D58(v3);
}

uint64_t sub_100031D44(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (a2 >> 8)) + 8 * a2)
                         + 192);
}

uint64_t sub_100031D60(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (a2 >> 8)) + 8 * a2)
                         + 196);
}

uint64_t sub_100031D7C(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t v5 = 8 * (a3 >> 8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + v5);
  uint64_t v7 = a3;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 104) + v5) + 4 * a3)) {
    unsigned int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * (a3 >> 8)) + 4 * a3);
  }
  else {
    unsigned int v8 = a3;
  }
  size_t v9 = (int)(sub_1000CAD00((unint64_t)a2) + 1);
  uint64_t v10 = (void *)sub_1000C33A0(v9);
  if (!v10) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = v10;
  j__memmove(v10, a2, v9);
  int v12 = *(_DWORD *)(a1 + 32);
  if (v12 == *(_DWORD *)(a1 + 24) - 1)
  {
    if (sub_1000373A0(a1, v12 + 2))
    {
      int v13 = *(_DWORD *)(a1 + 32);
      uint64_t v14 = (v13 + 1);
      *(_DWORD *)(a1 + 32) = v14;
      if (v13 == -2) {
        return v14;
      }
      goto LABEL_17;
    }
    return 0xFFFFFFFFLL;
  }
  if (v12 < 1)
  {
    uint64_t v14 = 1;
LABEL_17:
    uint64_t v16 = 8 * (v14 >> 8);
    uint64_t v17 = 8 * v14;
    *(void *)(*(void *)(*(void *)(a1 + 40) + v16) + v17) = *(void *)(v6 + 8 * v7);
    *(void *)(*(void *)(*(void *)(a1 + 56) + v16) + v17) = v11;
    uint64_t v18 = 4 * v14;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + v16) + v18) = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + v16) + v18) = v8;
    uint64_t v19 = *(void *)(a1 + 72);
    if (v19) {
      *(void *)(*(void *)(v19 + 8 * (v14 >> 8)) + 8 * v14) = 0;
    }
    ++*(_DWORD *)(a1 + 24);
    if ((v8 & 0x40000000) != 0)
    {
      sub_10002F944(*(void *)(a1 + 16), v8 & 0x3FFFFFFF);
    }
    else
    {
      uint64_t v20 = *(void *)(*(void *)(a1 + 88) + 8 * (v8 >> 8));
      ++*(_DWORD *)(v20 + 4 * v8);
    }
    return v14;
  }
  LODWORD(v15) = 0;
  uint64_t v14 = (v12 + 1);
  while (1)
  {
    uint64_t v15 = (v15 + 1);
    if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8 * (v15 >> 8)) + 8 * v15)) {
      break;
    }
    if (v12 == v15) {
      goto LABEL_17;
    }
  }
  uint64_t v14 = v15;
  if (v15 != -1) {
    goto LABEL_17;
  }
  return v14;
}

uint64_t sub_100031F40(uint64_t result, unsigned int a2)
{
  if ((a2 & 0x40000000) != 0) {
    return sub_10002F944(*(void *)(result + 16), a2 & 0x3FFFFFFF);
  }
  uint64_t v2 = *(void *)(*(void *)(result + 88) + 8 * (a2 >> 8));
  ++*(_DWORD *)(v2 + 4 * a2);
  return result;
}

uint64_t sub_100031F74(uint64_t a1, unsigned char *a2, int a3, unsigned int a4, int a5, int a6, int a7)
{
  uint64_t result = sub_1000CAED0(a2, "<s>");
  if (!result) {
    return result;
  }
  uint64_t result = sub_1000CAED0(a2, "<e>");
  if (!result) {
    return result;
  }
  int v15 = *(_DWORD *)(a1 + 32);
  if (v15 < 1) {
    return sub_10003208C(a1, a2, a3, a4, a5, &v19, a6, a7, 0, 0);
  }
  int v16 = 0;
  while (1)
  {
    uint64_t v17 = ++v16 >> 8;
    uint64_t v18 = *(unsigned char **)(*(void *)(*(void *)(a1 + 56) + 8 * v17) + 8 * v16);
    if (v18) {
      break;
    }
LABEL_5:
    if (v16 >= v15) {
      return sub_10003208C(a1, a2, a3, a4, a5, &v19, a6, a7, 0, 0);
    }
  }
  if (sub_1000CAED0(v18, a2))
  {
    int v15 = *(_DWORD *)(a1 + 32);
    goto LABEL_5;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v17) + 8 * v16)) {
    return 0;
  }
  return sub_10003208C(a1, a2, a3, a4, a5, &v19, a6, a7, 0, 0);
}

uint64_t sub_10003208C(uint64_t a1, const void *a2, int a3, unsigned int a4, int a5, unsigned int *a6, int a7, int a8, uint64_t a9, int a10)
{
  size_t v18 = (int)(sub_1000CAD00((unint64_t)a2) + 1);
  unsigned int v19 = (void *)sub_1000C33A0(v18);
  if (!v19) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v20 = (uint64_t)v19;
  j__memmove(v19, a2, v18);
  int v21 = *(_DWORD *)(a1 + 32);
  if (v21 == *(_DWORD *)(a1 + 24) - 1)
  {
    if (!sub_1000373A0(a1, v21 + 2)) {
      goto LABEL_16;
    }
    int v22 = *(_DWORD *)(a1 + 32);
    unsigned int v23 = v22 + 1;
    *(_DWORD *)(a1 + 32) = v22 + 1;
    if (v22 == -2) {
      goto LABEL_16;
    }
  }
  else if (v21 < 1)
  {
    unsigned int v23 = 1;
  }
  else
  {
    unsigned int v25 = 0;
    unsigned int v23 = v21 + 1;
    while (1)
    {
      ++v25;
      if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8 * (v25 >> 8)) + 8 * v25)) {
        break;
      }
      if (v21 == v25) {
        goto LABEL_14;
      }
    }
    unsigned int v23 = v25;
    if (v25 == -1) {
      goto LABEL_16;
    }
  }
LABEL_14:
  uint64_t v26 = sub_100030948(a3, a4, a7, a8, a5, a9, a10);
  if (v26)
  {
    uint64_t v27 = 8 * (v23 >> 8);
    uint64_t v28 = 8 * v23;
    *(void *)(*(void *)(*(void *)(a1 + 40) + v27) + v28) = v26;
    *(void *)(*(void *)(*(void *)(a1 + 56) + v27) + v28) = v20;
    uint64_t v29 = 4 * v23;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + v27) + v29) = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + v27) + v29) = 0;
    ++*(_DWORD *)(a1 + 24);
    *a6 = v23;
    return 1;
  }
LABEL_16:
  sub_1000C321C(v20);
  return 0;
}

uint64_t sub_100032238(uint64_t a1, unsigned char *a2, unsigned int a3, int a4, uint64_t a5, int a6)
{
  uint64_t result = sub_1000CAED0(a2, "<s>");
  if (!result) {
    return result;
  }
  uint64_t result = sub_1000CAED0(a2, "<e>");
  if (!result) {
    return result;
  }
  int v13 = *(_DWORD *)(a1 + 32);
  if (v13 < 1) {
    return sub_10003208C(a1, a2, a3, a3, a4, &v17, 0, 0, a5, a6);
  }
  int v14 = 0;
  while (1)
  {
    uint64_t v15 = ++v14 >> 8;
    int v16 = *(unsigned char **)(*(void *)(*(void *)(a1 + 56) + 8 * v15) + 8 * v14);
    if (v16) {
      break;
    }
LABEL_5:
    if (v14 >= v13) {
      return sub_10003208C(a1, a2, a3, a3, a4, &v17, 0, 0, a5, a6);
    }
  }
  if (sub_1000CAED0(v16, a2))
  {
    int v13 = *(_DWORD *)(a1 + 32);
    goto LABEL_5;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v15) + 8 * v14)) {
    return 0;
  }
  return sub_10003208C(a1, a2, a3, a3, a4, &v17, 0, 0, a5, a6);
}

uint64_t sub_10003234C(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(*(void *)(result + 40) + 8 * (a2 >> 8)) + 8 * a2) + 120) = 0;
  return result;
}

uint64_t *sub_100032368(uint64_t *result, unsigned int a2)
{
  uint64_t v2 = *(void *)(*(void *)(result[5] + 8 * (a2 >> 8)) + 8 * a2);
  if (*(void *)(v2 + 56) && !*(_DWORD *)(v2 + 120))
  {
    uint64_t result = (uint64_t *)sub_1000B51E8(*result);
    int v3 = (int)result;
    if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1228)) {
      uint64_t result = (uint64_t *)sub_1000C3A90((const void **)(v2 + 104), (int *)(v2 + 112), (signed int *)(v2 + 116), 8, 2, (int)result + 1);
    }
    uint64_t v4 = 0;
    do
    {
      for (uint64_t i = 0; i != 512; i += 2)
        *(_WORD *)(*(void *)(*(void *)(v2 + 104) + 8 * v4) + i) = -1;
      ++v4;
    }
    while (v4 != (v3 + 256) >> 8);
    int v6 = *(_DWORD *)(v2 + 16);
    if (v6 >= 1)
    {
      unsigned int v7 = v6 + 1;
      do
      {
        unsigned int v8 = v7 - 2;
        *(_WORD *)(*(void *)(*(void *)(v2 + 104)
                             + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(v2 + 128)
                                                                                   + 8 * (v8 >> *(_DWORD *)(v2 + 32)))
                                                                       + 2 * ((*(_DWORD *)(v2 + 36) - 1) & v8)) >> 5) & 0x7F8))
                 + 2
                 * *(_WORD *)(*(void *)(*(void *)(v2 + 128) + 8 * (v8 >> *(_DWORD *)(v2 + 32)))
                                             + 2 * ((*(_DWORD *)(v2 + 36) - 1) & v8))) = v7-- - 2;
      }
      while (v7 > 1);
    }
    *(_DWORD *)(v2 + 120) = 1;
  }
  return result;
}

uint64_t sub_100032488(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 32);
  if (v1 >= 1)
  {
    int v2 = 0;
    do
    {
      ++v2;
      uint64_t v3 = *(void *)(*(void *)(*(void *)(result + 40) + 8 * (v2 >> 8)) + 8 * v2);
      if (v3)
      {
        *(_DWORD *)(v3 + 188) = 1;
        int v1 = *(_DWORD *)(result + 32);
      }
    }
    while (v2 < v1);
  }
  return result;
}

uint64_t sub_1000324D4(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(*(void *)(result + 40) + 8 * (a2 >> 8)) + 8 * a2) + 188) = 1;
  return result;
}

uint64_t sub_1000324F4(uint64_t a1, unsigned __int8 *a2, __int16 *a3, unsigned int *a4)
{
  if (sub_1000CAED0(a2, "<s>") && sub_1000CAED0(a2, "<e>"))
  {
    int v8 = *(_DWORD *)(a1 + 32);
    if (v8 >= 1)
    {
      int v9 = 1;
      do
      {
        uint64_t v11 = v9 >> 8;
        int v12 = *(unsigned char **)(*(void *)(*(void *)(a1 + 56) + 8 * v11) + 8 * v9);
        if (v12)
        {
          if (!sub_1000CAED0(v12, a2))
          {
            if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v11) + 8 * v9))
            {
              char v13 = 0;
            }
            else
            {
              int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v11) + 4 * v9);
              char v13 = 1;
            }
            goto LABEL_12;
          }
          int v8 = *(_DWORD *)(a1 + 32);
        }
      }
      while (v9++ < v8);
    }
    char v13 = 0;
    int v9 = -1;
  }
  else
  {
    char v13 = 0;
    int v9 = 0;
  }
LABEL_12:
  if ((v13 & (v9 != -1)) != 0) {
    unsigned int v14 = -1;
  }
  else {
    unsigned int v14 = v9;
  }
  if (v14 + 1 < 2) {
    return 0;
  }
  uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (v14 >> 8)) + 8 * v14);
  if (!a3)
  {
    if (*a4 == -1 && !*(_DWORD *)(v16 + 176))
    {
      unsigned int v34 = *(_DWORD *)(a1 + 156);
      *(_DWORD *)(a1 + 156) = v34 + 1;
      *a4 = v34;
    }
    return 1;
  }
  unsigned int v17 = (void *)(v16 + 216);
  if (!*(_DWORD *)(v16 + 176))
  {
    int v35 = sub_1000CED6C((unint64_t)a3);
    int v43 = v35;
    if (v35 < 1)
    {
      int v48 = 0;
      uint64_t v49 = *v17;
      if (*v17) {
        goto LABEL_41;
      }
    }
    else
    {
      int v44 = 0;
      uint64_t v45 = a3;
      uint64_t v46 = v35;
      do
      {
        int v47 = (unsigned __int16)*v45++;
        int v44 = v47 + 12345 * v44;
        --v46;
      }
      while (v46);
      int v48 = 1234556789 * v44;
      uint64_t v49 = *v17;
      if (*v17)
      {
LABEL_41:
        unsigned int v50 = 0x40000000;
        while (sub_1000CF684(a3, (_WORD *)(v49 + 24)))
        {
          if ((v50 & v48) != 0) {
            uint64_t v51 = 8;
          }
          else {
            uint64_t v51 = 16;
          }
          if ((v50 & v48) != 0) {
            int v52 = (void *)(v49 + 8);
          }
          else {
            int v52 = (void *)(v49 + 16);
          }
          v50 >>= 1;
          uint64_t v49 = *(void *)(v49 + v51);
          if (!v49) {
            goto LABEL_55;
          }
        }
        uint64_t result = 1;
        *a4 = *(_DWORD *)v49;
        return result;
      }
    }
    unsigned int v50 = 0x40000000;
    int v52 = v17;
LABEL_55:
    if (v43 <= 7) {
      int v53 = 7;
    }
    else {
      int v53 = v43;
    }
    sub_1000C2F04((2 * (v53 - 7) + 47) & 0x3FFFFFFF8, v36, v37, v38, v39, v40, v41, v42);
    uint64_t v55 = v54;
    sub_1000CED88((_WORD *)(v54 + 24), a3, v43 + 1);
    *(void *)(v55 + 8) = 0;
    *(void *)(v55 + 16) = 0;
    *int v52 = v55;
    if (v50)
    {
      for (int i = 0; i != v50; ++i)
      {
        unsigned int v57 = (57737437 * (i ^ v48)) | 0x80000000;
        if (v57 != -1)
        {
          *(_DWORD *)uint64_t v55 = v57;
          uint64_t v58 = (_DWORD *)*v17;
          if (*v17 == v55)
          {
LABEL_69:
            uint64_t result = 1;
            *a4 = v57;
            return result;
          }
          unsigned int v59 = 0x40000000;
          while (*v58 != v57)
          {
            if ((v59 & v48) != 0) {
              uint64_t v60 = 2;
            }
            else {
              uint64_t v60 = 4;
            }
            v59 >>= 1;
            uint64_t v58 = *(_DWORD **)&v58[v60];
            if (v58 == (_DWORD *)v55) {
              goto LABEL_69;
            }
          }
        }
      }
    }
    uint64_t result = 0;
    *a4 = -1;
    return result;
  }
  unsigned int v18 = *a4;
  unsigned int v19 = (_DWORD *)*v17;
  if (*v17)
  {
    int v20 = 1234556789 * v18;
    while (*v19 != v18)
    {
      if ((v20 & 0x40000000) != 0) {
        uint64_t v21 = 2;
      }
      else {
        uint64_t v21 = 4;
      }
      if ((v20 & 0x40000000) != 0) {
        unsigned int v17 = v19 + 2;
      }
      else {
        unsigned int v17 = v19 + 4;
      }
      v20 *= 2;
      unsigned int v19 = *(_DWORD **)&v19[v21];
      if (!v19) {
        goto LABEL_29;
      }
    }
    return 1;
  }
LABEL_29:
  int v22 = sub_1000CED6C((unint64_t)a3);
  int v30 = v22;
  if (v22 <= 7) {
    int v31 = 7;
  }
  else {
    int v31 = v22;
  }
  sub_1000C2F04((2 * (v31 - 7) + 47) & 0x3FFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v33 = v32;
  *(_DWORD *)uint64_t v32 = v18;
  sub_1000CED88((_WORD *)(v32 + 24), a3, v30 + 1);
  *(void *)(v33 + 8) = 0;
  *(void *)(v33 + 16) = 0;
  uint64_t result = 1;
  *unsigned int v17 = v33;
  return result;
}

uint64_t sub_10003287C(uint64_t a1, unsigned __int8 *a2, __int16 *a3, int a4, unsigned int a5, int a6)
{
  if (!sub_1000CAED0(a2, "<s>") || !sub_1000CAED0(a2, "<e>"))
  {
    char v24 = 0;
    unsigned int v20 = 0;
    goto LABEL_12;
  }
  int v19 = *(_DWORD *)(a1 + 32);
  if (v19 < 1)
  {
LABEL_11:
    char v24 = 0;
    unsigned int v20 = -1;
    goto LABEL_12;
  }
  unsigned int v20 = 1;
  while (1)
  {
    uint64_t v22 = v20 >> 8;
    uint64_t v23 = *(unsigned char **)(*(void *)(*(void *)(a1 + 56) + 8 * v22) + 8 * v20);
    if (v23) {
      break;
    }
LABEL_5:
    if ((int)v20++ >= v19) {
      goto LABEL_11;
    }
  }
  if (sub_1000CAED0(v23, a2))
  {
    int v19 = *(_DWORD *)(a1 + 32);
    goto LABEL_5;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v22) + 8 * v20))
  {
    char v24 = 0;
  }
  else
  {
    unsigned int v20 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v22) + 4 * v20);
    char v24 = 1;
  }
LABEL_12:
  if ((v24 & (v20 != -1)) != 0) {
    unsigned int v20 = -1;
  }
  if (v20 + 1 < 2) {
    return 0;
  }
  uint64_t v26 = v20 >> 8;
  uint64_t v27 = v20;
  uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v26) + 8 * v20);
  uint64_t v29 = (_DWORD *)v28;
  if (*(_DWORD *)(a1 + 132) == v20)
  {
    if (a4 > 1024) {
      return 0;
    }
    goto LABEL_19;
  }
  uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v26) + 8 * v20);
  if (*(_DWORD *)(v28 + 16))
  {
LABEL_27:
    uint64_t result = sub_100032DF4(v30, a4, a3, a5, a6);
    if (result)
    {
      uint64_t v50 = *(void *)(a1 + 120);
      if (!v50) {
        goto LABEL_59;
      }
LABEL_55:
      if (*(int *)(v50 + 8) >= 1)
      {
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        do
        {
          *(_WORD *)(*(void *)v50 + v61) = 0;
          ++v62;
          v61 += 4;
        }
        while (v62 < *(int *)(v50 + 8));
      }
      *(_DWORD *)(v50 + 40) = 1;
LABEL_59:
      if (*(void *)(a1 + 72))
      {
        unint64_t v63 = *(unsigned int *)(*(void *)(*(void *)(a1 + 104) + 8 * v26) + 4 * v27);
        if (v63) {
          uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 40) + ((v63 >> 5) & 0x7FFFFF8))
        }
                          + 8 * *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v26) + 4 * v27));
        if (!*(_DWORD *)(v28 + 180))
        {
          int v64 = *(_DWORD *)(v28 + 16);
          if (v64 < 1)
          {
            int v65 = 0;
          }
          else
          {
            int v65 = 0;
            int v66 = 0;
            uint64_t v67 = *(uint64_t **)a1;
            unsigned __int16 v68 = -1;
            do
            {
              unsigned int v69 = *(_DWORD *)(*(void *)(*(void *)(v28 + 24) + 8 * (v66 >> *(_DWORD *)v28))
                              + 4 * ((*(_DWORD *)(v28 + 4) + 0x7FFFFFFF) & v66));
              int v70 = *(unsigned __int16 *)(*(void *)(*(void *)(v28 + 128) + 8 * (int)(v69 >> *(_DWORD *)(v28 + 32)))
                                        + 2 * (int)((*(_DWORD *)(v28 + 36) - 1) & v69));
              if (v70 != v68)
              {
                unsigned int v71 = sub_1000BD980((uint64_t)v67, *(unsigned __int16 *)(*(void *)(*(void *)(v28 + 128)+ 8 * (int)(v69 >> *(_DWORD *)(v28 + 32)))+ 2 * (int)((*(_DWORD *)(v28 + 36) - 1) & v69)));
                v65 += sub_1000B5C44(v67, v71);
                int v64 = *(_DWORD *)(v28 + 16);
                unsigned __int16 v68 = v70;
              }
              ++v66;
            }
            while (v66 < v64);
          }
          uint64_t v72 = qword_100101CC0;
          if (qword_100101CC0) {
            uint64_t v72 = *(void *)(qword_100101CC0 + 1272);
          }
          *(_DWORD *)(v28 + 180) = v72 <= v65;
        }
      }
      return 1;
    }
  }
  else
  {
    uint64_t result = sub_1000315AC(a1, v12, v13, v14, v15, v16, v17, v18);
    if (result)
    {
      uint64_t v29 = *(_DWORD **)(*(void *)(*(void *)(a1 + 40) + 8 * v26) + 8 * v20);
      if (a4 > 1024) {
        return 0;
      }
LABEL_19:
      uint64_t v30 = *(void *)(a1 + 136);
      if (*(_DWORD *)(a1 + 132) == v20)
      {
        if (*(_DWORD *)(v30 + 16) == 0x2000000)
        {
          int v31 = (_DWORD *)sub_1000C33A0(224);
          if (v31)
          {
            uint64_t v38 = v31;
            v31[1] = *(_DWORD *)(*(void *)(a1 + 136) + 4);
            *int v31 = **(_DWORD **)(a1 + 136);
            v31[9] = *(_DWORD *)(*(void *)(a1 + 136) + 36);
            v31[8] = *(_DWORD *)(*(void *)(a1 + 136) + 32);
            v31[38] = *(_DWORD *)(*(void *)(a1 + 136) + 152);
            v31[44] = *(_DWORD *)(*(void *)(a1 + 136) + 176);
            v31[51] = 1;
            if (sub_1000351A4(*(void *)(a1 + 136), (uint64_t)v31, v32, v33, v34, v35, v36, v37))
            {
              sub_100030AEC(*(void *)(a1 + 136));
              uint64_t v39 = *(_OWORD **)(a1 + 136);
              long long v40 = v38[1];
              *uint64_t v39 = *v38;
              v39[1] = v40;
              long long v41 = v38[2];
              long long v42 = v38[3];
              long long v43 = v38[5];
              v39[4] = v38[4];
              v39[5] = v43;
              v39[2] = v41;
              v39[3] = v42;
              long long v44 = v38[6];
              long long v45 = v38[7];
              long long v46 = v38[9];
              v39[8] = v38[8];
              v39[9] = v46;
              v39[6] = v44;
              v39[7] = v45;
              long long v47 = v38[10];
              long long v48 = v38[11];
              long long v49 = v38[13];
              v39[12] = v38[12];
              v39[13] = v49;
              v39[10] = v47;
              v39[11] = v48;
            }
          }
          if (*(_DWORD *)(v30 + 16) == 0x2000000) {
            goto LABEL_27;
          }
        }
      }
      else
      {
        *(_DWORD *)(a1 + 132) = v20;
        *(_DWORD *)(v30 + 4) = v29[1];
        *(_DWORD *)uint64_t v30 = *v29;
        *(_DWORD *)(v30 + 36) = v29[9];
        *(_DWORD *)(v30 + 32) = v29[8];
        int v51 = v29[38];
        *(_DWORD *)(v30 + 152) = v51;
        *(_DWORD *)(v30 + 176) = v29[44];
        if (!v51)
        {
          uint64_t v52 = *(void *)(v30 + 136);
          if (v52)
          {
            if (*(int *)(v30 + 148) >= 1)
            {
              uint64_t v53 = 0;
              do
                sub_1000C321C(*(void *)(*(void *)(v30 + 136) + 8 * v53++));
              while (v53 < *(int *)(v30 + 148));
              uint64_t v52 = *(void *)(v30 + 136);
            }
            sub_1000C321C(v52);
            *(void *)(v30 + 136) = 0;
          }
        }
      }
      uint64_t v74 = v26;
      int v54 = *(_DWORD *)(v30 + 48) + a4;
      int v55 = *(_DWORD *)(v30 + 16) + 1;
      if (sub_100037498(v30, v55)) {
        BOOL v56 = v54 == 0x7FFFFFFF;
      }
      else {
        BOOL v56 = 1;
      }
      if (v56) {
        return 0;
      }
      unsigned int v73 = v55;
      int v57 = v54;
      uint64_t result = sub_1000C3A90((const void **)(v30 + 128), (int *)(v30 + 40), (signed int *)(v30 + 44), *(_DWORD *)(v30 + 32), 2, v54);
      if (result)
      {
        if (!*(_DWORD *)(v30 + 16)) {
          ***(_DWORD ***)(v30 + 24) = 0;
        }
        *(_DWORD *)(*(void *)(*(void *)(v30 + 24) + 8 * (int)(v73 >> *(_DWORD *)v30))
                  + 4 * (int)((*(_DWORD *)(v30 + 4) - 1) & v73)) = v54;
        uint64_t v26 = v74;
        if (*(_DWORD *)(v30 + 152)) {
          *(unsigned char *)(*(void *)(*(void *)(v30 + 136) + 8 * (int)(*(_DWORD *)(v30 + 16) >> *(_DWORD *)v30))
        }
                   + ((*(int *)(v30 + 4) - 1) & *(int *)(v30 + 16))) = a5;
        *(_DWORD *)(*(void *)(*(void *)(v30 + 160) + 8 * (int)(*(_DWORD *)(v30 + 16) >> *(_DWORD *)v30))
                  + 4 * ((*(_DWORD *)(v30 + 4) - 1) & *(_DWORD *)(v30 + 16))) = a6;
        if (a4 >= 1)
        {
          unsigned int v58 = *(_DWORD *)(v30 + 48);
          uint64_t v59 = a4;
          do
          {
            __int16 v60 = *a3++;
            *(_WORD *)(*(void *)(*(void *)(v30 + 128) + 8 * (int)(v58 >> *(_DWORD *)(v30 + 32)))
                     + 2 * (int)((*(_DWORD *)(v30 + 36) - 1) & v58)) = v60;
            ++v58;
            --v59;
          }
          while (v59);
        }
        *(_DWORD *)(v30 + 16) = v73;
        *(_DWORD *)(v30 + 48) = v57;
        uint64_t v50 = *(void *)(a1 + 120);
        if (v50) {
          goto LABEL_55;
        }
        goto LABEL_59;
      }
    }
  }
  return result;
}

uint64_t sub_100032DF4(uint64_t a1, int a2, __int16 *a3, unsigned int a4, int a5)
{
  if (a2 > 1024) {
    return 0;
  }
  char v7 = a4;
  int v8 = a3;
  int v11 = *(_DWORD *)(a1 + 16);
  int v12 = 0;
  int v13 = v11 - 1;
  if (v11 >= 1)
  {
    uint64_t v14 = *(void *)(a1 + 24);
    int v15 = *(_DWORD *)a1;
    int v16 = *(_DWORD *)(a1 + 4) - 1;
    do
    {
      int v19 = v13 + v12;
      if (v13 + v12 < 0 != __OFADD__(v13, v12)) {
        ++v19;
      }
      unsigned int v20 = v19 >> 1;
      unsigned int v21 = *(_DWORD *)(*(void *)(v14 + 8 * (int)(v20 >> v15)) + 4 * (int)(v16 & v20));
      unsigned int v22 = v20 + 1;
      int v23 = *(_DWORD *)(*(void *)(v14 + 8 * (int)(v22 >> v15)) + 4 * (int)(v16 & v22)) - v21;
      if (v23 >= a2) {
        uint64_t v24 = a2;
      }
      else {
        uint64_t v24 = v23;
      }
      if ((int)v24 < 1)
      {
LABEL_5:
        int v17 = a2 - v23;
        if (a2 == v23)
        {
          if (*(_DWORD *)(a1 + 176)) {
            int v17 = a5
          }
                - *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8 * (int)(v20 >> v15)) + 4 * (int)(v16 & v20));
          else {
            int v17 = 0;
          }
        }
      }
      else
      {
        uint64_t v25 = (unsigned __int16 *)a3;
        while (1)
        {
          int v26 = *v25++;
          int v17 = v26
              - *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8 * (int)(v21 >> *(_DWORD *)(a1 + 32)))
                                    + 2 * (int)(v21 & (*(_DWORD *)(a1 + 36) - 1)));
          if (v17) {
            break;
          }
          ++v21;
          if (!--v24) {
            goto LABEL_5;
          }
        }
      }
      unsigned int v18 = v20 - 1;
      if (v17 < 1) {
        int v13 = v18;
      }
      else {
        int v12 = v22;
      }
    }
    while (v12 <= v13);
  }
  if (v12 < v11)
  {
    uint64_t v27 = *(void *)(a1 + 24);
    signed int v28 = v12 >> *(_DWORD *)a1;
    uint64_t v29 = *(int *)(a1 + 4) - 1;
    uint64_t v30 = v29 & v12;
    unsigned int v31 = *(_DWORD *)(*(void *)(v27 + 8 * v28) + 4 * v30);
    int v32 = *(_DWORD *)(*(void *)(v27 + 8 * (int)((v12 + 1) >> *(_DWORD *)a1))
                    + 4 * (int)(v29 & (v12 + 1)))
        - v31;
    if (v32 >= a2) {
      uint64_t v33 = a2;
    }
    else {
      uint64_t v33 = v32;
    }
    if ((int)v33 < 1)
    {
LABEL_31:
      if (v32 == a2
        && (!*(_DWORD *)(a1 + 176) || *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8 * v28) + 4 * v30) == a5))
      {
        if (*(_DWORD *)(a1 + 152))
        {
          uint64_t v36 = *(void *)(*(void *)(a1 + 136) + 8 * v28);
          if (*(unsigned __int8 *)(v36 + v30) > a4) {
            *(unsigned char *)(v36 + v30) = a4;
          }
        }
        return 1;
      }
    }
    else
    {
      uint64_t v34 = (unsigned __int16 *)a3;
      while (1)
      {
        int v35 = *v34++;
        if (v35 != *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8 * (int)(v31 >> *(_DWORD *)(a1 + 32)))
                                        + 2 * (int)(v31 & (*(_DWORD *)(a1 + 36) - 1))))
          break;
        ++v31;
        if (!--v33) {
          goto LABEL_31;
        }
      }
    }
  }
  if (v11 == 0x2000000) {
    return 0;
  }
  uint64_t result = sub_100037498(a1, v11 + 1);
  if (!result) {
    return result;
  }
  int v37 = *(_DWORD *)(a1 + 48) + a2;
  if (v37 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t result = sub_1000C3A90((const void **)(a1 + 128), (int *)(a1 + 40), (signed int *)(a1 + 44), *(_DWORD *)(a1 + 32), 2, *(_DWORD *)(a1 + 48) + a2);
  if (result)
  {
    sub_1000C403C(*(void **)(a1 + 24), *(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 4), 4, v12, *(_DWORD *)(a1 + 16) - v12 + 1, v12 + 1);
    unsigned int v38 = *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8 * (int)(v12 >> *(_DWORD *)a1))
                    + 4 * ((*(_DWORD *)(a1 + 4) - 1) & v12));
    sub_1000C403C(*(void **)(a1 + 128), *(unsigned int *)(a1 + 44), *(_DWORD *)(a1 + 36), 2, v38, *(_DWORD *)(a1 + 48) - v38, v38 + a2);
    if (a2 >= 1)
    {
      uint64_t v39 = a2;
      do
      {
        __int16 v40 = *v8++;
        *(_WORD *)(*(void *)(*(void *)(a1 + 128) + 8 * (int)(v38 >> *(_DWORD *)(a1 + 32)))
                 + 2 * (int)((*(_DWORD *)(a1 + 36) - 1) & v38)) = v40;
        ++v38;
        --v39;
      }
      while (v39);
    }
    if (*(_DWORD *)(a1 + 152))
    {
      sub_1000C403C(*(void **)(a1 + 136), *(unsigned int *)(a1 + 148), *(_DWORD *)(a1 + 4), 1, v12, *(_DWORD *)(a1 + 16) - v12, v12 + 1);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 136) + 8 * (int)(v12 >> *(_DWORD *)a1))
               + ((*(int *)(a1 + 4) - 1) & v12)) = v7;
    }
    sub_1000C403C(*(void **)(a1 + 160), *(unsigned int *)(a1 + 172), *(_DWORD *)(a1 + 4), 4, v12, *(_DWORD *)(a1 + 16) - v12, v12 + 1);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8 * (int)(v12 >> *(_DWORD *)a1))
              + 4 * ((*(_DWORD *)(a1 + 4) - 1) & v12)) = a5;
    for (int i = *(_DWORD *)(a1 + 16); v12 <= i; int i = *(_DWORD *)(a1 + 16))
    {
      uint64_t v42 = *(void *)(*(void *)(a1 + 24) + 8 * (int)(++v12 >> *(_DWORD *)a1));
      uint64_t v43 = 4 * ((*(_DWORD *)(a1 + 4) - 1) & v12);
      *(_DWORD *)(v42 + v43) += (unsigned __int16)a2;
    }
    *(_DWORD *)(a1 + 16) = i + 1;
    *(_DWORD *)(a1 + 48) = v37;
    uint64_t result = 1;
    *(_DWORD *)(a1 + 184) = 1;
  }
  return result;
}

uint64_t sub_100033204(uint64_t a1, unsigned __int8 *a2)
{
  if (!sub_1000CAED0(a2, "<s>") || !sub_1000CAED0(a2, "<e>"))
  {
    unsigned int v5 = 0;
    goto LABEL_11;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4 < 1) {
    return 0;
  }
  unsigned int v5 = 1;
  while (1)
  {
    uint64_t v7 = v5 >> 8;
    int v8 = *(unsigned char **)(*(void *)(*(void *)(a1 + 56) + 8 * v7) + 8 * v5);
    if (v8) {
      break;
    }
LABEL_5:
    if ((int)v5++ >= v4) {
      return 0;
    }
  }
  if (sub_1000CAED0(v8, a2))
  {
    int v4 = *(_DWORD *)(a1 + 32);
    goto LABEL_5;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v7) + 8 * v5)) {
    return 0;
  }
LABEL_11:
  return sub_1000332F4(a1, v5);
}

uint64_t sub_1000332F4(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = a2 >> 8;
  uint64_t v5 = a2;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v4) + 8 * a2);
  uint64_t v7 = *(void *)(v6 + 56);
  if (!v7
    || (uint64_t result = sub_10005F0FC(v7, *(unsigned __int8 **)(*(void *)(*(void *)(a1 + 56) + 8 * v4) + 8 * a2)), result)&& (!*(_DWORD *)(v6 + 200) || (uint64_t result = sub_1000332F4(a1), result)))
  {
    uint64_t v9 = *(void *)(a1 + 72);
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v4) + 4 * v5);
      if (!v10) {
        unsigned int v10 = a2;
      }
      uint64_t v11 = *(void *)(v9 + 8 * (v10 >> 8));
      uint64_t v12 = v10;
      int v13 = *(_DWORD **)(v11 + 8 * v10);
      if (v13)
      {
        sub_100061280(v13);
        *(void *)(v11 + 8 * v12) = 0;
        --*(_DWORD *)(a1 + 128);
      }
    }
    *(_DWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 180) = 0;
    if (*(_DWORD *)(a1 + 132) == a2)
    {
      uint64_t v14 = *(void *)(a1 + 136);
      *(_DWORD *)(a1 + 132) = 0;
      sub_1000C3E74(*(void *)(v14 + 24), *(unsigned int *)(v14 + 12), *(_DWORD *)(v14 + 12));
      *(_DWORD *)(v14 + 12) = 0;
      sub_1000C3E74(*(void *)(v14 + 128), *(unsigned int *)(v14 + 44), *(_DWORD *)(v14 + 44));
      *(_DWORD *)(v14 + 44) = 0;
      sub_1000C3E74(*(void *)(v14 + 136), *(unsigned int *)(v14 + 148), *(_DWORD *)(v14 + 148));
      *(_DWORD *)(v14 + 148) = 0;
      sub_1000C3E74(*(void *)(v14 + 160), *(unsigned int *)(v14 + 172), *(_DWORD *)(v14 + 172));
      *(_DWORD *)(v14 + 172) = 0;
      *(_DWORD *)(v14 + 16) = 0;
      *(_DWORD *)(v14 + 48) = 0;
    }
    uint64_t v15 = *(void *)(a1 + 120);
    if (v15)
    {
      if (*(int *)(v15 + 8) >= 1)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        do
        {
          *(_WORD *)(*(void *)v15 + v16) = 0;
          ++v17;
          v16 += 4;
        }
        while (v17 < *(int *)(v15 + 8));
      }
      uint64_t result = 1;
      *(_DWORD *)(v15 + 40) = 1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_100033480(unsigned int a1)
{
  return (a1 >> 30) & 1;
}

uint64_t sub_100033488(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x40000000) != 0) {
    return 0;
  }
  else {
    return *(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (a2 >> 8)) + 8 * a2)
  }
                           + 200);
}

void *sub_1000334B0(void *result, unsigned int a2)
{
  uint64_t v3 = (uint64_t)result;
  if ((a2 & 0x40000000) != 0)
  {
    int v8 = a2 & 0x3FFFFFFF;
    uint64_t v9 = result[2];
    return (void *)sub_10002F968(v9, v8);
  }
  else
  {
    uint64_t v4 = a2 >> 8;
    uint64_t v5 = *(void *)(result[11] + 8 * v4);
    uint64_t v6 = a2;
    int v7 = *(_DWORD *)(v5 + 4 * v6) - 1;
    *(_DWORD *)(v5 + 4 * v6) = v7;
    if (!v7)
    {
      uint64_t v10 = *(void *)(*(void *)(result[5] + 8 * v4) + 8 * v6);
      if (*(void *)(v10 + 56) && *(_DWORD *)(v10 + 200)) {
        sub_1000334B0(result);
      }
      if (*(_DWORD *)(*(void *)(*(void *)(v3 + 104) + 8 * v4) + 4 * v6)) {
        sub_1000334B0(v3);
      }
      return (void *)sub_100033590(v3, a2);
    }
  }
  return result;
}

uint64_t sub_100033590(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = a2 >> 8;
  uint64_t v4 = *(void *)(*(void *)(result + 40) + 8 * v3);
  uint64_t v5 = a2;
  uint64_t v6 = *(void *)(v4 + 8 * a2);
  uint64_t v7 = *(void *)(*(void *)(result + 56) + 8 * v3);
  uint64_t v8 = *(void *)(*(void *)(result + 104) + 8 * v3);
  if (*(_DWORD *)(v8 + 4 * a2))
  {
    if (!v6) {
      --*(_DWORD *)(result + 28);
    }
    *(_DWORD *)(v8 + 4 * a2) = 0;
    uint64_t result = sub_1000C321C(*(void *)(v7 + 8 * a2));
    *(void *)(v7 + 8 * v5) = 0;
    *(void *)(v4 + 8 * v5) = 0;
    --*(_DWORD *)(v2 + 24);
  }
  else
  {
    if (v6)
    {
      if (!*(_DWORD *)(v6 + 208)) {
        return result;
      }
      uint64_t v10 = *(void *)(v6 + 56);
      if (v10)
      {
        sub_10005F318(v10, *(unsigned __int8 **)(v7 + 8 * a2));
        *(void *)(v6 + 56) = 0;
        *(_DWORD *)(v6 + 64) = -1;
      }
    }
    sub_1000C321C(*(void *)(v7 + 8 * v5));
    *(void *)(v7 + 8 * v5) = 0;
    sub_100030AEC(v6);
    uint64_t result = sub_1000C321C(v6);
    *(void *)(v4 + 8 * v5) = 0;
    --*(_DWORD *)(v2 + 24);
    uint64_t v11 = *(void *)(v2 + 120);
    if (v11 && *(_WORD *)(*(void *)v11 + 4 * (int)a2))
    {
      if (*(int *)(v11 + 8) >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        do
        {
          *(_WORD *)(*(void *)v11 + v12) = 0;
          ++v13;
          v12 += 4;
        }
        while (v13 < *(int *)(v11 + 8));
      }
      *(_DWORD *)(v11 + 40) = 1;
    }
    uint64_t v14 = *(void *)(v2 + 72);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 8 * v3);
      uint64_t result = *(void *)(v15 + 8 * v5);
      if (result)
      {
        uint64_t result = sub_100061280((_DWORD *)result);
        *(void *)(v15 + 8 * v5) = 0;
      }
    }
    if (*(_DWORD *)(v2 + 132) == a2)
    {
      uint64_t v16 = *(void *)(v2 + 136);
      *(_DWORD *)(v2 + 132) = 0;
      sub_1000C3E74(*(void *)(v16 + 24), *(unsigned int *)(v16 + 12), *(_DWORD *)(v16 + 12));
      *(_DWORD *)(v16 + 12) = 0;
      sub_1000C3E74(*(void *)(v16 + 128), *(unsigned int *)(v16 + 44), *(_DWORD *)(v16 + 44));
      *(_DWORD *)(v16 + 44) = 0;
      sub_1000C3E74(*(void *)(v16 + 136), *(unsigned int *)(v16 + 148), *(_DWORD *)(v16 + 148));
      *(_DWORD *)(v16 + 148) = 0;
      uint64_t result = sub_1000C3E74(*(void *)(v16 + 160), *(unsigned int *)(v16 + 172), *(_DWORD *)(v16 + 172));
      *(_DWORD *)(v16 + 172) = 0;
      *(_DWORD *)(v16 + 16) = 0;
      *(_DWORD *)(v16 + 48) = 0;
    }
  }
  return result;
}

uint64_t sub_100033778(uint64_t a1, int a2)
{
  if ((a2 & 0x40000000) != 0) {
    return sub_10002FA40(*(void *)(a1 + 16), a2 & 0x3FFFFFFF);
  }
  else {
    return 0;
  }
}

uint64_t sub_100033790(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if (v1 >= 1)
  {
    signed int v3 = 0;
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = ++v3 >> 8;
      if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8 * v5) + 8 * v3)
        || *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 8 * v5) + 4 * v3))
      {
        goto LABEL_7;
      }
      unsigned int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v5) + 4 * v3);
      if ((v6 & 0x40000000) == 0)
      {
        uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v5) + 8 * v3);
        if (*(void *)(v7 + 56))
        {
          unsigned int v8 = *(_DWORD *)(v7 + 200);
          if (v8)
          {
            LODWORD(v4) = v4 + 1;
            sub_1000334B0((void *)a1, v8);
            unsigned int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v5) + 4 * v3);
          }
        }
        if (!v6) {
          goto LABEL_6;
        }
        if (*(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 8 * (v6 >> 8)) + 4 * v6) == 1) {
          LODWORD(v4) = v4 + 1;
        }
      }
      sub_1000334B0((void *)a1, v6);
LABEL_6:
      uint64_t v4 = (v4 + 1);
      sub_100033590(a1, v3);
      int v1 = *(_DWORD *)(a1 + 32);
LABEL_7:
      if (v3 >= v1) {
        return v4;
      }
    }
  }
  return 0;
}

uint64_t sub_10003389C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_1000338A4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2;
  if (*(_DWORD *)(a1 + 132) != a2
    || (uint64_t result = sub_1000315AC(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8), result))
  {
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (v9 >> 8)) + 8 * v9);
    if (v12) {
      LODWORD(v12) = *(_DWORD *)(v12 + 16);
    }
    *a3 = v12;
    return 1;
  }
  return result;
}

uint64_t sub_100033910(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1000315AC(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    if (*(int *)(a1 + 32) < 1)
    {
      int v19 = 0;
LABEL_12:
      *a2 = v19;
      return 1;
    }
    else
    {
      int v18 = 0;
      int v19 = 0;
      while (1)
      {
        if (v18 + 1 == *(_DWORD *)(a1 + 132))
        {
          uint64_t result = sub_1000315AC(a1, v11, v12, v13, v14, v15, v16, v17);
          if (!result) {
            break;
          }
        }
        uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * ((v18 + 1) >> 8))
                        + 8 * (v18 + 1));
        if (v20) {
          LODWORD(v20) = *(_DWORD *)(v20 + 16);
        }
        if ((int)v20 > v19) {
          int v19 = v20;
        }
        if (++v18 >= *(_DWORD *)(a1 + 32)) {
          goto LABEL_12;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000339C4(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (a2 >> 8)) + 8 * a2);
  if (v3)
  {
    uint64_t result = 1;
    *a3 = *(_DWORD *)(v3 + 52);
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t sub_1000339F8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a3;
  unsigned int v10 = a2;
  *a4 = 0;
  if (*(_DWORD *)(a1 + 132) != a2
    || (uint64_t result = sub_1000315AC(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8), result))
  {
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (v10 >> 8)) + 8 * v10);
    *a4 = *(_DWORD *)(*(void *)(*(void *)(v13 + 24) + 8 * (int)((v9 + 1) >> *(_DWORD *)v13))
                    + 4 * (int)((*(_DWORD *)(v13 + 4) - 1) & (v9 + 1)))
        - *(_DWORD *)(*(void *)(*(void *)(v13 + 24) + 8 * (int)(v9 >> *(_DWORD *)v13))
                    + 4 * (int)((*(_DWORD *)(v13 + 4) - 1) & v9));
    return 1;
  }
  return result;
}

uint64_t sub_100033A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a4;
  unsigned int v10 = a3;
  unsigned int v11 = a2;
  if (*(_DWORD *)(a1 + 132)) {
    sub_1000315AC(a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (v11 >> 8)) + 8 * v11);
  uint64_t v14 = *(void *)(v13 + 24);
  uint64_t v15 = *(void *)(v14 + 8 * (int)(v10 >> *(_DWORD *)v13));
  uint64_t v16 = *(int *)(v13 + 4) - 1;
  int v17 = *(_DWORD *)(*(void *)(v14 + 8 * (int)((v10 + 1) >> *(_DWORD *)v13)) + 4 * (int)(v16 & (v10 + 1)));
  uint64_t v18 = v16 & (int)v10;
  int v19 = v17 - *(_DWORD *)(v15 + 4 * v18);
  *a5 = v19;
  if (v19 <= v9) {
    return 0xFFFFLL;
  }
  else {
    return *(unsigned __int16 *)(*(void *)(*(void *)(v13 + 128)
  }
                                           + 8
                                           * (int)((*(_DWORD *)(v15 + 4 * v18) + v9) >> *(_DWORD *)(v13 + 32)))
                               + 2 * ((*(_DWORD *)(v13 + 36) - 1) & (*(_DWORD *)(v15 + 4 * v18) + v9)));
}

uint64_t sub_100033B80(uint64_t result, unsigned int a2, void *a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(result + 40) + 8 * (a2 >> 8)) + 8 * a2);
  if (v4)
  {
    *a3 = *(void *)(v4 + 56);
    *a4 = *(_DWORD *)(v4 + 64);
  }
  else
  {
    *a3 = 0;
    *a4 = -1;
  }
  return result;
}

uint64_t sub_100033BBC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * (a2 >> 8)) + 4 * a2);
  if (!v3) {
    unsigned int v3 = a2;
  }
  return *(void *)(*(void *)(v2 + 8 * (v3 >> 8)) + 8 * v3);
}

uint64_t sub_100033BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (*(_DWORD *)(a1 + 132)) {
    sub_1000315AC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*(int *)(a1 + 32) >= 1)
  {
    int v10 = 1;
    do
    {
      uint64_t v12 = v10 >> 8;
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v12) + 4 * v10))
      {
        uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v12) + 8 * v10);
        if (v13)
        {
          int v14 = *(_DWORD *)(v13 + 16);
          if (v14 >= 1)
          {
            int v15 = 0;
            do
            {
              while (1)
              {
                uint64_t v16 = *(void **)(v13 + 24);
                int v17 = *(_DWORD *)(v13 + 4);
                unsigned int v18 = *(_DWORD *)(v16[v15 >> *(_DWORD *)v13] + 4 * ((v17 - 1) & v15));
                int v19 = v15 + 1;
                int v20 = *(_DWORD *)(v16[v19 >> *(_DWORD *)v13] + 4 * ((v17 - 1) & v19));
                unsigned int v21 = v20 - v18;
                if ((int)(v20 - v18) >= 1) {
                  break;
                }
LABEL_11:
                ++v15;
                if (v19 >= v14) {
                  goto LABEL_20;
                }
              }
              while (*(unsigned __int16 *)(*(void *)(*(void *)(v13 + 128)
                                                      + 8 * (int)(v18 >> *(_DWORD *)(v13 + 32)))
                                          + 2 * (int)(v18 & (*(_DWORD *)(v13 + 36) - 1))) != v8)
              {
                if (v20 == ++v18) {
                  goto LABEL_11;
                }
              }
              sub_1000C403C(v16, *(unsigned int *)(v13 + 12), v17, 4, v19, v14 - v15, v15);
              int v22 = *(_DWORD *)(v13 + 16);
              if (v15 < v22)
              {
                int v23 = v15;
                do
                {
                  *(_DWORD *)(*(void *)(*(void *)(v13 + 24) + 8 * (int)(v23 >> *(_DWORD *)v13))
                            + 4 * ((*(_DWORD *)(v13 + 4) - 1) & v23)) = *(_DWORD *)(*(void *)(*(void *)(v13 + 24)
                                                                                                + 8
                                                                                                * (int)((v23 + 1) >> *(_DWORD *)v13))
                                                                                    + 4
                                                                                    * ((*(_DWORD *)(v13 + 4) - 1) & (v23 + 1)))
                                                                        - v21;
                  int v22 = *(_DWORD *)(v13 + 16);
                  ++v23;
                }
                while (v23 < v22);
              }
              *(_DWORD *)(v13 + 16) = v22 - 1;
              sub_1000C403C(*(void **)(v13 + 128), *(unsigned int *)(v13 + 44), *(_DWORD *)(v13 + 36), 2, v21 + v20, *(_DWORD *)(v13 + 48) - v20, v20);
              *(_DWORD *)(v13 + 48) -= v21;
              int v14 = *(_DWORD *)(v13 + 16);
            }
            while (v15 < v14);
          }
LABEL_20:
          if (*(void *)(a1 + 72))
          {
            if (v14 < 1)
            {
              int v24 = 0;
            }
            else
            {
              int v24 = 0;
              int v25 = 0;
              int v26 = *(uint64_t **)a1;
              unsigned __int16 v27 = -1;
              do
              {
                unsigned int v28 = *(_DWORD *)(*(void *)(*(void *)(v13 + 24) + 8 * (v25 >> *(_DWORD *)v13))
                                + 4 * ((*(_DWORD *)(v13 + 4) + 0x7FFFFFFF) & v25));
                int v29 = *(unsigned __int16 *)(*(void *)(*(void *)(v13 + 128)
                                                      + 8 * (int)(v28 >> *(_DWORD *)(v13 + 32)))
                                          + 2 * (int)((*(_DWORD *)(v13 + 36) - 1) & v28));
                if (v29 != v27)
                {
                  unsigned int v30 = sub_1000BD980((uint64_t)v26, *(unsigned __int16 *)(*(void *)(*(void *)(v13 + 128)+ 8 * (int)(v28 >> *(_DWORD *)(v13 + 32)))+ 2 * (int)((*(_DWORD *)(v13 + 36) - 1) & v28)));
                  v24 += sub_1000B5C44(v26, v30);
                  int v14 = *(_DWORD *)(v13 + 16);
                  unsigned __int16 v27 = v29;
                }
                ++v25;
              }
              while (v25 < v14);
            }
            uint64_t v31 = qword_100101CC0;
            if (qword_100101CC0) {
              uint64_t v31 = *(void *)(qword_100101CC0 + 1272);
            }
            *(_DWORD *)(v13 + 180) = v31 <= v24;
            if (v31 > v24)
            {
              uint64_t v32 = *(void *)(*(void *)(a1 + 72) + 8 * v12);
              uint64_t v33 = *(_DWORD **)(v32 + 8 * v10);
              if (v33)
              {
                sub_100061280(v33);
                *(void *)(v32 + 8 * v10) = 0;
              }
            }
          }
        }
      }
    }
    while (v10++ < *(_DWORD *)(a1 + 32));
  }
  return 1;
}

uint64_t sub_100033EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 132))
  {
    sub_1000315AC(a1, a2, a3, a4, a5, a6, a7, a8);
    if (*(_DWORD *)(a1 + 132)) {
      sub_1000315AC(a1, v10, v11, a4, a5, a6, a7, a8);
    }
  }
  int v12 = *(_DWORD *)(a1 + 32);
  if (v12 < 1) {
    goto LABEL_17;
  }
  LODWORD(v13) = 0;
  do
  {
    uint64_t v13 = (v13 + 1);
    uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (v13 >> 8)) + 8 * v13);
    if (v14 && *(_DWORD *)(v14 + 180))
    {
      sub_1000356A8(a1, v13, a2, a4, a5, a6, a7, a8);
      int v12 = *(_DWORD *)(a1 + 32);
    }
  }
  while ((int)v13 < v12);
  if (v12 < 1)
  {
LABEL_17:
    uint64_t v19 = *(void *)(a1 + 120);
    if (!v19) {
      return 1;
    }
    if (*(_DWORD *)(v19 + 8) <= v12)
    {
      uint64_t result = sub_1000C33A0(4 * (v12 + 1));
      if (!result) {
        return result;
      }
      uint64_t v20 = result;
      j__memmove((void *)result, *(const void **)v19, 4 * *(int *)(v19 + 8));
      uint64_t v21 = *(int *)(v19 + 8);
      if (v12 >= (int)v21)
      {
        uint64_t v22 = *(int *)(v19 + 8);
        if (v12 == v21) {
          goto LABEL_25;
        }
        uint64_t v23 = (v12 - v21) + 1;
        uint64_t v22 = (v23 & 0x1FFFFFFFELL) + v21;
        int v24 = (_WORD *)(v20 + 4 * v21 + 4);
        uint64_t v25 = v23 & 0x1FFFFFFFELL;
        do
        {
          *(v24 - 2) = 0;
          *int v24 = 0;
          v24 += 4;
          v25 -= 2;
        }
        while (v25);
        if (v23 != (v23 & 0x1FFFFFFFELL))
        {
LABEL_25:
          int v26 = v12 - v22 + 1;
          unsigned __int16 v27 = (_WORD *)(v20 + 4 * v22);
          do
          {
            *unsigned __int16 v27 = 0;
            v27 += 2;
            --v26;
          }
          while (v26);
        }
      }
      sub_1000C321C(*(void *)v19);
      *(void *)uint64_t v19 = v20;
      *(_DWORD *)(v19 + 8) = v12 + 1;
      uint64_t v19 = *(void *)(a1 + 120);
    }
    BOOL v28 = !v19 || qword_100101CC0 == 0;
    if (v28 || !*(_DWORD *)(qword_100101CC0 + 4608)) {
      return 1;
    }
    if (*(int *)(v19 + 8) >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      do
      {
        *(_WORD *)(*(void *)v19 + v29) = 0;
        ++v30;
        v29 += 4;
      }
      while (v30 < *(int *)(v19 + 8));
    }
    uint64_t result = 1;
    *(_DWORD *)(v19 + 40) = 1;
  }
  else
  {
    int v15 = 0;
    while (1)
    {
      ++v15;
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (v15 >> 8)) + 8 * v15);
      if (v16)
      {
        *(_WORD *)(v16 + 96) = -1;
        uint64_t v17 = *(void *)(v16 + 56);
        if (v17)
        {
          uint64_t result = sub_10005F3F8(v17, *(_DWORD *)(v16 + 64));
          if (!result) {
            break;
          }
        }
      }
      int v12 = *(_DWORD *)(a1 + 32);
      if (v15 >= v12) {
        goto LABEL_17;
      }
    }
  }
  return result;
}

uint64_t sub_1000340F4(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned int *a4, int *a5, BOOL *a6)
{
  unsigned int v36 = 0;
  uint64_t result = sub_1000BD964(*a1, a3, &v36);
  int v12 = *(int **)(*(void *)(a1[5] + 8 * (a2 >> 8)) + 8 * a2);
  int v13 = v12[4];
  if (v13 <= 0)
  {
    unsigned int v14 = 0;
    uint64_t v16 = *((void *)v12 + 3);
    int v17 = *v12;
    int v18 = v12[1] - 1;
  }
  else
  {
    unsigned int v14 = 0;
    int v15 = v13 - 1;
    uint64_t v16 = *((void *)v12 + 3);
    int v17 = *v12;
    int v18 = v12[1] - 1;
    do
    {
      int v19 = v14 + v15;
      if ((int)(v14 + v15) < 0 != __OFADD__(v14, v15)) {
        ++v19;
      }
      unsigned int v20 = v19 >> 1;
      unsigned int v21 = *(_DWORD *)(*(void *)(v16 + 8 * (int)(v20 >> v17)) + 4 * (int)(v20 & v18));
      if (*(unsigned __int16 *)(*(void *)(*((void *)v12 + 16) + 8 * (int)(v21 >> v12[8]))
                               + 2 * (int)(v21 & (v12[9] - 1))) >= result)
        int v15 = v20 - 1;
      else {
        unsigned int v14 = v20 + 1;
      }
    }
    while ((int)v14 <= v15);
  }
  int v22 = *(_DWORD *)(*(void *)(v16 + 8 * (int)(v14 >> v17)) + 4 * (int)(v14 & v18));
  *a4 = v14;
  uint64_t v23 = *((void *)v12 + 3);
  int v24 = *v12;
  int v25 = v12[1] - 1;
  unsigned int v26 = *(_DWORD *)(*(void *)(v23 + 8 * (int)((v14 + 1) >> *v12)) + 4 * (int)(v25 & (v14 + 1)));
  BOOL v27 = v26 - v22 == 1;
  signed int v28 = v12[4];
  if ((int)(v14 + 1) >= v28)
  {
    int v33 = 1;
  }
  else
  {
    int v29 = 0;
    uint64_t v30 = *((void *)v12 + 16);
    int v31 = v12[8];
    int v32 = v12[9] - 1;
    int v33 = v28 - v14;
    unsigned int v34 = v14 + 2;
    while (*(unsigned __int16 *)(*(void *)(v30 + 8 * (int)(v26 >> v31)) + 2 * (int)(v26 & v32)) == result)
    {
      unsigned int v35 = *(_DWORD *)(*(void *)(v23 + 8 * (int)((v34 + v29) >> v24)) + 4 * (int)((v34 + v29) & v25));
      if (v35 - v26 == 1) {
        BOOL v27 = 1;
      }
      ++v29;
      unsigned int v26 = v35;
      if (v33 - 1 == v29) {
        goto LABEL_20;
      }
    }
    int v33 = v29 + 1;
  }
LABEL_20:
  *a6 = v27;
  *a5 = v33;
  return result;
}

BOOL sub_1000342B4(uint64_t a1)
{
  if (*(void *)(a1 + 120)) {
    return 1;
  }
  if (!qword_100101CC0) {
    return 1;
  }
  uint64_t v2 = *(void *)(qword_100101CC0 + 4032);
  if (v2 < 1) {
    return 1;
  }
  uint64_t v4 = *(int *)(a1 + 32);
  uint64_t v5 = sub_1000C33A0(48);
  if (v5)
  {
    uint64_t v6 = v5;
    *(_DWORD *)(v5 + 8) = v4 + 1;
    uint64_t v7 = sub_1000C33A0(4 * (v4 + 1));
    *(void *)uint64_t v6 = v7;
    if (v7)
    {
      uint64_t v8 = sub_1000C33A0(2 * (int)v2);
      *(void *)(v6 + 16) = v8;
      if (v8)
      {
        *(_DWORD *)(v6 + 24) = v2;
        uint64_t v9 = sub_1000C33A0(2 * (int)v2);
        *(void *)(v6 + 32) = v9;
        if (v9)
        {
          *(_DWORD *)(v6 + 40) = 1;
          *(void *)(a1 + 120) = v6;
          return *(void *)(a1 + 120) != 0;
        }
        sub_1000C321C(*(void *)(v6 + 16));
      }
      sub_1000C321C(*(void *)v6);
    }
    sub_1000C321C(v6);
  }
  return *(void *)(a1 + 120) != 0;
}

uint64_t sub_10003439C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 120) + 16);
}

uint64_t sub_1000343A8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 120) + 32);
}

uint64_t sub_1000343B4(uint64_t a1, int a2)
{
  return **(void **)(a1 + 120) + 4 * a2;
}

uint64_t sub_1000343C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = result;
  uint64_t v52 = a3 >> 8;
  int v54 = a3;
  uint64_t v51 = a3;
  while (1)
  {
    uint64_t v10 = *(void *)(v9 + 120);
    int v11 = *(_DWORD *)(v9 + 132);
    if (v11)
    {
      uint64_t result = sub_1000315AC(v9, a2, a3, a4, a5, a6, a7, a8);
      int v11 = *(_DWORD *)(v9 + 132);
    }
    uint64_t v12 = *(int *)(v10 + 40);
    uint64_t v55 = *(void *)(v10 + 16) + 2 * v12;
    uint64_t v13 = *(void *)(v10 + 32);
    int v14 = *(_DWORD *)(v10 + 24);
    uint64_t v53 = v10;
    if (v11 == v54 && (uint64_t result = sub_1000315AC(v9, a2, a3, a4, a5, a6, a7, a8), !result)
      || (uint64_t v15 = *(void *)(*(void *)(*(void *)(v9 + 40) + 8 * v52) + 8 * v51)) == 0)
    {
      unsigned int v20 = (int16x8_t *)v55;
      goto LABEL_46;
    }
    int v16 = *(_DWORD *)(v15 + 16);
    if (v16 >= 1) {
      break;
    }
    unsigned int v22 = 0;
    unsigned int v20 = (int16x8_t *)v55;
LABEL_38:
    if (v22 == v16) {
      goto LABEL_46;
    }
LABEL_41:
    uint64_t v46 = *(void *)(v9 + 120);
    if (*(int *)(v46 + 8) >= 1)
    {
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      do
      {
        *(_WORD *)(*(void *)v46 + v47) = 0;
        ++v48;
        v47 += 4;
      }
      while (v48 < *(int *)(v46 + 8));
    }
    *(_DWORD *)(v46 + 40) = 1;
  }
  unsigned int v17 = 0;
  int v18 = (int16x8_t *)(v13 + 2 * v12);
  int v19 = v14 - v12;
  unsigned int v20 = (int16x8_t *)v55;
  while (1)
  {
    uint64_t v24 = *(void *)(v15 + 24);
    int v25 = *(_DWORD *)(v15 + 4) - 1;
    unsigned int v22 = v17 + 1;
    int v26 = *(_DWORD *)(*(void *)(v24 + 8 * (int)(v22 >> *(_DWORD *)v15)) + 4 * (int)(v25 & v22));
    unsigned int v27 = *(_DWORD *)(*(void *)(v24 + 8 * (int)(v17 >> *(_DWORD *)v15)) + 4 * (int)(v25 & v17));
    int v28 = v26 - v27;
    if ((int)(v26 - v27) < 1) {
      break;
    }
    uint64_t result = sub_10001FAFC(a2, *(unsigned __int16 *)(*(void *)(*(void *)(v15 + 128) + 8 * (int)(v27 >> *(_DWORD *)(v15 + 32)))+ 2 * (int)((*(_DWORD *)(v15 + 36) - 1) & v27)), v20, v19);
    BOOL v29 = __OFSUB__(v19, result);
    v19 -= result;
    if (v19 < 0 != v29) {
      goto LABEL_40;
    }
LABEL_18:
    unsigned int v30 = v17 | 0x8000;
    if (v28 != 1) {
      unsigned int v30 = v17;
    }
    if ((int)result < 1) {
      goto LABEL_28;
    }
    if (result >= 0x10)
    {
      uint64_t v31 = result & 0x7FFFFFF0;
      int16x8_t v32 = vdupq_n_s16(v30);
      int v33 = v18 + 1;
      uint64_t v34 = result & 0xFFFFFFF0;
      do
      {
        v33[-1] = v32;
        *int v33 = v32;
        v33 += 2;
        v34 -= 16;
      }
      while (v34);
      if (v31 == result) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v31 = 0;
    }
    unsigned int v35 = &v18->i16[v31];
    uint64_t v36 = result - v31;
    do
    {
      *v35++ = v30;
      --v36;
    }
    while (v36);
LABEL_28:
    if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1172))
    {
      uint64_t v37 = *(void *)(v15 + 24);
      int v38 = *(_DWORD *)(v15 + 4) - 1;
      unsigned int v39 = *(_DWORD *)(*(void *)(v37 + 8 * (int)(v17 >> *(_DWORD *)v15)) + 4 * (int)(v38 & v17));
      if ((int)(*(_DWORD *)(*(void *)(v37 + 8 * (int)(v22 >> *(_DWORD *)v15)) + 4 * (int)(v38 & v22)) - v39) >= 2)
      {
        signed int v40 = *(_DWORD *)(v15 + 16);
        if ((int)v22 < v40)
        {
          uint64_t v41 = *(void *)(v15 + 128);
          int v42 = *(_DWORD *)(v15 + 32);
          int v43 = *(_DWORD *)(v15 + 36) - 1;
          int v44 = *(unsigned __int16 *)(*(void *)(v41 + 8 * (int)(v39 >> v42)) + 2 * (int)(v43 & v39));
          while (1)
          {
            unsigned int v45 = *(_DWORD *)(*(void *)(v37 + 8 * (int)(v22 >> *(_DWORD *)v15)) + 4 * (int)(v22 & v38));
            if (*(unsigned __int16 *)(*(void *)(v41 + 8 * (int)(v45 >> v42)) + 2 * (int)(v45 & v43)) != v44) {
              break;
            }
            if (v40 == ++v22)
            {
              unsigned int v22 = *(_DWORD *)(v15 + 16);
              break;
            }
          }
        }
        unsigned int v21 = v22 + ~v17;
      }
      else
      {
        unsigned int v21 = 0;
      }
      unsigned int v22 = v21 + v17 + 1;
    }
    uint64_t v23 = 2 * (int)result;
    unsigned int v20 = (int16x8_t *)((char *)v20 + v23);
    int v18 = (int16x8_t *)((char *)v18 + v23);
    unsigned int v17 = v22;
    if ((int)v22 >= v16) {
      goto LABEL_38;
    }
  }
  uint64_t result = sub_10001FAFC(a2, 0xFFFFu, v20, v19);
  BOOL v29 = __OFSUB__(v19, result);
  v19 -= result;
  if (v19 < 0 == v29) {
    goto LABEL_18;
  }
LABEL_40:
  if (v17 != v16) {
    goto LABEL_41;
  }
LABEL_46:
  long long v49 = (_WORD *)(*(void *)v53 + 4 * v54);
  *long long v49 = *(_DWORD *)(v53 + 40);
  unint64_t v50 = ((unint64_t)v20 - v55) >> 1;
  v49[1] = v50;
  *(_DWORD *)(v53 + 40) = (unsigned __int16)(*(_DWORD *)(v53 + 40) + v50);
  return result;
}

uint64_t sub_100034724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2;
  int v10 = *(_DWORD *)(a1 + 132);
  if (v10)
  {
    sub_1000315AC(a1, a2, a3, a4, a5, a6, a7, a8);
    int v10 = *(_DWORD *)(a1 + 132);
  }
  uint64_t v11 = *(void *)(a1 + 120);
  if (v10 != v8 || (uint64_t result = sub_1000315AC(a1, a2, a3, a4, a5, a6, a7, a8), result))
  {
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (v8 >> 8)) + 8 * v8);
    if (v13 && (int v14 = *(_DWORD *)(v13 + 16), v14 >= 1))
    {
      int v15 = 0;
      unsigned int v16 = 0;
      unsigned int v17 = *(uint64_t **)a1;
      while (1)
      {
        uint64_t v20 = *(void *)(v13 + 24);
        int v21 = *(_DWORD *)(v13 + 4) - 1;
        unsigned int v19 = v16 + 1;
        int v22 = *(_DWORD *)(*(void *)(v20 + 8 * (int)(v19 >> *(_DWORD *)v13)) + 4 * (int)(v21 & v19));
        unsigned int v23 = *(_DWORD *)(*(void *)(v20 + 8 * (int)(v16 >> *(_DWORD *)v13)) + 4 * (int)(v21 & v16));
        unsigned int v24 = v22 <= (int)v23
            ? 0xFFFF
            : *(unsigned __int16 *)(*(void *)(*(void *)(v13 + 128) + 8 * (int)(v23 >> *(_DWORD *)(v13 + 32)))
                                  + 2 * (int)((*(_DWORD *)(v13 + 36) - 1) & v23));
        unsigned int v25 = sub_1000BD980((uint64_t)v17, v24);
        v15 += sub_1000B5C44(v17, v25);
        if (v15 >= *(_DWORD *)(v11 + 24)) {
          return 0;
        }
        if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1172))
        {
          uint64_t v26 = *(void *)(v13 + 24);
          int v27 = *(_DWORD *)(v13 + 4) - 1;
          unsigned int v28 = *(_DWORD *)(*(void *)(v26 + 8 * (int)(v16 >> *(_DWORD *)v13)) + 4 * (int)(v27 & v16));
          if ((int)(*(_DWORD *)(*(void *)(v26 + 8 * (int)(v19 >> *(_DWORD *)v13)) + 4 * (int)(v27 & v19)) - v28) >= 2)
          {
            signed int v29 = *(_DWORD *)(v13 + 16);
            if ((int)v19 < v29)
            {
              uint64_t v30 = *(void *)(v13 + 128);
              int v31 = *(_DWORD *)(v13 + 32);
              int v32 = *(_DWORD *)(v13 + 36) - 1;
              int v33 = *(unsigned __int16 *)(*(void *)(v30 + 8 * (int)(v28 >> v31)) + 2 * (int)(v32 & v28));
              while (1)
              {
                unsigned int v34 = *(_DWORD *)(*(void *)(v26 + 8 * (int)(v19 >> *(_DWORD *)v13)) + 4 * (int)(v19 & v27));
                if (*(unsigned __int16 *)(*(void *)(v30 + 8 * (int)(v34 >> v31)) + 2 * (int)(v34 & v32)) != v33) {
                  break;
                }
                if (v29 == ++v19)
                {
                  unsigned int v19 = *(_DWORD *)(v13 + 16);
                  break;
                }
              }
            }
            unsigned int v18 = v19 + ~v16;
          }
          else
          {
            unsigned int v18 = 0;
          }
          unsigned int v19 = v18 + v16 + 1;
        }
        unsigned int v16 = v19;
        if ((int)v19 >= v14) {
          return 1;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

char *sub_100034938()
{
  if (++aAaaaaaaa[8] >= 123)
  {
    aAaaaaaaa[8] = 97;
    if (++aAaaaaaaa[7] >= 123)
    {
      aAaaaaaaa[7] = 97;
      if (++aAaaaaaaa[6] >= 123)
      {
        aAaaaaaaa[6] = 97;
        if (++aAaaaaaaa[5] >= 123)
        {
          aAaaaaaaa[5] = 97;
          if (++aAaaaaaaa[4] >= 123)
          {
            aAaaaaaaa[4] = 97;
            if (++aAaaaaaaa[3] >= 123)
            {
              aAaaaaaaa[3] = 97;
              if (++aAaaaaaaa[2] >= 123)
              {
                aAaaaaaaa[2] = 97;
                if ((char)(aAaaaaaaa[1] + 1) < 123) {
                  char v0 = aAaaaaaaa[1] + 1;
                }
                else {
                  char v0 = 97;
                }
                aAaaaaaaa[1] = v0;
              }
            }
          }
        }
      }
    }
  }
  return aAaaaaaaa;
}

BOOL sub_100034A6C(unsigned char *a1)
{
  return *a1 == 32
      && (char)a1[1] <= 122
      && (char)a1[2] <= 122
      && (char)a1[3] <= 122
      && (char)a1[4] <= 122
      && (char)a1[5] <= 122
      && (char)a1[6] <= 122
      && (char)a1[7] <= 122
      && (char)a1[8] < 123;
}

void *sub_100034AE4(void *result, unsigned __int8 *a2, int a3, const void *a4, void *a5)
{
  if (!a3) {
    return result;
  }
  uint64_t v9 = (uint64_t)result;
  uint64_t v10 = sub_10002BD6C((uint64_t)a4, a3);
  if (v9) {
    uint64_t v18 = v9;
  }
  else {
    uint64_t v18 = v10;
  }
  if (!v18 || (uint64_t v19 = v10, v18 != v10))
  {
LABEL_19:
    return memcpy(a5, a4, 8 * a3);
  }
  uint64_t result = (void *)sub_1000315AC(v10, v11, v12, v13, v14, v15, v16, v17);
  if (!result) {
    return result;
  }
  int v20 = sub_1000CAD00((unint64_t)a2);
  int v21 = sub_1000CAD00((unint64_t)"Opt");
  if (!sub_1000CAED0(a2, "<s>") || !sub_1000CAED0(a2, "<e>"))
  {
    uint64_t v23 = 0;
    goto LABEL_18;
  }
  int v22 = *(_DWORD *)(v19 + 32);
  if (v22 < 1) {
    goto LABEL_19;
  }
  uint64_t v23 = 1;
  while (1)
  {
    uint64_t v25 = v23 >> 8;
    uint64_t v26 = *(unsigned char **)(*(void *)(*(void *)(v19 + 56) + 8 * v25) + 8 * v23);
    if (v26) {
      break;
    }
LABEL_12:
    BOOL v24 = (int)v23 < v22;
    uint64_t v23 = (v23 + 1);
    if (!v24) {
      goto LABEL_19;
    }
  }
  if (sub_1000CAED0(v26, a2))
  {
    int v22 = *(_DWORD *)(v19 + 32);
    goto LABEL_12;
  }
  if (!*(void *)(*(void *)(*(void *)(v19 + 40) + 8 * v25) + 8 * v23)) {
    goto LABEL_19;
  }
LABEL_18:
  if (*(_DWORD *)(*(void *)(*(void *)(*(void *)(v19 + 40) + 8 * (v23 >> 8))
                             + 8 * v23)
                 + 176)
    || !sub_10002BDB0(a3, (uint64_t)a4, v23))
  {
    goto LABEL_19;
  }
  int v34 = v20 + v21 + 1;
  uint64_t v35 = v34;
  uint64_t v36 = (unsigned __int8 *)sub_1000CD3E8(v34, v27, v28, v29, v30, v31, v32, v33);
  sub_1000CAD88(v36, (char *)a2, v34);
  sub_1000CAE14(v36, "Opt", v34);
  uint64_t v37 = 4 * (*(_DWORD *)(v19 + 24) + ~*(_DWORD *)(v19 + 28));
  unint64_t v45 = sub_1000CD3E8(v37, v38, v39, v40, v41, v42, v43, v44);
  uint64_t v46 = (void *)v45;
  int v47 = *(_DWORD *)(v19 + 32);
  if (v47 >= 1)
  {
    unsigned int v48 = 0;
    int v49 = 0;
    do
    {
      ++v48;
      if (*(void *)(*(void *)(*(void *)(v19 + 40) + 8 * (v48 >> 8)) + 8 * v48)) {
        *(_DWORD *)(v45 + 4 * v49++) = v48;
      }
    }
    while (v47 != v48);
  }
  uint64_t v50 = sub_1000C33A0(4 * (v47 + 1));
  *(void *)(v19 + 144) = v50;
  if (!v50)
  {
    sub_1000CD4D0(v46, v37);
    sub_1000CD4D0(v36, v34);
    goto LABEL_19;
  }
  uint64_t v55 = sub_100034F18(v19, v23, v36, &v94, v51, v52, v53, v54);
  BOOL v56 = v36;
  if (!v55)
  {
    sub_1000CD4D0(v46, v37);
    sub_1000CD4D0(v36, v35);
    sub_1000C321C(*(void *)(v19 + 144));
    *(void *)(v19 + 144) = 0;
    goto LABEL_19;
  }
  uint64_t v57 = v55;
  uint64_t v88 = v37;
  long long v89 = v56;
  uint64_t v90 = v35;
  uint64_t v92 = sub_10002B968(v55, 0, 0);
  uint64_t v87 = 4 * (int)v92;
  int v65 = (_DWORD *)sub_1000CD3E8(v87, v58, v59, v60, v61, v62, v63, v64);
  uint64_t v91 = sub_10002BA18(v57, 0, 0);
  uint64_t v86 = 4 * (int)v91;
  unsigned int v73 = (void *)sub_1000CD3E8(v86, v66, v67, v68, v69, v70, v71, v72);
  uint64_t v93 = v65;
  sub_10002B968(v57, 0, v65);
  sub_10002BA18(v57, 0, (uint64_t)v73);
  sub_100034938();
  int v74 = sub_1000CAD00((unint64_t)aAaaaaaaa) + 11;
  uint64_t v85 = v74;
  long long v82 = (unsigned __int8 *)sub_1000CD3E8(v74, v75, v76, v77, v78, v79, v80, v81);
  sub_1000CAD88(v82, aAaaaaaaa, v74);
  if (a3 >= 1)
  {
    uint64_t v83 = 0;
    do
    {
      while (sub_100025D50(*((unsigned int **)a4 + v83)) == 3)
      {
        int v84 = sub_1000CAD00((unint64_t)aAaaaaaaa);
        sprintf((char *)&v82[v84], "%d", v83);
        *((void *)a5 + v83) = sub_10002BEA8(*((void *)a4 + v83), v57, (uint64_t)v93, v92, (uint64_t)v73, v91, v19, v23, v82);
        if (a3 == ++v83) {
          goto LABEL_35;
        }
      }
      *((void *)a5 + v83) = *((void *)a4 + v83);
      ++v83;
    }
    while (a3 != v83);
  }
LABEL_35:
  sub_1000CD4D0(v82, v85);
  sub_1000CD4D0(v73, v86);
  sub_1000CD4D0(v93, v87);
  sub_1000CD4D0(v46, v88);
  sub_1000CD4D0(v89, v90);
  sub_100026244(v57);
  uint64_t result = (void *)sub_1000C321C(*(void *)(v19 + 144));
  *(void *)(v19 + 144) = 0;
  return result;
}

uint64_t sub_100034F18(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  int v12 = *(_DWORD *)(a1 + 132);
  if (v12)
  {
    sub_1000315AC(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    int v12 = *(_DWORD *)(a1 + 132);
  }
  if (v12 == a2 && !sub_1000315AC(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8)) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (a2 >> 8)) + 8 * a2);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = *(unsigned int *)(v13 + 16);
  if (!v14) {
    return 0;
  }
  if (++aAaaaaaaa[8] >= 123)
  {
    aAaaaaaaa[8] = 97;
    if (++aAaaaaaaa[7] >= 123)
    {
      aAaaaaaaa[7] = 97;
      if (++aAaaaaaaa[6] >= 123)
      {
        aAaaaaaaa[6] = 97;
        if (++aAaaaaaaa[5] >= 123)
        {
          aAaaaaaaa[5] = 97;
          if (++aAaaaaaaa[4] >= 123)
          {
            aAaaaaaaa[4] = 97;
            if (++aAaaaaaaa[3] >= 123)
            {
              aAaaaaaaa[3] = 97;
              if (++aAaaaaaaa[2] >= 123)
              {
                aAaaaaaaa[2] = 97;
                if ((char)(aAaaaaaaa[1] + 1) < 123) {
                  char v15 = aAaaaaaaa[1] + 1;
                }
                else {
                  char v15 = 97;
                }
                aAaaaaaaa[1] = v15;
              }
            }
          }
        }
      }
    }
  }
  sub_100037560(a1, 0, 0, a2, 0, 0, v14, aAaaaaaaa, (_DWORD *)&v21 + 1, (_DWORD *)&v20 + 1, (int *)&v19 + 1, 0, 0);
  int v16 = HIDWORD(v21);
  uint64_t v17 = 0;
  if (sub_1000373A0(a1, HIDWORD(v21) + *(_DWORD *)(a1 + 24)) && v16 && HIDWORD(v20))
  {
    uint64_t v17 = sub_100027004(a3, a1, v16, SHIDWORD(v20), 0);
    sub_100037560(a1, v17, 0, a2, 0, 0, v14, aAaaaaaaa, &v21, &v20, (int *)&v19, 0, 0);
    *a4 = v16;
  }
  return v17;
}

uint64_t sub_1000351A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (void *)sub_1000CD3E8(4 * *(int *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = v10;
  int64_t v12 = *(int *)(a1 + 16);
  if ((int)v12 >= 1)
  {
    for (int64_t i = 0; i < v12; ++i)
    {
      *((_DWORD *)v10 + i) = i;
      int64_t v12 = *(int *)(a1 + 16);
    }
  }
  qword_100101CE0 = a1;
  qsort(v10, v12, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1000381BC);
  int v14 = *(_DWORD *)(a1 + 16);
  int v15 = *(_DWORD *)(a1 + 48);
  if (v14 > 1)
  {
    uint64_t v16 = *(unsigned int *)(a1 + 16);
    do
    {
      uint64_t v17 = v16 - 1;
      unsigned int v18 = *((_DWORD *)v11 + (v16 - 1));
      if (!sub_1000381DC(a1, v18, *((_DWORD *)v11 + (v16 - 2)), 0))
      {
        --v14;
        int v15 = v15
            - *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8 * (int)((v18 + 1) >> *(_DWORD *)a1))
                        + 4 * (int)((*(_DWORD *)(a1 + 4) - 1) & (v18 + 1)))
            + *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8 * (int)(v18 >> *(_DWORD *)a1))
                        + 4 * (int)((*(_DWORD *)(a1 + 4) - 1) & v18));
        *((_DWORD *)v11 + v17) = -1;
      }
      uint64_t v16 = v17;
    }
    while ((unint64_t)(v17 + 1) > 2);
  }
  if (*(_DWORD *)(a2 + 12))
  {
    uint64_t v19 = (signed int *)(a2 + 44);
    if (*(_DWORD *)(a2 + 44)) {
      goto LABEL_11;
    }
LABEL_14:
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 44);
    if (!*(_DWORD *)(a2 + 152)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 12);
  uint64_t v19 = (signed int *)(a2 + 44);
  if (!*(_DWORD *)(a2 + 44)) {
    goto LABEL_14;
  }
LABEL_11:
  if (!*(_DWORD *)(a2 + 152))
  {
LABEL_16:
    if (*(_DWORD *)(a2 + 172)) {
      goto LABEL_17;
    }
LABEL_33:
    *(_DWORD *)(a2 + 168) = *(_DWORD *)(a1 + 172);
    if (sub_100037498(a2, v14)) {
      goto LABEL_18;
    }
LABEL_34:
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 168) = 0;
    goto LABEL_35;
  }
LABEL_15:
  if (*(_DWORD *)(a2 + 148)) {
    goto LABEL_16;
  }
  *(_DWORD *)(a2 + 144) = *(_DWORD *)(a1 + 148);
  if (!*(_DWORD *)(a2 + 172)) {
    goto LABEL_33;
  }
LABEL_17:
  if (!sub_100037498(a2, v14)) {
    goto LABEL_34;
  }
LABEL_18:
  if (v15 == 0x7FFFFFFF
    || !sub_1000C3A90((const void **)(a2 + 128), (int *)(a2 + 40), v19, *(_DWORD *)(a2 + 32), 2, v15))
  {
    *(void *)(a2 + 40) = 0;
LABEL_35:
    sub_1000CD4D0(v11, 4 * *(int *)(a1 + 16));
    return 0;
  }
  int v20 = *(_DWORD *)(a1 + 16);
  if (v20 < 1)
  {
    unsigned int v23 = 0;
    unsigned int v22 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    do
    {
      if (*((_DWORD *)v11 + v21) != -1)
      {
        *(_DWORD *)(*(void *)(*(void *)(a2 + 24) + 8 * (int)(v23 >> *(_DWORD *)a2))
                  + 4 * (int)((*(_DWORD *)(a2 + 4) - 1) & v23)) = v22;
        if (*(_DWORD *)(a2 + 152)) {
          *(unsigned char *)(*(void *)(*(void *)(a2 + 136) + 8 * (int)(v23 >> *(_DWORD *)a2))
        }
                   + ((*(int *)(a2 + 4) - 1) & (int)v23)) = *(unsigned char *)(*(void *)(*(void *)(a1 + 136)
                                                                                   + 8
                                                                                   * (int)(*((_DWORD *)v11 + v21) >> *(_DWORD *)a1))
                                                                       + ((*(int *)(a1 + 4) - 1) & *((int *)v11 + v21)));
        *(_DWORD *)(*(void *)(*(void *)(a2 + 160) + 8 * (int)(v23 >> *(_DWORD *)a2))
                  + 4 * (int)((*(_DWORD *)(a2 + 4) - 1) & v23)) = *(_DWORD *)(*(void *)(*(void *)(a1 + 160)
                                                                                          + 8
                                                                                          * (int)(*((_DWORD *)v11 + v21) >> *(_DWORD *)a1))
                                                                              + 4
                                                                              * ((*(_DWORD *)(a1 + 4) - 1) & *((_DWORD *)v11 + v21)));
        unsigned int v24 = *((_DWORD *)v11 + v21);
        uint64_t v25 = *(void *)(a1 + 24);
        int v26 = *(_DWORD *)(a1 + 4) - 1;
        unsigned int v27 = *(_DWORD *)(*(void *)(v25 + 8 * (int)(v24 >> *(_DWORD *)a1)) + 4 * (int)(v26 & v24));
        int v28 = *(_DWORD *)(*(void *)(v25 + 8 * (int)((v24 + 1) >> *(_DWORD *)a1)) + 4 * (int)(v26 & (v24 + 1)));
        if (v28 > (int)v27)
        {
          unsigned int v29 = v22 + v28 - v27;
          do
          {
            *(_WORD *)(*(void *)(*(void *)(a2 + 128) + 8 * (int)(v22 >> *(_DWORD *)(a2 + 32)))
                     + 2 * (int)((*(_DWORD *)(a2 + 36) - 1) & v22)) = *(_WORD *)(*(void *)(*(void *)(a1 + 128)
                                                                                             + 8
                                                                                             * (int)(v27 >> *(_DWORD *)(a1 + 32)))
                                                                                 + 2
                                                                                 * (int)((*(_DWORD *)(a1 + 36) - 1) & v27));
            ++v22;
            ++v27;
          }
          while (v28 != v27);
          unsigned int v22 = v29;
        }
        ++v23;
        int v20 = *(_DWORD *)(a1 + 16);
      }
      ++v21;
    }
    while (v21 < v20);
  }
  *(_DWORD *)(*(void *)(*(void *)(a2 + 24) + 8 * (int)(v23 >> *(_DWORD *)a2))
            + 4 * (int)((*(_DWORD *)(a2 + 4) - 1) & v23)) = v22;
  sub_1000CD4D0(v11, 4 * *(int *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = v14;
  *(_DWORD *)(a2 + 48) = v15;
  return 1;
}

void *sub_100035588(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (a3 >> 8)) + 8 * a3);
  uint64_t v5 = *(uint64_t **)a1;
  int v24 = 0;
  uint64_t v6 = sub_1000B5108((uint64_t)v5);
  int v7 = sub_1000B5200(v5);
  uint64_t v23 = 2 * v7;
  int v15 = (int16x8_t *)sub_1000CD3E8(v23, v8, v9, v10, v11, v12, v13, v14);
  int v16 = *(_DWORD *)(v4 + 48);
  if (v16 >= 1)
  {
    for (unsigned int i = 0; i != v16; ++i)
    {
      int v18 = sub_10001FAFC(v6, *(unsigned __int16 *)(*(void *)(*(void *)(v4 + 128) + 8 * (i >> *(_DWORD *)(v4 + 32)))+ 2 * ((*(_DWORD *)(v4 + 36) + 0x7FFFFFFF) & i)), v15, v7);
      if (v18 >= 1)
      {
        uint64_t v19 = v18;
        int v20 = v15;
        do
        {
          unsigned int v21 = v20->u16[0];
          int v20 = (int16x8_t *)((char *)v20 + 2);
          sub_10009D254(a2, v21, 0, 0, &v24);
          --v19;
        }
        while (v19);
      }
    }
  }
  uint64_t result = sub_1000CD4D0(v15, v23);
  *(_DWORD *)(v4 + 184) = 0;
  return result;
}

uint64_t sub_1000356A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  unsigned int v9 = a2;
  uint64_t v10 = result;
  if (*(_DWORD *)(result + 132)) {
    uint64_t result = sub_1000315AC(result, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v11 = v9 >> 8;
  uint64_t v12 = *(void *)(*(void *)(*(void *)(v10 + 40) + 8 * v11) + 8 * v9);
  *(_DWORD *)(v12 + 180) = 0;
  uint64_t v13 = *(void *)(v10 + 72);
  if (v13)
  {
    unsigned int v14 = *(_DWORD *)(*(void *)(*(void *)(v10 + 104) + 8 * v11) + 4 * v9);
    if (!v14) {
      unsigned int v14 = v9;
    }
    uint64_t v15 = *(void *)(v13 + 8 * (v14 >> 8));
    uint64_t v16 = v14;
    if (*(void *)(v15 + 8 * v14))
    {
      uint64_t v39 = *(_DWORD **)(v15 + 8 * v14);
      int v17 = *(_DWORD *)(v12 + 16);
      if (v17 >= 1) {
        goto LABEL_8;
      }
      goto LABEL_17;
    }
    uint64_t v25 = qword_100101CC0;
    if (qword_100101CC0) {
      uint64_t v25 = *(void *)(qword_100101CC0 + 1528);
    }
    if (v25 > *(int *)(v10 + 128))
    {
      uint64_t result = sub_100061250();
      if (result)
      {
        *(void *)(v15 + 8 * v16) = result;
        ++*(_DWORD *)(v10 + 128);
        uint64_t v39 = *(_DWORD **)(v15 + 8 * v16);
        int v17 = *(_DWORD *)(v12 + 16);
        if (v17 >= 1)
        {
LABEL_8:
          uint64_t v18 = 0;
          int v19 = 0;
          int v20 = *(uint64_t **)v10;
          unsigned __int16 v21 = -1;
          do
          {
            unsigned int v22 = *(_DWORD *)(*(void *)(*(void *)(v12 + 24) + 8 * (v19 >> *(_DWORD *)v12))
                            + 4 * ((*(_DWORD *)(v12 + 4) + 0x7FFFFFFF) & v19));
            int v23 = *(unsigned __int16 *)(*(void *)(*(void *)(v12 + 128) + 8 * (int)(v22 >> *(_DWORD *)(v12 + 32)))
                                      + 2 * (int)((*(_DWORD *)(v12 + 36) - 1) & v22));
            if (v23 != v21)
            {
              unsigned int v24 = sub_1000BD980((uint64_t)v20, *(unsigned __int16 *)(*(void *)(*(void *)(v12 + 128)+ 8 * (int)(v22 >> *(_DWORD *)(v12 + 32)))+ 2 * (int)((*(_DWORD *)(v12 + 36) - 1) & v22)));
              uint64_t v18 = sub_1000B5C44(v20, v24) + v18;
              int v17 = *(_DWORD *)(v12 + 16);
              unsigned __int16 v21 = v23;
            }
            ++v19;
          }
          while (v19 < v17);
          goto LABEL_18;
        }
LABEL_17:
        uint64_t v18 = 0;
LABEL_18:
        int v26 = (unsigned __int16 *)sub_1000CD3E8(2 * (int)v18, a2, a3, a4, a5, a6, a7, a8);
        unsigned int v27 = *(uint64_t **)v10;
        int v28 = *(_DWORD *)(v12 + 16);
        if (v28 >= 1)
        {
          uint64_t v36 = v8;
          uint64_t v37 = v16;
          uint64_t v38 = v15;
          int v29 = 0;
          int v30 = 0;
          unsigned __int16 v31 = -1;
          do
          {
            unsigned int v32 = *(_DWORD *)(*(void *)(*(void *)(v12 + 24) + 8 * (v30 >> *(_DWORD *)v12))
                            + 4 * ((*(_DWORD *)(v12 + 4) + 0x7FFFFFFF) & v30));
            int v33 = *(unsigned __int16 *)(*(void *)(*(void *)(v12 + 128) + 8 * (int)(v32 >> *(_DWORD *)(v12 + 32)))
                                      + 2 * (int)((*(_DWORD *)(v12 + 36) - 1) & v32));
            if (v33 != v31)
            {
              unsigned int v34 = sub_1000BD980((uint64_t)v27, *(unsigned __int16 *)(*(void *)(*(void *)(v12 + 128)+ 8 * (int)(v32 >> *(_DWORD *)(v12 + 32)))+ 2 * (int)((*(_DWORD *)(v12 + 36) - 1) & v32)));
              v29 += sub_1000B594C((uint64_t)v27, v34, (int16x8_t *)&v26[v29], (int)v18 - v29);
              int v28 = *(_DWORD *)(v12 + 16);
              unsigned __int16 v31 = v33;
            }
            ++v30;
          }
          while (v30 < v28);
          unsigned int v27 = *(uint64_t **)v10;
          uint64_t v16 = v37;
          uint64_t v15 = v38;
          uint64_t v8 = v36;
        }
        int v35 = sub_100062588((uint64_t)v39, v26, v18, v27, *(void *)(v10 + 8), 0, 1, 1, 0, v8);
        sub_1000CD4D0(v26, 2 * (int)v18);
        if (!v35 || (uint64_t result = sub_100064220((uint64_t)v39), (int)result >= 2))
        {
          uint64_t result = sub_100061280(v39);
          *(void *)(v15 + 8 * v16) = 0;
          --*(_DWORD *)(v10 + 128);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100035970(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  uint64_t v10 = result;
  if (*(_DWORD *)(result + 132)) {
    uint64_t result = sub_1000315AC(result, a2, a3, a4, a5, a6, a7, a8);
  }
  int v11 = *(_DWORD *)(v10 + 32);
  if (v11 >= 1)
  {
    if (v8)
    {
      unsigned int v12 = 0;
      do
      {
        ++v12;
        if (*(void *)(*(void *)(*(void *)(v10 + 40) + 8 * (v12 >> 8)) + 8 * v12))
        {
          uint64_t result = (uint64_t)sub_100035588(v10, a2, v12);
          int v11 = *(_DWORD *)(v10 + 32);
        }
      }
      while ((int)v12 < v11);
    }
    else
    {
      do
      {
        ++v8;
        uint64_t v13 = *(void *)(*(void *)(*(void *)(v10 + 40) + 8 * (v8 >> 8)) + 8 * v8);
        if (v13 && *(_DWORD *)(v13 + 184))
        {
          uint64_t result = (uint64_t)sub_100035588(v10, a2, v8);
          int v11 = *(_DWORD *)(v10 + 32);
        }
      }
      while ((int)v8 < v11);
    }
  }
  return result;
}

BOOL sub_100035A48(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!sub_1000315AC(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 132)) {
    sub_1000315AC(a1, v11, v12, v13, v14, v15, v16, v17);
  }
  int v18 = *(_DWORD *)(a1 + 32);
  if (v18 >= 1)
  {
    LODWORD(v19) = 0;
    do
    {
      uint64_t v19 = (v19 + 1);
      uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (v19 >> 8)) + 8 * v19);
      if (v20 && *(_DWORD *)(v20 + 180))
      {
        sub_1000356A8(a1, v19, 0, v13, v14, v15, v16, v17);
        int v18 = *(_DWORD *)(a1 + 32);
      }
    }
    while ((int)v19 < v18);
  }
  uint64_t v21 = sub_1000BFC50(a2, "bcm1", a3);
  if (!v21 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a1 + 64)) {
    return 0;
  }
  uint64_t v23 = v21;
  if (!sub_1000BFD58(v21, *(_DWORD *)(a1 + 24), v22)
    || !sub_1000BFD58(v23, *(_DWORD *)(a1 + 28), v24)
    || !sub_1000BFD58(v23, *(_DWORD *)(a1 + 32), v25)
    || !sub_1000BFD58(v23, *(_DWORD *)(a1 + 48), v26)
    || !sub_1000BFD58(v23, *(_DWORD *)(a1 + 52), v27)
    || !sub_1000BFD58(v23, *(_DWORD *)(a1 + 80), v28)
    || !sub_1000BFD58(v23, *(_DWORD *)(a1 + 84), v29)
    || !sub_1000BFD58(v23, *(_DWORD *)(a1 + 96), v30)
    || !sub_1000BFD58(v23, *(_DWORD *)(a1 + 100), v31)
    || !sub_1000BFD58(v23, *(_DWORD *)(a1 + 112), v32)
    || !sub_1000BFD58(v23, *(_DWORD *)(a1 + 116), v33)
    || (uint64_t v35 = *(void *)(a1 + 72), !sub_1000BFD58(v23, v35 != 0, v34))
    || !sub_1000BFFFC(v23, *(void ***)(a1 + 88), *(_DWORD *)(a1 + 100), 0x100u, 4, v36)
    || !sub_1000BFFFC(v23, *(void ***)(a1 + 104), *(_DWORD *)(a1 + 116), 0x100u, 4, v37))
  {
    BOOL v41 = 0;
    goto LABEL_32;
  }
  int v39 = *(_DWORD *)(a1 + 32);
  if (v39 < 1)
  {
    int v43 = 1;
    goto LABEL_53;
  }
  unsigned int v40 = 1;
  while (1)
  {
    uint64_t v45 = v40 >> 8;
    uint64_t v46 = *(void *)(*(void *)(a1 + 56) + 8 * v45);
    uint64_t v47 = v40;
    unint64_t v48 = *(void *)(v46 + 8 * v47);
    if (v48)
    {
      uint64_t v49 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (v40 >> 8)) + 8 * v40);
      if (!v49 || *(_DWORD *)(v49 + 208)) {
        break;
      }
    }
    if (!sub_1000BFD58(v23, 0, v38)) {
      goto LABEL_50;
    }
LABEL_34:
    int v43 = v40 + 1;
    if ((int)v40++ >= *(_DWORD *)(a1 + 32)) {
      goto LABEL_51;
    }
  }
  __int32 v50 = sub_1000CAD00(v48) + 1;
  if (sub_1000BFD58(v23, v50, v51))
  {
    uint64_t v53 = *(void **)(v46 + 8 * v47);
    unsigned int v54 = v53 ? v50 : 0;
    if (sub_1000BFDB0(v23, v53, v54, 1, v52)
      && (*(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v45) + 4 * v47)
       || sub_100035D68(v49, v23, v38)))
    {
      if (!v35) {
        goto LABEL_34;
      }
      uint64_t v55 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8 * v45) + 8 * v47);
      if (sub_1000BFD58(v23, v55 != 0, v38) && (!v55 || sub_100064264(v55, v23, v38))) {
        goto LABEL_34;
      }
    }
  }
LABEL_50:
  int v43 = v40;
LABEL_51:
  int v39 = *(_DWORD *)(a1 + 32);
LABEL_53:
  BOOL v41 = v43 > v39;
LABEL_32:
  sub_1000BFD14(v23);
  return v41;
}

uint64_t sub_100035D68(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  if (!sub_1000BFD58(a2, *(_DWORD *)a1, a3)) {
    return 0;
  }
  if (!sub_1000BFD58(a2, *(_DWORD *)(a1 + 4), v5)) {
    return 0;
  }
  if (!sub_1000BFD58(a2, *(_DWORD *)(a1 + 8), v6)) {
    return 0;
  }
  if (!sub_1000BFD58(a2, *(_DWORD *)(a1 + 12), v7)) {
    return 0;
  }
  if (!sub_1000BFD58(a2, *(_DWORD *)(a1 + 16), v8)) {
    return 0;
  }
  if (!sub_1000BFD58(a2, *(_DWORD *)(a1 + 32), v9)) {
    return 0;
  }
  if (!sub_1000BFD58(a2, *(_DWORD *)(a1 + 36), v10)) {
    return 0;
  }
  if (!sub_1000BFD58(a2, *(_DWORD *)(a1 + 40), v11)) {
    return 0;
  }
  if (!sub_1000BFD58(a2, *(_DWORD *)(a1 + 44), v12)) {
    return 0;
  }
  if (!sub_1000BFD58(a2, *(_DWORD *)(a1 + 48), v13)) {
    return 0;
  }
  sub_1000BFD58(a2, *(_DWORD *)(a1 + 52), v14);
  if (!sub_1000BFD58(a2, *(_DWORD *)(a1 + 144), v15)
    || !sub_1000BFD58(a2, *(_DWORD *)(a1 + 148), v16)
    || !sub_1000BFD58(a2, *(_DWORD *)(a1 + 152), v17)
    || !sub_1000BFD58(a2, *(_DWORD *)(a1 + 168), v18)
    || !sub_1000BFD58(a2, *(_DWORD *)(a1 + 172), v19)
    || !sub_1000BFD58(a2, *(_DWORD *)(a1 + 176), v20)
    || !sub_1000BFD58(a2, *(_DWORD *)(a1 + 64), v21)
    || !sub_1000BFD58(a2, *(_DWORD *)(a1 + 200), v22)
    || !sub_1000BFD58(a2, *(_DWORD *)(a1 + 192), v23)
    || !sub_1000BFD58(a2, *(_DWORD *)(a1 + 196), v24)
    || !sub_1000BFFFC(a2, *(void ***)(a1 + 24), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 4), 4, v25)
    || !sub_1000BFFFC(a2, *(void ***)(a1 + 128), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 36), 2, v26)
    || *(_DWORD *)(a1 + 152)
    && !sub_1000BFFFC(a2, *(void ***)(a1 + 136), *(_DWORD *)(a1 + 148), *(_DWORD *)(a1 + 4), 1, v27))
  {
    return 0;
  }
  if (!sub_1000BFFFC(a2, *(void ***)(a1 + 160), *(_DWORD *)(a1 + 172), *(_DWORD *)(a1 + 4), 4, v27)) {
    return 0;
  }
  uint64_t v29 = *(void *)(a1 + 216);
  return sub_100038308(v29, a2, v28);
}

uint64_t sub_100035F78(_DWORD *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  uint8x8_t v11 = sub_1000BEC58(a2, "bcm1", a3, a4, a5, a6, a7, a8);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    int v77 = 0;
    uint64_t v76 = 0;
    int v75 = 0;
    uint64_t v13 = a1[25];
    uint64_t v14 = a1[29];
    if (!sub_1000BEECC((uint64_t)v11, a1 + 6)
      || !sub_1000BEECC(v12, a1 + 7)
      || !sub_1000BEECC(v12, a1 + 8)
      || !sub_1000BEECC(v12, (char *)&v79 + 4)
      || !sub_1000BEECC(v12, &v79)
      || !sub_1000BEECC(v12, &v78)
      || !sub_1000BEECC(v12, &v77)
      || !sub_1000BEECC(v12, a1 + 24)
      || !sub_1000BEECC(v12, a1 + 25)
      || !sub_1000BEECC(v12, a1 + 28)
      || !sub_1000BEECC(v12, a1 + 29)
      || !sub_1000BEECC(v12, &v75))
    {
      goto LABEL_140;
    }
    unsigned int v73 = a1 + 8;
    if (v75 && !*((void *)a1 + 9))
    {
      uint64_t v20 = sub_1000C33A0(8 * (int)a1[20]);
      *((void *)a1 + 9) = v20;
      if (!v20) {
        goto LABEL_140;
      }
      if ((int)a1[21] >= 1)
      {
        uint64_t v21 = 0;
        do
          *(void *)(*((void *)a1 + 9) + 8 * v21++) = sub_1000C33A0(2048);
        while (v21 < (int)a1[21]);
      }
    }
    else if (v78 != a1[20])
    {
      uint64_t v15 = sub_1000C33A0(8 * (int)v78);
      if (!v15) {
        goto LABEL_140;
      }
      uint8x8_t v16 = (void *)v15;
      int v17 = v78;
      if ((int)v78 < a1[21])
      {
        uint64_t v18 = (int)v78;
        do
          sub_1000C321C(*(void *)(*((void *)a1 + 9) + 8 * v18++));
        while (v18 < (int)a1[21]);
        int v17 = v78;
      }
      if (v17 >= a1[20]) {
        int v17 = a1[20];
      }
      j__memmove(v16, *((const void **)a1 + 9), 8 * v17);
      sub_1000C321C(*((void *)a1 + 9));
      *((void *)a1 + 9) = v16;
    }
    int v22 = v77;
    LODWORD(v23) = a1[21];
    if (v77 < (int)v23)
    {
      uint64_t v24 = v77;
      do
      {
        sub_1000C321C(*(void *)(*((void *)a1 + 9) + 8 * v24));
        *(void *)(*((void *)a1 + 9) + 8 * v24++) = 0;
      }
      while (v24 < (int)a1[21]);
      int v22 = v77;
      LODWORD(v23) = a1[21];
    }
    if ((int)v23 < v22)
    {
      uint64_t v23 = (int)v23;
      do
      {
        *(void *)(*((void *)a1 + 9) + 8 * v23) = sub_1000C33A0(2048);
        int v22 = v77;
        if (!*(void *)(*((void *)a1 + 9) + 8 * v23)) {
          break;
        }
        ++v23;
      }
      while (v23 < v77);
    }
    if (v23 != v22) {
      goto LABEL_140;
    }
    uint8x8_t v26 = (uint64_t *)(a1 + 22);
    uint64_t v25 = *((void *)a1 + 11);
    a1[20] = v78;
    a1[21] = v22;
    if (v25)
    {
      if ((int)v13 >= 1)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 8 * v13;
        do
        {
          sub_1000C321C(*(void *)(*v26 + v27));
          v27 += 8;
        }
        while (v28 != v27);
        uint64_t v25 = *v26;
      }
      sub_1000C321C(v25);
    }
    uint8x8_t v30 = (uint64_t *)(a1 + 26);
    uint64_t v29 = *((void *)a1 + 13);
    if (v29)
    {
      if ((int)v14 >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v32 = 8 * v14;
        do
        {
          sub_1000C321C(*(void *)(*v30 + v31));
          v31 += 8;
        }
        while (v32 != v31);
        uint64_t v29 = *v30;
      }
      sub_1000C321C(v29);
    }
    int v33 = v79;
    if (*((void *)a1 + 5)) {
      BOOL v34 = 1;
    }
    else {
      BOOL v34 = (int)v79 < 1;
    }
    if (v34)
    {
      if (HIDWORD(v79) != a1[12])
      {
        uint64_t v35 = sub_1000C33A0(8 * SHIDWORD(v79));
        if (!v35) {
          goto LABEL_140;
        }
        uint8x8_t v36 = (void *)v35;
        int v37 = HIDWORD(v79);
        if (SHIDWORD(v79) < a1[13])
        {
          uint64_t v38 = SHIDWORD(v79);
          do
            sub_1000C321C(*(void *)(*((void *)a1 + 7) + 8 * v38++));
          while (v38 < (int)a1[13]);
          int v37 = HIDWORD(v79);
        }
        if (v37 >= a1[12]) {
          int v37 = a1[12];
        }
        j__memmove(v36, *((const void **)a1 + 7), 8 * v37);
        sub_1000C321C(*((void *)a1 + 7));
        *((void *)a1 + 7) = v36;
        uint64_t v39 = sub_1000C33A0(8 * SHIDWORD(v79));
        if (!v39) {
          goto LABEL_140;
        }
        unsigned int v40 = (void *)v39;
        int v41 = HIDWORD(v79);
        if (SHIDWORD(v79) < a1[13])
        {
          uint64_t v42 = SHIDWORD(v79);
          do
            sub_1000C321C(*(void *)(*((void *)a1 + 5) + 8 * v42++));
          while (v42 < (int)a1[13]);
          int v41 = HIDWORD(v79);
        }
        if (v41 >= a1[12]) {
          int v41 = a1[12];
        }
        j__memmove(v40, *((const void **)a1 + 5), 8 * v41);
        sub_1000C321C(*((void *)a1 + 5));
        *((void *)a1 + 5) = v40;
        int v33 = v79;
      }
    }
    else
    {
      uint64_t v43 = sub_1000C33A0(8 * SHIDWORD(v79));
      if (!v43) {
        goto LABEL_140;
      }
      uint64_t v44 = v43;
      int v45 = v79;
      if ((int)v79 < 1)
      {
        LODWORD(v46) = 0;
      }
      else
      {
        uint64_t v46 = 0;
        do
        {
          uint64_t v47 = sub_1000C33A0(2048);
          *(void *)(v44 + 8 * v46) = v47;
          int v45 = v79;
          if (!v47) {
            break;
          }
          ++v46;
        }
        while (v46 < (int)v79);
      }
      if (v46 != v45) {
        goto LABEL_140;
      }
      uint64_t v48 = sub_1000C33A0(8 * SHIDWORD(v79));
      if (!v48) {
        goto LABEL_140;
      }
      uint64_t v49 = v48;
      int v33 = v79;
      if ((int)v79 < 1)
      {
        LODWORD(v50) = 0;
      }
      else
      {
        uint64_t v50 = 0;
        do
        {
          uint64_t v51 = sub_1000C33A0(2048);
          *(void *)(v49 + 8 * v50) = v51;
          int v33 = v79;
          if (!v51) {
            break;
          }
          ++v50;
        }
        while (v50 < (int)v79);
      }
      if (v50 != v33) {
        goto LABEL_140;
      }
      a1[17] = v33;
      *((void *)a1 + 7) = v44;
      a1[13] = v33;
      *((void *)a1 + 5) = v49;
      uint8x8_t v30 = (uint64_t *)(a1 + 26);
      uint8x8_t v26 = (uint64_t *)(a1 + 22);
    }
    LODWORD(v52) = a1[13];
    if (v33 >= (int)v52)
    {
      if ((int)v52 >= v33) {
        goto LABEL_93;
      }
    }
    else
    {
      uint64_t v53 = v33;
      do
      {
        sub_1000C321C(*(void *)(*((void *)a1 + 7) + 8 * v53));
        *(void *)(*((void *)a1 + 7) + 8 * v53) = 0;
        sub_1000C321C(*(void *)(*((void *)a1 + 5) + 8 * v53));
        *(void *)(*((void *)a1 + 5) + 8 * v53++) = 0;
        uint64_t v54 = (int)a1[13];
      }
      while (v53 < v54);
      int v33 = v79;
      LODWORD(v52) = a1[13];
      if ((int)v54 >= (int)v79)
      {
LABEL_93:
        if (v52 != v33) {
          goto LABEL_140;
        }
        goto LABEL_103;
      }
    }
    uint64_t v52 = (int)v52;
    while (1)
    {
      *(void *)(*((void *)a1 + 7) + 8 * v52) = sub_1000C33A0(2048);
      if (!*(void *)(*((void *)a1 + 7) + 8 * v52)) {
        break;
      }
      *(void *)(*((void *)a1 + 5) + 8 * v52) = sub_1000C33A0(2048);
      int v33 = v79;
      if (*(void *)(*((void *)a1 + 5) + 8 * v52))
      {
        if (++v52 < (int)v79) {
          continue;
        }
      }
      if (v52 == v79) {
        goto LABEL_103;
      }
      goto LABEL_140;
    }
    int v33 = v79;
    if (v52 != v79) {
      goto LABEL_140;
    }
LABEL_103:
    int v55 = HIDWORD(v79);
    a1[16] = HIDWORD(v79);
    a1[17] = v33;
    a1[12] = v55;
    a1[13] = v33;
    int v74 = 0;
    if (sub_1000BF88C(v12, v26, a1[24], 256, 4, &v74) && (!*v26 || v74 == a1[25]))
    {
      int v74 = 0;
      if (sub_1000BF88C(v12, v30, a1[28], 256, 4, &v74))
      {
        if (!*v30 || v74 == a1[29])
        {
          BOOL v56 = v30;
          int v57 = *v73;
          if (*v73 < 1)
          {
            int v59 = 1;
          }
          else
          {
            int v58 = 1;
            do
            {
              int v59 = v58;
              if (!sub_1000BEECC(v12, (char *)&v78 + 4))
              {
LABEL_134:
                int v57 = *v73;
                goto LABEL_137;
              }
              if (HIDWORD(v78))
              {
                uint64_t v60 = v59 >> 8;
                uint64_t v61 = *(void *)(*((void *)a1 + 5) + 8 * v60);
                if (*(void *)(v61 + 8 * v59)) {
                  goto LABEL_134;
                }
                uint64_t v62 = *(void *)(*((void *)a1 + 7) + 8 * v60);
                int v74 = 0;
                if (!sub_1000BF078(v12, 1, &v76, &v74) || v76 && v74 != HIDWORD(v78)) {
                  goto LABEL_134;
                }
                *(void *)(v62 + 8 * v59) = v76;
                if (*(_DWORD *)(*(void *)(*v56 + 8 * v60) + 4 * v59))
                {
                  uint64_t v63 = 0;
                }
                else
                {
                  uint64_t v64 = sub_100036820(v12);
                  if (!v64) {
                    goto LABEL_134;
                  }
                  uint64_t v63 = v64;
                  if (*((_DWORD *)v64 + 16) != -1) {
                    v64[7] = a4;
                  }
                  *(void *)(v61 + 8 * v59) = v64;
                  *(uint64_t *)((char *)v64 + 204) = 0x100000001;
                  *((_DWORD *)v64 + 46) = 1;
                }
                if (v75)
                {
                  int v74 = 0;
                  if (!sub_1000BEECC(v12, &v74)) {
                    goto LABEL_134;
                  }
                  if (v74)
                  {
                    uint64_t v65 = sub_100061250();
                    if (!v65) {
                      goto LABEL_134;
                    }
                    uint64_t v66 = (_DWORD *)v65;
                    if (!sub_100064438(v65, v12)) {
                      goto LABEL_134;
                    }
                    if (v8)
                    {
                      int v67 = 0;
                      *(void *)(*(void *)(*((void *)a1 + 9) + 8 * v60) + 8 * v59) = v66;
                    }
                    else
                    {
                      sub_100061280(v66);
                      int v67 = 1;
                    }
                    if (v63) {
                      *((_DWORD *)v63 + 45) = v67;
                    }
                  }
                }
              }
              int v58 = v59 + 1;
              int v57 = *v73;
            }
            while (v59 < *v73);
            ++v59;
          }
LABEL_137:
          if (v59 == v57 + 1)
          {
            if (v57 < 1)
            {
              uint64_t v19 = 1;
            }
            else
            {
              int v68 = 0;
              uint64_t v19 = 1;
              do
              {
                uint64_t v70 = ++v68 >> 8;
                if (*(void *)(*(void *)(*((void *)a1 + 7) + 8 * v70) + 8 * v68))
                {
                  unint64_t v71 = *(unsigned int *)(*(void *)(*v56 + 8 * v70) + 4 * v68);
                  if (v71) {
                    BOOL v72 = (v71 & 0x40000000) == 0;
                  }
                  else {
                    BOOL v72 = 0;
                  }
                  if (v72)
                  {
                    *(void *)(*(void *)(*((void *)a1 + 5) + 8 * v70) + 8 * v68) = *(void *)(*(void *)(*((void *)a1 + 5) + ((v71 >> 5) & 0x7FFFFF8)) + 8 * v71);
                    int v57 = a1[8];
                  }
                }
              }
              while (v68 < v57);
            }
            goto LABEL_141;
          }
        }
      }
    }
LABEL_140:
    uint64_t v19 = 0;
LABEL_141:
    sub_1000BED3C(v12);
    return v19;
  }
  return 0;
}

uint64_t *sub_100036820(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)sub_1000C33A0(224);
  if (v2)
  {
    if (!sub_1000BEECC(a1, v2)
      || !sub_1000BEECC(a1, (char *)v2 + 4)
      || !sub_1000BEECC(a1, v2 + 1)
      || !sub_1000BEECC(a1, (char *)v2 + 12)
      || !sub_1000BEECC(a1, v2 + 2)
      || !sub_1000BEECC(a1, v2 + 4)
      || !sub_1000BEECC(a1, (char *)v2 + 36)
      || !sub_1000BEECC(a1, v2 + 5)
      || !sub_1000BEECC(a1, (char *)v2 + 44)
      || !sub_1000BEECC(a1, v2 + 6)
      || (int v4 = 0, !sub_1000BEECC(a1, &v4))
      || (*((_DWORD *)v2 + 13) = v4, !sub_1000BEECC(a1, v2 + 18))
      || !sub_1000BEECC(a1, (char *)v2 + 148)
      || !sub_1000BEECC(a1, v2 + 19)
      || !sub_1000BEECC(a1, v2 + 21)
      || !sub_1000BEECC(a1, (char *)v2 + 172)
      || !sub_1000BEECC(a1, v2 + 22)
      || !sub_1000BEECC(a1, v2 + 8)
      || !sub_1000BEECC(a1, v2 + 25)
      || !sub_1000BEECC(a1, v2 + 24)
      || !sub_1000BEECC(a1, (char *)v2 + 196)
      || (int v4 = 0, !sub_1000BF88C(a1, v2 + 3, *((_DWORD *)v2 + 2), *((_DWORD *)v2 + 1), 4, &v4))
      || v2[3] && v4 != *((_DWORD *)v2 + 3)
      || (int v4 = 0, !sub_1000BF88C(a1, v2 + 16, *((_DWORD *)v2 + 10), *((_DWORD *)v2 + 9), 2, &v4))
      || v2[16] && v4 != *((_DWORD *)v2 + 11)
      || *((_DWORD *)v2 + 38)
      && ((int v4 = 0, !sub_1000BF88C(a1, v2 + 17, *((_DWORD *)v2 + 36), *((_DWORD *)v2 + 1), 1, &v4))
       || v2[17] && v4 != *((_DWORD *)v2 + 37))
      || (int v4 = 0, !sub_1000BF88C(a1, v2 + 20, *((_DWORD *)v2 + 42), *((_DWORD *)v2 + 1), 4, &v4))
      || v2[20] && v4 != *((_DWORD *)v2 + 43)
      || !sub_1000383E0(v2 + 27, a1))
    {
      sub_1000C321C((uint64_t)v2);
      return 0;
    }
  }
  return v2;
}

_DWORD *sub_100036B00(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v11 = sub_1000BEC58(a1, "bcm1", a2, a4, a5, a6, a7, a8);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (uint64_t)v11;
  uint64_t v13 = (_DWORD *)sub_1000C33A0(160);
  if (!v13) {
    goto LABEL_59;
  }
  uint64_t v14 = sub_1000C33A0(224);
  *((void *)v13 + 17) = v14;
  if (v14)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    *(void *)uint64_t v13 = a3;
    *((void *)v13 + 1) = a4;
    *((void *)v13 + 2) = a5;
    *(_DWORD *)(v14 + 204) = 1;
    if (!sub_1000BEECC(v12, v13 + 6)) {
      goto LABEL_47;
    }
    if (!sub_1000BEECC(v12, v13 + 8)) {
      goto LABEL_47;
    }
    uint64_t v15 = v13 + 13;
    if (!sub_1000BEECC(v12, v13 + 13)) {
      goto LABEL_47;
    }
    if (!sub_1000BEECC(v12, v13 + 12)) {
      goto LABEL_47;
    }
    uint8x8_t v16 = v13 + 25;
    if (!sub_1000BEECC(v12, v13 + 25)) {
      goto LABEL_47;
    }
    if (!sub_1000BEECC(v12, v13 + 24)) {
      goto LABEL_47;
    }
    int v17 = v13 + 29;
    if (!sub_1000BEECC(v12, v13 + 29)
      || !sub_1000BEECC(v12, v13 + 28)
      || !sub_1000BEECC(v12, v13 + 20)
      || !sub_1000BEECC(v12, v13 + 39))
    {
      goto LABEL_47;
    }
    uint64_t v18 = v13[12];
    if ((int)v18 < 1) {
      goto LABEL_38;
    }
    uint64_t v19 = sub_1000C33A0(8 * v18);
    *((void *)v13 + 5) = v19;
    if (!v19) {
      goto LABEL_47;
    }
    if (*v15 >= 1)
    {
      uint64_t v20 = 0;
      do
      {
        *(void *)(*((void *)v13 + 5) + 8 * v20) = sub_1000C33A0(2048);
        if (!*(void *)(*((void *)v13 + 5) + 8 * v20)) {
          break;
        }
        ++v20;
      }
      while (v20 < *v15);
    }
    uint64_t v21 = sub_1000C33A0(8 * (int)v13[12]);
    *((void *)v13 + 7) = v21;
    if (!v21)
    {
LABEL_47:
      sub_1000BED3C(v12);
      sub_100031754((uint64_t)v13);
      return 0;
    }
    int v22 = *v15;
    if (*v15 >= 1)
    {
      uint64_t v23 = 0;
      do
      {
        *(void *)(*((void *)v13 + 7) + 8 * v23) = sub_1000C33A0(2048);
        uint64_t v24 = *(void *)(*((void *)v13 + 7) + 8 * v23);
        int v22 = v13[13];
        ++v23;
        if (v24) {
          BOOL v25 = v23 < v22;
        }
        else {
          BOOL v25 = 0;
        }
      }
      while (v25);
    }
    v13[16] = v13[12];
    v13[17] = v22;
    if (qword_100101CC0)
    {
      if (*(uint64_t *)(qword_100101CC0 + 1528) >= 1)
      {
        uint64_t v26 = v13[20];
        if ((int)v26 >= 1)
        {
          uint64_t v27 = sub_1000C33A0(8 * v26);
          *((void *)v13 + 9) = v27;
          if (v27)
          {
            if ((int)v13[21] >= 1)
            {
              uint64_t v28 = 0;
              do
              {
                *(void *)(*((void *)v13 + 9) + 8 * v28) = sub_1000C33A0(2048);
                if (!*(void *)(*((void *)v13 + 9) + 8 * v28)) {
                  break;
                }
                ++v28;
              }
              while (v28 < (int)v13[21]);
            }
            goto LABEL_38;
          }
          goto LABEL_47;
        }
      }
    }
LABEL_38:
    while (sub_1000BEECC(v12, (char *)&v43 + 4))
    {
      if (HIDWORD(v43) == v13[8] + 1) {
        break;
      }
      if (!sub_1000BEECC(v12, &v43)) {
        break;
      }
      unsigned __int8 v32 = BYTE4(v43);
      uint64_t v33 = *(void *)(*((void *)v13 + 7) + (((unint64_t)HIDWORD(v43) >> 5) & 0x7FFFFF8));
      int v41 = 0;
      if (!sub_1000BF078(v12, 1, &v42, &v41) || v42 && v41 != v43) {
        break;
      }
      *(void *)(v33 + 8 * v32) = v42;
      uint64_t v29 = *(void *)(*((void *)v13 + 5) + (((unint64_t)HIDWORD(v43) >> 5) & 0x7FFFFF8));
      uint64_t v30 = BYTE4(v43);
      uint64_t v31 = sub_100036F44(v12);
      *(void *)(v29 + 8 * v30) = v31;
      if (!v31) {
        goto LABEL_47;
      }
    }
    uint64_t v34 = sub_1000C33A0(8 * (int)v13[24]);
    *((void *)v13 + 11) = v34;
    if (!v34) {
      goto LABEL_47;
    }
    if (*v16 >= 1)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      do
      {
        int v41 = 0;
        if (!sub_1000BF078(v12, 4, (uint64_t *)(v34 + v35), &v41)) {
          break;
        }
        uint64_t v34 = *((void *)v13 + 11);
        if (*(void *)(v34 + v35))
        {
          if (v41 != 256) {
            break;
          }
        }
        ++v36;
        v35 += 8;
      }
      while (v36 < *v16);
    }
    if (*v17 >= 1)
    {
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = *((void *)v13 + 13);
      do
      {
        int v41 = 0;
        if (!sub_1000BF078(v12, 4, (uint64_t *)(v39 + v37), &v41)) {
          break;
        }
        uint64_t v39 = *((void *)v13 + 13);
        if (*(void *)(v39 + v37))
        {
          if (v41 != 256) {
            break;
          }
        }
        ++v38;
        v37 += 8;
      }
      while (v38 < *v17);
    }
LABEL_59:
    sub_1000BED3C(v12);
    return v13;
  }
  sub_1000BED3C(v12);
  sub_1000C321C((uint64_t)v13);
  return 0;
}

_DWORD *sub_100036F44(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)sub_1000C33A0(224);
  if (!v2) {
    return v2;
  }
  if (!sub_1000BEECC(a1, v2)
    || !sub_1000BEECC(a1, v2 + 1)
    || !sub_1000BEECC(a1, v2 + 2)
    || (unsigned int v3 = v2 + 3, !sub_1000BEECC(a1, v2 + 3))
    || !sub_1000BEECC(a1, v2 + 4)
    || !sub_1000BEECC(a1, v2 + 8)
    || !sub_1000BEECC(a1, v2 + 9)
    || !sub_1000BEECC(a1, v2 + 10)
    || (int v4 = v2 + 11, !sub_1000BEECC(a1, v2 + 11))
    || !sub_1000BEECC(a1, v2 + 12)
    || (int v14 = 0, !sub_1000BEECC(a1, &v14))
    || (v2[13] = v14, !sub_1000BEECC(a1, v2 + 50))
    || (uint64_t v5 = sub_1000C33A0(8 * (int)v2[2]), (*((void *)v2 + 3) = v5) == 0))
  {
    sub_1000C321C((uint64_t)v2);
    return 0;
  }
  if (*v3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      int v13 = 0;
      if (!sub_1000BF078(a1, 4, (uint64_t *)(v5 + v6), &v13)) {
        break;
      }
      uint64_t v5 = *((void *)v2 + 3);
      if (*(void *)(v5 + v6))
      {
        if (v13 != v2[1]) {
          break;
        }
      }
      ++v7;
      v6 += 8;
    }
    while (v7 < *v3);
  }
  uint64_t v9 = sub_1000C33A0(8 * (int)v2[10]);
  *((void *)v2 + 16) = v9;
  if (!v9) {
    return 0;
  }
  if (*v4 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      int v12 = 0;
      if (!sub_1000BF078(a1, 2, (uint64_t *)(v9 + v10), &v12)) {
        break;
      }
      uint64_t v9 = *((void *)v2 + 16);
      if (*(void *)(v9 + v10))
      {
        if (v12 != v2[9]) {
          break;
        }
      }
      ++v11;
      v10 += 8;
    }
    while (v11 < *v4);
  }
  *(void *)(v2 + 51) = 1;
  v2[46] = 1;
  return v2;
}

uint64_t sub_100037188(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, _WORD *a5)
{
  if (!sub_1000CAED0(a2, "<s>") || !sub_1000CAED0(a2, "<e>"))
  {
    char v15 = 0;
    int v11 = 0;
    if (a3 == -1) {
      return a3;
    }
    goto LABEL_16;
  }
  int v10 = *(_DWORD *)(a1 + 32);
  if (v10 < 1)
  {
LABEL_15:
    char v15 = 0;
    int v11 = -1;
    if (a3 != -1) {
      goto LABEL_16;
    }
    return a3;
  }
  int v11 = 1;
  while (1)
  {
    uint64_t v13 = v11 >> 8;
    int v14 = *(unsigned char **)(*(void *)(*(void *)(a1 + 56) + 8 * v13) + 8 * v11);
    if (!v14) {
      goto LABEL_6;
    }
    if (!sub_1000CAED0(v14, a2)) {
      break;
    }
    int v10 = *(_DWORD *)(a1 + 32);
LABEL_6:
    if (v11++ >= v10) {
      goto LABEL_15;
    }
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v13) + 8 * v11))
  {
    char v15 = 0;
    if (a3 == -1) {
      return a3;
    }
  }
  else
  {
    int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v13) + 4 * v11);
    char v15 = 1;
    if (a3 == -1) {
      return a3;
    }
  }
LABEL_16:
  if ((v15 & (v11 != -1)) != 0) {
    unsigned int v16 = -1;
  }
  else {
    unsigned int v16 = v11;
  }
  int v17 = *(_DWORD **)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * (v16 >> 8)) + 8 * v16)
                   + 216);
  if (!v17)
  {
LABEL_26:
    a3 = 0xFFFFFFFFLL;
    goto LABEL_34;
  }
  int v18 = 1234556789 * a3;
  while (*v17 != a3)
  {
    if ((v18 & 0x40000000) != 0) {
      uint64_t v19 = 2;
    }
    else {
      uint64_t v19 = 4;
    }
    int v17 = *(_DWORD **)&v17[v19];
    v18 *= 2;
    if (!v17) {
      goto LABEL_26;
    }
  }
  uint64_t v20 = v17 + 6;
  unint64_t v21 = sub_1000CED6C((unint64_t)(v17 + 6));
  a3 = v21;
  if ((int)v21 >= a4 - 1) {
    int v22 = a4 - 1;
  }
  else {
    int v22 = v21;
  }
  if (v22 >= 1) {
    j__memmove(a5, v20, 2 * v22);
  }
  if (a4 >= 1)
  {
    a5 += v22;
LABEL_34:
    *a5 = 0;
  }
  return a3;
}

uint64_t sub_100037354(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_100037354(*(void *)(result + 8));
    sub_100037354(*(void *)(v1 + 16));
    return sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_1000373A0(uint64_t a1, int a2)
{
  if (a2 > 0x40000) {
    return 0;
  }
  uint64_t result = sub_1000C3A90((const void **)(a1 + 40), (int *)(a1 + 48), (signed int *)(a1 + 52), 8, 8, a2);
  if (result)
  {
    if (!qword_100101CC0
      || *(uint64_t *)(qword_100101CC0 + 1528) < 1
      || (uint64_t result = sub_1000C3A90((const void **)(a1 + 72), (int *)(a1 + 80), (signed int *)(a1 + 84), 8, 8, a2),
          result))
    {
      uint64_t result = sub_1000C3A90((const void **)(a1 + 56), (int *)(a1 + 64), (signed int *)(a1 + 68), 8, 8, a2);
      if (result)
      {
        uint64_t result = sub_1000C3A90((const void **)(a1 + 88), (int *)(a1 + 96), (signed int *)(a1 + 100), 8, 4, a2);
        if (result) {
          return sub_1000C3A90((const void **)(a1 + 104), (int *)(a1 + 112), (signed int *)(a1 + 116), 8, 4, a2) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100037498(uint64_t a1, int a2)
{
  uint64_t result = sub_1000C3A90((const void **)(a1 + 24), (int *)(a1 + 8), (signed int *)(a1 + 12), *(_DWORD *)a1, 4, a2 + 1);
  if (result)
  {
    if (!*(_DWORD *)(a1 + 152)
      || (uint64_t result = sub_1000C3A90((const void **)(a1 + 136), (int *)(a1 + 144), (signed int *)(a1 + 148), *(_DWORD *)a1, 1, a2), result))
    {
      int v5 = *(_DWORD *)(a1 + 16);
      uint64_t result = sub_1000C3A90((const void **)(a1 + 160), (int *)(a1 + 168), (signed int *)(a1 + 172), *(_DWORD *)a1, 4, a2);
      if (v5 < a2)
      {
        do
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8 * (int)(v5 >> *(_DWORD *)a1))
                    + 4 * ((*(_DWORD *)(a1 + 4) - 1) & v5)) = -1;
          ++v5;
        }
        while (a2 != v5);
      }
    }
  }
  return result;
}

unint64_t sub_100037560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, _DWORD *a9, _DWORD *a10, int *a11, int a12, int a13)
{
  int v14 = a7;
  int v15 = a6;
  int v162 = a5;
  unsigned int v168 = a4;
  unsigned int v16 = a3;
  int v18 = a10;
  uint64_t v19 = a11;
  uint64_t v170 = 0;
  if (*(_DWORD *)(a1 + 132)) {
    sub_1000315AC(a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8);
  }
  uint64_t v167 = v168 >> 8;
  uint64_t v20 = *(int **)(*(void *)(*(void *)(a1 + 40) + 8 * v167) + 8 * v168);
  v171[0] = 0xFFFFFFFFLL;
  int v21 = sub_1000CAD00((unint64_t)a8) + 11;
  uint64_t v163 = v21;
  uint64_t v29 = (char *)sub_1000CD3E8(v21, v22, v23, v24, v25, v26, v27, v28);
  int v30 = v21;
  uint64_t v31 = v29;
  sub_1000CAD88(v29, a8, v30);
  int v32 = sub_1000CAD00((unint64_t)a8);
  sprintf(&v31[v32], "_%d", 0);
  unsigned int v169 = v16;
  if (qword_100101CC0)
  {
    uint64_t v33 = a2;
    if (*(void *)(qword_100101CC0 + 4264) <= a12) {
      goto LABEL_11;
    }
    int v34 = a13;
    if (*(void *)(qword_100101CC0 + 4256) <= a13) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v33 = a2;
    if ((a12 & 0x80000000) == 0 || (int v34 = a13, a13 >= 0))
    {
LABEL_11:
      if (!v33) {
        goto LABEL_61;
      }
      if (v14 < 1)
      {
        unsigned int v47 = 0;
        uint64_t v54 = 0;
LABEL_49:
        uint64_t v160 = v31;
        sub_10003208C(a1, v31, v14, v47, v20[13], (unsigned int *)&v170 + 1, 0, 0, 0, 0);
        uint64_t v67 = *(void *)(*(void *)(*(void *)(a1 + 40) + (((unint64_t)HIDWORD(v170) >> 5) & 0x7FFFFF8))
                        + 8 * BYTE4(v170));
        sub_10002766C(a2, SHIDWORD(v170), (_DWORD *)v171 + 1);
        sub_100027AD4(a2, v162, SHIDWORD(v171[0]), 0);
        sub_100027AD4(a2, SHIDWORD(v171[0]), 0, 0);
        long long v82 = (__int16 *)sub_1000CD3E8(v54, v68, v69, v70, v71, v72, v73, v74);
        if (v14 >= 1)
        {
          for (int i = 0; i != v14; ++i)
          {
            unsigned int v84 = i + v16;
            if (*(_DWORD *)(a1 + 132) == v168 && !sub_1000315AC(a1, v75, v76, v77, v78, v79, v80, v81))
            {
              int v86 = 0;
              int v87 = -v15;
              if (v15 < 0)
              {
LABEL_55:
                unsigned int v88 = v15
                    + *(_DWORD *)(*(void *)(*((void *)v20 + 3) + 8 * (int)(v84 >> *v20))
                                + 4 * (int)((v20[1] - 1) & v84));
                uint64_t v89 = v86 - (uint64_t)v15;
                uint64_t v90 = &v82[v15];
                do
                {
                  *v90++ = *(_WORD *)(*(void *)(*((void *)v20 + 16) + 8 * (int)(v88 >> v20[8]))
                                    + 2 * (int)((v20[9] - 1) & v88));
                  ++v88;
                  --v89;
                }
                while (v89);
              }
            }
            else
            {
              uint64_t v85 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v167) + 8 * v168);
              int v86 = *(_DWORD *)(*(void *)(*(void *)(v85 + 24) + 8 * (int)((v84 + 1) >> *(_DWORD *)v85))
                              + 4 * (int)((*(_DWORD *)(v85 + 4) - 1) & (v84 + 1)))
                  - *(_DWORD *)(*(void *)(*(void *)(v85 + 24) + 8 * (int)(v84 >> *(_DWORD *)v85))
                              + 4 * (int)((*(_DWORD *)(v85 + 4) - 1) & v84));
              int v87 = v86 - v15;
              if (v86 > v15) {
                goto LABEL_55;
              }
            }
            sub_100032DF4(v67, v87, &v82[v15], 0, -1);
          }
        }
        sub_1000CD4D0(v82, v54);
        uint64_t v19 = a11;
        uint64_t v31 = v160;
        int v18 = a10;
LABEL_61:
        sub_1000CD4D0(v31, v163);
        ++*a9;
        ++*v18;
        unint64_t result = sub_1000CAD00((unint64_t)v31);
        int v92 = result + 1;
        int v93 = *v19;
        goto LABEL_110;
      }
      uint64_t v41 = *((void *)v20 + 3);
      int v42 = *v20;
      int v43 = v20[1] - 1;
      int v44 = *(_DWORD *)(*(void *)(v41 + 8 * (int)(v16 >> *v20)) + 4 * (int)(v43 & v16));
      if (v14 == 1)
      {
        signed int v45 = 0;
        unsigned int v46 = 0;
        unsigned int v47 = 0;
      }
      else
      {
        signed int v45 = 0;
        int v55 = 0;
        int v56 = 0;
        int v57 = 0;
        unsigned int v46 = v14 & 0xFFFFFFFE;
        unsigned int v58 = v16 + 2;
        unsigned int v59 = v14 & 0xFFFFFFFE;
        do
        {
          int v60 = *(_DWORD *)(*(void *)(v41 + 8 * (int)((v58 - 1) >> v42)) + 4 * (int)((v58 - 1) & v43));
          int v61 = v60 - v44;
          int v44 = *(_DWORD *)(*(void *)(v41 + 8 * (int)(v58 >> v42)) + 4 * (int)(v58 & v43));
          int v62 = v44 - v60;
          if (v61 > v45) {
            signed int v45 = v61;
          }
          if (v62 > v55) {
            int v55 = v62;
          }
          v56 += v61;
          v57 += v62;
          v58 += 2;
          v59 -= 2;
        }
        while (v59);
        unsigned int v47 = v57 + v56;
        if (v45 <= v55) {
          signed int v45 = v55;
        }
        if (v46 == v14) {
          goto LABEL_48;
        }
      }
      unsigned int v63 = v14 - v46;
      unsigned int v64 = v46 + v16 + 1;
      do
      {
        int v65 = *(_DWORD *)(*(void *)(v41 + 8 * (int)(v64 >> v42)) + 4 * (int)(v64 & v43));
        int v66 = v65 - v44;
        if (v66 > v45) {
          signed int v45 = v66;
        }
        v47 += v66;
        ++v64;
        int v44 = v65;
        --v63;
      }
      while (v63);
LABEL_48:
      uint64_t v54 = 2 * v45;
      goto LABEL_49;
    }
  }
  int v164 = v34;
  int v159 = v31;
  if (v14 < 1)
  {
LABEL_65:
    int v157 = 0;
    int v156 = 0;
    uint64_t v165 = 0;
    goto LABEL_66;
  }
  unsigned int v35 = 0;
  int v36 = 0;
  int v37 = 0;
  uint64_t v38 = *((void *)v20 + 3);
  int v39 = *v20;
  int v40 = v20[1] - 1;
  while (1)
  {
    int v48 = *(_DWORD *)(*(void *)(v38 + 8 * (int)((v37 + v16) >> v39)) + 4 * (int)((v37 + v16) & v40));
    int v49 = *(_DWORD *)(*(void *)(v38 + 8 * (int)((v37 + v16 + 1) >> v39)) + 4 * (int)((v37 + v16 + 1) & v40)) - v48;
    int v50 = v49 <= v15
        ? 0xFFFF
        : *(unsigned __int16 *)(*(void *)(*((void *)v20 + 16) + 8 * (int)((v48 + v15) >> v20[8]))
                              + 2 * ((v20[9] - 1) & (v48 + v15)));
    int v51 = v37 + 1;
    if (v37 + 1 == v14) {
      break;
    }
    int v52 = *(_DWORD *)(*(void *)(v38 + 8 * (int)((v51 + v16) >> v39)) + 4 * (int)((v51 + v16) & v40));
    if (*(_DWORD *)(*(void *)(v38 + 8 * (int)((v51 + v16 + 1) >> v39)) + 4 * (int)((v51 + v16 + 1) & v40)) - v52 <= v15)
    {
      if (v50 != 0xFFFF)
      {
LABEL_15:
        ++v36;
        unsigned int v35 = v35 - v15 + v49;
        ++v37;
        goto LABEL_16;
      }
    }
    else if (v50 != *(unsigned __int16 *)(*(void *)(*((void *)v20 + 16) {
                                                     + 8 * (int)((v52 + v15) >> v20[8]))
    }
                                         + 2 * ((v20[9] - 1) & (v52 + v15))))
    {
      goto LABEL_15;
    }
    v37 += 2;
    if (v37 < v14)
    {
      do
      {
        int v53 = *(_DWORD *)(*(void *)(v38 + 8 * (int)((v16 + v37) >> v39)) + 4 * (int)((v16 + v37) & v40));
        if (*(_DWORD *)(*(void *)(v38 + 8 * (int)((v16 + v37 + 1) >> v39)) + 4 * (int)((v16 + v37 + 1) & v40))
           - v53 <= v15)
        {
          if (v50 != 0xFFFF) {
            goto LABEL_16;
          }
        }
        else if (v50 != *(unsigned __int16 *)(*(void *)(*((void *)v20 + 16) {
                                                         + 8 * (int)((v53 + v15) >> v20[8]))
        }
                                             + 2 * ((v20[9] - 1) & (v53 + v15))))
        {
          goto LABEL_16;
        }
        ++v37;
      }
      while (v14 != v37);
LABEL_31:
      if (v36 < 1) {
        goto LABEL_65;
      }
      goto LABEL_32;
    }
LABEL_16:
    if (v37 >= v14) {
      goto LABEL_31;
    }
  }
  ++v36;
  unsigned int v35 = v35 - v15 + v49;
  if (v36 < 1) {
    goto LABEL_65;
  }
LABEL_32:
  if (v33)
  {
    sub_10003208C(a1, v31, v36, v35, v20[13], (unsigned int *)&v170 + 1, 0, 0, 0, 0);
    uint64_t v165 = *(void *)(*(void *)(*(void *)(a1 + 40) + (((unint64_t)HIDWORD(v170) >> 5) & 0x7FFFFF8))
                     + 8 * BYTE4(v170));
    sub_10002766C(v33, SHIDWORD(v170), (_DWORD *)v171 + 1);
    sub_100027AD4(v33, v162, SHIDWORD(v171[0]), 0);
    sub_100027AD4(v33, SHIDWORD(v171[0]), 0, 0);
  }
  else
  {
    uint64_t v165 = 0;
  }
  int v156 = sub_1000CAD00((unint64_t)v31) + 1;
  int v157 = 1;
LABEL_66:
  int v94 = a8;
  int v95 = sub_1000CAD00((unint64_t)a8) + 11;
  uint64_t v96 = v95;
  __int16 v158 = (unsigned char *)sub_1000CD3E8(v95, v97, v98, v99, v100, v101, v102, v103);
  unint64_t v154 = (unint64_t)v94;
  sub_1000CAD88(v158, v94, v95);
  if (v14 < 1) {
    goto LABEL_109;
  }
  int v110 = 0;
  uint64_t v161 = v15;
  uint64_t v155 = v95;
  while (2)
  {
    uint64_t v111 = a2;
    while (2)
    {
      uint64_t v112 = v110 + v16;
      uint64_t v113 = *((void *)v20 + 3);
      int v114 = *v20;
      int v115 = v20[1] - 1;
      unsigned int v116 = v112 + 1;
      unsigned int v117 = *(_DWORD *)(*(void *)(v113 + 8 * (int)(v112 >> *v20)) + 4 * (int)(v115 & v112)) + v15;
      int v118 = *(_DWORD *)(*(void *)(v113 + 8 * (int)(v116 >> *v20)) + 4 * (int)(v115 & v116)) - v117;
      if (v14 - v110 < 2)
      {
LABEL_84:
        if (!v111)
        {
LABEL_70:
          if (++v110 >= v14)
          {
            uint64_t v19 = a11;
            uint64_t v96 = v155;
            goto LABEL_109;
          }
          continue;
        }
        if (*(_DWORD *)(a1 + 132) == v168 && !sub_1000315AC(a1, v104, v105, v106, v107, v111, v108, v109))
        {
          int v128 = 0;
          uint64_t v129 = 0;
          uint64_t v130 = (__int16 *)sub_1000CD3E8(0, v104, v105, v106, v107, v111, v108, v109);
          if (v15 < 0)
          {
LABEL_88:
            unsigned int v131 = v15
                 + *(_DWORD *)(*(void *)(*((void *)v20 + 3) + 8 * (int)(v112 >> *v20))
                             + 4 * (int)((v20[1] - 1) & v112));
            int v132 = &v130[v161];
            uint64_t v133 = v128 - (uint64_t)v15;
            do
            {
              *v132++ = *(_WORD *)(*(void *)(*((void *)v20 + 16) + 8 * (int)(v131 >> v20[8]))
                                 + 2 * (int)((v20[9] - 1) & v131));
              ++v131;
              --v133;
            }
            while (v133);
          }
        }
        else
        {
          uint64_t v127 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v167) + 8 * v168);
          int v128 = *(_DWORD *)(*(void *)(*(void *)(v127 + 24) + 8 * (int)(v116 >> *(_DWORD *)v127))
                           + 4 * (int)((*(_DWORD *)(v127 + 4) - 1) & v116))
               - *(_DWORD *)(*(void *)(*(void *)(v127 + 24) + 8 * (int)(v112 >> *(_DWORD *)v127))
                           + 4 * (int)((*(_DWORD *)(v127 + 4) - 1) & v112));
          uint64_t v129 = 2 * v128;
          uint64_t v130 = (__int16 *)sub_1000CD3E8(v129, v104, v105, v106, v107, v111, v108, v109);
          if (v128 > v15) {
            goto LABEL_88;
          }
        }
        sub_100032DF4(v165, v118, &v130[v15], 0, -1);
        sub_1000CD4D0(v130, v129);
        unsigned int v16 = v169;
        uint64_t v111 = a2;
        goto LABEL_70;
      }
      break;
    }
    uint64_t v119 = *((void *)v20 + 16);
    int v120 = v20[8];
    int v121 = v20[9] - 1;
    uint64_t v122 = 1;
    while (1)
    {
      unsigned int v123 = v122 + v112;
      unsigned int v124 = *(_DWORD *)(*(void *)(v113 + 8 * (int)(v123 >> v114)) + 4 * (int)(v123 & v115)) + v15;
      uint64_t v105 = v124 & v121;
      uint64_t v104 = *(unsigned __int16 *)(*(void *)(v119 + 8 * (int)(v124 >> v120)) + 2 * (int)v105);
      if (*(unsigned __int16 *)(*(void *)(v119 + 8 * (int)(v117 >> v120)) + 2 * (int)(v121 & v117)) != v104) {
        break;
      }
      unsigned int v125 = v123 + 1;
      uint64_t v104 = *(void *)(v113 + 8 * (int)(v125 >> v114));
      int v126 = *(_DWORD *)(v104 + 4 * (int)(v125 & v115)) - v124;
      if (v118 < v126) {
        int v126 = v118;
      }
      int v118 = 1;
      if (v126 >= 2)
      {
        while (1)
        {
          uint64_t v107 = *(void *)(v119 + 8 * (int)((v124 + v118) >> v120));
          uint64_t v106 = (v124 + v118) & v121;
          uint64_t v104 = *(unsigned __int16 *)(*(void *)(v119 + 8 * (int)((v117 + v118) >> v120))
                                     + 2 * (int)((v117 + v118) & v121));
          uint64_t v105 = *(unsigned __int16 *)(v107 + 2 * (int)v106);
          if (v104 != v105) {
            break;
          }
          if (v126 == ++v118)
          {
            int v118 = v126;
            break;
          }
        }
      }
      uint64_t v122 = (v122 + 1);
      if (v122 == v14 - v110)
      {
        uint64_t v122 = (v14 - v110);
        break;
      }
    }
    if (v122 == 1)
    {
      unsigned int v16 = v169;
      goto LABEL_84;
    }
    int v134 = sub_1000CAD00(v154);
    sprintf(&v158[v134], "_%d", v157);
    int v152 = sub_1000CAD00((unint64_t)v158);
    if (*(_DWORD *)(a1 + 132) == v168 && !sub_1000315AC(a1, v135, v136, v137, v138, v139, v140, v141))
    {
      int v143 = 0;
    }
    else
    {
      uint64_t v142 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v167) + 8 * v168);
      int v143 = *(_DWORD *)(*(void *)(*(void *)(v142 + 24) + 8 * (int)(v116 >> *(_DWORD *)v142))
                       + 4 * (int)((*(_DWORD *)(v142 + 4) - 1) & v116))
           - *(_DWORD *)(*(void *)(*(void *)(v142 + 24) + 8 * (int)(v112 >> *(_DWORD *)v142))
                       + 4 * (int)((*(_DWORD *)(v142 + 4) - 1) & v112));
    }
    int v153 = v143;
    uint64_t v151 = 2 * v143;
    int v144 = (__int16 *)sub_1000CD3E8(v151, v135, v136, v137, v138, v139, v140, v141);
    if (v143 > v15)
    {
      unsigned int v145 = v15
           + *(_DWORD *)(*(void *)(*((void *)v20 + 3) + 8 * (int)(v112 >> *v20))
                       + 4 * (int)((v20[1] - 1) & v112));
      uint64_t v146 = &v144[v161];
      uint64_t v147 = v143 - (uint64_t)v15;
      do
      {
        *v146++ = *(_WORD *)(*(void *)(*((void *)v20 + 16) + 8 * (int)(v145 >> v20[8]))
                           + 2 * (int)((v20[9] - 1) & v145));
        ++v145;
        --v147;
      }
      while (v147);
    }
    uint64_t v19 = a11;
    if (a2)
    {
      int v150 = v144;
      sub_10003208C(a1, v158, 1, v118, v20[13], (unsigned int *)&v170, 0, 0, 0, 0);
      signed int v149 = v170;
      sub_100032DF4(*(void *)(*(void *)(*(void *)(a1 + 40) + (((unint64_t)v170 >> 5) & 0x7FFFFF8))+ 8 * v170), v118, &v150[v15], 0, -1);
      sub_10002766C(a2, v149, v171);
      sub_100027AD4(a2, v162, v171[0], 0);
      sub_1000CD4D0(v150, v151);
      if (v118 == v153 - v15)
      {
        sub_100027AD4(a2, v171[0], 0, 0);
        goto LABEL_103;
      }
LABEL_104:
      unsigned int v16 = v169;
    }
    else
    {
      sub_1000CD4D0(v144, v151);
      if (v118 != v153 - v15) {
        goto LABEL_104;
      }
LABEL_103:
      uint64_t v112 = ++v110 + v169;
      uint64_t v122 = (v122 - 1);
      unsigned int v16 = v169;
    }
    v156 += v152 + 1;
    ++v157;
    LODWORD(v148) = v118 + a12;
    HIDWORD(v148) = v164 + 1;
    sub_100037560(a1, a2, v112, v168, LODWORD(v171[0]), (v118 + v15), v122, v158, a9, a10, a11, v148);
    v110 += v122;
    uint64_t v96 = v155;
    if (v110 < v14) {
      continue;
    }
    break;
  }
LABEL_109:
  sub_1000CD4D0(v158, v96);
  unint64_t result = (unint64_t)sub_1000CD4D0(v159, v163);
  *a9 += v157;
  *a10 += v157;
  int v92 = *v19;
  int v93 = v156;
LABEL_110:
  *uint64_t v19 = v92 + v93;
  return result;
}

uint64_t sub_1000381BC(unsigned int *a1, unsigned int *a2)
{
  return sub_1000381DC(qword_100101CE0, *a1, *a2, 1);
}

uint64_t sub_1000381DC(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 24);
  unsigned int v5 = a2 >> *(_DWORD *)a1;
  uint64_t v6 = *(int *)(a1 + 4) - 1;
  uint64_t v7 = v6 & (int)a2;
  unsigned int v8 = *(_DWORD *)(*(void *)(v4 + 8 * (int)v5) + 4 * v7);
  unsigned int v9 = a3 >> *(_DWORD *)a1;
  int v10 = v6 & a3;
  unsigned int v11 = *(_DWORD *)(*(void *)(v4 + 8 * (int)v9) + 4 * (int)(v6 & a3));
  int v12 = *(_DWORD *)(*(void *)(v4 + 8 * (int)((a2 + 1) >> *(_DWORD *)a1)) + 4 * (int)(v6 & (a2 + 1))) - v8;
  int v13 = *(_DWORD *)(*(void *)(v4 + 8 * (int)((a3 + 1) >> *(_DWORD *)a1)) + 4 * (int)(v6 & (a3 + 1))) - v11;
  if (v12 >= v13) {
    int v14 = *(_DWORD *)(*(void *)(v4 + 8 * (int)((a3 + 1) >> *(_DWORD *)a1)) + 4 * (int)(v6 & (a3 + 1))) - v11;
  }
  else {
    int v14 = *(_DWORD *)(*(void *)(v4 + 8 * (int)((a2 + 1) >> *(_DWORD *)a1)) + 4 * (int)(v6 & (a2 + 1))) - v8;
  }
  if (v14 >= 1)
  {
    do
    {
      uint64_t v15 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8 * (int)(v8 >> *(_DWORD *)(a1 + 32)))
                                + 2 * (int)((*(_DWORD *)(a1 + 36) - 1) & v8))
          - *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128)
                                                          + 8 * (int)(v11 >> *(_DWORD *)(a1 + 32)))
                                              + 2 * (int)((*(_DWORD *)(a1 + 36) - 1) & v11));
      if (v15) {
        return v15;
      }
      ++v11;
      ++v8;
    }
    while (--v14);
  }
  uint64_t v15 = (v12 - v13);
  if (v12 != v13) {
    return v15;
  }
  if (*(_DWORD *)(a1 + 176))
  {
    uint64_t v15 = (*(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8 * (int)v5) + 4 * v7)
                       - *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8 * (int)v9) + 4 * v10));
    if (v15) {
      return v15;
    }
  }
  if (a4)
  {
    uint64_t v15 = *(unsigned int *)(a1 + 152);
    if (v15) {
      return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 136) + 8 * (int)v5) + v7)
    }
           - *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 136) + 8 * (int)v9) + v10);
    return v15;
  }
  return 0;
}

uint64_t sub_100038308(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  if (a1)
  {
    unsigned int v5 = (void *)(a1 + 24);
    __int32 v6 = sub_1000CED6C(a1 + 24);
    if (sub_1000BFD58(a2, v6, v7) && sub_1000BFD58(a2, *(_DWORD *)a1, v8))
    {
      int v9 = sub_1000CED6C((unint64_t)v5);
      if (sub_1000BFDB0(a2, v5, v9 + 1, 2, v10))
      {
        if (sub_100038308(*(void *)(a1 + 8), a2)
          && sub_100038308(*(void *)(a1 + 16), a2))
        {
          return 1;
        }
      }
    }
  }
  else if (sub_1000BFD58(a2, -1, a3))
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1000383E0(void *a1, uint64_t a2)
{
  int v15 = 0;
  uint64_t result = sub_1000BEECC(a2, &v15);
  if (!result) {
    return result;
  }
  int v12 = v15;
  if (v15 == -1)
  {
    int v14 = 0;
LABEL_11:
    *a1 = v14;
    return 1;
  }
  if (v15 <= 7) {
    int v12 = 7;
  }
  sub_1000C2F04((2 * (v12 - 7) + 47) & 0x3FFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
  int v14 = v13;
  uint64_t result = sub_1000BEECC(a2, v13);
  if (result)
  {
    uint64_t result = sub_1000BF34C(a2, v15 + 1, v14 + 24);
    if (result)
    {
      uint64_t result = sub_1000383E0(v14 + 8, a2);
      if (result)
      {
        uint64_t result = sub_1000383E0(v14 + 16, a2);
        if (result) {
          goto LABEL_11;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000384C0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C3670(*(void *)(result + 32));
    *(void *)(v1 + 24) = 0;
    *(void *)(v1 + 32) = 0;
    return sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_100038508(uint64_t result, int16x8_t *a2, _WORD *a3)
{
  uint64_t v4 = *(unsigned int *)result;
  uint64_t v3 = *(unsigned int *)(result + 4);
  int v5 = *(_DWORD *)(result + 8);
  int v6 = *(_DWORD *)(result + 12);
  if ((int)v4 < 1)
  {
    int v8 = 0;
    goto LABEL_10;
  }
  if (v4 < 0x10)
  {
    uint64_t v7 = 0;
    int v8 = 0;
LABEL_8:
    unsigned int v16 = &a2->i16[v7];
    uint64_t v17 = v4 - v7;
    do
    {
      int v18 = *v16++;
      v8 += v18;
      --v17;
    }
    while (v17);
    goto LABEL_10;
  }
  uint64_t v7 = v4 & 0x7FFFFFF0;
  uint64_t v9 = a2 + 1;
  int32x4_t v10 = 0uLL;
  uint64_t v11 = v4 & 0xFFFFFFF0;
  int32x4_t v12 = 0uLL;
  int32x4_t v13 = 0uLL;
  int32x4_t v14 = 0uLL;
  do
  {
    int16x8_t v15 = v9[-1];
    int32x4_t v12 = vaddw_high_s16(v12, v15);
    int32x4_t v10 = vaddw_s16(v10, *(int16x4_t *)v15.i8);
    int32x4_t v14 = vaddw_high_s16(v14, *v9);
    int32x4_t v13 = vaddw_s16(v13, *(int16x4_t *)v9->i8);
    v9 += 2;
    v11 -= 16;
  }
  while (v11);
  int v8 = vaddvq_s32(vaddq_s32(vaddq_s32(v13, v10), vaddq_s32(v14, v12)));
  if (v7 != v4) {
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v19 = *(int16x8_t ***)(result + 24);
  if (*(_DWORD *)(result + 20)) {
    v8 /= (int)v4;
  }
  int v20 = v8 << (v5 - v6);
  int v21 = (v8 + (1 << (v6 - v5 - 1))) >> (v6 - v5);
  BOOL v22 = __OFSUB__(v6, v5);
  int v23 = v6 - v5;
  if ((v23 < 0) ^ v22 | (v23 == 0)) {
    int v24 = v20;
  }
  else {
    int v24 = v21;
  }
  if (v24 >= 0x7FFF) {
    LOWORD(v24) = 0x7FFF;
  }
  *a3 = v24;
  if ((int)v3 >= 2)
  {
    uint64_t v25 = (_DWORD *)(result + 16);
    if ((int)v4 > 0)
    {
      uint64_t result = 4294934528;
      uint64_t v26 = 1;
      while (1)
      {
        uint64_t v28 = *v19;
        if (v4 >= 0x10)
        {
          uint64_t v31 = &v28->i16[v4 & 0xFFFFFFF0];
          int v32 = v28 + 1;
          int32x4_t v33 = 0uLL;
          uint64_t v34 = v4 & 0xFFFFFFF0;
          unsigned int v35 = a2 + 1;
          int32x4_t v36 = 0uLL;
          int32x4_t v37 = 0uLL;
          int32x4_t v38 = 0uLL;
          do
          {
            int16x8_t v39 = v35[-1];
            int16x8_t v40 = v32[-1];
            int32x4_t v36 = vmlal_high_s16(v36, v40, v39);
            int32x4_t v33 = vmlal_s16(v33, *(int16x4_t *)v40.i8, *(int16x4_t *)v39.i8);
            int32x4_t v38 = vmlal_high_s16(v38, *v32, *v35);
            int32x4_t v37 = vmlal_s16(v37, *(int16x4_t *)v32->i8, *(int16x4_t *)v35->i8);
            v35 += 2;
            v32 += 2;
            v34 -= 16;
          }
          while (v34);
          int v30 = vaddvq_s32(vaddq_s32(vaddq_s32(v37, v33), vaddq_s32(v38, v36)));
          uint64_t v29 = v4 & 0xFFFFFFF0;
          if ((v4 & 0x7FFFFFF0) == v4) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v29 = 0;
          int v30 = 0;
          uint64_t v31 = (__int16 *)*v19;
        }
        uint64_t v41 = &a2->i16[v29];
        uint64_t v42 = v4 - v29;
        do
        {
          int v44 = *v41++;
          int v43 = v44;
          int v45 = *v31++;
          v30 += v45 * v43;
          --v42;
        }
        while (v42);
LABEL_20:
        ++v19;
        int v27 = ((1 << (*v25 + v23 - 1)) + v30) >> (*v25 + v23);
        if (v27 >= 0x7FFF) {
          int v27 = 0x7FFF;
        }
        if (v27 <= -32768) {
          LOWORD(v27) = 0x8000;
        }
        a3[v26++] = v27;
        if (v26 == v3) {
          return result;
        }
      }
    }
    if (v3 >= 0x11 && ((unint64_t)(a3 + 1) >= result + 20 || v25 >= (_DWORD *)&a3[v3]))
    {
      unint64_t v50 = (v3 - 1) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v46 = v50 | 1;
      int32x4_t v51 = vdupq_n_s32(*v25 + v23);
      v52.i64[0] = -1;
      v52.i64[1] = -1;
      v53.i64[0] = 0x100000001;
      v53.i64[1] = 0x100000001;
      int32x4_t v54 = vshlq_s32((int32x4_t)vshlq_u32(v53, (uint32x4_t)vaddq_s32(v51, v52)), vnegq_s32(v51));
      int16x8_t v55 = vqmovn_high_s32(vqmovn_s32(v54), v54);
      int v56 = (int16x8_t *)(a3 + 9);
      unint64_t v57 = v50;
      do
      {
        v56[-1] = v55;
        *int v56 = v55;
        v56 += 2;
        v57 -= 16;
      }
      while (v57);
      if (v3 - 1 == v50) {
        return result;
      }
    }
    else
    {
      uint64_t v46 = 1;
    }
    uint64_t v47 = v3 - v46;
    int v48 = &a3[v46];
    do
    {
      int v49 = 1 << (*v25 + v23 - 1) >> (*v25 + v23);
      if (v49 >= 0x7FFF) {
        int v49 = 0x7FFF;
      }
      if (v49 <= -32768) {
        LOWORD(v49) = 0x8000;
      }
      *v48++ = v49;
      --v47;
    }
    while (v47);
  }
  return result;
}

void *sub_1000387D8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_1000BEC58(a1, "bdc0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  int32x4_t v10 = (void *)sub_1000C33A0(40);
  if (v10)
  {
    if (!sub_1000BEECC(v9, v10)
      || !sub_1000BEECC(v9, (char *)v10 + 4)
      || !sub_1000BEECC(v9, v10 + 1)
      || !sub_1000BEECC(v9, (char *)v10 + 12)
      || !sub_1000BEECC(v9, v10 + 2)
      || (uint64_t v11 = (void **)sub_1000C3740(2, (*((_DWORD *)v10 + 1) - 1), *(unsigned int *)v10),
          v10[3] = v11,
          v10[4] = v11,
          !sub_1000BF578(v9, v11, *((_DWORD *)v10 + 1) - 1, *(_DWORD *)v10, 2)))
    {
      sub_1000C3670(v10[4]);
      v10[3] = 0;
      v10[4] = 0;
      sub_1000C321C((uint64_t)v10);
      int32x4_t v10 = 0;
    }
  }
  sub_1000BED3C(v9);
  return v10;
}

uint64_t sub_1000388D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!*(unsigned char *)(a1 + 244))
  {
    uint64_t v9 = sub_100038BC0;
    if (!*(unsigned char *)(a1 + 245))
    {
      int v24 = sub_100038BC0;
      int v25 = a3;
LABEL_17:
      int v26 = a5 + *(_DWORD *)(a1 + 240) * v25;
      uint64_t v10 = *(void *)(a1 + 8);
      LODWORD(v11) = v26;
      int v27 = (__int16 *)(v10 + 6 * v26);
      if (!v27[1]) {
        goto LABEL_33;
      }
      uint64_t v28 = (_WORD *)(v10 + 6 * v26 + 4);
      int v29 = 0;
      if (!*(unsigned char *)(a1 + 246))
      {
        while (1)
        {
          uint64_t v30 = *v27 + (uint64_t)v29;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v24)(a1, v30, a2, a3, a4)) {
            break;
          }
          int v23 = *(char *)(*(void *)(a1 + 64) + v30);
          if ((v23 & 0x80000000) == 0) {
            goto LABEL_21;
          }
LABEL_22:
          if (v23 << 16 >= -65535) {
            return (unsigned __int16)v23;
          }
          int v29 = -(__int16)v23;
        }
        int v23 = *(char *)(*(void *)(a1 + 80) + v30);
        if (v23 < 0) {
          goto LABEL_22;
        }
LABEL_21:
        v23 += (unsigned __int16)*v28;
        goto LABEL_22;
      }
      while (1)
      {
        int v31 = v29 + *v27;
        if (((unsigned int (*)(uint64_t, void, uint64_t, uint64_t, uint64_t))v24)(a1, v31, a2, a3, a4))
        {
          int v23 = *(__int16 *)(*(void *)(a1 + 112) + 2 * v31);
          if (v23 < 0) {
            goto LABEL_26;
          }
        }
        else
        {
          int v23 = *(__int16 *)(*(void *)(a1 + 96) + 2 * v31);
          if (v23 < 0) {
            goto LABEL_26;
          }
        }
        __int16 v32 = *v28 + v23;
        int v23 = v32;
        if ((v32 & 0x8000) == 0) {
          return (unsigned __int16)v23;
        }
LABEL_26:
        int v29 = -v23;
      }
    }
LABEL_16:
    int v24 = v9;
    int v25 = *(__int16 *)(*(void *)(a1 + 192) + 2 * a3);
    goto LABEL_17;
  }
  uint64_t v9 = (BOOL (*)(uint64_t, int, int, uint64_t, unsigned int))sub_100038C4C;
  if (*(unsigned char *)(a1 + 245)) {
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = a5 + *(_DWORD *)(a1 + 240) * (int)a3;
  if (*(_WORD *)(v10 + 6 * v11 + 2))
  {
    int32x4_t v12 = (__int16 *)(v10 + 6 * (int)v11);
    int v15 = *v12;
    int32x4_t v13 = v12 + 2;
    int v14 = v15;
    uint64_t v16 = *(void *)(a1 + 144);
    uint64_t v17 = *(void *)(a1 + 128);
    int v18 = *(_DWORD *)(a1 + 52);
    uint64_t v19 = *(void *)(a1 + 24);
    if (*(unsigned char *)(a1 + 246))
    {
      int v20 = 0;
      while (1)
      {
        int v21 = v14 - v20;
        unint64_t v22 = (byte_1000F594C[((_BYTE)v14 - (_BYTE)v20) & 7] & *(unsigned char *)(v16
                                                                                         + ((unint64_t)(v14 - v20) >> 3))) != 0
            ? a2
            : a4;
        if ((byte_1000F594C[v22 & 7] & *(unsigned char *)(v19
                                                                  + v18
                                                                  * (unint64_t)*(unsigned __int8 *)(v17 + v21)
                                                                  + (v22 >> 3))) != 0)
          break;
        int v23 = *(__int16 *)(*(void *)(a1 + 96) + 2 * v21);
        if ((v23 & 0x80000000) == 0) {
          goto LABEL_14;
        }
LABEL_6:
        int v20 = (__int16)v23;
        if ((v23 & 0x8000) == 0) {
          return (unsigned __int16)v23;
        }
      }
      int v23 = *(__int16 *)(*(void *)(a1 + 112) + 2 * v21);
      if (v23 < 0) {
        goto LABEL_6;
      }
LABEL_14:
      LOWORD(v23) = *v13 + v23;
      goto LABEL_6;
    }
    int v34 = 0;
    while (1)
    {
      int v35 = v14 - v34;
      unint64_t v36 = (byte_1000F594C[((_BYTE)v14 - (_BYTE)v34) & 7] & *(unsigned char *)(v16
                                                                                       + ((unint64_t)(v14 - v34) >> 3))) != 0
          ? a2
          : a4;
      if ((byte_1000F594C[v36 & 7] & *(unsigned char *)(v19
                                                                + v18
                                                                * (unint64_t)*(unsigned __int8 *)(v17 + v35)
                                                                + (v36 >> 3))) != 0)
        break;
      int v23 = *(char *)(*(void *)(a1 + 64) + v35);
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_45;
      }
LABEL_37:
      int v34 = (__int16)v23;
      if (v23 << 16 >= -65535) {
        return (unsigned __int16)v23;
      }
    }
    int v23 = *(char *)(*(void *)(a1 + 80) + v35);
    if (v23 < 0) {
      goto LABEL_37;
    }
LABEL_45:
    v23 += (unsigned __int16)*v13;
    goto LABEL_37;
  }
LABEL_33:
  LOWORD(v23) = *(_WORD *)(v10 + 6 * (int)v11 + 4);
  return (unsigned __int16)v23;
}

BOOL sub_100038BC0(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5)
{
  unint64_t v5 = *(void *)(a1 + 24) + *(int *)(a1 + 52) * (unint64_t)*(unsigned __int8 *)(*(void *)(a1 + 128) + a2);
  if (a3 != 0xFFFF
    && (byte_1000F594C[(a3 + *(_DWORD *)(a1 + 56) / 2) & 7] & *(unsigned char *)(v5
                                                                                          + ((unint64_t)(a3 + *(_DWORD *)(a1 + 56) / 2) >> 3))) != 0)
  {
    return 1;
  }
  return a5 != 0xFFFF && (byte_1000F594C[a5 & 7] & *(unsigned char *)(v5 + ((unint64_t)a5 >> 3))) != 0;
}

BOOL sub_100038C4C(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unint64_t v5 = (unint64_t)a2 >> 3;
  int v6 = byte_1000F594C[a2 & 7];
  int v7 = (v6 & *(unsigned char *)(*(void *)(a1 + 144) + v5));
  if (!*(unsigned char *)(a1 + 245))
  {
    BOOL v9 = v7 == 0;
LABEL_9:
    if (v9) {
      unint64_t v10 = a5;
    }
    else {
      unint64_t v10 = a3;
    }
    if (v10 != 0xFFFF) {
      return (byte_1000F594C[v10 & 7] & *(unsigned char *)(*(void *)(a1 + 24)
    }
                                                                  + *(int *)(a1 + 52)
                                                                  * (unint64_t)*(unsigned __int8 *)(*(void *)(a1 + 128) + (int)a2)
                                                                  + (v10 >> 3))) != 0;
    return 0;
  }
  int v8 = *(unsigned __int8 *)(*(void *)(a1 + 152) + v5);
  BOOL v9 = v7 == 0;
  if ((v8 & v6) == 0) {
    goto LABEL_9;
  }
  if (v7) {
    unint64_t v10 = a3;
  }
  else {
    unint64_t v10 = a4;
  }
  if (v10 != 0xFFFF) {
    return (byte_1000F594C[v10 & 7] & *(unsigned char *)(*(void *)(a1 + 24)
  }
                                                                + *(int *)(a1 + 52)
                                                                * (unint64_t)*(unsigned __int8 *)(*(void *)(a1 + 128) + (int)a2)
                                                                + (v10 >> 3))) != 0;
  return 0;
}

uint64_t sub_100038CFC(uint64_t a1, unsigned int a2, int a3)
{
  if (*(unsigned char *)(a1 + 245)) {
    a2 = *(__int16 *)(*(void *)(a1 + 192) + 2 * a2);
  }
  return *(__int16 *)(*(void *)(a1 + 8) + 6 * (int)(a3 + *(_DWORD *)(a1 + 240) * a2) + 2);
}

uint64_t sub_100038D28(uint64_t a1, unsigned int a2, int a3, int a4)
{
  if (*(unsigned char *)(a1 + 245)) {
    a2 = *(__int16 *)(*(void *)(a1 + 192) + 2 * a2);
  }
  int v4 = a3 + *(_DWORD *)(a1 + 240) * a2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(__int16 *)(v5 + 6 * v4) + (uint64_t)a4;
  if (!*(unsigned char *)(a1 + 246))
  {
    LODWORD(v6) = *(char *)(*(void *)(a1 + 64) + v6);
    if ((v6 & 0x80000000) != 0) {
      return (__int16)v6;
    }
    goto LABEL_5;
  }
  LOWORD(v6) = *(_WORD *)(*(void *)(a1 + 96) + 2 * v6);
  if (((__int16)v6 & 0x80000000) == 0) {
LABEL_5:
  }
    LOWORD(v6) = v6 + *(_WORD *)(v5 + 6 * v4 + 4);
  return (__int16)v6;
}

uint64_t sub_100038D98(uint64_t a1, unsigned int a2, int a3, int a4)
{
  if (*(unsigned char *)(a1 + 245)) {
    a2 = *(__int16 *)(*(void *)(a1 + 192) + 2 * a2);
  }
  int v4 = a3 + *(_DWORD *)(a1 + 240) * a2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(__int16 *)(v5 + 6 * v4) + (uint64_t)a4;
  if (!*(unsigned char *)(a1 + 246))
  {
    LODWORD(v6) = *(char *)(*(void *)(a1 + 80) + v6);
    if ((v6 & 0x80000000) != 0) {
      return (__int16)v6;
    }
    goto LABEL_5;
  }
  LOWORD(v6) = *(_WORD *)(*(void *)(a1 + 112) + 2 * v6);
  if (((__int16)v6 & 0x80000000) == 0) {
LABEL_5:
  }
    LOWORD(v6) = v6 + *(_WORD *)(v5 + 6 * v4 + 4);
  return (__int16)v6;
}

uint64_t sub_100038E08(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_1000C321C(*(void *)(result + 16));
    v1[1] = 0;
    v1[2] = 0;
    sub_1000C321C(v1[9]);
    v1[8] = 0;
    v1[9] = 0;
    sub_1000C321C(v1[11]);
    v1[10] = 0;
    v1[11] = 0;
    sub_1000C321C(v1[13]);
    v1[12] = 0;
    v1[13] = 0;
    sub_1000C321C(v1[15]);
    v1[14] = 0;
    v1[15] = 0;
    sub_1000C321C(v1[17]);
    v1[16] = 0;
    v1[17] = 0;
    sub_1000C321C(v1[21]);
    v1[18] = 0;
    v1[21] = 0;
    sub_1000C321C(v1[22]);
    v1[19] = 0;
    v1[22] = 0;
    sub_1000C321C(v1[23]);
    v1[20] = 0;
    v1[23] = 0;
    sub_1000C321C(v1[25]);
    v1[24] = 0;
    v1[25] = 0;
    sub_1000C321C(v1[4]);
    v1[3] = 0;
    v1[4] = 0;
    return sub_1000C321C((uint64_t)v1);
  }
  return result;
}

uint64_t sub_100038ED4(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  int v3 = *(_DWORD *)(a1 + 216);
  if (*(int *)a1 >= 1)
  {
    int v4 = 0;
    unsigned __int16 v5 = 0;
    LODWORD(v6) = -1;
    while (v5)
    {
      signed int v7 = *(_DWORD *)(a1 + 240);
      uint64_t v6 = sub_1000C0758(v7, v6);
      if (v7 >= 1) {
        goto LABEL_8;
      }
LABEL_3:
      int v4 = ++v5;
      if (v2 <= v5) {
        goto LABEL_17;
      }
    }
    signed int v7 = 1;
    LODWORD(v6) = sub_1000C0758(1u, v6);
LABEL_8:
    uint64_t v8 = 0;
    do
    {
      int v9 = v4;
      if (*(unsigned char *)(a1 + 245)) {
        int v9 = *(__int16 *)(*(void *)(a1 + 192) + 2 * v5);
      }
      unsigned int v10 = sub_1000C0758(*(__int16 *)(*(void *)(a1 + 8) + 6 * (v8 + *(int *)(a1 + 240) * (uint64_t)v9) + 2), v6);
      int v11 = v4;
      if (*(unsigned char *)(a1 + 245)) {
        int v11 = *(__int16 *)(*(void *)(a1 + 192) + 2 * v5);
      }
      unsigned int v12 = sub_1000C0758(*(unsigned __int16 *)(*(void *)(a1 + 8) + 6 * (v8 + *(int *)(a1 + 240) * (uint64_t)v11) + 4), v10);
      int v13 = v4;
      if (*(unsigned char *)(a1 + 245)) {
        int v13 = *(__int16 *)(*(void *)(a1 + 192) + 2 * v5);
      }
      uint64_t v6 = sub_1000C0758(*(__int16 *)(*(void *)(a1 + 8) + 6 * (v8 + *(int *)(a1 + 240) * (uint64_t)v13)), v12);
      ++v8;
    }
    while (v7 != v8);
    goto LABEL_3;
  }
  uint64_t v6 = 0xFFFFFFFFLL;
LABEL_17:
  if (*(unsigned char *)(a1 + 246))
  {
    uint64_t v14 = sub_1000C09B0(*(unint64_t **)(a1 + 96), 2, v3, v6);
    int v15 = *(unint64_t **)(a1 + 112);
    int v16 = 2;
  }
  else
  {
    uint64_t v14 = sub_1000C09B0(*(unint64_t **)(a1 + 64), 1, v3, v6);
    int v15 = *(unint64_t **)(a1 + 80);
    int v16 = 1;
  }
  uint64_t v17 = sub_1000C09B0(v15, v16, v3, v14);
  uint64_t v18 = sub_1000C09B0(*(unint64_t **)(a1 + 128), 1, v3, v17);
  uint64_t v19 = sub_1000C09B0(*(unint64_t **)(a1 + 24), 1, *(_DWORD *)(a1 + 40), v18);
  if (*(unsigned char *)(a1 + 244) && !*(_DWORD *)(a1 + 248))
  {
    int v25 = v3 + 7;
    if (v3 < -7) {
      int v25 = v3 + 14;
    }
    uint64_t v19 = sub_1000C09B0(*(unint64_t **)(a1 + 144), 1, v25 >> 3, v19);
    if (*(unsigned char *)(a1 + 245)) {
      goto LABEL_23;
    }
    return v19;
  }
  if (!*(unsigned char *)(a1 + 245)) {
    return v19;
  }
LABEL_23:
  int v20 = *(_DWORD *)a1;
  int v21 = v3 + 7;
  if (v3 < -7) {
    int v21 = v3 + 14;
  }
  uint64_t v22 = sub_1000C09B0(*(unint64_t **)(a1 + 152), 1, v21 >> 3, v19);
  int v23 = *(unint64_t **)(a1 + 192);
  return sub_1000C09B0(v23, 2, v20, v22);
}

uint64_t sub_100039154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if ((int)sub_100004180(a2) > 2 || a3 && (int)sub_100004180(a3) > 2 || a4 && (int)sub_100004180(a4) > 2) {
    return 0;
  }
  uint64_t v12 = 0;
  switch(a6)
  {
    case 1:
      uint64_t v14 = sub_100052968(a1, a2, a5, 0);
      goto LABEL_20;
    case 3:
    case 7:
    case 9:
      if (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 1164)) {
        return 0;
      }
      uint64_t v14 = sub_10006767C(a1, a2, a5, a6 == 7, a6 == 9);
      goto LABEL_20;
    case 4:
      uint64_t v14 = sub_10009FAD0(a1, a2, a5);
      goto LABEL_20;
    case 5:
      uint64_t v14 = sub_10003E9FC(a1, a2, a3, a4, a5);
      goto LABEL_20;
    case 6:
      uint64_t v14 = (uint64_t)sub_10003CEB8(a1, a2, a3, a4, a5);
      goto LABEL_20;
    case 8:
      uint64_t v15 = sub_1000C33A0(520);
      uint64_t v12 = v15;
      if (v15)
      {
        *(_DWORD *)(v15 + 368) = 8;
        *(void *)uint64_t v15 = sub_10003BAA0;
      }
      return v12;
    case 10:
      uint64_t v14 = sub_100052968(a1, a2, a5, 1);
      goto LABEL_20;
    case 11:
      uint64_t v14 = sub_1000B1978(a1, a2, a3, a5);
LABEL_20:
      uint64_t v12 = v14;
      if (a6 != 8)
      {
        if (v14)
        {
          int v16 = *(void (**)(uint64_t, void, uint64_t))(v14 + 48);
          if (v16) {
            v16(v14, 0, 0x4000);
          }
        }
      }
      break;
    default:
      return v12;
  }
  return v12;
}

uint64_t sub_100039360(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 48);
  if (v1) {
    return v1();
  }
  else {
    return 1;
  }
}

uint64_t sub_100039374(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    sub_1000A4878(*(void *)(result + 504));
    *(void *)(v3 + 504) = 0;
    sub_1000A4878(*(void *)(v3 + 496));
    *(void *)(v3 + 496) = 0;
    sub_1000A3A68(*(void *)(v3 + 488));
    *(void *)(v3 + 488) = 0;
    uint64_t v4 = *(void *)(v3 + 392);
    if (v4 && *(_DWORD *)(v3 + 400)) {
      sub_10005A59C(v4);
    }
    *(void *)(v3 + 392) = 0;
    unsigned __int16 v5 = *(uint64_t (**)(uint64_t, uint64_t))v3;
    return v5(v3, a2);
  }
  return result;
}

uint64_t sub_1000393F8(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 8);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100039408(uint64_t a1)
{
  unsigned int v2 = sub_1000C085C(*(_DWORD *)(a1 + 372), 4, 0xFFFFFFFF);
  unsigned int v3 = sub_1000C085C(*(_DWORD *)(a1 + 416), 4, v2);
  unsigned int v4 = sub_1000C085C(*(char *)(a1 + 424), 1, v3);
  if (*(unsigned char *)(a1 + 424))
  {
    unsigned int v5 = sub_1000C085C(*(_DWORD *)(a1 + 428), 4, v4);
    LODWORD(v6) = *(_DWORD *)(a1 + 452);
    if ((int)v6 < 1) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v5 = sub_1000C085C(0x4000u, 2, v4);
    LODWORD(v6) = *(_DWORD *)(a1 + 452);
    if ((int)v6 < 1) {
      goto LABEL_7;
    }
  }
  uint64_t v7 = 0;
  do
  {
    unsigned int v5 = sub_1000C085C(*(unsigned __int16 *)(a1 + 448 + 2 * v7++), 2, v5);
    uint64_t v6 = *(int *)(a1 + 452);
  }
  while (v7 < v6);
LABEL_7:
  unsigned int v8 = sub_1000C085C(v6, 4, v5);
  if (*(int *)(a1 + 460) >= 1)
  {
    uint64_t v9 = 0;
    do
      unsigned int v8 = sub_1000C085C(*(unsigned __int16 *)(a1 + 456 + 2 * v9++), 2, v8);
    while (v9 < *(int *)(a1 + 460));
  }
  unsigned int v10 = *(_DWORD *)(a1 + 512);
  return sub_1000C085C(v10, 4, v8);
}

uint64_t sub_100039528(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 272);
  if (v1) {
    return v1();
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_10003953C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 16);
  if (v1) {
    return v1();
  }
  else {
    return 1;
  }
}

uint64_t sub_100039550(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 24);
  if (v1) {
    return v1();
  }
  else {
    return 1;
  }
}

uint64_t sub_100039564(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 264);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100039574(uint64_t a1, int a2, int a3)
{
  if (!a2)
  {
    *(unsigned char *)(a1 + 424) = 0;
    *(_DWORD *)(a1 + 428) = 0x4000;
    *(_DWORD *)(a1 + 416) = 0x40000000;
    return 1;
  }
  uint64_t v5 = qword_100101CC0;
  if (qword_100101CC0 && (*(_DWORD *)(qword_100101CC0 + 5356) || *(_DWORD *)(qword_100101CC0 + 5292)))
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 424) = 1;
    *(_DWORD *)(a1 + 428) = a3;
    *(_DWORD *)(a1 + 416) = 0;
  }
  else
  {
    uint64_t result = sub_100004160(*(void *)(a1 + 384));
    uint64_t v5 = qword_100101CC0;
    *(unsigned char *)(a1 + 424) = 1;
    *(_DWORD *)(a1 + 428) = a3;
    *(_DWORD *)(a1 + 416) = 0;
    if (!v5) {
      return result;
    }
  }
  if (*(_DWORD *)(v5 + 5268))
  {
    if (*(_DWORD *)(v5 + 5316)) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100039634(uint64_t a1, int a2, int a3)
{
  return sub_1000069F0(*(void *)(a1 + 384), *(void *)(a1 + 408), a2, a3);
}

uint64_t sub_10003964C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 184);
  if (v1) {
    return v1();
  }
  else {
    return 1;
  }
}

uint64_t sub_100039660(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 200))();
}

uint64_t sub_100039668(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 208))();
}

uint64_t sub_100039670(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 224);
  if (v1) {
    return v1();
  }
  else {
    return 0x40000000;
  }
}

uint64_t sub_100039684(uint64_t result)
{
  if (*(void *)(result + 224)) {
    return (*(uint64_t (**)(void))(result + 248))();
  }
  return result;
}

uint64_t sub_100039698(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 256);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_1000396A8(uint64_t result)
{
  *(_DWORD *)(result + 468) = 0;
  uint64_t v1 = *(uint64_t (**)(void))(result + 280);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_1000396BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8, int *a9, int *a10)
{
  unsigned int v24 = 0;
  *a7 = 0;
  *a8 = 0;
  if (!qword_100101CC0)
  {
    *a8 = 0;
    uint64_t v14 = qword_100101CC0;
    if (!qword_100101CC0)
    {
LABEL_8:
      *a7 = v14;
      int v15 = qword_100101CC0;
      if (qword_100101CC0) {
        int v15 = *(_DWORD *)(qword_100101CC0 + 4488);
      }
      *a9 = v15;
      int v16 = qword_100101CC0;
      if (qword_100101CC0) {
        int v16 = *(_DWORD *)(qword_100101CC0 + 4496);
      }
      *a10 = v16;
      return 1;
    }
LABEL_7:
    LODWORD(v14) = *(_DWORD *)(v14 + 1560);
    goto LABEL_8;
  }
  if (!*(_DWORD *)(qword_100101CC0 + 1160))
  {
    *a8 = *(_DWORD *)(qword_100101CC0 + 1536);
    uint64_t v14 = qword_100101CC0;
    if (!qword_100101CC0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (a2)
  {
    uint64_t result = sub_100033910(a2, (int *)&v24, a3, a4, a5, a6, (uint64_t)a7, (uint64_t)a8);
    if (!result) {
      return result;
    }
LABEL_16:
    uint64_t v17 = (unsigned char *)sub_1000B5110(*(uint64_t **)(a1 + 376));
    if (sub_1000CAED0(v17, "enus"))
    {
      if ((int)v24 >= 1)
      {
        if (v24 >= 0x208)
        {
          int v18 = 20000;
          if (v24 < 0x44C)
          {
            int v19 = 3000;
            int v20 = 6000;
            int v21 = 2500;
LABEL_52:
            *a9 = v21;
            *a10 = v18;
            *a7 = v20;
            uint64_t result = 1;
            *a8 = v19;
            return result;
          }
          BOOL v22 = v24 >= 0xC1C;
          if (v24 >= 0xC1C) {
            int v21 = 7000;
          }
          else {
            int v21 = 5000;
          }
          if (v24 >= 0xC1C) {
            int v20 = 30000;
          }
          else {
            int v20 = 20000;
          }
          if (v24 >= 0xC1C) {
            int v18 = 60000;
          }
          else {
            int v18 = 40000;
          }
          int v23 = 8000;
LABEL_49:
          if (v22) {
            int v19 = 12000;
          }
          else {
            int v19 = v23;
          }
          goto LABEL_52;
        }
        goto LABEL_23;
      }
    }
    else if ((int)v24 >= 1)
    {
      if (v24 >= 0x208)
      {
        if (v24 < 0x44C)
        {
          int v19 = 1000;
          int v20 = 6000;
          int v18 = 20000;
          int v21 = 2500;
          goto LABEL_52;
        }
        int v18 = 40000;
        int v21 = 5000;
        if (v24 < 0x834)
        {
          int v19 = 1500;
          int v20 = 6000;
          goto LABEL_52;
        }
        BOOL v22 = v24 >= 0xC1C;
        if (v24 >= 0xC1C) {
          int v21 = 7000;
        }
        else {
          int v21 = 5000;
        }
        if (v24 >= 0xC1C) {
          int v18 = 60000;
        }
        else {
          int v18 = 40000;
        }
        if (v24 >= 0xC1C) {
          int v20 = 30000;
        }
        else {
          int v20 = 10000;
        }
        int v23 = 2500;
        goto LABEL_49;
      }
LABEL_23:
      int v19 = 1000;
      int v20 = 3000;
      int v18 = 10000;
      int v21 = 1500;
      goto LABEL_52;
    }
    int v19 = 200;
    int v18 = 4000;
    int v21 = 500;
    int v20 = 500;
    goto LABEL_52;
  }
  uint64_t result = sub_1000269D0(a3, a4, &v24);
  if (result) {
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1000398F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 452) = a2;
  *(_DWORD *)(a1 + 436) = 0;
  *(void *)(a1 + 464) = 0;
  if (a6 <= 0xA && ((1 << a6) & 0x438) != 0)
  {
    if (!a4) {
      return 0;
    }
    int v16 = sub_100025D50(*a5);
    if ((int)a4 > 1)
    {
      int v17 = v16;
      int v18 = a5 + 1;
      uint64_t v19 = a4 - 1;
      while (sub_100025D50(*v18) == v17)
      {
        ++v18;
        if (!--v19) {
          goto LABEL_8;
        }
      }
      return 0;
    }
  }
  if ((int)a2 < 1) {
    goto LABEL_14;
  }
LABEL_8:
  unsigned int v20 = a2 - 2;
  if (a2 < 2) {
    unsigned int v20 = 0;
  }
  unsigned int v21 = *(_DWORD *)(a1 + 452) - v20;
  *(_DWORD *)(a1 + 452) = v21;
  memcpy((void *)(a1 + 448), (const void *)(a3 + 2 * v20), 2 * (int)v21);
  if (*(__int16 *)(a3 + 2 * (a2 - 1)) == -3)
  {
    *(_WORD *)(a1 + 456) = -4;
    int v22 = 1;
  }
  else
  {
LABEL_14:
    int v22 = 0;
    *(_WORD *)(a1 + 456) = -1;
  }
  *(_DWORD *)(a1 + 460) = v22;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int **, uint64_t, uint64_t, uint64_t, void, uint64_t))(a1 + 32))(a1, a3, a2, a5, a4, a6, a7, a8, a9);
  BOOL v24 = *(unsigned char *)(a1 + 424) == 0;
  *(_DWORD *)(a1 + 416) = (*(unsigned char *)(a1 + 424) == 0) << 30;
  if (v24) {
    int v25 = -1;
  }
  else {
    int v25 = 0;
  }
  *(_DWORD *)(a1 + 420) = v25;
  *(_DWORD *)(a1 + 468) = result;
  return result;
}

uint64_t sub_100039A78(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 40);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100039A88(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 216);
  if (v1) {
    return v1();
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

BOOL sub_100039A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  int v44 = 0;
  uint64_t v10 = *(int *)(a1 + 420);
  uint64_t v11 = *(unsigned int *)(a1 + 452);
  unint64_t v12 = sub_1000CD3E8(4 * ((int)v11 + 1), a2, a3, a4, a5, a6, a7, a8);
  unsigned int v20 = (void *)v12;
  if ((int)v11 >= 1)
  {
    unsigned int v21 = (unsigned __int16 *)(a1 + 448);
    uint64_t v22 = v11;
    int v23 = (_DWORD *)v12;
    do
    {
      unsigned int v24 = *v21++;
      *v23++ = sub_1000BD980(*(void *)(a1 + 376), v24);
      --v22;
    }
    while (v22);
  }
  __int16 v43 = 0;
  if (!*(unsigned char *)(a1 + 424))
  {
    int v25 = 0;
    int32x4_t v33 = 0;
    BOOL v34 = 0;
    goto LABEL_18;
  }
  int v25 = (void *)sub_1000CD3E8(512, v13, v14, v15, v16, v17, v18, v19);
  int32x4_t v33 = (void *)sub_1000CD3E8(128, v26, v27, v28, v29, v30, v31, v32);
  if (*(_DWORD *)(a1 + 468) && (*(unsigned int (**)(uint64_t))(a1 + 64))(a1) != 4)
  {
    if ((*(unsigned int (**)(uint64_t))(a1 + 64))(a1) != 3)
    {
      int v35 = (*(uint64_t (**)(uint64_t, uint64_t, int *, __int16 *, uint64_t, void *, void *, void, void, void, void, void, _DWORD, void))(a1 + 104))(a1, 1, &v44, &v43, 128, v25, v33, 0, 0, 0, 0, 0, 0, 0);
      if (v35)
      {
        if (v35 >= 1)
        {
          uint64_t v36 = 0;
          do
            int v37 = *((_DWORD *)v25 + v36++);
          while (v37 != -1);
          if (*(unsigned char *)(a1 + 424)) {
            int v38 = *(_DWORD *)(a1 + 416);
          }
          else {
            int v38 = 0x40000000;
          }
          int v40 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void, uint64_t, void *, void *))(a1 + 112))(a1, v11, v20, (v11 + v36 - 1), v36 - 1, v25, v33);
          if (qword_100101CC0)
          {
            if (*(_DWORD *)(qword_100101CC0 + 5268))
            {
              int v41 = (v44 - v40) * (306 - v8) / 256 - v38;
LABEL_27:
              BOOL v34 = v41 > 0;
              goto LABEL_18;
            }
            LODWORD(v42) = v44 - v38 - v40;
            if (*(_DWORD *)(qword_100101CC0 + 5316)) {
              uint64_t v42 = *(void *)(qword_100101CC0 + 4560) * (int)v42 / v10;
            }
          }
          else
          {
            LODWORD(v42) = v44 - v38 - v40;
          }
          int v41 = v42 - v8;
          goto LABEL_27;
        }
      }
      else
      {
        (*(void (**)(uint64_t))(a1 + 96))(a1);
      }
    }
    BOOL v34 = 1;
    goto LABEL_18;
  }
  *(_DWORD *)int v25 = -1;
  int v44 = 0x40000000;
  BOOL v34 = 1;
LABEL_18:
  sub_1000CD4D0(v33, 128);
  sub_1000CD4D0(v25, 512);
  sub_1000CD4D0(v20, 4 * ((int)v11 + 1));
  return v34;
}

uint64_t sub_100039D00(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, _DWORD *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a15) {
    *a15 = 0;
  }
  if (!*(_DWORD *)(a1 + 468) || (*(unsigned int (**)(uint64_t))(a1 + 64))(a1) == 4)
  {
    uint64_t result = 0;
    *a8 = -1;
    *a5 = 0x40000000;
    return result;
  }
  if ((*(unsigned int (**)(uint64_t))(a1 + 64))(a1) != 3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t))(a1 + 104))(a1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a2, a3);
    if (result) {
      goto LABEL_11;
    }
    (*(void (**)(uint64_t))(a1 + 96))(a1);
  }
  uint64_t result = 0;
LABEL_11:
  if (a15)
  {
    if ((int)result <= 0)
    {
      *a15 = 0;
    }
    else if (result == 1)
    {
      *a15 = 100;
    }
    else
    {
      int v24 = a5[1] - *a5;
      if (v24 >= 6400) {
        int v24 = 6400;
      }
      uint64_t v25 = qword_100101CC0;
      if (qword_100101CC0 && (uint64_t v25 = *(void *)(qword_100101CC0 + 1240), v25 * v24 > 3231)) {
        LODWORD(v26) = 100;
      }
      else {
        unint64_t v26 = (v25 * v24 + (v25 * v24 < 0 ? 0x1FuLL : 0)) >> 5;
      }
      *a15 = v26;
    }
  }
  return result;
}

uint64_t sub_100039E88(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 424)) {
    return *(unsigned int *)(a1 + 416);
  }
  else {
    return 0x40000000;
  }
}

uint64_t sub_100039EA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 112))();
}

uint64_t sub_100039EA8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 480) = a2;
  return (*(uint64_t (**)(void))(a1 + 160))();
}

uint64_t sub_100039EB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 64))();
}

uint64_t sub_100039EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 64))();
  if (result <= 6 && ((1 << result) & 0x66) != 0)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 56);
    return v8(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100039F40(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 72);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100039F50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 88))();
}

uint64_t sub_100039F58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 80))();
}

uint64_t sub_100039F60(uint64_t a1)
{
  return *(void *)(a1 + 408);
}

uint64_t sub_100039F68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 464);
}

uint64_t sub_100039F70(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 232);
  if (v1) {
    return v1();
  }
  else {
    return 0;
  }
}

uint64_t sub_100039F84(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 240);
  if (v1) {
    return v1();
  }
  else {
    return 0;
  }
}

BOOL sub_100039F98(uint64_t a1)
{
  return (*(unsigned int (**)(void))(a1 + 64))() == 3;
}

uint64_t sub_100039FBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 96))();
}

unint64_t sub_100039FC4(uint64_t a1, int a2, int a3)
{
  int v3 = a3 - a2;
  if (a3 - a2 >= 6400) {
    int v3 = 6400;
  }
  uint64_t v4 = qword_100101CC0;
  if (qword_100101CC0 && (uint64_t v4 = *(void *)(qword_100101CC0 + 1240), v4 * v3 > 3231)) {
    return 100;
  }
  else {
    return (v4 * v3 + (v4 * v3 < 0 ? 0x1FuLL : 0)) >> 5;
  }
}

uint64_t sub_10003A018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  if (a4 && *(_DWORD *)(a4 + 44) <= a8) {
    return 0;
  }
  int v8 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 144);
  if (!v8) {
    return 0;
  }
  else {
    return v8(a1, a2);
  }
}

uint64_t sub_10003A05C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 136))();
}

uint64_t sub_10003A064(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 128);
  if (v1) {
    return v1();
  }
  else {
    return 0;
  }
}

uint64_t sub_10003A078(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 152);
  if (v1) {
    return v1();
  }
  else {
    return 0;
  }
}

uint64_t sub_10003A0B4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 288);
  if (v1) {
    return v1();
  }
  else {
    return 1;
  }
}

uint64_t sub_10003A0C8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 296);
  if (v1) {
    return v1();
  }
  else {
    return 1;
  }
}

uint64_t sub_10003A0DC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 304);
  if (v1) {
    return v1();
  }
  else {
    return 1;
  }
}

uint64_t sub_10003A0F0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 312);
  if (v1) {
    return v1();
  }
  else {
    return 1;
  }
}

uint64_t sub_10003A104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (unsigned int *)a6;
  if ((int)a2 < 1)
  {
    uint64_t v14 = 0;
    uint64_t v23 = 2 * (int)a5;
    int v24 = (void *)sub_1000CD3E8(v23, a2, a3, a4, a5, a6, a7, a8);
    if ((int)a5 < 1) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t v14 = (void *)sub_1000CD3E8(2 * a2, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v15 = 0;
  do
  {
    *((_WORD *)v14 + v15) = sub_1000B5A58(*(void *)(a1 + 376), *(_DWORD *)(a3 + 4 * v15));
    ++v15;
  }
  while (a2 != v15);
  uint64_t v23 = 2 * (int)a5;
  int v24 = (void *)sub_1000CD3E8(v23, v16, v17, v18, v19, v20, v21, v22);
  if ((int)a5 >= 1)
  {
LABEL_7:
    uint64_t v25 = a5;
    unint64_t v26 = v24;
    do
    {
      unsigned int v27 = *v8++;
      *v26++ = sub_1000B5AE4(*(void *)(a1 + 376), v27, 0);
      --v25;
    }
    while (v25);
  }
LABEL_9:
  uint64_t v28 = sub_10003C5C0(*(void *)(a1 + 376), a4, a2, (uint64_t)v14, *(unsigned int *)(a1 + 460), a1 + 456, (uint64_t)v24, a5);
  sub_1000CD4D0(v24, v23);
  sub_1000CD4D0(v14, 2 * (int)a2);
  return v28;
}

uint64_t sub_10003A230(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 120);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_10003A240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v10 = 0;
  uint64_t result = sub_100006CCC(*(void *)(a1 + 384), &v10, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 416) += result;
  if (v10) {
    ++*(_DWORD *)(a1 + 420);
  }
  return result;
}

uint64_t sub_10003A298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, int *a10)
{
  sub_1000B4B84(a10);
  if (!sub_1000398F8(a1, a2, a3, a4, a5, a6, a7, a8, a9)) {
    return 3;
  }
  uint64_t v24 = 0;
  while (1)
  {
    uint64_t v17 = sub_1000B4B94(a10, &v24);
    if (!v17) {
      break;
    }
    uint64_t v18 = v17;
    uint64_t v19 = v24;
    unsigned int v20 = (*(uint64_t (**)(uint64_t))(a1 + 64))(a1);
    if (v20 <= 6 && ((1 << v20) & 0x66) != 0) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 56))(a1, v18, v19);
    }
    if (((*(uint64_t (**)(uint64_t))(a1 + 64))(a1) & 0xFFFFFFFE) == 2) {
      break;
    }
    if (sub_1000D2974())
    {
      (*(void (**)(uint64_t))(a1 + 96))(a1);
      break;
    }
  }
  *(void *)(a1 + 480) = a10;
  (*(void (**)(uint64_t, int *))(a1 + 160))(a1, a10);
  return (*(uint64_t (**)(uint64_t))(a1 + 64))(a1);
}

uint64_t sub_10003A3E8(uint64_t a1, uint64_t a2, int *a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  int v44 = sub_1000041DC(*(void *)(a1 + 384));
  int32x4_t v51 = a3;
  sub_1000B4B84(a3);
  if (*(unsigned char *)(a1 + 424)) {
    *(_DWORD *)(a1 + 416) = 0;
  }
  int16x8_t v55 = 0;
  sub_100005A6C(*(void *)(a1 + 384), v10, v11, v12, v13, v14, v15);
  if (*(int *)(a2 + 36) < 1)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v16 = 0;
    signed __int16 v17 = 0;
    uint64_t v18 = 0;
    BOOL v19 = a5 != 0;
    if (a6) {
      BOOL v20 = a5 != 0;
    }
    else {
      BOOL v20 = 0;
    }
    __int16 v49 = 0;
    BOOL v50 = v20;
    if (!a6) {
      BOOL v19 = 1;
    }
    BOOL v46 = v19;
    do
    {
      if (*(__int16 *)(*(void *)(a2 + 8) + 2 * v16) < 1)
      {
        int v21 = 0;
        int v53 = 0;
      }
      else
      {
        int v21 = 0;
        int v22 = 0;
        if (a4) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = *(unsigned __int16 *)(*(void *)a2 + 2 * v16) == v44;
        }
        int v24 = v23;
        int v52 = v24;
        int v53 = 0;
        do
        {
          uint64_t v25 = sub_1000B4B94(v51, &v55);
          sub_100006AA4(*(void *)(a1 + 384), v25, v55, *(void *)(a1 + 408), v17, 0, v26, v27, v28, v29, v30, v31);
          int v32 = sub_1000121BC(*(void *)(a1 + 384), *(unsigned __int16 *)(*(void *)a2 + 2 * v16));
          int v39 = v32;
          if (v52) {
            int v40 = 0;
          }
          else {
            int v40 = v32;
          }
          if (*(unsigned char *)(a1 + 424))
          {
            __int16 v41 = a7;
            if (a7)
            {
              BOOL v56 = 0;
              int v42 = sub_100006CCC(*(void *)(a1 + 384), &v56, v33, v34, v35, v36, v37, v38);
              *(_DWORD *)(a1 + 416) += v42;
              if (v56) {
                ++*(_DWORD *)(a1 + 420);
              }
              __int16 v41 = v39 - v42;
            }
            __int16 v49 = v41;
            v53 += v41;
          }
          sub_100006C90(*(void *)(a1 + 384), v17, (_DWORD *)(a1 + 436));
          if (a7 && a5 && *(unsigned char *)(a1 + 424)) {
            *(_DWORD *)(a7 + 4 * v17) = v49;
          }
          if (v50) {
            *(_DWORD *)(a6 + 4 * v17) = v39;
          }
          uint64_t v18 = (v40 + v18);
          v21 += v40;
          ++v17;
          ++v22;
        }
        while (v22 < *(__int16 *)(*(void *)(a2 + 8) + 2 * v16));
      }
      if (a7 && !a5 && *(unsigned char *)(a1 + 424)) {
        *(_DWORD *)(a7 + 4 * v16) = v53;
      }
      if (!v46) {
        *(_DWORD *)(a6 + 4 * v16) = v21;
      }
      ++v16;
    }
    while (v16 < *(int *)(a2 + 36));
  }
  sub_1000B4B94(v51, 0);
  return v18;
}

BOOL sub_10003A678(uint64_t a1, unsigned int *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    return 0;
  }
  int v9 = a3;
  if ((int)a3 >= 1)
  {
    uint64_t v12 = a3;
    int32x4_t v13 = a2;
    while (1)
    {
      int v14 = sub_1000B5A58(*(void *)(a1 + 376), *v13);
      unsigned int v15 = *v13++;
      if (v15 == -1 || v14 == 0xFFFF) {
        break;
      }
      if (!--v12) {
        goto LABEL_9;
      }
    }
    (*(void (**)(uint64_t))(a1 + 96))(a1);
    return 0;
  }
LABEL_9:
  int v46 = 0;
  int v17 = (2 * v9) | 1;
  uint64_t v18 = v17;
  uint64_t v44 = 4 * v17;
  BOOL v19 = (unsigned int *)sub_1000CD3E8(v44, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  double v27 = (unsigned char *)sub_1000CD3E8(v17, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v43 = 2 * v17;
  uint64_t v35 = (int16x8_t *)sub_1000CD3E8(v43, v28, v29, v30, v31, v32, v33, v34);
  if (v9 != 1)
  {
    uint64_t v36 = v19;
    unsigned int v39 = sub_10003A91C(a1, v9, v17, (uint64_t)a2, v19, v35, (uint64_t)v27, a4, &v46);
    goto LABEL_16;
  }
  uint64_t v36 = v19;
  if (sub_1000B5C44(*(uint64_t **)(a1 + 376), *a2) != 1)
  {
    unsigned int v39 = sub_10003A91C(a1, 1, v17, (uint64_t)a2, v19, v35, (uint64_t)v27, a4, &v46);
LABEL_16:
    BOOL v40 = v39;
    int v37 = (*(uint64_t (**)(uint64_t))(a1 + 64))(a1);
    if (!v40) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  sub_1000B594C(*(void *)(a1 + 376), *a2, v35, 1);
  *double v27 = 0;
  int v46 = 1;
  int v37 = (*(uint64_t (**)(uint64_t))(a1 + 64))(a1);
LABEL_17:
  if (sub_10003AF4C(a1, v9)) {
    BOOL v40 = sub_1000A4AAC(*(void *)(a1 + 496), v9) != 0;
  }
  else {
    BOOL v40 = 0;
  }
LABEL_20:
  sub_1000A4A58(*(void *)(a1 + 496));
  sub_1000A4A58(*(void *)(a1 + 504));
  sub_1000B4B84(a4);
  if (v40)
  {
    int v41 = sub_100004178(*(void *)(a1 + 384))
       && qword_100101CC0
       && *(_DWORD *)(qword_100101CC0 + 1480) != 0;
    int v37 = sub_10003B000(a1, v46, (unsigned __int16 *)v35, v27, a4, v41, &v45);
    if (v37 != 3) {
      sub_1000A4A38(*(void *)(a1 + 504), *(void *)(a1 + 496));
    }
  }
  sub_1000CD4D0(v35, v43);
  sub_1000CD4D0(v27, v18);
  sub_1000CD4D0(v36, v44);
  if (v37 != 3 && v40) {
    return *(_DWORD *)(*(void *)(a1 + 504) + 68) != 0x40000000;
  }
  return 0;
}

unsigned int *sub_10003A91C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, int16x8_t *a6, uint64_t a7, int *a8, _DWORD *a9)
{
  uint64_t v16 = a9;
  *a9 = 0;
  int v17 = *(uint64_t **)(a1 + 376);
  if (qword_100101CC0)
  {
    uint64_t v18 = sub_1000303C4(a4, a2, v17, *(_DWORD *)(qword_100101CC0 + 4928));
    uint64_t v103 = v18;
    if (v18) {
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v18 = sub_1000303C4(a4, a2, v17, 0);
  uint64_t v103 = v18;
  if (!v18) {
    return 0;
  }
LABEL_3:
  BOOL v19 = (unsigned int *)v18;
  uint64_t v104 = 0;
  int v102 = 0;
  __int16 v101 = 0;
  uint64_t v100 = 0;
  uint64_t v97 = a3;
  if (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 3320))
  {
    unint64_t v57 = 0;
    uint64_t v58 = 1;
    goto LABEL_35;
  }
  __s1 = (unsigned int *)a4;
  int v92 = (unsigned int *)v18;
  int v93 = a5;
  uint64_t v20 = a6;
  uint64_t v21 = *(uint64_t **)(a1 + 376);
  int v22 = sub_1000B51A0(v21) + 1;
  int v23 = sub_1000B51E0(v21) + 1;
  uint64_t v91 = 4 * (int)a3;
  uint64_t v31 = (_DWORD *)sub_1000CD3E8(v91, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v90 = 2 * v22;
  unsigned int v39 = (_WORD *)sub_1000CD3E8(v90, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v89 = 2 * v23;
  uint64_t v47 = (unsigned __int16 *)sub_1000CD3E8(v89, v40, v41, v42, v43, v44, v45, v46);
  int v94 = a2;
  __s2 = v31;
  if (a2 < 1)
  {
    BOOL v59 = 0;
    a6 = v20;
    a5 = v93;
    goto LABEL_27;
  }
  unsigned int v88 = v20;
  uint64_t v48 = a2;
  int v49 = 1;
  BOOL v50 = __s1;
  do
  {
    sub_1000B5360((uint64_t)v21, *v50, (uint64_t)v39, v47);
    unsigned int v55 = *v50;
    *uint64_t v31 = *v50;
    if (!v47) {
      goto LABEL_7;
    }
    int v56 = *v47;
    if (v56 == 109)
    {
      unsigned int v55 = sub_1000B5208(v21, v39);
      *uint64_t v31 = v55;
      int v56 = *v47;
      if (v56 == 109)
      {
        if (v47[1] != 122) {
          goto LABEL_7;
        }
        unsigned int v55 = sub_1000B5208(v21, v39);
        *uint64_t v31 = v55;
        int v56 = *v47;
      }
    }
    if (v56 == 102)
    {
      unsigned int v55 = sub_1000B5208(v21, v39);
      *uint64_t v31 = v55;
      if (*v47 == 102 && v47[1] == 122)
      {
        unsigned int v55 = sub_1000B5208(v21, v39);
        *uint64_t v31 = v55;
      }
    }
LABEL_7:
    int v51 = sub_1000B5A58(*(void *)(a1 + 376), v55);
    unsigned int v53 = *v50++;
    unsigned int v52 = v53;
    BOOL v54 = v51 == 0xFFFF || v52 == -1;
    if (v54) {
      int v49 = 0;
    }
    ++v31;
    --v48;
  }
  while (v48);
  BOOL v59 = v49 == 0;
  a5 = v93;
  a6 = v88;
LABEL_27:
  int v60 = memcmp(__s1, __s2, 4 * a2);
  unint64_t v57 = 0;
  uint64_t v58 = 1;
  BOOL v19 = v92;
  if (v60 && !v59)
  {
    if (qword_100101CC0) {
      int v61 = *(_DWORD *)(qword_100101CC0 + 4928);
    }
    else {
      int v61 = 0;
    }
    unint64_t v57 = (unsigned int *)sub_1000303C4((uint64_t)__s2, v94, *(uint64_t **)(a1 + 376), v61);
    uint64_t v104 = v57;
    if (v57)
    {
      uint64_t v58 = 2;
      goto LABEL_34;
    }
    sub_1000CD4D0(v47, v89);
    sub_1000CD4D0(v39, v90);
    sub_1000CD4D0(__s2, v91);
    uint64_t v80 = (uint64_t)v92;
LABEL_64:
    sub_100026244(v80);
    return v57;
  }
LABEL_34:
  sub_1000CD4D0(v47, v89);
  sub_1000CD4D0(v39, v90);
  sub_1000CD4D0(__s2, v91);
  uint64_t v16 = a9;
LABEL_35:
  sub_1000B4B84(a8);
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 452) = 0;
  *(_DWORD *)(a1 + 436) = 0;
  *(void *)(a1 + 464) = 0;
  int v62 = sub_100025D50(v19);
  if (v58 >= 2 && sub_100025D50(v57) != v62) {
    goto LABEL_57;
  }
  *(_WORD *)(a1 + 456) = -1;
  *(_DWORD *)(a1 + 460) = 0;
  int v63 = (*(uint64_t (**)(uint64_t, void, void, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, const mach_header_64 *))(a1 + 32))(a1, 0, 0, &v103, v58, 3, 2, 1, &_mh_execute_header);
  BOOL v54 = *(unsigned char *)(a1 + 424) == 0;
  *(_DWORD *)(a1 + 416) = (*(unsigned char *)(a1 + 424) == 0) << 30;
  int v64 = v54 ? -1 : 0;
  *(_DWORD *)(a1 + 420) = v64;
  *(_DWORD *)(a1 + 468) = v63;
  if (!v63) {
    goto LABEL_57;
  }
  LODWORD(v65) = v63;
  uint64_t v66 = a7;
  uint64_t v67 = a6;
  uint64_t v95 = v66;
  do
  {
    uint64_t v68 = sub_1000B4B94(a8, &v100);
    if (!v68) {
      break;
    }
    uint64_t v69 = v68;
    uint64_t v70 = v100;
    unsigned int v71 = (*(uint64_t (**)(uint64_t))(a1 + 64))(a1);
    if (v71 <= 6 && ((1 << v71) & 0x66) != 0) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 56))(a1, v69, v70);
    }
  }
  while (((*(uint64_t (**)(uint64_t))(a1 + 64))(a1) & 0xFFFFFFFE) != 2);
  *(void *)(a1 + 480) = a8;
  (*(void (**)(uint64_t))(a1 + 160))(a1);
  int v73 = (*(uint64_t (**)(uint64_t))(a1 + 64))(a1);
  unint64_t v57 = 0;
  if (v73 == 3) {
    int v65 = 0;
  }
  else {
    int v65 = (unsigned int *)v65;
  }
  if (v73 != 3)
  {
    if (!*(_DWORD *)(a1 + 468) || (*(unsigned int (**)(uint64_t))(a1 + 64))(a1) == 4)
    {
      *a5 = -1;
      int v102 = 0x40000000;
      goto LABEL_56;
    }
    if ((*(unsigned int (**)(uint64_t))(a1 + 64))(a1) != 3)
    {
      int v82 = (*(uint64_t (**)(uint64_t, uint64_t, int *, __int16 *, uint64_t, unsigned int *, uint64_t, void, void, void, void, void, _DWORD, void))(a1 + 104))(a1, 1, &v102, &v101, v97, a5, v95, 0, 0, 0, 0, 0, 0, 0);
      if (v82)
      {
        if (v82 >= 1)
        {
          uint64_t v83 = 0;
          do
          {
            uint64_t v84 = v83;
            unsigned int v85 = a5[v83++];
          }
          while (v85 != -1);
          *uint64_t v16 = v84;
          if (v84)
          {
            uint64_t v86 = -1;
            do
            {
              unsigned int v87 = *a5++;
              sub_1000B594C(*(void *)(a1 + 376), v87, v67, v83 + v86--);
              uint64_t v67 = (int16x8_t *)((char *)v67 + 2);
            }
            while (v84 + v86 != -1);
          }
          unint64_t v57 = v65;
          goto LABEL_58;
        }
      }
      else
      {
        (*(void (**)(uint64_t))(a1 + 96))(a1);
      }
    }
LABEL_56:
    (*(void (**)(uint64_t))(a1 + 96))(a1);
LABEL_57:
    unint64_t v57 = 0;
  }
LABEL_58:
  uint64_t v74 = v58 - 1;
  uint64_t v75 = *(&v103 + v74);
  *(_DWORD *)(a1 + 468) = 0;
  uint64_t v76 = *(void (**)(uint64_t, uint64_t))(a1 + 280);
  if (v76)
  {
    v76(a1, v75);
    uint64_t v75 = *(&v103 + v74);
  }
  sub_100026244(v75);
  if (v58 >= 2)
  {
    uint64_t v77 = v58 - 2;
    uint64_t v78 = *(&v103 + v77);
    *(_DWORD *)(a1 + 468) = 0;
    uint64_t v79 = *(void (**)(uint64_t, uint64_t))(a1 + 280);
    if (v79)
    {
      v79(a1, v78);
      uint64_t v78 = *(&v103 + v77);
    }
    uint64_t v80 = v78;
    goto LABEL_64;
  }
  return v57;
}

uint64_t sub_10003AF4C(uint64_t a1, int a2)
{
  if (!*(void *)(a1 + 488))
  {
    uint64_t result = sub_1000A3A20(*(void *)(a1 + 384), *(void *)(a1 + 376), *(_DWORD *)(a1 + 432));
    *(void *)(a1 + 488) = result;
    if (!result) {
      return result;
    }
  }
  uint64_t v5 = *(void *)(a1 + 504);
  if (v5 && *(_DWORD *)(v5 + 40) < a2)
  {
    sub_1000A4878(v5);
    uint64_t v5 = 0;
    *(void *)(a1 + 504) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 496);
  if (!v6) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(v6 + 40) < a2)
  {
    sub_1000A4878(*(void *)(a1 + 496));
    *(void *)(a1 + 496) = 0;
LABEL_9:
    uint64_t result = sub_1000A48F0(*(uint64_t **)(a1 + 376), a2);
    *(void *)(a1 + 496) = result;
    if (!result) {
      return result;
    }
    uint64_t v5 = *(void *)(a1 + 504);
  }
  if (v5) {
    return 1;
  }
  uint64_t result = sub_1000A48F0(*(uint64_t **)(a1 + 376), a2);
  *(void *)(a1 + 504) = result;
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_10003B000(uint64_t a1, int a2, unsigned __int16 *a3, const void *a4, int *a5, int a6, _DWORD *a7)
{
  if (!a2) {
    goto LABEL_13;
  }
  if (!sub_10003AF4C(a1, a2)) {
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(a1 + 496);
  if (!sub_1000A4AAC(v14, a2)) {
    goto LABEL_13;
  }
  sub_1000A4A58(*(void *)(a1 + 496));
  int v15 = sub_10009F2BC((uint64_t)a5);
  if (v15 <= 0) {
    goto LABEL_13;
  }
  uint64_t v33 = 0;
  int v22 = sub_1000A3ED4(*(void *)(a1 + 488), v15, a6, 0x7FFFFFFF, 1, 0, a2, a3, v16, v17, v18, v19, v20, v21, 0, *(unsigned __int16 **)(v14 + 24), *(_DWORD *)(v14 + 32), *(_WORD **)v14, *(_WORD **)(v14 + 16),
          *(void *)(v14 + 8),
          (int *)(v14 + 36),
          (uint64_t)a4);
  *(void *)(v14 + 72) = *(int *)(a1 + 432);
  if (!v22) {
    goto LABEL_13;
  }
  memcpy(*(void **)(v14 + 48), a3, 2 * a2);
  memcpy(*(void **)(v14 + 56), a4, a2);
  *(_DWORD *)(v14 + 44) = a2;
  *(_DWORD *)(v14 + 64) = 0;
  sub_1000B4B84(a5);
  int v23 = qword_100101CC0 ? *(_DWORD *)(qword_100101CC0 + 5372) : 0;
  sub_1000069F0(*(void *)(a1 + 384), *(void *)(a1 + 408), 0, v23);
  do
  {
    uint64_t v24 = sub_1000B4B94(a5, &v33);
    if (!v24) {
      break;
    }
    int v31 = sub_1000A4480(*(void *)(a1 + 488), v24, v33, *(void *)(a1 + 408), v25, v26, v27, v28, v29, v30);
    ++*(_DWORD *)(v14 + 64);
  }
  while ((v31 & 0xFFFFFFFE) != 2);
  uint64_t result = sub_1000A429C(*(void *)(a1 + 488), 0, (int *)(v14 + 68));
  *a7 = *(_DWORD *)(v14 + 68);
  if (result == 3)
  {
LABEL_13:
    (*(void (**)(uint64_t))(a1 + 96))(a1);
    return 3;
  }
  return result;
}

void sub_10003B1BC(uint64_t a1)
{
  sub_1000A4A58(*(void *)(a1 + 496));
  uint64_t v2 = *(void *)(a1 + 504);
  sub_1000A4A58(v2);
}

BOOL sub_10003B1F8(uint64_t a1, uint64_t a2, unsigned int *a3, int *a4, _DWORD *a5, void *a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0x40000000;
  BOOL result = sub_10003A678(a1, a3, a2, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  if (result)
  {
    *a5 = *(_DWORD *)(*(void *)(a1 + 504) + 68);
    uint64_t v12 = *(void *)(a1 + 504);
    BOOL result = 1;
    if (!a6) {
      return result;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (!a6) {
      return result;
    }
  }
  *a6 = v12;
  return result;
}

uint64_t sub_10003B26C(uint64_t a1, uint64_t a2, int *a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  if (qword_100101CC0) {
    int v14 = *(_DWORD *)(qword_100101CC0 + 5372);
  }
  else {
    int v14 = 0;
  }
  sub_1000069F0(*(void *)(a1 + 384), *(void *)(a1 + 408), 0, v14);
  return sub_10003A3E8(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10003B314(uint64_t a1, uint64_t a2, unsigned int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_100101CC0)
  {
    int v10 = *(_DWORD *)(qword_100101CC0 + 48);
    if (!*(void *)(a1 + 488)) {
      return 3;
    }
  }
  else
  {
    int v10 = 0;
    if (!*(void *)(a1 + 488)) {
      return 3;
    }
  }
  if (!a2 || !*(void *)(a1 + 496) || !sub_10003A678(a1, a3, a2, a4, a5, a6, a7, a8)) {
    return 3;
  }
  return sub_10003B3C8(a1, a4, 0, v10);
}

uint64_t sub_10003B3C8(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  uint64_t v5 = a3;
  if (a3)
  {
    if (*(_DWORD *)(a3 + 68) == 0x40000000) {
      return 3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 504);
    if (*(_DWORD *)(v5 + 68) == 0x40000000) {
      return 3;
    }
  }
  if (!*(_DWORD *)(v5 + 64)) {
    return 3;
  }
  if (!a4) {
    goto LABEL_23;
  }
  uint64_t v24 = 0;
  uint64_t v8 = *(void *)(a1 + 384);
  sub_1000B4B84(a2);
  int v9 = *(_DWORD *)(v5 + 36);
  if (v9 > 0)
  {
    signed __int16 v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(v5 + 8);
    while (*(__int16 *)(v12 + 2 * v11) < 1)
    {
LABEL_10:
      if (++v11 >= v9) {
        goto LABEL_16;
      }
    }
    int v14 = 0;
    while (1)
    {
      uint64_t v15 = sub_1000B4B94(a2, &v24);
      sub_100006AA4(v8, v15, v24, *(void *)(a1 + 408), v10, 0, v16, v17, v18, v19, v20, v21);
      int v22 = sub_10000CC88(v8, *(unsigned __int16 *)(*(void *)v5 + 2 * v11), a4);
      sub_100006C90(v8, v10, (_DWORD *)(a1 + 436));
      if (!v22) {
        return 4;
      }
      ++v14;
      ++v10;
      uint64_t v12 = *(void *)(v5 + 8);
      if (v14 >= *(__int16 *)(v12 + 2 * v11))
      {
        int v9 = *(_DWORD *)(v5 + 36);
        goto LABEL_10;
      }
    }
  }
LABEL_16:
  if (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 884)) {
    goto LABEL_23;
  }
  int v23 = sub_10000A0C8(*(void *)(a1 + 384));
  if (v23 && qword_100101CC0)
  {
    if (*(_DWORD *)(qword_100101CC0 + 4604))
    {
      int v23 = sub_10000CB40(*(void *)(a1 + 384));
      goto LABEL_22;
    }
LABEL_23:
    uint64_t result = 0;
    ++*(_DWORD *)(a1 + 512);
    return result;
  }
LABEL_22:
  if (v23) {
    goto LABEL_23;
  }
  return 4;
}

uint64_t sub_10003B590(uint64_t a1)
{
  return 4 * (sub_10000A0C8(*(void *)(a1 + 384)) == 0);
}

uint64_t sub_10003B5B8(uint64_t a1, unsigned int a2, int a3)
{
  sub_10000AF7C(*(void *)(a1 + 384));
  BOOL v6 = sub_10000ACBC(*(void *)(a1 + 384), a2, a3) == 0;
  *(_DWORD *)(a1 + 512) = 0;
  return (4 * v6);
}

uint64_t sub_10003B610(void *a1)
{
  sub_1000A4878(a1[63]);
  a1[63] = 0;
  sub_1000A4878(a1[62]);
  a1[62] = 0;
  sub_1000A3A68(a1[61]);
  a1[61] = 0;
  uint64_t v2 = a1[48];
  return sub_10000AF7C(v2);
}

uint64_t sub_10003B668(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 320);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_10003B678(uint64_t a1)
{
  uint64_t result = sub_100009398();
  *(void *)(a1 + 408) = result;
  return result;
}

uint64_t sub_10003B6A0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v21 = 0;
  if ((int)sub_100004180(a4) > 2 || a5 && (int)sub_100004180(a5) > 2 || a6 && (int)sub_100004180(a6) > 2) {
    return 0;
  }
  v22[0] = 0;
  if (a2) {
    sub_1000CAD88(v22, a2, 256);
  }
  sub_1000CAE14(v22, "bd0", 256);
  if (!sub_1000CBF58(a1, v22)) {
    return 0;
  }
  uint64_t result = (uint64_t)sub_1000BEC58(a1, "bd0", a2, v12, v13, v14, v15, v16);
  if (!result) {
    return result;
  }
  uint64_t v18 = result;
  *(_DWORD *)int v22 = 0;
  if (!sub_1000BEECC(result, v22))
  {
    sub_1000BED3C(v18);
    return 0;
  }
  uint64_t v19 = *(unsigned int *)v22;
  BOOL v20 = sub_1000BEECC(v18, &v21);
  sub_1000BED3C(v18);
  if (!v20) {
    return 0;
  }
  switch((int)v19)
  {
    case 1:
      uint64_t result = sub_100053B8C(a1, a2, a3, a4, v21);
      break;
    case 5:
      uint64_t result = sub_10003ED14(a1, a2, a3, a4, a5, a6, v21);
      break;
    case 6:
      uint64_t result = (uint64_t)sub_10003D0E8(a1, a2, a3, a4, a5, a6, v21);
      break;
    case 11:
      uint64_t result = sub_1000B1B98(a1, a2, a3, a4, a5, v21);
      break;
    default:
      uint64_t result = sub_100039154(a3, a4, a5, 0, v21, v19);
      break;
  }
  return result;
}

void sub_10003B8F4(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  int v5 = *a4;
  if (!qword_100101CC0) {
    goto LABEL_27;
  }
  int v9 = *(_DWORD *)(qword_100101CC0 + 4596);
  if ((v9 - 4) >= 2)
  {
    if (v9 == 2) {
      goto LABEL_17;
    }
    int v10 = 0;
    if (!*(_DWORD *)(qword_100101CC0 + 1764)) {
      goto LABEL_17;
    }
LABEL_7:
    uint64_t v11 = *(void *)(a1 + 480);
    if (v11 && sub_10009F2BC(v11))
    {
      int v5 = *a4;
      if (*a4 >= 1)
      {
        int v12 = 0;
        do
        {
          uint64_t v13 = (char *)&a3[32 * (uint64_t)v12];
          sub_10003C85C(a1, a2, (_DWORD *)v13 + 3, (unsigned __int16 *)v13 + 8, (uint64_t)(v13 + 88), *((_DWORD *)v13 + 1), v10);
          if (*((_DWORD *)v13 + 3) == 0x40000000)
          {
            if (--v5 > v12) {
              j__memmove(&a3[32 * (uint64_t)v12], &a3[32 * (uint64_t)v12 + 32], (v5 - v12) << 7);
            }
            --v12;
          }
          ++v12;
        }
        while (v12 < v5);
      }
      *a4 = v5;
    }
    goto LABEL_17;
  }
  int v10 = 1;
  if (*(_DWORD *)(qword_100101CC0 + 1764)) {
    goto LABEL_7;
  }
LABEL_17:
  if (!qword_100101CC0) {
    goto LABEL_27;
  }
  int v14 = *(_DWORD *)(qword_100101CC0 + 4596);
  if ((v14 & 0xFFFFFFFE) == 2)
  {
    if (v5 < 1) {
      goto LABEL_27;
    }
  }
  else if (v14 != 5 || v5 <= 0)
  {
    goto LABEL_27;
  }
  uint64_t v16 = v5;
  double v17 = a3 + 3;
  do
  {
    sub_10003CAF4(a1, v17, (uint64_t)(v17 + 1), *(v17 - 2), 1, 2);
    v17 += 32;
    --v16;
  }
  while (v16);
LABEL_27:
  sub_1000239EC(a3, v5);
}

uint64_t sub_10003BAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  *a7 = 0x40000000;
  uint64_t result = *a6;
  *a6 = 0;
  return result;
}

void sub_10003BAB8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = *a2;
  if ((int)v14 < 1)
  {
    LODWORD(v14) = 0;
    goto LABEL_74;
  }
  uint64_t v15 = a8;
  uint64_t v16 = a7;
  uint64_t v17 = a5;
  uint64_t v19 = a13;
  uint64_t v20 = a11;
  uint64_t v21 = a9;
  if (a14)
  {
    uint64_t v83 = a2;
    uint64_t v22 = 0;
    int v23 = 0;
    uint64_t v86 = *a2;
    while (1)
    {
      int v24 = *(_DWORD *)(a1 + 8);
      if (v24 + v23 >= a6)
      {
        LODWORD(v14) = v22;
        goto LABEL_73;
      }
      int v90 = v23;
      uint64_t v91 = v22;
      int v26 = v24 + 7;
      BOOL v25 = v24 < -7;
      int v27 = v24 + 14;
      if (!v25) {
        int v27 = v26;
      }
      uint64_t v28 = v23;
      int8x16_t v29 = (void *)(v15 + v23);
      bzero(v29, (uint64_t)v27 >> 3);
      if (*(int *)(a1 + 8) < 1)
      {
        uint64_t v40 = v15;
        int v39 = v90;
        uint64_t v38 = v91;
        *(_DWORD *)(a4 + 4 * v91) = *(_DWORD *)a1;
        if (!v17) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = v20;
        uint64_t v92 = v20 + v28;
        uint64_t v32 = v16 + 4 * v28;
        uint64_t v33 = v21 + 4 * v28;
        uint64_t v34 = a10 + 4 * v28;
        uint64_t v35 = 146;
        uint64_t v36 = 384;
        uint64_t v37 = a12 + 2 * v28;
        do
        {
          *(_DWORD *)(v32 + 4 * v30) = sub_1000BD96C(a14, *(unsigned __int16 *)(a1 + v35 - 118));
          if (a12) {
            *(_WORD *)(v37 + 2 * v30) = *(_WORD *)(a1 + v35);
          }
          if (a9) {
            *(_DWORD *)(v33 + 4 * v30) = *(_DWORD *)(a1 + v36);
          }
          if (a10) {
            *(_DWORD *)(v34 + 4 * v30) = *(_DWORD *)(a1 + v36 + 236);
          }
          if (v31) {
            *(unsigned char *)(v92 + v30) = *(unsigned char *)(a1 + v30 + 323);
          }
          *((unsigned char *)v29 + v30) = *(unsigned char *)(a1 + v30 + 264);
          ++v30;
          v36 += 4;
          v35 += 2;
        }
        while (v30 < *(int *)(a1 + 8));
        uint64_t v38 = v91;
        int v39 = v90 + v30;
        uint64_t v40 = a8;
        uint64_t v14 = v86;
        uint64_t v16 = a7;
        uint64_t v17 = a5;
        uint64_t v19 = a13;
        uint64_t v21 = a9;
        uint64_t v20 = v31;
        *(_DWORD *)(a4 + 4 * v91) = *(_DWORD *)a1;
        if (!a5) {
          goto LABEL_21;
        }
      }
      *(_WORD *)(v17 + 2 * v38) = *(_WORD *)(a1 + 4);
LABEL_21:
      *(_DWORD *)(v16 + 4 * v39) = -1;
      uint64_t v15 = v40;
      if (v19) {
        *(void *)(v19 + 8 * v38) = *(void *)(a1 + 16);
      }
      int v23 = v39 + 1;
      a1 += 1096;
      uint64_t v22 = v38 + 1;
      if (v22 == v14) {
        goto LABEL_73;
      }
    }
  }
  if (!a11)
  {
    unsigned int v52 = a2;
    if (!a12)
    {
      uint64_t v69 = 0;
      int v70 = 0;
      do
      {
        int v71 = *(_DWORD *)(a1 + 8);
        if (v71 + v70 >= a6)
        {
          LODWORD(v14) = v69;
          a2 = v52;
          goto LABEL_74;
        }
        int v72 = v71 + 7;
        BOOL v25 = v71 < -7;
        int v73 = v71 + 14;
        if (!v25) {
          int v73 = v72;
        }
        bzero((void *)(v15 + v70), (uint64_t)v73 >> 3);
        if (*(int *)(a1 + 8) > 0)
        {
          if (a9)
          {
            uint64_t v74 = 4 * v70;
            if (a10)
            {
              uint64_t v75 = 0;
              uint64_t v76 = a10 + v74;
              uint64_t v77 = a9 + v74;
              uint64_t v78 = v16 + v74;
              uint64_t v79 = 384;
              do
              {
                uint64_t v80 = 4 * v75;
                *(_DWORD *)(v78 + v80) = *(unsigned __int16 *)(a1 + 2 * v75 + 28);
                *(_DWORD *)(v77 + v80) = *(_DWORD *)(a1 + v79);
                *(_DWORD *)(v76 + v80) = *(_DWORD *)(a1 + v79 + 236);
                *(unsigned char *)(v15 + v70 + v75) = *(unsigned char *)(a1 + v75 + 264);
                ++v75;
                v79 += 4;
              }
              while (v75 < *(int *)(a1 + 8));
            }
            else
            {
              uint64_t v75 = 0;
              do
              {
                uint64_t v82 = 4 * v75;
                *(_DWORD *)(v16 + v74 + v82) = *(unsigned __int16 *)(a1 + 2 * v75 + 28);
                *(_DWORD *)(a9 + v74 + v82) = *(_DWORD *)(a1 + 4 * v75 + 384);
                *(unsigned char *)(v15 + v70 + v75) = *(unsigned char *)(a1 + v75 + 264);
                ++v75;
              }
              while (v75 < *(int *)(a1 + 8));
            }
          }
          else if (a10)
          {
            uint64_t v75 = 0;
            do
            {
              uint64_t v81 = 4 * v75;
              *(_DWORD *)(v16 + 4 * v70 + v81) = *(unsigned __int16 *)(a1 + 2 * v75 + 28);
              *(_DWORD *)(a10 + 4 * v70 + v81) = *(_DWORD *)(a1 + 4 * v75 + 620);
              *(unsigned char *)(v15 + v70 + v75) = *(unsigned char *)(a1 + v75 + 264);
              ++v75;
            }
            while (v75 < *(int *)(a1 + 8));
          }
          else
          {
            uint64_t v75 = 0;
            do
            {
              *(_DWORD *)(v16 + 4 * v70 + 4 * v75) = *(unsigned __int16 *)(a1 + 2 * v75 + 28);
              *(unsigned char *)(v15 + v70 + v75) = *(unsigned char *)(a1 + v75 + 264);
              ++v75;
            }
            while (v75 < *(int *)(a1 + 8));
          }
          v70 += v75;
        }
        *(_DWORD *)(a4 + 4 * v69) = *(_DWORD *)a1;
        if (v17) {
          *(_WORD *)(v17 + 2 * v69) = *(_WORD *)(a1 + 4);
        }
        *(_DWORD *)(v16 + 4 * v70) = -1;
        if (a13) {
          *(void *)(a13 + 8 * v69) = *(void *)(a1 + 16);
        }
        ++v70;
        a1 += 1096;
        ++v69;
      }
      while (v69 != v14);
      goto LABEL_101;
    }
    uint64_t v54 = 0;
    int v55 = 0;
    while (1)
    {
      int v56 = *(_DWORD *)(a1 + 8);
      if (v56 + v55 >= a6)
      {
        LODWORD(v14) = v54;
LABEL_101:
        a2 = v52;
        goto LABEL_74;
      }
      int v57 = v56 + 7;
      BOOL v25 = v56 < -7;
      int v58 = v56 + 14;
      if (!v25) {
        int v58 = v57;
      }
      bzero((void *)(v15 + v55), (uint64_t)v58 >> 3);
      if (*(int *)(a1 + 8) > 0)
      {
        if (a9)
        {
          uint64_t v59 = 0;
          uint64_t v60 = 146;
          uint64_t v61 = 384;
          do
          {
            uint64_t v62 = 4 * v59;
            *(_DWORD *)(a7 + 4 * v55 + v62) = *(unsigned __int16 *)(a1 + v60 - 118);
            *(_WORD *)(a12 + 2 * v55 + 2 * v59) = *(_WORD *)(a1 + v60);
            *(_DWORD *)(a9 + 4 * v55 + v62) = *(_DWORD *)(a1 + v61);
            if (a10) {
              *(_DWORD *)(a10 + 4 * v55 + 4 * v59) = *(_DWORD *)(a1 + v61 + 236);
            }
            *(unsigned char *)(v15 + v55 + v59) = *(unsigned char *)(a1 + v59 + 264);
            ++v59;
            v60 += 2;
            v61 += 4;
          }
          while (v59 < *(int *)(a1 + 8));
        }
        else
        {
          if (!a10)
          {
            uint64_t v65 = 0;
            uint64_t v66 = 264;
            uint64_t v67 = (_DWORD *)(a7 + 4 * v55);
            do
            {
              *v67++ = *(unsigned __int16 *)(a1 + v65 + 28);
              *(_WORD *)(a12 + 2 * v55 + v65) = *(_WORD *)(a1 + v65 + 146);
              *(unsigned char *)(v15 + v55 + v66 - 264) = *(unsigned char *)(a1 + v66);
              uint64_t v68 = v66 - 263;
              ++v66;
              v65 += 2;
            }
            while (v68 < *(int *)(a1 + 8));
            int v55 = v55 + v66 - 264;
            *(_DWORD *)(a4 + 4 * v54) = *(_DWORD *)a1;
            if (!v17) {
              goto LABEL_66;
            }
LABEL_65:
            *(_WORD *)(v17 + 2 * v54) = *(_WORD *)(a1 + 4);
            goto LABEL_66;
          }
          uint64_t v59 = 0;
          uint64_t v63 = 146;
          do
          {
            uint64_t v64 = 4 * v59;
            *(_DWORD *)(a7 + 4 * v55 + v64) = *(unsigned __int16 *)(a1 + v63 - 118);
            *(_WORD *)(a12 + 2 * v55 + 2 * v59) = *(_WORD *)(a1 + v63);
            *(_DWORD *)(a10 + 4 * v55 + v64) = *(_DWORD *)(a1 + 4 * v59 + 620);
            *(unsigned char *)(v15 + v55 + v59) = *(unsigned char *)(a1 + v59 + 264);
            ++v59;
            v63 += 2;
          }
          while (v59 < *(int *)(a1 + 8));
        }
        v55 += v59;
      }
      *(_DWORD *)(a4 + 4 * v54) = *(_DWORD *)a1;
      if (v17) {
        goto LABEL_65;
      }
LABEL_66:
      *(_DWORD *)(a7 + 4 * v55) = -1;
      if (a13) {
        *(void *)(a13 + 8 * v54) = *(void *)(a1 + 16);
      }
      ++v55;
      a1 += 1096;
      if (++v54 == v14) {
        goto LABEL_101;
      }
    }
  }
  uint64_t v83 = a2;
  uint64_t v42 = 0;
  int v43 = 0;
  while (1)
  {
    int v44 = *(_DWORD *)(a1 + 8);
    if (v44 + v43 >= a6) {
      break;
    }
    int v45 = v44 + 7;
    BOOL v25 = v44 < -7;
    int v46 = v44 + 14;
    if (!v25) {
      int v46 = v45;
    }
    bzero((void *)(a8 + v43), (uint64_t)v46 >> 3);
    if (*(int *)(a1 + 8) < 1)
    {
      uint64_t v50 = a13;
      *(_DWORD *)(a4 + 4 * v42) = *(_DWORD *)a1;
      uint64_t v51 = a5;
      if (!a5) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v48 = 146;
      uint64_t v49 = 384;
      uint64_t v50 = a13;
      do
      {
        *(_DWORD *)(v16 + 4 * v43 + 4 * v47) = *(unsigned __int16 *)(a1 + v48 - 118);
        if (a12) {
          *(_WORD *)(a12 + 2 * v43 + 2 * v47) = *(_WORD *)(a1 + v48);
        }
        if (a9) {
          *(_DWORD *)(a9 + 4 * v43 + 4 * v47) = *(_DWORD *)(a1 + v49);
        }
        if (a10) {
          *(_DWORD *)(a10 + 4 * v43 + 4 * v47) = *(_DWORD *)(a1 + v49 + 236);
        }
        *(unsigned char *)(a11 + v43 + v47) = *(unsigned char *)(a1 + v47 + 323);
        *(unsigned char *)(a8 + v43 + v47) = *(unsigned char *)(a1 + v47 + 264);
        ++v47;
        v49 += 4;
        v48 += 2;
      }
      while (v47 < *(int *)(a1 + 8));
      v43 += v47;
      *(_DWORD *)(a4 + 4 * v42) = *(_DWORD *)a1;
      uint64_t v51 = a5;
      if (!a5) {
        goto LABEL_43;
      }
    }
    *(_WORD *)(v51 + 2 * v42) = *(_WORD *)(a1 + 4);
LABEL_43:
    *(_DWORD *)(v16 + 4 * v43) = -1;
    if (v50) {
      *(void *)(v50 + 8 * v42) = *(void *)(a1 + 16);
    }
    ++v43;
    a1 += 1096;
    if (++v42 == v14) {
      goto LABEL_73;
    }
  }
  LODWORD(v14) = v42;
LABEL_73:
  a2 = v83;
LABEL_74:
  *a2 = v14;
}

uint64_t sub_10003C260(uint64_t result, int a2, _DWORD **a3, uint64_t a4, int a5)
{
  if (a2 >= 1 && **a3 == 3)
  {
    int v7 = a2;
    uint64_t v8 = result;
    do
    {
      if (**a3 == 3)
      {
        uint64_t result = sub_10002AF68(*(void *)(v8 + 16), *(_DWORD *)(v8 + 8), v8 + 28, v8 + 384, v8 + 856, v8 + 323, a5);
        *(_WORD *)(v8 + 4) += result;
      }
      v8 += 1096;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_10003C300(unsigned __int16 *a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, int a6)
{
  int v67 = 0;
  int v11 = sub_1000B51F8(a4);
  uint64_t v19 = (unsigned __int16 *)sub_1000CD454(2 * (v11 + 1), v12, v13, v14, v15, v16, v17, v18);
  uint64_t v60 = (unsigned __int16 *)sub_1000CD454(2 * (v11 + 1), v20, v21, v22, v23, v24, v25, v26);
  uint64_t v63 = a4;
  uint64_t v64 = sub_1000CD454(2 * v11, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v61 = v19;
  uint64_t v62 = a1;
  int v34 = sub_1000BB100(a4, *a1, v19);
  unint64_t v37 = (a3 - 1);
  uint64_t v58 = 2 * v11;
  uint64_t v59 = 2 * (v11 + 1);
  if (a3 < 1)
  {
    uint64_t v42 = 2;
    int v45 = v64;
  }
  else
  {
    LODWORD(v38) = v34;
    uint64_t v65 = a3;
    unint64_t v39 = 0;
    if (a6)
    {
      unsigned __int16 v40 = 0;
      int v41 = -1;
      uint64_t v42 = 2;
      int v43 = v60;
      int v44 = v61;
      int v45 = v64;
      while (1)
      {
        int v46 = v43;
        if (v39 == v37)
        {
          if (v39 >= v37) {
            goto LABEL_15;
          }
        }
        else
        {
          int v41 = sub_1000BB100(v63, v62[v39 + 1], v43);
          if (v39 >= v37) {
            goto LABEL_15;
          }
        }
        if (*(unsigned char *)(a2 + v39))
        {
LABEL_15:
          uint64_t v47 = 0;
          goto LABEL_16;
        }
        uint64_t v47 = *v46;
LABEL_16:
        sub_100005524(a5, v44, v38, v45, v40, v47, v35, v36);
        int v48 = v38 - 1;
        if ((int)v38 >= 1)
        {
          uint64_t v38 = v38;
          do
          {
            int v49 = (unsigned __int16)*v45++;
            sub_100015A08(a5, v49, &v67);
            uint64_t v42 = (v67 + v42);
            --v38;
          }
          while (v38);
        }
        if (v39 == v37)
        {
          int v45 = v64;
          if (!*(unsigned char *)(a2 + v37)) {
            goto LABEL_21;
          }
        }
        else
        {
          if (*(unsigned char *)(a2 + v39) == 1) {
            uint64_t v42 = (v42 + 1);
          }
          else {
            uint64_t v42 = v42;
          }
          int v45 = v64;
          if (!*(unsigned char *)(a2 + v39))
          {
LABEL_21:
            unsigned __int16 v40 = v44[v48];
            goto LABEL_9;
          }
        }
        unsigned __int16 v40 = 0;
LABEL_9:
        ++v39;
        int v43 = v44;
        int v44 = v46;
        LODWORD(v38) = v41;
        if (v39 == v65) {
          goto LABEL_24;
        }
      }
    }
    int v51 = -1;
    uint64_t v42 = 2;
    unsigned int v52 = v60;
    unsigned int v53 = v61;
    int v45 = v64;
    do
    {
      uint64_t v54 = v52;
      if (v39 != v37) {
        int v51 = sub_1000BB100(v63, v62[v39 + 1], v52);
      }
      sub_100005524(a5, v53, v38, v64, 0, 0, v35, v36);
      if ((int)v38 >= 1)
      {
        uint64_t v55 = v38;
        int v56 = v64;
        do
        {
          int v57 = *v56++;
          sub_100015A08(a5, v57, &v67);
          uint64_t v42 = (v67 + v42);
          --v55;
        }
        while (v55);
      }
      if (v39 != v37)
      {
        if (*(unsigned char *)(a2 + v39) == 1) {
          uint64_t v42 = (v42 + 1);
        }
        else {
          uint64_t v42 = v42;
        }
      }
      ++v39;
      unsigned int v52 = v53;
      unsigned int v53 = v54;
      LODWORD(v38) = v51;
    }
    while (v39 != v65);
  }
LABEL_24:
  sub_1000CD4D0(v45, v58);
  sub_1000CD4D0(v60, v59);
  sub_1000CD4D0(v61, v59);
  return v42;
}

uint64_t sub_10003C5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LODWORD(v8) = a8;
  int v9 = (unsigned __int16 *)a7;
  int v12 = a3;
  int v13 = a2;
  if ((int)a5 < 1)
  {
    LODWORD(v15) = 0;
  }
  else
  {
    uint64_t v15 = 0;
    while (*(__int16 *)(a6 + 2 * v15) != -1)
    {
      if (a5 == ++v15)
      {
        LODWORD(v15) = a5;
        break;
      }
    }
  }
  if ((int)a3 >= (int)a2) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = a3;
  }
  if ((int)v15 >= (int)a2) {
    uint64_t v17 = a2;
  }
  else {
    uint64_t v17 = v15;
  }
  uint64_t v55 = 2 * ((int)v16 + (int)a8 + (int)v17);
  unint64_t v18 = sub_1000CD3E8(v55, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v19 = (void *)v18;
  if ((int)v16 >= 1)
  {
    uint64_t v20 = v12 - (int)v16;
    if (v16 >= 0x10 && (uint64_t v21 = 2 * v20 + a4, v18 - v21 >= 0x20))
    {
      uint64_t v22 = v16 & 0x7FFFFFF0;
      int v46 = (long long *)(v21 + 16);
      uint64_t v47 = (_OWORD *)(v18 + 16);
      uint64_t v48 = v16 & 0xFFFFFFF0;
      do
      {
        long long v49 = *v46;
        *(v47 - 1) = *(v46 - 1);
        _OWORD *v47 = v49;
        v46 += 2;
        v47 += 2;
        v48 -= 16;
      }
      while (v48);
      if (v22 == v16)
      {
LABEL_19:
        unsigned int v27 = v16;
        if ((int)v8 < 1) {
          goto LABEL_25;
        }
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v23 = (__int16 *)(a4 + 2 * (v22 + v20));
    uint64_t v24 = (_WORD *)(v18 + 2 * v22);
    uint64_t v25 = v16 - v22;
    do
    {
      __int16 v26 = *v23++;
      *v24++ = v26;
      --v25;
    }
    while (v25);
    goto LABEL_19;
  }
  unsigned int v27 = 0;
  if ((int)v8 < 1) {
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v54 = v17;
  uint64_t v28 = (_WORD *)(v18 + 2 * v27);
  v27 += v8;
  int v29 = v8;
  uint64_t v8 = v8;
  do
  {
    unsigned int v30 = *v9++;
    *v28++ = sub_1000BD964(a1, v30, 0);
    --v8;
  }
  while (v8);
  LODWORD(v8) = v29;
  uint64_t v17 = v54;
LABEL_25:
  if ((int)v17 < 1) {
    goto LABEL_31;
  }
  unint64_t v31 = v27;
  if (v17 < 0x10 || (uint64_t v32 = (char *)v19 + 2 * v27, (unint64_t)&v32[-a6] < 0x20))
  {
    uint64_t v33 = 0;
LABEL_29:
    int v34 = (__int16 *)(a6 + 2 * v33);
    uint64_t v35 = v17 - v33;
    uint64_t v36 = (_WORD *)v19 + v31;
    do
    {
      __int16 v37 = *v34++;
      *v36++ = v37;
      --v35;
    }
    while (v35);
    goto LABEL_31;
  }
  uint64_t v33 = v17 & 0x7FFFFFF0;
  unint64_t v31 = (v17 & 0xFFFFFFF0) + (unint64_t)v27;
  uint64_t v50 = (long long *)(a6 + 16);
  int v51 = v32 + 16;
  uint64_t v52 = v17 & 0xFFFFFFF0;
  do
  {
    long long v53 = *v50;
    *(v51 - 1) = *(v50 - 1);
    *int v51 = v53;
    v50 += 2;
    v51 += 2;
    v52 -= 16;
  }
  while (v52);
  if (v33 != v17) {
    goto LABEL_29;
  }
LABEL_31:
  uint64_t v38 = (v17 + v8);
  if ((int)v38 < 1)
  {
    LOWORD(v39) = 0;
    uint64_t v41 = v55;
  }
  else
  {
    int v39 = 0;
    uint64_t v40 = (int)v16;
    uint64_t v41 = v55;
    while (1)
    {
      unsigned int v42 = *((unsigned __int16 *)v19 + v40);
      if (v42 == 0xFFFF) {
        break;
      }
      if ((int)v40 >= v13) {
        unsigned int v43 = v13;
      }
      else {
        unsigned int v43 = v40;
      }
      uint64_t v44 = (int)v40 - v13;
      if (v40 <= v13) {
        uint64_t v44 = 0;
      }
      v39 += sub_1000BDCD4(a1, (uint64_t)v19 + 2 * v44, v43, v42);
      ++v40;
      if (!--v38) {
        goto LABEL_43;
      }
    }
    LOWORD(v39) = 0x4000;
  }
LABEL_43:
  sub_1000CD4D0(v19, v41);
  return (__int16)v39;
}

uint64_t sub_10003C85C(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int16 *a4, uint64_t a5, unsigned int a6, int a7)
{
  uint64_t v12 = *(void *)(a1 + 392);
  uint64_t v13 = *(void *)(a1 + 480);
  int v14 = sub_10003C300(a4, a5, a6, *(uint64_t **)(a1 + 376), *(void *)(a1 + 384), a7);
  if (!a2) {
    a2 = *(void *)(a1 + 384);
  }
  uint64_t result = sub_1000A3A20(a2, *(void *)(a1 + 376), *(_DWORD *)(a1 + 432));
  if (result)
  {
    uint64_t v16 = result;
    int v75 = a7;
    uint64_t v77 = (void *)v12;
    if (v13) {
      int v17 = sub_10009F2BC(v13);
    }
    else {
      int v17 = sub_10005A5F8(v12);
    }
    int v25 = v17;
    v83[0] = 0;
    int v81 = 0;
    uint64_t v80 = 0;
    uint64_t v74 = a3;
    *a3 = 0x40000000;
    uint64_t v26 = 2 * v14;
    unsigned int v27 = sub_1000CD454(v26, v18, v19, v20, v21, v22, v23, v24);
    uint64_t v35 = sub_1000CD454(v26, v28, v29, v30, v31, v32, v33, v34);
    unsigned int v43 = (unsigned __int16 *)sub_1000CD454(v26, v36, v37, v38, v39, v40, v41, v42);
    uint64_t v76 = sub_1000CD454(v26, v44, v45, v46, v47, v48, v49, v50);
    if (sub_1000A3ED4(v16, v25, v75, 0x7FFFFFFF, 1, 0, a6, a4, v51, v52, v53, v54, v55, v56, 0, v43, v14, v27, v35,
                         (uint64_t)v76,
                         v83,
                         a5)
      && v25 >= 1)
    {
      if (v13)
      {
        int v57 = 0;
        while (1)
        {
          uint64_t v58 = sub_1000B4CB0(v13, v57, &v80);
          if (sub_1000A4480(v16, v58, v80, *(void *)(a1 + 408), v59, v60, v61, v62, v63, v64) == 3) {
            break;
          }
          if (v25 == ++v57) {
            goto LABEL_16;
          }
        }
      }
      else
      {
        while (1)
        {
          uint64_t v65 = sub_10005A674(v77, v13, &v80);
          if (sub_1000A4480(v16, v65, v80, *(void *)(a1 + 408), v66, v67, v68, v69, v70, v71) == 3) {
            break;
          }
          LODWORD(v13) = v13 + 1;
          if (v25 == v13)
          {
LABEL_16:
            if (sub_1000A429C(v16, 0, &v81) != 3)
            {
              __int16 v82 = -1;
              int v72 = *(_DWORD *)(a1 + 452);
              if (v72) {
                __int16 v82 = *(_WORD *)(a1 + 2 * (v72 - 1) + 448);
              }
              int v73 = sub_10003C5C0(*(void *)(a1 + 376), 1, 1, (uint64_t)&v82, *(unsigned int *)(a1 + 460), a1 + 456, (uint64_t)a4, a6);
              v81 += v73;
              _DWORD *v74 = v81;
            }
            break;
          }
        }
      }
    }
    sub_1000CD4D0(v76, v26);
    sub_1000CD4D0(v43, v26);
    sub_1000CD4D0(v35, v26);
    sub_1000CD4D0(v27, v26);
    return sub_1000A3A68(v16);
  }
  return result;
}

uint64_t sub_10003CAF4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11 = *(_DWORD *)(a1 + 452);
  if (v11 >= (int)a5) {
    uint64_t v12 = a5;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = a1 + 448;
  *a2 -= sub_10003C5C0(*(void *)(a1 + 376), a5, v12, a1 + 448 + 2 * (v11 - (int)v12), *(unsigned int *)(a1 + 460), a1 + 456, a3, a4);
  int v14 = *(_DWORD *)(a1 + 452);
  if (v14 >= (int)a6) {
    uint64_t v15 = a6;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t result = sub_10003C5C0(*(void *)(a1 + 376), a6, v15, v13 + 2 * (v14 - (int)v15), *(unsigned int *)(a1 + 460), a1 + 456, a3, a4);
  *a2 += result;
  return result;
}

void sub_10003CBC0(uint64_t a1, uint64_t a2, char *__base, int *a4)
{
  int v8 = *a4;
  if (qword_100101CC0)
  {
    int v9 = *(_DWORD *)(qword_100101CC0 + 4596);
    if ((v9 - 4) < 2)
    {
      int v10 = 1;
      uint64_t v11 = *(void *)(a1 + 480);
      if (!v11) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
    if (v9 == 2) {
      goto LABEL_16;
    }
  }
  int v10 = 0;
  uint64_t v11 = *(void *)(a1 + 480);
  if (!v11) {
    goto LABEL_16;
  }
LABEL_7:
  if (sub_10009F2BC(v11))
  {
    int v8 = *a4;
    if (*a4 >= 1)
    {
      int v12 = 0;
      do
      {
        uint64_t v13 = &__base[1096 * v12];
        sub_10003C85C(a1, a2, v13, (unsigned __int16 *)v13 + 14, (uint64_t)(v13 + 264), *((_DWORD *)v13 + 2), v10);
        if (*(_DWORD *)v13 == 0x40000000)
        {
          if (--v8 > v12) {
            j__memmove(&__base[1096 * v12], &__base[1096 * v12 + 1096], 1096 * (v8 - v12));
          }
          --v12;
        }
        ++v12;
      }
      while (v12 < v8);
    }
    *a4 = v8;
  }
LABEL_16:
  if (!qword_100101CC0) {
    goto LABEL_32;
  }
  int v14 = *(_DWORD *)(qword_100101CC0 + 4596);
  if ((v14 & 0xFFFFFFFE) == 2)
  {
    if (v8 < 1) {
      goto LABEL_32;
    }
  }
  else if (v14 != 5 || v8 <= 0)
  {
    goto LABEL_32;
  }
  uint64_t v16 = __base + 28;
  uint64_t v17 = v8;
  do
  {
    uint64_t v18 = *((unsigned int *)v16 - 5);
    int v19 = *(_DWORD *)(a1 + 452);
    if (v19 >= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v19;
    }
    *((_DWORD *)v16 - 7) -= sub_10003C5C0(*(void *)(a1 + 376), 1, v20, a1 + 448 + 2 * (v19 - (int)v20), *(unsigned int *)(a1 + 460), a1 + 456, (uint64_t)v16, *((unsigned int *)v16 - 5));
    int v21 = *(_DWORD *)(a1 + 452);
    if (v21 >= 2) {
      uint64_t v22 = 2;
    }
    else {
      uint64_t v22 = v21;
    }
    *((_DWORD *)v16 - 7) += sub_10003C5C0(*(void *)(a1 + 376), 2, v22, a1 + 448 + 2 * (v21 - (int)v22), *(unsigned int *)(a1 + 460), a1 + 456, (uint64_t)v16, v18);
    v16 += 1096;
    --v17;
  }
  while (v17);
LABEL_32:
  qsort(__base, v8, 0x448uLL, (int (__cdecl *)(const void *, const void *))sub_1000242D0);
}

uint64_t sub_10003CDE8(_DWORD **a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  LODWORD(v3) = 0;
  uint64_t v4 = a2;
  do
  {
    int v5 = *a1++;
    if (sub_1000268F0(v5)) {
      uint64_t v3 = (v3 + 1);
    }
    else {
      uint64_t v3 = v3;
    }
    --v4;
  }
  while (v4);
  return v3;
}

BOOL sub_10003CE54(_DWORD **a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  int v3 = 0;
  uint64_t v4 = a2;
  do
  {
    int v5 = *a1++;
    if (sub_1000268F0(v5)) {
      ++v3;
    }
    --v4;
  }
  while (v4);
  return v3 != 0;
}

void *sub_10003CEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = (void *)sub_10003CF90(a1, a2, a5);
  if (!v10) {
    return v10;
  }
  if (a3) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = a2;
  }
  uint64_t v12 = sub_100039154(a1, v11, 0, 0, a5, 1);
  v10[66] = v12;
  if (v12)
  {
    if (!a4)
    {
LABEL_9:
      v10[59] = *(void *)(v12 + 472);
      return v10;
    }
    uint64_t v13 = sub_100039154(a1, a4, 0, 0, a5, 10);
    v10[68] = v13;
    if (v13)
    {
      uint64_t v12 = v10[66];
      goto LABEL_9;
    }
  }
  sub_100039374((uint64_t)v10, 0);
  return 0;
}

uint64_t sub_10003CF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((int)sub_100004180(a2) > 2) {
    return 0;
  }
  BOOL v6 = (void *)sub_1000C33A0(632);
  uint64_t v7 = (uint64_t)v6;
  if (!v6) {
    return v7;
  }
  memcpy(v6, &off_1000FCDF8, 0x208uLL);
  *(void *)(v7 + 376) = a1;
  *(void *)(v7 + 384) = a2;
  *(_DWORD *)(v7 + 432) = a3;
  uint64_t v8 = sub_100039154(a1, a2, 0, 0, a3, 4);
  *(void *)(v7 + 536) = v8;
  if (v8)
  {
    sub_10003B678(v7);
    if (!*(void *)(v7 + 408))
    {
LABEL_11:
      sub_100039374(v7, 0);
      return 0;
    }
    if (qword_100101CC0)
    {
      sub_100039634(v7, 0, *(_DWORD *)(qword_100101CC0 + 5372));
      uint64_t v9 = qword_100101CC0;
      if (!qword_100101CC0)
      {
LABEL_8:
        *(_DWORD *)(v7 + 576) = v9;
        uint64_t v10 = sub_1000C33A0(2 * (int)v9);
        *(void *)(v7 + 584) = v10;
        if (v10)
        {
          uint64_t v11 = sub_1000C33A0(4 * *(int *)(v7 + 576));
          *(void *)(v7 + 592) = v11;
          if (v11) {
            return v7;
          }
        }
        goto LABEL_11;
      }
    }
    else
    {
      sub_100039634(v7, 0, 0);
      uint64_t v9 = qword_100101CC0;
      if (!qword_100101CC0) {
        goto LABEL_8;
      }
    }
    LODWORD(v9) = *(_DWORD *)(v9 + 4680);
    goto LABEL_8;
  }
  sub_1000C321C(v7);
  return 0;
}

void *sub_10003D0E8(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = (void *)sub_10003CF90(a3, a4, a7);
  if (v14)
  {
    uint64_t v28 = a6;
    int v15 = sub_1000CAD00((unint64_t)a2) + 10;
    uint64_t v23 = (unsigned __int8 *)sub_1000CD454(v15, v16, v17, v18, v19, v20, v21, v22);
    sub_1000CAE14(v23, a2, v15);
    sub_1000CAE14(v23, "fast", v15);
    if (a5) {
      uint64_t v24 = a5;
    }
    else {
      uint64_t v24 = a4;
    }
    v14[66] = sub_10003B6A0(a1, v23, a3, v24, 0, 0);
    sub_1000CD4D0(v23, v15);
    uint64_t v25 = v14[66];
    if (v25)
    {
      if (!v28)
      {
LABEL_9:
        v14[59] = *(void *)(v25 + 472);
        return v14;
      }
      uint64_t v26 = sub_100039154(a3, v28, 0, 0, a7, 10);
      v14[68] = v26;
      if (v26)
      {
        uint64_t v25 = v14[66];
        goto LABEL_9;
      }
    }
    sub_100039374((uint64_t)v14, 0);
    return 0;
  }
  return v14;
}

uint64_t sub_10003D224(uint64_t *a1, uint64_t a2)
{
  sub_100006A98(a1[51]);
  uint64_t v4 = a1[66];
  if (v4)
  {
    sub_100039374(v4, a2);
    a1[66] = 0;
  }
  uint64_t v5 = a1[67];
  if (v5)
  {
    sub_100039374(v5, a2);
    a1[67] = 0;
  }
  uint64_t v6 = a1[68];
  if (v6)
  {
    sub_100039374(v6, a2);
    a1[68] = 0;
  }
  sub_1000C321C(a1[73]);
  sub_1000C321C(a1[74]);
  bzero(a1, 0x208uLL);
  return sub_1000C321C((uint64_t)a1);
}

uint64_t sub_10003D2BC(uint64_t a1)
{
  return sub_10003953C(*(void *)(a1 + 528));
}

uint64_t sub_10003D2C4(uint64_t a1)
{
  return sub_100039550(*(void *)(a1 + 528));
}

uint64_t sub_10003D2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  if (a5 || (a6 - 3) <= 2) {
    goto LABEL_3;
  }
  int v13 = a7;
  int v14 = a3;
  uint64_t v16 = qword_100101CC0;
  if (!qword_100101CC0)
  {
    *(_DWORD *)(a1 + 372) = a6;
    *(_DWORD *)(a1 + 564) = HIDWORD(a9);
    goto LABEL_14;
  }
  if (!*(_DWORD *)(qword_100101CC0 + 3224) || *(_DWORD *)(qword_100101CC0 + 3024))
  {
    *(_DWORD *)(a1 + 372) = a6;
    *(_DWORD *)(a1 + 564) = HIDWORD(a9);
    if (a6 == 1)
    {
      if (*(_DWORD *)(v16 + 4716)) {
        a6 = 2;
      }
      else {
        a6 = 1;
      }
    }
LABEL_14:
    uint64_t result = sub_1000398F8(*(void *)(a1 + 528), a3, a2, 0, 0, a6, a7, a8, a9);
    *(_DWORD *)(a1 + 552) = v13;
    *(_DWORD *)(a1 + 556) = a8;
    *(_DWORD *)(a1 + 560) = a9;
    if (v14 < 1)
    {
      *(_DWORD *)(a1 + 568) = 0;
      if (!result) {
        goto LABEL_4;
      }
    }
    else
    {
      *(_WORD *)(a1 + 572) = *(_WORD *)(a2 + 2 * (v14 - 1));
      *(_DWORD *)(a1 + 568) = 1;
      if (!result) {
        goto LABEL_4;
      }
    }
    *(_DWORD *)(a1 + 520) = 0;
    uint64_t v11 = (_DWORD *)(a1 + 616);
    goto LABEL_5;
  }
LABEL_3:
  sub_100039FBC(*(void *)(a1 + 536));
  uint64_t result = 0;
LABEL_4:
  uint64_t v11 = (_DWORD *)(a1 + 520);
LABEL_5:
  *uint64_t v11 = 1;
  return result;
}

uint64_t sub_10003D3F8(uint64_t a1, int a2, int a3)
{
  if (!sub_100039574(a1, a2, a3) || !sub_100039360(*(void *)(a1 + 528))) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 536);
  return sub_100039360(v4);
}

uint64_t sub_10003D474(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1780) && !*(_DWORD *)(result + 616))
  {
    *(_DWORD *)(result + 616) = 1;
  }
  else
  {
    *(_DWORD *)(result + 616) = *(_DWORD *)(result + 616) == 0;
    uint64_t result = sub_100039EBC(*(void *)(result + 528), a2, a3);
    if (*(_DWORD *)(v3 + 372) != 1 || qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 4716))
    {
      uint64_t v4 = *(void *)(v3 + 528);
      return sub_100039F98(v4);
    }
  }
  return result;
}

uint64_t sub_10003D510(uint64_t a1)
{
  uint64_t result = sub_100039EB4(*(void *)(a1 + 528));
  if (result != 1)
  {
    if (sub_100039F98(*(void *)(a1 + 528)))
    {
      return 3;
    }
    else if (sub_100039F98(*(void *)(a1 + 536)))
    {
      return 3;
    }
    else
    {
      uint64_t result = sub_100039EB4(*(void *)(a1 + 528));
      if (result != 2)
      {
        uint64_t v3 = *(void *)(a1 + 536);
        return sub_100039EB4(v3);
      }
    }
  }
  return result;
}

uint64_t sub_10003D59C(uint64_t a1)
{
  return sub_100039F58(*(void *)(a1 + 528));
}

uint64_t sub_10003D5A4(uint64_t a1)
{
  uint64_t result = sub_100039EB4(*(void *)(a1 + 528));
  if (result != 1)
  {
    if (sub_100039F98(*(void *)(a1 + 528)))
    {
      return 3;
    }
    else if (sub_100039F98(*(void *)(a1 + 536)))
    {
      return 3;
    }
    else
    {
      uint64_t result = sub_100039EB4(*(void *)(a1 + 528));
      if (result != 2)
      {
        uint64_t v3 = *(void *)(a1 + 536);
        return sub_100039EB4(v3);
      }
    }
  }
  return result;
}

uint64_t sub_10003D630(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 528);
  if (v2) {
    sub_100039FBC(v2);
  }
  uint64_t result = *(void *)(a1 + 536);
  if (result)
  {
    return sub_100039FBC(result);
  }
  return result;
}

uint64_t sub_10003D680(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, void *a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, uint64_t a14)
{
  uint64_t v22 = *(void *)(a1 + 536);
  if (sub_100039EB4(a1) == 3)
  {
    uint64_t result = 0;
LABEL_3:
    *a6 = -1;
    *a3 = 0x40000000;
    return result;
  }
  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  if (*(_DWORD *)(a1 + 372) == 1 && (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 4716))) {
    return sub_100039D00(*(void *)(a1 + 528), a13, a14, a2, a3, a4, a5, a6, a7, (uint64_t)a8, a9, (uint64_t)a10, (uint64_t)a11, a12, 0);
  }
  uint64_t v97 = a10;
  unsigned int v24 = sub_10009F5D0(v22, (uint64_t)&v99);
  unsigned int v98 = v24;
  int v25 = sub_100039F98(*(void *)(a1 + 528));
  if (*(_DWORD *)(a1 + 372) != 1 || qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 4716)) {
    v25 |= sub_100039F98(*(void *)(a1 + 536));
  }
  if (v25) {
    return 0;
  }
  if (!v24)
  {
    uint64_t v96 = 0;
    goto LABEL_75;
  }
  int v26 = DWORD1(v99);
  uint64_t v27 = SDWORD1(v99);
  if (SDWORD1(v99) >= 1)
  {
    unint64_t v28 = ((unint64_t)DWORD1(v99) + 1) >> 1;
    if (DWORD1(v99) >= 0xF)
    {
      unint64_t v29 = 0;
      uint64_t v30 = (DWORD1(v99) - 1);
      if (DWORD1(v99) - (int)v28 < SDWORD1(v99)
        && (char *)&v99 + 2 * (DWORD1(v99) - 1) + -2 * v28 + 18 <= (char *)&v99
                                                                               + 2 * (DWORD1(v99) - 1)
                                                                               + 16
        && (char *)&v99 + v30 - v28 + 89 <= (char *)&v99 + v30 + 88)
      {
        unint64_t v29 = 0;
        uint64_t v31 = (char *)&v99 + 2 * v28 + 16;
        uint64_t v32 = (char *)&v99 + v28 + 88;
        uint64_t v33 = 2 * (DWORD1(v99) - 1) + 18;
        uint64_t v34 = (char *)&v99 + v33 - 2 * v28;
        uint64_t v35 = (char *)&v99 + v33;
        uint64_t v36 = (char *)&v99 + v30 + 89 - v28;
        uint64_t v37 = (char *)&v99 + v30 + 89;
        BOOL v38 = &v100 >= (long long *)((char *)&v99 + v33) || v34 >= v31;
        BOOL v39 = !v38;
        BOOL v40 = &v100 >= (long long *)v37 || v36 >= v31;
        BOOL v41 = !v40;
        BOOL v42 = (char *)&v104 + 8 >= v35 || v34 >= v32;
        BOOL v43 = !v42;
        BOOL v44 = (char *)&v104 + 8 >= v37 || v36 >= v32;
        BOOL v45 = !v44;
        BOOL v46 = v34 >= v37 || v36 >= v35;
        BOOL v47 = !v46;
        BOOL v48 = (char *)&v104 + 8 >= v31 || &v100 >= (long long *)v32;
        if (v48 && !v39 && !v41 && !v43 && !v45 && !v47)
        {
          if (DWORD1(v99) >= 0x1F)
          {
            unint64_t v29 = (((unint64_t)DWORD1(v99) + 1) >> 1) & 0x7FFFFFF0;
            unint64_t v49 = v29;
            uint64_t v50 = (int8x16_t *)((char *)&v104 + 8);
            int32x4_t v51 = (int16x8_t *)&v100;
            do
            {
              int16x8_t v53 = *v51;
              int16x8_t v52 = v51[1];
              int32x4_t v54 = (int16x8_t *)((char *)&v97 + 2 * (int)v30 + 2);
              int8x16_t v55 = (int8x16_t)vrev64q_s16(*v54);
              int8x16_t v56 = (int8x16_t)vrev64q_s16(v54[1]);
              *(int8x16_t *)int32x4_t v51 = vextq_s8(v56, v56, 8uLL);
              v51[1] = (int16x8_t)vextq_s8(v55, v55, 8uLL);
              v51 += 2;
              int8x16_t v57 = (int8x16_t)vrev64q_s16(v53);
              int8x16_t v58 = (int8x16_t)vrev64q_s16(v52);
              *(int8x16_t *)int32x4_t v54 = vextq_s8(v58, v58, 8uLL);
              v54[1] = (int16x8_t)vextq_s8(v57, v57, 8uLL);
              int8x16_t v59 = *v50;
              int8x16_t v60 = vrev64q_s8(*(int8x16_t *)((char *)&v103 + (int)v30 + 9));
              *v50++ = vextq_s8(v60, v60, 8uLL);
              int8x16_t v61 = vrev64q_s8(v59);
              *(long long *)((char *)&v103 + (int)v30 + 9) = (__int128)vextq_s8(v61, v61, 8uLL);
              LODWORD(v30) = v30 - 16;
              v49 -= 16;
            }
            while (v49);
            if (v29 == v28) {
              goto LABEL_74;
            }
            if ((v28 & 8) == 0) {
              goto LABEL_72;
            }
          }
          else
          {
            unint64_t v29 = 0;
          }
          unint64_t v62 = v29;
          unint64_t v29 = v28 & 0x7FFFFFF8;
          int8x16_t v63 = (int16x8_t *)((char *)&v99 + 2 * v62 + 16);
          int8x16_t v64 = (uint64_t *)((char *)&v99 + v62 + 88);
          unint64_t v65 = v62 - v29;
          int v66 = ~v62 + v26;
          do
          {
            int16x8_t v67 = *v63;
            uint64_t v68 = 2 * v66;
            int8x16_t v69 = (int8x16_t)vrev64q_s16(*(int16x8_t *)((char *)&v99 + v68 + 2));
            *(int8x16_t *)v63++ = vextq_s8(v69, v69, 8uLL);
            int8x16_t v70 = (int8x16_t)vrev64q_s16(v67);
            *(long long *)((char *)&v99 + v68 + 2) = (__int128)vextq_s8(v70, v70, 8uLL);
            v70.i64[0] = *v64;
            *v64++ = (uint64_t)vrev64_s8(*(int8x8_t *)((char *)&v104 + v66 + 1));
            *(int8x8_t *)((char *)&v104 + v66 + 1) = vrev64_s8(*(int8x8_t *)v70.i8);
            v66 -= 8;
            v65 += 8;
          }
          while (v65);
          if (v29 == v28) {
            goto LABEL_74;
          }
        }
      }
    }
    else
    {
      unint64_t v29 = 0;
    }
LABEL_72:
    int v71 = ~v29 + v27;
    do
    {
      int v72 = (char *)&v104 + 2 * v29 + 8;
      __int16 v73 = *((_WORD *)v72 - 36);
      uint64_t v74 = 2 * v71;
      *((_WORD *)v72 - 36) = *(_WORD *)((char *)&v100 + v74);
      *(_WORD *)((char *)&v100 + v74) = v73;
      LOBYTE(v72) = *((unsigned char *)&v104 + v29 + 8);
      *((unsigned char *)&v104 + v29 + 8) = *((unsigned char *)&v104 + v71 + 8);
      *((unsigned char *)&v104 + v71 + 8) = (_BYTE)v72;
      ++v29;
      --v71;
    }
    while (v28 != v29);
  }
LABEL_74:
  uint64_t v96 = (int *)&v99;
  uint64_t v75 = v27 - 1;
  j__memmove((char *)&v104 + 8, (char *)&v104 + 9, v27 - 1);
  *((unsigned char *)&v104 + v75 + 8) = 0;
LABEL_75:
  uint64_t v76 = qword_100101CC0;
  if (qword_100101CC0) {
    uint64_t v76 = *(void *)(qword_100101CC0 + 4008);
  }
  if (v76 < (int)a2) {
    LODWORD(v76) = v76 + 1;
  }
  uint64_t result = sub_1000C33A0((uint64_t)(int)v76 << 7);
  if (!result) {
    goto LABEL_3;
  }
  uint64_t v77 = (_DWORD *)result;
  uint64_t v78 = *(void *)(*(void *)(a1 + 536) + 472);
  if (!v78) {
    uint64_t v78 = *(void *)(a1 + 472);
  }
  if ((int)a2 > 1 || !v24)
  {
    if (!qword_100101CC0)
    {
      int v85 = 0;
LABEL_90:
      unsigned int v86 = sub_1000D42AC(v78, (_DWORD *)result, v85, *(unsigned __int16 *)(a1 + 456), 0, 0);
      BOOL v87 = 0;
      unsigned int v98 = v86;
      unsigned int v88 = (long long *)v96;
      if (v96 && v86)
      {
        BOOL v89 = sub_100023968(v96, v77, *(_DWORD *)(a1 + 564));
        unsigned int v88 = (long long *)v96;
        BOOL v87 = v89;
      }
      uint64_t v90 = qword_100101CC0;
      if (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 1712))
      {
        sub_100023A08(*(void *)(v78 + 96), v88, v77, (int *)&v98, a2);
        uint64_t v90 = qword_100101CC0;
      }
      uint64_t v91 = *(void *)(a1 + 544);
      if (v91)
      {
        if (v90)
        {
          __int16 v92 = *(_WORD *)(v90 + 1496);
          __int16 v93 = *(_WORD *)(v90 + 1704);
          LODWORD(v90) = *(_DWORD *)(v90 + 4600);
        }
        else
        {
          __int16 v93 = 0;
          __int16 v92 = 0;
        }
        sub_100052F54(v91, &v98, (uint64_t)v77, *(void *)(a1 + 480), *(_DWORD *)(a1 + 568), a1 + 572, v92, v93, v90);
        uint64_t v90 = qword_100101CC0;
      }
      if (v90 && *(_DWORD *)(v90 + 4596) && (!*(_DWORD *)(v90 + 4216) || !v87))
      {
        uint64_t v95 = *(void *)(v90 + 4104);
        if (v95 < (int)v98) {
          unsigned int v98 = v95;
        }
        sub_10003B8F4(a1, 0, v77, (int *)&v98);
      }
      goto LABEL_110;
    }
LABEL_88:
    int v85 = *(_DWORD *)(qword_100101CC0 + 4008);
    goto LABEL_90;
  }
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 4596)) {
    goto LABEL_88;
  }
  long long v79 = v99;
  long long v80 = v100;
  long long v81 = v102;
  *(_OWORD *)(result + 32) = v101;
  *(_OWORD *)(result + 48) = v81;
  *(_OWORD *)uint64_t result = v79;
  *(_OWORD *)(result + 16) = v80;
  long long v82 = v103;
  long long v83 = v104;
  long long v84 = v106;
  *(_OWORD *)(result + 96) = v105;
  *(_OWORD *)(result + 112) = v84;
  *(_OWORD *)(result + 64) = v82;
  *(_OWORD *)(result + 80) = v83;
LABEL_110:
  sub_100023674((uint64_t)v77, *(void *)(v78 + 96), (int *)&v98, a2, (uint64_t)a3, a5, (uint64_t)a6, a7, a11);
  if (a8) {
    bzero(a8, 4 * (int)v98);
  }
  if (v97) {
    bzero(v97, (int)v98);
  }
  sub_1000C321C((uint64_t)v77);
  return v98;
}

uint64_t sub_10003DD0C(uint64_t a1)
{
  return sub_100039EA0(*(void *)(a1 + 536));
}

uint64_t sub_10003DD14(uint64_t a1)
{
  sub_10003A230(*(void *)(a1 + 528));
  uint64_t v2 = *(void *)(a1 + 536);
  return sub_10003A230(v2);
}

uint64_t sub_10003DD50(uint64_t a1)
{
  return sub_10003A064(*(void *)(a1 + 528));
}

uint64_t sub_10003DD58(uint64_t a1)
{
  uint64_t v2 = *(long long **)(*(void *)(a1 + 536) + 472);
  if (!v2) {
    uint64_t v2 = *(long long **)(a1 + 472);
  }
  return sub_1000D34EC(v2);
}

uint64_t sub_10003DD74(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14)
{
  int v14 = a8;
  int v15 = a7;
  uint64_t v16 = a5;
  if (a5)
  {
    if (a4) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 472);
    if (a4) {
      goto LABEL_7;
    }
  }
  if (!sub_10003A678(a2, a6, a7, a3, 1, (uint64_t)a6, a7, a8)) {
    return 0xFFFFFFFFLL;
  }
  a4 = *(void *)(a2 + 504);
LABEL_7:
  unsigned int v41 = 0;
  __int16 v40 = 0;
  uint64_t v19 = *(void *)(a4 + 16);
  uint64_t v37 = a1;
  int v38 = v15;
  if (v14 >= 1)
  {
    uint64_t v20 = 0;
    signed __int16 v21 = 0;
    while (*(__int16 *)(v19 + 2 * v20) < v14)
    {
      v21 += *(_WORD *)(*(void *)(a4 + 8) + 2 * v20++);
      if (v20 >= *(int *)(a4 + 36)) {
        goto LABEL_14;
      }
    }
    if (v20)
    {
LABEL_14:
      uint64_t v23 = (v20 - 1);
      if (!*(_WORD *)(*(void *)(a4 + 24) + 2 * v23)
        && qword_100101CC0
        && *(void *)(qword_100101CC0 + 4128))
      {
        unsigned __int16 v22 = v21 - *(_WORD *)(*(void *)(a4 + 8) + 2 * v23);
        goto LABEL_16;
      }
    }
    unsigned __int16 v22 = v21;
    goto LABEL_16;
  }
  LODWORD(v20) = 0;
  signed __int16 v21 = 0;
  unsigned __int16 v22 = 0;
LABEL_16:
  uint64_t v20 = v20;
  do
  {
    if (*(__int16 *)(v19 + 2 * v20) > a9 && *(_WORD *)(*(void *)(a4 + 24) + 2 * v20)) {
      break;
    }
    v21 += *(_WORD *)(*(void *)(a4 + 8) + 2 * v20++);
  }
  while (v20 < *(int *)(a4 + 36));
  if ((int)v20 <= 0)
  {
    uint64_t v25 = qword_100101CC0;
    __int16 v26 = v21 - (v21 > 0);
    if (!qword_100101CC0) {
      goto LABEL_25;
    }
    goto LABEL_33;
  }
  uint64_t v24 = (v20 - 1);
  uint64_t v25 = qword_100101CC0;
  if (!*(_WORD *)(*(void *)(a4 + 24) + 2 * v24))
  {
    if (!qword_100101CC0)
    {
      __int16 v26 = v21 - (v21 > 0);
      uint64_t v27 = sub_1000CD454(0, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
      if (v14) {
        goto LABEL_36;
      }
      goto LABEL_26;
    }
    if (*(void *)(qword_100101CC0 + 4128)) {
      v21 -= *(_WORD *)(*(void *)(a4 + 8) + 2 * v24);
    }
    __int16 v26 = v21 - (v21 > 0);
LABEL_33:
    if (*(_DWORD *)(v25 + 1780))
    {
      unsigned __int16 v22 = (__int16)(v22 + ((unsigned __int16)(v22 & 0x8000) >> 15)) >> 1;
      __int16 v26 = (__int16)(v26 + ((unsigned __int16)(v26 & 0x8000) >> 15)) >> 1;
    }
    uint64_t v27 = sub_1000CD454(*(void *)(v25 + 4008) << 7, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
    if (v14) {
      goto LABEL_36;
    }
LABEL_26:
    unint64_t v28 = (__int16 *)(v16 + 104);
    unsigned int v29 = *(_DWORD *)(v16 + 108);
    if (v38 - 1 != a9) {
      goto LABEL_27;
    }
LABEL_37:
    uint64_t v31 = v37;
    unsigned int v30 = *(unsigned __int16 *)(v37 + 456);
    uint64_t v32 = qword_100101CC0;
    if (!qword_100101CC0) {
      goto LABEL_28;
    }
    goto LABEL_38;
  }
  __int16 v26 = v21 - (v21 > 0);
  if (qword_100101CC0) {
    goto LABEL_33;
  }
LABEL_25:
  uint64_t v27 = sub_1000CD454(0, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
  if (!v14) {
    goto LABEL_26;
  }
LABEL_36:
  __int16 v40 = sub_1000B5A58(*(void *)(v16 + 96), a6[v14 - 1]);
  unint64_t v28 = &v40;
  unsigned int v29 = 1;
  if (v38 - 1 == a9) {
    goto LABEL_37;
  }
LABEL_27:
  unsigned int v30 = sub_1000B5A58(*(void *)(v16 + 96), a6[a9 + 1]);
  uint64_t v31 = v37;
  uint64_t v32 = qword_100101CC0;
  if (!qword_100101CC0)
  {
LABEL_28:
    int v33 = 0;
LABEL_41:
    unsigned int v34 = sub_1000D4308(v16, v27, v33, v22, v26, (uint64_t)v28, v29, v30, 0, 0);
    goto LABEL_42;
  }
LABEL_38:
  if (!*(void *)(v32 + 4128))
  {
    int v33 = *(_DWORD *)(v32 + 4008);
    goto LABEL_41;
  }
  unsigned int v34 = sub_10009FA90(*(void *)(v31 + 536), v16, v27, *(_DWORD *)(v32 + 4008), v22, v26, (uint64_t)v28, v29, v30, 0, 0);
LABEL_42:
  unsigned int v41 = v34;
  sub_100023674((uint64_t)v27, *(void *)(v16 + 96), (int *)&v41, a10, a11, a12, a13, a14, 0);
  if (qword_100101CC0) {
    uint64_t v35 = *(void *)(qword_100101CC0 + 4008) << 7;
  }
  else {
    uint64_t v35 = 0;
  }
  sub_1000CD4D0(v27, v35);
  return v41;
}

uint64_t sub_10003E138(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(_DWORD *)(result + 372) == 1 && (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 4716)))
  {
    uint64_t result = sub_100039EA8(*(void *)(result + 528), 0);
    *(_DWORD *)(v3 + 520) = 1;
  }
  if (*(_DWORD *)(v3 + 520) == 1) {
    return result;
  }
  *(void *)(v3 + 480) = a2;
  uint64_t v4 = *(void *)(v3 + 536);
  if (!a2)
  {
LABEL_10:
    uint64_t result = sub_100039FBC(v4);
    goto LABEL_11;
  }
  if (!sub_1000398F8(v4, *(unsigned int *)(v3 + 568), v3 + 572, 0, 0, *(unsigned int *)(v3 + 372), *(unsigned int *)(v3 + 552), *(_DWORD *)(v3 + 556), *(void *)(v3 + 560))|| (int v5 = sub_100039F58(*(void *)(v3 + 528)), v6 = v5 - 1, v5 <= 1))
  {
    uint64_t v4 = *(void *)(v3 + 536);
    goto LABEL_10;
  }
  int v7 = v5 - 1;
  if (qword_100101CC0) {
    int v7 = v6 << (*(_DWORD *)(qword_100101CC0 + 1780) != 0);
  }
  sub_100039EA8(*(void *)(v3 + 528), 0);
  sub_10009F6A4(*(_WORD **)(v3 + 536), v6);
  if (qword_100101CC0
    && *(_DWORD *)(qword_100101CC0 + 3224)
    && *(_DWORD *)(qword_100101CC0 + 3024)
    && *(_DWORD *)(qword_100101CC0 + 1312) == 3)
  {
    long long v83 = (__int16 *)sub_1000CD3E8(2 * *(int *)(v3 + 576), v8, v9, v10, v11, v12, v13, v14);
    long long v82 = (int *)sub_1000CD3E8(4 * *(int *)(v3 + 576), v15, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    long long v82 = 0;
    long long v83 = 0;
  }
  uint64_t v22 = 0;
  BOOL v23 = 0;
  BOOL v85 = 0;
  char v24 = 0;
  unsigned int v86 = 0;
  uint64_t v25 = qword_100101CC0;
  uint64_t v78 = a2;
  while (1)
  {
    if (v25 && *(_DWORD *)(v25 + 1648))
    {
      if (v85)
      {
        if (!(_WORD)v6) {
          break;
        }
        LOWORD(v6) = v6 - 1;
      }
      BOOL v85 = !v85;
    }
    uint64_t v26 = sub_1000B4CB0(a2, (__int16)v7, &v86);
    uint64_t v27 = v26;
    if ((v24 & 1) == 0 || !qword_100101CC0) {
      goto LABEL_39;
    }
    if (!*(_DWORD *)(qword_100101CC0 + 1464))
    {
      uint64_t v29 = v26;
      if (!*(_DWORD *)(qword_100101CC0 + 1680)) {
        goto LABEL_40;
      }
      int v30 = sub_100015518(*(void *)(v3 + 384), v26, v22);
      uint64_t v31 = qword_100101CC0;
      if (qword_100101CC0) {
        uint64_t v31 = *(void *)(qword_100101CC0 + 1472);
      }
      BOOL v23 = v31 > v30;
LABEL_39:
      uint64_t v29 = v27;
      goto LABEL_40;
    }
    BOOL v28 = !v23;
    BOOL v23 = v23;
    uint64_t v29 = v28 ? v26 : v22;
LABEL_40:
    __int16 v32 = v6;
    if ((_WORD)v6)
    {
      if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 3224))
      {
        BOOL v33 = 0;
        if ((v6 & 1) != 0 && *(_DWORD *)(qword_100101CC0 + 3024))
        {
          int v34 = *(_DWORD *)(qword_100101CC0 + 1312);
          BOOL v33 = 0;
          switch(v34)
          {
            case 0:
              goto LABEL_85;
            case 1:
              if ((unsigned __int16)v6 == 1) {
                goto LABEL_47;
              }
              BOOL v33 = 0;
              __int16 v32 = v6 - 2;
              goto LABEL_50;
            case 2:
              goto LABEL_50;
            case 3:
              __int16 v32 = v6 - 2;
              BOOL v33 = (unsigned __int16)v6 != 1;
              if ((unsigned __int16)v6 == 1) {
                __int16 v32 = 1;
              }
              goto LABEL_50;
            default:
              goto LABEL_48;
          }
        }
      }
      else
      {
LABEL_48:
        BOOL v33 = 0;
      }
      __int16 v32 = v6 - 1;
LABEL_50:
      int v35 = sub_1000D3C70(*(void *)(v3 + 472), *(_WORD **)(v3 + 584), *(_DWORD **)(v3 + 592), *(_DWORD *)(v3 + 576) - 1, v32);
      int v34 = v35;
      if (!v33 || v35)
      {
        if (v33)
        {
          int v36 = sub_1000D3C70(*(void *)(v3 + 472), v83, v82, *(_DWORD *)(v3 + 576) - 1, (__int16)v6);
          unint64_t v84 = *(void *)(v3 + 584);
          uint64_t v37 = *(int **)(v3 + 592);
          int v81 = *(_DWORD *)(v3 + 576);
          uint64_t v79 = 8 * (v36 + v34);
          int v80 = v36 + v34;
          BOOL v45 = (_DWORD *)sub_1000CD3E8(v79, v38, v39, v40, v41, v42, v43, v44);
          BOOL v46 = (char *)v45;
          if (v34 >= 1)
          {
            uint64_t v47 = v34;
            BOOL v48 = v45 + 1;
            unint64_t v49 = (__int16 *)v84;
            do
            {
              __int16 v50 = *v49++;
              *((_WORD *)v48 - 2) = v50;
              int v51 = *v37++;
              *BOOL v48 = v51;
              v48 += 2;
              --v47;
            }
            while (v47);
          }
          if (v36 >= 1)
          {
            uint64_t v52 = v36;
            int16x8_t v53 = &v45[2 * v34 + 1];
            int8x16_t v55 = v82;
            int32x4_t v54 = v83;
            do
            {
              __int16 v56 = *v54++;
              *((_WORD *)v53 - 2) = v56;
              int v57 = *v55++;
              _DWORD *v53 = v57;
              v53 += 2;
              --v52;
            }
            while (v52);
          }
          qsort(v45, v80, 8uLL, (int (__cdecl *)(const void *, const void *))sub_10003E878);
          if (v80 < 1)
          {
            int v58 = 0;
          }
          else
          {
            int v58 = 0;
            uint64_t v59 = v80;
            unsigned __int16 v60 = -1;
            int8x16_t v61 = v46;
            do
            {
              int v62 = *(unsigned __int16 *)v61;
              if (v62 != v60)
              {
                *(void *)&v46[8 * v58++] = *v61;
                unsigned __int16 v60 = v62;
              }
              ++v61;
              --v59;
            }
            while (v59);
          }
          if (v58 > v81)
          {
            size_t v63 = v58;
            int v58 = v81;
            qsort(v46, v63, 8uLL, (int (__cdecl *)(const void *, const void *))sub_10003E89C);
          }
          unint64_t v64 = v84;
          if (v58 >= 1)
          {
            if (v58 >= 0x11
              && (v84 >= (unint64_t)&v46[8 * v58 - 6] || (unint64_t)v46 >= v84 + 2 * v58))
            {
              uint64_t v66 = v58 & 0xF;
              if ((v58 & 0xF) == 0) {
                uint64_t v66 = 16;
              }
              uint64_t v65 = v58 - v66;
              int16x8_t v67 = (const __int16 *)(v46 + 64);
              uint64_t v68 = (unsigned long long *)(v84 + 16);
              uint64_t v69 = v65;
              do
              {
                int8x16_t v70 = v67 - 32;
                unsigned long long v71 = (unsigned __int128)vld4q_s16(v70);
                unsigned long long v72 = (unsigned __int128)vld4q_s16(v67);
                *(v68 - 1) = v71;
                *uint64_t v68 = v72;
                v67 += 64;
                v68 += 2;
                v69 -= 16;
              }
              while (v69);
              unint64_t v64 = v84;
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v73 = v58 - v65;
            uint64_t v74 = (_WORD *)(v64 + 2 * v65);
            uint64_t v75 = &v46[8 * v65];
            do
            {
              __int16 v76 = *(_WORD *)v75;
              v75 += 8;
              *v74++ = v76;
              --v73;
            }
            while (v73);
          }
          sub_1000CD4D0(v46, v79);
          if (v58) {
            int v34 = v58;
          }
          a2 = v78;
        }
      }
      else
      {
        int v34 = sub_1000D3C70(*(void *)(v3 + 472), *(_WORD **)(v3 + 584), *(_DWORD **)(v3 + 592), *(_DWORD *)(v3 + 576) - 1, (__int16)v6);
      }
    }
    else
    {
LABEL_47:
      int v34 = 0;
    }
LABEL_85:
    sub_10009F6B4(*(void *)(v3 + 536), v34, *(void *)(v3 + 584), *(void *)(v3 + 592));
    sub_10009F6C4(*(void *)(v3 + 536), v29, v86, !v23);
    if (sub_100039F98(*(void *)(v3 + 536))) {
      break;
    }
    uint64_t v25 = qword_100101CC0;
    if (qword_100101CC0)
    {
      if (*(_DWORD *)(qword_100101CC0 + 1464)) {
        BOOL v23 = !v23;
      }
      if (*(_DWORD *)(qword_100101CC0 + 1780)) {
        int v77 = -2;
      }
      else {
        int v77 = -1;
      }
      v7 += v77;
      LOWORD(v6) = v6 - 1;
      char v24 = 1;
      uint64_t v22 = v27;
      if ((v6 & 0x8000) != 0) {
        break;
      }
    }
    else
    {
      v7 += 0xFFFF;
      LOWORD(v6) = v6 - 1;
      char v24 = 1;
      uint64_t v22 = v27;
      if ((v6 & 0x8000) != 0) {
        break;
      }
    }
  }
  if (v83)
  {
    sub_1000CD4D0(v82, 4 * *(int *)(v3 + 576));
    sub_1000CD4D0(v83, 2 * *(int *)(v3 + 576));
  }
  uint64_t result = sub_100039EA8(*(void *)(v3 + 536), 0);
LABEL_11:
  *(_DWORD *)(v3 + 520) = 1;
  return result;
}

uint64_t sub_10003E740(uint64_t a1)
{
  return sub_10003964C(*(void *)(a1 + 528));
}

uint64_t sub_10003E748(uint64_t a1)
{
  return sub_100039A88(*(void *)(a1 + 528));
}

uint64_t sub_10003E750(uint64_t a1)
{
  return sub_100039684(*(void *)(a1 + 528));
}

uint64_t sub_10003E758(uint64_t a1)
{
  return sub_100039564(*(void *)(a1 + 528));
}

uint64_t sub_10003E764(uint64_t a1)
{
  uint64_t result = sub_10003A0B4(*(void *)(a1 + 528));
  if (result) {
    return sub_10003A0B4(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003E7A8(uint64_t a1)
{
  uint64_t result = sub_10003A0C8(*(void *)(a1 + 528));
  if (result) {
    return sub_10003A0C8(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003E7EC(uint64_t a1)
{
  uint64_t result = sub_10003A0DC(*(void *)(a1 + 528));
  if (result) {
    return sub_10003A0DC(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003E830(uint64_t a1)
{
  uint64_t result = sub_10003A0F0(*(void *)(a1 + 528));
  if (result) {
    return sub_10003A0F0(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003E878(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v3 = *a1;
  int v4 = *a2;
  uint64_t result = (v3 - v4);
  if (v3 == v4) {
    return (*((_DWORD *)a1 + 1) - *((_DWORD *)a2 + 1));
  }
  return result;
}

uint64_t sub_10003E89C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v3 = *((_DWORD *)a1 + 1);
  int v4 = *((_DWORD *)a2 + 1);
  uint64_t result = (v3 - v4);
  if (v3 == v4)
  {
    unsigned int v6 = *a1 - *a2;
    if (v6) {
      return v6;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10003E8C4(uint64_t a1, int a2)
{
  return sub_1000674C8(*(void *)(a1 + 536), a2);
}

uint64_t sub_10003E8CC(uint64_t a1, int a2, __int16 a3)
{
  uint64_t result = sub_100039F98(*(void *)(a1 + 528));
  int v7 = result;
  if (*(_DWORD *)(a1 + 372) == 1)
  {
    if (result) {
      return result;
    }
  }
  else
  {
    uint64_t result = sub_100039F98(*(void *)(a1 + 536));
    if (result | v7) {
      return result;
    }
  }
  __int16 v8 = qword_100101CC0;
  if (qword_100101CC0) {
    __int16 v8 = *(_WORD *)(qword_100101CC0 + 4088);
  }
  int v9 = (__int16)(v8 + a3);
  int v10 = (__int16)(sub_100039F58(*(void *)(a1 + 528)) - 1);
  if (v9 >= v10) {
    int v11 = v10;
  }
  else {
    int v11 = v9;
  }
  if (sub_1000D7BA8(*(uint64_t **)(a1 + 552), a2, v11))
  {
    int v12 = 0;
    while (sub_1000D7EE8(*(uint64_t **)(a1 + 552), &v12))
      sub_100039668(*(void *)(a1 + 536));
    return sub_1000266D8(*(void *)(a1 + 536));
  }
  else
  {
    uint64_t result = sub_100039FBC(*(void *)(a1 + 536));
    *(_DWORD *)(a1 + 520) = 1;
  }
  return result;
}

uint64_t sub_10003E9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10003EA1C(0, 0, a1, a2, a3, a4, a5);
}

uint64_t sub_10003EA1C(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)sub_100004180(a4) > 2 || a5 && (int)sub_100004180(a5) > 2 || a6 && (int)sub_100004180(a6) > 2) {
    return 0;
  }
  uint64_t v14 = (void *)sub_1000C33A0(8824);
  uint64_t v15 = (uint64_t)v14;
  if (v14)
  {
    memcpy(v14, &off_1000FD000, 0x208uLL);
    *(void *)(v15 + 376) = a3;
    *(void *)(v15 + 384) = a4;
    uint64_t v16 = qword_100101CC0;
    if (qword_100101CC0)
    {
      if (*(_DWORD *)(qword_100101CC0 + 3304)) {
        a7 = (a7 << (*(_DWORD *)(qword_100101CC0 + 1780) != 0));
      }
      *(_DWORD *)(v15 + 432) = a7;
      uint64_t v17 = 3;
      if (*(void *)(v16 + 1584))
      {
        if (*(void *)(v16 + 4136)) {
          uint64_t v17 = 9;
        }
        else {
          uint64_t v17 = 3;
        }
      }
    }
    else
    {
      *(_DWORD *)(v15 + 432) = a7;
      uint64_t v17 = 3;
    }
    uint64_t v18 = sub_100039154(a3, a4, 0, 0, a7, v17);
    *(void *)(v15 + 536) = v18;
    if (!v18) {
      goto LABEL_42;
    }
    uint64_t v19 = sub_100004148(a4);
    if (qword_100101CC0)
    {
      uint64_t v20 = sub_10005A4F0(v19, *(unsigned int *)(qword_100101CC0 + 4056));
      *(void *)(v15 + 392) = v20;
      *(_DWORD *)(v15 + 400) = 1;
      if (!v20) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v21 = sub_10005A4F0(v19, 0);
      *(void *)(v15 + 392) = v21;
      *(_DWORD *)(v15 + 400) = 1;
      if (!v21)
      {
LABEL_42:
        sub_100039374(v15, 0);
        return 0;
      }
    }
    int v22 = qword_100101CC0;
    if (qword_100101CC0) {
      int v22 = *(_DWORD *)(qword_100101CC0 + 5240);
    }
    *(_DWORD *)(v15 + 8820) = v22;
    sub_10003B678(v15);
    if (!*(void *)(v15 + 408)) {
      goto LABEL_42;
    }
    int v23 = qword_100101CC0 ? *(_DWORD *)(qword_100101CC0 + 5372) : 0;
    sub_100039634(v15, 0, v23);
    uint64_t v24 = qword_100101CC0;
    if (qword_100101CC0)
    {
      uint64_t v25 = (int)a7;
      int v26 = (__int16)(*(void *)(qword_100101CC0 + 3512) / (int)a7);
      if (v26 <= 1) {
        LOWORD(v26) = 1;
      }
      *(_WORD *)(v15 + 562) = v26;
      uint64_t v24 = *(void *)(v24 + 3504);
    }
    else
    {
      uint64_t v25 = (int)a7;
      *(_WORD *)(v15 + 562) = 1;
    }
    int v27 = (__int16)(v24 / v25);
    if (v27 <= 1) {
      LOWORD(v27) = 1;
    }
    *(_WORD *)(v15 + 560) = v27;
    if (!a5) {
      a5 = a4;
    }
    if (a1)
    {
      int v28 = sub_1000CAD00((unint64_t)a2) + 10;
      int v36 = (unsigned __int8 *)sub_1000CD454(v28, v29, v30, v31, v32, v33, v34, v35);
      *int v36 = 0;
      sub_1000CAE14(v36, a2, v28);
      sub_1000CAE14(v36, "fast", v28);
      *(void *)(v15 + 528) = sub_10003B6A0(a1, (char *)v36, a3, a5, 0, 0);
      sub_1000CD4D0(v36, v28);
      uint64_t v37 = *(void *)(v15 + 528);
    }
    else
    {
      uint64_t v37 = sub_100039154(a3, a5, 0, 0, a7, 1);
      *(void *)(v15 + 528) = v37;
    }
    if (!v37) {
      goto LABEL_42;
    }
    if (a6)
    {
      uint64_t v38 = sub_100039154(a3, a6, 0, 0, a7, 10);
      *(void *)(v15 + 544) = v38;
      if (!v38) {
        goto LABEL_42;
      }
    }
    uint64_t v39 = *(void *)(*(void *)(v15 + 528) + 472);
    *(void *)(v15 + 472) = v39;
    uint64_t v40 = sub_1000D7AA4(v39);
    *(void *)(v15 + 552) = v40;
    if (!v40) {
      goto LABEL_42;
    }
  }
  return v15;
}

uint64_t sub_10003ED18(uint64_t *a1, uint64_t a2)
{
  sub_100006A98(a1[51]);
  uint64_t v4 = a1[66];
  if (v4)
  {
    sub_100039374(v4, a2);
    a1[66] = 0;
  }
  uint64_t v5 = a1[67];
  if (v5)
  {
    sub_100039374(v5, a2);
    a1[67] = 0;
  }
  uint64_t v6 = a1[68];
  if (v6)
  {
    sub_100039374(v6, a2);
    a1[68] = 0;
  }
  uint64_t v7 = a1[69];
  if (v7)
  {
    sub_1000D7B5C(v7);
    a1[69] = 0;
  }
  uint64_t v8 = a1[1101];
  if (v8)
  {
    sub_1000C321C(v8);
    a1[1101] = 0;
  }
  bzero(a1, 0x208uLL);
  return sub_1000C321C((uint64_t)a1);
}

BOOL sub_10003EDC0(uint64_t a1)
{
  int v2 = sub_10003953C(*(void *)(a1 + 528));
  int v3 = sub_10003953C(*(void *)(a1 + 536));
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  return !v4;
}

uint64_t sub_10003EE18(uint64_t a1)
{
  return sub_100039550(*(void *)(a1 + 528));
}

uint64_t sub_10003EE20(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  unsigned int v10 = a6 - 5;
  if (a6 == 5
    || (int v13 = a6, LODWORD(v14) = a5, v15 = a4, qword_100101CC0)
    && *(_DWORD *)(qword_100101CC0 + 3224)
    && !*(_DWORD *)(qword_100101CC0 + 3024))
  {
    sub_100039FBC(*(void *)(a1 + 536));
    int v11 = (_DWORD *)(a1 + 520);
LABEL_26:
    uint64_t v20 = 0;
    *int v11 = 1;
    return v20;
  }
  if (a6 == 4) {
    a6 = 5;
  }
  else {
    a6 = a6;
  }
  *(_DWORD *)(a1 + 372) = v13;
  *(_DWORD *)(a1 + 8784) = HIDWORD(a9);
  if ((int)a3 < 1)
  {
    int v18 = 0;
  }
  else
  {
    *(_WORD *)(a1 + 8792) = *(_WORD *)(a2 + 2 * (a3 - 1));
    int v18 = 1;
  }
  *(_DWORD *)(a1 + 8788) = v18;
  unsigned int v24 = a6;
  uint64_t v19 = sub_1000398F8(*(void *)(a1 + 528), a3, a2, a5, a4, a6, a7, a8, a9);
  int v11 = (_DWORD *)(a1 + 520);
  if (!v19) {
    goto LABEL_26;
  }
  uint64_t v20 = v19;
  *int v11 = 0;
  if (v10 >= 0xFFFFFFFE) {
    uint64_t v14 = v14;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v10 < 0xFFFFFFFE) {
    uint64_t v15 = 0;
  }
  if (v14) {
    memcpy((void *)(a1 + 568), v15, 8 * (int)v14);
  }
  *(_DWORD *)(a1 + 8760) = v14;
  if (v13 != 1)
  {
    sub_10005A5F0(*(void *)(a1 + 392));
    uint64_t v20 = sub_1000398F8(*(void *)(a1 + 536), a3, a2, v14, v15, v24, a7, a8, a9);
    *(_WORD *)(a1 + 566) = 0;
    *(_DWORD *)(a1 + 8780) = 1;
    if (*(_DWORD *)(a1 + 8820))
    {
      if (*(int *)(a1 + 8816) >= 1)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)(a1 + 8808);
        do
          *(_DWORD *)(v22 + 4 * v21++) = 0x40000000;
        while (v21 < *(int *)(a1 + 8816));
      }
    }
  }
  return v20;
}

uint64_t sub_10003EFE0(uint64_t a1, int a2, int a3)
{
  if (!sub_100039574(a1, a2, a3) || !sub_100039360(*(void *)(a1 + 528))) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 536);
  return sub_100039360(v4);
}

void sub_10003F05C(uint64_t a1, const void *a2, _DWORD *a3)
{
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1780) && !*(_DWORD *)(a1 + 8780))
  {
    *(_DWORD *)(a1 + 8780) = 1;
    return;
  }
  *(_DWORD *)(a1 + 8780) = *(_DWORD *)(a1 + 8780) == 0;
  sub_100039EBC(*(void *)(a1 + 528), (uint64_t)a2, (uint64_t)a3);
  if (*(_DWORD *)(a1 + 372) != 1)
  {
    if (sub_100039EB4(*(void *)(a1 + 528)) != 5)
    {
      if (sub_10005A600(*(void *)(a1 + 392), a2, a3))
      {
        if (!sub_100039F98(*(void *)(a1 + 528)))
        {
          int v6 = sub_100039F58(*(void *)(a1 + 528));
          int v7 = *(__int16 *)(a1 + 566);
          int v8 = *(__int16 *)(a1 + 560);
          if (v8 + v7 + *(__int16 *)(a1 + 562) <= v6)
          {
            __int16 v9 = v6;
            int v10 = sub_100039F98(*(void *)(a1 + 528));
            if (*(_DWORD *)(a1 + 372) != 1) {
              v10 |= sub_100039F98(*(void *)(a1 + 536));
            }
            if (!v10)
            {
              __int16 v11 = v9 - v8;
              sub_10003E8CC(a1, (__int16)v7, v11);
              *(_WORD *)(a1 + 566) = v11;
              uint64_t v12 = *(void *)(*(void *)(a1 + 528) + 384);
              sub_100015968(v12);
            }
          }
        }
        return;
      }
      sub_100039FBC(*(void *)(a1 + 536));
    }
    *(_DWORD *)(a1 + 520) = 1;
  }
}

uint64_t sub_10003F1EC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 372);
  uint64_t v3 = *(void *)(a1 + 528);
  if (v2 == 1)
  {
    return sub_100039EB4(v3);
  }
  if (sub_100039F98(v3) || sub_100039F98(*(void *)(a1 + 536))) {
    return 3;
  }
  uint64_t result = sub_100039EB4(*(void *)(a1 + 528));
  if (result != 2)
  {
    uint64_t v3 = *(void *)(a1 + 536);
    return sub_100039EB4(v3);
  }
  return result;
}

uint64_t sub_10003F280(uint64_t a1)
{
  sub_100039F40(*(void *)(a1 + 528));
  uint64_t v2 = *(void *)(a1 + 536);
  return sub_100039F40(v2);
}

uint64_t sub_10003F2C4(uint64_t a1)
{
  return sub_100039F58(*(void *)(a1 + 528));
}

uint64_t sub_10003F2CC(uint64_t a1)
{
  return sub_100039F50(*(void *)(a1 + 536));
}

uint64_t sub_10003F2D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 528);
  if (v2) {
    sub_100039FBC(v2);
  }
  uint64_t result = *(void *)(a1 + 536);
  if (result)
  {
    return sub_100039FBC(result);
  }
  return result;
}

uint64_t sub_10003F324(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, uint64_t a14)
{
  int v16 = a5;
  int v18 = a2;
  uint64_t v20 = *(void *)(a1 + 472);
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 4552))
  {
    uint64_t v21 = *(void *)(a1 + 536);
    return sub_100039D00(v21, a13, a14, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)a11, a12, 0);
  }
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  if (*(_DWORD *)(a1 + 372) == 1)
  {
    uint64_t v21 = *(void *)(a1 + 528);
    return sub_100039D00(v21, a13, a14, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)a11, a12, 0);
  }
  uint64_t v46 = v20;
  unsigned int v23 = sub_100039660(*(void *)(a1 + 536));
  unsigned int v47 = v23;
  if (v23) {
    unsigned int v24 = (int *)&v48;
  }
  else {
    unsigned int v24 = 0;
  }
  BOOL v45 = v24;
  int v25 = sub_100039F98(*(void *)(a1 + 528));
  if (*(_DWORD *)(a1 + 372) != 1) {
    v25 |= sub_100039F98(*(void *)(a1 + 536));
  }
  if (v25) {
    return 0;
  }
  uint64_t v26 = qword_100101CC0;
  if (qword_100101CC0) {
    uint64_t v26 = *(void *)(qword_100101CC0 + 4008);
  }
  if (v26 < v18) {
    LODWORD(v26) = v26 + 1;
  }
  uint64_t result = sub_1000C33A0((uint64_t)(int)v26 << 7);
  if (result)
  {
    int v27 = (_DWORD *)result;
    if (v18 <= 1 && v23)
    {
      if (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 4596))
      {
        long long v28 = v48;
        long long v29 = v49;
        long long v30 = v51;
        *(_OWORD *)(result + 32) = v50;
        *(_OWORD *)(result + 48) = v30;
        *(_OWORD *)uint64_t result = v28;
        *(_OWORD *)(result + 16) = v29;
        long long v31 = v52;
        long long v32 = v53;
        long long v33 = v55;
        *(_OWORD *)(result + 96) = v54;
        *(_OWORD *)(result + 112) = v33;
        *(_OWORD *)(result + 64) = v31;
        *(_OWORD *)(result + 80) = v32;
        uint64_t v34 = v46;
LABEL_46:
        sub_100023674((uint64_t)v27, *(void *)(v34 + 96), (int *)&v47, v18, (uint64_t)a3, v16, (uint64_t)a6, a7, a11);
        sub_1000C321C((uint64_t)v27);
        return v47;
      }
    }
    else if (!qword_100101CC0)
    {
      int v35 = 0;
LABEL_27:
      unsigned int v36 = sub_1000D42AC(v46, (_DWORD *)result, v35, *(unsigned __int16 *)(a1 + 456), (void *)(a1 + 568), *(_DWORD *)(a1 + 8760));
      BOOL v37 = 0;
      unsigned int v47 = v36;
      if (v23 && v36) {
        BOOL v37 = sub_100023968(v45, v27, *(_DWORD *)(a1 + 8784));
      }
      BOOL v44 = v37;
      uint64_t v38 = qword_100101CC0;
      uint64_t v34 = v46;
      if (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 1712))
      {
        sub_100023A08(*(void *)(v46 + 96), (long long *)v45, v27, (int *)&v47, v18);
        uint64_t v38 = qword_100101CC0;
      }
      uint64_t v39 = *(void *)(a1 + 544);
      if (v39)
      {
        if (v38)
        {
          __int16 v40 = *(_WORD *)(v38 + 1496);
          __int16 v41 = *(_WORD *)(v38 + 1704);
          LODWORD(v38) = *(_DWORD *)(v38 + 4600);
        }
        else
        {
          __int16 v41 = 0;
          __int16 v40 = 0;
        }
        sub_100052F54(v39, &v47, (uint64_t)v27, *(void *)(a1 + 480), *(_DWORD *)(a1 + 8788), a1 + 8792, v40, v41, v38);
        uint64_t v38 = qword_100101CC0;
      }
      if (v38 && *(_DWORD *)(v38 + 4596))
      {
        BOOL v42 = v44;
        if (!*(_DWORD *)(v38 + 4216)) {
          BOOL v42 = 0;
        }
        if (!v42)
        {
          uint64_t v43 = *(void *)(v38 + 4104);
          if (v43 < (int)v47) {
            unsigned int v47 = v43;
          }
          sub_10003B8F4(a1, 0, v27, (int *)&v47);
        }
      }
      goto LABEL_46;
    }
    int v35 = *(_DWORD *)(qword_100101CC0 + 4008);
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_10003F644(uint64_t a1)
{
  return sub_100039EA0(*(void *)(a1 + 536));
}

uint64_t sub_10003F64C(uint64_t a1)
{
  sub_10003A230(*(void *)(a1 + 528));
  uint64_t v2 = *(void *)(a1 + 536);
  return sub_10003A230(v2);
}

uint64_t sub_10003F688(uint64_t a1)
{
  return sub_10003A064(*(void *)(a1 + 528));
}

uint64_t sub_10003F690(uint64_t a1)
{
  return sub_1000D34EC(*(long long **)(a1 + 472));
}

uint64_t sub_10003F698(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14)
{
  int v14 = a8;
  unsigned int v42 = a7;
  uint64_t v15 = a5;
  uint64_t v16 = a4;
  uint64_t v20 = (void *)sub_1000CD3E8(0x2000, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
  uint64_t v21 = v20;
  if (!v15) {
    uint64_t v15 = *(void *)(a1 + 472);
  }
  uint64_t v22 = *(int *)(a1 + 8760);
  memcpy(v20, (const void *)(a1 + 568), 8 * v22);
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1780)) {
    goto LABEL_25;
  }
  if (!v16)
  {
    if (!sub_10003A678(a2, a6, v42, a3, 1, v23, v24, v25))
    {
      sub_1000CD4D0(v21, 0x2000);
      return 0xFFFFFFFFLL;
    }
    uint64_t v16 = *(void *)(a2 + 504);
  }
  unsigned int v45 = 0;
  __int16 v44 = 0;
  memcpy((void *)(a1 + 568), v21, 8 * v22);
  *(_DWORD *)(a1 + 8760) = v22;
  if (v14 <= 0)
  {
    LODWORD(v26) = 0;
    unsigned __int16 v27 = 0;
    uint64_t v28 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v26 = 0;
    unsigned __int16 v27 = 0;
    uint64_t v28 = *(void *)(v16 + 16);
    do
    {
      if (*(__int16 *)(v28 + 2 * v26) >= v14) {
        break;
      }
      v27 += *(_WORD *)(*(void *)(v16 + 8) + 2 * v26++);
    }
    while (v26 < *(int *)(v16 + 36));
  }
  uint64_t v26 = v26;
  signed __int16 v29 = v27;
  do
  {
    if (*(__int16 *)(v28 + 2 * v26) > a9 && *(_WORD *)(*(void *)(v16 + 24) + 2 * v26)) {
      break;
    }
    v29 += *(_WORD *)(*(void *)(v16 + 8) + 2 * v26++);
  }
  while (v26 < *(int *)(v16 + 36));
  __int16 v30 = v29 > 0;
  if (qword_100101CC0)
  {
    uint64_t v31 = sub_1000C33A0(*(void *)(qword_100101CC0 + 4008) << 7);
    if (v31) {
      goto LABEL_20;
    }
LABEL_25:
    sub_1000CD4D0(v21, 0x2000);
    return 0;
  }
  uint64_t v31 = sub_1000C33A0(0);
  if (!v31) {
    goto LABEL_25;
  }
LABEL_20:
  long long v32 = (_DWORD *)v31;
  if (v14)
  {
    __int16 v44 = sub_1000B5A58(*(void *)(v15 + 96), a6[v14 - 1]);
    long long v33 = &v44;
    unsigned int v34 = 1;
    if (v42 - 1 == a9) {
      goto LABEL_22;
    }
LABEL_27:
    __int16 v40 = v33;
    unsigned int v41 = sub_1000B5A58(*(void *)(v15 + 96), a6[a9 + 1]);
    long long v33 = v40;
    unsigned int v35 = v41;
    __int16 v36 = v29 - v30;
    uint64_t v37 = qword_100101CC0;
    if (qword_100101CC0) {
      goto LABEL_23;
    }
LABEL_28:
    int v38 = 0;
    goto LABEL_29;
  }
  long long v33 = (__int16 *)(v15 + 104);
  unsigned int v34 = *(_DWORD *)(v15 + 108);
  if (v42 - 1 != a9) {
    goto LABEL_27;
  }
LABEL_22:
  unsigned int v35 = *(unsigned __int16 *)(a1 + 456);
  __int16 v36 = v29 - v30;
  uint64_t v37 = qword_100101CC0;
  if (!qword_100101CC0) {
    goto LABEL_28;
  }
LABEL_23:
  int v38 = *(_DWORD *)(v37 + 4008);
LABEL_29:
  unsigned int v45 = sub_1000D4308(v15, v32, v38, v27, v36, (uint64_t)v33, v34, v35, v21, v22);
  sub_100023674((uint64_t)v32, *(void *)(v15 + 96), (int *)&v45, a10, a11, a12, a13, a14, 0);
  sub_1000C321C((uint64_t)v32);
  sub_1000CD4D0(v21, 0x2000);
  return v45;
}

uint64_t sub_10003F9A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 536);
  if (result) {
    return sub_10003A078(result);
  }
  return result;
}

uint64_t sub_10003F9DC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100039F58(*(void *)(a1 + 528));
  if (*(_DWORD *)(a1 + 520) != 1 && result != 0)
  {
    if (*(_DWORD *)(a1 + 372) != 1)
    {
      sub_10003E8CC(a1, *(__int16 *)(a1 + 566), result);
      sub_100039EA8(*(void *)(a1 + 536), a2);
    }
    uint64_t result = sub_100039EA8(*(void *)(a1 + 528), a2);
    *(_DWORD *)(a1 + 520) = 1;
  }
  return result;
}

uint64_t sub_10003FA54(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 392);
  if (result) {
    uint64_t result = sub_10005A59C(result);
  }
  *(void *)(a1 + 392) = a2;
  *(_DWORD *)(a1 + 400) = 0;
  return result;
}

uint64_t sub_10003FA8C(uint64_t a1)
{
  return sub_10003964C(*(void *)(a1 + 528));
}

uint64_t sub_10003FA94(uint64_t a1)
{
  return sub_100039A88(*(void *)(a1 + 528));
}

uint64_t sub_10003FA9C(uint64_t a1)
{
  return sub_100039670(*(void *)(a1 + 528));
}

uint64_t sub_10003FAA4(uint64_t a1)
{
  return sub_100039F70(*(void *)(a1 + 536));
}

uint64_t sub_10003FAAC(uint64_t a1)
{
  return sub_100039F84(*(void *)(a1 + 536));
}

uint64_t sub_10003FAB4(uint64_t a1)
{
  return sub_100039684(*(void *)(a1 + 528));
}

uint64_t sub_10003FABC(uint64_t a1, int a2, int a3)
{
  uint64_t result = sub_100039698(*(void *)(a1 + 528));
  if (*(_DWORD *)(a1 + 8820))
  {
    int v7 = *(_DWORD *)(a1 + 8816);
    if (v7 > a3)
    {
      int v8 = *(_DWORD **)(a1 + 8808);
LABEL_11:
      v8[a3] = a2;
      return result;
    }
    if (v7) {
      int v9 = 2 * v7;
    }
    else {
      int v9 = 200;
    }
    int v10 = sub_1000C328C(4 * v9);
    if (v10)
    {
      int v8 = v10;
      j__memmove(v10, *(const void **)(a1 + 8808), 4 * *(int *)(a1 + 8816));
      uint64_t v11 = *(int *)(a1 + 8816);
      if ((int)v11 < v9) {
        memset_pattern16(&v8[v11], &unk_1000F4950, 4 * (v9 + ~v11) + 4);
      }
      uint64_t result = sub_1000C321C(*(void *)(a1 + 8808));
      *(_DWORD *)(a1 + 8816) = v9;
      *(void *)(a1 + 8808) = v8;
      goto LABEL_11;
    }
    return sub_100039FBC(a1);
  }
  return result;
}

uint64_t sub_10003FBB0(uint64_t a1)
{
  return sub_100039564(*(void *)(a1 + 528));
}

uint64_t sub_10003FBB8(uint64_t a1)
{
  return sub_1000396A8(*(void *)(a1 + 536));
}

uint64_t sub_10003FBC0(uint64_t a1)
{
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1776)) {
    return sub_10003A0B4(*(void *)(a1 + 536)) != 0;
  }
  uint64_t result = sub_10003A0B4(*(void *)(a1 + 528));
  if (result) {
    return sub_10003A0B4(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003FC20(uint64_t a1)
{
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1776)) {
    return sub_10003A0C8(*(void *)(a1 + 536)) != 0;
  }
  uint64_t result = sub_10003A0C8(*(void *)(a1 + 528));
  if (result) {
    return sub_10003A0C8(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003FC80(uint64_t a1)
{
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1776)) {
    return sub_10003A0DC(*(void *)(a1 + 536)) != 0;
  }
  uint64_t result = sub_10003A0DC(*(void *)(a1 + 528));
  if (result) {
    return sub_10003A0DC(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003FCE0(uint64_t a1)
{
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1776)) {
    return sub_10003A0F0(*(void *)(a1 + 536)) != 0;
  }
  uint64_t result = sub_10003A0F0(*(void *)(a1 + 528));
  if (result) {
    return sub_10003A0F0(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003FD40(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 536);
  if (result) {
    BOOL v2 = qword_100101CC0 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    if (*(_DWORD *)(qword_100101CC0 + 4712)) {
      return sub_10003B668(result);
    }
  }
  return result;
}

const char *sub_10003FD70()
{
  return "";
}

void sub_10003FD7C(uint64_t a1)
{
  bzero((void *)(a1 + 6648), 0x5E8uLL);
  *(void *)(a1 + 6656) = a1 + 7196;
  *(_DWORD *)(a1 + 6648) = 5;
  *(void *)(a1 + 6672) = a1 + 6696;
  *(_DWORD *)(a1 + 6668) = 500;
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 100))
  {
    *(_DWORD *)(a1 + 5500) = 0;
    *(void *)(a1 + 808) = 0;
    *(void *)(a1 + 800) = 0;
    sub_100046EE0(a1);
    if (!v9)
    {
      sub_1000472D4(a1, v2, v3, v4, v5, v6, v7, v8);
      if (qword_100101CC0)
      {
        if (!sub_100040218(a1, *(_DWORD *)(qword_100101CC0 + 100))) {
          return;
        }
      }
      else if (!sub_100040218(a1, 0))
      {
        return;
      }
      *(_DWORD *)(a1 + 152) = sub_10009CAEC();
      *(_DWORD *)(a1 + 156) = sub_10009CAD0();
      *(_DWORD *)(a1 + 160) = sub_10009CAD8();
LABEL_35:
      ++dword_100101CE8;
    }
  }
  else
  {
    if (sub_100004158(*(void *)(a1 + 16)))
    {
      uint64_t v10 = *(void *)a1;
      sub_100004150(*(void *)(a1 + 16));
      sub_10005A708(v10);
    }
    sub_1000BDF64(*(uint64_t **)(a1 + 8));
    sub_1000076FC(*(unsigned int **)(a1 + 16), 0);
    uint64_t v11 = *(unsigned int **)(a1 + 24);
    if (v11) {
      sub_1000076FC(v11, 0);
    }
    uint64_t v12 = *(unsigned int **)(a1 + 40);
    if (v12) {
      sub_1000076FC(v12, 0);
    }
    if (*(void *)(a1 + 24))
    {
      sub_100004158(*(void *)(a1 + 16));
      sub_100004158(*(void *)(a1 + 24));
      if (sub_100004158(*(void *)(a1 + 16)))
      {
        sub_100004150(*(void *)(a1 + 16));
        sub_100004150(*(void *)(a1 + 24));
      }
    }
    if (*(void *)(a1 + 40))
    {
      sub_100004158(*(void *)(a1 + 16));
      sub_100004158(*(void *)(a1 + 40));
      if (sub_100004158(*(void *)(a1 + 16)))
      {
        sub_100004150(*(void *)(a1 + 16));
        sub_100004150(*(void *)(a1 + 40));
      }
    }
    if (qword_100101CC0)
    {
      int v13 = *(_DWORD *)(qword_100101CC0 + 1872);
      *(_DWORD *)(a1 + 6468) = v13;
      if (v13) {
        sub_100011018(*(void *)(a1 + 16));
      }
      if (sub_100043604(a1)) {
        return;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 6468) = 0;
      if (sub_100043604(a1)) {
        return;
      }
    }
    if (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 1928) || !sub_1000498B4(a1))
    {
      sub_100004148(*(void *)(a1 + 16));
      sub_100046EE0(a1);
      if (!v21)
      {
        sub_1000472D4(a1, v14, v15, v16, v17, v18, v19, v20);
        if (qword_100101CC0)
        {
          int v22 = *(_DWORD *)(a1 + 728);
          if (!sub_100040218(a1, *(_DWORD *)(qword_100101CC0 + 100))) {
            return;
          }
        }
        else
        {
          int v22 = *(_DWORD *)(a1 + 728);
          if (!sub_100040218(a1, 0)) {
            return;
          }
        }
        if (sub_10004AAE8(a1, v23, v24, v25, v26, v27, v28, v29))
        {
          *(void *)(a1 + 6260) = 0xFFFFFFFF00000000;
          *(_DWORD *)(a1 + 5640) = sub_1000523A8(*(void *)(a1 + 5624), (void *)(a1 + 5632), (_DWORD *)(a1 + 5644), (_DWORD *)(a1 + 5648));
          *(void *)(a1 + 760) = 0;
          if (qword_100101CC0)
          {
            int v30 = *(_DWORD *)(qword_100101CC0 + 2048);
            int v31 = *(_DWORD *)(qword_100101CC0 + 2072);
          }
          else
          {
            int v30 = 0;
            int v31 = 0;
          }
          sub_1000B4440(a1 + 496, v22, v30, v31, 0, 1);
          if (qword_100101CC0)
          {
            int v32 = *(_DWORD *)(qword_100101CC0 + 2032);
            int v33 = *(_DWORD *)(qword_100101CC0 + 2040);
            if (v32 == -1) {
              int v32 = *(_DWORD *)(qword_100101CC0 + 2048);
            }
            if (v33 == -1) {
              int v33 = *(_DWORD *)(qword_100101CC0 + 2072);
            }
          }
          else
          {
            int v32 = 0;
            int v33 = 0;
          }
          sub_1000B4440(a1 + 544, v22, v32, v33, 0, 1);
          if (qword_100101CC0)
          {
            int v34 = *(_DWORD *)(qword_100101CC0 + 1992);
            int v35 = *(_DWORD *)(qword_100101CC0 + 2000);
            if (v34 == -1) {
              int v34 = *(_DWORD *)(qword_100101CC0 + 2048);
            }
            if (v35 == -1) {
              int v35 = *(_DWORD *)(qword_100101CC0 + 2072);
            }
          }
          else
          {
            int v34 = 0;
            int v35 = 0;
          }
          sub_1000B4440(a1 + 448, v22, v34, v35, 0, 1);
          if (qword_100101CC0)
          {
            int v36 = *(_DWORD *)(qword_100101CC0 + 2056);
            int v37 = *(_DWORD *)(qword_100101CC0 + 2064);
            if (v36 == -1) {
              int v36 = *(_DWORD *)(qword_100101CC0 + 2048);
            }
            if (v37 == -1) {
              int v37 = *(_DWORD *)(qword_100101CC0 + 2072);
            }
          }
          else
          {
            int v36 = 0;
            int v37 = 0;
          }
          sub_1000B4440(a1 + 592, v22, v36, v37, 0, 1);
          *(void *)(a1 + 440) = a1 + 496;
          if (*(void *)(a1 + 56)
            || !qword_100101CC0
            || (uint64_t v43 = *(void *)(qword_100101CC0 + 2120)) == 0
            || (uint64_t v44 = sub_10005CB78(*(void *)(a1 + 8), v43, (32 * v43), v38, v39, v40, v41, v42),
                (*(void *)(a1 + 56) = v44) != 0))
          {
            *(void *)&long long v45 = 0xFFFFFFFFLL;
            *((void *)&v45 + 1) = 0xFFFFFFFFLL;
            *(_OWORD *)(a1 + 6416) = v45;
            *(_DWORD *)(a1 + 152) = sub_10009CAEC();
            *(_DWORD *)(a1 + 160) = sub_10009CAD8();
            *(_DWORD *)(a1 + 156) = sub_10009CAD0();
            goto LABEL_35;
          }
        }
      }
    }
  }
}

_DWORD *sub_1000401CC(_DWORD *a1)
{
  *((void *)a1 + 1) = a1 + 137;
  *a1 = 5;
  *((void *)a1 + 3) = a1 + 12;
  a1[5] = 500;
  return a1;
}

uint64_t sub_100040218(uint64_t a1, int a2)
{
  *(void *)(a1 + 5512) = 0;
  *(_DWORD *)(a1 + 96) = a2;
  if ((!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 1912)) && !*(void *)(a1 + 104))
  {
    if (a2)
    {
      int v4 = 8;
      goto LABEL_6;
    }
    if (!qword_100101CC0) {
      goto LABEL_33;
    }
    if (*(_DWORD *)(qword_100101CC0 + 4728))
    {
      int v4 = 11;
      goto LABEL_6;
    }
    if (*(_DWORD *)(qword_100101CC0 + 4720))
    {
      int v4 = 6;
      goto LABEL_6;
    }
    if (*(_DWORD *)(qword_100101CC0 + 4712)) {
      int v4 = 5;
    }
    else {
LABEL_33:
    }
      int v4 = 1;
LABEL_6:
    uint64_t result = sub_100039154(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 40), *(unsigned int *)(a1 + 728), v4);
    *(void *)(a1 + 104) = result;
    if (!result) {
      return result;
    }
  }
  if (*(void *)(a1 + 112)
    || (!a2 ? (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 4544) ? (int v6 = 3) : (int v6 = 9)) : (int v6 = 8),
        uint64_t result = sub_100039154(*(void *)(a1 + 8), *(void *)(a1 + 16), 0, 0, *(unsigned int *)(a1 + 728), v6),
        (*(void *)(a1 + 112) = result) != 0))
  {
    uint64_t v7 = *(void *)(a1 + 24);
    if (!v7
      || *(void *)(a1 + 136)
      || (uint64_t result = sub_100039154(*(void *)(a1 + 8), v7, 0, 0, *(unsigned int *)(a1 + 728), 3),
          (*(void *)(a1 + 136) = result) != 0))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      if (!v8
        || *(void *)(a1 + 144)
        || (uint64_t result = sub_100039154(*(void *)(a1 + 8), v8, 0, 0, *(unsigned int *)(a1 + 728), 3),
            (*(void *)(a1 + 144) = result) != 0))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        if (!v9) {
          return 1;
        }
        if (*(void *)(a1 + 120)) {
          return 1;
        }
        uint64_t result = sub_100039154(*(void *)(a1 + 8), v9, 0, 0, *(unsigned int *)(a1 + 728), 3);
        *(void *)(a1 + 120) = result;
        if (result) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000403AC()
{
  sub_1000CD350(0);
  sub_1000CD370(0x1000uLL, 2048, v0, v1, v2, v3, v4, v5);
  return sub_1000CD364();
}

int *sub_1000403E4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  sub_1000C2F04(0x90uLL, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = v10;
  if (!v10) {
    goto LABEL_13;
  }
  *uint64_t v10 = v8;
  v10[8] = a1;
  uint64_t v12 = sub_1000C33A0(4 * v8);
  *((void *)v11 + 1) = v12;
  if (!v12) {
    goto LABEL_13;
  }
  uint64_t v13 = sub_1000C33A0(2 * *v11);
  *((void *)v11 + 2) = v13;
  if (!v13) {
    goto LABEL_13;
  }
  uint64_t v14 = sub_1000C33A0(8 * *v11);
  *((void *)v11 + 3) = v14;
  if (!v14) {
    goto LABEL_13;
  }
  uint64_t v15 = sub_1000C33A0(4 * v11[8]);
  *((void *)v11 + 5) = v15;
  if (!v15) {
    goto LABEL_13;
  }
  uint64_t v16 = sub_1000C33A0(4 * v11[8]);
  *((void *)v11 + 6) = v16;
  if (!v16) {
    goto LABEL_13;
  }
  uint64_t v17 = sub_1000C33A0(4 * v11[8]);
  *((void *)v11 + 7) = v17;
  if (!v17) {
    goto LABEL_13;
  }
  uint64_t v18 = sub_1000C33A0(v11[8]);
  *((void *)v11 + 8) = v18;
  if (!v18) {
    goto LABEL_13;
  }
  uint64_t v19 = sub_1000C33A0(2 * v11[8]);
  *((void *)v11 + 9) = v19;
  if (!v19) {
    goto LABEL_13;
  }
  uint64_t v20 = sub_1000C33A0(v11[8]);
  *((void *)v11 + 10) = v20;
  if (v20
    && (v11[1] = -1,
        *((void *)v11 + 11) = 0x7FFFFFFF00000000,
        *((void *)v11 + 13) = 0,
        uint64_t v21 = sub_1000C33A0(4 * v11[8]),
        (*((void *)v11 + 15) = v21) != 0))
  {
    int v22 = v11[8];
    v11[32] = 0;
    v11[33] = v22;
    v11[28] = -1;
    *((void *)v11 + 17) = 0;
    return v11;
  }
  else
  {
LABEL_13:
    sub_100040530((uint64_t)v11);
    return 0;
  }
}

uint64_t sub_100040530(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C321C(*(void *)(result + 80));
    v1[10] = 0;
    sub_1000C321C(v1[9]);
    v1[9] = 0;
    sub_1000C321C(v1[5]);
    v1[5] = 0;
    sub_1000C321C(v1[1]);
    v1[1] = 0;
    sub_1000C321C(v1[2]);
    v1[2] = 0;
    sub_1000C321C(v1[15]);
    v1[15] = 0;
    sub_1000C321C(v1[6]);
    v1[6] = 0;
    sub_1000C321C(v1[8]);
    v1[8] = 0;
    sub_1000C321C(v1[3]);
    v1[3] = 0;
    sub_1000C321C(v1[7]);
    v1[7] = 0;
    return sub_1000C321C((uint64_t)v1);
  }
  return result;
}

int *sub_1000405E4(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1000403E4(a1[8], *a1, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    *uint64_t result = *a1;
    result[8] = a1[8];
    result[1] = a1[1];
    result[22] = a1[22];
    result[23] = a1[23];
    *((void *)result + 13) = *((void *)a1 + 13);
    result[33] = a1[33];
    result[32] = a1[32];
    result[28] = a1[28];
    result[35] = a1[35];
    result[34] = a1[34];
    if (*a1 >= 1)
    {
      uint64_t v10 = 0;
      do
      {
        *(_DWORD *)(*((void *)result + 1) + 4 * v10) = *(_DWORD *)(*((void *)a1 + 1) + 4 * v10);
        ++v10;
        uint64_t v11 = *a1;
      }
      while (v10 < v11);
      if ((int)v11 >= 1)
      {
        for (uint64_t i = 0; i < v13; ++i)
        {
          *(_WORD *)(*((void *)result + 2) + 2 * i) = *(_WORD *)(*((void *)a1 + 2) + 2 * i);
          uint64_t v13 = *a1;
        }
        if ((int)v13 >= 1)
        {
          uint64_t v14 = 0;
          do
          {
            *(void *)(*((void *)result + 3) + 8 * v14) = *(void *)(*((void *)a1 + 3) + 8 * v14);
            ++v14;
          }
          while (v14 < *a1);
        }
      }
    }
    if (a1[8] >= 1)
    {
      uint64_t v15 = 0;
      do
      {
        *(_DWORD *)(*((void *)result + 5) + 4 * v15) = *(_DWORD *)(*((void *)a1 + 5) + 4 * v15);
        ++v15;
        uint64_t v16 = a1[8];
      }
      while (v15 < v16);
      if ((int)v16 >= 1)
      {
        for (uint64_t j = 0; j < v18; ++j)
        {
          *(_DWORD *)(*((void *)result + 6) + 4 * j) = *(_DWORD *)(*((void *)a1 + 6) + 4 * j);
          uint64_t v18 = a1[8];
        }
        if ((int)v18 >= 1)
        {
          for (uint64_t k = 0; k < v20; ++k)
          {
            *(unsigned char *)(*((void *)result + 8) + k) = *(unsigned char *)(*((void *)a1 + 8) + k);
            uint64_t v20 = a1[8];
          }
          if ((int)v20 >= 1)
          {
            for (uint64_t m = 0; m < v22; ++m)
            {
              *(_WORD *)(*((void *)result + 9) + 2 * m) = *(_WORD *)(*((void *)a1 + 9) + 2 * m);
              uint64_t v22 = a1[8];
            }
            if ((int)v22 >= 1)
            {
              for (uint64_t n = 0; n < v24; ++n)
              {
                *(unsigned char *)(*((void *)result + 10) + n) = *(unsigned char *)(*((void *)a1 + 10) + n);
                uint64_t v24 = a1[8];
              }
              if ((int)v24 >= 1)
              {
                for (iuint64_t i = 0; ii < v26; ++ii)
                {
                  *(_DWORD *)(*((void *)result + 15) + 4 * ii) = *(_DWORD *)(*((void *)a1 + 15) + 4 * ii);
                  uint64_t v26 = a1[8];
                }
                if ((int)v26 >= 1)
                {
                  uint64_t v27 = 0;
                  do
                  {
                    *(_DWORD *)(*((void *)result + 7) + 4 * v27) = *(_DWORD *)(*((void *)a1 + 7) + 4 * v27);
                    ++v27;
                  }
                  while (v27 < a1[8]);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10004084C(uint64_t a1)
{
  sub_1000C321C(*(void *)(a1 + 376));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  uint64_t result = sub_1000C321C(*(void *)(a1 + 392));
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  return result;
}

uint64_t sub_10004088C(uint64_t a1, uint64_t *a2)
{
  unsigned int v17 = 0;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  if (a1)
  {
    uint64_t v16 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v15 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v12 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v4 = *(void **)(a1 + 6520);
    uint64_t v5 = *(void *)(a1 + 6528);
  }
  else
  {
    uint64_t v16 = sub_1000C2EA8(0);
    uint64_t v15 = sub_1000CD350(0);
    uint64_t v12 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v13 = sub_1000D2948(v4, v5, &v14);
  bzero(&v18, 0x5E8uLL);
  uint64_t v19 = &v23;
  int v18 = 5;
  uint64_t v21 = &v22;
  int v20 = 500;
  sub_1000C0D2C(&v18);
  int v6 = (int *)sub_1000C0C70();
  if (!setjmp(v6))
  {
    if (a1 && !sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      if (!*(_DWORD *)(a1 + 8160))
      {
        if (*(_DWORD *)(a1 + 5672)) {
          sub_100041584(a1, 1);
        }
        sub_100051200(a1);
        sub_100051258(a1);
        sub_10004AEB8(a1);
        sub_100047328(a1);
        sub_1000471FC(a1);
        sub_100043640(a1);
        if (qword_100101CC0) {
          uint64_t v9 = *(unsigned int *)(qword_100101CC0 + 4456);
        }
        else {
          uint64_t v9 = 0;
        }
        sub_100039374(*(void *)(a1 + 104), v9);
        *(void *)(a1 + 104) = 0;
        sub_100039374(*(void *)(a1 + 112), v9);
        sub_100039374(*(void *)(a1 + 136), v9);
        sub_100039374(*(void *)(a1 + 144), v9);
        sub_100039374(*(void *)(a1 + 120), v9);
        *(void *)(a1 + 112) = 0;
        uint64_t v10 = *(void *)(a1 + 56);
        if (v10) {
          sub_10005CD04(v10);
        }
        uint64_t v11 = *(void *)(a1 + 80);
        if (v11) {
          sub_100033790(v11);
        }
        sub_10002F484(*(void *)(a1 + 72));
        sub_100031754(*(void *)(a1 + 80));
        sub_1000498E8(a1);
        sub_1000B43BC(*(void (***)(void))(a1 + 48));
        sub_1000B4E70(*(void *)(a1 + 8));
        sub_100008738(*(void *)(a1 + 16));
        sub_100008738(*(void *)(a1 + 24));
        sub_100008738(*(void *)(a1 + 40));
        sub_100008738(*(void *)(a1 + 32));
        sub_10005A68C(*(uint64_t (***)(void))a1);
        sub_1000C321C(*(void *)(a1 + 376));
        *(void *)(a1 + 368) = 0;
        *(void *)(a1 + 376) = 0;
        *(_DWORD *)(a1 + 384) = 0;
        sub_1000C321C(*(void *)(a1 + 392));
        *(void *)(a1 + 392) = 0;
        *(_DWORD *)(a1 + 400) = 0;
        sub_100052324(*(void *)(a1 + 5624));
        sub_1000C321C(*(void *)(a1 + 6512));
        qword_100101CC0 = 0;
        if (a2)
        {
          *a2 = *(void *)(a1 + 6480);
          bzero((void *)a1, 0x1FF0uLL);
          --dword_100101CE8;
          sub_1000C321C(a1);
          sub_1000CD3B8();
          sub_1000C2EBC(*a2);
        }
        else
        {
          bzero((void *)a1, 0x1FF0uLL);
          --dword_100101CE8;
          sub_1000C321C(a1);
          sub_1000CD3B8();
        }
        unsigned int v17 = 0;
        goto LABEL_12;
      }
      int v7 = 1;
    }
    else
    {
      int v7 = 4;
    }
    unsigned int v17 = v7;
LABEL_12:
    sub_1000C0CD8();
    goto LABEL_13;
  }
  if (a1) {
    *(_DWORD *)(a1 + 8160) = 1;
  }
  unsigned int v17 = 1;
LABEL_13:
  sub_100051144(v17);
  sub_1000D2948(v13, v14, 0);
  sub_1000C0D2C(v12);
  sub_1000CD350(v15);
  sub_1000C2EA8(v16);
  return v17;
}

uint64_t sub_100040C34(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v13 = 0;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  if (a1)
  {
    uint64_t v12 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v11 = sub_1000CD350(*(void *)(a1 + 6488));
    int v8 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v9 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v10);
    nullsub_1(v9);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    int v7 = (int *)sub_1000C0C70();
    if (!setjmp(v7))
    {
      if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
      {
        unsigned int v13 = 4;
        sub_1000C0CD8();
      }
      else
      {
        if (*(_DWORD *)(a1 + 8160))
        {
          unsigned int v13 = 1;
        }
        else
        {
          *a2 = *(_DWORD *)(a1 + 164);
          *a3 = *(_DWORD *)(a1 + 168);
          unsigned int v13 = 0;
        }
        sub_1000C0CD8();
      }
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 8160) = 1;
  }
  else
  {
    uint64_t v12 = sub_1000C2EA8(0);
    uint64_t v11 = sub_1000CD350(0);
    int v8 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    uint64_t v9 = sub_1000D2948(0, 0, &v10);
    nullsub_1(v9);
  }
  unsigned int v13 = 1;
LABEL_9:
  sub_100051144(v13);
  sub_1000D2948(v9, v10, 0);
  sub_1000C0D2C(v8);
  sub_1000CD350(v11);
  sub_1000C2EA8(v12);
  return v13;
}

uint64_t sub_100040E14(uint64_t a1)
{
  unsigned int v40 = 0;
  if (*(_DWORD *)(a1 + 5680) != 6) {
    return v40;
  }
  BOOL v2 = *(_DWORD *)(a1 + 6232) != 1 || qword_100101CC0 == 0;
  if (v2 || !*(_DWORD *)(qword_100101CC0 + 1980))
  {
    *(_DWORD *)(a1 + 6320) = 0;
    return v40;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(char **)(a1 + 6312);
  uint64_t v6 = *(void *)(a1 + 5512);
  int v7 = sub_1000B5C44(v3, *(_DWORD *)(a1 + 5720));
  if (v7 > *(_DWORD *)(a1 + 6324))
  {
    int v8 = sub_1000B5200(v3);
    if (v7 <= v8) {
      int v16 = v8;
    }
    else {
      int v16 = v7;
    }
    sub_1000C2F04(24 * v16, v9, v10, v11, v12, v13, v14, v15);
    uint64_t v5 = v17;
    uint64_t v18 = *(unsigned int *)(a1 + 6324);
    if ((int)v18 >= 1) {
      memcpy(v17, *(const void **)(a1 + 6312), 24 * v18);
    }
    sub_1000C321C(*(void *)(a1 + 6312));
    *(void *)(a1 + 6312) = v5;
    uint64_t v19 = *(int *)(a1 + 6324);
    if ((int)v19 < v16)
    {
      uint64_t v20 = v16 - v19;
      uint64_t v21 = (uint64_t *)&v5[24 * (int)v19 + 8];
      do
      {
        uint64_t v22 = sub_1000A3A20(v4, (uint64_t)v3, *(_DWORD *)(a1 + 728));
        *(v21 - 1) = v22;
        if (!v22) {
          return 1;
        }
        uint64_t v23 = sub_1000A48F0(v3, 1);
        *uint64_t v21 = v23;
        if (!v23) {
          return 1;
        }
        v21 += 3;
      }
      while (--v20);
    }
    *(_DWORD *)(a1 + 6324) = v16;
  }
  *(_DWORD *)(a1 + 6320) = v7;
  uint64_t v24 = qword_100101CC0;
  if (qword_100101CC0)
  {
    int v25 = *(_DWORD *)(qword_100101CC0 + 5252);
    *(_DWORD *)(a1 + 6336) = v25;
    if (v25)
    {
      *(_DWORD *)(a1 + 6328) = 0;
      *(_DWORD *)(a1 + 6332) = *(void *)(v24 + 984);
      if (v7 < 1) {
        goto LABEL_35;
      }
LABEL_27:
      uint64_t v27 = 0;
      uint64_t v28 = (uint64_t *)(v5 + 8);
      uint64_t v29 = v7;
      while (1)
      {
        unsigned __int16 v41 = 0;
        unsigned __int16 v41 = sub_1000B5AE4((uint64_t)v3, *(_DWORD *)(a1 + 5720), v27);
        uint64_t v30 = *v28;
        if (!*v28) {
          return 1;
        }
        sub_1000A4A58(*v28);
        if (qword_100101CC0)
        {
          int v37 = *(_DWORD *)(qword_100101CC0 + 4136);
          uint64_t v38 = *(void *)(qword_100101CC0 + 2072);
        }
        else
        {
          int v37 = 0;
          LODWORD(v38) = 0;
        }
        if (!sub_1000A3ED4(*(v28 - 1), v37, 0, v38, 1, 0, 1, &v41, v31, v32, v33, v34, v35, v36, 0, *(unsigned __int16 **)(v30 + 24), *(_DWORD *)(v30 + 32), *(_WORD **)v30, *(_WORD **)(v30 + 16),
                              *(void *)(v30 + 8),
                              (int *)(v30 + 36),
                              0))
          return 1;
        *(_DWORD *)(v30 + 44) = 1;
        **(_WORD **)(v30 + 48) = v41;
        ++v27;
        v28 += 3;
        if (v29 == v27)
        {
          uint64_t v24 = qword_100101CC0;
          goto LABEL_35;
        }
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 6336) = 0;
  }
  *(_DWORD *)(a1 + 6328) = 0x40000000;
  if (v7 >= 1) {
    goto LABEL_27;
  }
LABEL_35:
  if (v24) {
    int v39 = *(_DWORD *)(v24 + 5372);
  }
  else {
    int v39 = 0;
  }
  sub_100039634(v6, 0, v39);
  return v40;
}

uint64_t sub_10004109C(uint64_t a1, int a2)
{
  unsigned int v11 = 0;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  if (a1)
  {
    uint64_t v10 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v9 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v6 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v7 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v8);
    nullsub_1(v7);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v5 = (int *)sub_1000C0C70();
    if (setjmp(v5))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      unsigned int v11 = 4;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 8160))
    {
LABEL_13:
      unsigned int v11 = 1;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    if (a2)
    {
      if (*(_DWORD *)(a1 + 5712) && (!*(void *)(a1 + 6280) || !sub_10005A7A8(*(void *)a1))) {
        goto LABEL_13;
      }
      sub_1000C321C(*(void *)(a1 + 6280));
      *(void *)(a1 + 6280) = 0;
      *(_DWORD *)(a1 + 5712) = 0;
    }
    else
    {
      if (!*(_DWORD *)(a1 + 5672))
      {
        unsigned int v11 = 11;
        sub_1000C0CD8();
        goto LABEL_9;
      }
      sub_1000C321C(*(void *)(a1 + 6280));
      *(void *)(a1 + 6280) = 0;
      *(_DWORD *)(a1 + 5712) = 2;
      *(_DWORD *)(a1 + 5680) = 2;
      if (!*(_DWORD *)(a1 + 5676)) {
        *(_DWORD *)(a1 + 5672) = 0;
      }
    }
    unsigned int v11 = 0;
    sub_1000C0CD8();
    goto LABEL_9;
  }
  uint64_t v10 = sub_1000C2EA8(0);
  uint64_t v9 = sub_1000CD350(0);
  uint64_t v6 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  int v7 = sub_1000D2948(0, 0, &v8);
  nullsub_1(v7);
LABEL_8:
  unsigned int v11 = 1;
LABEL_9:
  sub_100051144(v11);
  sub_1000D2948(v7, v8, 0);
  sub_1000C0D2C(v6);
  sub_1000CD350(v9);
  sub_1000C2EA8(v10);
  return v11;
}

uint64_t sub_1000412E8(uint64_t a1, int a2)
{
  BOOL v13 = 0;
  BOOL v12 = 1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  if (!a1)
  {
    uint64_t v11 = sub_1000C2EA8(0);
    uint64_t v10 = sub_1000CD350(0);
    int v7 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    uint64_t v8 = sub_1000D2948(0, 0, &v9);
    nullsub_1(v8);
LABEL_8:
    BOOL v13 = 1;
    goto LABEL_9;
  }
  uint64_t v11 = sub_1000C2EA8(*(void *)(a1 + 6480));
  uint64_t v10 = sub_1000CD350(*(void *)(a1 + 6488));
  int v7 = sub_1000C0D40();
  sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
  uint64_t v8 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v9);
  nullsub_1(v8);
  if (*(_DWORD *)(a1 + 8160)) {
    return 1;
  }
  sub_1000C0D2C((void *)(a1 + 6648));
  uint64_t v5 = (int *)sub_1000C0C70();
  if (setjmp(v5))
  {
    *(_DWORD *)(a1 + 8160) = 1;
    goto LABEL_8;
  }
  if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
  {
    int v6 = 4;
  }
  else if (*(_DWORD *)(a1 + 8160))
  {
    int v6 = 1;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 5672) || !*(_DWORD *)(a1 + 5680))
    {
      BOOL v13 = 0;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    if (a2)
    {
      BOOL v13 = 0;
      if (*(_DWORD *)(a1 + 5708)) {
        BOOL v13 = sub_100041D70((uint64_t *)a1);
      }
      sub_100041DD8(a1);
      *(_DWORD *)(a1 + 5696) = 0;
      *(_DWORD *)(a1 + 5708) = 0;
      *(_DWORD *)(a1 + 5680) = 0;
      int v6 = v13;
    }
    else
    {
      if (*(_DWORD *)(a1 + 5680) != 4 && *(_DWORD *)(a1 + 5680) != 3)
      {
        sub_100041DD8(a1);
        BOOL v13 = 0;
        sub_1000C0CD8();
        goto LABEL_9;
      }
      BOOL v12 = sub_100041E38(a1);
      *(_DWORD *)(a1 + 5680) = 5;
      *(_DWORD *)(a1 + 5696) = 0;
      sub_100041DD8(a1);
      *(_DWORD *)(a1 + 5708) = 2;
      if (!*(_DWORD *)(a1 + 5676)) {
        *(_DWORD *)(a1 + 5672) = 0;
      }
      if (v12) {
        int v6 = 0;
      }
      else {
        int v6 = 12;
      }
    }
  }
  BOOL v13 = v6;
  sub_1000C0CD8();
LABEL_9:
  sub_100051144(v13);
  sub_1000D2948(v8, v9, 0);
  sub_1000C0D2C(v7);
  sub_1000CD350(v10);
  sub_1000C2EA8(v11);
  return v13;
}

uint64_t sub_100041584(uint64_t a1, int a2)
{
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  if (a1)
  {
    uint64_t v11 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v10 = sub_1000CD350(*(void *)(a1 + 6488));
    int v7 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v8 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v9);
    nullsub_1(v8);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v5 = (int *)sub_1000C0C70();
    if (!setjmp(v5))
    {
      if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
      {
        int v6 = 4;
      }
      else if (*(_DWORD *)(a1 + 8160))
      {
        int v6 = 1;
      }
      else if (*(_DWORD *)(a1 + 5672))
      {
        if (a2)
        {
          if (*(_DWORD *)(a1 + 5716)) {
            unsigned int v12 = sub_1000417F4(a1, 1);
          }
          if (*(_DWORD *)(a1 + 5712)) {
            unsigned int v12 = sub_10004109C(a1, 1);
          }
          if (*(_DWORD *)(a1 + 5708)) {
            unsigned int v12 = sub_1000412E8(a1, 1);
          }
          *(_DWORD *)(a1 + 5684) = 1;
          *(_DWORD *)(a1 + 5708) = 0;
          *(_DWORD *)(a1 + 5712) = 0;
          *(_DWORD *)(a1 + 5716) = 0;
        }
        else
        {
          if (!*(_DWORD *)(a1 + 5684)) {
            unsigned int v12 = sub_1000417F4(a1, 0);
          }
          *(_DWORD *)(a1 + 5684) = 1;
          *(_DWORD *)(a1 + 5708) = 2;
          *(_DWORD *)(a1 + 5712) = 2;
          *(_DWORD *)(a1 + 5716) = 2;
          sub_100041D00(a1);
        }
        int v6 = v12;
      }
      else
      {
        int v6 = 11;
      }
      unsigned int v12 = v6;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 8160) = 1;
  }
  else
  {
    uint64_t v11 = sub_1000C2EA8(0);
    uint64_t v10 = sub_1000CD350(0);
    int v7 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    uint64_t v8 = sub_1000D2948(0, 0, &v9);
    nullsub_1(v8);
  }
  unsigned int v12 = 1;
LABEL_9:
  sub_100051144(v12);
  sub_1000D2948(v8, v9, 0);
  sub_1000C0D2C(v7);
  sub_1000CD350(v10);
  sub_1000C2EA8(v11);
  return v12;
}

uint64_t sub_1000417F4(uint64_t a1, int a2)
{
  unsigned int v28 = 0;
  BOOL v27 = 0;
  BOOL v26 = 0;
  int v25 = 0;
  int v24 = 0;
  int v23 = a2;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  if (a1)
  {
    uint64_t v22 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v21 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v18 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v19 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v20);
    nullsub_1(v19);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v4 = (int *)sub_1000C0C70();
    if (!setjmp(v4))
    {
      if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
      {
        int v5 = 4;
      }
      else if (*(_DWORD *)(a1 + 8160))
      {
        int v5 = 1;
      }
      else
      {
        BOOL v27 = *(void *)(a1 + 136) != 0;
        BOOL v26 = *(void *)(a1 + 144) != 0;
        if (!*(_DWORD *)(a1 + 5716) || *(_DWORD *)(a1 + 5680) != 6) {
          int v23 = 1;
        }
        if (v23)
        {
          sub_10003B610(*(void **)(a1 + 112));
          if (v27) {
            sub_10003B610(*(void **)(a1 + 136));
          }
          if (v26) {
            sub_10003B610(*(void **)(a1 + 144));
          }
          sub_100041D00(a1);
          *(_DWORD *)(a1 + 5716) = 0;
        }
        else
        {
          if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1980)) {
            sub_100041EDC(a1);
          }
          if (*(_DWORD *)(a1 + 5660))
          {
            int v25 = 0;
            unsigned int v6 = 1;
            switch(*(_DWORD *)(a1 + 5668))
            {
              case 0:
              case 2:
                unsigned int v6 = *(_DWORD *)(a1 + 5668);
                break;
              case 3:
                int v25 = 1;
                break;
              case 4:
                goto LABEL_31;
              case 5:
                int v25 = 1;
LABEL_31:
                unsigned int v6 = 3;
                break;
              default:
                break;
            }
            int v24 = sub_10003B590(*(void *)(a1 + 112));
            if (!v24 && v27) {
              int v24 = sub_10003B590(*(void *)(a1 + 136));
            }
            if (!v24 && v26) {
              int v24 = sub_10003B590(*(void *)(a1 + 144));
            }
            if (!v24) {
              int v24 = sub_10003B5B8(*(void *)(a1 + 112), v6, v25);
            }
            if (!v24 && v27) {
              int v24 = sub_10003B5B8(*(void *)(a1 + 136), v6, v25);
            }
            if (!v24 && v26) {
              int v24 = sub_10003B5B8(*(void *)(a1 + 144), v6, v25);
            }
            if (v24 != 4)
            {
              if (*(void *)(a1 + 6304))
              {
                sub_1000241E4(*(void *)(a1 + 6304));
                uint64_t v7 = sub_1000B4E40(*(uint64_t **)(a1 + 6304));
                if (!v24)
                {
                  if (v7)
                  {
                    uint64_t v12 = v7;
                    do
                    {
                      int v24 = sub_10003B314(*(void *)(a1 + 112), *(unsigned int *)(v12 + 16), *(unsigned int **)(v12 + 8), *(int **)v12, v8, v9, v10, v11);
                      if (!v24 && v27) {
                        int v24 = sub_10003B314(*(void *)(a1 + 136), *(unsigned int *)(v12 + 16), *(unsigned int **)(v12 + 8), *(int **)v12, v13, v14, v15, v16);
                      }
                      if (!v24 && v26) {
                        int v24 = sub_10003B314(*(void *)(a1 + 144), *(unsigned int *)(v12 + 16), *(unsigned int **)(v12 + 8), *(int **)v12, v13, v14, v15, v16);
                      }
                      if (v24 == 4) {
                        break;
                      }
                      uint64_t v17 = sub_1000B4E40(*(uint64_t **)(a1 + 6304));
                      if (v24) {
                        break;
                      }
                      uint64_t v12 = v17;
                    }
                    while (v17);
                  }
                }
              }
            }
          }
          if (v24 != 4)
          {
            int v24 = sub_10003B590(*(void *)(a1 + 112));
            if (!v24 && v27) {
              int v24 = sub_10003B590(*(void *)(a1 + 136));
            }
            if (!v24 && v26) {
              int v24 = sub_10003B590(*(void *)(a1 + 144));
            }
          }
          sub_10003B610(*(void **)(a1 + 112));
          nullsub_1(*(void *)(a1 + 16));
          if (v27)
          {
            sub_10003B610(*(void **)(a1 + 136));
            nullsub_1(*(void *)(a1 + 24));
          }
          if (v26)
          {
            sub_10003B610(*(void **)(a1 + 144));
            nullsub_1(*(void *)(a1 + 40));
          }
          if (v24 == 4)
          {
            *(_DWORD *)(a1 + 5716) = 0;
            unsigned int v28 = 2;
          }
          else
          {
            *(_DWORD *)(a1 + 5716) = 2;
          }
        }
        int v5 = v28;
      }
      unsigned int v28 = v5;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 8160) = 1;
  }
  else
  {
    uint64_t v22 = sub_1000C2EA8(0);
    uint64_t v21 = sub_1000CD350(0);
    uint64_t v18 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    uint64_t v19 = sub_1000D2948(0, 0, &v20);
    nullsub_1(v19);
  }
  unsigned int v28 = 1;
LABEL_9:
  sub_100051144(v28);
  sub_1000D2948(v19, v20, 0);
  sub_1000C0D2C(v18);
  sub_1000CD350(v21);
  sub_1000C2EA8(v22);
  return v28;
}

uint64_t sub_100041D00(uint64_t a1)
{
  *(_DWORD *)(a1 + 5672) = 0;
  sub_1000B4DB4(*(uint64_t **)(a1 + 6304));
  *(void *)(a1 + 6304) = 0;
  sub_1000C3670(*(void *)(a1 + 6272));
  *(void *)(a1 + 6272) = 0;
  sub_1000C321C(*(void *)(a1 + 328));
  *(void *)(a1 + 328) = 0;
  sub_1000C321C(*(void *)(a1 + 6240));
  *(void *)(a1 + 6240) = 0;
  sub_1000C321C(*(void *)(a1 + 6288));
  *(void *)(a1 + 6288) = 0;
  uint64_t result = sub_1000C321C(*(void *)(a1 + 6296));
  *(void *)(a1 + 6296) = 0;
  *(_DWORD *)(a1 + 6256) = 0;
  return result;
}

BOOL sub_100041D70(uint64_t *a1)
{
  int v2 = sub_10005A7A8(*a1);
  if (sub_100004158(a1[2]))
  {
    uint64_t v3 = a1[2];
    int v4 = sub_100039FBC(*a1);
    sub_100004168(v3, v4);
  }
  return v2 == 0;
}

uint64_t sub_100041DD8(uint64_t a1)
{
  sub_1000C3670(*(void *)(a1 + 6272));
  *(void *)(a1 + 6272) = 0;
  sub_1000C321C(*(void *)(a1 + 328));
  *(void *)(a1 + 328) = 0;
  sub_1000C321C(*(void *)(a1 + 6240));
  *(void *)(a1 + 6240) = 0;
  sub_1000C321C(*(void *)(a1 + 6288));
  *(void *)(a1 + 6288) = 0;
  uint64_t result = sub_1000C321C(*(void *)(a1 + 6296));
  *(void *)(a1 + 6296) = 0;
  *(_DWORD *)(a1 + 6256) = 0;
  return result;
}

BOOL sub_100041E38(uint64_t a1)
{
  int v2 = *(int **)(a1 + 6288);
  int v3 = *v2;
  int v4 = v2[1];
  if (v4 < *v2) {
    int v3 = v2[1];
  }
  if (v2[2] >= v3)
  {
    int v5 = v4 < *v2;
  }
  else
  {
    int v3 = v2[2];
    int v5 = 2;
  }
  if (v2[3] < v3)
  {
    int v3 = v2[3];
    int v5 = 3;
  }
  if (v2[4] >= v3) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = 4;
  }
  int v7 = v6 - 2;
  if (v6 <= 2) {
    int v7 = v6 - 3;
  }
  if (v6) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  *(_DWORD *)(a1 + 5704) = v8;
  sub_100004168(*(void *)(a1 + 16), v8);
  return sub_10005A7A8(*(void *)a1) != 0;
}

uint64_t sub_100041EDC(uint64_t a1)
{
  if (*(int *)(a1 + 6324) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    do
    {
      int v4 = (uint64_t *)(*(void *)(a1 + 6312) + v2);
      sub_1000A3A68(*v4);
      sub_1000A4878(v4[1]);
      ++v3;
      *int v4 = 0;
      v4[1] = 0;
      v2 += 24;
    }
    while (v3 < *(int *)(a1 + 6324));
  }
  *(_DWORD *)(a1 + 6324) = 0;
  uint64_t result = sub_1000C321C(*(void *)(a1 + 6312));
  *(void *)(a1 + 6312) = 0;
  *(_DWORD *)(a1 + 6320) = 0;
  return result;
}

uint64_t sub_100041F5C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v23 = 0;
  if (*(_DWORD *)(a1 + 5688))
  {
    uint64_t v4 = a1;
    LODWORD(a1) = 0;
    switch(*(_DWORD *)(v4 + 5680))
    {
      case 1:
        if (!*(void *)(v4 + 104) || *(void *)(v4 + 5512) == *(void *)(v4 + 112)) {
          uint64_t v5 = v4 + 808;
        }
        else {
          uint64_t v5 = v4 + 800;
        }
        LODWORD(a1) = 0;
        *(_DWORD *)(*(void *)v5 + 4) = -1;
        goto LABEL_36;
      case 3:
        LODWORD(a1) = sub_100042508(v4, 0);
        if (!*(void *)(v4 + 104) || *(void *)(v4 + 5512) == *(void *)(v4 + 112)) {
          uint64_t v6 = v4 + 808;
        }
        else {
          uint64_t v6 = v4 + 800;
        }
        *(_DWORD *)(*(void *)v6 + 4) = -1;
        goto LABEL_26;
      case 4:
        LODWORD(a1) = sub_100042508(v4, 1);
        goto LABEL_26;
      case 6:
        uint64_t v7 = *(unsigned int *)(v4 + 6320);
        if ((int)v7 >= 1)
        {
          uint64_t v8 = 0;
          int v9 = 0;
          int v10 = *(_DWORD *)(v4 + 6328);
          do
          {
            uint64_t v11 = *(void *)(v4 + 6312) + v8;
            uint64_t v12 = *(void *)(v11 + 8);
            int v13 = sub_1000A429C(*(void *)v11, 0, (int *)(v11 + 16));
            int v14 = *(_DWORD *)(*(void *)(v4 + 6312) + v8 + 16);
            *(_DWORD *)(v12 + 68) = v14;
            if (*(_DWORD *)(v4 + 6336) && v14 > *(_DWORD *)(v4 + 6332) + v10) {
              int v13 = 3;
            }
            if (v13 == 3) {
              ++v9;
            }
            v8 += 24;
          }
          while (24 * v7 != v8);
          if (v9 != v7)
          {
            LODWORD(a1) = 0;
            goto LABEL_36;
          }
          goto LABEL_28;
        }
        if (!*(_DWORD *)(v4 + 6232)) {
          goto LABEL_48;
        }
        if (sub_10004971C(v4, -2))
        {
          int v24 = 0;
          if (!sub_10003B1F8(*(void *)(v4 + 112), *(unsigned int *)(v4 + 6232), (unsigned int *)(v4 + 5720), *(int **)(v4 + 256), &v24, 0, 1, v20))goto LABEL_48; {
          uint64_t v22 = *(void *)(v4 + 136);
          }
          if (v22)
          {
            if (!sub_10003B1F8(v22, *(unsigned int *)(v4 + 6232), (unsigned int *)(v4 + 5720), *(int **)(v4 + 256), &v24, 0, 1, v21))goto LABEL_48; {
          }
            }
          a1 = *(void *)(v4 + 144);
          if (!a1) {
            goto LABEL_26;
          }
          if (sub_10003B1F8(a1, *(unsigned int *)(v4 + 6232), (unsigned int *)(v4 + 5720), *(int **)(v4 + 256), &v24, 0, 1, v21))
          {
            LODWORD(a1) = 0;
          }
          else
          {
LABEL_48:
            LODWORD(a1) = 2;
          }
        }
        else
        {
          LODWORD(a1) = 1;
        }
LABEL_26:
        if (!a1) {
          goto LABEL_36;
        }
        if (a1 != 2) {
          goto LABEL_37;
        }
LABEL_28:
        if (*(int *)(v4 + 6320) >= 1)
        {
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          do
          {
            *(_DWORD *)(*(void *)(v4 + 6312) + v15 + 16) = 0x40000000;
            sub_1000A4A58(*(void *)(*(void *)(v4 + 6312) + v15 + 8));
            ++v16;
            v15 += 24;
          }
          while (v16 < *(int *)(v4 + 6320));
        }
        sub_10003B1BC(*(void *)(v4 + 112));
        uint64_t v17 = *(void *)(v4 + 136);
        if (v17) {
          sub_10003B1BC(v17);
        }
        uint64_t v18 = *(void *)(v4 + 144);
        if (v18) {
          sub_10003B1BC(v18);
        }
        LODWORD(a1) = 2;
LABEL_36:
        *(_DWORD *)(v4 + 5688) = 0;
        *(_DWORD *)(v4 + 6448) = 0;
LABEL_37:
        if (a1 == 2) {
          unsigned int v23 = 12;
        }
        break;
      default:
        goto LABEL_36;
    }
  }
  else
  {
    LODWORD(a1) = 0;
  }
  *a3 = a1;
  return v23;
}

uint64_t sub_100042268(uint64_t a1, uint64_t a2, __int16 *a3, int *a4)
{
  unsigned int v29 = 0;
  *a4 = 2;
  if (!*(_DWORD *)(a1 + 5672)) {
    return 11;
  }
  uint64_t v4 = a4;
  if (!*(_DWORD *)(a1 + 6448))
  {
    uint64_t result = 0;
    *a4 = 1;
    return result;
  }
  if (!a2)
  {
    if (!*(_DWORD *)(a1 + 348))
    {
      *a4 = 0;
      goto LABEL_31;
    }
    if (*(_DWORD *)(a1 + 352))
    {
      *a4 = 0;
      goto LABEL_30;
    }
    if (*(_DWORD *)(a1 + 356))
    {
      *a4 = 0;
      unsigned int v29 = 12;
      goto LABEL_31;
    }
    int v26 = 3;
    goto LABEL_26;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 6320);
  if ((int)v7 >= 1)
  {
    uint64_t v9 = sub_100039F60(*(void *)(a1 + 5512));
    if (*(_DWORD *)(a1 + 6336)) {
      *(_DWORD *)(a1 + 6328) += sub_1000A441C(**(void **)(a1 + 6312), a2, a3, v9, v10, v11, v12, v13, v14, v15);
    }
    uint64_t v16 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
    int v27 = v7;
    do
    {
      uint64_t v20 = (uint64_t *)(*(void *)(a1 + 6312) + v16);
      uint64_t v21 = v20[1];
      int v22 = sub_1000A4480(*v20, a2, a3, v9, v10, v11, v12, v13, v14, v15);
      ++*(_DWORD *)(v21 + 64);
      if (v22)
      {
        if (v22 == 2)
        {
          ++v18;
        }
        else if (v22 == 3)
        {
          ++v17;
        }
      }
      else
      {
        ++v19;
      }
      v16 += 24;
      --v7;
    }
    while (v7);
    uint64_t v4 = a4;
    if (v18 + v19 + v17 == v27 || v19 == v27 || v17 == v27) {
      int v26 = 0;
    }
    else {
      int v26 = 2;
    }
LABEL_26:
    *uint64_t v4 = v26;
  }
LABEL_30:
  unsigned int v29 = 0;
LABEL_31:
  if (*(_DWORD *)(a1 + 640))
  {
    if ((int)sub_1000483F4((_DWORD *)a1) >= *(_DWORD *)(a1 + 644)) {
      *uint64_t v4 = 0;
    }
  }
  return v29;
}

int *sub_100042440(void *a1, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  if (!a1[13] || a1[689] == a1[14])
  {
    uint64_t v4 = a1 + 101;
    if ((a2 & 0x80000000) != 0)
    {
LABEL_15:
      uint64_t result = 0;
      *a3 = 0;
      return result;
    }
  }
  else
  {
    uint64_t v4 = a1 + 100;
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_15;
    }
  }
  uint64_t v5 = *v4;
  if (*(_DWORD *)(v5 + 4) <= (signed int)a2) {
    goto LABEL_15;
  }
  uint64_t v6 = *(int **)(v5 + 40);
  uint64_t v7 = -1;
  int v8 = a2;
  uint64_t v9 = v6;
  do
  {
    int32x4_t v10 = v9;
    double v11 = v6;
    int32x4_t v12 = (char *)(v9 - 1);
    do
    {
      int v13 = *v9++;
      v12 += 4;
    }
    while (v13 != -1);
    *a3 = ((unint64_t)(v12 - (char *)&v6[v7]) >> 2) - 1;
    uint64_t v6 = *(int **)(v5 + 40);
    uint64_t v7 = (v12 - (char *)v6) >> 2;
  }
  while (v8-- > 0);
  if (a4)
  {
    *a4 = *(_DWORD *)(*(void *)(v5 + 8) + 4 * a2);
    uint64_t v6 = *(int **)(v5 + 40);
  }
  return &v6[(int)(v10 - v11)];
}

uint64_t sub_100042508(uint64_t a1, int a2)
{
  uint64_t v19 = 0;
  if (!*(_DWORD *)(a1 + 6232)) {
    return 2;
  }
  int v4 = sub_10005A798(*(void *)a1);
  uint64_t v5 = sub_1000C33A0(v4);
  if (!v5) {
    return 4;
  }
  uint64_t v6 = v5;
  if (!sub_10005A7A0(*(void *)a1))
  {
    sub_1000C321C(v6);
    return 3;
  }
  int v7 = sub_10005A7A8(*(void *)a1);
  if (a2)
  {
    if (v7)
    {
      if (sub_1000492D8(a1) && sub_10004971C(a1, -2))
      {
        int v18 = 0;
        sub_10009F2BC(*(void *)(a1 + 256));
        **(_DWORD **)(a1 + 6296) = 0;
        BOOL v9 = sub_10003B1F8(*(void *)(a1 + 112), *(unsigned int *)(a1 + 6232), (unsigned int *)(a1 + 5720), *(int **)(a1 + 256), &v18, &v19, 1, v8);
        if (v9)
        {
          **(_DWORD **)(a1 + 6296) = v18;
          if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 3480))
          {
            unsigned int v10 = 0;
            **(_DWORD **)(a1 + 6296) = sub_10003B26C(*(void *)(a1 + 5512), v19, *(int **)(a1 + 256), 0, 0, 0, 0);
          }
          else
          {
            unsigned int v10 = 0;
          }
        }
        else
        {
          unsigned int v10 = 2;
        }
      }
      else
      {
        unsigned int v10 = 0;
        BOOL v9 = 0;
      }
      if (sub_10005A7A0(*(void *)a1))
      {
        uint64_t v12 = 1;
        while (1)
        {
          if (!sub_10005A7A8(*(void *)a1)) {
            goto LABEL_49;
          }
          if (!sub_1000492D8(a1) || !sub_10004971C(a1, -2)) {
            goto LABEL_45;
          }
          int v18 = 0;
          sub_10009F2BC(*(void *)(a1 + 256));
          if (!qword_100101CC0) {
            break;
          }
          int v14 = *(_DWORD *)(qword_100101CC0 + 1936);
          *(_DWORD *)(*(void *)(a1 + 6296) + 4 * v12) = 0;
          if (!v14) {
            goto LABEL_38;
          }
          BOOL v9 = sub_10003B1F8(*(void *)(a1 + 112), *(unsigned int *)(a1 + 6232), (unsigned int *)(a1 + 5720), *(int **)(a1 + 256), &v18, &v19, 1, v13);
          if (v9)
          {
            *(_DWORD *)(*(void *)(a1 + 6296) + 4 * v12) = v18;
            char v15 = 1;
            goto LABEL_39;
          }
          unsigned int v10 = 2;
          if (!sub_10005A7A0(*(void *)a1)) {
            goto LABEL_49;
          }
LABEL_46:
          if (++v12 == 5) {
            goto LABEL_50;
          }
        }
        *(_DWORD *)(*(void *)(a1 + 6296) + 4 * v12) = 0;
LABEL_38:
        char v15 = 0;
        if (v9)
        {
LABEL_39:
          int v16 = qword_100101CC0;
          if (qword_100101CC0) {
            int v16 = *(_DWORD *)(qword_100101CC0 + 3480);
          }
          if (v16) {
            char v15 = 0;
          }
          if ((v15 & 1) == 0) {
            *(_DWORD *)(*(void *)(a1 + 6296) + 4 * v12) = sub_10003B26C(*(void *)(a1 + 5512), v19, *(int **)(a1 + 256), v16 == 0, 0, 0, 0);
          }
        }
LABEL_45:
        if (!sub_10005A7A0(*(void *)a1)) {
          goto LABEL_49;
        }
        goto LABEL_46;
      }
    }
  }
  else if (v7)
  {
    sub_1000492D8(a1);
    if (sub_10005A7A0(*(void *)a1))
    {
      if (sub_10005A7A8(*(void *)a1))
      {
        sub_1000492D8(a1);
        if (sub_10005A7A0(*(void *)a1))
        {
          if (sub_10005A7A8(*(void *)a1))
          {
            sub_1000492D8(a1);
            if (sub_10005A7A0(*(void *)a1))
            {
              if (sub_10005A7A8(*(void *)a1))
              {
                sub_1000492D8(a1);
                if (sub_10005A7A0(*(void *)a1))
                {
                  unsigned int v10 = 3;
                  if (sub_10005A7A8(*(void *)a1))
                  {
                    sub_1000492D8(a1);
                    if (sub_10005A7A0(*(void *)a1)) {
                      unsigned int v10 = 0;
                    }
                    else {
                      unsigned int v10 = 3;
                    }
                  }
                  goto LABEL_50;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_49:
  unsigned int v10 = 3;
LABEL_50:
  if (sub_10005A7A8(*(void *)a1)) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 3;
  }
  sub_1000C321C(v6);
  return v11;
}

uint64_t sub_1000428D4(uint64_t a1, uint64_t a2, __int32 a3, unsigned int a4, void *a5)
{
  uint64_t v9 = sub_1000BFC50(a2, "elvisversion", 0);
  if (!v9) {
    return 9;
  }
  uint64_t v11 = v9;
  sub_1000BFD58(v9, 0x7FFFFFFF, v10);
  sub_1000BFD58(v11, 2, v12);
  sub_1000BFD58(v11, *(_DWORD *)(a1 + 152), v13);
  __int32 v14 = sub_10009CAD0();
  sub_1000BFD58(v11, v14, v15);
  sub_1000BFD58(v11, *(_DWORD *)(a1 + 156), v16);
  sub_1000BFD58(v11, *(_DWORD *)(a1 + 160), v17);
  sub_1000BFD58(v11, 2, v18);
  sub_1000BFD58(v11, 4, v19);
  sub_1000BFD58(v11, 8, v20);
  sub_1000BFD58(v11, 2, v21);
  sub_1000BFD58(v11, 2, v22);
  sub_1000BFD58(v11, 4, v23);
  sub_1000BFD58(v11, 2, v24);
  sub_1000BFD58(v11, a3, v25);
  char v43 = 0;
  int v42 = 0;
  sub_1000B5118(*(uint64_t **)(a1 + 8), 5, &v42);
  sub_1000BFDB0(v11, &v42, 4u, 1, v26);
  __int32 v27 = sub_10005A738(*(void *)a1);
  sub_1000BFD58(v11, v27, v28);
  sub_1000BFD58(v11, *(_DWORD *)(a1 + 164), v29);
  sub_1000BFD58(v11, *(_DWORD *)(a1 + 168), v30);
  __int32 v31 = sub_10005A7B0(*(void *)a1, 0);
  __int32 v32 = sub_100006DB4(*(void *)(a1 + 16), 0);
  __int32 v33 = sub_1000BDE18(*(uint64_t **)(a1 + 8));
  sub_1000BFD58(v11, v31, v34);
  sub_1000BFD58(v11, v32, v35);
  sub_1000BFD58(v11, v33, v36);
  if (a5) {
    unsigned int v38 = a4;
  }
  else {
    unsigned int v38 = 0;
  }
  sub_1000BFDB0(v11, a5, v38, 1, v37);
  if (*(void *)(a1 + 48)) {
    __int32 v40 = sub_1000511D4(a1);
  }
  else {
    __int32 v40 = 0;
  }
  sub_1000BFD58(v11, v40, v39);
  sub_1000BFD14(v11);
  return 0;
}

uint64_t sub_100042AE0(uint64_t a1, unsigned __int32 *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, unsigned __int32 *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12, _DWORD *a13, int a14, unsigned char *a15, int a16, void *a17)
{
  uint8x8_t v24 = sub_1000BEC58(a1, "elvisversion", 0, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
  if (!v24) {
    return 0;
  }
  uint64_t v25 = (uint64_t)v24;
  *a5 = -1;
  int v37 = 0;
  LODWORD(v26) = sub_1000BEECC((uint64_t)v24, a5);
  if (!v26)
  {
    int v29 = 0;
    *a5 = -1;
    goto LABEL_25;
  }
  if (*a5 == 0x7FFFFFFF)
  {
    if (!sub_1000BEECC(v25, &v37)) {
      goto LABEL_49;
    }
    int v27 = v37;
    *a3 = 0;
    *a6 = 0;
    if (v27)
    {
      __int32 v32 = a15;
      unsigned __int32 v28 = 0;
      if ((v27 - 1) > 1) {
        goto LABEL_7;
      }
      goto LABEL_37;
    }
  }
  else
  {
    *a3 = 0;
    *a6 = 0;
  }
  v35[0].i8[4] = 0;
  v35[0].i32[0] = 0;
  if (!sub_1000BEFCC(v25, v35, 4, 1)) {
    goto LABEL_49;
  }
  sub_1000CAD88(a15, (char *)v35, a14);
  unsigned __int32 v36 = 0;
  if (!sub_1000BEECC(v25, &v36)) {
    goto LABEL_49;
  }
  __int32 v32 = a15;
  unsigned __int32 v28 = v36;
  if ((v37 - 1) > 1)
  {
LABEL_7:
    if (v28 <= 5) {
      goto LABEL_8;
    }
    return 0;
  }
LABEL_37:
  if (!sub_1000BEECC(v25, a3) || !sub_1000BEECC(v25, a4) || !sub_1000BEECC(v25, a5) || !sub_1000BEECC(v25, a6)) {
    goto LABEL_49;
  }
  if (v37 == 2)
  {
    memset(v35, 0, 28);
    sub_100042E9C(v25, (uint64_t)v35);
    *(int32x2_t *)v30.i8 = vrev64_s32(v35[0]);
    v30.u64[1] = *(unint64_t *)((char *)&v35[1] + 4);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v30, (int32x4_t)xmmword_1000F4970)))) & 1) != 0
      || *(void *)((char *)&v35[2] + 4) != 0x200000004)
    {
      return 0;
    }
  }
  v35[0].i32[0] = 0;
  if (!sub_1000BEECC(v25, v35)
    || (unsigned __int32 v28 = v35[0].i32[0], v35[0].i8[4] = 0, v35[0].i32[0] = 0, !sub_1000BEFCC(v25, v35, 4, 1)))
  {
LABEL_49:
    if (sub_1000BED94(v25)) {
      uint64_t v26 = v26;
    }
    else {
      uint64_t v26 = 0;
    }
    goto LABEL_32;
  }
  sub_1000CAD88(v32, (char *)v35, a14);
  if (v28 > 5) {
    return 0;
  }
LABEL_8:
  int v29 = dword_1000F4980[v28];
  *a2 = v28;
  v35[0].i32[0] = 0;
  unsigned __int32 v36 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (!sub_1000BEECC(v25, v35)
    || !sub_1000BEECC(v25, &v36)
    || !sub_1000BEECC(v25, (char *)&v34 + 4)
    || !sub_1000BEECC(v25, &v34)
    || !sub_1000BEECC(v25, (char *)&v33 + 4)
    || !sub_1000BEECC(v25, &v33))
  {
    goto LABEL_25;
  }
  *a7 = v35[0].i32[0];
  *a8 = v36;
  *a9 = HIDWORD(v34);
  if (a11) {
    *a11 = v34;
  }
  if (a12) {
    *a12 = HIDWORD(v33);
  }
  if (a13) {
    *a13 = v33;
  }
  if (!sub_1000BEFCC(v25, a17, a16, 1) || (v35[0].i32[0] = 0, !sub_1000BEECC(v25, v35)))
  {
LABEL_25:
    if (sub_1000BED94(v25)) {
      uint64_t v26 = v26;
    }
    else {
      uint64_t v26 = 0;
    }
    if (!v29) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  *a10 = v35[0].i32[0];
  uint64_t v26 = sub_1000BED94(v25);
  if (v29)
  {
LABEL_29:
    if (*a5 == *a4) {
      uint64_t v26 = v26;
    }
    else {
      uint64_t v26 = 0;
    }
  }
LABEL_32:
  sub_1000BED3C(v25);
  return v26;
}

BOOL sub_100042E9C(uint64_t a1, uint64_t a2)
{
  sub_1000BEECC(a1, (void *)a2);
  sub_1000BEECC(a1, (void *)(a2 + 4));
  sub_1000BEECC(a1, (void *)(a2 + 8));
  sub_1000BEECC(a1, (void *)(a2 + 12));
  sub_1000BEECC(a1, (void *)(a2 + 16));
  sub_1000BEECC(a1, (void *)(a2 + 20));
  return sub_1000BEECC(a1, (void *)(a2 + 24));
}

uint64_t sub_100042F18(const char *a1, uint64_t *a2, unsigned int a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11 = sub_1000CB30C(a1);
  uint64_t v19 = 4;
  if (a3 > 2) {
    return v19;
  }
  uint64_t v20 = v11;
  if (!v11) {
    return v19;
  }
  unsigned __int32 v28 = (unsigned char *)sub_1000CD3E8(13, v12, v13, v14, v15, v16, v17, v18);
  *(void *)unsigned __int32 v28 = 0;
  *(void *)(v28 + 5) = 0;
  if (a3 == 2)
  {
    uint64_t v29 = *a2;
  }
  else
  {
    sub_1000C2F04(0x1FF0uLL, v21, v22, v23, v24, v25, v26, v27);
    uint64_t v29 = v30;
    *(void *)(v30 + 8168) = "Elvis Magic";
  }
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  int v86 = 0;
  unsigned __int32 v81 = 0;
  if (!sub_100042AE0(v20, &v81, &v87, &v88, (_DWORD *)&v88 + 1, (_DWORD *)&v87 + 1, &v86, &v85, &v84, &v83, a4, a5, a6, 5, v82, 13, v28))goto LABEL_10; {
  int v31 = v87;
  }
  if (v31 != sub_10009CAEC()) {
    goto LABEL_10;
  }
  int v32 = sub_10009CAD0();
  int v39 = HIDWORD(v88);
  if (HIDWORD(v88) != v32 && !v87) {
    goto LABEL_10;
  }
  if (v87) {
    BOOL v42 = 1;
  }
  else {
    BOOL v42 = v88 == v32;
  }
  int v40 = 1;
  if (!v42 || v81 != a3) {
    goto LABEL_11;
  }
  *(_DWORD *)(v29 + 152) = v87;
  *(_DWORD *)(v29 + 156) = v39;
  *(_DWORD *)(v29 + 160) = HIDWORD(v87);
  uint64_t v43 = *(void *)(v29 + 6512);
  uint64_t v44 = sub_1000C4D38(v20, 0, v33, v34, v35, v36, v37, v38);
  *(void *)(v29 + 6512) = v44;
  if (!v44) {
    goto LABEL_10;
  }
  qword_100101CC0 = v44;
  *(void *)(v29 + 6504) = v44;
  sub_1000C321C(v43);
  if (a3 == 2)
  {
LABEL_25:
    long long v51 = sub_1000BE374(v20, 0, v45, v46, v47, v48, v49, v50);
    *(void *)(v29 + 8) = v51;
    if (!v51) {
      goto LABEL_10;
    }
    if (*v28)
    {
      uint64_t v58 = sub_1000B4408(v20, 0);
      *(void *)(v29 + 48) = v58;
      if (!v58) {
        goto LABEL_10;
      }
    }
    if (*(void *)(v29 + 136)) {
      goto LABEL_10;
    }
    if (*(void *)(v29 + 144)) {
      goto LABEL_10;
    }
    if (v28[7])
    {
      uint64_t v59 = sub_10003B6A0(v20, "bdec0/", *(void *)(v29 + 8), *(void *)(v29 + 16), *(void *)(v29 + 24), *(void *)(v29 + 40));
      *(void *)(v29 + 104) = v59;
      if (!v59) {
        goto LABEL_10;
      }
    }
    if (v28[8])
    {
      uint64_t v60 = sub_10003B6A0(v20, "bdec1/", *(void *)(v29 + 8), *(void *)(v29 + 16), 0, 0);
      *(void *)(v29 + 112) = v60;
      if (!v60) {
        goto LABEL_10;
      }
    }
    if (v28[9])
    {
      uint64_t v61 = sub_10003B6A0(v20, "bdec2/", *(void *)(v29 + 8), *(void *)(v29 + 24), 0, 0);
      *(void *)(v29 + 136) = v61;
      if (!v61) {
        goto LABEL_10;
      }
    }
    if (v28[10])
    {
      uint64_t v62 = sub_10003B6A0(v20, "bdec3/", *(void *)(v29 + 8), *(void *)(v29 + 40), 0, 0);
      *(void *)(v29 + 144) = v62;
      if (!v62) {
        goto LABEL_10;
      }
    }
    if (v28[11])
    {
      uint64_t v63 = sub_10003B6A0(v20, "bdec4/", *(void *)(v29 + 8), *(void *)(v29 + 32), 0, 0);
      *(void *)(v29 + 120) = v63;
      if (!v63) {
        goto LABEL_10;
      }
    }
    if (v28[2])
    {
      int v64 = qword_100101CC0 ? *(_DWORD *)(qword_100101CC0 + 1920) : 0;
      __int16 v76 = sub_10002F444(v64);
      *(void *)(v29 + 72) = v76;
      if (!v76) {
        goto LABEL_10;
      }
    }
    if (v28[1])
    {
      int v77 = sub_100036B00(v20, 0, *(void *)(v29 + 8), *(void *)(v29 + 16), *(void *)(v29 + 72), v55, v56, v57);
      *(void *)(v29 + 80) = v77;
      if (!v77) {
        goto LABEL_10;
      }
    }
    if (v28[12])
    {
      uint64_t v78 = *(void *)(v29 + 56);
      if (v78) {
        sub_10005CD04(v78);
      }
      uint64_t v79 = sub_10005DC68(v20, 0, *(void *)(v29 + 8), v53, v54, v55, v56, v57);
      *(void *)(v29 + 56) = v79;
      if (!v79) {
        goto LABEL_10;
      }
    }
    uint64_t v80 = sub_1000523C8(v20, 0, v52, v53, v54, v55, v56, v57);
    *(void *)(v29 + 5624) = v80;
    if (!v80 || !*(void *)(v29 + 104) && !*(void *)(v29 + 112)) {
      goto LABEL_10;
    }
LABEL_56:
    int v40 = 0;
    goto LABEL_11;
  }
  uint64_t v65 = sub_10005A94C(v20, 0, v45, v46, v47, v48, v49, v50);
  *(void *)uint64_t v29 = v65;
  if (!v65
    || (int v66 = sub_10005A738(v65), v66 != v86)
    || !sub_10005A770(*(void *)v29) && qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 764)
    || (unsigned long long v72 = sub_10000F21C(v20, 0, 0, v67, v68, v69, v70, v71), (*(void *)(v29 + 16) = v72) == 0))
  {
LABEL_10:
    int v40 = 1;
    goto LABEL_11;
  }
  if (!v28[4]
    || (int v40 = 1, v73 = sub_10000F21C(v20, 0, 1u, v46, v47, v48, v49, v50), (*(void *)(v29 + 24) = v73) != 0))
  {
    if (!v28[5] || (uint64_t v74 = sub_10000F21C(v20, 0, 2u, v46, v47, v48, v49, v50), (*(void *)(v29 + 40) = v74) != 0))
    {
      if (!v28[6] || (uint64_t v75 = sub_10000F21C(v20, 0, 3u, v46, v47, v48, v49, v50), (*(void *)(v29 + 32) = v75) != 0))
      {
        *a2 = v29;
        if ((a3 & 0xFFFFFFFD) != 0) {
          goto LABEL_56;
        }
        goto LABEL_25;
      }
    }
    goto LABEL_10;
  }
LABEL_11:
  if (sub_1000CB808(v20)) {
    uint64_t v19 = 3;
  }
  else {
    uint64_t v19 = 0;
  }
  sub_1000CD4D0(v28, 13);
  if (v40)
  {
    *a2 = 0;
    return 1;
  }
  return v19;
}

uint64_t sub_10004337C(const char *a1, const char *a2, uint64_t a3, void *a4)
{
  unsigned int v24 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v21 = 0;
  int v19 = -1;
  uint64_t v20 = -1;
  uint64_t v16 = 0;
  uint64_t v18 = sub_1000C2EA8(a3);
  uint64_t v17 = sub_1000CD350(0);
  uint64_t v14 = sub_1000C0D40();
  uint64_t v15 = sub_1000D2948(0, 0, &v16);
  memset(v25, 0, 512);
  if (sub_1000401CC(v25) && (sub_1000C0D2C(v25), uint64_t v8 = (int *)sub_1000C0C70(), !setjmp(v8)))
  {
    if (a4 && a1 && *a1 && a2 && *a2)
    {
      sub_1000403AC();
      unsigned int v24 = sub_100042F18(a1, (uint64_t *)&v23, 1u, &v22, (_DWORD *)&v22 + 1, &v21);
      if (!v24) {
        unsigned int v24 = sub_100042F18(a2, (uint64_t *)&v23, 2u, &v20, (_DWORD *)&v20 + 1, &v19);
      }
      if (!v24 && v22 != v20 && v21 != v19) {
        unsigned int v24 = 3;
      }
      if (!v24)
      {
        uint64_t v9 = v23;
        sub_10003FD7C((uint64_t)v23);
        unsigned int v24 = v10;
        if (!v10)
        {
          *a4 = v9;
          v9[810] = a3;
          v9[811] = sub_1000CD364();
          v9[812] = sub_10000411C();
          v9[813] = v11;
        }
      }
      int v12 = v24;
    }
    else
    {
      int v12 = 4;
    }
    unsigned int v24 = v12;
    sub_1000C0CD8();
  }
  else
  {
    unsigned int v24 = 1;
  }
  sub_100051144(v24);
  sub_1000D2948(v15, v16, 0);
  sub_1000C0D2C(v14);
  sub_1000CD350(v17);
  sub_1000C2EA8(v18);
  return v24;
}

uint64_t sub_100043604(uint64_t a1)
{
  uint64_t v2 = sub_100023CAC(512);
  *(void *)(a1 + 6408) = v2;
  return 2 * (v2 == 0);
}

uint64_t *sub_100043640(uint64_t a1)
{
  uint64_t result = *(uint64_t **)(a1 + 6408);
  if (result)
  {
    uint64_t result = sub_100023D10(result);
    *(void *)(a1 + 6408) = 0;
  }
  return result;
}

uint64_t sub_100043670(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 72);
  if (v2) {
    return sub_10002F814(v2, a2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100043684(uint64_t a1, unsigned int a2)
{
  if (a2 == -1) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return sub_10002FA40(result, a2) != 0;
  }
  return result;
}

uint64_t sub_1000436C0(uint64_t a1, unsigned int a2)
{
  unsigned int v14 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  if (!a1)
  {
    uint64_t v13 = sub_1000C2EA8(0);
    uint64_t v12 = sub_1000CD350(0);
    uint64_t v9 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    unsigned int v10 = sub_1000D2948(0, 0, &v11);
    nullsub_1(v10);
LABEL_8:
    unsigned int v14 = 1;
    goto LABEL_9;
  }
  uint64_t v13 = sub_1000C2EA8(*(void *)(a1 + 6480));
  uint64_t v12 = sub_1000CD350(*(void *)(a1 + 6488));
  uint64_t v9 = sub_1000C0D40();
  sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
  unsigned int v10 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v11);
  nullsub_1(v10);
  if (*(_DWORD *)(a1 + 8160)) {
    return 1;
  }
  sub_1000C0D2C((void *)(a1 + 6648));
  uint64_t v5 = (int *)sub_1000C0C70();
  if (setjmp(v5))
  {
    *(_DWORD *)(a1 + 8160) = 1;
    goto LABEL_8;
  }
  if (!sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
  {
    if (*(_DWORD *)(a1 + 8160) || (uint64_t v6 = *(void *)(a1 + 72)) == 0)
    {
      unsigned int v14 = 1;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    if (a2 != -1 && sub_10002FA40(v6, a2) && (a2 & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a1 + 6448))
      {
        unsigned int v14 = 7;
        sub_1000C0CD8();
      }
      else if (sub_10002F9F4(*(void *)(a1 + 72), a2))
      {
        uint64_t v7 = *(void *)(a1 + 112);
        if (v7) {
          sub_10004393C(a1, v7, a2);
        }
        if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 4728))
        {
          uint64_t v8 = *(void *)(a1 + 104);
          if (v8) {
            sub_10004393C(a1, v8, a2);
          }
        }
        sub_100043A0C(a1);
        sub_10002F5A4(*(void *)(a1 + 72), a2);
        *(void *)(a1 + 5512) = 0;
        unsigned int v14 = 0;
        sub_1000C0CD8();
      }
      else
      {
        unsigned int v14 = 17;
        sub_1000C0CD8();
      }
      goto LABEL_9;
    }
  }
  unsigned int v14 = 4;
  sub_1000C0CD8();
LABEL_9:
  sub_100051144(v14);
  sub_1000D2948(v10, v11, 0);
  sub_1000C0D2C(v9);
  sub_1000CD350(v12);
  sub_1000C2EA8(v13);
  return v14;
}

uint64_t sub_10004393C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
    uint64_t v6 = (uint64_t *)(a1 + 808);
  }
  else {
    uint64_t v6 = (uint64_t *)(a1 + 800);
  }
  uint64_t v7 = *v6;
  uint64_t v8 = sub_10002FA40(*(void *)(a1 + 72), a3);
  uint64_t result = sub_1000396A8(a2);
  if (*(void *)(a1 + 5456) == v8) {
    *(void *)(a1 + 5456) = 0;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 1320);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = (int *)(a1 + 1324);
    while (1)
    {
      int v12 = *v11++;
      if (v12 == a3) {
        break;
      }
      if (!--v10) {
        return result;
      }
    }
    *(_DWORD *)(a1 + 1320) = 0;
    *(_DWORD *)(v7 + 4) = 0;
    *(_DWORD *)(v7 + 140) = 0;
  }
  return result;
}

uint64_t sub_100043A0C(uint64_t result)
{
  if (*(_DWORD *)(result + 5500))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 104);
    if (!v2 || *(void *)(result + 5512) == *(void *)(result + 112))
    {
      uint64_t v3 = *(void *)(result + 808);
      if (!*(void *)(result + 5464)) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = *(void *)(result + 800);
      if (!*(void *)(result + 5464))
      {
LABEL_5:
        LODWORD(v4) = *(_DWORD *)(result + 5472);
LABEL_14:
        if ((int)v4 >= 1)
        {
          *(_DWORD *)(v1 + 5472) = 0;
          *(_DWORD *)(v3 + 4) = 0;
          *(_DWORD *)(v3 + 140) = 0;
        }
        return result;
      }
    }
    if (qword_100101CC0)
    {
      uint64_t v5 = 112;
      if (!*(_DWORD *)(qword_100101CC0 + 1912)) {
        uint64_t v5 = 104;
      }
      uint64_t v2 = *(void *)(result + v5);
    }
    if (*(int *)(result + 5472) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(void *)(*(void *)(v1 + 5464) + 8 * v6);
        sub_1000396A8(v2);
        uint64_t result = sub_10002F85C(*(void *)(v1 + 72), v7);
        *(void *)(*(void *)(v1 + 5464) + 8 * v6++) = 0;
        uint64_t v4 = *(int *)(v1 + 5472);
      }
      while (v6 < v4);
      goto LABEL_14;
    }
  }
  return result;
}

BOOL sub_100043B0C(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)sub_100025D58(a1);
  int v2 = sub_1000CAD00((unint64_t)"_SHADOWIR_");
  return sub_1000CAD44(v1, "_SHADOWIR_", v2, v3) == 0;
}

uint64_t sub_100043B58(uint64_t a1, uint64_t *a2, int a3)
{
  int v3 = a3;
  if (*(_DWORD *)(a1 + 5476) < a3)
  {
    sub_1000C321C(*(void *)(a1 + 5464));
    sub_1000C2F04(8 * v3, v6, v7, v8, v9, v10, v11, v12);
    *(void *)(a1 + 5464) = v13;
    *(_DWORD *)(a1 + 5476) = v3;
  }
  if (v3 < 1)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = v3;
    uint64_t v16 = a2;
    do
    {
      if (sub_10003CE54((_DWORD **)v16, 1))
      {
        v20[0] = 0;
        __sprintf_chk(v20, 0, 0x100uLL, "%s_%d", "_SHADOWIR_", v14);
        uint64_t v17 = sub_1000288A8(*v16, (unsigned __int8 *)v20);
        int v18 = sub_10002F814(*(uint64_t **)(a1 + 72), *v16);
        sub_10002F65C(*(void *)(a1 + 72), v17, v18);
        *(void *)(*(void *)(a1 + 5464) + 8 * (int)v14) = v17;
        a2[v3++] = v17;
        uint64_t v14 = (v14 + 1);
      }
      ++v16;
      --v15;
    }
    while (v15);
  }
  *(_DWORD *)(a1 + 5472) = v14;
  return v14;
}

uint64_t sub_100043CA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  int v3 = sub_10002FA70(v2);
  int v4 = v3;
  if (*(_DWORD *)(a1 + 5476) <= v3)
  {
    int v13 = v3 + 1;
    sub_1000C321C(*(void *)(a1 + 5464));
    uint64_t v14 = sub_1000C33A0(8 * v13);
    *(void *)(a1 + 5464) = v14;
    *(_DWORD *)(a1 + 5476) = v13;
    if (v14) {
      goto LABEL_3;
    }
    return 1;
  }
  if (!*(void *)(a1 + 5464)) {
    return 1;
  }
LABEL_3:
  int v5 = 0;
  if ((v4 & 0x80000000) == 0)
  {
    unsigned int v6 = 0;
    do
    {
      uint64_t v7 = sub_10002FA40(v2, v6);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = (unsigned __int8 *)sub_100025D58(v7);
        int v10 = sub_1000CAD00((unint64_t)"_SHADOWIR_");
        if (!sub_1000CAD44(v9, "_SHADOWIR_", v10, v11)) {
          *(void *)(*(void *)(a1 + 5464) + 8 * v5++) = v8;
        }
      }
      ++v6;
    }
    while (v4 + 1 != v6);
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 5472) = v5;
  return result;
}

uint64_t sub_100043DB8(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  unsigned int v15 = 0;
  int v14 = -1;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    uint64_t v13 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v12 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v9 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v10 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v11);
    nullsub_1(v10);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v7 = (int *)sub_1000C0C70();
    if (!setjmp(v7))
    {
      if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
      {
        unsigned int v15 = 4;
        sub_1000C0CD8();
      }
      else if (*(_DWORD *)(a1 + 8160))
      {
        unsigned int v15 = 1;
        sub_1000C0CD8();
      }
      else
      {
        *a3 = -1;
        uint64_t v8 = *(void *)(a1 + 72);
        if (v8) {
          int v14 = sub_10002FA7C(v8, a2);
        }
        if (v14 != -1) {
          *a3 = v14;
        }
        unsigned int v15 = 0;
        sub_1000C0CD8();
      }
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 8160) = 1;
  }
  else
  {
    uint64_t v13 = sub_1000C2EA8(0);
    uint64_t v12 = sub_1000CD350(0);
    uint64_t v9 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    int v10 = sub_1000D2948(0, 0, &v11);
    nullsub_1(v10);
  }
  unsigned int v15 = 1;
LABEL_9:
  sub_100051144(v15);
  sub_1000D2948(v10, v11, 0);
  sub_1000C0D2C(v9);
  sub_1000CD350(v12);
  sub_1000C2EA8(v13);
  return v15;
}

uint64_t sub_100043FC4(uint64_t a1, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, _DWORD *a11)
{
  int v19 = sub_1000521B8(a5);
  if (!a2) {
    return 4;
  }
  int v20 = v19;
  if (!sub_1000CAED0(a2, "_CONSTRAINT_CLASS_START")
    || !sub_1000CAED0(a2, "_CONSTRAINT_CLASS_END")
    || !*a2)
  {
    return 4;
  }
  sub_1000CAD1C("_ ", *a2);
  uint64_t result = 4;
  if ((a4 & 0x80000000) == 0 && a3 <= 0x2000000 && a11)
  {
    uint64_t v22 = *(void *)(a1 + 80);
    if (v22)
    {
      if (*(_DWORD *)(a1 + 6448))
      {
        return 7;
      }
      else
      {
        if (a8)
        {
          int v23 = sub_100032238(v22, a2, a4, v20, a9, a10);
        }
        else
        {
          int v24 = sub_1000521B8(a5);
          int v23 = sub_100031F74(v22, a2, a3, a4, v24, a6, a7);
        }
        int v25 = v23;
        uint64_t result = 0;
        *a11 = v25;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_100044110(uint64_t a1, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, _DWORD *a8)
{
  unsigned int v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  if (a1)
  {
    uint64_t v23 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v22 = sub_1000CD350(*(void *)(a1 + 6488));
    int v19 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v20 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v21);
    nullsub_1(v20);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v17 = (int *)sub_1000C0C70();
    if (setjmp(v17))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (!sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v18 = 1;
        goto LABEL_14;
      }
      if (a2 && *a2 && !sub_1000CAD1C("_ ", *a2))
      {
        unsigned int v24 = sub_100043FC4(a1, a2, a3, a4, a5, a6, a7, 0, 0, -1, a8);
        int v18 = v24;
        goto LABEL_14;
      }
    }
    int v18 = 4;
LABEL_14:
    unsigned int v24 = v18;
    sub_1000C0CD8();
    goto LABEL_9;
  }
  uint64_t v23 = sub_1000C2EA8(0);
  uint64_t v22 = sub_1000CD350(0);
  int v19 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  int v20 = sub_1000D2948(0, 0, &v21);
  nullsub_1(v20);
LABEL_8:
  unsigned int v24 = 1;
LABEL_9:
  sub_100051144(v24);
  sub_1000D2948(v20, v21, 0);
  sub_1000C0D2C(v19);
  sub_1000CD350(v22);
  sub_1000C2EA8(v23);
  return v24;
}

uint64_t sub_10004434C(uint64_t a1, unsigned __int8 *a2, int *a3, _DWORD *a4)
{
  if (!a2) {
    return 4;
  }
  if (!*a2) {
    return 4;
  }
  if (!sub_1000CAED0(a2, "_CONSTRAINT_CLASS_START")
    || !sub_1000CAED0(a2, "_CONSTRAINT_CLASS_END"))
  {
    int v8 = 1;
    goto LABEL_11;
  }
  int v8 = *a2;
  if (!*a2)
  {
LABEL_11:
    uint64_t result = 0;
    *a3 = v8;
    return result;
  }
  sub_1000CAD1C("_ ", v8);
  uint64_t v9 = *(void *)(a1 + 80);
  if (v9)
  {
    int v8 = sub_100031AC0(v9, a2, a4) != -1;
    goto LABEL_11;
  }
  return 1;
}

uint64_t sub_100044434(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  unsigned int v15 = 0;
  int v14 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    uint64_t v13 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v12 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v9 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v10 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v11);
    nullsub_1(v10);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v7 = (int *)sub_1000C0C70();
    if (!setjmp(v7))
    {
      if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
      {
        int v8 = 4;
      }
      else if (*(_DWORD *)(a1 + 8160))
      {
        int v8 = 1;
      }
      else
      {
        unsigned int v15 = sub_10004434C(a1, a2, a3, &v14);
        int v8 = v15;
      }
      unsigned int v15 = v8;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 8160) = 1;
  }
  else
  {
    uint64_t v13 = sub_1000C2EA8(0);
    uint64_t v12 = sub_1000CD350(0);
    uint64_t v9 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    int v10 = sub_1000D2948(0, 0, &v11);
    nullsub_1(v10);
  }
  unsigned int v15 = 1;
LABEL_9:
  sub_100051144(v15);
  sub_1000D2948(v10, v11, 0);
  sub_1000C0D2C(v9);
  sub_1000CD350(v12);
  sub_1000C2EA8(v13);
  return v15;
}

uint64_t sub_100044614(uint64_t a1, _DWORD *a2)
{
  unsigned int v14 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  if (!a1)
  {
    uint64_t v13 = sub_1000C2EA8(0);
    uint64_t v12 = sub_1000CD350(0);
    uint64_t v9 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    int v10 = sub_1000D2948(0, 0, &v11);
    nullsub_1(v10);
LABEL_8:
    unsigned int v14 = 1;
    goto LABEL_9;
  }
  uint64_t v13 = sub_1000C2EA8(*(void *)(a1 + 6480));
  uint64_t v12 = sub_1000CD350(*(void *)(a1 + 6488));
  uint64_t v9 = sub_1000C0D40();
  sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
  int v10 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v11);
  nullsub_1(v10);
  if (*(_DWORD *)(a1 + 8160)) {
    return 1;
  }
  sub_1000C0D2C((void *)(a1 + 6648));
  int v5 = (int *)sub_1000C0C70();
  if (setjmp(v5))
  {
    *(_DWORD *)(a1 + 8160) = 1;
    goto LABEL_8;
  }
  if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
  {
    int v6 = 4;
  }
  else if (*(_DWORD *)(a1 + 8160))
  {
    int v6 = 1;
  }
  else
  {
    if (a2) {
      *a2 = 0;
    }
    uint64_t v7 = *(void *)(a1 + 80);
    if (!v7)
    {
      unsigned int v14 = 0;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 6448))
    {
      int v6 = 7;
    }
    else
    {
      int v8 = sub_100033790(v7);
      if (a2) {
        *a2 = v8;
      }
      int v6 = v14;
    }
  }
  unsigned int v14 = v6;
  sub_1000C0CD8();
LABEL_9:
  sub_100051144(v14);
  sub_1000D2948(v10, v11, 0);
  sub_1000C0D2C(v9);
  sub_1000CD350(v12);
  sub_1000C2EA8(v13);
  return v14;
}

uint64_t sub_100044810(uint64_t a1, unsigned __int8 *a2, int a3, unsigned int *a4, __int16 *a5, int a6, int a7, _DWORD *a8)
{
  int v47 = a7;
  if (a8) {
    *a8 = 0;
  }
  int v46 = 0;
  if (!a2 || !*a2) {
    return 4;
  }
  if (sub_1000CAED0(a2, "_CONSTRAINT_CLASS_START")
    && sub_1000CAED0(a2, "_CONSTRAINT_CLASS_END"))
  {
    if (!*a2) {
      return 4;
    }
    sub_1000CAD1C("_ ", *a2);
    uint64_t v22 = *(void *)(a1 + 80);
    if (!v22) {
      return 1;
    }
    if (sub_100031AC0(v22, a2, &v46) == -1 || v46) {
      return 4;
    }
  }
  if (a3 > 0)
  {
    int v44 = a6;
    int v25 = *(uint64_t **)(a1 + 8);
    uint64_t v26 = a3;
    uint64_t v27 = a4;
    while (1)
    {
      unsigned int v28 = *v27++;
      if (!sub_1000B5584(v25, v28)) {
        return 4;
      }
      if (!--v26)
      {
        int v45 = a3;
        uint64_t v43 = 2 * a3;
        uint64_t v36 = (__int16 *)sub_1000CD3E8(v43, v29, v30, v31, v32, v33, v34, v35);
        uint64_t v37 = 0;
        do
        {
          int v38 = sub_1000B5A58((uint64_t)v25, a4[v37]);
          if (v38 == 0xFFFF)
          {
            uint64_t v39 = sub_100051288(a1, a4[v37], 0);
            if (v39)
            {
              uint64_t v23 = v39;
              int v42 = 0;
              uint64_t v40 = v43;
              goto LABEL_31;
            }
            LOWORD(v38) = sub_1000B5A58((uint64_t)v25, a4[v37]);
          }
          v36[v37++] = v38;
        }
        while (a3 != v37);
        a6 = v44;
        uint64_t v40 = 2 * a3;
        if (sub_1000324F4(*(void *)(a1 + 80), a2, a5, (unsigned int *)&v47)) {
          goto LABEL_23;
        }
        goto LABEL_28;
      }
    }
  }
  int v45 = a3;
  uint64_t v40 = 2 * a3;
  uint64_t v36 = (__int16 *)sub_1000CD3E8(v40, v15, v16, v17, v18, v19, v20, v21);
  if (sub_1000324F4(*(void *)(a1 + 80), a2, a5, (unsigned int *)&v47))
  {
LABEL_23:
    if (a6 >= 255) {
      int v41 = 255;
    }
    else {
      int v41 = a6;
    }
    int v42 = sub_10003287C(*(void *)(a1 + 80), a2, v36, v45, v41 & ~(v41 >> 31), v47);
    uint64_t v23 = 0;
  }
  else
  {
LABEL_28:
    uint64_t v23 = 0;
    int v42 = 0;
  }
LABEL_31:
  sub_1000CD4D0(v36, v40);
  *a8 = v42;
  return v23;
}

uint64_t sub_100044A4C(unint64_t a1, unsigned __int8 *a2, __int16 *a3, int a4, int a5, int a6, int a7, _DWORD *a8)
{
  unint64_t v15 = a1;
  uint64_t v193 = 0;
  *a8 = 0;
  unsigned int v16 = sub_100031BE8(*(void *)(a1 + 80), a2);
  if (!sub_1000339C4(*(void *)(v15 + 80), v16, &v193)) {
    return 4;
  }
  unsigned int v24 = (unsigned int *)sub_1000CD3E8(400, v17, v18, v19, v20, v21, v22, v23);
  if (!v24) {
    return 2;
  }
  uint64_t v27 = v24;
  int v28 = v193;
  if ((v193 - 5) < 7)
  {
    unsigned int v174 = v193 - 5;
    int v169 = a6;
    int v167 = a7;
    v196[0] = a4;
    *a8 = 0;
    int v29 = sub_1000CED6C((unint64_t)a3);
    uint64_t v177 = 2 * (v29 + 1);
    uint64_t v37 = (__int16 *)sub_1000CD3E8(v177, v30, v31, v32, v33, v34, v35, v36);
    int v38 = v37;
    unsigned int v189 = v28;
    int v168 = v29;
    if ((v28 & 0xFFFFFFFE) == 0xA)
    {
      sub_1000CED88(v37, a3, v29 + 2);
      int v172 = a3;
      unsigned __int8 v170 = a5;
      signed int v176 = a8;
      uint64_t v178 = v27;
      int v195 = 0;
      if (!a2) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_1000D0C34(a3, v29 + 1, v37);
      int v172 = a3;
      unsigned __int8 v170 = a5;
      signed int v176 = a8;
      uint64_t v178 = v27;
      int v195 = 0;
      if (!a2) {
        goto LABEL_26;
      }
    }
    if (*a2)
    {
      if (sub_1000CAED0(a2, "_CONSTRAINT_CLASS_START"))
      {
        if (sub_1000CAED0(a2, "_CONSTRAINT_CLASS_END"))
        {
          if (*a2)
          {
            sub_1000CAD1C("_ ", *a2);
            uint64_t v62 = *(void *)(v15 + 80);
            if (v62) {
              sub_100031AC0(v62, a2, &v195);
            }
          }
        }
      }
    }
LABEL_26:
    uint64_t v179 = a2;
    uint64_t v63 = 100;
    int v64 = v28;
    while (1)
    {
      uint64_t v65 = 4 * v63;
      int v66 = (_DWORD *)sub_1000CD3E8(v65, v39, v40, v41, v42, v43, v44, v45);
      uint64_t v74 = (_DWORD *)sub_1000CD3E8(v65, v67, v68, v69, v70, v71, v72, v73);
      long long v82 = (char *)sub_1000CD3E8(v65, v75, v76, v77, v78, v79, v80, v81);
      uint64_t v83 = sub_1000B797C(*(uint64_t **)(v15 + 8), v64, (unint64_t)v38, 0, 1u, v63, v66, v74, v82, 0, 0);
      if ((int)v83 <= 0)
      {
        sub_1000CD4D0(v82, 4 * v63);
        sub_1000CD4D0(v74, 4 * v63);
        sub_1000CD4D0(v66, 4 * v63);
        sub_1000CD4D0(v38, v177);
        uint64_t v60 = 0;
        *signed int v176 = 0;
        goto LABEL_82;
      }
      uint64_t v91 = v83;
      if (v83 <= v63) {
        break;
      }
      sub_1000CD4D0(v82, 4 * v63);
      sub_1000CD4D0(v74, 4 * v63);
      sub_1000CD4D0(v66, 4 * v63);
      uint64_t v63 = v91;
    }
    uint64_t v187 = v38;
    uint64_t v166 = 2 * v63;
    int v171 = (void *)sub_1000CD3E8(v166, v84, v85, v86, v87, v88, v89, v90);
    unint64_t v98 = 0;
    uint64_t v99 = 4 * v91;
    uint64_t v188 = v15;
    do
    {
      int v194 = -1;
      uint64_t v100 = v66[v98 / 4];
      if (v100 == -1)
      {
        int v101 = v64;
        int v102 = *(_DWORD *)&v82[v98];
        uint64_t v191 = 2 * (v102 + 1);
        long long v103 = (_WORD *)sub_1000CD3E8(v191, v100, v92, v93, v94, v95, v96, v97);
        sub_1000CED88(v103, &v187[v74[v98 / 4]], v102 + 1);
        if (v101 == 11)
        {
          int v104 = sub_1000B51A0(*(uint64_t **)(v188 + 8));
          int v105 = sub_1000B51E0(*(uint64_t **)(v188 + 8));
          if (v105 <= v102) {
            int v113 = v102;
          }
          else {
            int v113 = v105;
          }
          int v114 = v113 + 1;
          if (v104 <= v102) {
            int v115 = v102;
          }
          else {
            int v115 = v104;
          }
          int v116 = v115 + 1;
          uint64_t v182 = 2 * (v115 + 1);
          unsigned int v117 = (_WORD *)sub_1000CD3E8(v182, v106, v107, v108, v109, v110, v111, v112);
          uint64_t v180 = 2 * v114;
          unsigned int v125 = (_WORD *)sub_1000CD3E8(v180, v118, v119, v120, v121, v122, v123, v124);
          uint64_t v184 = v103;
          int v126 = v116;
          uint64_t v127 = v125;
          if (sub_1000D9870((uint64_t)v103, (unint64_t)v117, v126, v125, v114))
          {
            unint64_t v15 = v188;
            uint64_t v60 = sub_10005149C(v188, v117, v127, &v194);
            int v128 = v127;
            uint64_t v99 = 4 * v91;
          }
          else
          {
            uint64_t v60 = 4;
            int v128 = v127;
            uint64_t v99 = 4 * v91;
            unint64_t v15 = v188;
          }
          sub_1000CD4D0(v128, v180);
          sub_1000CD4D0(v117, v182);
          sub_1000CD4D0(v184, v191);
          v66[v98 / 4] = v194;
          int v64 = v189;
          if (v60)
          {
LABEL_48:
            sub_1000CD4D0(v171, v166);
            sub_1000CD4D0(v82, v65);
            sub_1000CD4D0(v74, v65);
            sub_1000CD4D0(v66, v65);
            sub_1000CD4D0(v187, v177);
            goto LABEL_82;
          }
        }
        else
        {
          uint64_t v60 = sub_10005149C(v188, v103, 0, &v194);
          uint64_t v99 = 4 * v91;
          uint64_t v129 = v103;
          unint64_t v15 = v188;
          sub_1000CD4D0(v129, v191);
          v66[v98 / 4] = v194;
          int v64 = v189;
          if (v60) {
            goto LABEL_48;
          }
        }
      }
      else
      {
        int v194 = v66[v98 / 4];
        uint64_t v60 = sub_100051288(v15, v100, 0);
        if (v60) {
          goto LABEL_48;
        }
      }
      v98 += 4;
    }
    while (v99 != v98);
    uint64_t v130 = v187;
    if (v174 > 2)
    {
LABEL_55:
      uint64_t v134 = 0;
      if ((int)v91 <= 1) {
        uint64_t v135 = 1;
      }
      else {
        uint64_t v135 = v91;
      }
      do
      {
        *((_WORD *)v171 + v134) = sub_1000B5A58(*(void *)(v15 + 8), v66[v134]);
        ++v134;
      }
      while (v135 != v134);
      if (sub_1000324F4(*(void *)(v15 + 80), v179, v172, v196))
      {
        int v136 = sub_10003287C(*(void *)(v15 + 80), v179, (__int16 *)v171, v91, v170, v196[0]);
        int v144 = v136;
        if (v169 && v136)
        {
          int v145 = 20 * (v91 + 1);
          uint64_t v181 = 4 * v145;
          uint64_t v146 = (unsigned int *)sub_1000CD3E8(v181, v137, v138, v139, v140, v141, v142, v143);
          uint64_t v175 = 2 * ((int)v91 + 1);
          int v186 = (__int16 *)sub_1000CD3E8(v175, v147, v148, v149, v150, v151, v152, v153);
          int v185 = sub_1000BAE04(*(void *)(v15 + 8), v189, (unint64_t)v187, v91, v66, (uint64_t)v74, v145, v146);
          if (v185 >= 1)
          {
            int v154 = 0;
            if (v167 >= 255) {
              int v155 = 255;
            }
            else {
              int v155 = v167;
            }
            unsigned int v183 = (v155 & ~(v155 >> 31));
            int v173 = v146;
            do
            {
              int v190 = v154;
              uint64_t v157 = 0;
              uint64_t v158 = -1;
              uint64_t v192 = v146;
              int v159 = v146;
              do
              {
                uint64_t v160 = v157;
                if (++v158 > (int)v91) {
                  break;
                }
                int v161 = *v159++;
                ++v157;
              }
              while (v161 != -1);
              if (v158)
              {
                int v162 = v192;
                uint64_t v163 = v186;
                do
                {
                  unsigned int v164 = *v162++;
                  *v163++ = sub_1000B5A58(*(void *)(v15 + 8), v164);
                  --v160;
                }
                while (v160);
              }
              int v156 = sub_10003287C(*(void *)(v15 + 80), v179, v186, v158, v183, v196[0]);
              uint64_t v146 = &v192[(v158 + 1)];
              int v154 = v190 + 1;
            }
            while (v190 + 1 != v185);
            int v144 = v156;
            uint64_t v130 = v187;
            uint64_t v146 = v173;
          }
          sub_1000CD4D0(v186, v175);
          sub_1000CD4D0(v146, v181);
        }
      }
      else
      {
        int v144 = 0;
      }
      sub_1000CD4D0(v171, v166);
      sub_1000CD4D0(v82, v65);
      sub_1000CD4D0(v74, v65);
      sub_1000CD4D0(v66, v65);
      sub_1000CD4D0(v130, v177);
      uint64_t v60 = 0;
      if (v144) {
        *signed int v176 = 1;
      }
    }
    else
    {
      uint64_t v131 = 0;
      while (1)
      {
        unsigned int v132 = sub_1000BAE20(*(uint64_t **)(v15 + 8), v66[v131]);
        v66[v131] = v132;
        uint64_t v133 = sub_100051288(v15, v132, 0);
        if (v133) {
          break;
        }
        if (v91 == ++v131) {
          goto LABEL_55;
        }
      }
      uint64_t v60 = v133;
      sub_1000CD4D0(v171, v166);
      sub_1000CD4D0(v82, v65);
      sub_1000CD4D0(v74, v65);
      sub_1000CD4D0(v66, v65);
      sub_1000CD4D0(v187, 2 * (v168 + 2));
    }
LABEL_82:
    uint64_t v27 = v178;
    goto LABEL_83;
  }
  if (v193 > 4)
  {
    uint64_t v60 = 0;
LABEL_83:
    LODWORD(v46) = 100;
LABEL_84:
    sub_1000CD4D0(v27, 4 * (int)v46);
    return v60;
  }
  LODWORD(v46) = 100;
  uint64_t v47 = sub_1000515A0(v15, a3, 100, v24, (unsigned int *)&v193 + 1, 1, v25, v26);
  int v48 = HIDWORD(v193);
  if (SHIDWORD(v193) < 101)
  {
    uint64_t v60 = v47;
    if (v47 | HIDWORD(v193)) {
      goto LABEL_14;
    }
    return 4;
  }
  sub_1000CD4D0(v27, 400);
  uint64_t v46 = SHIDWORD(v193);
  uint64_t v56 = (unsigned int *)sub_1000CD3E8(4 * SHIDWORD(v193), v49, v50, v51, v52, v53, v54, v55);
  if (v56)
  {
    uint64_t v27 = v56;
    unsigned int v59 = sub_1000515A0(v15, a3, v46, v56, (unsigned int *)&v193 + 1, 1, v57, v58);
    int v48 = HIDWORD(v193);
    if (HIDWORD(v193) == v46) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 1;
    }
    if (v60 | HIDWORD(v193))
    {
LABEL_14:
      if (!v60)
      {
        unsigned int v61 = sub_100044810(v15, a2, v48, v27, a3, a5, a4, a8);
        if (*a8) {
          uint64_t v60 = v61;
        }
        else {
          uint64_t v60 = 1;
        }
      }
      goto LABEL_84;
    }
    return 4;
  }
  return 2;
}

uint64_t sub_100045270(unint64_t a1, unsigned __int8 *a2, __int16 *a3, int a4, int a5, int a6, int a7, _DWORD *a8)
{
  unsigned int v26 = 0;
  int v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  if (a1)
  {
    uint64_t v23 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v22 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v19 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v20 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v21);
    nullsub_1(v20);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v17 = (int *)sub_1000C0C70();
    if (setjmp(v17))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic")) {
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 8160)) {
      goto LABEL_13;
    }
    if (a8) {
      *a8 = 0;
    }
    if (!a2 || !a3 || !*a2 || !a8 || !*a3) {
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 6448))
    {
      int v18 = 7;
      goto LABEL_14;
    }
    if (!sub_1000CAED0(a2, "_CONSTRAINT_CLASS_START")
      || !sub_1000CAED0(a2, "_CONSTRAINT_CLASS_END"))
    {
      goto LABEL_11;
    }
    if (!*(void *)(a1 + 80))
    {
LABEL_13:
      int v18 = 1;
      goto LABEL_14;
    }
    int v25 = 0;
    unsigned int v26 = sub_10004434C(a1, a2, &v25, &v24);
    if (!v26)
    {
      if (!v25 || v24)
      {
LABEL_11:
        int v18 = 4;
LABEL_14:
        unsigned int v26 = v18;
        sub_1000C0CD8();
        goto LABEL_9;
      }
      unsigned int v26 = sub_100044A4C(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    int v18 = v26;
    goto LABEL_14;
  }
  uint64_t v23 = sub_1000C2EA8(0);
  uint64_t v22 = sub_1000CD350(0);
  uint64_t v19 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v20 = sub_1000D2948(0, 0, &v21);
  nullsub_1(v20);
LABEL_8:
  unsigned int v26 = 1;
LABEL_9:
  sub_100051144(v26);
  sub_1000D2948(v20, v21, 0);
  sub_1000C0D2C(v19);
  sub_1000CD350(v22);
  sub_1000C2EA8(v23);
  return v26;
}

uint64_t sub_10004551C(unint64_t a1, unsigned __int8 *a2, char *a3, __int16 *a4, int a5, int a6, int a7, int a8, _DWORD *a9)
{
  unsigned int v29 = 0;
  int v27 = 0;
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  if (a1)
  {
    uint64_t v26 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v25 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v22 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v23 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v24);
    nullsub_1(v23);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    int v18 = (int *)sub_1000C0C70();
    if (setjmp(v18))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic")) {
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 8160)) {
      goto LABEL_13;
    }
    if (a9) {
      *a9 = 0;
    }
    if (!a2) {
      goto LABEL_11;
    }
    if (!a3) {
      goto LABEL_11;
    }
    if (!*a2) {
      goto LABEL_11;
    }
    int v20 = sub_1000CED6C((unint64_t)a3);
    if (!a9 || !v20) {
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 6448))
    {
      int v19 = 7;
      goto LABEL_14;
    }
    if (!sub_1000CAED0(a2, "_CONSTRAINT_CLASS_START")
      || !sub_1000CAED0(a2, "_CONSTRAINT_CLASS_END"))
    {
      goto LABEL_11;
    }
    if (!*(void *)(a1 + 80))
    {
LABEL_13:
      int v19 = 1;
      goto LABEL_14;
    }
    int v28 = 0;
    unsigned int v29 = sub_10004434C(a1, a2, &v28, &v27);
    if (!v29)
    {
      if (!v28 || v27)
      {
LABEL_11:
        int v19 = 4;
LABEL_14:
        unsigned int v29 = v19;
        sub_1000C0CD8();
        goto LABEL_9;
      }
      if (a4 && sub_1000CED6C((unint64_t)a4)) {
        unsigned int v21 = sub_100045810(a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      else {
        unsigned int v21 = sub_100044A4C(a1, a2, (__int16 *)a3, a5, a6, a7, a8, a9);
      }
      unsigned int v29 = v21;
    }
    int v19 = v29;
    goto LABEL_14;
  }
  uint64_t v26 = sub_1000C2EA8(0);
  uint64_t v25 = sub_1000CD350(0);
  uint64_t v22 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v23 = sub_1000D2948(0, 0, &v24);
  nullsub_1(v23);
LABEL_8:
  unsigned int v29 = 1;
LABEL_9:
  sub_100051144(v29);
  sub_1000D2948(v23, v24, 0);
  sub_1000C0D2C(v22);
  sub_1000CD350(v25);
  sub_1000C2EA8(v26);
  return v29;
}

uint64_t sub_100045810(unint64_t a1, unsigned __int8 *a2, char *a3, __int16 *a4, int a5, int a6, int a7, int a8, _DWORD *a9)
{
  *a9 = 0;
  int v16 = sub_1000CF240(a3, asc_1000F6510);
  if (sub_1000CF240((char *)a4, asc_1000F6510) == v16)
  {
    uint64_t v54 = a2;
    int v55 = a5;
    int v56 = a6;
    int v61 = 0;
    uint64_t v24 = (unint64_t *)sub_1000CD3E8(8 * v16, v17, v18, v19, v20, v21, v22, v23);
    unint64_t v32 = sub_1000CD3E8(8 * v16, v25, v26, v27, v28, v29, v30, v31);
    sub_100046A24((__int16 *)a3, v16, (uint64_t)v24);
    int v33 = sub_100046A24(a4, v16, v32);
    uint64_t v41 = (unsigned int *)sub_1000CD3E8(4 * v33, v34, v35, v36, v37, v38, v39, v40);
    uint64_t v42 = (__int16 *)a3;
    uint64_t v58 = (uint64_t *)v24;
    uint64_t v60 = 8 * v16;
    uint64_t v57 = (uint64_t *)v32;
    int v43 = 0;
    if (v33 < 1)
    {
LABEL_6:
      uint64_t v46 = sub_100044810(a1, v54, v43, v41, v42, v56, v55, a9);
    }
    else
    {
      uint64_t v44 = (_WORD **)v32;
      uint64_t v45 = v33;
      while (1)
      {
        uint64_t v46 = sub_100051898(a1, *v24, *v44, v33 - v43, (uint64_t)&v41[v43], &v61);
        if (v46) {
          break;
        }
        v43 += v61;
        ++v44;
        ++v24;
        if (!--v45) {
          goto LABEL_6;
        }
      }
    }
    uint64_t v47 = v46;
    sub_1000CD4D0(v41, 4 * v33);
    if (v16 >= 1)
    {
      uint64_t v48 = v16;
      uint64_t v49 = v58;
      uint64_t v50 = v57;
      do
      {
        uint64_t v51 = *v49++;
        sub_1000C321C(v51);
        uint64_t v52 = *v50++;
        sub_1000C321C(v52);
        --v48;
      }
      while (v48);
    }
    sub_1000CD4D0(v57, v60);
    sub_1000CD4D0(v58, v60);
    return v47;
  }
  else
  {
    return sub_100044A4C(a1, a2, (__int16 *)a3, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_100045A28(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  unsigned int v15 = 0;
  uint64_t v14 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  if (a1)
  {
    uint64_t v14 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v13 = sub_1000CD350(*(void *)(a1 + 6488));
    int v10 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v11 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v12);
    nullsub_1(v11);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v7 = (int *)sub_1000C0C70();
    if (setjmp(v7))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
LABEL_11:
      int v8 = 4;
LABEL_16:
      unsigned int v15 = v8;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    if (!*(_DWORD *)(a1 + 8160))
    {
      if (*(_DWORD *)(a1 + 6448))
      {
        int v8 = 7;
        goto LABEL_16;
      }
      if (!a2
        || !sub_1000CAED0(a2, "_CONSTRAINT_CLASS_START")
        || !sub_1000CAED0(a2, "_CONSTRAINT_CLASS_END")
        || !*a2)
      {
        goto LABEL_11;
      }
      uint64_t v9 = *(void *)(a1 + 80);
      if (v9)
      {
        *a3 = sub_100033204(v9, a2);
        int v8 = v15;
        goto LABEL_16;
      }
    }
    int v8 = 1;
    goto LABEL_16;
  }
  uint64_t v14 = sub_1000C2EA8(0);
  uint64_t v13 = sub_1000CD350(0);
  int v10 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v11 = sub_1000D2948(0, 0, &v12);
  nullsub_1(v11);
LABEL_8:
  unsigned int v15 = 1;
LABEL_9:
  sub_100051144(v15);
  sub_1000D2948(v11, v12, 0);
  sub_1000C0D2C(v10);
  sub_1000CD350(v13);
  sub_1000C2EA8(v14);
  return v15;
}

uint64_t sub_100045C44(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, _WORD *a5)
{
  unsigned int v20 = 0;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  if (a1)
  {
    uint64_t v19 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v18 = sub_1000CD350(*(void *)(a1 + 6488));
    unsigned int v15 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v16 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v17);
    nullsub_1(v16);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v11 = (int *)sub_1000C0C70();
    if (setjmp(v11))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic")) {
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 8160))
    {
      int v12 = 1;
      goto LABEL_14;
    }
    if (a4 < 1 || !a5 || !a2 || !*a2 || a3 == -1)
    {
LABEL_11:
      int v12 = 4;
LABEL_14:
      unsigned int v20 = v12;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    int v13 = sub_100037188(*(void *)(a1 + 80), a2, a3, a4, a5);
    if (v13 >= a4)
    {
      int v14 = 10;
    }
    else
    {
      if (v13 != -1)
      {
LABEL_25:
        int v12 = v20;
        goto LABEL_14;
      }
      int v14 = 4;
    }
    unsigned int v20 = v14;
    goto LABEL_25;
  }
  uint64_t v19 = sub_1000C2EA8(0);
  uint64_t v18 = sub_1000CD350(0);
  unsigned int v15 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  int v16 = sub_1000D2948(0, 0, &v17);
  nullsub_1(v16);
LABEL_8:
  unsigned int v20 = 1;
LABEL_9:
  sub_100051144(v20);
  sub_1000D2948(v16, v17, 0);
  sub_1000C0D2C(v15);
  sub_1000CD350(v18);
  sub_1000C2EA8(v19);
  return v20;
}

uint64_t sub_100045E74(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5, _DWORD *a6)
{
  unsigned int v20 = 0;
  int v19 = a4;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  uint64_t v16 = 0;
  if (a1)
  {
    uint64_t v18 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v17 = sub_1000CD350(*(void *)(a1 + 6488));
    int v14 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    unsigned int v15 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v16);
    nullsub_1(v15);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    int v12 = (int *)sub_1000C0C70();
    if (setjmp(v12))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (!sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160)) {
        goto LABEL_13;
      }
      if (*(_DWORD *)(a1 + 6448))
      {
        unsigned int v20 = 7;
        sub_1000C0CD8();
        goto LABEL_9;
      }
      if (a3 < 0 || v19 < 0) {
        goto LABEL_11;
      }
      if (!*(void *)(a1 + 80) || !*(void *)(a1 + 72))
      {
LABEL_13:
        unsigned int v20 = 1;
        sub_1000C0CD8();
        goto LABEL_9;
      }
      if (a2
        && *a2
        && (int)sub_1000CAD00((unint64_t)a2) < 20
        && sub_10002FA7C(*(void *)(a1 + 72), a2) == -1)
      {
        if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1928)) {
          v19 += a3;
        }
        uint64_t v13 = sub_100027004(a2, *(void *)(a1 + 80), a3, v19, a5);
        if (v13)
        {
          *a6 = sub_10002F65C(*(void *)(a1 + 72), v13, -1);
          unsigned int v20 = 0;
        }
        else
        {
          unsigned int v20 = 2;
        }
        sub_1000C0CD8();
        goto LABEL_9;
      }
    }
LABEL_11:
    unsigned int v20 = 4;
    sub_1000C0CD8();
    goto LABEL_9;
  }
  uint64_t v18 = sub_1000C2EA8(0);
  uint64_t v17 = sub_1000CD350(0);
  int v14 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  unsigned int v15 = sub_1000D2948(0, 0, &v16);
  nullsub_1(v15);
LABEL_8:
  unsigned int v20 = 1;
LABEL_9:
  sub_100051144(v20);
  sub_1000D2948(v15, v16, 0);
  sub_1000C0D2C(v14);
  sub_1000CD350(v17);
  sub_1000C2EA8(v18);
  return v20;
}

uint64_t sub_100046128(uint64_t a1, unsigned int a2, char *a3, char *a4, unsigned int a5, _DWORD *a6)
{
  unsigned int v26 = 0;
  int v25 = 0;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  if (a1)
  {
    uint64_t v24 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v23 = sub_1000CD350(*(void *)(a1 + 6488));
    unsigned int v20 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v21 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v22);
    nullsub_1(v21);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v13 = (int *)sub_1000C0C70();
    if (setjmp(v13))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (!sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160)) {
        goto LABEL_13;
      }
      *a6 = 0;
      if (a2 == -1) {
        goto LABEL_11;
      }
      if (*(_DWORD *)(a1 + 6448))
      {
        int v14 = 7;
        goto LABEL_14;
      }
      if (!a3
        || !a4
        || !*a3
        || !*a4
        || !sub_1000CAED0(a4, "_CONSTRAINT_CLASS_START")
        || !sub_1000CAED0(a3, "_CONSTRAINT_CLASS_END"))
      {
        goto LABEL_11;
      }
      if (!*(void *)(a1 + 80) || (uint64_t v15 = *(void *)(a1 + 72)) == 0)
      {
LABEL_13:
        int v14 = 1;
        goto LABEL_14;
      }
      if (sub_10002FA40(v15, a2))
      {
        uint64_t v16 = (unsigned int *)sub_10002FA40(*(void *)(a1 + 72), a2);
        if (sub_100025D50(v16) == 3)
        {
          if (!sub_1000CAED0(a3, "_CONSTRAINT_CLASS_START")) {
            a3 = "<s>";
          }
          uint64_t v17 = (unsigned __int8 *)(sub_1000CAED0(a4, "_CONSTRAINT_CLASS_END") ? a4 : "<e>");
          int v18 = sub_100031AC0(*(void *)(a1 + 80), (unsigned __int8 *)a3, &v25);
          unsigned int v19 = sub_100031AC0(*(void *)(a1 + 80), v17, &v25);
          if (v18 != -1 && v19 != -1 && a5 < 0x100)
          {
            *a6 = sub_100027D30((uint64_t)v16, v18, v19, a5);
            int v14 = v26;
            goto LABEL_14;
          }
        }
      }
    }
LABEL_11:
    int v14 = 4;
LABEL_14:
    unsigned int v26 = v14;
    sub_1000C0CD8();
    goto LABEL_9;
  }
  uint64_t v24 = sub_1000C2EA8(0);
  uint64_t v23 = sub_1000CD350(0);
  unsigned int v20 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v21 = sub_1000D2948(0, 0, &v22);
  nullsub_1(v21);
LABEL_8:
  unsigned int v26 = 1;
LABEL_9:
  sub_100051144(v26);
  sub_1000D2948(v21, v22, 0);
  sub_1000C0D2C(v20);
  sub_1000CD350(v23);
  sub_1000C2EA8(v24);
  return v26;
}

uint64_t sub_100046428(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int *a6, void *a7, uint64_t a8, _DWORD *a9)
{
  unsigned int v39 = 4;
  if (!a6) {
    return v39;
  }
  *a6 = -1;
  if ((int)a2 < 1 || !a3 || (int)a4 < 1 || !a5 || !a7) {
    return v39;
  }
  if (*(void *)(a1 + 72))
  {
    *a7 = 0;
    uint64_t v16 = a2;
    uint64_t v17 = a2;
    int v18 = a3;
    while (1)
    {
      unsigned int v20 = *v18++;
      unsigned int v19 = v20;
      if (v20 == -1) {
        break;
      }
      uint64_t v21 = *(void *)(a1 + 72);
      if (!v21) {
        break;
      }
      uint64_t v22 = v16;
      if (!sub_10002FA40(v21, v19)) {
        break;
      }
      uint64_t v16 = v22;
      if (!--v17)
      {
        uint64_t v23 = 0;
        do
        {
          if (!sub_1000B5584(*(uint64_t **)(a1 + 8), *(_DWORD *)(a5 + v23))
            || *(_DWORD *)(a5 + v23) > 0xFFFFFFFA)
          {
            return 4;
          }
          v23 += 4;
        }
        while (4 * a4 != v23);
        uint64_t v38 = 0;
        unsigned int v39 = 0;
        uint64_t v31 = (void *)sub_1000CD3E8(8 * v22, v24, v25, v26, v27, v28, v29, v30);
        for (uint64_t i = 0; i != v22; ++i)
          v31[i] = sub_10002FA40(*(void *)(a1 + 72), a3[i]);
        int v37 = 0;
        bzero(a7, 8 * a4);
        if (sub_1000266E0(v31, a2, a4, a5, &v38, a7, &v37, a8))
        {
          int v33 = *(uint64_t **)(a1 + 72);
          if (v33) {
            int v34 = sub_10002F814(v33, v38);
          }
          else {
            int v34 = -1;
          }
          *a6 = v34;
        }
        sub_1000CD4D0(v31, 8 * v22);
        uint64_t result = 0;
        if (a9) {
          *a9 = v37;
        }
        return result;
      }
    }
    return v39;
  }
  return 1;
}

uint64_t sub_100046618(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int *a6, void *a7, uint64_t a8, uint64_t a9, _DWORD *a10, _DWORD *a11)
{
  unsigned int v70 = 0;
  uint64_t v69 = 0;
  uint64_t v68 = 0;
  uint64_t v67 = 0;
  if (a1)
  {
    uint64_t v69 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v68 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v65 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v66 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v67);
    nullsub_1(v66);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    unsigned int v20 = (int *)sub_1000C0C70();
    if (setjmp(v20))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic")) {
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 8160))
    {
      unsigned int v70 = 1;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    if (!a8 || !a9 || !a10)
    {
LABEL_11:
      unsigned int v70 = 4;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    uint64_t v64 = (int)a4 + 1;
    unint64_t v28 = sub_1000CD3E8(v64, v21, v22, v23, v24, v25, v26, v27);
    uint64_t v29 = a6;
    uint64_t v30 = (void *)v28;
    unsigned int v70 = sub_100046428(a1, a2, a3, a4, a5, v29, a7, v28, a11);
    if (v70)
    {
LABEL_32:
      unsigned int v70 = 0;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    if ((int)a4 < 1)
    {
      LODWORD(v37) = 0;
      uint64_t v35 = a10;
      uint64_t v34 = a9;
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      int v33 = 0;
      uint64_t v35 = a10;
      uint64_t v34 = a9;
      do
      {
        uint64_t v37 = v32;
        if (a4 - 1 == v31 || *((unsigned char *)v30 + v31 + 1))
        {
          uint64_t v36 = 4 * (int)v32;
          *(_DWORD *)(a8 + v36) = v33;
          *(_DWORD *)(a9 + v36) = v31 + 1 - v33;
          a7[(int)v37] = a7[v31];
          uint64_t v37 = (v37 + 1);
          int v33 = v31 + 1;
        }
        uint64_t v32 = v37;
        ++v31;
      }
      while (v64 - 1 != v31);
    }
    *uint64_t v35 = v37;
    if ((int)v37 < (int)a4)
    {
      uint64_t v38 = (int)v37;
      uint64_t v39 = (int)v37;
      unint64_t v40 = (int)a4 - (uint64_t)(int)v37;
      if (v40 < 0x14) {
        goto LABEL_28;
      }
      uint64_t v46 = 4 * (int)v37;
      unint64_t v47 = a8 + 4 * v38;
      unint64_t v48 = a8 + 4 * (int)a4;
      unint64_t v49 = v34 + 4 * v38;
      unint64_t v50 = v34 + 4 * (int)a4;
      uint64_t v51 = &a7[v38];
      uint64_t v52 = &a7[(int)a4];
      BOOL v53 = v47 >= (unint64_t)v52 || (unint64_t)v51 >= v48;
      BOOL v54 = !v53;
      BOOL v55 = v49 >= (unint64_t)v52 || (unint64_t)v51 >= v50;
      BOOL v56 = !v55;
      if (v49 >= v48 || v47 >= v50)
      {
        uint64_t v41 = v39;
        if (!v54 && !v56)
        {
          unint64_t v58 = v40 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v41 = (v40 & 0xFFFFFFFFFFFFFFF8) + v38;
          unsigned int v59 = &a7[v38 + 4];
          uint64_t v60 = v46 + 16;
          int v61 = (_OWORD *)(a8 + v46 + 16);
          uint64_t v62 = (_OWORD *)(v34 + v60);
          *(void *)&long long v63 = -1;
          *((void *)&v63 + 1) = -1;
          do
          {
            *(v61 - 1) = v63;
            _OWORD *v61 = v63;
            *(v62 - 1) = v63;
            _OWORD *v62 = v63;
            *(v59 - 2) = 0uLL;
            *(v59 - 1) = 0uLL;
            *unsigned int v59 = 0uLL;
            v59[1] = 0uLL;
            v59 += 4;
            v61 += 2;
            v62 += 2;
            v58 -= 8;
          }
          while (v58);
          if (v40 == (v40 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_31;
          }
        }
      }
      else
      {
LABEL_28:
        uint64_t v41 = v39;
      }
      uint64_t v42 = (_DWORD *)(a8 + 4 * v41);
      int v43 = (_DWORD *)(v34 + 4 * v41);
      uint64_t v44 = &a7[v41];
      uint64_t v45 = (int)a4 - v41;
      do
      {
        *v42++ = -1;
        *v43++ = -1;
        *v44++ = 0;
        --v45;
      }
      while (v45);
    }
LABEL_31:
    sub_1000CD4D0(v30, v64);
    goto LABEL_32;
  }
  uint64_t v69 = sub_1000C2EA8(0);
  uint64_t v68 = sub_1000CD350(0);
  uint64_t v65 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  int v66 = sub_1000D2948(0, 0, &v67);
  nullsub_1(v66);
LABEL_8:
  unsigned int v70 = 1;
LABEL_9:
  sub_100051144(v70);
  sub_1000D2948(v66, v67, 0);
  sub_1000C0D2C(v65);
  sub_1000CD350(v68);
  sub_1000C2EA8(v69);
  return v70;
}

unint64_t sub_100046A24(__int16 *a1, int a2, uint64_t a3)
{
  uint64_t v32 = 0;
  int v6 = sub_1000CED6C((unint64_t)a1) + 1;
  sub_1000C2F04(2 * v6, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = v14;
  sub_1000CED88(v14, a1, v6);
  uint64_t v16 = sub_1000CF044(v15, asc_1000F6510, &v32);
  if (v16) {
    BOOL v17 = a2 < 1;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    unint64_t v19 = 0;
  }
  else
  {
    int v18 = (__int16 *)v16;
    unint64_t v19 = 0;
    do
    {
      int v20 = sub_1000CED6C((unint64_t)v18) + 1;
      sub_1000C2F04(2 * v20, v21, v22, v23, v24, v25, v26, v27);
      uint64_t v29 = v28;
      sub_1000CED88(v28, v18, v20);
      *(void *)(a3 + 8 * v19++) = v29;
      int v18 = (__int16 *)sub_1000CF044(0, asc_1000F6510, &v32);
      if (v18) {
        BOOL v30 = v19 >= a2;
      }
      else {
        BOOL v30 = 1;
      }
    }
    while (!v30);
  }
  sub_1000C321C((uint64_t)v15);
  return v19;
}

uint64_t sub_100046B24(uint64_t a1, _DWORD *a2)
{
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  if (a1)
  {
    uint64_t v11 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v10 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v7 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v8 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v9);
    nullsub_1(v8);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    int v5 = (int *)sub_1000C0C70();
    if (!setjmp(v5))
    {
      if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
      {
        int v6 = 4;
      }
      else if (*(_DWORD *)(a1 + 8160))
      {
        int v6 = 1;
      }
      else
      {
        *a2 = 0;
        if (*(void *)a1)
        {
          *a2 = sub_10005A738(*(void *)a1);
          unsigned int v12 = 0;
        }
        else
        {
          unsigned int v12 = 1;
        }
        int v6 = v12;
      }
      unsigned int v12 = v6;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 8160) = 1;
  }
  else
  {
    uint64_t v11 = sub_1000C2EA8(0);
    uint64_t v10 = sub_1000CD350(0);
    uint64_t v7 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    uint64_t v8 = sub_1000D2948(0, 0, &v9);
    nullsub_1(v8);
  }
  unsigned int v12 = 1;
LABEL_9:
  sub_100051144(v12);
  sub_1000D2948(v8, v9, 0);
  sub_1000C0D2C(v7);
  sub_1000CD350(v10);
  sub_1000C2EA8(v11);
  return v12;
}

uint64_t sub_100046D0C(uint64_t a1)
{
  unsigned int v10 = 0;
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  if (a1)
  {
    uint64_t v9 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v8 = sub_1000CD350(*(void *)(a1 + 6488));
    int v5 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v6 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v7);
    nullsub_1(v6);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    int v3 = (int *)sub_1000C0C70();
    if (!setjmp(v3))
    {
      if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
      {
        int v4 = 4;
      }
      else if (*(_DWORD *)(a1 + 8160))
      {
        int v4 = 1;
      }
      else
      {
        sub_10005A69C(*(void *)a1);
        if (sub_100004158(*(void *)(a1 + 16))) {
          sub_100004168(*(void *)(a1 + 16), 0);
        }
        int v4 = v10;
      }
      unsigned int v10 = v4;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 8160) = 1;
  }
  else
  {
    uint64_t v9 = sub_1000C2EA8(0);
    uint64_t v8 = sub_1000CD350(0);
    int v5 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    int v6 = sub_1000D2948(0, 0, &v7);
    nullsub_1(v6);
  }
  unsigned int v10 = 1;
LABEL_9:
  sub_100051144(v10);
  sub_1000D2948(v6, v7, 0);
  sub_1000C0D2C(v5);
  sub_1000CD350(v8);
  sub_1000C2EA8(v9);
  return v10;
}

double sub_100046EE0(uint64_t a1)
{
  if (*(void *)(a1 + 192)) {
    goto LABEL_2;
  }
  if (!qword_100101CC0) {
    goto LABEL_2;
  }
  uint64_t v22 = *(void *)(qword_100101CC0 + 4136);
  if (v22 < 1) {
    goto LABEL_2;
  }
  *(_DWORD *)(a1 + 236) = v22;
  int v23 = sub_10005A750(*(void *)a1);
  *(_DWORD *)(a1 + 232) = v23;
  sub_1000C2F04(*(int *)(a1 + 236) * (uint64_t)v23, v24, v25, v26, v27, v28, v29, v30);
  *(void *)(a1 + 192) = v31;
  sub_1000C2F04(4 * *(int *)(a1 + 236), v32, v33, v34, v35, v36, v37, v38);
  *(void *)(a1 + 296) = v39;
  sub_1000C2F04(*(int *)(a1 + 236), v40, v41, v42, v43, v44, v45, v46);
  *(void *)(a1 + 200) = v47;
  sub_1000C2F04(*(int *)(a1 + 236), v48, v49, v50, v51, v52, v53, v54);
  *(void *)(a1 + 208) = v62;
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1904))
  {
    sub_1000C2F04(*(int *)(a1 + 236), v55, v56, v57, v58, v59, v60, v61);
    *(void *)(a1 + 216) = v63;
  }
  sub_1000C2F04(*(int *)(a1 + 232), v55, v56, v57, v58, v59, v60, v61);
  *(void *)(a1 + 184) = v64;
  int v66 = *(_DWORD *)(a1 + 228);
  int v65 = *(_DWORD *)(a1 + 232);
  *(_DWORD *)(a1 + 224) = v66;
  *(_DWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 244) = v66;
  *(void *)(a1 + 248) = -1;
  uint64_t v67 = sub_1000B475C(*(void *)(a1 + 192), *(void *)(a1 + 296), *(_DWORD *)(a1 + 236), v65);
  *(void *)(a1 + 256) = v67;
  if (v67)
  {
LABEL_2:
    int v2 = sub_10005A798(*(void *)a1);
    sub_1000C2F04(v2, v3, v4, v5, v6, v7, v8, v9);
    *(void *)(a1 + 408) = v10;
    *(_DWORD *)(a1 + 364) = 0;
    int v11 = sub_10005A740(*(void *)a1);
    *(_DWORD *)(a1 + 304) = v11;
    if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 2016))
    {
      *(_DWORD *)(a1 + 724) = 1;
      v11 *= 2;
      *(_DWORD *)(a1 + 304) = v11;
    }
    int v19 = 1000 * v11 / (int)sub_10005A738(*(void *)a1);
    *(_DWORD *)(a1 + 728) = v19;
    uint64_t v20 = qword_100101CC0;
    if (qword_100101CC0) {
      uint64_t v21 = *(void *)(qword_100101CC0 + 2320);
    }
    else {
      uint64_t v21 = 0;
    }
    *(_DWORD *)(a1 + 308) = v21 / v19;
    *(void *)(a1 + 656) = 0;
    *(void *)(a1 + 672) = 0;
    *(void *)(a1 + 664) = 0;
    if (!v20 || !*(_DWORD *)(v20 + 2848))
    {
      uint64_t v76 = 0;
      if (sub_1000A4B50(0, *(void *)a1, (_DWORD *)&v76 + 1, (int *)&v76))
      {
        *(_DWORD *)(a1 + 656) = 0;
        *(_DWORD *)(a1 + 660) = HIDWORD(v76);
        *(_DWORD *)(a1 + 664) = v76;
        *(_DWORD *)(a1 + 668) = sub_10005A748(*(void *)a1);
        *(void *)(a1 + 672) = 0x100000001;
      }
    }
    uint64_t v69 = qword_100101CC0;
    if (qword_100101CC0)
    {
      uint64_t v70 = *(void *)(qword_100101CC0 + 2232);
      if (v70 == 1)
      {
        uint64_t v76 = 0;
        if (sub_1000A4B50(1, *(void *)a1, (_DWORD *)&v76 + 1, (int *)&v76))
        {
          *(_DWORD *)(a1 + 680) = 1;
          *(_DWORD *)(a1 + 684) = HIDWORD(v76);
          *(_DWORD *)(a1 + 688) = v76;
          *(_DWORD *)(a1 + 692) = sub_10005A748(*(void *)a1);
          *(void *)(a1 + 696) = 0;
        }
      }
      else
      {
        if (v70)
        {
LABEL_28:
          uint64_t v71 = *(void *)(v69 + 2176);
          if ((v71 & 0x8000000000000000) == 0)
          {
            *(_DWORD *)(a1 + 708) = v71;
            if ((int)v71 >= 1)
            {
              sub_1000C2F04(24 * v71, v12, v13, v14, v15, v16, v17, v18);
              *(void *)(a1 + 712) = v72;
              if (*(int *)(a1 + 708) >= 1)
              {
                uint64_t v73 = 0;
                uint64_t v74 = 16;
                do
                {
                  *(void *)(*(void *)(a1 + 712) + v74) = 0xFFFFFFFFLL;
                  ++v73;
                  v74 += 24;
                }
                while (v73 < *(int *)(a1 + 708));
              }
            }
            goto LABEL_35;
          }
LABEL_34:
          *(_DWORD *)(a1 + 708) = 0;
LABEL_35:
          int v75 = qword_100101CC0;
          if (qword_100101CC0) {
            int v75 = *(_DWORD *)(qword_100101CC0 + 2896);
          }
          *(_DWORD *)(a1 + 360) = v75;
          double result = NAN;
          *(void *)(a1 + 432) = -1;
          *(_DWORD *)(a1 + 416) = -1;
          return result;
        }
        if (!*(_DWORD *)(qword_100101CC0 + 2848)) {
          goto LABEL_23;
        }
      }
LABEL_27:
      uint64_t v69 = qword_100101CC0;
      if (!qword_100101CC0) {
        goto LABEL_34;
      }
      goto LABEL_28;
    }
LABEL_23:
    uint64_t v76 = 0;
    if (sub_1000A4B50(0, *(void *)a1, (_DWORD *)&v76 + 1, (int *)&v76))
    {
      *(_DWORD *)(a1 + 680) = 0;
      *(_DWORD *)(a1 + 684) = HIDWORD(v76);
      *(_DWORD *)(a1 + 688) = v76;
      *(_DWORD *)(a1 + 692) = sub_10005A748(*(void *)a1);
      *(void *)(a1 + 696) = 0x100000001;
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_1000471FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 312);
  if (v2)
  {
    sub_1000C321C(v2);
    *(void *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 320) = 0;
  }
  sub_1000C321C(*(void *)(a1 + 712));
  *(void *)(a1 + 712) = 0;
  sub_1000C321C(*(void *)(a1 + 408));
  *(void *)(a1 + 408) = 0;
  sub_1000B4D60(*(void *)(a1 + 280));
  *(void *)(a1 + 280) = 0;
  sub_1000C321C(*(void *)(a1 + 272));
  *(void *)(a1 + 272) = 0;
  sub_1000C321C(*(void *)(a1 + 424));
  *(void *)(a1 + 424) = 0;
  sub_1000B4C44(*(void *)(a1 + 256));
  *(void *)(a1 + 256) = 0;
  sub_1000C321C(*(void *)(a1 + 184));
  *(void *)(a1 + 184) = 0;
  sub_1000C321C(*(void *)(a1 + 216));
  *(void *)(a1 + 216) = 0;
  sub_1000C321C(*(void *)(a1 + 208));
  *(void *)(a1 + 208) = 0;
  sub_1000C321C(*(void *)(a1 + 200));
  *(void *)(a1 + 200) = 0;
  sub_1000C321C(*(void *)(a1 + 296));
  *(void *)(a1 + 296) = 0;
  sub_1000C321C(*(void *)(a1 + 192));
  *(void *)(a1 + 192) = 0;
  return sub_10004084C(a1);
}

void sub_1000472D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)(a1 + 736) = 0u;
  if (*(void *)(a1 + 88))
  {
    int v9 = qword_100101CC0;
    if (qword_100101CC0) {
      int v9 = *(_DWORD *)(qword_100101CC0 + 4136);
    }
    *(_DWORD *)(a1 + 748) = v9;
    sub_1000C2F04(2 * v9, a2, a3, a4, a5, a6, a7, a8);
    *(void *)(a1 + 736) = v10;
  }
}

double sub_100047328(uint64_t a1)
{
  sub_1000C321C(*(void *)(a1 + 736));
  double result = 0.0;
  *(_OWORD *)(a1 + 736) = 0u;
  return result;
}

uint64_t sub_100047358(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  if (*(_DWORD *)(a1 + 348)) {
    sub_1000475F4(a1);
  }
  uint64_t result = sub_100048114(a1, a2, a3, a4);
  *(_DWORD *)(a1 + 348) = 1;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 648) = 0;
  *(_DWORD *)(a1 + 6636) = 0;
  *(_DWORD *)(a1 + 6440) = 0;
  int v9 = *(_DWORD *)(a1 + 384);
  if (v9 >= 1)
  {
    int v10 = *(_DWORD *)(a1 + 400);
    int v11 = *(unsigned char **)(a1 + 392);
    if (v10 >= v9)
    {
      v11[v10 - 1] = 102;
    }
    else
    {
      *(_DWORD *)(a1 + 400) = 1;
      *int v11 = 108;
    }
  }
  return result;
}

uint64_t sub_100047414(uint64_t a1, _DWORD *a2)
{
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  if (a1)
  {
    uint64_t v11 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v10 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v7 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v8 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v9);
    nullsub_1(v8);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v5 = (int *)sub_1000C0C70();
    if (setjmp(v5))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (!sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v6 = 1;
        goto LABEL_16;
      }
      if (a2)
      {
        sub_100047358(a1, 1, 1, a2);
        unsigned int v12 = 0;
        int v6 = 0;
        goto LABEL_16;
      }
    }
    int v6 = 4;
LABEL_16:
    unsigned int v12 = v6;
    sub_1000C0CD8();
    goto LABEL_9;
  }
  uint64_t v11 = sub_1000C2EA8(0);
  uint64_t v10 = sub_1000CD350(0);
  uint64_t v7 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v8 = sub_1000D2948(0, 0, &v9);
  nullsub_1(v8);
LABEL_8:
  unsigned int v12 = 1;
LABEL_9:
  sub_100051144(v12);
  sub_1000D2948(v8, v9, 0);
  sub_1000C0D2C(v7);
  sub_1000CD350(v10);
  sub_1000C2EA8(v11);
  return v12;
}

uint64_t sub_1000475F4(uint64_t a1)
{
  unsigned int v31 = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  if (a1)
  {
    uint64_t v30 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v29 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v26 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v27 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v28);
    nullsub_1(v27);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v3 = (int *)sub_1000C0C70();
    if (!setjmp(v3))
    {
      if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
      {
        int v4 = 4;
      }
      else if (*(_DWORD *)(a1 + 8160))
      {
        int v4 = 1;
      }
      else
      {
        if (*(_DWORD *)(a1 + 348))
        {
          unsigned int v5 = *(_DWORD *)(a1 + 6416);
          sub_1000479F4(a1, 1);
          unsigned int v31 = 0;
          int v6 = *(_DWORD *)(a1 + 384);
          if (v6 >= 1)
          {
            uint64_t v7 = *(int *)(a1 + 400);
            uint64_t v8 = *(void *)(a1 + 392);
            if (*(_DWORD *)(a1 + 400) >= v6)
            {
              uint64_t v7 = (v7 - 1);
              char v9 = 102;
            }
            else
            {
              *(_DWORD *)(a1 + 400) = v7 + 1;
              char v9 = 76;
            }
            *(unsigned char *)(v8 + v7) = v9;
          }
          while (!v31)
          {
            uint64_t v18 = *(uint8x16_t **)(a1 + 184);
            while (1)
            {
              int v19 = sub_10005A778(*(void *)a1);
              int v20 = v19;
              if ((v19 - 5) > 1) {
                break;
              }
              int v21 = *(_DWORD *)(a1 + 6636);
              if (*(_DWORD *)(a1 + 724))
              {
                int v21 = v21 == 0;
                *(_DWORD *)(a1 + 6636) = v21;
              }
              if (!v21)
              {
                sub_100006910(*(void *)(a1 + 16), v18);
                int v25 = v20;
                goto LABEL_55;
              }
            }
            int v25 = v19;
            BOOL v22 = v19 != 4 || *(_DWORD *)(a1 + 724) == 0;
            if (v22 || !sub_100047CA0(a1, a1 + 176, &v25)) {
              break;
            }
LABEL_55:
            int v23 = *(_DWORD *)(a1 + 228);
            if (v23 + 1 == *(_DWORD *)(a1 + 236)) {
              int v24 = 0;
            }
            else {
              int v24 = v23 + 1;
            }
            if (v24 != *(_DWORD *)(a1 + 224)) {
              sub_100047D54(a1, a1 + 176, v25 == 6);
            }
          }
          int v10 = *(_DWORD *)(a1 + 228);
          int v11 = v10 - 2;
          if (v10 <= 1) {
            int v11 = *(_DWORD *)(a1 + 236) + v10 - 2;
          }
          if (v11 != *(_DWORD *)(a1 + 224))
          {
            int v15 = v11;
            do
            {
              int v11 = v15;
              if (!*(unsigned char *)(*(void *)(a1 + 200) + v15)) {
                break;
              }
              *(unsigned char *)(*(void *)(a1 + 208) + v15) = -1;
              int v16 = v15 - 1;
              int v17 = v11 - 1;
              if (v11 <= 0) {
                int v17 = *(_DWORD *)(a1 + 236) + v16;
              }
              int v11 = v17;
              int v15 = v17;
            }
            while (v17 != *(_DWORD *)(a1 + 224));
          }
          if (*(_DWORD *)(a1 + 252) == -1)
          {
            int v12 = v11 + *(_DWORD *)(a1 + 240) - *(_DWORD *)(a1 + 228) + 1;
            if (v12 >= *(_DWORD *)(a1 + 236)) {
              int v13 = *(_DWORD *)(a1 + 236);
            }
            else {
              int v13 = 0;
            }
            if (v12 >= 0) {
              int v14 = -v13;
            }
            else {
              int v14 = *(_DWORD *)(a1 + 236);
            }
            *(_DWORD *)(a1 + 252) = v12 + v14;
          }
          *(_DWORD *)(a1 + 348) = 0;
          if (sub_100047F5C(a1, v5, 0) != 1) {
            sub_100047FFC((unsigned int *)a1, v5, 1);
          }
        }
        *(_DWORD *)(a1 + 352) = 1;
        int v4 = v31;
      }
      unsigned int v31 = v4;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 8160) = 1;
  }
  else
  {
    uint64_t v30 = sub_1000C2EA8(0);
    uint64_t v29 = sub_1000CD350(0);
    uint64_t v26 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    uint64_t v27 = sub_1000D2948(0, 0, &v28);
    nullsub_1(v27);
  }
  unsigned int v31 = 1;
LABEL_9:
  sub_100051144(v31);
  sub_1000D2948(v27, v28, 0);
  sub_1000C0D2C(v26);
  sub_1000CD350(v29);
  sub_1000C2EA8(v30);
  return v31;
}

uint64_t sub_1000479F4(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 176) != 2)
  {
    uint64_t v3 = result;
    if (*(_DWORD *)(result + 6452))
    {
      *(_DWORD *)(result + 6452) = 0;
      uint64_t result = sub_100039F58(*(void *)result);
      *(_DWORD *)(v3 + 6460) = 0;
    }
    if (a2) {
      uint64_t result = sub_10005A728(*(void *)v3);
    }
    if (*(_DWORD *)(v3 + 5672))
    {
      if (*(_DWORD *)(v3 + 6536))
      {
        if (!*(_DWORD *)(v3 + 6248))
        {
          int v4 = *(_DWORD *)(v3 + 336);
          int v5 = *(_DWORD *)(v3 + 340);
          if (v4 != v5)
          {
            uint64_t v6 = *(unsigned int *)(v3 + 304);
            if ((int)v6 < 1)
            {
              int v11 = 0;
              do
              {
                int v4 = (v4 + 1) % *(_DWORD *)(v3 + 344);
                ++v11;
              }
              while (v4 != v5);
              *(_DWORD *)(v3 + 336) = v5;
              *(_DWORD *)(v3 + 6248) = v11;
            }
            else
            {
              uint64_t v7 = *(_WORD **)(v3 + 6240);
              if (v6 > 0xF)
              {
                uint64_t v12 = v6 & 0xFFFFFFF0;
                if ((v6 & 0xFFFFFFF0) == v6)
                {
                  do
                  {
                    int v23 = (__int16 *)(*(void *)(v3 + 328) + 2 * v4 * (int)v6);
                    if ((unint64_t)((char *)v7 - (char *)v23) > 0x1F)
                    {
                      uint64_t v26 = &v7[v12];
                      uint64_t v27 = (long long *)(v23 + 8);
                      uint64_t v28 = v7 + 8;
                      uint64_t v29 = v6 & 0xFFFFFFF0;
                      do
                      {
                        long long v30 = *v27;
                        *(v28 - 1) = *(v27 - 1);
                        *uint64_t v28 = v30;
                        v27 += 2;
                        v28 += 2;
                        v29 -= 16;
                      }
                      while (v29);
                      uint64_t v7 = v26;
                    }
                    else
                    {
                      int v24 = v6;
                      do
                      {
                        __int16 v25 = *v23++;
                        *v7++ = v25;
                        --v24;
                      }
                      while (v24);
                    }
                    int v4 = (*(_DWORD *)(v3 + 336) + 1) % *(_DWORD *)(v3 + 344);
                    *(_DWORD *)(v3 + 336) = v4;
                    ++*(_DWORD *)(v3 + 6248);
                  }
                  while (v4 != *(_DWORD *)(v3 + 340));
                }
                else
                {
                  do
                  {
                    uint64_t v13 = *(void *)(v3 + 328) + 2 * v4 * (int)v6;
                    if ((unint64_t)v7 - v13 >= 0x20)
                    {
                      int v16 = &v7[v12];
                      int v15 = (__int16 *)(v13 + v12 * 2);
                      int v17 = (long long *)(v13 + 16);
                      uint64_t v18 = v7 + 8;
                      uint64_t v19 = v6 & 0xFFFFFFF0;
                      do
                      {
                        long long v20 = *v17;
                        *(v18 - 1) = *(v17 - 1);
                        _OWORD *v18 = v20;
                        v17 += 2;
                        v18 += 2;
                        v19 -= 16;
                      }
                      while (v19);
                      uint64_t v7 = v16;
                      int v14 = v6 & 0xFFFFFFF0;
                    }
                    else
                    {
                      int v14 = 0;
                      int v15 = (__int16 *)(*(void *)(v3 + 328) + 2 * v4 * (int)v6);
                    }
                    int v21 = v6 - v14;
                    do
                    {
                      __int16 v22 = *v15++;
                      *v7++ = v22;
                      --v21;
                    }
                    while (v21);
                    int v4 = (*(_DWORD *)(v3 + 336) + 1) % *(_DWORD *)(v3 + 344);
                    *(_DWORD *)(v3 + 336) = v4;
                    ++*(_DWORD *)(v3 + 6248);
                  }
                  while (v4 != *(_DWORD *)(v3 + 340));
                }
              }
              else
              {
                do
                {
                  uint64_t v8 = (__int16 *)(*(void *)(v3 + 328) + 2 * v4 * (int)v6);
                  int v9 = v6;
                  do
                  {
                    __int16 v10 = *v8++;
                    *v7++ = v10;
                    --v9;
                  }
                  while (v9);
                  int v4 = (*(_DWORD *)(v3 + 336) + 1) % *(_DWORD *)(v3 + 344);
                  *(_DWORD *)(v3 + 336) = v4;
                  ++*(_DWORD *)(v3 + 6248);
                }
                while (v4 != *(_DWORD *)(v3 + 340));
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100047C58(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 384);
  if (v2 >= 1)
  {
    int v3 = *(_DWORD *)(result + 400);
    if (v3 >= v2)
    {
      *(unsigned char *)(*(void *)(result + 392) + (v3 - 1)) = 102;
    }
    else
    {
      if (a2 == 108) {
        int v3 = 0;
      }
      uint64_t v4 = *(void *)(result + 392);
      *(_DWORD *)(result + 400) = v3 + 1;
      *(unsigned char *)(v4 + v3) = a2;
    }
  }
  return result;
}

uint64_t sub_100047CA0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *(uint8x16_t **)(a2 + 8);
  while (1)
  {
    int v7 = sub_10005A778(*(void *)a1);
    if ((v7 - 5) > 1) {
      break;
    }
    int v8 = *(_DWORD *)(a1 + 6636);
    if (*(_DWORD *)(a2 + 548))
    {
      int v8 = v8 == 0;
      *(_DWORD *)(a1 + 6636) = v8;
    }
    if (!v8)
    {
      sub_100006910(*(void *)(a1 + 16), v6);
      uint64_t result = 1;
      *a3 = v7;
      return result;
    }
  }
  uint64_t result = 0;
  *a3 = v7;
  return result;
}

uint64_t sub_100047D54(uint64_t a1, uint64_t a2, int a3)
{
  int v7 = *(_DWORD *)(a2 + 52);
  uint64_t v6 = *(unsigned int *)(a2 + 56);
  int v8 = *(unsigned char **)(a2 + 8);
  if ((int)v6 >= 1)
  {
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = v7 * (int)v6;
    if (v6 < 8 || (unint64_t)(v9 + v10 - (void)v8) < 0x20)
    {
      uint64_t v11 = 0;
LABEL_5:
      uint64_t v12 = (unsigned char *)(v9 + v11 + v10);
      uint64_t v13 = &v8[v11];
      uint64_t v14 = v6 - v11;
      do
      {
        char v15 = *v13++;
        *v12++ = v15;
        --v14;
      }
      while (v14);
LABEL_7:
      int v7 = *(_DWORD *)(a2 + 52);
      goto LABEL_8;
    }
    if (v6 >= 0x20)
    {
      uint64_t v11 = v6 & 0x7FFFFFE0;
      uint64_t v26 = (long long *)(v8 + 16);
      uint64_t v27 = (_OWORD *)(v10 + v9 + 16);
      uint64_t v28 = v6 & 0xFFFFFFE0;
      do
      {
        long long v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *uint64_t v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v11 == v6) {
        goto LABEL_7;
      }
      if ((v6 & 0x18) == 0) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v30 = v11;
    uint64_t v11 = v6 & 0xFFFFFFF8;
    unsigned int v31 = (uint64_t *)&v8[v30];
    uint64_t v32 = (void *)(v9 + v30 + v10);
    uint64_t v33 = v30 - v11;
    do
    {
      uint64_t v34 = *v31++;
      *v32++ = v34;
      v33 += 8;
    }
    while (v33);
    if (v11 == v6) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
LABEL_8:
  *(_DWORD *)(*(void *)(a2 + 120) + 4 * v7) = *(_DWORD *)(a2 + 116);
  *(unsigned char *)(*(void *)(a2 + 24) + *(int *)(a2 + 52)) = a3;
  *(unsigned char *)(*(void *)(a2 + 32) + *(int *)(a2 + 52)) = 0;
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1904)) {
    *(unsigned char *)(*(void *)(a2 + 40) + *(int *)(a2 + 52)) = *v8;
  }
  uint64_t v16 = sub_1000482E0(a1, a3);
  *(unsigned char *)(*(void *)(a2 + 32) + *(int *)(a2 + 52)) = 0;
  if ((v16 - 1) <= 2 && a3 && qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 2096))
  {
    int v17 = sub_10005A758(*(void *)a1);
    if (v17 >= 255) {
      char v18 = -1;
    }
    else {
      char v18 = v17;
    }
    *(unsigned char *)(*(void *)(a2 + 32) + *(int *)(a2 + 52)) = v18;
  }
  int v20 = *(_DWORD *)(a2 + 48);
  int v19 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v19 + 1;
  BOOL v21 = v19 + 1 == *(_DWORD *)(a1 + 236);
  int v22 = *(_DWORD *)(a2 + 60);
  ++*(_DWORD *)(a2 + 64);
  if (v21) {
    int v23 = 0;
  }
  else {
    int v23 = v19 + 1;
  }
  *(_DWORD *)(a2 + 52) = v23;
  int v24 = (v23 - v20 + v22) % v22;
  if (v24 > *(_DWORD *)(a2 + 88)) {
    *(_DWORD *)(a2 + 88) = v24;
  }
  return v16;
}

uint64_t sub_100047F5C(uint64_t a1, int a2, _DWORD *a3)
{
  if (a2 == -2) {
    a2 = *(_DWORD *)(a1 + 6416);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 708);
  if ((int)v3 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = 0;
    int v6 = 0;
    uint64_t v7 = *(void *)(a1 + 712);
    uint64_t v8 = 24 * v3;
    do
    {
      uint64_t v9 = *(void *)(v7 + v5 + 16);
      if (v9 == 0xFFFFFFFFLL) {
        break;
      }
      if (v9 == a2)
      {
        if (a3)
        {
          *a3 = v4;
          uint64_t v7 = *(void *)(a1 + 712);
        }
        if (*(_DWORD *)(v7 + v5 + 4) + v6 < *(_DWORD *)(a1 + 236)) {
          return 1;
        }
        else {
          return 2;
        }
      }
      v6 += *(_DWORD *)(v7 + v5 + 4);
      v5 += 24;
      ++v4;
    }
    while (v8 != v5);
  }
  return 0;
}

unsigned int *sub_100047FFC(unsigned int *result, unsigned int a2, int a3)
{
  unsigned int v3 = a2;
  int v4 = result;
  unsigned int v6 = result[59];
  signed int v5 = result[60];
  int v7 = (int)(result[56] - result[61] + v6) % (int)v6;
  signed int v8 = v6 + v7;
  if (v5 <= (int)(v6 + v7)) {
    unsigned int v9 = v6 + v7;
  }
  else {
    unsigned int v9 = result[60];
  }
  if (v8 >= v5) {
    unsigned int v10 = v6 + v7;
  }
  else {
    unsigned int v10 = v8 + 1;
  }
  unsigned int v11 = v9 - v10;
  if (v6 <= 1) {
    unsigned int v12 = 1;
  }
  else {
    unsigned int v12 = result[59];
  }
  BOOL v13 = v8 < v5;
  int v14 = v11 / v12;
  if (v13) {
    ++v14;
  }
  unsigned int v15 = v7 + v6 * v14;
  if (result[189] == 6) {
    unsigned int v16 = result[60];
  }
  else {
    unsigned int v16 = v15;
  }
  if (a3) {
    unsigned int v17 = result[60];
  }
  else {
    unsigned int v17 = v16;
  }
  if (a2 == -2) {
    unsigned int v3 = result[1604];
  }
  int v18 = result[177];
  int v19 = (uint64_t *)*((void *)result + 89);
  uint64_t v20 = v3;
  if (v18 >= 1)
  {
    BOOL v21 = v19 + 2;
    uint64_t v22 = result[177];
    do
    {
      uint64_t v24 = *v21;
      v21 += 3;
      uint64_t v23 = v24;
      if (v24 == 0xFFFFFFFFLL) {
        break;
      }
      if (v23 == v20) {
        return result;
      }
      --v22;
    }
    while (v22);
  }
  result[60] = v5 - v17;
  uint64_t result = (unsigned int *)j__memmove(v19 + 3, v19, 24 * v18 - 24);
  **((_DWORD **)v4 + 89) = v4[61];
  *(void *)(*((void *)v4 + 89) + 16) = v20;
  *(_DWORD *)(*((void *)v4 + 89) + 4) = v17;
  *(_DWORD *)(*((void *)v4 + 89) + 8) = v16;
  return result;
}

uint64_t sub_100048114(uint64_t result, int a2, int a3, _DWORD *a4)
{
  uint64_t v7 = result;
  *(_DWORD *)(result + 176) = a2;
  uint64_t v8 = *(void *)(result + 6432);
  *(void *)(result + 6432) = v8 + 1;
  *(void *)(result + 6416) = v8;
  *a4 = v8;
  *(_DWORD *)(result + 288) = 0;
  if (*(void *)(result + 408)) {
    uint64_t result = sub_10005A7A0(*(void *)result);
  }
  if (*(void *)(v7 + 424)) {
    uint64_t result = sub_10005A7A0(*(void *)v7);
  }
  *(_DWORD *)(v7 + 436) = *a4;
  if (!a3)
  {
    *(_DWORD *)(v7 + 6452) = 0;
    if (a2 != 2)
    {
      unsigned int v9 = (_DWORD *)(v7 + 6452);
      goto LABEL_17;
    }
LABEL_12:
    int v11 = *(_DWORD *)(v7 + 228);
    *(_DWORD *)(v7 + 224) = v11;
    *(_DWORD *)(v7 + 240) = 0;
    *(_DWORD *)(v7 + 244) = v11;
    *(void *)(v7 + 248) = -1;
    *(_DWORD *)(v7 + 6460) = 0;
    if (!*(_DWORD *)(v7 + 5672)) {
      goto LABEL_24;
    }
LABEL_25:
    *(_DWORD *)(v7 + 5692) = 0;
    *(void *)(v7 + 6248) = 0;
    *(void *)(v7 + 336) = 0;
    goto LABEL_26;
  }
  *(_DWORD *)(v7 + 320) = 0;
  *(_DWORD *)(v7 + 6452) = 0;
  if (a2 == 2) {
    goto LABEL_12;
  }
  unsigned int v9 = (_DWORD *)(v7 + 6452);
  int v10 = *(_DWORD *)(v7 + 228);
  *(_DWORD *)(v7 + 224) = v10;
  *(_DWORD *)(v7 + 240) = 0;
  *(_DWORD *)(v7 + 244) = v10;
  *(void *)(v7 + 248) = -1;
  if (!qword_100101CC0)
  {
LABEL_22:
    uint64_t result = sub_10005A720(*(void *)v7);
LABEL_23:
    *unsigned int v9 = 0;
    *(_DWORD *)(v7 + 6460) = 0;
    if (!*(_DWORD *)(v7 + 5672)) {
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  if (*(_DWORD *)(qword_100101CC0 + 2024))
  {
    sub_10005A69C(*(void *)v7);
    uint64_t result = sub_100004158(*(void *)(v7 + 16));
    if (result) {
      uint64_t result = sub_100004168(*(void *)(v7 + 16), 0);
    }
  }
  else if (*(_DWORD *)(qword_100101CC0 + 2212))
  {
    uint64_t result = sub_10005A6A4(*(void *)v7, *(unsigned int *)(qword_100101CC0 + 2384));
  }
LABEL_17:
  if (!qword_100101CC0 || !*(void *)(qword_100101CC0 + 1880))
  {
    if (!a3) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  sub_10005A760(*(void *)v7);
  uint64_t result = sub_10005A720(*(void *)v7);
  *(_DWORD *)(v7 + 6452) = 1;
  *(_DWORD *)(v7 + 6460) = 0;
  if (*(_DWORD *)(v7 + 5672)) {
    goto LABEL_25;
  }
LABEL_24:
  if (*(_DWORD *)(v7 + 6260)) {
    goto LABEL_25;
  }
LABEL_26:
  if (a2 == 1 && a3)
  {
    if (*(_DWORD *)(v7 + 364)) {
      *(_DWORD *)(v7 + 372) = 0;
    }
  }
  return result;
}

uint64_t sub_1000482E0(uint64_t a1, int a2)
{
  uint64_t result = sub_1000B44AC(*(unsigned int **)(a1 + 440), a2);
  switch(result)
  {
    case 3:
      if (*(_DWORD *)(a1 + 248) == -1)
      {
        *(_DWORD *)(a1 + 248) = sub_1000B466C(*(_DWORD **)(a1 + 440));
        return 3;
      }
      else
      {
        uint64_t result = 3;
        if (a2 && qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 2096))
        {
          int v5 = sub_10005A758(*(void *)a1);
          if (v5 < 1)
          {
            return 3;
          }
          else
          {
            int v6 = v5;
            uint64_t v7 = *(unsigned int **)(a1 + 440);
            return sub_1000B46DC(v7, v6, 1);
          }
        }
      }
      break;
    case 2:
      if (*(_DWORD *)(a1 + 252) == -1) {
        *(_DWORD *)(a1 + 252) = sub_1000B4688(*(_DWORD **)(a1 + 440));
      }
      return 2;
    case 1:
      *(void *)(a1 + 248) = -1;
      break;
  }
  return result;
}

uint64_t sub_1000483F4(_DWORD *a1)
{
  return ((a1[56] - a1[61] + a1[59]) % a1[59]);
}

uint64_t sub_100048414(uint64_t a1, char *a2, int a3, int *a4)
{
  unsigned int v29 = 0;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  if (a1)
  {
    uint64_t v28 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v27 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v24 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    __int16 v25 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v26);
    nullsub_1(v25);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    unsigned int v9 = (int *)sub_1000C0C70();
    if (setjmp(v9))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic")) {
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 8160))
    {
      int v17 = 1;
      goto LABEL_14;
    }
    *a4 = 0;
    if (!a2)
    {
LABEL_11:
      int v17 = 4;
LABEL_14:
      unsigned int v29 = v17;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    if (!*(_DWORD *)(a1 + 348))
    {
      *a4 = 2;
      unsigned int v29 = 0;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    uint64_t v18 = *(unsigned int *)(a1 + 320);
    if ((int)v18 >= 1)
    {
      int v19 = *(_DWORD *)(a1 + 304) - (int)v18 >= a3 ? a3 : *(_DWORD *)(a1 + 304) - v18;
      memcpy((void *)(*(void *)(a1 + 312) + 2 * v18), a2, 2 * v19);
      int v20 = *(_DWORD *)(a1 + 320) + v19;
      *(_DWORD *)(a1 + 320) = v20;
      a3 -= v19;
      a2 += 2 * v19;
      if (v20 == *(_DWORD *)(a1 + 304))
      {
        unsigned int v29 = sub_100048710(a1, *(char **)(a1 + 312));
        if (v29) {
          goto LABEL_38;
        }
        *(_DWORD *)(a1 + 320) = 0;
      }
    }
    LODWORD(v21) = *(_DWORD *)(a1 + 304);
    while (a3 >= (int)v21)
    {
      unsigned int v29 = sub_100048710(a1, a2);
      uint64_t v21 = *(int *)(a1 + 304);
      a2 += 2 * v21;
      a3 -= v21;
      if (v29) {
        goto LABEL_38;
      }
    }
    if (a3 >= 1)
    {
      uint64_t v22 = *(void **)(a1 + 312);
      if (!v22)
      {
        *(_DWORD *)(a1 + 320) = 0;
        sub_1000C2F04(2 * (int)v21, v10, v11, v12, v13, v14, v15, v16);
        *(void *)(a1 + 312) = v22;
      }
      memcpy(v22, a2, 2 * a3);
      *(_DWORD *)(a1 + 320) = a3;
    }
    *a4 = 0;
    if (*(_DWORD *)(a1 + 640))
    {
      int v23 = 2;
LABEL_37:
      *a4 = v23;
      goto LABEL_38;
    }
    if (*(_DWORD *)(a1 + 648))
    {
      int v23 = 1;
      goto LABEL_37;
    }
LABEL_38:
    int v17 = v29;
    goto LABEL_14;
  }
  uint64_t v28 = sub_1000C2EA8(0);
  uint64_t v27 = sub_1000CD350(0);
  uint64_t v24 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  __int16 v25 = sub_1000D2948(0, 0, &v26);
  nullsub_1(v25);
LABEL_8:
  unsigned int v29 = 1;
LABEL_9:
  sub_100051144(v29);
  sub_1000D2948(v25, v26, 0);
  sub_1000C0D2C(v24);
  sub_1000CD350(v27);
  sub_1000C2EA8(v28);
  return v29;
}

uint64_t sub_100048710(uint64_t a1, char *a2)
{
  unsigned int v128 = 0;
  int v4 = sub_100049470(a1);
  int v5 = v4;
  if (*(_DWORD *)(a1 + 5672) && *(_DWORD *)(a1 + 6536))
  {
    switch(v4)
    {
      case 1:
        int v6 = *(_DWORD *)(a1 + 6248);
        if (v6)
        {
          int v7 = *(_DWORD *)(*(void *)(a1 + 440) + 8);
          uint64_t v8 = *(int *)(a1 + 304);
          *(void *)(a1 + 6248) = 0;
          *(void *)(a1 + 336) = 0;
          if (v7 >= 2)
          {
            uint64_t v9 = 0;
            int v10 = 0;
            int v11 = 0;
            int v12 = v7 - 1;
            uint64_t v13 = *(void *)(a1 + 6240) + 2 * (v6 - v12) * (int)v8;
            uint64_t v14 = 2 * v8;
            uint64_t v15 = (__int16 *)v13;
            while (1)
            {
              uint64_t v16 = *(unsigned int *)(a1 + 304);
              if ((int)v16 >= 1) {
                break;
              }
LABEL_15:
              int v25 = *(_DWORD *)(a1 + 344);
              int v11 = (v11 + 1) % v25;
              *(_DWORD *)(a1 + 340) = v11;
              if (v11 == v10)
              {
                int v10 = (v10 + 1) % v25;
                *(_DWORD *)(a1 + 336) = v10;
              }
              uint64_t v15 = (__int16 *)((char *)v15 + v14);
              if (++v9 == v12) {
                goto LABEL_53;
              }
            }
            uint64_t v17 = *(void *)(a1 + 328);
            int v18 = v16 * v11;
            int v19 = (_WORD *)(v17 + 2 * (int)v16 * v11);
            if (v16 >= 0x10
              && (uint64_t v20 = 2 * v18, (unint64_t)(v20 + v17 - (v13 + v14 * v9)) >= 0x20))
            {
              unint64_t v26 = 0;
              uint64_t v21 = v16 & 0xFFFFFFF0;
              v19 += v21;
              uint64_t v22 = &v15[v21];
              uint64_t v27 = v17 + v20 + 16;
              do
              {
                uint64_t v28 = (_OWORD *)(v27 + v26);
                long long v29 = *(_OWORD *)&v15[v26 / 2 + 8];
                *(v28 - 1) = *(_OWORD *)&v15[v26 / 2];
                *uint64_t v28 = v29;
                v26 += 32;
              }
              while (((2 * v16) & 0x1FFFFFFE0) != v26);
              if (v21 == v16) {
                goto LABEL_14;
              }
            }
            else
            {
              LODWORD(v21) = 0;
              uint64_t v22 = v15;
            }
            int v23 = v16 - v21;
            do
            {
              __int16 v24 = *v22++;
              *v19++ = v24;
              --v23;
            }
            while (v23);
LABEL_14:
            int v11 = *(_DWORD *)(a1 + 340);
            int v10 = *(_DWORD *)(a1 + 336);
            goto LABEL_15;
          }
          int v11 = 0;
LABEL_53:
          *(_DWORD *)(a1 + 6248) = 0;
        }
        else
        {
          int v11 = *(_DWORD *)(a1 + 340);
        }
        uint64_t v64 = *(unsigned int *)(a1 + 304);
        if ((int)v64 < 1) {
          goto LABEL_61;
        }
        uint64_t v65 = *(void *)(a1 + 328);
        int v66 = (_WORD *)(v65 + 2 * (int)v64 * v11);
        if (v64 >= 0x10
          && (uint64_t v67 = 2 * (int)v64 * v11 + v65, (unint64_t)(v67 - (void)a2) >= 0x20))
        {
          uint64_t v68 = v64 & 0x7FFFFFF0;
          uint64_t v88 = 2 * (v64 & 0xFFFFFFF0);
          int v66 = (_WORD *)((char *)v66 + v88);
          uint64_t v69 = &a2[v88];
          uint64_t v89 = (long long *)(a2 + 16);
          uint64_t v90 = (_OWORD *)(v67 + 16);
          uint64_t v91 = v64 & 0xFFFFFFF0;
          do
          {
            long long v92 = *v89;
            *(v90 - 1) = *(v89 - 1);
            *uint64_t v90 = v92;
            v89 += 2;
            v90 += 2;
            v91 -= 16;
          }
          while (v91);
          if (v68 == v64) {
            goto LABEL_60;
          }
        }
        else
        {
          LODWORD(v68) = 0;
          uint64_t v69 = a2;
        }
        int v70 = v64 - v68;
        do
        {
          __int16 v71 = *(_WORD *)v69;
          v69 += 2;
          *v66++ = v71;
          --v70;
        }
        while (v70);
LABEL_60:
        int v11 = *(_DWORD *)(a1 + 340);
LABEL_61:
        int v63 = v11 + 1;
        goto LABEL_62;
      case 2:
        int v30 = *(_DWORD *)(a1 + 6248);
        if (v30 >= *(_DWORD *)(a1 + 6256)) {
          break;
        }
        uint64_t v31 = *(unsigned int *)(a1 + 304);
        if ((int)v31 < 1) {
          goto LABEL_29;
        }
        uint64_t v32 = *(void *)(a1 + 6240);
        int v33 = v30 * v31;
        uint64_t v34 = (_WORD *)(v32 + 2 * v30 * (int)v31);
        if (v31 < 0x10 || (uint64_t v35 = 2 * v33 + v32, (unint64_t)(v35 - (void)a2) < 0x20))
        {
          LODWORD(v36) = 0;
          uint64_t v37 = a2;
LABEL_26:
          int v38 = v31 - v36;
          do
          {
            __int16 v39 = *(_WORD *)v37;
            v37 += 2;
            *v34++ = v39;
            --v38;
          }
          while (v38);
          goto LABEL_28;
        }
        uint64_t v36 = v31 & 0x7FFFFFF0;
        uint64_t v93 = 2 * (v31 & 0xFFFFFFF0);
        uint64_t v34 = (_WORD *)((char *)v34 + v93);
        uint64_t v37 = &a2[v93];
        uint64_t v94 = (long long *)(a2 + 16);
        uint64_t v95 = (_OWORD *)(v35 + 16);
        uint64_t v96 = v31 & 0xFFFFFFF0;
        do
        {
          long long v97 = *v94;
          *(v95 - 1) = *(v94 - 1);
          *uint64_t v95 = v97;
          v94 += 2;
          v95 += 2;
          v96 -= 16;
        }
        while (v96);
        if (v36 != v31) {
          goto LABEL_26;
        }
LABEL_28:
        int v30 = *(_DWORD *)(a1 + 6248);
LABEL_29:
        int v40 = v30 + 1;
        goto LABEL_97;
      case 3:
        int v41 = *(_DWORD *)(a1 + 6248);
        if (v41) {
          goto LABEL_88;
        }
        int v42 = *(_DWORD *)(a1 + 336);
        int v43 = *(_DWORD *)(a1 + 340);
        if (v42 == v43)
        {
          int v41 = 0;
          goto LABEL_88;
        }
        uint64_t v74 = *(unsigned int *)(a1 + 304);
        if ((int)v74 >= 1)
        {
          int v75 = *(_WORD **)(a1 + 6240);
          uint64_t v76 = v74 & 0xFFFFFFF0;
          while (1)
          {
            uint64_t v77 = *(void *)(a1 + 328);
            uint64_t v78 = (__int16 *)(v77 + 2 * v42 * (int)v74);
            if (v74 >= 0x10 && (uint64_t v79 = 2 * v42 * (int)v74, (unint64_t)v75 - v77 - v79 >= 0x20))
            {
              uint64_t v81 = &v75[v76];
              uint64_t v78 = (__int16 *)((char *)v78 + v76 * 2);
              uint64_t v84 = (long long *)(v77 + v79 + 16);
              uint64_t v85 = v75 + 8;
              uint64_t v86 = v74 & 0xFFFFFFF0;
              do
              {
                long long v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *uint64_t v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 16;
              }
              while (v86);
              int v80 = v74 & 0x7FFFFFF0;
              if ((v74 & 0xFFFFFFF0) == v74) {
                goto LABEL_66;
              }
            }
            else
            {
              int v80 = 0;
              uint64_t v81 = v75;
            }
            int v82 = v74 - v80;
            do
            {
              __int16 v83 = *v78++;
              *v81++ = v83;
              --v82;
            }
            while (v82);
LABEL_66:
            int v42 = (*(_DWORD *)(a1 + 336) + 1) % *(_DWORD *)(a1 + 344);
            *(_DWORD *)(a1 + 336) = v42;
            int v41 = *(_DWORD *)(a1 + 6248) + 1;
            *(_DWORD *)(a1 + 6248) = v41;
            int v75 = v81;
            if (v42 == *(_DWORD *)(a1 + 340)) {
              goto LABEL_88;
            }
          }
        }
        int v41 = 0;
        do
        {
          int v42 = (v42 + 1) % *(_DWORD *)(a1 + 344);
          ++v41;
        }
        while (v42 != v43);
        *(_DWORD *)(a1 + 336) = v43;
        *(_DWORD *)(a1 + 6248) = v41;
LABEL_88:
        if (v41 >= *(_DWORD *)(a1 + 6256)) {
          break;
        }
        uint64_t v98 = *(unsigned int *)(a1 + 304);
        if ((int)v98 < 1) {
          goto LABEL_96;
        }
        uint64_t v99 = *(void *)(a1 + 6240);
        int v100 = v98 * v41;
        int v101 = (_WORD *)(v99 + 2 * v100);
        if (v98 < 0x10 || (uint64_t v102 = 2 * v100 + v99, (unint64_t)(v102 - (void)a2) < 0x20))
        {
          LODWORD(v103) = 0;
          int v104 = a2;
LABEL_93:
          int v105 = v98 - v103;
          do
          {
            __int16 v106 = *(_WORD *)v104;
            v104 += 2;
            *v101++ = v106;
            --v105;
          }
          while (v105);
          goto LABEL_95;
        }
        uint64_t v103 = v98 & 0x7FFFFFF0;
        uint64_t v113 = 2 * (v98 & 0xFFFFFFF0);
        int v101 = (_WORD *)((char *)v101 + v113);
        int v104 = &a2[v113];
        int v114 = (long long *)(a2 + 16);
        int v115 = (_OWORD *)(v102 + 16);
        uint64_t v116 = v98 & 0xFFFFFFF0;
        do
        {
          long long v117 = *v114;
          *(v115 - 1) = *(v114 - 1);
          *int v115 = v117;
          v114 += 2;
          v115 += 2;
          v116 -= 16;
        }
        while (v116);
        if (v103 != v98) {
          goto LABEL_93;
        }
LABEL_95:
        int v41 = *(_DWORD *)(a1 + 6248);
LABEL_96:
        int v40 = v41 + 1;
LABEL_97:
        *(_DWORD *)(a1 + 6248) = v40;
        break;
      case 5:
        uint64_t v44 = *(unsigned int *)(a1 + 304);
        if (*(_DWORD *)(a1 + 6452))
        {
          int v45 = *(_DWORD *)(a1 + 6248);
          if (v45 >= *(_DWORD *)(a1 + 6256)) {
            break;
          }
          if ((int)v44 < 1) {
            goto LABEL_42;
          }
          uint64_t v46 = *(void *)(a1 + 6240);
          int v47 = v45 * v44;
          uint64_t v48 = (_WORD *)(v46 + 2 * v45 * (int)v44);
          if (v44 >= 0x10 && (uint64_t v49 = 2 * v47 + v46, (unint64_t)(v49 - (void)a2) >= 0x20))
          {
            uint64_t v50 = v44 & 0x7FFFFFF0;
            uint64_t v123 = 2 * (v44 & 0xFFFFFFF0);
            uint64_t v48 = (_WORD *)((char *)v48 + v123);
            uint64_t v51 = &a2[v123];
            uint64_t v124 = (long long *)(a2 + 16);
            unsigned int v125 = (_OWORD *)(v49 + 16);
            uint64_t v126 = v44 & 0xFFFFFFF0;
            do
            {
              long long v127 = *v124;
              *(v125 - 1) = *(v124 - 1);
              *unsigned int v125 = v127;
              v124 += 2;
              v125 += 2;
              v126 -= 16;
            }
            while (v126);
            if (v50 == v44) {
              goto LABEL_41;
            }
          }
          else
          {
            LODWORD(v50) = 0;
            uint64_t v51 = a2;
          }
          int v52 = v44 - v50;
          do
          {
            __int16 v53 = *(_WORD *)v51;
            v51 += 2;
            *v48++ = v53;
            --v52;
          }
          while (v52);
LABEL_41:
          int v45 = *(_DWORD *)(a1 + 6248);
LABEL_42:
          int v40 = v45 + 1;
          goto LABEL_97;
        }
        int v54 = *(_DWORD *)(a1 + 340);
        if ((int)v44 < 1) {
          goto LABEL_51;
        }
        uint64_t v55 = *(void *)(a1 + 328);
        int v56 = v54 * v44;
        uint64_t v57 = (_WORD *)(v55 + 2 * v54 * (int)v44);
        if (v44 < 0x10 || (uint64_t v58 = 2 * v56 + v55, (unint64_t)(v58 - (void)a2) < 0x20))
        {
          LODWORD(v59) = 0;
          uint64_t v60 = a2;
LABEL_48:
          int v61 = v44 - v59;
          do
          {
            __int16 v62 = *(_WORD *)v60;
            v60 += 2;
            *v57++ = v62;
            --v61;
          }
          while (v61);
          goto LABEL_50;
        }
        uint64_t v59 = v44 & 0x7FFFFFF0;
        uint64_t v118 = 2 * (v44 & 0xFFFFFFF0);
        uint64_t v57 = (_WORD *)((char *)v57 + v118);
        uint64_t v60 = &a2[v118];
        uint64_t v119 = (long long *)(a2 + 16);
        uint64_t v120 = (_OWORD *)(v58 + 16);
        uint64_t v121 = v44 & 0xFFFFFFF0;
        do
        {
          long long v122 = *v119;
          *(v120 - 1) = *(v119 - 1);
          *uint64_t v120 = v122;
          v119 += 2;
          v120 += 2;
          v121 -= 16;
        }
        while (v121);
        if (v59 != v44) {
          goto LABEL_48;
        }
LABEL_50:
        int v54 = *(_DWORD *)(a1 + 340);
LABEL_51:
        int v63 = v54 + 1;
LABEL_62:
        int v72 = *(_DWORD *)(a1 + 344);
        int v73 = v63 % v72;
        *(_DWORD *)(a1 + 340) = v73;
        if (v73 == *(_DWORD *)(a1 + 336)) {
          *(_DWORD *)(a1 + 336) = (v73 + 1) % v72;
        }
        break;
      default:
        break;
    }
  }
  if (*(_DWORD *)(a1 + 364))
  {
    if (v5 != 4)
    {
      int v107 = *(_DWORD *)(a1 + 372);
      if (v107 < *(_DWORD *)(a1 + 368))
      {
        memcpy((void *)(*(void *)(a1 + 376) + 2 * *(_DWORD *)(a1 + 304) * v107), a2, 2 * *(int *)(a1 + 304));
        ++*(_DWORD *)(a1 + 372);
      }
    }
  }
  int v108 = *(_DWORD *)(a1 + 384);
  if (v108 >= 1)
  {
    uint64_t v109 = *(int *)(a1 + 400);
    uint64_t v110 = *(void *)(a1 + 392);
    if ((int)v109 >= v108)
    {
      uint64_t v109 = (v109 - 1);
      char v111 = 102;
    }
    else
    {
      *(_DWORD *)(a1 + 400) = v109 + 1;
      char v111 = 119;
    }
    *(unsigned char *)(v110 + v109) = v111;
  }
  if (v5 == 4)
  {
    *(_DWORD *)(a1 + 356) = 1;
    if (*(_DWORD *)(a1 + 6452))
    {
      *(_DWORD *)(a1 + 6452) = 0;
      sub_100039F58(*(void *)a1);
      *(_DWORD *)(a1 + 6460) = 0;
    }
    unsigned int v128 = 14;
  }
  else if (v5 == 2 && !*(_DWORD *)(a1 + 640))
  {
    *(_DWORD *)(a1 + 640) = 1;
    *(_DWORD *)(a1 + 644) = *(_DWORD *)(a1 + 240);
    if (*(_DWORD *)(a1 + 6452))
    {
      *(_DWORD *)(a1 + 6452) = 0;
      sub_100039F58(*(void *)a1);
      *(_DWORD *)(a1 + 6460) = 0;
    }
    unsigned int v128 = 0;
  }
  if (!*(_DWORD *)(a1 + 648)) {
    *(_DWORD *)(a1 + 648) = v5 == 3;
  }
  return v128;
}

uint64_t sub_100048EBC(uint64_t result, int a2, int a3)
{
  if (a2 == -2) {
    a2 = *(_DWORD *)(result + 6416);
  }
  uint64_t v3 = *(unsigned int *)(result + 708);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = *(void *)(result + 712) + 8;
    do
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5 == 0xFFFFFFFFLL) {
        break;
      }
      if (v5 == a2)
      {
        int v6 = *(_DWORD *)(v4 - 4);
        if (v6 >= a3) {
          int v6 = a3;
        }
        *(_DWORD *)uint64_t v4 = v6;
        return result;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_100048F1C(uint64_t a1, int a2, _DWORD *a3)
{
  int v3 = a2;
  if (a2 == -2) {
    int v3 = *(_DWORD *)(a1 + 6416);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 708);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = (void *)(*(void *)(a1 + 712) + 16);
    while (*v5 != 0xFFFFFFFFLL)
    {
      if (*v5 == v3)
      {
        *a3 = *((_DWORD *)v5 - 3);
        return 0;
      }
      v5 += 3;
      if (!--v4) {
        break;
      }
    }
  }
  if (*(void *)(a1 + 6416) == a2) {
    *a3 = *(_DWORD *)(a1 + 240);
  }
  else {
    *a3 = -1;
  }
  return 0;
}

uint64_t sub_100048FA4(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unsigned int v3 = a2;
  if (a2 == -2) {
    unsigned int v3 = *(_DWORD *)(a1 + 6416);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 708);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = v3;
    uint64_t v6 = *(void *)(a1 + 712) + 8;
    do
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7 == 0xFFFFFFFFLL) {
        break;
      }
      if (v7 == v5) {
        goto LABEL_10;
      }
      v6 += 24;
      --v4;
    }
    while (v4);
  }
  if (*(void *)(a1 + 6416) == a2)
  {
    uint64_t v6 = a1 + 240;
LABEL_10:
    *a3 = *(_DWORD *)v6;
    return 0;
  }
  else
  {
    *a3 = -1;
    return 0;
  }
}

uint64_t sub_100049020(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, void *a5)
{
  *a2 = 0;
  *a5 = 0;
  if (*(_DWORD *)(a1 + 6456))
  {
    uint64_t v7 = *(int **)(a1 + 256);
    return sub_1000B4B94(v7, a5);
  }
  else
  {
    if (*(_DWORD *)(a1 + 224) == *(_DWORD *)(a1 + 228) && *(void *)(a1 + 6416) == *(void *)(a1 + 6424))
    {
      int v12 = *(uint8x16_t **)(a1 + 184);
      while (1)
      {
        int v13 = sub_10005A778(*(void *)a1);
        int v14 = v13;
        if ((v13 - 5) > 1) {
          break;
        }
        int v15 = *(_DWORD *)(a1 + 6636);
        if (*(_DWORD *)(a1 + 724))
        {
          int v15 = v15 == 0;
          *(_DWORD *)(a1 + 6636) = v15;
        }
        if (!v15)
        {
          sub_100006910(*(void *)(a1 + 16), v12);
          sub_100047D54(a1, a1 + 176, v14 == 6);
          if (*(_DWORD *)(a1 + 348))
          {
            if (sub_100025D50(*(unsigned int **)(a1 + 440)) == 2)
            {
              *(_DWORD *)(a1 + 640) = 1;
              if (*(_DWORD *)(a1 + 6452))
              {
                *(_DWORD *)(a1 + 6452) = 0;
                sub_100039F58(*(void *)a1);
                *(_DWORD *)(a1 + 6460) = 0;
              }
            }
          }
          goto LABEL_21;
        }
      }
      if (v13 == 2 && *(_DWORD *)(a1 + 348) != 0) {
        *(_DWORD *)(a1 + 352) = 1;
      }
    }
LABEL_21:
    uint64_t v17 = *(int *)(a1 + 224);
    if (v17 == *(_DWORD *)(a1 + 228))
    {
      return 0;
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 192);
      int v19 = *(_DWORD *)(a1 + 232);
      *a2 = *(char *)(*(void *)(a1 + 200) + v17);
      *a5 = *(void *)(a1 + 296) + 4 * *(int *)(a1 + 224);
      if (a3)
      {
        int v20 = *(_DWORD *)(a1 + 224);
        int v21 = *(_DWORD *)(a1 + 228);
        if (v20 == v21)
        {
          int v22 = 0;
        }
        else
        {
          int v22 = 0;
          int v23 = 0;
          uint64_t v24 = *(void *)(a1 + 208);
          do
          {
            if (!*(unsigned char *)(v24 + v20)) {
              break;
            }
            if (v23 + *(unsigned __int8 *)(v24 + v20) > v22) {
              int v22 = v23 + *(unsigned __int8 *)(v24 + v20);
            }
            if (v20 + 1 == *(_DWORD *)(a1 + 236)) {
              int v20 = 0;
            }
            else {
              ++v20;
            }
            ++v23;
          }
          while (v20 != v21);
        }
        *a3 = v22;
      }
      if (a4)
      {
        uint64_t v25 = *(int *)(a1 + 224);
        uint64_t v26 = *(void *)(a1 + 208);
        int v27 = *(unsigned __int8 *)(v26 + v25);
        if (*(unsigned char *)(v26 + v25))
        {
          int v28 = *(_DWORD *)(a1 + 244);
          if (v25 == v28)
          {
            int v27 = 0;
          }
          else
          {
            int v27 = 0;
            do
            {
              if (!*(unsigned char *)(v26 + (int)v25)) {
                break;
              }
              if ((int)v25 <= 0) {
                LODWORD(v25) = *(_DWORD *)(a1 + 236);
              }
              LODWORD(v25) = v25 - 1;
              ++v27;
            }
            while (v25 != v28);
          }
        }
        *a4 = v27;
      }
      int v29 = *(_DWORD *)(a1 + 224);
      if (v29 + 1 == *(_DWORD *)(a1 + 236)) {
        int v30 = 0;
      }
      else {
        int v30 = v29 + 1;
      }
      *(_DWORD *)(a1 + 224) = v30;
      return v18 + v19 * (uint64_t)(int)v17;
    }
  }
}

BOOL sub_100049298(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 6456)) {
    return (int)sub_100064220(*(void *)(a1 + 256)) > 0;
  }
  else {
    return *(_DWORD *)(a1 + 224) != *(_DWORD *)(a1 + 228);
  }
}

uint64_t sub_1000492D8(uint64_t a1)
{
  sub_10005A720(*(void *)a1);
  *(_DWORD *)(a1 + 6252) = 0;
  int v2 = *(_DWORD *)(a1 + 228);
  *(_DWORD *)(a1 + 224) = v2;
  *(_DWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 244) = v2;
  *(void *)(a1 + 248) = -1;
  uint64_t v3 = *(void *)(a1 + 6432);
  *(void *)(a1 + 6432) = v3 + 1;
  *(void *)(a1 + 6416) = v3;
  uint64_t v4 = 1;
  if (*(int *)(a1 + 6248) >= 1)
  {
    uint64_t v5 = *(void *)(a1 + 6240);
    *(_DWORD *)(a1 + 6252) = 1;
    if (v5)
    {
      do
      {
        if (sub_100049470(a1) == 4) {
          uint64_t v4 = 0;
        }
        else {
          uint64_t v4 = v4;
        }
        int v6 = *(_DWORD *)(a1 + 6252);
        if (v6 >= *(_DWORD *)(a1 + 6248)) {
          break;
        }
        uint64_t v7 = *(void *)(a1 + 6240);
        *(_DWORD *)(a1 + 6252) = v6 + 1;
      }
      while (v7);
    }
  }
  sub_100039F58(*(void *)a1);
  sub_10005A728(*(void *)a1);
LABEL_9:
  uint64_t v8 = *(uint8x16_t **)(a1 + 184);
  while (1)
  {
    int v9 = sub_10005A778(*(void *)a1);
    if ((v9 - 5) > 1) {
      break;
    }
    int v10 = v9;
    int v11 = *(_DWORD *)(a1 + 6636);
    if (*(_DWORD *)(a1 + 724))
    {
      int v11 = v11 == 0;
      *(_DWORD *)(a1 + 6636) = v11;
    }
    if (!v11)
    {
      sub_100006910(*(void *)(a1 + 16), v8);
      int v12 = *(_DWORD *)(a1 + 228);
      if (v12 + 1 == *(_DWORD *)(a1 + 236)) {
        int v13 = 0;
      }
      else {
        int v13 = v12 + 1;
      }
      if (v13 == *(_DWORD *)(a1 + 224)) {
        uint64_t v4 = 0;
      }
      else {
        sub_100047D54(a1, a1 + 176, v10 == 6);
      }
      goto LABEL_9;
    }
  }
  sub_100047FFC((unsigned int *)a1, *(_DWORD *)(a1 + 6416), 1);
  return v4;
}

uint64_t sub_100049470(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 228);
  if (v1 + 1 == *(_DWORD *)(a1 + 236)) {
    int v2 = 0;
  }
  else {
    int v2 = v1 + 1;
  }
  if (v2 == *(_DWORD *)(a1 + 224))
  {
    return 4;
  }
  else
  {
    int v6 = sub_10005A730(*(void *)a1);
    if (*(_DWORD *)(a1 + 724)) {
      int v6 = sub_10005A730(*(void *)a1);
    }
    int v7 = v6;
    if (v6 == 7)
    {
      *(_DWORD *)(a1 + 6440) = 1;
      uint64_t v8 = *(void *)(a1 + 5512);
      if (v8) {
        sub_100039A78(v8);
      }
      sub_10005A718(*(void *)a1);
      int v15 = *(_DWORD *)(a1 + 244);
      *(_DWORD *)(a1 + 224) = v15;
      *(_DWORD *)(a1 + 228) = v15;
      *(_DWORD *)(a1 + 240) = 0;
      *(void *)(a1 + 248) = -1;
      *(_DWORD *)(a1 + 348) = 1;
      *(void *)(a1 + 352) = 0;
      *(void *)(a1 + 648) = 0;
      *(_DWORD *)(a1 + 6636) = 0;
      *(_DWORD *)(a1 + 6440) = 0;
      return 3;
    }
    else
    {
      if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1984)) {
        sub_10005A7B0(*(void *)a1, 1);
      }
      if ((v7 - 5) <= 1)
      {
        if (*(_DWORD *)(a1 + 6452))
        {
          int v9 = *(_DWORD *)(a1 + 6460);
          if (v7 == 5) {
            *(_DWORD *)(a1 + 6460) = ++v9;
          }
          uint64_t v10 = qword_100101CC0;
          if (qword_100101CC0) {
            uint64_t v10 = *(void *)(qword_100101CC0 + 1880);
          }
          if (v10 <= v9)
          {
            *(_DWORD *)(a1 + 6452) = 0;
            sub_100039F58(*(void *)a1);
            *(_DWORD *)(a1 + 6460) = 0;
          }
        }
        if (!*(_DWORD *)(a1 + 360) || *(_DWORD *)(a1 + 5672) || *(_DWORD *)(a1 + 752) == 6)
        {
          int v11 = *(uint8x16_t **)(a1 + 184);
          while (1)
          {
            int v12 = sub_10005A778(*(void *)a1);
            if ((v12 - 5) > 1) {
              break;
            }
            int v13 = v12;
            int v14 = *(_DWORD *)(a1 + 6636);
            if (*(_DWORD *)(a1 + 724))
            {
              int v14 = v14 == 0;
              *(_DWORD *)(a1 + 6636) = v14;
            }
            if (!v14)
            {
              sub_100006910(*(void *)(a1 + 16), v11);
              BOOL v16 = v13 == 6;
LABEL_34:
              int v17 = v16;
              uint64_t v3 = sub_100047D54(a1, a1 + 176, v17);
              int v18 = *(_DWORD *)(a1 + 228);
              if (v18 + 1 == *(_DWORD *)(a1 + 236)) {
                int v19 = 0;
              }
              else {
                int v19 = v18 + 1;
              }
              if (v19 != *(_DWORD *)(a1 + 224))
              {
                int v20 = *(uint8x16_t **)(a1 + 184);
                while (1)
                {
                  int v21 = sub_10005A778(*(void *)a1);
                  if ((v21 - 5) > 1) {
                    break;
                  }
                  int v22 = v21;
                  int v23 = *(_DWORD *)(a1 + 6636);
                  if (*(_DWORD *)(a1 + 724))
                  {
                    int v23 = v23 == 0;
                    *(_DWORD *)(a1 + 6636) = v23;
                  }
                  if (!v23)
                  {
                    sub_100006910(*(void *)(a1 + 16), v20);
                    BOOL v16 = v22 == 6;
                    goto LABEL_34;
                  }
                }
              }
              return v3;
            }
          }
        }
      }
      return 5;
    }
  }
}

uint64_t sub_10004971C(uint64_t a1, int a2)
{
  if (a2 == -2) {
    a2 = *(_DWORD *)(a1 + 6416);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 708);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    int v5 = 0;
    int v6 = *(_DWORD **)(a1 + 256);
    uint64_t v7 = *(void *)(a1 + 712);
    uint64_t v8 = 24 * v3;
    do
    {
      uint64_t v9 = *(void *)(v7 + v4 + 16);
      if (v9 == 0xFFFFFFFFLL) {
        break;
      }
      if (v9 == a2)
      {
        uint64_t v10 = (int *)(v7 + v4);
        if (*(_DWORD *)(v7 + v4 + 4) + v5 >= *(_DWORD *)(a1 + 236)) {
          return 0;
        }
        int v11 = v10[2];
        if (!v11) {
          int v11 = *(_DWORD *)(v7 + v4 + 4);
        }
        sub_1000B4CA0(v6, *v10, v11);
        *(void *)(a1 + 6416) = *(void *)(*(void *)(a1 + 712) + v4 + 16);
        return 1;
      }
      v5 += *(_DWORD *)(v7 + v4 + 4);
      v4 += 24;
    }
    while (v8 != v4);
  }
  return 0;
}

uint64_t sub_1000497FC(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if (*(_DWORD *)(a1 + 6456))
  {
    uint64_t result = sub_10009F2BC(*(void *)(a1 + 256));
    *a3 = result;
    *a4 = result;
    *a2 = 0;
  }
  else
  {
    uint64_t result = sub_10005A790(*(void *)a1);
    *a2 += *(_DWORD *)(a1 + 236);
    *a3 += (*(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 224) + *(_DWORD *)(a1 + 236)) % *(_DWORD *)(a1 + 236);
    *a4 += *(_DWORD *)(a1 + 264);
  }
  return result;
}

BOOL sub_1000498B4(uint64_t a1)
{
  uint64_t v2 = sub_10005EFFC(*(void *)(a1 + 8));
  *(void *)(a1 + 64) = v2;
  return v2 == 0;
}

uint64_t sub_1000498E8(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  return 0;
}

uint64_t sub_100049918(uint64_t a1, const char *a2, int a3)
{
  if ((a3 - 6) < 0xFFFFFFFD) {
    return 4;
  }
  uint64_t v6 = sub_1000CB30C(a2);
  if (!v6) {
    return 3;
  }
  uint64_t v14 = v6;
  int v15 = (unsigned char *)sub_1000CD3E8(13, v7, v8, v9, v10, v11, v12, v13);
  *(void *)int v15 = 0;
  *(void *)(v15 + 5) = 0;
  *int v15 = *(void *)(a1 + 48) != 0;
  v15[1] = *(void *)(a1 + 80) != 0;
  v15[2] = *(void *)(a1 + 72) != 0;
  v15[3] = *(void *)(a1 + 64) != 0;
  v15[4] = *(void *)(a1 + 24) != 0;
  v15[5] = *(void *)(a1 + 40) != 0;
  v15[7] = *(void *)(a1 + 104) != 0;
  v15[8] = *(void *)(a1 + 112) != 0;
  v15[9] = *(void *)(a1 + 136) != 0;
  v15[10] = *(void *)(a1 + 144) != 0;
  v15[11] = *(void *)(a1 + 120) != 0;
  v15[12] = *(void *)(a1 + 56) != 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  unsigned __int32 v39 = 0;
  if (!sub_100042AE0(v14, &v39, &v43, (_DWORD *)&v44 + 1, &v44, (_DWORD *)&v43 + 1, (_DWORD *)&v42 + 1, (unsigned __int32 *)&v42, (_DWORD *)&v41 + 1, &v41, 0, 0, 0, 5, v40, 13, v15))goto LABEL_45; {
  int v16 = v43;
  }
  if (v16 != sub_10009CAEC()) {
    goto LABEL_45;
  }
  int v17 = sub_10009CAD0();
  if (v44 != v17 && !v43) {
    goto LABEL_45;
  }
  if (HIDWORD(v44) != v17 && !v43) {
    goto LABEL_45;
  }
  if (v44 != *(_DWORD *)(a1 + 156))
  {
    if (!v43) {
      goto LABEL_45;
    }
    *(_DWORD *)(a1 + 156) = v44;
  }
  if (v39 != a3) {
    goto LABEL_45;
  }
  unsigned int v18 = a3 - 3;
  if ((a3 - 3) <= 1)
  {
    if (!sub_10005A944(*(void *)a1)
      || !sub_10001C6B0(*(void *)(a1 + 16), v14, 0, 0, 0, v19, v20, v21)
      || v15[4] && !sub_10001C6B0(*(void *)(a1 + 24), v14, 0, 1, 0, v24, v25, v26)
      || v15[5] && !sub_10001C6B0(*(void *)(a1 + 40), v14, 0, 0, 1, v24, v25, v26))
    {
      goto LABEL_45;
    }
    if (a3 != 3)
    {
      unsigned int v36 = 3;
LABEL_55:
      if (!sub_100023DD8(*(void *)(a1 + 6408), v14, 0, v22, v23, v24, v25, v26)) {
        goto LABEL_46;
      }
LABEL_56:
      unsigned int v36 = 0;
      goto LABEL_46;
    }
  }
  if (!sub_1000BE308(*(uint64_t **)(a1 + 8), v14, 0)) {
    goto LABEL_45;
  }
  if (a3 == 5)
  {
    uint64_t v32 = 0;
  }
  else
  {
    if (a3 != 3)
    {
      unsigned int v36 = 3;
      goto LABEL_52;
    }
    uint64_t v27 = *(void *)(a1 + 104);
    if (v27 && !sub_100039550(v27)) {
      goto LABEL_45;
    }
    uint64_t v28 = *(void *)(a1 + 112);
    if (v28)
    {
      if (!sub_100039550(v28)) {
        goto LABEL_45;
      }
    }
    uint64_t v29 = *(void *)(a1 + 136);
    if (v29)
    {
      if (!sub_100039550(v29)) {
        goto LABEL_45;
      }
    }
    uint64_t v30 = *(void *)(a1 + 144);
    if (v30)
    {
      if (!sub_100039550(v30)) {
        goto LABEL_45;
      }
    }
    uint64_t v31 = *(void *)(a1 + 120);
    if (v31)
    {
      if (!sub_100039550(v31)) {
        goto LABEL_45;
      }
    }
    uint64_t v32 = 1;
  }
  uint64_t v33 = *(void *)(a1 + 64);
  if (v33)
  {
    if (!sub_100060304(v33, v14, 0)) {
      goto LABEL_45;
    }
  }
  uint64_t v34 = *(_DWORD **)(a1 + 80);
  if (v34)
  {
    if (!sub_100035F78(v34, v14, 0, *(void *)(a1 + 64), v32, v24, v25, v26)) {
      goto LABEL_45;
    }
  }
  uint64_t v35 = *(void *)(a1 + 72);
  if (!v35)
  {
    unsigned int v36 = 3;
    goto LABEL_58;
  }
  if (!sub_10002FCD8(v35, v14, 0, *(void *)(a1 + 8), *(void *)(a1 + 80), v24, v25, v26))
  {
LABEL_45:
    unsigned int v36 = 3;
    goto LABEL_46;
  }
  unsigned int v36 = sub_100043CA8(a1);
LABEL_58:
  int v38 = *(uint64_t **)(a1 + 56);
  if (!v38 || sub_10005D7E4(v38, v14, 0, v22, v23, v24, v25, v26))
  {
LABEL_52:
    if (v18 > 1) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
LABEL_46:
  if (sub_1000CB808(v14)) {
    uint64_t v3 = 3;
  }
  else {
    uint64_t v3 = v36;
  }
  sub_1000CD4D0(v15, 13);
  return v3;
}

uint64_t sub_100049D38(uint64_t a1, const char *a2)
{
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  if (a1)
  {
    uint64_t v11 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v10 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v7 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v8 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v9);
    nullsub_1(v8);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    int v5 = (int *)sub_1000C0C70();
    if (setjmp(v5))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (!sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v6 = 1;
        goto LABEL_18;
      }
      if (a2)
      {
        if (*(_DWORD *)(a1 + 6448) || *(_DWORD *)(a1 + 348))
        {
          int v6 = 7;
        }
        else
        {
          unsigned int v12 = sub_100049F20(a1, a2);
          int v6 = v12;
        }
        goto LABEL_18;
      }
    }
    int v6 = 4;
LABEL_18:
    unsigned int v12 = v6;
    sub_1000C0CD8();
    goto LABEL_9;
  }
  uint64_t v11 = sub_1000C2EA8(0);
  uint64_t v10 = sub_1000CD350(0);
  uint64_t v7 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v8 = sub_1000D2948(0, 0, &v9);
  nullsub_1(v8);
LABEL_8:
  unsigned int v12 = 1;
LABEL_9:
  sub_100051144(v12);
  sub_1000D2948(v8, v9, 0);
  sub_1000C0D2C(v7);
  sub_1000CD350(v10);
  sub_1000C2EA8(v11);
  return v12;
}

uint64_t sub_100049F20(uint64_t a1, const char *a2)
{
  uint64_t v3 = sub_1000CBE14(a2);
  if (!v3) {
    return 9;
  }
  uint64_t v11 = v3;
  unsigned int v12 = (unsigned char *)sub_1000CD3E8(13, v4, v5, v6, v7, v8, v9, v10);
  *(void *)unsigned int v12 = 0;
  *(void *)(v12 + 5) = 0;
  unsigned char *v12 = *(void *)(a1 + 48) != 0;
  v12[1] = *(void *)(a1 + 80) != 0;
  v12[2] = *(void *)(a1 + 72) != 0;
  v12[3] = *(void *)(a1 + 64) != 0;
  v12[4] = *(void *)(a1 + 24) != 0;
  v12[5] = *(void *)(a1 + 40) != 0;
  v12[7] = *(void *)(a1 + 104) != 0;
  v12[8] = *(void *)(a1 + 112) != 0;
  v12[9] = *(void *)(a1 + 136) != 0;
  v12[10] = *(void *)(a1 + 144) != 0;
  v12[11] = *(void *)(a1 + 120) != 0;
  v12[12] = *(void *)(a1 + 56) != 0;
  uint64_t result = sub_1000428D4(a1, v11, 3, 0xDu, v12);
  if (!result)
  {
    if (!sub_10005A93C(*(void *)a1)
      || !sub_10001C2A4(*(void *)(a1 + 16), v11, 0, 0, 0)
      || v12[4] && !sub_10001C2A4(*(void *)(a1 + 24), v11, 0, 1, 0))
    {
      goto LABEL_33;
    }
    if (v12[5] && !sub_10001C2A4(*(void *)(a1 + 40), v11, 0, 0, 1)) {
      goto LABEL_33;
    }
    if (!sub_1000BE29C(*(uint64_t **)(a1 + 8), v11, 0)) {
      goto LABEL_33;
    }
    uint64_t v19 = *(void *)(a1 + 104);
    if (v19)
    {
      if (!sub_10003953C(v19)) {
        goto LABEL_33;
      }
    }
    uint64_t v20 = *(void *)(a1 + 112);
    if (v20 && !sub_10003953C(v20)) {
      goto LABEL_33;
    }
    if (((uint64_t v21 = *(void *)(a1 + 136)) == 0 || sub_10003953C(v21))
      && ((uint64_t v22 = *(void *)(a1 + 144)) == 0 || sub_10003953C(v22))
      && ((uint64_t v23 = *(void *)(a1 + 120)) == 0 || sub_10003953C(v23))
      && ((uint64_t v24 = *(void *)(a1 + 64)) == 0 || sub_10005FC8C(v24, v11, 0))
      && ((uint64_t v25 = *(void *)(a1 + 80)) == 0 || sub_100035A48(v25, v11, 0, v14, v15, v16, v17, v18))
      && ((uint64_t v26 = *(void *)(a1 + 72)) == 0 || sub_10002FB10(v26, v11, 0))
      && ((uint64_t v27 = *(void *)(a1 + 56)) == 0 || sub_10005D518(v27, v11, 0)))
    {
      if (sub_100023D50(*(void *)(a1 + 6408), v11, 0)) {
        unsigned int v28 = 0;
      }
      else {
        unsigned int v28 = 9;
      }
    }
    else
    {
LABEL_33:
      unsigned int v28 = 9;
    }
    if (sub_1000CB808(v11)) {
      uint64_t v29 = 9;
    }
    else {
      uint64_t v29 = v28;
    }
    sub_1000CD4D0(v12, 13);
    return v29;
  }
  return result;
}

uint64_t sub_10004A238(uint64_t a1, const char *a2, const char *a3)
{
  unsigned int v14 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    uint64_t v13 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v12 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v9 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v10 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v11);
    nullsub_1(v10);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v7 = (int *)sub_1000C0C70();
    if (setjmp(v7))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (!sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v8 = 1;
        goto LABEL_18;
      }
      if ((unint64_t)a2 | (unint64_t)a3)
      {
        if (*(_DWORD *)(a1 + 6448) || *(_DWORD *)(a1 + 348))
        {
          int v8 = 7;
        }
        else
        {
          if (a2) {
            unsigned int v14 = sub_100049918(a1, a2, 4);
          }
          if (!v14)
          {
            if (a3) {
              unsigned int v14 = sub_100049918(a1, a3, 5);
            }
          }
          int v8 = v14;
        }
        goto LABEL_18;
      }
    }
    int v8 = 4;
LABEL_18:
    unsigned int v14 = v8;
    sub_1000C0CD8();
    goto LABEL_9;
  }
  uint64_t v13 = sub_1000C2EA8(0);
  uint64_t v12 = sub_1000CD350(0);
  uint64_t v9 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v10 = sub_1000D2948(0, 0, &v11);
  nullsub_1(v10);
LABEL_8:
  unsigned int v14 = 1;
LABEL_9:
  sub_100051144(v14);
  sub_1000D2948(v10, v11, 0);
  sub_1000C0D2C(v9);
  sub_1000CD350(v12);
  sub_1000C2EA8(v13);
  return v14;
}

uint64_t sub_10004A458(uint64_t a1, const char *a2, const char *a3)
{
  unsigned int v14 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    uint64_t v13 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v12 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v9 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v10 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v11);
    nullsub_1(v10);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v7 = (int *)sub_1000C0C70();
    if (setjmp(v7))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (!sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v8 = 1;
        goto LABEL_18;
      }
      if ((unint64_t)a2 | (unint64_t)a3)
      {
        if (*(_DWORD *)(a1 + 6448) || *(_DWORD *)(a1 + 348))
        {
          int v8 = 7;
        }
        else
        {
          unsigned int v14 = 0;
          if (!a2 || (unsigned int v14 = sub_10004A670((uint64_t *)a1, a2)) == 0)
          {
            if (a3) {
              unsigned int v14 = sub_10004A874(a1, a3);
            }
          }
          int v8 = v14;
        }
        goto LABEL_18;
      }
    }
    int v8 = 4;
LABEL_18:
    unsigned int v14 = v8;
    sub_1000C0CD8();
    goto LABEL_9;
  }
  uint64_t v13 = sub_1000C2EA8(0);
  uint64_t v12 = sub_1000CD350(0);
  uint64_t v9 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v10 = sub_1000D2948(0, 0, &v11);
  nullsub_1(v10);
LABEL_8:
  unsigned int v14 = 1;
LABEL_9:
  sub_100051144(v14);
  sub_1000D2948(v10, v11, 0);
  sub_1000C0D2C(v9);
  sub_1000CD350(v12);
  sub_1000C2EA8(v13);
  return v14;
}

uint64_t sub_10004A670(uint64_t *a1, const char *a2)
{
  uint64_t v3 = sub_1000CBE14(a2);
  if (!v3) {
    return 9;
  }
  uint64_t v11 = v3;
  uint64_t v12 = (unsigned char *)sub_1000CD3E8(13, v4, v5, v6, v7, v8, v9, v10);
  *(void *)uint64_t v12 = 0;
  *(void *)(v12 + 5) = 0;
  unsigned char *v12 = a1[6] != 0;
  v12[1] = a1[10] != 0;
  v12[2] = a1[9] != 0;
  v12[3] = a1[8] != 0;
  v12[4] = a1[3] != 0;
  v12[5] = a1[5] != 0;
  v12[7] = a1[13] != 0;
  v12[8] = a1[14] != 0;
  v12[9] = a1[17] != 0;
  v12[10] = a1[18] != 0;
  v12[11] = a1[15] != 0;
  v12[12] = a1[7] != 0;
  unsigned int v13 = sub_1000428D4((uint64_t)a1, v11, 4, 0xDu, v12);
  if (!v13)
  {
    if (sub_10005A93C(*a1)
      && sub_10001C2A4(a1[2], v11, 0, 0, 0)
      && (!v12[4] || sub_10001C2A4(a1[3], v11, 0, 1, 0))
      && (!v12[5] || sub_10001C2A4(a1[5], v11, 0, 0, 1)))
    {
      if (sub_100023D50(a1[801], v11, 0)) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = 9;
      }
    }
    else
    {
      unsigned int v13 = 9;
    }
  }
  if (sub_1000CB808(v11)) {
    uint64_t v15 = 9;
  }
  else {
    uint64_t v15 = v13;
  }
  sub_1000CD4D0(v12, 13);
  return v15;
}

uint64_t sub_10004A874(uint64_t a1, const char *a2)
{
  uint64_t v3 = sub_1000CBE14(a2);
  if (!v3) {
    return 9;
  }
  uint64_t v11 = v3;
  uint64_t v12 = (char *)sub_1000CD3E8(13, v4, v5, v6, v7, v8, v9, v10);
  *(void *)uint64_t v12 = 0;
  *(void *)(v12 + 5) = 0;
  char *v12 = *(void *)(a1 + 48) != 0;
  v12[1] = *(void *)(a1 + 80) != 0;
  v12[2] = *(void *)(a1 + 72) != 0;
  v12[3] = *(void *)(a1 + 64) != 0;
  v12[4] = *(void *)(a1 + 24) != 0;
  v12[5] = *(void *)(a1 + 40) != 0;
  v12[7] = *(void *)(a1 + 104) != 0;
  v12[8] = *(void *)(a1 + 112) != 0;
  v12[9] = *(void *)(a1 + 136) != 0;
  v12[10] = *(void *)(a1 + 144) != 0;
  v12[11] = *(void *)(a1 + 120) != 0;
  v12[12] = *(void *)(a1 + 56) != 0;
  unsigned int v13 = sub_1000428D4(a1, v11, 5, 0xDu, v12);
  if (!v13)
  {
    if (!sub_1000BE29C(*(uint64_t **)(a1 + 8), v11, 0)) {
      goto LABEL_24;
    }
    uint64_t v19 = *(void *)(a1 + 104);
    if (v19)
    {
      if (!sub_10003953C(v19)) {
        goto LABEL_24;
      }
    }
    uint64_t v20 = *(void *)(a1 + 112);
    if (v20 && !sub_10003953C(v20)) {
      goto LABEL_24;
    }
    if (((uint64_t v21 = *(void *)(a1 + 136)) == 0 || sub_10003953C(v21))
      && ((uint64_t v22 = *(void *)(a1 + 144)) == 0 || sub_10003953C(v22))
      && ((uint64_t v23 = *(void *)(a1 + 120)) == 0 || sub_10003953C(v23))
      && ((uint64_t v24 = *(void *)(a1 + 64)) == 0 || sub_10005FC8C(v24, v11, 0))
      && ((uint64_t v25 = *(void *)(a1 + 80)) == 0 || sub_100035A48(v25, v11, 0, v14, v15, v16, v17, v18))
      && ((uint64_t v26 = *(void *)(a1 + 72)) == 0 || sub_10002FB10(v26, v11, 0))
      && ((uint64_t v27 = *(void *)(a1 + 56)) == 0 || sub_10005D518(v27, v11, 0)))
    {
      unsigned int v13 = 0;
    }
    else
    {
LABEL_24:
      unsigned int v13 = 9;
    }
  }
  if (sub_1000CB808(v11)) {
    uint64_t v29 = 9;
  }
  else {
    uint64_t v29 = v13;
  }
  sub_1000CD4D0(v12, 13);
  return v29;
}

uint64_t sub_10004AAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_100101CC0)
  {
    uint64_t v9 = *(unsigned int *)(qword_100101CC0 + 1136);
    int v10 = *(_DWORD *)(qword_100101CC0 + 1152);
    *(_DWORD *)(a1 + 5500) = 0;
    if (!*(void *)(a1 + 104)) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 0;
    *(_DWORD *)(a1 + 5500) = 0;
    if (!*(void *)(a1 + 104)) {
      goto LABEL_6;
    }
  }
  uint64_t result = (uint64_t)sub_1000403E4(v10, v9, a3, a4, a5, a6, a7, a8);
  *(void *)(a1 + 800) = result;
  if (!result) {
    return result;
  }
LABEL_6:
  if (*(void *)(a1 + 112))
  {
    uint64_t result = (uint64_t)sub_1000403E4(v10, v9, a3, a4, a5, a6, a7, a8);
    *(void *)(a1 + 808) = result;
    if (!result) {
      return result;
    }
  }
  uint64_t result = sub_1000C33A0(28);
  *(void *)(a1 + 768) = result;
  if (!result) {
    return result;
  }
  if ((int)sub_100011B24(*(void *)(a1 + 16)) < 1)
  {
    *(void *)(a1 + 5480) = 0;
  }
  else
  {
    int v12 = sub_100011B24(*(void *)(a1 + 16));
    uint64_t result = sub_1000C33A0(v12);
    *(void *)(a1 + 5480) = result;
    if (!result) {
      return result;
    }
  }
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 816) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 832) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 848) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 864) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 880) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 896) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 912) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 928) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 944) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 960) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 976) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 992) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 1008) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 1024) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 1040) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 1056) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 1072) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 1088) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 1104) = xmmword_1000F49A0;
  *(_OWORD *)(a1 + 1120) = xmmword_1000F49A0;
  *(void *)&long long v13 = -1;
  *((void *)&v13 + 1) = -1;
  *(_OWORD *)(a1 + 1280) = v13;
  *(_OWORD *)(a1 + 1264) = v13;
  *(_OWORD *)(a1 + 1248) = v13;
  *(_OWORD *)(a1 + 1232) = v13;
  *(_OWORD *)(a1 + 1216) = v13;
  *(_OWORD *)(a1 + 1200) = v13;
  *(_OWORD *)(a1 + 1184) = v13;
  *(_OWORD *)(a1 + 1168) = v13;
  *(_OWORD *)(a1 + 1152) = v13;
  *(_OWORD *)(a1 + 1136) = v13;
  if (!qword_100101CC0) {
    goto LABEL_27;
  }
  uint64_t v14 = *(void *)(qword_100101CC0 + 2144);
  if (v14)
  {
    uint64_t result = sub_1000C33A0(4 * (int)v14);
    *(void *)(a1 + 1304) = result;
    if (!result) {
      return result;
    }
    uint64_t result = sub_1000C33A0((uint64_t)(int)v14 << 7);
    *(void *)(a1 + 1312) = result;
    if (!result) {
      return result;
    }
    *(_DWORD *)(a1 + 1296) = v14;
    if ((int)v14 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      do
      {
        *(_DWORD *)(*(void *)(a1 + 1304) + v15) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16) = 0;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 4) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 88) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 48) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 8) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 92) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 52) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 12) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 96) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 56) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 16) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 100) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 60) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 20) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 104) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 64) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 24) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 108) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 68) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 28) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 112) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 72) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 32) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 116) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 76) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 36) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 120) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 80) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 40) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 124) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 84) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 44) = 0x40000000;
        v16 += 128;
        v15 += 4;
      }
      while ((unint64_t)v14 << 7 != v16);
    }
  }
  if (!qword_100101CC0)
  {
LABEL_27:
    *(_DWORD *)(a1 + 5496) = 0;
    *(void *)(a1 + 5488) = 0;
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(qword_100101CC0 + 2160);
  *(_DWORD *)(a1 + 5496) = v17;
  *(void *)(a1 + 5488) = 0;
  if ((int)v17 < 1)
  {
LABEL_28:
    *(void *)(a1 + 5500) = 0xFFFFFFFF00000001;
    return 1;
  }
  uint64_t result = sub_1000C33A0((unint64_t)v17 << 6);
  *(void *)(a1 + 5488) = result;
  if (result)
  {
    if (*(int *)(a1 + 5496) >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      do
      {
        *(_DWORD *)(*(void *)(a1 + 5488) + v18 + 32) = -1;
        *(_DWORD *)(*(void *)(a1 + 5488) + v18) = 0;
        *(_DWORD *)(*(void *)(a1 + 5488) + v18 + 4) = 1;
        ++v19;
        v18 += 64;
      }
      while (v19 < *(int *)(a1 + 5496));
    }
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_10004AEB8(uint64_t a1)
{
  sub_100043A0C(a1);
  *(_DWORD *)(a1 + 5500) = 0;
  sub_1000C321C(*(void *)(a1 + 1304));
  *(void *)(a1 + 1304) = 0;
  sub_1000C321C(*(void *)(a1 + 1312));
  *(void *)(a1 + 1312) = 0;
  uint64_t v2 = *(void *)(a1 + 5488);
  if (v2)
  {
    if (*(int *)(a1 + 5496) >= 1)
    {
      int v3 = 0;
      do
        sub_10005044C(v2, v3++);
      while (v3 < *(_DWORD *)(a1 + 5496));
      uint64_t v2 = *(void *)(a1 + 5488);
    }
    sub_1000C321C(v2);
    *(void *)(a1 + 5488) = 0;
  }
  sub_1000C321C(*(void *)(a1 + 768));
  *(void *)(a1 + 768) = 0;
  sub_1000C321C(*(void *)(a1 + 784));
  *(void *)(a1 + 784) = 0;
  sub_1000C321C(*(void *)(a1 + 5480));
  *(void *)(a1 + 5480) = 0;
  sub_1000C321C(*(void *)(a1 + 5424));
  sub_1000C321C(*(void *)(a1 + 5432));
  sub_1000C321C(*(void *)(a1 + 5440));
  *(_DWORD *)(a1 + 5448) = 0;
  *(void *)(a1 + 5440) = 0;
  *(_OWORD *)(a1 + 5424) = 0u;
  sub_100040530(*(void *)(a1 + 808));
  *(void *)(a1 + 808) = 0;
  sub_100040530(*(void *)(a1 + 800));
  *(void *)(a1 + 800) = 0;
  uint64_t v4 = *(void *)(a1 + 5456);
  if (v4)
  {
    sub_10002F85C(*(void *)(a1 + 72), v4);
    *(void *)(a1 + 5456) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 5464);
  return sub_1000C321C(v5);
}

uint64_t sub_10004AFD0(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = a2 & ~(a2 >> 31);
  if ((int)v5 >= a4) {
    int v6 = a4;
  }
  else {
    int v6 = a2 & ~(a2 >> 31);
  }
  *(_DWORD *)(result + 776) = v6;
  if (v6 >= 1)
  {
    uint64_t v8 = result;
    uint64_t v9 = 0;
    uint64_t v10 = a4;
    if (a4 >= v5) {
      uint64_t v10 = a2 & ~(a2 >> 31);
    }
    uint64_t v11 = a3 - 4 * v10 + 4 * v5;
    do
    {
      *(_DWORD *)(*(void *)(result + 768) + 4 * v9) = *(_DWORD *)(v11 + 4 * v9);
      ++v9;
      uint64_t v12 = *(int *)(result + 776);
    }
    while (v9 < v12);
    if ((int)v12 >= 1)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t result = sub_1000B5A58(*(void *)(v8 + 8), *(_DWORD *)(*(void *)(v8 + 768) + 4 * v13));
        *(_WORD *)(a5 + 2 * v13++) = result;
      }
      while (v13 < *(int *)(v8 + 776));
    }
  }
  return result;
}

uint64_t sub_10004B07C(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  unsigned int v100 = 0;
  int v99 = a3;
  int v98 = 1;
  int v97 = 0;
  int v96 = a4;
  int v95 = a6;
  uint64_t v94 = 0;
  uint64_t v93 = 0;
  uint64_t v92 = 0;
  if (a1)
  {
    uint64_t v94 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v93 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v90 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v91 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v92);
    nullsub_1(v91);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v12 = (int *)sub_1000C0C70();
    if (setjmp(v12))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic")) {
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 8160))
    {
      int v13 = 1;
      goto LABEL_108;
    }
    sub_100047C58(a1, 114);
    memset(v101, 0, 14);
    *(_DWORD *)(a1 + 6448) = 0;
    *(_DWORD *)(a1 + 6464) = 0;
    if (*(_DWORD *)(a1 + 5500))
    {
      uint64_t v20 = (uint64_t *)(!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112) ? a1 + 808 : a1 + 800);
      uint64_t v21 = *v20;
      *(void *)(v21 + 136) = 0;
      *(_DWORD *)(v21 + 128) = 0;
      *(_DWORD *)(v21 + 4) = -1;
      *(void *)(v21 + 88) = 0x7FFFFFFF00000000;
      *(void *)(v21 + 104) = 0;
      *(_DWORD *)(v21 + 112) = -1;
      if (*(_DWORD *)(a1 + 5500)) {
        goto LABEL_22;
      }
    }
    if (v99 == 6)
    {
LABEL_22:
      if (!*(_DWORD *)(a1 + 96) || v99 == 6)
      {
        if (!a5 && v96 >= 1 || v95 >= 1025 || !v99 || v95 >= 1024)
        {
LABEL_11:
          int v13 = 4;
          goto LABEL_108;
        }
        uint64_t v22 = a2;
        *(void *)(a1 + 6424) = a2;
        if (*(_DWORD *)(a1 + 6472))
        {
          if (*(void *)(a1 + 6416) == a2)
          {
            uint64_t v23 = *(char **)(a1 + 5480);
            if (v23) {
              sub_100011B40(*(void *)(a1 + 16), v23);
            }
          }
        }
        if (qword_100101CC0 && (*(_DWORD *)(qword_100101CC0 + 2024) || *(_DWORD *)(qword_100101CC0 + 2212))) {
          int v97 = 1;
        }
        if (*(_DWORD *)(a1 + 6468) && *(void *)(a1 + 6416) == a2 && v99 != 7) {
          sub_1000112EC(*(void *)(a1 + 16), v97);
        }
        uint64_t v24 = *(void *)(a1 + 104);
        *(void *)(a1 + 5512) = v24;
        if ((v99 - 2) > 8) {
          int v25 = 1;
        }
        else {
          int v25 = dword_1000F49B0[v99 - 2];
        }
        *(_DWORD *)(a1 + 756) = v25;
        *(_DWORD *)(a1 + 752) = v99;
        *(_DWORD *)(a1 + 1320) = 0;
        *(_DWORD *)(a1 + 6476) = 0;
        uint64_t v26 = (uint64_t *)(a1 + 5456);
        uint64_t v27 = *(void *)(a1 + 5456);
        if (v27)
        {
          if (v24)
          {
            sub_1000396A8(v24);
            uint64_t v27 = *v26;
          }
          uint64_t v28 = *(void *)(a1 + 120);
          if (v28)
          {
            sub_1000396A8(v28);
            uint64_t v27 = *v26;
          }
          uint64_t v29 = *(void *)(a1 + 112);
          if (v29)
          {
            sub_1000396A8(v29);
            uint64_t v27 = *v26;
          }
          sub_10002F85C(*(void *)(a1 + 72), v27);
          *(void *)(a1 + 5456) = 0;
        }
        int v30 = *(_DWORD *)(a1 + 5672);
        if (!v30 || v99 == 8 || v99 == 9)
        {
          if (v99 == 8 || v99 == 9)
          {
            if (!v30)
            {
              *(void *)(a1 + 5512) = 0;
              int v13 = 11;
              goto LABEL_108;
            }
            *(void *)(a1 + 5512) = *(void *)(a1 + 112);
            unsigned int v100 = sub_100040E14(a1);
            *(_DWORD *)(a1 + 5688) = 1;
LABEL_59:
            if (*(_DWORD *)(a1 + 5500))
            {
              if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
                uint64_t v31 = (uint64_t *)(a1 + 808);
              }
              else {
                uint64_t v31 = (uint64_t *)(a1 + 800);
              }
              uint64_t v46 = *v31;
              *(_DWORD *)(v46 + 4) = -1;
              *(void *)(v46 + 88) = 0x7FFFFFFF00000000;
              *(void *)(v46 + 136) = 0;
            }
            *(_DWORD *)(a1 + 6464) = 0;
            sub_1000B4488(a1 + 448);
            sub_1000B4488(a1 + 496);
            sub_1000B4488(a1 + 544);
            sub_1000B4488(a1 + 592);
            *(void *)(a1 + 440) = a1 + 496;
            uint64_t v47 = a1 + 448;
            if (!*(_DWORD *)(a1 + 5672))
            {
              uint64_t v47 = a1 + 592;
              if (v99 != 6)
              {
                if (v99 == 1)
                {
                  uint64_t v47 = a1 + 544;
                }
                else
                {
                  uint64_t v47 = a1 + 544;
                  if (v99 != 7)
                  {
LABEL_111:
                    *(void *)(a1 + 640) = 0xFFFFFFFF00000000;
                    *(_DWORD *)(a1 + 6456) = 1;
                    if (!sub_10004971C(a1, a2))
                    {
                      *(_DWORD *)(a1 + 6456) = 0;
                      if (*(void *)(a1 + 6432) != a2 + 1)
                      {
                        *(void *)(a1 + 5512) = 0;
                        int v13 = 13;
                        goto LABEL_108;
                      }
                      *(void *)(a1 + 6416) = v22;
                    }
                    *(_DWORD *)(a1 + 6448) = 1;
                    int v13 = v100;
LABEL_108:
                    unsigned int v100 = v13;
                    sub_1000C0CD8();
                    goto LABEL_9;
                  }
                }
              }
            }
            *(void *)(a1 + 440) = v47;
            goto LABEL_111;
          }
          if (*(_DWORD *)(a1 + 5500))
          {
            if (v95 >= 1)
            {
              uint64_t v32 = 0;
              while (sub_100043684(a1, *(_DWORD *)(a7 + 4 * v32)))
              {
                if (++v32 >= v95) {
                  goto LABEL_69;
                }
              }
              goto LABEL_178;
            }
LABEL_69:
            sub_10004AFD0(a1, v96, a5, 7, (uint64_t)v101);
          }
          if (*(_DWORD *)(a1 + 436) == a2 && *(void *)(a1 + 784))
          {
            int v33 = *(_DWORD *)(a1 + 776);
            if (v33 >= 7) {
              int v34 = 7;
            }
            else {
              int v34 = *(_DWORD *)(a1 + 776);
            }
            if (v33 >= 1)
            {
              int v35 = v33 - v34;
              int v36 = v34 <= 1 ? 1 : v34;
              **(_DWORD **)(a1 + 784) = *(_DWORD *)(*(void *)(a1 + 768) + 4 * v35);
              if (v34 >= 2)
              {
                *(_DWORD *)(*(void *)(a1 + 784) + 4) = *(_DWORD *)(*(void *)(a1 + 768) + 4 * v35 + 4);
                if (v36 != 2)
                {
                  *(_DWORD *)(*(void *)(a1 + 784) + 8) = *(_DWORD *)(*(void *)(a1 + 768) + 4 * v35 + 8);
                  if (v36 != 3)
                  {
                    *(_DWORD *)(*(void *)(a1 + 784) + 12) = *(_DWORD *)(*(void *)(a1 + 768) + 4 * v35 + 12);
                    if (v36 != 4)
                    {
                      *(_DWORD *)(*(void *)(a1 + 784) + 16) = *(_DWORD *)(*(void *)(a1 + 768) + 4 * v35 + 16);
                      if (v36 != 5)
                      {
                        *(_DWORD *)(*(void *)(a1 + 784) + 20) = *(_DWORD *)(*(void *)(a1 + 768) + 4 * v35 + 20);
                        if (v36 != 6) {
                          *(_DWORD *)(*(void *)(a1 + 784) + 24) = *(_DWORD *)(*(void *)(a1 + 768) + 4 * v35 + 24);
                        }
                      }
                    }
                  }
                }
              }
            }
            *(_DWORD *)(a1 + 792) = v34;
          }
          if (*(_DWORD *)(a1 + 756) == 6) {
            goto LABEL_59;
          }
          uint64_t v89 = 8 * ((2 * v95) | 1);
          uint64_t v37 = (uint64_t *)sub_1000CD3E8(v89, v27, v14, v15, v16, v17, v18, v19);
          if (v95 >= 1)
          {
            uint64_t v38 = 0;
            do
            {
              uint64_t v39 = v38;
              uint64_t v40 = 4 * v38;
              unsigned int v41 = *(_DWORD *)(a7 + 4 * v38);
              v37[v38] = sub_10002FA40(*(void *)(a1 + 72), v41);
              *(_DWORD *)(a1 + 1324 + v40) = v41;
              ++*(_DWORD *)(a1 + 1320);
              uint64_t v38 = v39 + 1;
            }
            while (v39 + 1 < v95);
          }
          if (v99 == 3 || v99 == 5)
          {
            int v42 = sub_10003CDE8((_DWORD **)v37, v95);
            uint64_t v43 = qword_100101CC0;
            uint64_t v44 = qword_100101CC0;
            if (v99 == 3)
            {
              BOOL v45 = v42 < 1 || qword_100101CC0 == 0;
              if (!v45 && *(_DWORD *)(qword_100101CC0 + 4728))
              {
                int v99 = 5;
                *(_DWORD *)(a1 + 756) = 10;
                *(_DWORD *)(a1 + 752) = v99;
              }
            }
            BOOL v48 = v42 < 1 || v43 == 0;
            if (!v48 && *(_DWORD *)(v44 + 2132))
            {
              sub_100043A0C(a1);
              int v49 = sub_100043B58(a1, v37, v95);
              v95 += v49;
            }
          }
          *(_DWORD *)(a1 + 5448) = v95;
          if (qword_100101CC0 && (*(_DWORD *)(qword_100101CC0 + 816) || *(void *)(qword_100101CC0 + 2320)))
          {
            sub_1000C321C(*(void *)(a1 + 5424));
            sub_1000C321C(*(void *)(a1 + 5432));
            sub_1000C2F04(4 * *(int *)(a1 + 5448) + 4, v50, v51, v52, v53, v54, v55, v56);
            *(void *)(a1 + 5424) = v57;
            sub_1000C2F04(4 * *(int *)(a1 + 5448) + 4, v58, v59, v60, v61, v62, v63, v64);
            *(void *)(a1 + 5432) = v65;
            sub_100025F78(v95, (uint64_t)v37, *(void *)(a1 + 5424), v65);
          }
          if (*(_DWORD *)(a1 + 756) != 2)
          {
            BOOL v67 = v95 > 0;
            if (v95 < 1)
            {
LABEL_133:
              BOOL v66 = v67;
LABEL_134:
              if (v95 > 1 && qword_100101CC0 != 0)
              {
                if (*(_DWORD *)(qword_100101CC0 + 1876))
                {
                  uint64_t v70 = sub_10002AD70(v37, v95);
                  if (v70)
                  {
                    uint64_t v71 = v70;
                    if (sub_10002F65C(*(void *)(a1 + 72), v70, -1) == -1)
                    {
                      sub_1000CD4D0(v37, v89);
                      *(void *)(a1 + 5512) = 0;
                      int v13 = 1;
                      goto LABEL_108;
                    }
                    *(void *)(a1 + 5456) = v71;
                  }
                }
              }
              uint64_t v72 = *(unsigned int *)(a1 + 756);
              switch(v72)
              {
                case 0xB:
                  uint64_t v73 = *(void *)(a1 + 120);
                  if (!v73) {
                    goto LABEL_178;
                  }
                  break;
                case 5:
                  if (!v95) {
                    goto LABEL_178;
                  }
                  uint64_t v73 = *(void *)(a1 + 104);
                  if (!v73) {
                    goto LABEL_178;
                  }
                  break;
                case 3:
                  if (!v95) {
                    goto LABEL_178;
                  }
                  uint64_t v73 = *(void *)(a1 + 144);
                  if (!v73)
                  {
                    uint64_t v74 = *(void *)(a1 + 112);
                    *(void *)(a1 + 5512) = v74;
                    goto LABEL_154;
                  }
                  break;
                default:
                  uint64_t v74 = *(void *)(a1 + 5512);
LABEL_154:
                  uint64_t v75 = v74;
                  if (!v74)
                  {
                    sub_1000CD4D0(v37, v89);
                    int v13 = 4;
                    goto LABEL_108;
                  }
LABEL_155:
                  if (v66) {
                    uint64_t v76 = 2;
                  }
                  else {
                    uint64_t v76 = 0;
                  }
                  if (*(void *)(a1 + 5456))
                  {
                    uint64_t v77 = 1;
                    uint64_t v78 = (unsigned int **)(a1 + 5456);
                  }
                  else
                  {
                    uint64_t v77 = v95;
                    uint64_t v78 = (unsigned int **)v37;
                  }
                  unsigned int v79 = qword_100101CC0;
                  if (qword_100101CC0)
                  {
                    unsigned int v80 = *(_DWORD *)(qword_100101CC0 + 1448);
                    unsigned int v81 = *(_DWORD *)(qword_100101CC0 + 1764);
                    unsigned int v79 = *(_DWORD *)(qword_100101CC0 + 1652);
                  }
                  else
                  {
                    unsigned int v80 = 0;
                    unsigned int v81 = 0;
                  }
                  int v82 = sub_1000398F8(v75, *(unsigned int *)(a1 + 776), (uint64_t)v101, v77, v78, v72, v76, v80, __SPAIR64__(v81, v79));
                  if (*(void *)(a1 + 120))
                  {
                    uint64_t v83 = *(void *)(a1 + 120);
                    *(_DWORD *)(a1 + 6476) = 1;
                    *(void *)(a1 + 128) = *(void *)(a1 + 5512);
                    *(void *)(a1 + 5512) = v83;
                    uint64_t v84 = (unsigned int **)(a1 + 5456);
                    uint64_t v85 = 1;
                    if (!*(void *)(a1 + 5456))
                    {
                      uint64_t v85 = v95;
                      uint64_t v84 = (unsigned int **)v37;
                    }
                    unsigned int v86 = qword_100101CC0;
                    if (qword_100101CC0)
                    {
                      unsigned int v87 = *(_DWORD *)(qword_100101CC0 + 1448);
                      unsigned int v88 = *(_DWORD *)(qword_100101CC0 + 1764);
                      unsigned int v86 = *(_DWORD *)(qword_100101CC0 + 1652);
                    }
                    else
                    {
                      unsigned int v87 = 0;
                      unsigned int v88 = 0;
                    }
                    int v82 = sub_1000398F8(v83, *(unsigned int *)(a1 + 776), (uint64_t)v101, v85, v84, 11, v76, v87, __SPAIR64__(v88, v86));
                  }
                  if (v82)
                  {
                    if (!*(_DWORD *)(a1 + 5672)) {
                      int v98 = sub_100039360(*(void *)(a1 + 5512));
                    }
                    sub_1000CD4D0(v37, v89);
                    uint64_t v22 = a2;
                    if (v98) {
                      goto LABEL_59;
                    }
                  }
                  else
                  {
                    sub_1000CD4D0(v37, v89);
                  }
LABEL_178:
                  *(void *)(a1 + 5512) = 0;
                  int v13 = 4;
                  goto LABEL_108;
              }
              *(void *)(a1 + 5512) = v73;
              uint64_t v75 = v73;
              goto LABEL_155;
            }
            uint64_t v68 = 0;
            while (sub_100026908(v37[v68]))
            {
              if (++v68 >= v95) {
                goto LABEL_133;
              }
            }
          }
          BOOL v66 = 0;
          goto LABEL_134;
        }
        *(void *)(a1 + 5512) = 0;
      }
    }
    int v13 = 7;
    goto LABEL_108;
  }
  uint64_t v94 = sub_1000C2EA8(0);
  uint64_t v93 = sub_1000CD350(0);
  uint64_t v90 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v91 = sub_1000D2948(0, 0, &v92);
  nullsub_1(v91);
LABEL_8:
  unsigned int v100 = 1;
LABEL_9:
  sub_100051144(v100);
  sub_1000D2948(v91, v92, 0);
  sub_1000C0D2C(v90);
  sub_1000CD350(v93);
  sub_1000C2EA8(v94);
  return v100;
}

uint64_t sub_10004BC34(uint64_t a1, int a2)
{
  unsigned int v27 = 2;
  if (*(_DWORD *)(a1 + 96)) {
    return 0;
  }
  if (!*(_DWORD *)(a1 + 6448))
  {
    uint64_t v18 = *(void *)(a1 + 104);
    if (v18)
    {
      sub_100039FBC(v18);
      sub_10003B1BC(*(void *)(a1 + 104));
    }
    uint64_t v19 = *(void *)(a1 + 112);
    if (v19)
    {
      sub_100039FBC(v19);
      sub_10003B1BC(*(void *)(a1 + 112));
    }
    return 0;
  }
  int v26 = 0;
  uint64_t v6 = *(void *)(a1 + 6424);
  int v7 = sub_100047F5C(a1, v6, &v26);
  if (!*(_DWORD *)(a1 + 6448))
  {
    uint64_t v2 = 0;
    uint64_t v14 = (uint64_t *)(a1 + 5512);
    if (!*(void *)(a1 + 5512)) {
      goto LABEL_52;
    }
LABEL_46:
    if (!*(_DWORD *)(a1 + 5672) && *(_DWORD *)(a1 + 756) != 6)
    {
      if (sub_10004971C(a1, v6)) {
        uint64_t v22 = *(void *)(a1 + 256);
      }
      else {
        uint64_t v22 = 0;
      }
      sub_100039EA8(*(void *)(a1 + 5512), v22);
    }
    goto LABEL_52;
  }
  int v13 = v7;
  if (*(_DWORD *)(a1 + 756) == 6) {
    unsigned int v27 = 0;
  }
  uint64_t v14 = (uint64_t *)(a1 + 5512);
  uint64_t v15 = *(void *)(a1 + 5512);
  if (!v15)
  {
    uint64_t v2 = 0;
    goto LABEL_52;
  }
  if (*(_DWORD *)(a1 + 5672))
  {
    unsigned int v27 = 2;
    goto LABEL_11;
  }
  switch(sub_100039EB4(v15))
  {
    case 0u:
    case 3u:
      goto LABEL_32;
    case 1u:
      if (a2) {
        goto LABEL_31;
      }
      break;
    case 2u:
      if (a2) {
        goto LABEL_31;
      }
      goto LABEL_32;
    default:
      break;
  }
  if (v27)
  {
LABEL_11:
    while (!sub_1000D2974())
    {
      uint64_t v16 = sub_10004BF78(a1, (int *)&v27);
      if (v16)
      {
        uint64_t v2 = v16;
        goto LABEL_33;
      }
      if (v27 <= 3 && v27 != 2) {
        goto LABEL_17;
      }
    }
LABEL_31:
    sub_100039FBC(*v14);
LABEL_32:
    uint64_t v2 = 0;
    unsigned int v27 = 0;
  }
  else
  {
LABEL_17:
    uint64_t v2 = 0;
  }
LABEL_33:
  if (v13)
  {
    if (v6 == *(void *)(a1 + 6416))
    {
      int v20 = (*(_DWORD *)(a1 + 224) - *(_DWORD *)(a1 + 244) + *(_DWORD *)(a1 + 236)) % *(_DWORD *)(a1 + 236);
      if (v20 > *(_DWORD *)(*(void *)(a1 + 712) + 24 * v26 + 8)) {
        sub_100048EBC(a1, v6, v20);
      }
    }
  }
  else
  {
    sub_100047FFC((unsigned int *)a1, v6, 1);
  }
  if (*(_DWORD *)(a1 + 5672))
  {
    int v25 = 0;
    uint64_t v21 = sub_100041F5C(a1, v6, &v25);
    if (v25 == 4)
    {
      uint64_t v2 = 2;
    }
    else if (v25 == 3)
    {
      uint64_t v2 = 1;
    }
    else
    {
      uint64_t v2 = v21;
      if (v25 == 1) {
        uint64_t v2 = 12;
      }
    }
  }
  if (*v14) {
    goto LABEL_46;
  }
LABEL_52:
  if (qword_100101CC0
    && *(_DWORD *)(qword_100101CC0 + 2260)
    && sub_100025D50(*(unsigned int **)(a1 + 440)) == 1
    && *(_DWORD *)(a1 + 756) != 6
    && !*(_DWORD *)(a1 + 6456))
  {
    if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
      uint64_t v23 = (uint64_t *)(a1 + 808);
    }
    else {
      uint64_t v23 = (uint64_t *)(a1 + 800);
    }
    uint64_t v24 = *v23;
    *(_DWORD *)(v24 + 4) = 0;
    *(_DWORD *)(v24 + 140) = -1;
    sub_100039FBC(*v14);
  }
  *(_DWORD *)(a1 + 6448) = 0;
  if (!v2)
  {
    if (*(_DWORD *)(a1 + 756) != 6)
    {
      int v25 = 0;
      return sub_10004C5FC(a1, *(unsigned int *)(a1 + 6424), &v25, v8, v9, v10, v11, v12);
    }
    return 0;
  }
  return v2;
}

uint64_t sub_10004BF78(uint64_t a1, int *a2)
{
  int v38 = 0;
  int v36 = 0;
  int v37 = 0;
  unsigned __int16 v35 = 0;
  int v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  if (a1)
  {
    uint64_t v33 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v32 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v29 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v30 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v31);
    nullsub_1(v30);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v6 = (int *)sub_1000C0C70();
    if (setjmp(v6))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      uint64_t v5 = 1;
      goto LABEL_12;
    }
    if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic")) {
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 8160))
    {
      uint64_t v5 = 1;
      goto LABEL_11;
    }
    if (!a2)
    {
LABEL_8:
      uint64_t v5 = 4;
LABEL_11:
      sub_1000C0CD8();
      goto LABEL_12;
    }
    if (!*(_DWORD *)(a1 + 6448))
    {
      *a2 = 0;
      uint64_t v5 = 7;
      goto LABEL_11;
    }
    *a2 = 2;
    uint64_t v7 = sub_100049020(a1, &v36, &v38, &v37, &v34);
    uint64_t v8 = v7;
    *(void *)(a1 + 6560) = v7;
    *(_DWORD *)(a1 + 6568) = v36;
    if (*(_DWORD *)(a1 + 5672))
    {
      uint64_t v9 = sub_100042268(a1, v7, v34, a2);
      if (*a2 == 2 && !sub_100049298(a1) && *(_DWORD *)(a1 + 348)) {
        *a2 = 3;
      }
LABEL_75:
      if (*(_DWORD *)(a1 + 756) != 6) {
        sub_10004CC1C(a1);
      }
      if (*a2 <= 1) {
        *(_DWORD *)(a1 + 6464) = 1;
      }
      uint64_t v5 = v9;
      goto LABEL_11;
    }
    if (v7)
    {
      sub_100047C58(a1, 112);
      if (*(_DWORD *)(a1 + 6468)) {
        sub_100011598(*(void *)(a1 + 16), v8, v36);
      }
      if (*(_DWORD *)(a1 + 756) == 6)
      {
        if (!*(_DWORD *)(a1 + 640))
        {
LABEL_37:
          int v10 = 0;
          goto LABEL_52;
        }
LABEL_38:
        *a2 = 0;
        int v10 = 0;
        goto LABEL_52;
      }
      sub_100039EBC(*(void *)(a1 + 5512), v8, (uint64_t)v34);
      int v10 = 1;
      switch(sub_100039EB4(*(void *)(a1 + 5512)))
      {
        case 0u:
        case 2u:
        case 3u:
          goto LABEL_33;
        case 1u:
          sub_100039F68(*(void *)(a1 + 5512));
          *a2 = 2;
          if (*(_DWORD *)(a1 + 640)
            && qword_100101CC0
            && *(_DWORD *)(qword_100101CC0 + 2088)
            && (int)sub_1000483F4((_DWORD *)a1) >= *(_DWORD *)(a1 + 644))
          {
            *a2 = 0;
          }
          if (v38 >= 1
            && qword_100101CC0
            && *(_DWORD *)(qword_100101CC0 + 2096)
            && *(void *)(qword_100101CC0 + 2104) <= v37
            && sub_1000B46DC(*(unsigned int **)(a1 + 440), v38, 0) == 2
            && sub_100039F50(*(void *)(a1 + 5512)) == 2)
          {
            goto LABEL_33;
          }
          break;
        case 6u:
          goto LABEL_40;
        default:
          break;
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 756) == 6 || !sub_100039F68(*(void *)(a1 + 5512)))
      {
        *a2 = 3;
        if (!*(_DWORD *)(a1 + 348))
        {
          *a2 = 1;
          int v10 = 0;
          goto LABEL_52;
        }
        if (!*(_DWORD *)(a1 + 640) || (int)sub_1000483F4((_DWORD *)a1) < *(_DWORD *)(a1 + 644)) {
          goto LABEL_37;
        }
        goto LABEL_38;
      }
      sub_100039EBC(*(void *)(a1 + 5512), 0, (uint64_t)v34);
      int v10 = 1;
      switch(sub_100039EB4(*(void *)(a1 + 5512)))
      {
        case 0u:
        case 2u:
        case 3u:
LABEL_33:
          *a2 = 0;
          break;
        case 1u:
          if (sub_100039F68(*(void *)(a1 + 5512)))
          {
            *a2 = 2;
          }
          else if (*(_DWORD *)(a1 + 348))
          {
            *a2 = 3;
          }
          else
          {
            *a2 = 1;
            int v10 = 1;
          }
          break;
        case 6u:
LABEL_40:
          *a2 = 2;
          sub_100039EA8(*(void *)(a1 + 5512), 0);
          *(void *)(a1 + 5512) = *(void *)(a1 + 128);
          *(_DWORD *)(a1 + 6476) = 0;
          sub_10005A718(*(void *)a1);
          break;
        default:
          break;
      }
    }
LABEL_52:
    if (*(_DWORD *)(a1 + 360))
    {
      if (!*(_DWORD *)(a1 + 6548) && !*(_DWORD *)(a1 + 6456))
      {
        int v12 = sub_1000483F4((_DWORD *)a1);
        if (v8)
        {
          if (*(_DWORD *)(a1 + 756) != 6)
          {
            if (sub_100011BA4(*(void *)(a1 + 16), v12 - 1, &v35))
            {
              int v13 = v35;
              if (v13 != sub_1000041DC(*(void *)(a1 + 16)))
              {
                uint64_t v14 = (int)sub_100004148(*(void *)(a1 + 16));
                uint64_t v22 = (void *)sub_1000CD3E8(v14, v15, v16, v17, v18, v19, v20, v21);
                sub_10000818C(*(void *)(a1 + 16), v35, (uint64_t)v22, v23, v24, v25, v26, v27);
                sub_10005A780(*(void *)a1);
                sub_1000CD4D0(v22, v14);
              }
            }
          }
        }
      }
    }
    if (*a2 != 2 || *(_DWORD *)(a1 + 756) == 6 || sub_100049298(a1)) {
      goto LABEL_68;
    }
    if (*(_DWORD *)(a1 + 348))
    {
      if (sub_100039F68(*(void *)(a1 + 5512)))
      {
LABEL_68:
        if (qword_100101CC0) {
          int v28 = v10;
        }
        else {
          int v28 = 0;
        }
        if (v28 == 1
          && *(_DWORD *)(qword_100101CC0 + 2208)
          && !*(_DWORD *)(a1 + 652)
          && sub_100039A88(*(void *)(a1 + 5512)) != -1)
        {
          sub_10005A710(*(void *)a1);
          *(_DWORD *)(a1 + 652) = 1;
        }
        uint64_t v9 = 0;
        goto LABEL_75;
      }
      int v11 = 3;
    }
    else
    {
      int v11 = 1;
    }
    *a2 = v11;
    goto LABEL_68;
  }
  uint64_t v33 = sub_1000C2EA8(0);
  uint64_t v32 = sub_1000CD350(0);
  uint64_t v29 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  int v30 = sub_1000D2948(0, 0, &v31);
  nullsub_1(v30);
  uint64_t v5 = 1;
LABEL_12:
  sub_100051144(v5);
  sub_1000D2948(v30, v31, 0);
  sub_1000C0D2C(v29);
  sub_1000CD350(v32);
  sub_1000C2EA8(v33);
  return v5;
}

uint64_t sub_10004C5FC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    return 4;
  }
  if (!*(_DWORD *)(a1 + 5500)) {
    return 7;
  }
  uint64_t v10 = *(void *)(a1 + 5512);
  if (!v10)
  {
    uint64_t result = 18;
    goto LABEL_71;
  }
  unsigned int v11 = *(_DWORD *)(a1 + 756);
  BOOL v12 = v11 > 9;
  int v13 = (1 << v11) & 0x340;
  if (v12 || v13 == 0)
  {
    unsigned int v16 = a2;
    if (!*(void *)(a1 + 104) || v10 == *(void *)(a1 + 112)) {
      uint64_t v17 = (unsigned int **)(a1 + 808);
    }
    else {
      uint64_t v17 = (unsigned int **)(a1 + 800);
    }
    uint64_t v18 = *v17;
    if ((*v17)[1] != -1 && !v18[22] && v18[23] == 0x7FFFFFFF)
    {
LABEL_70:
      uint64_t result = 0;
      LODWORD(v10) = v18[1];
      goto LABEL_71;
    }
    if (qword_100101CC0
      && *(_DWORD *)(qword_100101CC0 + 1904)
      && (int v46 = 0, sub_100047F5C(a1, a2, &v46) == 1))
    {
      uint64_t v19 = *(void *)(a1 + 712);
      uint64_t v20 = *(unsigned int *)(v19 + 24 * v46 + 4);
      if ((int)v20 <= 0)
      {
        uint64_t v23 = 0;
        *((void *)v18 + 11) = 0x7FFFFFFF00000000;
        uint64_t v25 = *(unsigned int *)(a1 + 1320);
        if ((int)v25 < 1) {
          goto LABEL_33;
        }
LABEL_28:
        if (*(void *)(a1 + 5456))
        {
          uint64_t v26 = (void *)sub_1000CD3E8(8 * v25 + 8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          for (uint64_t i = 0; i != v25; ++i)
            v26[i] = sub_10002FA40(*(void *)(a1 + 72), *(_DWORD *)(a1 + 1324 + 4 * i));
          goto LABEL_34;
        }
LABEL_33:
        uint64_t v26 = 0;
LABEL_34:
        v18[1] = sub_100039D00(*(void *)(a1 + 5512), v20, (uint64_t)v23, *v18, *((_DWORD **)v18 + 1), *((void *)v18 + 2), v18[8], *((_DWORD **)v18 + 5), *((void *)v18 + 10), *((void *)v18 + 6), *((void *)v18 + 7), *((void *)v18 + 8), *((void *)v18 + 9), *((void *)v18 + 3), v18 + 35);
        if (v26) {
          sub_1000CD4D0(v26, 8 * ((int)v25 + 1));
        }
        v18[34] = sub_100039E88(*(void *)(a1 + 5512));
        LODWORD(v28) = v18[1];
        if ((int)v28 < (int)*v18)
        {
          uint64_t v28 = (int)v28;
          do
            *(_DWORD *)(*((void *)v18 + 1) + 4 * v28++) = 0x40000000;
          while (v28 < (int)*v18);
          LODWORD(v28) = v18[1];
        }
        int v29 = v28 - 1;
        if ((int)v28 < 1)
        {
          LODWORD(v34) = 0;
        }
        else
        {
          uint64_t v30 = *((void *)v18 + 5);
          if (v28 == 1)
          {
            uint64_t v31 = (int *)*((void *)v18 + 5);
          }
          else
          {
            uint64_t v31 = (int *)*((void *)v18 + 5);
            do
            {
              uint64_t v32 = v31;
              while (1)
              {
                int v33 = *v32++;
                if (v33 == -1) {
                  break;
                }
                uint64_t v31 = v32;
                if ((unint64_t)v32 >= v30 + 4 * (int)v18[8])
                {
                  uint64_t v31 = 0;
                  goto LABEL_51;
                }
              }
              ++v31;
              --v29;
            }
            while (v29);
          }
LABEL_51:
          unint64_t v34 = ((unint64_t)v31 - v30) >> 2;
          do
          {
            int v35 = *v31++;
            LODWORD(v34) = v34 + 1;
          }
          while (v35 != -1);
        }
        if ((int)v34 < (int)v18[8])
        {
          uint64_t v36 = (int)v34;
          do
            *(_DWORD *)(*((void *)v18 + 5) + 4 * v36++) = -1;
          while (v36 < (int)v18[8]);
        }
        if (v23) {
          sub_1000CD4D0(v23, (int)v20);
        }
        if ((int)v18[1] >= 1 && !sub_10004F794((_DWORD *)a1, v16, 0))
        {
          uint64_t v42 = *((void *)v18 + 5);
          if (v42)
          {
            uint64_t v43 = 0;
            do
              int v44 = *(_DWORD *)(v42 + 4 * v43++);
            while (v44 != -1);
            int v45 = v43 - 1;
            sub_10004FA94(a1, v16, v43 - 1, *((long long **)v18 + 5), **((_DWORD **)v18 + 1));
          }
          else
          {
            int v45 = 0;
          }
          if (*(void *)(a1 + 5488) && *(_DWORD *)(a1 + 756) == 2 && *(void *)(a1 + 104) == *(void *)(a1 + 5512)) {
            sub_1000504CC(a1, v16, v45, v42);
          }
        }
        int v37 = *(_DWORD *)(a1 + 752);
        if (v37 == 7 || v37 == 1)
        {
          uint64_t v39 = *(unsigned int *)(a1 + 1296);
          if ((int)v39 < 1)
          {
LABEL_69:
            sub_100050688(a1, (uint64_t)v18, v16);
          }
          else
          {
            uint64_t v40 = *(int **)(a1 + 1304);
            while (1)
            {
              int v41 = *v40++;
              if (v41 == v16) {
                break;
              }
              if (!--v39) {
                goto LABEL_69;
              }
            }
          }
        }
        goto LABEL_70;
      }
      int v21 = *(_DWORD *)(v19 + 24 * v46);
      unint64_t v22 = sub_1000CD3E8(*(unsigned int *)(v19 + 24 * v46 + 4), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      uint64_t v23 = (void *)v22;
      for (uint64_t j = 0; j != v20; ++j)
        *(unsigned char *)(v22 + j) = *(unsigned char *)(*(void *)(a1 + 216) + (v21 + (int)j) % *(_DWORD *)(a1 + 236));
    }
    else
    {
      uint64_t v23 = 0;
      LODWORD(v20) = 0;
    }
    *((void *)v18 + 11) = 0x7FFFFFFF00000000;
    uint64_t v25 = *(unsigned int *)(a1 + 1320);
    if ((int)v25 < 1) {
      goto LABEL_33;
    }
    goto LABEL_28;
  }
  LODWORD(v10) = 0;
  uint64_t result = 0;
LABEL_71:
  *a3 = v10;
  return result;
}

uint64_t sub_10004CA40(uint64_t a1, int a2)
{
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  if (a1)
  {
    uint64_t v11 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v10 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v7 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v8 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v9);
    nullsub_1(v8);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v5 = (int *)sub_1000C0C70();
    if (!setjmp(v5))
    {
      if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
      {
        int v6 = 4;
      }
      else if (*(_DWORD *)(a1 + 8160))
      {
        int v6 = 1;
      }
      else
      {
        sub_100047C58(a1, 82);
        unsigned int v12 = sub_10004BC34(a1, a2);
        int v6 = v12;
      }
      unsigned int v12 = v6;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 8160) = 1;
  }
  else
  {
    uint64_t v11 = sub_1000C2EA8(0);
    uint64_t v10 = sub_1000CD350(0);
    uint64_t v7 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    uint64_t v8 = sub_1000D2948(0, 0, &v9);
    nullsub_1(v8);
  }
  unsigned int v12 = 1;
LABEL_9:
  sub_100051144(v12);
  sub_1000D2948(v8, v9, 0);
  sub_1000C0D2C(v7);
  sub_1000CD350(v10);
  sub_1000C2EA8(v11);
  return v12;
}

uint64_t sub_10004CC1C(uint64_t result)
{
  if (!*(_DWORD *)(result + 6448)) {
    return result;
  }
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 756) == 6) {
    return result;
  }
  uint64_t v2 = *(unsigned int *)(result + 5448);
  int v3 = *(_DWORD *)(result + 308);
  uint64_t v4 = *(int32x4_t **)(result + 5432);
  BOOL v5 = *(_DWORD *)(result + 5672) || v3 == 0;
  BOOL v6 = v5 || v4 == 0;
  if (v6 || (int)v2 < 1) {
    return result;
  }
  if (v2 < 8)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = v2 & 0xFFFFFFF8;
  uint64_t v10 = v4 + 1;
  int8x16_t v11 = 0uLL;
  uint64_t v12 = v8;
  int8x16_t v13 = 0uLL;
  do
  {
    int8x16_t v11 = (int8x16_t)vsubq_s32((int32x4_t)vandq_s8(v11, (int8x16_t)vceqzq_s32(v10[-1])), vtstq_s32(v10[-1], v10[-1]));
    int8x16_t v13 = (int8x16_t)vsubq_s32((int32x4_t)vandq_s8(v13, (int8x16_t)vceqzq_s32(*v10)), vtstq_s32(*v10, *v10));
    v10 += 2;
    v12 -= 8;
  }
  while (v12);
  int32x4_t v14 = (int32x4_t)vorrq_s8(v11, v13);
  int v9 = vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v14, v14))) & 1;
  if (v8 != v2)
  {
LABEL_20:
    uint64_t v15 = &v4->i32[v8];
    uint64_t v16 = v2 - v8;
    do
    {
      if (*v15++) {
        int v9 = 1;
      }
      --v16;
    }
    while (v16);
  }
  if (v9)
  {
    uint64_t v18 = *(_DWORD **)(result + 440);
    sub_1000B4688(v18);
    if (sub_100039F84(*(void *)(v1 + 5512))) {
      int v19 = v3;
    }
    else {
      int v19 = 0;
    }
    return sub_1000B4748((uint64_t)v18, v19);
  }
  return result;
}

uint64_t sub_10004CD74(uint64_t a1, unsigned int a2, int a3, uint64_t a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  unsigned int v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  if (a1)
  {
    uint64_t v23 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v22 = sub_1000CD350(*(void *)(a1 + 6488));
    int v19 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v20 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v21);
    nullsub_1(v20);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v17 = (int *)sub_1000C0C70();
    if (!setjmp(v17))
    {
      if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
      {
        int v18 = 4;
      }
      else if (*(_DWORD *)(a1 + 8160))
      {
        int v18 = 1;
      }
      else
      {
        unsigned int v24 = sub_10004CF88(a1, a2, a3, a4, a5, a6, a7, a8, 0, 0, 0, 0);
        int v18 = v24;
      }
      unsigned int v24 = v18;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 8160) = 1;
  }
  else
  {
    uint64_t v23 = sub_1000C2EA8(0);
    uint64_t v22 = sub_1000CD350(0);
    int v19 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    uint64_t v20 = sub_1000D2948(0, 0, &v21);
    nullsub_1(v20);
  }
  unsigned int v24 = 1;
LABEL_9:
  sub_100051144(v24);
  sub_1000D2948(v20, v21, 0);
  sub_1000C0D2C(v19);
  sub_1000CD350(v22);
  sub_1000C2EA8(v23);
  return v24;
}

uint64_t sub_10004CF88(uint64_t a1, unsigned int a2, int a3, uint64_t a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, int *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v33 = 0;
  uint64_t result = 4;
  if (!a5 || !a6 || !a7) {
    return result;
  }
  if (!*(_DWORD *)(a1 + 5500)) {
    return 7;
  }
  if (*(_DWORD *)(a1 + 756) == 6)
  {
    int v18 = 0;
    uint64_t result = 0;
    *a5 = -1;
    *a6 = 0;
    *a7 = 0;
    if (a8)
    {
LABEL_7:
      uint64_t result = 0;
      *a8 = v18;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 6448)) {
      return 18;
    }
    int v19 = a4;
    if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
      uint64_t v22 = (uint64_t *)(a1 + 808);
    }
    else {
      uint64_t v22 = (uint64_t *)(a1 + 800);
    }
    int v32 = 0;
    uint64_t v23 = *v22;
    *a5 = -1;
    *a6 = 0;
    int v24 = sub_10004C5FC(a1, *(unsigned int *)(a1 + 6424), &v32, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
    uint64_t result = 4;
    if ((a2 & 0x80000000) != 0 || v24) {
      return result;
    }
    if (*(_DWORD *)(v23 + 4) <= (signed int)a2) {
      return 18;
    }
    *a7 = *(_DWORD *)(*(void *)(v23 + 8) + 4 * a2);
    uint64_t v25 = *(int **)(v23 + 40);
    int v26 = 0;
    if (a2)
    {
      unint64_t v27 = (unint64_t)&v25[*(int *)(v23 + 32)];
      do
      {
        ++v26;
        uint64_t v28 = v25;
        while (1)
        {
          int v29 = *v28++;
          if (v29 == -1) {
            break;
          }
          ++v26;
          uint64_t v25 = v28;
          if ((unint64_t)v28 >= v27)
          {
            int v26 = 0;
            uint64_t v25 = 0;
            goto LABEL_26;
          }
        }
        ++v25;
        --a2;
      }
      while (a2);
    }
LABEL_26:
    if (a9) {
      *a9 = v26;
    }
    int v33 = 0;
    uint64_t result = sub_10004E084(a1, v26, a3, v19, (uint64_t)a5, a10, a11, a12, &v33);
    uint64_t v30 = 0;
    do
      int v31 = v25[v30++];
    while (v31 != -1);
    if (!result)
    {
      *a6 = v33;
      if (a8)
      {
        int v18 = sub_100039EA0(*(void *)(a1 + 5512));
        goto LABEL_7;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_10004D1A4(uint64_t a1, signed int a2, int a3, _DWORD *a4, int *a5, _DWORD *a6, _DWORD *a7, uint64_t a8, _DWORD *a9)
{
  unsigned int v82 = 0;
  int v80 = 0;
  int v81 = -1;
  uint64_t v79 = 0;
  uint64_t v78 = 0;
  uint64_t v77 = 0;
  if (a1)
  {
    uint64_t v79 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v78 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v75 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v76 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v77);
    nullsub_1(v76);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    int v18 = (int *)sub_1000C0C70();
    if (setjmp(v18))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      int v26 = 4;
LABEL_51:
      unsigned int v82 = v26;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 8160))
    {
      int v26 = 1;
      goto LABEL_51;
    }
    if (a9) {
      *a9 = -1;
    }
    *a4 = -1;
    *a5 = 0;
    unint64_t v72 = sub_1000CD3E8(a3, v19, v20, v21, v22, v23, v24, v25);
    uint64_t v71 = (void *)sub_1000CD3E8(4 * a3, v27, v28, v29, v30, v31, v32, v33);
    unint64_t v41 = sub_1000CD3E8(4 * a3, v34, v35, v36, v37, v38, v39, v40);
    uint64_t v73 = 4 * a3;
    int v49 = (_DWORD *)sub_1000CD3E8(v73, v42, v43, v44, v45, v46, v47, v48);
    uint64_t v70 = (void *)v41;
    unsigned int v82 = sub_10004CF88(a1, a2, a3, 0, v49, &v80, a6, a7, &v81, v72, (uint64_t)v71, v41);
    if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
      uint64_t v50 = (uint64_t *)(a1 + 808);
    }
    else {
      uint64_t v50 = (uint64_t *)(a1 + 800);
    }
    uint64_t v51 = (void *)v72;
    uint64_t v74 = v49;
    uint64_t v52 = *v50;
    if (!v82)
    {
      uint64_t v58 = *(void *)(*(void *)(v52 + 24) + 8 * a2);
      if (v58)
      {
        if (sub_100043B0C(v58))
        {
          unsigned int v82 = 7;
        }
        else
        {
          if (!a9) {
            goto LABEL_50;
          }
          *a9 = sub_100043670(a1, *(void *)(*(void *)(v52 + 24) + 8 * a2));
        }
      }
    }
    if (!a9
      || v82
      || v80 < 1
      || *a9 == -1
      || sub_100025D50(*(unsigned int **)(*(void *)(v52 + 24) + 8 * a2)) != 3)
    {
      goto LABEL_50;
    }
    int v53 = v80;
    if (v80 < 1)
    {
      int v57 = 0;
    }
    else
    {
      uint64_t v54 = 0;
      int v55 = 0;
      do
      {
        if (v54 + 1 == v53 || *(unsigned char *)(v72 + 1 + v54))
        {
          *(void *)(a8 + 8 * v55) = sub_100031CE0(*(void *)(a1 + 80), *((_DWORD *)v71 + v54));
          a4[v55++] = *((_DWORD *)v70 + v54);
          int v53 = v80;
        }
        BOOL v56 = ++v54 < v53;
        int v57 = v55;
      }
      while (v56);
    }
    *a5 = v57;
    uint64_t v51 = (void *)v72;
    if (v57 >= a3) {
      goto LABEL_50;
    }
    unint64_t v59 = a3 - (uint64_t)v57;
    if (v59 >= 0xC)
    {
      unint64_t v61 = a8 + 8 * v57;
      unint64_t v62 = (unint64_t)&a4[v57];
      if (v61 >= (unint64_t)&a4[(unint64_t)v73 / 4] || (unint64_t v60 = v57, v62 >= a8 + 8 * a3))
      {
        unint64_t v60 = (v59 & 0xFFFFFFFFFFFFFFF8) + v57;
        uint64_t v63 = (_OWORD *)(v62 + 16);
        *(void *)&long long v64 = -1;
        *((void *)&v64 + 1) = -1;
        uint64_t v65 = (_OWORD *)(v61 + 32);
        unint64_t v66 = v59 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          *(v65 - 2) = 0uLL;
          *(v65 - 1) = 0uLL;
          *uint64_t v65 = 0uLL;
          v65[1] = 0uLL;
          v65 += 4;
          *(v63 - 1) = v64;
          *uint64_t v63 = v64;
          v63 += 2;
          v66 -= 8;
        }
        while (v66);
        if (v59 == (v59 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_50;
        }
      }
    }
    else
    {
      unint64_t v60 = v57;
    }
    BOOL v67 = (void *)(a8 + 8 * v60);
    uint64_t v68 = &a4[v60];
    unint64_t v69 = a3 - v60;
    do
    {
      *v67++ = 0;
      *v68++ = -1;
      --v69;
    }
    while (v69);
LABEL_50:
    sub_1000CD4D0(v74, v73);
    sub_1000CD4D0(v70, v73);
    sub_1000CD4D0(v71, v73);
    sub_1000CD4D0(v51, a3);
    int v26 = v82;
    goto LABEL_51;
  }
  uint64_t v79 = sub_1000C2EA8(0);
  uint64_t v78 = sub_1000CD350(0);
  uint64_t v75 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v76 = sub_1000D2948(0, 0, &v77);
  nullsub_1(v76);
LABEL_8:
  unsigned int v82 = 1;
LABEL_9:
  sub_100051144(v82);
  sub_1000D2948(v76, v77, 0);
  sub_1000C0D2C(v75);
  sub_1000CD350(v78);
  sub_1000C2EA8(v79);
  return v82;
}

uint64_t sub_10004D690(unint64_t a1, int a2)
{
  unsigned int v20 = 0;
  int v19 = 0;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  uint64_t v16 = 0;
  if (a1)
  {
    uint64_t v18 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v17 = sub_1000CD350(*(void *)(a1 + 6488));
    int32x4_t v14 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v15 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v16);
    nullsub_1(v15);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    BOOL v5 = (int *)sub_1000C0C70();
    if (setjmp(v5))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (!sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v11 = 1;
        goto LABEL_14;
      }
      if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
        uint64_t v12 = (int **)(a1 + 808);
      }
      else {
        uint64_t v12 = (int **)(a1 + 800);
      }
      int8x16_t v13 = *v12;
      unsigned int v20 = sub_10004C5FC(a1, *(unsigned int *)(a1 + 6424), &v19, v6, v7, v8, v9, v10);
      if ((a2 & 0x80000000) == 0 && !v20 && v13[1] > a2)
      {
        sub_10004D8BC(a1, v13, a2, 1);
        int v11 = v20;
        goto LABEL_14;
      }
    }
    int v11 = 4;
LABEL_14:
    unsigned int v20 = v11;
    sub_1000C0CD8();
    goto LABEL_9;
  }
  uint64_t v18 = sub_1000C2EA8(0);
  uint64_t v17 = sub_1000CD350(0);
  int32x4_t v14 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v15 = sub_1000D2948(0, 0, &v16);
  nullsub_1(v15);
LABEL_8:
  unsigned int v20 = 1;
LABEL_9:
  sub_100051144(v20);
  sub_1000D2948(v15, v16, 0);
  sub_1000C0D2C(v14);
  sub_1000CD350(v17);
  sub_1000C2EA8(v18);
  return v20;
}

unint64_t sub_10004D8BC(unint64_t result, int *a2, int a3, int a4)
{
  unint64_t v6 = result;
  int v7 = a2[1];
  if (v7 - 1 == a3)
  {
    LODWORD(v8) = v7 - 1;
    a2[1] = v8;
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = (int *)*((void *)a2 + 5);
    uint64_t v10 = a2[8];
    int v11 = v9;
    unint64_t v37 = result;
    int v35 = a3 + 1;
    int v36 = a4;
    if (a3 == -1) {
      goto LABEL_13;
    }
    int v11 = (int *)*((void *)a2 + 5);
    int v12 = a3 + 1;
    do
    {
      int8x16_t v13 = v11;
      while (1)
      {
        int v14 = *v13++;
        if (v14 == -1) {
          break;
        }
        int v11 = v13;
        if (v13 >= &v9[v10])
        {
          int v11 = 0;
          goto LABEL_12;
        }
      }
      ++v11;
      --v12;
    }
    while (v12);
LABEL_12:
    if (a3)
    {
LABEL_13:
      uint64_t v15 = (int *)*((void *)a2 + 5);
      int v16 = a3;
      do
      {
        uint64_t v17 = v15;
        while (1)
        {
          int v18 = *v17++;
          if (v18 == -1) {
            break;
          }
          uint64_t v15 = v17;
          if (v17 >= &v9[v10])
          {
            uint64_t v15 = 0;
            goto LABEL_19;
          }
        }
        ++v15;
        --v16;
      }
      while (v16);
    }
    else
    {
      uint64_t v15 = (int *)*((void *)a2 + 5);
    }
LABEL_19:
    uint64_t v19 = (char *)v15 - (char *)v9;
    int v20 = v10 - ((unint64_t)((char *)v11 - (char *)v9) >> 2);
    unint64_t v21 = (unint64_t)((char *)v11 - (char *)v15) >> 2;
    uint64_t v22 = (int)(v11 - v15);
    size_t v23 = 4 * v20;
    j__memmove(v15, &v15[v22], v23);
    uint64_t v24 = (int)(v19 >> 2);
    j__memmove((void *)(*((void *)a2 + 10) + v24), (const void *)(*((void *)a2 + 10) + v24 + v22), v20);
    uint64_t v25 = (char *)(*((void *)a2 + 9) + 2 * (int)((unint64_t)v19 >> 2));
    j__memmove(v25, &v25[2 * (int)v21], 2 * v20);
    j__memmove((void *)(*((void *)a2 + 6) + 4 * v24), (const void *)(*((void *)a2 + 6) + 4 * v24 + 4 * v22), v23);
    j__memmove((void *)(*((void *)a2 + 7) + 4 * v24), (const void *)(*((void *)a2 + 7) + 4 * v24 + 4 * v22), v23);
    j__memmove((void *)(*((void *)a2 + 8) + v24), (const void *)(*((void *)a2 + 8) + v24 + v22), v20);
    int v26 = v35;
    j__memmove((void *)(*((void *)a2 + 1) + 4 * a3), (const void *)(*((void *)a2 + 1) + 4 * v35), 4 * (*a2 - v35));
    j__memmove((void *)(*((void *)a2 + 2) + 2 * a3), (const void *)(*((void *)a2 + 2) + 2 * v26), 2 * (*a2 - v26));
    uint64_t result = (unint64_t)j__memmove((void *)(*((void *)a2 + 3) + 8 * a3), (const void *)(*((void *)a2 + 3) + 8 * v26), 8 * (*a2 - v26));
    unint64_t v6 = v37;
    a4 = v36;
    LODWORD(v8) = a2[1] - 1;
    a2[1] = v8;
    if (v8)
    {
LABEL_3:
      if (!a4) {
        goto LABEL_26;
      }
      goto LABEL_21;
    }
  }
  a2[35] = -1;
  if (!a4) {
    goto LABEL_26;
  }
LABEL_21:
  if (a3)
  {
    if (a2[35] != -1)
    {
      if (v8 == 1)
      {
        a2[35] = 100;
        LODWORD(v8) = 1;
      }
      else if (a3 == 1)
      {
        uint64_t result = sub_100039FC4(*(void *)(v6 + 5512), **((_DWORD **)a2 + 1), *(_DWORD *)(*((void *)a2 + 1) + 4));
        a2[35] = result;
        LODWORD(v8) = a2[1];
      }
    }
  }
  else
  {
    a2[35] = -1;
  }
LABEL_26:
  if ((int)v8 < *a2)
  {
    uint64_t v8 = (int)v8;
    do
      *(_DWORD *)(*((void *)a2 + 1) + 4 * v8++) = 0x40000000;
    while (v8 < *a2);
    LODWORD(v8) = a2[1];
  }
  int v27 = v8 - 1;
  if ((int)v8 < 1)
  {
    LODWORD(v32) = 0;
  }
  else
  {
    uint64_t v28 = *((void *)a2 + 5);
    if (v8 == 1)
    {
      uint64_t v29 = (int *)*((void *)a2 + 5);
    }
    else
    {
      uint64_t v29 = (int *)*((void *)a2 + 5);
      do
      {
        uint64_t v30 = v29;
        while (1)
        {
          int v31 = *v30++;
          if (v31 == -1) {
            break;
          }
          uint64_t v29 = v30;
          if ((unint64_t)v30 >= v28 + 4 * a2[8])
          {
            uint64_t v29 = 0;
            goto LABEL_41;
          }
        }
        ++v29;
        --v27;
      }
      while (v27);
    }
LABEL_41:
    unint64_t v32 = ((unint64_t)v29 - v28) >> 2;
    do
    {
      int v33 = *v29++;
      LODWORD(v32) = v32 + 1;
    }
    while (v33 != -1);
  }
  if ((int)v32 < a2[8])
  {
    uint64_t v34 = (int)v32;
    do
      *(_DWORD *)(*((void *)a2 + 5) + 4 * v34++) = -1;
    while (v34 < a2[8]);
  }
  return result;
}

uint64_t sub_10004DC34(uint64_t a1, _DWORD *a2, int *a3)
{
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  if (a1)
  {
    uint64_t v20 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v19 = sub_1000CD350(*(void *)(a1 + 6488));
    int v16 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v17 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v18);
    nullsub_1(v17);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v8 = (int *)sub_1000C0C70();
    if (setjmp(v8))
    {
      uint64_t v7 = 1;
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_12;
    }
    if (!sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        uint64_t v14 = 1;
        goto LABEL_11;
      }
      if (a2)
      {
        if (*(_DWORD *)(a1 + 6448))
        {
          uint64_t v14 = 18;
        }
        else
        {
          uint64_t v14 = sub_10004C5FC(a1, *(unsigned int *)(a1 + 6424), a2, v9, v10, v11, v12, v13);
          if (!v14)
          {
            if (*(_DWORD *)(a1 + 756) != 6)
            {
              if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
                uint64_t v15 = a1 + 808;
              }
              else {
                uint64_t v15 = a1 + 800;
              }
              if (a3) {
                *a3 = *(_DWORD *)(*(void *)v15 + 140) & ~(*(int *)(*(void *)v15 + 140) >> 31);
              }
            }
            uint64_t v14 = 0;
          }
        }
        goto LABEL_11;
      }
    }
    uint64_t v14 = 4;
LABEL_11:
    uint64_t v7 = v14;
    sub_1000C0CD8();
    goto LABEL_12;
  }
  uint64_t v20 = sub_1000C2EA8(0);
  uint64_t v19 = sub_1000CD350(0);
  int v16 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v17 = sub_1000D2948(0, 0, &v18);
  nullsub_1(v17);
  uint64_t v7 = 1;
LABEL_12:
  sub_100051144(v7);
  sub_1000D2948(v17, v18, 0);
  sub_1000C0D2C(v16);
  sub_1000CD350(v19);
  sub_1000C2EA8(v20);
  return v7;
}

uint64_t sub_10004DE64(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  unsigned int v19 = 0;
  int v18 = 0;
  uint64_t v17 = 0;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  if (a1)
  {
    uint64_t v17 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v16 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v13 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v14 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v15);
    nullsub_1(v14);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v11 = (int *)sub_1000C0C70();
    if (!setjmp(v11))
    {
      if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
      {
        int v12 = 4;
      }
      else if (*(_DWORD *)(a1 + 8160))
      {
        int v12 = 1;
      }
      else if (*(_DWORD *)(a1 + 6448))
      {
        int v12 = 18;
      }
      else
      {
        unsigned int v19 = sub_10004CF88(a1, a2, a3, 0, a4, a5, &v18, 0, 0, 0, 0, 0);
        int v12 = v19;
      }
      unsigned int v19 = v12;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 8160) = 1;
  }
  else
  {
    uint64_t v17 = sub_1000C2EA8(0);
    uint64_t v16 = sub_1000CD350(0);
    uint64_t v13 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    uint64_t v14 = sub_1000D2948(0, 0, &v15);
    nullsub_1(v14);
  }
  unsigned int v19 = 1;
LABEL_9:
  sub_100051144(v19);
  sub_1000D2948(v14, v15, 0);
  sub_1000C0D2C(v13);
  sub_1000CD350(v16);
  sub_1000C2EA8(v17);
  return v19;
}

uint64_t sub_10004E084(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  LODWORD(v12) = a2;
  int v14 = sub_1000B51A0(*(uint64_t **)(a1 + 8)) + 1;
  int v15 = sub_1000B51E0(*(uint64_t **)(a1 + 8)) + 1;
  uint64_t v16 = 2 * v14;
  uint64_t v24 = (_WORD *)sub_1000CD3E8(v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = 2 * v15;
  int v33 = (_WORD *)sub_1000CD3E8(v25, v26, v27, v28, v29, v30, v31, v32);
  uint64_t v54 = v25;
  uint64_t v55 = v16;
  if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
    uint64_t v34 = (uint64_t *)(a1 + 808);
  }
  else {
    uint64_t v34 = (uint64_t *)(a1 + 800);
  }
  uint64_t v35 = *v34;
  uint64_t v36 = *(void *)(*v34 + 40);
  unint64_t v37 = (unsigned int *)(v36 + 4 * (int)v12);
  if (*(_DWORD *)(*v34 + 32) <= (int)v12)
  {
    int v38 = 0;
    unsigned int v40 = 0;
    goto LABEL_42;
  }
  uint64_t v12 = (int)v12;
  int v57 = a3 - 1;
  if (a4)
  {
    int v38 = 0;
    while (*v37 != -1)
    {
      sub_1000B5360(*(void *)(a1 + 8), *v37, (uint64_t)v24, v33);
      if (sub_1000CF684(v24, L"<s>") && sub_1000CF684(v24, L"<e>"))
      {
        if (v38 >= v57) {
          goto LABEL_75;
        }
        if (a6) {
          *(unsigned char *)(a6 + v38) = *(unsigned char *)(*(void *)(v35 + 64) + v12);
        }
        if (a7) {
          *(_DWORD *)(a7 + 4 * v38) = *(_DWORD *)(*(void *)(v35 + 48) + 4 * v12);
        }
        if (a8) {
          *(_DWORD *)(a8 + 4 * v38) = *(_DWORD *)(*(void *)(v35 + 56) + 4 * v12);
        }
        uint64_t v39 = v38 + 1;
        *(_DWORD *)(a5 + 4 * v38) = *v37;
        if (!*(unsigned char *)(*(void *)(v35 + 80) + v12) || v37[1] == -1)
        {
          ++v38;
        }
        else
        {
          if (a6) {
            *(unsigned char *)(a6 + v39) = 0;
          }
          if (a7) {
            *(_DWORD *)(a7 + 4 * (int)v39) = *(_DWORD *)(a7 + 4 * v38);
          }
          if (a8) {
            *(_DWORD *)(a8 + 4 * (int)v39) = *(_DWORD *)(a8 + 4 * v38);
          }
          v38 += 2;
          *(_DWORD *)(a5 + 4 * (int)v39) = -2;
        }
      }
      ++v37;
      ++v12;
      if ((unint64_t)v37 >= *(void *)(v35 + 40) + 4 * *(int *)(v35 + 32)) {
        break;
      }
    }
LABEL_41:
    unsigned int v40 = 0;
    goto LABEL_42;
  }
  if (a6)
  {
    int v38 = 0;
    if (!a7)
    {
      int v41 = a3;
      while (1)
      {
        if (*v37 == -1)
        {
          unsigned int v40 = 0;
          goto LABEL_43;
        }
        sub_1000B5360(*(void *)(a1 + 8), *v37, (uint64_t)v24, v33);
        if (sub_1000CF684(v24, L"<s>") && sub_1000CF684(v24, L"<e>"))
        {
          if (v38 >= v57)
          {
            unsigned int v40 = 10;
            goto LABEL_43;
          }
          uint64_t v49 = v38;
          *(unsigned char *)(a6 + v38) = *(unsigned char *)(*(void *)(v35 + 64) + v12);
          if (a8) {
            *(_DWORD *)(a8 + 4 * v38) = *(_DWORD *)(*(void *)(v35 + 56) + 4 * v12);
          }
          ++v38;
          *(_DWORD *)(a5 + 4 * v49) = *v37;
        }
        unsigned int v40 = 0;
        ++v37;
        ++v12;
        if ((unint64_t)v37 >= *(void *)(v35 + 40) + 4 * *(int *)(v35 + 32)) {
          goto LABEL_43;
        }
      }
    }
    while (*v37 != -1)
    {
      sub_1000B5360(*(void *)(a1 + 8), *v37, (uint64_t)v24, v33);
      if (sub_1000CF684(v24, L"<s>") && sub_1000CF684(v24, L"<e>"))
      {
        if (v38 >= v57)
        {
LABEL_75:
          unsigned int v40 = 10;
          goto LABEL_42;
        }
        uint64_t v42 = v38;
        *(unsigned char *)(a6 + v38) = *(unsigned char *)(*(void *)(v35 + 64) + v12);
        *(_DWORD *)(a7 + 4 * v38) = *(_DWORD *)(*(void *)(v35 + 48) + 4 * v12);
        if (a8) {
          *(_DWORD *)(a8 + 4 * v38) = *(_DWORD *)(*(void *)(v35 + 56) + 4 * v12);
        }
        ++v38;
        *(_DWORD *)(a5 + 4 * v42) = *v37;
      }
      ++v37;
      ++v12;
      if ((unint64_t)v37 >= *(void *)(v35 + 40) + 4 * *(int *)(v35 + 32)) {
        goto LABEL_41;
      }
    }
    goto LABEL_41;
  }
  uint64_t v50 = 4 * (int)v12;
  while (1)
  {
    unsigned int v52 = *(_DWORD *)(v36 + v50);
    if (v52 == -1)
    {
      unsigned int v40 = 0;
      unint64_t v37 = (unsigned int *)(v36 + v50);
      goto LABEL_80;
    }
    sub_1000B5360(*(void *)(a1 + 8), v52, (uint64_t)v24, v33);
    if (sub_1000CF684(v24, L"<s>"))
    {
      if (sub_1000CF684(v24, L"<e>")) {
        break;
      }
    }
LABEL_66:
    ++v37;
    v50 += 4;
    uint64_t v51 = (unsigned int *)(v36 + v50);
    if (v36 + v50 >= (unint64_t)(*(void *)(v35 + 40) + 4 * *(int *)(v35 + 32)))
    {
      unsigned int v40 = 0;
      int v38 = a6;
      unint64_t v37 = v51;
      goto LABEL_42;
    }
  }
  if ((int)a6 < v57)
  {
    if (a7) {
      *(_DWORD *)(a7 + 4 * (int)a6) = *(_DWORD *)(*(void *)(v35 + 48) + v50);
    }
    uint64_t v53 = (int)a6;
    if (a8) {
      *(_DWORD *)(a8 + 4 * (int)a6) = *(_DWORD *)(*(void *)(v35 + 56) + v50);
    }
    LODWORD(a6) = a6 + 1;
    *(_DWORD *)(a5 + 4 * v53) = *(_DWORD *)(v36 + v50);
    goto LABEL_66;
  }
  unsigned int v40 = 10;
LABEL_80:
  int v38 = a6;
LABEL_42:
  int v41 = a3;
LABEL_43:
  uint64_t v43 = *(void *)(v35 + 40);
  uint64_t v44 = *(int *)(v35 + 32);
  int v45 = v38;
  if ((v38 & 0x80000000) == 0)
  {
    int v45 = v38;
    if (v38 < v41)
    {
      int v45 = v38 + 1;
      *(_DWORD *)(a5 + 4 * v38) = -1;
    }
  }
  if (a9) {
    *a9 = v45 - 1;
  }
  if ((unint64_t)v37 < v43 + 4 * v44 && v38 < v41) {
    uint64_t v47 = v40;
  }
  else {
    uint64_t v47 = 10;
  }
  sub_1000CD4D0(v33, v54);
  sub_1000CD4D0(v24, v55);
  return v47;
}

uint64_t sub_10004E598(unint64_t a1, int a2)
{
  unsigned int v197 = 0;
  uint64_t v196 = 0;
  uint64_t v195 = 0;
  uint64_t v193 = 0;
  uint64_t v194 = 0;
  uint64_t v192 = 0;
  if (a1)
  {
    uint64_t v196 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v195 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v192 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v193 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v194);
    nullsub_1(v193);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    BOOL v5 = (int *)sub_1000C0C70();
    if (setjmp(v5))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      int v6 = 4;
LABEL_14:
      unsigned int v197 = v6;
      sub_1000C0CD8();
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 8160))
    {
      int v6 = 1;
      goto LABEL_14;
    }
    if (!*(_DWORD *)(a1 + 5500))
    {
      int v6 = 7;
      goto LABEL_14;
    }
    if (*(_DWORD *)(a1 + 6448))
    {
      int v6 = 18;
      goto LABEL_14;
    }
    if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
      unint64_t v7 = a1 + 808;
    }
    else {
      unint64_t v7 = a1 + 800;
    }
    uint64_t v8 = *(void *)v7;
    if (*(int *)(*(void *)v7 + 4) <= 0 || a2 <= 0 || !*(void *)(a1 + 112))
    {
LABEL_164:
      int v6 = v197;
      goto LABEL_14;
    }
    if (!sub_10004971C(a1, -2))
    {
      int v6 = 13;
      goto LABEL_14;
    }
    uint64_t v16 = sub_1000405E4((int *)v8, v9, v10, v11, v12, v13, v14, v15);
    if (!v16)
    {
      int v6 = 2;
      goto LABEL_14;
    }
    uint64_t v24 = (uint64_t)v16;
    uint64_t v25 = *(int **)(a1 + 256);
    if (*(_DWORD *)(v8 + 4) >= a2) {
      int v26 = a2;
    }
    else {
      int v26 = *(_DWORD *)(v8 + 4);
    }
    if (v26 >= 1024) {
      uint64_t v27 = 1024;
    }
    else {
      uint64_t v27 = v26;
    }
    int v28 = v27;
    uint64_t v29 = (unsigned int **)sub_1000CD454(8 * (int)v27, v17, v18, v19, v20, v21, v22, v23);
    uint64_t v36 = (uint64_t)v29;
    unint64_t v37 = v29;
    int v186 = v26;
    int v187 = v27;
    uint64_t v189 = 8 * (int)v27;
    uint64_t v184 = v25;
    int v185 = v29;
    if (v26 < 1)
    {
      uint64_t v188 = v29;
      if (!*(void *)(a1 + 80))
      {
LABEL_101:
        uint64_t v90 = v27;
LABEL_102:
        uint64_t v104 = *(int *)(a1 + 776);
        if (v104)
        {
          unint64_t v105 = sub_1000CD3E8(2 * v104, v30, v36, v31, v32, v33, v34, v35);
          if (*(int *)(a1 + 776) < 1)
          {
            uint64_t v108 = *(unsigned int *)(a1 + 776);
          }
          else
          {
            uint64_t v106 = 0;
            do
            {
              uint64_t v107 = v106;
              *(_WORD *)(v105 + 2 * v106) = sub_1000B5A58(*(void *)(a1 + 8), *(_DWORD *)(*(void *)(a1 + 768) + 4 * v106));
              uint64_t v106 = v107 + 1;
            }
            while (v107 + 1 < *(int *)(a1 + 776));
            uint64_t v108 = *(int *)(a1 + 776);
          }
        }
        else
        {
          uint64_t v108 = 0;
          unint64_t v105 = 0;
        }
        unsigned int v183 = (void *)v105;
        uint64_t v109 = *(void *)(a1 + 112);
        *(void *)(a1 + 5512) = v109;
        uint64_t v110 = *(unsigned int **)(a1 + 808);
        int v111 = qword_100101CC0;
        if (qword_100101CC0) {
          int v111 = *(_DWORD *)(qword_100101CC0 + 1764);
        }
        LODWORD(v179) = 0;
        HIDWORD(v179) = v111;
        if (sub_10003A298(v109, v108, v105, v90, v188, 3, 1, 1u, v179, v184) == 3)
        {
          v110[1] = 0;
          v110[35] = -1;
        }
        else
        {
          unsigned int v112 = v110[35];
          v110[1] = sub_100039D00(*(void *)(a1 + 5512), 0, 0, *v110, *((_DWORD **)v110 + 1), *((void *)v110 + 2), v110[8], *((_DWORD **)v110 + 5), *((void *)v110 + 10), *((void *)v110 + 6), *((void *)v110 + 7), *((void *)v110 + 8), *((void *)v110 + 9), *((void *)v110 + 3), v110 + 35);
          if (v112 == -1) {
            v110[35] = -1;
          }
          v110[34] = sub_100039E88(*(void *)(a1 + 5512));
        }
        if (!*(_DWORD *)(a1 + 1320)) {
          goto LABEL_158;
        }
        int v191 = 0;
        unsigned int v113 = (2 * sub_10004F158(*((int **)v110 + 5), v110[1], v110[8])) | 1;
        uint64_t v182 = 4 * v113;
        long long v127 = (void *)sub_1000CD3E8(v182, v114, v115, v116, v117, v118, v119, v120);
        if ((int)v110[1] >= 1)
        {
          uint64_t v128 = 0;
          do
          {
            int v190 = 0;
            uint64_t v130 = (int *)*((void *)v110 + 5);
            if (v128)
            {
              int v131 = 0;
              unsigned int v132 = (_DWORD *)*((void *)v110 + 5);
              int v133 = v128;
              do
              {
                int v134 = v131 + 1;
                uint64_t v135 = v132;
                while (1)
                {
                  unint64_t v136 = (unint64_t)(v135 + 1);
                  if (*v135 == -1) {
                    break;
                  }
                  ++v135;
                  ++v134;
                  if (v136 >= *((void *)v110 + 5) + 4 * (int)v110[8])
                  {
                    int v138 = 0;
                    uint64_t v130 = 0;
                    goto LABEL_136;
                  }
                }
                uint64_t v137 = v135 + 1;
                unsigned int v132 = v137;
                int v131 = v134;
                --v133;
              }
              while (v133);
              int v138 = v134;
              uint64_t v130 = v137;
            }
            else
            {
              int v138 = 0;
            }
LABEL_136:
            uint64_t v139 = v130;
            unsigned int v197 = sub_10004E084(a1, v138, v113, 1, (uint64_t)v127, 0, 0, 0, &v190);
            int v146 = -1;
            unsigned int v147 = 0;
            uint64_t v148 = v139;
            do
            {
              unsigned int v149 = v147;
              int v150 = *v148++;
              int v151 = ++v146;
              ++v147;
            }
            while (v150 != -1);
            uint64_t v152 = (void *)sub_1000CD3E8(8 * v190, 0, v140, v141, v142, v143, v144, v145);
            uint64_t v160 = (void *)sub_1000CD3E8(v190, v153, v154, v155, v156, v157, v158, v159);
            int v161 = *(_DWORD *)(*((void *)v110 + 7) + 4 * v138);
            if (v161)
            {
              int v162 = *(_DWORD *)(*((void *)v110 + 7) + 4 * v138);
              int v163 = 0;
              unsigned int v164 = *(_DWORD **)(v24 + 40);
              do
              {
                int v165 = v163 + 1;
                uint64_t v166 = v164;
                while (1)
                {
                  unint64_t v167 = (unint64_t)(v166 + 1);
                  if (*v166 == -1) {
                    break;
                  }
                  ++v166;
                  ++v165;
                  if (v167 >= *(void *)(v24 + 40) + 4 * *(int *)(v24 + 32))
                  {
                    int v165 = -1;
                    goto LABEL_147;
                  }
                }
                unsigned int v164 = v166 + 1;
                int v163 = v165;
                --v162;
              }
              while (v162);
            }
            else
            {
              int v165 = 0;
            }
LABEL_147:
            *(void *)(*((void *)v110 + 3) + 8 * v128) = *(void *)(*(void *)(v24 + 24) + 8 * v161);
            if (v151 >= 1)
            {
              int v168 = v165;
              uint64_t v169 = v138;
              uint64_t v170 = v168;
              uint64_t v171 = v149;
              do
              {
                uint64_t v172 = 4 * v169;
                *(_DWORD *)(*((void *)v110 + 6) + v172) = *(_DWORD *)(*(void *)(v24 + 48) + 4 * v170);
                *(_DWORD *)(*((void *)v110 + 7) + v172) = *(_DWORD *)(*(void *)(v24 + 56) + 4 * v170);
                *(unsigned char *)(*((void *)v110 + 8) + v169++) = *(unsigned char *)(*(void *)(v24 + 64) + v170++);
                --v171;
              }
              while (v171);
            }
            uint64_t v129 = 2 * v161;
            *(_DWORD *)(*((void *)v110 + 1) + 4 * v128) = *(_DWORD *)(*((void *)v110 + 1) + 4 * v128)
                                                          - *(__int16 *)(*((void *)v110 + 2) + 2 * v128)
                                                          + *(__int16 *)(*(void *)(v24 + 16) + v129);
            *(_WORD *)(*((void *)v110 + 2) + 2 * v128) = *(_WORD *)(*(void *)(v24 + 16) + v129);
            sub_1000CD4D0(v160, v190);
            sub_1000CD4D0(v152, 8 * v190);
            ++v128;
          }
          while (v128 < (int)v110[1]);
        }
        sub_10004F1E4(a1, &v191, v121, v122, v123, v124, v125, v126);
        int v173 = v110[1];
        if (v173 <= 1)
        {
          if (v173 != 1 || !v191) {
            goto LABEL_157;
          }
          int v174 = 100;
        }
        else
        {
          int v174 = sub_100039FC4(*(void *)(a1 + 5512), **((_DWORD **)v110 + 1), *(_DWORD *)(*((void *)v110 + 1) + 4));
        }
        v110[35] = v174;
LABEL_157:
        sub_1000CD4D0(v127, v182);
LABEL_158:
        if (v186 >= 1)
        {
          int v175 = v187 + 1;
          signed int v176 = (uint64_t *)&v185[v187 - 1];
          do
          {
            int v177 = v175;
            uint64_t v178 = v176;
            sub_1000396A8(*(void *)(a1 + 5512));
            sub_100026244(*v178);
            int v175 = v177 - 1;
            signed int v176 = v178 - 1;
          }
          while (v177 - 1 > 1);
        }
        if (v183) {
          sub_1000CD4D0(v183, 2 * *(int *)(a1 + 776));
        }
        sub_1000CD4D0(v188, v189);
        sub_100040530(v24);
        goto LABEL_164;
      }
      uint64_t v55 = *(void *)(a1 + 80);
      BOOL v56 = (uint64_t *)(a1 + 80);
      unsigned int v58 = 0;
      unsigned int v57 = 0;
    }
    else
    {
      if ((int)v27 <= 1) {
        uint64_t v38 = 1;
      }
      else {
        uint64_t v38 = v27;
      }
      int v39 = 0;
      unsigned int v40 = 0;
      int v41 = 0;
      do
      {
        unsigned int v42 = v40;
        uint64_t v43 = *(int **)(v8 + 40);
        if (v41)
        {
          uint64_t v44 = *(_DWORD **)(v8 + 40);
          int v45 = v41;
          do
          {
            uint64_t v46 = v44;
            while (1)
            {
              unint64_t v47 = (unint64_t)(v46 + 1);
              if (*v46 == -1) {
                break;
              }
              ++v46;
              if (v47 >= *(void *)(v8 + 40) + 4 * *(int *)(v8 + 32))
              {
                uint64_t v43 = 0;
                goto LABEL_47;
              }
            }
            uint64_t v48 = v46 + 1;
            uint64_t v44 = v48;
            --v45;
          }
          while (v45);
          uint64_t v43 = v48;
        }
LABEL_47:
        int v49 = -1;
        uint64_t v50 = v43;
        do
        {
          int v51 = *v50++;
          int v52 = ++v49;
        }
        while (v51 != -1);
        unsigned int v53 = v42 + v52;
        if (v39 <= v52) {
          int v54 = v52;
        }
        else {
          int v54 = v39;
        }
        ++v41;
        int v39 = v54;
        unsigned int v40 = v53;
      }
      while (v41 != v38);
      if (!*(void *)(a1 + 80))
      {
        uint64_t v91 = v38;
        uint64_t v92 = 1;
        uint64_t v93 = 0;
        while (1)
        {
          uint64_t v94 = *(void *)(v8 + 40);
          if (v93)
          {
            int v95 = v93;
            do
            {
              int v96 = (_DWORD *)v94;
              while (1)
              {
                unint64_t v97 = (unint64_t)(v96 + 1);
                if (*v96 == -1) {
                  break;
                }
                ++v96;
                if (v97 >= *(void *)(v8 + 40) + 4 * *(int *)(v8 + 32))
                {
                  uint64_t v94 = 0;
                  goto LABEL_93;
                }
              }
              int v98 = v96 + 1;
              uint64_t v94 = (uint64_t)v98;
              --v95;
            }
            while (v95);
            uint64_t v94 = (uint64_t)v98;
          }
LABEL_93:
          uint64_t v99 = 0;
          do
          {
            int v100 = *(_DWORD *)(v94 + 4 * v99);
            int v101 = ++v99;
          }
          while (v100 != -1);
          int v102 = qword_100101CC0 ? *(_DWORD *)(qword_100101CC0 + 4928) : 0;
          uint64_t v103 = sub_1000303C4(v94, v101 - 1, *(uint64_t **)(a1 + 8), v102);
          v37[v93] = (unsigned int *)v103;
          if (!v103) {
            break;
          }
          ++v93;
          ++v92;
          if (v93 == v91)
          {
            uint64_t v188 = v37;
            goto LABEL_101;
          }
        }
        if (v93)
        {
          do
            sub_100026244((uint64_t)v37[(v92-- - 2)]);
          while (v92 > 1);
        }
        sub_1000CD4D0(v37, v189);
        sub_100040530(v24);
        int v6 = 2;
        goto LABEL_14;
      }
      uint64_t v188 = v37;
      uint64_t v55 = *(void *)(a1 + 80);
      BOOL v56 = (uint64_t *)(a1 + 80);
      unsigned int v57 = v54;
      unsigned int v58 = v53;
    }
    uint64_t v181 = v56;
    if (!sub_100031F74(v55, "\x01SCL", v28, v58, 0, 0, 1))
    {
      sub_1000CD4D0(v188, v189);
      sub_100040530(v24);
      int v6 = 4;
      goto LABEL_14;
    }
    uint64_t v180 = 2 * v57;
    unint64_t v66 = (__int16 *)sub_1000CD3E8(v180, v59, v60, v61, v62, v63, v64, v65);
    if (v186 >= 1)
    {
      int v67 = 0;
      if (v187 <= 1) {
        int v68 = 1;
      }
      else {
        int v68 = v187;
      }
      while (1)
      {
        unint64_t v69 = *(_DWORD **)(v8 + 40);
        if (v67)
        {
          int v70 = v67;
          do
          {
            uint64_t v71 = v69;
            while (1)
            {
              unint64_t v72 = (unint64_t)(v71 + 1);
              if (*v71 == -1) {
                break;
              }
              ++v71;
              if (v72 >= *(void *)(v8 + 40) + 4 * *(int *)(v8 + 32))
              {
                unint64_t v69 = 0;
                goto LABEL_72;
              }
            }
            uint64_t v73 = v71 + 1;
            unint64_t v69 = v73;
            --v70;
          }
          while (v70);
          unint64_t v69 = v73;
        }
LABEL_72:
        int v74 = -1;
        int v75 = 0;
        uint64_t v76 = v69;
        do
        {
          LODWORD(v77) = v75;
          int v78 = *v76++;
          int v79 = v74 + 1;
          ++v75;
          ++v74;
        }
        while (v78 != -1);
        int v80 = v79;
        if (v79 >= 1)
        {
          uint64_t v77 = v77;
          int v81 = v69;
          unsigned int v82 = v66;
          do
          {
            uint64_t v83 = v82;
            uint64_t v84 = v77;
            unsigned int v85 = *v81++;
            *unsigned int v82 = sub_1000B5A58(*(void *)(a1 + 8), v85);
            unsigned int v82 = v83 + 1;
            uint64_t v77 = v84 - 1;
          }
          while (v84 != 1);
        }
        if (!sub_10003287C(*v181, "\x01SCL", v66, v80, 0, v67)) {
          break;
        }
        if (++v67 == v68) {
          goto LABEL_79;
        }
      }
      sub_1000CD4D0(v66, v180);
      uint64_t v86 = 0;
      goto LABEL_110;
    }
LABEL_79:
    sub_1000CD4D0(v66, v180);
    uint64_t v86 = sub_100027004("\x01SCO", *v181, 1, 1, 0);
    if (v86)
    {
      uint64_t v87 = v86;
      unsigned int v88 = sub_100031BE8(*v181, "\x01SCL");
      if (v88 != -1)
      {
        int v89 = v88;
        if (sub_100027D30(v87, 0, v88, 0))
        {
          if (sub_100027D30(v87, v89, 0, 0))
          {
            *uint64_t v188 = (unsigned int *)v87;
            uint64_t v90 = 1;
            goto LABEL_102;
          }
        }
      }
      uint64_t v86 = v87;
    }
LABEL_110:
    sub_100026244(v86);
    sub_100040530(v24);
    sub_1000CD4D0(v188, v189);
    goto LABEL_164;
  }
  uint64_t v196 = sub_1000C2EA8(0);
  uint64_t v195 = sub_1000CD350(0);
  uint64_t v192 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v193 = sub_1000D2948(0, 0, &v194);
  nullsub_1(v193);
LABEL_8:
  unsigned int v197 = 1;
LABEL_9:
  sub_100051144(v197);
  sub_1000D2948(v193, v194, 0);
  sub_1000C0D2C(v192);
  sub_1000CD350(v195);
  sub_1000C2EA8(v196);
  return v197;
}

uint64_t sub_10004F158(int *a1, int a2, int a3)
{
  if (a2 < 1 || !a1) {
    return 0;
  }
  uint64_t result = 0;
  for (int i = 0; i != a2; ++i)
  {
    int v6 = a1;
    if (i)
    {
      int v6 = a1;
      int v7 = i;
      do
      {
        uint64_t v8 = v6;
        while (1)
        {
          int v9 = *v8++;
          if (v9 == -1) {
            break;
          }
          int v6 = v8;
          if (v8 >= &a1[a3]) {
            return result;
          }
        }
        ++v6;
        --v7;
      }
      while (v7);
    }
    int v10 = -1;
    do
    {
      int v11 = *v6++;
      ++v10;
    }
    while (v11 != -1);
    if ((int)result <= v10) {
      uint64_t result = v10;
    }
    else {
      uint64_t result = result;
    }
  }
  return result;
}

void *sub_10004F1E4(unint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
    int v9 = (uint64_t *)(a1 + 808);
  }
  else {
    int v9 = (uint64_t *)(a1 + 800);
  }
  v148[0] = 0;
  uint64_t v10 = *v9;
  uint64_t v11 = *(int *)(*v9 + 32);
  uint64_t v12 = (int *)sub_1000CD3E8(4 * v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v20 = (void *)sub_1000CD3E8(v11, v13, v14, v15, v16, v17, v18, v19);
  int v28 = (void *)sub_1000CD3E8(4 * v11, v21, v22, v23, v24, v25, v26, v27);
  uint64_t v137 = 4 * v11;
  int v146 = (void *)sub_1000CD3E8(4 * v11, v29, v30, v31, v32, v33, v34, v35);
  __dst = (void *)sub_1000CD3E8(v11, v36, v37, v38, v39, v40, v41, v42);
  uint64_t v140 = (void *)sub_1000CD3E8(2 * v11, v43, v44, v45, v46, v47, v48, v49);
  sub_10004C5FC(a1, *(unsigned int *)(a1 + 6424), v148, v50, v51, v52, v53, v54);
  if (v148[0] >= 1)
  {
    int v59 = 0;
    int v144 = 0;
    uint64_t v60 = 0xFFFFFFFFLL;
    unsigned int v147 = v28;
    int v138 = v20;
    uint64_t v139 = v12;
    while (1)
    {
      int v68 = *(unsigned int **)(v10 + 40);
      uint64_t v69 = *(int *)(v10 + 32);
      int v70 = v68;
      if (v59)
      {
        int v70 = *(unsigned int **)(v10 + 40);
        int v71 = v59;
        do
        {
          unint64_t v72 = v70;
          while (1)
          {
            int v73 = *v72++;
            if (v73 == -1) {
              break;
            }
            int v70 = v72;
            if (v72 >= &v68[v69])
            {
              int v70 = 0;
              goto LABEL_24;
            }
          }
          ++v70;
          --v71;
        }
        while (v71);
      }
LABEL_24:
      uint64_t v74 = 0;
      uint64_t v75 = 0xFFFFFFFF00000000;
      do
      {
        unsigned int v76 = v70[v74];
        v75 += (uint64_t)&_mh_execute_header;
        ++v74;
      }
      while (v76 != -1);
      int v77 = *(_DWORD *)(*(void *)(v10 + 8) + 4 * v59);
      if (!v59) {
        goto LABEL_73;
      }
      int v78 = v59 - 1;
      if (v59 == 1)
      {
        uint64_t v83 = 0;
        int v80 = *(unsigned int **)(v10 + 40);
      }
      else
      {
        int v79 = 0;
        int v80 = *(unsigned int **)(v10 + 40);
        do
        {
          ++v79;
          int v81 = v80;
          while (1)
          {
            int v82 = *v81++;
            if (v82 == -1) {
              break;
            }
            ++v79;
            int v80 = v81;
            if (v81 >= &v68[v69])
            {
              int v80 = 0;
              uint64_t v83 = -1;
              goto LABEL_36;
            }
          }
          ++v80;
          --v78;
        }
        while (v78);
        uint64_t v83 = v79;
      }
LABEL_36:
      LODWORD(v84) = 0;
      unsigned int v85 = &v68[v69];
      int v86 = v59;
      do
      {
        LODWORD(v84) = v84 + 1;
        uint64_t v87 = v68;
        while (1)
        {
          int v88 = *v87++;
          if (v88 == -1) {
            break;
          }
          LODWORD(v84) = v84 + 1;
          int v68 = v87;
          if (v87 >= v85)
          {
            int v68 = 0;
            uint64_t v84 = -1;
            goto LABEL_43;
          }
        }
        ++v68;
        --v86;
      }
      while (v86);
      uint64_t v84 = (int)v84;
LABEL_43:
      unsigned int v89 = 0;
      int v90 = -1;
      int v91 = 1;
      uint64_t v92 = (int *)v80;
      do
      {
        int v93 = v91;
        unsigned int v94 = v89;
        int v95 = *v92++;
        ++v90;
        ++v91;
        ++v89;
      }
      while (v95 != -1);
      unsigned int v96 = 0;
      LODWORD(v55) = -1;
      unint64_t v97 = v68;
      do
      {
        unsigned int v98 = v96;
        int v99 = *v97++;
        uint64_t v55 = (v55 + 1);
        --v93;
        ++v96;
      }
      while (v99 != -1);
      uint64_t v100 = 4 * v83;
      uint64_t v101 = *(void *)(v10 + 48);
      uint64_t v102 = *(void *)(v10 + 56);
      uint64_t v56 = 4 * v84;
      BOOL v103 = v102 == 0;
      uint64_t v104 = (int *)(v102 + 4 * v84);
      if (v102) {
        unint64_t v105 = (int *)(v102 + v100);
      }
      else {
        unint64_t v105 = 0;
      }
      if (v103) {
        uint64_t v104 = 0;
      }
      uint64_t v106 = (int *)(v101 + v100);
      uint64_t v107 = (int *)(v101 + v56);
      BOOL v108 = v101 == 0;
      if (v101) {
        uint64_t v109 = v106;
      }
      else {
        uint64_t v109 = 0;
      }
      if (v108) {
        uint64_t v107 = 0;
      }
      int v110 = v90 >= (int)v55 ? v55 : v90;
      if (v110 >= 1) {
        break;
      }
LABEL_67:
      if (v93)
      {
        if (v90 < (int)v55) {
          int v114 = -1;
        }
        else {
          int v114 = 1;
        }
        int v115 = v74 - 1;
        BOOL v116 = v60 == v77;
        if ((int)v60 < v77) {
          goto LABEL_115;
        }
      }
      else
      {
        int v114 = 0;
        if (v110 >= 1 && v109)
        {
          int v114 = 0;
          if ((int)v94 >= (int)v98) {
            uint64_t v117 = v98;
          }
          else {
            uint64_t v117 = v94;
          }
          uint64_t v118 = v117 - 1;
          do
          {
            int v120 = *v109++;
            int v119 = v120;
            int v121 = *v107++;
            BOOL v122 = v119 == v121;
            BOOL v123 = v119 < v121;
            if (v119 == v121) {
              int v124 = v114;
            }
            else {
              int v124 = 1;
            }
            if (v123) {
              int v114 = -1;
            }
            else {
              int v114 = v124;
            }
          }
          while (v122 && v118-- != 0);
        }
        if (v110 >= 1 && v105)
        {
          if ((int)v94 >= (int)v98) {
            uint64_t v126 = v98;
          }
          else {
            uint64_t v126 = v94;
          }
          uint64_t v127 = v126 - 1;
          do
          {
            int v129 = *v105++;
            int v128 = v129;
            int v130 = *v104++;
            BOOL v131 = v128 == v130;
            BOOL v132 = v128 < v130;
            if (v128 == v130) {
              int v133 = v114;
            }
            else {
              int v133 = 1;
            }
            if (v132) {
              int v114 = -1;
            }
            else {
              int v114 = v133;
            }
          }
          while (v131 && v127-- != 0);
        }
        int v115 = v74 - 1;
        BOOL v116 = v60 == v77;
        if ((int)v60 < v77)
        {
LABEL_115:
          uint64_t v67 = *(unsigned int *)(*(void *)(v10 + 8) + 4 * v59++);
          goto LABEL_116;
        }
      }
LABEL_110:
      if (v116 && v114 < 0) {
        goto LABEL_115;
      }
      unsigned int v145 = v60;
      __int16 v142 = *(_WORD *)(*(void *)(v10 + 16) + 2 * v59);
      uint64_t v143 = *(void *)(*(void *)(v10 + 24) + 8 * v59);
      uint64_t v61 = v12;
      size_t v62 = v75 >> 32;
      size_t v63 = 4 * (v75 >> 32);
      j__memmove(v61, v70, v63);
      j__memmove(v20, (const void *)(*(void *)(v10 + 80) + (((uint64_t)v70 - *(void *)(v10 + 40)) >> 2)), v62);
      j__memmove(v147, (char *)v70 + *(void *)(v10 + 48) - *(void *)(v10 + 40), v63);
      j__memmove(v146, (char *)v70 + *(void *)(v10 + 56) - *(void *)(v10 + 40), v63);
      j__memmove(__dst, (const void *)(*(void *)(v10 + 64) + (((uint64_t)v70 - *(void *)(v10 + 40)) >> 2)), v62);
      j__memmove(v140, (const void *)(*(void *)(v10 + 72) + (((uint64_t)v70 - *(void *)(v10 + 40)) >> 1)), 2 * v62);
      sub_10004D8BC(a1, (int *)v10, v59, 0);
      if (v114)
      {
        int v28 = v147;
        uint64_t v20 = v138;
        uint64_t v12 = v139;
        int v64 = sub_100050978(a1, v10, 0, v77, v142, v143, v115, v139, v138, (int *)v147, (int *)v146, __dst, v140, 0);
        BOOL v65 = v64 == v59;
        int v66 = v144;
        if (v64 != v59) {
          int v66 = 1;
        }
        int v144 = v66;
        if (v64 == v59) {
          ++v59;
        }
        else {
          int v59 = 0;
        }
        if (v65) {
          uint64_t v67 = v145;
        }
        else {
          uint64_t v67 = 0xFFFFFFFFLL;
        }
        goto LABEL_16;
      }
      int v144 = 1;
      uint64_t v67 = v145;
      uint64_t v20 = v138;
      uint64_t v12 = v139;
LABEL_116:
      int v28 = v147;
LABEL_16:
      sub_10004C5FC(a1, *(unsigned int *)(a1 + 6424), v148, v55, v56, v57, v58, v60);
      uint64_t v60 = v67;
      if (v59 >= v148[0]) {
        goto LABEL_119;
      }
    }
    if ((int)v94 >= (int)v98) {
      uint64_t v56 = v98;
    }
    else {
      uint64_t v56 = v94;
    }
    while (1)
    {
      unsigned int v111 = *v80++;
      uint64_t v57 = v111;
      unsigned int v112 = *v68++;
      uint64_t v58 = v112;
      BOOL v113 = v57 > v112;
      if (v57 < v112) {
        break;
      }
      if (v113)
      {
        int v114 = 1;
        int v115 = v74 - 1;
        BOOL v116 = v60 == v77;
        if ((int)v60 >= v77) {
          goto LABEL_110;
        }
        goto LABEL_115;
      }
      if (!--v56) {
        goto LABEL_67;
      }
    }
LABEL_73:
    int v114 = -1;
    int v115 = v74 - 1;
    BOOL v116 = v60 == v77;
    if ((int)v60 < v77) {
      goto LABEL_115;
    }
    goto LABEL_110;
  }
  int v144 = 0;
LABEL_119:
  if (a2) {
    *a2 = v144;
  }
  sub_1000CD4D0(v140, 2 * v11);
  sub_1000CD4D0(__dst, v11);
  sub_1000CD4D0(v146, v137);
  sub_1000CD4D0(v28, v137);
  sub_1000CD4D0(v20, v11);
  return sub_1000CD4D0(v12, v137);
}

uint64_t sub_10004F794(_DWORD *a1, int a2, unsigned int *a3)
{
  int v3 = a1 + 204;
  if (a2 == -2) {
    a2 = a1[1606];
  }
  if (*v3 == -1) {
    return 0;
  }
  if (*v3 != a2)
  {
    int v6 = a1[208];
    if (v6 != -1)
    {
      int v5 = a1[207];
      if (v6 == a2)
      {
        unsigned int v4 = 1;
        goto LABEL_63;
      }
      int v7 = a1[212];
      if (v7 != -1)
      {
        v5 += a1[211];
        if (v7 == a2)
        {
          unsigned int v4 = 2;
          goto LABEL_63;
        }
        int v8 = a1[216];
        if (v8 != -1)
        {
          v5 += a1[215];
          if (v8 == a2)
          {
            unsigned int v4 = 3;
            goto LABEL_63;
          }
          int v9 = a1[220];
          if (v9 != -1)
          {
            v5 += a1[219];
            if (v9 == a2)
            {
              unsigned int v4 = 4;
              goto LABEL_63;
            }
            int v10 = a1[224];
            if (v10 != -1)
            {
              v5 += a1[223];
              if (v10 == a2)
              {
                unsigned int v4 = 5;
                goto LABEL_63;
              }
              int v11 = a1[228];
              if (v11 != -1)
              {
                v5 += a1[227];
                if (v11 == a2)
                {
                  unsigned int v4 = 6;
                  goto LABEL_63;
                }
                int v12 = a1[232];
                if (v12 != -1)
                {
                  v5 += a1[231];
                  if (v12 == a2)
                  {
                    unsigned int v4 = 7;
                    goto LABEL_63;
                  }
                  int v13 = a1[236];
                  if (v13 != -1)
                  {
                    v5 += a1[235];
                    if (v13 == a2)
                    {
                      unsigned int v4 = 8;
                      goto LABEL_63;
                    }
                    int v14 = a1[240];
                    if (v14 != -1)
                    {
                      v5 += a1[239];
                      if (v14 == a2)
                      {
                        unsigned int v4 = 9;
                        goto LABEL_63;
                      }
                      int v15 = a1[244];
                      if (v15 != -1)
                      {
                        v5 += a1[243];
                        if (v15 == a2)
                        {
                          unsigned int v4 = 10;
                          goto LABEL_63;
                        }
                        int v16 = a1[248];
                        if (v16 != -1)
                        {
                          v5 += a1[247];
                          if (v16 == a2)
                          {
                            unsigned int v4 = 11;
                            goto LABEL_63;
                          }
                          int v17 = a1[252];
                          if (v17 != -1)
                          {
                            v5 += a1[251];
                            if (v17 == a2)
                            {
                              unsigned int v4 = 12;
                              goto LABEL_63;
                            }
                            int v18 = a1[256];
                            if (v18 != -1)
                            {
                              v5 += a1[255];
                              if (v18 == a2)
                              {
                                unsigned int v4 = 13;
                                goto LABEL_63;
                              }
                              int v19 = a1[260];
                              if (v19 != -1)
                              {
                                v5 += a1[259];
                                if (v19 == a2)
                                {
                                  unsigned int v4 = 14;
                                  goto LABEL_63;
                                }
                                int v20 = a1[264];
                                if (v20 != -1)
                                {
                                  v5 += a1[263];
                                  if (v20 == a2)
                                  {
                                    unsigned int v4 = 15;
                                    goto LABEL_63;
                                  }
                                  int v21 = a1[268];
                                  if (v21 != -1)
                                  {
                                    v5 += a1[267];
                                    if (v21 == a2)
                                    {
                                      unsigned int v4 = 16;
                                      goto LABEL_63;
                                    }
                                    int v22 = a1[272];
                                    if (v22 != -1)
                                    {
                                      v5 += a1[271];
                                      if (v22 == a2)
                                      {
                                        unsigned int v4 = 17;
                                        goto LABEL_63;
                                      }
                                      int v23 = a1[276];
                                      if (v23 != -1)
                                      {
                                        v5 += a1[275];
                                        if (v23 == a2)
                                        {
                                          unsigned int v4 = 18;
                                          goto LABEL_63;
                                        }
                                        int v24 = a1[280];
                                        if (v24 != -1 && v24 == a2)
                                        {
                                          v5 += a1[279];
                                          unsigned int v4 = 19;
                                          goto LABEL_63;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  unsigned int v4 = 0;
  int v5 = 0;
LABEL_63:
  if (a3) {
    *a3 = v4;
  }
  if (v3[4 * v4 + 3] + v5 <= 40) {
    return 1;
  }
  else {
    return 2;
  }
}

void *sub_10004FA94(uint64_t a1, int a2, int a3, long long *a4, int a5)
{
  int v8 = a2;
  if (a2 == -2) {
    int v8 = *(_DWORD *)(a1 + 6424);
  }
  int v10 = (void *)(a1 + 816);
  int v126 = 0;
  int v11 = sub_10004F794((_DWORD *)a1, v8, (unsigned int *)&v126);
  if (v11 == 1)
  {
    uint64_t v85 = v126;
    int v86 = &v10[2 * v126];
    uint64_t v87 = *((int *)v86 + 3);
    if (v87 == a3)
    {
      int v88 = *((_DWORD *)v86 + 2);
      uint64_t result = (void *)memcmp((const void *)(a1 + 4 * v88 + 1136), a4, 4 * a3);
      if (!result) {
        return result;
      }
      uint64_t v90 = v88;
    }
    else
    {
      int v88 = *((_DWORD *)v86 + 2);
      uint64_t v90 = v88;
    }
    uint64_t v119 = a1 + 4 * v90;
    j__memmove(&v10[2 * v85], &v10[2 * v85 + 2], 16 * (19 - (int)v85));
    j__memmove((void *)(v119 + 1136), (const void *)(v119 + 1136 + 4 * v87), 4 * (39 - v88 - (int)v87));
    uint64_t result = j__memmove((void *)(a1 + 832), (const void *)(a1 + 816), 0x130uLL);
    if (a3 <= 39) {
      goto LABEL_135;
    }
  }
  else
  {
    if (v11 == 2)
    {
      int v125 = a5;
      int v19 = (unsigned char *)sub_1000CD3E8(20, v12, v13, v14, v15, v16, v17, v18);
      int v20 = v19;
      int v21 = *(_DWORD *)(a1 + 824);
      BOOL v23 = (*(_DWORD *)(a1 + 828) | v21) >= 0 && v21 > 40;
      *int v19 = v23;
      int v24 = *(_DWORD *)(a1 + 840);
      BOOL v26 = (*(_DWORD *)(a1 + 844) | v24) >= 0 && v24 > 40;
      v19[1] = v26;
      int v27 = *(_DWORD *)(a1 + 856);
      BOOL v29 = (*(_DWORD *)(a1 + 860) | v27) >= 0 && v27 > 40;
      v19[2] = v29;
      int v30 = *(_DWORD *)(a1 + 872);
      BOOL v32 = (*(_DWORD *)(a1 + 876) | v30) >= 0 && v30 > 40;
      v19[3] = v32;
      int v33 = *(_DWORD *)(a1 + 888);
      BOOL v35 = (*(_DWORD *)(a1 + 892) | v33) >= 0 && v33 > 40;
      v19[4] = v35;
      int v36 = *(_DWORD *)(a1 + 904);
      BOOL v38 = (*(_DWORD *)(a1 + 908) | v36) >= 0 && v36 > 40;
      v19[5] = v38;
      int v39 = *(_DWORD *)(a1 + 920);
      BOOL v41 = (*(_DWORD *)(a1 + 924) | v39) >= 0 && v39 > 40;
      v19[6] = v41;
      int v42 = *(_DWORD *)(a1 + 936);
      BOOL v44 = (*(_DWORD *)(a1 + 940) | v42) >= 0 && v42 > 40;
      v19[7] = v44;
      int v45 = *(_DWORD *)(a1 + 952);
      BOOL v47 = (*(_DWORD *)(a1 + 956) | v45) >= 0 && v45 > 40;
      v19[8] = v47;
      int v48 = *(_DWORD *)(a1 + 968);
      BOOL v50 = (*(_DWORD *)(a1 + 972) | v48) >= 0 && v48 > 40;
      v19[9] = v50;
      int v51 = *(_DWORD *)(a1 + 984);
      BOOL v53 = (*(_DWORD *)(a1 + 988) | v51) >= 0 && v51 > 40;
      v19[10] = v53;
      int v54 = *(_DWORD *)(a1 + 1000);
      BOOL v56 = (*(_DWORD *)(a1 + 1004) | v54) >= 0 && v54 > 40;
      v19[11] = v56;
      int v57 = *(_DWORD *)(a1 + 1016);
      BOOL v59 = (*(_DWORD *)(a1 + 1020) | v57) >= 0 && v57 > 40;
      v19[12] = v59;
      int v60 = *(_DWORD *)(a1 + 1032);
      BOOL v62 = (*(_DWORD *)(a1 + 1036) | v60) >= 0 && v60 > 40;
      v19[13] = v62;
      int v63 = *(_DWORD *)(a1 + 1048);
      BOOL v65 = (*(_DWORD *)(a1 + 1052) | v63) >= 0 && v63 > 40;
      v19[14] = v65;
      int v66 = *(_DWORD *)(a1 + 1064);
      BOOL v68 = (*(_DWORD *)(a1 + 1068) | v66) >= 0 && v66 > 40;
      v19[15] = v68;
      int v69 = *(_DWORD *)(a1 + 1080);
      BOOL v71 = (*(_DWORD *)(a1 + 1084) | v69) >= 0 && v69 > 40;
      v19[16] = v71;
      int v72 = *(_DWORD *)(a1 + 1096);
      BOOL v74 = (*(_DWORD *)(a1 + 1100) | v72) >= 0 && v72 > 40;
      v19[17] = v74;
      int v75 = *(_DWORD *)(a1 + 1112);
      BOOL v77 = (*(_DWORD *)(a1 + 1116) | v75) >= 0 && v75 > 40;
      v19[18] = v77;
      int v78 = *(_DWORD *)(a1 + 1128);
      BOOL v80 = (*(_DWORD *)(a1 + 1132) | v78) >= 0 && v78 > 40;
      v19[19] = v80;
      int v81 = (_DWORD *)(a1 + 1120);
      for (uint64_t i = 19; i != -1; --i)
      {
        if (*((unsigned char *)v20 + i))
        {
          uint64_t v83 = v81[3];
          uint64_t v84 = (int)v81[2];
          *((void *)v81 + 1) = 0xFFFFFFFFLL;
          *int v81 = -1;
          if ((int)v83 >= 1) {
            memset((void *)(a1 + 1136 + 4 * v84), 255, 4 * v83);
          }
        }
        v81 -= 4;
      }
      sub_1000CD4D0(v20, 20);
      a5 = v125;
    }
    uint64_t result = j__memmove((void *)(a1 + 832), (const void *)(a1 + 816), 0x130uLL);
    if (a3 <= 39) {
LABEL_135:
    }
      uint64_t result = j__memmove((void *)(a1 + 1136 + 4 * a3), (const void *)(a1 + 1136), 160 - 4 * a3);
  }
  *int v10 = 0;
  *(void *)(a1 + 824) = 0;
  int v91 = *(_DWORD *)(a1 + 840);
  if ((v91 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 840) = v91 + a3;
  }
  int v92 = *(_DWORD *)(a1 + 856);
  if ((v92 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 856) = v92 + a3;
  }
  int v93 = *(_DWORD *)(a1 + 872);
  if ((v93 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 872) = v93 + a3;
  }
  int v94 = *(_DWORD *)(a1 + 888);
  if ((v94 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 888) = v94 + a3;
  }
  int v95 = *(_DWORD *)(a1 + 904);
  if ((v95 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 904) = v95 + a3;
  }
  int v96 = *(_DWORD *)(a1 + 920);
  if ((v96 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 920) = v96 + a3;
  }
  int v97 = *(_DWORD *)(a1 + 936);
  if ((v97 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 936) = v97 + a3;
  }
  int v98 = *(_DWORD *)(a1 + 952);
  if ((v98 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 952) = v98 + a3;
  }
  int v99 = *(_DWORD *)(a1 + 968);
  if ((v99 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 968) = v99 + a3;
  }
  int v100 = *(_DWORD *)(a1 + 984);
  if ((v100 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 984) = v100 + a3;
  }
  int v101 = *(_DWORD *)(a1 + 1000);
  if ((v101 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1000) = v101 + a3;
  }
  int v102 = *(_DWORD *)(a1 + 1016);
  if ((v102 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1016) = v102 + a3;
  }
  int v103 = *(_DWORD *)(a1 + 1032);
  if ((v103 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1032) = v103 + a3;
  }
  int v104 = *(_DWORD *)(a1 + 1048);
  if ((v104 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1048) = v104 + a3;
  }
  int v105 = *(_DWORD *)(a1 + 1064);
  if ((v105 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1064) = v105 + a3;
  }
  int v106 = *(_DWORD *)(a1 + 1080);
  if ((v106 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1080) = v106 + a3;
  }
  int v107 = *(_DWORD *)(a1 + 1096);
  if ((v107 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1096) = v107 + a3;
  }
  int v108 = *(_DWORD *)(a1 + 1112);
  if ((v108 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1112) = v108 + a3;
  }
  int v109 = *(_DWORD *)(a1 + 1128);
  if ((v109 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1128) = v109 + a3;
  }
  *(_DWORD *)(a1 + 824) = 0;
  *(_DWORD *)(a1 + 816) = v8;
  *(_DWORD *)(a1 + 828) = a3;
  *(_DWORD *)(a1 + 820) = a5;
  if (*(void *)(a1 + 104) && *(void *)(a1 + 5512) != *(void *)(a1 + 112))
  {
    uint64_t v110 = *(void *)(a1 + 800);
    unint64_t v111 = (a3 - 1);
    if (a3 < 1) {
      goto LABEL_191;
    }
LABEL_179:
    if (v111 >= 0x27) {
      unsigned int v112 = 39;
    }
    else {
      unsigned int v112 = v111;
    }
    if (v112 >= 7 && (unint64_t)(a1 - (void)a4 + 1136) >= 0x20)
    {
      uint64_t v120 = v112 + 1;
      uint64_t v113 = ((_BYTE)v112 + 1) & 0x78;
      int v121 = a4 + 1;
      BOOL v122 = (_OWORD *)(a1 + 1152);
      uint64_t v123 = v113;
      do
      {
        long long v124 = *v121;
        *(v122 - 1) = *(v121 - 1);
        *BOOL v122 = v124;
        v121 += 2;
        v122 += 2;
        v123 -= 8;
      }
      while (v123);
      if (v113 == v120)
      {
LABEL_189:
        uint64_t v118 = 0;
        do
        {
          *(_DWORD *)(*(void *)(v110 + 120) + v118) = *(_DWORD *)((char *)a4 + v118);
          v118 += 4;
        }
        while (4 * a3 != v118);
        goto LABEL_191;
      }
    }
    else
    {
      uint64_t v113 = 0;
    }
    int v114 = (int *)a4 + v113;
    int v115 = (_DWORD *)(4 * v113 + a1 + 1136);
    if (v111 >= 0x27) {
      unint64_t v111 = 39;
    }
    uint64_t v116 = v111 - v113 + 1;
    do
    {
      int v117 = *v114++;
      *v115++ = v117;
      --v116;
    }
    while (v116);
    goto LABEL_189;
  }
  uint64_t v110 = *(void *)(a1 + 808);
  unint64_t v111 = (a3 - 1);
  if (a3 >= 1) {
    goto LABEL_179;
  }
LABEL_191:
  *(_DWORD *)(v110 + 128) = a3;
  return result;
}

uint64_t sub_1000500E0(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 1296);
  if ((int)v3 < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  while (*(_DWORD *)(*(void *)(a1 + 1304) + 4 * v4) != a2)
  {
    if (v3 == ++v4) {
      return 0;
    }
  }
  if (a3) {
    *a3 = v4;
  }
  return 1;
}

void sub_100050124(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 800);
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 4);
    if (v5 >= 1)
    {
      do
      {
        int v26 = v5;
        int v27 = *(unsigned int **)(v4 + 40);
        if (--v5)
        {
          int v28 = &v27[*(int *)(v4 + 32)];
          int v29 = v5;
          do
          {
            int v30 = v27;
            while (1)
            {
              int v31 = *v30++;
              if (v31 == -1) {
                break;
              }
              int v27 = v30;
              if (v30 >= v28)
              {
                int v27 = 0;
                goto LABEL_24;
              }
            }
            ++v27;
            --v29;
          }
          while (v29);
        }
LABEL_24:
        unsigned int v32 = 0;
        int v33 = -1;
        uint64_t v34 = v27;
        do
        {
          unsigned int v35 = v32;
          int v36 = *v34++;
          ++v33;
          ++v32;
        }
        while (v36 != -1);
        if (v33 >= 1)
        {
          uint64_t v37 = v35;
          while (1)
          {
            unsigned int v38 = *v27++;
            if (sub_1000BDACC(*(void *)(v3 + 8), v38, a2)) {
              break;
            }
            if (!--v37) {
              goto LABEL_16;
            }
          }
          sub_10004D8BC(v3, (int *)v4, v5, 0);
        }
LABEL_16:
        ;
      }
      while (v26 > 1);
    }
  }
  uint64_t v6 = *(void *)(v3 + 808);
  if (v6)
  {
    int v7 = *(_DWORD *)(v6 + 4);
    if (v7 >= 1)
    {
      do
      {
        int v39 = v7;
        uint64_t v40 = *(unsigned int **)(v6 + 40);
        if (--v7)
        {
          BOOL v41 = &v40[*(int *)(v6 + 32)];
          int v42 = v7;
          do
          {
            uint64_t v43 = v40;
            while (1)
            {
              int v44 = *v43++;
              if (v44 == -1) {
                break;
              }
              uint64_t v40 = v43;
              if (v43 >= v41)
              {
                uint64_t v40 = 0;
                goto LABEL_40;
              }
            }
            ++v40;
            --v42;
          }
          while (v42);
        }
LABEL_40:
        unsigned int v45 = 0;
        int v46 = -1;
        BOOL v47 = v40;
        do
        {
          unsigned int v48 = v45;
          int v49 = *v47++;
          ++v46;
          ++v45;
        }
        while (v49 != -1);
        if (v46 >= 1)
        {
          uint64_t v50 = v48;
          while (1)
          {
            unsigned int v51 = *v40++;
            if (sub_1000BDACC(*(void *)(v3 + 8), v51, a2)) {
              break;
            }
            if (!--v50) {
              goto LABEL_32;
            }
          }
          sub_10004D8BC(v3, (int *)v6, v7, 0);
        }
LABEL_32:
        ;
      }
      while (v39 > 1);
    }
  }
  int v8 = *(_DWORD *)(v3 + 1296);
  if (v8 >= 1)
  {
    for (uint64_t i = 0; i < v8; ++i)
    {
      if (*(_DWORD *)(*(void *)(v3 + 1304) + 4 * i) != -1)
      {
        uint64_t v10 = *(void *)(v3 + 1312);
        int v11 = (int *)(v10 + (i << 7));
        if (*v11 >= 1)
        {
          int v12 = 0;
          uint64_t v13 = v10 + (i << 7);
          uint64_t v14 = v13 + 88;
          uint64_t v15 = v13 + 48;
          uint64_t v54 = i;
          uint64_t v55 = v13;
          uint64_t v16 = v13 + 8;
          do
          {
            BOOL v17 = sub_1000BDACC(*(void *)(v3 + 8), *(_DWORD *)(v55 + 4 * v12 + 88), a2);
            int v18 = *v11;
            if (v17)
            {
              uint64_t v19 = v12 + 1;
              unint64_t v20 = v3;
              uint64_t v21 = a2;
              uint64_t v22 = 4 * v12;
              uint64_t v23 = 4 * v19;
              size_t v24 = 4 * (v18 - (int)v19);
              j__memmove((void *)(v14 + v22), (const void *)(v14 + 4 * v19), v24);
              j__memmove((void *)(v15 + v22), (const void *)(v15 + v23), v24);
              uint64_t v25 = (void *)(v16 + v22);
              a2 = v21;
              unint64_t v3 = v20;
              j__memmove(v25, (const void *)(v16 + v23), v24);
              int v18 = *v11 - 1;
              *int v11 = v18;
              --v12;
            }
            ++v12;
          }
          while (v12 < v18);
          int v8 = *(_DWORD *)(v3 + 1296);
          uint64_t i = v54;
        }
      }
    }
  }
  if (*(int *)(v3 + 5496) >= 1)
  {
    int v52 = 0;
    uint64_t v53 = *(void *)(v3 + 5488);
    do
      sub_10005044C(v53, v52++);
    while (v52 < *(_DWORD *)(v3 + 5496));
  }
}

double sub_10005044C(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + ((uint64_t)a2 << 6);
  if (*(_DWORD *)v2)
  {
    sub_1000A4878(*(void *)(v2 + 16));
    *(void *)(v2 + 16) = 0;
    sub_1000D31E4(*(void *)(v2 + 8));
    *(void *)(v2 + 8) = 0;
    sub_1000B4C44(*(void *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    sub_1000C321C(*(void *)(v2 + 40));
    *(void *)(v2 + 40) = 0;
    sub_1000C321C(*(void *)(v2 + 56));
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v2 + 48) = 0;
    double result = COERCE_DOUBLE(&_mh_execute_header);
    *(void *)uint64_t v2 = &_mh_execute_header;
  }
  return result;
}

double sub_1000504CC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 5488);
  uint64_t v9 = *(unsigned int *)(a1 + 5496);
  if ((int)v9 < 1)
  {
    LODWORD(v12) = -1;
LABEL_9:
    sub_10005044C(*(void *)(a1 + 5488), v12);
    uint64_t v16 = sub_10003A05C(*(void *)(a1 + 5512));
    uint64_t v12 = (int)v12;
    uint64_t v17 = v8 + ((uint64_t)(int)v12 << 6);
    *(void *)(v17 + 8) = v16;
    if (!v16) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = (unsigned int *)(v8 + 32);
    LODWORD(v12) = -1;
    unsigned int v13 = -1;
    while (1)
    {
      unsigned int v15 = *v11;
      v11 += 16;
      unsigned int v14 = v15;
      if (v15 == -1) {
        break;
      }
      if (v14 < v13)
      {
        unsigned int v13 = v14;
        LODWORD(v12) = v10;
      }
      if (v9 == ++v10) {
        goto LABEL_9;
      }
    }
    LODWORD(v12) = v10;
    uint64_t v18 = sub_10003A05C(*(void *)(a1 + 5512));
    uint64_t v12 = (int)v12;
    uint64_t v17 = v8 + ((uint64_t)(int)v12 << 6);
    *(void *)(v17 + 8) = v18;
    if (!v18) {
      goto LABEL_22;
    }
  }
  *(void *)(v17 + 16) = 0;
  uint64_t v19 = sub_1000B47B0(*(int **)(a1 + 256));
  *(void *)(v17 + 24) = v19;
  if (!v19) {
    goto LABEL_22;
  }
  uint64_t v20 = v8 + (v12 << 6);
  *(_DWORD *)(v20 + 32) = a2;
  *(_DWORD *)(v20 + 36) = a3;
  uint64_t v21 = sub_1000C33A0(4 * (a3 + 1));
  *(void *)(v20 + 40) = v21;
  uint64_t v22 = (void *)(v20 + 40);
  if (!v21) {
    goto LABEL_22;
  }
  if (a3 >= 1)
  {
    uint64_t v23 = 0;
    do
    {
      *(_DWORD *)(*v22 + v23) = *(_DWORD *)(a4 + v23);
      v23 += 4;
    }
    while (4 * a3 != v23);
  }
  uint64_t v24 = *(unsigned int *)(a1 + 776);
  uint64_t v25 = v8 + (v12 << 6);
  *(_DWORD *)(v25 + 48) = v24;
  uint64_t v26 = sub_1000C33A0(4 * ((int)v24 + 1));
  *(void *)(v25 + 56) = v26;
  int v27 = (void *)(v25 + 56);
  if (!v26)
  {
LABEL_22:
    *(_DWORD *)uint64_t v17 = 1;
    return sub_10005044C(v8, v12);
  }
  if ((int)v24 >= 1)
  {
    uint64_t v28 = 0;
    do
    {
      *(_DWORD *)(*v27 + v28) = *(_DWORD *)(*(void *)(a1 + 768) + v28);
      v28 += 4;
    }
    while (4 * v24 != v28);
  }
  *(void *)&double result = 1;
  *(void *)uint64_t v17 = 1;
  return result;
}

uint64_t sub_100050688(uint64_t result, uint64_t a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(result + 1296);
  if (v3 < 1) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(unsigned int **)(result + 1304);
  unsigned int v7 = *v6;
  if (*v6 == -1)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    if (v3 < 2)
    {
      uint64_t v12 = 0;
      unsigned int *v6 = a3;
      unsigned int v13 = *(int **)(result + 1312);
      unsigned int v14 = v13;
      if (!*(_DWORD *)(result + 776)) {
        goto LABEL_13;
      }
      goto LABEL_10;
    }
    int v8 = 0;
    uint64_t v9 = 1;
    int v10 = *(_DWORD *)(result + 1296);
    while (1)
    {
      unsigned int v11 = v6[v9];
      if (v11 == -1) {
        break;
      }
      if (v11 < v7)
      {
        int v8 = v9;
        int v10 = *(_DWORD *)(result + 1296);
        unsigned int v7 = v6[v9];
      }
      if (++v9 >= v10)
      {
        uint64_t v12 = v8;
        v6[v8] = a3;
        unsigned int v13 = *(int **)(result + 1312);
        unsigned int v14 = &v13[32 * (uint64_t)v8];
        if (!*(_DWORD *)(result + 776)) {
          goto LABEL_13;
        }
        goto LABEL_10;
      }
    }
  }
  uint64_t v12 = (int)v9;
  v6[(int)v9] = a3;
  unsigned int v13 = *(int **)(result + 1312);
  unsigned int v14 = &v13[32 * (uint64_t)(int)v9];
  if (!*(_DWORD *)(result + 776))
  {
LABEL_13:
    int v15 = -1;
    goto LABEL_14;
  }
LABEL_10:
  int v15 = **(_DWORD **)(result + 768);
LABEL_14:
  v14[1] = v15;
  uint64_t v16 = *(int *)(a2 + 4);
  if ((int)v16 >= 10) {
    int v17 = 10;
  }
  else {
    int v17 = *(_DWORD *)(a2 + 4);
  }
  *unsigned int v14 = v17;
  if ((int)v16 < 1)
  {
LABEL_33:
    uint64_t v27 = (v16 + 1);
    uint64_t v28 = 11 - v27;
    uint64_t v29 = v12 << 7;
    if ((unint64_t)(11 - v27) < 8) {
      goto LABEL_39;
    }
    unint64_t v30 = 10 - v27;
    if (-2 - (int)v16 < v30) {
      goto LABEL_39;
    }
    if (HIDWORD(v30)) {
      goto LABEL_39;
    }
    int v31 = (_OWORD *)((char *)&v13[v16 + 16] + v29);
    *(void *)&long long v32 = -1;
    *((void *)&v32 + 1) = -1;
    *(void *)&long long v33 = 0x4000000040000000;
    *((void *)&v33 + 1) = 0x4000000040000000;
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *(_OWORD *)((char *)v31 + 24) = v32;
      *(_OWORD *)((char *)v31 + 40) = v32;
      *(v31 - 1) = v33;
      *int v31 = v33;
      *(_OWORD *)((char *)v31 - 56) = v33;
      *(_OWORD *)((char *)v31 - 40) = v33;
      v31 += 2;
      v34 -= 8;
    }
    while (v34);
    v16 += v28 & 0xFFFFFFFFFFFFFFF8;
    if (v28 != (v28 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_39:
      uint64_t v35 = v16 + 1;
      int v36 = (int *)((char *)&v13[v16 + 12] + v29);
      do
      {
        v36[10] = -1;
        *int v36 = 0x40000000;
        *(v36 - 10) = 0x40000000;
        ++v36;
      }
      while (v35++ != 10);
    }
    goto LABEL_42;
  }
  unsigned int v38 = a3;
  uint64_t v18 = 0;
  if (v17 <= 1) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = v17;
  }
  do
  {
    while (1)
    {
      uint64_t v21 = *(int **)(a2 + 40);
      if (v18) {
        break;
      }
      if (v21) {
        goto LABEL_31;
      }
LABEL_21:
      uint64_t v20 = &v13[32 * v12 + v18];
      v20[22] = -1;
      v20[12] = 0x40000000;
      v20[2] = 0x40000000;
      if (++v18 == v19) {
        goto LABEL_32;
      }
    }
    uint64_t v22 = &v21[*(int *)(a2 + 32)];
    int v23 = v18;
    do
    {
      uint64_t v24 = v21;
      while (1)
      {
        int v25 = *v24++;
        if (v25 == -1) {
          break;
        }
        uint64_t v21 = v24;
        if (v24 >= v22) {
          goto LABEL_21;
        }
      }
      ++v21;
      --v23;
    }
    while (v23);
LABEL_31:
    uint64_t v26 = &v13[32 * v12 + v18];
    v26[22] = *v21;
    double result = sub_100039EA0(*(void *)(v5 + 5512));
    v26[12] = *(_DWORD *)(*(void *)(a2 + 8) + 4 * v18) - result;
    v26[2] = *(_DWORD *)(*(void *)(a2 + 8) + 4 * v18++);
  }
  while (v18 != v19);
LABEL_32:
  a3 = v38;
  if ((int)v16 <= 9) {
    goto LABEL_33;
  }
LABEL_42:
  if (*(_DWORD *)(v5 + 1300) < a3) {
    *(_DWORD *)(v5 + 1300) = a3;
  }
  return result;
}

uint64_t sub_100050978(unint64_t a1, uint64_t a2, uint64_t a3, int a4, __int16 a5, uint64_t a6, int a7, int *a8, const void *a9, int *a10, int *a11, const void *a12, const void *a13, int a14)
{
  int v21 = *(_DWORD *)(a2 + 4);
  if (v21 >= (int)a3) {
    uint64_t v22 = a3;
  }
  else {
    uint64_t v22 = v21;
  }
  if (v21 <= (int)a3)
  {
    uint64_t v23 = v22;
    if ((int)v22 >= v21) {
      int v26 = *(_DWORD *)(a2 + 4);
    }
    else {
      int v26 = v22;
    }
    if (v26 >= 1)
    {
LABEL_13:
      int v27 = 0;
      uint64_t v29 = *(void *)(a2 + 48);
      uint64_t v28 = *(void *)(a2 + 56);
      uint64_t v30 = *(void *)(a2 + 40);
      int v31 = -1;
      while (1)
      {
        if (v27)
        {
          int v32 = 0;
          long long v33 = *(int **)(a2 + 40);
          int v34 = v27;
          do
          {
            ++v32;
            uint64_t v35 = v33;
            while (1)
            {
              int v36 = *v35++;
              if (v36 == -1) {
                break;
              }
              ++v32;
              long long v33 = v35;
              if ((unint64_t)v35 >= v30 + 4 * *(int *)(a2 + 32))
              {
                long long v33 = 0;
                goto LABEL_25;
              }
            }
            ++v33;
            --v34;
          }
          while (v34);
          int v31 = v32;
        }
        else
        {
          int v31 = 0;
          long long v33 = *(int **)(a2 + 40);
        }
LABEL_25:
        int v37 = a7 + 1;
        unsigned int v38 = v33;
        do
        {
          int v39 = *v38++;
          --v37;
        }
        while (v39 != -1);
        uint64_t v40 = 4 * v31;
        BOOL v41 = (int *)(v28 + v40);
        if (!v28) {
          BOOL v41 = 0;
        }
        int v42 = (int *)(v29 + v40);
        if (!v29) {
          int v42 = 0;
        }
        if (!v37)
        {
          uint64_t v43 = a8;
          uint64_t v44 = a7;
          if (a7 < 1) {
            return 0xFFFFFFFFLL;
          }
          do
          {
            int v46 = *v33++;
            int v45 = v46;
            int v47 = *v43++;
            if (v45 != v47) {
              goto LABEL_15;
            }
            --v44;
          }
          while (v44);
          int v48 = 0;
          if (v42)
          {
            int v49 = a10;
            uint64_t v50 = a7 - 1;
            do
            {
              int v52 = *v42++;
              int v51 = v52;
              int v53 = *v49++;
              BOOL v54 = v51 == v53;
              BOOL v55 = v51 < v53;
              if (v51 != v53) {
                int v48 = 1;
              }
              if (v55) {
                int v48 = -1;
              }
            }
            while (v54 && v50-- != 0);
          }
          if (v41)
          {
            int v57 = a11;
            uint64_t v58 = a7 - 1;
            do
            {
              int v60 = *v41++;
              int v59 = v60;
              int v61 = *v57++;
              BOOL v62 = v59 == v61;
              BOOL v63 = v59 < v61;
              if (v59 != v61) {
                int v48 = 1;
              }
              if (v63) {
                int v48 = -1;
              }
            }
            while (v62 && v58-- != 0);
          }
          if (!v48) {
            return 0xFFFFFFFFLL;
          }
        }
LABEL_15:
        if (++v27 == v26) {
          goto LABEL_65;
        }
      }
    }
  }
  else
  {
    uint64_t v23 = a3;
    uint64_t v24 = (int *)(*(void *)(a2 + 8) + 4 * (int)a3);
    while (1)
    {
      int v25 = *v24++;
      if (v25 >= a4) {
        break;
      }
      uint64_t v23 = (v23 + 1);
      if (v21 == v23)
      {
        uint64_t v23 = *(unsigned int *)(a2 + 4);
        break;
      }
    }
    if ((int)v23 >= v21) {
      int v26 = *(_DWORD *)(a2 + 4);
    }
    else {
      int v26 = v23;
    }
    if (v26 >= 1) {
      goto LABEL_13;
    }
  }
  int v31 = -1;
LABEL_65:
  int v137 = a4;
  if ((int)v23 >= v21) {
    goto LABEL_114;
  }
  uint64_t v66 = *(void *)(a2 + 48);
  uint64_t v65 = *(void *)(a2 + 56);
  int v67 = v23;
  while (1)
  {
    if (v67)
    {
      int v68 = 0;
      int v69 = *(int **)(a2 + 40);
      int v70 = v67;
      do
      {
        ++v68;
        BOOL v71 = v69;
        while (1)
        {
          int v72 = *v71++;
          if (v72 == -1) {
            break;
          }
          ++v68;
          int v69 = v71;
          if ((unint64_t)v71 >= *(void *)(a2 + 40) + 4 * *(int *)(a2 + 32))
          {
            int v69 = 0;
            goto LABEL_78;
          }
        }
        ++v69;
        --v70;
      }
      while (v70);
      int v31 = v68;
    }
    else
    {
      int v31 = 0;
      int v69 = *(int **)(a2 + 40);
    }
LABEL_78:
    int v73 = a7 + 1;
    BOOL v74 = v69;
    do
    {
      int v75 = *v74++;
      --v73;
    }
    while (v75 != -1);
    uint64_t v76 = 4 * v31;
    BOOL v77 = (int *)(v65 + v76);
    if (!v65) {
      BOOL v77 = 0;
    }
    int v78 = (int *)(v66 + v76);
    if (!v66) {
      int v78 = 0;
    }
    if (v73) {
      goto LABEL_68;
    }
    int v79 = a8;
    uint64_t v80 = a7;
    if (a7 < 1) {
      break;
    }
    while (1)
    {
      int v82 = *v69++;
      int v81 = v82;
      int v83 = *v79++;
      if (v81 != v83) {
        break;
      }
      if (!--v80)
      {
        int v84 = 0;
        if (v78)
        {
          uint64_t v85 = a10;
          uint64_t v86 = a7 - 1;
          do
          {
            int v88 = *v78++;
            int v87 = v88;
            int v89 = *v85++;
            BOOL v90 = v87 == v89;
            BOOL v91 = v87 < v89;
            if (v87 != v89) {
              int v84 = 1;
            }
            if (v91) {
              int v84 = -1;
            }
          }
          while (v90 && v86-- != 0);
        }
        if (v77)
        {
          int v93 = a11;
          uint64_t v94 = a7 - 1;
          do
          {
            int v96 = *v77++;
            int v95 = v96;
            int v97 = *v93++;
            BOOL v98 = v95 == v97;
            BOOL v99 = v95 < v97;
            if (v95 != v97) {
              int v84 = 1;
            }
            if (v99) {
              int v84 = -1;
            }
          }
          while (v98 && v94-- != 0);
        }
        if (!v84) {
          goto LABEL_113;
        }
        break;
      }
    }
LABEL_68:
    if (++v67 == v21) {
      goto LABEL_114;
    }
  }
LABEL_113:
  sub_10004D8BC(a1, (int *)a2, v67, a14);
  int v21 = *(_DWORD *)(a2 + 4);
LABEL_114:
  if (v21 > (int)v23)
  {
    do
    {
      uint64_t v101 = *(void *)(a2 + 40);
      uint64_t v102 = *(int *)(a2 + 32);
      int v103 = v21 - 1;
      if (v21 == 1)
      {
        int v104 = *(int **)(a2 + 40);
      }
      else
      {
        int v104 = *(int **)(a2 + 40);
        int v105 = v21 - 1;
        do
        {
          int v106 = v104;
          while (1)
          {
            int v107 = *v106++;
            if (v107 == -1) {
              break;
            }
            int v104 = v106;
            if ((unint64_t)v106 >= v101 + 4 * v102)
            {
              int v104 = 0;
              goto LABEL_127;
            }
          }
          ++v104;
          --v105;
        }
        while (v105);
      }
LABEL_127:
      int v108 = a7 + 1 + (((unint64_t)v104 - v101) >> 2);
      do
      {
        int v109 = *v104++;
        ++v108;
      }
      while (v109 != -1);
      if (v108 > (int)v102 || v21 >= *(_DWORD *)a2) {
        sub_10004D8BC(a1, (int *)a2, v21 - 1, a14);
      }
      int v21 = v103;
    }
    while (v103 > (int)v23);
  }
  int v110 = v23 - 1;
  if ((int)v23 < 1)
  {
    uint64_t v116 = *(int *)(a2 + 32);
    if (a7 < (int)v116) {
      goto LABEL_141;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v111 = *(void *)(a2 + 40);
  if (v23 == 1)
  {
    uint64_t v116 = *(int *)(a2 + 32);
    if (a7 < (int)v116) {
      goto LABEL_141;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v112 = *(int **)(a2 + 40);
  do
  {
    uint64_t v113 = v112;
    while (1)
    {
      int v114 = *v113++;
      if (v114 == -1) {
        break;
      }
      unsigned int v112 = v113;
      if ((unint64_t)v113 >= v111 + 4 * *(int *)(a2 + 32))
      {
        unsigned int v112 = 0;
        goto LABEL_140;
      }
    }
    ++v112;
    --v110;
  }
  while (v110);
LABEL_140:
  int v115 = (((unint64_t)v112 - v111) >> 2) + a7;
  uint64_t v116 = *(int *)(a2 + 32);
  if (v115 >= (int)v116) {
    return 0xFFFFFFFFLL;
  }
LABEL_141:
  uint64_t v117 = *(void *)(a2 + 40);
  uint64_t v136 = a6;
  __int16 v135 = a5;
  __src = a8;
  if (v23)
  {
    uint64_t v118 = *(int **)(a2 + 40);
    int v119 = v23;
    do
    {
      uint64_t v120 = v118;
      while (1)
      {
        int v121 = *v120++;
        if (v121 == -1) {
          break;
        }
        uint64_t v118 = v120;
        if ((unint64_t)v120 >= v117 + 4 * v116)
        {
          uint64_t v118 = 0;
          goto LABEL_154;
        }
      }
      ++v118;
      --v119;
    }
    while (v119);
  }
  else
  {
    uint64_t v118 = *(int **)(a2 + 40);
  }
LABEL_154:
  uint64_t v122 = (uint64_t)v118 - v117;
  uint64_t v123 = (int)(v122 >> 2);
  uint64_t v124 = 4 * v123;
  uint64_t v131 = 4 * (a7 + 1);
  int v125 = ((unint64_t)v122 >> 2) + a7;
  int v126 = ~v125;
  j__memmove((void *)(v117 + 4 * v123 + v131), (const void *)(v117 + 4 * v123), 4 * ((int)v116 + ~v125));
  j__memmove((void *)(*(void *)(a2 + 40) + 4 * v123), __src, 4 * a7);
  uint64_t v127 = v125;
  int v132 = v125;
  __srca = (void *)v125;
  uint64_t v128 = 4 * v125;
  *(_DWORD *)(*(void *)(a2 + 40) + v128) = -1;
  j__memmove((void *)(*(void *)(a2 + 80) + v123 + a7 + 1), (const void *)(*(void *)(a2 + 80) + v123), *(_DWORD *)(a2 + 32) + v126);
  j__memmove((void *)(*(void *)(a2 + 80) + v123), a9, a7);
  *(unsigned char *)(*(void *)(a2 + 80) + v127) = 0;
  j__memmove((void *)(*(void *)(a2 + 48) + v124 + v131), (const void *)(*(void *)(a2 + 48) + v124), 4 * (*(_DWORD *)(a2 + 32) + v126));
  j__memmove((void *)(*(void *)(a2 + 48) + 4 * v123), a10, 4 * a7);
  *(_DWORD *)(*(void *)(a2 + 48) + v128) = -1;
  j__memmove((void *)(*(void *)(a2 + 56) + v124 + v131), (const void *)(*(void *)(a2 + 56) + v124), 4 * (*(_DWORD *)(a2 + 32) + v126));
  j__memmove((void *)(*(void *)(a2 + 56) + 4 * v123), a11, 4 * a7);
  *(_DWORD *)(*(void *)(a2 + 56) + v128) = -1;
  j__memmove((void *)(*(void *)(a2 + 64) + v123 + a7 + 1), (const void *)(*(void *)(a2 + 64) + v123), *(_DWORD *)(a2 + 32) + v126);
  j__memmove((void *)(*(void *)(a2 + 64) + v123), a12, a7);
  *((unsigned char *)__srca + *(void *)(a2 + 64)) = 0;
  j__memmove((void *)(*(void *)(a2 + 72) + 2 * v123 + 2 * (a7 + 1)), (const void *)(*(void *)(a2 + 72) + 2 * v123), 2 * (*(_DWORD *)(a2 + 32) + v126));
  j__memmove((void *)(*(void *)(a2 + 72) + 2 * v123), a13, 2 * a7);
  *(_WORD *)(*(void *)(a2 + 72) + 2 * v132) = -1;
  uint64_t v129 = (int)v23 + 1;
  j__memmove((void *)(*(void *)(a2 + 8) + 4 * v129), (const void *)(*(void *)(a2 + 8) + 4 * (int)v23), 4 * (*(_DWORD *)a2 + ~v23));
  *(_DWORD *)(*(void *)(a2 + 8) + 4 * (int)v23) = v137;
  j__memmove((void *)(*(void *)(a2 + 16) + 2 * v129), (const void *)(*(void *)(a2 + 16) + 2 * (int)v23), 2 * (*(_DWORD *)a2 + ~v23));
  *(_WORD *)(*(void *)(a2 + 16) + 2 * (int)v23) = v135;
  j__memmove((void *)(*(void *)(a2 + 24) + 8 * v129), (const void *)(*(void *)(a2 + 24) + 8 * (int)v23), 8 * (*(_DWORD *)a2 + ~v23));
  *(void *)(*(void *)(a2 + 24) + 8 * (int)v23) = v136;
  ++*(_DWORD *)(a2 + 4);
  return v23;
}

uint64_t sub_100051144(uint64_t a1)
{
  if (sub_1000CAB8C())
  {
    uint64_t v2 = sub_10003FD70();
    __sprintf_chk(v4, 0, 0x80uLL, "%d %s", a1, v2);
    sub_1000CABA0();
  }
  return a1;
}

uint64_t sub_1000511D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    LODWORD(result) = sub_1000B4400(result);
    if ((result - 1) >= 4) {
      return 0;
    }
    else {
      return result;
    }
  }
  return result;
}

double sub_100051200(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 6384)) {
    sub_1000C321C(*(void *)(a1 + 6376));
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 6360) = 0u;
  *(_OWORD *)(a1 + 6376) = 0u;
  *(void *)(a1 + 6392) = 0;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(_DWORD *)(a1 + 6368) = 0;
  *(_DWORD *)(a1 + 6388) = 0;
  *(_DWORD *)(a1 + 6396) = -1;
  return result;
}

uint64_t sub_100051258(uint64_t a1)
{
  uint64_t result = sub_1000C321C(*(void *)(a1 + 5520));
  *(void *)(a1 + 5520) = 0;
  *(_DWORD *)(a1 + 5528) = 0;
  return result;
}

uint64_t sub_100051288(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if (a2 == -1) {
    return 4;
  }
  if (!sub_1000B5584(*(uint64_t **)(a1 + 8), a2)) {
    return 4;
  }
  int v6 = sub_1000B589C(*(void *)(a1 + 8), a2);
  if (v6 == 0xFFFFFF) {
    return 4;
  }
  int v8 = v6;
  int v9 = sub_1000B5A58(*(void *)(a1 + 8), a2);
  if (a3) {
    *a3 = v9 != 0xFFFF;
  }
  if (v9 != 0xFFFF) {
    return 0;
  }
  unsigned int v10 = sub_1000BB274(*(uint64_t **)(a1 + 8), v8);
  if (v10 != 0xFFFF)
  {
    unsigned int v11 = v10;
    uint64_t v12 = *(void *)(a1 + 104);
    if (v12 && !sub_10003A0B4(*(void *)(a1 + 104)))
    {
LABEL_40:
      if (sub_1000BB3A0(*(void *)(a1 + 8), v11)) {
        goto LABEL_41;
      }
LABEL_44:
      uint64_t result = 1;
      uint64_t v20 = *(_WORD **)(a1 + 5520);
      if (!v20) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    uint64_t v13 = *(void *)(a1 + 112);
    if (v13) {
      int v14 = sub_10003A0B4(*(void *)(a1 + 112));
    }
    else {
      int v14 = 1;
    }
    uint64_t v15 = *(void *)(a1 + 136);
    if (v15) {
      int v16 = sub_10003A0B4(*(void *)(a1 + 136));
    }
    else {
      int v16 = 1;
    }
    uint64_t v17 = *(void *)(a1 + 144);
    if (v17)
    {
      BOOL v18 = sub_10003A0B4(v17) != 0;
      BOOL v19 = v18;
    }
    else
    {
      BOOL v19 = 0;
      BOOL v18 = 1;
    }
    if (v14 && v16 && v18)
    {
      uint64_t result = 0;
      uint64_t v20 = *(_WORD **)(a1 + 5520);
      if (!v20) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    if (v12) {
      int v21 = sub_10003A0DC(*(void *)(a1 + 104)) & 1;
    }
    else {
      int v21 = 1;
    }
    if (v13 && v14) {
      v21 &= sub_10003A0DC(*(void *)(a1 + 112));
    }
    if (v15 && v16)
    {
      v21 &= sub_10003A0DC(*(void *)(a1 + 136));
      if (!v19)
      {
LABEL_39:
        if (!v21) {
          goto LABEL_44;
        }
        goto LABEL_40;
      }
    }
    else if (!v19)
    {
      goto LABEL_39;
    }
    v21 &= sub_10003A0DC(*(void *)(a1 + 144));
    goto LABEL_39;
  }
LABEL_41:
  uint64_t result = 15;
  uint64_t v20 = *(_WORD **)(a1 + 5520);
  if (v20) {
LABEL_42:
  }
    *uint64_t v20 = 0;
LABEL_43:
  *(_DWORD *)(a1 + 5532) = 0;
  return result;
}

uint64_t sub_10005149C(uint64_t a1, _WORD *a2, _WORD *a3, _DWORD *a4)
{
  if (!a2) {
    return 4;
  }
  int v15 = 0;
  *a4 = -1;
  unsigned int v8 = sub_1000B5208(*(uint64_t **)(a1 + 8), a2);
  unsigned int v14 = v8;
  if (v8 != -1)
  {
    uint64_t result = sub_100051288(a1, v8, 0);
    if (result)
    {
LABEL_5:
      unsigned int v10 = *(_WORD **)(a1 + 5520);
      if (v10) {
        *unsigned int v10 = 0;
      }
      *(_DWORD *)(a1 + 5532) = 0;
      return result;
    }
LABEL_4:
    *a4 = v14;
    goto LABEL_5;
  }
  int v11 = sub_1000BB3F8(*(uint64_t **)(a1 + 8), (unint64_t)a2, a3, 0, &v14, &v15);
  int v12 = v11;
  if (v11 == 1) {
    unsigned int v13 = 16;
  }
  else {
    unsigned int v13 = 1;
  }
  if (v11 == 2) {
    uint64_t result = 15;
  }
  else {
    uint64_t result = v13;
  }
  if (!v12)
  {
    uint64_t result = sub_100051288(a1, v14, 0);
    if (result) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_1000515A0(unint64_t a1, _WORD *a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v24 = 1;
  uint64_t v8 = 4;
  if (a2 && a5)
  {
    unsigned int v10 = a6;
    unsigned int v25 = 0;
    *a5 = 0;
    uint64_t v15 = (int)a3;
    int v16 = sub_1000CD454((int)a3, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    int v17 = sub_1000BC14C(*(uint64_t **)(a1 + 8), a2, v10, a3, a4, &v25, v16);
    if (v17)
    {
      if (v17 == 1) {
        unsigned int v21 = 16;
      }
      else {
        unsigned int v21 = 1;
      }
      if (v17 == 2) {
        uint64_t v8 = 15;
      }
      else {
        uint64_t v8 = v21;
      }
      sub_1000CD4D0(v16, v15);
    }
    else
    {
      uint64_t v8 = sub_1000516D4(a1, v25, (uint64_t)a4, (uint64_t)v16, (uint64_t)&v24, v18, v19, v20);
      sub_1000CD4D0(v16, v15);
      if (v8) {
        unsigned int v25 = 0;
      }
      if (!v24)
      {
        unsigned int v25 = 0;
        uint64_t v8 = 1;
      }
      uint64_t v22 = *(_WORD **)(a1 + 5520);
      if (v22) {
        *uint64_t v22 = 0;
      }
      *(_DWORD *)(a1 + 5532) = 0;
      *a5 = v25;
    }
  }
  return v8;
}

uint64_t sub_1000516D4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (_DWORD *)a5;
  int v9 = (unsigned char *)a4;
  unsigned int v10 = (unsigned int *)a3;
  int v11 = a2;
  uint64_t v13 = 4 * (int)a2;
  unsigned int v14 = (void *)sub_1000CD3E8(v13, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v15 = v14;
  if (v11 < 1)
  {
    uint64_t v17 = 0;
    int v26 = 1;
  }
  else
  {
    uint64_t v38 = v13;
    int v39 = v8;
    uint64_t v16 = v11;
    bzero(v14, 4 * v11);
    uint64_t v17 = 0;
    int v18 = 1;
    uint64_t v19 = v16;
    uint64_t v20 = v10;
    unsigned int v21 = v15;
    do
    {
      unsigned int v23 = *v20++;
      unsigned int v22 = v23;
      if (v23 == -1)
      {
        int v26 = 1;
        goto LABEL_15;
      }
      unsigned int v24 = sub_100051288(a1, v22, v21);
      if (v17) {
        unsigned int v25 = v17;
      }
      else {
        unsigned int v25 = v24;
      }
      if (v24)
      {
        int v18 = 0;
        uint64_t v17 = v25;
      }
      else
      {
        uint64_t v17 = v17;
      }
      ++v21;
      --v19;
    }
    while (v19);
    int v26 = 1;
    if (v18)
    {
      uint64_t v13 = v38;
      uint64_t v8 = v39;
      goto LABEL_29;
    }
LABEL_15:
    uint64_t v13 = v38;
    do
    {
      if (*v9 && sub_1000B5584(*(uint64_t **)(a1 + 8), *v10))
      {
        unsigned int v27 = sub_1000B5A58(*(void *)(a1 + 8), *v10);
        if (v27 != 0xFFFF)
        {
          unsigned int v28 = v27;
          if (!sub_100051CD8(a1, *v10) || !sub_1000BB3A0(*(void *)(a1 + 8), v28)) {
            goto LABEL_16;
          }
        }
        if (*v9)
        {
          int v40 = 0;
          int v29 = sub_1000BD76C(*(uint64_t **)(a1 + 8), *v10, &v40);
          if (v40)
          {
            uint64_t v30 = sub_1000BD95C(*(uint64_t **)(a1 + 8));
            sub_10001CC08(*(void *)(a1 + 16), v30, v31, v32, v33, v34, v35, v36);
          }
          if (!v29) {
LABEL_16:
          }
            int v26 = 0;
        }
      }
      ++v10;
      ++v9;
      --v16;
    }
    while (v16);
    uint64_t v8 = v39;
  }
LABEL_29:
  sub_1000CD4D0(v15, v13);
  *uint64_t v8 = v26;
  return v17;
}

uint64_t sub_100051898(unint64_t a1, unint64_t a2, _WORD *a3, int a4, uint64_t a5, _DWORD *a6)
{
  int v123 = 1;
  *a6 = 0;
  unint64_t v9 = sub_1000CED6C(a2);
  uint64_t v10 = 4 * (int)v9;
  int v18 = (char *)sub_1000CD3E8(v10, v11, v12, v13, v14, v15, v16, v17);
  int v26 = (char *)sub_1000CD3E8(v10, v19, v20, v21, v22, v23, v24, v25);
  unint64_t v34 = sub_1000CD3E8(v10, v27, v28, v29, v30, v31, v32, v33);
  int v42 = (void *)sub_1000CD3E8(v10, v35, v36, v37, v38, v39, v40, v41);
  uint64_t v50 = (void *)sub_1000CD3E8(v10, v43, v44, v45, v46, v47, v48, v49);
  uint64_t v120 = (void *)v34;
  int v121 = v26;
  unint64_t v118 = a2;
  int v119 = a3;
  uint64_t v122 = v18;
  int v51 = sub_1000B5D58(*(uint64_t **)(a1 + 8), a2, a3, 1, 1, v9, (uint64_t)v50, v18, v26, v34, (uint64_t)v42);
  if (v51 < 1)
  {
    unsigned int v69 = 0;
    BOOL v99 = 1;
    goto LABEL_47;
  }
  uint64_t v115 = 4 * (int)v9;
  uint64_t v59 = v51;
  int v67 = sub_1000CD454(v51, v52, v53, v54, v55, v56, v57, v58);
  uint64_t v68 = 0;
  uint64_t v116 = v67;
  uint64_t v117 = v59;
  while (1)
  {
    if (*((_DWORD *)v50 + v68) != -1) {
      goto LABEL_6;
    }
    uint64_t v70 = a1;
    BOOL v71 = v50;
    uint64_t v72 = *(int *)&v121[4 * v68] + 1;
    uint64_t v73 = *((int *)v42 + v68) + 1;
    uint64_t v74 = 2 * v72;
    int v75 = (_WORD *)sub_1000CD3E8(2 * v72, v60, v61, v62, v63, v64, v65, v66);
    uint64_t v76 = 2 * v73;
    int v84 = (_WORD *)sub_1000CD3E8(2 * v73, v77, v78, v79, v80, v81, v82, v83);
    sub_1000CED88(v75, (__int16 *)(v118 + 2 * *(int *)&v122[4 * v68]), v72);
    sub_1000CED88(v84, &v119[*((int *)v120 + v68)], v73);
    if (!v75)
    {
      unsigned int v69 = 4;
      uint64_t v50 = v71;
      a1 = v70;
      goto LABEL_4;
    }
    int v125 = 0;
    uint64_t v50 = v71;
    *((_DWORD *)v71 + v68) = -1;
    a1 = v70;
    unsigned int v85 = sub_1000B5208(*(uint64_t **)(v70 + 8), v75);
    unsigned int v124 = v85;
    if (v85 != -1)
    {
      unsigned int v69 = sub_100051288(v70, v85, 0);
      if (!v69) {
        goto LABEL_22;
      }
      goto LABEL_11;
    }
    int v87 = sub_1000BB3F8(*(uint64_t **)(v70 + 8), (unint64_t)v75, v84, 0, &v124, &v125);
    if (v87 == 1) {
      int v88 = 16;
    }
    else {
      int v88 = 1;
    }
    if (v87 == 2) {
      unsigned int v69 = 15;
    }
    else {
      unsigned int v69 = v88;
    }
    if (!v87)
    {
      unsigned int v69 = sub_100051288(v70, v124, 0);
      if (!v69)
      {
LABEL_22:
        *((_DWORD *)v50 + v68) = v124;
        uint64_t v86 = *(_WORD **)(v70 + 5520);
        if (!v86) {
          goto LABEL_13;
        }
LABEL_12:
        *uint64_t v86 = 0;
LABEL_13:
        *(_DWORD *)(v70 + 5532) = 0;
        goto LABEL_4;
      }
LABEL_11:
      uint64_t v86 = *(_WORD **)(v70 + 5520);
      if (v86) {
        goto LABEL_12;
      }
      goto LABEL_13;
    }
LABEL_4:
    sub_1000CD4D0(v84, v76);
    sub_1000CD4D0(v75, v74);
    if (v69) {
      break;
    }
    int v67 = v116;
    uint64_t v59 = v117;
    *((unsigned char *)v116 + v68) = 1;
LABEL_6:
    if (v59 == ++v68)
    {
      unsigned int v69 = sub_1000516D4(a1, v59, (uint64_t)v50, (uint64_t)v67, (uint64_t)&v123, v64, v65, v66);
      uint64_t v10 = v115;
      if (!v69)
      {
        if ((int)v59 >= a4) {
          uint64_t v89 = a4;
        }
        else {
          uint64_t v89 = v59;
        }
        if ((int)v89 >= 1)
        {
          uint64_t v90 = 0;
          if (v89 < 8) {
            goto LABEL_34;
          }
          if ((unint64_t)(a5 - (void)v50) < 0x20) {
            goto LABEL_34;
          }
          uint64_t v90 = v89 & 0x7FFFFFF8;
          BOOL v91 = (long long *)(v50 + 2);
          int v92 = (_OWORD *)(a5 + 16);
          uint64_t v93 = v89 & 0xFFFFFFF8;
          do
          {
            long long v94 = *v91;
            *(v92 - 1) = *(v91 - 1);
            *int v92 = v94;
            v91 += 2;
            v92 += 2;
            v93 -= 8;
          }
          while (v93);
          if (v90 != v89)
          {
LABEL_34:
            int v95 = (_DWORD *)(a5 + 4 * v90);
            int v96 = (int *)v50 + v90;
            uint64_t v97 = v89 - v90;
            do
            {
              int v98 = *v96++;
              *v95++ = v98;
              --v97;
            }
            while (v97);
          }
        }
        unsigned int v69 = 0;
        *a6 = v89;
      }
      goto LABEL_46;
    }
  }
  int v67 = v116;
  if ((int)v68 < 1)
  {
    int v101 = 1;
  }
  else
  {
    unint64_t v100 = v68 + 1;
    int v101 = 1;
    do
    {
      uint64_t v102 = (v100 - 2);
      if (*((unsigned char *)v116 + v102))
      {
        int v125 = 0;
        int v101 = sub_1000BD76C(*(uint64_t **)(a1 + 8), *((_DWORD *)v50 + v102), &v125);
        if (v125)
        {
          uint64_t v103 = sub_1000BD95C(*(uint64_t **)(a1 + 8));
          sub_10001CC08(*(void *)(a1 + 16), v103, v104, v105, v106, v107, v108, v109);
          unsigned int v69 = 0;
        }
      }
      --v100;
    }
    while (v100 > 1);
  }
  int v123 = v101;
  uint64_t v10 = v115;
  uint64_t v59 = v117;
LABEL_46:
  sub_1000CD4D0(v67, v59);
  BOOL v99 = v123 != 0;
LABEL_47:
  sub_1000CD4D0(v50, v10);
  sub_1000CD4D0(v42, v10);
  sub_1000CD4D0(v120, v10);
  sub_1000CD4D0(v121, v10);
  sub_1000CD4D0(v122, v10);
  if (v69) {
    int v110 = v99;
  }
  else {
    int v110 = 1;
  }
  if (v110) {
    return v69;
  }
  else {
    return 1;
  }
}

uint64_t sub_100051CD8(unint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 5500)) {
    sub_100050124(a1, a2);
  }
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3)
  {
    uint64_t result = sub_10003A0DC(v3);
    if (!result) {
      goto LABEL_13;
    }
    uint64_t v5 = *(void *)(a1 + 112);
    if (!v5) {
      goto LABEL_9;
    }
LABEL_8:
    uint64_t result = sub_10003A0DC(v5);
    if (!result) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  uint64_t result = 1;
  uint64_t v5 = *(void *)(a1 + 112);
  if (v5) {
    goto LABEL_8;
  }
LABEL_9:
  if (!*(void *)(a1 + 136) || (uint64_t result = sub_10003A0DC(*(void *)(a1 + 136)), result))
  {
    if (*(void *)(a1 + 144)) {
      uint64_t result = sub_10003A0DC(*(void *)(a1 + 144));
    }
  }
LABEL_13:
  int v6 = *(_WORD **)(a1 + 5520);
  if (v6) {
    _WORD *v6 = 0;
  }
  *(_DWORD *)(a1 + 5532) = 0;
  return result;
}

uint64_t sub_100051D88(uint64_t a1)
{
  unsigned int v9 = 0;
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  uint64_t v6 = 0;
  if (a1)
  {
    uint64_t v8 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v7 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v4 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v5 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v6);
    nullsub_1(v5);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    uint64_t v3 = (int *)sub_1000C0C70();
    if (!setjmp(v3))
    {
      if (sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic")) {
        unsigned int v9 = 4;
      }
      else {
        unsigned int v9 = *(_DWORD *)(a1 + 8160) != 0;
      }
      sub_1000C0CD8();
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 8160) = 1;
  }
  else
  {
    uint64_t v8 = sub_1000C2EA8(0);
    uint64_t v7 = sub_1000CD350(0);
    uint64_t v4 = sub_1000C0D40();
    sub_1000040F8(0, 0);
    uint64_t v5 = sub_1000D2948(0, 0, &v6);
    nullsub_1(v5);
  }
  unsigned int v9 = 1;
LABEL_9:
  sub_100051144(v9);
  sub_1000D2948(v5, v6, 0);
  sub_1000C0D2C(v4);
  sub_1000CD350(v7);
  sub_1000C2EA8(v8);
  return v9;
}

uint64_t sub_100051F44(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  unsigned int v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  if (a1)
  {
    uint64_t v36 = sub_1000C2EA8(*(void *)(a1 + 6480));
    uint64_t v35 = sub_1000CD350(*(void *)(a1 + 6488));
    uint64_t v32 = sub_1000C0D40();
    sub_1000040F8(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v33 = sub_1000D2948(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v34);
    nullsub_1(v33);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1;
    }
    sub_1000C0D2C((void *)(a1 + 6648));
    unsigned int v9 = (int *)sub_1000C0C70();
    if (setjmp(v9))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }
    if (!sub_1000CAED0(*(unsigned char **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v10 = 1;
        goto LABEL_14;
      }
      if (a3 >= 1 && a4 && sub_1000B5584(*(uint64_t **)(a1 + 8), a2))
      {
        uint64_t v11 = *(uint64_t **)(a1 + 8);
        int v12 = sub_1000B51A0(v11) + 1;
        int v13 = sub_1000B51E0(v11) + 1;
        uint64_t v14 = 2 * v12;
        uint64_t v22 = (__int16 *)sub_1000CD3E8(v14, v15, v16, v17, v18, v19, v20, v21);
        uint64_t v23 = 2 * v13;
        uint64_t v31 = (_WORD *)sub_1000CD3E8(v23, v24, v25, v26, v27, v28, v29, v30);
        sub_1000B5360(*(void *)(a1 + 8), a2, (uint64_t)v22, v31);
        if (!sub_1000CED88(a4, v22, a3)) {
          unsigned int v37 = 10;
        }
        sub_1000CD4D0(v31, v23);
        sub_1000CD4D0(v22, v14);
        int v10 = v37;
        goto LABEL_14;
      }
    }
    int v10 = 4;
LABEL_14:
    unsigned int v37 = v10;
    sub_1000C0CD8();
    goto LABEL_9;
  }
  uint64_t v36 = sub_1000C2EA8(0);
  uint64_t v35 = sub_1000CD350(0);
  uint64_t v32 = sub_1000C0D40();
  sub_1000040F8(0, 0);
  uint64_t v33 = sub_1000D2948(0, 0, &v34);
  nullsub_1(v33);
LABEL_8:
  unsigned int v37 = 1;
LABEL_9:
  sub_100051144(v37);
  sub_1000D2948(v33, v34, 0);
  sub_1000C0D2C(v32);
  sub_1000CD350(v35);
  sub_1000C2EA8(v36);
  return v37;
}

uint64_t sub_1000521B8(int a1)
{
  if ((a1 - 1) > 7) {
    return 0;
  }
  else {
    return dword_1000F49D4[a1 - 1];
  }
}

uint64_t sub_1000521DC(int a1, int a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v6 = sub_1000C33A0(48);
  uint64_t v7 = v6;
  if (!v6) {
    return v7;
  }
  *(void *)uint64_t v6 = a3;
  *(_DWORD *)(v6 + 16) = sub_1000055D0(a3);
  if (a2 >= 0) {
    int v13 = a2;
  }
  else {
    int v13 = a2 + 1;
  }
  *(void *)(v7 + 8) = sub_1000C42C0(a2, (uint64_t)v13 >> 1, 2, v8, v9, v10, v11, v12);
  uint64_t v14 = sub_1000C33A0(4 * a1);
  *(void *)(v7 + 24) = v14;
  if (v14)
  {
    uint64_t v15 = sub_1000C33A0(8 * a1);
    *(void *)(v7 + 32) = v15;
    if (v15)
    {
      *(_DWORD *)(v7 + 40) = a1;
      *(_DWORD *)(v7 + 44) = 0;
      return v7;
    }
  }
  sub_1000C4364(*(void *)(v7 + 8));
  sub_1000C321C(*(void *)(v7 + 32));
  sub_1000C321C(v7);
  return 0;
}

uint64_t sub_1000522C0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C4364(*(void *)(result + 8));
    sub_1000C321C(*(void *)(v1 + 32));
    return sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_10005230C(uint64_t result)
{
  if (result)
  {
    *(_DWORD *)(result + 44) = 0;
    return sub_1000C466C(*(void *)(result + 8), 0);
  }
  return result;
}

uint64_t sub_100052324(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 8);
    if (v2)
    {
      if (*(int *)(v1 + 16) >= 1)
      {
        uint64_t v3 = 0;
        do
          sub_1000C321C(*(void *)(*(void *)(v1 + 8) + 8 * v3++));
        while (v3 < *(int *)(v1 + 16));
        uint64_t v2 = *(void *)(v1 + 8);
      }
      sub_1000C321C(v2);
    }
    *(void *)uint64_t v1 = 0;
    *(void *)(v1 + 8) = 0;
    *(_DWORD *)(v1 + 24) = 0;
    *(void *)(v1 + 16) = 0;
    return sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_1000523A8(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  *a2 = *(void *)a1;
  *a3 = *(_DWORD *)(a1 + 20);
  *a4 = *(_DWORD *)(a1 + 24);
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_1000523C8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1000BEC58(a1, "ber0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C33A0(32);
  uint64_t v11 = v10;
  if (!v10)
  {
    sub_1000BED3C(v9);
    return v11;
  }
  uint64_t v12 = (int *)(v10 + 16);
  if (!sub_1000BEECC(v9, (void *)(v10 + 16))
    || !sub_1000BEECC(v9, (void *)(v11 + 20))
    || !sub_1000BEECC(v9, (void *)(v11 + 24)))
  {
    goto LABEL_14;
  }
  uint64_t v13 = *(int *)(v11 + 16);
  *(void *)(v11 + 8) = 0;
  if (!v13)
  {
    char v18 = 0;
    *(void *)uint64_t v11 = 0;
    goto LABEL_15;
  }
  uint64_t v14 = sub_1000C33A0(8 * v13);
  *(void *)(v11 + 8) = v14;
  if (v14)
  {
    int v15 = *(_DWORD *)(v11 + 16);
    *(void *)uint64_t v11 = v14;
    if (v15 >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      while (1)
      {
        int v23 = 0;
        if (!sub_1000BF078(v9, 4, (uint64_t *)(*(void *)(v11 + 8) + v16), &v23)
          || v23 > *(_DWORD *)(v11 + 24) + 1)
        {
          break;
        }
        char v18 = 0;
        ++v17;
        v16 += 8;
        if (v17 >= *v12) {
          goto LABEL_15;
        }
      }
    }
    char v18 = 0;
  }
  else
  {
LABEL_14:
    char v18 = 1;
  }
LABEL_15:
  BOOL v19 = sub_1000BED94(v9);
  sub_1000BED3C(v9);
  if ((v18 & 1) != 0 || !v19)
  {
    uint64_t v20 = *(void *)(v11 + 8);
    if (v20)
    {
      if (*v12 >= 1)
      {
        uint64_t v21 = 0;
        do
          sub_1000C321C(*(void *)(*(void *)(v11 + 8) + 8 * v21++));
        while (v21 < *(int *)(v11 + 16));
        uint64_t v20 = *(void *)(v11 + 8);
      }
      sub_1000C321C(v20);
    }
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 24) = 0;
    *(void *)(v11 + 16) = 0;
    sub_1000C321C(v11);
    return 0;
  }
  return v11;
}

unsigned int *sub_100052580(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = *result;
    if ((int)v2 >= 1)
    {
      unint64_t v3 = v2 + 1;
      do
      {
        uint64_t v4 = *(uint64_t **)(*(void *)(v1 + 8) + 8 * (v3 - 2));
        if (v4)
        {
          sub_1000C321C(v4[11]);
          sub_10007C2D8(v4[7]);
          sub_10007C84C(v4[5]);
          sub_1000C321C(v4[1]);
          sub_1000C321C(v4[3]);
          sub_1000C321C((uint64_t)v4);
        }
        --v3;
      }
      while (v3 > 1);
    }
    sub_1000C321C(*(void *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    return (unsigned int *)sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_100052634(unsigned int *a1)
{
  uint64_t v2 = sub_1000C085C(*a1, 4, 0xFFFFFFFF);
  if ((int)*a1 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*((void *)a1 + 1) + 8 * v3);
      unsigned int v5 = sub_1000C085C(*(char *)(v4 + 64), 1, 0xFFFFFFFF);
      unsigned int v6 = sub_1000C085C(*(_DWORD *)(v4 + 68), 4, v5);
      unsigned int v7 = sub_1000C085C(*(_DWORD *)(v4 + 72), 4, v6);
      uint64_t v8 = sub_1000C085C(*(_DWORD *)(v4 + 76), 4, v7);
      uint64_t v9 = sub_1000C06B4(*(void *)v4, v8);
      int v10 = sub_1000C06B4(*(void *)(v4 + 16), v9);
      int v11 = sub_10007CA04(*(void *)(v4 + 32));
      int v12 = sub_10007C388(*(void *)(v4 + 48));
      int v13 = *(_DWORD *)(v4 + 76);
      if (v13 >= 1)
      {
        int v14 = v12;
        int v15 = sub_1000C09B0(*(unint64_t **)(v4 + 80), 4, v13, 0xFFFFFFFFLL);
        uint64_t v2 = sub_1000C085C(v11 + v10 + v14 + v15, 4, v2);
      }
      ++v3;
    }
    while (v3 < (int)*a1);
  }
  return v2;
}

uint64_t sub_100052760(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1000BEC58(a1, "bep0", a2, a4, a5, a6, a7, a8);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    int v23 = 0;
    if (sub_1000BEECC((uint64_t)v8, &v23))
    {
      uint64_t v10 = v23;
      if (!v23)
      {
LABEL_31:
        uint64_t v12 = 0;
        goto LABEL_32;
      }
      int v11 = (_DWORD *)sub_1000C33A0(16);
      if (v11)
      {
        uint64_t v12 = (uint64_t)v11;
        *int v11 = v10;
        uint64_t v13 = sub_1000C33A0(8 * (int)v10);
        *(void *)(v12 + 8) = v13;
        if (v13)
        {
          if ((int)v10 < 1)
          {
LABEL_10:
            if (v23 < 1)
            {
LABEL_32:
              sub_1000BED3C(v9);
              return v12;
            }
            uint64_t v16 = 0;
            while (1)
            {
              uint64_t v17 = *(void *)(*(void *)(v12 + 8) + 8 * v16);
              if (!sub_1000BEF1C(v9, (unsigned char *)(v17 + 64))) {
                goto LABEL_30;
              }
              if (!sub_1000BEECC(v9, (void *)(v17 + 68))) {
                goto LABEL_30;
              }
              if (!sub_1000BEECC(v9, (void *)(v17 + 72))) {
                goto LABEL_30;
              }
              if (!sub_1000BEECC(v9, (void *)(v17 + 76))) {
                goto LABEL_30;
              }
              if (!sub_1000BF14C(v9, (uint64_t *)(v17 + 8))) {
                goto LABEL_30;
              }
              *(void *)uint64_t v17 = *(void *)(v17 + 8);
              if (!sub_1000BF14C(v9, (uint64_t *)(v17 + 24))) {
                goto LABEL_30;
              }
              *(void *)(v17 + 16) = *(void *)(v17 + 24);
              uint64_t v18 = sub_10007CAF4(v9);
              *(void *)(v17 + 40) = v18;
              if (!v18) {
                goto LABEL_30;
              }
              *(void *)(v17 + 32) = v18;
              BOOL v19 = sub_10007C40C(v9);
              *(void *)(v17 + 56) = v19;
              if (!v19) {
                goto LABEL_30;
              }
              *(void *)(v17 + 48) = v19;
              int v22 = 0;
              uint64_t v20 = (void *)(v17 + 88);
              if (!sub_1000BF078(v9, 4, (uint64_t *)(v17 + 88), &v22)) {
                goto LABEL_30;
              }
              if (*v20)
              {
                if (v22 != *(_DWORD *)(v17 + 76)) {
                  goto LABEL_30;
                }
                *(void *)(v17 + 80) = *v20;
              }
              *(void *)(*(void *)(v12 + 8) + 8 * v16++) = v17;
              if (v16 >= v23) {
                goto LABEL_32;
              }
            }
          }
          uint64_t v14 = 0;
          uint64_t v15 = 8 * v10;
          while (1)
          {
            *(void *)(*(void *)(v12 + 8) + v14) = sub_1000C33A0(96);
            if (!*(void *)(*(void *)(v12 + 8) + v14)) {
              break;
            }
            v14 += 8;
            if (v15 == v14) {
              goto LABEL_10;
            }
          }
          sub_100052580((unsigned int *)v12);
        }
        else
        {
          sub_1000C321C(v12);
        }
      }
    }
    uint64_t v12 = 0;
LABEL_30:
    sub_100052580((unsigned int *)v12);
    goto LABEL_31;
  }
  return 0;
}

uint64_t sub_100052968(uint64_t a1, uint64_t a2, int a3, int a4)
{
  sub_100004178(a2);
  if ((int)sub_100004180(a2) > 2) {
    return 0;
  }
  uint64_t v9 = (void *)sub_1000C33A0(1072);
  uint64_t v10 = (uint64_t)v9;
  if (v9)
  {
    memcpy(v9, &off_1000FD208, 0x208uLL);
    *(void *)(v10 + 376) = a1;
    *(void *)(v10 + 384) = a2;
    *(_DWORD *)(v10 + 432) = a3;
    *(_DWORD *)(v10 + 368) = 1;
    if (!qword_100101CC0 || !*(_DWORD *)(qword_100101CC0 + 1776))
    {
      if (a4)
      {
        *(_DWORD *)(v10 + 608) = a4;
        if (sub_100052A9C(v10, a3)) {
          return v10;
        }
      }
      else
      {
        *(void *)(v10 + 656) = sub_100004140();
        *(_DWORD *)(v10 + 608) = 0;
        if (sub_100052A9C(v10, a3)) {
          return v10;
        }
      }
LABEL_12:
      sub_100052EA0((uint64_t *)v10);
      return 0;
    }
    int v11 = (void *)sub_100061250();
    *(void *)(v10 + 656) = v11;
    sub_100061278(v11, a1, a2);
    *(_DWORD *)(v10 + 608) = a4;
    if (!sub_100052A9C(v10, a3)) {
      goto LABEL_12;
    }
  }
  return v10;
}

uint64_t sub_100052A9C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 532) = 0;
  *(_WORD *)(a1 + 544) = 0x4000;
  *(_DWORD *)(a1 + 568) = 0;
  int v4 = sub_100004180(*(void *)(a1 + 384));
  uint64_t v5 = 0;
  *(_DWORD *)(a1 + 528) = v4;
  *(void *)(a1 + 456) = 0xFFFFFFFFLL;
  if (v4 > 2) {
    return v5;
  }
  *(void *)(a1 + 920) = sub_100057FDC;
  *(void *)(a1 + 968) = sub_1000584E0;
  *(void *)(a1 + 944) = sub_100054EC4;
  *(void *)(a1 + 952) = sub_100054F5C;
  *(void *)(a1 + 928) = sub_100054F64;
  *(void *)(a1 + 976) = sub_100054F88;
  *(void *)(a1 + 936) = sub_100055198;
  *(void *)(a1 + 960) = sub_100057A78;
  uint64_t v6 = qword_100101CC0;
  if (qword_100101CC0)
  {
    *(_DWORD *)(a1 + 596) = *(_DWORD *)(qword_100101CC0 + 3728);
    uint64_t v6 = *(void *)(v6 + 3296);
  }
  else
  {
    *(_DWORD *)(a1 + 596) = 0;
  }
  *(_WORD *)(a1 + 806) = v6;
  *(_WORD *)(a1 + 572) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 736) = sub_10005EE38();
  uint64_t v7 = qword_100101CC0;
  if (!qword_100101CC0)
  {
    *(_DWORD *)(a1 + 812) = 0;
    *(_WORD *)(a1 + 554) = 0;
    uint64_t v13 = sub_1000C33A0(0);
    *(void *)(a1 + 816) = v13;
    if (v13) {
      goto LABEL_7;
    }
    return 0;
  }
  uint64_t v8 = *(void *)(qword_100101CC0 + 3520);
  *(_DWORD *)(a1 + 812) = v8;
  *(_WORD *)(a1 + 554) = *(void *)(v7 + 3240);
  uint64_t v9 = sub_1000C33A0(4 * (int)v8);
  *(void *)(a1 + 816) = v9;
  if (!v9) {
    return 0;
  }
LABEL_7:
  *(_DWORD *)(a1 + 824) = 0;
  if (qword_100101CC0)
  {
    uint64_t v10 = *(void *)(qword_100101CC0 + 4144);
    if (v10)
    {
      uint64_t v11 = *(void *)(qword_100101CC0 + 4136);
      if (v11)
      {
        int v12 = *(_DWORD *)(qword_100101CC0 + 4720)
           && *(uint64_t *)(qword_100101CC0 + 4128) >= 1
           && *(_DWORD *)(qword_100101CC0 + 5340) == 0;
        *(void *)(a1 + 472) = sub_1000D307C(0, *(void *)(a1 + 376), a2, v11, v10, 0, v12, 0);
      }
    }
  }
  *(_WORD *)(a1 + 804) = sub_1000041DC(*(void *)(a1 + 384));
  int v15 = sub_100004148(*(void *)(a1 + 384));
  uint64_t v16 = sub_1000C33A0(v15);
  *(void *)(a1 + 616) = v16;
  if (!v16) {
    return 0;
  }
  if (qword_100101CC0)
  {
    uint64_t v17 = *(void *)(qword_100101CC0 + 584);
    if (v17 >= 1)
    {
      uint64_t v18 = sub_1000C33A0(8 * v17);
      *(void *)(a1 + 640) = v18;
      if (!v18) {
        return 0;
      }
      uint64_t v19 = qword_100101CC0 ? *(void *)(qword_100101CC0 + 584) : 0;
      int v20 = sub_100004148(*(void *)(a1 + 384));
      uint64_t v21 = sub_1000C33A0(v19 * v20);
      *(void *)(a1 + 624) = v21;
      if (!v21) {
        return 0;
      }
      uint64_t v22 = qword_100101CC0;
      if (qword_100101CC0)
      {
        uint64_t v23 = 0;
        int v24 = 0;
        do
        {
          if (*(void *)(v22 + 584) <= v23) {
            break;
          }
          *(void *)(*(void *)(a1 + 640) + 8 * v23) = *(void *)(a1 + 624) + v24;
          v24 += sub_100004148(*(void *)(a1 + 384));
          ++v23;
          uint64_t v22 = qword_100101CC0;
        }
        while (qword_100101CC0);
      }
    }
  }
  sub_10003B678(a1);
  if (!*(void *)(a1 + 408)) {
    return 0;
  }
  if (!qword_100101CC0)
  {
    uint64_t v5 = 1;
    sub_100039634(a1, 1, 0);
    if (*(void *)(a1 + 376)) {
      goto LABEL_35;
    }
    return v5;
  }
  uint64_t v5 = 1;
  sub_100039634(a1, 1, *(_DWORD *)(qword_100101CC0 + 5368));
  if (!*(void *)(a1 + 376)) {
    return v5;
  }
LABEL_35:
  uint64_t v25 = *(void *)(a1 + 656);
  if (v25) {
    sub_1000641C8(v25, *(unsigned int *)(a1 + 528));
  }
  uint64_t v26 = qword_100101CC0;
  if (qword_100101CC0)
  {
    int v27 = *(_DWORD *)(qword_100101CC0 + 3160);
    *(_DWORD *)(a1 + 744) = v27;
    if (v27 <= 65533)
    {
      LODWORD(v26) = *(_DWORD *)(v26 + 3144);
      goto LABEL_41;
    }
    return 0;
  }
  *(_DWORD *)(a1 + 744) = 0;
LABEL_41:
  *(_DWORD *)(a1 + 700) = v26;
  uint64_t v28 = sub_1000C33A0(2 * (int)v26);
  *(void *)(a1 + 688) = v28;
  if (!v28) {
    return 0;
  }
  *(_DWORD *)(a1 + 696) = 0;
  if ((int)sub_1000BDCC4(*(void *)(a1 + 376)) >= 1 && !sub_100053FC4(a1)) {
    return 0;
  }
  *(void *)(a1 + 728) = 0;
  uint64_t v29 = *(void *)(a1 + 656);
  if (v29)
  {
    if (sub_10006425C(v29))
    {
      if (qword_100101CC0)
      {
        int v30 = *(_DWORD *)(qword_100101CC0 + 4508);
        int v31 = *(_DWORD *)(qword_100101CC0 + 4512);
      }
      else
      {
        int v30 = 0;
        int v31 = 0;
      }
      uint64_t v32 = sub_10009CAF4(1, v30, v31, 0, 1, *(uint64_t **)(a1 + 376), *(void *)(a1 + 384));
      *(void *)(a1 + 728) = v32;
      if (!v32) {
        return 0;
      }
    }
  }
  uint64_t v33 = (_DWORD *)qword_100101CC0;
  if (qword_100101CC0)
  {
    *(_DWORD *)(a1 + 916) = *(void *)(qword_100101CC0 + 3064);
    int v34 = v33[762];
    int v35 = v33[774];
    int v36 = v33[808];
    int v37 = v33[737];
    LODWORD(v33) = v33[796];
  }
  else
  {
    int v37 = 0;
    int v35 = 0;
    int v34 = 0;
    int v36 = 0;
    *(_DWORD *)(a1 + 916) = 0;
  }
  *(_DWORD *)(a1 + 896) = v34;
  *(_DWORD *)(a1 + 900) = v35;
  *(_DWORD *)(a1 + 904) = v36;
  *(_DWORD *)(a1 + 908) = v37;
  *(_DWORD *)(a1 + 912) = v33;
  return 1;
}

uint64_t sub_100052EA0(uint64_t *a1)
{
  sub_1000C321C(a1[107]);
  sub_1000C321C(a1[104]);
  sub_1000C321C(a1[102]);
  uint64_t v2 = a1[59];
  if (v2) {
    sub_1000D31E4(v2);
  }
  uint64_t v3 = a1[92];
  if (v3) {
    sub_10005EEB0(v3);
  }
  sub_1000C321C(a1[77]);
  int v4 = (_DWORD *)a1[82];
  if (v4) {
    sub_100061280(v4);
  }
  sub_1000C321C(a1[86]);
  sub_1000C321C(a1[78]);
  sub_1000C321C(a1[80]);
  sub_1000C321C(a1[128]);
  sub_1000C321C(a1[130]);
  uint64_t v5 = a1[91];
  if (v5) {
    sub_10009CD24(v5);
  }
  sub_100006A98(a1[51]);
  return sub_1000C321C((uint64_t)a1);
}

uint64_t sub_100052F54(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, int a8, int a9)
{
  uint64_t v9 = *a2;
  if (!v9) {
    return result;
  }
  uint64_t v11 = (_DWORD *)a3;
  int v12 = a2;
  uint64_t v13 = result;
  int v14 = a9;
  int v88 = 0;
  if (!a9)
  {
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v16 = v9;
    uint64_t v87 = a3;
    goto LABEL_7;
  }
  if ((int)v9 < 1)
  {
    uint64_t v16 = 0;
    goto LABEL_31;
  }
  if (v9 == 1)
  {
    uint64_t v15 = 0;
    LODWORD(v16) = 0;
LABEL_29:
    uint64_t v37 = v9 - v15;
    uint64_t v38 = (int *)(a3 + (v15 << 7) + 4);
    do
    {
      int v39 = *v38;
      v38 += 32;
      uint64_t v16 = ((1 << (v39 - 1)) + v16);
      --v37;
    }
    while (v37);
    goto LABEL_31;
  }
  int v33 = 0;
  int v34 = 0;
  uint64_t v15 = v9 & 0xFFFFFFFE;
  int v35 = (_DWORD *)(a3 + 132);
  uint64_t v36 = v15;
  do
  {
    v33 += 1 << (*(v35 - 32) - 1);
    v34 += 1 << (*v35 - 1);
    v35 += 64;
    v36 -= 2;
  }
  while (v36);
  uint64_t v16 = (v34 + v33);
  if (v15 != v9) {
    goto LABEL_29;
  }
LABEL_31:
  uint64_t result = sub_1000C33A0((uint64_t)(int)v16 << 7);
  uint64_t v87 = result;
  if (!result) {
    return result;
  }
  uint64_t v86 = sub_1000C33A0(4 * (int)v16);
  if (!v86)
  {
    uint64_t v55 = v87;
LABEL_55:
    return sub_1000C321C(v55);
  }
  uint64_t v85 = sub_1000C33A0(4 * (int)v16);
  if (!v85)
  {
    sub_1000C321C(v87);
    uint64_t v55 = v86;
    goto LABEL_55;
  }
  if ((int)v9 >= 1)
  {
    uint64_t v76 = a4;
    uint64_t v77 = v12;
    size_t __nel = v13;
    uint64_t v40 = 0;
    int v41 = 0;
    uint64_t v79 = v11;
    for (uint64_t i = v9; i != v40; v9 = i)
    {
      int v42 = &v11[32 * v40];
      int v44 = v42[1];
      uint64_t v43 = v42 + 1;
      int v45 = 1 << (v44 - 1);
      if (v44 != 32)
      {
        unsigned int v46 = 0;
        uint64_t v47 = v42 + 4;
        uint64_t v48 = v41;
        if (v45 <= 1) {
          int v49 = 1;
        }
        else {
          int v49 = v45;
        }
        do
        {
          uint64_t v51 = v87 + (v48 << 7);
          *(_DWORD *)(v51 + 4) = *v43;
          j__memmove((void *)(v51 + 16), v47, 2 * *v43);
          int v52 = *v43;
          if (*v43 >= 1)
          {
            uint64_t v53 = (unsigned char *)(v51 + 88);
            unsigned int v54 = v46;
            do
            {
              *v53++ = v54 & 1;
              v54 >>= 1;
              --v52;
            }
            while (v52);
          }
          uint64_t v50 = 4 * v48;
          *(_DWORD *)(v86 + v50) = v40;
          *(_DWORD *)(v85 + v50) = v46++;
          ++v48;
        }
        while (v46 != v49);
      }
      v41 += v45;
      ++v40;
      uint64_t v11 = v79;
    }
    int v12 = v77;
    uint64_t v13 = __nel;
    int v14 = a9;
    a4 = v76;
  }
LABEL_7:
  uint64_t v17 = sub_10009CAF4(1, 0, 0, 1, 0, *(uint64_t **)(v13 + 376), *(void *)(v13 + 384));
  if (!sub_10009CED4(v17, 4 * (int)v9 * v11[1], ((int)v9 * v11[1]) << 6))
  {
    sub_100039FBC(v13);
    uint64_t result = sub_10009CD24(v17);
    if (!v14) {
      return result;
    }
    goto LABEL_54;
  }
  *(void *)(v13 + 656) = sub_100062994(*(void *)(v13 + 384), v16, v87, v17);
  sub_10009CD24(v17);
  if (!*(void *)(v13 + 656))
  {
    uint64_t result = sub_100039FBC(v13);
    if (!v14) {
      return result;
    }
    goto LABEL_54;
  }
  if (!sub_10005353C(v13, 0, 0, 0, 0, 1, v18, v19, v75, 1u))
  {
    sub_100039FBC(v13);
    uint64_t result = sub_100061338(*(void *)(v13 + 656));
    *(void *)(v13 + 656) = 0;
    if (!v14) {
      return result;
    }
LABEL_54:
    sub_1000C321C(v87);
    sub_1000C321C(v86);
    uint64_t v55 = v85;
    goto LABEL_55;
  }
  int v20 = v11;
  int v21 = sub_10009F2BC(a4);
  int v22 = v21 - 1;
  if (v21 >= 1)
  {
    int v23 = 0;
    do
    {
      int v24 = (const void *)sub_1000B4CB0(a4, v23, &v88);
      if (!v24) {
        break;
      }
      sub_10005381C((uint64_t *)v13, v24, v88);
      if (sub_100039F98(v13)) {
        break;
      }
    }
    while (v22 != v23++);
  }
  (*(void (**)(uint64_t, uint64_t))(v13 + 928))(v13, a4);
  int v32 = *(_DWORD *)(v13 + 524);
  if (v32 != 5)
  {
    if (v32 == 1) {
      *(_DWORD *)(v13 + 524) = 0;
    }
    if (sub_100039A9C(v13, *(unsigned int *)(v13 + 428), v26, v27, v28, v29, v30, v31)) {
      sub_100039FBC(v13);
    }
  }
  if ((int)v9 < 1) {
    goto LABEL_62;
  }
  if (v9 == 1)
  {
    uint64_t v56 = 0;
  }
  else
  {
    uint64_t v56 = v9 & 0xFFFFFFFE;
    uint64_t v57 = v20 + 35;
    uint64_t v58 = v56;
    do
    {
      *(v57 - 32) = 0x40000000;
      *uint64_t v57 = 0x40000000;
      v57 += 64;
      v58 -= 2;
    }
    while (v58);
    if (v56 == v9) {
      goto LABEL_62;
    }
  }
  uint64_t v59 = &v20[32 * v56 + 3];
  uint64_t v60 = v9 - v56;
  do
  {
    *uint64_t v59 = 0x40000000;
    v59 += 32;
    --v60;
  }
  while (v60);
LABEL_62:
  if (*(int *)(v13 + 808) >= 1)
  {
    for (uint64_t j = 0; j < *(int *)(v13 + 808); ++j)
    {
      uint64_t v62 = *(void *)(v13 + 816);
      uint64_t v63 = *(unsigned __int16 *)(v62 + 4 * j);
      if (v14) {
        uint64_t v64 = (char *)&v20[32 * (uint64_t)*(int *)(v86 + 4 * v63)];
      }
      else {
        uint64_t v64 = (char *)(v87 + (v63 << 7));
      }
      int v65 = *(__int16 *)(v62 + 4 * j + 2);
      int v66 = *(_DWORD *)(v13 + 568);
      int v67 = sub_10003C5C0(*(void *)(v13 + 376), 1, a5, a6, 0, 0, (uint64_t)(v64 + 16), *((unsigned int *)v64 + 1));
      int v68 = *((_DWORD *)v64 + 1);
      int v69 = v65 + a7 + v66 + v67 - *(_DWORD *)(v13 + 896) + (v68 - 1) * a8;
      if (v14)
      {
        if (v69 >= *((_DWORD *)v64 + 3)) {
          continue;
        }
        if (v68 >= 1)
        {
          unsigned int v70 = *(_DWORD *)(v85 + 4 * *(unsigned __int16 *)(*(void *)(v13 + 816) + 4 * j));
          BOOL v71 = v64 + 88;
          do
          {
            *v71++ = v70 & 1;
            v70 >>= 1;
            --v68;
          }
          while (v68);
        }
      }
      *((_DWORD *)v64 + 3) = v69;
    }
  }
  qsort(v20, (int)v9, 0x80uLL, (int (__cdecl *)(const void *, const void *))sub_100053B7C);
  if (v14)
  {
    if ((int)v9 < 1)
    {
      LODWORD(v72) = 0;
    }
    else
    {
      uint64_t v72 = 0;
      uint64_t v73 = v20 + 3;
      while (1)
      {
        int v74 = *v73;
        v73 += 32;
        if (v74 == 0x40000000) {
          break;
        }
        if (v9 == ++v72)
        {
          LODWORD(v72) = v9;
          break;
        }
      }
    }
    _DWORD *v12 = v72;
    sub_1000C321C(v87);
    sub_1000C321C(v86);
    sub_1000C321C(v85);
  }
  else
  {
    _DWORD *v12 = *(_DWORD *)(v13 + 808);
  }
  uint64_t result = sub_100061338(*(void *)(v13 + 656));
  *(void *)(v13 + 656) = 0;
  return result;
}

uint64_t sub_10005353C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  uint64_t v16 = *(void *)(a1 + 656);
  uint64_t v17 = sub_100057A78;
  uint64_t v18 = sub_100055198;
  uint64_t v19 = sub_100054F88;
  int v20 = sub_100054F64;
  int v21 = sub_100054F5C;
  int v22 = sub_100054EC4;
  int v23 = sub_1000584E0;
  int v24 = sub_100057FDC;
  if (a6 != 1)
  {
    uint64_t v17 = sub_100055580;
    uint64_t v18 = sub_100055440;
    uint64_t v19 = sub_100055430;
    int v20 = (void (*)(uint64_t))nullsub_9;
    int v21 = sub_100055424;
    int v22 = sub_100055360;
    int v23 = sub_100055FF8;
    int v24 = sub_100055AA4;
  }
  *(void *)(a1 + 920) = v24;
  *(void *)(a1 + 968) = v23;
  *(void *)(a1 + 944) = v22;
  *(void *)(a1 + 952) = v21;
  *(void *)(a1 + 928) = v20;
  *(void *)(a1 + 976) = v19;
  *(void *)(a1 + 936) = v18;
  *(void *)(a1 + 960) = v17;
  if (a6 != 1)
  {
    sub_1000C321C(*(void *)(a1 + 856));
    *(void *)(a1 + 856) = 0;
    if (*(void *)(a1 + 832)) {
      goto LABEL_9;
    }
    if (*(void *)(a1 + 376))
    {
      if (qword_100101CC0)
      {
LABEL_16:
        LODWORD(v29) = *(_DWORD *)(qword_100101CC0 + 2984);
        goto LABEL_27;
      }
    }
    else if (qword_100101CC0)
    {
      uint64_t v29 = *(void *)(qword_100101CC0 + 2992);
      if (!v29) {
        goto LABEL_16;
      }
LABEL_27:
      *(_DWORD *)(a1 + 880) = v29;
      if (!v29) {
        return 0;
      }
      uint64_t v31 = sub_1000C33A0(12 * (int)v29);
      *(void *)(a1 + 832) = v31;
      if (!v31) {
        return 0;
      }
      *(void *)(a1 + 840) = v31 + 12 * *(int *)(a1 + 880);
      goto LABEL_9;
    }
    LODWORD(v29) = 0;
    goto LABEL_27;
  }
  sub_1000C321C(*(void *)(a1 + 832));
  *(void *)(a1 + 832) = 0;
  if (*(void *)(a1 + 856)) {
    goto LABEL_9;
  }
  LODWORD(v25) = qword_100101CC0;
  if (*(void *)(a1 + 376))
  {
    if (!qword_100101CC0) {
      goto LABEL_20;
    }
    goto LABEL_7;
  }
  if (qword_100101CC0)
  {
    if (!*(void *)(qword_100101CC0 + 3088))
    {
LABEL_7:
      LODWORD(v25) = *(_DWORD *)(qword_100101CC0 + 3080);
      goto LABEL_20;
    }
    uint64_t v25 = *(void *)(qword_100101CC0 + 3088);
  }
LABEL_20:
  *(_DWORD *)(a1 + 880) = v25;
  if (!v25) {
    return 0;
  }
  uint64_t v30 = sub_1000C33A0(8 * (int)v25);
  *(void *)(a1 + 856) = v30;
  if (!v30) {
    return 0;
  }
  *(void *)(a1 + 864) = v30 + 8 * *(int *)(a1 + 880);
LABEL_9:
  int v26 = sub_100064220(v16);
  if (*(_DWORD *)(a1 + 880) < (signed int)(v26 - sub_100064228(v16) + 3)) {
    return 0;
  }
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 920);
  return v28(a1, a2, a3, a4, a5, a6, a10);
}

uint64_t *sub_10005381C(uint64_t *result, const void *a2, int *a3)
{
  uint64_t v5 = result;
  int v6 = *((_DWORD *)result + 162);
  uint64_t v7 = qword_100101CC0;
  if (!qword_100101CC0) {
    goto LABEL_24;
  }
  if (*(uint64_t *)(qword_100101CC0 + 584) >= 1 && v6 != 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void **)result[80];
    if (qword_100101CC0) {
      goto LABEL_9;
    }
    while (1)
    {
      uint64_t v12 = v7 - 1;
      uint64_t v13 = result[80];
      if (v12 <= v9) {
        break;
      }
      uint64_t v11 = (void *)(v13 + 8 * v9++);
      *uint64_t v11 = v11[1];
      uint64_t v7 = qword_100101CC0;
      if (qword_100101CC0) {
LABEL_9:
      }
        uint64_t v7 = *(void *)(v7 + 584);
    }
    *(void *)(v13 + 8 * v9) = v10;
    int v14 = sub_100004148(result[48]);
    uint64_t result = (uint64_t *)memcpy(v10, a2, v14);
    uint64_t v15 = *((int *)v5 + 163);
    uint64_t v7 = qword_100101CC0;
    if (qword_100101CC0)
    {
      if (*(void *)(qword_100101CC0 + 584) - 1 > v15)
      {
LABEL_13:
        *((_DWORD *)v5 + 163) = v15 + 1;
        return result;
      }
    }
    else if (v15 < -1)
    {
      goto LABEL_13;
    }
    a2 = *(const void **)v5[80];
    if (!qword_100101CC0) {
      goto LABEL_24;
    }
  }
  if (!*(_DWORD *)(v7 + 3224) || *((_DWORD *)v5 + 151))
  {
    if (!*(_DWORD *)(v7 + 3272) && !*(_DWORD *)(v7 + 3276) || *((__int16 *)v5 + 286) < 1)
    {
      uint64_t v17 = 0x4000;
      int v18 = *(_DWORD *)(v7 + 3272);
      if (!v18) {
        goto LABEL_29;
      }
LABEL_27:
      if (*((__int16 *)v5 + 286) < 1)
      {
        LOBYTE(v18) = 0;
        int v24 = *a3;
        if (*((_DWORD *)v5 + 227))
        {
LABEL_30:
          if (*((_DWORD *)v5 + 150))
          {
            uint64_t v19 = (void *)v5[77];
            int v20 = sub_100004148(v5[48]);
            memcpy(v19, a2, v20);
            *((_DWORD *)v5 + 158) = *a3;
          }
          else if ((v18 & 1) == 0 && *(_DWORD *)(v7 + 2968))
          {
            int v24 = *((_DWORD *)v5 + 158);
            a2 = (const void *)v5[77];
          }
        }
LABEL_39:
        uint64_t result = (uint64_t *)((uint64_t (*)(uint64_t *, const void *, int *))v5[121])(v5, a2, &v24);
        if (*((_DWORD *)v5 + 227)) {
          *((_DWORD *)v5 + 150) = *((_DWORD *)v5 + 150) == 0;
        }
        uint64_t v21 = qword_100101CC0;
        if (qword_100101CC0)
        {
          if (*(_DWORD *)(qword_100101CC0 + 3224)) {
            *((_DWORD *)v5 + 151) = *((_DWORD *)v5 + 151) == 0;
          }
          BOOL v22 = *(uint64_t *)(v21 + 584) >= 1 && v6 == 1;
          if (v22 && !*((_DWORD *)v5 + 162))
          {
            uint64_t v23 = 1;
            do
            {
              if (*(void *)(v21 + 584) <= v23) {
                break;
              }
              uint64_t result = (uint64_t *)sub_10005381C(v5, *(void *)(v5[80] + 8 * v23++), &v24);
              uint64_t v21 = qword_100101CC0;
            }
            while (qword_100101CC0);
          }
        }
        return result;
      }
      LOBYTE(v18) = 0;
      *((_DWORD *)v5 + 150) = v17 > *(void *)(v7 + 2960);
LABEL_29:
      int v24 = *a3;
      if (*((_DWORD *)v5 + 227)) {
        goto LABEL_30;
      }
      goto LABEL_39;
    }
    int v16 = sub_100015518(v5[48], (uint64_t)a2, v5[77]);
    uint64_t v7 = qword_100101CC0;
    if (qword_100101CC0)
    {
      uint64_t v17 = v16;
      int v18 = *(_DWORD *)(qword_100101CC0 + 3272);
      if (!v18) {
        goto LABEL_29;
      }
      goto LABEL_27;
    }
LABEL_24:
    LOBYTE(v18) = 1;
    int v24 = *a3;
    if (*((_DWORD *)v5 + 227)) {
      goto LABEL_30;
    }
    goto LABEL_39;
  }
  *((_DWORD *)v5 + 151) = 1;
  if (*(_DWORD *)(v7 + 3224) && *(_DWORD *)(v7 + 3024)) {
    ++*((_WORD *)v5 + 286);
  }
  return result;
}

uint64_t sub_100053B0C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 928))();
  int v9 = *(_DWORD *)(a1 + 524);
  if (v9 != 5)
  {
    if (v9 == 1) {
      *(_DWORD *)(a1 + 524) = 0;
    }
    uint64_t result = sub_100039A9C(a1, *(unsigned int *)(a1 + 428), v3, v4, v5, v6, v7, v8);
    if (result)
    {
      return sub_100039FBC(a1);
    }
  }
  return result;
}

uint64_t sub_100053B7C(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a2 + 12));
}

uint64_t sub_100053B8C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((int)sub_100004180(a4) <= 2)
  {
    uint64_t v10 = sub_100064670(a1, a2, a4, a3);
    if (v10)
    {
      uint64_t v11 = v10;
      if ((int)sub_100004180(a4) <= 2)
      {
        uint64_t v12 = (void *)sub_1000C33A0(1072);
        uint64_t v13 = (uint64_t)v12;
        if (!v12) {
          return v13;
        }
        memcpy(v12, &off_1000FD208, 0x208uLL);
        *(void *)(v13 + 376) = a3;
        *(void *)(v13 + 384) = a4;
        *(_DWORD *)(v13 + 432) = a5;
        *(void *)(v13 + 656) = v11;
        if (sub_100052A9C(v13, a5)) {
          return v13;
        }
        sub_100052EA0((uint64_t *)v13);
      }
    }
  }
  return 0;
}

uint64_t sub_100053C70(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 808);
  uint64_t v3 = *(void *)(a1 + 384);
  uint64_t v4 = *(unsigned __int16 *)(a1 + 804);
  uint64_t result = *(unsigned __int16 *)(*(void *)(v3 + 1792) + 2 * v4);
  if (result == 0x4000) {
    uint64_t result = sub_100015A48(v3, v4);
  }
  uint64_t v6 = *(__int16 **)(a1 + 816);
  int v9 = 0;
  if (v2 > 0)
  {
    int v7 = (__int16)(result - *(_WORD *)(a1 + 994));
    do
    {
      while (1)
      {
        int v8 = v6[1] + v7;
        if (v8 < 0x4000) {
          break;
        }
        uint64_t result = (uint64_t)j__memmove(v6, v6 + 2, 4 * (--v2 - v9));
        if (v9 >= v2) {
          return result;
        }
      }
      v6[1] = v8;
      if ((__int16)v8 < *(__int16 *)(a1 + 996))
      {
        *(_WORD *)(a1 + 996) = v8;
        if ((__int16)v8 < *(__int16 *)(a1 + 544)) {
          *(_WORD *)(a1 + 544) = v8;
        }
      }
      v6 += 2;
      ++v9;
    }
    while (v9 < v2);
  }
  return result;
}

uint64_t sub_100053D8C(uint64_t result, int a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 808);
  uint64_t v4 = (int)v3;
  if (*(__int16 *)(result + 996) > a2)
  {
    *(_WORD *)(result + 996) = a2;
    if (*(__int16 *)(result + 544) > a2) {
      *(_WORD *)(result + 544) = a2;
    }
  }
  uint64_t v5 = *(void *)(result + 816);
  if ((int)v3 >= *(_DWORD *)(result + 812))
  {
    if ((int)v3 < 1)
    {
      unsigned __int16 v9 = 0;
      uint64_t v13 = -1;
      if (a2 >= 0)
      {
LABEL_19:
        if (v9 != (unsigned __int16)a2 || *(unsigned __int16 *)(v5 + 4 * v13) <= a3) {
          return result;
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
      unsigned __int16 v9 = 0;
      uint64_t v10 = (unsigned __int16 *)(v5 + 2);
      int v11 = -1;
      do
      {
        int v12 = (__int16)*v10;
        if (*(v10 - 1) == a3)
        {
          if (v12 > a2) {
            *uint64_t v10 = a2;
          }
          return result;
        }
        if (v12 > (__int16)v9)
        {
          int v11 = v8;
          unsigned __int16 v9 = *v10;
        }
        ++v8;
        v10 += 2;
      }
      while (v3 != v8);
      uint64_t v13 = v11;
      if (a2 >= (__int16)v9) {
        goto LABEL_19;
      }
    }
    int v14 = (_WORD *)(v5 + 4 * v13);
    v14[1] = a2;
    *int v14 = a3;
    return result;
  }
  if ((int)v3 < 1)
  {
LABEL_9:
    int v7 = (_WORD *)(v5 + 4 * v4);
    *int v7 = a3;
    v7[1] = a2;
    ++*(_DWORD *)(result + 808);
  }
  else
  {
    uint64_t v6 = (__int16 *)(v5 + 2);
    while ((unsigned __int16)*(v6 - 1) != a3)
    {
      v6 += 2;
      if (!--v3) {
        goto LABEL_9;
      }
    }
    if (*v6 > a2) {
      __int16 *v6 = a2;
    }
  }
  return result;
}

uint64_t sub_100053EBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 656);
  int v3 = sub_100064220(v2);
  int v4 = sub_100064228(v2);
  if ((int)sub_1000BDCC4(*(void *)(a1 + 376)) <= 0 && *(int *)(a1 + 696) < 1) {
    return 1;
  }
  if (v4)
  {
    int v5 = *(_DWORD *)(a1 + 696);
    if (v5 < 1) {
      goto LABEL_11;
    }
    uint64_t v6 = *(void *)(a1 + 688);
    int v7 = *(_DWORD *)(a1 + 744);
    if (*(_DWORD *)(a1 + 708))
    {
      uint64_t result = sub_100062E50(v2, v6, v5, v7, 0);
      if (!result) {
        return result;
      }
      goto LABEL_11;
    }
    uint64_t result = sub_100063468(v2, v6, v5, v7, 0);
    if (result)
    {
LABEL_11:
      *(_DWORD *)(a1 + 696) = 0;
      if (*(_DWORD *)(a1 + 744)) {
        int v9 = *(_DWORD *)(a1 + 744);
      }
      else {
        int v9 = 65533;
      }
      *(_DWORD *)(a1 + 704) = sub_100062C2C(*(void *)(a1 + 656), v9);
      if (qword_100101CC0)
      {
        if (*(_DWORD *)(qword_100101CC0 + 5360)) {
          sub_100063CB0(v2, (v3 - 1), *(unsigned int *)(a1 + 528));
        }
      }
      return 1;
    }
  }
  else
  {
    uint64_t result = sub_100053FC4(a1);
    ++v3;
    if (result) {
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_100053FC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 656);
  uint64_t v3 = sub_100064220(v2);
  int v4 = sub_1000BDCC4(*(void *)(a1 + 376));
  uint64_t result = sub_1000C33A0(2 * v4);
  if (result)
  {
    uint64_t v6 = (unsigned __int16 *)result;
    int v9 = 0;
    sub_1000BDCCC(*(void *)(a1 + 376), result, v4);
    sub_1000613CC(*(uint64_t **)(a1 + 376), *(void *)(a1 + 384), v6, v4, 0, 0, 0);
    int v7 = sub_100061748(*(void *)(a1 + 656), *(uint64_t **)(a1 + 376), *(void *)(a1 + 384), v4, v6, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF, 0, *(_DWORD *)(a1 + 744), (int)&_mh_execute_header, (unint64_t)&_mh_execute_header >> 32, &v9, 0);
    sub_1000C321C((uint64_t)v6);
    if (v7)
    {
      if (*(_DWORD *)(a1 + 744)) {
        int v8 = *(_DWORD *)(a1 + 744);
      }
      else {
        int v8 = 65533;
      }
      *(_DWORD *)(a1 + 704) = sub_100062C2C(v2, v8);
      if (qword_100101CC0)
      {
        if (*(_DWORD *)(qword_100101CC0 + 5360)) {
          sub_100063CB0(v2, v3, *(unsigned int *)(a1 + 528));
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100054110(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 656);
  uint64_t result = sub_100064220(v2);
  if (*(void *)(a1 + 376))
  {
    uint64_t v4 = qword_100101CC0;
    if (qword_100101CC0)
    {
      int v5 = result;
      if (*(_DWORD *)(qword_100101CC0 + 3284))
      {
        *(_WORD *)(a1 + 580) = -1;
        *(_DWORD *)(a1 + 584) = 0;
      }
      if (*(_DWORD *)(v4 + 5264))
      {
        int v6 = *(_DWORD *)(a1 + 584);
        if (v6)
        {
          if ((int)result >= 1)
          {
            int v7 = 0;
            uint64_t v8 = *(unsigned __int16 *)(a1 + 2 * (v6 - 1) + 580);
            do
              uint64_t result = sub_100063DA8(*(void *)(a1 + 376), v2, v7++, *(unsigned int *)(a1 + 528), v8);
            while (v5 != v7);
          }
        }
        else
        {
          uint64_t v9 = *(unsigned int *)(a1 + 528);
          return sub_100063A5C(v2, v9);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000541F4(uint64_t a1, int a2)
{
  __int16 v3 = *(_WORD *)(a1 + 994);
  if ((__int16)(v3 + *(_WORD *)(a1 + 548)) >= a2) {
    int v4 = a2;
  }
  else {
    int v4 = (__int16)(v3 + *(_WORD *)(a1 + 548));
  }
  int v5 = *(_DWORD *)(a1 + 752);
  if (v5 <= 0x3FFFFFFF)
  {
    int v6 = qword_100101CC0;
    if (qword_100101CC0) {
      int v6 = *(_DWORD *)(qword_100101CC0 + 5224);
    }
    v4 -= (*(_DWORD *)(a1 + 568) + *(__int16 *)(a1 + 544) - (v5 + v6)) & ~((*(_DWORD *)(a1 + 568)
                                                                          + *(__int16 *)(a1 + 544)
                                                                          - (v5
                                                                           + v6)) >> 31);
    *(_DWORD *)(a1 + 752) = 0x40000000;
  }
  int v7 = v3 & ~(v3 >> 31);
  if (v7 > (__int16)v4) {
    return (__int16)v4;
  }
  int v9 = sub_10005EF28(*(int **)(a1 + 736), *(_DWORD *)(a1 + 536), (unsigned __int16)(v3 & ~(v3 >> 15)), (__int16)v4);
  if (qword_100101CC0)
  {
    uint64_t v10 = *(void *)(qword_100101CC0 + 3200);
    uint64_t v11 = v10 + (unsigned __int16)v7;
    __int16 v12 = v7 + v10;
    if (v11 <= v9) {
      LOWORD(v4) = v9;
    }
    else {
      LOWORD(v4) = v12;
    }
    int v13 = *(__int16 *)(a1 + 996);
    int v14 = *(unsigned __int16 *)(a1 + 996);
    if (*(void *)(qword_100101CC0 + 3248) >= *(__int16 *)(a1 + 548)) {
      goto LABEL_26;
    }
  }
  else
  {
    if (v7 <= v9) {
      LOWORD(v4) = v9;
    }
    else {
      LOWORD(v4) = v7;
    }
    int v13 = *(__int16 *)(a1 + 996);
    int v14 = *(unsigned __int16 *)(a1 + 996);
    if (*(__int16 *)(a1 + 548) <= 0) {
      goto LABEL_26;
    }
  }
  if (v14 != 0x4000)
  {
    uint64_t v15 = *(unsigned __int16 *)(a1 + 994);
    if (qword_100101CC0)
    {
      uint64_t v16 = *(void *)(qword_100101CC0 + 3248) + v15;
      double v17 = *(double *)(qword_100101CC0 + 3264);
    }
    else
    {
      double v17 = 0.0;
      LOWORD(v16) = *(_WORD *)(a1 + 994);
    }
    double v18 = v17 * (double)(v13 - (__int16)v15);
    if ((__int16)((int)v18 + v16) < (__int16)v4) {
      LOWORD(v4) = (int)v18 + v16;
    }
  }
LABEL_26:
  if (!qword_100101CC0
    || *(__int16 *)(a1 + 562) + (__int16)v14 > *(__int16 *)(a1 + 546)
    || *(uint64_t *)(qword_100101CC0 + 3256) < 1
    || !sub_100006578(*(void *)(a1 + 384)))
  {
    return (__int16)v4;
  }
  __int16 v19 = qword_100101CC0;
  if (qword_100101CC0) {
    __int16 v19 = *(_WORD *)(qword_100101CC0 + 3256);
  }
  int v20 = (__int16)(v4 - v19);
  if (v20 <= *(__int16 *)(a1 + 994)) {
    return *(__int16 *)(a1 + 994);
  }
  else {
    return (__int16)v20;
  }
}

BOOL sub_1000543B0(_DWORD *a1)
{
  if (sub_1000B4630(a1 + 189)) {
    return 1;
  }
  if (a1[226] && a1[130] == 1 && a1[148]) {
    return 1;
  }
  return sub_100039F98((uint64_t)a1);
}

uint64_t sub_100054428(uint64_t result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  *a2 = *(_DWORD *)(result + 568) + *(__int16 *)(result + 544);
  int v4 = *(__int16 *)(result + 996);
  if (v4 == 0x4000)
  {
    *a3 = 0x40000000;
    int v5 = *(__int16 *)(result + 712);
    if (v5 != 0x4000)
    {
LABEL_3:
      *a4 = *(_DWORD *)(result + 568) + v5;
      return result;
    }
  }
  else
  {
    *a3 = *(_DWORD *)(result + 568) + v4;
    int v5 = *(__int16 *)(result + 712);
    if (v5 != 0x4000) {
      goto LABEL_3;
    }
  }
  *a4 = 0x40000000;
  return result;
}

uint64_t sub_10005448C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 656);
  uint64_t result = sub_100053EBC(a1);
  if (result)
  {
    return sub_1000643E0(v5, a2, a3);
  }
  return result;
}

uint64_t *sub_1000544F0(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 656);
  uint64_t v10 = sub_100064618(v9, a2, a3, a4, a5, a6, a7, a8);
  if ((int)sub_100064228(v9) >= 1)
  {
    if (*(_DWORD *)(a1 + 744)) {
      int v11 = *(_DWORD *)(a1 + 744);
    }
    else {
      int v11 = 65533;
    }
    *(_DWORD *)(a1 + 704) = sub_100062C2C(v9, v11);
  }
  return v10;
}

uint64_t sub_10005455C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 524);
}

uint64_t sub_100054564(uint64_t a1)
{
  return *(__int16 *)(a1 + 572);
}

uint64_t sub_10005456C(unsigned int *a1, int a2)
{
  uint64_t result = a1[131];
  if (result == 1)
  {
    int v4 = sub_1000B46DC(a1 + 189, a2, 0);
    uint64_t result = 1;
    if (v4 == 2)
    {
      if (a1[202]) {
        return 2;
      }
      else {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1000545C0(uint64_t result)
{
  *(_DWORD *)(result + 524) = 3;
  return result;
}

uint64_t sub_1000545CC(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 524) - 3) >= 2) {
    return (*(uint64_t (**)(void))(a1 + 936))();
  }
  else {
    return 0;
  }
}

uint64_t sub_1000545FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (a5 - 1);
  if ((int)a5 < 1)
  {
    LOWORD(v13) = 0;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)a7;
    uint64_t v10 = (unsigned int *)a6;
    int v11 = a5;
    int v13 = sub_10003A104(a1, a2, a3, a4, a5, a6, a7, a8) + *(_DWORD *)(a1 + 896) + v8 * *(unsigned __int16 *)(a1 + 562);
    if (*(_DWORD *)(a1 + 520) == 1) {
      LOWORD(v13) = *(_WORD *)(a1 + 806) + v13;
    }
    if (*(_WORD *)(a1 + 564))
    {
      __int16 v30 = *(_WORD *)(a1 + 564);
      int v14 = *(uint64_t **)(a1 + 376);
      uint64_t v29 = 2 * (int)(sub_1000B51F8(v14) + 1);
      BOOL v22 = (_DWORD *)sub_1000CD3E8(v29, v15, v16, v17, v18, v19, v20, v21);
      int v23 = 0;
      uint64_t v24 = v11;
      do
      {
        unsigned int v25 = *v10++;
        unsigned int v26 = sub_1000BD9AC((uint64_t)v14, v25);
        v23 += sub_1000BB100(v14, v26, v22);
        --v24;
      }
      while (v24);
      sub_1000CD4D0(v22, v29);
      LOWORD(v13) = v13 + v30 * v23;
    }
    if (v9 && v11 >= 2)
    {
      do
      {
        if (*v9++) {
          LOWORD(v13) = *(_WORD *)(a1 + 560) + v13;
        }
        --v8;
      }
      while (v8);
    }
  }
  return (__int16)v13;
}

uint64_t sub_100054728(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 944))();
}

uint64_t sub_100054730(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 952))();
}

uint64_t sub_10005473C(uint64_t a1)
{
  return *(__int16 *)(a1 + 574);
}

uint64_t sub_100054744(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 568) + *(__int16 *)(a1 + 544));
}

uint64_t sub_100054754(uint64_t result, int a2)
{
  *(_DWORD *)(result + 752) = a2;
  return result;
}

double sub_10005475C(_DWORD *a1, int a2)
{
  if (a2 < 0) {
    int v2 = -1;
  }
  else {
    int v2 = a2;
  }
  if (v2 >= 1) {
    int v2 = 1;
  }
  uint64_t v3 = qword_100101CC0;
  if (qword_100101CC0)
  {
    a1[225] = *(_DWORD *)(qword_100101CC0 + 3096) + *(_DWORD *)(qword_100101CC0 + 3104) * v2;
    a1[224] = *(_DWORD *)(v3 + 3048) + *(_DWORD *)(v3 + 3056) * v2;
    a1[229] = *(void *)(v3 + 3064) + *(void *)(v3 + 3072) * v2;
  }
  else
  {
    double result = 0.0;
    *((void *)a1 + 112) = 0;
    a1[229] = 0;
  }
  return result;
}

uint64_t sub_1000547C8(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 608)) {
    return 1;
  }
  if (!*(_DWORD *)(a1 + 700)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 656);
  if (sub_100064228(v5))
  {
    if (*(_DWORD *)(a1 + 744)) {
      int v6 = *(_DWORD *)(a1 + 744);
    }
    else {
      int v6 = 65533;
    }
    int v7 = sub_1000B5C44(*(uint64_t **)(a1 + 376), a2);
    if (v7 > *(_DWORD *)(a1 + 700)) {
      return 0;
    }
    int v8 = v7;
    uint64_t v9 = (int16x8_t *)sub_1000C33A0(2 * v7);
    if (!v9) {
      return 0;
    }
    uint64_t v10 = v9;
    sub_1000B594C(*(void *)(a1 + 376), a2, v9, v8);
    int v11 = *(_DWORD *)(a1 + 696);
    if (!*(_DWORD *)(a1 + 708))
    {
      if (v11 >= 1)
      {
        if (!sub_100063468(v5, *(void *)(a1 + 688), v11, *(_DWORD *)(a1 + 744), 0)) {
          return 0;
        }
        *(_DWORD *)(a1 + 704) = sub_100062C2C(v5, v6);
      }
      int v11 = 0;
      *(_DWORD *)(a1 + 696) = 0;
      *(_DWORD *)(a1 + 708) = 1;
    }
    if (v11 + v8 > *(_DWORD *)(a1 + 700))
    {
      if (!sub_100062E50(v5, *(void *)(a1 + 688), v11, *(_DWORD *)(a1 + 744), 0)) {
        return 0;
      }
      *(_DWORD *)(a1 + 696) = 0;
      *(_DWORD *)(a1 + 704) = sub_100062C2C(v5, v6);
    }
    int v25 = 0;
    if (v8 < 1)
    {
      int v16 = *(_DWORD *)(a1 + 704);
      int v17 = v16;
      if (v16 < 0) {
        goto LABEL_22;
      }
    }
    else
    {
      int v12 = 0;
      uint64_t v13 = v8;
      int v14 = v10;
      do
      {
        unsigned int v15 = v14->u16[0];
        int v14 = (int16x8_t *)((char *)v14 + 2);
        sub_100062C40(v5, v15, *(_DWORD *)(a1 + 744), &v25);
        v12 += v25;
        --v13;
      }
      while (v13);
      int v16 = *(_DWORD *)(a1 + 704);
      int v17 = v16 - v12;
      if (v16 < v12)
      {
LABEL_22:
        int v18 = *(_DWORD *)(a1 + 696);
        if (v18 < 1
          || (int v19 = sub_100062E50(v5, *(void *)(a1 + 688), v18, *(_DWORD *)(a1 + 744), 0),
              int v16 = sub_100062C2C(v5, v6),
              *(_DWORD *)(a1 + 704) = v16,
              v19))
        {
          if (v8 < 1)
          {
            int v20 = 0;
          }
          else
          {
            int v20 = 0;
            uint64_t v21 = v8;
            BOOL v22 = v10;
            do
            {
              unsigned int v23 = v22->u16[0];
              BOOL v22 = (int16x8_t *)((char *)v22 + 2);
              sub_100062C40(v5, v23, *(_DWORD *)(a1 + 744), &v25);
              v20 += v25;
              --v21;
            }
            while (v21);
            int v16 = *(_DWORD *)(a1 + 704);
          }
          if (v20 > v16)
          {
            *(_DWORD *)(a1 + 696) = 0;
            uint64_t v2 = 0;
            *(_DWORD *)(a1 + 704) = sub_100062C2C(v5, v6);
LABEL_40:
            sub_1000C321C((uint64_t)v10);
            return v2;
          }
          memcpy(*(void **)(a1 + 688), v10, 2 * v8);
          *(_DWORD *)(a1 + 696) = v8;
          *(_DWORD *)(a1 + 704) -= v20;
LABEL_39:
          uint64_t v2 = 1;
          goto LABEL_40;
        }
        return 0;
      }
    }
    *(_DWORD *)(a1 + 704) = v17;
    memcpy((void *)(*(void *)(a1 + 688) + 2 * *(int *)(a1 + 696)), v10, 2 * v8);
    *(_DWORD *)(a1 + 696) += v8;
    goto LABEL_39;
  }
  return sub_100053FC4(a1);
}

uint64_t sub_100054AA0(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 608)) {
    return 1;
  }
  if (!*(_DWORD *)(a1 + 700)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 656);
  if (sub_100064228(v5))
  {
    int v6 = *(_DWORD *)(a1 + 744);
    if (v6) {
      int v7 = *(_DWORD *)(a1 + 744);
    }
    else {
      int v7 = 65533;
    }
    int v8 = *(_DWORD *)(a1 + 696);
    if (*(_DWORD *)(a1 + 708))
    {
      if (v8 < *(_DWORD *)(a1 + 700)) {
        goto LABEL_21;
      }
    }
    else
    {
      if (v8 >= 1)
      {
        uint64_t result = sub_100063468(v5, *(void *)(a1 + 688), v8, *(_DWORD *)(a1 + 744), 0);
        if (!result) {
          return result;
        }
        *(_DWORD *)(a1 + 704) = sub_100062C2C(v5, v7);
        int v6 = *(_DWORD *)(a1 + 744);
      }
      int v8 = 0;
      *(_DWORD *)(a1 + 696) = 0;
      *(_DWORD *)(a1 + 708) = 1;
      if (*(int *)(a1 + 700) > 0) {
        goto LABEL_21;
      }
    }
    uint64_t result = sub_100062E50(v5, *(void *)(a1 + 688), v8, v6, 0);
    if (!result) {
      return result;
    }
    *(_DWORD *)(a1 + 696) = 0;
    *(_DWORD *)(a1 + 704) = sub_100062C2C(v5, v7);
    int v6 = *(_DWORD *)(a1 + 744);
LABEL_21:
    int v11 = 0;
    sub_100062C40(v5, a2, v6, &v11);
    if (*(_DWORD *)(a1 + 704) >= v11)
    {
      *(_WORD *)(*(void *)(a1 + 688) + 2 * (int)(*(_DWORD *)(a1 + 696))++) = a2;
      *(_DWORD *)(a1 + 704) -= v11;
      return 1;
    }
    int v9 = *(_DWORD *)(a1 + 696);
    if (v9 < 1
      || (int v10 = sub_100062E50(v5, *(void *)(a1 + 688), v9, *(_DWORD *)(a1 + 744), 0),
          *(_DWORD *)(a1 + 704) = sub_100062C2C(v5, v7),
          v10))
    {
      uint64_t result = sub_100062C40(v5, a2, *(_DWORD *)(a1 + 744), &v11);
      if (result)
      {
        **(_WORD **)(a1 + 688) = a2;
        *(_DWORD *)(a1 + 696) = 1;
        *(_DWORD *)(a1 + 704) -= v11;
      }
      else
      {
        *(_DWORD *)(a1 + 696) = 0;
      }
      return result;
    }
    return 0;
  }
  return sub_100053FC4(a1);
}

uint64_t sub_100054CEC(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 608)) {
    return 1;
  }
  int v5 = sub_1000B5C44(*(uint64_t **)(a1 + 376), a2);
  int v6 = (int16x8_t *)sub_1000C33A0(2 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (uint64_t)v6;
  sub_1000B594C(*(void *)(a1 + 376), a2, v6, v5);
  if (v5 < 1)
  {
LABEL_8:
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v8 = v5;
    int v9 = (__int16 *)v7;
    while (1)
    {
      __int16 v10 = *v9++;
      if (!sub_100054DC0(a1, v10)) {
        break;
      }
      if (!--v8) {
        goto LABEL_8;
      }
    }
    uint64_t v11 = 0;
  }
  sub_1000C321C(v7);
  return v11;
}

uint64_t sub_100054DC0(uint64_t a1, __int16 a2)
{
  if (!*(_DWORD *)(a1 + 608))
  {
    int v3 = *(_DWORD *)(a1 + 744);
    if (v3) {
      int v4 = *(_DWORD *)(a1 + 744);
    }
    else {
      int v4 = 65533;
    }
    int v5 = *(_DWORD *)(a1 + 700);
    if (!v5) {
      return 0;
    }
    uint64_t v7 = *(void *)(a1 + 656);
    int v8 = *(_DWORD *)(a1 + 696);
    if (*(_DWORD *)(a1 + 708))
    {
      if (v8 >= 1)
      {
        uint64_t result = sub_100062E50(*(void *)(a1 + 656), *(void *)(a1 + 688), v8, v3, 0);
        if (!result) {
          return result;
        }
        *(_DWORD *)(a1 + 704) = sub_100062C2C(v7, v4);
        int v5 = *(_DWORD *)(a1 + 700);
      }
      int v8 = 0;
      *(_DWORD *)(a1 + 696) = 0;
      *(_DWORD *)(a1 + 708) = 0;
    }
    if (v8 >= v5)
    {
      uint64_t result = sub_100063468(v7, *(void *)(a1 + 688), v8, *(_DWORD *)(a1 + 744), 0);
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 696) = 0;
      *(_DWORD *)(a1 + 704) = sub_100062C2C(v7, v4);
      int v8 = *(_DWORD *)(a1 + 696);
    }
    *(_WORD *)(*(void *)(a1 + 688) + 2 * v8) = a2;
    ++*(_DWORD *)(a1 + 696);
    *(_DWORD *)(a1 + 524) = 4;
  }
  return 1;
}

BOOL sub_100054EC4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  BOOL result = sub_1000B4640((_DWORD *)(a1 + 756));
  if (result)
  {
    int v6 = *(_DWORD *)(a1 + 808);
    if (v6)
    {
      if (v6 < 1)
      {
        unsigned __int16 v9 = -1;
      }
      else
      {
        uint64_t v7 = *(unsigned __int16 **)(a1 + 816);
        __int16 v8 = 0x4000;
        unsigned __int16 v9 = -1;
        do
        {
          if ((__int16)v7[1] < v8)
          {
            unsigned __int16 v9 = *v7;
            __int16 v8 = v7[1];
          }
          --v6;
        }
        while (v6);
      }
      *a3 = sub_1000BD96C(*(void *)(a1 + 376), v9);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100054F5C(uint64_t a1)
{
  return sub_1000D34EC(*(long long **)(a1 + 472));
}

void sub_100054F64(uint64_t a1)
{
}

uint64_t sub_100054F88(uint64_t a1, int a2, _WORD *a3, uint64_t a4, _DWORD *a5)
{
  int v9 = *(_DWORD *)(a1 + 824);
  __int16 v10 = *(_WORD **)(a1 + 816);
  int v11 = *(_DWORD *)(a1 + 808);
  if (v9) {
    goto LABEL_30;
  }
  qsort(v10, v11, 4uLL, (int (__cdecl *)(const void *, const void *))sub_10005553C);
  uint64_t v12 = qword_100101CC0;
  if (!qword_100101CC0)
  {
    __int16 v10 = *(_WORD **)(a1 + 816);
    __int16 v18 = v10[1];
    LODWORD(v19) = 1;
    goto LABEL_22;
  }
  if (!*(_DWORD *)(qword_100101CC0 + 3228) || !*(void *)(a1 + 376)) {
    goto LABEL_19;
  }
  if (*(int *)(a1 + 808) < 1)
  {
    *(_DWORD *)(a1 + 808) = 0;
LABEL_19:
    __int16 v10 = *(_WORD **)(a1 + 816);
    __int16 v18 = v10[1];
    goto LABEL_20;
  }
  uint64_t v13 = 0;
  int v14 = 0;
  do
  {
    int v15 = sub_1000BD964(*(void *)(a1 + 376), *(unsigned __int16 *)(*(void *)(a1 + 816) + 4 * v13), 0);
    if (v14 < 1)
    {
LABEL_13:
      if (v13 != v14) {
        *(_DWORD *)(*(void *)(a1 + 816) + 4 * v14) = *(_DWORD *)(*(void *)(a1 + 816) + 4 * v13);
      }
      ++v14;
    }
    else
    {
      int v16 = v15;
      uint64_t v17 = 0;
      while (v16 != sub_1000BD964(*(void *)(a1 + 376), *(unsigned __int16 *)(*(void *)(a1 + 816) + v17), 0))
      {
        v17 += 4;
        if (4 * v14 == v17) {
          goto LABEL_13;
        }
      }
    }
    ++v13;
  }
  while (v13 < *(int *)(a1 + 808));
  uint64_t v12 = qword_100101CC0;
  *(_DWORD *)(a1 + 808) = v14;
  __int16 v10 = *(_WORD **)(a1 + 816);
  __int16 v18 = v10[1];
  if (!v12)
  {
    LODWORD(v19) = 1;
    goto LABEL_22;
  }
LABEL_20:
  uint64_t v19 = *(void *)(v12 + 1144);
  BOOL v20 = v19 < 2;
  LODWORD(v19) = (__int16)v19;
  if (v20) {
    LODWORD(v19) = 1;
  }
LABEL_22:
  int v21 = v19 + v18;
  if (v21 >= 0x4000) {
    int v22 = 0x4000;
  }
  else {
    int v22 = v21;
  }
  uint64_t v23 = *(unsigned int *)(a1 + 808);
  uint64_t v24 = 4 * v23 - 2;
  int v25 = *(_DWORD *)(a1 + 808);
  while (1)
  {
    BOOL v26 = __OFSUB__(v25--, 1);
    if (v25 < 0 != v26) {
      break;
    }
    int v27 = *(__int16 *)((char *)v10 + v24);
    v24 -= 4;
    if (v22 > v27)
    {
      LODWORD(v23) = v25 + 1;
      *(_DWORD *)(a1 + 808) = v25 + 1;
      break;
    }
  }
  *(_DWORD *)(a1 + 824) = 1;
  int v11 = v23;
LABEL_30:
  uint64_t v28 = 0;
  *a5 = 0x40000000;
  if ((a2 & 0x80000000) == 0 && v11 > a2)
  {
    uint64_t v29 = &v10[2 * a2];
    *a5 = *(_DWORD *)(a1 + 568) + (__int16)v29[1];
    *a3 = *v29;
    return 1;
  }
  return v28;
}

uint64_t sub_100055198(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, int a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  uint64_t v17 = *(void *)(a1 + 376);
  if (a7) {
    bzero(a7, a5);
  }
  int v18 = 4 * a5;
  if (a8) {
    bzero(a8, v18);
  }
  if (a9) {
    bzero(a9, v18);
  }
  if (a10) {
    bzero(a10, a5);
  }
  if (a2 < 1) {
    return 0;
  }
  uint64_t v19 = a11;
  unsigned __int16 v29 = 0;
  unsigned int v20 = 2 * a2;
  uint64_t v21 = a2;
  if (v17)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    while (sub_100054F88(a1, v22, &v29, a4, a3) && (int)v23 + 2 < a5)
    {
      int v24 = sub_1000BD96C(v17, v29);
      int v25 = (_DWORD *)(a6 + 4 * v23);
      *int v25 = v24;
      v25[1] = -1;
      ++v22;
      ++a3;
      v23 += 2;
      if (v21 == v22)
      {
        uint64_t v17 = v21;
        uint64_t v19 = a11;
        if (a11) {
          goto LABEL_27;
        }
        return v17;
      }
    }
    uint64_t v17 = v22;
    unsigned int v20 = v23;
    uint64_t v19 = a11;
    if (a11) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v26 = 0;
    while (sub_100054F88(a1, v17, &v29, a4, a3) && (int)v26 + 2 < a5)
    {
      int v27 = (_DWORD *)(a6 + 4 * v26);
      *int v27 = v29;
      v27[1] = -1;
      ++v17;
      ++a3;
      v26 += 2;
      if (v21 == v17)
      {
        uint64_t v17 = v21;
        if (!a11) {
          return v17;
        }
        goto LABEL_27;
      }
    }
    unsigned int v20 = v26;
    if (!a11) {
      return v17;
    }
LABEL_27:
    if (v20) {
      memset(v19, 255, 2 * v20);
    }
  }
  return v17;
}

uint64_t sub_100055360(uint64_t a1, int a2, char *a3)
{
  int v6 = *(unsigned __int16 **)(a1 + 848);
  if ((*(_WORD *)(sub_100064238(*(void *)(a1 + 656), *(_DWORD *)(a1 + 672)) + 4 * *v6) & 0x7FFF) != 0
    && (uint64_t v7 = *(unsigned int *)(a1 + 528), (int)v7 >= 2))
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    signed __int16 v10 = v6[1];
    uint64_t v11 = v7 - 1;
    do
    {
      int v12 = (__int16)v6[v8++ + 2];
      if (v12 < v10)
      {
        LODWORD(v9) = v8;
        signed __int16 v10 = v12;
      }
    }
    while (v11 != v8);
    uint64_t v9 = (int)v9;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v13 = *(void **)(a1 + 472);
  int v14 = (__int16)v6[v9 + 3];
  return sub_1000D4160(v13, v14, a2, a3);
}

uint64_t sub_100055424(uint64_t a1)
{
  return sub_1000D34EC(*(long long **)(a1 + 472));
}

uint64_t sub_100055430(uint64_t a1, int a2, unint64_t a3, int a4, _DWORD *a5)
{
  return sub_1000D3F70(*(void *)(a1 + 472), a2, a3, a4, a5, 0, 0);
}

_DWORD *sub_100055440(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (qword_100101CC0)
  {
    BOOL result = (_DWORD *)sub_1000C33A0(*(void *)(qword_100101CC0 + 4008) << 7);
    if (!result) {
      return result;
    }
  }
  else
  {
    BOOL result = (_DWORD *)sub_1000C33A0(0);
    if (!result) {
      return result;
    }
  }
  uint64_t v18 = (uint64_t)result;
  if (qword_100101CC0) {
    int v19 = *(_DWORD *)(qword_100101CC0 + 4008);
  }
  else {
    int v19 = 0;
  }
  unsigned int v20 = sub_1000D42AC(*(void *)(a1 + 472), result, v19, 0xFFFFu, 0, 0);
  if (v20) {
    sub_100023674(v18, *(void *)(a1 + 376), (int *)&v20, a2, a3, a5, a6, a7, a11);
  }
  *(_DWORD *)(a1 + 824) = 1;
  sub_1000C321C(v18);
  return (_DWORD *)v20;
}

uint64_t sub_10005553C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if ((__int16)a1[1] < (__int16)a2[1]) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = a1[1] != a2[1];
  }
  if (v2) {
    return v2;
  }
  unsigned int v4 = *a1;
  unsigned int v5 = *a2;
  BOOL v6 = v4 >= v5;
  LODWORD(v7) = v4 != v5;
  if (v6) {
    return v7;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100055580(uint64_t a1)
{
  unsigned int v2 = sub_100039408(a1);
  unsigned int v3 = sub_1000C0758(*(_DWORD *)(a1 + 520), v2);
  unsigned int v4 = sub_1000C0758(*(_DWORD *)(a1 + 524), v3);
  unsigned int v5 = sub_1000C0758(*(_DWORD *)(a1 + 528), v4);
  unsigned int v6 = sub_1000C0758(*(_DWORD *)(a1 + 532), v5);
  unsigned int v7 = sub_1000C0758(*(_DWORD *)(a1 + 536), v6);
  unsigned int v8 = sub_1000C0758(*(_DWORD *)(a1 + 540), v7);
  unsigned int v9 = sub_1000C072C(*(unsigned __int16 *)(a1 + 544), v8);
  unsigned int v10 = sub_1000C072C(*(unsigned __int16 *)(a1 + 546), v9);
  unsigned int v11 = sub_1000C072C(*(unsigned __int16 *)(a1 + 548), v10);
  unsigned int v12 = sub_1000C072C(*(unsigned __int16 *)(a1 + 550), v11);
  unsigned int v13 = sub_1000C072C(*(unsigned __int16 *)(a1 + 552), v12);
  unsigned int v14 = sub_1000C072C(*(unsigned __int16 *)(a1 + 554), v13);
  unsigned int v15 = sub_1000C072C(*(unsigned __int16 *)(a1 + 556), v14);
  unsigned int v16 = sub_1000C072C(*(unsigned __int16 *)(a1 + 558), v15);
  unsigned int v17 = sub_1000C072C(*(unsigned __int16 *)(a1 + 560), v16);
  unsigned int v18 = sub_1000C072C(*(unsigned __int16 *)(a1 + 562), v17);
  unsigned int v19 = sub_1000C072C(*(unsigned __int16 *)(a1 + 564), v18);
  unsigned int v20 = sub_1000C0758(*(_DWORD *)(a1 + 568), v19);
  uint64_t v21 = sub_1000C072C(*(unsigned __int16 *)(a1 + 572), v20);
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1068)) {
    uint64_t v21 = sub_1000C0758(*(_DWORD *)(a1 + 576), v21);
  }
  unsigned int v22 = sub_1000C09B0((unint64_t *)(a1 + 580), 2, *(_DWORD *)(a1 + 584), v21);
  unsigned int v23 = sub_1000C0758(*(_DWORD *)(a1 + 584), v22);
  unsigned int v24 = sub_1000C0758(*(_DWORD *)(a1 + 588), v23);
  unsigned int v25 = sub_1000C0758(*(_DWORD *)(a1 + 592), v24);
  unsigned int v26 = sub_1000C0758(*(_DWORD *)(a1 + 596), v25);
  unsigned int v27 = sub_1000C0758(*(_DWORD *)(a1 + 600), v26);
  unsigned int v28 = sub_1000C0758(*(_DWORD *)(a1 + 604), v27);
  uint64_t v29 = sub_1000C0758(*(_DWORD *)(a1 + 608), v28);
  __int16 v30 = *(unint64_t **)(a1 + 616);
  int v31 = sub_100004148(*(void *)(a1 + 384));
  uint64_t v32 = sub_1000C09B0(v30, 1, v31, v29);
  int v33 = *(unint64_t **)(a1 + 624);
  if (v33)
  {
    if (qword_100101CC0) {
      int v34 = *(_DWORD *)(qword_100101CC0 + 584);
    }
    else {
      int v34 = 0;
    }
    int v35 = sub_100004148(*(void *)(a1 + 384));
    LODWORD(v32) = sub_1000C09B0(v33, 1, v35 * v34, v32);
  }
  unsigned int v36 = sub_1000C072C(*(unsigned __int16 *)(a1 + 632), v32);
  unsigned int v37 = sub_1000C072C(*(unsigned __int16 *)(a1 + 634), v36);
  unsigned int v38 = sub_1000C0758(*(_DWORD *)(a1 + 648), v37);
  unsigned int v39 = sub_1000C0758(*(_DWORD *)(a1 + 652), v38);
  unsigned int v40 = sub_100063814(*(void *)(a1 + 656));
  unsigned int v41 = sub_1000C0758(v40, v39);
  unsigned int v42 = sub_1000C0758(*(_DWORD *)(a1 + 668), v41);
  uint64_t v43 = sub_1000C0758(*(_DWORD *)(a1 + 672), v42);
  unsigned int v44 = sub_1000C09B0(*(unint64_t **)(a1 + 688), 2, *(_DWORD *)(a1 + 696), v43);
  unsigned int v45 = sub_1000C0758(*(_DWORD *)(a1 + 696), v44);
  unsigned int v46 = sub_1000C0758(*(_DWORD *)(a1 + 700), v45);
  unsigned int v47 = sub_1000C0758(*(_DWORD *)(a1 + 704), v46);
  unsigned int v48 = sub_1000C0758(*(_DWORD *)(a1 + 708), v47);
  unsigned int v49 = sub_1000C072C(*(unsigned __int16 *)(a1 + 712), v48);
  unsigned int v50 = sub_1000C072C(*(unsigned __int16 *)(a1 + 714), v49);
  unsigned int v51 = sub_1000C072C(*(unsigned __int16 *)(a1 + 716), v50);
  unsigned int v52 = sub_1000C072C(*(unsigned __int16 *)(a1 + 718), v51);
  unsigned int v53 = sub_1000C072C(*(unsigned __int16 *)(a1 + 720), v52);
  unsigned int v54 = sub_1000C072C(*(unsigned __int16 *)(a1 + 722), v53);
  uint64_t v55 = *(void *)(a1 + 728);
  if (v55)
  {
    unsigned int v56 = sub_10009DBF4(v55);
    unsigned int v54 = sub_1000C0758(v56, v54);
  }
  unsigned int v57 = sub_10005EF90(*(unsigned int **)(a1 + 736));
  unsigned int v58 = sub_1000C0758(v57, v54);
  unsigned int v59 = sub_1000C0758(*(_DWORD *)(a1 + 748), v58);
  unsigned int v60 = sub_1000C0758(*(_DWORD *)(a1 + 756), v59);
  unsigned int v61 = sub_1000C0758(*(_DWORD *)(a1 + 760), v60);
  unsigned int v62 = sub_1000C0758(*(_DWORD *)(a1 + 764), v61);
  unsigned int v63 = sub_1000C0758(*(_DWORD *)(a1 + 800), v62);
  unsigned int v64 = sub_1000C072C(*(unsigned __int16 *)(a1 + 804), v63);
  unsigned int v65 = sub_1000C072C(*(unsigned __int16 *)(a1 + 806), v64);
  uint64_t v66 = *(void *)(a1 + 832);
  int v67 = *(_DWORD *)(a1 + 532);
  uint64_t v68 = sub_100064238(*(void *)(a1 + 656), 0);
  if (*(int *)(a1 + 532) >= 1)
  {
    uint64_t v69 = v68;
    int v70 = 0;
    int v71 = 0;
    uint64_t v72 = (unsigned __int16 *)(v66 + 12 * v67);
    uint64_t v73 = v72;
    while (1)
    {
      unsigned int v75 = *(v73 - 6);
      v73 -= 6;
      unsigned int v76 = sub_1000C072C(v75, v65);
      if ((*(_WORD *)(v69 + 4 * *v73) & 0x7FFF) == 0) {
        break;
      }
      uint64_t v77 = *(unsigned int *)(a1 + 528);
      if ((int)v77 >= 1) {
        goto LABEL_21;
      }
LABEL_13:
      unsigned int v74 = sub_1000C0710(*((unsigned char *)v72 - 2), v76);
      unsigned int v65 = sub_1000C0710(*((unsigned char *)v72 - 1), v74);
      if (*(v72 - 6))
      {
        ++v71;
        uint64_t v72 = v73;
        if (v71 >= *(_DWORD *)(a1 + 532)) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v69 = sub_100064238(*(void *)(a1 + 656), ++v70);
        ++v71;
        uint64_t v72 = v73;
        if (v71 >= *(_DWORD *)(a1 + 532)) {
          goto LABEL_25;
        }
      }
    }
    uint64_t v77 = 1;
LABEL_21:
    for (uint64_t i = 0; i != v77; ++i)
    {
      uint64_t v79 = &v72[i];
      unsigned int v76 = sub_1000C072C(*(v79 - 5), v76);
      if (*(v79 - 5) != 0x4000) {
        unsigned int v76 = sub_1000C072C(*(v79 - 3), v76);
      }
    }
    goto LABEL_13;
  }
LABEL_25:
  unsigned int v80 = sub_1000C0758(*(_DWORD *)(a1 + 880), v65);
  unsigned int v81 = sub_1000C0758(-1431655765 * ((*(void *)(a1 + 848) - *(void *)(a1 + 832)) >> 2), v80);
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1068))
  {
    unsigned int v82 = sub_1000C072C(*(unsigned __int16 *)(a1 + 992), v81);
    unsigned int v83 = sub_1000C072C(*(unsigned __int16 *)(a1 + 994), v82);
    unsigned int v81 = sub_1000C072C(*(unsigned __int16 *)(a1 + 996), v83);
  }
  unsigned int v84 = sub_1000D32E4(*(void *)(a1 + 472));
  return sub_1000C0758(v84, v81);
}

uint64_t sub_100055AA4(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int a5, unsigned int a6, int a7)
{
  uint64_t v8 = 0;
  int v9 = 4;
  if (a6 > 5 || ((1 << a6) & 0x26) == 0) {
    goto LABEL_28;
  }
  unsigned int v15 = *(uint64_t **)(a1 + 376);
  *(_DWORD *)(a1 + 520) = a6;
  *(_DWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 572) = -65536;
  *(_DWORD *)(a1 + 1064) = 0;
  *(void *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(void *)(a1 + 648) = 1;
  *(_DWORD *)(a1 + 752) = 0x40000000;
  uint64_t v16 = a1 + 756;
  int v17 = *(_DWORD *)(a1 + 432);
  if (qword_100101CC0)
  {
    sub_1000B4440(v16, v17, *(_DWORD *)(qword_100101CC0 + 3192), *(_DWORD *)(a1 + 912), *(void *)(qword_100101CC0 + 1440), 0);
    uint64_t v18 = *(void *)(a1 + 728);
    uint64_t v19 = qword_100101CC0;
    if (v18) {
      goto LABEL_5;
    }
LABEL_9:
    if (v19) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  sub_1000B4440(v16, v17, 0, *(_DWORD *)(a1 + 912), 0, 0);
  uint64_t v18 = *(void *)(a1 + 728);
  uint64_t v19 = qword_100101CC0;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_5:
  if (v19)
  {
    if (!sub_10009CED4(v18, *(_DWORD *)(v19 + 4488), *(void *)(v19 + 4496))) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v19 = qword_100101CC0;
    if (qword_100101CC0)
    {
      if (!*(_DWORD *)(qword_100101CC0 + 4464) || (sub_10009CC28(*(void *)(a1 + 728)), (uint64_t v19 = qword_100101CC0) != 0))
      {
LABEL_15:
        *(_WORD *)(a1 + 564) = *(void *)(v19 + 3208);
        if (!*(void *)(v19 + 4144)) {
          goto LABEL_25;
        }
        if (!*(void *)(v19 + 4136)) {
          goto LABEL_25;
        }
        uint64_t v20 = *(void *)(v19 + 3288);
        if (v20 >= *(void *)(v19 + 3000)) {
          goto LABEL_25;
        }
        *(_WORD *)(a1 + 562) = v20;
        uint64_t v21 = *(void *)(v19 + 2976);
        if (!v21) {
          goto LABEL_25;
        }
        *(_DWORD *)(a1 + 536) = v21;
        *(_WORD *)(a1 + 548) = *(void *)(v19 + 3000);
        __int16 v22 = *(_WORD *)(v19 + 3016);
        *(_WORD *)(a1 + 552) = v22;
        *(_WORD *)(a1 + 550) = *(void *)(v19 + 3008);
        *(_DWORD *)(a1 + 824) = 0;
        if (*(void *)(v19 + 3240) == 5000) {
          *(_WORD *)(a1 + 554) = v22;
        }
        *(void *)(a1 + 600) = 0x100000001;
        unsigned int v23 = a3 - 1;
        if (a3 < 1)
        {
          *(_DWORD *)(a1 + 584) = 0;
          __int16 v26 = -1;
        }
        else
        {
          if (a3 != 1 && *(_DWORD *)(v19 + 3280))
          {
            *(_DWORD *)(a1 + 584) = 2;
            *(_WORD *)(a1 + 580) = *(_WORD *)(a2 + 2 * (a3 - 2));
            *(_WORD *)(a1 + 582) = *(_WORD *)(a2 + 2 * v23);
            goto LABEL_33;
          }
          *(_DWORD *)(a1 + 584) = 1;
          __int16 v26 = *(_WORD *)(a2 + 2 * v23);
        }
        *(_WORD *)(a1 + 580) = v26;
LABEL_33:
        sub_100054110(a1);
        if (!qword_100101CC0) {
          goto LABEL_70;
        }
        if (!*(_DWORD *)(qword_100101CC0 + 1776)) {
          goto LABEL_41;
        }
        uint64_t v54 = a2;
        int v55 = a7;
        unsigned int v56 = v15;
        if (a5 < 1)
        {
          unsigned int v28 = -1;
        }
        else
        {
          uint64_t v27 = a5;
          unsigned int v28 = -1;
          uint64_t v29 = a4;
          do
          {
            uint64_t v30 = *v29++;
            unsigned int v31 = sub_100026C90(v30);
            unsigned int v28 = sub_1000C085C(v31, 4, v28);
            --v27;
          }
          while (v27);
        }
        unsigned int v15 = v56;
        if (v28 == *(_DWORD *)(a1 + 828)) {
          goto LABEL_41;
        }
        int v33 = sub_100025F88(a4, a5, 0);
        int v34 = v33;
        if (v33 <= *(_DWORD *)(a1 + 1032))
        {
          unsigned int v36 = *(unsigned __int16 **)(a1 + 1024);
        }
        else
        {
          uint64_t v35 = sub_1000C33A0(2 * v33);
          if (!v35) {
            return 0;
          }
          unsigned int v36 = (unsigned __int16 *)v35;
          sub_1000C321C(*(void *)(a1 + 1024));
          *(void *)(a1 + 1024) = v36;
          *(_DWORD *)(a1 + 1032) = v34;
        }
        uint64_t v37 = sub_100025F88(a4, a5, v36);
        int v38 = 3 * (int)v37 / 2;
        if (*(_DWORD *)(a1 + 1048) < v38)
        {
          uint64_t v39 = sub_1000C33A0(2 * v38);
          if (!v39) {
            return 0;
          }
          uint64_t v40 = v39;
          sub_1000C321C(*(void *)(a1 + 1040));
          *(void *)(a1 + 1040) = v40;
          *(_DWORD *)(a1 + 1048) = v38;
        }
        uint64_t v41 = sub_1000B5108((uint64_t)v56);
        if ((int)v37 < 1)
        {
          uint64_t v43 = 0;
LABEL_63:
          unsigned int v15 = v56;
          if (sub_100062588(*(void *)(a1 + 656), *(unsigned __int16 **)(a1 + 1040), v43, v56, *(void *)(a1 + 384), 0, 0, 1, 0, *(void *)(a1 + 728)))
          {
            *(_DWORD *)(a1 + 828) = v28;
            if (*(_DWORD *)(a1 + 744)) {
              int v50 = *(_DWORD *)(a1 + 744);
            }
            else {
              int v50 = 65533;
            }
            *(_DWORD *)(a1 + 704) = sub_100062C2C(*(void *)(a1 + 656), v50);
            a7 = v55;
            a2 = v54;
            if (!qword_100101CC0) {
              goto LABEL_70;
            }
            if (*(_DWORD *)(qword_100101CC0 + 5360)) {
              sub_100063A5C(*(void *)(a1 + 656), *(unsigned int *)(a1 + 528));
            }
LABEL_41:
            if (qword_100101CC0)
            {
              if (*(_DWORD *)(qword_100101CC0 + 1776)) {
                BOOL v32 = 1;
              }
              else {
                BOOL v32 = v15 == 0;
              }
              if (v32) {
                goto LABEL_72;
              }
LABEL_71:
              if (!*(_DWORD *)(a1 + 608))
              {
                uint64_t v8 = sub_100053EBC(a1);
                goto LABEL_74;
              }
LABEL_72:
              uint64_t v8 = 1;
LABEL_74:
              *(unsigned char *)(a1 + 664) = sub_100064230(*(void *)(a1 + 656));
              int v51 = sub_100064220(*(void *)(a1 + 656));
              uint64_t v52 = *(void *)(a1 + 832);
              *(_DWORD *)(a1 + 532) = 0;
              if (v51 >= 1)
              {
                uint64_t v53 = v52 + 11;
                do
                {
                  *(_DWORD *)(v53 - 11) = 0;
                  *(_WORD *)(v53 - 5) = 0;
                  *(_WORD *)(v53 - 1) = 0;
                  ++*(_DWORD *)(a1 + 532);
                  v53 += 12;
                  --v51;
                }
                while (v51);
              }
              *(_DWORD *)(a1 + 712) = 1073758208;
              sub_1000D3EB4(*(void *)(a1 + 472), a2, a3, a7);
              *(_DWORD *)(a1 + 568) = 0;
              unsigned int v24 = (_WORD *)(a1 + 996);
              int v9 = 1;
              goto LABEL_27;
            }
LABEL_70:
            if (!v15) {
              goto LABEL_72;
            }
            goto LABEL_71;
          }
        }
        else
        {
          uint64_t v42 = v41;
          uint64_t v43 = 0;
          int v44 = 0;
          int v45 = *(_DWORD *)(a1 + 1048);
          while (1)
          {
            while (1)
            {
              int v46 = sub_10001FAFC(v42, *(unsigned __int16 *)(*(void *)(a1 + 1024) + 2 * v44), (int16x8_t *)(*(void *)(a1 + 1040) + 2 * (int)v43), v45 - (int)v43);
              int v45 = *(_DWORD *)(a1 + 1048);
              if (v46 + (int)v43 > v45) {
                break;
              }
              uint64_t v43 = (v46 + v43);
              if (++v44 >= (int)v37) {
                goto LABEL_63;
              }
            }
            uint64_t v47 = v37;
            v45 += 2 * (v37 - v44);
            unsigned int v48 = (void *)sub_1000C33A0(2 * v45);
            if (!v48) {
              break;
            }
            unsigned int v49 = v48;
            j__memmove(v48, *(const void **)(a1 + 1040), 2 * (int)v43);
            sub_1000C321C(*(void *)(a1 + 1040));
            *(void *)(a1 + 1040) = v49;
            *(_DWORD *)(a1 + 1048) = v45;
            uint64_t v37 = v47;
            if (v44 >= (int)v47) {
              goto LABEL_63;
            }
          }
        }
        return 0;
      }
    }
LABEL_26:
    uint64_t v8 = 0;
    unsigned int v24 = (_WORD *)(a1 + 564);
    int v9 = 4;
LABEL_27:
    *unsigned int v24 = 0;
    goto LABEL_28;
  }
  if (sub_10009CED4(v18, 0, 0)) {
    goto LABEL_12;
  }
LABEL_25:
  uint64_t v8 = 0;
  int v9 = 4;
LABEL_28:
  *(_DWORD *)(a1 + 524) = v9;
  return v8;
}

uint64_t sub_100055FF8(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t result = sub_100064220(*(void *)(a1 + 656));
  uint64_t v13 = result;
  __int16 v14 = *(_WORD *)(a1 + 572);
  if (*(_WORD *)(a1 + 994) == 0x4000 && *(_WORD *)(a1 + 572))
  {
    *(_DWORD *)(a1 + 568) = 0x40000000;
LABEL_55:
    *(_WORD *)(a1 + 572) = v14 + 1;
    return result;
  }
  uint64_t v15 = *(void *)(a1 + 832);
  int v16 = *(_DWORD *)(a1 + 532);
  uint64_t v17 = *(void *)(a1 + 384);
  *(void *)(a1 + 1000) = a2;
  sub_100006AA4(v17, a2, a3, *(void *)(a1 + 408), v14 - (*(_DWORD *)(a1 + 600) == 0), *(_DWORD *)(a1 + 600), v7, v8, v9, v10, v11, v12);
  uint64_t v18 = qword_100101CC0;
  if (*(_DWORD *)(a1 + 520) == 1 && qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 4716)) {
    *(_WORD *)(a1 + 712) = 0x4000;
  }
  LOWORD(v19) = *(_WORD *)(a1 + 712);
  __int16 v20 = v19;
  *(_WORD *)(a1 + 714) = v19;
  if (*(__int16 *)(a1 + 544) < (__int16)v19) {
    __int16 v20 = *(_WORD *)(a1 + 544);
  }
  *(_WORD *)(a1 + 994) = v20;
  *(_WORD *)(a1 + 712) = 0x4000;
  *(_WORD *)(a1 + 558) = 0x4000;
  int v206 = (_DWORD *)(a1 + 436);
  if (v18)
  {
    if (*(_DWORD *)(v18 + 724))
    {
      uint64_t v21 = *(unsigned __int16 **)(a1 + 848);
      if (v21)
      {
        int v214 = v16;
        uint64_t v216 = v15;
        unsigned int v209 = v13;
        uint64_t v22 = *v21;
        int v23 = *(_DWORD *)(a1 + 672);
        uint64_t v24 = sub_100064238(*(void *)(a1 + 656), v23);
        unsigned int v25 = (__int16 *)(v24 + 4 * v22);
        uint64_t v212 = sub_100064250(*(void *)(a1 + 656), v23);
        int v26 = *v25 & 0x7FFF;
        uint64_t v27 = sub_100015A34(v17, v26);
        uint64_t v28 = *(unsigned __int8 *)(*(void *)(a1 + 848) + 10);
        uint64_t v29 = *(unsigned __int16 *)(v27 + 2 * v28);
        int v30 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v29);
        if (v30 == 0x4000) {
          LOWORD(v30) = sub_100015A48(v17, v29);
        }
        if (v26 && *(_DWORD *)(a1 + 528) - 1 > (int)v28)
        {
          uint64_t v31 = *(unsigned __int16 *)(v27 + 2 * v28 + 2);
          int v32 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v31);
          if (v32 == 0x4000) {
            LOWORD(v32) = sub_100015A48(v17, v31);
          }
          if ((__int16)(v32 + *(unsigned __int8 *)(v212 + v22)) < (__int16)v30) {
            LOWORD(v30) = v32 + *(unsigned __int8 *)(v212 + v22);
          }
          goto LABEL_33;
        }
        if ((*v25 & 0x80000000) == 0)
        {
          if (**(_WORD **)(a1 + 848))
          {
            uint64_t v33 = v24 + 4 * v22;
            uint64_t v34 = *(unsigned __int16 *)(v33 + 2);
            uint64_t v35 = (__int16 *)(v33 + 4);
            do
            {
              int v36 = *v35;
              v35 += 2;
            }
            while (v36 < 0);
            uint64_t v37 = (unsigned __int16)*(v35 - 1);
            uint64_t v13 = v209;
            int v16 = v214;
            uint64_t v15 = v216;
            if (v34 < v37)
            {
              int v38 = (_WORD *)(v24 + 4 * v34);
              uint64_t v39 = v37 - v34;
              uint64_t v40 = (unsigned __int8 *)(v212 + v34);
              do
              {
                uint64_t v43 = *(unsigned __int16 *)sub_100015A34(v17, *v38 & 0x7FFF);
                int v44 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v43);
                if (v44 == 0x4000) {
                  LOWORD(v44) = sub_100015A48(v17, v43);
                }
                __int16 v41 = *v40++;
                int v42 = (__int16)(*(_WORD *)(a1 + 564) + v44 + v41);
                if (v42 < (__int16)v30) {
                  LOWORD(v30) = v42;
                }
                v38 += 2;
                --v39;
              }
              while (v39);
            }
LABEL_34:
            uint64_t v19 = qword_100101CC0;
            if (qword_100101CC0)
            {
LABEL_35:
              *(_WORD *)(a1 + 558) = v30 + *(_WORD *)(v19 + 3040);
              LOWORD(v19) = *(_WORD *)(v19 + 3136);
LABEL_48:
              *(_WORD *)(a1 + 556) = v19 + v30;
              LOWORD(v19) = *(_WORD *)(a1 + 714);
              goto LABEL_49;
            }
LABEL_47:
            *(_WORD *)(a1 + 558) = v30;
            goto LABEL_48;
          }
LABEL_33:
          uint64_t v13 = v209;
          int v16 = v214;
          uint64_t v15 = v216;
          goto LABEL_34;
        }
        uint64_t v45 = *(void *)(a1 + 376);
        if (!qword_100101CC0) {
          goto LABEL_41;
        }
        if (*(_DWORD *)(qword_100101CC0 + 5360))
        {
          __int16 v46 = *(unsigned __int8 *)(a1 + 664);
          goto LABEL_42;
        }
        if (*(_DWORD *)(qword_100101CC0 + 1776))
        {
          __int16 v46 = 0;
        }
        else
        {
LABEL_41:
          unsigned int v47 = sub_1000BD964(*(void *)(a1 + 376), *(unsigned __int16 *)(v24 + 4 * v22 + 2), 0);
          __int16 v46 = sub_1000BDCD4(v45, 0, 0, v47);
        }
LABEL_42:
        uint64_t v48 = *(unsigned __int16 *)sub_100015A34(v17, 0);
        int v49 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v48);
        uint64_t v13 = v209;
        int v16 = v214;
        uint64_t v15 = v216;
        if (v49 == 0x4000) {
          LOWORD(v49) = sub_100015A48(v17, v48);
        }
        if ((__int16)(v49 + v46) < (__int16)v30) {
          LOWORD(v30) = v49 + v46;
        }
        uint64_t v19 = qword_100101CC0;
        if (qword_100101CC0) {
          goto LABEL_35;
        }
        goto LABEL_47;
      }
    }
  }
LABEL_49:
  *(void *)(a1 + 848) = 0;
  LODWORD(v19) = (__int16)v19;
  if (*(__int16 *)(*(void *)(a1 + 832) + 2) < (__int16)v19) {
    LODWORD(v19) = *(__int16 *)(*(void *)(a1 + 832) + 2);
  }
  int v50 = v19 + *(__int16 *)(a1 + 550);
  if (v50 >= 0x4000) {
    LOWORD(v50) = 0x4000;
  }
  *(_WORD *)(a1 + 992) = sub_1000541F4(a1, (__int16)v50);
  *(_DWORD *)(a1 + 568) += *(__int16 *)(a1 + 544);
  *(_DWORD *)(a1 + 544) = 1073758208;
  *(_WORD *)(a1 + 996) = 0x4000;
  if (*(_WORD *)(a1 + 994) == 0x4000)
  {
    uint64_t result = sub_100006C90(*(void *)(a1 + 384), (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)), v206);
    *(_DWORD *)(a1 + 568) = 0x40000000;
    *(_DWORD *)(a1 + 524) = 5;
    __int16 v14 = *(_WORD *)(a1 + 572);
    goto LABEL_55;
  }
  uint64_t v211 = (unsigned __int16 *)(a1 + 572);
  uint64_t v51 = *(void *)(a1 + 840);
  unint64_t v52 = v51 - 12;
  if ((int)v13 >= 1)
  {
    int v53 = 0;
    uint64_t v54 = (_WORD *)(v15 + 12 * v16);
    int v55 = v54 - 6;
    unsigned int v210 = v13;
LABEL_58:
    *(void *)(a1 + 1016) = sub_100064238(*(void *)(a1 + 656), v53);
    *(void *)(a1 + 1008) = sub_100064250(*(void *)(a1 + 656), v53);
    *(void *)(a1 + 680) = sub_100064244(*(void *)(a1 + 656), v53);
    *(_DWORD *)(a1 + 668) = v53;
    BOOL v213 = v55;
    unint64_t v215 = v52;
    if (!sub_10006425C(*(void *)(a1 + 656)))
    {
      int v64 = *(__int16 *)(a1 + 992);
      unsigned int v65 = *(_WORD **)(a1 + 1016);
      for (uint64_t i = v54 - 6; ; i -= 6)
      {
        uint64_t v69 = *i;
        int v70 = &v65[2 * v69];
        if ((*v70 & 0x80000000) == 0)
        {
          *(_WORD *)(a1 + 722) = v70[1];
          if ((*v70 & 0x7FFF) != 0)
          {
            uint64_t v67 = *(int *)(a1 + 528);
            int v68 = (__int16)(*(_WORD *)(a1 + 564) + i[v67]);
            if (v68 <= v64)
            {
              unsigned __int16 v71 = i[v67 + 2];
LABEL_87:
              *(_WORD *)(a1 + 718) = v71;
LABEL_88:
              int v222 = i;
              *(_WORD *)(a1 + 716) = v68;
              unsigned int v76 = &v65[2 * v69 + 2];
              do
              {
                int v77 = *v76;
                v76 += 2;
              }
              while (v77 < 0);
              LOWORD(v78) = *(v76 - 1) - 1;
              *(_WORD *)(a1 + 720) = v78;
              uint64_t v78 = (unsigned __int16)v78;
              unsigned int v79 = *v55;
              if ((unsigned __int16)v78 <= v79) {
                goto LABEL_188;
              }
LABEL_191:
              int v134 = (__int16)(*(_WORD *)(a1 + 716) + *(unsigned __int8 *)(*(void *)(a1 + 1008) + v78));
              if (v134 > *(__int16 *)(a1 + 992))
              {
LABEL_196:
                if (*(unsigned __int16 *)(a1 + 722) < v78) {
                  goto LABEL_184;
                }
              }
              else
              {
                if (v52 > (unint64_t)v55)
                {
                  int v218 = v53;
                  uint64_t v135 = v13;
                  uint64_t v136 = v54;
                  int v137 = v222;
                  uint64_t v138 = *(void *)(a1 + 384);
                  __int16 v139 = *(_WORD *)(*(void *)(a1 + 1016) + 4 * v78);
                  *(_WORD *)unint64_t v52 = v78;
                  *(_WORD *)(v52 + 4) = 0x4000;
                  uint64_t v140 = *(unsigned __int16 *)sub_100015A34(v138, v139 & 0x7FFF);
                  int v141 = *(unsigned __int16 *)(*(void *)(v138 + 1792) + 2 * v140);
                  if (v141 == 0x4000) {
                    LOWORD(v141) = sub_100015A48(v138, v140);
                  }
                  *(_WORD *)(v52 + 2) = v141 + v134 - *(_WORD *)(a1 + 994);
                  *(unsigned char *)(v52 + 10) = 0;
                  *(unsigned char *)(v52 + 11) = *((unsigned char *)v137 + 11) + 1;
                  *(_WORD *)(v52 + 6) = *(_WORD *)(a1 + 718);
                  v52 -= 12;
                  LODWORD(v78) = *(unsigned __int16 *)(a1 + 720);
                  uint64_t v54 = v136;
                  uint64_t v13 = v135;
                  int v53 = v218;
                  goto LABEL_196;
                }
                *(_DWORD *)(a1 + 524) = 3;
                if (*(unsigned __int16 *)(a1 + 722) < v78)
                {
LABEL_184:
                  __int16 v132 = v78 - 1;
LABEL_185:
                  *(_WORD *)(a1 + 720) = v132;
                  goto LABEL_186;
                }
              }
              __int16 v142 = v222;
              uint64_t v143 = *(void *)(a1 + 1016);
              while (1)
              {
                while (1)
                {
                  do
                  {
                    unsigned int v147 = (unsigned __int16)*(v142 - 6);
                    v142 -= 6;
                    uint64_t v146 = v147;
                    uint64_t v148 = (__int16 *)(v143 + 4 * v147);
                  }
                  while (*v148 < 0);
                  *(_WORD *)(a1 + 722) = v148[1];
                  if ((*v148 & 0x7FFF) == 0) {
                    break;
                  }
                  uint64_t v144 = *(int *)(a1 + 528);
                  int v145 = (__int16)(*(_WORD *)(a1 + 564) + v142[v144]);
                  if (v145 <= *(__int16 *)(a1 + 992))
                  {
                    __int16 v149 = v142[v144 + 2];
LABEL_208:
                    *(_WORD *)(a1 + 718) = v149;
LABEL_209:
                    int v222 = v142;
                    *(_WORD *)(a1 + 716) = v145;
                    int v150 = (__int16 *)(v143 + 4 * v146 + 4);
                    do
                    {
                      int v151 = *v150;
                      v150 += 2;
                    }
                    while (v151 < 0);
                    __int16 v132 = *(v150 - 1) - 1;
                    goto LABEL_185;
                  }
                }
                int v145 = (__int16)v142[1];
                if (!*v142) {
                  break;
                }
                if (v145 <= *(__int16 *)(a1 + 992))
                {
                  __int16 v149 = v142[3];
                  goto LABEL_208;
                }
              }
              if (v145 >= *(__int16 *)(a1 + 714)) {
                LOWORD(v145) = *(_WORD *)(a1 + 714);
              }
              int v145 = (__int16)(v145 + *(_WORD *)(a1 + 562) + *(_WORD *)(a1 + 564));
              if (v145 <= *(__int16 *)(a1 + 992) && *v211)
              {
                *(_WORD *)(a1 + 718) = *v211;
                *(_WORD *)(a1 + 722) = 0;
                goto LABEL_209;
              }
              *(_WORD *)(a1 + 720) = 0;
              int v222 = v142;
              while (1)
              {
LABEL_186:
                if (*(_DWORD *)(a1 + 524) == 3) {
                  goto LABEL_182;
                }
                uint64_t v78 = *(unsigned __int16 *)(a1 + 720);
                unsigned int v79 = *v55;
                if (v78 > v79) {
                  goto LABEL_191;
                }
                while (1)
                {
LABEL_188:
                  if (!(_WORD)v79)
                  {
                    int v152 = (__int16)v55[1];
                    if (v152 >= *(__int16 *)(a1 + 714)) {
                      int v152 = *(__int16 *)(a1 + 714);
                    }
                    if (v152 <= *(__int16 *)(a1 + 992))
                    {
                      uint64_t v154 = *(void *)(a1 + 384);
                      uint64_t v155 = (unsigned __int16 *)sub_100015A34(v154, *v65 & 0x7FFF);
                      *(_WORD *)unint64_t v52 = 0;
                      int v156 = (__int16)v55[1];
                      int v157 = (__int16)(*(_WORD *)(a1 + 714) + **(unsigned __int8 **)(a1 + 1008));
                      BOOL v158 = v157 <= v156;
                      if (v157 >= v156) {
                        int v159 = (__int16)v55[1];
                      }
                      else {
                        int v159 = (__int16)(*(_WORD *)(a1 + 714) + **(unsigned __int8 **)(a1 + 1008));
                      }
                      uint64_t v160 = (__int16 *)(a1 + 572);
                      if (!v158) {
                        uint64_t v160 = (__int16 *)(v55 + 3);
                      }
                      if (v159 <= *(__int16 *)(a1 + 992))
                      {
                        __int16 v161 = *v160;
                        uint64_t v162 = *v155;
                        int v163 = *(unsigned __int16 *)(*(void *)(v154 + 1792) + 2 * v162);
                        if (v163 == 0x4000) {
                          LOWORD(v163) = sub_100015A48(v154, v162);
                        }
                        __int16 v153 = v163 + v159 - *(_WORD *)(a1 + 994);
                        *(_WORD *)(v52 + 6) = v161;
                      }
                      else
                      {
                        __int16 v153 = 0x4000;
                      }
                    }
                    else
                    {
                      *(_WORD *)unint64_t v52 = 0;
                      __int16 v153 = 0x4000;
                    }
                    *(_WORD *)(v52 + 2) = v153;
                    *(_WORD *)(v52 + 10) = 0;
                    v55 -= 6;
                    v52 -= 12;
                    uint64_t v54 = v222;
                    goto LABEL_233;
                  }
                  if ((__int16)v55[*((unsigned __int8 *)v55 + 10) + 1] <= v64) {
                    break;
                  }
                  unsigned int v133 = *(v55 - 6);
                  v55 -= 6;
                  LOWORD(v79) = v133;
                  if (v78 > v133) {
                    goto LABEL_191;
                  }
                }
                sub_1000574E0(a1, v55, v52, &v222, v65[2 * (unsigned __int16)v79]);
                v55 -= 6;
                v52 -= 12;
              }
            }
          }
          else
          {
            int v68 = (__int16)i[1];
            if (!*i)
            {
              if (v68 >= *(__int16 *)(a1 + 714)) {
                LOWORD(v68) = *(_WORD *)(a1 + 714);
              }
              int v68 = (__int16)(v68 + *(_WORD *)(a1 + 562) + *(_WORD *)(a1 + 564));
              if (v68 > v64 || !*v211)
              {
                *(_WORD *)(a1 + 720) = 0;
                int v222 = i;
                uint64_t v78 = 0;
                LOWORD(v79) = *v55;
                goto LABEL_188;
              }
              *(_WORD *)(a1 + 718) = *v211;
              *(_WORD *)(a1 + 722) = 0;
              goto LABEL_88;
            }
            if (v68 <= v64)
            {
              unsigned __int16 v71 = i[3];
              goto LABEL_87;
            }
          }
        }
      }
    }
    int v221 = 0;
    uint64_t v220 = 0;
    int v56 = *(__int16 *)(a1 + 992);
    unsigned int v57 = *(_WORD **)(a1 + 1016);
    unsigned int v58 = v54 - 6;
    uint64_t v208 = *(void *)(a1 + 680);
    while (1)
    {
      uint64_t v61 = *v58;
      unsigned int v62 = &v57[2 * v61];
      if ((*v62 & 0x80000000) == 0)
      {
        *(_WORD *)(a1 + 722) = v62[1];
        if ((*v62 & 0x7FFF) != 0)
        {
          uint64_t v59 = *(int *)(a1 + 528);
          int v60 = (__int16)(*(_WORD *)(a1 + 564) + v58[v59]);
          if (v60 <= v56)
          {
            unsigned __int16 v63 = v58[v59 + 2];
            goto LABEL_76;
          }
        }
        else
        {
          int v60 = (__int16)v58[1];
          if (!*v58)
          {
            if (v60 >= *(__int16 *)(a1 + 714)) {
              LOWORD(v60) = *(_WORD *)(a1 + 714);
            }
            int v60 = (__int16)(v60 + *(_WORD *)(a1 + 562) + *(_WORD *)(a1 + 564));
            if (v60 > v56 || !*v211)
            {
              *(_WORD *)(a1 + 720) = 0;
              uint64_t v219 = v58;
              uint64_t v74 = 0;
              LOWORD(v75) = *v55;
              goto LABEL_97;
            }
            *(_WORD *)(a1 + 718) = *v211;
            *(_WORD *)(a1 + 722) = 0;
LABEL_77:
            uint64_t v219 = v58;
            *(_WORD *)(a1 + 716) = v60;
            uint64_t v72 = &v57[2 * v61 + 2];
            do
            {
              int v73 = *v72;
              v72 += 2;
            }
            while (v73 < 0);
            LOWORD(v74) = *(v72 - 1) - 1;
            *(_WORD *)(a1 + 720) = v74;
            uint64_t v74 = (unsigned __int16)v74;
            unsigned int v75 = *v55;
            if ((unsigned __int16)v74 > v75) {
              goto LABEL_100;
            }
            while (1)
            {
LABEL_97:
              if (!(_WORD)v75)
              {
                int v120 = (__int16)v55[1];
                if (v120 >= *(__int16 *)(a1 + 714)) {
                  int v120 = *(__int16 *)(a1 + 714);
                }
                if (v120 <= *(__int16 *)(a1 + 992))
                {
                  uint64_t v122 = *(void *)(a1 + 384);
                  int v123 = (unsigned __int16 *)sub_100015A34(v122, *v57 & 0x7FFF);
                  *(_WORD *)unint64_t v52 = 0;
                  int v124 = (__int16)v55[1];
                  int v125 = (__int16)(*(_WORD *)(a1 + 714) + **(unsigned __int8 **)(a1 + 1008));
                  BOOL v126 = v125 <= v124;
                  if (v125 >= v124) {
                    int v127 = (__int16)v55[1];
                  }
                  else {
                    int v127 = (__int16)(*(_WORD *)(a1 + 714) + **(unsigned __int8 **)(a1 + 1008));
                  }
                  uint64_t v128 = (__int16 *)(a1 + 572);
                  if (!v126) {
                    uint64_t v128 = (__int16 *)(v55 + 3);
                  }
                  uint64_t v13 = v210;
                  if (v127 <= *(__int16 *)(a1 + 992))
                  {
                    __int16 v129 = *v128;
                    uint64_t v130 = *v123;
                    int v131 = *(unsigned __int16 *)(*(void *)(v122 + 1792) + 2 * v130);
                    if (v131 == 0x4000) {
                      LOWORD(v131) = sub_100015A48(v122, v130);
                    }
                    __int16 v121 = v131 + v127 - *(_WORD *)(a1 + 994);
                    *(_WORD *)(v52 + 6) = v129;
                  }
                  else
                  {
                    __int16 v121 = 0x4000;
                  }
                }
                else
                {
                  *(_WORD *)unint64_t v52 = 0;
                  __int16 v121 = 0x4000;
                  uint64_t v13 = v210;
                }
                *(_WORD *)(v52 + 2) = v121;
                *(_WORD *)(v52 + 10) = 0;
                v55 -= 6;
                v52 -= 12;
                uint64_t v54 = v219;
                goto LABEL_233;
              }
              if ((__int16)v55[*((unsigned __int8 *)v55 + 10) + 1] <= v56) {
                break;
              }
              unsigned int v81 = *(v55 - 6);
              v55 -= 6;
              LOWORD(v75) = v81;
              if (v74 > v81) {
                goto LABEL_100;
              }
            }
            uint64_t v97 = &v57[2 * (unsigned __int16)v75];
            if (qword_100101CC0 && *(void *)(qword_100101CC0 + 3688) > (uint64_t)*((unsigned __int8 *)v55 + 11)
              || (*v97 & 0x80000000) == 0)
            {
LABEL_116:
              sub_1000574E0(a1, v55, v52, &v219, *v97);
              v55 -= 6;
              v52 -= 12;
              goto LABEL_95;
            }
            sub_10009D254(*(void *)(a1 + 728), (unsigned __int16)v57[2 * (unsigned __int16)v75 + 1], 0, &v220, &v221);
            uint64_t v100 = *((unsigned __int8 *)v55 + 11);
            uint64_t v207 = v97;
            if (v221 <= (int)v100)
            {
              if (*(_DWORD *)(v208 + 4 * v100) <= (int)*v55) {
                goto LABEL_116;
              }
              int v217 = v220;
              int v222 = v219;
              int v101 = *v55;
              uint64_t v108 = *((unsigned __int8 *)v55 + 11);
              if (*(_DWORD *)(*(void *)(a1 + 680) + 4 * v108) <= v101) {
                goto LABEL_138;
              }
LABEL_142:
              sub_1000577A4(a1, v55, v52, v217[v108 - 1]);
              v52 -= 12;
              uint64_t v109 = v55 - 6;
              if (*(v55 - 6) != v101)
              {
LABEL_139:
                int v55 = v109;
                goto LABEL_160;
              }
            }
            else
            {
              int v217 = v220;
              int v222 = v219;
              int v101 = *v55;
              int v102 = (__int16)(*(_WORD *)(a1 + 564) + v55[*(int *)(a1 + 528)]);
              if (v102 <= *(__int16 *)(a1 + 992))
              {
                if (v52 <= (unint64_t)v55)
                {
                  *(_DWORD *)(a1 + 524) = 3;
                }
                else
                {
                  uint64_t v103 = v54;
                  int v104 = v220[v100];
                  uint64_t v105 = *(void *)(a1 + 384);
                  *(_WORD *)unint64_t v52 = v101;
                  *(_WORD *)(v52 + 4) = 0x4000;
                  uint64_t v106 = *(unsigned __int16 *)sub_100015A34(v105, v104);
                  int v107 = *(unsigned __int16 *)(*(void *)(v105 + 1792) + 2 * v106);
                  if (v107 == 0x4000) {
                    LOWORD(v107) = sub_100015A48(v105, v106);
                  }
                  *(_WORD *)(v52 + 2) = v107 + v102 - *(_WORD *)(a1 + 994);
                  *(unsigned char *)(v52 + 10) = 0;
                  *(unsigned char *)(v52 + 11) = *((unsigned char *)v55 + 11) + 1;
                  *(_WORD *)(v52 + 6) = *(_WORD *)(a1 + 718);
                  v52 -= 12;
                  uint64_t v54 = v103;
                }
              }
              uint64_t v97 = v207;
              uint64_t v108 = *((unsigned __int8 *)v55 + 11);
              if (*(_DWORD *)(*(void *)(a1 + 680) + 4 * v108) > (int)*v55) {
                goto LABEL_142;
              }
LABEL_138:
              sub_1000574E0(a1, v55, v52, &v222, *v97);
              v52 -= 12;
              uint64_t v109 = v55 - 6;
              if (*(v55 - 6) != v101) {
                goto LABEL_139;
              }
            }
            int64x2_t v205 = v54;
            while (2)
            {
              unsigned int v112 = v55 - 6;
              uint64_t v113 = *((unsigned __int8 *)v55 - 1);
              if ((int)v113 + 1 >= *((unsigned __int8 *)v55 + 11)
                || (int v114 = (__int16)(*(_WORD *)(a1 + 564) + v55[*(int *)(a1 + 528) - 6]), v114 > *(__int16 *)(a1 + 992)))
              {
LABEL_155:
                uint64_t v119 = *((unsigned __int8 *)v55 - 1);
                if (*(_DWORD *)(*(void *)(a1 + 680) + 4 * v119) > (int)*(v55 - 6)) {
                  goto LABEL_144;
                }
              }
              else
              {
                if (v52 > (unint64_t)v112)
                {
                  int v115 = v217[v113];
                  uint64_t v116 = *(void *)(a1 + 384);
                  *(_WORD *)unint64_t v52 = v101;
                  *(_WORD *)(v52 + 4) = 0x4000;
                  uint64_t v117 = *(unsigned __int16 *)sub_100015A34(v116, v115);
                  int v118 = *(unsigned __int16 *)(*(void *)(v116 + 1792) + 2 * v117);
                  if (v118 == 0x4000) {
                    LOWORD(v118) = sub_100015A48(v116, v117);
                  }
                  *(_WORD *)(v52 + 2) = v118 + v114 - *(_WORD *)(a1 + 994);
                  *(unsigned char *)(v52 + 10) = 0;
                  *(unsigned char *)(v52 + 11) = *((unsigned char *)v55 - 1) + 1;
                  *(_WORD *)(v52 + 6) = *(_WORD *)(a1 + 718);
                  v52 -= 12;
                  uint64_t v97 = v207;
                  goto LABEL_155;
                }
                *(_DWORD *)(a1 + 524) = 3;
                uint64_t v119 = *((unsigned __int8 *)v55 - 1);
                if (*(_DWORD *)(*(void *)(a1 + 680) + 4 * v119) > (int)*(v55 - 6))
                {
LABEL_144:
                  sub_1000577A4(a1, v55 - 6, v52, v217[v119 - 1]);
                  goto LABEL_145;
                }
              }
              sub_1000574E0(a1, v55 - 6, v52, &v222, *v97);
LABEL_145:
              if (*(__int16 *)(v52 + 2 * *(unsigned __int8 *)(v52 + 10) + 2) >= 0x4000) {
                uint64_t v110 = 0;
              }
              else {
                uint64_t v110 = -1;
              }
              v52 += 12 * v110;
              int v111 = *(v55 - 12);
              v55 -= 6;
              if (v111 == v101) {
                continue;
              }
              break;
            }
            int v55 = v112 - 6;
            uint64_t v54 = v205;
LABEL_160:
            uint64_t v219 = v222;
LABEL_95:
            while (2)
            {
              if (*(_DWORD *)(a1 + 524) != 3)
              {
                uint64_t v74 = *(unsigned __int16 *)(a1 + 720);
                unsigned int v75 = *v55;
                if (v74 <= v75) {
                  goto LABEL_97;
                }
LABEL_100:
                int v82 = (__int16)(*(_WORD *)(a1 + 716) + *(unsigned __int8 *)(*(void *)(a1 + 1008) + v74));
                if (v82 > *(__int16 *)(a1 + 992))
                {
LABEL_105:
                  if (*(unsigned __int16 *)(a1 + 722) < v74) {
                    goto LABEL_93;
                  }
                }
                else
                {
                  if (v52 > (unint64_t)v55)
                  {
                    unsigned int v83 = v54;
                    unsigned int v84 = v219;
                    uint64_t v85 = *(void *)(a1 + 384);
                    __int16 v86 = *(_WORD *)(*(void *)(a1 + 1016) + 4 * v74);
                    *(_WORD *)unint64_t v52 = v74;
                    *(_WORD *)(v52 + 4) = 0x4000;
                    uint64_t v87 = *(unsigned __int16 *)sub_100015A34(v85, v86 & 0x7FFF);
                    int v88 = *(unsigned __int16 *)(*(void *)(v85 + 1792) + 2 * v87);
                    if (v88 == 0x4000) {
                      LOWORD(v88) = sub_100015A48(v85, v87);
                    }
                    *(_WORD *)(v52 + 2) = v88 + v82 - *(_WORD *)(a1 + 994);
                    *(unsigned char *)(v52 + 10) = 0;
                    *(unsigned char *)(v52 + 11) = *((unsigned char *)v84 + 11) + 1;
                    *(_WORD *)(v52 + 6) = *(_WORD *)(a1 + 718);
                    v52 -= 12;
                    LODWORD(v74) = *(unsigned __int16 *)(a1 + 720);
                    uint64_t v54 = v83;
                    goto LABEL_105;
                  }
                  *(_DWORD *)(a1 + 524) = 3;
                  if (*(unsigned __int16 *)(a1 + 722) < v74)
                  {
LABEL_93:
                    __int16 v80 = v74 - 1;
                    goto LABEL_94;
                  }
                }
                uint64_t v89 = v219;
                uint64_t v90 = *(void *)(a1 + 1016);
                do
                {
                  while (1)
                  {
                    do
                    {
                      unsigned int v94 = (unsigned __int16)*(v89 - 6);
                      v89 -= 6;
                      uint64_t v93 = v94;
                      int v95 = (__int16 *)(v90 + 4 * v94);
                    }
                    while (*v95 < 0);
                    *(_WORD *)(a1 + 722) = v95[1];
                    if ((*v95 & 0x7FFF) != 0) {
                      break;
                    }
                    int v92 = (__int16)v89[1];
                    if (!*v89)
                    {
                      if (v92 >= *(__int16 *)(a1 + 714)) {
                        LOWORD(v92) = *(_WORD *)(a1 + 714);
                      }
                      int v92 = (__int16)(v92 + *(_WORD *)(a1 + 562) + *(_WORD *)(a1 + 564));
                      if (v92 > *(__int16 *)(a1 + 992) || !*v211)
                      {
                        *(_WORD *)(a1 + 720) = 0;
                        uint64_t v219 = v89;
                        goto LABEL_95;
                      }
                      *(_WORD *)(a1 + 718) = *v211;
                      *(_WORD *)(a1 + 722) = 0;
                      goto LABEL_121;
                    }
                    if (v92 <= *(__int16 *)(a1 + 992))
                    {
                      __int16 v96 = v89[3];
                      goto LABEL_120;
                    }
                  }
                  uint64_t v91 = *(int *)(a1 + 528);
                  int v92 = (__int16)(*(_WORD *)(a1 + 564) + v89[v91]);
                }
                while (v92 > *(__int16 *)(a1 + 992));
                __int16 v96 = v89[v91 + 2];
LABEL_120:
                *(_WORD *)(a1 + 718) = v96;
LABEL_121:
                uint64_t v219 = v89;
                *(_WORD *)(a1 + 716) = v92;
                int v98 = (__int16 *)(v90 + 4 * v93 + 4);
                do
                {
                  int v99 = *v98;
                  v98 += 2;
                }
                while (v99 < 0);
                __int16 v80 = *(v98 - 1) - 1;
LABEL_94:
                *(_WORD *)(a1 + 720) = v80;
                continue;
              }
              break;
            }
            uint64_t v13 = v210;
LABEL_182:
            int v55 = v213;
            unint64_t v52 = v215;
LABEL_233:
            if (*(_DWORD *)(a1 + 524) != 3)
            {
              if (++v53 == v13)
              {
                uint64_t v51 = *(void *)(a1 + 840);
                break;
              }
              goto LABEL_58;
            }
            return sub_100006C90(*(void *)(a1 + 384), (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)), v206);
          }
          if (v60 <= v56)
          {
            unsigned __int16 v63 = v58[3];
LABEL_76:
            *(_WORD *)(a1 + 718) = v63;
            goto LABEL_77;
          }
        }
      }
      v58 -= 6;
    }
  }
  unsigned int v164 = (const void *)(v52 + 12);
  uint64_t v165 = v51 - (v52 + 12);
  unint64_t v166 = 0xAAAAAAAAAAAAAAABLL * (v165 >> 2);
  sub_100064220(*(void *)(a1 + 656));
  if (*(_DWORD *)(a1 + 880) <= (int)v166) {
    goto LABEL_258;
  }
  unint64_t v167 = v52;
  unint64_t v168 = *(void *)(a1 + 840);
  uint64_t v169 = *(int **)(a1 + 736);
  uint64_t v170 = (void *)*((void *)v169 + 1);
  uint64_t v171 = *v169;
  bzero(v170, 2 * v171);
  int v172 = sub_100064220(*(void *)(a1 + 656));
  if ((int)v166 < 1)
  {
    __int16 v174 = 0x4000;
  }
  else
  {
    unint64_t v173 = v168 - 0xFFFFFFFC00000004 * (v165 >> 2);
    __int16 v174 = 0x4000;
    do
    {
      int v175 = *(_WORD *)v173 == 0;
      uint64_t v176 = *(__int16 *)(v173 + 2 * *(unsigned __int8 *)(v173 + 10) + 2);
      if ((int)v171 > (int)v176) {
        ++*((_WORD *)v170 + v176);
      }
      v172 -= v175;
      if ((int)v176 < v174 && *(_WORD *)v173)
      {
        *(void *)(a1 + 848) = v173;
        *(_DWORD *)(a1 + 672) = v172;
        __int16 v174 = v176;
      }
      v173 += 12;
    }
    while (v173 < v168);
  }
  *(_WORD *)(a1 + 546) = v174;
  __int16 v177 = *(_WORD *)(v167 + 18);
  int v178 = *(__int16 *)(v167 + 14);
  int v179 = *(__int16 *)(a1 + 996);
  if (v178 < v179)
  {
    *(_WORD *)(a1 + 996) = *(_WORD *)(v167 + 14);
    int v179 = v178;
  }
  if (v179 < v174)
  {
    *(void *)(a1 + 848) = v164;
    *(_DWORD *)(a1 + 672) = 0;
    __int16 v174 = v179;
  }
  *(_WORD *)(a1 + 544) = v174;
  if (v174 >= *(__int16 *)(a1 + 712)) {
    __int16 v174 = *(_WORD *)(a1 + 712);
  }
  if (v178 < (__int16)(*(_WORD *)(a1 + 554) + v174))
  {
    LODWORD(v222) = 0;
    unsigned __int16 v180 = *v211;
    if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 3224) && *(_DWORD *)(qword_100101CC0 + 3024)) {
      ++v180;
    }
    sub_1000D3780(*(void *)(a1 + 472), v177, v180, 65534, *(_DWORD *)(a1 + 568) + v178, &v222);
    if (v222)
    {
LABEL_258:
      *(_DWORD *)(a1 + 524) = 3;
      return sub_100006C90(*(void *)(a1 + 384), (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)), v206);
    }
  }
  *(_DWORD *)(a1 + 532) = v166;
  if (*(__int16 *)(a1 + 574) == -1 && *(_WORD *)(a1 + 996) == 0x4000) {
    *(_WORD *)(a1 + 574) = *(_WORD *)(a1 + 572);
  }
  int v181 = *(__int16 *)(a1 + 544);
  if (v181 >= *(__int16 *)(a1 + 712)) {
    LOWORD(v181) = *(_WORD *)(a1 + 712);
  }
  __int16 v182 = *(_WORD *)(a1 + 552) + v181;
  int v183 = sub_10006425C(*(void *)(a1 + 656));
  uint64_t v184 = *(void *)(a1 + 840);
  uint64_t v185 = sub_100064238(*(void *)(a1 + 656), 0);
  int v186 = sub_100064220(*(void *)(a1 + 656));
  if (v183)
  {
    for (int j = 0; ; v185 = sub_100064238(*(void *)(a1 + 656), j))
    {
      while (1)
      {
        unsigned int v189 = *(unsigned __int16 *)(v184 - 12);
        v184 -= 12;
        uint64_t v188 = v189;
        if (!v189) {
          break;
        }
        int v190 = (__int16 *)(v185 + 4 * v188);
        if (*v190 < 0
          && sub_10009DA20(*(void *)(a1 + 728), (unsigned __int16)v190[1]) == *(unsigned __int8 *)(v184 + 11))
        {
          sub_100057958(a1, (uint64_t)v190, v184, v182);
        }
      }
      if (++j == v186) {
        break;
      }
    }
  }
  else
  {
    unsigned int v193 = *(unsigned __int16 *)(v184 - 12);
    uint64_t v192 = v184 - 12;
    uint64_t v191 = v193;
    if (v193) {
      goto LABEL_277;
    }
    while (++v183 != v186)
    {
      uint64_t v185 = sub_100064238(*(void *)(a1 + 656), v183);
      unsigned int v196 = *(unsigned __int16 *)(v192 - 12);
      v192 -= 12;
      uint64_t v191 = v196;
      if (v196)
      {
        do
        {
LABEL_277:
          uint64_t v195 = (__int16 *)(v185 + 4 * v191);
          if (*v195 < 0) {
            sub_100057958(a1, (uint64_t)v195, v192, v182);
          }
          unsigned int v194 = *(unsigned __int16 *)(v192 - 12);
          v192 -= 12;
          uint64_t v191 = v194;
        }
        while (v194);
      }
    }
  }
  j__memmove(*(void **)(a1 + 832), v164, (int)v165);
  *(void *)(a1 + 848) += 12 * ((int)v166 - (uint64_t)*(int *)(a1 + 880));
  if (*(unsigned char *)(a1 + 424)) {
    sub_10003A240(a1, v197, v198, v199, v200, v201, v202, v203);
  }
  sub_100006C90(*(void *)(a1 + 384), (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)), v206);
  ++*(_WORD *)(a1 + 572);
  uint64_t result = sub_1000B44AC((unsigned int *)(a1 + 756), *(unsigned __int16 *)(a1 + 996) == *(unsigned __int16 *)(a1 + 544));
  if (*(_DWORD *)(a1 + 524) != 3)
  {
    uint64_t result = sub_1000543B0((_DWORD *)a1);
    if (result) {
      int v204 = 2;
    }
    else {
      int v204 = 1;
    }
    *(_DWORD *)(a1 + 524) = v204;
  }
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1064)) {
    return sub_100039528(a1);
  }
  return result;
}

uint64_t sub_1000573F0(uint64_t result, _WORD **a2)
{
  unsigned int v2 = *a2;
  uint64_t v3 = *(void *)(result + 1016);
  while (1)
  {
    while (1)
    {
      do
      {
        unsigned int v7 = (unsigned __int16)*(v2 - 6);
        v2 -= 6;
        uint64_t v6 = v7;
        double v8 = (__int16 *)(v3 + 4 * v7);
      }
      while (*v8 < 0);
      *(_WORD *)(result + 722) = v8[1];
      if ((*v8 & 0x7FFF) == 0) {
        break;
      }
      uint64_t v4 = *(int *)(result + 528);
      int v5 = (__int16)(*(_WORD *)(result + 564) + v2[v4]);
      if (v5 <= *(__int16 *)(result + 992))
      {
        __int16 v9 = v2[v4 + 2];
        goto LABEL_9;
      }
    }
    int v5 = (__int16)v2[1];
    if (!*v2) {
      break;
    }
    if (v5 <= *(__int16 *)(result + 992))
    {
      __int16 v9 = v2[3];
LABEL_9:
      *(_WORD *)(result + 718) = v9;
      goto LABEL_10;
    }
  }
  if (v5 >= *(__int16 *)(result + 714)) {
    LOWORD(v5) = *(_WORD *)(result + 714);
  }
  int v5 = (__int16)(v5 + *(_WORD *)(result + 562) + *(_WORD *)(result + 564));
  if (v5 > *(__int16 *)(result + 992) || !*(_WORD *)(result + 572))
  {
    *(_WORD *)(result + 720) = 0;
    *a2 = v2;
    return result;
  }
  *(_WORD *)(result + 718) = *(_WORD *)(result + 572);
  *(_WORD *)(result + 722) = 0;
LABEL_10:
  *a2 = v2;
  *(_WORD *)(result + 716) = v5;
  int32x4_t v10 = (__int16 *)(v3 + 4 * v6 + 4);
  do
  {
    int v11 = *v10;
    v10 += 2;
  }
  while (v11 < 0);
  *(_WORD *)(result + 720) = *(v10 - 1) - 1;
  return result;
}

uint64_t sub_1000574E0(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4, __int16 a5)
{
  int v9 = *(__int16 *)(a1 + 992);
  __int16 v43 = *(_WORD *)(a1 + 994);
  uint64_t v10 = *(void *)(a1 + 384);
  if ((a5 & 0x7FFF) != 0)
  {
    uint64_t result = sub_100015A34(v10, a5 & 0x7FFF);
    int8x16_t v12 = (unsigned __int16 *)result;
    uint64_t v13 = *a2;
    *(_WORD *)a3 = v13;
    __int16 v14 = *(unsigned __int8 *)(*(void *)(a1 + 1008) + v13);
    int v15 = (__int16)(a2[1] + v14);
    int v16 = (__int16)a2[2];
    BOOL v17 = v16 < v15;
    if (v16 >= v15) {
      int v18 = (__int16)(a2[1] + v14);
    }
    else {
      int v18 = (__int16)a2[2];
    }
    uint64_t v19 = 3;
    if (v17) {
      uint64_t v19 = 4;
    }
    if (v18 <= v9)
    {
      unsigned __int16 v31 = a2[v19];
      uint64_t v32 = *(unsigned __int16 *)(result + 2);
      uint64_t result = *(unsigned __int16 *)(*(void *)(v10 + 1792) + 2 * v32);
      if (result == 0x4000) {
        uint64_t result = sub_100015A48(v10, v32);
      }
      int v33 = (__int16)(result + v18 - v43);
      *(_WORD *)(a3 + 4) = result + v18 - v43;
      *(_WORD *)(a3 + 8) = v31;
      BOOL v20 = v33 < 0x4000;
      if (v33 >= 0x4000) {
        __int16 v21 = 0x4000;
      }
      else {
        __int16 v21 = result + v18 - v43;
      }
      if (*(unsigned __int16 *)(a1 + 720) != v13)
      {
LABEL_9:
        signed __int16 v22 = a2[1];
        unsigned __int16 v23 = a2[3];
        if (v9 >= v22) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
    }
    else
    {
      BOOL v20 = 0;
      __int16 v21 = 0x4000;
      *(_WORD *)(a3 + 4) = 0x4000;
      if (*(unsigned __int16 *)(a1 + 720) != v13) {
        goto LABEL_9;
      }
    }
    uint64_t v34 = a2 + 3;
    int v35 = (__int16)(*(_WORD *)(a1 + 716) + v14);
    int v36 = (__int16)a2[1];
    if (v36 >= v35) {
      signed __int16 v22 = *(_WORD *)(a1 + 716) + v14;
    }
    else {
      signed __int16 v22 = a2[1];
    }
    if (v36 >= v35) {
      uint64_t v34 = (unsigned __int16 *)(a1 + 718);
    }
    unsigned __int16 v23 = *v34;
    if (*(unsigned __int16 *)(a1 + 722) >= v13)
    {
      uint64_t result = sub_1000573F0(a1, a4);
      if (v9 >= v22)
      {
LABEL_39:
        uint64_t result = *(void *)(a1 + 384);
        uint64_t v37 = *v12;
        int v38 = *(unsigned __int16 *)(*(void *)(result + 1792) + 2 * v37);
        if (v38 == 0x4000)
        {
          uint64_t result = sub_100015A48(result, v37);
          LOWORD(v38) = result;
        }
        __int16 v39 = v38 + v22 - v43;
        *(_WORD *)(a3 + 2) = v39;
        *(_WORD *)(a3 + 6) = v23;
        if (v39 < v21) {
          BOOL v20 = 0;
        }
        goto LABEL_48;
      }
    }
    else
    {
      *(_WORD *)(a1 + 720) = v13 - 1;
      if (v9 >= v22) {
        goto LABEL_39;
      }
    }
LABEL_38:
    *(_WORD *)(a3 + 2) = 0x4000;
    goto LABEL_48;
  }
  uint64_t result = sub_100015A34(*(void *)(a1 + 384), 0);
  uint64_t v24 = (unsigned __int16 *)result;
  uint64_t v25 = *a2;
  *(_WORD *)a3 = v25;
  if (*(unsigned __int16 *)(a1 + 720) == v25)
  {
    int v26 = (__int16)(*(_WORD *)(a1 + 716) + *(unsigned __int8 *)(*(void *)(a1 + 1008) + v25));
    int v27 = (__int16)a2[1];
    if (v27 >= v26) {
      signed __int16 v28 = *(_WORD *)(a1 + 716) + *(unsigned __int8 *)(*(void *)(a1 + 1008) + v25);
    }
    else {
      signed __int16 v28 = a2[1];
    }
    if (v27 >= v26) {
      uint64_t v29 = (unsigned __int16 *)(a1 + 718);
    }
    else {
      uint64_t v29 = a2 + 3;
    }
    unsigned __int16 v30 = *v29;
    if (*(unsigned __int16 *)(a1 + 722) < v25)
    {
      *(_WORD *)(a1 + 720) = v25 - 1;
      if (v9 >= v28) {
        goto LABEL_45;
      }
LABEL_36:
      BOOL v20 = 0;
      goto LABEL_38;
    }
    uint64_t result = sub_1000573F0(a1, a4);
    if (v9 < v28) {
      goto LABEL_36;
    }
  }
  else
  {
    signed __int16 v28 = a2[1];
    unsigned __int16 v30 = a2[3];
    if (v9 < v28) {
      goto LABEL_36;
    }
  }
LABEL_45:
  uint64_t result = *(void *)(a1 + 384);
  uint64_t v40 = *v24;
  int v41 = *(unsigned __int16 *)(*(void *)(result + 1792) + 2 * v40);
  if (v41 == 0x4000)
  {
    uint64_t result = sub_100015A48(result, v40);
    LOWORD(v41) = result;
  }
  BOOL v20 = 0;
  *(_WORD *)(a3 + 2) = v28 - v43 + v41;
  *(_WORD *)(a3 + 6) = v30;
LABEL_48:
  *(unsigned char *)(a3 + 10) = v20;
  *(unsigned char *)(a3 + 11) = *((unsigned char *)a2 + 11);
  return result;
}

uint64_t sub_1000577A4(uint64_t a1, unsigned __int16 *a2, uint64_t a3, int a4)
{
  int v7 = *(__int16 *)(a1 + 992);
  __int16 v8 = *(_WORD *)(a1 + 994);
  uint64_t v9 = *(void *)(a1 + 384);
  uint64_t result = sub_100015A34(v9, a4);
  int v11 = (unsigned __int16 *)result;
  *(_WORD *)a3 = *a2;
  int v12 = (__int16)a2[1];
  int v13 = (__int16)a2[2];
  BOOL v14 = v13 < v12;
  if (v13 >= v12) {
    int v15 = (__int16)a2[1];
  }
  else {
    int v15 = (__int16)a2[2];
  }
  uint64_t v16 = 3;
  if (v14) {
    uint64_t v16 = 4;
  }
  if (v15 <= v7)
  {
    unsigned __int16 v20 = a2[v16];
    uint64_t v21 = *(unsigned __int16 *)(result + 2);
    uint64_t result = *(unsigned __int16 *)(*(void *)(v9 + 1792) + 2 * v21);
    if (result == 0x4000) {
      uint64_t result = sub_100015A48(v9, v21);
    }
    int v22 = (__int16)(result + v15 - v8);
    *(_WORD *)(a3 + 4) = result + v15 - v8;
    *(_WORD *)(a3 + 8) = v20;
    BOOL v17 = v22 < 0x4000;
    if (v22 >= 0x4000) {
      __int16 v18 = 0x4000;
    }
    else {
      __int16 v18 = v22;
    }
    uint64_t v19 = a2 + 3;
    if (*(a2 - 6) != *a2) {
      goto LABEL_27;
    }
  }
  else
  {
    BOOL v17 = 0;
    __int16 v18 = 0x4000;
    *(_WORD *)(a3 + 4) = 0x4000;
    uint64_t v19 = a2 + 3;
    if (*(a2 - 6) != *a2) {
      goto LABEL_27;
    }
  }
  if (*((unsigned __int8 *)a2 - 1) + 1 == *((unsigned __int8 *)a2 + 11))
  {
    unsigned __int16 v23 = &a2[*(int *)(a1 + 528)];
    int v24 = (__int16)(*(_WORD *)(a1 + 564) + *(v23 - 6));
    uint64_t v25 = v23 - 4;
    int v26 = (__int16)a2[1];
    if (v26 >= v24) {
      signed __int16 v27 = v24;
    }
    else {
      signed __int16 v27 = a2[1];
    }
    if (v26 >= v24) {
      uint64_t v19 = v25;
    }
    if (v7 < v27) {
      goto LABEL_28;
    }
    goto LABEL_22;
  }
LABEL_27:
  signed __int16 v27 = a2[1];
  if (v7 < v27)
  {
LABEL_28:
    *(_WORD *)(a3 + 2) = 0x4000;
    goto LABEL_29;
  }
LABEL_22:
  unsigned __int16 v28 = *v19;
  uint64_t v29 = *v11;
  uint64_t result = *(unsigned __int16 *)(*(void *)(v9 + 1792) + 2 * v29);
  if (result == 0x4000) {
    uint64_t result = sub_100015A48(v9, v29);
  }
  *(_WORD *)(a3 + 2) = result + v27 - v8;
  *(_WORD *)(a3 + 6) = v28;
  if ((__int16)(result + v27 - v8) < v18) {
    BOOL v17 = 0;
  }
LABEL_29:
  *(unsigned char *)(a3 + 10) = v17;
  *(unsigned char *)(a3 + 11) = *((unsigned char *)a2 + 11);
  return result;
}

uint64_t sub_100057958(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(__int16 *)(a3 + 2 * *(int *)(result + 528));
  if (v4 < a4)
  {
    uint64_t v7 = result;
    int v12 = 0;
    uint64_t v8 = *(void *)(result + 376);
    unsigned __int16 v9 = *(_WORD *)(result + 572);
    uint64_t v10 = qword_100101CC0;
    if (qword_100101CC0)
    {
      if (*(_DWORD *)(qword_100101CC0 + 5360))
      {
        LOWORD(v4) = v4 + *(unsigned __int8 *)(result + 664);
        goto LABEL_7;
      }
      if (*(_DWORD *)(qword_100101CC0 + 1776)) {
        goto LABEL_7;
      }
    }
    unsigned int v11 = sub_1000BD964(*(void *)(result + 376), *(unsigned __int16 *)(a2 + 2), 0);
    LOWORD(v4) = sub_1000BDCD4(v8, 0, 0, v11) + v4;
    uint64_t v10 = qword_100101CC0;
    if (!qword_100101CC0)
    {
LABEL_10:
      uint64_t result = sub_1000D3780(*(void *)(v7 + 472), *(__int16 *)(a3 + 2 * *(int *)(v7 + 528) + 4), v9, *(_WORD *)(a2 + 2), *(_DWORD *)(v7 + 568) + (__int16)v4, &v12);
      if (v12)
      {
        *(_DWORD *)(v7 + 524) = 3;
      }
      else if (*(__int16 *)(v7 + 712) > (__int16)v4)
      {
        *(_WORD *)(v7 + 712) = v4;
      }
      return result;
    }
LABEL_7:
    if (*(_DWORD *)(v10 + 3224) && *(_DWORD *)(v10 + 3024)) {
      ++v9;
    }
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_100057A78(uint64_t a1)
{
  unsigned int v2 = sub_100039408(a1);
  unsigned int v3 = sub_1000C0758(*(_DWORD *)(a1 + 520), v2);
  unsigned int v4 = sub_1000C0758(*(_DWORD *)(a1 + 524), v3);
  unsigned int v5 = sub_1000C0758(*(_DWORD *)(a1 + 528), v4);
  unsigned int v6 = sub_1000C0758(*(_DWORD *)(a1 + 532), v5);
  unsigned int v7 = sub_1000C0758(*(_DWORD *)(a1 + 536), v6);
  unsigned int v8 = sub_1000C0758(*(_DWORD *)(a1 + 540), v7);
  unsigned int v9 = sub_1000C072C(*(unsigned __int16 *)(a1 + 544), v8);
  unsigned int v10 = sub_1000C072C(*(unsigned __int16 *)(a1 + 546), v9);
  unsigned int v11 = sub_1000C072C(*(unsigned __int16 *)(a1 + 548), v10);
  unsigned int v12 = sub_1000C072C(*(unsigned __int16 *)(a1 + 550), v11);
  unsigned int v13 = sub_1000C072C(*(unsigned __int16 *)(a1 + 552), v12);
  unsigned int v14 = sub_1000C072C(*(unsigned __int16 *)(a1 + 554), v13);
  unsigned int v15 = sub_1000C072C(*(unsigned __int16 *)(a1 + 556), v14);
  unsigned int v16 = sub_1000C072C(*(unsigned __int16 *)(a1 + 558), v15);
  unsigned int v17 = sub_1000C072C(*(unsigned __int16 *)(a1 + 560), v16);
  unsigned int v18 = sub_1000C072C(*(unsigned __int16 *)(a1 + 562), v17);
  unsigned int v19 = sub_1000C072C(*(unsigned __int16 *)(a1 + 564), v18);
  unsigned int v20 = sub_1000C0758(*(_DWORD *)(a1 + 568), v19);
  uint64_t v21 = sub_1000C072C(*(unsigned __int16 *)(a1 + 572), v20);
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1068)) {
    uint64_t v21 = sub_1000C0758(*(_DWORD *)(a1 + 576), v21);
  }
  unsigned int v22 = sub_1000C09B0((unint64_t *)(a1 + 580), 2, *(_DWORD *)(a1 + 584), v21);
  unsigned int v23 = sub_1000C0758(*(_DWORD *)(a1 + 584), v22);
  unsigned int v24 = sub_1000C0758(*(_DWORD *)(a1 + 588), v23);
  unsigned int v25 = sub_1000C0758(*(_DWORD *)(a1 + 592), v24);
  unsigned int v26 = sub_1000C0758(*(_DWORD *)(a1 + 596), v25);
  unsigned int v27 = sub_1000C0758(*(_DWORD *)(a1 + 600), v26);
  unsigned int v28 = sub_1000C0758(*(_DWORD *)(a1 + 604), v27);
  uint64_t v29 = sub_1000C0758(*(_DWORD *)(a1 + 608), v28);
  unsigned __int16 v30 = *(unint64_t **)(a1 + 616);
  int v31 = sub_100004148(*(void *)(a1 + 384));
  uint64_t v32 = sub_1000C09B0(v30, 1, v31, v29);
  int v33 = *(unint64_t **)(a1 + 624);
  if (v33)
  {
    if (qword_100101CC0) {
      int v34 = *(_DWORD *)(qword_100101CC0 + 584);
    }
    else {
      int v34 = 0;
    }
    int v35 = sub_100004148(*(void *)(a1 + 384));
    LODWORD(v32) = sub_1000C09B0(v33, 1, v35 * v34, v32);
  }
  unsigned int v36 = sub_1000C072C(*(unsigned __int16 *)(a1 + 632), v32);
  unsigned int v37 = sub_1000C072C(*(unsigned __int16 *)(a1 + 634), v36);
  unsigned int v38 = sub_1000C0758(*(_DWORD *)(a1 + 648), v37);
  unsigned int v39 = sub_1000C0758(*(_DWORD *)(a1 + 652), v38);
  unsigned int v40 = sub_100063814(*(void *)(a1 + 656));
  unsigned int v41 = sub_1000C0758(v40, v39);
  unsigned int v42 = sub_1000C0758(*(_DWORD *)(a1 + 668), v41);
  uint64_t v43 = sub_1000C0758(*(_DWORD *)(a1 + 672), v42);
  unsigned int v44 = sub_1000C09B0(*(unint64_t **)(a1 + 688), 2, *(_DWORD *)(a1 + 696), v43);
  unsigned int v45 = sub_1000C0758(*(_DWORD *)(a1 + 696), v44);
  unsigned int v46 = sub_1000C0758(*(_DWORD *)(a1 + 700), v45);
  unsigned int v47 = sub_1000C0758(*(_DWORD *)(a1 + 704), v46);
  unsigned int v48 = sub_1000C0758(*(_DWORD *)(a1 + 708), v47);
  unsigned int v49 = sub_1000C072C(*(unsigned __int16 *)(a1 + 712), v48);
  unsigned int v50 = sub_1000C072C(*(unsigned __int16 *)(a1 + 714), v49);
  unsigned int v51 = sub_1000C072C(*(unsigned __int16 *)(a1 + 716), v50);
  unsigned int v52 = sub_1000C072C(*(unsigned __int16 *)(a1 + 718), v51);
  unsigned int v53 = sub_1000C072C(*(unsigned __int16 *)(a1 + 720), v52);
  unsigned int v54 = sub_1000C072C(*(unsigned __int16 *)(a1 + 722), v53);
  uint64_t v55 = *(void *)(a1 + 728);
  if (v55)
  {
    unsigned int v56 = sub_10009DBF4(v55);
    unsigned int v54 = sub_1000C0758(v56, v54);
  }
  unsigned int v57 = sub_10005EF90(*(unsigned int **)(a1 + 736));
  unsigned int v58 = sub_1000C0758(v57, v54);
  unsigned int v59 = sub_1000C0758(*(_DWORD *)(a1 + 748), v58);
  unsigned int v60 = sub_1000C0758(*(_DWORD *)(a1 + 756), v59);
  unsigned int v61 = sub_1000C0758(*(_DWORD *)(a1 + 760), v60);
  unsigned int v62 = sub_1000C0758(*(_DWORD *)(a1 + 764), v61);
  unsigned int v63 = sub_1000C0758(*(_DWORD *)(a1 + 800), v62);
  unsigned int v64 = sub_1000C072C(*(unsigned __int16 *)(a1 + 804), v63);
  unsigned int v65 = sub_1000C072C(*(unsigned __int16 *)(a1 + 806), v64);
  unsigned int v66 = sub_1000C0758(*(_DWORD *)(a1 + 808), v65);
  unsigned int v67 = sub_1000C0758(*(_DWORD *)(a1 + 812), v66);
  if (*(int *)(a1 + 808) >= 1)
  {
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    do
    {
      unsigned int v70 = sub_1000C085C(*(unsigned __int16 *)(*(void *)(a1 + 816) + v68), 2, v67);
      unsigned int v67 = sub_1000C085C(*(__int16 *)(*(void *)(a1 + 816) + v68 + 2), 2, v70);
      ++v69;
      v68 += 4;
    }
    while (v69 < *(int *)(a1 + 808));
  }
  unsigned int v71 = sub_1000C0758(*(_DWORD *)(a1 + 824), v67);
  uint64_t v72 = *(void *)(a1 + 856);
  uint64_t v73 = *(int *)(a1 + 532);
  uint64_t v74 = sub_100064238(*(void *)(a1 + 656), 0);
  if (*(int *)(a1 + 532) >= 1)
  {
    uint64_t v75 = v74;
    int v76 = 0;
    int v77 = 0;
    uint64_t v78 = (unsigned __int16 *)(v72 + 8 * v73);
    unsigned int v79 = v78;
    while (1)
    {
      unsigned int v80 = *(v79 - 4);
      v79 -= 4;
      unsigned int v81 = sub_1000C072C(v80, v71);
      if ((*(_WORD *)(v75 + 4 * *v79) & 0x7FFF) == 0) {
        break;
      }
      uint64_t v82 = *(unsigned int *)(a1 + 528);
      if ((int)v82 >= 1) {
        goto LABEL_21;
      }
LABEL_23:
      unsigned int v84 = sub_1000C0710(*((unsigned char *)v78 - 2), v81);
      unsigned int v71 = sub_1000C0710(*((unsigned char *)v78 - 1), v84);
      if (!*(v78 - 4)) {
        uint64_t v75 = sub_100064238(*(void *)(a1 + 656), ++v76);
      }
      ++v77;
      uint64_t v78 = v79;
      if (v77 >= *(_DWORD *)(a1 + 532)) {
        goto LABEL_25;
      }
    }
    uint64_t v82 = 1;
LABEL_21:
    for (uint64_t i = 0; i != v82; ++i)
      unsigned int v81 = sub_1000C072C(v78[i - 3], v81);
    goto LABEL_23;
  }
LABEL_25:
  unsigned int v85 = sub_1000C0758(*(_DWORD *)(a1 + 880), v71);
  uint64_t result = sub_1000C0758((*(void *)(a1 + 872) - *(void *)(a1 + 856)) >> 3, v85);
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1068))
  {
    unsigned int v87 = sub_1000C072C(*(unsigned __int16 *)(a1 + 992), result);
    unsigned int v88 = sub_1000C072C(*(unsigned __int16 *)(a1 + 994), v87);
    unsigned int v89 = *(unsigned __int16 *)(a1 + 996);
    return sub_1000C072C(v89, v88);
  }
  return result;
}

uint64_t sub_100057FDC(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int a5, unsigned int a6)
{
  uint64_t v7 = 0;
  int v8 = 4;
  if (a6 > 5 || ((1 << a6) & 0x26) == 0) {
    goto LABEL_27;
  }
  unsigned int v13 = *(uint64_t **)(a1 + 376);
  *(_DWORD *)(a1 + 520) = a6;
  *(_DWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 572) = -65536;
  *(_DWORD *)(a1 + 1064) = 0;
  *(void *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(void *)(a1 + 648) = 1;
  *(_DWORD *)(a1 + 752) = 0x40000000;
  uint64_t v14 = a1 + 756;
  int v15 = *(_DWORD *)(a1 + 432);
  if (!qword_100101CC0)
  {
    sub_1000B4440(v14, v15, 0, *(_DWORD *)(a1 + 912), 0, 0);
    uint64_t v16 = *(void *)(a1 + 728);
    uint64_t v17 = qword_100101CC0;
    if (v16) {
      goto LABEL_5;
    }
LABEL_9:
    if (v17) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }
  sub_1000B4440(v14, v15, *(_DWORD *)(qword_100101CC0 + 3192), *(_DWORD *)(a1 + 912), *(void *)(qword_100101CC0 + 1440), 0);
  uint64_t v16 = *(void *)(a1 + 728);
  uint64_t v17 = qword_100101CC0;
  if (!v16) {
    goto LABEL_9;
  }
LABEL_5:
  if (v17)
  {
    if (!sub_10009CED4(v16, *(_DWORD *)(v17 + 4488), *(void *)(v17 + 4496))) {
      goto LABEL_25;
    }
  }
  else if (!sub_10009CED4(v16, 0, 0))
  {
LABEL_25:
    uint64_t v7 = 0;
    goto LABEL_26;
  }
  uint64_t v17 = qword_100101CC0;
  if (qword_100101CC0)
  {
    if (!*(_DWORD *)(qword_100101CC0 + 4464) || (sub_10009CC28(*(void *)(a1 + 728)), (uint64_t v17 = qword_100101CC0) != 0))
    {
LABEL_15:
      *(_WORD *)(a1 + 564) = *(void *)(v17 + 3208);
      int v18 = *(_DWORD *)(a1 + 896);
      int v19 = *(_DWORD *)(a1 + 900);
      if (v18 >= v19) {
        goto LABEL_25;
      }
      *(_WORD *)(a1 + 562) = v18;
      uint64_t v20 = *(void *)(v17 + 3064);
      if (!v20) {
        goto LABEL_25;
      }
      *(_DWORD *)(a1 + 536) = v20;
      *(_WORD *)(a1 + 548) = v19;
      __int16 v21 = *(_WORD *)(v17 + 3120);
      *(_WORD *)(a1 + 552) = v21;
      *(_WORD *)(a1 + 550) = *(void *)(v17 + 3112);
      *(_DWORD *)(a1 + 824) = 0;
      if (*(void *)(v17 + 3240) == 5000) {
        *(_WORD *)(a1 + 554) = v21;
      }
      *(void *)(a1 + 600) = 0x100000001;
      unsigned int v22 = a3 - 1;
      if (a3 < 1)
      {
        *(_DWORD *)(a1 + 584) = 0;
        __int16 v25 = -1;
      }
      else
      {
        if (a3 != 1 && *(_DWORD *)(v17 + 3280))
        {
          *(_DWORD *)(a1 + 584) = 2;
          *(_WORD *)(a1 + 580) = *(_WORD *)(a2 + 2 * (a3 - 2));
          *(_WORD *)(a1 + 582) = *(_WORD *)(a2 + 2 * v22);
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 584) = 1;
        __int16 v25 = *(_WORD *)(a2 + 2 * v22);
      }
      *(_WORD *)(a1 + 580) = v25;
LABEL_32:
      sub_100054110(a1);
      if (!qword_100101CC0) {
        goto LABEL_69;
      }
      if (!*(_DWORD *)(qword_100101CC0 + 1776)) {
        goto LABEL_62;
      }
      if (a5 < 1)
      {
        unsigned int v27 = -1;
        if (*(_DWORD *)(a1 + 828) == -1) {
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v26 = a5;
        unsigned int v27 = -1;
        unsigned int v28 = a4;
        do
        {
          uint64_t v29 = *v28++;
          unsigned int v30 = sub_100026C90(v29);
          unsigned int v31 = sub_1000C085C(v30, 4, v27);
          unsigned int v27 = v31;
          --v26;
        }
        while (v26);
        if (v31 == *(_DWORD *)(a1 + 828)) {
          goto LABEL_62;
        }
      }
      int v32 = sub_100025F88(a4, a5, 0);
      int v33 = v32;
      if (v32 <= *(_DWORD *)(a1 + 1032))
      {
        int v35 = *(unsigned __int16 **)(a1 + 1024);
      }
      else
      {
        uint64_t v34 = sub_1000C33A0(2 * v32);
        if (!v34) {
          return 0;
        }
        int v35 = (unsigned __int16 *)v34;
        sub_1000C321C(*(void *)(a1 + 1024));
        *(void *)(a1 + 1024) = v35;
        *(_DWORD *)(a1 + 1032) = v33;
      }
      int v36 = sub_100025F88(a4, a5, v35);
      int v37 = 3 * v36 / 2;
      if (*(_DWORD *)(a1 + 1048) < v37)
      {
        uint64_t v38 = sub_1000C33A0(2 * v37);
        if (!v38) {
          return 0;
        }
        uint64_t v39 = v38;
        sub_1000C321C(*(void *)(a1 + 1040));
        *(void *)(a1 + 1040) = v39;
        *(_DWORD *)(a1 + 1048) = v37;
      }
      uint64_t v40 = sub_1000B5108((uint64_t)v13);
      if (v36 < 1)
      {
        uint64_t v43 = 0;
LABEL_55:
        if (sub_100062588(*(void *)(a1 + 656), *(unsigned __int16 **)(a1 + 1040), v43, v13, *(void *)(a1 + 384), 0, 0, 1, 0, *(void *)(a1 + 728)))
        {
          *(_DWORD *)(a1 + 828) = v27;
          if (*(_DWORD *)(a1 + 744)) {
            int v48 = *(_DWORD *)(a1 + 744);
          }
          else {
            int v48 = 65533;
          }
          *(_DWORD *)(a1 + 704) = sub_100062C2C(*(void *)(a1 + 656), v48);
          if (!qword_100101CC0) {
            goto LABEL_69;
          }
          if (*(_DWORD *)(qword_100101CC0 + 5360)) {
            sub_100063A5C(*(void *)(a1 + 656), *(unsigned int *)(a1 + 528));
          }
LABEL_62:
          if (qword_100101CC0)
          {
            if (*(_DWORD *)(qword_100101CC0 + 1776)) {
              BOOL v49 = 1;
            }
            else {
              BOOL v49 = v13 == 0;
            }
            if (v49) {
              goto LABEL_71;
            }
LABEL_70:
            if (!*(_DWORD *)(a1 + 608))
            {
              uint64_t v7 = sub_100053EBC(a1);
              goto LABEL_73;
            }
LABEL_71:
            uint64_t v7 = 1;
LABEL_73:
            *(unsigned char *)(a1 + 664) = sub_100064230(*(void *)(a1 + 656));
            int v50 = sub_100064220(*(void *)(a1 + 656));
            uint64_t v51 = *(void *)(a1 + 856);
            *(_DWORD *)(a1 + 532) = 0;
            if (v50 >= 1)
            {
              uint64_t v52 = v51 + 7;
              do
              {
                *(_DWORD *)(v52 - 7) = 0;
                *(_WORD *)(v52 - 1) = 0;
                ++*(_DWORD *)(a1 + 532);
                v52 += 8;
                --v50;
              }
              while (v50);
            }
            *(_DWORD *)(a1 + 568) = 0;
            *(_WORD *)(a1 + 996) = 0;
            int v8 = 1;
            goto LABEL_27;
          }
LABEL_69:
          if (!v13) {
            goto LABEL_71;
          }
          goto LABEL_70;
        }
      }
      else
      {
        uint64_t v41 = v40;
        int v42 = 0;
        uint64_t v43 = 0;
        int v44 = *(_DWORD *)(a1 + 1048);
        while (1)
        {
          while (1)
          {
            int v45 = sub_10001FAFC(v41, *(unsigned __int16 *)(*(void *)(a1 + 1024) + 2 * v42), (int16x8_t *)(*(void *)(a1 + 1040) + 2 * (int)v43), v44 - (int)v43);
            int v44 = *(_DWORD *)(a1 + 1048);
            if (v45 + (int)v43 > v44) {
              break;
            }
            uint64_t v43 = (v45 + v43);
            if (++v42 >= v36) {
              goto LABEL_55;
            }
          }
          v44 += 2 * (v36 - v42);
          unsigned int v46 = (void *)sub_1000C33A0(2 * v44);
          if (!v46) {
            break;
          }
          unsigned int v47 = v46;
          j__memmove(v46, *(const void **)(a1 + 1040), 2 * (int)v43);
          sub_1000C321C(*(void *)(a1 + 1040));
          *(void *)(a1 + 1040) = v47;
          *(_DWORD *)(a1 + 1048) = v44;
          if (v42 >= v36) {
            goto LABEL_55;
          }
        }
      }
      return 0;
    }
  }
LABEL_23:
  *(_WORD *)(a1 + 564) = 0;
  int v23 = *(_DWORD *)(a1 + 896);
  if (v23 >= *(_DWORD *)(a1 + 900)) {
    goto LABEL_25;
  }
  uint64_t v7 = 0;
  *(_WORD *)(a1 + 562) = v23;
LABEL_26:
  int v8 = 4;
LABEL_27:
  *(_DWORD *)(a1 + 524) = v8;
  return v7;
}

uint64_t sub_1000584E0(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t result = sub_100064220(*(void *)(a1 + 656));
  int v13 = result;
  if (*(_WORD *)(a1 + 994) == 0x4000)
  {
    __int16 v14 = *(_WORD *)(a1 + 572);
    if (v14)
    {
      *(_DWORD *)(a1 + 568) = 0x40000000;
LABEL_67:
      *(_WORD *)(a1 + 572) = v14 + 1;
      return result;
    }
  }
  uint64_t v15 = *(void *)(a1 + 856);
  uint64_t v16 = *(int *)(a1 + 532);
  uint64_t v17 = *(void *)(a1 + 384);
  *(void *)(a1 + 1000) = a2;
  if (qword_100101CC0 && *(uint64_t *)(qword_100101CC0 + 584) >= 1 && *(int *)(a1 + 648) >= 1) {
    sub_10001D1F8(v17, *(void *)(a1 + 640));
  }
  sub_100006AA4(v17, a2, a3, *(void *)(a1 + 408), *(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0), *(_DWORD *)(a1 + 600), v7, v8, v9, v10, v11, v12);
  *(_WORD *)(a1 + 994) = *(_WORD *)(a1 + 544);
  *(_WORD *)(a1 + 558) = 0x4000;
  if (!qword_100101CC0) {
    goto LABEL_49;
  }
  if (!*(_DWORD *)(qword_100101CC0 + 724)) {
    goto LABEL_49;
  }
  int v18 = *(unsigned __int16 **)(a1 + 872);
  if (!v18) {
    goto LABEL_49;
  }
  uint64_t v183 = v16;
  uint64_t v185 = v15;
  int v179 = v13;
  uint64_t v19 = *v18;
  int v20 = *(_DWORD *)(a1 + 672);
  uint64_t v21 = sub_100064238(*(void *)(a1 + 656), v20);
  unsigned int v22 = (__int16 *)(v21 + 4 * v19);
  uint64_t v23 = sub_100064250(*(void *)(a1 + 656), v20);
  int v24 = *v22 & 0x7FFF;
  uint64_t v25 = sub_100015A34(v17, v24);
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(a1 + 872) + 6);
  uint64_t v27 = *(unsigned __int16 *)(v25 + 2 * v26);
  int v28 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v27);
  if (v28 == 0x4000) {
    LOWORD(v28) = sub_100015A48(v17, v27);
  }
  if (v24 && *(_DWORD *)(a1 + 528) - 1 > (int)v26)
  {
    uint64_t v29 = *(unsigned __int16 *)(v25 + 2 * v26 + 2);
    int v30 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v29);
    if (v30 == 0x4000) {
      LOWORD(v30) = sub_100015A48(v17, v29);
    }
    if ((__int16)(v30 + *(unsigned __int8 *)(v23 + v19)) < (__int16)v28) {
      LOWORD(v28) = v30 + *(unsigned __int8 *)(v23 + v19);
    }
    goto LABEL_31;
  }
  if (*v22 < 0)
  {
    uint64_t v44 = *(void *)(a1 + 376);
    int v45 = *(unsigned __int16 *)(a1 + 806);
    if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 5264))
    {
      LOWORD(v45) = v45 + *(unsigned __int8 *)(a1 + 664);
    }
    else if (v44)
    {
      unsigned int v46 = sub_1000BD964(*(void *)(a1 + 376), *(unsigned __int16 *)(v21 + 4 * v19 + 2), 0);
      v45 += sub_1000BDCD4(v44, a1 + 580, *(_DWORD *)(a1 + 584), v46);
      if (qword_100101CC0)
      {
        int v13 = v179;
        if (*(_DWORD *)(qword_100101CC0 + 5360)) {
          LOWORD(v45) = v45 - sub_100064068(v44, v46, *(unsigned __int8 *)(a1 + 664)) + *(unsigned __int8 *)(a1 + 664);
        }
LABEL_42:
        uint64_t v47 = *(unsigned __int16 *)sub_100015A34(v17, 0);
        int v48 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v47);
        if (v48 == 0x4000) {
          LOWORD(v48) = sub_100015A48(v17, v47);
        }
        if ((__int16)(v48 + v45) < (__int16)v28) {
          LOWORD(v28) = v48 + v45;
        }
        uint64_t v16 = v183;
        uint64_t v43 = qword_100101CC0;
        if (qword_100101CC0) {
          goto LABEL_33;
        }
LABEL_47:
        *(_WORD *)(a1 + 558) = v28;
        goto LABEL_48;
      }
    }
    int v13 = v179;
    goto LABEL_42;
  }
  if (!**(_WORD **)(a1 + 872))
  {
LABEL_31:
    int v13 = v179;
    uint64_t v16 = v183;
    goto LABEL_32;
  }
  uint64_t v31 = v21 + 4 * v19;
  uint64_t v32 = *(unsigned __int16 *)(v31 + 2);
  int v33 = (__int16 *)(v31 + 4);
  int v13 = v179;
  uint64_t v16 = v183;
  do
  {
    int v34 = *v33;
    v33 += 2;
  }
  while (v34 < 0);
  uint64_t v35 = (unsigned __int16)*(v33 - 1);
  if (v32 < v35)
  {
    int v36 = (_WORD *)(v21 + 4 * v32);
    uint64_t v37 = v35 - v32;
    uint64_t v38 = (unsigned __int8 *)(v23 + v32);
    do
    {
      uint64_t v41 = *(unsigned __int16 *)sub_100015A34(v17, *v36 & 0x7FFF);
      int v42 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v41);
      if (v42 == 0x4000) {
        LOWORD(v42) = sub_100015A48(v17, v41);
      }
      __int16 v39 = *v38++;
      int v40 = (__int16)(*(_WORD *)(a1 + 564) + v42 + v39);
      if (v40 < (__int16)v28) {
        LOWORD(v28) = v40;
      }
      v36 += 2;
      --v37;
    }
    while (v37);
  }
LABEL_32:
  uint64_t v43 = qword_100101CC0;
  if (!qword_100101CC0) {
    goto LABEL_47;
  }
LABEL_33:
  *(_WORD *)(a1 + 558) = v28 + *(_WORD *)(v43 + 3040);
  LOWORD(v43) = *(_WORD *)(v43 + 3136);
LABEL_48:
  uint64_t v15 = v185;
  *(_WORD *)(a1 + 556) = v43 + v28;
LABEL_49:
  *(void *)(a1 + 872) = 0;
  uint64_t v49 = *(unsigned int *)(a1 + 808);
  if ((int)v49 < 1)
  {
    int v53 = 0x4000;
  }
  else
  {
    uint64_t v50 = *(void *)(a1 + 816);
    if (v49 >= 0x11)
    {
      uint64_t v54 = v49 & 0xF;
      if ((v49 & 0xF) == 0) {
        uint64_t v54 = 16;
      }
      uint64_t v51 = v49 - v54;
      uint64_t v55 = (const __int16 *)(v50 + 34);
      v56.i64[0] = 0x4000400040004000;
      v56.i64[1] = 0x4000400040004000;
      uint64_t v57 = v51;
      v58.i64[0] = 0x4000400040004000;
      v58.i64[1] = 0x4000400040004000;
      do
      {
        unsigned int v59 = v55 - 16;
        unsigned long long v60 = (unsigned __int128)vld2q_s16(v59);
        unsigned long long v61 = (unsigned __int128)vld2q_s16(v55);
        int16x8_t v56 = vminq_s16((int16x8_t)v60, v56);
        int16x8_t v58 = vminq_s16((int16x8_t)v61, v58);
        v55 += 32;
        v57 -= 16;
      }
      while (v57);
      __int16 v52 = vminvq_s16(vminq_s16(v56, v58));
    }
    else
    {
      uint64_t v51 = 0;
      __int16 v52 = 0x4000;
    }
    uint64_t v62 = v49 - v51;
    unsigned int v63 = (__int16 *)(v50 + 4 * v51 + 2);
    do
    {
      int v65 = *v63;
      v63 += 2;
      __int16 v64 = v65;
      if (v65 < v52) {
        __int16 v52 = v64;
      }
      --v62;
    }
    while (v62);
    int v53 = v52;
  }
  int v66 = v53 + *(__int16 *)(a1 + 550);
  if (v66 >= 0x4000) {
    LOWORD(v66) = 0x4000;
  }
  *(_WORD *)(a1 + 992) = sub_1000541F4(a1, (__int16)v66);
  *(_DWORD *)(a1 + 568) += *(__int16 *)(a1 + 544);
  *(_DWORD *)(a1 + 544) = 1073758208;
  *(_WORD *)(a1 + 996) = 0x4000;
  sub_100053C70(a1);
  if (*(_WORD *)(a1 + 994) == 0x4000)
  {
    uint64_t result = sub_100006C90(*(void *)(a1 + 384), (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)), (_DWORD *)(a1 + 436));
    *(_DWORD *)(a1 + 568) = 0x40000000;
    *(_DWORD *)(a1 + 524) = 5;
    __int16 v14 = *(_WORD *)(a1 + 572);
    goto LABEL_67;
  }
  int v178 = (_DWORD *)(a1 + 436);
  uint64_t v67 = *(void *)(a1 + 864);
  uint64_t v68 = (_WORD *)(v67 - 8);
  if (v13 < 1) {
    goto LABEL_193;
  }
  int v69 = 0;
  unsigned int v70 = (_WORD *)(v15 + 8 * v16);
  unsigned int v71 = v70 - 4;
  int v180 = v13;
  while (2)
  {
    *(void *)(a1 + 1016) = sub_100064238(*(void *)(a1 + 656), v69);
    *(void *)(a1 + 1008) = sub_100064250(*(void *)(a1 + 656), v69);
    *(void *)(a1 + 680) = sub_100064244(*(void *)(a1 + 656), v69);
    *(_DWORD *)(a1 + 668) = v69;
    int v186 = v70;
    if (!sub_10006425C(*(void *)(a1 + 656)))
    {
      int v110 = *(__int16 *)(a1 + 992);
      uint64_t v191 = v68;
      int v111 = v70 - 4;
      unsigned int v112 = *(_WORD **)(a1 + 1016);
      while (1)
      {
        uint64_t v114 = *v111;
        int v115 = &v112[2 * v114];
        if ((*v115 & 0x80000000) == 0)
        {
          *(_WORD *)(a1 + 722) = v115[1];
          if ((*v115 & 0x7FFF) != 0)
          {
            int v113 = (__int16)(*(_WORD *)(a1 + 564) + v111[*(int *)(a1 + 528)]);
          }
          else
          {
            int v113 = (__int16)v111[1];
            if (!*v111)
            {
              int v113 = (__int16)(*(_WORD *)(a1 + 562) + v113 + *(_WORD *)(a1 + 564));
              if (v113 <= v110 && *(_WORD *)(a1 + 572))
              {
                *(_WORD *)(a1 + 722) = 0;
LABEL_149:
                uint64_t v192 = v111;
                *(_WORD *)(a1 + 716) = v113;
                uint64_t v116 = &v112[2 * v114 + 2];
                do
                {
                  int v117 = *v116;
                  v116 += 2;
                }
                while (v117 < 0);
                unsigned __int16 v118 = *(v116 - 1) - 1;
                *(_WORD *)(a1 + 720) = v118;
              }
              else
              {
                unsigned __int16 v118 = 0;
                *(_WORD *)(a1 + 720) = 0;
                uint64_t v192 = v111;
              }
              uint64_t v119 = v71;
LABEL_153:
              while (1)
              {
                uint64_t v120 = *v71;
                if (v120 < v118) {
                  break;
                }
                if (!*v71)
                {
                  uint64_t v130 = v191;
                  if (v71[1] <= *(_WORD *)(a1 + 992))
                  {
                    uint64_t v132 = *(void *)(a1 + 384);
                    unsigned int v133 = (unsigned __int16 *)sub_100015A34(v132, *v112 & 0x7FFF);
                    *uint64_t v130 = 0;
                    int v134 = (__int16)v71[1];
                    if (v134 <= *(__int16 *)(a1 + 992))
                    {
                      uint64_t v137 = *v133;
                      int v138 = *(unsigned __int16 *)(*(void *)(v132 + 1792) + 2 * v137);
                      if (v138 == 0x4000) {
                        LOWORD(v138) = sub_100015A48(v132, v137);
                      }
                      __int16 v131 = v138 + v134 - *(_WORD *)(a1 + 994);
                    }
                    else
                    {
                      __int16 v131 = 0x4000;
                    }
                  }
                  else
                  {
                    _WORD *v191 = 0;
                    __int16 v131 = 0x4000;
                  }
                  v130[1] = v131;
                  v130[3] = 0;
                  v71 -= 4;
                  uint64_t v68 = v130 - 4;
                  unsigned int v70 = v192;
                  if (*(_DWORD *)(a1 + 524) == 3) {
                    return sub_100006C90(*(void *)(a1 + 384), (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)), v178);
                  }
                  goto LABEL_72;
                }
                if ((__int16)v71[*((unsigned __int8 *)v71 + 6) + 1] <= v110)
                {
                  __int16 v129 = v191;
                  sub_100059730(a1, v71, (uint64_t)v191, &v192, v112[2 * v120]);
                  v71 -= 4;
                  uint64_t v191 = v129 - 4;
                  if (*(_DWORD *)(a1 + 524) == 3) {
                    goto LABEL_176;
                  }
                  goto LABEL_174;
                }
                v71 -= 4;
              }
              __int16 v121 = v192;
              sub_1000595E0(a1, (unint64_t)v71, (unint64_t *)&v191, (uint64_t)v192);
              LODWORD(v122) = *(unsigned __int16 *)(a1 + 720);
              if (*(unsigned __int16 *)(a1 + 722) < v122) {
                goto LABEL_171;
              }
              uint64_t v123 = *(void *)(a1 + 1016);
              for (uint64_t i = v121 - 4; ; i -= 4)
              {
                uint64_t v126 = *i;
                int v127 = (__int16 *)(v123 + 4 * v126);
                if ((*v127 & 0x80000000) == 0)
                {
                  *(_WORD *)(a1 + 722) = v127[1];
                  if ((*v127 & 0x7FFF) != 0)
                  {
                    int v125 = (__int16)(*(_WORD *)(a1 + 564) + i[*(int *)(a1 + 528)]);
                  }
                  else
                  {
                    int v125 = (__int16)i[1];
                    if (!*i)
                    {
                      int v125 = (__int16)(*(_WORD *)(a1 + 562) + v125 + *(_WORD *)(a1 + 564));
                      if (v125 <= *(__int16 *)(a1 + 992) && *(_WORD *)(a1 + 572))
                      {
                        *(_WORD *)(a1 + 722) = 0;
LABEL_168:
                        uint64_t v192 = i;
                        *(_WORD *)(a1 + 716) = v125;
                        uint64_t v122 = (__int16 *)(v123 + 4 * v126 + 4);
                        do
                        {
                          int v128 = *v122;
                          v122 += 2;
                        }
                        while (v128 < 0);
                        LOWORD(v122) = *(v122 - 1);
LABEL_171:
                        *(_WORD *)(a1 + 720) = (_WORD)v122 - 1;
                        if (*(_DWORD *)(a1 + 524) == 3)
                        {
LABEL_176:
                          unsigned int v71 = v119;
                          unsigned int v70 = v186;
                          if (*(_DWORD *)(a1 + 524) == 3) {
                            return sub_100006C90(*(void *)(a1 + 384), (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)), v178);
                          }
                          goto LABEL_72;
                        }
                      }
                      else
                      {
                        *(_WORD *)(a1 + 720) = 0;
                        uint64_t v192 = i;
                        if (*(_DWORD *)(a1 + 524) == 3) {
                          goto LABEL_176;
                        }
                      }
LABEL_174:
                      unsigned __int16 v118 = *(_WORD *)(a1 + 720);
                      goto LABEL_153;
                    }
                  }
                  if (v125 <= *(__int16 *)(a1 + 992)) {
                    goto LABEL_168;
                  }
                }
              }
            }
          }
          if (v113 <= v110) {
            goto LABEL_149;
          }
        }
        v111 -= 4;
      }
    }
    int v190 = 0;
    unsigned int v189 = 0;
    int v73 = *(__int16 *)(a1 + 992);
    __int16 v182 = v68;
    int v187 = v68;
    uint64_t v74 = *(_WORD **)(a1 + 1016);
    uint64_t v75 = v70 - 4;
    uint64_t v184 = *(void *)(a1 + 680);
    while (1)
    {
      uint64_t v77 = *v75;
      uint64_t v78 = &v74[2 * v77];
      if (*v78 < 0) {
        goto LABEL_77;
      }
      *(_WORD *)(a1 + 722) = v78[1];
      if ((*v78 & 0x7FFF) != 0)
      {
        int v76 = (__int16)(*(_WORD *)(a1 + 564) + v75[*(int *)(a1 + 528)]);
        goto LABEL_76;
      }
      int v76 = (__int16)v75[1];
      if (!*v75) {
        break;
      }
LABEL_76:
      if (v76 <= v73) {
        goto LABEL_84;
      }
LABEL_77:
      v75 -= 4;
    }
    int v76 = (__int16)(*(_WORD *)(a1 + 562) + v76 + *(_WORD *)(a1 + 564));
    if (v76 > v73 || !*(_WORD *)(a1 + 572))
    {
      unsigned __int16 v81 = 0;
      *(_WORD *)(a1 + 720) = 0;
      uint64_t v188 = v75;
      int v181 = v71;
      uint64_t v82 = (unsigned __int8 *)v71 - 1;
      uint64_t v83 = *v71;
      goto LABEL_87;
    }
    *(_WORD *)(a1 + 722) = 0;
LABEL_84:
    uint64_t v188 = v75;
    *(_WORD *)(a1 + 716) = v76;
    unsigned int v79 = &v74[2 * v77 + 2];
    do
    {
      int v80 = *v79;
      v79 += 2;
    }
    while (v80 < 0);
    unsigned __int16 v81 = *(v79 - 1) - 1;
    *(_WORD *)(a1 + 720) = v81;
    int v181 = v71;
    uint64_t v82 = (unsigned __int8 *)v71 - 1;
    uint64_t v83 = *v71;
    if (v83 >= v81) {
      goto LABEL_87;
    }
LABEL_90:
    unsigned int v85 = v188;
    sub_1000595E0(a1, (unint64_t)v71, (unint64_t *)&v187, (uint64_t)v188);
    LODWORD(v86) = *(unsigned __int16 *)(a1 + 720);
    if (*(unsigned __int16 *)(a1 + 722) < v86)
    {
LABEL_104:
      *(_WORD *)(a1 + 720) = (_WORD)v86 - 1;
      if (*(_DWORD *)(a1 + 524) == 3) {
        goto LABEL_134;
      }
      while (1)
      {
        while (1)
        {
LABEL_110:
          unsigned __int16 v81 = *(_WORD *)(a1 + 720);
          uint64_t v82 = (unsigned __int8 *)v71 - 1;
          uint64_t v83 = *v71;
          if (v83 < v81) {
            goto LABEL_90;
          }
          while (1)
          {
LABEL_87:
            if (!v83)
            {
              uint64_t v106 = v187;
              if (v71[1] > *(_WORD *)(a1 + 992))
              {
                _WORD *v187 = 0;
                __int16 v72 = 0x4000;
              }
              else
              {
                uint64_t v107 = *(void *)(a1 + 384);
                uint64_t v108 = (unsigned __int16 *)sub_100015A34(v107, *v74 & 0x7FFF);
                *uint64_t v106 = 0;
                int v109 = (__int16)v71[1];
                if (v109 <= *(__int16 *)(a1 + 992))
                {
                  uint64_t v135 = *v108;
                  int v136 = *(unsigned __int16 *)(*(void *)(v107 + 1792) + 2 * v135);
                  if (v136 == 0x4000) {
                    LOWORD(v136) = sub_100015A48(v107, v135);
                  }
                  __int16 v72 = v136 + v109 - *(_WORD *)(a1 + 994);
                }
                else
                {
                  __int16 v72 = 0x4000;
                }
              }
              v106[1] = v72;
              v106[3] = 0;
              v71 -= 4;
              uint64_t v68 = v106 - 4;
              unsigned int v70 = v188;
              if (*(_DWORD *)(a1 + 524) == 3) {
                return sub_100006C90(*(void *)(a1 + 384), (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)), v178);
              }
              goto LABEL_72;
            }
            if ((__int16)v71[*((unsigned __int8 *)v71 + 6) + 1] <= v73) {
              break;
            }
            v82 -= 8;
            unsigned int v84 = *(v71 - 4);
            v71 -= 4;
            uint64_t v83 = v84;
            if (v84 < v81) {
              goto LABEL_90;
            }
          }
          uint64_t v93 = &v74[2 * v83];
          if ((!qword_100101CC0 || *(void *)(qword_100101CC0 + 3688) <= (uint64_t)*((unsigned __int8 *)v71 + 7))
            && *v93 < 0)
          {
            sub_10009D254(*(void *)(a1 + 728), (unsigned __int16)v74[2 * v83 + 1], 0, &v189, &v190);
            uint64_t v95 = *((unsigned __int8 *)v71 + 7);
            if (v190 > (int)v95 || *(_DWORD *)(v184 + 4 * v95) > (int)*v71) {
              break;
            }
          }
          unsigned int v94 = v187;
          sub_100059730(a1, v71, (uint64_t)v187, &v188, *v93);
          v71 -= 4;
          int v187 = v94 - 4;
          unsigned int v70 = v186;
          if (*(_DWORD *)(a1 + 524) == 3) {
            goto LABEL_134;
          }
        }
        __int16 v96 = v189;
        uint64_t v191 = v188;
        uint64_t v192 = v187;
        int v97 = *v71;
        uint64_t v98 = *((unsigned __int8 *)v71 + 7);
        if (v190 <= (int)v98) {
          break;
        }
        sub_100059B08(a1, v71, (uint64_t *)&v192, (uint64_t)v71, v189[v98]);
        uint64_t v98 = *((unsigned __int8 *)v71 + 7);
        if (*(_DWORD *)(*(void *)(a1 + 680) + 4 * v98) > (int)*v71) {
          goto LABEL_121;
        }
LABEL_116:
        int v99 = v192;
        sub_100059730(a1, v71, (uint64_t)v192, &v191, *v93);
        uint64_t v100 = v99 - 4;
        uint64_t v192 = v100;
        int v101 = *(v71 - 4);
        v71 -= 4;
        if (v101 == v97) {
          goto LABEL_125;
        }
LABEL_133:
        int v187 = v100;
        uint64_t v188 = v191;
        int v13 = v180;
        unsigned int v70 = v186;
        if (*(_DWORD *)(a1 + 524) == 3) {
          goto LABEL_134;
        }
      }
      if (*(_DWORD *)(*(void *)(a1 + 680) + 4 * v98) <= v97) {
        goto LABEL_116;
      }
LABEL_121:
      int v102 = v192;
      sub_100059C58(a1, v71, (uint64_t)v192, v96[v98 - 1]);
      uint64_t v100 = v102 - 4;
      uint64_t v192 = v100;
      int v103 = *(v71 - 4);
      v71 -= 4;
      if (v103 != v97) {
        goto LABEL_133;
      }
      while (1)
      {
LABEL_125:
        uint64_t v105 = *v82;
        if ((int)v105 + 1 >= v82[8])
        {
          if (*(_DWORD *)(*(void *)(a1 + 680) + 4 * v105) <= v97)
          {
LABEL_127:
            uint64_t v100 = v192;
            sub_100059730(a1, (unsigned __int16 *)(v82 - 7), (uint64_t)v192, &v191, *v93);
            if ((__int16)v100[*((unsigned __int8 *)v100 + 6) + 1] >= 0x4000) {
              goto LABEL_124;
            }
            goto LABEL_123;
          }
        }
        else
        {
          sub_100059B08(a1, v82 - 7, (uint64_t *)&v192, (uint64_t)(v82 - 7), v96[v105]);
          uint64_t v105 = *v82;
          if (*(_DWORD *)(*(void *)(a1 + 680) + 4 * v105) <= (int)*(unsigned __int16 *)(v82 - 7)) {
            goto LABEL_127;
          }
        }
        uint64_t v100 = v192;
        sub_100059C58(a1, (unsigned __int16 *)(v82 - 7), (uint64_t)v192, v96[v105 - 1]);
        if ((__int16)v100[*((unsigned __int8 *)v100 + 6) + 1] >= 0x4000) {
          goto LABEL_124;
        }
LABEL_123:
        v100 -= 4;
        uint64_t v192 = v100;
LABEL_124:
        int v104 = *(unsigned __int16 *)(v82 - 15);
        v82 -= 8;
        if (v104 != v97)
        {
          unsigned int v71 = (unsigned __int16 *)(v82 - 7);
          goto LABEL_133;
        }
      }
    }
    uint64_t v87 = *(void *)(a1 + 1016);
    unsigned int v88 = v85 - 4;
    while (2)
    {
      uint64_t v90 = *v88;
      uint64_t v91 = (__int16 *)(v87 + 4 * v90);
      if (*v91 < 0) {
        goto LABEL_94;
      }
      *(_WORD *)(a1 + 722) = v91[1];
      if ((*v91 & 0x7FFF) != 0)
      {
        int v89 = (__int16)(*(_WORD *)(a1 + 564) + v88[*(int *)(a1 + 528)]);
LABEL_93:
        if (v89 <= *(__int16 *)(a1 + 992)) {
          goto LABEL_101;
        }
LABEL_94:
        v88 -= 4;
        continue;
      }
      break;
    }
    int v89 = (__int16)v88[1];
    if (*v88) {
      goto LABEL_93;
    }
    int v89 = (__int16)(*(_WORD *)(a1 + 562) + v89 + *(_WORD *)(a1 + 564));
    if (v89 <= *(__int16 *)(a1 + 992) && *(_WORD *)(a1 + 572))
    {
      *(_WORD *)(a1 + 722) = 0;
LABEL_101:
      uint64_t v188 = v88;
      *(_WORD *)(a1 + 716) = v89;
      __int16 v86 = (__int16 *)(v87 + 4 * v90 + 4);
      do
      {
        int v92 = *v86;
        v86 += 2;
      }
      while (v92 < 0);
      LOWORD(v86) = *(v86 - 1);
      goto LABEL_104;
    }
    *(_WORD *)(a1 + 720) = 0;
    uint64_t v188 = v88;
    if (*(_DWORD *)(a1 + 524) != 3) {
      goto LABEL_110;
    }
LABEL_134:
    unsigned int v71 = v181;
    uint64_t v68 = v182;
    if (*(_DWORD *)(a1 + 524) == 3) {
      return sub_100006C90(*(void *)(a1 + 384), (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)), v178);
    }
LABEL_72:
    if (++v69 != v13) {
      continue;
    }
    break;
  }
  uint64_t v67 = *(void *)(a1 + 864);
LABEL_193:
  __int16 v139 = v68 + 4;
  unint64_t v140 = v67 - (void)(v68 + 4);
  unint64_t v141 = v140 >> 3;
  int v142 = sub_100064220(*(void *)(a1 + 656));
  if (*(_DWORD *)(a1 + 880) <= (int)(v140 >> 3))
  {
    *(_DWORD *)(a1 + 524) = 3;
    return sub_100006C90(*(void *)(a1 + 384), (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)), v178);
  }
  int v143 = v142;
  unint64_t v144 = *(void *)(a1 + 864);
  int v145 = *(int **)(a1 + 736);
  uint64_t v146 = (void *)*((void *)v145 + 1);
  uint64_t v147 = *v145;
  bzero(v146, 2 * v147);
  int v148 = sub_100064220(*(void *)(a1 + 656));
  if ((int)v141 < 1)
  {
    __int16 v150 = 0x4000;
  }
  else
  {
    unint64_t v149 = v144 - (v140 & 0x7FFFFFFF8);
    __int16 v150 = 0x4000;
    do
    {
      int v151 = *(_WORD *)v149 == 0;
      uint64_t v152 = *(__int16 *)(v149 + 2 * *(unsigned __int8 *)(v149 + 6) + 2);
      if ((int)v147 > (int)v152) {
        ++*((_WORD *)v146 + v152);
      }
      v148 -= v151;
      if ((int)v152 < v150 && *(_WORD *)v149)
      {
        *(void *)(a1 + 872) = v149;
        *(_DWORD *)(a1 + 672) = v148;
        __int16 v150 = v152;
      }
      v149 += 8;
    }
    while (v149 < v144);
  }
  *(_WORD *)(a1 + 546) = v150;
  int v153 = (__int16)v68[5];
  int v154 = *(__int16 *)(a1 + 996);
  if (v153 < v154)
  {
    *(_WORD *)(a1 + 996) = v68[5];
    int v154 = v153;
    if (v153 >= v150) {
      goto LABEL_208;
    }
LABEL_212:
    *(void *)(a1 + 872) = v139;
    *(_DWORD *)(a1 + 672) = 0;
    __int16 v150 = v154;
    *(_WORD *)(a1 + 544) = v154;
    if (v153 != 0x4000) {
      goto LABEL_213;
    }
LABEL_209:
    *(_DWORD *)(a1 + 648) = 0;
    *(_DWORD *)(a1 + 532) = v141;
    if (v154 != 0x4000) {
      goto LABEL_216;
    }
LABEL_214:
    if (*(unsigned __int16 *)(a1 + 574) == 0xFFFF) {
      *(_WORD *)(a1 + 574) = *(_WORD *)(a1 + 572);
    }
    goto LABEL_216;
  }
  if (v154 < v150) {
    goto LABEL_212;
  }
LABEL_208:
  *(_WORD *)(a1 + 544) = v150;
  if (v153 == 0x4000) {
    goto LABEL_209;
  }
LABEL_213:
  *(_DWORD *)(a1 + 532) = v141;
  if (v154 == 0x4000) {
    goto LABEL_214;
  }
LABEL_216:
  __int16 v155 = *(_WORD *)(a1 + 552) + v150;
  int v156 = sub_10006425C(*(void *)(a1 + 656));
  uint64_t v157 = *(void *)(a1 + 864);
  uint64_t v158 = sub_100064238(*(void *)(a1 + 656), 0);
  int v159 = sub_100064220(*(void *)(a1 + 656));
  if (v156)
  {
    for (int j = 0; ; v158 = sub_100064238(*(void *)(a1 + 656), j))
    {
      while (1)
      {
        unsigned int v162 = *(unsigned __int16 *)(v157 - 8);
        v157 -= 8;
        uint64_t v161 = v162;
        if (!v162) {
          break;
        }
        int v163 = (__int16 *)(v158 + 4 * v161);
        if (*v163 < 0
          && sub_10009DA20(*(void *)(a1 + 728), (unsigned __int16)v163[1]) == *(unsigned __int8 *)(v157 + 7))
        {
          sub_100059DE0(a1, (uint64_t)v163, v157, v155);
        }
      }
      if (++j == v159) {
        break;
      }
    }
  }
  else
  {
    unsigned int v166 = *(unsigned __int16 *)(v157 - 8);
    uint64_t v165 = v157 - 8;
    uint64_t v164 = v166;
    if (v166) {
      goto LABEL_227;
    }
    while (++v156 != v159)
    {
      uint64_t v158 = sub_100064238(*(void *)(a1 + 656), v156);
      unsigned int v169 = *(unsigned __int16 *)(v165 - 8);
      v165 -= 8;
      uint64_t v164 = v169;
      if (v169)
      {
        do
        {
LABEL_227:
          unint64_t v168 = (__int16 *)(v158 + 4 * v164);
          if (*v168 < 0) {
            sub_100059DE0(a1, (uint64_t)v168, v165, v155);
          }
          unsigned int v167 = *(unsigned __int16 *)(v165 - 8);
          v165 -= 8;
          uint64_t v164 = v167;
        }
        while (v167);
      }
    }
  }
  j__memmove(*(void **)(a1 + 856), v139, 8 * (int)v141);
  *(void *)(a1 + 872) -= 8 * (*(int *)(a1 + 880) - (uint64_t)(int)v141);
  if (*(_DWORD *)(a1 + 532) == v143 && *(_WORD *)(*(void *)(a1 + 856) + 2) == 0x4000) {
    *(_DWORD *)(a1 + 592) = 1;
  }
  if (*(unsigned char *)(a1 + 424)) {
    sub_10003A240(a1, v170, v171, v172, v173, v174, v175, v176);
  }
  sub_100006C90(*(void *)(a1 + 384), (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)), v178);
  ++*(_WORD *)(a1 + 572);
  uint64_t result = sub_1000B44AC((unsigned int *)(a1 + 756), *(unsigned __int16 *)(a1 + 996) == *(unsigned __int16 *)(a1 + 544));
  if (*(_DWORD *)(a1 + 524) != 3)
  {
    uint64_t result = sub_1000543B0((_DWORD *)a1);
    if (result) {
      int v177 = 2;
    }
    else {
      int v177 = 1;
    }
    *(_DWORD *)(a1 + 524) = v177;
  }
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 1064)) {
    return sub_100039528(a1);
  }
  return result;
}

uint64_t sub_1000595E0(uint64_t result, unint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned __int16 *)(result + 720);
  int v5 = (__int16)(*(_WORD *)(result + 716) + *(unsigned __int8 *)(*(void *)(result + 1008) + v4));
  if (v5 <= *(__int16 *)(result + 992))
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result + 384);
    int v11 = *(_WORD *)(*(void *)(result + 1016) + 4 * v4) & 0x7FFF;
    if (!qword_100101CC0 || *(uint64_t *)(qword_100101CC0 + 584) < 1 || *(_WORD *)a4) {
      goto LABEL_8;
    }
    uint64_t result = sub_10001D424(*(void *)(result + 384), v11);
    uint64_t v12 = qword_100101CC0;
    if (qword_100101CC0) {
      uint64_t v12 = *(void *)(qword_100101CC0 + 4904);
    }
    if (v12 >= (__int16)(result + v5 - *(_WORD *)(v9 + 994)))
    {
LABEL_8:
      unint64_t v13 = *a3;
      if (*a3 <= a2)
      {
        *(_DWORD *)(v9 + 524) = 3;
      }
      else
      {
        *(_WORD *)unint64_t v13 = v4;
        *(_WORD *)(v13 + 4) = 0x4000;
        uint64_t v14 = *(unsigned __int16 *)sub_100015A34(v10, v11);
        uint64_t result = *(unsigned __int16 *)(*(void *)(v10 + 1792) + 2 * v14);
        if (result == 0x4000) {
          uint64_t result = sub_100015A48(v10, v14);
        }
        *(_WORD *)(v13 + 2) = result + v5 - *(_WORD *)(v9 + 994);
        *(unsigned char *)(v13 + 6) = 0;
        *(unsigned char *)(v13 + 7) = *(unsigned char *)(a4 + 7) + 1;
        *a3 -= 8;
      }
    }
  }
  return result;
}

uint64_t sub_100059730(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4, __int16 a5)
{
  int v9 = *(__int16 *)(a1 + 992);
  __int16 v10 = *(_WORD *)(a1 + 994);
  uint64_t v11 = *(void *)(a1 + 384);
  if ((a5 & 0x7FFF) == 0)
  {
    uint64_t result = sub_100015A34(*(void *)(a1 + 384), 0);
    uint64_t v22 = *a2;
    *(_WORD *)a3 = v22;
    if (*(unsigned __int16 *)(a1 + 720) != v22)
    {
      signed __int16 v23 = a2[1];
      if (v9 < v23) {
        goto LABEL_35;
      }
      goto LABEL_15;
    }
    if ((__int16)a2[1] >= (__int16)(*(_WORD *)(a1 + 716) + *(unsigned __int8 *)(*(void *)(a1 + 1008) + v22))) {
      signed __int16 v23 = *(_WORD *)(a1 + 716) + *(unsigned __int8 *)(*(void *)(a1 + 1008) + v22);
    }
    else {
      signed __int16 v23 = a2[1];
    }
    if (*(unsigned __int16 *)(a1 + 722) < v22)
    {
      *(_WORD *)(a1 + 720) = v22 - 1;
      if (v9 < v23) {
        goto LABEL_35;
      }
      goto LABEL_15;
    }
    uint64_t v38 = *a4;
    uint64_t v39 = *(void *)(a1 + 1016);
    while (1)
    {
      do
      {
        unsigned int v42 = (unsigned __int16)*(v38 - 4);
        v38 -= 4;
        uint64_t v41 = v42;
        uint64_t v43 = (__int16 *)(v39 + 4 * v42);
      }
      while (*v43 < 0);
      *(_WORD *)(a1 + 722) = v43[1];
      if ((*v43 & 0x7FFF) != 0)
      {
        int v40 = (__int16)(*(_WORD *)(a1 + 564) + v38[*(int *)(a1 + 528)]);
      }
      else
      {
        int v40 = (__int16)v38[1];
        if (!*v38)
        {
          int v40 = (__int16)(*(_WORD *)(a1 + 562) + v40 + *(_WORD *)(a1 + 564));
          if (v40 <= *(__int16 *)(a1 + 992) && *(_WORD *)(a1 + 572))
          {
            *(_WORD *)(a1 + 722) = 0;
LABEL_61:
            *a4 = v38;
            *(_WORD *)(a1 + 716) = v40;
            uint64_t v44 = (__int16 *)(v39 + 4 * v41 + 4);
            do
            {
              int v45 = *v44;
              v44 += 2;
            }
            while (v45 < 0);
            *(_WORD *)(a1 + 720) = *(v44 - 1) - 1;
            if (v9 < v23)
            {
LABEL_35:
              __int16 v21 = 0x4000;
LABEL_36:
              BOOL v18 = 0;
              goto LABEL_37;
            }
          }
          else
          {
            *(_WORD *)(a1 + 720) = 0;
            *a4 = v38;
            if (v9 < v23) {
              goto LABEL_35;
            }
          }
LABEL_15:
          uint64_t v24 = *(unsigned __int16 *)result;
          uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792) + 2 * v24);
          if (result == 0x4000) {
            uint64_t result = sub_100015A48(*(void *)(a1 + 384), v24);
          }
          __int16 v21 = v23 - v10 + result;
          goto LABEL_36;
        }
      }
      if (v40 <= *(__int16 *)(a1 + 992)) {
        goto LABEL_61;
      }
    }
  }
  __int16 v46 = *(_WORD *)(a1 + 994);
  uint64_t result = sub_100015A34(v11, a5 & 0x7FFF);
  uint64_t v14 = (unsigned __int16 *)result;
  uint64_t v15 = *a2;
  *(_WORD *)a3 = v15;
  __int16 v16 = *(unsigned __int8 *)(*(void *)(a1 + 1008) + v15);
  if ((__int16)a2[2] >= (__int16)(a2[1] + v16)) {
    int v17 = (__int16)(a2[1] + v16);
  }
  else {
    int v17 = (__int16)a2[2];
  }
  if (v17 <= v9)
  {
    uint64_t v25 = *(unsigned __int16 *)(result + 2);
    uint64_t result = *(unsigned __int16 *)(*(void *)(v11 + 1792) + 2 * v25);
    if (result == 0x4000) {
      uint64_t result = sub_100015A48(v11, v25);
    }
    int v26 = (__int16)(result + v17 - v46);
    *(_WORD *)(a3 + 4) = result + v17 - v46;
    BOOL v18 = v26 < 0x4000;
    if (v26 >= 0x4000) {
      __int16 v19 = 0x4000;
    }
    else {
      __int16 v19 = result + v17 - v46;
    }
    if (*(unsigned __int16 *)(a1 + 720) != v15)
    {
LABEL_7:
      signed __int16 v20 = a2[1];
      if (v9 < v20) {
        goto LABEL_8;
      }
LABEL_29:
      uint64_t result = *(void *)(a1 + 384);
      uint64_t v27 = *v14;
      int v28 = *(unsigned __int16 *)(*(void *)(result + 1792) + 2 * v27);
      if (v28 == 0x4000)
      {
        uint64_t result = sub_100015A48(result, v27);
        LOWORD(v28) = result;
      }
      __int16 v29 = v28 + v20 - v46;
      *(_WORD *)(a3 + 2) = v29;
      if (v29 < v19) {
        BOOL v18 = 0;
      }
      goto LABEL_38;
    }
  }
  else
  {
    BOOL v18 = 0;
    __int16 v19 = 0x4000;
    *(_WORD *)(a3 + 4) = 0x4000;
    if (*(unsigned __int16 *)(a1 + 720) != v15) {
      goto LABEL_7;
    }
  }
  if ((__int16)a2[1] >= (__int16)(*(_WORD *)(a1 + 716) + v16)) {
    signed __int16 v20 = *(_WORD *)(a1 + 716) + v16;
  }
  else {
    signed __int16 v20 = a2[1];
  }
  if (*(unsigned __int16 *)(a1 + 722) < v15)
  {
    *(_WORD *)(a1 + 720) = v15 - 1;
    if (v9 < v20) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
  int v30 = *a4;
  uint64_t v31 = *(void *)(a1 + 1016);
  while (1)
  {
    do
    {
      unsigned int v34 = (unsigned __int16)*(v30 - 4);
      v30 -= 4;
      uint64_t v33 = v34;
      uint64_t v35 = (__int16 *)(v31 + 4 * v34);
    }
    while (*v35 < 0);
    *(_WORD *)(a1 + 722) = v35[1];
    if ((*v35 & 0x7FFF) == 0) {
      break;
    }
    int v32 = (__int16)(*(_WORD *)(a1 + 564) + v30[*(int *)(a1 + 528)]);
LABEL_41:
    if (v32 <= *(__int16 *)(a1 + 992)) {
      goto LABEL_48;
    }
  }
  int v32 = (__int16)v30[1];
  if (*v30) {
    goto LABEL_41;
  }
  int v32 = (__int16)(*(_WORD *)(a1 + 562) + v32 + *(_WORD *)(a1 + 564));
  if (v32 > *(__int16 *)(a1 + 992) || !*(_WORD *)(a1 + 572))
  {
    *(_WORD *)(a1 + 720) = 0;
    *a4 = v30;
    if (v9 < v20) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
  *(_WORD *)(a1 + 722) = 0;
LABEL_48:
  *a4 = v30;
  *(_WORD *)(a1 + 716) = v32;
  int v36 = (__int16 *)(v31 + 4 * v33 + 4);
  do
  {
    int v37 = *v36;
    v36 += 2;
  }
  while (v37 < 0);
  *(_WORD *)(a1 + 720) = *(v36 - 1) - 1;
  if (v9 >= v20) {
    goto LABEL_29;
  }
LABEL_8:
  __int16 v21 = 0x4000;
LABEL_37:
  *(_WORD *)(a3 + 2) = v21;
LABEL_38:
  *(unsigned char *)(a3 + 6) = v18;
  *(unsigned char *)(a3 + 7) = *((unsigned char *)a2 + 7);
  return result;
}

uint64_t sub_100059B08(uint64_t result, _WORD *a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  int v5 = (__int16)(*(_WORD *)(result + 564) + a2[*(int *)(result + 528)]);
  if (v5 <= *(__int16 *)(result + 992))
  {
    uint64_t v10 = result;
    uint64_t v11 = *(void *)(result + 384);
    if (!qword_100101CC0 || *(uint64_t *)(qword_100101CC0 + 584) < 1 || *(_WORD *)a4) {
      goto LABEL_8;
    }
    uint64_t result = sub_10001D424(*(void *)(result + 384), a5);
    uint64_t v12 = qword_100101CC0;
    if (qword_100101CC0) {
      uint64_t v12 = *(void *)(qword_100101CC0 + 4904);
    }
    if (v12 >= (__int16)(result + v5 - *(_WORD *)(v10 + 994)))
    {
LABEL_8:
      uint64_t v13 = *a3;
      if (*a3 <= (unint64_t)a2)
      {
        *(_DWORD *)(v10 + 524) = 3;
      }
      else
      {
        *(_WORD *)uint64_t v13 = *a2;
        *(_WORD *)(v13 + 4) = 0x4000;
        uint64_t v14 = *(unsigned __int16 *)sub_100015A34(v11, a5);
        uint64_t result = *(unsigned __int16 *)(*(void *)(v11 + 1792) + 2 * v14);
        if (result == 0x4000) {
          uint64_t result = sub_100015A48(v11, v14);
        }
        *(_WORD *)(v13 + 2) = result + v5 - *(_WORD *)(v10 + 994);
        *(unsigned char *)(v13 + 6) = 0;
        *(unsigned char *)(v13 + 7) = *(unsigned char *)(a4 + 7) + 1;
        *a3 -= 8;
      }
    }
  }
  return result;
}

uint64_t sub_100059C58(uint64_t a1, unsigned __int16 *a2, uint64_t a3, int a4)
{
  int v7 = *(__int16 *)(a1 + 992);
  __int16 v8 = *(_WORD *)(a1 + 994);
  uint64_t v9 = *(void *)(a1 + 384);
  uint64_t result = sub_100015A34(v9, a4);
  uint64_t v11 = (unsigned __int16 *)result;
  *(_WORD *)a3 = *a2;
  if ((__int16)a2[2] >= (__int16)a2[1]) {
    int v12 = (__int16)a2[1];
  }
  else {
    int v12 = (__int16)a2[2];
  }
  if (v12 <= v7)
  {
    uint64_t v15 = *(unsigned __int16 *)(result + 2);
    uint64_t result = *(unsigned __int16 *)(*(void *)(v9 + 1792) + 2 * v15);
    if (result == 0x4000) {
      uint64_t result = sub_100015A48(v9, v15);
    }
    int v16 = (__int16)(result + v12 - v8);
    *(_WORD *)(a3 + 4) = result + v12 - v8;
    BOOL v13 = v16 < 0x4000;
    if (v16 >= 0x4000) {
      __int16 v14 = 0x4000;
    }
    else {
      __int16 v14 = v16;
    }
    if (*(a2 - 4) != *a2) {
      goto LABEL_23;
    }
  }
  else
  {
    BOOL v13 = 0;
    __int16 v14 = 0x4000;
    *(_WORD *)(a3 + 4) = 0x4000;
    if (*(a2 - 4) != *a2) {
      goto LABEL_23;
    }
  }
  if (*((unsigned __int8 *)a2 - 1) + 1 == *((unsigned __int8 *)a2 + 7))
  {
    if ((__int16)a2[1] >= (__int16)(*(_WORD *)(a1 + 564) + a2[*(int *)(a1 + 528) - 4])) {
      signed __int16 v17 = *(_WORD *)(a1 + 564) + a2[*(int *)(a1 + 528) - 4];
    }
    else {
      signed __int16 v17 = a2[1];
    }
    if (v7 < v17) {
      goto LABEL_24;
    }
    goto LABEL_18;
  }
LABEL_23:
  signed __int16 v17 = a2[1];
  if (v7 < v17)
  {
LABEL_24:
    *(_WORD *)(a3 + 2) = 0x4000;
    goto LABEL_25;
  }
LABEL_18:
  uint64_t v18 = *v11;
  uint64_t result = *(unsigned __int16 *)(*(void *)(v9 + 1792) + 2 * v18);
  if (result == 0x4000) {
    uint64_t result = sub_100015A48(v9, v18);
  }
  *(_WORD *)(a3 + 2) = result + v17 - v8;
  if ((__int16)(result + v17 - v8) < v14) {
    BOOL v13 = 0;
  }
LABEL_25:
  *(unsigned char *)(a3 + 6) = v13;
  *(unsigned char *)(a3 + 7) = *((unsigned char *)a2 + 7);
  return result;
}

uint64_t sub_100059DE0(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(__int16 *)(a3 + 2 * *(int *)(result + 528));
  if (v4 >= a4) {
    return result;
  }
  uint64_t v5 = result;
  unsigned int v6 = *(unsigned __int16 *)(a2 + 2);
  int v7 = *(unsigned __int16 *)(result + 806) + v4;
  if (*(_DWORD *)(result + 608)) {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(result + 376);
  if (!qword_100101CC0)
  {
    if (!v8) {
      goto LABEL_3;
    }
    goto LABEL_11;
  }
  if (*(_DWORD *)(qword_100101CC0 + 5264))
  {
    LOWORD(v7) = v7 + *(unsigned __int8 *)(result + 664);
    goto LABEL_3;
  }
  if (v8 && !*(_DWORD *)(qword_100101CC0 + 1776))
  {
LABEL_11:
    unsigned int v9 = sub_1000BD964(*(void *)(result + 376), *(unsigned __int16 *)(a2 + 2), 0);
    v7 += sub_1000BDCD4(v8, v5 + 580, *(_DWORD *)(v5 + 584), v9);
    if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 5360)) {
      LOWORD(v7) = v7 - sub_100064068(v8, v9, *(unsigned __int8 *)(v5 + 664)) + *(unsigned __int8 *)(v5 + 664);
    }
  }
LABEL_3:
  return sub_100053D8C(v5, (__int16)v7, v6);
}

uint64_t sub_100059EFC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C321C(*(void *)(result + 48));
    sub_1000C321C(*(void *)(v1 + 16));
    sub_1000C321C(*(void *)(v1 + 32));
    return sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_100059F50(int *a1, _WORD *a2)
{
  uint64_t v2 = *a1;
  if ((int)v2 >= 0) {
    int v3 = *a1;
  }
  else {
    int v3 = v2 + 1;
  }
  unsigned int v4 = v3 >> 1;
  if ((v2 + 1) >= 3)
  {
    unsigned int v9 = (unsigned __int16 *)*((void *)a1 + 5);
    uint64_t v10 = a2;
    int v11 = v3 >> 1;
    do
    {
      int v12 = *v9++;
      BOOL v13 = &a2[v12];
      if (v10 < v13)
      {
        int v14 = *(_DWORD *)v13;
        *BOOL v13 = *v10;
        v13[1] = v10[1];
        *(_DWORD *)uint64_t v10 = v14;
      }
      v10 += 2;
      --v11;
    }
    while (v11);
  }
  if (v4 >= 2)
  {
    uint64_t v5 = a2 + 2;
    unsigned int v6 = v4 >> 1;
    uint64_t v7 = (v4 >> 1) - 1;
    if (v7 >= 7)
    {
      uint64_t v15 = v7 + 1;
      uint64_t v16 = (v7 + 1) & 0x1FFFFFFF8;
      v5 += 4 * v16;
      uint64_t v8 = &a2[4 * v16];
      v6 -= v16;
      v17.i64[0] = 0x100000001;
      v17.i64[1] = 0x100000001;
      uint64_t v18 = v16;
      __int16 v19 = a2;
      do
      {
        int16x8x4_t v80 = vld4q_s16(v19);
        v81.val[3] = vuzp1q_s16((int16x8_t)vhaddq_s32(vsubl_s16(*(int16x4_t *)v80.val[1].i8, *(int16x4_t *)v80.val[3].i8), v17), (int16x8_t)vhaddq_s32(vsubl_high_s16(v80.val[1], v80.val[3]), v17));
        v81.val[1] = vrhaddq_s16(v80.val[1], v80.val[3]);
        v81.val[2] = vuzp1q_s16((int16x8_t)vhaddq_s32(vsubl_s16(*(int16x4_t *)v80.val[0].i8, *(int16x4_t *)v80.val[2].i8), v17), (int16x8_t)vhaddq_s32(vsubl_high_s16(v80.val[0], v80.val[2]), v17));
        v81.val[0] = vrhaddq_s16(v80.val[0], v80.val[2]);
        vst4q_s16(v19, v81);
        v19 += 32;
        v18 -= 8;
      }
      while (v18);
      if (v15 == v16)
      {
LABEL_17:
        if (v4 >= 4)
        {
          unsigned int v26 = v4 >> 2;
          uint64_t v27 = a2 + 5;
          unsigned int v28 = v4 >> 2;
          do
          {
            int v29 = *v27;
            int v30 = *(v27 - 4) + 1;
            *uint64_t v27 = (v30 - v29) >> 1;
            *(v27 - 4) = (v30 + v29) >> 1;
            int v31 = *(v27 - 1);
            int v32 = *(v27 - 5) + 1;
            *(v27 - 1) = (v32 - v31) >> 1;
            *(v27 - 5) = (v32 + v31) >> 1;
            v27 += 8;
            --v28;
          }
          while (v28);
          uint64_t v33 = a2 + 6;
          do
          {
            int v34 = *v33;
            int v35 = v33[1];
            int v36 = *(v33 - 3) + 1;
            v33[1] = (v36 + v34) >> 1;
            *(v33 - 3) = (v36 - v34) >> 1;
            int v37 = *(v33 - 4) + 1;
            *uint64_t v33 = (v37 - v35) >> 1;
            *(v33 - 4) = (v37 + v35) >> 1;
            v33 += 8;
            --v26;
          }
          while (v26);
        }
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v8 = a2;
    }
    signed __int16 v20 = v5 + 1;
    __int16 v21 = v8 + 1;
    do
    {
      int v22 = *v20;
      int v23 = *v21 + 1;
      *signed __int16 v20 = (v23 - v22) >> 1;
      *__int16 v21 = (v23 + v22) >> 1;
      int v24 = *(v20 - 1);
      int v25 = *(v21 - 1) + 1;
      *(v20 - 1) = (v25 - v24) >> 1;
      *(v21 - 1) = (v25 + v24) >> 1;
      v20 += 4;
      v21 += 4;
      --v6;
    }
    while (v6);
    goto LABEL_17;
  }
LABEL_22:
  unsigned int v38 = v4 & 0xFFFFFFFC;
  int v39 = a1[1];
  if (v39 >= 3 && v38)
  {
    int v40 = v39 - 2;
    int v41 = (int)v2 / 8;
    unsigned int v42 = -(v4 & 0xFFFFFFFC);
    unsigned int v43 = 4;
    do
    {
      uint64_t v44 = 0;
      int v45 = 4 * v43;
      if (v43 <= 1) {
        uint64_t v46 = 1;
      }
      else {
        uint64_t v46 = v43;
      }
      v43 *= 2;
      uint64_t v47 = (__int16 *)*((void *)a1 + 3);
      uint64_t v48 = (int)v43;
      uint64_t v49 = 2 * v45;
      uint64_t v50 = a2;
      do
      {
        unsigned int v51 = v42;
        __int16 v52 = v50;
        do
        {
          int v53 = &v52[v48];
          int v54 = v52[v43];
          int v55 = v47[1];
          int v56 = v52[v48 + 1];
          int v57 = *v47;
          int v58 = v55 * v54 + v57 * v56;
          int v59 = v57 * v54 - v56 * v55;
          int v60 = (*v52 << 15) + 0x8000;
          __int16 *v53 = (v60 - v59) >> 16;
          *__int16 v52 = (v60 + v59) >> 16;
          int v61 = (v52[1] << 15) + 0x8000;
          v53[1] = (v61 - v58) >> 16;
          v52[1] = (v61 + v58) >> 16;
          __int16 v52 = (__int16 *)((char *)v52 + v49);
          v51 += v43;
        }
        while (v51);
        v47 += v41;
        ++v44;
        v50 += 2;
      }
      while (v44 != v46);
      if (v41 >= 0) {
        int v62 = v41;
      }
      else {
        int v62 = v41 + 1;
      }
      int v41 = v62 >> 1;
      BOOL v63 = __OFSUB__(v40--, 1);
    }
    while (!((v40 < 0) ^ v63 | (v40 == 0)));
  }
  a2[v2] = *a2 - a2[1];
  a2[(int)v2 + 1] = 0;
  *a2 += a2[1];
  a2[1] = 0;
  int v64 = v2 - 2;
  int v65 = 1 - (v38 >> 1);
  int v66 = a2 + 3;
  uint64_t v67 = (__int16 *)(*((void *)a1 + 1) + 6);
  uint64_t v68 = &a2[v64 + 1];
  do
  {
    int v69 = *v68 + *v66;
    int v70 = *v67;
    int v71 = *(v67 - 1);
    int v72 = *(v66 - 1);
    int v73 = *(v68 - 1);
    int v74 = v69 * v70 - (v72 - v73) * v71;
    int v75 = 0x4000 - (v69 * v71 + (v72 - v73) * v70);
    int v76 = ((v73 + v72) << 14) + 0x4000;
    *(v66 - 1) = (v76 + v74) >> 15;
    *(v68 - 1) = (v76 - v74) >> 15;
    int v77 = (*v66 - *v68) << 14;
    *int v66 = (v77 + v75) >> 15;
    v66 += 2;
    *uint64_t v68 = (v75 - v77) >> 15;
    v68 -= 2;
    v67 += 2;
  }
  while (!__CFADD__(v65++, 1));
  return a1[1];
}

void *sub_10005A368(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1000BEC58(a1, "bfc0", a2, a4, a5, a6, a7, a8);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    uint64_t v10 = (void *)sub_1000C33A0(56);
    if (v10)
    {
      if (!sub_1000BEECC(v9, v10)) {
        goto LABEL_17;
      }
      if (!sub_1000BEECC(v9, (char *)v10 + 4)) {
        goto LABEL_17;
      }
      int v17 = 0;
      int v11 = v10 + 2;
      if (!sub_1000BF078(v9, 2, v10 + 2, &v17)) {
        goto LABEL_17;
      }
      if (*v11)
      {
        if (v17 != *(_DWORD *)v10) {
          goto LABEL_17;
        }
        v10[1] = *v11;
      }
      int v16 = 0;
      int v12 = v10 + 4;
      if (!sub_1000BF078(v9, 2, v10 + 4, &v16)) {
        goto LABEL_17;
      }
      if (*v12)
      {
        if (v16 != *(_DWORD *)v10 / 2) {
          goto LABEL_17;
        }
        v10[3] = *v12;
      }
      int v15 = 0;
      BOOL v13 = v10 + 6;
      if (!sub_1000BF078(v9, 2, v10 + 6, &v15)) {
        goto LABEL_17;
      }
      if (*v13)
      {
        if (v15 == *(_DWORD *)v10 / 2)
        {
          v10[5] = *v13;
          goto LABEL_18;
        }
LABEL_17:
        sub_1000C321C(v10[6]);
        sub_1000C321C(v10[2]);
        sub_1000C321C(v10[4]);
        sub_1000C321C((uint64_t)v10);
        uint64_t v10 = 0;
      }
    }
LABEL_18:
    sub_1000BED3C(v9);
    return v10;
  }
  return 0;
}

uint64_t sub_10005A4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000C33A0(32);
  if (!v4) {
    return v4;
  }
  uint64_t v5 = sub_1000C3740(1, a2, a1);
  *(void *)uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = sub_1000C33A0(4 * (int)a2);
    *(void *)(v4 + 8) = v6;
    if (v6)
    {
      *(_DWORD *)(v4 + 20) = a2;
      *(_DWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 16) = a1;
      return v4;
    }
    if (*(void *)v4)
    {
      sub_1000C3670(*(void *)v4);
      sub_1000C321C(*(void *)(v4 + 8));
    }
  }
  *(void *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 20) = 0;
  *(_DWORD *)(v4 + 24) = 0;
  sub_1000C321C(v4);
  return 0;
}

uint64_t sub_10005A59C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)a1;
    if (*(void *)a1)
    {
      sub_1000C3670(v2);
      sub_1000C321C(*(void *)(a1 + 8));
    }
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return sub_1000C321C(a1);
}

uint64_t sub_10005A5F0(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10005A5F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_10005A600(uint64_t a1, const void *a2, _DWORD *a3)
{
  uint64_t v3 = *(int *)(a1 + 24);
  if (*(_DWORD *)(a1 + 20) <= (int)v3) {
    return 0;
  }
  memcpy(*(void **)(*(void *)a1 + 8 * v3), a2, *(int *)(a1 + 16));
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * (int)(*(_DWORD *)(a1 + 24))++) = *a3;
  return 1;
}

uint64_t sub_10005A674(void *a1, int a2, void *a3)
{
  *a3 = a1[1] + 4 * a2;
  return *(void *)(*a1 + 8 * a2);
}

uint64_t (**sub_10005A68C(uint64_t (**result)(void)))(void)
{
  if (result) {
    return (uint64_t (**)(void))(*result)();
  }
  return result;
}

uint64_t sub_10005A69C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_10005A6A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a1 + 96))();
  (*(void (**)(uint64_t, uint64_t))(a1 + 8))(a1, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 104);
  return v5(a1, v4);
}

uint64_t sub_10005A708(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 104))();
}

uint64_t sub_10005A710(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_10005A718(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 24))();
}

uint64_t sub_10005A720(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10005A728(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 40))();
}

uint64_t sub_10005A730(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 48))();
}

uint64_t sub_10005A738(uint64_t a1)
{
  return *(unsigned int *)(a1 + 280);
}

uint64_t sub_10005A740(uint64_t a1)
{
  return *(unsigned int *)(a1 + 292);
}

uint64_t sub_10005A748(uint64_t a1)
{
  return *(unsigned int *)(a1 + 300);
}

uint64_t sub_10005A750(uint64_t a1)
{
  return *(unsigned int *)(a1 + 312);
}

uint64_t sub_10005A758(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 112))();
}

uint64_t sub_10005A760(uint64_t a1)
{
  return *(unsigned int *)(a1 + 316);
}

uint64_t sub_10005A768(uint64_t a1)
{
  return *(unsigned int *)(a1 + 304);
}

uint64_t sub_10005A770(uint64_t a1)
{
  return *(unsigned int *)(a1 + 360);
}

uint64_t sub_10005A778(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 128))();
}

uint64_t sub_10005A780(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 136))();
}

uint64_t sub_10005A788(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 144))();
}

uint64_t sub_10005A790(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 200))();
}

uint64_t sub_10005A798(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 224))();
}

uint64_t sub_10005A7A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 232))();
}

uint64_t sub_10005A7A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 240))();
}

uint64_t sub_10005A7B0(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v4 = sub_1000C085C(*(_DWORD *)(a1 + 280), 4, 0xFFFFFFFF);
  unsigned int v5 = sub_1000C085C(*(_DWORD *)(a1 + 292), 4, v4);
  unsigned int v6 = sub_1000C085C(*(_DWORD *)(a1 + 296), 4, v5);
  unsigned int v7 = sub_1000C085C(*(_DWORD *)(a1 + 300), 4, v6);
  unsigned int v8 = sub_1000C085C(*(_DWORD *)(a1 + 304), 4, v7);
  unsigned int v9 = sub_1000C085C(*(_DWORD *)(a1 + 312), 4, v8);
  unsigned int v10 = sub_1000C085C(*(_DWORD *)(a1 + 316), 4, v9);
  if (a2) {
    unsigned int v10 = sub_1000C085C(*(_DWORD *)(a1 + 320), 4, v10);
  }
  unsigned int v11 = sub_1000C085C(*(_DWORD *)(a1 + 324), 4, v10);
  unsigned int v12 = sub_1000C085C(*(_DWORD *)(a1 + 328), 4, v11);
  unsigned int v13 = sub_1000C085C(*(_DWORD *)(a1 + 332), 4, v12);
  unsigned int v14 = sub_1000C085C(*(_DWORD *)(a1 + 340), 4, v13);
  unsigned int v15 = sub_1000C085C(*(_DWORD *)(a1 + 344), 4, v14);
  unsigned int v16 = sub_1000C085C(*(_DWORD *)(a1 + 348), 4, v15);
  unsigned int v17 = sub_1000C085C(*(_DWORD *)(a1 + 352), 4, v16);
  unsigned int v18 = sub_1000C085C(*(_DWORD *)(a1 + 356), 4, v17);
  uint64_t v19 = sub_1000C085C(*(_DWORD *)(a1 + 360), 4, v18);
  signed __int16 v20 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 264);
  if (!v20) {
    return v19;
  }
  unsigned int v21 = v20(a1, a2);
  return sub_1000C085C(v21, 4, v19);
}

uint64_t sub_10005A93C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 248))();
}

uint64_t sub_10005A944(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 256))();
}

uint64_t sub_10005A94C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = sub_1000BEC58(a1, "bfty", a2, a4, a5, a6, a7, a8);
  if (v10)
  {
    uint64_t v11 = (uint64_t)v10;
    int v21 = 0;
    if (!sub_1000BEE7C((uint64_t)v10, &v21) || v21 == 0)
    {
      sub_1000BED3C(v11);
    }
    else
    {
      uint64_t v19 = sub_10005AAA0(a1, a2, v12, v13, v14, v15, v16, v17);
      sub_1000BED3C(v11);
      if (v19) {
        return v19;
      }
    }
  }
  return 0;
}

uint64_t sub_10005A9FC(uint64_t a1)
{
  sub_1000C321C(*(void *)(a1 + 376));
  sub_1000C321C(*(void *)(a1 + 384));
  sub_1000C3670(*(void *)(a1 + 368));
  sub_1000C321C(*(void *)(a1 + 392));
  sub_1000A33C4(*(void *)(a1 + 408));
  sub_100021064(*(void *)(a1 + 416));
  sub_100022168(*(void *)(a1 + 424));
  sub_100060D50(*(void *)(a1 + 448));
  sub_100060D50(*(void *)(a1 + 456));
  if (*(_DWORD *)(a1 + 340)) {
    sub_100022EE0(*(void *)(a1 + 432));
  }
  if (*(_DWORD *)(a1 + 344))
  {
    sub_100006A98(*(void *)(a1 + 440));
    sub_1000C3670(*(void *)(a1 + 400));
  }
  return sub_1000C321C(a1);
}

uint64_t sub_10005AAA0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = sub_1000BEC58(a1, "bfx1", a2, a4, a5, a6, a7, a8);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = (uint64_t (**)(uint64_t))sub_1000C33A0(520);
  uint64_t v13 = (uint64_t)v12;
  if (v12)
  {
    void *v12 = sub_10005A9FC;
    v12[1] = (uint64_t (*)(uint64_t))sub_10005AFD4;
    v12[2] = sub_10005B0AC;
    v12[3] = (uint64_t (*)(uint64_t))sub_10005B0B8;
    v12[4] = (uint64_t (*)(uint64_t))sub_10005B1F4;
    v12[5] = sub_10005B2D4;
    v12[6] = (uint64_t (*)(uint64_t))sub_10005B468;
    v12[7] = (uint64_t (*)(uint64_t))sub_10005B54C;
    v12[8] = (uint64_t (*)(uint64_t))sub_10005B9C4;
    v12[9] = (uint64_t (*)(uint64_t))sub_10005BAA8;
    v12[10] = sub_10005BC08;
    v12[11] = sub_10005BC90;
    v12[12] = sub_10005BC98;
    v12[13] = (uint64_t (*)(uint64_t))sub_10005BCA0;
    v12[14] = sub_10005BCA8;
    v12[16] = (uint64_t (*)(uint64_t))sub_10005BD4C;
    v12[17] = (uint64_t (*)(uint64_t))sub_10005C124;
    v12[18] = (uint64_t (*)(uint64_t))sub_10005C2A8;
    v12[19] = sub_10005C2C8;
    v12[20] = (uint64_t (*)(uint64_t))sub_10005C350;
    v12[21] = (uint64_t (*)(uint64_t))sub_10005C358;
    v12[22] = (uint64_t (*)(uint64_t))sub_10005C360;
    v12[23] = (uint64_t (*)(uint64_t))sub_10005C368;
    v12[24] = sub_10005C370;
    v12[25] = (uint64_t (*)(uint64_t))sub_10005C378;
    v12[26] = sub_10005C46C;
    v12[28] = (uint64_t (*)(uint64_t))sub_10005C474;
    v12[29] = (uint64_t (*)(uint64_t))sub_10005C47C;
    v12[30] = (uint64_t (*)(uint64_t))sub_10005C5D0;
    v12[31] = (uint64_t (*)(uint64_t))sub_10005C704;
    v12[32] = (uint64_t (*)(uint64_t))sub_10005C790;
    v12[33] = 0;
    if (!sub_1000BEECC(v11, v12 + 35)
      || !sub_1000BEECC(v11, (void *)(v13 + 284))
      || !sub_1000BEECC(v11, (void *)(v13 + 288))
      || !sub_1000BEECC(v11, (void *)(v13 + 292))
      || !sub_1000BEECC(v11, (void *)(v13 + 296))
      || !sub_1000BEECC(v11, (void *)(v13 + 300))
      || !sub_1000BEECC(v11, (void *)(v13 + 304))
      || !sub_1000BEECC(v11, (void *)(v13 + 308))
      || !sub_1000BEECC(v11, (void *)(v13 + 312))
      || !sub_1000BEECC(v11, (void *)(v13 + 316))
      || !sub_1000BEECC(v11, (void *)(v13 + 320))
      || !sub_1000BEECC(v11, (void *)(v13 + 324))
      || !sub_1000BEECC(v11, (void *)(v13 + 328))
      || !sub_1000BEECC(v11, (void *)(v13 + 332))
      || !sub_1000BEE7C(v11, (_DWORD *)(v13 + 340))
      || (uint64_t v14 = (_DWORD *)(v13 + 344), !sub_1000BEE7C(v11, (_DWORD *)(v13 + 344)))
      || !sub_1000BEE7C(v11, (_DWORD *)(v13 + 348))
      || !sub_1000BEE7C(v11, (_DWORD *)(v13 + 352))
      || !sub_1000BEE7C(v11, (_DWORD *)(v13 + 356)))
    {
      sub_1000BED3C(v11);
      *(_DWORD *)(v13 + 484) = 3;
      *(_DWORD *)(v13 + 492) = 0;
LABEL_30:
      sub_10005A9FC(v13);
      return 0;
    }
    BOOL v15 = sub_1000BEE7C(v11, (_DWORD *)(v13 + 360));
    sub_1000BED3C(v11);
    *(_DWORD *)(v13 + 484) = 3;
    *(_DWORD *)(v13 + 492) = 0;
    if (!v15) {
      goto LABEL_30;
    }
    uint64_t v22 = sub_1000A3474(a1, a2, v16, v17, v18, v19, v20, v21);
    *(void *)(v13 + 408) = v22;
    if (!v22) {
      goto LABEL_30;
    }
    uint64_t v29 = sub_1000219EC(a1, a2, v23, v24, v25, v26, v27, v28);
    *(void *)(v13 + 416) = v29;
    if (!v29) {
      goto LABEL_30;
    }
    uint64_t v36 = sub_100022C38(a1, a2, v30, v31, v32, v33, v34, v35);
    *(void *)(v13 + 424) = v36;
    if (!v36) {
      goto LABEL_30;
    }
    if (*(_DWORD *)(v13 + 340))
    {
      uint64_t v43 = sub_100023410(a1, a2, v37, v38, v39, v40, v41, v42);
      *(void *)(v13 + 432) = v43;
      if (!v43) {
        goto LABEL_30;
      }
    }
    else
    {
      *(void *)(v13 + 432) = 0;
    }
    if (*v14)
    {
      uint64_t v45 = sub_1000220A0(a1, a2, v37, v38, v39, v40, v41, v42);
      *(void *)(v13 + 440) = v45;
      if (!v45) {
        goto LABEL_30;
      }
    }
    else
    {
      *(void *)(v13 + 440) = 0;
    }
    uint64_t v46 = sub_100060F8C(a1, a2, (void *)(v13 + 456), v38, v39, v40, v41, v42);
    *(void *)(v13 + 448) = v46;
    if (!v46) {
      goto LABEL_30;
    }
    int v47 = sub_10005A798(v13);
    uint64_t v48 = sub_1000C33A0(v47);
    *(void *)(v13 + 392) = v48;
    if (!v48) {
      goto LABEL_30;
    }
    unsigned int v49 = *(_DWORD *)(v13 + 320);
    if (*(_DWORD *)(v13 + 352)) {
      uint64_t v50 = v49 + 100;
    }
    else {
      uint64_t v50 = *(_DWORD *)(v13 + 356) ? v49 + 1000 : v49;
    }
    uint64_t v51 = sub_1000C3740(2, v50, *(unsigned int *)(v13 + 304));
    *(void *)(v13 + 368) = v51;
    if (!v51) {
      goto LABEL_30;
    }
    uint64_t v52 = sub_1000C33A0((int)v50);
    *(void *)(v13 + 384) = v52;
    if (!v52) {
      goto LABEL_30;
    }
    uint64_t v53 = sub_1000C33A0(2 * *(int *)(v13 + 304));
    *(void *)(v13 + 376) = v53;
    if (!v53) {
      goto LABEL_30;
    }
    if (!*v14)
    {
      *(void *)(v13 + 400) = 0;
      return v13;
    }
    int v54 = sub_100022094(*(void *)(v13 + 440));
    uint64_t v55 = sub_1000C3740(2, v50, (v54 + 1));
    *(void *)(v13 + 400) = v55;
    if (!v55) {
      goto LABEL_30;
    }
  }
  return v13;
}

void sub_10005AFD4(uint64_t a1, int a2)
{
  if (!a2)
  {
    *(void *)(a1 + 476) = 0;
    *(void *)(a1 + 508) = 0;
    *(_DWORD *)(a1 + 464) = 0;
    *(_DWORD *)(a1 + 468) = *(_DWORD *)(a1 + 320) - *(_DWORD *)(a1 + 324);
    *(_DWORD *)(a1 + 500) = 0;
    sub_1000221DC(*(void *)(a1 + 424));
  }
  if (*(_DWORD *)(a1 + 340)) {
    sub_100022F40(*(int **)(a1 + 432), a2);
  }
  if (a2)
  {
    sub_1000A39E8(*(void *)(a1 + 408), 0);
    goto LABEL_9;
  }
  sub_1000A3658(*(void *)(a1 + 408));
  sub_1000A39E8(*(void *)(a1 + 408), 0);
  if (!*(_DWORD *)(a1 + 344))
  {
LABEL_9:
    if (a2) {
      return;
    }
    goto LABEL_10;
  }
  sub_100021B80(*(void *)(a1 + 440));
LABEL_10:
  unsigned int v4 = *(void **)(a1 + 384);
  size_t v5 = *(int *)(a1 + 320);
  bzero(v4, v5);
}

uint64_t sub_10005B0AC(uint64_t result)
{
  *(_DWORD *)(result + 336) = 1;
  return result;
}

uint64_t sub_10005B0B8(uint64_t a1, int a2)
{
  *(void *)(a1 + 352) = 0;
  uint64_t result = sub_100022294(*(void *)(a1 + 424));
  int v5 = *(_DWORD *)(a1 + 464);
  int v6 = v5 - *(_DWORD *)(a1 + 468);
  if (v6 < 0) {
    v6 += *(_DWORD *)(a1 + 320);
  }
  int v7 = (2 * *(_DWORD *)(a1 + 324)) | 1;
  if (v6 <= v7) {
    int v7 = 0;
  }
  int v8 = v6 - v7;
  if (v8 >= a2 / *(_DWORD *)(a1 + 284)) {
    int v8 = a2 / *(_DWORD *)(a1 + 284);
  }
  int v9 = v5 + ~v8;
  if (v9 < 0)
  {
    v9 += *(_DWORD *)(a1 + 320);
    *(_DWORD *)(a1 + 468) = v9;
    if (v9 == v5) {
      return result;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 468) = v9;
    if (v9 == v5) {
      return result;
    }
  }
  BOOL v10 = v8 > *(_DWORD *)(a1 + 332);
  do
  {
    uint64_t v12 = v9;
    if ((*(unsigned char *)(*(void *)(a1 + 384) + v9) & 4) != 0)
    {
      int v13 = *(_DWORD *)(a1 + 332) + v9;
      int v14 = *(_DWORD *)(a1 + 320);
      if (v13 < v14) {
        int v14 = 0;
      }
      int v15 = v13 - v14;
      uint64_t result = (uint64_t)sub_100023024(*(int **)(a1 + 432), *(__int16 **)(*(void *)(a1 + 368) + 8 * v12), *(void *)(a1 + 424));
      int v5 = *(_DWORD *)(a1 + 464);
      if (v15 == v5 || !v10)
      {
        BOOL v10 = 0;
      }
      else
      {
        *(unsigned char *)(*(void *)(a1 + 384) + v12) |= 0x10u;
        int v5 = *(_DWORD *)(a1 + 464);
        BOOL v10 = 1;
      }
    }
    int v11 = *(_DWORD *)(a1 + 320);
    if ((int)v12 + 1 < v11) {
      int v11 = 0;
    }
    int v9 = v12 + 1 - v11;
  }
  while (v9 != v5);
  return result;
}

void sub_10005B1F4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 484) = 3;
  *(_DWORD *)(a1 + 492) = 0;
  *(void *)(a1 + 496) = 0;
  uint64_t v4 = qword_100101CC0;
  if (*(_DWORD *)(a1 + 340))
  {
    if (qword_100101CC0) {
      int v5 = *(_DWORD *)(qword_100101CC0 + 2744);
    }
    else {
      int v5 = 0;
    }
    *(_DWORD *)(a1 + 332) = v5;
    *(_DWORD *)(a1 + 336) = 0;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 352) = *(_DWORD *)(v4 + 2908);
    LODWORD(v4) = *(_DWORD *)(v4 + 2452);
  }
  else
  {
    *(_DWORD *)(a1 + 352) = 0;
  }
  *(_DWORD *)(a1 + 356) = v4;
  *(_DWORD *)(a1 + 488) = a2 != 0;
  sub_1000A3660(*(void *)(a1 + 408));
  sub_1000222B0(*(void *)(a1 + 424), a2);
  bzero(*(void **)(a1 + 384), *(int *)(a1 + 320));
  int v6 = *(_DWORD *)(a1 + 320) - *(_DWORD *)(a1 + 324);
  *(_DWORD *)(a1 + 468) = v6;
  if (*(_DWORD *)(a1 + 352) || *(_DWORD *)(a1 + 356)) {
    *(_DWORD *)(a1 + 472) = v6;
  }
  *(_DWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 476) = 0;
  *(void *)(a1 + 508) = 0;
}

uint64_t sub_10005B2D4(uint64_t a1)
{
  uint64_t result = nullsub_1(*(void *)(a1 + 408));
  int v3 = *(_DWORD *)(a1 + 492);
  if (*(_DWORD *)(a1 + 340))
  {
    if (v3)
    {
LABEL_3:
      int v4 = 2;
LABEL_18:
      *(_DWORD *)(a1 + 484) = v4;
    }
  }
  else
  {
    if (v3 && !*(_DWORD *)(a1 + 348) && !*(_DWORD *)(a1 + 496)) {
      goto LABEL_3;
    }
    if (*(_DWORD *)(a1 + 488))
    {
      if (*(_DWORD *)(a1 + 348))
      {
        int v5 = *(_DWORD *)(a1 + 464);
        int v6 = v5 - *(_DWORD *)(a1 + 324);
        if (v6 < 0) {
          v6 += *(_DWORD *)(a1 + 320);
        }
        if (v6 != v5)
        {
          uint64_t v10 = *(void *)(a1 + 384);
          int v11 = (unsigned char *)(v10 + v6);
          do
          {
            if ((*v11 & 4) == 0)
            {
              int v12 = sub_1000210B8(*(int **)(a1 + 416), *(void *)(a1 + 368), v5, *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 476), 1);
              uint64_t v10 = *(void *)(a1 + 384);
              if (v12)
              {
                sub_100022330(*(void *)(a1 + 424), *(void *)(*(void *)(a1 + 368) + 8 * v6), *(unsigned char *)(v10 + v6));
                *v11++ |= 4u;
                uint64_t v13 = *(int *)(a1 + 320);
                if (v5 + 1 < (int)v13) {
                  ++v5;
                }
                else {
                  int v5 = 0;
                }
                if (v6 + 1 < (int)v13) {
                  ++v6;
                }
                else {
                  int v6 = 0;
                }
                uint64_t v10 = *(void *)(a1 + 384);
                if ((unint64_t)v11 >= v10 + v13) {
                  int v11 = *(unsigned char **)(a1 + 384);
                }
              }
            }
          }
          while (v11 != (unsigned char *)(v10 + *(int *)(a1 + 464)));
        }
      }
      uint64_t result = sub_1000223E8(*(void *)(a1 + 424));
      if (result)
      {
        uint64_t v7 = *(int *)(a1 + 468);
        int v8 = (unsigned char *)(*(void *)(a1 + 384) + v7);
        if (v7 != *(_DWORD *)(a1 + 464))
        {
          do
          {
            *v8++ |= 8u;
            uint64_t v9 = *(void *)(a1 + 384);
            if ((unint64_t)v8 >= v9 + *(int *)(a1 + 320)) {
              int v8 = *(unsigned char **)(a1 + 384);
            }
          }
          while (v8 != (unsigned char *)(v9 + *(int *)(a1 + 464)));
        }
        *v8 |= 8u;
        int v4 = 6;
        goto LABEL_18;
      }
    }
  }
  *(_DWORD *)(a1 + 492) = 1;
  return result;
}

uint64_t sub_10005B468(uint64_t a1, __int16 *a2)
{
  if (*(_DWORD *)(a1 + 352) || *(_DWORD *)(a1 + 356))
  {
    int v3 = *(_DWORD *)(a1 + 468);
    int v4 = *(_DWORD *)(a1 + 464);
    int v5 = v3 - v4;
    if (v3 - v4 >= 0)
    {
      if (v5 > 1) {
        goto LABEL_11;
      }
LABEL_7:
      if (v3 + 1 < *(_DWORD *)(a1 + 320)) {
        int v6 = v3 + 1;
      }
      else {
        int v6 = 0;
      }
      *(_DWORD *)(a1 + 468) = v6;
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 320) + v5 <= 1) {
      goto LABEL_7;
    }
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 464);
    if (v4 == *(_DWORD *)(a1 + 468))
    {
      *(_DWORD *)(a1 + 500) = 1;
      return 4;
    }
    if (*(_DWORD *)(a1 + 500) == 1) {
      return 4;
    }
  }
LABEL_11:
  uint64_t v7 = sub_1000A36C4(*(void *)(a1 + 408), a2, *(void **)(*(void *)(a1 + 368) + 8 * v4), (unsigned char *)(*(void *)(a1 + 384) + v4));
  return sub_10005C838(a1, v7);
}

uint64_t sub_10005B54C(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  if (!*(_DWORD *)(a1 + 352) && !*(_DWORD *)(a1 + 356))
  {
    int v8 = *(_DWORD *)(a1 + 464);
    if (v8 == *(_DWORD *)(a1 + 468))
    {
      *(_DWORD *)(a1 + 500) = 1;
    }
    else if (*(_DWORD *)(a1 + 500) != 1)
    {
      goto LABEL_11;
    }
    return 4;
  }
  int v7 = *(_DWORD *)(a1 + 468);
  int v8 = *(_DWORD *)(a1 + 464);
  int v9 = v7 - v8;
  if (v7 - v8 < 0)
  {
    if (*(_DWORD *)(a1 + 320) + v9 > 1) {
      goto LABEL_11;
    }
  }
  else if (v9 > 1)
  {
    goto LABEL_11;
  }
  if (v7 + 1 < *(_DWORD *)(a1 + 320)) {
    int v10 = v7 + 1;
  }
  else {
    int v10 = 0;
  }
  *(_DWORD *)(a1 + 468) = v10;
LABEL_11:
  if (a3 >= 1)
  {
    uint64_t v11 = 0;
    float v12 = (float)(1 << *(_DWORD *)(a1 + 308));
    do
    {
      int v13 = vcvtmd_s64_f64((float)(*(float *)(a2 + 4 * v11) * v12) + 0.5);
      if (v13 >= 0x7FFF) {
        int v13 = 0x7FFF;
      }
      if (v13 <= -32768) {
        LOWORD(v13) = 0x8000;
      }
      *(_WORD *)(*(void *)(*(void *)(a1 + 368) + 8 * v8) + 2 * v11++) = v13;
    }
    while (a3 != v11);
  }
  if (a4)
  {
    if (a5) {
      *(unsigned char *)(*(void *)(a1 + 384) + v8) = 3;
    }
    if (*(_DWORD *)(a1 + 352)) {
      goto LABEL_22;
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 384) + v8) = sub_1000A39D0(*(void *)(a1 + 408), **(__int16 **)(*(void *)(a1 + 368) + 8 * v8));
    if (*(_DWORD *)(a1 + 352))
    {
LABEL_22:
      sub_100022FEC(*(void *)(a1 + 432), **(__int16 **)(*(void *)(a1 + 368) + 8 * v8));
      goto LABEL_29;
    }
  }
  if (*(_DWORD *)(a1 + 340)
    && (!qword_100101CC0
     || !*(_DWORD *)(qword_100101CC0 + 2440)
     || *(void *)(qword_100101CC0 + 2376) > *(int *)(a1 + 480)))
  {
    sub_100023024(*(int **)(a1 + 432), *(__int16 **)(*(void *)(a1 + 368) + 8 * v8), *(void *)(a1 + 424));
  }
LABEL_29:
  uint64_t v14 = *(void *)(a1 + 384);
  if (*(unsigned char *)(v14 + v8))
  {
    ++*(_DWORD *)(a1 + 480);
    int v15 = v8 - *(_DWORD *)(a1 + 324);
    if (v15 >= 0)
    {
LABEL_31:
      if (*(_DWORD *)(a1 + 304) == a3) {
        goto LABEL_32;
      }
      goto LABEL_45;
    }
  }
  else
  {
    int v15 = v8 - *(_DWORD *)(a1 + 324);
    if (v15 >= 0) {
      goto LABEL_31;
    }
  }
  v15 += *(_DWORD *)(a1 + 320);
  if (*(_DWORD *)(a1 + 304) == a3)
  {
LABEL_32:
    *(_DWORD *)(a1 + 496) = 1;
    if (*(_DWORD *)(a1 + 476) == 1) {
      *(_DWORD *)(a1 + 468) = 0;
    }
    if ((*(unsigned char *)(v14 + v8) & 2) != 0) {
      uint64_t v16 = 5;
    }
    else {
      uint64_t v16 = 6;
    }
    *(unsigned char *)(v14 + v8) |= 4u;
    if (*(_DWORD *)(a1 + 488)) {
      sub_100022330(*(void *)(a1 + 424), *(void *)(*(void *)(a1 + 368) + 8 * v8), *(unsigned char *)(*(void *)(a1 + 384) + v8));
    }
    if (!*(_DWORD *)(a1 + 340)) {
      goto LABEL_67;
    }
    if (*(_DWORD *)(a1 + 352)) {
      goto LABEL_67;
    }
    int v17 = *(_DWORD *)(a1 + 332);
    if (*(_DWORD *)(a1 + 476) < v17) {
      goto LABEL_67;
    }
LABEL_56:
    int v21 = v15 - v17;
    if (v21 < 0) {
      v21 += *(_DWORD *)(a1 + 320);
    }
    *(unsigned char *)(*(void *)(a1 + 384) + v21) |= 0x10u;
    if (*(_DWORD *)(a1 + 336))
    {
      int v22 = *(_DWORD *)(a1 + 332);
      if (v22 >= 2)
      {
        *(_DWORD *)(a1 + 332) = v22 - 1;
        int v23 = *(_DWORD *)(a1 + 320);
        if (v21 < v23) {
          int v23 = 0;
        }
        *(unsigned char *)(*(void *)(a1 + 384) + v21 - v23 + 1) |= 0x10u;
      }
    }
    goto LABEL_67;
  }
LABEL_45:
  if (!sub_1000210B8(*(int **)(a1 + 416), *(void *)(a1 + 368), v8, *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 476), *(_DWORD *)(a1 + 492)))
  {
    int v24 = *(_DWORD *)(a1 + 468);
    if (v24 + 1 < *(_DWORD *)(a1 + 320)) {
      int v25 = v24 + 1;
    }
    else {
      int v25 = 0;
    }
    *(_DWORD *)(a1 + 468) = v25;
    uint64_t v16 = 3;
    goto LABEL_67;
  }
  uint64_t v18 = *(void *)(a1 + 384);
  if ((*(unsigned char *)(v18 + v8) & 2) != 0) {
    uint64_t v16 = 5;
  }
  else {
    uint64_t v16 = 6;
  }
  *(unsigned char *)(v18 + v15) |= 4u;
  if (*(_DWORD *)(a1 + 488)) {
    sub_100022330(*(void *)(a1 + 424), *(void *)(*(void *)(a1 + 368) + 8 * v15), *(unsigned char *)(*(void *)(a1 + 384) + v15));
  }
  if (*(_DWORD *)(a1 + 340))
  {
    if (!*(_DWORD *)(a1 + 352))
    {
      int v19 = *(_DWORD *)(a1 + 476);
      int v20 = *(_DWORD *)(a1 + 324);
      int v17 = *(_DWORD *)(a1 + 332);
      if (v19 >= v17 + 2 * v20 || *(_DWORD *)(a1 + 348) && v19 >= v17 + v20) {
        goto LABEL_56;
      }
    }
  }
LABEL_67:
  int v26 = *(_DWORD *)(a1 + 320);
  if (v8 + 1 < v26) {
    int v27 = v8 + 1;
  }
  else {
    int v27 = 0;
  }
  *(_DWORD *)(a1 + 464) = v27;
  ++*(_DWORD *)(a1 + 476);
  ++*(_DWORD *)(a1 + 508);
  int v28 = (v27 + v26 - *(_DWORD *)(a1 + 468)) % v26 - *(_DWORD *)(a1 + 324);
  if (*(_DWORD *)(a1 + 492))
  {
    if (v28 < 0) {
      goto LABEL_75;
    }
  }
  else
  {
    v28 -= *(_DWORD *)(a1 + 332);
    if (v28 < 0)
    {
LABEL_75:
      int v28 = 0;
      goto LABEL_76;
    }
  }
  if (sub_100022564(*(void *)(a1 + 424))) {
    goto LABEL_75;
  }
LABEL_76:
  if (v28 <= *(_DWORD *)(a1 + 516))
  {
    if (!*(_DWORD *)(a1 + 488)) {
      goto LABEL_78;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 516) = v28;
    if (!*(_DWORD *)(a1 + 488))
    {
LABEL_78:
      *(_DWORD *)(a1 + 484) = v16;
      return v16;
    }
  }
  return v16;
}

uint64_t sub_10005B9C4(uint64_t a1, const void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 352) || *(_DWORD *)(a1 + 356))
  {
    int v4 = *(_DWORD *)(a1 + 468);
    int v5 = *(_DWORD *)(a1 + 464);
    int v6 = v4 - v5;
    if (v4 - v5 >= 0)
    {
      if (v6 > 1) {
        goto LABEL_11;
      }
LABEL_7:
      if (v4 + 1 < *(_DWORD *)(a1 + 320)) {
        int v7 = v4 + 1;
      }
      else {
        int v7 = 0;
      }
      *(_DWORD *)(a1 + 468) = v7;
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 320) + v6 <= 1) {
      goto LABEL_7;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 464);
    if (v5 == *(_DWORD *)(a1 + 468))
    {
      *(_DWORD *)(a1 + 500) = 1;
      return 4;
    }
    if (*(_DWORD *)(a1 + 500) == 1) {
      return 4;
    }
  }
LABEL_11:
  uint64_t v8 = sub_1000A3938(*(void *)(a1 + 408), a2, a3, *(void **)(*(void *)(a1 + 368) + 8 * v5), (unsigned char *)(*(void *)(a1 + 384) + v5));
  return sub_10005C838(a1, v8);
}

uint64_t sub_10005BAA8(uint64_t a1, void *__dst)
{
  int v2 = *(_DWORD *)(a1 + 484);
  if (v2 == 2) {
    return 2;
  }
  if (*(_DWORD *)(a1 + 492))
  {
    *(_DWORD *)(a1 + 484) = 2;
    return 2;
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 512);
    if (*(_DWORD *)(a1 + 508) == v6)
    {
      return 4;
    }
    else
    {
      uint64_t v7 = v6 % *(_DWORD *)(a1 + 320);
      memcpy(__dst, *(const void **)(*(void *)(a1 + 368) + 8 * v7), 2 * *(int *)(a1 + 300));
      if ((*(unsigned char *)(*(void *)(a1 + 384) + v7) & 2) != 0) {
        uint64_t v3 = 5;
      }
      else {
        uint64_t v3 = 6;
      }
      ++*(_DWORD *)(a1 + 512);
      int v8 = *(_DWORD *)(a1 + 468);
      if (v2 == 3)
      {
        int v9 = *(_DWORD *)(a1 + 320);
      }
      else
      {
        int v9 = *(_DWORD *)(a1 + 320);
        if (v8 + 1 < v9) {
          ++v8;
        }
        else {
          int v8 = 0;
        }
        *(_DWORD *)(a1 + 468) = v8;
      }
      int v10 = (*(_DWORD *)(a1 + 464) - v8 + v9) % v9 - *(_DWORD *)(a1 + 324);
      if (!*(_DWORD *)(a1 + 492)) {
        v10 -= *(_DWORD *)(a1 + 332);
      }
      if (v10 < 0 || sub_100022564(*(void *)(a1 + 424))) {
        int v10 = 0;
      }
      if (v10 <= *(_DWORD *)(a1 + 516)) {
        return v3;
      }
      *(_DWORD *)(a1 + 516) = v10;
      return v3;
    }
  }
}

uint64_t sub_10005BC08(uint64_t a1)
{
  uint64_t result = sub_1000223E8(*(void *)(a1 + 424));
  if (result)
  {
    uint64_t v3 = *(int *)(a1 + 468);
    int v4 = (unsigned char *)(*(void *)(a1 + 384) + v3);
    if (v3 != *(_DWORD *)(a1 + 464))
    {
      do
      {
        *v4++ |= 8u;
        uint64_t v5 = *(void *)(a1 + 384);
        if ((unint64_t)v4 >= v5 + *(int *)(a1 + 320)) {
          int v4 = *(unsigned char **)(a1 + 384);
        }
      }
      while (v4 != (unsigned char *)(v5 + *(int *)(a1 + 464)));
    }
    *v4 |= 8u;
    *(_DWORD *)(a1 + 484) = 6;
  }
  return result;
}

uint64_t sub_10005BC90(uint64_t a1)
{
  return sub_1000A39D8(*(void *)(a1 + 408));
}

uint64_t sub_10005BC98(uint64_t a1)
{
  return sub_1000A39E0(*(void *)(a1 + 408));
}

uint64_t sub_10005BCA0(uint64_t a1, int a2)
{
  return sub_1000A39E8(*(void *)(a1 + 408), a2);
}

uint64_t sub_10005BCA8(uint64_t a1)
{
  uint64_t v2 = 472;
  if (!*(_DWORD *)(a1 + 356)) {
    uint64_t v2 = 468;
  }
  int v3 = *(_DWORD *)(a1 + v2);
  int v4 = *(_DWORD *)(a1 + 464);
  int v5 = v4 - v3;
  if (v4 - v3 >= 0)
  {
    int v6 = *(_DWORD *)(a1 + 324);
    if (v5 > v6) {
      goto LABEL_5;
    }
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 324);
  if (*(_DWORD *)(a1 + 320) + v5 <= v6) {
    return 0;
  }
LABEL_5:
  uint64_t result = 0;
  int v8 = v4 - v6;
  int v9 = *(_DWORD *)(a1 + 320);
  int v10 = v8 + (v9 & (v8 >> 31));
  if (v3 + 1 < v9) {
    int v11 = v3 + 1;
  }
  else {
    int v11 = 0;
  }
  if (v11 != v10)
  {
    uint64_t result = 0;
    uint64_t v12 = *(void *)(a1 + 384);
    do
    {
      if ((*(unsigned char *)(v12 + v11) & 2) != 0) {
        break;
      }
      uint64_t result = (result + 1);
      if (v11 + 1 < v9) {
        ++v11;
      }
      else {
        int v11 = 0;
      }
    }
    while (v11 != v10);
  }
  return result;
}

uint64_t sub_10005BD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  uint64_t v3 = *(unsigned int *)(a1 + 484);
  if ((v3 & 0xFFFFFFFE) == 2) {
    return v3;
  }
  if (*(_DWORD *)(a1 + 492))
  {
    uint64_t v3 = 2;
    *(_DWORD *)(a1 + 484) = 2;
    if (*(_DWORD *)(a1 + 352)) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = 4;
    if (*(_DWORD *)(a1 + 352)) {
      goto LABEL_7;
    }
  }
  if (*(_DWORD *)(a1 + 356))
  {
LABEL_7:
    uint64_t v7 = *(int *)(a1 + 472);
    *(_WORD *)(a3 + 2) = v7;
    int v8 = *(_DWORD *)(a1 + 492);
    if (!v8) {
      goto LABEL_21;
    }
    goto LABEL_8;
  }
  uint64_t v7 = *(int *)(a1 + 468);
  *(_WORD *)(a3 + 2) = v7;
  int v8 = *(_DWORD *)(a1 + 492);
  if (!v8) {
    goto LABEL_21;
  }
LABEL_8:
  if (*(_DWORD *)(a1 + 348) || *(_DWORD *)(a1 + 496))
  {
    int v9 = *(_DWORD *)(a1 + 464);
    if (v7 == v9)
    {
      *(unsigned char *)(*(void *)(a1 + 384) + v7) = 0;
    }
    else
    {
      int v10 = v9 + ~v7;
      *(_DWORD *)(a1 + 476) = v10;
      if (v10 < 0)
      {
        v10 += *(_DWORD *)(a1 + 320);
        *(_DWORD *)(a1 + 476) = v10;
      }
      if ((*(unsigned char *)(*(void *)(a1 + 384) + v7) & 4) == 0)
      {
        int v11 = *(_DWORD *)(a1 + 324) + v7;
        int v12 = *(_DWORD *)(a1 + 320);
        int v13 = v11 >= v12 ? *(_DWORD *)(a1 + 320) : 0;
        if (sub_1000210B8(*(int **)(a1 + 416), *(void *)(a1 + 368), v11 - v13, v12, v10, v8)) {
          *(unsigned char *)(*(void *)(a1 + 384) + v7) |= 4u;
        }
      }
    }
    uint64_t v3 = 2;
  }
LABEL_21:
  if (*(_DWORD *)(a1 + 340) && !*(_DWORD *)(a1 + 492) && !*(_DWORD *)(a1 + 352))
  {
    uint64_t v14 = *(void *)(a1 + 384);
    if ((*(unsigned char *)(v14 + v7) & 0x10) == 0) {
      goto LABEL_51;
    }
    goto LABEL_34;
  }
  uint64_t v14 = *(void *)(a1 + 384);
  if ((*(unsigned char *)(v14 + v7) & 4) == 0) {
    goto LABEL_51;
  }
  int v15 = *(_DWORD *)(a1 + 464) - v7;
  if (v15 < 0)
  {
    if (*(_DWORD *)(a1 + 320) + v15 > 1) {
      goto LABEL_34;
    }
LABEL_29:
    if (!*(_DWORD *)(a1 + 492)) {
      goto LABEL_51;
    }
    goto LABEL_34;
  }
  if (v15 <= 1) {
    goto LABEL_29;
  }
LABEL_34:
  uint64_t v17 = *(void *)(a1 + 368);
  uint64_t v16 = *(void *)(a1 + 376);
  *(_WORD *)(a1 + 504) = **(_WORD **)(v17 + 8 * v7);
  if (sub_10002256C(*(void *)(a1 + 424), *(void *)(v17 + 8 * v7), (unsigned char *)(v14 + v7), v16))
  {
    if (*(_DWORD *)(a1 + 344))
    {
      if ((sub_100022094(*(void *)(a1 + 440)) & 0x80000000) == 0)
      {
        uint64_t v18 = 0;
        do
          *(_WORD *)(*(void *)(*(void *)(a1 + 400) + 8 * v7) + 2 * v18) = *(_WORD *)(*(void *)(a1 + 376) + 2 * v18);
        while (v18++ < (int)sub_100022094(*(void *)(a1 + 440)));
      }
      int v20 = *(int **)(a1 + 440);
      uint64_t v21 = sub_100060F84(*(void *)(a1 + 448));
      sub_100021E7C((void *)a1, v20, v21, *(__int16 **)(a1 + 376), v22, v23, v24, v25);
    }
    uint64_t v26 = 456;
    if (!*(_DWORD *)(a1 + 352)) {
      uint64_t v26 = 448;
    }
    sub_100060DB0(*(int **)(a1 + v26), *(int16x8_t **)(a1 + 376), a2);
    int v52 = 0;
    uint64_t v34 = (void *)sub_1000CD3E8(2 * *(int *)(a1 + 304), v27, v28, v29, v30, v31, v32, v33);
    uint64_t v42 = (void *)sub_1000CD3E8(2 * *(int *)(a1 + 304), v35, v36, v37, v38, v39, v40, v41);
    sub_100022AB8(*(void *)(a1 + 424), (uint64_t)v42);
    sub_100060F0C(*(int **)(a1 + 448), (uint64_t)v34, &v52);
    if (*(__int16 *)v34 < 1) {
      LOWORD(v43) = 0;
    }
    else {
      int v43 = (*(__int16 *)v42 << (v52 - *(_DWORD *)(a1 + 308))) / *(unsigned __int16 *)v34;
    }
    sub_1000CD4D0(v42, 2 * *(int *)(a1 + 304));
    sub_1000CD4D0(v34, 2 * *(int *)(a1 + 304));
    *(_WORD *)a3 = v43;
    *(_DWORD *)(a1 + 484) = 4;
    uint64_t v44 = *(void *)(a1 + 384);
    if ((*(unsigned char *)(v44 + v7) & 2) != 0) {
      uint64_t v3 = 5;
    }
    else {
      uint64_t v3 = 6;
    }
    if (!*(_DWORD *)(a1 + 352) && !*(_DWORD *)(a1 + 356)) {
      *(unsigned char *)(v44 + v7) = 0;
    }
  }
LABEL_51:
  if ((v3 - 5) >= 2)
  {
    int v46 = *(_DWORD *)(a1 + 320);
  }
  else
  {
    ++*(_DWORD *)(a1 + 512);
    if (*(_DWORD *)(a1 + 352) || *(_DWORD *)(a1 + 356))
    {
      int v45 = *(_DWORD *)(a1 + 472);
      int v46 = *(_DWORD *)(a1 + 320);
      if (v45 + 1 < v46) {
        int v47 = v45 + 1;
      }
      else {
        int v47 = 0;
      }
      *(_DWORD *)(a1 + 472) = v47;
    }
    else
    {
      int v50 = *(_DWORD *)(a1 + 468);
      int v46 = *(_DWORD *)(a1 + 320);
      if (v50 + 1 < v46) {
        int v51 = v50 + 1;
      }
      else {
        int v51 = 0;
      }
      *(_DWORD *)(a1 + 468) = v51;
    }
  }
  int v48 = (*(_DWORD *)(a1 + 464) - *(_DWORD *)(a1 + 468) + v46) % v46 - *(_DWORD *)(a1 + 324);
  if (*(_DWORD *)(a1 + 492))
  {
    if (v48 < 0) {
      goto LABEL_64;
    }
LABEL_63:
    if (!sub_100022564(*(void *)(a1 + 424))) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  v48 -= *(_DWORD *)(a1 + 332);
  if ((v48 & 0x80000000) == 0) {
    goto LABEL_63;
  }
LABEL_64:
  int v48 = 0;
LABEL_65:
  if (v48 > *(_DWORD *)(a1 + 516)) {
    *(_DWORD *)(a1 + 516) = v48;
  }
  return v3;
}

void *sub_10005C124(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)result + 86))
  {
    int v8 = a3;
    uint64_t v10 = (uint64_t)result;
    int v32 = 0;
    int v11 = (void *)sub_1000CD3E8(*((int *)result + 76), a2, a3, a4, a5, a6, a7, a8);
    int v19 = (void *)sub_1000CD3E8(2 * *(int *)(v10 + 304), v12, v13, v14, v15, v16, v17, v18);
    uint64_t v27 = (int16x8_t *)sub_1000CD3E8(2 * *(int *)(v10 + 304), v20, v21, v22, v23, v24, v25, v26);
    if ((sub_100022094(*(void *)(v10 + 440)) & 0x80000000) != 0)
    {
      LODWORD(v28) = 0;
      if (*(int *)(v10 + 304) <= 0)
      {
LABEL_10:
        sub_100060DB0(*(int **)(v10 + 448), v27, (uint64_t)v11);
        sub_100060F0C(*(int **)(v10 + 448), (uint64_t)v19, &v32);
        uint64_t v31 = sub_100060F84(*(void *)(v10 + 448));
        sub_100021B8C(v10, *(int **)(v10 + 440), (uint64_t)v27, **(__int16 **)(*(void *)(v10 + 368) + 8 * v8), (uint64_t)v19, v32, v31, (uint64_t)v11, a2);
        sub_1000CD4D0(v27, 2 * *(int *)(v10 + 304));
        sub_1000CD4D0(v19, 2 * *(int *)(v10 + 304));
        return sub_1000CD4D0(v11, *(int *)(v10 + 304));
      }
    }
    else
    {
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = v28;
        v27->i16[v28] = *(_WORD *)(*(void *)(*(void *)(v10 + 400) + 8 * v8) + 2 * v28);
        ++v28;
      }
      while (v29 < (int)sub_100022094(*(void *)(v10 + 440)));
      if ((int)v28 >= *(_DWORD *)(v10 + 304)) {
        goto LABEL_10;
      }
    }
    uint64_t v30 = v28;
    do
      v27->i16[v30++] = 0;
    while (*(_DWORD *)(v10 + 304) > (int)v30);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10005C2A8(uint64_t result, _WORD *a2, _WORD *a3)
{
  if (*(_DWORD *)(result + 340)) {
    return sub_100022FD8(*(void *)(result + 432), a2, a3);
  }
  *a2 = 1;
  *a3 = 0;
  return result;
}

uint64_t sub_10005C2C8(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 340)) {
    return 0;
  }
  int v4 = 0;
  sub_100022FD8(*(void *)(a1 + 432), (_WORD *)&v4 + 1, &v4);
  int v2 = 200 * ((__int16)v4 - SHIWORD(v4));
  return (v2 / (int)((23 << *(_DWORD *)(a1 + 308)) * sub_1000A39F0(*(void *)(a1 + 408))));
}

uint64_t sub_10005C350(uint64_t a1, uint64_t a2)
{
  return sub_100022A84(*(void *)(a1 + 424), a2);
}

uint64_t sub_10005C358(uint64_t a1, uint64_t a2)
{
  return sub_100022AB8(*(void *)(a1 + 424), a2);
}

uint64_t sub_10005C360(uint64_t a1, uint64_t a2)
{
  return sub_100022B8C(*(void *)(a1 + 424), a2);
}

uint64_t sub_10005C368(uint64_t a1, uint64_t a2)
{
  return sub_100022BC0(*(void *)(a1 + 424), a2);
}

uint64_t sub_10005C370(uint64_t a1)
{
  return sub_1000A39F8(*(void *)(a1 + 408));
}

uint64_t sub_10005C378(uint64_t result, _DWORD *a2, int *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(result + 320);
  if (v6 <= 0)
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = 472;
  if (!*(_DWORD *)(result + 356)) {
    uint64_t v8 = 468;
  }
  int v9 = *(_DWORD *)(result + v8);
  *a2 = v6 - *(_DWORD *)(result + 324);
  int v10 = (*(_DWORD *)(result + 464) - v9 + *(_DWORD *)(result + 320)) % *(_DWORD *)(result + 320);
  *a3 = v10;
  int v11 = v10 - *(_DWORD *)(result + 324);
  *a3 = v11;
  if (*(_DWORD *)(result + 492))
  {
    if (v11 < 0) {
      goto LABEL_10;
    }
  }
  else
  {
    *a3 = v11 - *(_DWORD *)(result + 332);
    *a2 -= *(_DWORD *)(result + 332);
    if (*a3 < 0)
    {
LABEL_10:
      *a3 = 0;
      goto LABEL_11;
    }
  }
  uint64_t result = sub_100022564(*(void *)(result + 424));
  if (result) {
    goto LABEL_10;
  }
LABEL_11:
  *a4 = *(_DWORD *)(v7 + 516);
  return result;
}

uint64_t sub_10005C46C(uint64_t result)
{
  *(_DWORD *)(result + 516) = 0;
  return result;
}

uint64_t sub_10005C474()
{
  return 468;
}

uint64_t sub_10005C47C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 464) = 0;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  int v4 = (_DWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 208) = 0u;
  uint64_t v5 = a2 + 208;
  int v6 = (_DWORD *)(a2 + 464);
  uint64_t v7 = (_WORD *)(a2 + 448);
  *(void *)a2 = 0x100000003;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 284);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 288);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 300);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 480);
  *(_DWORD *)(a2 + 44) = sub_10005A768(a1);
  sub_100022A84(*(void *)(a1 + 424), a2 + 52);
  sub_100022AB8(*(void *)(a1 + 424), a2 + 130);
  sub_100022B20(*(void *)(a1 + 424), v5);
  *(_DWORD *)(a2 + 32) = sub_1000A39E0(*(void *)(a1 + 408));
  sub_1000A3A00(*(void *)(a1 + 408), (_WORD *)(a2 + 36));
  sub_1000A3A10(*(void *)(a1 + 408), (_DWORD *)(a2 + 20), (_DWORD *)(a2 + 24), (_DWORD *)(a2 + 28));
  sub_100023318(*(void *)(a1 + 432), *(_DWORD *)(a1 + 300), (char *)(a2 + 364), (_WORD *)(a2 + 442), (_WORD *)(a2 + 444), (_WORD *)(a2 + 446), v4);
  sub_100022038(*(void *)(a1 + 440), (_DWORD *)(a2 + 452), (_DWORD *)(a2 + 456), (_DWORD *)(a2 + 460), v6, v7);
  return 1;
}

uint64_t sub_10005C5D0(uint64_t a1, const void *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    memcpy(__dst, a2, sizeof(__dst));
    if (__dst[1] == 1
      && __dst[2] == *(_DWORD *)(a1 + 284)
      && __dst[3] == *(_DWORD *)(a1 + 288)
      && (int v4 = __dst[11], v4 == sub_10005A768(a1)))
    {
      *(_DWORD *)(a1 + 480) = __dst[10];
      sub_1000A3A08(*(void *)(a1 + 408), &__dst[9]);
      sub_1000A39E8(*(void *)(a1 + 408), __dst[8]);
      sub_100022B8C(*(void *)(a1 + 424), (uint64_t)&__dst[13]);
      sub_100022BC0(*(void *)(a1 + 424), (uint64_t)&__dst[32] + 2);
      sub_100022BFC(*(void *)(a1 + 424), (uint64_t)&__dst[52]);
      sub_1000A3A18(*(void *)(a1 + 408), __dst[5], __dst[6], __dst[7]);
      sub_1000233C8(*(int **)(a1 + 432), (uint64_t)&__dst[91], SHIWORD(__dst[110]), __dst[111], SHIWORD(__dst[111]), __dst[12]);
      sub_100022080(*(void *)(a1 + 440), __dst[113], __dst[114], __dst[115], __dst[116], __dst[112]);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10005C704(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = sub_1000BFC50(a2, "bfx0", a3);
  unsigned int v5 = sub_10005A798(a1);
  if (sub_10005A7A0(a1))
  {
    uint64_t v7 = *(void **)(a1 + 392);
    if (v7) {
      unsigned int v8 = v5;
    }
    else {
      unsigned int v8 = 0;
    }
    uint64_t v9 = 1;
    sub_1000BFDB0(v4, v7, v8, 1, v6);
  }
  else
  {
    uint64_t v9 = 0;
  }
  sub_1000BFD14(v4);
  return v9;
}

BOOL sub_10005C790(uint64_t a1, uint64_t a2, char *a3)
{
  int v6 = sub_10005A798(a1);
  uint64_t v12 = sub_1000BEC58(a2, "bfx0", a3, v7, v8, v9, v10, v11);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = (uint64_t)v12;
  BOOL v14 = sub_1000BEFCC((uint64_t)v12, *(void **)(a1 + 392), v6, 1) && sub_10005A7A8(a1) != 0;
  sub_1000BED3C(v13);
  return v14;
}

uint64_t sub_10005C838(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(int *)(a1 + 464);
  unsigned int v5 = a2 - 5;
  if ((a2 - 5) <= 1
    && (!qword_100101CC0
     || !*(_DWORD *)(qword_100101CC0 + 2440)
     || *(void *)(qword_100101CC0 + 2376) > *(int *)(a1 + 480)))
  {
    if (*(_DWORD *)(a1 + 352))
    {
      sub_100022FEC(*(void *)(a1 + 432), **(__int16 **)(*(void *)(a1 + 368) + 8 * v4));
    }
    else if (*(_DWORD *)(a1 + 340))
    {
      sub_100023024(*(int **)(a1 + 432), *(__int16 **)(*(void *)(a1 + 368) + 8 * v4), *(void *)(a1 + 424));
      if (*(unsigned char *)(*(void *)(a1 + 384) + v4)) {
        ++*(_DWORD *)(a1 + 480);
      }
    }
  }
  int v6 = v4 - *(_DWORD *)(a1 + 324);
  if (v6 < 0) {
    v6 += *(_DWORD *)(a1 + 320);
  }
  uint64_t v7 = v6;
  *(unsigned char *)(*(void *)(a1 + 384) + v6) &= ~2u;
  *(unsigned char *)(*(void *)(a1 + 384) + v6) |= *(unsigned char *)(*(void *)(a1 + 384) + v4) & 2;
  if (v5 >= 2)
  {
    int v15 = *(_DWORD *)(a1 + 464);
    int v16 = *(_DWORD *)(a1 + 320);
  }
  else
  {
    if (sub_1000210B8(*(int **)(a1 + 416), *(void *)(a1 + 368), v4, *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 476), *(_DWORD *)(a1 + 492)))
    {
      *(unsigned char *)(*(void *)(a1 + 384) + v7) |= 4u;
      if (*(_DWORD *)(a1 + 488)) {
        sub_100022330(*(void *)(a1 + 424), *(void *)(*(void *)(a1 + 368) + 8 * v7), *(unsigned char *)(*(void *)(a1 + 384) + v7));
      }
      if (*(_DWORD *)(a1 + 340))
      {
        if (!*(_DWORD *)(a1 + 352))
        {
          int v8 = *(_DWORD *)(a1 + 476);
          int v9 = *(_DWORD *)(a1 + 324);
          int v10 = *(_DWORD *)(a1 + 332);
          if (v8 >= v10 + 2 * v9 || *(_DWORD *)(a1 + 348) && v8 >= v10 + v9)
          {
            int v11 = v7 - v10;
            if (v11 < 0) {
              v11 += *(_DWORD *)(a1 + 320);
            }
            *(unsigned char *)(*(void *)(a1 + 384) + v11) |= 0x10u;
            if (*(_DWORD *)(a1 + 336))
            {
              int v12 = *(_DWORD *)(a1 + 332);
              if (v12 >= 2)
              {
                *(_DWORD *)(a1 + 332) = v12 - 1;
                uint64_t v13 = v11 + 1;
                int v14 = *(_DWORD *)(a1 + 320);
                if ((int)v13 < v14) {
                  int v14 = 0;
                }
                *(unsigned char *)(*(void *)(a1 + 384) + v13 - v14) |= 0x10u;
              }
            }
          }
        }
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 352) || *(_DWORD *)(a1 + 356))
      {
        int v17 = *(_DWORD *)(a1 + 472);
        if (v17 + 1 < *(_DWORD *)(a1 + 320)) {
          int v18 = v17 + 1;
        }
        else {
          int v18 = 0;
        }
        *(_DWORD *)(a1 + 472) = v18;
      }
      else
      {
        int v22 = *(_DWORD *)(a1 + 468);
        if (v22 + 1 < *(_DWORD *)(a1 + 320)) {
          int v23 = v22 + 1;
        }
        else {
          int v23 = 0;
        }
        *(_DWORD *)(a1 + 468) = v23;
      }
      uint64_t v2 = 3;
    }
    int v16 = *(_DWORD *)(a1 + 320);
    if ((int)v4 + 1 < v16) {
      int v15 = v4 + 1;
    }
    else {
      int v15 = 0;
    }
    *(_DWORD *)(a1 + 464) = v15;
    ++*(_DWORD *)(a1 + 476);
    ++*(_DWORD *)(a1 + 508);
  }
  int v19 = (v15 - *(_DWORD *)(a1 + 468) + v16) % v16 - *(_DWORD *)(a1 + 324);
  if (*(_DWORD *)(a1 + 492))
  {
    if (v19 < 0) {
      goto LABEL_42;
    }
LABEL_41:
    if (!sub_100022564(*(void *)(a1 + 424))) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  v19 -= *(_DWORD *)(a1 + 332);
  if ((v19 & 0x80000000) == 0) {
    goto LABEL_41;
  }
LABEL_42:
  int v19 = 0;
LABEL_43:
  if (v19 > *(_DWORD *)(a1 + 516))
  {
    *(_DWORD *)(a1 + 516) = v19;
    if (*(_DWORD *)(a1 + 488))
    {
LABEL_45:
      if (!*(_DWORD *)(a1 + 356)) {
        return v2;
      }
      goto LABEL_49;
    }
  }
  else if (*(_DWORD *)(a1 + 488))
  {
    goto LABEL_45;
  }
  *(_DWORD *)(a1 + 484) = v2;
  if (!*(_DWORD *)(a1 + 356)) {
    return v2;
  }
LABEL_49:
  if (*(_DWORD *)(a1 + 476) > ((2 * *(_DWORD *)(a1 + 324)) | 1))
  {
    uint64_t v20 = *(__int16 **)(a1 + 432);
    if (v20)
    {
      if (sub_1000232DC(v20)) {
        return 7;
      }
      else {
        return v2;
      }
    }
  }
  return v2;
}

uint64_t sub_10005CB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  int v9 = a2;
  sub_1000C2F04(0xA0uLL, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v12 = v11;
  *(void *)uint64_t v11 = a1;
  *(_DWORD *)(v11 + 8) = v9;
  *(_DWORD *)(v11 + 12) = 0;
  *(_DWORD *)(v11 + 16) = 16 * v9;
  *(_DWORD *)(v11 + 56) = v8;
  sub_1000C2F04(16 * v9, v13, v14, v15, v16, v17, v18, v19);
  *(void *)(v12 + 24) = v20;
  sub_1000C2F04(2 * *(int *)(v12 + 8) + 2, v21, v22, v23, v24, v25, v26, v27);
  *(void *)(v12 + 32) = v28;
  sub_1000C2F04(2 * *(int *)(v12 + 8) + 2, v29, v30, v31, v32, v33, v34, v35);
  *(void *)(v12 + 40) = v36;
  sub_1000C2F04(*(int *)(v12 + 8), v37, v38, v39, v40, v41, v42, v43);
  *(void *)(v12 + 48) = v44;
  sub_1000C2F04(4 * *(int *)(v12 + 56), v45, v46, v47, v48, v49, v50, v51);
  *(void *)(v12 + 64) = v52;
  *(_DWORD *)(v12 + 72) = v9;
  *(_DWORD *)(v12 + 76) = 0;
  *(_DWORD *)(v12 + 80) = 16 * v9;
  *(_DWORD *)(v12 + 128) = 8 * v9;
  *(_DWORD *)(v12 + 112) = 4 * v9;
  sub_1000C2F04(16 * v9, v53, v54, v55, v56, v57, v58, v59);
  *(void *)(v12 + 88) = v60;
  sub_1000C2F04(2 * *(int *)(v12 + 72) + 2, v61, v62, v63, v64, v65, v66, v67);
  *(void *)(v12 + 96) = v68;
  sub_1000C2F04(2 * *(int *)(v12 + 72) + 2, v69, v70, v71, v72, v73, v74, v75);
  *(void *)(v12 + 104) = v76;
  sub_1000C2F04(2 * *(int *)(v12 + 112) + 2, v77, v78, v79, v80, v81, v82, v83);
  *(void *)(v12 + 120) = v84;
  sub_1000C2F04(2 * *(int *)(v12 + 128), v85, v86, v87, v88, v89, v90, v91);
  *(void *)(v12 + 136) = v92;
  sub_1000C2F04(*(int *)(v12 + 128), v93, v94, v95, v96, v97, v98, v99);
  *(void *)(v12 + 144) = v100;
  sub_1000C2F04(*(int *)(v12 + 128), v101, v102, v103, v104, v105, v106, v107);
  *(void *)(v12 + 152) = v108;
  if (sub_10005CF20(v12, ".", 0, 0, 0, v109, v110, v111)
    || qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 3392) && !sub_10005CDA0((uint64_t **)v12))
  {
    sub_10005CD04(v12);
    return 0;
  }
  return v12;
}

uint64_t sub_10005CD04(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C321C(*(void *)(result + 152));
    sub_1000C321C(v1[18]);
    sub_1000C321C(v1[17]);
    sub_1000C321C(v1[15]);
    sub_1000C321C(v1[13]);
    sub_1000C321C(v1[12]);
    sub_1000C321C(v1[11]);
    sub_1000C321C(v1[8]);
    sub_1000C321C(v1[6]);
    sub_1000C321C(v1[5]);
    sub_1000C321C(v1[4]);
    sub_1000C321C(v1[3]);
    return sub_1000C321C((uint64_t)v1);
  }
  return result;
}

uint64_t sub_10005CDA0(uint64_t **a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *a1;
  do
  {
    uint64_t v16 = 0;
    uint64_t v3 = &off_1000FD410[2 * v1];
    uint64_t v4 = v3[1];
    int v5 = sub_1000CAD00((unint64_t)v4) + 1;
    int v6 = (unsigned __int16 *)sub_1000C33A0(2 * v5);
    if (!v6) {
      return 0;
    }
    uint64_t v7 = (char *)v6;
    sub_1000CEF6C(v6, v4, v5);
    int v8 = sub_1000CF044(v7, asc_1000F6510, &v16);
    if (v8)
    {
      int v9 = v8;
      LODWORD(v10) = 0;
      do
      {
        uint64_t v10 = sub_1000B55FC(v2, v9, 1, 1, 0, 128 - (int)v10, (uint64_t)&v17[(int)v10])
            + v10;
        int v9 = sub_1000CF044(0, asc_1000F6510, &v16);
      }
      while (v9);
      sub_1000C321C((uint64_t)v7);
      if ((int)v10 >= 1 && sub_10005CF20((uint64_t)a1, *v3, v10, (uint64_t)v17, 1, v11, v12, v13)) {
        return 0;
      }
    }
    else
    {
      sub_1000C321C((uint64_t)v7);
    }
    ++v1;
  }
  while (v1 != 16);
  return 1;
}

uint64_t sub_10005CF20(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v10 = a3;
  if ((int)a3 <= 0)
  {
    sub_1000CAED0(a2, ".");
    uint64_t v13 = *(unsigned int *)(a1 + 76);
    if ((int)v13 < 1) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = *(unsigned int *)(a1 + 76);
    if ((int)v13 < 1) {
      goto LABEL_10;
    }
  }
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v14 = *(__int16 **)(a1 + 96);
  uint64_t v16 = 0xFFFFFFFFLL;
  while (1)
  {
    uint64_t v17 = *v14++;
    if (!sub_1000CAED0(a2, (unsigned __int8 *)(v15 + v17))) {
      break;
    }
    --v16;
    if (!--v13) {
      goto LABEL_10;
    }
  }
  if (v16) {
    return 2;
  }
LABEL_10:
  if (v10 >= 1 && !a4) {
    return 2;
  }
  int v48 = v8;
  if (v10)
  {
    uint64_t v20 = (void *)sub_1000CD3E8(4 * v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v21 = v20;
    if (v10 <= 0)
    {
      qsort(v20, v10, 4uLL, (int (__cdecl *)(const void *, const void *))sub_10005E060);
      int v10 = 1;
    }
    else
    {
      uint64_t v22 = 0;
      do
      {
        int v23 = sub_1000B589C(*(void *)a1, *(_DWORD *)(a4 + v22));
        unsigned int v24 = sub_1000B5938(*(void *)a1, v23);
        if (v24 == 0xFFFF
          || (unsigned int v25 = v24, sub_1000B5A58(*(void *)a1, v24) == 0xFFFF)
          || (*(_DWORD *)((char *)v21 + v22) = v25, v25 == -1))
        {
          sub_1000CD4D0(v21, 4 * v10);
          return 2;
        }
        v22 += 4;
      }
      while (4 * v10 != v22);
      qsort(v21, v10, 4uLL, (int (__cdecl *)(const void *, const void *))sub_10005E060);
      if (v10 <= 1)
      {
        int v10 = 1;
        uint64_t v30 = *(unsigned int *)(a1 + 12);
        if ((int)v30 < 1) {
          goto LABEL_36;
        }
        goto LABEL_31;
      }
      uint64_t v26 = 4 * v10;
      int v10 = 1;
      uint64_t v27 = 4;
      do
      {
        unsigned int v28 = *(_DWORD *)((char *)v21 + v27);
        if (v28 > *((_DWORD *)v21 + v10 - 1))
        {
          uint64_t v29 = v10++;
          *((_DWORD *)v21 + v29) = v28;
        }
        v27 += 4;
      }
      while (v26 != v27);
    }
    uint64_t v30 = *(unsigned int *)(a1 + 12);
    if ((int)v30 < 1) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v30 = *(unsigned int *)(a1 + 12);
    if ((int)v30 < 1) {
      goto LABEL_36;
    }
  }
LABEL_31:
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = *(void *)(a1 + 24);
  uint64_t v33 = *(void *)(a1 + 32);
  while (sub_1000CAED0(a2, (unsigned __int8 *)(v34 + *(__int16 *)(v33 + 2 * v32))))
  {
    ++v32;
    v31 -= 0x100000000;
    if (v30 == v32) {
      goto LABEL_36;
    }
  }
  if (v32 != 0xFFFFFFFFLL)
  {
    uint64_t v47 = *(void *)(a1 + 40);
    if (*(__int16 *)(v47 + (((uint64_t)&_mh_execute_header - v31) >> 31)) - *(__int16 *)(v47 + 2 * v32) == v10
      && *(char *)(*(void *)(a1 + 48) + v32) == v48)
    {
      uint64_t v18 = 2
          * (memcmp(v21, (const void *)(*(void *)(a1 + 64) + 4 * *(__int16 *)(v47 + 2 * v32)), 4 * v10) != 0);
    }
    else
    {
      uint64_t v18 = 2;
    }
    sub_1000CD4D0(v21, 4 * v10);
    return v18;
  }
LABEL_36:
  uint64_t v35 = *(int *)(a1 + 12);
  if ((int)v35 >= *(_DWORD *)(a1 + 8)
    || v10 + *(__int16 *)(*(void *)(a1 + 40) + 2 * v35) > *(_DWORD *)(a1 + 56)
    || (int v36 = *(__int16 *)(*(void *)(a1 + 32) + 2 * v35),
        int v37 = sub_1000CAD00((unint64_t)a2) + v36,
        v37 >= *(_DWORD *)(a1 + 16)))
  {
    int v46 = 0;
    char v45 = v48;
  }
  else
  {
    uint64_t v38 = (int)v35 + 1;
    *(_WORD *)(*(void *)(a1 + 32) + 2 * v38) = v37 + 1;
    sub_1000CAD88((unsigned char *)(*(void *)(a1 + 24) + v36), a2, *(_DWORD *)(a1 + 16) - v36);
    uint64_t v39 = *(void *)(a1 + 40);
    uint64_t v40 = *(__int16 *)(v39 + 2 * v35);
    if (v10 >= 1)
    {
      uint64_t v41 = 4 * v40;
      uint64_t v42 = (int *)v21;
      uint64_t v43 = v10;
      do
      {
        int v44 = *v42++;
        *(_DWORD *)(*(void *)(a1 + 64) + v41) = v44;
        v41 += 4;
        --v43;
      }
      while (v43);
      uint64_t v39 = *(void *)(a1 + 40);
    }
    char v45 = v48;
    *(_WORD *)(v39 + 2 * v38) = v40 + v10;
    int v46 = 1;
  }
  if (v10) {
    sub_1000CD4D0(v21, 4 * v10);
  }
  if (!v46) {
    return 1;
  }
  uint64_t v18 = 0;
  *(unsigned char *)(*(void *)(a1 + 48) + v35) = v45;
  ++*(_DWORD *)(a1 + 12);
  return v18;
}

BOOL sub_10005D30C(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(unsigned int *)(a1 + 12);
  if ((int)v12 < 1)
  {
LABEL_5:
    LODWORD(v13) = -1;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v14 = *(void *)(a1 + 32);
    while (sub_1000CAED0(a2, (unsigned __int8 *)(v15 + *(__int16 *)(v14 + 2 * v13))))
    {
      if (v12 == ++v13) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v16 = *(unsigned int *)(a1 + 76);
  if ((int)v16 < 1)
  {
LABEL_10:
    LODWORD(v17) = -1;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v19 = *(void *)(a1 + 88);
    uint64_t v18 = *(void *)(a1 + 96);
    while (sub_1000CAED0(a2, (unsigned __int8 *)(v19 + *(__int16 *)(v18 + 2 * v17))))
    {
      if (v16 == ++v17) {
        goto LABEL_10;
      }
    }
  }
  BOOL v20 = 0;
  if ((int)a3 >= 1 && (v17 & v13) != 0xFFFFFFFF)
  {
    uint64_t v21 = (void *)sub_1000CD3E8(4 * a3, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = *(void *)a1;
      int v24 = sub_1000B589C(*(void *)a1, *(_DWORD *)(a4 + v22));
      *(_DWORD *)((char *)v21 + v22) = sub_1000B5938(v23, v24);
      v22 += 4;
    }
    while (4 * a3 != v22);
    if (v13 == -1)
    {
      uint64_t v36 = 0;
      uint64_t v30 = (__int16 *)(*(void *)(a1 + 104) + 2 * (int)v17);
      uint64_t v31 = (v30[1] - *v30);
      if ((int)v31 < 1)
      {
LABEL_25:
        BOOL v20 = 0;
      }
      else
      {
        uint64_t v32 = (__int16 *)(*(void *)(a1 + 120) + 2 * *v30 + 2);
        while (1)
        {
          int v33 = *v32;
          v35[0] = *(v32 - 1);
          v35[1] = v33;
          uint64_t v37 = 0;
          if (sub_10005E078((void *)a1, a3, (uint64_t)v21, 0, v35)) {
            break;
          }
          ++v32;
          if (!--v31) {
            goto LABEL_25;
          }
        }
        BOOL v20 = 1;
      }
    }
    else
    {
      uint64_t v26 = *(void *)(a1 + 40);
      uint64_t v25 = *(__int16 *)(v26 + 2 * ~v13);
      LODWORD(v26) = (__int16)(*(_WORD *)(v26 + 2 * -(int)v13) - v25);
      if ((int)v26 < 1)
      {
LABEL_20:
        int v29 = 0;
      }
      else
      {
        uint64_t v27 = (int *)(*(void *)(a1 + 64) + 4 * v25);
        uint64_t v26 = (unsigned __int16)v26;
        while (1)
        {
          int v28 = *v27++;
          if (*(_DWORD *)v21 == v28) {
            break;
          }
          if (!--v26) {
            goto LABEL_20;
          }
        }
        int v29 = 1;
      }
      BOOL v20 = v29 == *(char *)(*(void *)(a1 + 48) + ~v13);
    }
    sub_1000CD4D0(v21, 4 * a3);
  }
  return v20;
}

BOOL sub_10005D518(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = sub_1000BFC50(a2, "grm1", a3);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = v4;
  if (!sub_1000BFD58(v4, *(_DWORD *)(a1 + 8), v5)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 12), v7)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 16), v8)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 56), v9)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 72), v10)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 76), v11)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 80), v12)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 112), v13)
    || !sub_1000BFD58(v6, *(_DWORD *)(a1 + 128), v14))
  {
    goto LABEL_58;
  }
  uint64_t v16 = *(void **)(a1 + 24);
  unsigned int v17 = v16 ? *(_DWORD *)(a1 + 16) : 0;
  if (!sub_1000BFDB0(v6, v16, v17, 1, v15)) {
    goto LABEL_58;
  }
  BOOL v20 = *(void **)(a1 + 32);
  unsigned int v21 = v20 ? *(_DWORD *)(a1 + 8) + 1 : 0;
  if (!sub_1000BFDB0(v6, v20, v21, 2, v19)) {
    goto LABEL_58;
  }
  uint64_t v23 = *(void **)(a1 + 40);
  unsigned int v24 = v23 ? *(_DWORD *)(a1 + 8) + 1 : 0;
  if (!sub_1000BFDB0(v6, v23, v24, 2, v22)) {
    goto LABEL_58;
  }
  uint64_t v26 = *(void **)(a1 + 48);
  unsigned int v27 = v26 ? *(_DWORD *)(a1 + 8) : 0;
  if (!sub_1000BFDB0(v6, v26, v27, 1, v25)) {
    goto LABEL_58;
  }
  int v29 = *(void **)(a1 + 64);
  unsigned int v30 = v29 ? *(_DWORD *)(a1 + 56) : 0;
  if (!sub_1000BFDB0(v6, v29, v30, 4, v28)) {
    goto LABEL_58;
  }
  uint64_t v32 = *(void **)(a1 + 88);
  unsigned int v33 = v32 ? *(_DWORD *)(a1 + 80) : 0;
  if (!sub_1000BFDB0(v6, v32, v33, 1, v31)) {
    goto LABEL_58;
  }
  uint64_t v35 = *(void **)(a1 + 96);
  unsigned int v36 = v35 ? *(_DWORD *)(a1 + 72) + 1 : 0;
  if (!sub_1000BFDB0(v6, v35, v36, 2, v34)) {
    goto LABEL_58;
  }
  uint64_t v38 = *(void **)(a1 + 104);
  unsigned int v39 = v38 ? *(_DWORD *)(a1 + 72) + 1 : 0;
  if (sub_1000BFDB0(v6, v38, v39, 2, v37)
    && ((uint64_t v41 = *(void **)(a1 + 120)) == 0 ? (v42 = 0) : (v42 = *(_DWORD *)(a1 + 112) + 1),
        sub_1000BFDB0(v6, v41, v42, 2, v40)
     && ((int v44 = *(void **)(a1 + 136)) == 0 ? (v45 = 0) : (v45 = *(_DWORD *)(a1 + 128)),
         sub_1000BFDB0(v6, v44, v45, 2, v43)
      && ((v47 = *(void **)(a1 + 144)) == 0 ? (unsigned int v48 = 0) : (unsigned int v48 = *(_DWORD *)(a1 + 128)),
          sub_1000BFDB0(v6, v47, v48, 1, v46)))))
  {
    uint64_t v50 = *(void **)(a1 + 152);
    if (v50) {
      unsigned int v51 = *(_DWORD *)(a1 + 128);
    }
    else {
      unsigned int v51 = 0;
    }
    BOOL v52 = sub_1000BFDB0(v6, v50, v51, 1, v49) != 0;
    sub_1000BFD14(v6);
    return v52;
  }
  else
  {
LABEL_58:
    sub_1000BFD14(v6);
    return 0;
  }
}

uint64_t sub_10005D7E4(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9 = sub_1000BEC58(a2, "grm1", a3, a4, a5, a6, a7, a8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = (uint64_t)v9;
  unsigned int v27 = a1 + 19;
  sub_1000C321C(a1[19]);
  uint8x8_t v28 = a1 + 18;
  sub_1000C321C(a1[18]);
  int v29 = a1 + 17;
  sub_1000C321C(a1[17]);
  unsigned int v30 = a1 + 15;
  sub_1000C321C(a1[15]);
  uint8x8_t v31 = a1 + 13;
  sub_1000C321C(a1[13]);
  uint8x8_t v11 = a1 + 12;
  sub_1000C321C(a1[12]);
  uint8x8_t v12 = a1 + 11;
  sub_1000C321C(a1[11]);
  uint8x8_t v13 = a1 + 8;
  sub_1000C321C(a1[8]);
  uint8x8_t v14 = a1 + 6;
  sub_1000C321C(a1[6]);
  uint8x8_t v15 = a1 + 5;
  sub_1000C321C(a1[5]);
  uint64_t v16 = a1 + 4;
  sub_1000C321C(a1[4]);
  unsigned int v17 = a1 + 3;
  sub_1000C321C(a1[3]);
  uint64_t v18 = a1 + 1;
  if (!sub_1000BEECC(v10, a1 + 1)) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v10, (char *)a1 + 12)) {
    goto LABEL_48;
  }
  uint64_t v26 = a1 + 2;
  if (!sub_1000BEECC(v10, a1 + 2)) {
    goto LABEL_48;
  }
  uint8x8_t v25 = a1 + 7;
  if (!sub_1000BEECC(v10, a1 + 7)) {
    goto LABEL_48;
  }
  unsigned int v24 = a1 + 9;
  if (!sub_1000BEECC(v10, a1 + 9)) {
    goto LABEL_48;
  }
  if (!sub_1000BEECC(v10, (char *)a1 + 76)) {
    goto LABEL_48;
  }
  uint64_t v23 = a1 + 10;
  if (!sub_1000BEECC(v10, a1 + 10)) {
    goto LABEL_48;
  }
  uint8x8_t v22 = a1 + 14;
  if (!sub_1000BEECC(v10, a1 + 14)) {
    goto LABEL_48;
  }
  uint8x8_t v19 = a1 + 16;
  if (!sub_1000BEECC(v10, v19)) {
    goto LABEL_48;
  }
  int v32 = 0;
  if (!sub_1000BF078(v10, 1, v17, &v32) || *v17 && v32 != *v26) {
    goto LABEL_48;
  }
  int v32 = 0;
  if (!sub_1000BF078(v10, 2, v16, &v32) || *v16 && v32 != *v18 + 1) {
    goto LABEL_48;
  }
  int v32 = 0;
  if (!sub_1000BF078(v10, 2, v15, &v32) || *v15 && v32 != *v18 + 1) {
    goto LABEL_48;
  }
  int v32 = 0;
  if (!sub_1000BF078(v10, 1, v14, &v32) || *v14 && v32 != *v18) {
    goto LABEL_48;
  }
  int v32 = 0;
  if (!sub_1000BF078(v10, 4, v13, &v32) || *v13 && v32 != *v25) {
    goto LABEL_48;
  }
  if ((int v32 = 0, sub_1000BF078(v10, 1, v12, &v32))
    && (!*v12 || v32 == *v23)
    && (int v32 = 0, sub_1000BF078(v10, 2, v11, &v32))
    && (!*v11 || v32 == *v24 + 1)
    && (int v32 = 0, sub_1000BF078(v10, 2, v31, &v32))
    && (!*v31 || v32 == *v24 + 1)
    && (int v32 = 0, sub_1000BF078(v10, 2, v30, &v32))
    && (!*v30 || v32 == *v22 + 1)
    && (int v32 = 0, sub_1000BF078(v10, 2, v29, &v32))
    && (!*v29 || v32 == *v19)
    && (int v32 = 0, sub_1000BF078(v10, 1, v28, &v32))
    && (!*v28 || v32 == *v19)
    && (int v32 = 0, sub_1000BF078(v10, 1, v27, &v32))
    && (!*v27 || v32 == *v19))
  {
    uint64_t v20 = 1;
  }
  else
  {
LABEL_48:
    uint64_t v20 = 0;
  }
  sub_1000BED3C(v10);
  return v20;
}

uint64_t *sub_10005DC68(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9 = sub_1000BEC58(a1, "grm1", a2, a4, a5, a6, a7, a8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = (uint64_t)v9;
  uint8x8_t v11 = (void *)sub_1000C33A0(160);
  uint8x8_t v12 = v11;
  if (v11)
  {
    *uint8x8_t v11 = a3;
    uint8x8_t v13 = v11 + 1;
    if (!sub_1000BEECC(v10, v11 + 1)) {
      goto LABEL_49;
    }
    if (!sub_1000BEECC(v10, (char *)v12 + 12)) {
      goto LABEL_49;
    }
    if (!sub_1000BEECC(v10, v12 + 2)) {
      goto LABEL_49;
    }
    if (!sub_1000BEECC(v10, v12 + 7)) {
      goto LABEL_49;
    }
    uint8x8_t v14 = v12 + 9;
    if (!sub_1000BEECC(v10, v12 + 9)) {
      goto LABEL_49;
    }
    if (!sub_1000BEECC(v10, (char *)v12 + 76)) {
      goto LABEL_49;
    }
    if (!sub_1000BEECC(v10, v12 + 10)) {
      goto LABEL_49;
    }
    if (!sub_1000BEECC(v10, v12 + 14)) {
      goto LABEL_49;
    }
    uint8x8_t v15 = v12 + 16;
    if (!sub_1000BEECC(v10, v12 + 16)) {
      goto LABEL_49;
    }
    int v17 = 0;
    if (!sub_1000BF078(v10, 1, v12 + 3, &v17) || v12[3] && v17 != *((_DWORD *)v12 + 4)) {
      goto LABEL_49;
    }
    int v17 = 0;
    if (!sub_1000BF078(v10, 2, v12 + 4, &v17) || v12[4] && v17 != *v13 + 1) {
      goto LABEL_49;
    }
    int v17 = 0;
    if (!sub_1000BF078(v10, 2, v12 + 5, &v17) || v12[5] && v17 != *v13 + 1) {
      goto LABEL_49;
    }
    int v17 = 0;
    if (!sub_1000BF078(v10, 1, v12 + 6, &v17) || v12[6] && v17 != *v13) {
      goto LABEL_49;
    }
    int v17 = 0;
    if (!sub_1000BF078(v10, 4, v12 + 8, &v17) || v12[8] && v17 != *((_DWORD *)v12 + 14)) {
      goto LABEL_49;
    }
    if ((int v17 = 0, !sub_1000BF078(v10, 1, v12 + 11, &v17))
      || v12[11] && v17 != *((_DWORD *)v12 + 20)
      || (int v17 = 0, !sub_1000BF078(v10, 2, v12 + 12, &v17))
      || v12[12] && v17 != *v14 + 1
      || (int v17 = 0, !sub_1000BF078(v10, 2, v12 + 13, &v17))
      || v12[13] && v17 != *v14 + 1
      || (int v17 = 0, !sub_1000BF078(v10, 2, v12 + 15, &v17))
      || v12[15] && v17 != *((_DWORD *)v12 + 28) + 1
      || (int v17 = 0, !sub_1000BF078(v10, 2, v12 + 17, &v17))
      || v12[17] && v17 != *v15
      || (int v17 = 0, !sub_1000BF078(v10, 1, v12 + 18, &v17))
      || v12[18] && v17 != *v15
      || (int v17 = 0, !sub_1000BF078(v10, 1, v12 + 19, &v17))
      || v12[19] && v17 != *v15)
    {
LABEL_49:
      sub_1000BED3C(v10);
      sub_10005CD04((uint64_t)v12);
      return 0;
    }
  }
  sub_1000BED3C(v10);
  return v12;
}

uint64_t sub_10005E060(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

BOOL sub_10005E078(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (!a5) {
    return a4 == a2;
  }
  uint64_t v6 = a5;
  unint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v8 = a1[17];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[19];
  while (2)
  {
    uint64_t v11 = *v6;
    int v12 = v6[2];
    do
    {
LABEL_4:
      int v13 = *(__int16 *)(v8 + 2 * v11);
      int v14 = *(unsigned __int8 *)(v9 + v11);
      int v15 = *(unsigned __int8 *)(v10 + v11);
      if ((v13 & 0x80000000) == 0)
      {
        if (v12 < v14)
        {
          int v41 = v12 + 1;
          if (v12 + 1 >= v15)
          {
            LODWORD(v11) = v11 + 1;
            unsigned int v42 = (unint64_t *)*((void *)v6 + 2);
            if ((int)v11 >= v6[1]) {
              goto LABEL_52;
            }
            int v41 = 0;
          }
          else
          {
            unsigned int v42 = (unint64_t *)*((void *)v6 + 2);
          }
          uint64_t v74 = v42;
          LODWORD(v73) = v41;
          unint64_t v72 = __PAIR64__(v6[1], v11);
          unsigned int v42 = &v72;
LABEL_52:
          uint64_t v77 = 0;
          uint64_t v47 = a1[13];
          uint64_t v48 = (*(__int16 *)(v47 + 2 * (v13 + 1)) - *(__int16 *)(v47 + 2 * (unsigned __int16)v13));
          if ((int)v48 >= 1)
          {
            uint8x8_t v49 = (__int16 *)(a1[15] + 2 * *(__int16 *)(v47 + 2 * (unsigned __int16)v13) + 2);
            while (1)
            {
              int v50 = *v49;
              int v75 = *(v49 - 1);
              int v76 = v50;
              LODWORD(v77) = 0;
              uint64_t v78 = v42;
              uint64_t v51 = a2;
              uint64_t v52 = a3;
              if (sub_10005E078(a1, a2, a3, a4, &v75)) {
                break;
              }
              ++v49;
              --v48;
              a2 = v51;
              a3 = v52;
              if (!v48) {
                return 0;
              }
            }
            return 1;
          }
          return 0;
        }
        uint64_t v71 = v11;
        int v43 = v11 + 1;
        int v44 = (unint64_t *)*((void *)v6 + 2);
        if ((int)v11 + 1 >= v6[1])
        {
          unsigned int v45 = v6;
        }
        else
        {
          uint64_t v74 = (unint64_t *)*((void *)v6 + 2);
          LODWORD(v73) = 0;
          unsigned int v45 = v6;
          int v46 = v6[1];
          LODWORD(v72) = v11 + 1;
          HIDWORD(v72) = v46;
          int v44 = &v72;
        }
        uint64_t v53 = a2;
        uint64_t v54 = a3;
        if (sub_10005E078(a1, a2, a3, a4, v44)) {
          return 1;
        }
        uint64_t v55 = v53;
        int v56 = v12 + 1;
        if (v12 + 1 >= *(unsigned __int8 *)(v10 + v71))
        {
          uint64_t v58 = (unint64_t *)*((void *)v45 + 2);
          uint64_t v59 = v55;
          uint64_t v60 = v54;
          if (v43 >= v45[1]) {
            goto LABEL_65;
          }
          uint64_t v57 = v45;
          int v56 = 0;
          unsigned int v61 = v43;
        }
        else
        {
          uint64_t v57 = v45;
          uint64_t v58 = (unint64_t *)*((void *)v45 + 2);
          uint64_t v59 = v55;
          uint64_t v60 = v54;
          unsigned int v61 = v71;
        }
        uint64_t v74 = v58;
        LODWORD(v73) = v56;
        unint64_t v72 = __PAIR64__(v57[1], v61);
        uint64_t v58 = &v72;
LABEL_65:
        uint64_t v77 = 0;
        uint64_t v62 = a1[13];
        uint64_t v63 = (*(__int16 *)(v62 + 2 * (v13 + 1)) - *(__int16 *)(v62 + 2 * (unsigned __int16)v13));
        if ((int)v63 >= 1)
        {
          uint64_t v64 = (__int16 *)(a1[15] + 2 * *(__int16 *)(v62 + 2 * (unsigned __int16)v13) + 2);
          while (1)
          {
            int v65 = *v64;
            int v75 = *(v64 - 1);
            int v76 = v65;
            LODWORD(v77) = 0;
            uint64_t v78 = v58;
            if (sub_10005E078(a1, v59, v60, a4, &v75)) {
              break;
            }
            ++v64;
            --v63;
            uint64_t v59 = v55;
            uint64_t v60 = v54;
            if (!v63) {
              return 0;
            }
          }
          return 1;
        }
        return 0;
      }
      int v16 = ~v13;
      if (v12 < v14)
      {
        uint64_t v17 = (int)a4;
        if ((int)a4 <= (int)a2) {
          int v18 = a2;
        }
        else {
          int v18 = a4;
        }
        while (v17 != v18)
        {
          uint64_t v19 = a1[5];
          __int16 v20 = *(_WORD *)(v19 + 2 * -v13);
          uint64_t v21 = *(__int16 *)(v19 + 2 * v16);
          LODWORD(v22) = (__int16)(v20 - v21);
          if ((int)v22 < 1)
          {
LABEL_9:
            if (*(unsigned char *)(a1[6] + v16)) {
              return 0;
            }
          }
          else
          {
            uint64_t v23 = (int *)(a1[8] + 4 * v21);
            uint64_t v22 = (unsigned __int16)v22;
            while (1)
            {
              int v24 = *v23++;
              if (*(_DWORD *)(a3 + 4 * v17) == v24) {
                break;
              }
              if (!--v22) {
                goto LABEL_9;
              }
            }
            if (*(unsigned char *)(a1[6] + v16) != 1) {
              return 0;
            }
          }
          ++v12;
          ++v17;
          if (v12 == v14)
          {
            a4 = v17;
            if (v14 < v15) {
              goto LABEL_20;
            }
            goto LABEL_39;
          }
        }
        return 0;
      }
      int v14 = v12;
      if (v12 < v15)
      {
LABEL_20:
        uint8x8_t v25 = (unint64_t *)*((void *)v6 + 2);
        uint64_t v69 = v6;
        uint64_t v70 = v11;
        uint64_t v67 = v8;
        uint64_t v68 = v10;
        uint64_t v66 = v9;
        if (v11 + 1 < v6[1])
        {
          uint64_t v74 = (unint64_t *)*((void *)v6 + 2);
          LODWORD(v73) = 0;
          int v26 = v6[1];
          LODWORD(v72) = v11 + 1;
          HIDWORD(v72) = v26;
          uint8x8_t v25 = &v72;
        }
        uint64_t v27 = v16;
        uint64_t v28 = -v13;
        uint64_t v29 = (int)a4;
        if ((int)a4 <= (int)a2) {
          int v30 = a2;
        }
        else {
          int v30 = a4;
        }
        uint64_t v31 = v30;
        while (1)
        {
          uint64_t v32 = a2;
          uint64_t v33 = a3;
          if (sub_10005E078(a1, a2, a3, v29, v25)) {
            return 1;
          }
          if (v29 == v31) {
            return 0;
          }
          uint64_t v34 = a1[5];
          __int16 v35 = *(_WORD *)(v34 + 2 * v28);
          uint64_t v36 = *(__int16 *)(v34 + 2 * v27);
          LODWORD(v37) = (__int16)(v35 - v36);
          if ((int)v37 >= 1)
          {
            uint64_t v38 = (int *)(a1[8] + 4 * v36);
            uint64_t v37 = (unsigned __int16)v37;
            a3 = v33;
            a2 = v32;
            while (1)
            {
              int v39 = *v38++;
              if (*(_DWORD *)(v33 + 4 * v29) == v39) {
                break;
              }
              if (!--v37)
              {
                if (!*(unsigned char *)(a1[6] + v27)) {
                  goto LABEL_27;
                }
                return 0;
              }
            }
            if (*(unsigned char *)(a1[6] + v27) == 1) {
              goto LABEL_27;
            }
            return 0;
          }
          a2 = v32;
          a3 = v33;
          if (*(unsigned char *)(a1[6] + v27)) {
            return 0;
          }
LABEL_27:
          ++v14;
          ++v29;
          if (v14 == v15)
          {
            a4 = v29;
            uint64_t v6 = v69;
            uint64_t v8 = v67;
            uint64_t v10 = v68;
            uint64_t v9 = v66;
            int v12 = 0;
            uint64_t v11 = v70 + 1;
            if (v70 + 1 < v69[1]) {
              goto LABEL_4;
            }
            goto LABEL_42;
          }
        }
      }
LABEL_39:
      int v12 = 0;
      ++v11;
    }
    while (v11 < v6[1]);
LABEL_42:
    uint64_t v6 = (int *)*((void *)v6 + 2);
    if (v6) {
      continue;
    }
    return a4 == a2;
  }
}

uint64_t sub_10005E528(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C321C(*(void *)(result + 24));
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
    return sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_10005E570(unsigned int *a1, int16x8_t *a2, unint64_t a3)
{
  uint64_t v3 = *a1;
  if ((int)v3 < 1)
  {
    unsigned __int32 v4 = 0;
    goto LABEL_13;
  }
  if (v3 >= 0x10)
  {
    uint64_t v5 = v3 & 0x7FFFFFF0;
    uint64_t v6 = (int16x8_t *)((char *)a2 + 2 * (v3 & 0xFFFFFFF0));
    uint8x8_t v7 = a2 + 1;
    int8x16_t v8 = 0uLL;
    uint64_t v9 = v3 & 0xFFFFFFF0;
    int8x16_t v10 = 0uLL;
    int8x16_t v11 = 0uLL;
    int8x16_t v12 = 0uLL;
    do
    {
      uint16x8_t v13 = (uint16x8_t)vabsq_s16(v7[-1]);
      uint16x8_t v14 = (uint16x8_t)vabsq_s16(*v7);
      int8x16_t v10 = vorrq_s8(v10, (int8x16_t)vmovl_high_u16(v13));
      int8x16_t v8 = vorrq_s8(v8, (int8x16_t)vmovl_u16(*(uint16x4_t *)v13.i8));
      int8x16_t v12 = vorrq_s8(v12, (int8x16_t)vmovl_high_u16(v14));
      int8x16_t v11 = vorrq_s8(v11, (int8x16_t)vmovl_u16(*(uint16x4_t *)v14.i8));
      v7 += 2;
      v9 -= 16;
    }
    while (v9);
    int8x16_t v15 = vorrq_s8(vorrq_s8(v11, v8), vorrq_s8(v12, v10));
    *(int8x8_t *)v15.i8 = vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
    unsigned __int32 v4 = v15.i32[0] | v15.i32[1];
    if (v5 == v3) {
      goto LABEL_12;
    }
  }
  else
  {
    unsigned __int32 v4 = 0;
    LODWORD(v5) = 0;
    uint64_t v6 = a2;
  }
  int v16 = v3 - v5;
  do
  {
    int v18 = v6->i16[0];
    uint64_t v6 = (int16x8_t *)((char *)v6 + 2);
    int v17 = v18;
    if (v18 < 0) {
      int v17 = -v17;
    }
    v4 |= v17;
    --v16;
  }
  while (v16);
LABEL_12:
  if (v4 >> 14)
  {
    uint64_t v20 = 0;
    goto LABEL_19;
  }
LABEL_13:
  unsigned int v19 = 0;
  do
  {
    uint64_t v20 = v19 + 1;
    if (v4 >> 13) {
      break;
    }
    v4 *= 2;
    BOOL v75 = v19++ >= 0xE;
  }
  while (!v75);
LABEL_19:
  unsigned int v21 = 15 - v20;
  unsigned int v22 = 1 << (14 - v20);
  if (a1[2])
  {
    signed int v23 = a1[1];
    int v24 = (int16x4_t *)*((void *)a1 + 2);
    if ((int)v3 < 1) {
      goto LABEL_41;
    }
    uint64_t v25 = v23;
    unint64_t v26 = a3 + 2 * v23;
    int v27 = v3 + 1;
    unsigned int v28 = (v3 + 1) >> 1;
    uint64_t v29 = (_WORD *)(v26 + 2 * -v28);
    uint64_t v30 = v28 - 1;
    if (v30 >= 0xF)
    {
      LODWORD(v31) = 0;
      uint64_t v45 = 2 * v25;
      uint64_t v46 = v27 & 0xFFFFFFFE;
      uint64_t v47 = 2 * v25 + a3 - v46;
      if ((unint64_t)(v47 - (void)v24) >= 0x20 && (unint64_t)(v47 - (void)a2) >= 0x20)
      {
        uint64_t v48 = v30 + 1;
        uint64_t v31 = (v30 + 1) & 0x1FFFFFFF0;
        v29 += v31;
        uint8x8_t v49 = (int16x8_t *)((char *)a2 + 2 * v31);
        int v50 = (__int16 *)v24 + v31;
        int32x4_t v51 = vdupq_n_s32(v22);
        uint64_t v52 = v24 + 2;
        uint64_t v53 = (int16x8_t *)(v45 - v46 + a3 + 16);
        uint64_t v54 = (int16x4_t *)&a2[1];
        int32x4_t v55 = vnegq_s32(vdupq_n_s32(v21));
        uint64_t v56 = v31;
        do
        {
          int16x8_t v57 = *(int16x8_t *)v52[-2].i8;
          int16x8_t v58 = *(int16x8_t *)v54[-2].i8;
          int32x4_t v59 = vmlal_s16(v51, *(int16x4_t *)v58.i8, *(int16x4_t *)v57.i8);
          int32x4_t v60 = vmlal_high_s16(v51, v58, v57);
          int16x8_t v61 = vuzp1q_s16((int16x8_t)vshlq_s32(vmlal_s16(v51, *v54, *v52), v55), (int16x8_t)vshlq_s32(vmlal_high_s16(v51, *(int16x8_t *)v54->i8, *(int16x8_t *)v52->i8), v55));
          v53[-1] = vuzp1q_s16((int16x8_t)vshlq_s32(v59, v55), (int16x8_t)vshlq_s32(v60, v55));
          int16x8_t *v53 = v61;
          v52 += 4;
          v53 += 2;
          v54 += 4;
          v56 -= 16;
        }
        while (v56);
        if (v48 == v31) {
          goto LABEL_40;
        }
        goto LABEL_38;
      }
    }
    else
    {
      LODWORD(v31) = 0;
    }
    uint8x8_t v49 = a2;
    int v50 = (__int16 *)*((void *)a1 + 2);
LABEL_38:
    int v62 = v28 - v31;
    do
    {
      int v64 = *v50++;
      int v63 = v64;
      int v65 = v49->i16[0];
      uint8x8_t v49 = (int16x8_t *)((char *)v49 + 2);
      *v29++ = (int)(v22 + v65 * v63) >> v21;
      --v62;
    }
    while (v62);
LABEL_40:
    int v24 = (int16x4_t *)*((void *)a1 + 2);
    a2 = v49;
    LODWORD(v3) = *a1;
    signed int v23 = a1[1];
LABEL_41:
    int v66 = (int)v3 / 2;
    uint64_t v67 = (__int16 *)v24 + (int)v3 / 2 - 1;
    int v68 = v23 - (int)v3 / 2;
    if (v68 < 1)
    {
      int v68 = 0;
      if (v66 <= 0) {
        return v20;
      }
      goto LABEL_66;
    }
    uint64_t v69 = (v23 + ~v66);
    if (v69 >= 0xF)
    {
      LODWORD(v70) = 0;
      uint64_t v72 = 2 * v69 + 2;
      unint64_t v73 = a3 + v72;
      uint64_t v74 = 2 * v66;
      BOOL v75 = (unint64_t)a2->u64 + v72 <= a3 || (unint64_t)a2 >= v73;
      char v76 = !v75;
      BOOL v77 = (unint64_t)v24 + v74 - 2 * v69 - 2 < v73 && (unint64_t)v24 + v74 > a3;
      if (!v77 && (v76 & 1) == 0)
      {
        uint64_t v78 = v69 + 1;
        uint64_t v70 = (v69 + 1) & 0x1FFFFFFF0;
        uint64_t v79 = (_WORD *)(a3 + 2 * v70);
        uint64_t v80 = (int16x8_t *)((char *)a2 + 2 * v70);
        v67 -= v70;
        int32x4_t v81 = vdupq_n_s32(v22);
        uint64_t v82 = (int16x8_t *)((char *)&v24[-2] + 2 * v66);
        uint64_t v83 = (int16x4_t *)&a2[1];
        uint64_t v84 = (int16x8_t *)(a3 + 16);
        int32x4_t v85 = vnegq_s32(vdupq_n_s32(v21));
        uint64_t v86 = v70;
        do
        {
          int8x16_t v87 = (int8x16_t)vrev64q_s16(*v82);
          int16x8_t v88 = (int16x8_t)vextq_s8(v87, v87, 8uLL);
          int8x16_t v89 = (int8x16_t)vrev64q_s16(v82[-1]);
          int16x8_t v90 = (int16x8_t)vextq_s8(v89, v89, 8uLL);
          int16x8_t v91 = *(int16x8_t *)v83[-2].i8;
          int32x4_t v92 = vmlal_s16(v81, *(int16x4_t *)v91.i8, *(int16x4_t *)v88.i8);
          int32x4_t v93 = vmlal_high_s16(v81, v91, v88);
          int32x4_t v94 = vmlal_s16(v81, *v83, *(int16x4_t *)v90.i8);
          int32x4_t v95 = vmlal_high_s16(v81, *(int16x8_t *)v83->i8, v90);
          v84[-1] = vuzp1q_s16((int16x8_t)vshlq_s32(v92, v85), (int16x8_t)vshlq_s32(v93, v85));
          *uint64_t v84 = vuzp1q_s16((int16x8_t)vshlq_s32(v94, v85), (int16x8_t)vshlq_s32(v95, v85));
          v82 -= 2;
          v83 += 4;
          v84 += 2;
          v86 -= 16;
        }
        while (v86);
        if (v78 == v70)
        {
LABEL_65:
          int v66 = (int)*a1 / 2;
          a2 = v80;
          a3 = (unint64_t)v79;
          if (v68 >= v66) {
            return v20;
          }
LABEL_66:
          uint64_t v100 = (v66 + ~v68);
          if (v100 < 0xF
            || ((uint64_t v108 = 2 * v100 + 2, v109 = a3 + v108, a3 < (unint64_t)a2->u64 + v108)
              ? (BOOL v110 = (unint64_t)a2 >= v109)
              : (BOOL v110 = 1),
                v110 ? (char v111 = 0) : (char v111 = 1),
                (unint64_t)&v67[-v100] < v109 ? (BOOL v112 = a3 >= (unint64_t)(v67 + 1)) : (BOOL v112 = 1),
                !v112 || (v111 & 1) != 0))
          {
            uint64_t v101 = (_WORD *)a3;
            uint64_t v102 = a2;
            uint64_t v103 = v67;
          }
          else
          {
            uint64_t v113 = v100 + 1;
            uint64_t v114 = (v100 + 1) & 0x1FFFFFFF0;
            uint64_t v101 = (_WORD *)(a3 + 2 * v114);
            uint64_t v102 = (int16x8_t *)((char *)a2 + 2 * v114);
            uint64_t v103 = &v67[-v114];
            int32x4_t v115 = vdupq_n_s32(v22);
            v68 += v114;
            uint64_t v116 = (int16x8_t *)(v67 - 7);
            int v117 = (int16x4_t *)&a2[1];
            unsigned __int16 v118 = (int16x8_t *)(a3 + 16);
            int32x4_t v119 = vnegq_s32(vdupq_n_s32(v21));
            uint64_t v120 = v114;
            do
            {
              int8x16_t v121 = (int8x16_t)vrev64q_s16(*v116);
              int16x8_t v122 = (int16x8_t)vextq_s8(v121, v121, 8uLL);
              int8x16_t v123 = (int8x16_t)vrev64q_s16(v116[-1]);
              int16x8_t v124 = (int16x8_t)vextq_s8(v123, v123, 8uLL);
              int16x8_t v125 = *(int16x8_t *)v117[-2].i8;
              int32x4_t v126 = vmlal_s16(v115, *(int16x4_t *)v125.i8, *(int16x4_t *)v122.i8);
              int32x4_t v127 = vmlal_high_s16(v115, v125, v122);
              int16x8_t v128 = vaddq_s16(*v118, vuzp1q_s16((int16x8_t)vshlq_s32(vmlal_s16(v115, *v117, *(int16x4_t *)v124.i8), v119), (int16x8_t)vshlq_s32(vmlal_high_s16(v115, *(int16x8_t *)v117->i8, v124), v119)));
              v118[-1] = vaddq_s16(v118[-1], vuzp1q_s16((int16x8_t)vshlq_s32(v126, v119), (int16x8_t)vshlq_s32(v127, v119)));
              *unsigned __int16 v118 = v128;
              v116 -= 2;
              v117 += 4;
              v118 += 2;
              v120 -= 16;
            }
            while (v120);
            if (v113 == v114) {
              return v20;
            }
          }
          int v104 = v66 - v68;
          do
          {
            int v106 = *v103--;
            int v105 = v106;
            int v107 = v102->i16[0];
            uint64_t v102 = (int16x8_t *)((char *)v102 + 2);
            *v101++ += (int)(v22 + v107 * v105) >> v21;
            --v104;
          }
          while (v104);
          return v20;
        }
LABEL_62:
        int v96 = v70 + v66 - v23;
        do
        {
          int v98 = *v67--;
          int v97 = v98;
          int v99 = v80->i16[0];
          uint64_t v80 = (int16x8_t *)((char *)v80 + 2);
          *v79++ = (int)(v22 + v99 * v97) >> v21;
          BOOL v75 = __CFADD__(v96++, 1);
        }
        while (!v75);
        goto LABEL_65;
      }
    }
    else
    {
      LODWORD(v70) = 0;
    }
    uint64_t v79 = (_WORD *)a3;
    uint64_t v80 = a2;
    goto LABEL_62;
  }
  uint64_t v32 = (int16x4_t *)*((void *)a1 + 2);
  if ((int)v3 >= 1)
  {
    signed int v33 = (v3 + 1) >> 1;
    uint64_t v34 = (v33 - 1);
    if (v34 >= 0xF)
    {
      LODWORD(v35) = 0;
      if (a3 - (unint64_t)v32 >= 0x20 && a3 - (unint64_t)a2 >= 0x20)
      {
        uint64_t v164 = v34 + 1;
        uint64_t v35 = (v34 + 1) & 0x1FFFFFFF0;
        uint64_t v36 = (int16x8_t *)(a3 + 2 * v35);
        uint64_t v37 = (int16x4_t *)((char *)a2 + 2 * v35);
        int32x4_t v165 = vdupq_n_s32(v22);
        uint64_t v38 = (__int16 *)v32 + v35;
        unsigned int v166 = v32 + 2;
        unsigned int v167 = (int16x4_t *)&a2[1];
        unint64_t v168 = (int16x8_t *)(a3 + 16);
        int32x4_t v169 = vnegq_s32(vdupq_n_s32(v21));
        uint64_t v170 = v35;
        do
        {
          int16x8_t v171 = *(int16x8_t *)v166[-2].i8;
          int16x8_t v172 = *(int16x8_t *)v167[-2].i8;
          int32x4_t v173 = vmlal_s16(v165, *(int16x4_t *)v172.i8, *(int16x4_t *)v171.i8);
          int32x4_t v174 = vmlal_high_s16(v165, v172, v171);
          int16x8_t v175 = vuzp1q_s16((int16x8_t)vshlq_s32(vmlal_s16(v165, *v167, *v166), v169), (int16x8_t)vshlq_s32(vmlal_high_s16(v165, *(int16x8_t *)v167->i8, *(int16x8_t *)v166->i8), v169));
          v168[-1] = vuzp1q_s16((int16x8_t)vshlq_s32(v173, v169), (int16x8_t)vshlq_s32(v174, v169));
          *unint64_t v168 = v175;
          v166 += 4;
          v167 += 4;
          v168 += 2;
          v170 -= 16;
        }
        while (v170);
        if (v164 == v35)
        {
LABEL_29:
          uint64_t v43 = *((void *)a1 + 2);
          LODWORD(v3) = *a1;
          int v44 = v37;
          if (v33 >= (int)*a1) {
            goto LABEL_112;
          }
          if ((int)v3 >= 0) {
            int v129 = *a1;
          }
          else {
            int v129 = v3 + 1;
          }
          int v130 = v129 >> 1;
          __int16 v131 = (__int16 *)(v43 + 2 * ((v129 >> 1) - 1));
          uint64_t v132 = (v3 + ~v33);
          if (v132 < 0xF) {
            goto LABEL_108;
          }
          uint64_t v133 = 2 * v132 + 2;
          int v134 = (int16x4_t *)&v36->i8[v133];
          uint64_t v135 = 2 * v130;
          unint64_t v136 = v135 - 2 * v132 + v43 - 2;
          unint64_t v137 = v43 + v135;
          BOOL v138 = v36 >= (int16x8_t *)((char *)v44 + v133) || v44 >= v134;
          BOOL v139 = !v138;
          BOOL v140 = v136 >= (unint64_t)v134 || (unint64_t)v36 >= v137;
          if (!v140 || v139)
          {
LABEL_108:
            int v143 = v36;
            unint64_t v144 = v44;
          }
          else
          {
            uint64_t v141 = v132 + 1;
            uint64_t v142 = (v132 + 1) & 0x1FFFFFFF0;
            int v143 = (int16x8_t *)((char *)v36 + 2 * v142);
            unint64_t v144 = (int16x4_t *)((char *)v44 + 2 * v142);
            v131 -= v142;
            v33 += v142;
            int32x4_t v145 = vdupq_n_s32(v22);
            uint64_t v146 = (int16x8_t *)(v43 + 2 * v130 - 16);
            uint64_t v147 = v44 + 2;
            int v148 = v36 + 1;
            int32x4_t v149 = vnegq_s32(vdupq_n_s32(v21));
            uint64_t v150 = v142;
            do
            {
              int8x16_t v151 = (int8x16_t)vrev64q_s16(*v146);
              int16x8_t v152 = (int16x8_t)vextq_s8(v151, v151, 8uLL);
              int8x16_t v153 = (int8x16_t)vrev64q_s16(v146[-1]);
              int16x8_t v154 = (int16x8_t)vextq_s8(v153, v153, 8uLL);
              int16x8_t v155 = *(int16x8_t *)v147[-2].i8;
              int32x4_t v156 = vmlal_s16(v145, *(int16x4_t *)v155.i8, *(int16x4_t *)v152.i8);
              int32x4_t v157 = vmlal_high_s16(v145, v155, v152);
              int32x4_t v158 = vmlal_s16(v145, *v147, *(int16x4_t *)v154.i8);
              int32x4_t v159 = vmlal_high_s16(v145, *(int16x8_t *)v147->i8, v154);
              v148[-1] = vuzp1q_s16((int16x8_t)vshlq_s32(v156, v149), (int16x8_t)vshlq_s32(v157, v149));
              int16x8_t *v148 = vuzp1q_s16((int16x8_t)vshlq_s32(v158, v149), (int16x8_t)vshlq_s32(v159, v149));
              v146 -= 2;
              v147 += 4;
              v148 += 2;
              v150 -= 16;
            }
            while (v150);
            if (v141 == v142) {
              goto LABEL_111;
            }
          }
          int v160 = v3 - v33;
          do
          {
            int v162 = *v131--;
            int v161 = v162;
            int v163 = v144->i16[0];
            unint64_t v144 = (int16x4_t *)((char *)v144 + 2);
            v143->i16[0] = (int)(v22 + v163 * v161) >> v21;
            int v143 = (int16x8_t *)((char *)v143 + 2);
            --v160;
          }
          while (v160);
LABEL_111:
          LODWORD(v3) = *a1;
          goto LABEL_112;
        }
LABEL_27:
        int v39 = v33 - v35;
        do
        {
          int v41 = *v38++;
          int v40 = v41;
          int v42 = v37->i16[0];
          uint64_t v37 = (int16x4_t *)((char *)v37 + 2);
          v36->i16[0] = (int)(v22 + v42 * v40) >> v21;
          uint64_t v36 = (int16x8_t *)((char *)v36 + 2);
          --v39;
        }
        while (v39);
        goto LABEL_29;
      }
    }
    else
    {
      LODWORD(v35) = 0;
    }
    uint64_t v36 = (int16x8_t *)a3;
    uint64_t v37 = (int16x4_t *)a2;
    uint64_t v38 = (__int16 *)*((void *)a1 + 2);
    goto LABEL_27;
  }
LABEL_112:
  bzero((void *)(a3 + 2 * (int)v3), 2 * (int)(a1[1] - v3));
  return v20;
}

_DWORD *sub_10005ED2C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x16_t v8 = sub_1000BEC58(a1, "bh0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  int8x16_t v10 = (_DWORD *)sub_1000C33A0(32);
  if (v10)
  {
    if (!sub_1000BEECC(v9, v10)) {
      goto LABEL_11;
    }
    if (!sub_1000BEECC(v9, v10 + 1)) {
      goto LABEL_11;
    }
    if (!sub_1000BEE7C(v9, v10 + 2)) {
      goto LABEL_11;
    }
    int v13 = 0;
    int8x16_t v11 = v10 + 6;
    if (!sub_1000BF078(v9, 2, (uint64_t *)v10 + 3, &v13)) {
      goto LABEL_11;
    }
    if (*v11)
    {
      if (v13 == *v10 / 2)
      {
        *((void *)v10 + 2) = *v11;
        goto LABEL_12;
      }
LABEL_11:
      sub_1000C321C(*((void *)v10 + 3));
      *((void *)v10 + 2) = 0;
      *((void *)v10 + 3) = 0;
      sub_1000C321C((uint64_t)v10);
      int8x16_t v10 = 0;
    }
  }
LABEL_12:
  sub_1000BED3C(v9);
  return v10;
}

uint64_t sub_10005EE38()
{
  uint64_t v0 = (_DWORD *)sub_1000C33A0(16);
  uint64_t v1 = (uint64_t)v0;
  if (!v0) {
    return v1;
  }
  int v2 = qword_100101CC0;
  if (qword_100101CC0) {
    int v2 = *(_DWORD *)(qword_100101CC0 + 3416);
  }
  *uint64_t v0 = v2;
  uint64_t v3 = sub_1000C33A0(2 * (v2 + 1));
  *(void *)(v1 + 8) = v3;
  if (v3) {
    return v1;
  }
  sub_1000C321C(v1);
  return 0;
}

uint64_t sub_10005EEB0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C321C(*(void *)(result + 8));
    return sub_1000C321C(v1);
  }
  return result;
}

void sub_10005EEF4(int *a1)
{
  a1[1] = 0;
}

uint64_t sub_10005EF28(int *a1, int a2, int a3, int a4)
{
  int v4 = *a1;
  if (*a1 > a3)
  {
    if (v4 - 1 > a4) {
      int v4 = a4 + 1;
    }
    *(_WORD *)(*((void *)a1 + 1) + 2 * v4) = a2 + 1;
    uint64_t v5 = *((void *)a1 + 1);
    uint64_t v6 = 2 * (a3 & ~(a3 >> 31));
    int v7 = *(unsigned __int16 *)(v5 + v6);
    unint64_t v8 = v6 + 2;
    do
    {
      v7 += *(unsigned __int16 *)(v5 + v8);
      v8 += 2;
    }
    while (v7 <= a2);
    unint64_t v9 = v8 >> 1;
    __int16 v10 = (v8 >> 1) - 2;
    if (*a1 >= (int)v9) {
      LOWORD(a4) = v10;
    }
  }
  return (__int16)a4;
}

uint64_t sub_10005EF90(unsigned int *a1)
{
  uint64_t v2 = sub_1000C085C(*a1, 4, 0xFFFFFFFF);
  if ((int)*a1 >= 1)
  {
    uint64_t v3 = 0;
    do
      uint64_t v2 = sub_1000C085C(*(unsigned __int16 *)(*((void *)a1 + 1) + 2 * v3++), 2, v2);
    while (v3 < (int)*a1);
  }
  return v2;
}

uint64_t sub_10005EFFC(uint64_t a1)
{
  uint64_t result = sub_1000C33A0(40);
  if (result)
  {
    *(void *)uint64_t result = a1;
    *(_DWORD *)(result + 32) = 1;
  }
  return result;
}

uint64_t sub_10005F034(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 8);
    if ((int)v2 >= 1)
    {
      unint64_t v3 = v2 + 1;
      do
      {
        uint64_t v4 = (v3 - 2);
        uint64_t v5 = *(void *)(v1 + 24);
        uint64_t v6 = *(void *)(v5 + 8 * v4);
        if (v6)
        {
          sub_10005F1A4(*(void *)(v5 + 8 * v4));
          sub_1000C321C(v6);
          uint64_t v5 = *(void *)(v1 + 24);
        }
        *(void *)(v5 + 8 * v4) = 0;
        sub_1000C321C(*(void *)(*(void *)(v1 + 16) + 8 * v4));
        *(void *)(*(void *)(v1 + 16) + 8 * v4) = 0;
        --v3;
      }
      while (v3 > 1);
    }
    *(void *)(v1 + 8) = 0;
    sub_1000C321C(*(void *)(v1 + 24));
    *(void *)(v1 + 24) = 0;
    sub_1000C321C(*(void *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    *(_DWORD *)(v1 + 32) = 0;
    return sub_1000C321C(v1);
  }
  return result;
}

uint64_t sub_10005F0FC(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v6 = *(unsigned char **)(*(void *)(a1 + 16) + 8 * i);
      if (v6)
      {
        int v7 = sub_1000CAED0(v6, a2);
        int v3 = *(_DWORD *)(a1 + 8);
        if (!v7) {
          break;
        }
      }
    }
    if (i != v3 && i != -1) {
      goto LABEL_13;
    }
    return 0;
  }
  LODWORD(i) = 0;
  if (!v3) {
    return 0;
  }
LABEL_13:
  sub_10005F1A4(*(void *)(*(void *)(a1 + 24) + 8 * (int)i));
  return 1;
}

uint64_t sub_10005F1A4(uint64_t a1)
{
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v2 = 0;
    for (uint64_t i = 0; i < *(int *)(a1 + 60); ++i)
    {
      uint64_t v4 = *(void *)(a1 + 72) + v2;
      int v5 = *(_DWORD *)(a1 + 28);
      if (v5 < *(unsigned __int16 *)(v4 + 26))
      {
        sub_1000C321C(*(void *)(v4 + 32));
        if (*(_DWORD *)(a1 + 28) < (int)*(unsigned __int16 *)(v4 + 10)) {
LABEL_8:
        }
          sub_1000C321C(*(void *)(*(void *)(a1 + 72) + v2 + 16));
      }
      else if (v5 < *(unsigned __int16 *)(v4 + 10))
      {
        goto LABEL_8;
      }
      v2 += 40;
    }
  }
  sub_1000C321C(*(void *)(a1 + 88));
  *(void *)(a1 + 88) = 0;
  sub_1000C321C(*(void *)(a1 + 80));
  *(void *)(a1 + 80) = 0;
  sub_1000C321C(*(void *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  int v6 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 100) = 255;
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      sub_1000C321C(*(void *)(*(void *)(a1 + 40) + v7 + 24));
      sub_1000C321C(*(void *)(*(void *)(a1 + 40) + v7 + 8));
      ++v8;
      v7 += 32;
    }
    while (v8 < *(int *)(a1 + 32));
  }
  sub_1000C321C(*(void *)(a1 + 40));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_1000C0EBC(*(uint64_t **)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  sub_1000C321C(*(void *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 12) = -1;
  sub_1000C321C(*(void *)(a1 + 112));
  *(void *)(a1 + 112) = 0;
  uint64_t result = sub_1000C321C(*(void *)(a1 + 104));
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 102) = -1;
  return result;
}

uint64_t sub_10005F318(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      int v6 = *(unsigned char **)(*(void *)(a1 + 16) + 8 * i);
      if (v6)
      {
        int v7 = sub_1000CAED0(v6, a2);
        int v3 = *(_DWORD *)(a1 + 8);
        if (!v7) {
          break;
        }
      }
    }
    if (i != v3 && i != -1) {
      goto LABEL_13;
    }
    return 0;
  }
  LODWORD(i) = 0;
  if (!v3) {
    return 0;
  }
LABEL_13:
  uint64_t v10 = 8 * (int)i;
  sub_1000C321C(*(void *)(*(void *)(a1 + 16) + v10));
  *(void *)(*(void *)(a1 + 16) + v10) = 0;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(v11 + v10);
  if (v12)
  {
    sub_10005F1A4(v12);
    sub_1000C321C(v12);
    uint64_t v11 = *(void *)(a1 + 24);
  }
  *(void *)(v11 + 8 * (int)i) = 0;
  return 1;
}

uint64_t sub_10005F3F8(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 24) + 8 * a2);
  uint64_t v3 = *(int *)(v2 + 60);
  if (!v3 || *(void *)(v2 + 104)) {
    return 1;
  }
  *(void *)(v2 + 104) = sub_1000C328C(2 * v3);
  int v5 = sub_1000C328C(2 * *(int *)(v2 + 60));
  *(void *)(v2 + 112) = v5;
  int v6 = *(_WORD **)(v2 + 104);
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    sub_1000C321C((uint64_t)v5);
    sub_1000C321C(*(void *)(v2 + 104));
    return 0;
  }
  uint64_t v8 = **(int **)(v2 + 72) - (uint64_t)*(int *)(v2 + 24);
  if ((int)v8 >= 257)
  {
    if (v8 < 0x10000)
    {
      unsigned int v10 = 0;
      unsigned int v12 = **(_DWORD **)(v2 + 72) - *(_DWORD *)(v2 + 24);
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = **(_DWORD **)(v2 + 72) - *(_DWORD *)(v2 + 24);
      do
      {
        ++v10;
        unsigned int v12 = v11 >> 1;
        unsigned int v13 = v11 >> 17;
        v11 >>= 1;
      }
      while (v13);
    }
    unint64_t v14 = byte_1000F4B5B[(unint64_t)v12 >> 8] + (unint64_t)v10;
    __int16 v9 = byte_1000F4A00[((1 << (v14 - 1)) + v8) >> v14] + byte_1000F4B01[v14];
  }
  else
  {
    __int16 v9 = byte_1000F4A00[v8];
  }
  __int16 v15 = *(_WORD *)(v2 + 98) - v9 + *(_WORD *)(v2 + 100);
  _WORD *v6 = v15;
  **(_WORD **)(v2 + 112) = v15;
  if (*(int *)(v2 + 60) >= 2)
  {
    uint64_t v16 = 1;
    uint64_t v17 = 44;
    do
    {
      __int16 v18 = *(_WORD *)(v2 + 100) + *(_WORD *)(v2 + 98) - *(_DWORD *)(*(void *)(v2 + 72) + v17);
      *(_WORD *)(*(void *)(v2 + 104) + 2 * v16) = v18;
      if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 3464)) {
        v18 -= *(_WORD *)(v2 + 98);
      }
      *(_WORD *)(*(void *)(v2 + 112) + 2 * v16++) = v18;
      v17 += 40;
    }
    while (v16 < *(int *)(v2 + 60));
  }
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 3464)) {
    return 1;
  }
  uint64_t v19 = *(void *)(v2 + 72);
  uint64_t result = 1;
  if (*(_WORD *)(v19 + 8))
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    do
    {
      unsigned int v22 = (unsigned __int16 *)(*(void *)(v19 + 16) + v20);
      unint64_t v23 = v22[1];
      if (v23 > 0x100) {
        int v24 = byte_1000F4A00[((1 << (byte_1000F4B5B[v23 >> 8] - 1)) + v23) >> byte_1000F4B5B[v23 >> 8]]
      }
            + byte_1000F4B01[byte_1000F4B5B[v23 >> 8]];
      else {
        int v24 = byte_1000F4A00[v23];
      }
      uint64_t v25 = *v22;
      uint64_t v26 = *(void *)(v2 + 112);
      int v27 = *(__int16 *)(v26 + 2 * v25);
      int v28 = *(_DWORD *)(v19 + 4) - v24 + *(unsigned __int16 *)(v2 + 96);
      int v29 = (__int16)v28;
      __int16 v30 = v28 - v27;
      __int16 v31 = v27 - v28;
      if ((__int16)v28 >= v27) {
        LOWORD(v28) = *(_WORD *)(v26 + 2 * v25);
      }
      if (v29 >= v27) {
        __int16 v32 = v30;
      }
      else {
        __int16 v32 = v31;
      }
      if (v32 <= 73) {
        LOWORD(v28) = v28 - byte_1000F4B11[v32];
      }
      *(_WORD *)(v26 + 2 * v25) = v28;
      ++v21;
      v20 += 4;
    }
    while (v21 < *(unsigned __int16 *)(v19 + 8));
    return 1;
  }
  return result;
}

uint64_t sub_10005F69C(uint64_t a1, int a2, uint64_t a3, unsigned __int16 *a4, unsigned int a5)
{
  uint64_t v5 = *a4;
  if (v5 == 65533)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8 * a2);
    return *(__int16 *)(*(void *)(v6 + 112)
                                    + 2 * *(unsigned __int16 *)(*(void *)(v6 + 16) + 2 * a5));
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8 * a2);
  if (a5 != 65532)
  {
    uint64_t v11 = *(void *)(v8 + 16);
    unsigned int v12 = *(unsigned __int16 *)(v11 + 2 * a5);
    uint64_t v13 = *(void *)(v8 + 72);
    unsigned int v14 = *(unsigned __int16 *)(v11 + 2 * v5);
    int v10 = (__int16)(*(_WORD *)(v8 + 100)
                  - *(_WORD *)(v13 + 40 * *(unsigned __int16 *)(v11 + 2 * a5) + 4)
                  + *(_WORD *)(v8 + 98));
    uint64_t v15 = *(unsigned __int16 *)(v13 + 40 * v14 + 8);
    if (qword_100101CC0 && *(void *)(qword_100101CC0 + 3432) > v15)
    {
      if (!*(_WORD *)(v13 + 40 * v14 + 8)) {
        return (__int16)v10;
      }
      uint64_t v16 = 0;
      uint64_t v17 = *(unsigned __int16 **)(v13 + 40 * v14 + 16);
      while (1)
      {
        unsigned int v18 = *v17;
        v17 += 2;
        BOOL v19 = v18 == v12;
        if (v18 >= v12) {
          break;
        }
        if (v15 == ++v16) {
          return (__int16)v10;
        }
      }
      if (!v19) {
        return (__int16)v10;
      }
      unint64_t v24 = *(unsigned __int16 *)(*(void *)(v13 + 40 * v14 + 16) + 4 * (int)v16 + 2);
      if (v24 > 0x100)
      {
LABEL_36:
        int v25 = byte_1000F4A00[((1 << (byte_1000F4B5B[v24 >> 8] - 1)) + v24) >> byte_1000F4B5B[v24 >> 8]]
            + byte_1000F4B01[byte_1000F4B5B[v24 >> 8]];
LABEL_37:
        int v31 = *(unsigned __int16 *)(v8 + 96) + *(_DWORD *)(v13 + 40 * v14 + 4) - v25;
        int v33 = (__int16)v31;
        __int16 v34 = v31 - v10;
        LOWORD(v31) = v10 - v31;
        if (v10 <= v33) {
          LOWORD(v31) = v34;
        }
        int v31 = (__int16)v31;
        if (v10 >= v33) {
          LOWORD(v10) = v33;
        }
        if ((__int16)v31 <= 73) {
          return (__int16)(v10 - byte_1000F4B11[v31]);
        }
        return (__int16)v10;
      }
    }
    else
    {
      uint64_t v20 = *(void *)(v13 + 40 * v14 + 16);
      int v21 = 0;
      if (*(_WORD *)(v13 + 40 * v14 + 8))
      {
        signed int v22 = v15 - 1;
        do
        {
          unsigned int v23 = (v21 + v22) >> 1;
          if (v12 <= *(unsigned __int16 *)(v20 + 4 * v23)) {
            signed int v22 = v23 - 1;
          }
          else {
            int v21 = v23 + 1;
          }
        }
        while (v21 <= v22);
      }
      if (v21 >= (int)v15 || v12 != *(unsigned __int16 *)(v20 + 4 * v21)) {
        return (__int16)v10;
      }
      unint64_t v24 = *(unsigned __int16 *)(v20 + 4 * v21 + 2);
      if (v24 > 0x100) {
        goto LABEL_36;
      }
    }
    int v25 = byte_1000F4A00[v24];
    goto LABEL_37;
  }
  int v9 = **(__int16 **)(v8 + 112);
  LOWORD(v10) = **(_WORD **)(v8 + 112);
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 3464)) {
    return (__int16)v10;
  }
  unsigned int v26 = *(unsigned __int16 *)(*(void *)(v8 + 16) + 2 * v5);
  uint64_t v27 = *(void *)(v8 + 72);
  int v28 = *(_WORD **)(v27 + 40 * v26 + 16);
  if (*v28) {
    return (__int16)v10;
  }
  unint64_t v29 = (unsigned __int16)v28[1];
  int v30 = v29 > 0x100
      ? byte_1000F4A00[((1 << (byte_1000F4B5B[v29 >> 8] - 1)) + v29) >> byte_1000F4B5B[v29 >> 8]]
      + byte_1000F4B01[byte_1000F4B5B[v29 >> 8]]
      : byte_1000F4A00[v29];
  int v31 = *(_DWORD *)(v27 + 40 * v26 + 4) - v30 + *(unsigned __int16 *)(v8 + 96);
  __int16 v32 = v10 - v31;
  if ((__int16)v31 >= v9)
  {
    LOWORD(v31) = v31 - v10;
  }
  else
  {
    LOWORD(v10) = v31;
    LOWORD(v31) = v32;
  }
  int v31 = (__int16)v31;
  if ((__int16)v31 > 73) {
    return (__int16)v10;
  }
  return (__int16)(v10 - byte_1000F4B11[v31]);
}

uint64_t sub_10005F970(uint64_t result, int a2, unsigned int a3, int a4, unsigned __int16 *a5, _WORD *a6)
{
  if (a4)
  {
    uint64_t v6 = *(void *)(*(void *)(result + 24) + 8 * a2);
    unsigned int v7 = *(unsigned __int16 *)(*(void *)(v6 + 16) + 2 * a3);
    int v8 = *(unsigned __int16 *)(v6 + 102);
    if (v7 != v8)
    {
      if (v8 != 0xFFFF)
      {
        uint64_t v9 = *(void *)(v6 + 72);
        uint64_t v10 = v9 + 40 * *(unsigned __int16 *)(v6 + 102);
        unsigned int v13 = *(unsigned __int16 *)(v10 + 8);
        uint64_t v11 = (unsigned __int16 *)(v10 + 8);
        unsigned int v12 = v13;
        if (v13)
        {
          uint64_t v14 = 0;
          unint64_t v15 = 0;
          uint64_t v16 = (void *)(v9 + 40 * *(unsigned __int16 *)(v6 + 102) + 16);
          do
          {
            if (*(_WORD *)(*v16 + v14))
            {
              *(_WORD *)(*(void *)(v6 + 104) + 2 * *(unsigned __int16 *)(*v16 + v14)) = *(_WORD *)(v6 + 100)
                                                                                          + *(_WORD *)(v6 + 98)
                                                                                          - *(_DWORD *)(*(void *)(v6 + 72) + 40 * *(unsigned __int16 *)(*v16 + v14) + 4);
              unsigned int v12 = *v11;
            }
            ++v15;
            v14 += 4;
          }
          while (v15 < v12);
        }
      }
      uint64_t v17 = *(void *)(v6 + 72);
      uint64_t v18 = v17 + 40 * v7;
      unsigned int v21 = *(unsigned __int16 *)(v18 + 8);
      uint64_t v20 = (unsigned __int16 *)(v18 + 8);
      unsigned int v19 = v21;
      if (v21)
      {
        uint64_t v22 = 0;
        unint64_t v23 = 0;
        uint64_t v24 = v17 + 40 * v7;
        int v25 = (void *)(v24 + 16);
        unsigned int v26 = (_DWORD *)(v24 + 4);
        uint64_t result = 1;
        do
        {
          uint64_t v27 = *(unsigned __int16 *)(*v25 + v22);
          if (*(_WORD *)(*v25 + v22))
          {
            unint64_t v28 = *(unsigned __int16 *)(*v25 + v22 + 2);
            if (v28 > 0x100) {
              int v29 = byte_1000F4A00[((1 << (byte_1000F4B5B[v28 >> 8] - 1)) + v28) >> byte_1000F4B5B[v28 >> 8]]
            }
                  + byte_1000F4B01[byte_1000F4B5B[v28 >> 8]];
            else {
              int v29 = byte_1000F4A00[v28];
            }
            uint64_t v30 = *(void *)(v6 + 104);
            int v31 = *(__int16 *)(v30 + 2 * v27);
            int v32 = *v26 - v29 + *(unsigned __int16 *)(v6 + 96);
            int v33 = (__int16)v32;
            __int16 v34 = v32 - v31;
            __int16 v35 = v31 - v32;
            if ((__int16)v32 >= v31) {
              LOWORD(v32) = *(_WORD *)(v30 + 2 * v27);
            }
            if (v33 >= v31) {
              __int16 v36 = v34;
            }
            else {
              __int16 v36 = v35;
            }
            if (v36 <= 73) {
              LOWORD(v32) = v32 - byte_1000F4B11[v36];
            }
            *(_WORD *)(v30 + 2 * v27) = v32;
            unsigned int v19 = *v20;
          }
          ++v23;
          v22 += 4;
        }
        while (v23 < v19);
      }
    }
    if (a4 >= 1)
    {
      uint64_t v37 = a4;
      do
      {
        unsigned int v38 = *a5++;
        *a6++ = *(_WORD *)(*(void *)(v6 + 104) + 2 * *(unsigned __int16 *)(*(void *)(v6 + 16) + 2 * v38));
        --v37;
      }
      while (v37);
    }
    *(_WORD *)(v6 + 102) = v7;
  }
  return result;
}

uint64_t sub_10005FB50(uint64_t result, int a2, int a3, unsigned __int16 *a4, _WORD *a5)
{
  if (a3 >= 1)
  {
    uint64_t v5 = *(void *)(*(void *)(result + 24) + 8 * a2);
    uint64_t v6 = a3;
    do
    {
      unsigned int v7 = *a4++;
      *a5++ = *(_WORD *)(*(void *)(v5 + 112) + 2 * *(unsigned __int16 *)(*(void *)(v5 + 16) + 2 * v7));
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_10005FB88(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 8 * a2);
  int v4 = **(__int16 **)(v3 + 112);
  __int16 v5 = **(_WORD **)(v3 + 112);
  if (qword_100101CC0 && *(_DWORD *)(qword_100101CC0 + 3464)) {
    return v5;
  }
  uint64_t v7 = *(void *)(v3 + 72);
  int v8 = *(_WORD **)(v7 + 40 * *(unsigned __int16 *)(*(void *)(v3 + 16) + 2 * a3) + 16);
  if (*v8) {
    return v5;
  }
  unint64_t v9 = (unsigned __int16)v8[1];
  int v10 = v9 > 0x100
      ? byte_1000F4A00[((1 << (byte_1000F4B5B[v9 >> 8] - 1)) + v9) >> byte_1000F4B5B[v9 >> 8]]
      + byte_1000F4B01[byte_1000F4B5B[v9 >> 8]]
      : byte_1000F4A00[v9];
  int v11 = *(_DWORD *)(v7 + 40 * *(unsigned __int16 *)(*(void *)(v3 + 16) + 2 * a3) + 4)
      - v10
      + *(unsigned __int16 *)(v3 + 96);
  __int16 v12 = v5 - v11;
  if ((__int16)v11 >= v4)
  {
    __int16 v13 = v11 - v5;
  }
  else
  {
    __int16 v5 = v11;
    __int16 v13 = v12;
  }
  if (v13 > 73) {
    return v5;
  }
  else {
    return (__int16)(v5 - byte_1000F4B11[v13]);
  }
}

BOOL sub_10005FC8C(uint64_t a1, uint64_t a2, char *a3)
{
  __sprintf_chk(v100, 0, 0x100uLL, "%s", "bir0");
  uint64_t v6 = sub_1000BFC50(a2, v100, a3);
  if (!v6) {
    return 0;
  }
  uint64_t v8 = v6;
  if (!sub_1000BFD58(v6, *(_DWORD *)(a1 + 8), v7)) {
    goto LABEL_18;
  }
  int v10 = *(_DWORD *)(a1 + 8);
  if (v10 >= 1)
  {
    uint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = *(void *)(*(void *)(a1 + 16) + 8 * v11);
      if (v12)
      {
        __int32 v13 = sub_1000CAD00(v12) + 1;
        if (!sub_1000BFD58(v8, v13, v14)
          || ((unint64_t v15 = *(void **)(*(void *)(a1 + 16) + 8 * v11)) != 0 ? (v16 = v13) : (v16 = 0),
              !sub_1000BFDB0(v8, v15, v16, 1, v9)))
        {
LABEL_13:
          int v10 = *(_DWORD *)(a1 + 8);
          if (v11 == v10) {
            goto LABEL_14;
          }
LABEL_18:
          BOOL v18 = 0;
          goto LABEL_102;
        }
      }
      else if (!sub_1000BFD58(v8, 0, v9))
      {
        goto LABEL_13;
      }
      if (++v11 >= *(int *)(a1 + 8)) {
        goto LABEL_13;
      }
    }
  }
  if (v10) {
    goto LABEL_18;
  }
LABEL_14:
  if (v10 >= 1)
  {
    uint64_t v17 = 0;
    while (1)
    {
      if (*(void *)(*(void *)(a1 + 16) + 8 * v17))
      {
        uint64_t v19 = *(void *)(*(void *)(a1 + 24) + 8 * v17);
        if (!sub_1000BFD58(v8, *(_DWORD *)(v19 + 8), v9)) {
          goto LABEL_99;
        }
        if (!sub_1000BFD58(v8, *(_DWORD *)(v19 + 12), v20)) {
          goto LABEL_99;
        }
        if (!sub_1000BFD58(v8, *(_DWORD *)(v19 + 24), v21)) {
          goto LABEL_99;
        }
        if (!sub_1000BFD58(v8, *(_DWORD *)(v19 + 28), v22)) {
          goto LABEL_99;
        }
        if (!sub_1000BFD58(v8, *(_DWORD *)(v19 + 32), v23)) {
          goto LABEL_99;
        }
        if (!sub_1000BFD58(v8, *(_DWORD *)(v19 + 56), v24)) {
          goto LABEL_99;
        }
        if (!sub_1000BFD58(v8, *(_DWORD *)(v19 + 60), v25)) {
          goto LABEL_99;
        }
        if (!sub_1000BFD58(v8, *(unsigned __int16 *)(v19 + 100), v26)) {
          goto LABEL_99;
        }
        unint64_t v28 = *(void **)(v19 + 16);
        if (v28)
        {
          if (!sub_1000BFDB0(v8, v28, *(_DWORD *)(v19 + 12) + 1, 2, v27)) {
            goto LABEL_99;
          }
        }
        int v29 = *(_DWORD *)(v19 + 32);
        if (v29 < 1)
        {
          if (v29) {
            goto LABEL_99;
          }
        }
        else
        {
          uint64_t v30 = 0;
          for (uint64_t i = 0; i < *(int *)(v19 + 32); ++i)
          {
            uint64_t v32 = *(void *)(v19 + 40);
            if (!sub_1000BFD58(v8, *(_DWORD *)(v32 + v30), v27)) {
              break;
            }
            uint64_t v33 = v32 + v30;
            if (!sub_1000BFD58(v8, *(_DWORD *)(v32 + v30 + 16), v27)) {
              break;
            }
            __int32 v34 = sub_1000CED6C(*(void *)(v33 + 8));
            if (!sub_1000BFD58(v8, v34, v35)) {
              break;
            }
            if (v34 >= 1)
            {
              __int16 v36 = *(void **)(v33 + 8);
              unsigned int v37 = v36 ? v34 + 1 : 0;
              if (!sub_1000BFDB0(v8, v36, v37, 2, v27)) {
                break;
              }
            }
            unsigned int v38 = *(void **)(v32 + v30 + 24);
            if (v38)
            {
              if (!sub_1000BFDB0(v8, v38, *(_DWORD *)(v33 + 16), 2, v27)) {
                break;
              }
            }
            else if (!sub_1000BFDB0(v8, 0, 0, 2, v27))
            {
              break;
            }
            v30 += 32;
          }
          if (i != *(_DWORD *)(v19 + 32))
          {
LABEL_99:
            int v10 = *(_DWORD *)(a1 + 8);
            goto LABEL_101;
          }
        }
        int v39 = *(_DWORD *)(v19 + 60);
        if (v39 < 1)
        {
          if (v39) {
            goto LABEL_99;
          }
        }
        else
        {
          uint64_t v99 = v17;
          for (uint64_t j = 0; j < *(int *)(v19 + 60); ++j)
          {
            uint64_t v41 = *(void *)(v19 + 72);
            if (!sub_1000BFD58(v8, *(_DWORD *)(v41 + 40 * j), v27)) {
              break;
            }
            if (!sub_1000BFD58(v8, *(_DWORD *)(v41 + 40 * j + 4), v27)) {
              break;
            }
            uint64_t v42 = v41 + 40 * j;
            __int32 v44 = *(unsigned __int16 *)(v42 + 8);
            uint64_t v43 = (_WORD *)(v42 + 8);
            if (!sub_1000BFD58(v8, v44, v27)) {
              break;
            }
            uint64_t v45 = v41 + 40 * j;
            __int32 v47 = *(unsigned __int16 *)(v45 + 10);
            uint64_t v46 = (unsigned __int16 *)(v45 + 10);
            if (!sub_1000BFD58(v8, v47, v27)) {
              break;
            }
            uint64_t v48 = v41 + 40 * j;
            __int32 v50 = *(unsigned __int16 *)(v48 + 24);
            uint8x8_t v49 = (_WORD *)(v48 + 24);
            if (!sub_1000BFD58(v8, v50, v27)) {
              break;
            }
            uint64_t v51 = v41 + 40 * j;
            __int32 v53 = *(unsigned __int16 *)(v51 + 26);
            uint64_t v52 = (unsigned __int16 *)(v51 + 26);
            if (!sub_1000BFD58(v8, v53, v27)) {
              break;
            }
            if (*v43 && *(_DWORD *)(v19 + 28) < (int)*v46)
            {
              int16x8_t v61 = (char *)sub_1000CD3E8(2 * (unsigned __int16)*v43, v54, v55, v56, v57, v58, v59, v60);
              unint64_t v69 = sub_1000CD3E8(2 * (unsigned __int16)*v43, v62, v63, v64, v65, v66, v67, v68);
              uint64_t v71 = (void *)v69;
              if (*v43)
              {
                uint64_t v72 = 0;
                unint64_t v73 = 0;
                uint64_t v74 = (void *)(v41 + 40 * j + 16);
                do
                {
                  uint64_t v75 = 2 * v73;
                  *(_WORD *)&v61[v75] = *(_WORD *)(*v74 + v72);
                  *(_WORD *)(v69 + v75) = *(_WORD *)(*v74 + v72 + 2);
                  ++v73;
                  unint64_t v76 = (unsigned __int16)*v43;
                  v72 += 4;
                }
                while (v73 < v76);
              }
              else
              {
                LODWORD(v76) = 0;
              }
              if (v61) {
                unsigned int v77 = v76;
              }
              else {
                unsigned int v77 = 0;
              }
              if (!sub_1000BFDB0(v8, v61, v77, 2, v70)) {
                break;
              }
              if (v71)
              {
                if (!sub_1000BFDB0(v8, v71, (unsigned __int16)*v43, 2, v27)) {
                  break;
                }
              }
              else if (!sub_1000BFDB0(v8, 0, 0, 2, v27))
              {
                break;
              }
              sub_1000CD4D0(v71, 2 * (unsigned __int16)*v43);
              sub_1000CD4D0(v61, 2 * (unsigned __int16)*v43);
            }
            if (*v49 && *(_DWORD *)(v19 + 28) < (int)*v52)
            {
              uint64_t v78 = (char *)sub_1000CD3E8(2 * (unsigned __int16)*v49, v54, v55, v56, v57, v58, v59, v60);
              unint64_t v86 = sub_1000CD3E8(2 * (unsigned __int16)*v49, v79, v80, v81, v82, v83, v84, v85);
              int16x8_t v88 = (void *)v86;
              if (*v49)
              {
                uint64_t v89 = 0;
                unint64_t v90 = 0;
                int16x8_t v91 = (void *)(v41 + 40 * j + 32);
                do
                {
                  uint64_t v92 = 2 * v90;
                  *(_WORD *)&v78[v92] = *(_WORD *)(*v91 + v89);
                  *(_WORD *)(v86 + v92) = *(_WORD *)(*v91 + v89 + 2);
                  ++v90;
                  unint64_t v93 = (unsigned __int16)*v49;
                  v89 += 4;
                }
                while (v90 < v93);
              }
              else
              {
                LODWORD(v93) = 0;
              }
              if (v78) {
                unsigned int v94 = v93;
              }
              else {
                unsigned int v94 = 0;
              }
              if (!sub_1000BFDB0(v8, v78, v94, 2, v87)) {
                break;
              }
              if (v88)
              {
                if (!sub_1000BFDB0(v8, v88, (unsigned __int16)*v49, 2, v27)) {
                  break;
                }
              }
              else if (!sub_1000BFDB0(v8, 0, 0, 2, v27))
              {
                break;
              }
              sub_1000CD4D0(v88, 2 * (unsigned __int16)*v49);
              sub_1000CD4D0(v78, 2 * (unsigned __int16)*v49);
            }
          }
          int v39 = *(_DWORD *)(v19 + 60);
          uint64_t v17 = v99;
          if (j != v39) {
            goto LABEL_99;
          }
        }
        int32x4_t v95 = *(void **)(v19 + 80);
        if (v95)
        {
          if (!sub_1000BFDB0(v8, v95, *(_DWORD *)(v19 + 28) * v39, 4, v27)) {
            goto LABEL_99;
          }
        }
        else if (!sub_1000BFDB0(v8, 0, 0, 4, v27))
        {
          goto LABEL_99;
        }
        int v97 = *(void **)(v19 + 88);
        if (v97)
        {
          if (!sub_1000BFDB0(v8, v97, *(_DWORD *)(v19 + 60) * *(_DWORD *)(v19 + 28), 4, v96)) {
            goto LABEL_99;
          }
        }
        else if (!sub_1000BFDB0(v8, 0, 0, 4, v96))
        {
          goto LABEL_99;
        }
        int v10 = *(_DWORD *)(a1 + 8);
      }
      if (++v17 >= v10) {
        goto LABEL_99;
      }
    }
  }
  LODWORD(v17) = 0;
LABEL_101:
  BOOL v18 = v17 == v10;
LABEL_102:
  sub_1000BFD14(v8);
  return v18;
}

uint64_t sub_100060304(uint64_t a1, uint64_t a2, char *a3)
{
  __sprintf_chk(v104, 0, 0x100uLL, "%s", "bir0");
  uint64_t v11 = sub_1000BEC58(a2, v104, a3, v6, v7, v8, v9, v10);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    __int32 v13 = (int *)(a1 + 8);
    BOOL v14 = sub_1000BEECC((uint64_t)v11, (void *)(a1 + 8));
    uint64_t v15 = *(unsigned int *)(a1 + 8);
    if (!v14) {
      goto LABEL_137;
    }
    *(_DWORD *)(a1 + 12) = v15;
    if ((int)v15 < 1) {
      goto LABEL_21;
    }
    *(void *)(a1 + 16) = sub_1000C33A0(8 * v15);
    unsigned int v16 = (uint64_t *)(a1 + 16);
    uint64_t v17 = sub_1000C33A0(8 * *(int *)(a1 + 8));
    *(void *)(a1 + 24) = v17;
    if (*(void *)(a1 + 16)) {
      BOOL v18 = v17 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18)
    {
      sub_1000C321C(v17);
      sub_1000C321C(*v16);
      *__int32 v13 = 0;
      *unsigned int v16 = 0;
      *(void *)(a1 + 24) = 0;
LABEL_141:
      sub_10005F034(a1);
      uint64_t v19 = 0;
      goto LABEL_142;
    }
    LODWORD(v15) = *v13;
    if (*v13 < 1)
    {
LABEL_21:
      if (!v15) {
        goto LABEL_22;
      }
      goto LABEL_137;
    }
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    do
    {
      int v103 = 0;
      if (!sub_1000BEECC(v12, &v103)
        || v103 >= 1
        && ((int v102 = 0, !sub_1000BF078(v12, 1, (uint64_t *)(*v16 + v20), &v102))
         || *(void *)(*v16 + 8 * v21) && v102 != v103))
      {
        LODWORD(v15) = *v13;
        if (v21 == *v13) {
          goto LABEL_22;
        }
        goto LABEL_137;
      }
      ++v21;
      uint64_t v15 = *v13;
      v20 += 8;
    }
    while (v21 < v15);
    if (v21 != v15) {
      goto LABEL_137;
    }
LABEL_22:
    if ((int)v15 >= 1)
    {
      uint64_t v22 = 0;
      while (1)
      {
        if (*(void *)(*(void *)(a1 + 16) + 8 * v22))
        {
          *(void *)(*(void *)(a1 + 24) + 8 * v22) = sub_1000C33A0(336);
          uint8x8_t v23 = *(void **)(*(void *)(a1 + 24) + 8 * v22);
          if (!v23) {
            goto LABEL_123;
          }
          *uint8x8_t v23 = *(void *)a1;
          LODWORD(v23) = qword_100101CC0;
          if (qword_100101CC0) {
            uint8x8_t v23 = *(void **)(qword_100101CC0 + 3472);
          }
          uint64_t v100 = v22;
          int v24 = (int)v23 / 5;
          *(_WORD *)(*(void *)(*(void *)(a1 + 24) + 8 * v22) + 96) = asc_1000F6B51[20 - v24];
          *(_WORD *)(*(void *)(*(void *)(a1 + 24) + 8 * v22) + 98) = asc_1000F6B51[v24];
          *(_WORD *)(*(void *)(*(void *)(a1 + 24) + 8 * v22) + 102) = -1;
          uint64_t v98 = 8 * v22;
          uint8x8_t v25 = *(_DWORD **)(*(void *)(a1 + 24) + 8 * v22);
          int v103 = 0;
          if (!sub_1000BEECC(v12, &v103)) {
            goto LABEL_129;
          }
          v25[2] = v103;
          if (!sub_1000BEECC(v12, v25 + 3)) {
            goto LABEL_129;
          }
          if (!sub_1000BEECC(v12, v25 + 6)) {
            goto LABEL_129;
          }
          uint64_t v101 = v25 + 7;
          if (!sub_1000BEECC(v12, v25 + 7)) {
            goto LABEL_129;
          }
          uint8x8_t v26 = v25 + 8;
          if (!sub_1000BEECC(v12, v25 + 8)) {
            goto LABEL_129;
          }
          if (!sub_1000BEECC(v12, v25 + 14)) {
            goto LABEL_129;
          }
          uint8x8_t v27 = v25 + 15;
          if (!sub_1000BEECC(v12, v25 + 15) || !sub_1000BEF74(v12, (_WORD *)v25 + 50)) {
            goto LABEL_129;
          }
          uint64_t v28 = v25[8];
          v25[9] = v28;
          v25[16] = v25[15];
          if ((v25[3] & 0x80000000) == 0)
          {
            int v103 = 0;
            if (!sub_1000BF078(v12, 2, (uint64_t *)v25 + 2, &v103)
              || *((void *)v25 + 2) && v103 != v25[3] + 1)
            {
              goto LABEL_129;
            }
            uint64_t v28 = *v26;
          }
          if ((int)v28 < 1) {
            goto LABEL_59;
          }
          uint64_t v29 = sub_1000C33A0(32 * v28);
          *((void *)v25 + 5) = v29;
          if (!v29)
          {
            *uint8x8_t v26 = 0;
LABEL_128:
            *uint8x8_t v27 = 0;
LABEL_129:
            if ((int)v25[15] >= 1 && !*((void *)v25 + 9)) {
              v25[15] = 0;
            }
            if ((int)v25[8] >= 1 && !*((void *)v25 + 5)) {
              v25[8] = 0;
            }
            sub_1000C321C(*(void *)(*(void *)(a1 + 24) + v98));
            *(void *)(*(void *)(a1 + 24) + v98) = 0;
            LODWORD(v15) = *v13;
            if (v100 == *v13) {
              goto LABEL_136;
            }
            goto LABEL_137;
          }
          if (*v26 < 1)
          {
LABEL_59:
            if (*v26) {
              goto LABEL_129;
            }
            goto LABEL_63;
          }
          uint64_t v30 = v13;
          uint64_t v31 = 0;
          uint64_t v32 = 0;
          while (1)
          {
            uint64_t v33 = *((void *)v25 + 5);
            int v103 = 0;
            if (!sub_1000BEECC(v12, (void *)(v33 + v31))
              || !sub_1000BEECC(v12, (void *)(v33 + v31 + 16))
              || !sub_1000BEECC(v12, &v103))
            {
              goto LABEL_62;
            }
            if (v103 >= 1)
            {
              int v102 = 0;
              if (!sub_1000BF078(v12, 2, (uint64_t *)(v33 + v31 + 8), &v102)
                || *(void *)(v33 + v31 + 8) && v102 != v103 + 1)
              {
                uint8x8_t v27 = v25 + 15;
LABEL_62:
                __int32 v13 = v30;
                if (v32 == *v26) {
                  goto LABEL_63;
                }
                goto LABEL_129;
              }
            }
            int v102 = 0;
            if (!sub_1000BF078(v12, 2, (uint64_t *)(v33 + v31 + 24), &v102)
              || *(void *)(v33 + v31 + 24) && v102 != *(_DWORD *)(v33 + v31 + 16))
            {
              break;
            }
            ++v32;
            v31 += 32;
            uint8x8_t v27 = v25 + 15;
            if (v32 >= *v26) {
              goto LABEL_62;
            }
          }
          __int32 v13 = v30;
          uint8x8_t v27 = v25 + 15;
          if (v32 != *v26) {
            goto LABEL_129;
          }
LABEL_63:
          uint64_t v34 = *v27;
          if ((int)v34 <= 0)
          {
            LODWORD(v37) = 0;
            __int16 v36 = (uint64_t *)(v25 + 18);
            goto LABEL_102;
          }
          uint64_t v35 = sub_1000C33A0(40 * v34);
          *((void *)v25 + 9) = v35;
          __int16 v36 = (uint64_t *)(v25 + 18);
          if (!v35) {
            goto LABEL_128;
          }
          LODWORD(v34) = *v27;
          if (*v27 < 1)
          {
            LODWORD(v37) = 0;
          }
          else
          {
            uint8x8_t v96 = v13;
            uint64_t v97 = a1;
            uint64_t v37 = 0;
            do
            {
              uint64_t v39 = *v36;
              if (!sub_1000BEECC(v12, (void *)(*v36 + 40 * v37)) || !sub_1000BEECC(v12, (void *)(v39 + 40 * v37 + 4))) {
                break;
              }
              int v40 = (_WORD *)(v39 + 40 * v37 + 8);
              if (!sub_1000BEF74(v12, v40))
              {
                uint8x8_t v26 = v25 + 8;
                break;
              }
              uint64_t v41 = (_WORD *)(v39 + 40 * v37 + 10);
              if (!sub_1000BEF74(v12, v41)) {
                goto LABEL_100;
              }
              uint64_t v42 = (_WORD *)(v39 + 40 * v37 + 24);
              if (!sub_1000BEF74(v12, v42)) {
                goto LABEL_100;
              }
              uint64_t v99 = (_WORD *)(v39 + 40 * v37 + 26);
              if (!sub_1000BEF74(v12, v99)) {
                goto LABEL_100;
              }
              if (*v40 && *v101 < (int)(unsigned __int16)*v41)
              {
                __int32 v50 = (void *)sub_1000CD3E8(2 * (unsigned __int16)*v40, v43, v44, v45, v46, v47, v48, v49);
                uint64_t v58 = (void *)sub_1000CD3E8(2 * (unsigned __int16)*v40, v51, v52, v53, v54, v55, v56, v57);
                if (!sub_1000BEFCC(v12, v50, (unsigned __int16)*v40, 2)
                  || !sub_1000BEFCC(v12, v58, (unsigned __int16)*v40, 2)
                  || (uint64_t v59 = sub_1000C33A0(4 * (unsigned __int16)*v41),
                      uint64_t v60 = v39 + 40 * v37,
                      *(void *)(v60 + 16) = v59,
                      int16x8_t v61 = (void *)(v60 + 16),
                      !v59))
                {
                  a1 = v97;
LABEL_100:
                  uint8x8_t v26 = v25 + 8;
                  uint8x8_t v27 = v25 + 15;
                  break;
                }
                if (*v40)
                {
                  uint64_t v62 = 0;
                  unint64_t v63 = 0;
                  do
                  {
                    *(_WORD *)(*v61 + v62) = *((_WORD *)v50 + v63);
                    *(_WORD *)(*v61 + v62 + 2) = *((_WORD *)v58 + v63++);
                    unint64_t v64 = (unsigned __int16)*v40;
                    v62 += 4;
                  }
                  while (v63 < v64);
                }
                else
                {
                  unint64_t v64 = 0;
                }
                sub_1000CD4D0(v58, 2 * v64);
                sub_1000CD4D0(v50, 2 * (unsigned __int16)*v40);
                a1 = v97;
              }
              if (*v42 && *v101 < (int)(unsigned __int16)*v99)
              {
                uint64_t v65 = (void *)sub_1000CD3E8(2 * (unsigned __int16)*v42, v43, v44, v45, v46, v47, v48, v49);
                unint64_t v73 = (void *)sub_1000CD3E8(2 * (unsigned __int16)*v42, v66, v67, v68, v69, v70, v71, v72);
                if (!sub_1000BEFCC(v12, v65, (unsigned __int16)*v42, 2)) {
                  goto LABEL_100;
                }
                if (!sub_1000BEFCC(v12, v73, (unsigned __int16)*v42, 2)) {
                  goto LABEL_100;
                }
                uint64_t v74 = sub_1000C33A0(4 * (unsigned __int16)*v99);
                uint64_t v75 = v39 + 40 * v37;
                *(void *)(v75 + 32) = v74;
                unint64_t v76 = (void *)(v75 + 32);
                if (!v74) {
                  goto LABEL_100;
                }
                if (*v42)
                {
                  uint64_t v77 = 0;
                  unint64_t v78 = 0;
                  do
                  {
                    *(_WORD *)(*v76 + v77) = *((_WORD *)v65 + v78);
                    *(_WORD *)(*v76 + v77 + 2) = *((_WORD *)v73 + v78++);
                    unint64_t v38 = (unsigned __int16)*v42;
                    v77 += 4;
                  }
                  while (v78 < v38);
                }
                else
                {
                  unint64_t v38 = 0;
                }
                sub_1000CD4D0(v73, 2 * v38);
                sub_1000CD4D0(v65, 2 * (unsigned __int16)*v42);
              }
              ++v37;
              uint8x8_t v27 = v25 + 15;
              uint8x8_t v26 = v25 + 8;
            }
            while (v37 < (int)v25[15]);
            LODWORD(v34) = *v27;
            __int32 v13 = v96;
          }
LABEL_102:
          if (v37 != v34) {
            goto LABEL_129;
          }
          int v103 = 0;
          uint64_t v79 = v25 + 20;
          if (!sub_1000BF078(v12, 4, (uint64_t *)v25 + 10, &v103) || *v79 && v103 != *v27 * *v101) {
            goto LABEL_129;
          }
          int v103 = 0;
          uint64_t v80 = v25 + 22;
          if (!sub_1000BF078(v12, 4, (uint64_t *)v25 + 11, &v103)) {
            goto LABEL_129;
          }
          int v86 = *v27;
          if (*v80)
          {
            if (v103 != *v101 * v86) {
              goto LABEL_129;
            }
          }
          if (v86 >= 1)
          {
            uint64_t v87 = 0;
            for (uint64_t i = 0; i < *v27; ++i)
            {
              uint64_t v89 = *v36;
              uint64_t v90 = *v36 + v87;
              uint64_t v91 = *v101;
              if ((int)v91 >= *(unsigned __int16 *)(v90 + 10))
              {
                *(void *)(v90 + 16) = *v79 + 4 * i * v91;
                uint64_t v91 = *v101;
                if ((int)v91 >= *(unsigned __int16 *)(v90 + 26)) {
LABEL_116:
                }
                  *(void *)(v89 + v87 + 32) = *v80 + 0x3333333333333334 * ((v87 + v89 - *v36) >> 3) * v91;
              }
              else if ((int)v91 >= *(unsigned __int16 *)(v90 + 26))
              {
                goto LABEL_116;
              }
              v87 += 40;
            }
          }
          uint64_t v92 = sub_1000C0DB4(2 * v25[8], (uint64_t)sub_100060D3C, 0, v81, v82, v83, v84, v85);
          *((void *)v25 + 6) = v92;
          if (!v92) {
            goto LABEL_129;
          }
          sub_1000C0E88(v92, 0.5);
          uint64_t v22 = v100;
          if (*v26 >= 1)
          {
            uint64_t v93 = 0;
            uint64_t v94 = 0;
            do
            {
              sub_1000C1078(*((void *)v25 + 6), *((void *)v25 + 5) + v93);
              ++v94;
              v93 += 32;
            }
            while (v94 < (int)v25[8]);
          }
        }
        if (++v22 >= *v13) {
          goto LABEL_123;
        }
      }
    }
    LODWORD(v22) = 0;
LABEL_123:
    LODWORD(v15) = *v13;
    if (v22 == *v13)
    {
LABEL_136:
      uint64_t v19 = 1;
LABEL_142:
      sub_1000BED3C(v12);
      return v19;
    }
LABEL_137:
    if ((int)v15 >= 1 && !*(void *)(a1 + 16) && !*(void *)(a1 + 24)) {
      *__int32 v13 = 0;
    }
    goto LABEL_141;
  }
  return 0;
}

uint64_t sub_100060D3C(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 24);
  return (2 * *(_DWORD *)(a1 + 16));
}

uint64_t sub_100060D50(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_1000C321C(*(void *)(result + 72));
    v1[8] = 0;
    v1[9] = 0;
    sub_1000C3670(v1[7]);
    v1[6] = 0;
    v1[7] = 0;
    sub_1000C321C(v1[5]);
    v1[4] = 0;
    v1[5] = 0;
    return sub_1000C321C((uint64_t)v1);
  }
  return result;
}

int *sub_100060DB0(int *result, int16x8_t *a2, uint64_t a3)
{
  if (*result >= 1)
  {
    uint64_t v3 = 0;
    int v4 = result[4] + result[6];
    int v5 = v4 - result[5];
    int v6 = 1 << (*((unsigned char *)result + 16) + *((unsigned char *)result + 24) - 1);
    uint64_t v7 = *((void *)result + 4);
    while (1)
    {
      uint64_t v10 = *(int *)(v7 + 4 * v3);
      uint64_t v11 = result[1];
      if (v11 == 1)
      {
        int v8 = **(__int16 **)(*((void *)result + 6) + 8 * v10) * a2->i16[v10];
        goto LABEL_4;
      }
      if ((int)v11 < 1)
      {
        int v8 = 0;
        goto LABEL_4;
      }
      uint64_t v12 = *(int16x8_t **)(*((void *)result + 6) + 8 * v10);
      if (v11 < 0x10) {
        break;
      }
      uint64_t v13 = v11 & 0x7FFFFFF0;
      uint64_t v16 = v11 & 0xFFFFFFF0;
      BOOL v14 = &v12->i16[v16];
      uint64_t v15 = (int16x8_t *)((char *)a2 + v16 * 2);
      uint64_t v17 = v12 + 1;
      int32x4_t v18 = 0uLL;
      uint64_t v19 = v11 & 0xFFFFFFF0;
      uint64_t v20 = a2 + 1;
      int32x4_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      int32x4_t v23 = 0uLL;
      do
      {
        int16x8_t v24 = v20[-1];
        int16x8_t v25 = v17[-1];
        int32x4_t v21 = vmlal_high_s16(v21, v25, v24);
        int32x4_t v18 = vmlal_s16(v18, *(int16x4_t *)v25.i8, *(int16x4_t *)v24.i8);
        int32x4_t v23 = vmlal_high_s16(v23, *v17, *v20);
        int32x4_t v22 = vmlal_s16(v22, *(int16x4_t *)v17->i8, *(int16x4_t *)v20->i8);
        v20 += 2;
        v17 += 2;
        v19 -= 16;
      }
      while (v19);
      int v8 = vaddvq_s32(vaddq_s32(vaddq_s32(v22, v18), vaddq_s32(v23, v21)));
      if (v13 != v11) {
        goto LABEL_15;
      }
LABEL_4:
      int v9 = (v8 + v6 + (*(__int16 *)(*((void *)result + 8) + 2 * v10) << v5)) >> v4;
      if (v9 >= 255) {
        int v9 = 255;
      }
      *(unsigned char *)(a3 + v3++) = v9 & ~(v9 >> 31);
      if (v3 >= *result) {
        return result;
      }
    }
    int v8 = 0;
    LODWORD(v13) = 0;
    BOOL v14 = *(__int16 **)(*((void *)result + 6) + 8 * v10);
    uint64_t v15 = a2;
LABEL_15:
    int v26 = v11 - v13;
    do
    {
      int v28 = v15->i16[0];
      uint64_t v15 = (int16x8_t *)((char *)v15 + 2);
      int v27 = v28;
      int v29 = *v14++;
      v8 += v29 * v27;
      --v26;
    }
    while (v26);
    goto LABEL_4;
  }
  return result;
}

int *sub_100060F0C(int *result, uint64_t a2, _DWORD *a3)
{
  *a3 = result[4] + result[6];
  if (*((void *)result + 6))
  {
    if (result[3] >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        *(_WORD *)(a2 + 2 * v3) = **(_WORD **)(*((void *)result + 6) + 8 * v3);
        ++v3;
      }
      while (v3 < result[3]);
    }
  }
  else if (*result >= 1)
  {
    uint64_t v4 = 0;
    do
      *(_WORD *)(a2 + 2 * v4++) = 1;
    while (v4 < *result);
  }
  return result;
}

uint64_t sub_100060F84(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void *sub_100060F8C(uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = sub_1000BEC58(a1, "bld0", a2, a4, a5, a6, a7, a8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = (uint64_t)v9;
  int v14 = 0;
  *a3 = 0;
  uint64_t v11 = (void *)sub_1000C33A0(80);
  if (v11)
  {
    int v14 = 0;
    if (sub_1000610CC(v10, v11))
    {
      if (!sub_1000BEE7C(v10, &v14) || !v14) {
        goto LABEL_14;
      }
      uint64_t v12 = (void *)sub_1000C33A0(80);
      if (v12 && sub_1000610CC(v10, v12))
      {
        *a3 = v12;
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    sub_1000C321C(v11[9]);
    v11[8] = 0;
    v11[9] = 0;
    sub_1000C3670(v11[7]);
    v11[6] = 0;
    v11[7] = 0;
    sub_1000C321C(v11[5]);
    v11[4] = 0;
    v11[5] = 0;
    sub_1000C321C((uint64_t)v11);
    if (v12)
    {
      sub_1000C321C(v12[9]);
      v12[8] = 0;
      v12[9] = 0;
      sub_1000C3670(v12[7]);
      v12[6] = 0;
      v12[7] = 0;
      sub_1000C321C(v12[5]);
      v12[4] = 0;
      v12[5] = 0;
      sub_1000C321C((uint64_t)v12);
    }
    uint64_t v11 = 0;
  }
LABEL_14:
  sub_1000BED3C(v10);
  return v11;
}

uint64_t sub_1000610CC(uint64_t a1, void *a2)
{
  uint64_t result = sub_1000BEECC(a1, a2);
  if (result)
  {
    uint64_t result = sub_1000BEECC(a1, (char *)a2 + 4);
    if (result)
    {
      int v5 = a2 + 1;
      uint64_t result = sub_1000BEECC(a1, a2 + 1);
      if (result)
      {
        uint64_t result = sub_1000BEECC(a1, (char *)a2 + 12);
        if (result)
        {
          uint64_t result = sub_1000BEECC(a1, a2 + 2);
          if (result)
          {
            uint64_t result = sub_1000BEECC(a1, (char *)a2 + 20);
            if (result)
            {
              uint64_t result = sub_1000BEECC(a1, a2 + 3);
              if (result)
              {
                int v10 = 0;
                int v6 = a2 + 5;
                if (sub_1000BF078(a1, 4, a2 + 5, &v10))
                {
                  if (!*v6) {
                    goto LABEL_12;
                  }
                  if (v10 == *(_DWORD *)a2)
                  {
                    a2[4] = *v6;
LABEL_12:
                    unsigned int v9 = 0;
                    uint64_t v7 = a2 + 9;
                    if (sub_1000BF078(a1, 2, a2 + 9, (int *)&v9))
                    {
                      if (!*v7)
                      {
                        uint64_t v8 = *v5;
LABEL_20:
                        uint64_t result = sub_1000C3740(2, v8, *((unsigned int *)a2 + 1));
                        a2[7] = result;
                        if (result)
                        {
                          a2[6] = result;
                          return sub_1000BF578(a1, (void **)result, *((_DWORD *)a2 + 2), *((_DWORD *)a2 + 1), 2) != 0;
                        }
                        return result;
                      }
                      uint64_t v8 = v9;
                      if (v9 == *v5)
                      {
                        a2[8] = *v7;
                        goto LABEL_20;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100061250()
{
  uint64_t result = sub_1000C33A0(888);
  if (result) {
    *(_DWORD *)(result + 16) = 1;
  }
  return result;
}

void *sub_100061278(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a3;
  result[1] = a2;
  return result;
}

uint64_t sub_100061280(_DWORD *a1)
{
  LODWORD(v2) = a1[7];
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      if (a1[4] || v3 == v2 - 1 && a1[8] == 1)
      {
        uint64_t v4 = &a1[2 * v3];
        sub_1000C321C(v4[77]);
        v4[77] = 0;
        uint64_t v5 = v4[93];
        if (v5)
        {
          sub_1000C321C(v5);
          v4[93] = 0;
        }
        uint64_t v6 = v4[21];
        if (v6)
        {
          sub_1000C321C(v6);
          v4[21] = 0;
        }
      }
      ++v3;
      uint64_t v2 = (int)a1[7];
    }
    while (v3 < v2);
  }
  return sub_1000C321C((uint64_t)a1);
}

uint64_t sub_100061338(uint64_t a1)
{
  if (*(int *)(a1 + 28) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = (void *)(a1 + 8 * v2);
      sub_1000C321C(v3[77]);
      v3[77] = 0;
      uint64_t v4 = v3[93];
      if (v4)
      {
        sub_1000C321C(v4);
        v3[93] = 0;
      }
      uint64_t v5 = v3[21];
      if (v5)
      {
        sub_1000C321C(v5);
        v3[21] = 0;
      }
      ++v2;
    }
    while (v2 < *(int *)(a1 + 28));
  }
  return sub_1000C321C(a1);
}