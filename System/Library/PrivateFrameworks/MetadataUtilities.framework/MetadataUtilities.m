uint64_t _MDPlistGetPlistObjectType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

BOOL _MDPlistBytesAddNull(uint64_t a1)
{
  return _MDPlistBytesAddRLETagRoom(a1, 0, 0);
}

char *cStringRetainCallback(int a1, char *__s1)
{
  return strdup(__s1);
}

void cStringReleaseCallback(int a1, void *a2)
{
  free(a2);
}

uint64_t _MDPlistArrayGetCount(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)a1 + *(unsigned int *)(a1 + 16) + 4);
}

BOOL _MDPlistBooleanGetValue(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) != 0;
}

BOOL icu_search_context_is_fuzzy(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 69) != 0;
  }
  return result;
}

BOOL _MDPlistBytesEndArray(uint64_t a1)
{
  return _MDPlistBytesEndContainer(a1);
}

BOOL _MDPlistBytesBeginArray(uint64_t a1)
{
  return _MDPlistBytesBeginContainer(a1, 10);
}

BOOL _locale_str_cmp(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

void _MDPlistContainerAddObject(uint64_t a1, const void *a2, uint64_t a3)
{
  v52 = (void *)*MEMORY[0x1E4F143B8];
  CFTypeID v6 = CFGetTypeID(a2);
  if (v6 == gCFArrayTypeID)
  {
    _MDPlistContainerBeginArray(a1, v7, v8, v9, v10, v11, v12, v13);
    uint64_t Count = CFArrayGetCount((CFArrayRef)a2);
    if (Count)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
        _MDPlistContainerAddObject(a1, ValueAtIndex, 0);
      }
    }
    _MDPlistContainerEndArray(a1, a3, v14, v15, v16, v17, v18, v19);
    return;
  }
  int v23 = v6;
  if (v6 == gCFDictionaryTypeID)
  {
    _MDPlistContainerBeginDictionary(a1, v7, v8, v9, v10, v11, v12, v13);
    unsigned int v24 = CFDictionaryGetCount((CFDictionaryRef)a2);
    size_t v25 = 8 * v24;
    v26 = (const void **)malloc_type_malloc(v25, 0x80040B8603338uLL);
    v27 = (const void **)malloc_type_malloc(v25, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, v26, v27);
    uint64_t v28 = v24;
    if (v24)
    {
      v29 = v27;
      v30 = v26;
      do
      {
        CFTypeID v31 = CFGetTypeID(*v30);
        if (v31 != gCFStringTypeID) {
          _MDPlistContainerAddObject_cold_1(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        CFTypeRef v39 = *v30++;
        _MDPlistContainerAddObject(a1, v39, 0);
        uint64_t v40 = (uint64_t)*v29++;
        _MDPlistContainerAddObject(a1, v40, 0);
        --v28;
      }
      while (v28);
    }
    free(v26);
    free(v27);
    _MDPlistContainerEndDictionary(a1, a3, v41, v42, v43, v44, v45, v46);
    return;
  }
  if (v6 == gCFNullTypeID)
  {
LABEL_51:
    _addInlineData(a1, 224, 0, a3, v10, v11, v12, v13);
    return;
  }
  if (v6 == gCFStringTypeID)
  {
    _MDPlistContainerAddString(a1, (uint64_t)a2, a3, v9, v52);
  }
  else if (v6 == gCFDataTypeID)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)a2);
    size_t Length = CFDataGetLength((CFDataRef)a2);
    _addGenericData(a1, 0, 246, BytePtr, Length, a3, v49, v50);
  }
  else if (v6 == gCFUUIDTypeID)
  {
    _MDPlistContainerAddUUID(a1, (CFUUIDRef)a2, a3);
  }
  else if (v6 == gCFURLTypeID)
  {
    _MDPlistContainerAddURL(a1, (const __CFURL *)a2, a3, v9, v10, v11, v12, v13);
  }
  else if (v6 == gCFDateTypeID)
  {
    _MDPlistContainerAddDate(a1, (uint64_t)a2, a3);
  }
  else if (v6 == gCFBooleanTypeID)
  {
    _MDPlistContainerAddBoolean(a1, (CFBooleanRef)a2, a3);
  }
  else
  {
    if (v6 != gCFNumberTypeID)
    {
      v51 = _MDLogForCategoryDefault();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
        _MDPlistContainerAddObject_cold_2(v23, (uint64_t)a2, v51);
      }
      goto LABEL_51;
    }
    _MDPlistContainerAddNumber(a1, (CFNumberRef)a2, a3);
  }
}

double _MDPlistContainerBeginArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 136);
  if (v8 <= 0) {
    _MDPlistContainerBeginArray_cold_1(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v10 = *(void *)(a1 + 144);
  unsigned int v11 = v8 - 1;
  if (v8 == 1)
  {
    unsigned int v11 = 0;
  }
  else
  {
    if (*(_DWORD *)(v10 + 24 * v11) == 241 && (*(unsigned char *)(v10 + 24 * v11 + 4) & 1) == 0) {
      _MDPlistContainerBeginArray_cold_2(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    if (v8 >= 0x400) {
      _MDPlistContainerBeginArray_cold_3(a1, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  ++*(_DWORD *)(v10 + 24 * v11 + 4);
  int v12 = *(_DWORD *)(a1 + 32);
  MDPlistBufferConsume(a1, a1 + 32, 0xAuLL);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = MDPlistBufferConsume(a1, a1 + 64, 5uLL);
  if (v14)
  {
    *(_DWORD *)uint64_t v14 = v12;
    v14[4] = -16;
  }
  uint64_t v15 = *(void *)(a1 + 144) + 24 * *(int *)(a1 + 136);
  uint64_t v16 = *(void *)(a1 + 64);
  *(void *)&double result = 240;
  *(void *)uint64_t v15 = 240;
  *(void *)(v15 + 8) = v16;
  *(_DWORD *)(v15 + 16) = v12;
  *(_DWORD *)(v15 + 20) = v13;
  ++*(_DWORD *)(a1 + 136);
  return result;
}

int *_MDPlistContainerAddString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v5 = MEMORY[0x1F4188790](a5, a1, a2, a3, a4);
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int v13 = *((_DWORD *)v5 + 34);
  BOOL v14 = __OFSUB__(v13, 1);
  int v15 = v13 - 1;
  if ((v15 < 0) ^ v14 | (v15 == 0)) {
    _MDPlistContainerAddString_cold_1((uint64_t)v5, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
  }
  uint64_t v16 = v7;
  CFStringRef v17 = v6;
  uint64_t v18 = (uint64_t)v5;
  CFStringEncoding v19 = 134217984;
  v20 = (int *)(v5[18] + 24 * v15);
  int v21 = *v20;
  int v22 = v20[1] + 1;
  v20[1] = v22;
  int v23 = (v21 == 241) & v22;
  if (!v23
    && ((CFStringEncoding FastestEncoding = CFStringGetFastestEncoding(v6), FastestEncoding == 256)
     || FastestEncoding == 335544576
     || FastestEncoding == 268435712))
  {
    int v25 = 0;
    CFStringEncoding v19 = 256;
    char v24 = -11;
  }
  else
  {
    char v24 = -12;
    int v25 = 1;
  }
  CFIndex maxBufLen = 0;
  CFIndex Length = CFStringGetLength(v17);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, v19);
  v49.length = CFStringGetLength(v17);
  v49.location = 0;
  CFIndex Bytes = CFStringGetBytes(v17, v49, v19, 0x20u, 1u, 0, MaximumSizeForEncoding, &maxBufLen);
  if (v23)
  {
    if (maxBufLen >= 4096) {
      _MDPlistContainerAddString_cold_2(Bytes, v30, v31, v32, v33, v34, v35, v36);
    }
    if (v16) {
      _MDPlistContainerAddString_cold_3(Bytes, v30, v31, v32, v33, v34, v35, v36);
    }
    bzero(buffer, 0x1000uLL);
    v50.length = CFStringGetLength(v17);
    v50.location = 0;
    CFStringGetBytes(v17, v50, v19, 0x20u, 1u, buffer, maxBufLen, &maxBufLen);
    CFIndex v37 = maxBufLen;
    buffer[maxBufLen] = 0;
    int v38 = addStringKey(v18, buffer, v37);
    double result = (int *)MDPlistBufferConsume(v18, v18 + 64, 4uLL);
    if (result) {
      *double result = v38;
    }
    return result;
  }
  double result = (int *)MDPlistBufferConsume(v18, v18 + 64, 5uLL);
  if (!result) {
    goto LABEL_21;
  }
  uint64_t v40 = result;
  uint64_t v41 = *(void *)(v18 + 32);
  uint64_t v42 = 4;
  if (v25) {
    uint64_t v42 = 5;
  }
  double result = (int *)MDPlistBufferConsume(v18, v18 + 32, v42 + maxBufLen);
  if (!result)
  {
LABEL_21:
    uint64_t v40 = &gNullObjectReference;
    if (!v16) {
      return result;
    }
    goto LABEL_22;
  }
  uint64_t v43 = result;
  v51.length = CFStringGetLength(v17);
  v51.location = 0;
  double result = (int *)CFStringGetBytes(v17, v51, v19, 0x20u, 1u, (UInt8 *)v43 + 4, maxBufLen, &maxBufLen);
  CFIndex v44 = maxBufLen;
  *uint64_t v43 = maxBufLen + v25;
  if (v25) {
    *((unsigned char *)v43 + v44 + 4) = 0;
  }
  *uint64_t v40 = v41;
  *((unsigned char *)v40 + 4) = v24;
  if (v16)
  {
LABEL_22:
    int v45 = *v40;
    *(unsigned char *)(v16 + 4) = *((unsigned char *)v40 + 4);
    *(_DWORD *)uint64_t v16 = v45;
  }
  return result;
}

void *MDPlistBufferConsume(uint64_t a1, uint64_t a2, size_t a3)
{
  __dst[1] = *(void **)MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  size_t v4 = a3;
  size_t v7 = *(void *)a2;
  size_t v6 = *(void *)(a2 + 8);
  if (v6 >= a3)
  {
    size_t v11 = *(void *)a2;
  }
  else
  {
    if (*(unsigned char *)(a2 + 24))
    {
      size_t v9 = 0;
      size_t v6 = 0;
      uint64_t v10 = *(const void **)(a2 + 16);
      size_t v4 = v7 + a3;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
    else
    {
      uint64_t v10 = 0;
      size_t v9 = *(void *)a2;
    }
    size_t v12 = v9 + v6;
    if (v9 + v6 <= v4)
    {
      uint64_t v14 = *MEMORY[0x1E4F14B00];
      unint64_t v13 = ((v4 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00]) + v12;
    }
    else
    {
      unint64_t v13 = 2 * v12;
      uint64_t v14 = *MEMORY[0x1E4F14B00];
    }
    if (v13 <= 2 * v14) {
      size_t v15 = 2 * v14;
    }
    else {
      size_t v15 = v13;
    }
    if (*(unsigned char *)(a2 + 26))
    {
      double result = malloc_type_realloc(*(void **)(a2 + 16), v15, 0xC0BC53BDuLL);
      if (!result) {
        goto LABEL_19;
      }
    }
    else
    {
      __dst[0] = 0;
      uint64_t v16 = (unsigned int *)MEMORY[0x1E4F14960];
      if (vm_allocate(*MEMORY[0x1E4F14960], (vm_address_t *)__dst, v15, -251658239))
      {
        double result = 0;
LABEL_19:
        *(unsigned char *)(a1 + 16) = 1;
        return result;
      }
      CFStringRef v17 = *(const void **)(a2 + 16);
      if (v17)
      {
        memcpy(__dst[0], v17, *(void *)a2);
        MEMORY[0x1A6247730](*v16, *(void *)(a2 + 16), v12);
      }
      double result = __dst[0];
    }
    *(void *)(a2 + 16) = result;
    if (*(unsigned char *)(a2 + 24))
    {
      if (result)
      {
        memcpy(result, v10, v7);
        *(unsigned char *)(a2 + 24) = 0;
      }
    }
    size_t v11 = *(void *)a2;
    size_t v6 = v15 - *(void *)a2;
  }
  *(void *)a2 = v11 + v4;
  *(void *)(a2 + 8) = v6 - v4;
  return (void *)(*(void *)(a2 + 16) + v7);
}

uint64_t addStringKey(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unsigned int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 128), a2);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  }
  else
  {
    unsigned int valuePtr = *(void *)(a1 + 96);
    size_t v7 = (char *)MDPlistBufferConsume(a1, a1 + 96, a3 + 3);
    if (v7)
    {
      uint64_t v8 = &v7[a3];
      *(_WORD *)size_t v7 = a3;
      strcpy(v7 + 2, (const char *)a2);
      v8[2] = 0;
      CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 128), a2, v9);
      CFRelease(v9);
    }
  }
  return valuePtr;
}

double _MDPlistContainerBeginDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 136);
  if (v8 <= 0) {
    _MDPlistContainerBeginDictionary_cold_1(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v10 = *(void *)(a1 + 144);
  unsigned int v11 = v8 - 1;
  if (v8 == 1)
  {
    unsigned int v11 = 0;
  }
  else
  {
    if (*(_DWORD *)(v10 + 24 * v11) == 241 && (*(unsigned char *)(v10 + 24 * v11 + 4) & 1) == 0) {
      _MDPlistContainerBeginDictionary_cold_2(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    if (v8 >= 0x400) {
      _MDPlistContainerBeginDictionary_cold_3(a1, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  ++*(_DWORD *)(v10 + 24 * v11 + 4);
  int v12 = *(_DWORD *)(a1 + 32);
  MDPlistBufferConsume(a1, a1 + 32, 0xCuLL);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = MDPlistBufferConsume(a1, a1 + 64, 5uLL);
  if (v14)
  {
    *(_DWORD *)uint64_t v14 = v12;
    v14[4] = -15;
  }
  uint64_t v15 = *(void *)(a1 + 144) + 24 * *(int *)(a1 + 136);
  uint64_t v16 = *(void *)(a1 + 64);
  *(void *)&double result = 241;
  *(void *)uint64_t v15 = 241;
  *(void *)(v15 + 8) = v16;
  *(_DWORD *)(v15 + 16) = v12;
  *(_DWORD *)(v15 + 20) = v13;
  ++*(_DWORD *)(a1 + 136);
  return result;
}

int *_addInlineData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 136);
  BOOL v9 = __OFSUB__(v8, 1);
  int v10 = v8 - 1;
  if ((v10 < 0) ^ v9 | (v10 == 0)) {
    _addInlineData_cold_1(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v11 = *(void *)(a1 + 144);
  int v12 = *(_DWORD *)(v11 + 24 * v10);
  uint64_t v13 = v11 + 24 * v10;
  int v16 = *(_DWORD *)(v13 + 4);
  uint64_t v14 = (_DWORD *)(v13 + 4);
  int v15 = v16;
  int v17 = v16 & 1;
  if (v12 == 241 && v17 == 0) {
    _addInlineData_cold_2(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  int v20 = a3;
  char v21 = a2;
  *uint64_t v14 = v15 + 1;
  double result = (int *)MDPlistBufferConsume(a1, a1 + 64, 5uLL);
  if (result)
  {
    *double result = v20;
    *((unsigned char *)result + 4) = v21;
    if (!a4) {
      return result;
    }
    goto LABEL_8;
  }
  double result = &gNullObjectReference;
  if (a4)
  {
LABEL_8:
    int v23 = *result;
    *(unsigned char *)(a4 + 4) = *((unsigned char *)result + 4);
    *(_DWORD *)a4 = v23;
  }
  return result;
}

_DWORD *_MDPlistContainerAddDate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  v8[0] = MEMORY[0x1A6246220](a2);
  return _addGenericData(a1, 1, 19, v8, 8uLL, a3, v5, v6);
}

_DWORD *_addGenericData(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11 = a3;
  int v12 = a2;
  int v14 = *(_DWORD *)(a1 + 136);
  unsigned int v15 = v14 - 1;
  if (v14 <= 1)
  {
    if ((a3 & 0xFE) != 0xF0 || v14 != 1) {
      _addGenericData_cold_2(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    unsigned int v15 = 0;
    uint64_t v16 = *(void *)(a1 + 144);
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 144);
    if (*(_DWORD *)(v16 + 24 * v15) == 241 && (*(unsigned char *)(v16 + 24 * v15 + 4) & 1) == 0) {
      _addGenericData_cold_1(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  ++*(_DWORD *)(v16 + 24 * v15 + 4);
  uint64_t v17 = *(void *)(a1 + 32);
  double result = MDPlistBufferConsume(a1, a1 + 64, 5uLL);
  CFStringEncoding v19 = result;
  if (!result)
  {
    int v20 = 0;
    if (!a6) {
      return result;
    }
    goto LABEL_20;
  }
  if (v12)
  {
    double result = MDPlistBufferConsume(a1, a1 + 32, a5);
    int v20 = result;
    if (a4 && result) {
      double result = memcpy(result, a4, a5);
    }
  }
  else
  {
    double result = MDPlistBufferConsume(a1, a1 + 32, a5 + 4);
    int v20 = result;
    if (result)
    {
      if (a4) {
        double result = memcpy(result + 1, a4, a5);
      }
      *v20++ = a5;
    }
  }
  *CFStringEncoding v19 = v17;
  *((unsigned char *)v19 + 4) = v11;
  if (a6)
  {
LABEL_20:
    if (v20) {
      BOOL v21 = v19 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    int v22 = &gNullObjectReference;
    if (!v21) {
      int v22 = v19;
    }
    int v23 = *v22;
    *(unsigned char *)(a6 + 4) = *((unsigned char *)v22 + 4);
    *(_DWORD *)a6 = v23;
  }
  return result;
}

unint64_t _MDPlistArrayGetPlistObjectAtIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, long long *a9@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (WORD1(a2)
    || (uint64_t v9 = a1,
        uint64_t v10 = *(void *)a1,
        a1 = *(void *)a1 + *(unsigned int *)(a1 + 16),
        *(unsigned __int16 *)(a1 + 4) <= a2))
  {
    _MDPlistArrayGetPlistObjectAtIndex_cold_1(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v11 = a1 + *(unsigned int *)(a1 + 6);
  uint64_t v12 = *(void *)(v9 + 8);
  *(void *)a9 = v10;
  *((void *)a9 + 1) = v12;
  *((void *)a9 + 2) = 0;
  uint64_t v13 = v11 + 5 * a2;
  *((_DWORD *)a9 + 4) = *(_DWORD *)v13;
  *((unsigned char *)a9 + 20) = *(unsigned char *)(v13 + 4);
  long long v15 = *a9;
  uint64_t v16 = *((void *)a9 + 2);
  return validatePlistObject((unsigned int *)a1, (uint64_t)&v15, 0, 0, a5, a6, a7, a8);
}

unint64_t _MDPlistDictionaryIterateWithError(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = (uint64_t *)result;
  uint64_t v8 = *(unsigned int *)(result + 16);
  uint64_t v37 = *(void *)result;
  uint64_t v9 = *(void *)result + v8;
  if (!*(_WORD *)(v9 + 4)) {
    return result;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v13 = *(unsigned int *)(v37 + 10);
  unint64_t v34 = *(unsigned int *)(v37 + 6);
  unsigned int v33 = v34 - v13 - 2;
  uint64_t v31 = v37 + v13;
  unint64_t v32 = v13 + 2;
  uint64_t v30 = v37 + v13 + 2;
  uint64_t v38 = *(void *)result + v8;
  uint64_t v14 = 2 * *(unsigned __int16 *)(v9 + 10) + *(unsigned int *)(v9 + 6) + v8 + v37 + 6;
  while (1)
  {
    uint64_t v15 = *(unsigned int *)(v14 - 4);
    BOOL v17 = v32 <= v34 && v33 > v15;
    if (!a2)
    {
      if (!v17) {
        _MDPlistDictionaryIterateWithError_cold_3(result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      }
      uint64_t v18 = *(unsigned __int16 *)(v31 + v15);
      if ((unint64_t)(v15 + v18) + 2 >= (*(_DWORD *)(v37 + 6) - *(_DWORD *)(v37 + 10))) {
        _MDPlistDictionaryIterateWithError_cold_2(result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      }
      goto LABEL_18;
    }
    if (*a2) {
      BOOL v17 = 1;
    }
    if (!v17) {
      break;
    }
    if (*a2) {
      return result;
    }
    uint64_t v18 = *(unsigned __int16 *)(v31 + v15);
    if ((unint64_t)(v15 + v18) + 2 >= (*(_DWORD *)(v37 + 6) - *(_DWORD *)(v37 + 10)))
    {
      uint64_t v29 = 1035;
      goto LABEL_26;
    }
LABEL_18:
    uint64_t v19 = *v35;
    uint64_t v20 = v35[1];
    int v45 = *(_DWORD *)v14;
    char v46 = *(unsigned char *)(v14 + 4);
    uint64_t v39 = v19;
    uint64_t v40 = v20;
    int v41 = *(_DWORD *)v14;
    char v42 = *(unsigned char *)(v14 + 4);
    __int16 v43 = 0;
    char v44 = 0;
    double result = validatePlistObject((unsigned int *)v9, (uint64_t)&v39, 0, a2, a5, a6, a7, a8);
    v12 += result;
    if (a2)
    {
      if (*a2) {
        return result;
      }
      if (v12 > *(unsigned int *)(v38 + 6))
      {
        *a2 = 1051;
        return result;
      }
    }
    else if (v12 > *(unsigned int *)(v9 + 6))
    {
      _MDPlistDictionaryIterateWithError_cold_1(result, v21, v22, v23, v24, v25, v26, v27);
    }
    v14 += 9;
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a3 + 16);
    uint64_t v39 = v19;
    uint64_t v40 = v20;
    int v41 = v45;
    char v42 = v46;
    __int16 v43 = 0;
    char v44 = 0;
    double result = v28(a3, v30 + v15, v18, &v39);
    uint64_t v9 = v38;
    if (++v11 >= (unint64_t)*(unsigned __int16 *)(v38 + 4)) {
      return result;
    }
  }
  uint64_t v29 = 1028;
LABEL_26:
  *a2 = v29;
  return result;
}

uint64_t _MDPlistDictionaryGetPlistObjectForKey(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v9 = a3;
  uint64_t v11 = (uint64_t *)a1;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(unsigned int *)(a1 + 16);
  uint64_t v14 = *(void *)a1 + v13;
  uint64_t v15 = *(unsigned int *)(v14 + 6);
  uint64_t v16 = v14 + v15;
  uint64_t v17 = *(unsigned __int16 *)(v14 + 10);
  if (a3 == -1)
  {
    a1 = strlen(__s);
    size_t v9 = a1;
  }
  if (v17 < 2)
  {
    unsigned int v18 = 0;
  }
  else
  {
    a1 = MDHash((unsigned __int8 *)__s, v9, 0);
    unsigned int v18 = a1 % *(unsigned __int16 *)(v14 + 10);
  }
  uint64_t v19 = *(unsigned __int16 *)(v16 + 2 * v18);
  uint64_t v20 = *(unsigned __int16 *)(v16 + 2 * (v18 + 1));
  if (v19 > v20 || v20 > *(unsigned __int16 *)(v14 + 4)) {
    _MDPlistDictionaryGetPlistObjectForKey_cold_1(a1, (uint64_t)__s, a3, a4, a5, a6, a7, a8);
  }
  if (v19 >= v20) {
    return 0;
  }
  uint64_t v37 = a4;
  unint64_t v21 = *(unsigned int *)(v12 + 6);
  uint64_t v22 = *(unsigned int *)(v12 + 10);
  if (v22 + 2 > v21) {
LABEL_21:
  }
    _MDPlistDictionaryGetPlistObjectForKey_cold_3(a1, (uint64_t)__s, a3, a4, a5, a6, a7, a8);
  uint64_t v23 = 2 * v17;
  uint64_t v24 = (v21 - v22);
  unsigned int v25 = v24 - 2;
  uint64_t v36 = *v11;
  uint64_t v26 = *v11 + v22;
  unint64_t v27 = v24 - 2;
  uint64_t v28 = 9 * v19 + v23 + v15 + v13 + v12 + 6;
  uint64_t v29 = v20 - v19;
  do
  {
    uint64_t v30 = *(unsigned int *)(v28 - 4);
    if (v25 <= v30) {
      goto LABEL_21;
    }
    uint64_t v31 = *(unsigned __int16 *)(v26 + v30);
    if (v27 <= (v30 + v31)) {
      _MDPlistDictionaryGetPlistObjectForKey_cold_2(a1, (uint64_t)__s, a3, a4, a5, a6, a7, a8);
    }
    if (v9 == v31)
    {
      a1 = memcmp(__s, (const void *)(v26 + v30 + 2), v9);
      if (!a1) {
        goto LABEL_17;
      }
    }
    v28 += 9;
    --v29;
  }
  while (v29);
  uint64_t v28 = 0;
LABEL_17:
  if (!v28) {
    return 0;
  }
  uint64_t v32 = v11[1];
  char v33 = *(unsigned char *)(v28 + 4);
  int v40 = *(_DWORD *)v28;
  int v34 = v40;
  char v41 = v33;
  *(void *)uint64_t v37 = v36;
  *(void *)(v37 + 8) = v32;
  *(_DWORD *)(v37 + 16) = v34;
  *(unsigned char *)(v37 + 20) = v33;
  long long v38 = *(_OWORD *)v37;
  uint64_t v39 = *(void *)(v37 + 16);
  validatePlistObject((unsigned int *)v14, (uint64_t)&v38, 0, 0, a5, a6, a7, a8);
  return 1;
}

unint64_t validatePlistObject(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)a2;
  int v10 = *(_DWORD *)(*(void *)a2 + 10);
  unint64_t v11 = *(unsigned int *)(*(void *)a2 + 6);
  if (a4)
  {
    uint64_t v12 = *a4;
    if (v10 >= v11 && v12 == 0)
    {
      unint64_t result = 0;
      if (v10 >= -8388607) {
        LODWORD(v19) = *(_DWORD *)(*(void *)a2 + 10);
      }
      else {
        LODWORD(v19) = 0x800000;
      }
      if (v10 < 0x800000) {
        uint64_t v19 = v19;
      }
      else {
        uint64_t v19 = 0x7FFFFFLL;
      }
      if ((int)v11 >= -8388607) {
        int v20 = *(_DWORD *)(*(void *)a2 + 6);
      }
      else {
        int v20 = 0x800000;
      }
      if ((int)v11 < 0x800000) {
        int v21 = v20;
      }
      else {
        int v21 = 0x7FFFFF;
      }
      uint64_t v22 = (v19 << 40) | ((uint64_t)v21 << 16) | 0x26F;
      goto LABEL_28;
    }
    if (v12) {
      return 0;
    }
    if (a3)
    {
      if (v11 != a3)
      {
        unint64_t result = 0;
        uint64_t v37 = (a3 << 40) | 0x279;
        if ((int)a3 < -8388607) {
          uint64_t v37 = 0x8000000000000279;
        }
        if ((int)a3 >= 0x800000) {
          uint64_t v37 = 0x7FFFFF0000000279;
        }
        if ((int)v11 >= -8388607) {
          int v38 = *(_DWORD *)(*(void *)a2 + 6);
        }
        else {
          int v38 = 0x800000;
        }
        if ((int)v11 < 0x800000) {
          int v39 = v38;
        }
        else {
          int v39 = 0x7FFFFF;
        }
        uint64_t v22 = v37 | ((uint64_t)v39 << 16);
        goto LABEL_28;
      }
      int v14 = *(unsigned __int8 *)(a2 + 20);
      if ((v14 & 0xF0) == 0xE0) {
        return 0;
      }
      uint64_t v15 = 0;
      unint64_t v16 = (unint64_t)a1 - v9 + 10;
      unint64_t v11 = a3;
    }
    else
    {
      int v14 = *(unsigned __int8 *)(a2 + 20);
      if ((v14 & 0xF0) == 0xE0) {
        return 0;
      }
      unint64_t v16 = (unint64_t)a1 - v9 + 10;
      uint64_t v15 = *a4;
    }
    uint64_t v24 = *(unsigned int *)((char *)a1 + 6);
    unint64_t v23 = *(unsigned int *)(a2 + 16);
    if (v16 > v23 && !v15)
    {
      unint64_t result = 0;
      uint64_t v22 = 646;
      goto LABEL_28;
    }
    if (v16 + v24 <= v23 && !v15)
    {
      unint64_t result = 0;
      uint64_t v22 = 647;
      goto LABEL_28;
    }
    if (v15) {
      return 0;
    }
    if ((v14 & 0x80) != 0)
    {
      if (v23 + 4 > v11)
      {
        unint64_t result = 0;
        uint64_t v22 = 655;
        goto LABEL_28;
      }
      goto LABEL_38;
    }
LABEL_36:
    unint64_t result = (v14 & 0xFu) + 5;
    goto LABEL_39;
  }
  if (v10 >= v11) {
    validatePlistObject_cold_19((uint64_t)a1, a2, a3, 0, a5, a6, a7, a8);
  }
  if (a3)
  {
    if (v11 != a3) {
      validatePlistObject_cold_18((uint64_t)a1, a2, a3, 0, a5, a6, a7, a8);
    }
    int v14 = *(unsigned __int8 *)(a2 + 20);
    int v17 = v14 & 0xF0;
    unint64_t v11 = a3;
  }
  else
  {
    int v14 = *(unsigned __int8 *)(a2 + 20);
    int v17 = v14 & 0xF0;
  }
  if (v17 == 224) {
    return 0;
  }
  unint64_t v16 = (unint64_t)a1 - v9 + 10;
  unint64_t v23 = *(unsigned int *)(a2 + 16);
  if (v16 > v23) {
    validatePlistObject_cold_1((uint64_t)a1, a2, a3, 0, a5, a6, a7, a8);
  }
  uint64_t v24 = *(unsigned int *)((char *)a1 + 6);
  if (v16 + v24 <= v23) {
    validatePlistObject_cold_17((uint64_t)a1, a2, a3, 0, a5, a6, a7, a8);
  }
  if ((v14 & 0x80) == 0) {
    goto LABEL_36;
  }
  if (v23 + 4 > v11) {
    validatePlistObject_cold_16((uint64_t)a1, a2, a3, 0, a5, a6, a7, a8);
  }
LABEL_38:
  unint64_t result = *(unsigned int *)(v9 + v23) + 4;
LABEL_39:
  unint64_t v25 = *a1;
  if (!a4)
  {
    if (result >= v25) {
      validatePlistObject_cold_15(result, a2, a3, 0, a5, a6, a7, a8);
    }
    unint64_t v27 = result + v23;
    if (v27 > v24 + v16) {
      validatePlistObject_cold_2(result, a2, a3, 0, a5, a6, a7, a8);
    }
    if (v27 > v11) {
      validatePlistObject_cold_3(result, a2, a3, 0, a5, a6, a7, a8);
    }
    if ((v14 & 0xFE) == 0xF0)
    {
      if ((unint64_t)v23 + 10 > v11) {
        validatePlistObject_cold_4(result, a2, a3, 0, a5, a6, a7, a8);
      }
      uint64_t v28 = (unsigned int *)(v9 + v23);
      uint64_t v29 = *((unsigned __int16 *)v28 + 2);
      unint64_t v30 = *(unsigned int *)((char *)v28 + 6);
      uint64_t v31 = (v30 + v23);
      if (5 * v29 + v31 > v11) {
        validatePlistObject_cold_5(result, a2, a3, 0, a5, a6, a7, a8);
      }
      uint64_t v32 = *v28;
      if (v32 + 4 < v30) {
        validatePlistObject_cold_6(result, v32, a3, 0, a5, a6, a7, a8);
      }
      if (v32 < v29) {
        validatePlistObject_cold_7(result, v32, a3, 0, a5, a6, a7, a8);
      }
      if (5 * v29 > (unint64_t)(v32 - v30) + 4) {
        validatePlistObject_cold_8(result, v32, a3, 0, a5, a6, a7, a8);
      }
      if (v14 == 241)
      {
        if ((unint64_t)v23 + 12 > v11) {
          validatePlistObject_cold_9(result, v32, a3, 0, a5, a6, a7, a8);
        }
        uint64_t v33 = *((unsigned __int16 *)v28 + 5);
        if (*((_WORD *)v28 + 2) && !v10) {
          validatePlistObject_cold_10(result, v32, a3, 0, a5, a6, a7, a8);
        }
        if (!*((_WORD *)v28 + 5)) {
          validatePlistObject_cold_11(result, v32, a3, 0, a5, a6, a7, a8);
        }
        if (v29 <= 1) {
          int v34 = 1;
        }
        else {
          int v34 = *((unsigned __int16 *)v28 + 2);
        }
        if (v33 >= 2 * v34) {
          validatePlistObject_cold_14(result, v32, a3, 0, a5, a6, a7, a8);
        }
        uint64_t v35 = 2 * v33 + 2;
        if (v32 + 4 - v30 != 9 * v29 + v35) {
          validatePlistObject_cold_13(result, v32, a3, 0, a5, a6, a7, a8);
        }
        if (9 * v29 + v31 + v35 > v11) {
          validatePlistObject_cold_12(result, v32, a3, 0, a5, a6, a7, a8);
        }
      }
    }
    return result;
  }
  uint64_t v26 = *a4;
  if (result >= v25 && !v26)
  {
    unint64_t result = 0;
    uint64_t v22 = 662;
LABEL_28:
    *a4 = v22;
    return result;
  }
  unint64_t v36 = result + v23;
  if (!v26 && v36 > v24 + v16)
  {
    unint64_t result = 0;
    uint64_t v22 = 663;
    goto LABEL_28;
  }
  if (!v26 && v36 > v11)
  {
    unint64_t result = 0;
    uint64_t v22 = 665;
    goto LABEL_28;
  }
  if (v26) {
    return 0;
  }
  if ((v14 & 0xFE) == 0xF0)
  {
    if ((unint64_t)v23 + 10 > v11)
    {
      unint64_t result = 0;
      uint64_t v22 = 670;
      goto LABEL_28;
    }
    int v40 = (unsigned int *)(v9 + v23);
    uint64_t v41 = *((unsigned __int16 *)v40 + 2);
    unint64_t v42 = *(unsigned int *)((char *)v40 + 6);
    uint64_t v43 = (v42 + v23);
    if (5 * v41 + v43 > v11)
    {
      unint64_t result = 0;
      uint64_t v22 = 677;
      goto LABEL_28;
    }
    uint64_t v44 = *v40;
    if (v44 + 4 < v42)
    {
      unint64_t result = 0;
      uint64_t v22 = 679;
      goto LABEL_28;
    }
    if (v44 < v41)
    {
      unint64_t result = 0;
      uint64_t v22 = 683;
      goto LABEL_28;
    }
    if (5 * v41 > (unint64_t)(v44 - v42) + 4)
    {
      unint64_t result = 0;
      uint64_t v22 = 684;
      goto LABEL_28;
    }
    if (v14 == 241)
    {
      if ((unint64_t)v23 + 12 > v11)
      {
        unint64_t result = 0;
        uint64_t v22 = 689;
        goto LABEL_28;
      }
      uint64_t v45 = *((unsigned __int16 *)v40 + 5);
      if (*((_WORD *)v40 + 2) && !v10)
      {
        unint64_t result = 0;
        uint64_t v22 = 695;
        goto LABEL_28;
      }
      if (!*((_WORD *)v40 + 5))
      {
        unint64_t result = 0;
        uint64_t v22 = 696;
        goto LABEL_28;
      }
      if (v41 <= 1) {
        int v46 = 1;
      }
      else {
        int v46 = *((unsigned __int16 *)v40 + 2);
      }
      if (v45 >= 2 * v46)
      {
        unint64_t result = 0;
        uint64_t v22 = 697;
        goto LABEL_28;
      }
      uint64_t v47 = 2 * v45 + 2;
      uint64_t v48 = 9 * v41;
      if (v44 + 4 - v42 != v48 + v47)
      {
        unint64_t result = 0;
        uint64_t v22 = 701;
        goto LABEL_28;
      }
      if (v48 + v43 + v47 > v11)
      {
        uint64_t v22 = 705;
        goto LABEL_28;
      }
    }
  }
  return result;
}

void __copyCFDictionary_block_invoke(uint64_t a1, const UInt8 *a2, CFIndex a3, long long *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    CFStringRef v7 = 0;
  }
  else
  {
    CFStringRef v7 = CFStringCreateWithBytes(*(CFAllocatorRef *)(a1 + 40), a2, a3, 0x8000100u, 0);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = (*(_DWORD *)(a1 + 56) + 1);
  long long v12 = *a4;
  uint64_t v13 = *((void *)a4 + 2);
  int v10 = (const void *)__MDPlistContainerCopyObjectErrorCode(v8, &v12, v9, v6);
  unint64_t v11 = v10;
  if (v7 && v10)
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 48), v7, v10);
  }
  else if (!v7)
  {
    goto LABEL_9;
  }
  CFRelease(v7);
LABEL_9:
  if (v11) {
    CFRelease(v11);
  }
}

CFMutableArrayRef copyCFArray(CFAllocatorRef allocator, long long *a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a4) {
    CFMutableArrayRef Mutable = 0;
  }
  else {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 0x40000000;
  v16[2] = __copyCFArray_block_invoke;
  v16[3] = &__block_descriptor_tmp_62;
  int v17 = a3;
  v16[4] = allocator;
  v16[5] = a4;
  v16[6] = Mutable;
  long long v14 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  _MDPlistArrayIterateWithError((unint64_t)&v14, a4, (uint64_t)v16, (uint64_t)a4, a5, a6, a7, a8);
  return Mutable;
}

unint64_t _MDPlistArrayIterate(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v9 = *a1;
  uint64_t v10 = *((void *)a1 + 2);
  return _MDPlistArrayIterateWithError((unint64_t)&v9, 0, a2, a4, a5, a6, a7, a8);
}

unint64_t _MDPlistArrayIterateWithError(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)result + *(unsigned int *)(result + 16);
  if (*(_WORD *)(v8 + 4))
  {
    uint64_t v10 = (uint64_t *)result;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = (int *)(v8 + *(unsigned int *)(v8 + 6));
    do
    {
      uint64_t v15 = *v10;
      uint64_t v14 = v10[1];
      int v31 = *v13;
      char v32 = *((unsigned char *)v13 + 4);
      uint64_t v25 = v15;
      uint64_t v26 = v14;
      int v27 = *v13;
      char v28 = *((unsigned char *)v13 + 4);
      __int16 v29 = 0;
      char v30 = 0;
      unint64_t result = validatePlistObject((unsigned int *)v8, (uint64_t)&v25, 0, a2, a5, a6, a7, a8);
      v12 += result;
      if (a2)
      {
        if (*a2) {
          return result;
        }
        if (v12 > *(unsigned int *)(v8 + 6))
        {
          *a2 = 917;
          return result;
        }
      }
      else if (v12 > *(unsigned int *)(v8 + 6))
      {
        _MDPlistArrayIterateWithError_cold_1(result, v16, v17, v18, v19, v20, v21, v22);
      }
      unint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t *))(a3 + 16);
      uint64_t v25 = v15;
      uint64_t v26 = v14;
      int v27 = v31;
      char v28 = v32;
      __int16 v29 = 0;
      char v30 = 0;
      unint64_t result = v23(a3, &v25);
      ++v11;
      uint64_t v13 = (int *)((char *)v13 + 5);
    }
    while (v11 < *(unsigned __int16 *)(v8 + 4));
  }
  return result;
}

void __copyCFArray_block_invoke(uint64_t a1, long long *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (*(_DWORD *)(a1 + 56) + 1);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  uint64_t v6 = (const void *)__MDPlistContainerCopyObjectErrorCode(v4, &v8, v3, v5);
  if (v6)
  {
    CFStringRef v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), v6);
    CFRelease(v7);
  }
}

CFDataRef _MDPlistContainerCopyObject(const __CFAllocator *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  return __MDPlistContainerCopyObjectErrorCode(a1, (uint64_t)&v9, 0, 0, a5, a6, a7, a8);
}

CFDataRef __MDPlistContainerCopyObjectErrorCode(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    if ((int)a3 >= 1024) {
      __MDPlistContainerCopyObjectErrorCode_cold_1((uint64_t)a1, a2, a3, 0, a5, a6, a7, a8);
    }
    uint64_t v8 = 0;
    uint64_t v28 = 0;
    unsigned int v10 = *(unsigned __int8 *)(a2 + 20);
    if (v10 > 0x32)
    {
      uint64_t v11 = (uint64_t *)(a2 + 16);
      switch(*(unsigned char *)(a2 + 20))
      {
        case 0xE0:
          uint64_t v23 = MEMORY[0x1E4F1D260];
          return *(CFDataRef *)v23;
        case 0xE1:
          uint64_t v23 = MEMORY[0x1E4F1CFD0];
          if (!*(_DWORD *)v11) {
            uint64_t v23 = MEMORY[0x1E4F1CFC8];
          }
          return *(CFDataRef *)v23;
        case 0xE2:
          CFNumberType v22 = kCFNumberSInt32Type;
          goto LABEL_38;
        case 0xE3:
          CFNumberType v22 = kCFNumberFloat32Type;
LABEL_38:
          uint64_t v21 = v11;
          return CFNumberCreate(a1, v22, v21);
        case 0xE4:
        case 0xE5:
        case 0xE6:
        case 0xE7:
        case 0xE8:
        case 0xE9:
        case 0xEA:
        case 0xEB:
        case 0xEC:
        case 0xED:
        case 0xEE:
        case 0xEF:
        case 0xF2:
        case 0xF3:
          return (CFDataRef)v8;
        case 0xF0:
          long long v29 = *(_OWORD *)a2;
          uint64_t v30 = *(void *)(a2 + 16);
          return copyCFArray(a1, &v29, a3, 0, a5, a6, a7, a8);
        case 0xF1:
          long long v29 = *(_OWORD *)a2;
          uint64_t v30 = *(void *)(a2 + 16);
          return copyCFDictionary(a1, &v29, a3, 0, a5, a6, a7, a8);
        case 0xF4:
        case 0xF5:
          unint64_t v12 = (_DWORD *)(*(void *)a2 + *(unsigned int *)(a2 + 16));
          int v14 = *v12;
          uint64_t v13 = (const UInt8 *)(v12 + 1);
          CFIndex v15 = v14 - (v10 == 244);
          if (v10 == 245) {
            CFStringEncoding v16 = 256;
          }
          else {
            CFStringEncoding v16 = 134217984;
          }
          return (CFDataRef)CFStringCreateWithBytes(a1, v13, v15, v16, 1u);
        case 0xF6:
          uint64_t v25 = (const UInt8 *)(*(void *)a2 + *(unsigned int *)(a2 + 16));
          return CFDataCreate(a1, v25 + 4, *(unsigned int *)v25);
        case 0xF7:
          long long v29 = *(_OWORD *)a2;
          uint64_t v30 = *(void *)(a2 + 16);
          return copyCFURL(a1, (uint64_t)&v29, a3, 0, a5, a6, a7, a8);
        default:
          if (v10 != 51) {
            return (CFDataRef)v8;
          }
          uint64_t v28 = *(void *)(*(void *)a2 + *(unsigned int *)(a2 + 16));
          uint64_t v21 = &v28;
          CFNumberType v22 = kCFNumberFloat64Type;
          break;
      }
      return CFNumberCreate(a1, v22, v21);
    }
    if (v10 == 11) {
      return CFUUIDCreateFromUUIDBytes(a1, *(CFUUIDBytes *)(*(void *)a2 + *(unsigned int *)(a2 + 16)));
    }
    if (v10 != 19)
    {
      if (v10 != 35) {
        return (CFDataRef)v8;
      }
      uint64_t v28 = *(void *)(*(void *)a2 + *(unsigned int *)(a2 + 16));
      uint64_t v21 = &v28;
      CFNumberType v22 = kCFNumberSInt64Type;
      return CFNumberCreate(a1, v22, v21);
    }
    return CFDateCreate(a1, *(CFAbsoluteTime *)(*(void *)a2 + *(unsigned int *)(a2 + 16)));
  }
  uint64_t v8 = *a4;
  if ((int)a3 < 1024 || v8)
  {
    if (!v8)
    {
      unsigned int v18 = *(unsigned __int8 *)(a2 + 20);
      if (v18 > 0x32)
      {
        switch(*(unsigned char *)(a2 + 20))
        {
          case 0xF0:
            if ((unint64_t)*(unsigned int *)(a2 + 16) + 4 > *(void *)(a2 + 8))
            {
              uint64_t v8 = 0;
              uint64_t v9 = 1349;
              goto LABEL_5;
            }
            long long v29 = *(_OWORD *)a2;
            uint64_t v30 = *(void *)(a2 + 16);
            copyCFArray(a1, &v29, a3, a4, a5, a6, a7, a8);
            return 0;
          case 0xF1:
            if ((unint64_t)*(unsigned int *)(a2 + 16) + 4 > *(void *)(a2 + 8))
            {
              uint64_t v8 = 0;
              uint64_t v9 = 1355;
              goto LABEL_5;
            }
            long long v29 = *(_OWORD *)a2;
            uint64_t v30 = *(void *)(a2 + 16);
            copyCFDictionary(a1, &v29, a3, a4, a5, a6, a7, a8);
            return 0;
          case 0xF2:
          case 0xF3:
            return (CFDataRef)v8;
          case 0xF4:
          case 0xF5:
            uint64_t v19 = *(unsigned int *)(a2 + 16);
            unint64_t v20 = *(void *)(a2 + 8);
            if (v19 + 4 > v20)
            {
              uint64_t v8 = 0;
              uint64_t v9 = 1362;
              goto LABEL_5;
            }
            if (v19 + 4 + (unint64_t)*(unsigned int *)(*(void *)a2 + v19) <= v20) {
              return 0;
            }
            uint64_t v8 = 0;
            uint64_t v9 = 1366;
            goto LABEL_5;
          case 0xF6:
            uint64_t v26 = *(unsigned int *)(a2 + 16);
            unint64_t v27 = *(void *)(a2 + 8);
            if (v26 + 4 > v27)
            {
              uint64_t v8 = 0;
              uint64_t v9 = 1371;
              goto LABEL_5;
            }
            if (v26 + 4 + (unint64_t)*(unsigned int *)(*(void *)a2 + v26) <= v27) {
              return 0;
            }
            uint64_t v8 = 0;
            uint64_t v9 = 1375;
            break;
          case 0xF7:
            if ((unint64_t)*(unsigned int *)(a2 + 16) + 8 <= *(void *)(a2 + 8)) {
              return 0;
            }
            uint64_t v8 = 0;
            uint64_t v9 = 1380;
            goto LABEL_5;
          default:
            if (v18 == 51) {
              goto LABEL_49;
            }
            return (CFDataRef)v8;
        }
        goto LABEL_5;
      }
      switch(v18)
      {
        case 0xBu:
          if ((unint64_t)*(unsigned int *)(a2 + 16) + 16 > *(void *)(a2 + 8)) {
            __MDPlistContainerCopyObjectErrorCode_cold_2((uint64_t)a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          }
          break;
        case 0x13u:
LABEL_49:
          if ((unint64_t)*(unsigned int *)(a2 + 16) + 8 > *(void *)(a2 + 8)) {
            __MDPlistContainerCopyObjectErrorCode_cold_3((uint64_t)a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          }
          break;
        case 0x23u:
          if ((unint64_t)*(unsigned int *)(a2 + 16) + 8 > *(void *)(a2 + 8)) {
            __MDPlistContainerCopyObjectErrorCode_cold_4((uint64_t)a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          }
          break;
        default:
          return (CFDataRef)v8;
      }
    }
    return 0;
  }
  uint64_t v9 = 1340;
LABEL_5:
  *a4 = v9;
  return (CFDataRef)v8;
}

CFMutableDictionaryRef copyCFDictionary(CFAllocatorRef allocator, long long *a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a4) {
    CFMutableDictionaryRef Mutable = 0;
  }
  else {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 0x40000000;
  v16[2] = __copyCFDictionary_block_invoke;
  v16[3] = &__block_descriptor_tmp_63;
  v16[4] = a4;
  v16[5] = allocator;
  int v17 = a3;
  v16[6] = Mutable;
  long long v14 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  _MDPlistDictionaryIterateWithError((unint64_t)&v14, a4, (uint64_t)v16, (uint64_t)a4, a5, a6, a7, a8);
  return Mutable;
}

BOOL cStringEqualCallback(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t cStringHashCallback(char *a1)
{
  unsigned int v2 = strlen(a1);
  return MDHash((unsigned __int8 *)a1, v2, -1640531527);
}

__CFString *copyObject(void *a1, int *a2, unsigned int a3)
{
  uint64_t v5 = (uint64_t)a1;
  uint64_t v206 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  uint64_t v196 = a1[16];
  CFAllocatorRef alloc = (const __CFAllocator *)a1[17];
  CFArrayRef v7 = *(const __CFArray **)(*a1 + 40);
  if (v7)
  {
    if (CFArrayGetCount(v7))
    {
      ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 40), 0);
      CFRetain(ValueAtIndex);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v6 + 40), 0);
      if (ValueAtIndex) {
        return ValueAtIndex;
      }
    }
  }
  uint64_t v9 = *a2;
  unint64_t v10 = *(void *)(*(void *)(v6 + 48) + 8 * v9);
  bzero(v202, 0x348uLL);
  if (a3 > 0x63) {
    copyObject_cold_1();
  }
  v192 = a2;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  int v13 = 0;
  LODWORD(v14) = 0;
  unsigned int v191 = a3 + 2;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v189 = a3 + 1;
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1D260];
  v186 = (__CFString *)*MEMORY[0x1E4F1CFC8];
  v187 = (__CFString *)*MEMORY[0x1E4F1CFD0];
  uint64_t v15 = v9;
  unint64_t v16 = v10;
LABEL_6:
  LODWORD(v17) = v13;
  while (2)
  {
    uint64_t v18 = (int)v15;
    uint64_t v17 = (int)v17;
    uint64_t v19 = (int *)&v202[35 * (int)v17];
    int v20 = BYTE3(v16);
LABEL_8:
    switch(v20)
    {
      case 0:
        int v183 = v15;
        unint64_t v50 = v16;
        unint64_t v193 = v11;
        CFRange v51 = *(uint64_t (**)(const __CFAllocator *, uint64_t))(v5 + 80);
        if (v51)
        {
          ValueAtIndex = (__CFString *)v51(alloc, v196);
          v52 = cf;
        }
        else
        {
          v52 = cf;
          ValueAtIndex = (__CFString *)CFRetain(cf);
        }
        if (!ValueAtIndex) {
          copyObject_cold_8();
        }
        if (SHIDWORD(v50) < 2)
        {
          LODWORD(v14) = 2;
        }
        else
        {
          LODWORD(v14) = HIDWORD(v50) + 1;
          int v122 = HIDWORD(v50) - 1;
          do
          {
            v123 = *(uint64_t (**)(const __CFAllocator *, uint64_t))(v5 + 80);
            if (v123)
            {
              CFTypeRef v124 = (CFTypeRef)v123(alloc, v196);
              if (!v124) {
                goto LABEL_268;
              }
            }
            else
            {
              CFTypeRef v124 = CFRetain(v52);
              if (!v124) {
LABEL_268:
              }
                copyObject_cold_9();
            }
            CFMutableDictionaryRef Mutable = *(__CFArray **)(v6 + 40);
            if (!Mutable)
            {
              CFMutableDictionaryRef Mutable = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E4F1D510]);
              *(void *)(v6 + 40) = Mutable;
            }
            CFArrayAppendValue(Mutable, v124);
            CFRelease(v124);
            --v122;
          }
          while (v122);
        }
        int v126 = v183 + (v50 & 0xFFFFFF);
        goto LABEL_215;
      case 1:
        unint64_t v193 = v11;
        v53 = *(uint64_t (**)(const __CFAllocator *, unint64_t, uint64_t))(v5 + 72);
        if (v53)
        {
          int v54 = v15;
          uint64_t v55 = v53(alloc, HIDWORD(v16), v196);
          LODWORD(v15) = v54;
          ValueAtIndex = (__CFString *)v55;
        }
        else if (HIDWORD(v16))
        {
          ValueAtIndex = v187;
        }
        else
        {
          ValueAtIndex = v186;
        }
        if (!ValueAtIndex) {
          copyObject_cold_3();
        }
        int v126 = v15 + (v16 & 0xFFFFFF);
        goto LABEL_215;
      case 2:
        if ((v16 & 0x8000000000000000) == 0)
        {
          unint64_t v30 = HIDWORD(v16);
          if (*(_DWORD *)(v6 + 64) > SHIDWORD(v16))
          {
            ValueAtIndex = *(__CFString **)(*(void *)(v5 + 8) + 8 * v30);
            if (!ValueAtIndex)
            {
              unint64_t v16 = *(void *)(*(void *)(v6 + 56) + 8 * v30);
              uint64_t v15 = v16 & 0xFFFFFF;
              unint64_t v11 = v30;
              continue;
            }
            unint64_t v193 = HIDWORD(v16);
            int v176 = v15;
            CFRetain(ValueAtIndex);
            int v126 = v176 + 1;
LABEL_215:
            int v200 = v126;
LABEL_223:
            if (!v12) {
              goto LABEL_255;
            }
LABEL_224:
            uint64_t v163 = *((void *)v12 + 2);
            *((void *)v12 + 2) = v163 + 1;
            *(void *)&v12[2 * v163 + 6] = ValueAtIndex;
            LODWORD(v14) = v14 - 2;
            int v13 = v17;
            CFIndex v164 = *((void *)v12 + 2);
            if ((int)v14 >= 1)
            {
LABEL_225:
              v165 = v12 + 6;
              while (1)
              {
                CFIndex v168 = *((void *)v12 + 1);
                BOOL v169 = v168 <= v164;
                if (v168 <= v164) {
                  goto LABEL_233;
                }
                if (CFArrayGetCount(*(CFArrayRef *)(v6 + 40)))
                {
                  v170 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 40), 0);
                  CFRetain(v170);
                  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v6 + 40), 0);
                  uint64_t v171 = *((void *)v12 + 2);
                  CFIndex v164 = v171 + 1;
                  *((void *)v12 + 2) = v171 + 1;
                  *(void *)&v165[2 * v171] = v170;
                  BOOL v167 = __OFSUB__(v14, 1);
                  LODWORD(v14) = v14 - 1;
                  if (((int)v14 < 0) ^ v167 | (v14 == 0))
                  {
LABEL_231:
                    LODWORD(v14) = 0;
                    break;
                  }
                }
                else
                {
                  uint64_t v166 = *((void *)v12 + 2);
                  CFIndex v164 = v166 + 1;
                  *((void *)v12 + 2) = v166 + 1;
                  *(void *)&v165[2 * v166] = 0;
                  BOOL v167 = __OFSUB__(v14, 1);
                  LODWORD(v14) = v14 - 1;
                  if (((int)v14 < 0) ^ v167 | (v14 == 0)) {
                    goto LABEL_231;
                  }
                }
              }
            }
            while (1)
            {
              BOOL v169 = 0;
LABEL_233:
              if (v164 != *((void *)v12 + 1)) {
                break;
              }
              v172 = v12 + 6;
              ValueAtIndex = (__CFString *)CFArrayCreate(alloc, (const void **)v12 + 3, v164, MEMORY[0x1E4F1D510]);
              *(void *)(*(void *)(v5 + 8) + 8 * *v12) = ValueAtIndex;
              if (*((uint64_t *)v12 + 2) >= 1)
              {
                uint64_t v173 = 0;
                do
                {
                  CFRelease(*(CFTypeRef *)&v172[2 * v173]);
                  *(void *)&v172[2 * v173++] = 0;
                }
                while (v173 < *((void *)v12 + 2));
              }
              if (v13 <= 1) {
                goto LABEL_255;
              }
              LODWORD(v17) = v13 - 1;
              unint64_t v12 = (int *)&v202[35 * (v13 - 2)];
              if (!v169) {
                goto LABEL_224;
              }
              v174 = &v202[35 * (v13 - 2)];
              uint64_t v175 = v174[2];
              v174[2] = v175 + 1;
              v174[v175 + 3] = ValueAtIndex;
              --v13;
              CFIndex v164 = *((void *)v12 + 2);
              if ((int)v14 >= 1) {
                goto LABEL_225;
              }
            }
            unint64_t v16 = *(void *)(*(void *)(v6 + 48) + 8 * v200);
            uint64_t v15 = v200;
            unint64_t v11 = v193;
            goto LABEL_6;
          }
        }
        unint64_t v195 = v16;
        int v200 = v15;
        v181 = _MDLogForCategoryDefault();
        if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)&buf[4] = (uint64_t)v16 >> 32;
          v182 = "uid is less than zero; malformed MDPlistBytes: %ld";
LABEL_264:
          _os_log_error_impl(&dword_1A334F000, v181, OS_LOG_TYPE_ERROR, v182, buf, 0xCu);
        }
LABEL_249:
        *(_WORD *)(v6 + 32) = 1530;
        ValueAtIndex = (__CFString *)CFRetain(cf);
        if (v12 && *((uint64_t *)v12 + 2) >= 1)
        {
          uint64_t v177 = 0;
          v178 = v12 + 6;
          do
          {
            CFRelease(*(CFTypeRef *)&v178[2 * v177]);
            *(void *)&v178[2 * v177++] = 0;
          }
          while (*((void *)v12 + 2) > v177);
        }
        v179 = _MDLogForCategoryDefault();
        if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "CFTypeRef copyObject(_MDPlistBytesDeserializationContext *, int *, _Bool, unsigned int)";
          __int16 v204 = 2048;
          v205 = (__CFString *)v195;
          _os_log_error_impl(&dword_1A334F000, v179, OS_LOG_TYPE_ERROR, "%s: Invalid plist bytes descriptor: %#018llx", buf, 0x16u);
        }
LABEL_255:
        _DWORD *v192 = v200;
        return ValueAtIndex;
      case 10:
        if ((v16 & 0x8000000000000000) != 0) {
          goto LABEL_248;
        }
        uint64_t v21 = v19;
        unint64_t v22 = HIDWORD(v16);
        uint64_t v23 = *(uint64_t (**)(unint64_t, uint64_t))(v5 + 96);
        if (v23)
        {
          if (*(void *)(v5 + 112))
          {
            if (*(void *)(v5 + 104))
            {
              unint64_t v24 = HIDWORD(v16);
              unint64_t v194 = v16;
              uint64_t v25 = v5;
              uint64_t v26 = v18;
              unint64_t v27 = v11;
              uint64_t v28 = v15;
              int v29 = v23(v24, v196);
              uint64_t v15 = v28;
              unint64_t v11 = v27;
              uint64_t v18 = v26;
              uint64_t v5 = v25;
              unint64_t v16 = v194;
              if (v29)
              {
                unint64_t v193 = v11;
                *(_DWORD *)buf = v15;
                if (v22)
                {
                  uint64_t v153 = 0;
                  if (v22 <= 1) {
                    uint64_t v154 = 1;
                  }
                  else {
                    uint64_t v154 = v22;
                  }
                  do
                  {
                    v155 = (const void *)copyObject(v5, buf, v191);
                    (*(void (**)(const void *, uint64_t, void))(v5 + 104))(v155, v153, *(void *)(v5 + 128));
                    if (v155) {
                      CFRelease(v155);
                    }
                    ++v153;
                  }
                  while (v154 != v153);
                  LODWORD(v15) = *(_DWORD *)buf;
                }
                int v162 = v15;
                ValueAtIndex = (__CFString *)(*(uint64_t (**)(void))(v5 + 112))(*(void *)(v5 + 128));
                int v200 = v162;
                *(void *)(*(void *)(v5 + 8) + 8 * (int)v193) = ValueAtIndex;
                goto LABEL_223;
              }
            }
          }
        }
        if ((int)v22 > 32 || !v22 || v17 >= 3)
        {
          int v200 = v15;
          CFArrayRef v67 = copyArray(v5, v16, &v200, v189);
LABEL_103:
          unint64_t v115 = v11;
          ValueAtIndex = (__CFString *)v67;
          unint64_t v193 = v115;
          *(void *)(*(void *)(v5 + 8) + 8 * (int)v115) = v67;
          goto LABEL_223;
        }
        ++v17;
        *uint64_t v21 = v11;
        *((void *)v21 + 1) = v22;
        *((void *)v21 + 2) = 0;
        unint64_t v16 = *(void *)(*(void *)(v6 + 48) + 8 * v18);
        uint64_t v19 = v21 + 70;
        unint64_t v12 = v21;
        int v20 = BYTE3(v16);
        if (BYTE3(v16) <= 0x86u) {
          goto LABEL_8;
        }
LABEL_248:
        unint64_t v195 = v16;
        int v200 = v15;
        goto LABEL_249;
      case 11:
        int v184 = v15;
        int v200 = v15;
        uint64_t v56 = *(void *)v5;
        v57 = (void *)(*(void *)(*(void *)v5 + 48) + 8 * v18);
        uint64_t v59 = *v57;
        v58 = (const UInt8 *)(v57 + 1);
        int v60 = v59 & 0xFFFFFF;
        int v61 = HIDWORD(v59) + 8 * (v59 & 0xFFFFFF) - 16;
        if (SHIDWORD(v59) <= 0) {
          int v61 = 0;
        }
        size_t v62 = v61;
        unint64_t v63 = *(void *)(v56 + 8);
        if ((unint64_t)v58 < v63 || v61 < 0 || (uint64_t)(v63 - (void)v58 + *(unsigned int *)(v56 + 16)) <= v61) {
          goto LABEL_259;
        }
        unint64_t v193 = v11;
        v64 = *(uint64_t (**)(const __CFAllocator *))(v5 + 32);
        CFAllocatorRef v65 = *(const __CFAllocator **)(v5 + 136);
        if (v64) {
          CFDataRef v66 = (CFDataRef)v64(v65);
        }
        else {
          CFDataRef v66 = CFDataCreate(v65, v58, v61);
        }
        ValueAtIndex = (__CFString *)v66;
        int v200 = v60 + v184;
        if (!v66) {
          copyObject_cold_2();
        }
        goto LABEL_222;
      case 12:
      case 28:
        int v200 = v15;
        if ((v16 & 0xFF000000) == 0xC000000) {
          CFStringEncoding v31 = 134217984;
        }
        else {
          CFStringEncoding v31 = 256;
        }
        uint64_t v32 = *(void *)v5;
        uint64_t v33 = (void *)(*(void *)(*(void *)v5 + 48) + 8 * v18);
        uint64_t v35 = *v33;
        int v34 = (const UInt8 *)(v33 + 1);
        int v36 = v35 & 0xFFFFFF;
        int v37 = HIDWORD(v35) + 8 * (v35 & 0xFFFFFF) - 16;
        if (SHIDWORD(v35) <= 0) {
          int v37 = 0;
        }
        size_t v38 = v37;
        unint64_t v39 = *(void *)(v32 + 8);
        if ((unint64_t)v34 < v39 || v37 < 0 || (uint64_t)(v39 - (void)v34 + *(unsigned int *)(v32 + 16)) <= v37) {
          goto LABEL_257;
        }
        int v40 = v15;
        uint64_t v41 = v16 & 0xFF000000;
        unint64_t v42 = *(uint64_t (**)(const __CFAllocator *))(v5 + 40);
        CFAllocatorRef v43 = *(const __CFAllocator **)(v5 + 136);
        unint64_t v193 = v11;
        if (v42)
        {
          ValueAtIndex = (__CFString *)v42(v43);
          int v200 = v36 + v40;
          if (ValueAtIndex) {
            goto LABEL_113;
          }
        }
        else
        {
          ValueAtIndex = (__CFString *)CFStringCreateWithBytes(v43, v34, v37, v31, 1u);
          int v200 = v36 + v40;
          if (ValueAtIndex) {
            goto LABEL_113;
          }
        }
        int v116 = copyString__isMDSInternal;
        if (copyString__isMDSInternal == -1)
        {
          int v116 = _MDIsAppleInternal();
          copyString__isMDSInternal = v116;
        }
        if (!v116) {
          goto LABEL_112;
        }
        uint64_t v117 = 16;
        if (v41 == 201326592) {
          uint64_t v117 = 8;
        }
        ValueAtIndex = (__CFString *)CFStringCreateWithFormat(*(CFAllocatorRef *)(v5 + 136), 0, @"<MDPlistBytesEncodingError: Invalid UTF-%i encoding (byteuint64_t Count = %lu)>", v117, v38);
        v118 = _MDLogForCategoryDefault();
        if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "CFStringRef copyString(_MDPlistBytesDeserializationContext *, uint64_t, int *)";
          __int16 v204 = 2112;
          v205 = ValueAtIndex;
          _os_log_error_impl(&dword_1A334F000, v118, OS_LOG_TYPE_ERROR, "%s: %@", buf, 0x16u);
          if (ValueAtIndex)
          {
LABEL_113:
            *(void *)(*(void *)(v5 + 8) + 8 * (int)v193) = ValueAtIndex;
            if (*(void *)(v5 + 24))
            {
              CFTypeRef v119 = CFRetain(ValueAtIndex);
              uint64_t v120 = *(void *)(v5 + 24);
              uint64_t v121 = *(int *)(v5 + 16);
              *(_DWORD *)(v5 + 16) = v121 + 1;
              *(void *)(v120 + 8 * v121) = v119;
            }
            goto LABEL_223;
          }
        }
        else if (ValueAtIndex)
        {
          goto LABEL_113;
        }
LABEL_112:
        ValueAtIndex = @"__cfstringcreatewithbytesreturnednull__";
        goto LABEL_113;
      case 13:
        int v200 = v15;
        CFArrayRef v67 = copyDictionary(v5, v16, &v200, v189);
        goto LABEL_103;
      case 14:
        unint64_t v193 = v11;
        unint64_t v195 = v16;
        int v200 = v15;
        uint64_t v68 = *(void *)(v6 + 48);
        v69 = (void *)(v68 + 8 * v18 + 8);
        if ((uint64_t)v69 - *(void *)(v6 + 8) >= *(unsigned int *)(v6 + 16) - 16) {
          goto LABEL_249;
        }
        int v70 = v15;
        v71 = *(uint64_t (**)(const __CFAllocator *))(v5 + 88);
        if (v71)
        {
          CFUUIDRef v72 = (CFUUIDRef)v71(alloc);
        }
        else
        {
          *(void *)&v207.byte8 = *(void *)(v68 + 8 * v18 + 16);
          *(void *)&v207.byte0 = *v69;
          CFUUIDRef v72 = CFUUIDCreateFromUUIDBytes(alloc, v207);
        }
        ValueAtIndex = (__CFString *)v72;
        if (!v72) {
          copyObject_cold_12();
        }
        if (SHIDWORD(v195) < 2)
        {
          LODWORD(v14) = 2;
        }
        else
        {
          LODWORD(v14) = HIDWORD(v195) + 1;
          int v127 = HIDWORD(v195) - 1;
          uint64_t v128 = v68 + 8 * v18 + 24;
          v129 = (CFUUIDBytes *)v128;
          do
          {
            if (v128 - *(void *)(v6 + 8) >= *(unsigned int *)(v6 + 16) - 16) {
              goto LABEL_249;
            }
            v130 = *(uint64_t (**)(const __CFAllocator *, CFUUIDBytes *, uint64_t))(v5 + 88);
            if (v130)
            {
              CFUUIDRef v131 = (CFUUIDRef)v130(alloc, v129, v196);
              if (!v131) {
                goto LABEL_269;
              }
            }
            else
            {
              CFUUIDRef v131 = CFUUIDCreateFromUUIDBytes(alloc, *v129);
              if (!v131) {
LABEL_269:
              }
                copyObject_cold_13();
            }
            v132 = *(__CFArray **)(v6 + 40);
            if (!v132)
            {
              v132 = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E4F1D510]);
              *(void *)(v6 + 40) = v132;
            }
            CFArrayAppendValue(v132, v131);
            CFRelease(v131);
            ++v129;
            v128 += 16;
            --v127;
          }
          while (v127);
          int v70 = v200;
        }
        int v126 = v70 + (v195 & 0xFFFFFF);
        goto LABEL_215;
      case 16:
      case 17:
        int v200 = v15;
        int v201 = v15;
        unint64_t v193 = v11;
        if ((v16 & 0xFF000000) == 0x11000000)
        {
          if (HIDWORD(v16) != 2) {
            copyObject_cold_17();
          }
          uint64_t v44 = copyObject(v5, &v201, v191);
          uint64_t v45 = *(void *)v5;
          uint64_t v46 = *(void *)(*(void *)v5 + 48);
          uint64_t v47 = v46 + 8 * v201;
          if ((unint64_t)*(unsigned __int8 *)(v47 + 3) << 24 != 0x2000000) {
            copyObject_cold_16();
          }
          unint64_t v48 = *(void *)(v47 + 8);
          if ((v48 & 0xFF000000) != 0x7000000) {
            copyObject_cold_15();
          }
          CFURLRef v49 = (const __CFURL *)v44;
          LODWORD(v15) = v201 + 1;
        }
        else
        {
          CFURLRef v49 = 0;
          uint64_t v45 = *(void *)v5;
          uint64_t v46 = *(void *)(*(void *)v5 + 48);
          unint64_t v48 = *(void *)(v46 + 8 * v18);
        }
        unint64_t v108 = HIDWORD(v48);
        int v109 = v48 & 0xFFFFFF;
        int v110 = HIDWORD(v48) + 8 * (v48 & 0xFFFFFF) - 16;
        if ((int)v108 <= 0) {
          int v110 = 0;
        }
        uint64_t v111 = v110;
        int v112 = v109 + v15;
        int v201 = v109 + v15;
        v113 = (const UInt8 *)(v46 + 8 * (int)v15 + 8);
        unint64_t v114 = *(void *)(v45 + 8);
        if ((unint64_t)v113 >= v114
          && (v110 & 0x80000000) == 0
          && (uint64_t)(v114 - (void)v113 + *(unsigned int *)(v45 + 16)) > v110)
        {
          ValueAtIndex = (__CFString *)CFURLCreateWithBytes(allocator, v113, v110, 0x8000100u, v49);
          if ((v16 & 0xFF000000) == 0x11000000) {
            CFRelease(v49);
          }
          int v200 = v112;
          if (!ValueAtIndex) {
            copyObject_cold_14();
          }
LABEL_222:
          *(void *)(*(void *)(v5 + 8) + 8 * (int)v193) = ValueAtIndex;
          goto LABEL_223;
        }
        unint64_t v195 = v16;
        v181 = _MDLogForCategoryDefault();
        if (!os_log_type_enabled(v181, OS_LOG_TYPE_ERROR)) {
          goto LABEL_249;
        }
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = v111;
        goto LABEL_263;
      case 26:
        int v200 = v15;
        v73 = (uint64_t *)(*(void *)(v6 + 48) + 8 * v18);
        uint64_t v75 = *v73;
        v74 = v73 + 1;
        int v76 = v75 & 0xFFFFFF;
        int v77 = HIDWORD(v75) + 8 * (v75 & 0xFFFFFF) - 16;
        if (SHIDWORD(v75) <= 0) {
          int v77 = 0;
        }
        size_t v62 = v77;
        unint64_t v78 = *(void *)(v6 + 8);
        if ((unint64_t)v74 >= v78
          && (v77 & 0x80000000) == 0
          && (uint64_t)(v78 - (void)v74 + *(unsigned int *)(v6 + 16)) > v77)
        {
          int v79 = v15;
          unint64_t v193 = v11;
          if (v77)
          {
            unint64_t v195 = v16;
            if (v77 == -1) {
              goto LABEL_249;
            }
            int v80 = v76;
            *(void *)buf = 0;
            ValueAtIndex = 0;
            if (_fast_vm_allocate(buf, v77, -268435455)) {
              goto LABEL_117;
            }
            if (v62 >= 4 * *MEMORY[0x1E4F14B00]) {
              madvise(*(void **)buf, v62, 3);
            }
            memcpy(*(void **)buf, v74, v62);
            uint64_t v81 = *(void *)buf;
            unsigned int v82 = v62 >> 3;
            uint64_t v83 = (uint64_t)alloc;
            int v84 = 1;
          }
          else
          {
            int v80 = v76;
            uint64_t v83 = (uint64_t)alloc;
            uint64_t v81 = 0;
            unsigned int v82 = 0;
            int v84 = 0;
          }
          ValueAtIndex = (__CFString *)_MDStoreOIDArrayCreate(v83, v81, v82, v84);
LABEL_117:
          int v200 = v80 + v79;
          if (!ValueAtIndex) {
            copyObject_cold_19();
          }
          goto LABEL_222;
        }
LABEL_259:
        unint64_t v195 = v16;
        v181 = _MDLogForCategoryDefault();
        if (!os_log_type_enabled(v181, OS_LOG_TYPE_ERROR)) {
          goto LABEL_249;
        }
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = v62;
        goto LABEL_263;
      case 27:
        int v200 = v15;
        v85 = (uint64_t *)(*(void *)(v6 + 48) + 8 * v18);
        uint64_t v87 = *v85;
        v86 = v85 + 1;
        int v88 = v87 & 0xFFFFFF;
        signed int v89 = HIDWORD(v87) + 8 * (v87 & 0xFFFFFF) - 16;
        if (SHIDWORD(v87) <= 0) {
          signed int v90 = 0;
        }
        else {
          signed int v90 = v89;
        }
        size_t v38 = v90;
        unint64_t v91 = *(void *)(v6 + 8);
        if ((unint64_t)v86 < v91 || v90 < 0 || (uint64_t)(v91 - (void)v86 + *(unsigned int *)(v6 + 16)) <= v90)
        {
LABEL_257:
          unint64_t v195 = v16;
          v181 = _MDLogForCategoryDefault();
          if (!os_log_type_enabled(v181, OS_LOG_TYPE_ERROR)) {
            goto LABEL_249;
          }
          *(_DWORD *)buf = 134217984;
          *(void *)&buf[4] = v38;
LABEL_263:
          v182 = "invalid index; malformed MDPlistBytes: %ld";
          goto LABEL_264;
        }
        int v92 = v88 + v15;
        unint64_t v193 = v11;
        if (v90)
        {
          unint64_t v195 = v16;
          if (v90 == -1) {
            goto LABEL_249;
          }
          if (v90 < 0x800 || (*(unsigned char *)(v6 + 34) & 8) != 0)
          {
            v94 = malloc_type_valloc(v90, 0xA089D59EuLL);
            v95 = v94;
            if (v38 >= 4 * *MEMORY[0x1E4F14B00]) {
              madvise(v94, v38, 3);
            }
            memcpy(v95, v86, v38);
            if (v95)
            {
              v96 = [[_MDPlistBytes alloc] initWithByteVector:v95 count:v38 trusted:0 deallocator:&__block_literal_global_108];
              ValueAtIndex = (__CFString *)v96;
              if (v96) {
                CFRetain(v96);
              }
            }
            else
            {
              if (qword_1E95CA390 != -1) {
                dispatch_once(&qword_1E95CA390, &__block_literal_global_128);
              }
              ValueAtIndex = (__CFString *)CFRetain((CFTypeRef)qword_1E95CA388);
            }
            BYTE2(ValueAtIndex[1].isa) |= 8u;
            int v200 = v92;
            goto LABEL_222;
          }
          *(void *)buf = 0;
          ValueAtIndex = 0;
          if (_fast_vm_allocate(buf, v90, -251658239))
          {
LABEL_190:
            int v200 = v92;
            if (!ValueAtIndex) {
              copyObject_cold_18();
            }
            goto LABEL_222;
          }
          if (v38 >= 4 * *MEMORY[0x1E4F14B00]) {
            madvise(*(void **)buf, v38, 3);
          }
          memcpy(*(void **)buf, v86, v38);
          if (*(void *)buf)
          {
            v152 = [[_MDPlistBytes alloc] initWithByteVector:*(void *)buf count:v38 trusted:0 deallocator:&__block_literal_global_108];
            ValueAtIndex = (__CFString *)v152;
            if (v152) {
              CFRetain(v152);
            }

            goto LABEL_190;
          }
          if (qword_1E95CA390 == -1)
          {
LABEL_120:
            ValueAtIndex = (__CFString *)CFRetain((CFTypeRef)qword_1E95CA388);
            goto LABEL_190;
          }
        }
        else if (qword_1E95CA390 == -1)
        {
          goto LABEL_120;
        }
        dispatch_once(&qword_1E95CA390, &__block_literal_global_128);
        goto LABEL_120;
      case 132:
        unint64_t v193 = v11;
        unint64_t v195 = v16;
        int v185 = v15;
        int v200 = v15;
        v97 = (uint64_t *)(*(void *)(v6 + 48) + 8 * v18 + 8);
        if ((uint64_t)v97 - *(void *)(v6 + 8) >= *(unsigned int *)(v6 + 16) - 8) {
          goto LABEL_249;
        }
        uint64_t valuePtr = 0;
        uint64_t valuePtr = *v97;
        v98 = *(uint64_t (**)(const __CFAllocator *))(v5 + 64);
        if (v98) {
          CFNumberRef v99 = (CFNumberRef)v98(alloc);
        }
        else {
          CFNumberRef v99 = CFNumberCreate(alloc, kCFNumberLongLongType, &valuePtr);
        }
        ValueAtIndex = (__CFString *)v99;
        int v133 = v16;
        int v134 = v185;
        if (!v99) {
          copyObject_cold_6();
        }
        if (SHIDWORD(v16) < 2) {
          goto LABEL_212;
        }
        uint64_t v14 = (HIDWORD(v16) + 1);
        uint64_t v135 = v14 - 2;
        uint64_t v136 = 8 * v18 + 16;
        while (1)
        {
          uint64_t v137 = *(void *)(v6 + 48);
          if (v136 + v137 - *(void *)(v6 + 8) >= *(unsigned int *)(v6 + 16) - 8) {
            goto LABEL_249;
          }
          uint64_t valuePtr = *(void *)(v137 + v136);
          v138 = *(uint64_t (**)(const __CFAllocator *))(v5 + 64);
          if (v138)
          {
            CFNumberRef v139 = (CFNumberRef)v138(alloc);
            if (!v139) {
              goto LABEL_270;
            }
          }
          else
          {
            CFNumberRef v139 = CFNumberCreate(alloc, kCFNumberLongLongType, &valuePtr);
            if (!v139) {
LABEL_270:
            }
              copyObject_cold_7();
          }
          v140 = *(__CFArray **)(v6 + 40);
          if (!v140)
          {
            v140 = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E4F1D510]);
            *(void *)(v6 + 40) = v140;
          }
          CFArrayAppendValue(v140, v139);
          CFRelease(v139);
          v136 += 8;
          if (!--v135) {
            goto LABEL_213;
          }
        }
      case 133:
        unint64_t v193 = v11;
        unint64_t v195 = v16;
        int v185 = v15;
        int v200 = v15;
        v100 = (double *)(*(void *)(v6 + 48) + 8 * v18 + 8);
        if ((uint64_t)v100 - *(void *)(v6 + 8) >= *(unsigned int *)(v6 + 16) - 8) {
          goto LABEL_249;
        }
        double v198 = 0.0;
        double v101 = *v100;
        double v198 = *v100;
        v102 = *(uint64_t (**)(const __CFAllocator *, uint64_t))(v5 + 56);
        if (v102)
        {
          CFNumberRef v103 = (CFNumberRef)v102(alloc, v196);
        }
        else
        {
          float v141 = v101;
          *(float *)buf = v141;
          if (v101 == v141)
          {
            v142 = (double *)buf;
            CFAllocatorRef v143 = alloc;
            CFNumberType v144 = kCFNumberFloatType;
          }
          else
          {
            v142 = &v198;
            CFAllocatorRef v143 = alloc;
            CFNumberType v144 = kCFNumberDoubleType;
          }
          CFNumberRef v103 = CFNumberCreate(v143, v144, v142);
        }
        ValueAtIndex = (__CFString *)v103;
        int v133 = v16;
        int v134 = v185;
        if (!v103) {
          copyObject_cold_10();
        }
        if (SHIDWORD(v16) < 2) {
          goto LABEL_212;
        }
        uint64_t v14 = (HIDWORD(v16) + 1);
        uint64_t v156 = v14 - 2;
        uint64_t v157 = 8 * v18 + 16;
        while (1)
        {
          uint64_t v158 = *(void *)(v6 + 48);
          if (v157 + v158 - *(void *)(v6 + 8) >= *(unsigned int *)(v6 + 16) - 8) {
            goto LABEL_249;
          }
          double v198 = *(double *)(v158 + v157);
          v159 = *(uint64_t (**)(const __CFAllocator *, uint64_t))(v5 + 56);
          if (v159)
          {
            CFNumberRef v160 = (CFNumberRef)v159(alloc, v196);
            if (!v160) {
              goto LABEL_272;
            }
          }
          else
          {
            CFNumberRef v160 = CFNumberCreate(alloc, kCFNumberDoubleType, &v198);
            if (!v160) {
LABEL_272:
            }
              copyObject_cold_11();
          }
          v161 = *(__CFArray **)(v6 + 40);
          if (!v161)
          {
            v161 = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E4F1D510]);
            *(void *)(v6 + 40) = v161;
          }
          CFArrayAppendValue(v161, v160);
          CFRelease(v160);
          v157 += 8;
          if (!--v156) {
            goto LABEL_213;
          }
        }
      case 134:
        unint64_t v193 = v11;
        unint64_t v195 = v16;
        int v185 = v15;
        int v200 = v15;
        v104 = (double *)(*(void *)(v6 + 48) + 8 * v18 + 8);
        if ((uint64_t)v104 - *(void *)(v6 + 8) >= *(unsigned int *)(v6 + 16) - 8) {
          goto LABEL_249;
        }
        double v105 = *v104;
        v106 = *(uint64_t (**)(const __CFAllocator *, uint64_t, double))(v5 + 48);
        if (v106) {
          CFDateRef v107 = (CFDateRef)v106(alloc, v196, v105);
        }
        else {
          CFDateRef v107 = CFDateCreate(alloc, v105);
        }
        ValueAtIndex = (__CFString *)v107;
        int v133 = v16;
        int v134 = v185;
        if (!v107) {
          copyObject_cold_4();
        }
        if (SHIDWORD(v16) < 2)
        {
LABEL_212:
          LODWORD(v14) = 2;
        }
        else
        {
          uint64_t v14 = (HIDWORD(v16) + 1);
          uint64_t v145 = 8 * v18 + 16;
          uint64_t v146 = v14 - 2;
          do
          {
            uint64_t v147 = *(void *)(v6 + 48);
            if (v145 + v147 - *(void *)(v6 + 8) >= *(unsigned int *)(v6 + 16) - 8) {
              goto LABEL_249;
            }
            double v148 = *(double *)(v147 + v145);
            v149 = *(uint64_t (**)(const __CFAllocator *, uint64_t, double))(v5 + 48);
            if (v149)
            {
              CFDateRef v150 = (CFDateRef)v149(alloc, v196, v148);
              if (!v150) {
                goto LABEL_271;
              }
            }
            else
            {
              CFDateRef v150 = CFDateCreate(alloc, v148);
              if (!v150) {
LABEL_271:
              }
                copyObject_cold_5();
            }
            v151 = *(__CFArray **)(v6 + 40);
            if (!v151)
            {
              v151 = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E4F1D510]);
              *(void *)(v6 + 40) = v151;
            }
            CFArrayAppendValue(v151, v150);
            CFRelease(v150);
            v145 += 8;
            --v146;
          }
          while (v146);
LABEL_213:
          int v133 = v195;
          int v134 = v185;
        }
        int v126 = v134 + (v133 & 0xFFFFFF);
        goto LABEL_215;
      default:
        goto LABEL_248;
    }
  }
}

CFTypeRef _QueryResultsValue(CFTypeRef result, uint64_t a2, uint64_t *a3)
{
  if (result && !*((unsigned char *)a3 + 32))
  {
    if ((CFTypeRef)*MEMORY[0x1E4F1D260] == result)
    {
      uint64_t v5 = *a3;
      if (a2 && v5 == 1)
      {
        uint64_t v6 = *(uint64_t (**)(void))(a3[1] + 16);
        return (CFTypeRef)v6();
      }
      else if (!a2 && v5 == 1)
      {
        *((unsigned char *)a3 + 33) = 1;
      }
    }
    else if (a3[2] > a2)
    {
      unint64_t result = CFRetain(result);
      *(void *)(a3[3] + 8 * a2) = result;
    }
  }
  return result;
}

uint64_t _QueryResultsBeginArray(uint64_t a1, uint64_t *a2)
{
  if (!*((unsigned char *)a2 + 32))
  {
    uint64_t v2 = *a2;
    if (*a2)
    {
      if (v2 != 1) {
        return 0;
      }
      *((unsigned char *)a2 + 33) = 1;
    }
    *a2 = v2 + 1;
  }
  return 1;
}

void _MDPlistContainerEndDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 136);
  unsigned int v9 = v8 - 1;
  if (v8 <= 1) {
    _MDPlistContainerEndDictionary_cold_1(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_DWORD *)(a1 + 136) = v9;
  uint64_t v11 = *(void *)(a1 + 144);
  if (*(_DWORD *)(v11 + 24 * v9) != 241) {
    _MDPlistContainerEndDictionary_cold_3(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  int v12 = *(_DWORD *)(v11 + 24 * v9 + 4);
  if (v12) {
    _MDPlistContainerEndDictionary_cold_2(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v13 = a2;
  if (v12 >= 0) {
    int v14 = *(_DWORD *)(v11 + 24 * v9 + 4);
  }
  else {
    int v14 = v12 + 1;
  }
  unsigned int v15 = v14 >> 1;
  if ((v14 >> 1) <= 3) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = ((double)(v15 + 1) * 1.3);
  }
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = MDPlistBufferConsume(a1, a1 + 32, 9 * (v14 >> 1) + 2 * (v16 + 1));
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v41 = v13;
    int v42 = v17;
    if (v16) {
      bzero(v18, 2 * v16);
    }
    CFAllocatorRef v43 = (void *)(v11 + 24 * v9 + 8);
    if (v12 >= 2)
    {
      int v20 = (unsigned int *)(*(void *)(a1 + 80) + *v43);
      if (v15 <= 1) {
        int v21 = 1;
      }
      else {
        int v21 = v15;
      }
      do
      {
        unsigned int v22 = *v20;
        int v20 = (unsigned int *)((char *)v20 + 9);
        unsigned int v23 = MDHash((unsigned __int8 *)(*(void *)(a1 + 112) + v22 + 2), *(unsigned __int16 *)(*(void *)(a1 + 112) + v22), 0);
        ++v19[v23 % v16];
        --v21;
      }
      while (v21);
    }
    if (v16)
    {
      __int16 v24 = 0;
      uint64_t v25 = v16;
      uint64_t v26 = v19;
      do
      {
        v24 += *v26;
        *v26++ = v24;
        --v25;
      }
      while (v25);
      uint64_t v27 = v16;
    }
    else
    {
      uint64_t v27 = 0;
      __int16 v24 = 0;
    }
    uint64_t v13 = v41;
    v19[v27] = v24;
    if (v12 >= 2)
    {
      int v29 = (unsigned int *)(*(void *)(a1 + 80) + *v43);
      if (v15 <= 1) {
        int v30 = 1;
      }
      else {
        int v30 = v15;
      }
      do
      {
        unsigned int v31 = MDHash((unsigned __int8 *)(*(void *)(a1 + 112) + *v29 + 2), *(unsigned __int16 *)(*(void *)(a1 + 112) + *v29), 0);
        unsigned __int16 v32 = v19[v31 % v16] - 1;
        v19[v31 % v16] = v32;
        uint64_t v33 = (uint64_t)v19 + 9 * v32 + 2 * (v16 + 1);
        uint64_t v34 = *(void *)v29;
        char v35 = *((unsigned char *)v29 + 8);
        int v29 = (unsigned int *)((char *)v29 + 9);
        *(unsigned char *)(v33 + 8) = v35;
        *(void *)uint64_t v33 = v34;
        --v30;
      }
      while (v30);
    }
    uint64_t v36 = v11 + 24 * v9;
    uint64_t v37 = *(unsigned int *)(v36 + 16);
    uint64_t v38 = *(void *)(a1 + 48) + v37;
    *(_DWORD *)uint64_t v38 = *(_DWORD *)(a1 + 32) - v37 - 4;
    *(_WORD *)(v38 + 4) = v15;
    *(_DWORD *)(v38 + 6) = v42 - v37;
    *(_WORD *)(v38 + 10) = v16;
    uint64_t v28 = (int *)(*(void *)(a1 + 80) + *(unsigned int *)(v36 + 20));
    if (!*(unsigned char *)(a1 + 16))
    {
      uint64_t v39 = *(void *)(a1 + 72) - *v43 + *(void *)(a1 + 64);
      *(void *)(a1 + 64) = *v43;
      *(void *)(a1 + 72) = v39;
    }
  }
  else
  {
    uint64_t v28 = &gNullObjectReference;
  }
  if (v13)
  {
    int v40 = *v28;
    *(unsigned char *)(v13 + 4) = *((unsigned char *)v28 + 4);
    *(_DWORD *)uint64_t v13 = v40;
  }
}

uint64_t MDHash(unsigned __int8 *a1, unsigned int a2, int a3)
{
  unsigned int v3 = -1640531527;
  if (a2 < 0xC)
  {
    int v5 = -1640531527;
    unsigned int v4 = a2;
  }
  else
  {
    unsigned int v4 = a2;
    int v5 = -1640531527;
    do
    {
      unsigned int v6 = *((_DWORD *)a1 + 1) + v3;
      unsigned int v7 = *((_DWORD *)a1 + 2) + a3;
      int v8 = (*(_DWORD *)a1 + v5 - (v6 + v7)) ^ (v7 >> 13);
      unsigned int v9 = (v6 - v7 - v8) ^ (v8 << 8);
      unsigned int v10 = (v7 - v8 - v9) ^ (v9 >> 13);
      int v11 = (v8 - v9 - v10) ^ (v10 >> 12);
      unsigned int v12 = (v9 - v10 - v11) ^ (v11 << 16);
      unsigned int v13 = (v10 - v11 - v12) ^ (v12 >> 5);
      int v5 = (v11 - v12 - v13) ^ (v13 >> 3);
      unsigned int v3 = (v12 - v13 - v5) ^ (v5 << 10);
      a3 = (v13 - v5 - v3) ^ (v3 >> 15);
      a1 += 12;
      v4 -= 12;
    }
    while (v4 > 0xB);
  }
  unsigned int v14 = a3 + a2;
  switch(v4)
  {
    case 1u:
      goto LABEL_17;
    case 2u:
      goto LABEL_16;
    case 3u:
      goto LABEL_15;
    case 4u:
      goto LABEL_14;
    case 5u:
      goto LABEL_13;
    case 6u:
      goto LABEL_12;
    case 7u:
      goto LABEL_11;
    case 8u:
      goto LABEL_10;
    case 9u:
      goto LABEL_9;
    case 0xAu:
      goto LABEL_8;
    case 0xBu:
      v14 += a1[10] << 24;
LABEL_8:
      v14 += a1[9] << 16;
LABEL_9:
      v14 += a1[8] << 8;
LABEL_10:
      v3 += a1[7] << 24;
LABEL_11:
      v3 += a1[6] << 16;
LABEL_12:
      v3 += a1[5] << 8;
LABEL_13:
      v3 += a1[4];
LABEL_14:
      v5 += a1[3] << 24;
LABEL_15:
      v5 += a1[2] << 16;
LABEL_16:
      v5 += a1[1] << 8;
LABEL_17:
      v5 += *a1;
      break;
    default:
      break;
  }
  int v15 = (v5 - v3 - v14) ^ (v14 >> 13);
  unsigned int v16 = (v3 - v14 - v15) ^ (v15 << 8);
  unsigned int v17 = (v14 - v15 - v16) ^ (v16 >> 13);
  int v18 = (v15 - v16 - v17) ^ (v17 >> 12);
  unsigned int v19 = (v16 - v17 - v18) ^ (v18 << 16);
  unsigned int v20 = (v17 - v18 - v19) ^ (v19 >> 5);
  int v21 = (v18 - v19 - v20) ^ (v20 >> 3);
  return (v20 - v21 - ((v19 - v20 - v21) ^ (v21 << 10))) ^ (((v19 - v20 - v21) ^ (v21 << 10)) >> 15);
}

uint64_t _QueryResultsEndArray(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = (*(void *)a1)--;
    if (v2 == 2)
    {
      (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        for (unint64_t i = 0; i < v3; ++i)
        {
          int v5 = *(const void **)(*(void *)(a1 + 24) + 8 * i);
          if (v5)
          {
            CFRelease(v5);
            *(void *)(*(void *)(a1 + 24) + 8 * i) = 0;
            unint64_t v3 = *(void *)(a1 + 16);
          }
        }
      }
    }
  }
  return 0;
}

BOOL _MDPlistBytesAddReal(uint64_t a1, double a2)
{
  BOOL result = _MDPlistBytesAddRLETagRoom(a1, 0x85u, 1u);
  if (result)
  {
    int v5 = *(double **)(a1 + 112);
    double *v5 = a2;
    *(void *)(a1 + 112) = v5 + 1;
    return 1;
  }
  return result;
}

BOOL _MDPlistBytesAddInteger(uint64_t a1, uint64_t a2)
{
  BOOL result = _MDPlistBytesAddRLETagRoom(a1, 0x84u, 1u);
  if (result)
  {
    int v5 = *(void **)(a1 + 112);
    void *v5 = a2;
    *(void *)(a1 + 112) = v5 + 1;
    return 1;
  }
  return result;
}

BOOL _MDPlistBytesAddDate(uint64_t a1, double a2)
{
  BOOL result = _MDPlistBytesAddRLETagRoom(a1, 0x86u, 1u);
  if (result)
  {
    int v5 = *(double **)(a1 + 112);
    double *v5 = a2;
    *(void *)(a1 + 112) = v5 + 1;
    return 1;
  }
  return result;
}

BOOL _MDPlistBytesAddRLETagRoom(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (!*(_WORD *)(a1 + 32))
  {
    unsigned __int8 v4 = a2;
    uint64_t v6 = a3;
    uint64_t v26 = a3 | 0x100000000;
    unsigned int v25 = 8 * a3;
    unsigned int v24 = a3 + 1;
    unsigned int v7 = 8 * (a3 + 1);
    uint64_t v8 = a3;
    uint64_t v9 = a2;
    while (1)
    {
      if ((*(unsigned char *)(a1 + 34) & 1) == 0) {
        return 0;
      }
      if (*(int *)(a1 + 88) <= 0) {
        break;
      }
      unsigned int v10 = *(uint64_t **)(a1 + 128);
      if (v10
        && (uint64_t v11 = *v10, v9 == BYTE3(*v10))
        && (unint64_t v12 = (unint64_t)&v10[v11 & 0xFFFFFF], v12 == *(void *)(a1 + 112)))
      {
        *unsigned int v10 = v26 + v11;
        if (v12 + 8 * v6 < *(void *)(a1 + 120)) {
          goto LABEL_26;
        }
        if (_MDPlistBytesGrowCapacityVM(a1, v25, 0))
        {
          unint64_t v12 = *(void *)(a1 + 112);
LABEL_26:
          unint64_t v20 = v12 + 8 * v6;
          uint64_t v21 = *MEMORY[0x1E4F14B00];
          uint64_t v22 = -*MEMORY[0x1E4F14B00];
          if (((v20 ^ v12) & v22) != 0 && ((v20 >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
          {
            size_t v23 = 16 << *MEMORY[0x1E4F14AF8];
            if (v23 >= 4 * v21) {
              madvise((void *)((v21 - 1 + v12) & v22), v23, 3);
            }
          }
          goto LABEL_25;
        }
      }
      else
      {
        *(void *)(a1 + 128) = *(void *)(a1 + 112);
        unsigned int v13 = *(uint64_t **)(a1 + 112);
        if ((unint64_t)&v13[v8 + 1] < *(void *)(a1 + 120)) {
          goto LABEL_20;
        }
        if (_MDPlistBytesGrowCapacityVM(a1, v7, 0))
        {
          unsigned int v13 = *(uint64_t **)(a1 + 112);
LABEL_20:
          unint64_t v15 = (unint64_t)&v13[v8 + 1];
          uint64_t v16 = *MEMORY[0x1E4F14B00];
          uint64_t v17 = -*MEMORY[0x1E4F14B00];
          if (((v15 ^ (unint64_t)v13) & v17) != 0 && ((v15 >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
          {
            size_t v18 = 16 << *MEMORY[0x1E4F14AF8];
            if (v18 >= 4 * v16)
            {
              madvise((void *)(((unint64_t)v13 + v16 - 1) & v17), v18, 3);
              unsigned int v13 = *(uint64_t **)(a1 + 112);
            }
          }
          *unsigned int v13 = v24 & 0xFFFFFF | (v4 << 24) | 0x100000000;
          *(void *)(a1 + 112) = v13 + 1;
LABEL_25:
          uint64_t v19 = 8 * *(int *)(*(void *)(a1 + 96) + 4 * *(int *)(a1 + 88) - 4);
          *(void *)(*(void *)(a1 + 56) + v19) += 0x100000000;
          return 1;
        }
      }
      if (*(_WORD *)(a1 + 32)) {
        return 0;
      }
    }
    *(_WORD *)(a1 + 32) = 2653;
    unsigned int v14 = _MDLogForCategoryDefault();
    BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _MDPlistBytesAddRLETagRoom_cold_1();
  }
  return 0;
}

uint64_t _MDPerf_QueryLog()
{
  if (_MDPerf_QueryLog_onceToken != -1) {
    dispatch_once(&_MDPerf_QueryLog_onceToken, &__block_literal_global_3);
  }
  return _MDPerf_QueryLog_sQueryLog;
}

BOOL _MDPlistBytesAddBoolean(uint64_t a1, uint64_t a2)
{
  do
  {
    if (*(_WORD *)(a1 + 32) || (*(unsigned char *)(a1 + 34) & 1) == 0) {
      return 0;
    }
    if (*(int *)(a1 + 88) <= 0)
    {
      *(_WORD *)(a1 + 32) = 2639;
      unsigned int v10 = _MDLogForCategoryDefault();
      BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _MDPlistBytesAddBoolean_cold_1();
      return 0;
    }
    unsigned __int8 v4 = *(uint64_t **)(a1 + 112);
    if ((unint64_t)(v4 + 1) < *(void *)(a1 + 120)) {
      goto LABEL_7;
    }
  }
  while (!_MDPlistBytesGrowCapacityVM(a1, 8u, 0));
  unsigned __int8 v4 = *(uint64_t **)(a1 + 112);
LABEL_7:
  uint64_t v5 = *MEMORY[0x1E4F14B00];
  uint64_t v6 = -*MEMORY[0x1E4F14B00];
  if ((((unint64_t)(v4 + 1) ^ (unint64_t)v4) & v6) != 0
    && (((unint64_t)(v4 + 1) >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
  {
    size_t v7 = 16 << *MEMORY[0x1E4F14AF8];
    if (v7 >= 4 * v5)
    {
      madvise((void *)(((unint64_t)v4 + v5 - 1) & v6), v7, 3);
      unsigned __int8 v4 = *(uint64_t **)(a1 + 112);
    }
  }
  *unsigned __int8 v4 = (a2 << 32) | 0x1000001;
  *(void *)(a1 + 112) = v4 + 1;
  uint64_t v8 = 8 * *(int *)(*(void *)(a1 + 96) + 4 * *(int *)(a1 + 88) - 4);
  *(void *)(*(void *)(a1 + 56) + v8) += 0x100000000;
  return 1;
}

void _MDPlistContainerEndContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 136) - 1;
  *(_DWORD *)(a1 + 136) = v8;
  if (v8) {
    _MDPlistContainerEndContainer_cold_2(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  unsigned int v10 = *(_DWORD **)(a1 + 144);
  if (*v10 || v10[1] != 1) {
    _MDPlistContainerEndContainer_cold_1(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = MDPlistBufferConsume(a1, a1 + 32, *(void *)(a1 + 96));
  if (v12)
  {
    memcpy(v12, *(const void **)(a1 + 112), *(void *)(a1 + 96));
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 32);
    if (*(void *)(a1 + 96)) {
      int v15 = v11;
    }
    else {
      int v15 = 0;
    }
    uint64_t v16 = *(int **)(a1 + 80);
    int v17 = *v16;
    char v19 = *((unsigned char *)v16 + 4);
    *(_WORD *)uint64_t v13 = -17698;
    *(_DWORD *)(v13 + 2) = 256;
    *(_DWORD *)(v13 + 6) = v14;
    *(_DWORD *)(v13 + 10) = v15;
    *(_DWORD *)(v13 + 14) = v17;
    *(unsigned char *)(v13 + 18) = v19;
    *(_DWORD *)(v13 + 19) = v11;
    *(_WORD *)(v13 + 23) = 0;
    *(_DWORD *)(v13 + 25) = v11;
  }
  MDPlistBufferDispose(a1 + 64, 0);
  MDPlistBufferDispose(a1 + 96, 0);
  free(*(void **)(a1 + 144));
  *(void *)(a1 + 144) = 0;
  size_t v18 = *(const void **)(a1 + 128);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 128) = 0;
  }
}

void _MDPlistContainerDestroy(uint64_t a1)
{
  MDPlistBufferDispose(a1 + 32, *(void *)(a1 + 24));
  MDPlistBufferDispose(a1 + 64, 0);
  MDPlistBufferDispose(a1 + 96, 0);
  _Block_release(*(const void **)(a1 + 24));
  free(*(void **)(a1 + 144));
  uint64_t v2 = *(const void **)(a1 + 128);
  if (v2)
  {
    CFRelease(v2);
  }
}

void MDPlistBufferDispose(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void (**)(uint64_t))(a2 + 16);
    v2(a2);
  }
  else if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 16) && !*(unsigned char *)(a1 + 24))
  {
    if (*(unsigned char *)(a1 + 26)) {
      free(*(void **)(a1 + 16));
    }
    else {
      MEMORY[0x1A6247730](*MEMORY[0x1E4F14960]);
    }
    *(void *)(a1 + 16) = 0;
  }
}

void icu_search_context_destroy(int *a1)
{
  if (a1)
  {
    int v2 = *a1;
    if (v2 != 268435458) {
      icu_search_context_destroy_cold_1(v2);
    }
    *a1 = 0;
    if (a1[2] >= 1)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = *((void *)a1 + 3);
        int v6 = *(_DWORD *)(v5 + v3);
        if (v6 == 16)
        {
          free(*(void **)(v5 + v3 + 16));
          term_expansions_release(*(void *)(*((void *)a1 + 3) + v3 + 8));
        }
        else if (v6 == 8)
        {
          free(*(void **)(v5 + v3 + 16));
        }
        ++v4;
        v3 += 32;
      }
      while (v4 < a1[2]);
    }
    free(*((void **)a1 + 3));
    icu_ctx_release(*((void *)a1 + 4));
    free(*((void **)a1 + 2));
    if (*((unsigned char *)a1 + 69)) {
      free(*((void **)a1 + 10));
    }
    free(a1);
  }
}

void icu_ctx_release(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(_DWORD *)a1;
    if ((v2 - 268435462) <= 0xFFFFFFFA) {
      icu_ctx_release_cold_1(v2);
    }
    if (atomic_fetch_add((atomic_uint *volatile)(a1 + 4), 0xFFFFFFFF) == 1)
    {
      switch(*(_DWORD *)a1)
      {
        case 0x10000001:
          *(_DWORD *)a1 = 0;
          if (atomic_load((unint64_t *)(a1 + 16)))
          {
            atomic_load((unint64_t *)(a1 + 16));
            ucol_close();
          }
          if (atomic_load((unint64_t *)(a1 + 24)))
          {
            atomic_load((unint64_t *)(a1 + 24));
            ucol_close();
          }
          if (atomic_load((unint64_t *)(a1 + 32)))
          {
            atomic_load((unint64_t *)(a1 + 32));
            ucol_close();
          }
          if (atomic_load((unint64_t *)(a1 + 40)))
          {
            atomic_load((unint64_t *)(a1 + 40));
            ucol_close();
          }
          icu_rules_free(*(char **)(a1 + 48));
          icu_rules_free(*(char **)(a1 + 56));
          icu_rules_free(*(char **)(a1 + 64));
          icu_rules_free(*(char **)(a1 + 72));
          free(*(void **)(a1 + 8));
          goto LABEL_25;
        case 0x10000002:
          icu_search_context_destroy((int *)a1);
          return;
        case 0x10000003:
          *(_DWORD *)a1 = 0;
          uregex_close(*(URegularExpression **)(a1 + 8));
          goto LABEL_25;
        case 0x10000004:
          icu_range_search_destroy((void *)a1);
          return;
        case 0x10000005:
          if (*(void *)(a1 + 8))
          {
            unint64_t v7 = 0;
            do
              icu_ctx_release(*(void *)(a1 + 32 + 8 * v7++));
            while (v7 < *(void *)(a1 + 8));
          }
LABEL_25:
          free((void *)a1);
          break;
        default:
          icu_ctx_release_cold_2(*(_DWORD *)a1);
      }
    }
  }
}

void term_expansions_release(uint64_t a1)
{
  if (a1)
  {
    unsigned int v2 = atomic_load((unsigned int *)a1);
    if (v2 != -1 && atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
    {
      if (*(_DWORD *)(a1 + 4))
      {
        unint64_t v3 = 0;
        do
          free(*(void **)(*(void *)(a1 + 16) + 8 * v3++));
        while (v3 < *(unsigned int *)(a1 + 4));
      }
      free(*(void **)(a1 + 16));
      free((void *)a1);
    }
  }
}

uint64_t _MDPlistContainerGetLength(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16)) {
      return 0;
    }
    else {
      return *(void *)(result + 32);
    }
  }
  return result;
}

uint64_t _MDPlistContainerGetBytes(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16)) {
      return 0;
    }
    else {
      return *(void *)(result + 48);
    }
  }
  return result;
}

uint64_t icu_search_context_item_get_item_count(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

uint64_t _MDPlistBytesAddRawInternedCStringKey(uint64_t a1, int a2)
{
  unint64_t v3 = (const void *)((2 * a2) | 1u);
  do
  {
    if (*(_WORD *)(a1 + 32) || (*(unsigned char *)(a1 + 34) & 1) == 0) {
      return 0;
    }
    if (*(int *)(a1 + 88) <= 0)
    {
      *(_WORD *)(a1 + 32) = 2603;
      uint64_t v11 = _MDLogForCategoryDefault();
      uint64_t result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _MDPlistBytesAddRawInternedCStringKey_cold_1();
      return 0;
    }
    uint64_t result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 104), v3);
    if (!result) {
      return result;
    }
    uint64_t v5 = result;
    uint64_t v6 = 8 * *(int *)(*(void *)(a1 + 96) + 4 * *(int *)(a1 + 88) - 4);
    *(void *)(*(void *)(a1 + 56) + v6) += 0x100000000;
    unint64_t v7 = *(uint64_t **)(a1 + 112);
    if ((unint64_t)(v7 + 1) < *(void *)(a1 + 120)) {
      goto LABEL_9;
    }
  }
  while (!_MDPlistBytesGrowCapacityVM(a1, 8u, 0));
  unint64_t v7 = *(uint64_t **)(a1 + 112);
LABEL_9:
  uint64_t v8 = *MEMORY[0x1E4F14B00];
  uint64_t v9 = -*MEMORY[0x1E4F14B00];
  if ((((unint64_t)(v7 + 1) ^ (unint64_t)v7) & v9) != 0
    && (((unint64_t)(v7 + 1) >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
  {
    size_t v10 = 16 << *MEMORY[0x1E4F14AF8];
    if (v10 >= 4 * v8)
    {
      madvise((void *)(((unint64_t)v7 + v8 - 1) & v9), v10, 3);
      unint64_t v7 = *(uint64_t **)(a1 + 112);
    }
  }
  *unint64_t v7 = (v5 << 32) | 0x2000001;
  *(void *)(a1 + 112) = v7 + 1;
  return 1;
}

uint64_t _MDPlistContainerCreateMutable(uint64_t a1, uint64_t a2)
{
  return _MDPlistContainerCreateCommon(a1, 0, 0, 1, 0, 1, a2, 0);
}

BOOL _MDPlistBytesEndContainer(uint64_t a1)
{
  if (*(_WORD *)(a1 + 32) || (*(unsigned char *)(a1 + 34) & 1) == 0) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 80) == -1)
  {
    *(_WORD *)(a1 + 32) = 2413;
    unint64_t v3 = _MDLogForCategoryDefault();
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_9:
      _MDPlistBytesEndContainer_cold_1();
      return 0;
    }
  }
  else
  {
    int v2 = *(_DWORD *)(a1 + 88);
    if (v2)
    {
      *(_DWORD *)(a1 + 88) = v2 - 1;
      return 1;
    }
    *(_WORD *)(a1 + 32) = 2415;
    uint64_t v4 = _MDLogForCategoryDefault();
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (result) {
      goto LABEL_9;
    }
  }
  return result;
}

unint64_t si_tracing_calc_next_spanid()
{
  return atomic_fetch_add_explicit(&next_spanid, 1uLL, memory_order_relaxed) + 1;
}

void *_MDPlistContainerEndArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 136);
  unsigned int v9 = v8 - 1;
  if (v8 <= 1) {
    _MDPlistContainerEndArray_cold_1(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_DWORD *)(a1 + 136) = v9;
  uint64_t v11 = *(void *)(a1 + 144);
  if (*(_DWORD *)(v11 + 24 * v9) != 240) {
    _MDPlistContainerEndArray_cold_2(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = v11 + 24 * v9;
  uint64_t v16 = *(int *)(v14 + 4);
  int v15 = (int *)(v14 + 4);
  size_t v17 = 5 * v16;
  BOOL result = MDPlistBufferConsume(a1, a1 + 32, 5 * v16);
  if (result)
  {
    uint64_t v19 = v11 + 24 * v9;
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t v20 = v19 + 8;
    BOOL result = memcpy(result, (const void *)(*(void *)(a1 + 80) + v21), v17);
    uint64_t v22 = *(unsigned int *)(v20 + 8);
    uint64_t v23 = *(void *)(a1 + 48) + v22;
    int v24 = *v15;
    *(_DWORD *)uint64_t v23 = *(_DWORD *)(a1 + 32) - v22 - 4;
    *(_WORD *)(v23 + 4) = v24;
    *(_DWORD *)(v23 + 6) = v13 - v22;
    unsigned int v25 = (int *)(*(void *)(a1 + 80) + *(unsigned int *)(v20 + 12));
    if (!*(unsigned char *)(a1 + 16))
    {
      uint64_t v26 = *(void *)(a1 + 72) - *(void *)v20 + *(void *)(a1 + 64);
      *(void *)(a1 + 64) = *(void *)v20;
      *(void *)(a1 + 72) = v26;
    }
  }
  else
  {
    unsigned int v25 = &gNullObjectReference;
  }
  if (a2)
  {
    int v27 = *v25;
    *(unsigned char *)(a2 + 4) = *((unsigned char *)v25 + 4);
    *(_DWORD *)a2 = v27;
  }
  return result;
}

uint64_t _MDPlistStringGetValue(uint64_t a1, void *a2, int *a3)
{
  if (a2) {
    *a2 = *(_DWORD *)(*(void *)a1 + *(unsigned int *)(a1 + 16)) - (*(unsigned __int8 *)(a1 + 20) == 244);
  }
  if (a3)
  {
    if (*(unsigned __int8 *)(a1 + 20) == 245) {
      int v3 = 256;
    }
    else {
      int v3 = 134217984;
    }
    *a3 = v3;
  }
  return *(void *)a1 + *(unsigned int *)(a1 + 16) + 4;
}

BOOL _MDPlistBytesBeginContainer(uint64_t a1, int a2)
{
  while (!*(_WORD *)(a1 + 32))
  {
    if ((*(unsigned char *)(a1 + 34) & 1) == 0) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 80) == -1)
    {
      *(_WORD *)(a1 + 32) = 2399;
      int v8 = _MDLogForCategoryDefault();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _MDPlistBytesBeginContainer_cold_1();
      return 0;
    }
    uint64_t v6 = *(unsigned int *)(a1 + 64);
    int v5 = *(_DWORD *)(a1 + 68);
    if (v5 == v6)
    {
      if (!_MDPlistBytesGrowUIDTable(a1, v5)) {
        continue;
      }
      uint64_t v6 = *(unsigned int *)(a1 + 64);
    }
    *(_DWORD *)(a1 + 64) = v6 + 1;
    if (v6 == -1) {
      _MDPlistBytesBeginContainer_cold_2();
    }
    unint64_t v7 = *(uint64_t **)(a1 + 112);
    if ((unint64_t)(v7 + 1) < *(void *)(a1 + 120)) {
      goto LABEL_17;
    }
    if (_MDPlistBytesGrowCapacityVM(a1, 8u, 0))
    {
      unint64_t v7 = *(uint64_t **)(a1 + 112);
LABEL_17:
      uint64_t v9 = *MEMORY[0x1E4F14B00];
      uint64_t v10 = -*MEMORY[0x1E4F14B00];
      if ((((unint64_t)(v7 + 1) ^ (unint64_t)v7) & v10) != 0
        && (((unint64_t)(v7 + 1) >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
      {
        size_t v11 = 16 << *MEMORY[0x1E4F14AF8];
        if (v11 >= 4 * v9)
        {
          madvise((void *)(((unint64_t)v7 + v9 - 1) & v10), v11, 3);
          unint64_t v7 = *(uint64_t **)(a1 + 112);
        }
      }
      *unint64_t v7 = (v6 << 32) | 0x2000001;
      unint64_t v12 = v7 + 1;
      *(void *)(a1 + 112) = v12;
      uint64_t v13 = *(void **)(a1 + 56);
      v13[(int)v6] = (a2 << 24) | ((unint64_t)(v12 - *(_DWORD *)(a1 + 48)) >> 3) & 0xFFFFFF;
      ++*v13;
      *(_DWORD *)(a1 + 80) = v6;
      int v14 = *(_DWORD *)(a1 + 88);
      if (v14 >= 1)
      {
        uint64_t v15 = *(int *)(*(void *)(a1 + 96) + 4 * (v14 - 1));
        v13[v15] += 0x100000000;
      }
      int v16 = *(_DWORD *)(a1 + 80);
      int v17 = *(_DWORD *)(a1 + 84);
      if (v14 >= v17)
      {
        int v19 = 2 * v17;
        if (!v17) {
          int v19 = 8;
        }
        *(_DWORD *)(a1 + 84) = v19;
        size_t v18 = malloc_type_realloc(*(void **)(a1 + 96), 4 * *(int *)(a1 + 84), 0x100004052888210uLL);
        *(void *)(a1 + 96) = v18;
        int v14 = *(_DWORD *)(a1 + 88);
      }
      else
      {
        size_t v18 = *(_DWORD **)(a1 + 96);
      }
      *(_DWORD *)(a1 + 88) = v14 + 1;
      v18[v14] = v16;
      return 1;
    }
  }
  return 0;
}

uint64_t _MDPlistBytesAddRawInternedCStringKeyWithString(uint64_t a1, int a2, char *__s, int a4)
{
  v11[1] = *(const void **)MEMORY[0x1E4F143B8];
  v11[0] = __s;
  if (*(_WORD *)(a1 + 32) || (*(unsigned char *)(a1 + 34) & 1) == 0) {
    return 0;
  }
  if (*(int *)(a1 + 88) <= 0)
  {
    *(_WORD *)(a1 + 32) = 2622;
    int v8 = _MDLogForCategoryDefault();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      _MDPlistBytesAddRawInternedCStringKeyWithString_cold_1();
    }
    return 0;
  }
  if (a4 == -1) {
    a4 = strlen(__s);
  }
  int v6 = addStringBytes(a1, 12, v11, a4);
  if (!v6)
  {
    if (!*(_WORD *)(a1 + 32))
    {
      *(_WORD *)(a1 + 32) = 2627;
      uint64_t v9 = _MDLogForCategoryDefault();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        _MDPlistBytesAddRawInternedCStringKeyWithString_cold_2();
      }
    }
    return 0;
  }
  uint64_t v7 = 1;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 104), (const void *)((2 * a2) | 1u), (const void *)v6);
  return v7;
}

BOOL _MDPlistBytesAddCString(uint64_t a1, char *__s, int a3)
{
  v7[1] = *(const void **)MEMORY[0x1E4F143B8];
  v7[0] = __s;
  if (*(_WORD *)(a1 + 32) || (*(unsigned char *)(a1 + 34) & 1) == 0) {
    return 0;
  }
  if (*(int *)(a1 + 88) <= 0)
  {
    *(_WORD *)(a1 + 32) = 2563;
    int v5 = _MDLogForCategoryDefault();
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      _MDPlistBytesAddCString_cold_1();
      return 0;
    }
  }
  else
  {
    if (a3 == -1) {
      a3 = strlen(__s);
    }
    if (addStringBytes(a1, 12, v7, a3)) {
      return 1;
    }
    if (*(_WORD *)(a1 + 32)) {
      return 0;
    }
    *(_WORD *)(a1 + 32) = 2567;
    int v6 = _MDLogForCategoryDefault();
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      _MDPlistBytesAddCString_cold_2();
      return 0;
    }
  }
  return result;
}

uint64_t addStringBytes(uint64_t a1, int a2, const void **a3, size_t __n)
{
  if ((__n & 7) != 0) {
    size_t v8 = __n & 7;
  }
  else {
    size_t v8 = 8 * (__n != 0);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 64);
  int v9 = *(_DWORD *)(a1 + 68);
  if (v9 == v10)
  {
    uint64_t result = _MDPlistBytesGrowUIDTable(a1, v9);
    if (!result) {
      return result;
    }
    uint64_t v10 = *(unsigned int *)(a1 + 64);
  }
  *(_DWORD *)(a1 + 64) = v10 + 1;
  if (v10 == -1) {
    addStringBytes_cold_1();
  }
  unint64_t v12 = *(uint64_t **)(a1 + 112);
  if ((unint64_t)(v12 + 1) >= *(void *)(a1 + 120))
  {
    uint64_t result = _MDPlistBytesGrowCapacityVM(a1, 8u, 0);
    if (!result) {
      return result;
    }
    unint64_t v12 = *(uint64_t **)(a1 + 112);
  }
  uint64_t v13 = (void *)MEMORY[0x1E4F14B00];
  uint64_t v14 = *MEMORY[0x1E4F14B00];
  uint64_t v15 = -*MEMORY[0x1E4F14B00];
  int v16 = (_DWORD *)MEMORY[0x1E4F14AF8];
  if ((((unint64_t)(v12 + 1) ^ (unint64_t)v12) & v15) != 0
    && (((unint64_t)(v12 + 1) >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
  {
    size_t v17 = 16 << *MEMORY[0x1E4F14AF8];
    if (v17 >= 4 * v14)
    {
      size_t v18 = (_DWORD *)MEMORY[0x1E4F14AF8];
      int v19 = (void *)MEMORY[0x1E4F14B00];
      madvise((void *)(((unint64_t)v12 + v14 - 1) & v15), v17, 3);
      uint64_t v13 = v19;
      int v16 = v18;
      unint64_t v12 = *(uint64_t **)(a1 + 112);
    }
  }
  *unint64_t v12 = (v10 << 32) | 0x2000001;
  uint64_t v20 = v12 + 1;
  *(void *)(a1 + 112) = v20;
  unint64_t v21 = (a2 << 24) | ((v20 - *(_DWORD *)(a1 + 48)) >> 3) & 0xFFFFFF | ((unint64_t)v8 << 32);
  uint64_t v22 = *(uint64_t **)(a1 + 56);
  v22[(int)v10] = v21;
  uint64_t v23 = *v22 + 1;
  *(_DWORD *)(a1 + 80) = v10;
  uint64_t v24 = *(void *)(a1 + 96);
  uint64_t v25 = *(int *)(a1 + 88);
  *uint64_t v22 = v23;
  uint64_t v26 = *(int *)(v24 + 4 * v25 - 4);
  v22[v26] += 0x100000000;
  int v27 = __n + 7;
  int v28 = (((int)__n + 7) >> 3) + 1;
  int v29 = *(size_t **)(a1 + 112);
  uint64_t v30 = ((int)__n + 7) >> 3;
  if ((unint64_t)&v29[v30 + 1] >= *(void *)(a1 + 120))
  {
    unsigned int v31 = v13;
    unsigned __int16 v32 = v16;
    uint64_t result = _MDPlistBytesGrowCapacityVM(a1, 8 * v28, 0);
    if (!result) {
      return result;
    }
    int v29 = *(size_t **)(a1 + 112);
    int v16 = v32;
    uint64_t v13 = v31;
  }
  size_t v33 = v8 << 32;
  unint64_t v34 = (unint64_t)&v29[v30 + 1];
  uint64_t v35 = *v13;
  uint64_t v36 = -*v13;
  if (((v34 ^ (unint64_t)v29) & v36) != 0 && ((v34 >> *v16) & 0xF) == 0)
  {
    size_t v37 = 16 << *v16;
    if (v37 >= 4 * v35)
    {
      madvise((void *)(((unint64_t)v29 + v35 - 1) & v36), v37, 3);
      int v29 = *(size_t **)(a1 + 112);
    }
  }
  uint64_t v38 = (uint64_t)v27 >> 3;
  *int v29 = v33 | v28 & 0xFFFFFF | 0x7000000;
  uint64_t v39 = v29 + 1;
  *(void *)(a1 + 112) = v39;
  if (v27 >= 8) {
    v39[(v38 - 1)] = 0;
  }
  if (*a3) {
    memcpy(v39, *a3, __n);
  }
  else {
    *a3 = v39;
  }
  *(void *)(a1 + 112) += 8 * v38;
  return *(unsigned int *)(a1 + 80);
}

BOOL _MDPlistBytesGrowUIDTable(uint64_t a1, int a2)
{
  if (*(_WORD *)(a1 + 32) || (*(unsigned char *)(a1 + 34) & 1) == 0) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 68);
  if (v4 <= a2) {
    int v5 = a2;
  }
  else {
    int v5 = *(_DWORD *)(a1 + 68);
  }
  int v6 = v5 + v4;
  *(_DWORD *)(a1 + 68) = v6;
  uint64_t v7 = malloc_type_realloc(*(void **)(a1 + 56), 8 * v6, 0x100004000313F17uLL);
  *(void *)(a1 + 56) = v7;
  if (v7) {
    return 1;
  }
  if (*(_WORD *)(a1 + 32)) {
    return 0;
  }
  *(_WORD *)(a1 + 32) = 2158;
  size_t v8 = _MDLogForCategoryDefault();
  BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _MDPlistBytesGrowUIDTable_cold_1();
    return 0;
  }
  return result;
}

uint64_t _MDStoreOIDArrayGetVectorCount(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  else {
    return *(unsigned int *)(a1 + 32);
  }
}

void si_tracing_log_span_begin()
{
  if (init_once != -1)
  {
    dispatch_once(&init_once, &__block_literal_global_1);
  }
}

void si_tracing_log_span_end(uint64_t a1)
{
  if (a1 && init_once != -1)
  {
    dispatch_once(&init_once, &__block_literal_global_1);
  }
}

char *_MDPlistContainerBeginContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 17)) {
    _MDPlistContainerBeginContainer_cold_1(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*(_DWORD *)(a1 + 136)) {
    _MDPlistContainerBeginContainer_cold_3(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*(void *)(a1 + 32)) {
    _MDPlistContainerBeginContainer_cold_2(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  *(void *)(a1 + 128) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kCStringDictionaryKeyCallBacksLocal, MEMORY[0x1E4F1D540]);
  MDPlistBufferConsume(a1, a1 + 32, a2 + 29);
  BOOL result = (char *)malloc_type_malloc(0x6000uLL, 0x1000040504FFAC1uLL);
  *(void *)(a1 + 144) = result;
  size_t v11 = &result[24 * *(int *)(a1 + 136)];
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)size_t v11 = 0;
  ++*(_DWORD *)(a1 + 136);
  return result;
}

void icu_locale_release(uint64_t a1)
{
  icu_ctx_release(a1);
}

uint64_t icu_local_id(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t _MDPlistContainerCreateCommon(uint64_t a1, size_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8)
{
  char v9 = a7;
  char v10 = a6;
  int v11 = a5;
  int v12 = a4;
  if (_MDPlistContainerCreateCommon_once != -1) {
    dispatch_once(&_MDPlistContainerCreateCommon_once, &__block_literal_global_69);
  }
  if (v11 | v12 && (v12 != 0) != (v11 == 0)) {
    _MDPlistContainerCreateCommon_cold_1(a1, a2, (uint64_t)a3, a4, a5, a6, a7, (uint64_t)a8);
  }
  if (a3 && *a3 != 47838) {
    _MDPlistContainerCreateCommon_cold_2(a1, a2, (uint64_t)a3, a4, a5, a6, a7, (uint64_t)a8);
  }
  if (_MDPlistContainerGetTypeID_once != -1) {
    dispatch_once(&_MDPlistContainerGetTypeID_once, &__block_literal_global_8);
  }
  BOOL v15 = a3 != 0;
  BOOL v16 = v12 != 0;
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(unsigned char *)(Instance + 17) = v12;
  *(void *)(Instance + 24) = _Block_copy(a8);
  if (v15 && v16) {
    size_t v18 = a2;
  }
  else {
    size_t v18 = 0;
  }
  if (v11) {
    size_t v19 = 0;
  }
  else {
    size_t v19 = a2;
  }
  *(void *)(Instance + 32) = v19;
  if (v11) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = a3;
  }
  *(void *)(Instance + 40) = v18;
  *(void *)(Instance + 48) = v20;
  *(unsigned char *)(Instance + 56) = v15 && v16;
  *(unsigned char *)(Instance + 57) = v10;
  *(unsigned char *)(Instance + 58) = v9;
  if (v11)
  {
    unint64_t v21 = MDPlistBufferConsume(Instance, Instance + 32, a2);
    if (v21) {
      memcpy(v21, a3, a2);
    }
  }
  *(void *)(Instance + 64) = 0;
  *(void *)(Instance + 72) = 0;
  *(void *)(Instance + 80) = 0;
  *(_WORD *)(Instance + 88) = 256;
  *(unsigned char *)(Instance + 90) = 1;
  *(_DWORD *)(Instance + 91) = 0;
  *(unsigned char *)(Instance + 95) = 0;
  *(void *)(Instance + 104) = 0;
  *(void *)(Instance + 112) = 0;
  *(void *)(Instance + 96) = 0;
  *(unsigned char *)(Instance + 120) = 0;
  *(_WORD *)(Instance + 121) = 257;
  *(_DWORD *)(Instance + 123) = 0;
  *(unsigned char *)(Instance + 127) = 0;
  return Instance;
}

void md_deadline_once_cancel(os_unfair_lock_s *a1)
{
  int v2 = a1 + 6;
  os_unfair_lock_lock(a1 + 6);
  atomic_store(1u, &a1[5]._os_unfair_lock_opaque);

  os_unfair_lock_unlock(v2);
}

unint64_t si_tracing_calc_traceid()
{
  return atomic_fetch_add_explicit(&next_traceid, 1uLL, memory_order_relaxed) + 1;
}

void *md_deadline_once_create(const void *a1)
{
  int v2 = malloc_type_malloc(0x28uLL, 0x10A00400333C0D5uLL);
  *(_DWORD *)int v2 = 1;
  v2[1] = dispatch_semaphore_create(0);
  v2[2] = 0;
  *((_DWORD *)v2 + 6) = 0;
  v2[4] = _Block_copy(a1);
  return v2;
}

unint64_t _MDPlistDictionaryIterate(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v9 = *a1;
  uint64_t v10 = *((void *)a1 + 2);
  return _MDPlistDictionaryIterateWithError((unint64_t)&v9, 0, a2, a4, a5, a6, a7, a8);
}

void md_deadline_once_release(uint64_t a1)
{
  if (atomic_fetch_add_explicit((atomic_uint *volatile)a1, 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    dispatch_release(*(dispatch_object_t *)(a1 + 8));
    _Block_release(*(const void **)(a1 + 32));
    free((void *)a1);
  }
}

uint64_t _MDPlistBytesGetByteVectorCount(uint64_t result)
{
  if (result)
  {
    if (*(_WORD *)(result + 32)) {
      return 0;
    }
    else {
      return *(unsigned int *)(result + 16);
    }
  }
  return result;
}

double __MDStoreOIDArrayInit(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

CFStringRef MDPropertyCopyUserTagName(CFStringRef theString, unsigned char *a2)
{
  if (a2) {
    *a2 = 0;
  }
  if (!theString) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(theString);
  if (!Length) {
    return 0;
  }
  CFIndex v5 = Length;
  CFIndex location = CFStringFind(theString, @"\n", 0).location;
  if (location != -1)
  {
    CFIndex v7 = location;
    CFStringRef v8 = 0;
    if (location)
    {
      v12.CFIndex location = 0;
      v12.length = location;
      CFStringRef v8 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, v12);
      if (a2)
      {
        if (v7 + 2 == v5)
        {
          int CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v5 - 1);
          if ((CharacterAtIndex - 49) <= 6) {
            *a2 = CharacterAtIndex - 48;
          }
        }
      }
    }
    return v8;
  }

  return (CFStringRef)CFRetain(theString);
}

uint64_t _locale_str_hash(const char *a1)
{
  int v2 = -1759636613;
  int v3 = strlen(a1);
  if (v3 >= 0) {
    int v4 = v3;
  }
  else {
    int v4 = v3 + 3;
  }
  CFIndex v5 = &a1[v4 & 0xFFFFFFFC];
  if ((v3 + 3) >= 7)
  {
    uint64_t v8 = -(v4 >> 2);
    int v9 = -1789642873;
    int v10 = 718793509;
    do
    {
      int v9 = 5 * v9 + 2071795100;
      int v10 = 5 * v10 + 1808688022;
      HIDWORD(v11) = v9 * *(_DWORD *)&v5[4 * v8];
      LODWORD(v11) = HIDWORD(v11);
      int v12 = (v11 >> 21) * v10;
      HIDWORD(v11) = v2;
      LODWORD(v11) = v2;
      int v2 = v12 ^ (5 * (v11 >> 19) + 1390208809);
    }
    while (!__CFADD__(v8++, 1));
    int v7 = 5 * v9 + 2071795100;
    int v6 = 5 * v10 + 1808688022;
  }
  else
  {
    int v6 = 1107688271;
    int v7 = 1713515327;
  }
  int v14 = 0;
  int v15 = v3 & 3;
  switch(v15)
  {
    case 1:
      goto LABEL_15;
    case 2:
LABEL_14:
      v14 |= *((unsigned __int8 *)v5 + 1) << 8;
LABEL_15:
      HIDWORD(v16) = (v14 ^ *(unsigned __int8 *)v5) * v7;
      LODWORD(v16) = HIDWORD(v16);
      int v17 = (v16 >> 21) * v6;
      HIDWORD(v16) = v2;
      LODWORD(v16) = v2;
      int v2 = v17 ^ (5 * (v16 >> 19) + 1390208809);
      break;
    case 3:
      int v14 = *((unsigned __int8 *)v5 + 2) << 16;
      goto LABEL_14;
  }
  unsigned int v18 = -1028477387 * ((-2048144789 * (v2 ^ v3)) ^ ((-2048144789 * (v2 ^ v3)) >> 13));
  return v18 ^ HIWORD(v18);
}

uint64_t __tracing_dispatch_async_block_invoke()
{
  uint64_t v0 = si_tracing_current_span();
  long long v2 = *(_OWORD *)(v1 + 40);
  long long v3 = *(_OWORD *)(v1 + 56);
  *(void *)(v0 + 32) = *(void *)(v1 + 72);
  *(_OWORD *)uint64_t v0 = v2;
  *(_OWORD *)(v0 + 16) = v3;
  int v4 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);

  return v4();
}

CFDataRef _MDPlistContainerCopyRootObject(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  MDPlistGetRootPlistObjectFromBuffer(a2 + 32, 0, a3, a5, a6, a7, a8, (uint64_t)&v16);
  long long v14 = v16;
  uint64_t v15 = v17;
  return __MDPlistContainerCopyObjectErrorCode(a1, (uint64_t)&v14, 0, 0, v9, v10, v11, v12);
}

BOOL _MDPlistContainerValidateRootObjectFromBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  v18[0] = a2;
  v18[1] = 0;
  v18[2] = a1;
  v18[3] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  long long v15 = 0uLL;
  MDPlistGetRootPlistObjectFromBuffer((unint64_t)v18, &v17, a3, a5, a6, a7, a8, (uint64_t)&v15);
  BOOL result = 0;
  if (!v17)
  {
    long long v13 = v15;
    uint64_t v14 = v16;
    __MDPlistContainerCopyObjectErrorCode(0, (uint64_t)&v13, 0, &v17, v8, v9, v10, v11);
    return v17 == 0;
  }
  return result;
}

uint64_t _MDPlistContainerGetPlistObjectAtKeyArray(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  MDPlistGetRootPlistObjectFromBuffer(a1 + 32, 0, a3, a5, a6, a7, a8, (uint64_t)&v18);
  while (BYTE4(v19) == 241)
  {
    uint64_t v14 = *a2;
    if (!*a2) {
      goto LABEL_8;
    }
    long long v16 = v18;
    uint64_t v17 = v19;
    if (!_MDPlistDictionaryGetPlistObjectForKey((uint64_t)&v16, v14, -1, (uint64_t)&v18, v10, v11, v12, v13))break; {
    ++a2;
    }
  }
  if (*a2) {
    return 0;
  }
LABEL_8:
  if (a3)
  {
    *(_OWORD *)a3 = v18;
    *(void *)(a3 + 16) = v19;
  }
  return 1;
}

unint64_t _MDPlistGetRootPlistObjectFromBytes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  v9[0] = a2;
  v9[1] = 0;
  v9[2] = a1;
  v9[3] = 0;
  return MDPlistGetRootPlistObjectFromBuffer((unint64_t)v9, 0, a3, a4, a5, a6, a7, a8);
}

unint64_t MDPlistGetRootPlistObjectFromBuffer@<X0>(unint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = *(void *)result;
  if (a2)
  {
    uint64_t v10 = *a2;
    if (v9 <= 0x1C && v10 == 0)
    {
      uint64_t v18 = 822;
LABEL_30:
      *a2 = v18;
      goto LABEL_31;
    }
    if (v10) {
      goto LABEL_31;
    }
  }
  else if (v9 <= 0x1C)
  {
    MDPlistGetRootPlistObjectFromBuffer_cold_1(result, 0, a3, 0, a4, a5, a6, a7);
  }
  uint64_t v12 = *(void *)(result + 16);
  int v24 = *(_DWORD *)(v12 + 14);
  char v25 = *(unsigned char *)(v12 + 18);
  BOOL result = v12 + 19;
  unsigned int v13 = *(_DWORD *)(v12 + 19);
  unsigned int v14 = *(_DWORD *)(v12 + 25);
  if (!a2)
  {
    if (v13 != v14) {
      MDPlistGetRootPlistObjectFromBuffer_cold_4(result, 0, a3, 0, a4, a5, a6, a7);
    }
    if (v13 > v9) {
      MDPlistGetRootPlistObjectFromBuffer_cold_2(result, 0, a3, 0, a4, a5, a6, a7);
    }
    if (*(_DWORD *)(v12 + 10) && *(unsigned char *)(v12 + (*(_DWORD *)(v12 + 6) - 1))) {
      MDPlistGetRootPlistObjectFromBuffer_cold_3(result, 0, a3, 0, a4, a5, a6, a7);
    }
LABEL_27:
    v19[0] = v12;
    v19[1] = v9;
    int v20 = *(_DWORD *)(v12 + 14);
    char v21 = *(unsigned char *)(v12 + 18);
    __int16 v22 = 0;
    char v23 = 0;
    BOOL result = validatePlistObject((unsigned int *)result, (uint64_t)v19, v9, a2, a4, a5, a6, a7);
    *(void *)a8 = v12;
    *(void *)(a8 + 8) = v9;
    *(_DWORD *)(a8 + 16) = v24;
    *(unsigned char *)(a8 + 20) = v25;
    *(_WORD *)(a8 + 21) = 0;
    *(unsigned char *)(a8 + 23) = 0;
    return result;
  }
  uint64_t v15 = *a2;
  if (v13 != v14 && v15 == 0)
  {
    uint64_t v18 = 836;
    goto LABEL_30;
  }
  if (v14 > v9 && v15 == 0)
  {
    uint64_t v18 = 837;
    goto LABEL_30;
  }
  if (!v15)
  {
    if (*(_DWORD *)(v12 + 10) && *(unsigned char *)(v12 + (*(_DWORD *)(v12 + 6) - 1)))
    {
      *a2 = 842;
      *(void *)(a8 + 8) = 0;
      *(void *)(a8 + 16) = 0;
      *(void *)a8 = 0;
      return result;
    }
    goto LABEL_27;
  }
LABEL_31:
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(void *)(a8 + 16) = 0;
  return result;
}

uint64_t _MDStoreOIDArrayEndBulkAdd(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (!*(void *)(a1 + 48))
  {
    long long v2 = "Sequencing";
    goto LABEL_6;
  }
  if (*(void *)(a1 + 64) < a2)
  {
    long long v2 = "Overflow";
LABEL_6:
    __MDStoreOIDArrayError(a1, (uint64_t)"_MDStoreOIDArrayEndBulkAdd", (uint64_t)v2);
    return 0;
  }
  *(void *)(a1 + 56) = a2;
  return 1;
}

int *_MDPlistContainerAddCString(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 136);
  BOOL v9 = __OFSUB__(v8, 1);
  int v10 = v8 - 1;
  if ((v10 < 0) ^ v9 | (v10 == 0)) {
    _MDPlistContainerAddCString_cold_1(a1, (uint64_t)__s, a3, a4, a5, a6, a7, a8);
  }
  size_t v12 = a3;
  uint64_t v15 = (_DWORD *)(*(void *)(a1 + 144) + 24 * v10);
  int v16 = v15[1] + 1;
  v15[1] = v16;
  if (a3 == -1) {
    size_t v12 = strlen(__s);
  }
  if (*v15 != 241 || (v16 & 1) == 0)
  {
    BOOL result = (int *)MDPlistBufferConsume(a1, a1 + 64, 5uLL);
    if (result)
    {
      uint64_t v18 = result;
      uint64_t v19 = *(void *)(a1 + 32);
      int v20 = MDPlistBufferConsume(a1, a1 + 32, v12 + 5);
      _DWORD *v20 = v12 + 1;
      char v21 = v20 + 1;
      BOOL result = (int *)memcpy(v20 + 1, __s, v12);
      *((unsigned char *)v21 + v12) = 0;
      *uint64_t v18 = v19;
      *((unsigned char *)v18 + 4) = -12;
      if (!a4) {
        return result;
      }
    }
    else
    {
      uint64_t v18 = &gNullObjectReference;
      if (!a4) {
        return result;
      }
    }
    int v31 = *v18;
    *(unsigned char *)(a4 + 4) = *((unsigned char *)v18 + 4);
    *(_DWORD *)a4 = v31;
  }
  else
  {
    int v22 = addStringKey(a1, __s, v12);
    BOOL result = (int *)MDPlistBufferConsume(a1, a1 + 64, 4uLL);
    if (result) {
      *BOOL result = v22;
    }
    if (a4) {
      _MDPlistContainerAddCString_cold_2((uint64_t)result, v24, v25, v26, v27, v28, v29, v30);
    }
  }
  return result;
}

void _MDStoreOIDArrayApplyBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)(a1 + 16);
  }
  if (a2 < a3)
  {
    for (int i = 0; ; ++i)
    {
      int v10 = (void *)(v8 + 8 * v6);
      if (WORD1(*v10) - 4078 <= 0xFFFFFAEE) {
        break;
      }
      uint64_t v11 = (unsigned __int16)*v10 + 1;
      (*(void (**)(uint64_t, void))(a4 + 16))(a4, HIDWORD(*v10));
      v6 += v11;
      if (v6 >= a3) {
        return;
      }
    }
    CFShow(@"MDStoreOIDArrayApplyBlock encountered invalid opcode:");
    CFShow((CFTypeRef)a1);
  }
}

uint64_t _MDStoreOIDArrayEndSequence(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  uint64_t v1 = *(void **)(a1 + 48);
  if (!v1)
  {
    __MDStoreOIDArrayError(a1, (uint64_t)"_MDStoreOIDArrayEndSequence", (uint64_t)"Sequencing");
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 56) - (void)v1;
  if (v2 >= 524296) {
    _MDStoreOIDArrayEndSequence_cold_1();
  }
  unint64_t v3 = (unint64_t)v2 >> 3;
  *v1 |= (unsigned __int16)(v3 - 1);
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 32) += v3;
  return 1;
}

void tracing_dispatch_async(dispatch_queue_t queue, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (tracing_enabled)
  {
    uint64_t v2 = si_tracing_current_span();
    long long v3 = *(_OWORD *)(v2 + 16);
    long long v10 = *(_OWORD *)v2;
    long long v11 = v3;
    uint64_t v12 = *(void *)(v2 + 32);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __tracing_dispatch_async_block_invoke;
    v6[3] = &unk_1E5AEE828;
    long long v7 = v10;
    long long v8 = v3;
    uint64_t v9 = v12;
    v6[4] = v4;
    dispatch_async(v5, v6);
  }
  else
  {
    dispatch_async(queue, a2);
  }
}

uint64_t _MDStoreOIDArrayBeginBulkAdd(uint64_t a1, uint64_t a2, void *a3)
{
  if ((*(unsigned char *)(a1 + 40) & 1) == 0)
  {
    if (*(void *)(a1 + 48))
    {
      uint64_t v5 = *(void *)(a1 + 56);
      if ((unint64_t)(v5 + 8 * a2) < *(void *)(a1 + 64))
      {
LABEL_6:
        *a3 = v5;
        return 1;
      }
      if (_mutableMakeRoom(a1, a2, 0))
      {
        uint64_t v5 = *(void *)(a1 + 56);
        goto LABEL_6;
      }
      long long v7 = "Overflow";
    }
    else
    {
      long long v7 = "Sequencing";
    }
    __MDStoreOIDArrayError(a1, (uint64_t)"_MDStoreOIDArrayBeginBulkAdd", (uint64_t)v7);
  }
  return 0;
}

uint64_t _MDPlistDictionaryGetCount(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)a1 + *(unsigned int *)(a1 + 16) + 4);
}

uint64_t _MDStoreOIDArrayBeginSequence(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v4 = "Sequencing";
LABEL_4:
    __MDStoreOIDArrayError(a1, (uint64_t)"_MDStoreOIDArrayBeginSequence", (uint64_t)v4);
    return 0;
  }
  long long v8 = *(unint64_t **)(a1 + 56);
  if ((unint64_t)v8 >= *(void *)(a1 + 64))
  {
    if (!_mutableMakeRoom(a1, 1, 0))
    {
      uint64_t v4 = "Overflow";
      goto LABEL_4;
    }
    long long v8 = *(unint64_t **)(a1 + 56);
  }
  *long long v8 = (a2 << 32) | ((unint64_t)a3 << 16);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v8 + 1;
  return 1;
}

int *_MDPlistContainerAddInt32Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _addInlineData(a1, 226, a2, a3, a5, a6, a7, a8);
}

BOOL _MDPlistBytesAppendMultiplePlistBytes(uint64_t a1, uint64_t *a2, int64_t a3)
{
  block[7] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 1;
  }
  if (!*(_WORD *)(a1 + 32))
  {
    size_t v7 = 8 * a3;
    if (a3 <= 0)
    {
      while ((*(unsigned char *)(a1 + 34) & 1) != 0)
      {
        if (*(_DWORD *)(a1 + 80) != -1)
        {
LABEL_25:
          *(_WORD *)(a1 + 32) = 2839;
          int v16 = _MDLogForCategoryDefault();
          BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
          if (result)
          {
            _MDPlistBytesAppendMultiplePlistBytes_cold_1();
            return 0;
          }
          return result;
        }
        MEMORY[0x1F4188790]();
        long long v8 = (char *)block - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v8, v7);
        MEMORY[0x1F4188790]();
        uint64_t v9 = (void **)v8;
        bzero(v8, v7);
        if (*(void *)(a1 + 112) < *(void *)(a1 + 120) || (BOOL result = _MDPlistBytesGrowCapacityVM(a1, 0, 1)))
        {
          uint64_t v15 = 0;
LABEL_28:
          uint64_t v17 = *(void *)(a1 + 112);
          unint64_t v18 = v17 + 8 * v15;
          uint64_t v19 = (void *)MEMORY[0x1E4F14B00];
          uint64_t v20 = *MEMORY[0x1E4F14B00];
          uint64_t v21 = -*MEMORY[0x1E4F14B00];
          if (((v18 ^ v17) & v21) != 0 && ((v18 >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
          {
            size_t v22 = 16 << *MEMORY[0x1E4F14AF8];
            if (v22 >= 4 * v20) {
              madvise((void *)((v20 - 1 + v17) & v21), v22, 3);
            }
          }
          char v23 = *(char **)(a1 + 112);
          if (a3 >= 1)
          {
            uint64_t v24 = v9;
            uint64_t v25 = (uint64_t *)v8;
            int64_t v26 = a3;
            do
            {
              *v24++ = v23;
              uint64_t v27 = *v25++;
              v23 += v27 & 0xFFFFFFFFFFFFFFF8;
              *(void *)(a1 + 112) = v23;
              --v26;
            }
            while (v26);
          }
          size_t v28 = v23 - (unsigned char *)*v9;
          if (v28 >= 4 * *v19) {
            madvise(*v9, v28, 3);
          }
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = ___MDPlistBytesAppendMultiplePlistBytes_block_invoke;
          block[3] = &__block_descriptor_56_e8_v16__0Q8l;
          block[4] = v8;
          block[5] = v9;
          block[6] = a2;
          dispatch_apply(a3, 0, block);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 112) - *(_DWORD *)(a1 + 8);
          return 1;
        }
        if (*(_WORD *)(a1 + 32)) {
          return result;
        }
      }
    }
    else
    {
      while ((*(unsigned char *)(a1 + 34) & 1) != 0)
      {
        if (*(_DWORD *)(a1 + 80) != -1) {
          goto LABEL_25;
        }
        MEMORY[0x1F4188790]();
        long long v8 = (char *)block - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v8, v7);
        MEMORY[0x1F4188790]();
        uint64_t v9 = (void **)v8;
        bzero(v8, v7);
        unint64_t v10 = 0;
        long long v11 = a2;
        uint64_t v12 = v8;
        int64_t v13 = a3;
        do
        {
          uint64_t v14 = *v11;
          if (*v11)
          {
            if (*(_WORD *)(v14 + 32)) {
              uint64_t v14 = 0;
            }
            else {
              uint64_t v14 = *(unsigned int *)(v14 + 16);
            }
          }
          *v12++ = v14;
          v10 += v14;
          ++v11;
          --v13;
        }
        while (v13);
        uint64_t v15 = (v10 >> 2);
        if ((unint64_t)(*(void *)(a1 + 112) + 8 * v15) < *(void *)(a1 + 120)) {
          goto LABEL_28;
        }
        BOOL result = _MDPlistBytesGrowCapacityVM(a1, (2 * v10) & 0xFFFFFFF8, 1);
        if (result) {
          goto LABEL_28;
        }
        if (*(_WORD *)(a1 + 32)) {
          return result;
        }
      }
    }
  }
  return 0;
}

BOOL _MDPlistBytesGrowCapacityVM(uint64_t a1, unsigned int a2, int a3)
{
  if (*(_WORD *)(a1 + 32)) {
    return 0;
  }
  char v4 = *(unsigned char *)(a1 + 34);
  if ((v4 & 1) == 0) {
    return 0;
  }
  long long v8 = (void **)(a1 + 8);
  size_t v7 = *(unsigned char **)(a1 + 8);
  size_t v9 = *(unsigned int *)(a1 + 20);
  unint64_t v10 = (void *)MEMORY[0x1E4F14B00];
  if (v9 > a2)
  {
    unsigned int v11 = 2 * v9;
    *(_DWORD *)(a1 + 20) = 2 * v9;
    if ((2 * v9) < 0x70000001) {
      goto LABEL_7;
    }
LABEL_10:
    unsigned int v11 = 1879048192;
    if (v9 + a2 > 0x70000000)
    {
      *(_WORD *)(a1 + 32) = 2178;
      uint64_t v14 = _MDLogForCategoryDefault();
      BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
      if (result)
      {
        _MDPlistBytesGrowCapacityVM_cold_2();
        return 0;
      }
      return result;
    }
    *(_DWORD *)(a1 + 20) = 1879048192;
    if ((v4 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  unsigned int v11 = v9 + ((a2 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00]);
  *(_DWORD *)(a1 + 20) = v11;
  if (v11 >= 0x70000001) {
    goto LABEL_10;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    goto LABEL_14;
  }
LABEL_12:
  if ((a3 & 1) == 0)
  {
    uint64_t v12 = malloc_type_zone_malloc(*(malloc_zone_t **)(a1 + 72), v11, 0x7CE605A3uLL);
    *(void *)(a1 + 8) = v12;
LABEL_21:
    *(void *)(a1 + 120) = &v12[*(unsigned int *)(a1 + 20)];
    unint64_t v15 = (unint64_t)(v7 - v12) >> 3;
    uint64_t v16 = *(void *)(a1 + 48);
    if (v16) {
      *(void *)(a1 + 48) = v16 - 8 * v15;
    }
    uint64_t v17 = *(void *)(a1 + 112);
    if (v17) {
      *(void *)(a1 + 112) = v17 - 8 * v15;
    }
    uint64_t v18 = *(void *)(a1 + 128);
    if (v18) {
      *(void *)(a1 + 128) = v18 - 8 * v15;
    }
    if (v9 >= 4 * *v10)
    {
      madvise(v12, v9, 3);
      uint64_t v12 = *v8;
    }
    memcpy(v12, v7, v9);
    if ((*(unsigned char *)(a1 + 34) & 8) != 0) {
      free(v7);
    }
    else {
      _fast_vm_deallocate(v7, v9);
    }
    if ((*(unsigned char *)(a1 + 34) & 8) != 0) {
      int v19 = a3;
    }
    else {
      int v19 = 1;
    }
    if (v19) {
      char v20 = 0;
    }
    else {
      char v20 = 8;
    }
    *(unsigned char *)(a1 + 34) = v20 | *(unsigned char *)(a1 + 34) & 0xF7;
    return 1;
  }
LABEL_14:
  if (!_fast_vm_allocate((void *)(a1 + 8), v11, -251658239))
  {
    uint64_t v12 = *v8;
    goto LABEL_21;
  }
  if (*(_WORD *)(a1 + 32)) {
    return 0;
  }
  *(_WORD *)(a1 + 32) = 2205;
  int64_t v13 = _MDLogForCategoryDefault();
  BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _MDPlistBytesGrowCapacityVM_cold_1();
    return 0;
  }
  return result;
}

void __MDStoreOIDArrayFinalize(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 24) + 16))();
  uint64_t v2 = *(const void **)(a1 + 24);

  _Block_release(v2);
}

void defaultDeallocator_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 16);
  if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    free(v2);
  }
  else
  {
    mach_error_t v4 = _fast_vm_deallocate(v2, 8 * *(unsigned int *)(a2 + 36));
    if (v4)
    {
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v6 = mach_error_string(v4);
      CFStringRef v7 = CFStringCreateWithFormat(v5, 0, @"%s: Error while finalizing %@ -- vm_deallocate: %s", "freeStoreArrayMemory", a2, v6);
      CFShow(v7);
      CFRelease(v7);
    }
  }
}

void defaultDeallocator_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  if ((*(unsigned char *)(a2 + 34) & 8) != 0)
  {
    free(v2);
  }
  else
  {
    mach_error_t v4 = _fast_vm_deallocate(v2, *(unsigned int *)(a2 + 20));
    if (v4)
    {
      mach_error_t v5 = v4;
      uint64_t v6 = _MDLogForCategoryDefault();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        defaultDeallocator_block_invoke_cold_1(a2, v5, v6);
      }
    }
  }
}

uint64_t _fast_vm_deallocate(void *a1, size_t a2)
{
  if (!a2) {
    return 0;
  }
  if (munmap(a1, a2)) {
    return 5;
  }
  return 0;
}

uint64_t _MDStoreOIDArrayCreateMutable(uint64_t a1, unsigned int a2)
{
  if (!__kMDStoreOIDArrayTypeID) {
    __kMDStoreOIDArrayTypeID = _CFRuntimeRegisterClass();
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v4 = Instance;
  if (Instance)
  {
    *(unsigned char *)(Instance + 40) = *(unsigned char *)(Instance + 40) & 0xF8 | 4;
    *(void *)(Instance + 48) = 0;
    if (a2) {
      unint64_t v5 = (*MEMORY[0x1E4F14B00] + 8 * a2 - 1) & -*MEMORY[0x1E4F14B00];
    }
    else {
      unint64_t v5 = *MEMORY[0x1E4F14B00];
    }
    *(_DWORD *)(Instance + 36) = v5 >> 3;
    if (_fast_vm_allocate((void *)(Instance + 16), v5 & 0x7FFFFFFF8, -268435455))
    {
      CFRelease((CFTypeRef)v4);
      return 0;
    }
    else
    {
      *(void *)(v4 + 24) = _Block_copy(&__block_literal_global_2);
      uint64_t v6 = *(void *)(v4 + 16);
      uint64_t v7 = v6 + 8 * *(unsigned int *)(v4 + 36);
      *(void *)(v4 + 56) = v6;
      *(void *)(v4 + 64) = v7;
    }
  }
  return v4;
}

_MDMutablePlistBytes *_MDPlistBytesCreateMutable(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = [[_MDMutablePlistBytes alloc] initWithCapacity:a2 useMalloc:0];
  if (!v2) {
    +[_MDPlistBytes createPlistBytes:]();
  }
  long long v3 = v2;
  CFRetain(v2);

  return v3;
}

uint64_t _fast_vm_allocate(void *a1, size_t a2, int a3)
{
  if ((a3 & 0x13) != 1) {
    _fast_vm_allocate_cold_1();
  }
  uint64_t v4 = mmap(0, a2, 3, 4098, a3 & 0xFF000000, 0);
  if (v4 == (void *)-1) {
    return 5;
  }
  unint64_t v5 = v4;
  uint64_t result = 0;
  *a1 = v5;
  return result;
}

uint64_t _MDPlistNumberGetIntValue(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 16);
  int v2 = *(unsigned __int8 *)(a1 + 20);
  long long v3 = (int *)(a1 + 16);
  if ((v2 & 0xFE) != 0xE2) {
    long long v3 = (int *)(*(void *)a1 + *(unsigned int *)(a1 + 16));
  }
  uint64_t result = 0;
  if (v2 <= 224)
  {
    if (v2 == 35)
    {
      return *(void *)v3;
    }
    else if (v2 == 51)
    {
      return (uint64_t)*(double *)v3;
    }
  }
  else
  {
    switch(v2)
    {
      case 227:
        return (uint64_t)*(float *)v3;
      case 226:
        return *v3;
      case 225:
        return *v1 != 0;
    }
  }
  return result;
}

int *_MDPlistContainerAddBoolean(uint64_t a1, CFBooleanRef BOOLean, uint64_t a3)
{
  uint64_t Value = CFBooleanGetValue(BOOLean);

  return _addInlineData(a1, 225, Value, a3, v6, v7, v8, v9);
}

uint64_t SpotlightCacheBundleID(uint64_t result)
{
  if (result)
  {
    CFStringRef v1 = (const __CFString *)result;
    if (CFStringCompare((CFStringRef)result, @"com.apple.mail", 0)
      && CFStringCompare(v1, @"com.apple.mobilemail", 0))
    {
      if (CFStringCompare(v1, @"com.apple.reminders", 0))
      {
        if (CFStringCompare(v1, @"com.apple.Photos", 0)
          && CFStringCompare(v1, @"com.apple.mobileslideshow", 0))
        {
          if (CFStringCompare(v1, @"com.apple.spotlight.events", 0)) {
            return 32
          }
                 * (CFEqual(v1, @"com.apple.SearchUITestApp"));
          else {
            return 16;
          }
        }
        else
        {
          return 8;
        }
      }
      else
      {
        return 4;
      }
    }
    else
    {
      return 2;
    }
  }
  return result;
}

unsigned __int8 *icu_search_context_create_with_wildcard_limit(const char *a1, char *a2, char a3, int a4, int a5)
{
  uint64_t result = icu_search_context_create(a1, a2, a3, a4);
  if (result) {
    *((_DWORD *)result + 10) = a5;
  }
  return result;
}

unsigned __int8 *icu_search_context_create(const char *a1, char *a2, char a3, int a4)
{
  unsigned int v8 = a4 - 1;
  BOOL v9 = (a4 - 1) < 0x63;
  if ((a4 - 1) >= 0x63) {
    size_t v10 = 96;
  }
  else {
    size_t v10 = 108;
  }
  unsigned int v11 = (unsigned __int8 *)malloc_type_calloc(1uLL, v10, 0xCDAE44EuLL);
  atomic_store(1u, (unsigned int *)v11 + 1);
  *(_DWORD *)unsigned int v11 = 268435458;
  if (a1) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = "";
  }
  int64_t v13 = strdup(v12);
  *((void *)v11 + 2) = v13;
  if (!*v13)
  {
    _icu_search_context_add_type((int *)v11, 128);
    return v11;
  }
  v11[67] = (a3 & 8) != 0;
  v11[66] = (a3 & 4 | v11[66]) != 0;
  if ((a3 & 3) != 0 || v8 <= 0x62)
  {
    v11[64] = a3 & 1;
    v11[65] = (a3 & 2) != 0;
    v11[69] = v9;
    *((_DWORD *)v11 + 18) = a4;
    uint64_t v14 = _icu_locale_create(a2, 1);
    *((void *)v11 + 4) = v14;
    unint64_t collation = icu_locale_get_collation((unint64_t)v14, 1, 1);
    *((void *)v11 + 6) = collation;
    if (!collation)
    {
      free(v11);
      return 0;
    }
    *((void *)v11 + 7) = ucol_getLocaleByType();
  }
  int v16 = 0;
  for (int i = a1; ; ++i)
  {
    int v18 = *(unsigned __int8 *)i;
    if (v18 == 42)
    {
      _icu_search_context_add_string();
      _icu_search_context_add_type((int *)v11, 1);
      int v16 = 0;
      continue;
    }
    if (v18 != 92) {
      break;
    }
    BOOL v19 = i[1] != 0;
    if (i[1]) {
      ++i;
    }
    v16 |= v19;
LABEL_21:
    ;
  }
  if (*i) {
    goto LABEL_21;
  }
  _icu_search_context_add_string();
  int v20 = *((_DWORD *)v11 + 2);
  if (v11[66])
  {
    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (*(_DWORD *)(*((void *)v11 + 3) + 32 * v21) == 32)
      {
        *((_DWORD *)v11 + 2) = v21;
        --v20;
        goto LABEL_26;
      }
LABEL_27:
      size_t v22 = (_DWORD *)*((void *)v11 + 3);
      char v23 = &v22[8 * v20 - 8];
      if (*v23 == 1) {
        *char v23 = 2;
      }
      if (*v22 == 64)
      {
        if (v20 <= 1)
        {
          icu_search_context_destroy((int *)v11);
          return 0;
        }
        v22[6] = v22[14];
      }
      if (v11[65] && v20 >= 3)
      {
        int v24 = -4;
        uint64_t v25 = 2;
        uint64_t v26 = 152;
        uint64_t v27 = 4;
        do
        {
          uint64_t v28 = *((void *)v11 + 3);
          if ((*(_WORD *)(v28 + v26 - 128) & 0xE3E) == 0
            || *(_DWORD *)(v28 + v26 - 120) != 4
            || (*(_WORD *)(v28 + v26 - 62) & 0x30F8) == 0)
          {
            goto LABEL_70;
          }
          int v29 = *(_DWORD *)(v28 + v26 - 88);
          if (v29 == 16)
          {
            size_t v33 = **(unsigned __int8 ***)(*(void *)(v28 + v26 - 80) + 16);
            int v34 = v33[1];
            if (v34 == 45) {
              goto LABEL_61;
            }
            if (v34 != 239)
            {
              if (v34 != 226 || v33[2] != 128) {
                goto LABEL_70;
              }
              unsigned __int8 v32 = v33[3];
              goto LABEL_54;
            }
            if (v33[2] == 188)
            {
              int v35 = v33[3];
LABEL_60:
              if (v35 == 189) {
                goto LABEL_61;
              }
            }
          }
          else
          {
            if (v29 != 8) {
              goto LABEL_61;
            }
            uint64_t v30 = *(unsigned __int8 **)(v28 + v26 - 72);
            int v31 = *v30;
            if (v31 == 45) {
              goto LABEL_61;
            }
            if (v31 != 239)
            {
              if (v31 != 226 || v30[1] != 128) {
                goto LABEL_70;
              }
              unsigned __int8 v32 = v30[2];
LABEL_54:
              if ((v32 & 0xFE) != 0x90) {
                goto LABEL_70;
              }
LABEL_61:
              if (v27 >= v20 || *(_DWORD *)(v28 + v26 - 56) != 4 || (*(_WORD *)(v28 + v26) & 0xE3E) == 0) {
                goto LABEL_70;
              }
              if (v29 == 16)
              {
                term_expansions_release(*(void *)(v28 + v26 - 80));
                uint64_t v28 = *((void *)v11 + 3);
                uint64_t v36 = (void *)(v28 + v26 - 80);
LABEL_68:
                *uint64_t v36 = 0;
              }
              else if (v29 == 8)
              {
                free(*(void **)(v28 + v26 - 72));
                uint64_t v28 = *((void *)v11 + 3);
                uint64_t v36 = (void *)(v28 + 32 * v25 + 16);
                goto LABEL_68;
              }
              memmove((void *)(v28 + v26 - 88), (const void *)(v28 + v26 - 24), 32 * (v24 + *((_DWORD *)v11 + 2)));
              int v20 = *((_DWORD *)v11 + 2) - 2;
              *((_DWORD *)v11 + 2) = v20;
              goto LABEL_70;
            }
            if (v30[1] == 188)
            {
              int v35 = v30[2];
              goto LABEL_60;
            }
          }
LABEL_70:
          ++v25;
          --v24;
          v26 += 32;
          uint64_t v37 = v27++ - 1;
        }
        while (v37 < v20);
      }
      if ((a3 & 0x10) != 0) {
        _icu_search_context_add_type((int *)v11, 2);
      }
    }
  }
  else
  {
LABEL_26:
    if (v20) {
      goto LABEL_27;
    }
  }
  if (v8 <= 0x62)
  {
    int32_t v38 = i - a1;
    if ((int)i - (int)a1 >= 1 && a1[v38 - 1] == 42)
    {
      if (v38 < 2 || a1[v38 - 2] != 92)
      {
        v11[68] = 1;
        int32_t v38 = i - a1 - 1;
        goto LABEL_81;
      }
      goto LABEL_82;
    }
    if ((a3 & 0x10) != 0) {
      v11[68] = 1;
    }
LABEL_81:
    if (v38 <= 1)
    {
      uint64_t v39 = 0;
    }
    else
    {
LABEL_82:
      uint64_t v39 = *(unsigned __int8 *)a1 == 42;
      v38 -= v39;
    }
    *((_DWORD *)v11 + 22) = 0;
    *((void *)v11 + 10) = UTF16FromUTF8((const char *)(*((void *)v11 + 2) + v39), v38, 0, (int32_t *)v11 + 22);
    uint64_t v40 = ucol_openElements();
    int v41 = -1;
    do
      ++v41;
    while (ucol_next() != -1);
    MEMORY[0x1A6247540](v40);
    *((_DWORD *)v11 + 23) = v41;
    if (v41 <= 2)
    {
      v11[69] = 0;
      free(*((void **)v11 + 10));
      *((void *)v11 + 10) = 0;
    }
    ucol_closeElements();
    *((void *)v11 + 12) = -1;
    *((_DWORD *)v11 + 26) = -1;
  }
  return v11;
}

void *icu_locale_create(__CFString *Length, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  memset(v5, 0, sizeof(v5));
  if (Length)
  {
    CFStringRef v3 = Length;
    CFIndex Length = (__CFString *)CFStringGetLength(Length);
    if (Length)
    {
      if (CFStringGetCString(v3, (char *)v5, 256, 0x8000100u)) {
        CFIndex Length = (__CFString *)v5;
      }
      else {
        CFIndex Length = 0;
      }
    }
  }
  return _icu_locale_create((char *)Length, a2);
}

void *_icu_locale_create(char *__s, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!__s || (int v2 = __s, !*__s)) {
    int v2 = "en";
  }
  memset(v11, 0, sizeof(v11));
  if (a2)
  {
    size_t v3 = strlen(v2);
    size_t v4 = v3;
    if (v3 < 0x12 || v3 + 18 <= 0xFF && !strchr(v2, 64))
    {
      __memcpy_chk();
      strcpy((char *)v11 + v4, "@collation=search");
      int v2 = (char *)v11;
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)&s_locale_lock);
  CFDictionaryRef v5 = (const __CFDictionary *)s_locale_dict;
  if (!s_locale_dict)
  {
    CFDictionaryKeyCallBacks v10 = *(CFDictionaryKeyCallBacks *)byte_1EF684D58;
    CFDictionaryRef v5 = CFDictionaryCreateMutable(0, 0, &v10, 0);
    s_locale_dict = (uint64_t)v5;
  }
  uint64_t Value = (void *)CFDictionaryGetValue(v5, v2);
  if (!Value)
  {
    uint64_t Value = malloc_type_calloc(1uLL, 0x58uLL, 0x10300408C324C43uLL);
    *((void *)Value + 1) = strdup(v2);
    atomic_store(1u, (unsigned int *)Value + 1);
    *(_DWORD *)uint64_t Value = 268435457;
    uint64_t v7 = (__CFDictionary *)s_locale_dict;
    unsigned int v8 = strdup(v2);
    CFDictionarySetValue(v7, v8, Value);
  }
  icu_ctx_retain((int *)Value);
  os_unfair_lock_unlock((os_unfair_lock_t)&s_locale_lock);
  return Value;
}

int *icu_ctx_retain(int *result)
{
  if (result)
  {
    if ((*result - 268435462) <= 0xFFFFFFFA) {
      icu_ctx_retain_cold_1(*result);
    }
    atomic_fetch_add(result + 1, 1u);
  }
  return result;
}

void _icu_search_context_add_string()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (!v2) {
    return;
  }
  char v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  uint64_t v7 = v0;
  if (v2 < 1)
  {
    if (v3)
    {
      unint64_t v15 = malloc_type_malloc(v2 + 1, 0xE320998BuLL);
      int v18 = v15;
LABEL_34:
      *int v18 = 0;
      uint64_t v5 = v18 - v15;
      uint64_t v6 = v15;
      goto LABEL_36;
    }
LABEL_35:
    unint64_t v15 = 0;
LABEL_36:
    if (*(void *)(v7 + 32))
    {
      v52 = v15;
      rules = (int8x8_t *)icu_locale_get_rules();
      int v58 = 0;
      bzero(v61, 0x1000uLL);
      bzero(v60, 0x1000uLL);
      CFRange v51 = (char *)icu_build_pattern_key(*(void *)(v7 + 48), v6, v5, 0, 0, &v58);
      int v22 = icu_term_key_starts(*(void *)(v7 + 48), rules, v6, v5, v51, v58, v61, v60, 1024);
      int v54 = (int8x8_t *)icu_locale_get_rules();
      unint64_t collation = icu_locale_get_collation(*(void *)(v7 + 32), *(unsigned __int8 *)(v7 + 65), *(unsigned __int8 *)(v7 + 64));
      int v53 = v22;
      if (v22 >= 1)
      {
        unint64_t v24 = collation;
        uint64_t v25 = 0;
        unint64_t v50 = v6 + 1;
        do
        {
          memset(v59, 0, sizeof(v59));
          uint64_t v26 = v61[v25];
          int v57 = 0;
          uint64_t v27 = v25 + 1;
          uint64_t v28 = (unsigned __int8 *)icu_build_pattern_key(v24, &v6[v26], v61[v25 + 1] - (int)v26, v59, 32, &v57);
          v55[0] = 0;
          v55[1] = 0;
          uint64_t v56 = 0;
          int v29 = v57;
          icu_rules_find_expansions(v54, v28, v57, 0, (uint64_t)v55);
          if (v56)
          {
            uint64_t v30 = *v56;
            if (*(_DWORD *)(*v56 + 4) == 1) {
              _icu_search_context_add_part(v7, v24, (char *)(**(void **)(v30 + 16) + 1), ***(char ***)(v30 + 16), 0, 0);
            }
            else {
              _icu_search_context_add_list(v7, v30, &v6[v61[v25]], v61[v27] - v61[v25]);
            }
            if (!*(unsigned char *)(v7 + 65)) {
              goto LABEL_72;
            }
            if (v27 == v53) {
              goto LABEL_59;
            }
            uint64_t v39 = v61[v27];
            int v32 = v6[v39];
            if ((v6[v39] & 0x80000000) == 0) {
              goto LABEL_68;
            }
            unint64_t v40 = (unint64_t)v6[v39] >> 4;
            char v41 = ~(_BYTE)v40;
            uint64_t v42 = utf8_byte_length_utf8_len_table_2[v40];
            int v32 = (utf8_to_code_point_utf8_first_char_mask_1[v42] & v32);
            if ((v41 & 0xC) != 0) {
              goto LABEL_68;
            }
            if (v42 <= 2) {
              uint64_t v42 = 2;
            }
            else {
              uint64_t v42 = v42;
            }
            uint64_t v43 = v42 - 1;
            uint64_t v44 = &v50[v39];
            do
            {
              char v45 = *v44++;
              int v32 = v45 & 0x3F | (v32 << 6);
              --v43;
            }
            while (v43);
          }
          else
          {
            if (!*(_DWORD *)(v7 + 8) && !*(unsigned char *)(v7 + 67) && *(unsigned char *)(v7 + 66)) {
              _icu_search_context_add_type((int *)v7, 64);
            }
            _icu_search_context_add_part(v7, v24, &v6[v61[v25]], v61[v27] - v61[v25], v28, v29);
            if (!*(unsigned char *)(v7 + 65)) {
              goto LABEL_72;
            }
            if (v27 == v53) {
              goto LABEL_59;
            }
            uint64_t v31 = v61[v27];
            int v32 = v6[v31];
            if ((v6[v31] & 0x80000000) == 0
              || (unint64_t v33 = (unint64_t)v6[v31] >> 4,
                  char v34 = ~(_BYTE)v33,
                  uint64_t v35 = utf8_byte_length_utf8_len_table_2[v33],
                  int v32 = (utf8_to_code_point_utf8_first_char_mask_1[v35] & v32),
                  (v34 & 0xC) != 0))
            {
LABEL_68:
              BOOL v46 = (v32 - 12441) >= 4 && (v32 - 65438) >= 2;
              if (!v46 || unicode_combinable((unsigned __int16)v32)) {
                goto LABEL_72;
              }
              goto LABEL_59;
            }
            if (v35 <= 2) {
              uint64_t v35 = 2;
            }
            else {
              uint64_t v35 = v35;
            }
            uint64_t v36 = v35 - 1;
            uint64_t v37 = &v50[v31];
            do
            {
              char v38 = *v37++;
              int v32 = v38 & 0x3F | (v32 << 6);
              --v36;
            }
            while (v36);
          }
          if (v32 < 0x10000) {
            goto LABEL_68;
          }
          unsigned int v47 = v32 - 917760;
          unsigned int v48 = v32 - 127995;
          if (v47 < 0xF0 || v48 < 5) {
            goto LABEL_72;
          }
LABEL_59:
          _icu_search_context_add_type((int *)v7, 4);
LABEL_72:
          if (v28 != (unsigned __int8 *)v59) {
            free(v28);
          }
          ++v25;
        }
        while (v27 != v53);
      }
      free(v51);
      unint64_t v15 = v52;
      if (v53)
      {
        if (!v52) {
          return;
        }
        goto LABEL_85;
      }
    }
    else if (v5 && !*(_DWORD *)(v7 + 8) && !*(unsigned char *)(v7 + 67) && *(unsigned char *)(v7 + 66))
    {
      _icu_search_context_add_type((int *)v7, 64);
    }
    _icu_search_context_add_part(v7, 0, v6, v5, 0, 0);
    if (!v15) {
      return;
    }
LABEL_85:
    free(v15);
    return;
  }
  int32_t v8 = v2 - 1;
  unint64_t v9 = 1;
  while (1)
  {
    int v10 = v6[v8];
    if (v10 > -65) {
      break;
    }
    int32_t v11 = utf8_back1SafeBody((const uint8_t *)v6, 0, v8);
    unsigned int v12 = v6[v11];
    if ((v12 & 0x80) != 0) {
      goto LABEL_8;
    }
LABEL_21:
    if (v9 <= 3)
    {
      --v8;
      if ((uint64_t)v9++ < v5) {
        continue;
      }
    }
    if (v4)
    {
      unint64_t v15 = malloc_type_malloc(v5 + 1, 0xE320998BuLL);
      uint64_t v16 = 0;
      int v17 = 0;
      int v18 = v15;
      do
      {
        if (v6[v16] == 92) {
          ++v17;
        }
        *v18++ = v6[v17];
        uint64_t v16 = ++v17;
      }
      while (v17 < v5);
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  unsigned int v12 = v6[v8];
  int32_t v11 = v8;
  if ((v10 & 0x80) == 0) {
    goto LABEL_21;
  }
LABEL_8:
  uint64_t v13 = v11 + 1;
  if (v13 == v5) {
    goto LABEL_29;
  }
  if (v12 < 0xE0)
  {
    if (v12 < 0xC2) {
      goto LABEL_29;
    }
    goto LABEL_20;
  }
  if (v12 <= 0xEF)
  {
    if (((a00000000000000[v12 & 0xF] >> (v6[v13] >> 5)) & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_19;
  }
  if (v12 <= 0xF4
    && ((byte_1A33A40B5[(unint64_t)v6[v13] >> 4] >> (v12 + 16)) & 1) != 0)
  {
    uint64_t v13 = v11 + 2;
    if (v13 != v5 && v6[v13] <= -65)
    {
LABEL_19:
      uint64_t v13 = (int)v13 + 1;
      if (v13 == v5) {
        goto LABEL_29;
      }
LABEL_20:
      if (v6[v13] >= -64) {
        goto LABEL_29;
      }
      goto LABEL_21;
    }
  }
LABEL_29:
  int v19 = *__error();
  int v20 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
    _icu_search_context_add_string_cold_1(v20);
  }
  *__error() = v19;
}

void _icu_search_context_add_part(uint64_t a1, unint64_t a2, char *a3, int a4, void *a5, int a6)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return;
  }
  int v6 = a4;
  if (a4 > 253)
  {
    uint64_t v13 = 0;
    goto LABEL_67;
  }
  if (!*(unsigned char *)(a1 + 65))
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    goto LABEL_55;
  }
  unint64_t collation = a2;
  if (a2)
  {
    uint64_t v12 = 0;
  }
  else
  {
    *(_DWORD *)dest = 0;
    LocaleByType = (char *)ucol_getLocaleByType();
    uint64_t v16 = strchr(LocaleByType, 64);
    uint64_t v12 = 0;
    if (v16) {
      int64_t v17 = v16 - LocaleByType;
    }
    else {
      int64_t v17 = 0;
    }
    if ((unint64_t)(v17 - 1) <= 0x1E)
    {
      long long __s1 = 0u;
      long long v74 = 0u;
      __strncpy_chk();
      int v18 = _icu_locale_create((char *)&__s1, 0);
      uint64_t v12 = (uint64_t)v18;
      if (v18) {
        unint64_t collation = icu_locale_get_collation((unint64_t)v18, *(unsigned __int8 *)(a1 + 65), *(unsigned __int8 *)(a1 + 64));
      }
      else {
        unint64_t collation = 0;
      }
    }
  }
  if (v6 < 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    goto LABEL_54;
  }
  __s2 = a5;
  uint64_t v13 = 0;
  int v19 = 0;
  int v20 = &a3[v6];
  __src = a3;
  uint64_t v21 = a3;
  do
  {
    int v22 = *v21;
    uint64_t v23 = *v21 >> 4;
    size_t v24 = utf8_byte_length_noerror_utf8_len_table_2[v23];
    if ((*v21 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    char v25 = ~(_BYTE)v23;
    uint64_t v26 = utf8_byte_length_utf8_len_table_2[v23];
    int v22 = (utf8_to_code_point_utf8_first_char_mask_1[v26] & v22);
    if ((v25 & 0xC) != 0) {
      goto LABEL_25;
    }
    uint64_t v26 = v26 <= 2 ? 2 : v26;
    uint64_t v27 = v26 - 1;
    uint64_t v28 = v21 + 1;
    do
    {
      char v29 = *v28++;
      int v22 = v29 & 0x3F | (v22 << 6);
      --v27;
    }
    while (v27);
    if (v22 >= 0x10000)
    {
      unsigned int v31 = v22 - 917760;
      unsigned int v32 = v22 - 127995;
      if (v31 >= 0xF0 && v32 > 4)
      {
LABEL_41:
        if (v19)
        {
          memcpy(v19, v21, v24);
          v19 += v24;
        }
        goto LABEL_43;
      }
    }
    else
    {
LABEL_25:
      BOOL v30 = (v22 - 12441) >= 4 && (v22 - 65438) >= 2;
      if (v30 && !unicode_combinable((unsigned __int16)v22)) {
        goto LABEL_41;
      }
    }
    bzero(&__s1, 0x400uLL);
    *(_DWORD *)dest = 0;
    icu_build_pattern_key(collation, v21, v24, &__s1, 1024, dest);
    if (*(_DWORD *)dest)
    {
      if (v19)
      {
        memcpy(v19, v21, v24);
        v19 += v24;
      }
    }
    else if (!v13)
    {
      uint64_t v13 = (char *)malloc_type_malloc((v6 + 1), 0x2735D0CAuLL);
      memcpy(v13, __src, v21 - __src);
      int v19 = &v13[v21 - __src];
    }
LABEL_43:
    v21 += v24;
  }
  while (v21 < v20);
  uint64_t v14 = 0;
  if (v13)
  {
    if (v19 && (uint64_t v14 = 0, a6))
    {
      a3 = __src;
      if (v19 != v13)
      {
        bzero(&__s1, 0x400uLL);
        *(_DWORD *)dest = 0;
        icu_build_pattern_key(collation, v13, v19 - v13, &__s1, 1024, dest);
        if (*(_DWORD *)dest == a6 && !memcmp(&__s1, __s2, a6))
        {
          *int v19 = 0;
          uint64_t v62 = term_expansions_insert(0, 0, __src, v6);
          uint64_t v14 = term_expansions_insert(v62, 0, v13, (int)v19 - (int)v13);
          int v6 = v19 - v13;
          a3 = v13;
        }
        else
        {
          uint64_t v14 = 0;
        }
      }
    }
    else
    {
      a3 = __src;
    }
  }
  else
  {
    a3 = __src;
  }
LABEL_54:
  icu_ctx_release(v12);
LABEL_55:
  if (*(unsigned char *)(a1 + 64))
  {
    long long v75 = 0u;
    long long v76 = 0u;
    long long __s1 = 0u;
    long long v74 = 0u;
    *(void *)srcCFIndex Length = 0;
    long long v71 = 0u;
    long long v72 = 0u;
    *(_OWORD *)dest = 0u;
    long long v70 = 0u;
    *(_OWORD *)__s = 0u;
    long long v68 = 0u;
    UErrorCode pErrorCode = U_ZERO_ERROR;
    strFromUTF8(&__s1, 32, &srcLength[1], a3, v6, &pErrorCode);
    int32_t v34 = u_strToLower(dest, 32, (const UChar *)&__s1, srcLength[1], *(const char **)(a1 + 56), &pErrorCode);
    if (pErrorCode <= U_ZERO_ERROR)
    {
      int32_t v35 = v34;
      if (v34 != srcLength[1] || memcmp(&__s1, dest, 2 * v34))
      {
        strToUTF8(__s, 32, srcLength, dest, v35, &pErrorCode);
        uint64_t v36 = term_expansions_insert(v14, 0, __s, srcLength[0]);
        uint64_t v14 = term_expansions_insert(v36, 0, a3, v6);
        int32_t v35 = srcLength[1];
      }
    }
    else
    {
      int32_t v35 = srcLength[1];
    }
    int32_t v37 = u_strToUpper(dest, 32, (const UChar *)&__s1, v35, *(const char **)(a1 + 56), &pErrorCode);
    if (pErrorCode <= U_ZERO_ERROR)
    {
      int32_t v38 = v37;
      if (v37 != srcLength[1] || memcmp(&__s1, dest, 2 * v37))
      {
        strToUTF8(__s, 32, srcLength, dest, v38, &pErrorCode);
        uint64_t v39 = term_expansions_insert(v14, 0, __s, srcLength[0]);
        uint64_t v14 = term_expansions_insert(v39, 0, a3, v6);
      }
    }
  }
  if (v14)
  {
    _icu_search_context_add_list(a1, (uint64_t)v14, 0, 0);
    term_expansions_release((uint64_t)v14);
    goto LABEL_95;
  }
LABEL_67:
  uint64_t v40 = *(int *)(a1 + 8);
  if (v40 && (uint64_t v41 = *(void *)(a1 + 24), v42 = v40 - 1, *(_DWORD *)(v41 + 32 * (v40 - 1)) == 8))
  {
    uint64_t v43 = *(char **)(v41 + 32 * v42 + 16);
    uint64_t v44 = a3;
    int v45 = strlen(v43);
    uint64_t v46 = v6 + (uint64_t)v45;
    unsigned int v47 = (char *)malloc_type_realloc(v43, (int)v46 + 1, 0x3111570EuLL);
    *(void *)(*(void *)(a1 + 24) + 32 * v42 + 16) = v47;
    memcpy(&v47[v45], v44, v6);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 24) + 32 * v42 + 16) + v46) = 0;
  }
  else
  {
    _icu_search_context_grow((void *)a1);
    *(void *)(*(void *)(a1 + 24) + 32 * *(int *)(a1 + 8) + 8) = 0;
    unsigned int v48 = malloc_type_malloc(v6 + 1, 0x7FAC38C7uLL);
    *(void *)(*(void *)(a1 + 24) + 32 * *(int *)(a1 + 8) + 16) = v48;
    memcpy(v48, a3, v6);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 24) + 32 * *(int *)(a1 + 8) + 16) + v6) = 0;
    unint64_t v49 = *a3;
    if ((v49 & 0x80) != 0)
    {
      uint64_t v50 = utf8_byte_length_utf8_len_table_2[v49 >> 4];
      int v51 = utf8_to_code_point_utf8_first_char_mask_1[v50] & v49;
      if ((~(v49 >> 4) & 0xC) != 0)
      {
        LODWORD(v49) = utf8_to_code_point_utf8_first_char_mask_1[v50] & v49;
      }
      else
      {
        if (v50 <= 2) {
          uint64_t v52 = 2;
        }
        else {
          uint64_t v52 = utf8_byte_length_utf8_len_table_2[v49 >> 4];
        }
        uint64_t v53 = v52 - 1;
        int v54 = a3 + 1;
        do
        {
          char v55 = *v54++;
          LODWORD(v49) = v55 & 0x3F | (v51 << 6);
          int v51 = v49;
          --v53;
        }
        while (v53);
      }
    }
    int v56 = 1 << u_charType(v49);
    if ((v56 & 0xF000000) != 0) {
      int v57 = 251658240;
    }
    else {
      int v57 = v56;
    }
    if ((v56 & 0x78001) != 0) {
      int v58 = 491521;
    }
    else {
      int v58 = v57;
    }
    if ((v56 & 0x7000) != 0) {
      int v58 = 28672;
    }
    if ((v56 & 0xE00) != 0) {
      int v58 = 3584;
    }
    if ((v56 & 0x1C0) != 0) {
      int v58 = 448;
    }
    if ((v56 & 0x3E) != 0) {
      int v59 = 62;
    }
    else {
      int v59 = v58;
    }
    uint64_t v60 = *(int *)(a1 + 8);
    int v61 = (_DWORD *)(*(void *)(a1 + 24) + 32 * v60);
    v61[6] = v59;
    *(_DWORD *)(a1 + 8) = v60 + 1;
    *int v61 = 8;
  }
LABEL_95:
  if (v13) {
    free(v13);
  }
}

void *_icu_search_context_grow(void *result)
{
  int v1 = *((_DWORD *)result + 3);
  if (*((_DWORD *)result + 2) >= v1)
  {
    uint64_t v2 = result;
    if (v1) {
      int v3 = 2 * v1;
    }
    else {
      int v3 = 2;
    }
    *((_DWORD *)result + 3) = v3;
    uint64_t result = malloc_type_realloc(*((void **)result + 3), 32 * v3, 0x10300409F66AF54uLL);
    v2[3] = result;
  }
  return result;
}

int8x8_t *icu_rules_find_expansions@<X0>(int8x8_t *result@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, int8x8_t *a4@<X3>, uint64_t a5@<X8>)
{
  if (a4) {
    uint64_t v5 = a4;
  }
  else {
    uint64_t v5 = result;
  }
  if (a3)
  {
    while (1)
    {
      unint64_t v6 = *a2;
      if (((*(unsigned __int32 *)((char *)v5[1].i32 + ((v6 >> 3) & 0x1C)) >> v6) & 1) == 0)
      {
        *(void *)a5 = 0;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        return result;
      }
      uint64_t v7 = 0;
      int32_t v8 = v5 + 1;
      unint64_t v9 = v6 >> 6;
      if ((v6 >> 6) == 1) {
        goto LABEL_11;
      }
      if (v9 == 2) {
        goto LABEL_10;
      }
      if (v9 == 3) {
        break;
      }
LABEL_12:
      uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v8[v9] & ~(-1 << v6)));
      v13.i16[0] = vaddlv_u8(v13);
      uint64_t v5 = (int8x8_t *)v5[v13.u32[0] + 6 + v7];
      ++a2;
      if (!--a3) {
        goto LABEL_13;
      }
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v5[3]);
    v10.i16[0] = vaddlv_u8(v10);
    uint64_t v7 = v10.u32[0];
LABEL_10:
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v5[2]);
    v11.i16[0] = vaddlv_u8(v11);
    v7 += v11.u32[0];
LABEL_11:
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(*v8);
    v12.i16[0] = vaddlv_u8(v12);
    v7 += v12.u32[0];
    goto LABEL_12;
  }
LABEL_13:
  int8x8_t v14 = *v5;
  if (*v5)
  {
    int v15 = *(_DWORD *)(*(void *)&v14 + 4);
    int8x8_t v14 = *(int8x8_t *)(*(void *)&v14 + 16);
  }
  else
  {
    int v15 = 0;
    uint64_t v5 = 0;
  }
  *(int8x8_t *)a5 = v14;
  *(_DWORD *)(a5 + 8) = v15;
  *(_DWORD *)(a5 + 12) = 0;
  *(void *)(a5 + 16) = v5;
  return result;
}

void _icu_search_context_add_list(uint64_t a1, uint64_t a2, char *a3, unsigned int a4)
{
  if (*(_DWORD *)(a2 + 4))
  {
    unint64_t v7 = 0;
    int v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 16) + 8 * v7);
      UChar32 v10 = *(unsigned __int8 *)(v9 + 1);
      if (*(char *)(v9 + 1) < 0)
      {
        unint64_t v11 = (unint64_t)*(unsigned __int8 *)(v9 + 1) >> 4;
        char v12 = ~(_BYTE)v11;
        uint64_t v13 = utf8_byte_length_utf8_len_table_2[v11];
        UChar32 v14 = (utf8_to_code_point_utf8_first_char_mask_1[v13] & v10);
        if ((v12 & 0xC) != 0)
        {
          UChar32 v10 = (utf8_to_code_point_utf8_first_char_mask_1[v13] & v10);
        }
        else
        {
          if (v13 <= 2) {
            uint64_t v13 = 2;
          }
          else {
            uint64_t v13 = v13;
          }
          uint64_t v15 = v13 - 1;
          uint64_t v16 = (char *)(v9 + 2);
          do
          {
            char v17 = *v16++;
            UChar32 v10 = v17 & 0x3F | (v14 << 6);
            UChar32 v14 = v10;
            --v15;
          }
          while (v15);
        }
      }
      int v18 = 1 << u_charType(v10);
      if ((v18 & 0x3E) != 0)
      {
        int v19 = 62;
      }
      else if ((v18 & 0x1C0) != 0)
      {
        int v19 = 448;
      }
      else
      {
        if ((v18 & 0xF000000) != 0) {
          int v20 = 251658240;
        }
        else {
          int v20 = v18;
        }
        if ((v18 & 0x78001) != 0) {
          int v20 = 491521;
        }
        if ((v18 & 0x7000) != 0) {
          int v20 = 28672;
        }
        if ((v18 & 0xE00) != 0) {
          int v19 = 3584;
        }
        else {
          int v19 = v20;
        }
      }
      v8 |= v19;
      ++v7;
      unint64_t v21 = *(unsigned int *)(a2 + 4);
    }
    while (v7 < v21);
  }
  else
  {
    int v8 = 0;
    unint64_t v21 = 0;
  }
  int v22 = 0;
  if (!a3 || !a4)
  {
LABEL_45:
    uint64_t v32 = a1;
    goto LABEL_60;
  }
  if (v21)
  {
    uint64_t v23 = *(unsigned __int8 ***)(a2 + 16);
    while (**v23 != a4 || memcmp(a3, *v23 + 1, a4))
    {
      ++v23;
      if (!--v21) {
        goto LABEL_36;
      }
    }
    int v22 = 0;
    goto LABEL_45;
  }
LABEL_36:
  int v22 = malloc_type_malloc(a4 + 1, 0x843E8F91uLL);
  memcpy(v22, a3, a4);
  *((unsigned char *)v22 + a4) = 0;
  UChar32 v24 = *a3;
  if (*a3 < 0)
  {
    unint64_t v25 = (unint64_t)*a3 >> 4;
    char v26 = ~(_BYTE)v25;
    uint64_t v27 = utf8_byte_length_utf8_len_table_2[v25];
    UChar32 v28 = (utf8_to_code_point_utf8_first_char_mask_1[v27] & v24);
    if ((v26 & 0xC) != 0)
    {
      UChar32 v24 = (utf8_to_code_point_utf8_first_char_mask_1[v27] & v24);
    }
    else
    {
      if (v27 <= 2) {
        uint64_t v27 = 2;
      }
      else {
        uint64_t v27 = v27;
      }
      uint64_t v29 = v27 - 1;
      BOOL v30 = a3 + 1;
      do
      {
        char v31 = *v30++;
        UChar32 v24 = v31 & 0x3F | (v28 << 6);
        UChar32 v28 = v24;
        --v29;
      }
      while (v29);
    }
  }
  int v33 = 1 << u_charType(v24);
  if ((v33 & 0x3E) != 0)
  {
    int v34 = 62;
    uint64_t v32 = a1;
  }
  else
  {
    uint64_t v32 = a1;
    if ((v33 & 0x1C0) != 0)
    {
      int v34 = 448;
    }
    else if ((v33 & 0xE00) != 0)
    {
      int v34 = 3584;
    }
    else if ((v33 & 0x7000) != 0)
    {
      int v34 = 28672;
    }
    else
    {
      int v34 = 491521;
      if ((v33 & 0x78001) == 0)
      {
        if ((v33 & 0xF000000) != 0) {
          int v34 = 251658240;
        }
        else {
          int v34 = v33;
        }
      }
    }
  }
  v8 |= v34;
LABEL_60:
  if (*(unsigned char *)(v32 + 66)) {
    BOOL v35 = (v8 & 0x7000) == 0;
  }
  else {
    BOOL v35 = 1;
  }
  if (v35)
  {
    if (!*(_DWORD *)(v32 + 8) && *(unsigned char *)(v32 + 66) && !*(unsigned char *)(v32 + 67)) {
      _icu_search_context_add_type((int *)v32, 64);
    }
    _icu_search_context_grow((void *)v32);
    int v36 = v8 | 0x3FF80000;
    if ((v8 & 0x3FF80000) == 0) {
      int v36 = v8;
    }
    uint64_t v37 = *(void *)(v32 + 24) + 32 * *(int *)(v32 + 8);
    *(_DWORD *)(v37 + 24) = v36;
    *(void *)(v37 + 16) = v22;
    if (a2)
    {
      unsigned int v38 = atomic_load((unsigned int *)a2);
      if (v38 != -1) {
        atomic_fetch_add((atomic_uint *volatile)a2, 1u);
      }
    }
    uint64_t v39 = *(int *)(v32 + 8);
    uint64_t v40 = *(void *)(v32 + 24) + 32 * v39;
    *(void *)(v40 + 8) = a2;
    *(_DWORD *)(v32 + 8) = v39 + 1;
    *(_DWORD *)uint64_t v40 = 16;
  }
  else
  {
    free(v22);
    if (*(_DWORD *)(v32 + 8))
    {
      _icu_search_context_add_type((int *)v32, 32);
    }
  }
}

uint64_t icu_locale_get_rules()
{
  uint64_t result = MEMORY[0x1F4188790]();
  v55[128] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    int v3 = v2;
    int v4 = v1;
    unint64_t v5 = result;
    int v6 = v2 ? 2 : 3;
    unsigned int v7 = v1 ? v2 ^ 1 : v6;
    __dmb(9u);
    uint64_t v8 = result + 8 * v7;
    uint64_t v10 = *(void *)(v8 + 48);
    uint64_t v9 = v8 + 48;
    uint64_t result = v10;
    if (!v10)
    {
      unint64_t collation = icu_locale_get_collation(v5, v1, v2);
      if (!collation) {
        return *(void *)v9;
      }
      uint64_t v12 = collation;
      pthread_mutex_lock(&icu_locale_get_rules_rule_lock);
      if (*(void *)v9)
      {
LABEL_36:
        pthread_mutex_unlock(&icu_locale_get_rules_rule_lock);
        return *(void *)v9;
      }
      int v13 = openCacheFile(v5, v4, v3, 0);
      if (v13 != -1)
      {
        int v14 = v13;
        uint64_t __buf = 0;
        uint64_t v53 = 0;
        size_t v54 = 0;
        if (pread(v13, &__buf, 0x18uLL, 0) != 24) {
          goto LABEL_19;
        }
        if (__buf != 2) {
          goto LABEL_19;
        }
        if (!v54) {
          goto LABEL_19;
        }
        if (!v53) {
          goto LABEL_19;
        }
        uint64_t v15 = (char *)mmap(v53, v54, 1, 1, v14, 0);
        if (v15 == (char *)-1) {
          goto LABEL_19;
        }
        if (v15 != v53)
        {
          munmap(v15, v54);
LABEL_19:
          close(v14);
          goto LABEL_20;
        }
        UChar32 v28 = v15 + 24;
        close(v14);
        if (v28)
        {
          __dmb(0xBu);
          *(void *)uint64_t v9 = v28;
          goto LABEL_36;
        }
      }
LABEL_20:
      v50[0] = 0;
      v50[1] = 0;
      uint64_t v51 = 0;
      uint64_t v16 = malloc_create_zone(0x10000uLL, 0);
      char v17 = (int8x8_t *)malloc_type_zone_calloc(v16, 1uLL, 0x830uLL, 0x29EC4FE6uLL);
      v17[5].i8[1] = -1;
      zone = v16;
      icu_rules_add_collator(v12, v12, v16, v17, (uint64_t)v50, (v7 & 1) == 0, v4);
      if ((int)v51 >= 1)
      {
        uint64_t v18 = 0;
        do
        {
          uint64_t v19 = icu_open_collation();
          if (v19)
          {
            icu_rules_add_collator(v12, v19, zone, v17, 0, (v7 & 1) == 0, 0);
            ucol_close();
          }
          free((void *)v50[v18++]);
        }
        while (v18 < (int)v51);
        if (!v17)
        {
          unint64_t v25 = 0;
LABEL_35:
          __dmb(0xBu);
          *(void *)uint64_t v9 = v25;
          icu_rules_free((char *)v17);
          malloc_destroy_zone(zone);
          goto LABEL_36;
        }
      }
      bzero(v55, 0x400uLL);
      uint64_t v46 = 0;
      unsigned int v47 = &v46;
      uint64_t v48 = 0x2000000000;
      uint64_t v49 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = &v42;
      uint64_t v44 = 0x2000000000;
      uint64_t v45 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = &v38;
      uint64_t v40 = 0x2000000000;
      uint64_t v41 = 0;
      v37[0] = MEMORY[0x1E4F143A8];
      v37[1] = 0x40000000;
      v37[2] = __icu_rules_copy_block_invoke;
      v37[3] = &unk_1E5AEF3B0;
      v37[4] = &v46;
      v37[5] = &v42;
      v37[6] = &v38;
      _icu_rules_base_dump((uint64_t)v17, (uint64_t)v55, 0, (uint64_t)v37);
      uint64_t v20 = v43[3] + v47[3] + v39[3];
      if (sCacheDirFd != -1)
      {
        uint64_t v21 = openCacheFile(v5, v4, v3, 1);
        if (v21 != -1)
        {
          int v22 = v21;
          size_t v23 = v20 + 88;
          if (!_fd_ftruncate(v21, v20 + 88))
          {
            uint64_t v26 = random();
            uint64_t v27 = (uint64_t *)mmap((void *)(v26 << 12), v20 + 88, 3, 1, v22, 0);
            if (v27 != (uint64_t *)-1)
            {
              UChar32 v24 = v27;
              uint64_t v29 = 2;
              *uint64_t v27 = 2;
              v27[1] = (uint64_t)v27;
              v27[2] = v23;
              unint64_t v25 = v27 + 3;
              close(v22);
              if (v25) {
                goto LABEL_31;
              }
              goto LABEL_30;
            }
            close(v22);
          }
        }
      }
      uint64_t v29 = 0;
      UChar32 v24 = 0;
      size_t v23 = 0;
LABEL_30:
      unint64_t v25 = malloc_type_calloc(1uLL, v20 + 64, 0x7EEC0FBFuLL);
LABEL_31:
      v36[0] = 0;
      v36[1] = v36;
      v36[2] = 0x2000000000;
      v36[3] = 0;
      v34[0] = 0;
      v34[1] = v34;
      v34[2] = 0x2000000000;
      uint64_t v35 = 0;
      uint64_t v35 = v47[3];
      v32[0] = 0;
      v32[1] = v32;
      v32[2] = 0x2000000000;
      uint64_t v33 = 0;
      uint64_t v33 = v43[3] + v35;
      bzero(&__buf, 0x2000uLL);
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 0x40000000;
      v31[2] = __icu_rules_copy_block_invoke_2;
      v31[3] = &unk_1E5AEF3D8;
      v31[4] = v36;
      v31[5] = v34;
      v31[6] = &v46;
      v31[7] = &v42;
      v31[8] = v32;
      v31[9] = v25;
      v31[10] = &__buf;
      v31[11] = v20;
      _icu_rules_base_dump((uint64_t)v17, (uint64_t)v55, 0, (uint64_t)v31);
      if (v24)
      {
        fd_msync(v24, v23, 1, 1);
        *UChar32 v24 = v29;
        v24[1] = (uint64_t)v24;
        v24[2] = v23;
        fd_msync(v24, 0x18uLL, 1, 1);
        mprotect(v24, v23, 1);
      }
      _Block_object_dispose(v32, 8);
      _Block_object_dispose(v34, 8);
      _Block_object_dispose(v36, 8);
      _Block_object_dispose(&v38, 8);
      _Block_object_dispose(&v42, 8);
      _Block_object_dispose(&v46, 8);
      goto LABEL_35;
    }
  }
  return result;
}

unint64_t icu_locale_get_collation(unint64_t result, int a2, int a3)
{
  if (result)
  {
    uint64_t v3 = a3 ^ 1u;
    uint64_t v4 = 2;
    if (!a3) {
      uint64_t v4 = 3;
    }
    if (!a2) {
      uint64_t v3 = v4;
    }
    unint64_t v5 = (atomic_ullong *)(result + 8 * v3 + 16);
    if (!atomic_load((unint64_t *)v5))
    {
      unint64_t v7 = icu_open_collation();
      uint64_t v8 = 0;
      atomic_compare_exchange_strong(v5, (unint64_t *)&v8, v7);
      if (v8) {
        ucol_close();
      }
    }
    return atomic_load((unint64_t *)v5);
  }
  return result;
}

int *_icu_search_context_add_type(int *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (!v4)
  {
    if ((a2 & 0x24) != 0) {
      return result;
    }
    goto LABEL_19;
  }
  uint64_t v5 = *((void *)result + 3) + 32 * v4;
  int v8 = *(_DWORD *)(v5 - 32);
  int v6 = (_DWORD *)(v5 - 32);
  int v7 = v8;
  if ((v8 - 1) > 1)
  {
    if (v7 == 4)
    {
      if (a2 == 4) {
        return result;
      }
      if (a2 == 1)
      {
        *int v6 = 1;
        return result;
      }
    }
    else if ((a2 & 0x24) != 0 && (v7 & 0x60) != 0)
    {
      return result;
    }
    goto LABEL_19;
  }
  if (v7 != 2 && a2 != 1 && a2 != 4)
  {
LABEL_19:
    uint64_t result = (int *)_icu_search_context_grow(result);
    if (a2 == 32) {
      int v11 = 28672;
    }
    else {
      int v11 = 0;
    }
    uint64_t v12 = v3[2];
    uint64_t v13 = *((void *)v3 + 3) + 32 * v12;
    *(_DWORD *)(v13 + 24) = v11;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0;
    v3[2] = v12 + 1;
    *(_DWORD *)uint64_t v13 = a2;
  }
  return result;
}

uint64_t icu_term_key_starts(uint64_t a1, int8x8_t *a2, const char *a3, int a4, char *a5, int a6, int *a7, _DWORD *a8, int a9)
{
  int v12 = a4;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (a4 == -1) {
    int v12 = strlen(a3);
  }
  *a7 = 0;
  *a8 = 0;
  bzero(v62, 0x400uLL);
  if (v12 < 1 || a9 < 2)
  {
    uint64_t v16 = 0;
    *a7 = v12;
    *a8 = a6;
    return v16;
  }
  int v56 = a7;
  int v57 = v12;
  size_t v54 = a2;
  char v14 = 0;
  int v55 = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 1;
  do
  {
    int v18 = utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)a3[v15] >> 4];
    int v61 = 0;
    int v19 = v15 + v18;
    uint64_t v20 = icu_build_pattern_key(a1, a3, v15 + v18, v62, 1024, &v61);
    uint64_t v21 = v20;
    int v22 = v61;
    if (!v61 || v61 > a6 || memcmp(v20, a5, v61))
    {
      char v14 = 0;
      goto LABEL_10;
    }
    if (v55 != v22)
    {
      if (v14)
      {
        int v24 = a3[v15];
        if ((a3[v15] & 0x80000000) == 0) {
          goto LABEL_27;
        }
        unint64_t v25 = (unint64_t)a3[v15] >> 4;
        char v26 = ~(_BYTE)v25;
        uint64_t v27 = utf8_byte_length_utf8_len_table_2[v25];
        int v24 = (utf8_to_code_point_utf8_first_char_mask_1[v27] & v24);
        if ((v26 & 0xC) != 0) {
          goto LABEL_27;
        }
        uint64_t v27 = v27 <= 2 ? 2 : v27;
        uint64_t v28 = v27 - 1;
        uint64_t v29 = &a3[v15 + 1];
        do
        {
          char v30 = *v29++;
          int v24 = v30 & 0x3F | (v24 << 6);
          --v28;
        }
        while (v28);
        if (v24 >= 0x10000)
        {
          unsigned int v32 = v24 - 917760;
          unsigned int v33 = v24 - 127995;
          if (v32 < 0xF0 || v33 < 5) {
            goto LABEL_34;
          }
        }
        else
        {
LABEL_27:
          BOOL v31 = (v24 - 12441) >= 4 && (v24 - 65438) >= 2;
          if (!v31 || unicode_combinable((unsigned __int16)v24)) {
            goto LABEL_34;
          }
        }
      }
      uint64_t v16 = v17;
    }
LABEL_34:
    v56[(int)v16] = v19;
    a8[(int)v16] = v22;
    char v14 = 1;
    int v55 = v22;
LABEL_10:
    if (v21 != v62) {
      free(v21);
    }
    uint64_t v17 = (v16 + 1);
    BOOL v23 = v19 < v57 && (int)v17 < a9;
    int v15 = v19;
  }
  while (v23);
  v56[(int)v16] = v57;
  a8[(int)v16] = a6;
  if ((int)v16 >= 1)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 1;
    uint64_t v37 = v54;
    int v53 = a6;
    do
    {
      uint64_t v38 = v35;
      uint64_t v39 = &a8[v35];
      uint64_t v40 = *v39;
      int v41 = _icu_rules_max_expansion(v37, (unsigned __int8 *)&a5[v40], a6 - (int)v40, 0) + v40;
      if (v41 > a8[++v35])
      {
        if (v38 >= (int)v16)
        {
LABEL_48:
          int v44 = 0;
        }
        else
        {
          uint64_t v42 = v36;
          while (1)
          {
            int v43 = a8[v42];
            if (v43 >= v41) {
              break;
            }
            if (v16 + 1 == ++v42) {
              goto LABEL_48;
            }
          }
          if (v43 == v41) {
            int v44 = v42;
          }
          else {
            int v44 = 0;
          }
        }
        BOOL v45 = v44 != 0;
        uint64_t v46 = v44;
        if (v44 >= (int)v16) {
          goto LABEL_59;
        }
        uint64_t v47 = v56[v44];
        int v61 = 0;
        uint64_t v48 = icu_build_pattern_key(a1, &a3[v47], v57 - (int)v47, v62, 1024, &v61);
        uint64_t v49 = v48;
        uint64_t v50 = (int)a8[v46];
        size_t v51 = (int)a8[(int)v16] - v50;
        if (v51 != v61 || memcmp(v48, &a5[v50], v51)) {
          BOOL v45 = 0;
        }
        a6 = v53;
        if (v49 != v62) {
          free(v49);
        }
        if (v45)
        {
LABEL_59:
          memmove(v39 + 1, &a8[v46], 4 * ((int)v16 - (int)v46 + 1));
          memmove(&v56[v38 + 1], &v56[v46], 4 * ((int)v16 - (int)v46 + 1));
          uint64_t v16 = (v16 + v35 - v46);
        }
        uint64_t v37 = v54;
      }
      ++v36;
    }
    while (v35 < (int)v16);
  }
  return v16;
}

void *icu_build_pattern_key(uint64_t a1, const char *a2, int32_t a3, void *a4, int a5, _DWORD *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v16 = 0;
  memset(&v15, 0, sizeof(v15));
  uiter_setUTF8(&v15, a2, a3);
  uint64_t v17 = 0;
  if (!a4 || (uint64_t v9 = a4, !a5))
  {
    a5 = 32;
    uint64_t v9 = malloc_type_malloc(0x20uLL, 0xA713544AuLL);
  }
  int SortKeyPart = ucol_nextSortKeyPart();
  if (SortKeyPart >= a5)
  {
    do
    {
      size_t v11 = SortKeyPart;
      if (v9 == a4)
      {
        uint64_t v9 = malloc_type_malloc(SortKeyPart + a5, 0xF6FAFB9EuLL);
        memcpy(v9, a4, v11);
      }
      else
      {
        uint64_t v9 = malloc_type_realloc(v9, SortKeyPart + a5, 0xB8EEDADFuLL);
      }
      int v12 = ucol_nextSortKeyPart();
      int SortKeyPart = v12 + v11;
    }
    while (v12 >= a5);
  }
  if (SortKeyPart)
  {
    uint64_t v13 = SortKeyPart - 1;
    if (*((unsigned char *)v9 + v13)) {
      LODWORD(v13) = SortKeyPart;
    }
  }
  else
  {
    LODWORD(v13) = 0;
  }
  *a6 = v13;
  return v9;
}

uint64_t _icu_rules_max_expansion(int8x8_t *a1, unsigned __int8 *a2, int a3, unsigned int a4)
{
  if (a3)
  {
    unint64_t v6 = *a2;
    if ((*(unsigned __int32 *)((char *)a1[1].i32 + ((v6 >> 3) & 0x1C)) >> v6))
    {
      uint64_t v7 = 0;
      int v8 = a1 + 1;
      unint64_t v9 = v6 >> 6;
      if ((v6 >> 6) != 1)
      {
        if (v9 != 2)
        {
          if (v9 != 3) {
            goto LABEL_9;
          }
          uint8x8_t v10 = (uint8x8_t)vcnt_s8(a1[3]);
          v10.i16[0] = vaddlv_u8(v10);
          uint64_t v7 = v10.u32[0];
        }
        uint8x8_t v11 = (uint8x8_t)vcnt_s8(a1[2]);
        v11.i16[0] = vaddlv_u8(v11);
        v7 += v11.u32[0];
      }
      uint8x8_t v12 = (uint8x8_t)vcnt_s8(*v8);
      v12.i16[0] = vaddlv_u8(v12);
      v7 += v12.u32[0];
LABEL_9:
      uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v8[v9] & ~(-1 << v6)));
      v13.i16[0] = vaddlv_u8(v13);
      uint64_t result = _icu_rules_max_expansion(*(void *)&a1[v13.u32[0] + 6 + v7], a2 + 1, (a3 - 1), a4 + 1);
      if (result) {
        return result;
      }
    }
  }
  if (*a1) {
    return a4;
  }
  else {
    return 0;
  }
}

uint64_t unicode_combinable(unsigned int a1)
{
  if (a1 < 0x300) {
    return 0;
  }
  int v1 = __CFUniCharCombiningBitmap[(unint64_t)a1 >> 8];
  if (!__CFUniCharCombiningBitmap[(unint64_t)a1 >> 8]) {
    return 0;
  }
  if (v1 == 255) {
    return 1;
  }
  return (__CFUniCharCombiningBitmap[(a1 >> 3) + 256 + 32 * v1 - 32] >> (a1 & 7)) & 1;
}

__CFString *_MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a2 + 32))
  {
    int v8 = _MDLogForCategoryDefault();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v42 = *(unsigned __int16 *)(a2 + 32);
      *(_DWORD *)buf = 136315906;
      *(void *)&buf[4] = "CFTypeRef _MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator(CFAllocatorRef, MDPlistBytes"
                           "Ref, CFIndex, const MDPlistBytesDeserializationCallbacks *, void *)";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v42;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = a3;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a5;
      _os_log_error_impl(&dword_1A334F000, v8, OS_LOG_TYPE_ERROR, "%s: plist bad (line %d); idx = %ld; ctx = %p",
        buf,
        0x26u);
    }
    unint64_t v9 = __error();
    uint8x8_t v10 = 0;
    int v11 = 94;
LABEL_25:
    *unint64_t v9 = v11;
    return v10;
  }
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  if (v12 <= 0xF)
  {
    *(void *)(a2 + 48) = 0;
LABEL_22:
    char v30 = _MDLogForCategoryDefault();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
      _MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator_cold_1((uint64_t)a5, a3);
    }
    unint64_t v9 = __error();
    uint8x8_t v10 = 0;
    int v11 = 33;
    goto LABEL_25;
  }
  int v15 = (v12 >> 3) - 2;
  int v16 = (_DWORD *)(*(void *)(a2 + 8) + 8);
  *(void *)(a2 + 48) = v16;
  uint64_t v17 = a3 + 1;
  while (--v17 >= 1)
  {
    unsigned int v18 = *v16 + 1;
    BOOL v19 = *v16 < 0x7FFFFFFFu;
    BOOL v20 = __OFSUB__(v15, v18);
    v15 -= v18;
    if ((v15 < 0) ^ v20 | (v15 == 0)) {
      int v21 = 0;
    }
    else {
      int v21 = 1;
    }
    v16 += 2 * v18;
    int v22 = v19 & v21;
    if (v22) {
      BOOL v23 = v16;
    }
    else {
      BOOL v23 = 0;
    }
    *(void *)(a2 + 48) = v23;
    if ((v22 & 1) == 0)
    {
      int v16 = 0;
      break;
    }
  }
  if (!v16) {
    goto LABEL_22;
  }
  uint64_t v24 = *(void *)v16;
  if (*(int *)(a2 + 68) >= 1)
  {
    *(_DWORD *)(a2 + 68) = 0;
    os_unfair_lock_lock((os_unfair_lock_t)&_MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator_lock);
    unint64_t v25 = *(void **)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)&_MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator_lock);
    free(v25);
    int v16 = *(_DWORD **)(a2 + 48);
  }
  char v26 = (uint64_t *)&v16[2 * (v24 >> 32)];
  *(void *)(a2 + 56) = v26;
  uint64_t v27 = *v26;
  *(_DWORD *)(a2 + 64) = v27 & 0xFFFFFF;
  *(void *)buf = a2;
  uint64_t v28 = malloc_type_calloc(v27 & 0xFFFFFF, 8uLL, 0xC0040B8AA526DuLL);
  *(void *)&buf[8] = v28;
  *(void *)&buf[16] = 0;
  if (*(void *)(a4 + 72)) {
    uint64_t v29 = malloc_type_malloc(8 * *(int *)(a2 + 64), 0xC0040B8AA526DuLL);
  }
  else {
    uint64_t v29 = 0;
  }
  *(void *)&buf[24] = v29;
  long long v32 = *(_OWORD *)(a4 + 32);
  long long v33 = *(_OWORD *)(a4 + 64);
  long long v34 = *(_OWORD *)(a4 + 80);
  long long v58 = *(_OWORD *)(a4 + 48);
  long long v59 = v33;
  long long v60 = v34;
  long long v35 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&buf[32] = *(_OWORD *)a4;
  long long v56 = v35;
  long long v57 = v32;
  int v61 = a5;
  uint64_t v62 = a1;
  uint64_t v63 = malloc_default_zone();
  if (*((void *)&v60 + 1)) {
    *(void *)&buf[40] = _MDPlistBytesCreateUniquedString;
  }
  if (!v28)
  {
    int v41 = _MDLogForCategoryDefault();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      _MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator_cold_2((uint64_t)a5, a3);
    }
    unint64_t v9 = __error();
    uint8x8_t v10 = 0;
    int v11 = 12;
    goto LABEL_25;
  }
  int v44 = 1;
  uint8x8_t v10 = copyObject(buf, &v44, 0);
  uint64_t v36 = *(void **)&buf[24];
  if (*(void *)&buf[24])
  {
    uint64_t v37 = *(unsigned int *)&buf[16];
    if (*(int *)&buf[16] >= 1)
    {
      uint64_t v38 = *(CFTypeRef **)&buf[24];
      do
      {
        if (!*v38) {
          break;
        }
        CFRelease(*v38++);
        --v37;
      }
      while (v37);
    }
    free(v36);
  }
  free(*(void **)&buf[8]);
  if (*(_WORD *)(a2 + 32))
  {
    uint64_t v39 = _MDLogForCategoryDefault();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      int v43 = *(unsigned __int16 *)(a2 + 32);
      *(_DWORD *)BOOL v45 = 136316162;
      uint64_t v46 = "CFTypeRef _MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator(CFAllocatorRef, MDPlistBytesRef, CFIndex, c"
            "onst MDPlistBytesDeserializationCallbacks *, void *)";
      __int16 v47 = 1024;
      int v48 = v43;
      __int16 v49 = 2048;
      uint64_t v50 = a3;
      __int16 v51 = 1024;
      int v52 = v44;
      __int16 v53 = 2048;
      size_t v54 = a5;
      _os_log_error_impl(&dword_1A334F000, v39, OS_LOG_TYPE_ERROR, "%s: plist copy bad (line %d); idx = %ld; quadIdx = %d; ctx = %p",
        v45,
        0x2Cu);
      if (!v10) {
        goto LABEL_41;
      }
    }
    else if (!v10)
    {
LABEL_41:
      uint8x8_t v10 = 0;
      *__error() = 94;
      goto LABEL_42;
    }
    CFRelease(v10);
    goto LABEL_41;
  }
LABEL_42:
  if (v10 == (__CFString *)*MEMORY[0x1E4F1D260] && sel_enumerateObjectsUsingBlock_ != a5)
  {
    CFRelease(v10);
    return 0;
  }
  return v10;
}

uint64_t _MDLogForCategoryDefault()
{
  if (_MDLogForCategoryDefault_onceToken != -1) {
    dispatch_once(&_MDLogForCategoryDefault_onceToken, &__block_literal_global_4);
  }
  return _MDLogForCategoryDefault_log;
}

dispatch_data_t _MDPlistContainerCopyDispatchData(dispatch_data_t result, size_t *a2)
{
  __dst[1] = *(void **)MEMORY[0x1E4F143B8];
  if (!result) {
    goto LABEL_4;
  }
  dispatch_data_t v3 = result;
  if (LOBYTE(result[2].isa))
  {
LABEL_3:
    uint64_t result = 0;
LABEL_4:
    size_t isa = 0;
    goto LABEL_5;
  }
  size_t isa = (size_t)result[4].isa;
  if (isa)
  {
    vm_size_t v5 = (isa + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
    if (BYTE1(result[7].isa) && !BYTE2(result[7].isa))
    {
      BYTE1(result[7].isa) = 0;
      Class v6 = result[6].isa;
      uint64_t v7 = (char *)result[5].isa + isa;
      if ((unint64_t)v7 > v5) {
        MEMORY[0x1A6247730](*MEMORY[0x1E4F14960], (char *)v6 + v5, &v7[-v5]);
      }
    }
    else
    {
      __dst[0] = 0;
      Class v6 = 0;
      if (!vm_allocate(*MEMORY[0x1E4F14960], (vm_address_t *)__dst, v5, -251658239))
      {
        Class v6 = (Class)__dst[0];
        memcpy(__dst[0], v3[6].isa, isa);
      }
    }
    if (!v6) {
      goto LABEL_3;
    }
    uint64_t result = dispatch_data_create(v6, v5, 0, (dispatch_block_t)*MEMORY[0x1E4F14408]);
  }
  else
  {
    uint64_t result = 0;
  }
LABEL_5:
  if (a2) {
    *a2 = isa;
  }
  return result;
}

void _MDBundleUtilsClearCache(int a1)
{
  localizedCacheValueClear(a1);
}

uint64_t _MDPlistGetPlistObjectSize(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 20);
  if ((v1 & 0xF0) == 0xE0) {
    return 4;
  }
  if ((*(unsigned char *)(a1 + 20) & 0x80) != 0) {
    return *(unsigned int *)(*(void *)a1 + *(unsigned int *)(a1 + 16)) + 4;
  }
  return (v1 & 0xF) + 5;
}

uint64_t _MDPlistBytesBeginPlist(uint64_t a1)
{
  do
  {
    if (*(_WORD *)(a1 + 32) || (*(unsigned char *)(a1 + 34) & 1) == 0) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 80) != -1)
    {
      *(_WORD *)(a1 + 32) = 2329;
      unint64_t v9 = _MDLogForCategoryDefault();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        _MDPlistBytesBeginPlist_cold_1();
      }
      return 0;
    }
    unint64_t v2 = *(void *)(a1 + 112);
    if (v2 + 16 < *(void *)(a1 + 120)) {
      goto LABEL_7;
    }
  }
  while (!_MDPlistBytesGrowCapacityVM(a1, 0x10u, 0));
  unint64_t v2 = *(void *)(a1 + 112);
LABEL_7:
  uint64_t v3 = *MEMORY[0x1E4F14B00];
  uint64_t v4 = -*MEMORY[0x1E4F14B00];
  if ((((v2 + 16) ^ v2) & v4) != 0 && (((v2 + 16) >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
  {
    size_t v5 = 16 << *MEMORY[0x1E4F14AF8];
    if (v5 >= 4 * v3)
    {
      madvise((void *)((v3 - 1 + v2) & v4), v5, 3);
      unint64_t v2 = *(void *)(a1 + 112);
    }
  }
  *(void *)unint64_t v2 = 0x6D64303331323334;
  Class v6 = (void *)(v2 + 8);
  *(void *)(a1 + 112) = v6;
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void **)(a1 + 112);
  *uint64_t v7 = 0;
  *(void *)(a1 + 112) = v7 + 1;
  uint64_t v8 = 1;
  *(_DWORD *)(a1 + 64) = 1;
  **(void **)(a1 + 56) = 2281701377;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 104) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
  *(unsigned char *)(a1 + 34) |= 2u;
  return v8;
}

uint64_t icu_search_match(uint64_t result, const char *a2, void *a3, uint64_t *a4, int a5)
{
  uint64_t v476 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  size_t v5 = (unsigned __int8 *)a2;
  uint64_t v6 = result;
  uint64_t result = 0;
  if (!a2) {
    return result;
  }
  unint64_t v7 = *(unsigned int *)(v6 + 8);
  if (!v7) {
    return result;
  }
  if (*(unsigned char *)(v6 + 69))
  {
    if (a3) {
      unint64_t v9 = a3;
    }
    else {
      unint64_t v9 = v474;
    }
    if (a4) {
      uint8x8_t v10 = a4;
    }
    else {
      uint8x8_t v10 = (uint64_t *)v475;
    }
    return fuzzy_matches(v6, a2, *(_DWORD *)(v6 + 72), v9, v10);
  }
  int v463 = a5;
  v460 = a3;
  v461 = a4;
  int v11 = &v458;
  MEMORY[0x1F4188790]((void *)v7, 0, 16 * v7, a3, a4);
  uint8x8_t v13 = &v458 - 2 * v12;
  bzero(v13, v14);
  uint64_t v470 = 0;
  uint64_t v471 = 0;
  int v15 = 0;
  int v464 = 0;
  *uint8x8_t v13 = 0;
  v13[1] = (uint64_t)v5;
  v466 = v5;
  v467 = v13;
  uint64_t v16 = *(void *)(v6 + 24);
  int v468 = *(_DWORD *)v16;
  long long v469 = *(_OWORD *)(v16 + 8);
  unsigned int v17 = *(_DWORD *)(v16 + 24);
  v465 = v5;
LABEL_13:
  while (2)
  {
    switch(v15)
    {
      case 0:
        int v71 = *(_DWORD *)(v6 + 8);
        if ((int)v471 >= v71)
        {
          unint64_t v107 = *v5;
          if (v107 < 2) {
            goto LABEL_747;
          }
          LOBYTE(v108) = *(unsigned char *)(v6 + 66);
          if (!(_BYTE)v108)
          {
            v280 = v467;
            goto LABEL_717;
          }
          if ((v107 & 0x80) != 0)
          {
            uint64_t v285 = utf8_byte_length_utf8_len_table_2[v107 >> 4];
            int v286 = utf8_to_code_point_utf8_first_char_mask_1[v285] & v107;
            unint64_t v109 = (unint64_t)v465;
            if ((~(v107 >> 4) & 0xC) != 0)
            {
              LODWORD(v107) = utf8_to_code_point_utf8_first_char_mask_1[v285] & v107;
            }
            else
            {
              if (v285 <= 2) {
                uint64_t v287 = 2;
              }
              else {
                uint64_t v287 = utf8_byte_length_utf8_len_table_2[v107 >> 4];
              }
              uint64_t v288 = v287 - 1;
              v289 = (char *)(v5 + 1);
              do
              {
                char v290 = *v289++;
                LODWORD(v107) = v290 & 0x3F | (v286 << 6);
                int v286 = v107;
                --v288;
              }
              while (v288);
            }
          }
          else
          {
            unint64_t v109 = (unint64_t)v465;
          }
          int v336 = u_charType(v107);
          int v337 = 1 << v336;
          if (((1 << v336) & 0x7000) != 0) {
            goto LABEL_747;
          }
          int v338 = v336;
          v339 = v5;
          if ((unint64_t)v5 > v109)
          {
            v340 = v5;
            do
            {
              while (1)
              {
                v339 = v340 - 1;
                unint64_t v341 = *(v340 - 1);
                if ((v341 & 0xC0) != 0x80) {
                  break;
                }
LABEL_588:
                --v340;
                if ((unint64_t)v339 <= v109) {
                  goto LABEL_600;
                }
              }
              if ((v341 & 0x80) == 0) {
                break;
              }
              char v342 = ~(v341 >> 4);
              uint64_t v343 = utf8_byte_length_utf8_len_table_2[v341 >> 4];
              int v344 = utf8_to_code_point_utf8_first_char_mask_1[v343] & v341;
              if ((v342 & 0xC) != 0) {
                goto LABEL_584;
              }
              uint64_t v345 = 0;
              uint64_t v343 = v343 <= 2 ? 2 : v343;
              uint64_t v346 = v343 - 1;
              do
                int v344 = v340[v345++] & 0x3F | (v344 << 6);
              while (v346 != v345);
              if (v344 < 0x10000)
              {
LABEL_584:
                if ((v344 - 12441) < 4 || (v344 - 65438) < 2) {
                  goto LABEL_588;
                }
                if (unicode_combinable((unsigned __int16)v344)) {
                  BOOL v349 = (unint64_t)v339 > v109;
                }
                else {
                  BOOL v349 = 0;
                }
              }
              else
              {
                BOOL v349 = ((v344 - 127995) < 5 || (v344 - 917760) < 0xF0)
                    && (unint64_t)v339 > v109;
              }
              v340 = v339;
            }
            while (v349);
          }
LABEL_600:
          UChar32 v350 = utf8_to_code_point(v339);
          int v351 = u_charType(v350);
          int v352 = 1 << v351;
          if (((1 << v351) & 0x3E) != 0)
          {
            v280 = v467;
            if ((v337 & 0x3E) == 0)
            {
              int v108 = utf8_first_char_combining(v5) ^ 1;
              v464 |= v108;
              goto LABEL_717;
            }
            if ((v338 & 0xFFFFFFFE) == 4) {
              goto LABEL_747;
            }
            if (v338 == 1)
            {
              if (v351 != 1) {
                goto LABEL_747;
              }
              UChar32 v353 = utf8_to_code_point(&v5[utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*v5 >> 4]]);
              BOOL v354 = u_charType(v353) == 2;
LABEL_713:
              int v108 = v354;
              v464 |= v108;
LABEL_717:
              if (v108) {
                goto LABEL_746;
              }
              unsigned int v410 = v470 - 1;
              if ((int)v470 < 1) {
                goto LABEL_746;
              }
              uint64_t v470 = (v470 - 1);
              v411 = &v280[2 * v410];
              int v15 = *(_DWORD *)v411;
              uint64_t v284 = *((int *)v411 + 1);
              size_t v5 = (unsigned __int8 *)v411[1];
LABEL_720:
              uint64_t v412 = *(void *)(v6 + 24) + 32 * v284;
              int v468 = *(_DWORD *)v412;
              long long v469 = *(_OWORD *)(v412 + 8);
              unsigned int v17 = *(_DWORD *)(v412 + 24);
              goto LABEL_721;
            }
          }
          else
          {
            v280 = v467;
            if (v351 != v338)
            {
              if ((v352 & 0x30F80000) != 0)
              {
                BOOL v354 = (v337 & 0x30F80000) == 0;
              }
              else
              {
                if ((v352 & 0xF000000) == 0) {
                  goto LABEL_747;
                }
                BOOL v354 = (v337 & 0xF000000) == 0;
              }
              goto LABEL_713;
            }
          }
          LOBYTE(v108) = 0;
          goto LABEL_717;
        }
        if (v468 > 15)
        {
          if (v468 > 63)
          {
            if (v468 == 64)
            {
              if (v471 || v71 <= 1)
              {
                __message_assert("%s:%u: failed assertion '%s' %s %s level: %d count: %d", "icu_utils.c", 3000, "cur_state.level==0 && (cur_state.level+1<ctx->count)", "", *(const char **)(v6 + 16), v471, *(_DWORD *)(v6 + 8));
              }
              else
              {
                uint64_t v471 = 0;
                int v331 = *(_DWORD *)(*(void *)(v6 + 24) + 32);
                int v15 = 7;
                int v468 = 64;
                if (v331 == 8) {
                  continue;
                }
                if (v331 == 16)
                {
                  int v15 = 6;
                  continue;
                }
                __message_assert("%s:%u: failed assertion '%s' %s %s level: %d count: %d", "icu_utils.c", 3006, "false", "", *(const char **)(v6 + 16), 0, v71);
              }
            }
            else
            {
              if (v468 == 128)
              {
                uint64_t v284 = (int)v471 + 1;
                if ((int)v284 < v71)
                {
                  int v15 = 0;
                  goto LABEL_720;
                }
                int v15 = 0;
                int v468 = 128;
LABEL_721:
                uint64_t v471 = v284;
                continue;
              }
LABEL_823:
              __message_assert("%s:%u: failed assertion '%s' %s %s level: %d count: %d", "icu_utils.c", 3020, "false", "", *(const char **)(v6 + 16), v471, *(_DWORD *)(v6 + 8));
            }
LABEL_761:
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          int v15 = 2;
          if (v468 != 16)
          {
            if (v468 != 32) {
              goto LABEL_823;
            }
            int v15 = 11;
          }
          continue;
        }
        int v15 = 1;
        switch(v468)
        {
          case 1:
            uint64_t v72 = (int)v471 + 1;
            if ((int)v72 >= v71)
            {
              __message_assert("%s:%u: failed assertion '%s' %s %s level: %d count: %d", "icu_utils.c", 2988, "cur_state.level+1<ctx->count", "", *(const char **)(v6 + 16), v471, *(_DWORD *)(v6 + 8));
            }
            else
            {
              int v73 = *(_DWORD *)(*(void *)(v6 + 24) + 32 * v72);
              int v15 = 5;
              int v468 = 1;
              switch(v73)
              {
                case 8:
                  continue;
                case 16:
                  int v15 = 4;
                  continue;
                case 32:
                  int v15 = 12;
                  int v468 = 1;
                  continue;
              }
              __message_assert("%s:%u: failed assertion '%s' %s %s level: %d count: %d", "icu_utils.c", 2996, "false", "", *(const char **)(v6 + 16), v471, v71);
            }
            goto LABEL_761;
          case 2:
            if ((int)v471 + 1 < v71)
            {
              __message_assert("%s:%u: failed assertion '%s' %s %s level: %d count: %d", "icu_utils.c", 2917, "cur_state.level+1>=ctx->count", "", *(const char **)(v6 + 16), v471, *(_DWORD *)(v6 + 8));
              goto LABEL_761;
            }
            if (*v5 < 2u) {
              goto LABEL_747;
            }
            if (!*(_DWORD *)(v6 + 40))
            {
              if (*(unsigned char *)(v6 + 65))
              {
                int v15 = 10;
                int v468 = 2;
                continue;
              }
              if (!utf8_first_char_combining(v5)) {
                goto LABEL_747;
              }
              v268 = v467;
              int v330 = v470;
              if (!v470) {
                goto LABEL_746;
              }
              goto LABEL_552;
            }
            int char_combining = utf8_first_char_combining(v5);
            v268 = v467;
            if (!char_combining) {
              goto LABEL_782;
            }
            if (*(unsigned char *)(v6 + 65))
            {
              v5 += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*v5 >> 4];
              for (LODWORD(v428) = *v5; (char)*v5 < 0; LODWORD(v428) = *v5)
              {
                unint64_t v429 = (unint64_t)v428 >> 4;
                uint64_t v430 = utf8_byte_length_utf8_len_table_2[v429];
                int v431 = utf8_to_code_point_utf8_first_char_mask_1[v430] & v428;
                if ((~(_BYTE)v429 & 0xC) != 0) {
                  goto LABEL_769;
                }
                uint64_t v432 = v430 <= 2 ? 2 : utf8_byte_length_utf8_len_table_2[v429];
                uint64_t v433 = v432 - 1;
                v434 = (char *)(v5 + 1);
                do
                {
                  char v435 = *v434++;
                  int v431 = v435 & 0x3F | (v431 << 6);
                  --v433;
                }
                while (v433);
                if (v431 < 0x10000)
                {
LABEL_769:
                  if ((v431 - 12441) >= 4 && (v431 - 65438) >= 2)
                  {
                    if (!unicode_combinable((unsigned __int16)v431)) {
                      goto LABEL_782;
                    }
                    unint64_t v429 = (unint64_t)*v5 >> 4;
                  }
                }
                else
                {
                  unsigned int v437 = v431 - 917760;
                  unsigned int v438 = v431 - 127995;
                  if (v437 >= 0xF0 && v438 > 4) {
                    goto LABEL_782;
                  }
                }
                v5 += utf8_byte_length_noerror_utf8_len_table_2[v429];
              }
            }
            else
            {
              if (v470)
              {
                int v330 = v470;
LABEL_552:
                uint64_t v267 = v330 - 1;
LABEL_423:
                v269 = &v268[2 * v267];
                int v15 = *(_DWORD *)v269;
                uint64_t v270 = *((int *)v269 + 1);
                size_t v5 = (unsigned __int8 *)v269[1];
                uint64_t v271 = *(void *)(v6 + 24) + 32 * v270;
                int v468 = *(_DWORD *)v271;
                long long v469 = *(_OWORD *)(v271 + 8);
                unsigned int v17 = *(_DWORD *)(v271 + 24);
                uint64_t v470 = v267;
                uint64_t v471 = v270;
                continue;
              }
LABEL_782:
              LODWORD(v428) = *v5;
            }
            if (v428 >= 2)
            {
              int v440 = *(_DWORD *)(v6 + 40);
              while (v440)
              {
                if ((v428 & 0x80) != 0)
                {
                  unint64_t v441 = (unint64_t)v428 >> 4;
                  char v442 = ~(_BYTE)v441;
                  uint64_t v443 = utf8_byte_length_utf8_len_table_2[v441];
                  int v444 = utf8_to_code_point_utf8_first_char_mask_1[v443] & v428;
                  if ((v442 & 0xC) != 0)
                  {
                    LODWORD(v428) = utf8_to_code_point_utf8_first_char_mask_1[v443] & v428;
                  }
                  else
                  {
                    if (v443 <= 2) {
                      uint64_t v443 = 2;
                    }
                    else {
                      uint64_t v443 = v443;
                    }
                    uint64_t v445 = v443 - 1;
                    v446 = (char *)(v5 + 1);
                    do
                    {
                      char v447 = *v446++;
                      LODWORD(v428) = v447 & 0x3F | (v444 << 6);
                      int v444 = v428;
                      --v445;
                    }
                    while (v445);
                  }
                }
                if (((1 << u_charType(v428)) & 0x7000) == 0)
                {
                  unint64_t v448 = (unint64_t)*v5 >> 4;
                  while (1)
                  {
                    v5 += utf8_byte_length_noerror_utf8_len_table_2[v448];
                    LODWORD(v428) = *v5;
                    if (((char)*v5 & 0x80000000) == 0) {
                      break;
                    }
                    unint64_t v448 = (unint64_t)*v5 >> 4;
                    uint64_t v449 = utf8_byte_length_utf8_len_table_2[v448];
                    int v450 = utf8_to_code_point_utf8_first_char_mask_1[v449] & v428;
                    if ((~(_BYTE)v448 & 0xC) != 0) {
                      goto LABEL_805;
                    }
                    uint64_t v451 = v449 <= 2 ? 2 : utf8_byte_length_utf8_len_table_2[v448];
                    uint64_t v452 = 1;
                    do
                      int v450 = v5[v452++] & 0x3F | (v450 << 6);
                    while (v451 != v452);
                    if (v450 < 0x10000)
                    {
LABEL_805:
                      if ((v450 - 12441) >= 4 && (v450 - 65438) >= 2)
                      {
                        int v454 = unicode_combinable((unsigned __int16)v450);
                        unint64_t v428 = *v5;
                        if (!v454) {
                          break;
                        }
                        unint64_t v448 = v428 >> 4;
                      }
                    }
                    else
                    {
                      unsigned int v455 = v450 - 917760;
                      unsigned int v456 = v450 - 127995;
                      if (v455 >= 0xF0 && v456 > 4) {
                        break;
                      }
                    }
                  }
                  --v440;
                  if (v428 >= 2) {
                    continue;
                  }
                }
                goto LABEL_747;
              }
              goto LABEL_746;
            }
LABEL_747:
            v427 = v465;
            if (v460) {
              void *v460 = v465 - v466;
            }
            if (v461) {
              uint64_t *v461 = v5 - v427;
            }
            return 1;
          case 4:
            continue;
          case 8:
            int v15 = 3;
            continue;
          default:
            goto LABEL_823;
        }
      case 1:
      case 10:
        int v41 = (char)*v5;
        if ((v41 & 0x80000000) == 0) {
          goto LABEL_518;
        }
        int v42 = v5;
        while (2)
        {
          unint64_t v43 = v41 >> 4;
          uint64_t v44 = utf8_byte_length_utf8_len_table_2[v43];
          int v45 = (utf8_to_code_point_utf8_first_char_mask_1[v44] & v41);
          if ((~(_BYTE)v43 & 0xC) != 0) {
            goto LABEL_65;
          }
          uint64_t v46 = v44 <= 2 ? 2 : utf8_byte_length_utf8_len_table_2[v43];
          uint64_t v47 = 1;
          do
            int v45 = v42[v47++] & 0x3F | (v45 << 6);
          while (v46 != v47);
          if (v45 < 0x10000)
          {
LABEL_65:
            if ((v45 - 12441) >= 4 && (v45 - 65438) >= 2)
            {
              if (!unicode_combinable((unsigned __int16)v45)) {
                goto LABEL_77;
              }
              unint64_t v43 = (unint64_t)*v42 >> 4;
            }
LABEL_76:
            v42 += utf8_byte_length_noerror_utf8_len_table_2[v43];
            int v41 = (char)*v42;
            if ((v41 & 0x80000000) == 0) {
              goto LABEL_77;
            }
            continue;
          }
          break;
        }
        unsigned int v49 = v45 - 917760;
        unsigned int v50 = v45 - 127995;
        if (v49 < 0xF0 || v50 <= 4) {
          goto LABEL_76;
        }
LABEL_77:
        if (v42 == v5 || v42 == v466) {
          goto LABEL_516;
        }
        v462 = v11;
        uint64_t v52 = 0;
        do
          int v53 = v5[--v52] & 0xC0;
        while (v53 == 128);
        int v54 = *v5;
        if ((char)*v5 < 0)
        {
          unint64_t v55 = (unint64_t)*v5 >> 4;
          char v56 = ~(_BYTE)v55;
          uint64_t v57 = utf8_byte_length_utf8_len_table_2[v55];
          int v58 = (utf8_to_code_point_utf8_first_char_mask_1[v57] & v54);
          if ((v56 & 0xC) != 0)
          {
            int v54 = (utf8_to_code_point_utf8_first_char_mask_1[v57] & v54);
          }
          else
          {
            if (v57 <= 2) {
              uint64_t v59 = 2;
            }
            else {
              uint64_t v59 = v57;
            }
            uint64_t v60 = v59 - 1;
            int v61 = (char *)(v5 + 1);
            do
            {
              char v62 = *v61++;
              int v54 = v62 & 0x3F | (v58 << 6);
              int v58 = v54;
              --v60;
            }
            while (v60);
          }
        }
        if ((v54 - 127995) >= 5 && (uint64_t v318 = *(void *)(v6 + 48)) != 0)
        {
          memset(v474, 0, 32);
          int v473 = 0;
          v319 = icu_build_pattern_key(v318, (const char *)&v5[v52], -(int)v52, v474, 32, &v473);
          memset(v475, 0, 32);
          int v472 = 0;
          v320 = icu_build_pattern_key(*(void *)(v6 + 48), (const char *)&v5[v52], (int)v42 - (int)v5 - (int)v52, v475, 32, &v472);
          BOOL v321 = v473 == v472 && !memcmp(v319, v320, v473);
          int v11 = v462;
          if (v319 != v474) {
            free(v319);
          }
          if (v320 != v475) {
            free(v320);
          }
          if (!v321)
          {
            if (!v470)
            {
              size_t v5 = v42;
              goto LABEL_746;
            }
            v332 = &v467[2 * (int)v470 - 2];
            uint64_t v470 = (int)v470 - 1;
            int v15 = *(_DWORD *)v332;
            uint64_t v333 = *(void *)(v6 + 24) + 32 * *((int *)v332 + 1);
            uint64_t v471 = *((int *)v332 + 1);
            size_t v5 = (unsigned __int8 *)v332[1];
            int v334 = *(_DWORD *)v333;
            long long v469 = *(_OWORD *)(v333 + 8);
            unsigned int v17 = *(_DWORD *)(v333 + 24);
            int v468 = v334;
            if (v463)
            {
              BOOL v335 = v334 == 16 || v334 == 8;
              if (v335 && (v17 & 0x1000) == 0 && *v5 == 32 && v5[1] > 1u) {
                ++v5;
              }
            }
            continue;
          }
LABEL_516:
          size_t v5 = v42;
        }
        else
        {
          size_t v5 = v42;
          int v11 = v462;
        }
LABEL_518:
        if (v15 == 10) {
          goto LABEL_747;
        }
        uint64_t v322 = (int)v471 + 1;
        int v323 = *(_DWORD *)(v6 + 8);
        if ((int)v471 + 1 >= v323) {
          goto LABEL_542;
        }
        unint64_t v324 = *v5;
        switch(v324)
        {
          case 0x2D:
            break;
          case 0xEF:
            if (v5[1] != 188 || v5[2] != 189) {
              goto LABEL_542;
            }
            break;
          case 0xE2:
            if (v5[1] != 128 || (v5[2] & 0xFE) != 0x90) {
              goto LABEL_542;
            }
            break;
          default:
            if (v324 != 32 || (v463 & 1) == 0)
            {
              if (v324 != 46)
              {
LABEL_542:
                int v15 = 0;
                if ((int)v322 < v323)
                {
                  uint64_t v328 = *(void *)(v6 + 24) + 32 * (int)v322;
                  int v468 = *(_DWORD *)v328;
                  long long v469 = *(_OWORD *)(v328 + 8);
                  unsigned int v17 = *(_DWORD *)(v328 + 24);
                }
                uint64_t v471 = v322;
                continue;
              }
              int v325 = 62;
LABEL_532:
              uint64_t v326 = *(void *)(v6 + 24);
              if ((*(_DWORD *)(v326 + 32 * (int)v471 - 8) & v325) != 0
                && (v322 == v323 || (*(_DWORD *)(v326 + 32 * v322 + 24) & v325) != 0))
              {
                v327 = &v5[utf8_byte_length_noerror_utf8_len_table_2[v324 >> 4]];
                if (*v327 < 2u)
                {
                  v5 += utf8_byte_length_noerror_utf8_len_table_2[v324 >> 4];
                }
                else
                {
                  if ((icu_get_char_category_mask(v327) & v325) != 0) {
                    size_t v5 = v327;
                  }
                  int v323 = *(_DWORD *)(v6 + 8);
                }
              }
              goto LABEL_542;
            }
            break;
        }
        int v325 = 3646;
        goto LABEL_532;
      case 2:
        UChar32 v74 = *v5;
        if ((char)*v5 < 0)
        {
          unint64_t v75 = (unint64_t)*v5 >> 4;
          char v76 = ~(_BYTE)v75;
          uint64_t v77 = utf8_byte_length_utf8_len_table_2[v75];
          UChar32 v78 = (utf8_to_code_point_utf8_first_char_mask_1[v77] & v74);
          if ((v76 & 0xC) != 0)
          {
            UChar32 v74 = (utf8_to_code_point_utf8_first_char_mask_1[v77] & v74);
          }
          else
          {
            if (v77 <= 2) {
              uint64_t v77 = 2;
            }
            else {
              uint64_t v77 = v77;
            }
            uint64_t v79 = v77 - 1;
            int v80 = (char *)(v5 + 1);
            do
            {
              char v81 = *v80++;
              UChar32 v74 = v81 & 0x3F | (v78 << 6);
              UChar32 v78 = v74;
              --v79;
            }
            while (v79);
          }
        }
        if (((v17 >> u_charType(v74)) & 1) == 0) {
          goto LABEL_373;
        }
        if (!*(unsigned char *)(v6 + 65) || (uint64_t v173 = v469, (*(unsigned char *)(v469 + 8) & 1) != 0))
        {
          uint64_t v233 = *(unsigned int *)(v469 + 4);
          if (!v233) {
            goto LABEL_373;
          }
          uint64_t v234 = 0;
          while (1)
          {
            uint64_t v235 = *(void *)(*(void *)(v469 + 16) + 8 * v234);
            unsigned int v236 = *(unsigned __int8 *)(v235 + 1);
            if (v236 > *v5) {
              goto LABEL_373;
            }
            if (!*(unsigned char *)(v235 + 1)) {
              break;
            }
            v237 = (unsigned __int8 *)(v235 + 2);
            v238 = v5;
            while (1)
            {
              unsigned int v239 = *v238;
              if (v239 < 2 || v236 != v239) {
                break;
              }
              ++v238;
              unsigned int v241 = *v237++;
              unsigned int v236 = v241;
              if (!v241) {
                goto LABEL_729;
              }
            }
            if (++v234 == v233) {
              goto LABEL_373;
            }
          }
          v238 = v5;
LABEL_729:
          uint64_t v420 = (int)v471 + 1;
          int v421 = *(_DWORD *)(v6 + 8);
          uint64_t v471 = v420;
          if ((int)v420 < v421)
          {
            uint64_t v422 = *(void *)(v6 + 24) + 32 * v420;
            int v423 = *(_DWORD *)v422;
            long long v469 = *(_OWORD *)(v422 + 8);
            unsigned int v17 = *(_DWORD *)(v422 + 24);
            int v468 = v423;
            if (v463)
            {
              BOOL v424 = v423 == 16 || v423 == 8;
              if (v424 && (v17 & 0x1000) == 0 && *v238 == 32 && v238[1] > 1u) {
                ++v238;
              }
            }
          }
          int v15 = 0;
          v425 = &v467[2 * (int)v470];
          int v426 = v471;
          *(_DWORD *)v425 = 0;
          *((_DWORD *)v425 + 1) = v426;
          v425[1] = (uint64_t)v238;
          size_t v5 = v238;
          continue;
        }
        if (!*(_DWORD *)(v469 + 4)) {
          goto LABEL_373;
        }
        unint64_t v174 = 0;
        v462 = v11;
        uint64_t v459 = v469;
        do
        {
          uint64_t v175 = *(void *)(*(void *)(v173 + 16) + 8 * v174);
          unsigned int v178 = *(unsigned __int8 *)(v175 + 1);
          uint64_t v177 = (unsigned char *)(v175 + 1);
          unsigned int v176 = v178;
          unsigned int v179 = *v5;
          if (v178 > v179) {
            break;
          }
          if (!v176)
          {
            v180 = v5;
LABEL_493:
            int v314 = *(_DWORD *)(v6 + 8);
            uint64_t v471 = (int)v471 + 1;
            if ((int)v471 < v314)
            {
              uint64_t v315 = *(void *)(v6 + 24) + 32 * v471;
              int v316 = *(_DWORD *)v315;
              long long v469 = *(_OWORD *)(v315 + 8);
              unsigned int v17 = *(_DWORD *)(v315 + 24);
              int v468 = v316;
              if (v463)
              {
                BOOL v317 = v316 == 16 || v316 == 8;
                if (v317 && (v17 & 0x1000) == 0 && *v180 == 32 && v180[1] > 1u) {
                  ++v180;
                }
              }
            }
            int v15 = 0;
            v355 = &v467[2 * (int)v470];
            int v356 = v471;
            *(_DWORD *)v355 = 0;
            *((_DWORD *)v355 + 1) = v356;
            v355[1] = (uint64_t)v180;
            size_t v5 = v180;
            goto LABEL_13;
          }
          v180 = v5;
          while (v179 >= 2)
          {
            if (v176 == v179)
            {
              ++v177;
              v181 = v180 + 1;
              goto LABEL_355;
            }
            if (v5 != v180 && (char)v179 < 0)
            {
              unint64_t v182 = (unint64_t)v179 >> 4;
              char v183 = ~(_BYTE)v182;
              uint64_t v184 = utf8_byte_length_utf8_len_table_2[v182];
              int v185 = utf8_to_code_point_utf8_first_char_mask_1[v184] & v179;
              if ((v183 & 0xC) != 0) {
                goto LABEL_271;
              }
              uint64_t v184 = v184 <= 2 ? 2 : v184;
              uint64_t v186 = v184 - 1;
              v187 = (char *)(v180 + 1);
              do
              {
                char v188 = *v187++;
                int v185 = v188 & 0x3F | (v185 << 6);
                --v186;
              }
              while (v186);
              if (v185 < 0x10000)
              {
LABEL_271:
                if ((v185 - 12441) >= 4 && (v185 - 65438) >= 2)
                {
                  if (!unicode_combinable((unsigned __int16)v185)) {
                    goto LABEL_323;
                  }
                  unsigned int v176 = *v177;
                }
              }
              else
              {
                unsigned int v208 = v185 - 917760;
                unsigned int v209 = v185 - 127995;
                if (v208 >= 0xF0 && v209 > 4) {
                  goto LABEL_323;
                }
              }
              if ((v176 & 0x80) == 0) {
                goto LABEL_276;
              }
              unint64_t v200 = (unint64_t)v176 >> 4;
              char v201 = ~(_BYTE)v200;
              uint64_t v202 = utf8_byte_length_utf8_len_table_2[v200];
              int v203 = utf8_to_code_point_utf8_first_char_mask_1[v202] & v176;
              if ((v201 & 0xC) != 0) {
                goto LABEL_304;
              }
              uint64_t v202 = v202 <= 2 ? 2 : v202;
              uint64_t v204 = v202 - 1;
              v205 = v177 + 1;
              do
              {
                char v206 = *v205++;
                int v203 = v206 & 0x3F | (v203 << 6);
                --v204;
              }
              while (v204);
              if (v203 < 0x10000)
              {
LABEL_304:
                BOOL v207 = (v203 - 12441) >= 4 && (v203 - 65438) >= 2;
                if (v207 && !unicode_combinable((unsigned __int16)v203)) {
                  goto LABEL_276;
                }
              }
              else
              {
                unsigned int v211 = v203 - 917760;
                unsigned int v212 = v203 - 127995;
                if (v211 >= 0xF0 && v212 >= 5)
                {
LABEL_276:
                  v181 = &v180[utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*v180 >> 4]];
                  int v190 = (char)*v181;
                  if (v190 < 0)
                  {
                    while (1)
                    {
                      unint64_t v191 = v190 >> 4;
                      uint64_t v192 = utf8_byte_length_utf8_len_table_2[v191];
                      int v193 = (utf8_to_code_point_utf8_first_char_mask_1[v192] & v190);
                      if ((~(_BYTE)v191 & 0xC) != 0) {
                        goto LABEL_284;
                      }
                      uint64_t v194 = v192 <= 2 ? 2 : utf8_byte_length_utf8_len_table_2[v191];
                      uint64_t v195 = 1;
                      do
                        int v193 = v181[v195++] & 0x3F | (v193 << 6);
                      while (v194 != v195);
                      if (v193 < 0x10000)
                      {
LABEL_284:
                        if ((v193 - 12441) >= 4 && (v193 - 65438) >= 2)
                        {
                          if (!unicode_combinable((unsigned __int16)v193)) {
                            goto LABEL_355;
                          }
                          unint64_t v191 = (unint64_t)*v181 >> 4;
                        }
                      }
                      else
                      {
                        unsigned int v197 = v193 - 917760;
                        unsigned int v198 = v193 - 127995;
                        if (v197 >= 0xF0 && v198 > 4) {
                          goto LABEL_355;
                        }
                      }
                      v181 += utf8_byte_length_noerror_utf8_len_table_2[v191];
                      int v190 = (char)*v181;
                      if ((v190 & 0x80000000) == 0) {
                        goto LABEL_355;
                      }
                    }
                  }
                  goto LABEL_355;
                }
              }
            }
LABEL_323:
            unsigned int v214 = *v180;
            if (v214 > 0xE1)
            {
              if (v214 == 239)
              {
                if (v180[1] != 188 || v180[2] != 189) {
                  break;
                }
              }
              else if (v214 != 226 || v180[1] != 128 || (v180[2] & 0xFE) != 0x90)
              {
                break;
              }
LABEL_334:
              unsigned int v215 = 3646;
              goto LABEL_335;
            }
            if (v214 == 45) {
              goto LABEL_334;
            }
            if (v214 != 46) {
              break;
            }
            unsigned int v215 = 62;
LABEL_335:
            UChar32 v216 = *v177;
            if ((char)*v177 < 0)
            {
              unint64_t v217 = (unint64_t)*v177 >> 4;
              char v218 = ~(_BYTE)v217;
              uint64_t v219 = utf8_byte_length_utf8_len_table_2[v217];
              UChar32 v220 = (utf8_to_code_point_utf8_first_char_mask_1[v219] & v216);
              if ((v218 & 0xC) != 0)
              {
                UChar32 v216 = (utf8_to_code_point_utf8_first_char_mask_1[v219] & v216);
              }
              else
              {
                if (v219 <= 2) {
                  uint64_t v219 = 2;
                }
                else {
                  uint64_t v219 = v219;
                }
                uint64_t v221 = v219 - 1;
                v222 = v177 + 1;
                do
                {
                  char v223 = *v222++;
                  UChar32 v216 = v223 & 0x3F | (v220 << 6);
                  UChar32 v220 = v216;
                  --v221;
                }
                while (v221);
              }
            }
            if (((v215 >> u_charType(v216)) & 1) == 0) {
              break;
            }
            uint64_t v224 = utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*v180 >> 4];
            v181 = &v180[v224];
            UChar32 v225 = v180[v224];
            if ((char)v180[v224] < 0)
            {
              unint64_t v226 = (unint64_t)v180[v224] >> 4;
              char v227 = ~(_BYTE)v226;
              uint64_t v228 = utf8_byte_length_utf8_len_table_2[v226];
              UChar32 v229 = (utf8_to_code_point_utf8_first_char_mask_1[v228] & v225);
              if ((v227 & 0xC) != 0)
              {
                UChar32 v225 = (utf8_to_code_point_utf8_first_char_mask_1[v228] & v225);
              }
              else
              {
                if (v228 <= 2) {
                  uint64_t v228 = 2;
                }
                else {
                  uint64_t v228 = v228;
                }
                uint64_t v230 = v228 - 1;
                v231 = &v180[v224 + 1];
                do
                {
                  char v232 = *v231++;
                  UChar32 v225 = v232 & 0x3F | (v229 << 6);
                  UChar32 v229 = v225;
                  --v230;
                }
                while (v230);
              }
            }
            if (((v215 >> u_charType(v225)) & 1) == 0) {
              break;
            }
LABEL_355:
            unsigned int v176 = *v177;
            if (!*v177)
            {
              v180 = v181;
              int v11 = v462;
              goto LABEL_493;
            }
            unsigned int v179 = *v181;
            v180 = v181;
          }
          int v11 = v462;
          if (!*v177) {
            goto LABEL_493;
          }
          ++v174;
          uint64_t v173 = v459;
        }
        while (v174 < *(unsigned int *)(v459 + 4));
LABEL_373:
        if (!*((void *)&v469 + 1))
        {
LABEL_421:
          if (!v470) {
            goto LABEL_746;
          }
          uint64_t v267 = (int)v470 - 1;
          v268 = v467;
          goto LABEL_423;
        }
LABEL_374:
        v462 = v11;
        v242 = (const char *)*((void *)&v469 + 1);
        unsigned int v243 = **((unsigned char **)&v469 + 1);
        if (**((unsigned char **)&v469 + 1))
        {
          v244 = (const char *)v5;
          while (1)
          {
            unint64_t v245 = *(unsigned __int8 *)v244;
            if (v245 < 2) {
              goto LABEL_427;
            }
            if ((v245 & 0x80) != 0)
            {
              uint64_t v247 = utf8_byte_length_utf8_len_table_2[v245 >> 4];
              UChar32 v248 = utf8_to_code_point_utf8_first_char_mask_1[v247] & v245;
              if ((~(v245 >> 4) & 0xC) != 0)
              {
                UChar32 v246 = utf8_to_code_point_utf8_first_char_mask_1[v247] & v245;
              }
              else
              {
                if (v247 <= 2) {
                  uint64_t v249 = 2;
                }
                else {
                  uint64_t v249 = utf8_byte_length_utf8_len_table_2[v245 >> 4];
                }
                uint64_t v250 = v249 - 1;
                v251 = (char *)(v244 + 1);
                do
                {
                  char v252 = *v251++;
                  UChar32 v246 = v252 & 0x3F | (v248 << 6);
                  UChar32 v248 = v246;
                  --v250;
                }
                while (v250);
              }
            }
            else
            {
              UChar32 v246 = *(unsigned __int8 *)v244;
            }
            UChar32 v253 = v243;
            if ((v243 & 0x80) != 0)
            {
              unint64_t v254 = (unint64_t)v243 >> 4;
              char v255 = ~(_BYTE)v254;
              uint64_t v256 = utf8_byte_length_utf8_len_table_2[v254];
              UChar32 v257 = utf8_to_code_point_utf8_first_char_mask_1[v256] & v243;
              if ((v255 & 0xC) != 0)
              {
                UChar32 v253 = utf8_to_code_point_utf8_first_char_mask_1[v256] & v243;
              }
              else
              {
                if (v256 <= 2) {
                  uint64_t v256 = 2;
                }
                else {
                  uint64_t v256 = v256;
                }
                uint64_t v258 = v256 - 1;
                v259 = (char *)(v242 + 1);
                do
                {
                  char v260 = *v259++;
                  UChar32 v253 = v260 & 0x3F | (v257 << 6);
                  UChar32 v257 = v253;
                  --v258;
                }
                while (v258);
              }
            }
            uint64_t v261 = utf8_byte_length_noerror_utf8_len_table_2[v245 >> 4];
            if (v246 == v253)
            {
              v242 += utf8_byte_length_noerror_utf8_len_table_2[v245 >> 4];
              v262 = &v244[utf8_byte_length_noerror_utf8_len_table_2[v245 >> 4]];
            }
            else if (*(unsigned char *)(v6 + 65))
            {
              if (u_charType(v246) == 6)
              {
                bzero(v474, 0x400uLL);
                v475[0] = 0;
                icu_build_pattern_key(*(void *)(v6 + 48), v244, v261, v474, 1024, v475);
                int v263 = v475[0];
                if (v475[0]) {
                  uint64_t v264 = 0;
                }
                else {
                  uint64_t v264 = v261;
                }
                v262 = &v244[v264];
                v244 = v262;
                goto LABEL_413;
              }
              if (u_charType(v253) == 6)
              {
                bzero(v474, 0x400uLL);
                v475[0] = 0;
                icu_build_pattern_key(*(void *)(v6 + 48), v242, v261, v474, 1024, v475);
                int v263 = v475[0];
                if (v475[0]) {
                  uint64_t v265 = 0;
                }
                else {
                  uint64_t v265 = v261;
                }
                v242 += v265;
                v262 = v244;
LABEL_413:
                if (v263) {
                  goto LABEL_425;
                }
                goto LABEL_414;
              }
              if ((v246 - 127995) > 4) {
                goto LABEL_425;
              }
              v262 = &v244[utf8_byte_length_noerror_utf8_len_table_2[v246 >> 4]];
              if ((v253 - 127995) >= 5) {
                uint64_t v266 = 0;
              }
              else {
                uint64_t v266 = v261;
              }
              v242 += v266;
            }
            else
            {
              if (!v463) {
                goto LABEL_425;
              }
              if (v246 != 32) {
                goto LABEL_425;
              }
              v262 = &v244[v261];
              if (v244[v261] != v243) {
                goto LABEL_425;
              }
            }
LABEL_414:
            unsigned int v243 = *(unsigned __int8 *)v242;
            v244 = v262;
            if (!*v242) {
              goto LABEL_425;
            }
          }
        }
        v244 = (const char *)v5;
LABEL_425:
        if (*(unsigned __int8 *)v244 > 1u) {
          goto LABEL_484;
        }
        unsigned int v243 = *(unsigned __int8 *)v242;
        if (!*v242) {
          goto LABEL_487;
        }
LABEL_427:
        if (*(unsigned char *)(v6 + 65))
        {
          int v272 = v243;
          if ((v243 & 0x80) != 0)
          {
            unint64_t v273 = (unint64_t)v243 >> 4;
            char v274 = ~(_BYTE)v273;
            uint64_t v275 = utf8_byte_length_utf8_len_table_2[v273];
            int v276 = utf8_to_code_point_utf8_first_char_mask_1[v275] & v243;
            if ((v274 & 0xC) != 0)
            {
              int v272 = utf8_to_code_point_utf8_first_char_mask_1[v275] & v243;
            }
            else
            {
              if (v275 <= 2) {
                uint64_t v275 = 2;
              }
              else {
                uint64_t v275 = v275;
              }
              uint64_t v277 = v275 - 1;
              v278 = (char *)(v242 + 1);
              do
              {
                char v279 = *v278++;
                int v272 = v279 & 0x3F | (v276 << 6);
                int v276 = v272;
                --v277;
              }
              while (v277);
            }
          }
          if ((v272 - 127995) <= 4) {
            v242 += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)v243 >> 4];
          }
        }
LABEL_484:
        if (*v242)
        {
          if (!v470) {
            goto LABEL_746;
          }
          v308 = &v467[2 * (int)v470 - 2];
          int v15 = *(_DWORD *)v308;
          uint64_t v309 = *((int *)v308 + 1);
          size_t v5 = (unsigned __int8 *)v308[1];
          uint64_t v310 = *(void *)(v6 + 24) + 32 * v309;
          int v468 = *(_DWORD *)v310;
          long long v469 = *(_OWORD *)(v310 + 8);
          unsigned int v17 = *(_DWORD *)(v310 + 24);
          uint64_t v470 = (int)v470 - 1;
          uint64_t v471 = v309;
        }
        else
        {
LABEL_487:
          uint64_t v311 = (int)v471 + 1;
          if ((int)v311 < *(_DWORD *)(v6 + 8))
          {
            uint64_t v312 = *(void *)(v6 + 24) + 32 * v311;
            int v468 = *(_DWORD *)v312;
            long long v469 = *(_OWORD *)(v312 + 8);
            unsigned int v17 = *(_DWORD *)(v312 + 24);
          }
          int v15 = 0;
          v313 = &v467[2 * (int)v470];
          *(_DWORD *)v313 = 0;
          *((_DWORD *)v313 + 1) = v311;
          v313[1] = (uint64_t)v244;
          size_t v5 = (unsigned __int8 *)v244;
          uint64_t v471 = v311;
        }
        int v11 = v462;
        continue;
      case 3:
        goto LABEL_374;
      case 4:
      case 5:
      case 12:
        uint64_t v18 = (int)v471 + 1;
        if (v18 == *(_DWORD *)(v6 + 8))
        {
          __message_assert("%s:%u: failed assertion '%s' %s %s level: %d count: %d", "icu_utils.c", 3290, "cur_state.level+1!=ctx->count", "", *(const char **)(v6 + 16), v471, v471 + 1);
          goto LABEL_761;
        }
        unsigned int v19 = *v5;
        if (v19 >= 2)
        {
          int v20 = *(_DWORD *)(*(void *)(v6 + 24) + 32 * v18 + 24);
          while (1)
          {
            if ((v19 & 0x80) != 0)
            {
              unint64_t v21 = (unint64_t)v19 >> 4;
              char v22 = ~(_BYTE)v21;
              uint64_t v23 = utf8_byte_length_utf8_len_table_2[v21];
              unsigned int v24 = utf8_to_code_point_utf8_first_char_mask_1[v23] & v19;
              if ((v22 & 0xC) != 0)
              {
                v19 &= utf8_to_code_point_utf8_first_char_mask_1[v23];
              }
              else
              {
                if (v23 <= 2) {
                  uint64_t v23 = 2;
                }
                else {
                  uint64_t v23 = v23;
                }
                uint64_t v25 = v23 - 1;
                char v26 = (char *)(v5 + 1);
                do
                {
                  char v27 = *v26++;
                  unsigned int v19 = v27 & 0x3F | (v24 << 6);
                  unsigned int v24 = v19;
                  --v25;
                }
                while (v25);
              }
            }
            int v28 = 1 << u_charType(v19);
            if ((v28 & 0xF000000) != 0) {
              int v29 = 251658240;
            }
            else {
              int v29 = v28;
            }
            if ((v28 & 0x78001) != 0) {
              int v29 = 491521;
            }
            if ((v28 & 0x7000) != 0) {
              int v29 = 28672;
            }
            if ((v28 & 0xE00) != 0) {
              int v29 = 3584;
            }
            if ((v28 & 0x1C0) != 0) {
              int v29 = 448;
            }
            if ((v28 & 0x3E) != 0) {
              int v29 = 62;
            }
            unint64_t v30 = *v5;
            if ((v29 & v20) != 0) {
              break;
            }
            v5 += utf8_byte_length_noerror_utf8_len_table_2[v30 >> 4];
            unsigned int v19 = *v5;
            if (v19 <= 1) {
              goto LABEL_421;
            }
          }
          if (v30 >= 2)
          {
            uint64_t v103 = v470;
            if (v15 == 12)
            {
              v104 = v467;
              int v281 = v471;
              if (!v470)
              {
                *(_DWORD *)v467 = 12;
                *((_DWORD *)v104 + 1) = v281;
                v104[1] = (uint64_t)v5;
                v104[1] = (uint64_t)&v5[utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*v5 >> 4]];
                uint64_t v103 = 1;
              }
              int v15 = 11;
            }
            else
            {
              v104 = v467;
              double v105 = (int *)&v467[2 * (int)v470];
              int v106 = v471;
              *double v105 = v15;
              v105[1] = v106;
              *((void *)v105 + 1) = v5;
              uint64_t v103 = (v103 + 1);
              *((void *)v105 + 1) = &v5[utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*v5 >> 4]];
              if (v15 == 4) {
                int v15 = 2;
              }
              else {
                int v15 = 3;
              }
            }
            v282 = (int *)&v104[2 * (int)v103];
            int *v282 = v15;
            v282[1] = v18;
            *((void *)v282 + 1) = v5;
            uint64_t v283 = *(void *)(v6 + 24) + 32 * v18;
            int v468 = *(_DWORD *)v283;
            long long v469 = *(_OWORD *)(v283 + 8);
            unsigned int v17 = *(_DWORD *)(v283 + 24);
            uint64_t v470 = v103;
            uint64_t v471 = v18;
            continue;
          }
        }
        goto LABEL_421;
      case 6:
      case 7:
        if (v5 == v466)
        {
          size_t v5 = v466;
          unsigned int v31 = *v466;
          if (v31 < 2) {
            goto LABEL_745;
          }
          while (1)
          {
            if ((v31 & 0x80) != 0)
            {
              unint64_t v32 = (unint64_t)v31 >> 4;
              char v33 = ~(_BYTE)v32;
              uint64_t v34 = utf8_byte_length_utf8_len_table_2[v32];
              unsigned int v35 = utf8_to_code_point_utf8_first_char_mask_1[v34] & v31;
              if ((v33 & 0xC) != 0)
              {
                v31 &= utf8_to_code_point_utf8_first_char_mask_1[v34];
              }
              else
              {
                if (v34 <= 2) {
                  uint64_t v34 = 2;
                }
                else {
                  uint64_t v34 = v34;
                }
                uint64_t v36 = v34 - 1;
                uint64_t v37 = (char *)(v5 + 1);
                do
                {
                  char v38 = *v37++;
                  unsigned int v31 = v38 & 0x3F | (v35 << 6);
                  unsigned int v35 = v31;
                  --v36;
                }
                while (v36);
              }
            }
            int8_t v39 = u_charType(v31);
            unint64_t v40 = *v5;
            if ((v17 >> v39)) {
              break;
            }
            v5 += utf8_byte_length_noerror_utf8_len_table_2[v40 >> 4];
            unsigned int v31 = *v5;
            if (v31 <= 1) {
              goto LABEL_745;
            }
          }
          if (v40 < 2)
          {
LABEL_745:
            size_t v5 = v466;
            goto LABEL_746;
          }
          v94 = v467;
          int v95 = v471;
          v96 = (int *)&v467[2 * (int)v470];
          int v97 = v470;
          *((void *)v96 + 1) = v5;
          if (v15 == 6) {
            int v98 = 8;
          }
          else {
            int v98 = 9;
          }
          uint64_t v99 = v97 + 1;
          int *v96 = v98;
          v96[1] = v95;
          uint64_t v100 = v95 + 1;
          if (v15 == 6) {
            int v15 = 2;
          }
          else {
            int v15 = 3;
          }
          double v101 = (int *)&v94[2 * v99];
          *double v101 = v15;
          v101[1] = v100;
          *((void *)v101 + 1) = v5;
          uint64_t v102 = *(void *)(v6 + 24) + 32 * v100;
          int v468 = *(_DWORD *)v102;
          long long v469 = *(_OWORD *)(v102 + 8);
          unsigned int v17 = *(_DWORD *)(v102 + 24);
          v465 = v5;
          uint64_t v470 = v99;
          uint64_t v471 = v95 + 1;
          continue;
        }
        __message_assert("%s:%u: failed assertion '%s' %s %s level: %d count: %d", "icu_utils.c", 3326, "cur_state.cur==(u_int8_t*)string", "", *(const char **)(v6 + 16), v471, *(_DWORD *)(v6 + 8));
        goto LABEL_761;
      case 8:
      case 9:
        UChar32 v63 = *v5;
        if ((char)*v5 < 0)
        {
          unint64_t v64 = (unint64_t)*v5 >> 4;
          char v65 = ~(_BYTE)v64;
          uint64_t v66 = utf8_byte_length_utf8_len_table_2[v64];
          UChar32 v67 = (utf8_to_code_point_utf8_first_char_mask_1[v66] & v63);
          if ((v65 & 0xC) != 0)
          {
            UChar32 v63 = (utf8_to_code_point_utf8_first_char_mask_1[v66] & v63);
          }
          else
          {
            if (v66 <= 2) {
              uint64_t v66 = 2;
            }
            else {
              uint64_t v66 = v66;
            }
            uint64_t v68 = v66 - 1;
            v69 = (char *)(v5 + 1);
            do
            {
              char v70 = *v69++;
              UChar32 v63 = v70 & 0x3F | (v67 << 6);
              UChar32 v67 = v63;
              --v68;
            }
            while (v68);
          }
        }
        if (((v17 >> u_charType(v63)) & 1) == 0)
        {
          __message_assert("%s:%u: failed assertion '%s' %s %s level: %d count: %d", "icu_utils.c", 3347, "item.start_mask&U_MASK(u_charType(utf8_to_code_point((u_int8_t*)cur_state.cur)))", "", *(const char **)(v6 + 16), v471, *(_DWORD *)(v6 + 8));
          goto LABEL_761;
        }
        if ((v17 & 0x3E) != 0)
        {
          UChar32 v110 = *v5;
          if ((char)*v5 < 0)
          {
            unint64_t v111 = (unint64_t)*v5 >> 4;
            char v112 = ~(_BYTE)v111;
            uint64_t v113 = utf8_byte_length_utf8_len_table_2[v111];
            UChar32 v114 = (utf8_to_code_point_utf8_first_char_mask_1[v113] & v110);
            if ((v112 & 0xC) != 0)
            {
              UChar32 v110 = (utf8_to_code_point_utf8_first_char_mask_1[v113] & v110);
            }
            else
            {
              if (v113 <= 2) {
                uint64_t v113 = 2;
              }
              else {
                uint64_t v113 = v113;
              }
              uint64_t v115 = v113 - 1;
              int v116 = (char *)(v5 + 1);
              do
              {
                char v117 = *v116++;
                UChar32 v110 = v117 & 0x3F | (v114 << 6);
                UChar32 v114 = v110;
                --v115;
              }
              while (v115);
            }
          }
          int v133 = u_charType(v110);
          int v134 = 1 << v133;
          int i = v5;
          if (((1 << v133) & 0x3E) == 0) {
            goto LABEL_617;
          }
          int i = v5;
          if (v133 == 2) {
            goto LABEL_187;
          }
          for (int i = &v5[utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*v5 >> 4]];
                ;
                i += utf8_byte_length_noerror_utf8_len_table_2[v156])
          {
            LODWORD(v155) = *i;
            if (((char)*i & 0x80000000) == 0) {
              break;
            }
            unint64_t v156 = (unint64_t)*i >> 4;
            uint64_t v157 = utf8_byte_length_utf8_len_table_2[v156];
            int v158 = utf8_to_code_point_utf8_first_char_mask_1[v157] & v155;
            if ((~(_BYTE)v156 & 0xC) != 0) {
              goto LABEL_229;
            }
            uint64_t v159 = v157 <= 2 ? 2 : utf8_byte_length_utf8_len_table_2[v156];
            uint64_t v160 = 1;
            do
              int v158 = i[v160++] & 0x3F | (v158 << 6);
            while (v159 != v160);
            if (v158 < 0x10000)
            {
LABEL_229:
              if ((v158 - 12441) >= 4 && (v158 - 65438) >= 2)
              {
                int v162 = unicode_combinable((unsigned __int16)v158);
                unint64_t v155 = *i;
                if (!v162) {
                  break;
                }
                unint64_t v156 = v155 >> 4;
              }
            }
            else
            {
              unsigned int v163 = v158 - 917760;
              unsigned int v164 = v158 - 127995;
              if (v163 >= 0xF0 && v164 > 4) {
                break;
              }
            }
          }
          if (v155 < 2) {
            goto LABEL_723;
          }
          if ((v155 & 0x80) != 0)
          {
            unint64_t v166 = (unint64_t)v155 >> 4;
            char v167 = ~(_BYTE)v166;
            uint64_t v168 = utf8_byte_length_utf8_len_table_2[v166];
            int v169 = utf8_to_code_point_utf8_first_char_mask_1[v168] & v155;
            if ((v167 & 0xC) != 0)
            {
              LODWORD(v155) = utf8_to_code_point_utf8_first_char_mask_1[v168] & v155;
            }
            else
            {
              if (v168 <= 2) {
                uint64_t v168 = 2;
              }
              else {
                uint64_t v168 = v168;
              }
              uint64_t v170 = v168 - 1;
              uint64_t v171 = (char *)(i + 1);
              do
              {
                char v172 = *v171++;
                LODWORD(v155) = v172 & 0x3F | (v169 << 6);
                int v169 = v155;
                --v170;
              }
              while (v170);
            }
          }
          int v357 = 1 << u_charType(v155);
          if ((v357 & 0x3E) == 0)
          {
LABEL_617:
            i += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*i >> 4];
            goto LABEL_618;
          }
          int v358 = v357 & 0xE;
          if ((v134 & 0xE) != 0)
          {
            if (!v358) {
              goto LABEL_618;
            }
          }
          else if (v358)
          {
            goto LABEL_618;
          }
          unsigned int v367 = *i;
          if (v367 < 2) {
            goto LABEL_746;
          }
          *(void *)&long long v469 = v5;
          while (1)
          {
            if ((v367 & 0x80) != 0)
            {
              unint64_t v368 = (unint64_t)v367 >> 4;
              char v369 = ~(_BYTE)v368;
              uint64_t v370 = utf8_byte_length_utf8_len_table_2[v368];
              unsigned int v371 = utf8_to_code_point_utf8_first_char_mask_1[v370] & v367;
              if ((v369 & 0xC) != 0)
              {
                v367 &= utf8_to_code_point_utf8_first_char_mask_1[v370];
              }
              else
              {
                if (v370 <= 2) {
                  uint64_t v370 = 2;
                }
                else {
                  uint64_t v370 = v370;
                }
                uint64_t v372 = v370 - 1;
                v373 = (char *)(i + 1);
                do
                {
                  char v374 = *v373++;
                  unsigned int v367 = v374 & 0x3F | (v371 << 6);
                  unsigned int v371 = v367;
                  --v372;
                }
                while (v372);
              }
            }
            int v375 = u_charType(v367);
            if (v375 != 1)
            {
              if (v375 == 5) {
                goto LABEL_723;
              }
              if (v375 == 2)
              {
                if ((unsigned __int8 *)v469 != v5) {
                  goto LABEL_723;
                }
LABEL_187:
                unsigned int v135 = *i;
                if (v135 >= 2)
                {
                  while (2)
                  {
                    if ((v135 & 0x80) == 0) {
                      goto LABEL_189;
                    }
                    unint64_t v136 = (unint64_t)v135 >> 4;
                    char v137 = ~(_BYTE)v136;
                    uint64_t v138 = utf8_byte_length_utf8_len_table_2[v136];
                    int v139 = utf8_to_code_point_utf8_first_char_mask_1[v138] & v135;
                    if ((v137 & 0xC) != 0) {
                      goto LABEL_198;
                    }
                    uint64_t v138 = v138 <= 2 ? 2 : v138;
                    uint64_t v140 = v138 - 1;
                    float v141 = (char *)(i + 1);
                    do
                    {
                      char v142 = *v141++;
                      int v139 = v142 & 0x3F | (v139 << 6);
                      --v140;
                    }
                    while (v140);
                    if (v139 < 0x10000)
                    {
LABEL_198:
                      if ((v139 - 12441) >= 4 && (v139 - 65438) >= 2)
                      {
                        int v147 = unicode_combinable((unsigned __int16)v139);
                        unsigned int v135 = *i;
                        if (!v147) {
                          goto LABEL_211;
                        }
                      }
                    }
                    else
                    {
                      unsigned int v144 = v139 - 917760;
                      unsigned int v145 = v139 - 127995;
                      if (v144 >= 0xF0 && v145 >= 5)
                      {
LABEL_211:
                        if ((v135 & 0x80) != 0)
                        {
                          unint64_t v148 = (unint64_t)v135 >> 4;
                          char v149 = ~(_BYTE)v148;
                          uint64_t v150 = utf8_byte_length_utf8_len_table_2[v148];
                          unsigned int v151 = utf8_to_code_point_utf8_first_char_mask_1[v150] & v135;
                          if ((v149 & 0xC) != 0)
                          {
                            v135 &= utf8_to_code_point_utf8_first_char_mask_1[v150];
                          }
                          else
                          {
                            if (v150 <= 2) {
                              uint64_t v150 = 2;
                            }
                            else {
                              uint64_t v150 = v150;
                            }
                            uint64_t v152 = v150 - 1;
                            uint64_t v153 = (char *)(i + 1);
                            do
                            {
                              char v154 = *v153++;
                              unsigned int v135 = v154 & 0x3F | (v151 << 6);
                              unsigned int v151 = v135;
                              --v152;
                            }
                            while (v152);
                          }
                        }
LABEL_189:
                        if (u_charType(v135) != 2) {
                          goto LABEL_618;
                        }
                        unsigned int v135 = *i;
                      }
                    }
                    i += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)v135 >> 4];
                    unsigned int v135 = *i;
                    if (v135 <= 1) {
                      goto LABEL_746;
                    }
                    continue;
                  }
                }
                goto LABEL_746;
              }
              if (((1 << v375) & 0x3E) != 0)
              {
                *(void *)&long long v469 = i;
                goto LABEL_704;
              }
            }
            int v376 = (char)*i;
            if (v376 < 0)
            {
              uint64_t v402 = utf8_byte_length_utf8_len_table_2[(unint64_t)*i >> 4];
              int v403 = (utf8_to_code_point_utf8_first_char_mask_1[v402] & *i);
              if ((~((unint64_t)*i >> 4) & 0xC) != 0) {
                goto LABEL_689;
              }
              uint64_t v404 = v402 <= 2 ? 2 : utf8_byte_length_utf8_len_table_2[(unint64_t)*i >> 4];
              uint64_t v405 = 1;
              do
                int v403 = i[v405++] & 0x3F | (v403 << 6);
              while (v404 != v405);
              if (v403 < 0x10000)
              {
LABEL_689:
                BOOL v406 = (v403 - 12441) >= 4 && (v403 - 65438) >= 2;
                if (!v406 || unicode_combinable((unsigned __int16)v403)) {
                  goto LABEL_704;
                }
                LOBYTE(v376) = *i;
              }
              else
              {
                unsigned int v407 = v403 - 917760;
                unsigned int v408 = v403 - 127995;
                if (v407 < 0xF0 || v408 < 5) {
                  goto LABEL_704;
                }
              }
            }
            v377 = &i[utf8_byte_length_noerror_utf8_len_table_2[v376 >> 4]];
            unsigned int v378 = *v377;
            if (v378 >= 2) {
              break;
            }
LABEL_704:
            i += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*i >> 4];
            unsigned int v367 = *i;
            if (v367 <= 1) {
              goto LABEL_746;
            }
          }
          v379 = v11;
          while (1)
          {
            v380 = i;
            int i = v377;
            if ((v378 & 0x80) != 0)
            {
              unint64_t v381 = (unint64_t)v378 >> 4;
              char v382 = ~(_BYTE)v381;
              uint64_t v383 = utf8_byte_length_utf8_len_table_2[v381];
              unsigned int v384 = utf8_to_code_point_utf8_first_char_mask_1[v383] & v378;
              if ((v382 & 0xC) != 0)
              {
                v378 &= utf8_to_code_point_utf8_first_char_mask_1[v383];
              }
              else
              {
                if (v383 <= 2) {
                  uint64_t v383 = 2;
                }
                else {
                  uint64_t v383 = v383;
                }
                uint64_t v385 = v383 - 1;
                v386 = (char *)(i + 1);
                do
                {
                  char v387 = *v386++;
                  unsigned int v378 = v387 & 0x3F | (v384 << 6);
                  unsigned int v384 = v378;
                  --v385;
                }
                while (v385);
              }
            }
            int v388 = u_charType(v378);
            unint64_t v389 = *i;
            if (v388 != 1)
            {
              char v390 = v388;
              if ((v389 & 0x80) == 0) {
                goto LABEL_696;
              }
              uint64_t v391 = utf8_byte_length_utf8_len_table_2[v389 >> 4];
              int v392 = utf8_to_code_point_utf8_first_char_mask_1[v391] & v389;
              if ((~(v389 >> 4) & 0xC) != 0) {
                goto LABEL_669;
              }
              uint64_t v393 = v391 <= 2 ? 2 : utf8_byte_length_utf8_len_table_2[v389 >> 4];
              uint64_t v394 = v393 - 1;
              v395 = (char *)(i + 1);
              do
              {
                char v396 = *v395++;
                int v392 = v396 & 0x3F | (v392 << 6);
                --v394;
              }
              while (v394);
              if (v392 < 0x10000)
              {
LABEL_669:
                if ((v392 - 12441) >= 4 && (v392 - 65438) >= 2)
                {
                  int v398 = unicode_combinable((unsigned __int16)v392);
                  LODWORD(v389) = *i;
                  if (!v398) {
                    goto LABEL_696;
                  }
                }
              }
              else
              {
                unsigned int v399 = v392 - 917760;
                unsigned int v400 = v392 - 127995;
                if (v399 >= 0xF0 && v400 > 4)
                {
LABEL_696:
                  if (((1 << v390) & 0x7000) == 0) {
                    int i = v380;
                  }
                  int v11 = v379;
                  if (v389 > 1)
                  {
LABEL_618:
                    unsigned int v359 = *i;
                    if (v359 < 2) {
                      goto LABEL_746;
                    }
                    while (1)
                    {
                      if ((v359 & 0x80) != 0)
                      {
                        unint64_t v360 = (unint64_t)v359 >> 4;
                        char v361 = ~(_BYTE)v360;
                        uint64_t v362 = utf8_byte_length_utf8_len_table_2[v360];
                        unsigned int v363 = utf8_to_code_point_utf8_first_char_mask_1[v362] & v359;
                        if ((v361 & 0xC) != 0)
                        {
                          v359 &= utf8_to_code_point_utf8_first_char_mask_1[v362];
                        }
                        else
                        {
                          if (v362 <= 2) {
                            uint64_t v362 = 2;
                          }
                          else {
                            uint64_t v362 = v362;
                          }
                          uint64_t v364 = v362 - 1;
                          v365 = (char *)(i + 1);
                          do
                          {
                            char v366 = *v365++;
                            unsigned int v359 = v366 & 0x3F | (v363 << 6);
                            unsigned int v363 = v359;
                            --v364;
                          }
                          while (v364);
                        }
                      }
                      if ((v17 >> u_charType(v359))) {
                        break;
                      }
                      i += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*i >> 4];
                      unsigned int v359 = *i;
                      if (v359 <= 1) {
                        goto LABEL_746;
                      }
                    }
LABEL_723:
                    if (*i < 2u) {
                      goto LABEL_746;
                    }
                    v413 = v467;
                    int v414 = v471;
                    v415 = (int *)&v467[2 * (int)v470];
                    uint64_t v416 = (int)v470 + 1;
                    int *v415 = v15;
                    v415[1] = v414;
                    *((void *)v415 + 1) = i;
                    if (v15 == 8) {
                      int v15 = 2;
                    }
                    else {
                      int v15 = 3;
                    }
                    uint64_t v417 = v414 + 1;
                    v418 = (int *)&v413[2 * v416];
                    int *v418 = v15;
                    v418[1] = v417;
                    *((void *)v418 + 1) = i;
                    uint64_t v419 = *(void *)(v6 + 24) + 32 * v417;
                    int v468 = *(_DWORD *)v419;
                    long long v469 = *(_OWORD *)(v419 + 8);
                    unsigned int v17 = *(_DWORD *)(v419 + 24);
                    v465 = i;
                    size_t v5 = i;
                    uint64_t v470 = v416;
                    uint64_t v471 = v417;
                    goto LABEL_13;
                  }
                  goto LABEL_704;
                }
              }
            }
            v377 = &i[utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)v389 >> 4]];
            unsigned int v378 = *v377;
            if (v378 <= 1)
            {
              int v11 = v379;
              goto LABEL_704;
            }
          }
        }
        unint64_t v118 = *v5;
        if ((v17 & 0xF000000) != 0)
        {
          if (v118 < 2) {
            goto LABEL_746;
          }
          if ((v118 & 0x80) != 0)
          {
            uint64_t v119 = utf8_byte_length_utf8_len_table_2[v118 >> 4];
            int v120 = utf8_to_code_point_utf8_first_char_mask_1[v119] & v118;
            if ((~(v118 >> 4) & 0xC) != 0)
            {
              LODWORD(v118) = utf8_to_code_point_utf8_first_char_mask_1[v119] & v118;
            }
            else
            {
              if (v119 <= 2) {
                uint64_t v121 = 2;
              }
              else {
                uint64_t v121 = utf8_byte_length_utf8_len_table_2[v118 >> 4];
              }
              uint64_t v122 = v121 - 1;
              v123 = (char *)(v5 + 1);
              do
              {
                char v124 = *v123++;
                LODWORD(v118) = v124 & 0x3F | (v120 << 6);
                int v120 = v118;
                --v122;
              }
              while (v122);
            }
          }
          int i = v5;
          if ((v17 >> u_charType(v118)))
          {
            int i = &v5[utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*v5 >> 4]];
            unsigned int v291 = *i;
            if (v291 < 2) {
              goto LABEL_746;
            }
            while (1)
            {
              int v292 = v291;
              if ((v291 & 0x80) != 0)
              {
                unint64_t v293 = (unint64_t)v291 >> 4;
                char v294 = ~(_BYTE)v293;
                uint64_t v295 = utf8_byte_length_utf8_len_table_2[v293];
                unsigned int v296 = utf8_to_code_point_utf8_first_char_mask_1[v295] & v291;
                if ((v294 & 0xC) != 0)
                {
                  int v292 = utf8_to_code_point_utf8_first_char_mask_1[v295] & v291;
                }
                else
                {
                  if (v295 <= 2) {
                    uint64_t v295 = 2;
                  }
                  else {
                    uint64_t v295 = v295;
                  }
                  uint64_t v297 = v295 - 1;
                  v298 = (char *)(i + 1);
                  do
                  {
                    char v299 = *v298++;
                    int v292 = v299 & 0x3F | (v296 << 6);
                    unsigned int v296 = v292;
                    --v297;
                  }
                  while (v297);
                }
              }
              if (v118 != v292) {
                break;
              }
              i += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)v291 >> 4];
              unsigned int v291 = *i;
              if (v291 <= 1) {
                goto LABEL_746;
              }
            }
          }
        }
        else
        {
          int i = v5;
          if (v118 < 2) {
            goto LABEL_746;
          }
          while (1)
          {
            if ((v118 & 0x80) != 0)
            {
              unint64_t v126 = (unint64_t)v118 >> 4;
              char v127 = ~(_BYTE)v126;
              uint64_t v128 = utf8_byte_length_utf8_len_table_2[v126];
              int v129 = utf8_to_code_point_utf8_first_char_mask_1[v128] & v118;
              if ((v127 & 0xC) != 0)
              {
                LODWORD(v118) = utf8_to_code_point_utf8_first_char_mask_1[v128] & v118;
              }
              else
              {
                if (v128 <= 2) {
                  uint64_t v128 = 2;
                }
                else {
                  uint64_t v128 = v128;
                }
                uint64_t v130 = v128 - 1;
                CFUUIDRef v131 = (char *)(i + 1);
                do
                {
                  char v132 = *v131++;
                  LODWORD(v118) = v132 & 0x3F | (v129 << 6);
                  int v129 = v118;
                  --v130;
                }
                while (v130);
              }
            }
            if (((v17 >> u_charType(v118)) & 1) == 0) {
              break;
            }
            i += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*i >> 4];
            LODWORD(v118) = *i;
            if (v118 <= 1) {
              goto LABEL_746;
            }
          }
        }
        unsigned int v300 = *i;
        if (v300 >= 2)
        {
          do
          {
            if ((v300 & 0x80) != 0)
            {
              unint64_t v301 = (unint64_t)v300 >> 4;
              char v302 = ~(_BYTE)v301;
              uint64_t v303 = utf8_byte_length_utf8_len_table_2[v301];
              unsigned int v304 = utf8_to_code_point_utf8_first_char_mask_1[v303] & v300;
              if ((v302 & 0xC) != 0)
              {
                v300 &= utf8_to_code_point_utf8_first_char_mask_1[v303];
              }
              else
              {
                if (v303 <= 2) {
                  uint64_t v303 = 2;
                }
                else {
                  uint64_t v303 = v303;
                }
                uint64_t v305 = v303 - 1;
                v306 = (char *)(i + 1);
                do
                {
                  char v307 = *v306++;
                  unsigned int v300 = v307 & 0x3F | (v304 << 6);
                  unsigned int v304 = v300;
                  --v305;
                }
                while (v305);
              }
            }
            if ((v17 >> u_charType(v300))) {
              goto LABEL_723;
            }
            i += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*i >> 4];
            unsigned int v300 = *i;
          }
          while (v300 > 1);
        }
LABEL_746:
        if ((v464 & 1) == 0) {
          return 0;
        }
        goto LABEL_747;
      case 11:
        for (j = v5; ; j += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*j >> 4])
        {
          UChar32 v83 = *j;
          if ((char)*j < 0)
          {
            unint64_t v84 = (unint64_t)*j >> 4;
            char v85 = ~(_BYTE)v84;
            uint64_t v86 = utf8_byte_length_utf8_len_table_2[v84];
            UChar32 v87 = (utf8_to_code_point_utf8_first_char_mask_1[v86] & v83);
            if ((v85 & 0xC) != 0)
            {
              UChar32 v83 = (utf8_to_code_point_utf8_first_char_mask_1[v86] & v83);
            }
            else
            {
              if (v86 <= 2) {
                uint64_t v86 = 2;
              }
              else {
                uint64_t v86 = v86;
              }
              uint64_t v88 = v86 - 1;
              signed int v89 = (char *)(j + 1);
              do
              {
                char v90 = *v89++;
                UChar32 v83 = v90 & 0x3F | (v87 << 6);
                UChar32 v87 = v83;
                --v88;
              }
              while (v88);
            }
          }
          if (((1 << u_charType(v83)) & 0x7000) == 0) {
            break;
          }
        }
        if (j == v5) {
          goto LABEL_421;
        }
        uint64_t v91 = (int)v471 + 1;
        if ((int)v91 < *(_DWORD *)(v6 + 8))
        {
          uint64_t v92 = *(void *)(v6 + 24) + 32 * v91;
          int v468 = *(_DWORD *)v92;
          long long v469 = *(_OWORD *)(v92 + 8);
          unsigned int v17 = *(_DWORD *)(v92 + 24);
        }
        int v15 = 0;
        v93 = &v467[2 * (int)v470];
        *(_DWORD *)v93 = 0;
        *((_DWORD *)v93 + 1) = v91;
        v93[1] = (uint64_t)j;
        size_t v5 = j;
        uint64_t v471 = v91;
        continue;
      default:
        __message_assert("%s:%u: failed assertion '%s' %s %s level: %d count: %d", "icu_utils.c", 3489, "false", "", *(const char **)(v6 + 16), v471, *(_DWORD *)(v6 + 8));
        goto LABEL_761;
    }
  }
}

uint64_t utf8_first_char_combining(unsigned __int8 *a1)
{
  if (((char)*a1 & 0x80000000) == 0) {
    return 0;
  }
  unint64_t v2 = *a1;
  unint64_t v3 = v2 >> 4;
  uint64_t v4 = utf8_byte_length_utf8_len_table_2[v2 >> 4];
  int v5 = v2 & utf8_to_code_point_utf8_first_char_mask_1[v4];
  if ((~(_BYTE)v3 & 0xC) != 0) {
    goto LABEL_10;
  }
  uint64_t v4 = v4 <= 2 ? 2 : v4;
  uint64_t v6 = v4 - 1;
  unint64_t v7 = (char *)(a1 + 1);
  do
  {
    char v8 = *v7++;
    int v5 = v8 & 0x3F | (v5 << 6);
    --v6;
  }
  while (v6);
  if (v5 < 0x10000)
  {
LABEL_10:
    BOOL v9 = (v5 - 12441) >= 4 && (v5 - 65438) >= 2;
    if (v9 && !unicode_combinable((unsigned __int16)v5)) {
      return 0;
    }
  }
  else
  {
    unsigned int v10 = v5 - 917760;
    unsigned int v11 = v5 - 127995;
    if (v10 >= 0xF0 && v11 >= 5) {
      return 0;
    }
  }
  return 1;
}

int *_MDPlistContainerAddNumber(uint64_t a1, CFNumberRef number, uint64_t a3)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  unsigned int valuePtr = 0;
  uint64_t v20 = 0;
  unsigned int v19 = 0;
  uint64_t v18 = 0;
  uint64_t result = (int *)CFNumberGetType(number);
  switch((unint64_t)result)
  {
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      uint64_t v11 = valuePtr;
      uint64_t v12 = a1;
      uint64_t v13 = 226;
      return _addInlineData(v12, v13, v11, a3, v7, v8, v9, v10);
    case 4uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xEuLL:
    case 0xFuLL:
      CFNumberGetValue(number, kCFNumberSInt64Type, &v20);
      v22[0] = v20;
      uint64_t v16 = a1;
      uint64_t v17 = 35;
      goto LABEL_5;
    case 5uLL:
    case 0xCuLL:
      CFNumberGetValue(number, kCFNumberFloat32Type, &v19);
      uint64_t v11 = v19;
      uint64_t v12 = a1;
      uint64_t v13 = 227;
      return _addInlineData(v12, v13, v11, a3, v7, v8, v9, v10);
    case 6uLL:
    case 0xDuLL:
    case 0x10uLL:
      CFNumberGetValue(number, kCFNumberFloat64Type, &v18);
      v22[0] = v18;
      uint64_t v16 = a1;
      uint64_t v17 = 51;
LABEL_5:
      uint64_t result = _addGenericData(v16, 1, v17, v22, 8uLL, a3, v14, v15);
      break;
    default:
      return result;
  }
  return result;
}

_DWORD *_MDPlistContainerAddInt64Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  v9[0] = a2;
  return _addGenericData(a1, 1, 35, v9, 8uLL, a3, a7, a8);
}

BOOL _MDPlistBytesEndPlist(uint64_t a1)
{
  do
  {
    if (*(_WORD *)(a1 + 32) || (*(unsigned char *)(a1 + 34) & 1) == 0) {
      return 0;
    }
    uint64_t v2 = *(void *)(a1 + 112);
    unint64_t v3 = v2 - *(void *)(a1 + 48);
    if (v3 == 8)
    {
      *(_WORD *)(a1 + 32) = 2347;
      uint64_t v16 = _MDLogForCategoryDefault();
      BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _MDPlistBytesEndPlist_cold_1();
      return 0;
    }
    if (*(_DWORD *)(a1 + 88))
    {
      *(_WORD *)(a1 + 32) = 2349;
      uint64_t v17 = _MDLogForCategoryDefault();
      BOOL result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _MDPlistBytesEndPlist_cold_2();
      return 0;
    }
    uint64_t v4 = *(int *)(a1 + 64);
    if ((unint64_t)(v2 + 8 * v4) < *(void *)(a1 + 120)) {
      goto LABEL_8;
    }
  }
  while (!_MDPlistBytesGrowCapacityVM(a1, 8 * v4, 0));
  uint64_t v2 = *(void *)(a1 + 112);
LABEL_8:
  unint64_t v5 = v3 >> 3;
  unint64_t v6 = v2 + 8 * v4;
  uint64_t v7 = (uint64_t *)MEMORY[0x1E4F14B00];
  uint64_t v8 = *MEMORY[0x1E4F14B00];
  uint64_t v9 = -*MEMORY[0x1E4F14B00];
  if (((v2 ^ v6) & v9) != 0 && ((v6 >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
  {
    size_t v10 = 16 << *MEMORY[0x1E4F14AF8];
    if (v10 >= 4 * v8)
    {
      madvise((void *)((v8 - 1 + v2) & v9), v10, 3);
      uint64_t v8 = *v7;
    }
  }
  size_t v11 = 8 * *(int *)(a1 + 64);
  if (v11 >= 4 * v8)
  {
    madvise(*(void **)(a1 + 112), 8 * *(int *)(a1 + 64), 3);
    size_t v11 = 8 * *(int *)(a1 + 64);
  }
  memcpy(*(void **)(a1 + 112), *(const void **)(a1 + 56), v11);
  uint64_t v12 = *(void *)(a1 + 112) + 8 * *(int *)(a1 + 64);
  *(void *)(a1 + 112) = v12;
  uint64_t v13 = *(_DWORD **)(a1 + 48);
  unint64_t v14 = ((unint64_t)(*v13 | v5) << 32) | ((v12 - (uint64_t)v13) >> 3);
  *(_DWORD *)(a1 + 80) = -1;
  *(void *)uint64_t v13 = v14;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  free(*(void **)(a1 + 96));
  *(void *)(a1 + 96) = 0;
  CFRelease(*(CFTypeRef *)(a1 + 104));
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 112) - *(_DWORD *)(a1 + 8);
  *(unsigned char *)(a1 + 34) &= ~2u;
  return 1;
}

_MDPlistBytes *_MDPlistBytesCreateTrusted(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a2)
  {
    uint64_t v7 = [_MDPlistBytes alloc];
    if (a4) {
      uint64_t v8 = &__block_literal_global_108;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = [(_MDPlistBytes *)v7 initWithByteVector:a2 count:a3 trusted:1 deallocator:v8];
    size_t v10 = v9;
    if (v9) {
      CFRetain(v9);
    }

    return v10;
  }
  else
  {
    if (qword_1E95CA390 != -1) {
      dispatch_once(&qword_1E95CA390, &__block_literal_global_128);
    }
    uint64_t v12 = (const void *)qword_1E95CA388;
    return (_MDPlistBytes *)CFRetain(v12);
  }
}

_MDPlistBytes *_MDPlistBytesCopyChildPlistBytesAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = 0;
  if (a2 && (a3 & 0x8000000000000000) == 0)
  {
    if (*(_WORD *)(a2 + 32)) {
      return 0;
    }
    if (a4)
    {
      if (*a4 <= a3) {
        return 0;
      }
      unint64_t v6 = (int *)a4[a3 + 1];
      if (!v6) {
        return 0;
      }
    }
    else
    {
      unsigned int v9 = *(_DWORD *)(a2 + 16);
      if (v9 < 0x10) {
        return 0;
      }
      int v10 = (v9 >> 3) - 2;
      unint64_t v6 = (int *)(*(void *)(a2 + 8) + 8);
      uint64_t v11 = a3 + 1;
      while (--v11 >= 1)
      {
        uint64_t v4 = 0;
        int v12 = *v6 + 1;
        BOOL v13 = *v6 > 0x7FFFFFFE || v10 <= v12;
        v10 -= v12;
        v6 += 2 * v12;
        if (v13) {
          return v4;
        }
      }
    }
    if (((*v6 >> 25) & 0xF) > 6) {
      return 0;
    }
    int v7 = *v6;
    uint64_t v8 = [[_MDPlistBytes alloc] initWithByteVector:v6 - 2 count:(8 * v7 + 8) trusted:1 deallocator:0];
    uint64_t v4 = v8;
    if (v8) {
      CFRetain(v8);
    }
  }
  return v4;
}

void _maybeSwapPlistBytes(uint64_t a1, char a2)
{
  uint64_t v4 = *(unint64_t **)(a1 + 8);
  if (*v4 == 0x6D64303331323334) {
    goto LABEL_27;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 0x10) {
    goto LABEL_26;
  }
  int v6 = v5 >> 3;
  while (1)
  {
    unint64_t v7 = *v4;
    *uint64_t v4 = bswap64(*v4);
    if (v7 != 0x343332313330646DLL) {
      break;
    }
    unint64_t v8 = bswap64(v4[1]);
    v4[1] = v8;
    int v9 = v8 - 1;
    v6 -= 2;
    if (v9 > v6)
    {
      *(_WORD *)(a1 + 32) = 438;
      unsigned int v24 = _MDLogForCategoryDefault();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        _maybeSwapPlistBytes_cold_1(v24);
      }
      goto LABEL_26;
    }
    v4 += 2;
    if (v9 >= 1)
    {
      do
      {
        unint64_t v11 = bswap64(*v4);
        *uint64_t v4 = v11;
        unsigned int v12 = v11 & 0xFFFFFF;
        BOOL v10 = __OFSUB__(v6, v11 & 0xFFFFFF);
        v6 -= v11 & 0xFFFFFF;
        if (v6 < 0 != v10 || v12 == 0)
        {
          *(_WORD *)(a1 + 32) = 448;
          char v22 = _MDLogForCategoryDefault();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            _maybeSwapPlistBytes_cold_2(v12, v22);
          }
          goto LABEL_26;
        }
        uint64_t v14 = v11 & 0xFFFFFF;
        if ((v11 & 0x80000000) != 0 && v12 >= 2)
        {
          uint64_t v15 = v14 - 1;
          if ((unint64_t)(v14 - 1) >= 4)
          {
            unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFFCLL | 1;
            uint64_t v17 = (int8x16_t *)(v4 + 3);
            unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              int8x16_t v19 = vrev64q_s8(*v17);
              v17[-1] = vrev64q_s8(v17[-1]);
              *uint64_t v17 = v19;
              v17 += 2;
              v18 -= 4;
            }
            while (v18);
            if (v15 == (v15 & 0xFFFFFFFFFFFFFFFCLL)) {
              goto LABEL_9;
            }
          }
          else
          {
            unint64_t v16 = 1;
          }
          unint64_t v20 = v14 - v16;
          unint64_t v21 = &v4[v16];
          do
          {
            *unint64_t v21 = bswap64(*v21);
            ++v21;
            --v20;
          }
          while (v20);
        }
LABEL_9:
        v4 += v14;
        BOOL v10 = __OFSUB__(v9, v12);
        v9 -= v12;
      }
      while (!((v9 < 0) ^ v10 | (v9 == 0)));
    }
    if (v6 <= 1) {
      goto LABEL_26;
    }
  }
  *(_WORD *)(a1 + 32) = 424;
  if (*v4 != 52) {
    *uint64_t v4 = bswap64(*v4);
  }
  uint64_t v23 = _MDLogForCategoryDefault();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
    _maybeSwapPlistBytes_cold_3((uint64_t *)v4, v23);
  }
LABEL_26:
  if (!*(_WORD *)(a1 + 32))
  {
LABEL_27:
    if ((a2 & 1) == 0) {
      __MDPlistBytesValidate(a1);
    }
  }
}

uint64_t _MDPlistDataGetBytePtr(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (a2) {
    *a2 = *(unsigned int *)(v2 + v3);
  }
  return v2 + v3 + 4;
}

double _MDPlistDateGetValue(uint64_t a1)
{
  return *(double *)(*(void *)a1 + *(unsigned int *)(a1 + 16));
}

const void *_MDBundleUtilsCopyCachedLocalizedDescriptionDictionary(const void *a1)
{
  return localizedCacheValueCopy(a1);
}

void localizedCacheValueClear(int a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&gLocalizePropertyCacheLock);
  if (gLocalizedPropertyCache)
  {
    CFRelease((CFTypeRef)gLocalizedPropertyCache);
    gLocalizedPropertyCache = 0;
  }
  if (a1 && gCoreTypesLocalizedPropertyCache)
  {
    CFRelease((CFTypeRef)gCoreTypesLocalizedPropertyCache);
    gCoreTypesLocalizedPropertyCache = 0;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&gLocalizePropertyCacheLock);
}

void _MDChildPlistBytesContextDestroy(void *a1)
{
  free(a1);
}

const void *localizedCacheValueCopy(const void *a1)
{
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&gLocalizePropertyCacheLock);
    if (gCoreTypesLocalizedPropertyCache)
    {
      uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)gCoreTypesLocalizedPropertyCache, a1);
      if (Value) {
        goto LABEL_6;
      }
    }
    if (!gLocalizedPropertyCache)
    {
      uint64_t Value = 0;
      goto LABEL_9;
    }
    uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)gLocalizedPropertyCache, a1);
    if (Value) {
LABEL_6:
    }
      CFRetain(Value);
LABEL_9:
    os_unfair_lock_unlock((os_unfair_lock_t)&gLocalizePropertyCacheLock);
    return Value;
  }
  return 0;
}

uint64_t _MDPlistContainerCreateWithBytes(uint64_t a1, unsigned __int16 *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2 || !a3) {
    return 0;
  }

  return _MDPlistContainerCreateCommon(a1, a3, a2, 0, 0, a4, a5, 0);
}

uint64_t _MDStoreOIDArrayGetVector(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 16);
  }
}

uint64_t _MDStoreOIDArrayAppendMultipleOIDArrays(uint64_t a1, uint64_t *a2, int64_t a3)
{
  block[6] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (*(void *)(a1 + 48))
  {
    __MDStoreOIDArrayError(a1, (uint64_t)"_MDStoreOIDArrayAppendMultipleOIDArrays", (uint64_t)"Sequencing");
    return 0;
  }
  MEMORY[0x1F4188790]();
  unint64_t v8 = (void **)((char *)&block[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v8, v7);
  if (a3 < 1)
  {
    unsigned int v9 = 0;
  }
  else
  {
    unsigned int v9 = 0;
    BOOL v10 = a2;
    int64_t v11 = a3;
    do
    {
      uint64_t v12 = *v10;
      if (*v10) {
        LODWORD(v12) = *(_DWORD *)(v12 + 32);
      }
      v9 += v12;
      ++v10;
      --v11;
    }
    while (v11);
  }
  unsigned int v13 = v9;
  uint64_t v14 = *(char **)(a1 + 56);
  if ((unint64_t)&v14[8 * v9] >= *(void *)(a1 + 64))
  {
    if (!_mutableMakeRoom(a1, v9, 1))
    {
      __MDStoreOIDArrayError(a1, (uint64_t)"_MDStoreOIDArrayAppendMultipleOIDArrays", (uint64_t)"Overflow");
      return 0;
    }
    uint64_t v14 = *(char **)(a1 + 56);
  }
  if (a3 >= 1)
  {
    uint64_t v15 = v8;
    unint64_t v16 = a2;
    int64_t v17 = a3;
    do
    {
      *uint64_t v15 = v14;
      uint64_t v18 = *v16;
      if (*v16) {
        uint64_t v18 = *(unsigned int *)(v18 + 32);
      }
      v14 += 8 * v18;
      *(void *)(a1 + 56) = v14;
      ++v16;
      ++v15;
      --v17;
    }
    while (v17);
  }
  size_t v19 = v14 - (unsigned char *)*v8;
  if (v19 >= 4 * *MEMORY[0x1E4F14B00]) {
    madvise(*v8, v19, 3);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___MDStoreOIDArrayAppendMultipleOIDArrays_block_invoke;
  block[3] = &__block_descriptor_tmp_18_0;
  block[4] = a2;
  block[5] = v8;
  dispatch_apply(a3, 0, block);
  *(_DWORD *)(a1 + 32) += v13;
  return 1;
}

unint64_t _MDPlistGetRootPlistObjectFromPlist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  unint64_t v7 = a1 + 32;

  return MDPlistGetRootPlistObjectFromBuffer(v7, 0, a2, a3, a4, a5, a6, a7);
}

_DWORD *_MDPlistContainerAddDataValue(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _addGenericData(a1, 0, 246, a2, a3, a4, a7, a8);
}

void *_MDStoreOIDArrayCreate(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a4) {
    uint64_t v4 = &__block_literal_global_2;
  }
  else {
    uint64_t v4 = &__block_literal_global_43;
  }

  return _MDStoreOIDArrayCreateWithDeallocator(a1, a2, a3, v4);
}

unsigned int *_MDChildPlistBytesContextCreate(unsigned int *result)
{
  if (result)
  {
    char v1 = result;
    if (*((_WORD *)result + 16)) {
      return 0;
    }
    unsigned int v2 = result[4];
    if (v2 < 0x10)
    {
      return 0;
    }
    else
    {
      int v3 = (v2 >> 3) - 2;
      uint64_t v4 = (_DWORD *)(*((void *)result + 1) + 8);
      uint64_t v5 = -1;
      do
      {
        uint64_t v6 = v5;
        int v7 = *v4 + 1;
        BOOL v8 = *v4 > 0x7FFFFFFEu || v3 <= v7;
        v3 -= v7;
        v4 += 2 * v7;
        ++v5;
      }
      while (!v8);
      uint64_t v9 = v6 + 2;
      BOOL result = (unsigned int *)malloc_type_malloc(8 * (v6 + 2) + 8, 0x4AC4C75AuLL);
      *(void *)BOOL result = v9;
      unsigned int v10 = v1[4];
      int64_t v11 = (_DWORD *)(*((void *)v1 + 1) + 8);
      *((void *)result + 1) = v11;
      if (v5)
      {
        uint64_t v12 = 0;
        int v13 = (v10 >> 3) - 2;
        do
        {
          int v14 = *v11 + 1;
          if (*v11 > 0x7FFFFFFEu || v13 <= v14) {
            _MDChildPlistBytesContextCreate_cold_1();
          }
          v13 -= v14;
          v11 += 2 * v14;
          *(void *)&result[2 * v12++ + 4] = v11;
        }
        while (v5 != v12);
      }
    }
  }
  return result;
}

dispatch_data_t _MDPlistBytesCopyDispatchData(dispatch_data_t cf, void *a2)
{
  v7[5] = *MEMORY[0x1E4F143B8];
  if (!cf)
  {
LABEL_4:
    uint64_t v4 = 0;
    if (!a2) {
      return cf;
    }
    goto LABEL_5;
  }
  uint64_t v3 = (uint64_t)cf;
  if (LOWORD(cf[4].isa))
  {
    CFTypeRef cf = 0;
    goto LABEL_4;
  }
  CFRetain(cf);
  if (*(_WORD *)(v3 + 32))
  {
    uint64_t v4 = 0;
    MappedByteVector = _MDPlistBytesGetMappedByteVector((const void **)v3);
    if (*(_WORD *)(v3 + 32))
    {
LABEL_9:
      size_t v6 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(v3 + 16);
    MappedByteVector = _MDPlistBytesGetMappedByteVector((const void **)v3);
    if (*(_WORD *)(v3 + 32)) {
      goto LABEL_9;
    }
  }
  size_t v6 = *(unsigned int *)(v3 + 16);
LABEL_12:
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___MDPlistBytesCopyDispatchData_block_invoke;
  v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = v3;
  CFTypeRef cf = dispatch_data_create(MappedByteVector, v6, 0, v7);
  if (!a2) {
    return cf;
  }
LABEL_5:
  *a2 = v4;
  return cf;
}

const void **_MDPlistBytesGetMappedByteVector(const void **result)
{
  __dst[1] = *(void **)MEMORY[0x1E4F143B8];
  if (result)
  {
    char v1 = result;
    if (*((_WORD *)result + 16)) {
      return 0;
    }
    if ((~*((unsigned __int8 *)result + 34) & 9) != 0)
    {
      return (const void **)result[1];
    }
    else
    {
      __dst[0] = 0;
      uint64_t v2 = *((unsigned int *)result + 5);
      uint64_t v3 = (void *)MEMORY[0x1E4F14B00];
      if (v2)
      {
        if (_fast_vm_allocate(__dst, (v2 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00], -251658239)) {
          return 0;
        }
      }
      else if (_fast_vm_allocate(__dst, *MEMORY[0x1E4F14B00], -251658239))
      {
        return 0;
      }
      size_t v4 = *((unsigned int *)v1 + 5);
      if (v4 >= 4 * *v3)
      {
        madvise(__dst[0], *((unsigned int *)v1 + 5), 3);
        size_t v4 = *((unsigned int *)v1 + 5);
      }
      memcpy(__dst[0], v1[1], v4);
      free((void *)v1[1]);
      BOOL result = (const void **)__dst[0];
      v1[1] = __dst[0];
      *((unsigned char *)v1 + 34) &= ~8u;
    }
  }
  return result;
}

uint64_t icu_search_context_item_get_info(uint64_t a1, int a2, void *a3, _DWORD *a4, void *a5)
{
  if (*(_DWORD *)(a1 + 8) <= a2) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = *(_DWORD *)(v5 + 32 * a2);
  if (v6 > 15)
  {
    switch(v6)
    {
      case 16:
        *a3 = *(void *)(*(void *)(v5 + 32 * a2 + 8) + 16);
        uint64_t v8 = *(void *)(a1 + 24) + 32 * a2;
        uint64_t v10 = *(void *)(v8 + 8);
        uint64_t v9 = *(void *)(v8 + 16);
        *a4 = *(_DWORD *)(v10 + 4);
        *a5 = v9;
        return *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 32 * a2 + 8) + 8) & 1 | 4u;
      case 64:
        return 6;
      case 128:
        return 7;
      default:
        return 0;
    }
  }
  else if ((v6 - 1) < 2)
  {
    return 1;
  }
  else
  {
    if (v6 != 4)
    {
      if (v6 == 8)
      {
        *a3 = 0;
        *a4 = 0;
        *a5 = *(void *)(*(void *)(a1 + 24) + 32 * a2 + 16);
        return 3;
      }
      return 0;
    }
    return 2;
  }
}

void *_MDStoreOIDArrayCreateWithDeallocator(uint64_t a1, uint64_t a2, int a3, const void *a4)
{
  v11[5] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = __kMDStoreOIDArrayTypeID;
  if (__kMDStoreOIDArrayTypeID)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = _CFRuntimeRegisterClass();
    __kMDStoreOIDArrayTypeID = v7;
    if (a2)
    {
LABEL_3:
      uint64_t Instance = _CFRuntimeCreateInstance();
      uint64_t v9 = (void *)Instance;
      if (Instance)
      {
        *(void *)(Instance + 16) = a2;
        *(_DWORD *)(Instance + 32) = a3;
        *(_DWORD *)(Instance + 36) = a3;
        *(void *)(Instance + 24) = _Block_copy(a4);
      }
      return v9;
    }
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  v11[2] = ___MDStoreOIDArrayCreateWithDeallocator_block_invoke;
  v11[3] = &__block_descriptor_tmp_2;
  v11[4] = v7;
  if (_MDStoreOIDArrayCreateWithDeallocator_once != -1) {
    dispatch_once(&_MDStoreOIDArrayCreateWithDeallocator_once, v11);
  }
  uint64_t v9 = &_MDStoreOIDArrayCreateWithDeallocator_emptyValue;
  CFRetain(&_MDStoreOIDArrayCreateWithDeallocator_emptyValue);
  return v9;
}

void _MDStoreOIDArrayApplyBlockParallel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  qos_class_t v8 = qos_class_self();
  global_queue = dispatch_get_global_queue(v8, 0);
  uint64_t v10 = dispatch_group_create();
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  if (a2 < a3)
  {
    int v12 = 0;
    while (1)
    {
      uint64_t v13 = *(void *)(v11 + 8 * a2);
      if (WORD1(v13) - 4078 <= 0xFFFFFAEE) {
        break;
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ___MDStoreOIDArrayApplyBlockParallel_block_invoke;
      block[3] = &unk_1E5AEE8B8;
      uint64_t v14 = (unsigned __int16)v13 + 1;
      __int16 v18 = WORD1(v13);
      block[4] = a4;
      block[5] = v11;
      block[6] = a2;
      void block[7] = v14;
      int v16 = HIDWORD(v13);
      int v17 = v12;
      dispatch_group_async(v10, global_queue, block);
      ++v12;
      a2 += v14;
      if (a2 >= a3) {
        goto LABEL_9;
      }
    }
    CFShow(@"MDStoreOIDArrayApplyBlock encountered invalid opcode:");
    CFShow((CFTypeRef)a1);
  }
LABEL_9:
  dispatch_group_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(v10);
}

uint64_t _SILogForLogForCategory(int a1)
{
  if (_SILogForLogForCategory_onceToken != -1) {
    dispatch_once(&_SILogForLogForCategory_onceToken, &__block_literal_global);
  }
  return gSILogArray[a1];
}

void storageWindowsClose(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(atomic_uint **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    int v3 = *__error();
    size_t v4 = _SILogForLogForCategory(10);
    os_log_type_t v5 = 2 * (dword_1E95AC908 < 4);
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = *(void *)(a1 + 8);
      float v7 = (double)*(unint64_t *)(a1 + 16) * 100.0 / (double)v6;
      v9[0] = 67109376;
      v9[1] = v6 >> 10;
      __int16 v10 = 2048;
      double v11 = v7;
      _os_log_impl(&dword_1A334F000, v4, v5, "Memsize: %uKB %f%% used", (uint8_t *)v9, 0x12u);
    }
    *__error() = v3;
    fd_release(v2);
  }
  qos_class_t v8 = *(const void **)(a1 + 40);
  if (v8)
  {
    _Block_release(v8);
    *(void *)(a1 + 40) = 0;
  }
}

void storageWindowsInit(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, char a6, void *aBlock)
{
  *(unsigned char *)(a1 + 36) = a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 37) = a6;
  if (aBlock) {
    qos_class_t v8 = _Block_copy(aBlock);
  }
  else {
    qos_class_t v8 = 0;
  }
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = 26;

  bzero((void *)(a1 + 56), 0x1000uLL);
}

void storageWindowRelease(atomic_uint **a1)
{
  v4[5] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  if (v2)
  {
    if (atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
    {
      uint64_t v3 = *((void *)v2 + 4);
      if (v3)
      {
        v4[0] = MEMORY[0x1E4F143A8];
        v4[1] = 0x40000000;
        v4[2] = __storageWindowDestroy_block_invoke;
        v4[3] = &__block_descriptor_tmp_18;
        v4[4] = v2;
        (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
      }
      else
      {
        storageWindowDestroyImmediate(v2);
      }
    }
    *a1 = 0;
  }
}

void storageWindowsUnmap(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if (v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 56;
    do
    {
      os_log_type_t v5 = *(atomic_uint **)(v4 + 8 * v3);
      if (v5)
      {
        if (atomic_fetch_add(v5, 0xFFFFFFFF) == 1) {
          storageWindowDestroyImmediate(v5);
        }
        *(void *)(v4 + 8 * v3) = 0;
        int v1 = *(_DWORD *)(a1 + 32);
      }
      ++v3;
    }
    while (v3 < v1);
  }
}

void *storageWindowSync(void *result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    BOOL result = (void *)result[1];
    if (result)
    {
      if (!*((unsigned char *)v2 + 40))
      {
        os_log_type_t v5 = v2 + 2;
        uint64_t v3 = v2[2];
        uint64_t v4 = v5[1];
        if (a2) {
          int v6 = 1;
        }
        else {
          int v6 = 16;
        }
        return (void *)fd_msync(result, v4 - v3, v6, 1);
      }
    }
  }
  return result;
}

int *storageWindowsSync(int *result, int a2)
{
  if (result[8] >= 1)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    os_log_type_t v5 = result + 14;
    do
      BOOL result = (int *)storageWindowSync((void *)v5[v4++], a2);
    while (v4 < v3[8]);
  }
  return result;
}

uint64_t _windowsMapInit(uint64_t a1, int a2)
{
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = a1 + 56;
  while (1)
  {
    unint64_t v7 = *(void *)(a1 + 8);
    if (v5 >= v7) {
      break;
    }
    qos_class_t v8 = *(unsigned int **)(v6 + 8 * v4);
    unsigned int v9 = *(unsigned __int8 *)(a1 + 48);
    unint64_t v10 = 1 << v9;
    if (v4)
    {
      if (v7 <= (v9 > 1)) {
        _windowsMapInit_cold_3();
      }
      *(_DWORD *)(a1 + 32) = v4 + 1;
      if (v7 <= v10) {
        _windowsMapInit_cold_2();
      }
      unint64_t v5 = (v4 + 1) << v9;
      if (v8) {
        goto LABEL_8;
      }
    }
    else
    {
      if (v7 >= v10) {
        unint64_t v7 = 1 << v9;
      }
      if (*(unsigned char *)(a1 + 37)) {
        unint64_t v5 = 1 << v9;
      }
      else {
        unint64_t v5 = v7;
      }
      *(_DWORD *)(a1 + 32) = 1;
      if (v8) {
        goto LABEL_8;
      }
    }
    char v11 = *(unsigned char *)(a1 + 36);
    uint64_t v12 = *(void *)(a1 + 40);
    qos_class_t v8 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x10800408BF3291EuLL);
    atomic_store(1u, v8);
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *((unsigned char *)v8 + 40) = v11;
    *((void *)v8 + 3) = 0;
    *((void *)v8 + 4) = v12;
    *(void *)(v6 + 8 * v4) = v8;
LABEL_8:
    if (!*((void *)v8 + 1)) {
      _initWindow(v8, a1, v4 << v9, v5, a2);
    }
    if (++v4 == 512)
    {
      unint64_t v7 = *(void *)(a1 + 8);
      break;
    }
  }
  if (v7 <= 1 << *(unsigned char *)(a1 + 48) && *(int *)(a1 + 32) >= 2) {
    _windowsMapInit_cold_1();
  }
  return 1;
}

uint64_t _windowsGetPtr(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 >> *(unsigned char *)(a1 + 48);
  if (v3 >= *(int *)(a1 + 32)) {
    return 0;
  }
  unint64_t v5 = *(void **)(a1 + 8 * v3 + 56);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5[1];
  if ((unint64_t)(v6 + 1) < 2) {
    return 0;
  }
  unint64_t v7 = v5[2];
  BOOL v8 = a2 >= v7;
  unint64_t v9 = a2 - v7;
  if (!v8) {
    return 0;
  }
  uint64_t result = 0;
  if (a3 + a2 <= *(void *)(a1 + 8) && v5[3] >= a3 + a2) {
    return v6 + v9;
  }
  return result;
}

BOOL _initWindow(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = a1[2];
  if (v5) {
    BOOL v6 = v5 == a3;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 || a1[1]) {
    _initWindow_cold_3();
  }
  if (*(unsigned char *)(a2 + 37) && !((a4 - a3) >> *(unsigned char *)(a2 + 48))) {
    _initWindow_cold_2();
  }
  a1[2] = a3;
  if (*(void *)(a2 + 8) < a3) {
    _initWindow_cold_1();
  }
  uint64_t v10 = *MEMORY[0x1E4F14B00];
  if (*MEMORY[0x1E4F14B00] <= ((*MEMORY[0x1E4F14B00] + ((a4 - a3) >> 5) - 1) & -*MEMORY[0x1E4F14B00])) {
    uint64_t v10 = (*MEMORY[0x1E4F14B00] + ((a4 - a3) >> 5) - 1) & -*MEMORY[0x1E4F14B00];
  }
  a1[3] = v10 + a4;
  uint64_t v11 = fd_mmap(*(void *)a2);
  a1[1] = v11;
  if (v11 == -1)
  {
    int v12 = *__error();
    a1[1] = 0;
    if (a5)
    {
      if (v12 != 1)
      {
        uint64_t v13 = mmap(0, 4uLL, 0, 4098, -50331648, 0);
        a1[1] = v13;
        if (v13 == (_DWORD *)-1)
        {
          __message_assert("%s:%u: failed assertion '%s' %s mmap(%p, offset: %llx, size: %lld) error:%d, fSize:%lld", "storage_window.c", 399, "false", "", (const void *)a2, 0, a1[3] - a1[2], v12, *(void *)(a2 + 16));
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        *((_OWORD *)a1 + 1) = xmmword_1A33A0970;
        *uint64_t v13 = 1;
      }
    }
  }
  return v11 != -1;
}

void __message_assert(char *a1, ...)
{
  va_start(va, a1);
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  va_copy((va_list)&v1[1], va);
  vasprintf((char **)v1, a1, va);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    unint64_t v3 = v1[0];
    _os_log_error_impl(&dword_1A334F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }
  free(v1[0]);
}

uint64_t _moveWindows(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4, __n128 a5)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  BOOL v8 = (void *)MEMORY[0x1E4F14B00];
  unint64_t v9 = (void *)MEMORY[0x1E4F14AF0];
  unint64_t v10 = a3 + a2;
  a4.n128_u64[0] = 134217984;
  a5.n128_u64[0] = 134219520;
  if (a2)
  {
LABEL_2:
    if (*(void *)(a1 + 16) > a2) {
      goto LABEL_3;
    }
    __message_assert("%s:%u: failed assertion '%s' %s offset: 0x%llx, freeRegion: 0x%llx", a4.n128_f64[0], a5.n128_f64[0]);
LABEL_91:
    MEMORY[0xBAD] = -559038737;
    abort();
  }
LABEL_3:
  unint64_t v11 = a2 >> *(unsigned char *)(a1 + 48);
  unint64_t v12 = *(int *)(a1 + 32);
  if (v11 < v12)
  {
    uint64_t v13 = *(void **)(a1 + 8 * v11 + 56);
    if (v13)
    {
      uint64_t v14 = v13[1];
      if ((unint64_t)(v14 + 1) >= 2)
      {
        unint64_t v15 = v13[2];
        if (v15 <= a2 && v13[3] >= v10) {
          return v14 + a2 - v15;
        }
      }
    }
  }
  unint64_t v85 = (*v8 + *(void *)(a1 + 8)) & ~*v9;
  uint64_t v86 = a1 + 8 * v11 + 56;
  int v16 = (os_unfair_lock_s *)((char *)&windowLock + 4 * v11);
  unint64_t v84 = v11 + 1;
  __n128 v82 = a5;
  __n128 v83 = a4;
  while (1)
  {
    if (v11 >= (int)v12)
    {
      int v48 = *__error();
      unsigned int v49 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = v83.n128_u32[0];
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl(&dword_1A334F000, v49, OS_LOG_TYPE_DEFAULT, "3: %lld", buf, 0xCu);
      }
      *__error() = v48;
      int v50 = *(_DWORD *)(a1 + 32);
      if (v11 >= v50)
      {
        uint64_t v51 = v50;
        do
        {
          lock = (os_unfair_lock_s *)((char *)&windowLock + 4 * v51);
          os_unfair_lock_lock(lock);
          if (v50 == *(_DWORD *)(a1 + 32))
          {
            uint64_t v52 = a1 + 8 * v51;
            uint64_t v54 = *(void *)(v52 + 56);
            int v53 = (unsigned int **)(v52 + 56);
            if (!v54)
            {
              char v55 = *(unsigned char *)(a1 + 36);
              uint64_t v56 = *(void *)(a1 + 40);
              uint64_t v57 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x10800408BF3291EuLL);
              atomic_store(1u, v57);
              *((void *)v57 + 1) = 0;
              *((void *)v57 + 2) = 0;
              *((unsigned char *)v57 + 40) = v55;
              *((void *)v57 + 3) = 0;
              *((void *)v57 + 4) = v56;
              char v58 = *(unsigned char *)(a1 + 48);
              unint64_t v59 = (*MEMORY[0x1E4F14B00] + ((unint64_t)(1 << v58) >> 5) - 1) & -*MEMORY[0x1E4F14B00];
              unint64_t v60 = v11 << v58;
              unint64_t v61 = v84 << v58;
              if (*MEMORY[0x1E4F14B00] > v59) {
                unint64_t v59 = *MEMORY[0x1E4F14B00];
              }
              *((void *)v57 + 2) = v60;
              *((void *)v57 + 3) = v59 + v61;
              *int v53 = v57;
              int v50 = *(_DWORD *)(a1 + 32);
            }
            *(_DWORD *)(a1 + 32) = v50 + 1;
          }
          os_unfair_lock_unlock(lock);
          int v50 = *(_DWORD *)(a1 + 32);
          uint64_t v51 = v50;
        }
        while (v11 >= v50);
      }
      uint64_t v34 = *(void **)v86;
      if (!*(void *)(*(void *)v86 + 16)) {
        v34[2] = v11 << *(unsigned char *)(a1 + 48);
      }
      int v16 = (os_unfair_lock_s *)((char *)&windowLock + 4 * v11);
    }
    else
    {
      if (dword_1E95AC908 >= 5)
      {
        int v62 = *__error();
        UChar32 v63 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v83.n128_u32[0];
          *(void *)&uint8_t buf[4] = v11;
          _os_log_impl(&dword_1A334F000, v63, OS_LOG_TYPE_DEFAULT, "2: %lld", buf, 0xCu);
        }
        *__error() = v62;
      }
      int v17 = *(void **)v86;
      if (*(void *)v86)
      {
        uint64_t v14 = v17[1];
        if ((unint64_t)(v14 + 1) >= 2)
        {
          unint64_t v15 = v17[2];
          if (v15 <= a2 && v17[3] >= v10 && *(void *)(a1 + 8) >= v10) {
            return v14 + a2 - v15;
          }
        }
        unint64_t v18 = v17[3] - v17[2];
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v14 = 0;
      }
      os_unfair_lock_lock(v16);
      char v27 = *(void **)v86;
      if (*(void *)v86)
      {
        uint64_t v28 = v27[1];
        if ((unint64_t)(v28 + 1) >= 2)
        {
          unint64_t v30 = v27[2];
          unint64_t v29 = v27[3];
          if (v18 != v29 - v30
            || v18 >> *(unsigned char *)(a1 + 48)
            || v14 != v28
            || v30 <= a2 && v29 >= v10 && *(void *)(a1 + 8) >= v10)
          {
            os_unfair_lock_unlock(v16);
            BOOL v8 = (void *)MEMORY[0x1E4F14B00];
            unint64_t v9 = (void *)MEMORY[0x1E4F14AF0];
            a5 = v82;
            a4 = v83;
            if (a2) {
              goto LABEL_2;
            }
            goto LABEL_3;
          }
          if (*(unsigned char *)(a1 + 37)) {
            si_analytics_log(v19, v20, v21, v22, v23, v24, v25, v26, (char)v27);
          }
        }
      }
      char v31 = *(unsigned char *)(a1 + 36);
      uint64_t v32 = *(void *)(a1 + 40);
      char v33 = malloc_type_calloc(1uLL, 0x30uLL, 0x10800408BF3291EuLL);
      uint64_t v34 = v33;
      atomic_store(1u, (unsigned int *)v33);
      v33[1] = 0;
      v33[2] = 0;
      *((unsigned char *)v33 + 40) = v31;
      v33[3] = 0;
      v33[4] = v32;
      if (v11) {
        v33[2] = v11 << *(unsigned char *)(a1 + 48);
      }
      int v16 = (os_unfair_lock_s *)((char *)&windowLock + 4 * v11);
      if (v10)
      {
        char v35 = *(unsigned char *)(a1 + 48);
        unint64_t v36 = 1 << v35;
        unint64_t v37 = v84 << v35;
        unint64_t v38 = (*MEMORY[0x1E4F14B00] + (v36 >> 5) - 1) & -*MEMORY[0x1E4F14B00];
        if (*MEMORY[0x1E4F14B00] > v38) {
          unint64_t v38 = *MEMORY[0x1E4F14B00];
        }
        unint64_t v39 = v38 + v37;
        v33[3] = v39;
        if (v39 > *(void *)(a1 + 8))
        {
          if (dword_1E95AC908 >= 5)
          {
            int v67 = *__error();
            uint64_t v68 = _SILogForLogForCategory(10);
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v69 = v34[3];
              *(_DWORD *)buf = v83.n128_u32[0];
              *(void *)&uint8_t buf[4] = v69;
              _os_log_impl(&dword_1A334F000, v68, OS_LOG_TYPE_DEFAULT, "2.1: %lld", buf, 0xCu);
            }
            *__error() = v67;
            int v16 = (os_unfair_lock_s *)((char *)&windowLock + 4 * v11);
          }
          if (*(unsigned char *)(a1 + 37))
          {
            char v40 = *(unsigned char *)(a1 + 48);
            unint64_t v41 = 1 << v40;
            unint64_t v42 = v84 << v40;
          }
          else
          {
            unint64_t v41 = *(void *)(a1 + 8);
            unint64_t v42 = v41;
          }
          unint64_t v43 = (*MEMORY[0x1E4F14B00] + (v41 >> 5) - 1) & -*MEMORY[0x1E4F14B00];
          if (*MEMORY[0x1E4F14B00] > v43) {
            unint64_t v43 = *MEMORY[0x1E4F14B00];
          }
          void v34[3] = v43 + v42;
        }
      }
      if (!v34[2]) {
        v34[2] = v11 << *(unsigned char *)(a1 + 48);
      }
      *(void *)buf = *(void *)v86;
      *(void *)uint64_t v86 = v34;
      storageWindowRelease((atomic_uint **)buf);
      os_unfair_lock_unlock(v16);
    }
    os_unfair_lock_lock(v16);
    if (!v34[2]) {
      v34[2] = v11 << *(unsigned char *)(a1 + 48);
    }
    if (!v34[3])
    {
      if (v11 || *(unsigned char *)(a1 + 37)) {
        unint64_t v44 = v84 << *(unsigned char *)(a1 + 48);
      }
      else {
        unint64_t v44 = *(void *)(a1 + 8);
      }
      void v34[3] = v44;
    }
    v34[1] = fd_mmap(*(void *)a1);
    int v45 = v34 + 1;
    uint64_t v46 = __error();
    int v47 = *v46;
    if (dword_1E95AC908 >= 5)
    {
      int locka = *v46;
      int v79 = *__error();
      log = _SILogForLogForCategory(10);
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v64 = v34[1];
        uint64_t v65 = v34[2];
        uint64_t v66 = v34[3] - v65;
        *(_DWORD *)buf = v82.n128_u32[0];
        *(void *)&uint8_t buf[4] = a1;
        __int16 v88 = 2048;
        *(void *)signed int v89 = v34;
        *(_WORD *)&v89[8] = 2048;
        *(void *)&v89[10] = v64;
        *(_WORD *)&v89[18] = 2048;
        *(void *)&v89[20] = v65;
        *(_WORD *)&v89[28] = 2048;
        *(void *)&v89[30] = v66;
        *(_WORD *)&v89[38] = 2048;
        *(void *)char v90 = a2;
        *(_WORD *)&v90[8] = 2048;
        unint64_t v91 = v10;
        _os_log_impl(&dword_1A334F000, log, OS_LOG_TYPE_DEFAULT, "mmap (%p/%p) %p 0x%llx-0x%llx (0x%llx-0x%llx)", buf, 0x48u);
      }
      *__error() = v79;
      int v47 = locka;
    }
    if (*v45 != -1) {
      goto LABEL_88;
    }
    *int v45 = 0;
    v34[2] = 0;
    void v34[3] = 0;
    if (v47 != 12 || v85 < 0x200000) {
      break;
    }
    v85 >>= 1;
    os_unfair_lock_unlock(v16);
    LODWORD(v12) = *(_DWORD *)(a1 + 32);
  }
  if (!v47) {
    goto LABEL_88;
  }
  int v70 = v47;
  int v71 = *__error();
  uint64_t v72 = _SILogForLogForCategory(10);
  if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
  {
    uint64_t v77 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 136316674;
    *(void *)&uint8_t buf[4] = "_moveWindows";
    __int16 v88 = 1024;
    *(_DWORD *)signed int v89 = 711;
    *(_WORD *)&v89[4] = 2048;
    *(void *)&v89[6] = a1;
    *(_WORD *)&v89[14] = 2048;
    *(void *)&v89[16] = a2;
    *(_WORD *)&v89[24] = 2048;
    *(void *)&v89[26] = a3;
    *(_WORD *)&v89[34] = 1024;
    *(_DWORD *)&v89[36] = v70;
    *(_WORD *)char v90 = 2048;
    *(void *)&v90[2] = v77;
    _os_log_error_impl(&dword_1A334F000, v72, OS_LOG_TYPE_ERROR, "%s:%d: mmap(%p, offset: %llx, size: %ld) error:%d, fSize:%lld", buf, 0x40u);
  }
  *__error() = v71;
  int v73 = mmap(0, 4uLL, 0, 4098, -50331648, 0);
  *int v45 = v73;
  if (v73 == (_DWORD *)-1)
  {
    __message_assert("%s:%u: failed assertion '%s' %s mmap(%p, offset: %llx, size: %ld) error:%d, fSize:%lld", v74, v75, "storage_window.c", 722);
    goto LABEL_91;
  }
  *((_OWORD *)v34 + 1) = xmmword_1A33A0970;
  _DWORD *v73 = 1;
LABEL_88:
  os_unfair_lock_unlock(v16);
  uint64_t v14 = v34[1];
  unint64_t v15 = v34[2];
  return v14 + a2 - v15;
}

void si_analytics_log(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _DWORD v9[2] = *(char **)MEMORY[0x1E4F143B8];
  v9[0] = 0;
  v9[1] = &a9;
  vasprintf(v9, "Deallocating window for stable mapping %p (%p %lld %lld) (%lld  %zu)", &a9);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
    si_analytics_log_cold_1((uint64_t *)v9);
  }
  free(v9[0]);
}

unint64_t _windowsResolvePtr(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a2 >> *(unsigned char *)(a1 + 48);
  if (v6 < *(int *)(a1 + 32))
  {
    unint64_t v7 = *(void **)(a1 + 8 * v6 + 56);
    if (v7)
    {
      if (v7[2] <= a2 && v7[3] >= a3 + a2 && *(void *)(a1 + 8) >= a3 + a2 && !v7[1])
      {
        unint64_t v11 = (os_unfair_lock_s *)((char *)&windowLock + 4 * v6);
        os_unfair_lock_lock(v11);
        if (!v7[1])
        {
          if (a2) {
            BOOL v12 = 0;
          }
          else {
            BOOL v12 = a3 == 1;
          }
          int v13 = !v12;
          _windowsMapInit(a1, v13);
        }
        os_unfair_lock_unlock(v11);
      }
    }
  }
  unint64_t result = _windowsGetPtr(a1, a2, a3);
  if (result)
  {
    if (result == a2) {
      _windowsResolvePtr_cold_2();
    }
    if (*MEMORY[0x1E4F14B00] >= result) {
      _windowsResolvePtr_cold_3();
    }
  }
  else
  {
    unint64_t result = _moveWindows(a1, a2, a3, v9, v10);
    if (*MEMORY[0x1E4F14B00] >= result) {
      _windowsResolvePtr_cold_1();
    }
  }
  return result;
}

uint64_t _storageWindowsExpandBacking(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = 1 << *(unsigned char *)(a1 + 48);
  if (v3 <= v4 && *(int *)(a1 + 32) >= 2) {
    _storageWindowsExpandBacking_cold_3();
  }
  unint64_t v5 = *(void *)(a1 + 16) + a2;
  if (v3 >> 30)
  {
    if (v5 + 1 > v3 + 0x40000000) {
      unint64_t v6 = v5 + 1;
    }
    else {
      unint64_t v6 = v3 + 0x40000000;
    }
    unint64_t v7 = ((v6 + ~v3) & 0xFFFFFFFFC0000000) + 0x40000000;
  }
  else
  {
    uint64_t v8 = 4096;
    if (v3) {
      uint64_t v8 = *(void *)(a1 + 8);
    }
    do
    {
      unint64_t v7 = v8;
      unint64_t v9 = v8 + v3;
      v8 *= 2;
    }
    while (v5 >= v9);
  }
  LODWORD(v10) = *(_DWORD *)(a1 + 32);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 8);
      if ((int)v10 >= 1 && v12 != 0)
      {
        uint64_t v14 = 0;
        do
        {
          storageWindowSync(*(void **)(a1 + 56 + 8 * v14++), 1);
          uint64_t v10 = *(int *)(a1 + 32);
        }
        while (v14 < v10);
        unint64_t v3 = *(void *)(a1 + 8);
        unint64_t v4 = 1 << *(unsigned char *)(a1 + 48);
      }
    }
    if (v3 <= v4 && (int)v10 >= 2) {
      _storageWindowsExpandBacking_cold_2();
    }
  }
  *__error() = 0;
  if (v7 && (unint64_t v15 = *(void *)(a1 + 8) + v7, v15 >= v5))
  {
    int v16 = "unknown";
    while (1)
    {
      int v17 = *(_DWORD **)a1;
      if (fd_truncate(*(void *)a1, v15) != -1)
      {
        *(void *)(a1 + 8) = v15;
        return 1;
      }
      int v18 = *__error();
      uint64_t v19 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = v16;
        if (v17) {
          int v16 = (const char *)fd_name_ptr(v17);
        }
        int v23 = *__error();
        *(_DWORD *)buf = 136316162;
        unint64_t v29 = "_storageWindowsExpandBacking";
        __int16 v30 = 1024;
        int v31 = 839;
        __int16 v32 = 2080;
        unint64_t v33 = (unint64_t)v16;
        __int16 v34 = 2048;
        unint64_t v35 = v15;
        __int16 v36 = 1024;
        int v37 = v23;
        _os_log_error_impl(&dword_1A334F000, v19, OS_LOG_TYPE_ERROR, "%s:%d: ftruncate %s (%lld) error:%d", buf, 0x2Cu);
        int v16 = v22;
      }
      *__error() = v18;
      if (*__error() != 28) {
        return 0;
      }
      int v20 = *__error();
      uint64_t v21 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        unint64_t v29 = "_storageWindowsExpandBacking";
        __int16 v30 = 1024;
        int v31 = 842;
        __int16 v32 = 2048;
        unint64_t v33 = v7 >> 1;
        _os_log_error_impl(&dword_1A334F000, v21, OS_LOG_TYPE_ERROR, "%s:%d: ftruncate(%lld) growing size", buf, 0x1Cu);
      }
      *__error() = v20;
      if (v7 >= 2)
      {
        unint64_t v15 = *(void *)(a1 + 8) + (v7 >> 1);
        v7 >>= 1;
        if (v15 >= v5) {
          continue;
        }
      }
      goto LABEL_36;
    }
  }
  else
  {
LABEL_36:
    bzero(buf, 0x400uLL);
    int v24 = *__error();
    uint64_t v25 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      _storageWindowsExpandBacking_cold_1((_DWORD **)a1, buf);
    }
    uint64_t v26 = __error();
    uint64_t result = 0;
    *uint64_t v26 = v24;
  }
  return result;
}

void _release_read_window(OSQueueHead *__list, void *__new)
{
  if (__new && atomic_fetch_add((atomic_uint *volatile)__new + 2, 0xFFFFFFFF) == 1)
  {
    for (uint64_t i = 73; i != 585; ++i)
    {
      unint64_t v5 = (atomic_uint *)*((void *)__new + i);
      if (v5)
      {
        if (atomic_fetch_add(v5, 0xFFFFFFFF) == 1) {
          storageWindowDestroyImmediate(v5);
        }
        *((void *)__new + i) = 0;
      }
    }
    OSAtomicEnqueue(__list, __new, 0);
  }
}

void __storageWindowDestroy_block_invoke(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);

  storageWindowDestroyImmediate(v1);
}

void storageWindowDestroyImmediate(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if ((unint64_t)v2 + 1 >= 2) {
    munmap(v2, a1[3] - a1[2]);
  }

  free(a1);
}

void OUTLINED_FUNCTION_0()
{
  MEMORY[0xBAD] = -559038737;
  abort();
}

void OUTLINED_FUNCTION_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x22u);
}

void __message_assert_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  v9[1] = &a9;
  vasprintf((char **)v9, "%s:%u: failed assertion '%s' %s ", &a9);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v11 = v9[0];
    _os_log_error_impl(&dword_1A334F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }
  free(v9[0]);
}

uint64_t storage_array_FdPtr(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t *storage_array_HeaderStore(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1[5] < a1[6]) {
    storage_array_HeaderStore_cold_1((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v10 = a1[1];
  uint64_t v11 = (unsigned char *)*a2;
  if (v10 >> 28)
  {
    *uint64_t v11 = v10 | 0x80;
    v11[1] = (v10 >> 7) | 0x80;
    v11[2] = (v10 >> 14) | 0x80;
    v11[3] = (v10 >> 21) | 0x80;
    v11[4] = v10 >> 28;
    uint64_t v12 = 5;
  }
  else if ((v10 & 0xFE00000) != 0)
  {
    *uint64_t v11 = v10 | 0x80;
    v11[1] = (v10 >> 7) | 0x80;
    v11[2] = (v10 >> 14) | 0x80;
    v11[3] = (v10 & 0xFE00000) >> 21;
    uint64_t v12 = 4;
  }
  else if ((v10 & 0x1FC000) != 0)
  {
    *uint64_t v11 = v10 | 0x80;
    v11[1] = (v10 >> 7) | 0x80;
    v11[2] = (v10 & 0x1FC000) >> 14;
    uint64_t v12 = 3;
  }
  else if ((v10 & 0x3F80) != 0)
  {
    *uint64_t v11 = v10 | 0x80;
    v11[1] = (unsigned __int16)(v10 & 0x3F80) >> 7;
    uint64_t v12 = 2;
  }
  else
  {
    *uint64_t v11 = v10;
    uint64_t v12 = 1;
  }
  *a2 += v12;
  storeVInt64(a2, a1[6]);
  storeVInt64(a2, a1[5]);
  unint64_t v13 = a1[2];

  return storeVInt64(a2, v13);
}

uint64_t *storeVInt64(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = *result;
  if (HIDWORD(a2))
  {
    if ((a2 & 0x8000000000000000) != 0)
    {
      *(unsigned char *)uint64_t v2 = a2 | 0x80;
      uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(a2);
      *(int8x8_t *)(v2 + 1) = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1A33A09A0), (int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1A33A0990)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1A33A09C0), (int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1A33A09B0)))), (int8x8_t)0x8080808080808080);
      *(unsigned char *)(v2 + 9) = (a2 & 0x8000000000000000) != 0;
      uint64_t v3 = 10;
    }
    else if ((a2 & 0x7F00000000000000) != 0)
    {
      uint64x2_t v4 = (uint64x2_t)vdupq_n_s64(a2);
      *(unsigned char *)uint64_t v2 = a2 | 0x80;
      int16x8_t v5 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1A33A09A0), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1A33A0990));
      v5.i64[0] = *(void *)&vmovn_s32((int32x4_t)v5) | 0x80008000800080;
      *(_DWORD *)(v2 + 1) = vmovn_s16(v5).u32[0];
      *(unsigned char *)(v2 + 5) = (a2 >> 35) | 0x80;
      *(unsigned char *)(v2 + 6) = (a2 >> 42) | 0x80;
      *(unsigned char *)(v2 + 7) = (a2 >> 49) | 0x80;
      *(unsigned char *)(v2 + 8) = (a2 & 0x7F00000000000000) >> 56;
      uint64_t v3 = 9;
    }
    else if ((a2 & 0xFE000000000000) != 0)
    {
      *(unsigned char *)uint64_t v2 = a2 | 0x80;
      uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(a2);
      int16x8_t v8 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_1A33A09A0), (int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_1A33A0990));
      v8.i64[0] = *(void *)&vmovn_s32((int32x4_t)v8) | 0x80008000800080;
      *(_DWORD *)(v2 + 1) = vmovn_s16(v8).u32[0];
      *(unsigned char *)(v2 + 5) = (a2 >> 35) | 0x80;
      *(unsigned char *)(v2 + 6) = (a2 >> 42) | 0x80;
      *(unsigned char *)(v2 + 7) = (a2 & 0xFE000000000000) >> 49;
      uint64_t v3 = 8;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = a2 | 0x80;
      uint64x2_t v9 = (uint64x2_t)vdupq_n_s64(a2);
      int16x8_t v10 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v9, (uint64x2_t)xmmword_1A33A09A0), (int32x4_t)vshlq_u64(v9, (uint64x2_t)xmmword_1A33A0990));
      v10.i64[0] = *(void *)&vmovn_s32((int32x4_t)v10) | 0x80008000800080;
      *(_DWORD *)(v2 + 1) = vmovn_s16(v10).u32[0];
      if ((a2 & 0x1FC0000000000) != 0)
      {
        *(unsigned char *)(v2 + 5) = (a2 >> 35) | 0x80;
        *(unsigned char *)(v2 + 6) = (a2 & 0x1FC0000000000) >> 42;
        uint64_t v3 = 7;
      }
      else
      {
        *(unsigned char *)(v2 + 5) = (a2 >> 35) & 0x7F;
        uint64_t v3 = 6;
      }
    }
  }
  else if ((a2 & 0x7F0000000) != 0)
  {
    *(unsigned char *)uint64_t v2 = a2 | 0x80;
    *(unsigned char *)(v2 + 1) = (a2 >> 7) | 0x80;
    *(unsigned char *)(v2 + 2) = (a2 >> 14) | 0x80;
    *(unsigned char *)(v2 + 3) = (a2 >> 21) | 0x80;
    *(unsigned char *)(v2 + 4) = (a2 & 0x7F0000000) >> 28;
    uint64_t v3 = 5;
  }
  else if ((a2 & 0xFE00000) != 0)
  {
    *(unsigned char *)uint64_t v2 = a2 | 0x80;
    *(unsigned char *)(v2 + 1) = (a2 >> 7) | 0x80;
    *(unsigned char *)(v2 + 2) = (a2 >> 14) | 0x80;
    *(unsigned char *)(v2 + 3) = (a2 & 0xFE00000) >> 21;
    uint64_t v3 = 4;
  }
  else if ((a2 & 0x1FC000) != 0)
  {
    *(unsigned char *)uint64_t v2 = a2 | 0x80;
    *(unsigned char *)(v2 + 1) = (a2 >> 7) | 0x80;
    *(unsigned char *)(v2 + 2) = (a2 & 0x1FC000) >> 14;
    uint64_t v3 = 3;
  }
  else if ((a2 & 0x3F80) != 0)
  {
    *(unsigned char *)uint64_t v2 = a2 | 0x80;
    *(unsigned char *)(v2 + 1) = (a2 & 0x3F80) >> 7;
    uint64_t v3 = 2;
  }
  else
  {
    *(unsigned char *)uint64_t v2 = a2;
    uint64_t v3 = 1;
  }
  *result += v3;
  return result;
}

uint64_t storage_array_HeaderRestore(void *a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3) {
    bzero(a1, 0x1088uLL);
  }
  int16x8_t v10 = *a2;
  unsigned int v11 = **a2;
  if ((**a2 & 0x80000000) == 0)
  {
    uint64_t v12 = 1;
LABEL_12:
    int v17 = &v10[v12];
    *a2 = v17;
    *((void *)a1 + 1) = v11;
    goto LABEL_13;
  }
  int v13 = v10[1];
  if ((v10[1] & 0x80000000) == 0)
  {
    unsigned int v11 = v11 & 0x7F | (v13 << 7);
    uint64_t v12 = 2;
    goto LABEL_12;
  }
  int v14 = v10[2];
  if ((v10[2] & 0x80000000) == 0)
  {
    int v15 = ((v13 & 0x7F) << 7) | (v14 << 14) | v11 & 0x7F;
    uint64_t v12 = 3;
LABEL_11:
    unsigned int v11 = v15;
    goto LABEL_12;
  }
  int v16 = v10[3];
  if ((v10[3] & 0x80000000) == 0)
  {
    int v15 = ((v14 & 0x7F) << 14) | (v16 << 21) | ((v13 & 0x7F) << 7) | v11 & 0x7F;
    uint64_t v12 = 4;
    goto LABEL_11;
  }
  int v29 = v10[4];
  int v17 = v10 + 5;
  *a2 = v17;
  *((void *)a1 + 1) = ((v16 & 0x7F) << 21) | (v29 << 28) | ((v14 & 0x7F) << 14) | ((v13 & 0x7F) << 7) | v11 & 0x7F;
  if (v29 < 0)
  {
LABEL_13:
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      char v20 = *v17++;
      v19 |= (unint64_t)(v20 & 0x7F) << v18;
      if ((v20 & 0x80) == 0) {
        break;
      }
      BOOL v21 = v18 == 63;
      v18 += 7;
    }
    while (!v21);
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    *a2 = v17;
    *((void *)a1 + 6) = v19;
    do
    {
      char v24 = *v17++;
      v23 |= (unint64_t)(v24 & 0x7F) << v22;
      if ((v24 & 0x80) == 0) {
        break;
      }
      BOOL v21 = v22 == 63;
      v22 += 7;
    }
    while (!v21);
    *a2 = v17;
    *((void *)a1 + 5) = v23;
    if (v23 < v19) {
      storage_array_HeaderRestore_cold_1((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    do
    {
      char v27 = *v17++;
      v26 |= (unint64_t)(v27 & 0x7F) << v25;
      if ((v27 & 0x80) == 0) {
        break;
      }
      BOOL v21 = v25 == 63;
      v25 += 7;
    }
    while (!v21);
    *a2 = v17;
    *((void *)a1 + 2) = v26;
    return 1;
  }
  int v30 = *__error();
  int v31 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
    storage_array_HeaderRestore_cold_2();
  }
  __int16 v32 = __error();
  uint64_t result = 0;
  *__int16 v32 = v30;
  return result;
}

void storage_array_ReadInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(void *)(a1 + 32) = a2;
  uint64_t v11 = a1 + 32;
  uint64_t v12 = (unsigned char *)(a1 + 4188);
  int v13 = malloc_type_malloc(0xD0uLL, 0x1020040167D79A3uLL);
  *(void *)(v11 + 4192) = v13;
  *int v13 = 0u;
  v13[1] = 0u;
  v13[2] = 0u;
  v13[3] = 0u;
  v13[4] = 0u;
  v13[5] = 0u;
  v13[6] = 0u;
  v13[7] = 0u;
  v13[8] = 0u;
  v13[9] = 0u;
  v13[10] = 0u;
  v13[11] = 0u;
  *((void *)v13 + 24) = 0;
  pthread_rwlock_init(*(pthread_rwlock_t **)(v11 + 4192), 0);
  *(void *)(*(void *)(v11 + 4192) + 200) = 0;
  *uint64_t v12 = 1;
  v12[2] = 0;
  *(void *)(v11 - 24) = a5;
  *(void *)(v11 - 16) = a3;
  storageWindowsInit(v11, a2, a4, a6, 1, 0, 0);
  *(void *)(v11 + 16) = a4;
}

BOOL storage_array_Init(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10, void *aBlock, uint64_t a12)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    storage_array_Init_cold_1((uint64_t)a1, a2, a3, 0, a5, a6, a7, a8);
  }
  char v12 = a8;
  int v13 = a7;
  int v14 = a6;
  bzero(a1, 0x1088uLL);
  if (a12) {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(a12 + 16))(a12);
  }
  if (a5)
  {
    *a1 = a10;
    if (v14)
    {
      *((void *)a1 + 1) = a4;
      *((void *)a1 + 2) = a2;
      uint64_t v27 = (uint64_t)(a1 + 8);
      storageWindowsInit((uint64_t)(a1 + 8), a5, a3 + a2, a3 + a2, v12, 0, aBlock);
      *((void *)a1 + 6) = a2;
    }
    else
    {
      unint64_t st_size = *((void *)a1 + 5);
      if (st_size)
      {
        if (st_size < *((void *)a1 + 6)) {
          storage_array_Init_cold_4(v20, v21, st_size, v22, v23, v24, v25, v26);
        }
      }
      else
      {
        memset(&v42, 0, sizeof(v42));
        uint64_t v33 = fd_stat(a5, &v42);
        if (v33) {
          unint64_t st_size = a3;
        }
        else {
          unint64_t st_size = v42.st_size;
        }
        *((void *)a1 + 1) = a4;
        *((void *)a1 + 2) = a2;
        if (st_size < *((void *)a1 + 6)) {
          storage_array_Init_cold_3(v33, v34, st_size, v35, v36, v37, v38, v39);
        }
      }
      uint64_t v27 = (uint64_t)(a1 + 8);
      storageWindowsInit((uint64_t)(a1 + 8), a5, st_size, st_size, v12, 0, aBlock);
    }
    a1[6] = v13;
    *((void *)a1 + 4) = a5;
    char v40 = malloc_type_malloc(0xD0uLL, 0x1020040167D79A3uLL);
    *((void *)a1 + 528) = v40;
    *char v40 = 0u;
    v40[1] = 0u;
    v40[2] = 0u;
    v40[3] = 0u;
    v40[4] = 0u;
    v40[5] = 0u;
    v40[6] = 0u;
    v40[7] = 0u;
    v40[8] = 0u;
    v40[9] = 0u;
    v40[10] = 0u;
    v40[11] = 0u;
    v40[12] = 0u;
    pthread_rwlock_init(*((pthread_rwlock_t **)a1 + 528), 0);
    *((unsigned char *)a1 + 4188) = v12;
    *((unsigned char *)a1 + 4190) = a9 & ~v12;
    a1[1054] = 0;
    int v41 = _windowsMapInit(v27, 0);
    BOOL result = 0;
    if (v41)
    {
      if (v12) {
        return 1;
      }
      if (v14) {
        fd_truncate(a5, 0);
      }
      return !fd_truncate(a5, *((void *)a1 + 5));
    }
  }
  else
  {
    int v28 = *__error();
    int v29 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      storage_array_Init_cold_2();
    }
    int v30 = __error();
    BOOL result = 0;
    int *v30 = v28;
  }
  return result;
}

void storage_array_Close(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  storageWindowsUnmap(a1 + 32);
  storageWindowsClose(v2);
  uint64_t v3 = *(pthread_rwlock_t **)(a1 + 4224);
  if (v3)
  {
    pthread_rwlock_wrlock(v3);
    _release_read_window(&availableArrayReaders, *(void **)(*(void *)(a1 + 4224) + 200));
    pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 4224));
    pthread_rwlock_destroy(*(pthread_rwlock_t **)(a1 + 4224));
    free(*(void **)(a1 + 4224));
    *(void *)(a1 + 4224) = 0;
  }
  *(unsigned char *)(a1 + 4189) = 1;
}

int *storage_array_Sync(int *result, int a2, int a3)
{
  uint64x2_t v4 = result;
  if (a2) {
    BOOL result = storageWindowsSync(result + 8, 0);
  }
  if (a3)
  {
    BOOL result = (int *)*((void *)v4 + 4);
    if (result)
    {
      return (int *)fd_sync((uint64_t)result, 0, 1);
    }
  }
  return result;
}

unint64_t storage_array_AllocOffsetFromEnd(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = a1[1];
  uint64_t v10 = a1[6];
  uint64_t v11 = v10 + v9;
  if (v10 + v9 < a1[5]) {
    goto LABEL_2;
  }
  if (_storage_array_Expand((uint64_t)a1))
  {
    uint64_t v10 = a1[6];
    uint64_t v11 = v10 + v9;
LABEL_2:
    a1[6] = v11;
    storage_array_dirtyRange((uint64_t)a1, 0, a1[2], a4, a5, a6, a7, a8);
    return (v10 - a1[2]) / v9;
  }
  return 0;
}

uint64_t _storage_array_Expand(uint64_t a1)
{
  uint64_t v2 = _storageWindowsExpandBacking(a1 + 32, *(void *)(a1 + 8));
  if (v2)
  {
    pthread_rwlock_wrlock(*(pthread_rwlock_t **)(a1 + 4224));
    uint64_t v3 = *(pthread_rwlock_t **)(a1 + 4224);
    sig = (void *)v3[1].__sig;
    v3[1].__sig = 0;
    pthread_rwlock_unlock(v3);
    _release_read_window(&availableArrayReaders, sig);
  }
  return v2;
}

void storage_array_dirtyRange(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = a2 >> 20;
  uint64_t v11 = (void *)(a1 + 4192);
  bit_vector_set((void *)(a1 + 4192), (a2 >> 20), a3, a4, a5, a6, a7, a8);
  unint64_t v18 = (a3 + a2) >> 20;
  if (v18 > v10)
  {
    unsigned int v19 = v10 + 1;
    do
      bit_vector_set(v11, v19, v12, v13, v14, v15, v16, v17);
    while (v18 > v19++);
  }
}

void bit_vector_set(void *a1, CFIndex idx, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex v10 = a1[1];
  if (v10 <= idx)
  {
    if (v10) {
      CFIndex v12 = a1[1];
    }
    else {
      CFIndex v12 = 32;
    }
    while (1)
    {
      v12 *= 2;
      if (v12 > idx) {
        break;
      }
      if (v12 <= v10) {
        bit_vector_set_cold_2((uint64_t)a1, idx, a3, a4, a5, a6, a7, a8);
      }
    }
    CFBitVectorRef v13 = (const __CFBitVector *)a1[2];
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v13) {
      MutableCopy = CFBitVectorCreateMutableCopy(v14, v12, v13);
    }
    else {
      MutableCopy = CFBitVectorCreateMutable(v14, v12);
    }
    uint64_t v23 = MutableCopy;
    if (!MutableCopy) {
      bit_vector_set_cold_1(0, v16, v17, v18, v19, v20, v21, v22);
    }
    CFBitVectorSetCount(MutableCopy, v12);
    uint64_t v24 = (const void *)a1[2];
    if (v24) {
      CFRelease(v24);
    }
    a1[1] = v12;
    a1[2] = v23;
  }
  if (*a1 <= idx) {
    *a1 = idx + 1;
  }
  uint64_t v11 = (__CFBitVector *)a1[2];

  CFBitVectorSetBitAtIndex(v11, idx, 1u);
}

unint64_t storage_array_ResolvePtr(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (a3) {
    a2 = *(void *)(a1 + 16) + v4 * a2;
  }
  uint64_t v5 = a1 + 32;

  return _windowsResolvePtr(v5, a2, v4);
}

BOOL storage_array_ValidPtr(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = v3 * a2;
  unint64_t v5 = *(void *)(a1 + 48);
  BOOL v6 = v3 * a2 + v3 <= v5;
  BOOL v7 = v4 >= v5;
  BOOL v8 = v4 < v5;
  if (v7 || a3 == 0) {
    return v8;
  }
  else {
    return v6;
  }
}

BOOL isRegisteredForCloning(int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int valuePtr = a1;
  CFNumberRef v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  pthread_mutex_lock(&registeredFdsLock);
  if (registeredCloneFds) {
    BOOL v2 = CFSetContainsValue((CFSetRef)registeredCloneFds, v1) != 0;
  }
  else {
    BOOL v2 = 0;
  }
  pthread_mutex_unlock(&registeredFdsLock);
  CFRelease(v1);
  return v2;
}

uint64_t _copyFile(int a1, const char *a2, int a3, const char *a4, _DWORD *a5, off_t a6)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  memset(&v64, 0, sizeof(v64));
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (*a5)
  {
    int v6 = *__error();
    BOOL v7 = _SILogForLogForCategory(10);
    os_log_type_t v8 = 2 * (dword_1E95AC908 < 4);
    if (os_log_type_enabled(v7, v8))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A334F000, v7, v8, "canceled", buf, 2u);
    }
    unint64_t v9 = 0;
    CFIndex v10 = 0;
    uint64_t v11 = 0;
    LODWORD(v12) = -1;
    goto LABEL_34;
  }
  CFAllocatorRef v14 = a5;
  uint64_t v11 = (atomic_uint *)fd_create(a1, a2, 0);
  uint64_t v17 = fd_open((uint64_t)v11, &v59);
  uint64_t v12 = v17;
  if (!v11 || v17 == -1)
  {
    int v6 = *__error();
    uint64_t v38 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
      _copyFile_cold_1();
    }
    goto LABEL_33;
  }
  if (fstat(v17, &v64) == -1)
  {
    int v6 = *__error();
    uint64_t v39 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      _copyFile_cold_2();
    }
LABEL_33:
    unint64_t v9 = 0;
    CFIndex v10 = 0;
LABEL_34:
    uint64_t v19 = 0xFFFFFFFFLL;
LABEL_35:
    uint64_t v40 = 0;
    *__error() = v6;
    goto LABEL_36;
  }
  unint64_t v9 = (atomic_uint *)fd_create(a3, a4, 536872450);
  uint64_t v18 = fd_open((uint64_t)v9, &v58);
  uint64_t v19 = v18;
  if (!v9 || v18 == -1)
  {
    int v6 = *__error();
    uint64_t v43 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
      _copyFile_cold_3();
    }
    goto LABEL_47;
  }
  ci_preallocate(v18, v64.st_size);
  if (_fd_ftruncate_guarded(v19, (uint64_t)&v58, v64.st_size) == -1)
  {
    int v6 = *__error();
    unint64_t v44 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
      _copyFile_cold_4();
    }
LABEL_47:
    CFIndex v10 = 0;
    goto LABEL_35;
  }
  uint64_t v57 = v14;
  fcntl(v12, 48, 1);
  fcntl(v12, 76, 1);
  fcntl(v19, 48, 1);
  fcntl(v19, 76, 1);
  uint64_t v20 = malloc_type_malloc(0x100000uLL, 0xE2BF8B06uLL);
  CFIndex v10 = v20;
  off_t v56 = a6;
  uint64_t v21 = 0;
  if (v64.st_size > a6)
  {
    uint64_t v54 = v20;
    char v55 = v9;
    unsigned int v53 = v12;
    while (!*v14)
    {
      ssize_t v22 = prot_pread(v12, v10, 0x100000uLL, a6);
      if (v22 == -1)
      {
        int v45 = *__error();
        int v50 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
          _copyFile_cold_6();
        }
        goto LABEL_66;
      }
      if (*v14)
      {
        int v45 = *__error();
        uint64_t v51 = _SILogForLogForCategory(10);
        os_log_type_t v52 = 2 * (dword_1E95AC908 < 4);
        if (os_log_type_enabled(v51, v52))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A334F000, v51, v52, "canceled", buf, 2u);
        }
LABEL_66:
        LODWORD(v12) = v53;
        goto LABEL_52;
      }
      int64_t v23 = v22;
      uint64_t v24 = prot_pwrite_guarded(v19, (uint64_t)&v58, (uint64_t)v10, v22, a6);
      if (v24 == -1)
      {
LABEL_49:
        int v45 = *__error();
        uint64_t v46 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          _copyFile_cold_7();
        }
        LODWORD(v12) = v53;
        CFAllocatorRef v14 = v57;
        goto LABEL_52;
      }
      uint64_t v32 = v24;
      char v33 = 1;
      uint64_t v34 = (uint64_t)v10;
      while (1)
      {
        unint64_t v35 = v23 - v32;
        if (v23 < v32) {
          _copyFile_cold_8(v24, v25, v26, v27, v28, v29, v30, v31);
        }
        v21 += v32;
        if (v23 <= v32) {
          break;
        }
        if ((v32 != 0) | v33 & 1)
        {
          v33 &= v32 != 0;
        }
        else
        {
          int v36 = *__error();
          uint64_t v37 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            unint64_t v61 = "_copyFile";
            __int16 v62 = 1024;
            int v63 = 194;
            _os_log_error_impl(&dword_1A334F000, v37, OS_LOG_TYPE_ERROR, "%s:%d: write failed", buf, 0x12u);
          }
          char v33 = 0;
          *__error() = v36;
        }
        a6 += v32;
        v34 += v32;
        uint64_t v24 = prot_pwrite_guarded(v19, (uint64_t)&v58, v34, v35, a6);
        uint64_t v32 = v24;
        int64_t v23 = v35;
        if (v24 == -1) {
          goto LABEL_49;
        }
      }
      a6 += v23;
      uint64_t v12 = v53;
      CFIndex v10 = v54;
      unint64_t v9 = v55;
      CFAllocatorRef v14 = v57;
      if (a6 >= v64.st_size) {
        goto LABEL_53;
      }
    }
    int v45 = *__error();
    int v48 = _SILogForLogForCategory(10);
    os_log_type_t v49 = 2 * (dword_1E95AC908 < 4);
    if (os_log_type_enabled(v48, v49))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A334F000, v48, v49, "canceled", buf, 2u);
    }
LABEL_52:
    *__error() = v45;
    CFIndex v10 = v54;
    unint64_t v9 = v55;
  }
LABEL_53:
  if (v21 + v56 == v64.st_size)
  {
    uint64_t v40 = 1;
  }
  else
  {
    if (!*v14)
    {
      int v6 = *__error();
      int v47 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
        _copyFile_cold_5();
      }
      goto LABEL_35;
    }
    uint64_t v40 = 0;
  }
LABEL_36:
  int v41 = *__error();
  free(v10);
  prot_fsync(v19, 0);
  if ((v12 & 0x80000000) == 0) {
    fd_close(v11, v12, v59);
  }
  fd_release(v11);
  if ((v19 & 0x80000000) == 0) {
    fd_close(v9, v19, v58);
  }
  fd_release(v9);
  if (v41) {
    *__error() = v41;
  }
  return v40;
}

uint64_t copyFile(int a1, const char *a2, int a3, const char *a4, _DWORD *a5)
{
  return copyFileFallback(a1, a2, a3, a4, a5, 1, 1);
}

uint64_t copyFileFallback(int a1, const char *a2, int a3, const char *a4, _DWORD *a5, char a6, int a7)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (a1 != a3 || !isRegisteredForCloning(a1) || !a7) {
    return _copyFile(a1, a2, a3, a4, a5, 0);
  }
  bzero(v45, 0x400uLL);
  bzero(v44, 0x400uLL);
  CFAllocatorRef v14 = faccurate_realpath(a1, v45);
  if (!v14)
  {
    int v28 = *__error();
    int v29 = *__error();
    uint64_t v30 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      copyFileFallback_cold_1();
    }
    goto LABEL_28;
  }
  uint64_t v15 = v14;
  size_t v16 = strlen(v14);
  snprintf((char *)&v15[v16], 1024 - v16, "/%s", a2);
  uint64_t v17 = faccurate_realpath(a1, v44);
  if (!v17)
  {
    int v28 = *__error();
    int v29 = *__error();
    uint64_t v32 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      copyFileFallback_cold_2();
    }
LABEL_28:
    *__error() = v29;
    char v33 = __error();
    uint64_t result = 0;
    *char v33 = v28;
    return result;
  }
  uint64_t v18 = (const std::__fs::filesystem::path *)v17;
  char v38 = a6;
  size_t v19 = strlen(v17);
  uint64_t v37 = a4;
  snprintf((char *)v18 + v19, 1024 - v19, "/%s", a4);
  int v20 = *__error();
  uint64_t v21 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v41 = v15;
    __int16 v42 = 2080;
    uint64_t v43 = v18;
    _os_log_impl(&dword_1A334F000, v21, OS_LOG_TYPE_DEFAULT, "copy file %s to %s", buf, 0x16u);
  }
  *__error() = v20;
  while (1)
  {
    int v22 = open((const char *)v18, 0);
    to = 0;
    asprintf(&to, "%s.tmp", (const char *)v18);
    unlink(to);
    int v23 = copyfile(v15, to, 0, 0x20C0000u);
    int v25 = *__error();
    if (v25 != 45) {
      goto LABEL_12;
    }
    int v26 = open(v15, 0);
    if (v26 != -1)
    {
      close(v26);
      int v25 = 45;
LABEL_12:
      if (v23) {
        goto LABEL_14;
      }
LABEL_13:
      rename((const std::__fs::filesystem::path *)to, v18, v24);
      int v23 = v27;
      int v25 = *__error();
      goto LABEL_14;
    }
    int v25 = *__error();
    if (!v23) {
      goto LABEL_13;
    }
LABEL_14:
    free(to);
    if (v22 != -1) {
      close(v22);
    }
    if (v23 != -1) {
      break;
    }
    if ((prot_error_check() & 1) == 0)
    {
      *__error() = v25;
      *__error() = v25;
      if ((prot_error_check() & 1) == 0)
      {
        *__error() = v25;
        goto LABEL_29;
      }
    }
  }
  *__error() = v25;
  if (!v23) {
    return 1;
  }
LABEL_29:
  int v34 = *__error();
  int v35 = *__error();
  int v36 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
    copyFileFallback_cold_3((uint64_t)v15, (uint64_t)v18, v36);
  }
  *__error() = v35;
  *__error() = v34;
  if (v38)
  {
    a4 = v37;
    return _copyFile(a1, a2, a3, a4, a5, 0);
  }
  return 0;
}

void OUTLINED_FUNCTION_1_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x18u);
}

void OUTLINED_FUNCTION_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x28u);
}

void *fd_create_protected(int a1, const char *a2, int a3, unsigned __int8 a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (fd_create_protected_once != -1) {
    dispatch_once(&fd_create_protected_once, &__block_literal_global_0);
  }
  os_log_type_t v8 = malloc_type_malloc(0x68uLL, 0x10300409CE040BCuLL);
  *(_DWORD *)os_log_type_t v8 = -50529037;
  void v8[2] = 0;
  v8[3] = 0;
  v8[1] = 0;
  v8[4] = 1;
  *((_DWORD *)v8 + 10) = -1;
  *((_DWORD *)v8 + 11) = a1;
  int v9 = (a3 & 3) != 0;
  *((_DWORD *)v8 + 12) = a3 | (v9 << 29);
  __int16 v10 = *((_WORD *)v8 + 28);
  *((_WORD *)v8 + 30) &= 0xFC00u;
  __int16 v11 = v10 & 0xFFF0 | (4 * v9);
  *((_WORD *)v8 + 28) = v11;
  uint64_t v12 = strdup(a2);
  *((unsigned char *)v8 + 52) = 0;
  *((_DWORD *)v8 + 17) = 0;
  v8[9] = v12;
  v8[10] = 0;
  v8[11] = 0;
  v8[12] = 0;
  *((_WORD *)v8 + 28) = v11 & 0xF00F | (16 * a4);
  uint64_t v21 = 0;
  int v13 = _fd_acquire_fd((uint64_t)v8, &v21);
  if (v13 == -1)
  {
    int v14 = *__error();
    bzero(v33, 0x400uLL);
    uint64_t v15 = faccurate_realpath(a1, v33);
    if ((a3 & 0x200) != 0) {
      int v16 = 17;
    }
    else {
      int v16 = 2;
    }
    if (v14 == v16)
    {
      if (gSILogLevels < 5)
      {
LABEL_15:
        fd_release((atomic_uint *)v8);
        os_log_type_t v8 = 0;
        *__error() = v14;
        return v8;
      }
      int v17 = *__error();
      uint64_t v18 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316162;
        int v23 = v15;
        __int16 v24 = 2080;
        *(void *)int v25 = a2;
        *(_WORD *)&v25[8] = 1024;
        *(_DWORD *)&v25[10] = a3;
        __int16 v26 = 1024;
        *(_DWORD *)int v27 = a1;
        *(_WORD *)&v27[4] = 1024;
        *(_DWORD *)&v27[6] = v14;
        _os_log_impl(&dword_1A334F000, v18, OS_LOG_TYPE_DEFAULT, "fd_open failed, path:%s, name:%s, flags:0x%x, parent_fd:%d, errno:%d", buf, 0x28u);
      }
    }
    else
    {
      int v17 = *__error();
      size_t v19 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        int v23 = "fd_create_protected";
        __int16 v24 = 1024;
        *(_DWORD *)int v25 = 207;
        *(_WORD *)&v25[4] = 2080;
        *(void *)&v25[6] = v15;
        __int16 v26 = 2080;
        *(void *)int v27 = a2;
        *(_WORD *)&v27[8] = 1024;
        int v28 = a3;
        __int16 v29 = 1024;
        int v30 = a1;
        __int16 v31 = 1024;
        int v32 = v14;
        _os_log_error_impl(&dword_1A334F000, v19, OS_LOG_TYPE_ERROR, "%s:%d: fd_open failed, path:%s, name:%s, flags:0x%x, parent_fd:%d, errno:%d", buf, 0x38u);
      }
    }
    *__error() = v17;
    goto LABEL_15;
  }
  *((_DWORD *)v8 + 12) &= 0xFFFFF9FF;
  _fd_release_fd(v8, v13, 0, v21);
  return v8;
}

int *__fd_create_protected_block_invoke()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7.int rlim_cur = 0;
  v7.rlim_max = 0;
  if (getrlimit(8, &v7)) {
    int rlim_cur = 1024;
  }
  else {
    int rlim_cur = v7.rlim_cur;
  }
  gOpenLimit = rlim_cur;
  CFNumberRef v1 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200406E52F545uLL);
  g_fd_list = (uint64_t)v1;
  int v2 = rlim_cur / 4;
  if (rlim_cur >= 512) {
    int v2 = 128;
  }
  v1[2] = v2;
  int v3 = *__error();
  unint64_t v4 = _SILogForLogForCategory(0);
  os_log_type_t v5 = 2 * (gSILogLevels < 4);
  if (os_log_type_enabled(v4, v5))
  {
    *(_DWORD *)buf = 67109120;
    int v9 = gOpenLimit;
    _os_log_impl(&dword_1A334F000, v4, v5, "fd limit %d", buf, 8u);
  }
  uint64_t result = __error();
  *uint64_t result = v3;
  return result;
}

uint64_t fd_open(uint64_t a1, void *a2)
{
  return _fd_acquire_fd(a1, a2);
}

_DWORD *fd_close(_DWORD *a1, int a2, uint64_t a3)
{
  return _fd_release_fd(a1, a2, 0, a3);
}

void fd_release(atomic_uint *a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  if (a1 && atomic_fetch_add_explicit(a1 + 8, 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    if (*a1 != -50529037) {
      fd_release_cold_1();
    }
    v5[0] = 0;
    pthread_mutex_lock(&g_fd_lock);
    int v2 = _fd_remove_locked((uint64_t)a1, v5);
    pthread_mutex_unlock(&g_fd_lock);
    if (v2 != -1) {
      guarded_close_np();
    }
    *a1 = 0;
    free(*((void **)a1 + 9));
    uint64_t v4 = *((void *)a1 + 10);
    if (v4) {
      fd_release(v4, v3);
    }
    free(a1);
  }
}

void *fd_create(int a1, const char *a2, int a3)
{
  return fd_create_protected(a1, a2, a3, 0);
}

void *fd_create_read_only(int a1, const char *a2)
{
  if (a1 == -1) {
    return 0;
  }
  uint64_t v4 = malloc_type_malloc(0x68uLL, 0x10300409CE040BCuLL);
  *(_DWORD *)uint64_t v4 = -50529037;
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = 0x100000001;
  *((_DWORD *)v4 + 10) = a1;
  *(void *)((char *)v4 + 44) = 0xFFFFFFFFLL;
  __int16 v5 = *((_WORD *)v4 + 28);
  *((_WORD *)v4 + 30) &= 0xFC00u;
  *((_WORD *)v4 + 28) = v5 & 0xFFF0;
  int v6 = strdup(a2);
  *((unsigned char *)v4 + 52) = 0;
  v4[9] = v6;
  v4[10] = 0;
  *((_DWORD *)v4 + 17) = 1;
  v4[11] = 0;
  v4[12] = 0;
  return v4;
}

char *fd_name(uint64_t a1, char *a2, size_t a3)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != -50529037) {
    fd_name_cold_1();
  }
  os_unfair_lock_lock((os_unfair_lock_t)&g_name_lock);
  if (strlcpy(a2, *(const char **)(a1 + 72), a3) > a3) {
    a2 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&g_name_lock);
  return a2;
}

uint64_t close_inactive_fds_if_necessary(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t result = _fd_close_inactive(*(unsigned int *)(a2 + 44), 0, 1, 1);
    if (!result)
    {
      uint64_t result = _fd_close_inactive(0xFFFFFFFFLL, 0, 1, 1);
      if (!result)
      {
        uint64_t result = _fd_close_inactive(*(unsigned int *)(a2 + 44), 0, 1, 0);
        if (!result)
        {
          return _fd_close_inactive(0xFFFFFFFFLL, 0, 1, 0);
        }
      }
    }
  }
  return result;
}

uint64_t fd_truncate(uint64_t a1, off_t a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  v11[0] = 0;
  uint64_t v4 = _fd_acquire_fd(a1, v11);
  if (v4 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v5 = v4;
  uint64_t v6 = _fd_ftruncate_guarded(v4, (uint64_t)v11, a2);
  int v7 = *__error();
  if (v6 == -1 || a2 == 0) {
    __int16 v9 = 0;
  }
  else {
    __int16 v9 = 2;
  }
  *(_WORD *)(a1 + 56) = *(_WORD *)(a1 + 56) & 0xFFFD | v9;
  _fd_release_fd((_DWORD *)a1, v5, 0, v11[0]);
  if (v6 == -1) {
    *__error() = v7;
  }
  return v6;
}

uint64_t _fd_acquire_fd(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v8 = *__error();
    __int16 v9 = _SILogForLogForCategory(0);
    os_log_type_t v10 = 2 * (gSILogLevels < 4);
    if (os_log_type_enabled(v9, v10))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A334F000, v9, v10, "open error NULL obj", buf, 2u);
    }
    *__error() = v8;
    uint64_t v6 = __error();
    int v7 = 2;
    goto LABEL_10;
  }
  if (*(_DWORD *)a1 != -50529037) {
    _fd_acquire_fd_cold_2();
  }
  pthread_mutex_lock(&g_fd_lock);
  if (*(unsigned char *)(a1 + 52))
  {
    pthread_mutex_unlock(&g_fd_lock);
    int v4 = *__error();
    int v5 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      _fd_acquire_fd_cold_1(v5);
    }
    *__error() = v4;
    uint64_t v6 = __error();
    int v7 = 22;
LABEL_10:
    *uint64_t v6 = v7;
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 40) == -1)
  {
    pthread_mutex_unlock(&g_fd_lock);
  }
  else
  {
    uint64_t updated = _fd_update_locked(a1, 0, a2);
    pthread_mutex_unlock(&g_fd_lock);
    if (updated != -1) {
      return updated;
    }
  }
  bzero(buf, 0x400uLL);
  int v13 = (*(unsigned __int16 *)(a1 + 56) >> 4);
  int v14 = fd_name(a1, (char *)buf, 0x400uLL);
  int v18 = _fd_open(*(unsigned int *)(a1 + 44), v14, *(_DWORD *)(a1 + 48), *(_WORD *)(a1 + 56) & 1, v13, v15, v16, v17);
  if (v18 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v19 = v18;
  uint64_t __buf = 0;
  arc4random_buf(&__buf, 8uLL);
  int v20 = change_fdguard_np();
  __error();
  if (v20 && gSILogLevels >= 5)
  {
    int v22 = *__error();
    int v23 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v25 = 0;
      _os_log_impl(&dword_1A334F000, v23, OS_LOG_TYPE_DEFAULT, "open file failed to change fdguard", v25, 2u);
    }
    *__error() = v22;
  }
  pthread_mutex_lock(&g_fd_lock);
  if (*(_DWORD *)(a1 + 40) == -1)
  {
    *(void *)(a1 + 8) = __buf;
    *(_DWORD *)(a1 + 40) = v19;
    uint64_t updated = _fd_update_locked(a1, 1, a2);
    BOOL v21 = *(_DWORD *)(g_fd_list + 4) > *(_DWORD *)(g_fd_list + 8);
    pthread_mutex_unlock(&g_fd_lock);
  }
  else
  {
    uint64_t updated = _fd_update_locked(a1, 0, a2);
    pthread_mutex_unlock(&g_fd_lock);
    guarded_close_np();
    BOOL v21 = 0;
  }
  close_inactive_fds_if_necessary(v21, a1);
  return updated;
}

uint64_t fd_stat(uint64_t a1, stat *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t result = fstatat(*(_DWORD *)(a1 + 44), *(const char **)(a1 + 72), a2, 2048);
    uint64_t v5 = g_prot_error_callback;
    if (result != -1 || g_prot_error_callback == 0) {
      break;
    }
    uint64_t v7 = *(unsigned int *)(a1 + 40);
    int v8 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v5 + 16))(v5, v7, *v8, 8) & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

unsigned char *fd_realpath(_DWORD *a1, unsigned char *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  v8[0] = 0;
  int v4 = _fd_acquire_fd((uint64_t)a1, v8);
  if (v4 == -1) {
    return 0;
  }
  int v5 = v4;
  uint64_t v6 = faccurate_realpath(v4, a2);
  _fd_release_fd(a1, v5, 0, v8[0]);
  return v6;
}

uint64_t fd_pread(_DWORD *a1, void *a2, size_t a3, off_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  uint64_t v8 = _fd_acquire_fd((uint64_t)a1, &v16);
  int v9 = v8;
  if (v8 == -1 || (ssize_t v10 = prot_pread(v8, a2, a3, a4), _fd_release_fd(a1, v9, 0, v16), v10 == -1))
  {
    bzero(v31, 0x400uLL);
    int v11 = *__error();
    int v12 = *__error();
    int v13 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v15 = fd_realpath(a1, v31);
      if (!v15)
      {
        int v15 = fd_name((uint64_t)a1, v31, 0x400uLL);
        if (!v15) {
          int v15 = "";
        }
      }
      *(_DWORD *)buf = 136316674;
      int v18 = "fd_pread";
      __int16 v19 = 1024;
      int v20 = 638;
      __int16 v21 = 1024;
      int v22 = v9;
      __int16 v23 = 2080;
      __int16 v24 = v15;
      __int16 v25 = 2048;
      off_t v26 = a4;
      __int16 v27 = 1024;
      int v28 = a3;
      __int16 v29 = 1024;
      int v30 = v11;
      _os_log_error_impl(&dword_1A334F000, v13, OS_LOG_TYPE_ERROR, "%s:%d: pread(%d %s, o:%lx, s:%d) err:%d", buf, 0x38u);
    }
    *__error() = v12;
    *__error() = v11;
    return -1;
  }
  return v10;
}

uint64_t fd_pwrite(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    *__error() = 2;
    return -1;
  }
  if (*(void *)(a1 + 96)) {
    fd_pwrite_cold_1();
  }
  uint64_t v17 = 0;
  uint64_t v8 = _fd_acquire_fd(a1, &v17);
  int v9 = v8;
  if (v8 == -1)
  {
    int v12 = *__error();
LABEL_9:
    bzero(v32, 0x400uLL);
    int v13 = *__error();
    int v14 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = fd_realpath((_DWORD *)a1, v32);
      if (!v16)
      {
        uint64_t v16 = fd_name(a1, v32, 0x400uLL);
        if (!v16) {
          uint64_t v16 = "";
        }
      }
      *(_DWORD *)buf = 136316674;
      __int16 v19 = "fd_pwrite";
      __int16 v20 = 1024;
      int v21 = 668;
      __int16 v22 = 1024;
      int v23 = v9;
      __int16 v24 = 2080;
      __int16 v25 = v16;
      __int16 v26 = 2048;
      uint64_t v27 = a4;
      __int16 v28 = 1024;
      int v29 = a3;
      __int16 v30 = 1024;
      int v31 = v12;
      _os_log_error_impl(&dword_1A334F000, v14, OS_LOG_TYPE_ERROR, "%s:%d: pwrite(%d %s, o:%lx, s:%d) err:%d", buf, 0x38u);
    }
    *__error() = v13;
    *__error() = v12;
    return -1;
  }
  uint64_t v10 = prot_pwrite_guarded(v8, (uint64_t)&v17, a2, a3, a4);
  if (v10 == -1)
  {
    int v12 = *__error();
    _fd_release_fd((_DWORD *)a1, v9, 0, v17);
    goto LABEL_9;
  }
  uint64_t v11 = v10;
  _fd_release_fd((_DWORD *)a1, v9, 0, v17);
  return v11;
}

uint64_t fd_sync(uint64_t a1, int a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a3) {
    fd_system_status_stall_if_busy();
  }
  uint64_t v14 = 0;
  uint64_t v5 = _fd_acquire_fd(a1, &v14);
  uint64_t v6 = 0xFFFFFFFFLL;
  if (v5 != -1)
  {
    uint64_t v7 = v5;
    bzero(v16, 0x400uLL);
    int v13 = -1;
    __int16 v8 = *(_WORD *)(a1 + 56);
    if ((v8 & 0xE) == 6
      && (*(_WORD *)(a1 + 56) = v8 & 0xFFFB, bzero(&v15, 0x878uLL), fstatfs(*(_DWORD *)(a1 + 44), &v15) != -1)
      && *(_DWORD *)v15.f_fstypename ^ 0x73667061 | v15.f_fstypename[4])
    {
      int v9 = fd_name(a1, v16, 0x400uLL);
      if (v9)
      {
        if (fd_setDir(*(unsigned int *)(a1 + 44), &v13))
        {
          int v12 = 1;
          if (fsctl(v9, 0x80006817uLL, &v12, 0) != -1) {
            *(_WORD *)(a1 + 56) |= 0xCu;
          }
        }
      }
      if (a2) {
        goto LABEL_12;
      }
    }
    else
    {
      int v9 = 0;
      if (a2)
      {
LABEL_12:
        BOOL v10 = (*(_WORD *)(a1 + 56) & 8) == 0;
        goto LABEL_15;
      }
    }
    BOOL v10 = 0;
LABEL_15:
    uint64_t v6 = prot_fsync(v7, v10);
    if (v6 != -1 && (*(_WORD *)(a1 + 56) & 8) != 0)
    {
      v15.f_bsize = 0;
      fsctl(v9, 0x80006817uLL, &v15, 0);
      *(_WORD *)(a1 + 56) &= 0xFFF5u;
    }
    if (v13 != -1) {
      fd_resetDir(v13);
    }
    _fd_release_fd((_DWORD *)a1, v7, 0, v14);
  }
  return v6;
}

uint64_t fd_mmap(uint64_t a1)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    *__error() = 22;
    return -1;
  }
  v8[0] = 0;
  if (*(_DWORD *)(a1 + 44) == -1) {
    int v2 = *(_DWORD *)(a1 + 40);
  }
  else {
    int v2 = _fd_acquire_fd(a1, v8);
  }
  if (v2 == -1) {
    return -1;
  }
  do
  {
    uint64_t v3 = __mmap();
    if (v3 != -1) {
      break;
    }
    uint64_t v4 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    uint64_t v5 = *(unsigned int *)(a1 + 40);
    uint64_t v6 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v4 + 16))(v4, v5, *v6, 10) & 1) != 0);
  if (*(_DWORD *)(a1 + 44) != -1) {
    _fd_release_fd((_DWORD *)a1, v2, (*(_WORD *)(a1 + 56) & 2) == 0, v8[0]);
  }
  return v3;
}

_DWORD *_fd_release_fd(_DWORD *result, int a2, int a3, uint64_t a4)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  if (result && a2 != -1)
  {
    uint64_t v5 = (uint64_t)result;
    v11[0] = 0;
    if (*result != -50529037) {
      _fd_release_fd_cold_4();
    }
    pthread_mutex_lock(&g_fd_lock);
    int v8 = *(unsigned __int8 *)(v5 + 52);
    if (!*(unsigned char *)(v5 + 52))
    {
      if (*(_DWORD *)(v5 + 40) != a2) {
        _fd_release_fd_cold_3();
      }
      if (*(void *)(v5 + 8) != a4) {
        _fd_release_fd_cold_2();
      }
    }
    int v9 = *(_DWORD *)(v5 + 36);
    if (!v9) {
      _fd_release_fd_cold_1();
    }
    int v10 = v9 - 1;
    *(_DWORD *)(v5 + 36) = v10;
    if (v8 || v10 || !a3 || *(_DWORD *)(v5 + 68) || _fd_remove_locked(v5, v11) == -1)
    {
      return (_DWORD *)pthread_mutex_unlock(&g_fd_lock);
    }
    else
    {
      *(_WORD *)(v5 + 56) &= ~8u;
      pthread_mutex_unlock(&g_fd_lock);
      return (_DWORD *)guarded_close_np();
    }
  }
  return result;
}

_DWORD *fd_name_ptr(_DWORD *a1)
{
  CFNumberRef v1 = a1;
  if (a1)
  {
    if (*a1 != -50529037) {
      fd_name_ptr_cold_1();
    }
    os_unfair_lock_lock((os_unfair_lock_t)&g_name_lock);
    CFNumberRef v1 = (_DWORD *)*((void *)v1 + 9);
    os_unfair_lock_unlock((os_unfair_lock_t)&g_name_lock);
  }
  return v1;
}

uint64_t _fd_remove_locked(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = *(unsigned int *)(a1 + 40);
  *a2 = *(v3 - 1);
  uint64_t v6 = v3[1];
  if (v6)
  {
    if (!v4) {
      _fd_remove_locked_cold_2();
    }
    uint64_t v7 = g_fd_list;
    uint64_t v8 = *(void *)(g_fd_list + 16);
    if (v8 == a1)
    {
      *(void *)(g_fd_list + 16) = v6;
      uint64_t v8 = v6;
    }
    *(void *)(v4 + 24) = v6;
    *(void *)(*(void *)(a1 + 24) + 16) = v4;
    *uint64_t v3 = 0;
    v3[1] = 0;
    int v9 = *(_DWORD *)v7;
    int v10 = *(_DWORD *)v7 - 1;
    *(_DWORD *)uint64_t v7 = v10;
    if (v8 == a1)
    {
      if (v10) {
        _fd_remove_locked_cold_3();
      }
      *(void *)(v7 + 16) = 0;
      if (result != -1) {
        --*(_DWORD *)(v7 + 4);
      }
    }
    else
    {
      if (!v10) {
        _fd_remove_locked_cold_4();
      }
      if (result != -1)
      {
        --*(_DWORD *)(v7 + 4);
        if (v9 <= 0) {
          _fd_remove_locked_cold_5();
        }
      }
    }
  }
  else if (v4)
  {
    _fd_remove_locked_cold_1();
  }
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t _fd_close_inactive(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v34 = a1;
  int v35 = a4;
  char v4 = a3;
  int v36 = a2;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (gOpenLimit >= 0) {
    int v5 = gOpenLimit;
  }
  else {
    int v5 = gOpenLimit + 1;
  }
  int v6 = v5 >> 1;
  if (gOpenLimit >= 2048) {
    int v7 = 1024;
  }
  else {
    int v7 = v6;
  }
  uint64_t v8 = MEMORY[0x1F4188790]((void *)((4 * v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, a3, a4);
  int v10 = (char *)&v32 - v9;
  MEMORY[0x1F4188790]((void *)((8 * v7 + 15) & 0xFFFFFFFFFFFFFFF0), v8, 8 * v7, v11, v12);
  uint64_t v14 = (char *)&v32 - v13;
  bzero((char *)&v32 - v13, v15);
  pthread_mutex_lock(&g_fd_lock);
  uint64_t v16 = (_DWORD *)g_fd_list;
  uint64_t v17 = *(void *)(g_fd_list + 16);
  if (!v17) {
    goto LABEL_12;
  }
  uint64_t v18 = *(void *)(v17 + 16);
  __int16 v19 = v36;
  if (v36) {
    __int16 v19 = (const char *)strlen(v36);
  }
  int v20 = *(_DWORD *)(g_fd_list + 4);
  if (v20 < *(_DWORD *)(g_fd_list + 8) && (v4 & 1) != 0)
  {
LABEL_12:
    pthread_mutex_unlock(&g_fd_lock);
    return 0;
  }
  uint64_t v32 = v19;
  unint64_t v33 = v7;
  bzero(v10, 4 * v7);
  uint64_t v21 = 0;
  int v22 = 1;
  int v24 = v34;
  int v23 = v35;
  while (1)
  {
    int v25 = *(_DWORD *)(v18 + 40);
    if (v25 != -1
      && !*(_DWORD *)(v18 + 36)
      && v20
      && !*(_DWORD *)(v18 + 68)
      && (!v23 || (*(_WORD *)(v18 + 56) & 2) == 0))
    {
      if (v24 != -1)
      {
        if (*(_DWORD *)(v18 + 44) != v24) {
          goto LABEL_16;
        }
        if (v32)
        {
          bzero(v37, 0x400uLL);
          __int16 v26 = fd_name(v18, v37, 0x400uLL);
          if (!v26)
          {
            uint64_t v16 = (_DWORD *)g_fd_list;
LABEL_35:
            int v24 = v34;
            int v23 = v35;
            goto LABEL_16;
          }
          int v27 = strncmp(v36, v26, (size_t)v32);
          uint64_t v16 = (_DWORD *)g_fd_list;
          if (v27) {
            goto LABEL_35;
          }
          int v25 = *(_DWORD *)(v18 + 40);
          int v24 = v34;
          int v23 = v35;
        }
      }
      __int16 v28 = *(_WORD *)(v18 + 56);
      *(void *)&v14[8 * v21] = *(void *)(v18 + 8);
      *(_DWORD *)&v10[4 * v21] = v25;
      *(void *)(v18 + 8) = 0;
      *(_DWORD *)(v18 + 40) = -1;
      *(_WORD *)(v18 + 56) = v28 & 0xFFF5;
      int v29 = v16[1];
      v16[1] = v29 - 1;
      if (v29 <= 0) {
        _fd_close_inactive_cold_3();
      }
      if (++v21 >= v33) {
        goto LABEL_37;
      }
    }
LABEL_16:
    if (v22 - 1 >= *v16) {
      _fd_close_inactive_cold_2();
    }
    if (v18 == v17) {
      break;
    }
    uint64_t v18 = *(void *)(v18 + 16);
    int v20 = v16[1];
    ++v22;
    if (v20 < v16[2] && (v4 & 1) != 0) {
      goto LABEL_37;
    }
  }
  if (v22 != *v16) {
    _fd_close_inactive_cold_1();
  }
LABEL_37:
  pthread_mutex_unlock(&g_fd_lock);
  if (v21)
  {
    for (uint64_t i = 0; i != v21; ++i)
    {
      guarded_close_np();
      v14 += 8;
    }
  }
  return v21;
}

uint64_t _fd_open(uint64_t a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  while (1)
  {
    uint64_t v13 = a5 ? si_openat_protected(a1, a2, a3, 384, a5) : _safe_open_at(a1, a2, a3, a4, a5, a6, a7, a8, 0x180u);
    uint64_t v14 = v13;
    if (a4)
    {
      if (v13 != -1) {
        break;
      }
    }
    if (v13 != -1 || !g_prot_error_callback) {
      return v14;
    }
    int v15 = *__error();
    if (gSILogLevels >= 5)
    {
      int v21 = *__error();
      uint64_t v18 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = *__error();
        *(_DWORD *)buf = 136315394;
        int v23 = a2;
        __int16 v24 = 1024;
        int v25 = v19;
        _os_log_impl(&dword_1A334F000, v18, OS_LOG_TYPE_DEFAULT, "~~~~########### file error %s %d", buf, 0x12u);
      }
      *__error() = v21;
    }
    uint64_t v16 = g_prot_error_callback;
    uint64_t v17 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v16 + 16))(v16, a1, *v17, 15) & 1) == 0)
    {
      *__error() = v15;
      return v14;
    }
  }
  fcntl(v13, 48, 1);
  fcntl(v14, 76, 1);
  return v14;
}

uint64_t _fd_update_locked(uint64_t a1, int a2, void *a3)
{
  uint64_t result = *(unsigned int *)(a1 + 40);
  if (result == -1) {
    _fd_update_locked_cold_1();
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (!v5) {
      _fd_update_locked_cold_5();
    }
    uint64_t v7 = g_fd_list;
    uint64_t v8 = *(void *)(g_fd_list + 16);
    if (!v8) {
      _fd_update_locked_cold_6();
    }
    if (v8 != a1)
    {
      *(void *)(v5 + 24) = v6;
      *(void *)(*(void *)(a1 + 24) + 16) = v5;
      *(void *)(a1 + 16) = *(void *)(v8 + 16);
      *(void *)(a1 + 24) = v8;
      *(void *)(*(void *)(v8 + 16) + 24) = a1;
      *(void *)(v8 + 16) = a1;
    }
    if (a2) {
LABEL_8:
    }
      ++*(_DWORD *)(v7 + 4);
  }
  else
  {
    if (v5) {
      _fd_update_locked_cold_4();
    }
    uint64_t v7 = g_fd_list;
    uint64_t v9 = *(void *)(g_fd_list + 16);
    int v10 = *(_DWORD *)g_fd_list;
    if (v9)
    {
      if (!v10) {
        _fd_update_locked_cold_3();
      }
      *(void *)(a1 + 16) = *(void *)(v9 + 16);
      *(void *)(a1 + 24) = v9;
      *(void *)(*(void *)(v9 + 16) + 24) = a1;
      *(void *)(v9 + 16) = a1;
      int v11 = v10 + 1;
    }
    else
    {
      if (v10) {
        _fd_update_locked_cold_2();
      }
      *(void *)(a1 + 16) = a1;
      *(void *)(a1 + 24) = a1;
      int v11 = 1;
    }
    *(_DWORD *)uint64_t v7 = v11;
    if (a2) {
      goto LABEL_8;
    }
  }
  *(void *)(v7 + 16) = a1;
  ++*(_DWORD *)(a1 + 36);
  *a3 = *(void *)(a1 + 8);
  return result;
}

uint64_t _safe_open_at(uint64_t a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x200) != 0)
  {
    bzero(buf, 0x400uLL);
    if (faccurate_realpath(a1, buf))
    {
      if (buf[0] && *(unsigned __int16 *)buf != 47)
      {
        uint64_t v12 = a9;
        goto LABEL_3;
      }
      int v26 = *__error();
      int v27 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v32 = 136316162;
        unint64_t v33 = "_safe_open_at";
        __int16 v34 = 1024;
        int v35 = 1404;
        __int16 v36 = 2080;
        *(void *)uint64_t v37 = buf;
        *(_WORD *)&v37[8] = 2080;
        *(void *)&v37[10] = a2;
        *(_WORD *)&v37[18] = 2048;
        *(void *)&v37[20] = a3;
        _os_log_error_impl(&dword_1A334F000, v27, OS_LOG_TYPE_ERROR, "%s:%d: Invalid parent path, currentPath:%s, path:%s, flags:0x%lx\n", v32, 0x30u);
      }
      int v28 = 22;
    }
    else
    {
      int v28 = *__error();
      int v26 = *__error();
      int v29 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v32 = 136316418;
        unint64_t v33 = "_safe_open_at";
        __int16 v34 = 1024;
        int v35 = 1400;
        __int16 v36 = 1024;
        *(_DWORD *)uint64_t v37 = a1;
        *(_WORD *)&v37[4] = 2080;
        *(void *)&v37[6] = a2;
        *(_WORD *)&v37[14] = 2048;
        *(void *)&v37[16] = a3;
        *(_WORD *)&v37[24] = 1024;
        *(_DWORD *)&v37[26] = v28;
        _os_log_error_impl(&dword_1A334F000, v29, OS_LOG_TYPE_ERROR, "%s:%d: faccurate_realpath() failed, parent_fd:%d, path:%s, flags:0x%lx, errno:%d\n", v32, 0x32u);
      }
    }
    *__error() = v26;
    *__error() = v28;
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = 0;
LABEL_3:
  while (1)
  {
    uint64_t result = openat(a1, a2, a3, v12);
    if (result != -1) {
      break;
    }
    uint64_t v14 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    if (gSILogLevels >= 5)
    {
      int v30 = *__error();
      uint64_t v16 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *__error();
        *(_DWORD *)buf = 136315394;
        uint64_t v39 = a2;
        __int16 v40 = 1024;
        int v41 = v17;
        _os_log_impl(&dword_1A334F000, v16, OS_LOG_TYPE_DEFAULT, "~~~~########### file error %s %d", buf, 0x12u);
      }
      *__error() = v30;
      uint64_t v14 = g_prot_error_callback;
    }
    int v15 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v14 + 16))(v14, a1, *v15, 13) & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (result != -1) {
    return result;
  }
LABEL_16:
  int v18 = *__error();
  if ((v18 - 23) > 1) {
    goto LABEL_35;
  }
  int v19 = *__error();
  int v20 = _SILogForLogForCategory(0);
  os_log_type_t v21 = gSILogLevels < 3;
  if (os_log_type_enabled(v20, (os_log_type_t)(gSILogLevels < 3)))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v39) = v18;
    _os_log_impl(&dword_1A334F000, v20, v21, "*warn* too many open files, err: %d, closing inactive and trying again", buf, 8u);
  }
  *__error() = v19;
  _fd_close_inactive(0xFFFFFFFFLL, 0, 0, 0);
  while (1)
  {
    uint64_t result = openat(a1, a2, a3, v12);
    if (result != -1) {
      break;
    }
    uint64_t v22 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    if (gSILogLevels >= 5)
    {
      int v31 = *__error();
      __int16 v24 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        int v25 = *__error();
        *(_DWORD *)buf = 136315394;
        uint64_t v39 = a2;
        __int16 v40 = 1024;
        int v41 = v25;
        _os_log_impl(&dword_1A334F000, v24, OS_LOG_TYPE_DEFAULT, "~~~~########### file error %s %d", buf, 0x12u);
      }
      *__error() = v31;
      uint64_t v22 = g_prot_error_callback;
    }
    int v23 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v22 + 16))(v22, a1, *v23, 14) & 1) == 0) {
      goto LABEL_35;
    }
  }
  if (result == -1)
  {
LABEL_35:
    if (v18 == 23) {
      _safe_open_at_cold_2();
    }
    if (v18 == 24) {
      _safe_open_at_cold_1(buf);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

atomic_uint *md_deadline_once_retain(atomic_uint *result)
{
  return result;
}

void md_deadline_once_start(atomic_uint *a1, dispatch_queue_t queue)
{
  v2[5] = *MEMORY[0x1E4F143B8];
  if (!atomic_fetch_add_explicit(a1 + 4, 1u, memory_order_relaxed))
  {
    atomic_fetch_add_explicit(a1, 1u, memory_order_relaxed);
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = __md_deadline_once_start_block_invoke;
    v2[3] = &__block_descriptor_tmp_1;
    v2[4] = a1;
    dispatch_async(queue, v2);
  }
}

void __md_deadline_once_start_block_invoke(uint64_t a1)
{
  if (!atomic_load_explicit((atomic_uint *volatile)(*(void *)(a1 + 32) + 20), memory_order_acquire)) {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 32) + 16))();
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 8));
  uint64_t v2 = *(void *)(a1 + 32);

  md_deadline_once_release(v2);
}

intptr_t md_deadline_once_wait(uint64_t a1, dispatch_time_t a2)
{
  intptr_t result = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 8), a2);
  if (!result)
  {
    char v4 = *(NSObject **)(a1 + 8);
    return dispatch_semaphore_signal(v4);
  }
  return result;
}

void md_deadline_once_run_block_with_lock(os_unfair_lock_s *a1, uint64_t a2)
{
  char v4 = a1 + 6;
  os_unfair_lock_lock(a1 + 6);
  (*(void (**)(uint64_t, void))(a2 + 16))(a2, a1[5]._os_unfair_lock_opaque);

  os_unfair_lock_unlock(v4);
}

void si_tracing_log_span_event()
{
  if (init_once != -1)
  {
    dispatch_once(&init_once, &__block_literal_global_1);
  }
}

void md_tracing_dispatch_async_propagating(NSObject *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = si_tracing_current_span();
  long long v3 = *(_OWORD *)(v2 + 16);
  long long v12 = *(_OWORD *)v2;
  long long v13 = v3;
  uint64_t v14 = *(void *)(v2 + 32);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  uint64_t v8[2] = __md_tracing_dispatch_async_propagating_block_invoke;
  v8[3] = &unk_1E5AEE828;
  long long v9 = v12;
  long long v10 = v3;
  uint64_t v11 = v14;
  v8[4] = v4;
  qos_class_t v5 = qos_class_self();
  if (v5 < 0x1A) {
    dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, v8);
  }
  else {
    dispatch_block_t v6 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v5, 0, v8);
  }
  uint64_t v7 = v6;
  dispatch_async(a1, v6);
  _Block_release(v7);
}

uint64_t __md_tracing_dispatch_async_propagating_block_invoke()
{
  uint64_t v0 = si_tracing_current_span();
  long long v2 = *(_OWORD *)(v1 + 40);
  long long v3 = *(_OWORD *)(v1 + 56);
  *(void *)(v0 + 32) = *(void *)(v1 + 72);
  *(_OWORD *)uint64_t v0 = v2;
  *(_OWORD *)(v0 + 16) = v3;
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);

  return v4();
}

void tracing_dispatch_sync()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = si_tracing_current_span();
  long long v1 = *(_OWORD *)(v0 + 16);
  long long v8 = *(_OWORD *)v0;
  long long v9 = v1;
  uint64_t v10 = *(void *)(v0 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __tracing_dispatch_sync_block_invoke;
  v4[3] = &unk_1E5AEE828;
  long long v5 = v8;
  long long v6 = v1;
  uint64_t v7 = v10;
  v4[4] = v2;
  dispatch_sync(v3, v4);
}

uint64_t __tracing_dispatch_sync_block_invoke()
{
  uint64_t v0 = si_tracing_current_span();
  long long v2 = *(_OWORD *)(v1 + 40);
  long long v3 = *(_OWORD *)(v1 + 56);
  *(void *)(v0 + 32) = *(void *)(v1 + 72);
  *(_OWORD *)uint64_t v0 = v2;
  *(_OWORD *)(v0 + 16) = v3;
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);

  return v4();
}

void tracing_dispatch_apply()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = si_tracing_current_span();
  long long v1 = *(_OWORD *)(v0 + 16);
  long long v9 = *(_OWORD *)v0;
  long long v10 = v1;
  uint64_t v11 = *(void *)(v0 + 32);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __tracing_dispatch_apply_block_invoke;
  v5[3] = &unk_1E5AEE850;
  long long v6 = v9;
  long long v7 = v1;
  uint64_t v8 = v11;
  v5[4] = v2;
  dispatch_apply(v4, v3, v5);
}

uint64_t __tracing_dispatch_apply_block_invoke()
{
  uint64_t v0 = si_tracing_current_span();
  long long v2 = *(_OWORD *)(v1 + 40);
  long long v3 = *(_OWORD *)(v1 + 56);
  *(void *)(v0 + 32) = *(void *)(v1 + 72);
  *(_OWORD *)uint64_t v0 = v2;
  *(_OWORD *)(v0 + 16) = v3;
  size_t v4 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);

  return v4();
}

uint64_t __ensure_tracing_initialised_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    tracing_enabled = 1;
    uint64_t result = (uint64_t)getenv("SPOTLIGHT_TRACING");
    if (result)
    {
      uint64_t result = atoi((const char *)result);
      if ((int)result <= 0) {
        tracing_enabled = 0;
      }
    }
  }
  return result;
}

uint64_t _MDStoreOIDArrayGetTypeID()
{
  uint64_t result = __kMDStoreOIDArrayTypeID;
  if (!__kMDStoreOIDArrayTypeID)
  {
    uint64_t result = _CFRuntimeRegisterClass();
    __kMDStoreOIDArrayTypeID = result;
  }
  return result;
}

uint64_t _MDStoreOIDArrayCreateMutableWithOids(uint64_t a1, uint64_t a2, unsigned int a3, int a4, const void *a5)
{
  if (!__kMDStoreOIDArrayTypeID) {
    __kMDStoreOIDArrayTypeID = _CFRuntimeRegisterClass();
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v10 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = a2;
    *(_DWORD *)(Instance + 32) = a3;
    *(_DWORD *)(Instance + 36) = a4;
    uint64_t v11 = &__block_literal_global_2;
    if (!a2) {
      uint64_t v11 = &__block_literal_global_43;
    }
    if (a5) {
      uint64_t v12 = a5;
    }
    else {
      uint64_t v12 = v11;
    }
    *(void *)(v10 + 24) = _Block_copy(v12);
    *(unsigned char *)(v10 + 40) = *(unsigned char *)(v10 + 40) & 0xF8 | 4;
    uint64_t v13 = *(void *)(v10 + 16);
    uint64_t v14 = v13 + 8 * *(unsigned int *)(v10 + 36);
    *(void *)(v10 + 56) = v13 + 8 * a3;
    *(void *)(v10 + 64) = v14;
  }
  return v10;
}

uint64_t _MDStoreOIDArrayCreateMutableUsingMalloc(uint64_t a1, unsigned int a2)
{
  if (!__kMDStoreOIDArrayTypeID) {
    __kMDStoreOIDArrayTypeID = _CFRuntimeRegisterClass();
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    if (a2) {
      size_t v4 = malloc_good_size(8 * a2) >> 3;
    }
    else {
      LODWORD(v4) = 8;
    }
    *(_DWORD *)(Instance + 36) = v4;
    long long v5 = malloc_type_malloc(8 * v4, 0x100004000313F17uLL);
    *(void *)(Instance + 16) = v5;
    *(unsigned char *)(Instance + 40) = *(unsigned char *)(Instance + 40) & 0xF8 | 6;
    *(void *)(Instance + 48) = 0;
    if (v5)
    {
      *(void *)(Instance + 24) = _Block_copy(&__block_literal_global_2);
      uint64_t v6 = *(void *)(Instance + 16);
      uint64_t v7 = v6 + 8 * *(unsigned int *)(Instance + 36);
      *(void *)(Instance + 56) = v6;
      *(void *)(Instance + 64) = v7;
    }
    else
    {
      CFRelease((CFTypeRef)Instance);
      return 0;
    }
  }
  return Instance;
}

uint64_t _MDStoreOIDArrayCreateMutableCopy(uint64_t a1, int a2, uint64_t a3)
{
  if (!__kMDStoreOIDArrayTypeID) {
    __kMDStoreOIDArrayTypeID = _CFRuntimeRegisterClass();
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v6 = Instance;
  if (Instance)
  {
    uint64_t v7 = (void *)MEMORY[0x1E4F14B00];
    unsigned int v8 = *(_DWORD *)(a3 + 32) + a2;
    if (v8) {
      unint64_t v9 = (*MEMORY[0x1E4F14B00] + 8 * v8 - 1) & -*MEMORY[0x1E4F14B00];
    }
    else {
      unint64_t v9 = *MEMORY[0x1E4F14B00];
    }
    *(_DWORD *)(Instance + 36) = v9 >> 3;
    if (_fast_vm_allocate((void *)(Instance + 16), v9 & 0x7FFFFFFF8, -268435455))
    {
      CFRelease((CFTypeRef)v6);
      return 0;
    }
    else
    {
      *(unsigned char *)(v6 + 40) = *(unsigned char *)(v6 + 40) & 0xF9 | 4;
      *(void *)(v6 + 24) = _Block_copy(&__block_literal_global_2);
      uint64_t v10 = *(char **)(v6 + 16);
      uint64_t v11 = &v10[8 * *(unsigned int *)(v6 + 36)];
      *(void *)(v6 + 56) = v10;
      *(void *)(v6 + 64) = v11;
      size_t v12 = 8 * *(unsigned int *)(a3 + 32);
      if (v12 >= 4 * *v7)
      {
        madvise(v10, 8 * *(unsigned int *)(a3 + 32), 3);
        uint64_t v10 = *(char **)(v6 + 56);
        size_t v12 = 8 * *(unsigned int *)(a3 + 32);
      }
      memcpy(v10, *(const void **)(a3 + 16), v12);
      uint64_t v13 = *(unsigned int *)(a3 + 32);
      uint64_t v14 = *(void *)(v6 + 56) + 8 * v13;
      *(_DWORD *)(v6 + 32) = v13;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = v14;
    }
  }
  return v6;
}

void __MDStoreOIDArrayError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned char *)(a1 + 40) & 1) == 0)
  {
    *(unsigned char *)(a1 + 40) |= 1u;
    CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%s: %s error -- %@ marked bad", a2, a3, a1);
    CFShow(v3);
    CFRelease(v3);
  }
}

uint64_t _MDStoreOIDArrayAddOID(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 1) == 0)
  {
    if (*(void *)(a1 + 48))
    {
      size_t v4 = *(void **)(a1 + 56);
      if ((unint64_t)v4 < *(void *)(a1 + 64))
      {
LABEL_6:
        *size_t v4 = a2;
        *(void *)(a1 + 56) = v4 + 1;
        return 1;
      }
      if (_mutableMakeRoom(a1, 1, 0))
      {
        size_t v4 = *(void **)(a1 + 56);
        goto LABEL_6;
      }
      uint64_t v6 = "Overflow";
    }
    else
    {
      uint64_t v6 = "Sequencing";
    }
    __MDStoreOIDArrayError(a1, (uint64_t)"_MDStoreOIDArrayAddOID", (uint64_t)v6);
  }
  return 0;
}

uint64_t _MDStoreOIDArrayRoom(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  else {
    return (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3;
  }
}

void _MDStoreOIDArrayApplyFunction(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void))
{
  uint64_t v6 = a2;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)(a1 + 16);
  }
  if (a2 < a3)
  {
    for (int i = 0; ; ++i)
    {
      uint64_t v10 = (void *)(v8 + 8 * v6);
      uint64_t v11 = HIDWORD(*v10);
      uint64_t v12 = (unsigned __int16)*v10;
      uint64_t v13 = WORD1(*v10);
      if ((v13 - 4078) <= 0xFFFFFAEE) {
        break;
      }
      a4(HIDWORD(*v10), WORD1(*v10));
      v6 += v12 + 1;
      if (v6 >= a3) {
        return;
      }
    }
    CFShow(@"MDStoreOIDArrayApplyFunction encountered invalid opcode: ");
    CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"opcode %u tag %u length %ld", v13, v11, v12);
    CFShow(v14);
    CFRelease(v14);
    CFShow((CFTypeRef)a1);
  }
}

void _MDStoreOIDArrayApplyParallelFunction(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, void, uint64_t, uint64_t, uint64_t, void), uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  qos_class_t v9 = qos_class_self();
  global_queue = dispatch_get_global_queue(v9, 0);
  uint64_t v10 = dispatch_group_create();
  CFTypeRef obj = (CFTypeRef)a1;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  if (a2 < a3)
  {
    unsigned int v12 = 0;
    while (1)
    {
      uint64_t v13 = (unint64_t *)(v11 + 8 * a2);
      unint64_t v14 = *v13;
      unsigned int v15 = WORD1(*v13);
      if (v15 - 4078 <= 0xFFFFFAEE) {
        break;
      }
      unint64_t v16 = HIDWORD(v14);
      unint64_t v17 = v14 >> 16;
      uint64_t v18 = (unsigned __int16)*v13 + 1;
      if (v15 == 2781)
      {
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ___MDStoreOIDArrayApplyParallelFunction_block_invoke;
        block[3] = &__block_descriptor_tmp_16;
        __int16 v25 = WORD1(v14);
        block[4] = a4;
        block[5] = v11;
        block[6] = a2;
        void block[7] = (unsigned __int16)v14 + 1;
        void block[8] = a5;
        int v23 = HIDWORD(v14);
        unsigned int v24 = v12;
        dispatch_group_async(v10, global_queue, block);
      }
      else
      {
        dispatch_group_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
        a4(v16, (unsigned __int16)v17, v11 + 8 * a2, v18, a5, v12);
      }
      ++v12;
      a2 += v18;
      if (a2 >= a3) {
        goto LABEL_12;
      }
    }
    CFShow(@"MDStoreOIDArrayApplyParallelFunction encountered invalid opcode:");
    CFShow(obj);
  }
LABEL_12:
  dispatch_group_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(v10);
}

void *_MDStoreOIDArrayGetMappedVector(uint64_t a1)
{
  __dst[1] = *(void **)MEMORY[0x1E4F143B8];
  int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1) {
    return 0;
  }
  if ((~v1 & 6) != 0) {
    return *(void **)(a1 + 16);
  }
  __dst[0] = 0;
  uint64_t v3 = *(unsigned int *)(a1 + 36);
  unint64_t v4 = v3 ? (*MEMORY[0x1E4F14B00] + 8 * v3 - 1) & -*MEMORY[0x1E4F14B00] : *MEMORY[0x1E4F14B00];
  if (_fast_vm_allocate(__dst, v4 & 0xFFFFFFFFFFFFFFF8, -268435455)) {
    return 0;
  }
  size_t v6 = 8 * *(unsigned int *)(a1 + 36);
  if (v6 >= 4 * *MEMORY[0x1E4F14B00])
  {
    madvise(__dst[0], 8 * *(unsigned int *)(a1 + 36), 3);
    size_t v6 = 8 * *(unsigned int *)(a1 + 36);
  }
  memcpy(__dst[0], *(const void **)(a1 + 16), v6);
  free(*(void **)(a1 + 16));
  uint64_t result = __dst[0];
  *(void **)(a1 + 16) = __dst[0];
  *(_DWORD *)(a1 + 36) = v4 >> 3;
  *(unsigned char *)(a1 + 40) &= ~2u;
  return result;
}

void *_MDStoreOIDArraySetShouldDeallocate(uint64_t a1, int a2)
{
  _Block_release(*(const void **)(a1 + 24));
  if (a2) {
    unint64_t v4 = &__block_literal_global_2;
  }
  else {
    unint64_t v4 = &__block_literal_global_43;
  }
  uint64_t result = _Block_copy(v4);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t _MDStoreOIDArraySetShouldUseMalloc(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = *(unsigned char *)(result + 40) & 0xFD | (2 * (a2 & 1));
  return result;
}

uint64_t _MDStoreOIDArrayAppendOIDArray(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v3 = "Sequencing";
LABEL_4:
    __MDStoreOIDArrayError(a1, (uint64_t)"_MDStoreOIDArrayAppendOIDArray", (uint64_t)v3);
    return 0;
  }
  uint64_t v6 = *(unsigned int *)(a2 + 32);
  uint64_t v7 = *(void **)(a1 + 56);
  if ((unint64_t)v7 + 8 * v6 >= *(void *)(a1 + 64))
  {
    if (!_mutableMakeRoom(a1, v6, 0))
    {
      uint64_t v3 = "Overflow";
      goto LABEL_4;
    }
    uint64_t v7 = *(void **)(a1 + 56);
    uint64_t v6 = *(unsigned int *)(a2 + 32);
  }
  memcpy(v7, *(const void **)(a2 + 16), 8 * v6);
  uint64_t v8 = *(unsigned int *)(a2 + 32);
  *(void *)(a1 + 56) += 8 * v8;
  *(_DWORD *)(a1 + 32) += v8;
  return 1;
}

uint64_t _mutableMakeRoom(uint64_t a1, uint64_t a2, int a3)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(a1 + 40);
  if (v3) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 56) + 8 * a2;
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = v6 - v7;
  v24[0] = 0;
  if ((v3 & 2) != 0 && (a3 & 1) == 0)
  {
    if (v6 == v7)
    {
      unint64_t v9 = 4;
    }
    else if (v8 > 0x7FF)
    {
      unint64_t v9 = ((v8 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00]) >> 3;
    }
    else
    {
      __int16 v13 = ((v8 >> 3) - 1) | ((__int16)((v8 >> 3) - 1) >> 1);
      __int16 v14 = v13 | (v13 >> 2) | ((__int16)(v13 | (v13 >> 2)) >> 4);
      unint64_t v9 = (__int16)((v14 | (v14 >> 8)) + 1);
    }
    size_t v11 = malloc_good_size(8 * v9);
    unsigned int v15 = malloc_type_malloc(v11, 0xD034E2A5uLL);
    v24[0] = v15;
    goto LABEL_16;
  }
  uint64_t v10 = (v8 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
  size_t v11 = v6 == v7 ? *MEMORY[0x1E4F14B00] : v10;
  if (_fast_vm_allocate(v24, v11 & 0xFFFFFFFFFFFFFFF8, -268435455)) {
    return 0;
  }
  unsigned int v15 = (void *)v24[0];
LABEL_16:
  memcpy(v15, *(const void **)(a1 + 16), *(void *)(a1 + 56) - *(void *)(a1 + 16));
  (*(void (**)(void))(*(void *)(a1 + 24) + 16))();
  _Block_release(*(const void **)(a1 + 24));
  unint64_t v16 = _Block_copy(&__block_literal_global_2);
  if ((*(unsigned char *)(a1 + 40) & 2) != 0) {
    int v17 = a3;
  }
  else {
    int v17 = 1;
  }
  if (v17) {
    char v18 = 0;
  }
  else {
    char v18 = 2;
  }
  *(unsigned char *)(a1 + 40) = v18 | *(unsigned char *)(a1 + 40) & 0xFD;
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v21 = v19 - *(void *)(a1 + 16);
  *(_DWORD *)(a1 + 36) = v11 >> 3;
  uint64_t v22 = v24[0];
  *(void *)(a1 + 16) = v24[0];
  *(void *)(a1 + 24) = v16;
  uint64_t v23 = v22 + v21;
  *(void *)(a1 + 56) = v23;
  *(void *)(a1 + 64) = v22 + (v11 & 0x7FFFFFFF8);
  if (v20) {
    *(void *)(a1 + 48) = v23 + v20 - v19;
  }
  return 1;
}

BOOL __MDStoreOIDArrayEqual(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40)) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = *(_DWORD *)(a1 + 32);
  }
  if (*(unsigned char *)(a2 + 40)) {
    int v3 = 0;
  }
  else {
    int v3 = *(_DWORD *)(a2 + 32);
  }
  if (v2 == v3)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      unint64_t v4 = 0;
      if ((*(unsigned char *)(a2 + 40) & 1) == 0) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v4 = *(const void **)(a1 + 16);
      if ((*(unsigned char *)(a2 + 40) & 1) == 0)
      {
LABEL_10:
        long long v5 = *(const void **)(a2 + 16);
        return memcmp(v4, v5, 8 * v2) == 0;
      }
    }
    long long v5 = 0;
    return memcmp(v4, v5, 8 * v2) == 0;
  }
  return 0;
}

__CFString *__MDStoreOIDArrayCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 52 * gMDStoreOIDArrayDebugDescriptionDumpMaxLines + 52);
  int v3 = Mutable;
  if (gMDStoreOIDArrayDebugDescriptionDumpMaxLines <= 0) {
    unint64_t v4 = "";
  }
  else {
    unint64_t v4 = "[";
  }
  CFStringAppendFormat(Mutable, 0, @"<MDStoreOIDArray: %p>%s", a1, v4);
  if (gMDStoreOIDArrayDebugDescriptionDumpMaxLines >= 1)
  {
    int v5 = *(_DWORD *)(a1 + 32);
    int v16 = v5;
    if (v5 <= gMDStoreOIDArrayDebugDescriptionDumpMaxLines) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = (gMDStoreOIDArrayDebugDescriptionDumpMaxLines - 1);
    }
    if ((int)v6 >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = MEMORY[0x1E4F14390];
      uint64_t v10 = v8;
      do
      {
        CFStringAppendFormat(v3, 0, @"\n    0x%016llx, // [0x%06x] - |", *(void *)(v8 + 8 * v7), v7 & 0xFFFFFF);
        for (uint64_t i = 0; i != 8; ++i)
        {
          unsigned int v12 = *(char *)(v10 + i);
          if ((v12 & 0x80000000) != 0) {
            int v13 = __maskrune(*(char *)(v10 + i), 0x40000uLL);
          }
          else {
            int v13 = *(_DWORD *)(v9 + 4 * v12 + 60) & 0x40000;
          }
          if (v13) {
            uint64_t v14 = v12;
          }
          else {
            uint64_t v14 = 46;
          }
          CFStringAppendFormat(v3, 0, @"%c", v14);
        }
        CFStringAppendCString(v3, "|", 0x600u);
        ++v7;
        v10 += 8;
      }
      while (v7 != v6);
    }
    if (v16 > (int)v6) {
      CFStringAppendFormat(v3, 0, @"\n    // ... %i more lines suppressed ...", (v16 - v6));
    }
    CFStringAppendCString(v3, "\n]", 0x600u);
  }
  return v3;
}

uint64_t _MDPerf_LifeCycleLog()
{
  if (_MDPerf_LifeCycleLog_onceToken != -1) {
    dispatch_once(&_MDPerf_LifeCycleLog_onceToken, &__block_literal_global_5);
  }
  return _MDPerf_LifeCycleLog_sIndexLifeCycle;
}

uint64_t _MDPerf_IndexingLog()
{
  if (_MDPerf_IndexingLog_onceToken != -1) {
    dispatch_once(&_MDPerf_IndexingLog_onceToken, &__block_literal_global_9);
  }
  return _MDPerf_IndexingLog_sIndexingLog;
}

uint64_t _MDPerf_SignpostLog()
{
  if (_MDPerf_SignpostLog_onceToken != -1) {
    dispatch_once(&_MDPerf_SignpostLog_onceToken, &__block_literal_global_13);
  }
  return _MDPerf_SignpostLog_sIndexingLog;
}

CFStringRef MDCopyBestAvailableLanguage()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  CFIndex v2 = v1;
  int v3 = (const void **)v0;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = v5;
  CFArrayRef v23 = v4;
  if (sBestLanguageOnceDictionaryToken != -1) {
    dispatch_once(&sBestLanguageOnceDictionaryToken, &__block_literal_global_5);
  }
  unsigned int v24 = &v22;
  CFStringRef v30 = 0;
  MEMORY[0x1F4188790]();
  __int16 v25 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v25, v6);
  bzero(v31, 0x1000uLL);
  if (v2 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (CFStringRef *)v3;
    CFIndex v9 = v2;
    uint64_t v10 = v25;
    size_t v11 = v31;
    do
    {
      CFStringRef v12 = *v8;
      CStringPtr = CFStringGetCStringPtr(*v8, 0x8000100u);
      if (CStringPtr)
      {
        *uint64_t v10 = CStringPtr;
      }
      else
      {
        CFIndex Length = CFStringGetLength(v12);
        CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
        if (MaximumSizeForEncoding + v7 > 4095 || !CFStringGetCString(v12, v11, MaximumSizeForEncoding, 0x8000100u)) {
          return v30;
        }
        *uint64_t v10 = v11;
        v7 += strlen(v11) + 1;
      }
      size_t v11 = &v31[v7];
      ++v10;
      ++v8;
      --v9;
    }
    while (v9);
  }
  *(void *)&long long v28 = 0;
  CFArrayRef v16 = v23;
  LOWORD(v28) = CFArrayGetCount(v23);
  WORD1(v28) = v2;
  *((void *)&v28 + 1) = v22;
  int v29 = v25;
  pthread_rwlock_rdlock(&sBestLanguageDictionaryLock);
  uint64_t Value = (const char *)CFDictionaryGetValue((CFDictionaryRef)sBestLanguageDictionary, &v28);
  pthread_rwlock_unlock(&sBestLanguageDictionaryLock);
  if (Value) {
    return CFStringCreateWithCStringNoCopy(0, Value, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, MEMORY[0x1E4F1D510]);
  if (v2 >= 1)
  {
    do
    {
      uint64_t v19 = *v3++;
      CFArrayAppendValue(Mutable, v19);
      --v2;
    }
    while (v2);
  }
  CFArrayRef v20 = CFBundleCopyLocalizationsForPreferences(Mutable, v16);
  long long v26 = v28;
  int v27 = v29;
  _get_and_cache_best_localization_match(v20, (unsigned __int16 *)&v26, &v30);
  if (v20) {
    CFRelease(v20);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v30;
}

CFArrayRef _get_and_cache_best_localization_match(CFArrayRef theArray, unsigned __int16 *a2, CFStringRef *a3)
{
  CFArrayRef v3 = theArray;
  if (!theArray) {
    return v3;
  }
  if (!CFArrayGetCount(theArray)) {
    return 0;
  }
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v3, 0);
  CFIndex Length = CFStringGetLength(ValueAtIndex);
  CFIndex v8 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  CFArrayRef v3 = (const __CFArray *)malloc_type_malloc(v8, 0xBCB3F94uLL);
  if (!CFStringGetCString(ValueAtIndex, (char *)v3, v8, 0x8000100u))
  {
    free(v3);
    CFStringRef v20 = 0;
    CFArrayRef v3 = 0;
    if (!a3) {
      return v3;
    }
    goto LABEL_24;
  }
  CFIndex v9 = (unsigned __int16 *)malloc_type_malloc(0x18uLL, 0x1080040C4643742uLL);
  uint64_t v10 = a2[1];
  v9[1] = v10;
  *((void *)v9 + 2) = malloc_type_malloc(8 * v10, 0x10040436913F5uLL);
  if (v9[1])
  {
    uint64_t v11 = 0;
    uint64_t v12 = 8 * v9[1];
    do
    {
      *(void *)(*((void *)v9 + 2) + v11) = strdup(*(const char **)(*((void *)a2 + 2) + v11));
      v11 += 8;
    }
    while (v12 != v11);
  }
  uint64_t v13 = *a2;
  *CFIndex v9 = v13;
  *((void *)v9 + 1) = malloc_type_malloc(8 * v13, 0x10040436913F5uLL);
  if (*v9)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 8 * *v9;
    do
    {
      *(void *)(*((void *)v9 + 1) + v14) = strdup(*(const char **)(*((void *)a2 + 1) + v14));
      v14 += 8;
    }
    while (v15 != v14);
  }
  pthread_rwlock_wrlock(&sBestLanguageDictionaryLock);
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)sBestLanguageDictionary, v9);
  if (!Value)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)sBestLanguageDictionary, v9, v3);
    pthread_rwlock_unlock(&sBestLanguageDictionaryLock);
    if (!a3) {
      return v3;
    }
    goto LABEL_23;
  }
  CFArrayRef v17 = Value;
  free(v3);
  pthread_rwlock_unlock(&sBestLanguageDictionaryLock);
  if (v9[1])
  {
    unint64_t v18 = 0;
    do
      free(*(void **)(*((void *)v9 + 2) + 8 * v18++));
    while (v18 < v9[1]);
  }
  free(*((void **)v9 + 2));
  if (*v9)
  {
    unint64_t v19 = 0;
    do
      free(*(void **)(*((void *)v9 + 1) + 8 * v19++));
    while (v19 < *v9);
  }
  free(*((void **)v9 + 1));
  free(v9);
  CFArrayRef v3 = v17;
  if (a3)
  {
LABEL_23:
    CFStringRef v20 = CFStringCreateWithCString(0, (const char *)v3, 0x8000100u);
LABEL_24:
    *a3 = v20;
  }
  return v3;
}

BOOL convertToCArray(uint64_t a1, CFArrayRef theArray, uint64_t a3, char *a4, CFIndex a5)
{
  uint64_t v5 = a1 - 1;
  if (a1 < 1)
  {
    return 1;
  }
  else
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
    CFIndex Length = CFStringGetLength(ValueAtIndex);
    CFIndex v13 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    if (v13 >= a5)
    {
      return 0;
    }
    else
    {
      uint64_t v14 = 0;
      BOOL v15 = 0;
      CFArrayRef v16 = &a4[a5];
      do
      {
        if (!CFStringGetCString(ValueAtIndex, a4, v13, 0x8000100u)) {
          break;
        }
        *(void *)(a3 + 8 * v14) = a4;
        BOOL v15 = v14 + 1 >= a1;
        if (v5 == v14) {
          break;
        }
        a4 += strlen(a4) + 1;
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v14 + 1);
        CFIndex v17 = CFStringGetLength(ValueAtIndex);
        CFIndex v13 = CFStringGetMaximumSizeForEncoding(v17, 0x8000100u) + 1;
        ++v14;
      }
      while (&a4[v13] < v16);
    }
  }
  return v15;
}

CFStringRef MDRetrieveBestAvailableLanguage()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  CFArrayRef v2 = v1;
  CFArrayRef v3 = (const __CFArray *)v0;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (sBestLanguageOnceDictionaryToken != -1) {
    dispatch_once(&sBestLanguageOnceDictionaryToken, &__block_literal_global_5);
  }
  CFStringRef v17 = 0;
  CFIndex Count = CFArrayGetCount(v3);
  CFIndex v5 = CFArrayGetCount(v2);
  MEMORY[0x1F4188790]();
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v7, v6);
  MEMORY[0x1F4188790]();
  CFIndex v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v9, v8);
  bzero(v19, 0x1000uLL);
  if (convertToCArray(Count, v3, (uint64_t)v7, v19, 4096))
  {
    bzero(v18, 0x1000uLL);
    if (convertToCArray(v5, v2, (uint64_t)v9, v18, 4096))
    {
      *((void *)&v15 + 1) = v9;
      *(void *)&long long v15 = (unsigned __int16)v5;
      WORD1(v15) = Count;
      CFArrayRef v16 = v7;
      pthread_rwlock_rdlock(&sBestLanguageDictionaryLock);
      CFArrayRef Value = (const char *)CFDictionaryGetValue((CFDictionaryRef)sBestLanguageDictionary, &v15);
      pthread_rwlock_unlock(&sBestLanguageDictionaryLock);
      if (Value)
      {
        return CFStringCreateWithCStringNoCopy(0, Value, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      }
      else
      {
        CFArrayRef v11 = CFBundleCopyLocalizationsForPreferences(v3, v2);
        long long v13 = v15;
        uint64_t v14 = v16;
        _get_and_cache_best_localization_match(v11, (unsigned __int16 *)&v13, &v17);
        if (v11) {
          CFRelease(v11);
        }
      }
    }
  }
  return v17;
}

void *MDGetBestAvailableLanguage(uint64_t a1, __int16 a2, uint64_t *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (sBestLanguageOnceDictionaryToken != -1) {
    dispatch_once(&sBestLanguageOnceDictionaryToken, &__block_literal_global_5);
  }
  *(void *)&long long key = 0;
  *((void *)&key + 1) = a3;
  WORD1(key) = a2;
  uint64_t v25 = a1;
  uint64_t v6 = *a3;
  if (*a3)
  {
    LOWORD(v6) = 0;
    uint64_t v7 = a3 + 1;
    do
      LOWORD(v6) = v6 + 1;
    while (*v7++);
  }
  LOWORD(key) = v6;
  pthread_rwlock_rdlock(&sBestLanguageDictionaryLock);
  CFArrayRef Value = (void *)CFDictionaryGetValue((CFDictionaryRef)sBestLanguageDictionary, &key);
  pthread_rwlock_unlock(&sBestLanguageDictionaryLock);
  if (!Value)
  {
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], WORD1(key), MEMORY[0x1E4F1D510]);
    if (WORD1(key))
    {
      unint64_t v12 = 0;
      do
      {
        CFStringRef v13 = CFStringCreateWithCString(v10, *(const char **)(v25 + 8 * v12), 0x8000100u);
        if (v13)
        {
          CFStringRef v14 = v13;
          CFArrayAppendValue(Mutable, v13);
          CFRelease(v14);
        }
        ++v12;
      }
      while (v12 < WORD1(key));
    }
    long long v15 = CFArrayCreateMutable(v10, (unsigned __int16)key, MEMORY[0x1E4F1D510]);
    if ((_WORD)key)
    {
      unint64_t v16 = 0;
      do
      {
        CFStringRef v17 = CFStringCreateWithCString(v10, *(const char **)(*((void *)&key + 1) + 8 * v16), 0x8000100u);
        if (v17)
        {
          CFStringRef v18 = v17;
          CFArrayAppendValue(v15, v17);
          CFRelease(v18);
        }
        ++v16;
      }
      while (v16 < (unsigned __int16)key);
    }
    CFArrayRef v19 = CFBundleCopyLocalizationsForPreferences(Mutable, v15);
    if (v19)
    {
      CFArrayRef v20 = v19;
      long long v22 = key;
      uint64_t v23 = v25;
      CFArrayRef Value = _get_and_cache_best_localization_match(v19, (unsigned __int16 *)&v22, 0);
      CFRelease(v20);
    }
    else
    {
      CFArrayRef Value = 0;
    }
    CFRelease(v15);
    CFRelease(Mutable);
  }
  return Value;
}

CFMutableDictionaryRef __initBestLanguageDict_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  CFDictionaryKeyCallBacks v1 = *(CFDictionaryKeyCallBacks *)byte_1EF684CA8;
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &v1, 0);
  sBestLanguageDictionary = (uint64_t)result;
  return result;
}

BOOL BestLanguageDictionaryEqualCallBack(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v2 = *a1;
  if (v2 != *a2) {
    return 0;
  }
  unint64_t v5 = a1[1];
  if (v5 != a2[1]) {
    return 0;
  }
  if (*a1)
  {
    uint64_t v6 = (const char **)*((void *)a1 + 1);
    uint64_t v7 = (const char **)*((void *)a2 + 1);
    while (!strcmp(*v6, *v7))
    {
      ++v7;
      ++v6;
      if (!--v2) {
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  if (!v5) {
    return 1;
  }
  size_t v8 = (const char **)*((void *)a1 + 2);
  CFIndex v9 = (const char **)*((void *)a2 + 2);
  if (strcmp(*v8, *v9)) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v5 == v11) {
      break;
    }
    int v13 = strcmp(v8[v11], v9[v11]);
    uint64_t v11 = v12 + 1;
  }
  while (!v13);
  return v12 >= v5;
}

uint64_t BestLanguageDictionaryHashCallBack(int *a1)
{
  return *a1;
}

CFStringRef _MDStringCopyAbbreviations()
{
  CFStringRef v0 = (const __CFString *)MEMORY[0x1F4188790]();
  CFStringRef v1 = v0;
  v60[256] = *MEMORY[0x1E4F143B8];
  if (!v0) {
    return v1;
  }
  int Length = CFStringGetLength(v0);
  if (Length < 3) {
    return 0;
  }
  if (Length >= 1024) {
    CFIndex v3 = 1024;
  }
  else {
    CFIndex v3 = Length;
  }
  MEMORY[0x1F4188790]();
  unint64_t v5 = (UniChar *)((char *)&v49 - v4);
  bzero((char *)&v49 - v4, v6);
  CharactersPtr = CFStringGetCharactersPtr(v1);
  if (!CharactersPtr)
  {
    v61.CFIndex location = 0;
    v61.length = v3;
    CFStringGetCharacters(v1, v61, v5);
    CharactersPtr = v5;
  }
  HIDWORD(v52) = 0;
  unorm2_getNFCInstance();
  if (SHIDWORD(v52) < 1)
  {
    HIDWORD(v52) = 0;
    int v8 = unorm2_quickCheck();
    bzero(v60, 0x800uLL);
    if (v8 != 1)
    {
      HIDWORD(v52) = 0;
      int v9 = unorm2_normalize();
      if (v9 < 1025 && HIDWORD(v52) == 0)
      {
        CharactersPtr = (const UChar *)v60;
        CFIndex v3 = v9;
      }
      else
      {
        CFIndex v3 = v3;
      }
    }
  }
  else
  {
    bzero(v60, 0x800uLL);
  }
  uint64_t v52 = 0;
  bzero(v59, 0x401uLL);
  u_strToUTF8(v59, 1024, (int32_t *)&v52, CharactersPtr, v3, (UErrorCode *)&v52 + 1);
  if (HIDWORD(v52)) {
    return 0;
  }
  bzero(v58, 0x400uLL);
  bzero(v57, 0x2000uLL);
  bzero(v56, 0x2000uLL);
  unsigned int v10 = v59[0];
  uint64_t v11 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!v59[0])
  {
    CFIndex v31 = 0;
    v58[0] = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    goto LABEL_69;
  }
  CFIndex v50 = v3;
  uint64_t v51 = &v49;
  unint64_t v12 = 0;
  signed int v13 = 0;
  signed int v14 = 0;
  long long v15 = v58;
  __int16 v16 = 28672;
  CFStringRef v17 = v59;
  do
  {
    unint64_t v18 = (unint64_t)v10 >> 4;
    size_t v19 = utf8_byte_length_noerror_utf8_len_table[v18];
    v12 += v19;
    if (v12 > 0x3FF) {
      break;
    }
    if ((v10 & 0x80) != 0)
    {
      char v20 = ~(_BYTE)v18;
      uint64_t v21 = utf8_byte_length_utf8_len_table[v18];
      unsigned int v22 = utf8_to_code_point_utf8_first_char_mask[v21] & v10;
      if ((v20 & 0xC) != 0)
      {
        v10 &= utf8_to_code_point_utf8_first_char_mask[v21];
        if (!v22) {
          break;
        }
      }
      else
      {
        if (v21 <= 2) {
          uint64_t v21 = 2;
        }
        else {
          uint64_t v21 = v21;
        }
        uint64_t v23 = v21 - 1;
        unsigned int v24 = v17 + 1;
        uint64_t v25 = v17 + 1;
        uint64_t v26 = v23;
        int v27 = v22;
        do
        {
          char v28 = *v25++;
          int v27 = v28 & 0x3F | (v27 << 6);
          --v26;
        }
        while (v26);
        if (!v27) {
          break;
        }
        do
        {
          char v29 = *v24++;
          unsigned int v10 = v29 & 0x3F | (v22 << 6);
          unsigned int v22 = v10;
          --v23;
        }
        while (v23);
      }
    }
    int v30 = 1 << u_charType(v10);
    if ((v30 & 0x3E) != 0)
    {
      if ((v16 & 0x7000) != 0) {
        v56[v13++] = v17;
      }
      if ((v16 & 0x3E) != 0 && (v30 & 0xA) == 0) {
        goto LABEL_42;
      }
    }
    else
    {
      if ((v30 & 0xE00) == 0) {
        goto LABEL_42;
      }
      if ((v16 & 0x7000) != 0) {
        v56[v13++] = v17;
      }
      if ((v16 & 0xE00) != 0) {
        goto LABEL_42;
      }
    }
    v57[v14++] = v17;
LABEL_42:
    if ((v30 & 0x7000) == 0)
    {
      memcpy(v15, v17, v19);
      v15 += v19;
    }
    if ((v30 & 0x1C0) == 0) {
      __int16 v16 = v30;
    }
    CFStringRef v17 = &v59[v12];
    unsigned int v10 = v59[v12];
  }
  while (v59[v12]);
  CFIndex v31 = 0;
  *long long v15 = 0;
  long long v54 = 0u;
  long long v55 = 0u;
  if (v14 < 2)
  {
    LODWORD(v3) = v50;
    uint64_t v11 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  }
  else
  {
    LODWORD(v3) = v50;
    uint64_t v11 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v14 != v50)
    {
      CFIndex v31 = 0;
      if (v13 >= 2 && v58[0])
      {
        CFStringRef v32 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v58, 0x8000100u);
        if (v32)
        {
          *(void *)&long long v54 = v32;
          CFIndex v31 = 1;
        }
        else
        {
          CFIndex v31 = 0;
        }
      }
      bzero(v53, 0x400uLL);
      build_initials((uint64_t)v57, v14, (char *)v53);
      if (LOBYTE(v53[0].location))
      {
        CFStringRef v33 = CFStringCreateWithCString(*v11, (const char *)v53, 0x8000100u);
        if (v33)
        {
          __int16 v34 = (void *)((unint64_t)&v54 | (8 * v31++));
          *__int16 v34 = v33;
        }
      }
      if (v13 != v14 && v13 >= 2)
      {
        build_initials((uint64_t)v56, v13, (char *)v53);
        if (LOBYTE(v53[0].location))
        {
          CFStringRef v35 = CFStringCreateWithCString(*v11, (const char *)v53, 0x8000100u);
          if (v35)
          {
            CFStringRef v36 = v35;
            if (v31)
            {
              uint64_t v37 = 0;
              while (CFStringCompare(v36, *((CFStringRef *)&v54 + v37), 0))
              {
                if (v31 == ++v37) {
                  goto LABEL_67;
                }
              }
              CFRelease(v36);
            }
            else
            {
LABEL_67:
              *((void *)&v54 + v31++) = v36;
            }
          }
        }
      }
    }
  }
LABEL_69:
  if (_MDStringCopyAbbreviations_onceToken != -1) {
    dispatch_once(&_MDStringCopyAbbreviations_onceToken, &__block_literal_global_6);
  }
  CFAllocatorRef v38 = *v11;
  uint64_t v39 = (int)v3;
  CFMutableStringRef Mutable = CFStringCreateMutable(*v11, (int)v3);
  v53[0].CFIndex location = 0;
  v53[0].length = 0;
  v62.CFIndex location = 0;
  v62.length = (int)v3;
  if (CFStringFindCharacterFromSet(v1, (CFCharacterSetRef)_MDStringCopyAbbreviations_characterSet, v62, 0, v53))
  {
    CFIndex v41 = 0;
    do
    {
      v63.length = v53[0].location - v41;
      v63.CFIndex location = v41;
      CFStringRef v42 = CFStringCreateWithSubstring(v38, v1, v63);
      CFStringAppend(Mutable, v42);
      CFRelease(v42);
      CFIndex v41 = v53[0].length + v53[0].location;
      CFIndex v43 = v39 - (v53[0].length + v53[0].location);
      v64.CFIndex location = v53[0].length + v53[0].location;
      v64.length = v43;
    }
    while (CFStringFindCharacterFromSet(v1, (CFCharacterSetRef)_MDStringCopyAbbreviations_characterSet, v64, 0, v53));
    if (v41 >= 1)
    {
      v65.CFIndex location = v41;
      v65.length = v43;
      CFStringRef v44 = CFStringCreateWithSubstring(v38, v1, v65);
      CFStringAppend(Mutable, v44);
      CFRelease(v44);
      if (CFStringGetLength(Mutable))
      {
        if (v31 < 1)
        {
LABEL_80:
          *((void *)&v54 + v31++) = Mutable;
          CFMutableStringRef Mutable = 0;
        }
        else
        {
          uint64_t v45 = 0;
          while (CFStringCompare(Mutable, *((CFStringRef *)&v54 + v45), 0))
          {
            if (v31 == ++v45) {
              goto LABEL_80;
            }
          }
        }
      }
    }
  }
  if (v31)
  {
    CFStringRef v1 = (const __CFString *)CFArrayCreate(v38, (const void **)&v54, v31, MEMORY[0x1E4F1D510]);
    if (v31 >= 1)
    {
      uint64_t v46 = (const void **)&v54;
      do
      {
        int v47 = *v46++;
        CFRelease(v47);
        --v31;
      }
      while (v31);
    }
  }
  else
  {
    CFStringRef v1 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v1;
}

uint64_t build_initials(uint64_t result, unsigned int a2, char *__dst)
{
  uint64_t v26 = result;
  if (a2)
  {
    uint64_t v4 = 0;
    uint64_t v25 = a2;
    do
    {
      unint64_t v5 = *(unsigned __int8 **)(v26 + 8 * v4);
      size_t v6 = utf8_byte_length_noerror_utf8_len_table[(unint64_t)*v5 >> 4];
      memcpy(__dst, v5, v6);
      uint64_t v7 = &v5[v6];
      unint64_t v8 = v5[v6];
      if ((v8 & 0x80) != 0)
      {
        uint64_t v9 = utf8_byte_length_utf8_len_table[v8 >> 4];
        int v10 = utf8_to_code_point_utf8_first_char_mask[v9] & v8;
        if ((~(v8 >> 4) & 0xC) != 0)
        {
          LODWORD(v8) = utf8_to_code_point_utf8_first_char_mask[v9] & v8;
        }
        else
        {
          if (v9 <= 2) {
            uint64_t v11 = 2;
          }
          else {
            uint64_t v11 = utf8_byte_length_utf8_len_table[v8 >> 4];
          }
          uint64_t v12 = v11 - 1;
          signed int v13 = &v5[v6 + 1];
          do
          {
            char v14 = *v13++;
            LODWORD(v8) = v14 & 0x3F | (v10 << 6);
            int v10 = v8;
            --v12;
          }
          while (v12);
        }
      }
      __dst += v6;
      CFMutableDictionaryRef result = u_charType(v8);
      if (v8) {
        BOOL v15 = ((1 << result) & 0x1C0) == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (!v15)
      {
        do
        {
          size_t v16 = utf8_byte_length_noerror_utf8_len_table[(unint64_t)*v7 >> 4];
          memcpy(__dst, v7, v16);
          unint64_t v17 = v7[v16];
          if ((v17 & 0x80) != 0)
          {
            uint64_t v18 = utf8_byte_length_utf8_len_table[v17 >> 4];
            int v19 = utf8_to_code_point_utf8_first_char_mask[v18] & v17;
            if ((~(v17 >> 4) & 0xC) != 0)
            {
              LODWORD(v17) = utf8_to_code_point_utf8_first_char_mask[v18] & v17;
            }
            else
            {
              if (v18 <= 2) {
                uint64_t v20 = 2;
              }
              else {
                uint64_t v20 = utf8_byte_length_utf8_len_table[v17 >> 4];
              }
              uint64_t v21 = v20 - 1;
              unsigned int v22 = &v7[v16 + 1];
              do
              {
                char v23 = *v22++;
                LODWORD(v17) = v23 & 0x3F | (v19 << 6);
                int v19 = v17;
                --v21;
              }
              while (v21);
            }
          }
          __dst += v16;
          CFMutableDictionaryRef result = u_charType(v17);
          if (v17) {
            BOOL v24 = ((1 << result) & 0x1C0) == 0;
          }
          else {
            BOOL v24 = 1;
          }
          v7 += v16;
        }
        while (!v24);
      }
      ++v4;
    }
    while (v4 != v25);
  }
  *__dst = 0;
  return result;
}

void _MDPathFilterDumpRawFilterInternal(unint64_t *a1, int a2, uint64_t a3, char *a4, char *a5)
{
  LODWORD(v8) = a2;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = *a1;
  bzero(__src, 0x400uLL);
  if (a4)
  {
    if ((int)v8 < 1) {
      goto LABEL_9;
    }
    int v11 = 0;
    uint64_t v8 = v8;
    uint64_t v12 = (const char **)(a3 + 8);
    do
    {
      uint64_t v13 = (v10 >> *((_DWORD *)v12 - 2)) & ~(-1 << ((unint64_t)*((unsigned int *)v12 - 2) >> 6));
      if (v13)
      {
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)__str = 0u;
        long long v15 = 0u;
        snprintf(__str, 0x100uLL, "%s:%lld ", *v12, v13);
        __strlcat_chk();
        ++v11;
      }
      v12 += 2;
      --v8;
    }
    while (v8);
    if (v11) {
      strcpy(a4, __src);
    }
    else {
LABEL_9:
    }
      strcpy(a4, "no rule bits");
  }
  if (a5) {
    sprintf(a5, "rule:%d  descend:%d  softrule:%d defAux:%d auxIdx:%d auxVal:%lld subAuxCnt:%d parentBndlIdx:%d bundleIdx:%d", v10 >> 63, (v10 & 0x4000000000000000) != 0, (v10 & 0x2000000000000000) != 0, *((unsigned __int16 *)a1 + 9), *((unsigned __int16 *)a1 + 8), a1[1], *((unsigned __int16 *)a1 + 11), *((unsigned __int16 *)a1 + 13), *((unsigned __int16 *)a1 + 12));
  }
}

uint64_t arrayObjectToElementRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  long long v10 = *(_OWORD *)a1;
  uint64_t v11 = *(void *)(a1 + 16);
  _MDPlistArrayGetPlistObjectAtIndex((uint64_t)&v10, 0, a3, a4, a5, a6, a7, a8, &v12);
  uint64_t v9 = 0;
  long long v10 = v12;
  uint64_t v11 = v13;
  return _MDPlistDataGetBytePtr((uint64_t *)&v10, &v9);
}

uint64_t OUTLINED_FUNCTION_0_1(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14)
{
  a13 = *a1;
  a14 = *((void *)a1 + 2);
  return _MDPlistGetPlistObjectType((uint64_t)&a13);
}

uint64_t _MDPlistPlistObjectToEmbeddedReference(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

unint64_t _MDPlistEmbeddedReferenceToPlistObject@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, long long *a9@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(result + 48);
  unint64_t v11 = *(void *)(result + 32);
  *(void *)a9 = v10;
  *((void *)a9 + 1) = v11;
  *((void *)a9 + 2) = 0;
  *((_DWORD *)a9 + 4) = a2;
  if (!a2) {
    a3 = 0;
  }
  *((unsigned char *)a9 + 20) = a3;
  if (!*(_DWORD *)(result + 136))
  {
    if (v11 <= 0x1C) {
      _MDPlistEmbeddedReferenceToPlistObject_cold_1(result, a2, v11, a4, a5, a6, a7, a8);
    }
    long long v12 = *a9;
    uint64_t v13 = *((void *)a9 + 2);
    return validatePlistObject((unsigned int *)(v10 + 19), (uint64_t)&v12, v11, 0, a5, a6, a7, a8);
  }
  return result;
}

unint64_t _MDPlistReferenceToPlistObject@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, long long *a8@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(result + 48);
  unint64_t v9 = *(void *)(result + 32);
  *(void *)a8 = v8;
  *((void *)a8 + 1) = v9;
  *((void *)a8 + 2) = 0;
  *((unsigned char *)a8 + 20) = BYTE4(a2);
  *((_DWORD *)a8 + 4) = a2;
  if (!*(_DWORD *)(result + 136))
  {
    if (v9 <= 0x1C) {
      _MDPlistReferenceToPlistObject_cold_1(result, a2, v9, a3, a4, a5, a6, a7);
    }
    long long v10 = *a8;
    uint64_t v11 = *((void *)a8 + 2);
    return validatePlistObject((unsigned int *)(v8 + 19), (uint64_t)&v10, v9, 0, a4, a5, a6, a7);
  }
  return result;
}

unint64_t _MDPlistGetRootPlistObjectFromBytesWithError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  v9[0] = a2;
  v9[1] = 0;
  _DWORD v9[2] = a1;
  v9[3] = 0;
  return MDPlistGetRootPlistObjectFromBuffer((unint64_t)v9, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t _MDPlistUUIDGetValue(uint64_t a1)
{
  return *(void *)(*(void *)a1 + *(unsigned int *)(a1 + 16));
}

uint64_t _MDPlistContainerCreateMutableWithStaticBuffer(uint64_t a1, unsigned __int16 *a2, size_t a3, uint64_t a4)
{
  return _MDPlistContainerCreateCommon(a1, a3, a2, 1, 0, 1, a4, 0);
}

uint64_t _MDPlistContainerCreateWithObject(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t Common = _MDPlistContainerCreateCommon(*MEMORY[0x1E4F1CF80], 0, 0, 1, 0, 1, a3, 0);
  _MDPlistContainerBeginContainer(Common, 0, v5, v6, v7, v8, v9, v10);
  _MDPlistContainerAddObject(Common, a2, 0);
  _MDPlistContainerEndContainer(Common, v11, v12, v13, v14, v15, v16, v17);
  *(unsigned char *)(Common + 17) = 0;
  return Common;
}

uint64_t _MDPlistContainerCreateWithBytesAndDeallocator(uint64_t a1, unsigned __int16 *a2, size_t a3, const void *a4)
{
  if (!a2 || !a3) {
    return 0;
  }

  return _MDPlistContainerCreateCommon(a1, a3, a2, 0, 0, 1, 1, a4);
}

uint64_t _MDPlistContainerCreateWithCopiedBytes(uint64_t a1, unsigned __int16 *a2, size_t a3, uint64_t a4)
{
  if (!a2 || !a3) {
    return 0;
  }

  return _MDPlistContainerCreateCommon(a1, a3, a2, 0, 1, 1, a4, 0);
}

uint64_t _MDPlistContainerCreateCopy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || *(unsigned char *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int16 **)(a2 + 48);
  size_t v5 = *(void *)(a2 + 32);
  if (!v4 || v5 == 0) {
    return 0;
  }

  return _MDPlistContainerCreateCommon(a1, v5, v4, 0, 1, 1, a3, 0);
}

uint64_t _MDPlistContainerAllocFailure(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t _MDPlistContainerWillUseMalloc(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 58);
}

uint64_t _MDPlistContainerGetTypeID()
{
  if (_MDPlistContainerGetTypeID_once != -1) {
    dispatch_once(&_MDPlistContainerGetTypeID_once, &__block_literal_global_8);
  }
  return __kMDPlistContainerTypeID;
}

uint64_t _MDPlistContainerGetPlistObjectAtKeyPath(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v8 = *a2;
  if (v8 != 47 && v8 != 0) {
    return 0;
  }
  uint64_t v11 = a2;
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  MDPlistGetRootPlistObjectFromBuffer(a1 + 32, 0, a3, a5, a6, a7, a8, (uint64_t)&v21);
  while (1)
  {
    uint64_t v12 = v11 + 1;
    if (BYTE4(v22) != 241) {
      break;
    }
    size_t v13 = strcspn(v12, "/");
    long long v19 = v21;
    uint64_t v20 = v22;
    if (!_MDPlistDictionaryGetPlistObjectForKey((uint64_t)&v19, v12, v13, (uint64_t)&v21, v14, v15, v16, v17))break; {
    uint64_t v11 = &v12[v13];
    }
    if (!*v11) {
      goto LABEL_13;
    }
  }
  if (*v12) {
    return 0;
  }
LABEL_13:
  if (a3)
  {
    *(_OWORD *)a3 = v21;
    *(void *)(a3 + 16) = v22;
  }
  return 1;
}

BOOL _MDPlistContainerValidateRootObject(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  MDPlistGetRootPlistObjectFromBuffer(a2 + 32, 0, a3, a5, a6, a7, a8, (uint64_t)&v17);
  long long v14 = v17;
  uint64_t v15 = v18;
  uint64_t v16 = 0;
  __MDPlistContainerCopyObjectErrorCode(a1, (uint64_t)&v14, 0, &v16, v9, v10, v11, v12);
  return v16 == 0;
}

uint64_t _MDPlistContainerHasObjectAtKeyPath(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  return _MDPlistContainerGetPlistObjectAtKeyPath(a1, a2, (uint64_t)v9, a4, a5, a6, a7, a8);
}

CFDataRef _MDPlistContainerCopyObjectAtKeyPath(const __CFAllocator *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  if (!_MDPlistContainerGetPlistObjectAtKeyPath(a2, a3, (uint64_t)&v16, a4, a5, a6, a7, a8)) {
    return 0;
  }
  long long v14 = v16;
  uint64_t v15 = v17;
  return __MDPlistContainerCopyObjectErrorCode(a1, (uint64_t)&v14, 0, 0, v9, v10, v11, v12);
}

CFDataRef _MDPlistContainerCopyObjectAtKeyArray(const __CFAllocator *a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  if (!_MDPlistContainerGetPlistObjectAtKeyArray(a2, a3, (uint64_t)&v16, a4, a5, a6, a7, a8)) {
    return 0;
  }
  long long v14 = v16;
  uint64_t v15 = v17;
  return __MDPlistContainerCopyObjectErrorCode(a1, (uint64_t)&v14, 0, 0, v9, v10, v11, v12);
}

CFDictionaryRef _MDPlistContainerCopyObjectsAtPlistObject@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  CFAllocatorRef v5 = (const __CFAllocator *)MEMORY[0x1F4188790](a5, a1, a2, a3, a4);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  CFAllocatorRef v12 = v5;
  CFAllocatorRef v38 = (void *)*MEMORY[0x1E4F143B8];
  size_t v13 = 8 * v6;
  MEMORY[0x1F4188790](v38, v5, v10, v8, v6);
  long long v14 = (const void **)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v14, v13);
  MEMORY[0x1F4188790](v19, v15, v16, v17, v18);
  bzero(v14, v13);
  if (!v7) {
    return CFDictionaryCreate(v12, v14, v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFIndex v20 = 0;
  do
  {
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    bzero(v37, 0x1000uLL);
    CStringPtr = (char *)CFStringGetCStringPtr(*v9, 0x8000100u);
    if (CStringPtr || (CStringPtr = v37, CFStringGetCString(*v9, v37, 4096, 0x8000100u)))
    {
      long long v33 = *v11;
      uint64_t v34 = *((void *)v11 + 2);
      if (_MDPlistDictionaryGetPlistObjectForKey((uint64_t)&v33, CStringPtr, -1, (uint64_t)&v35, v21, v22, v23, v24))
      {
        v14[v20] = *v9;
        long long v33 = v35;
        uint64_t v34 = v36;
        v14[v20++] = __MDPlistContainerCopyObjectErrorCode(v12, (uint64_t)&v33, 0, 0, v26, v27, v28, v29);
      }
    }
    ++v9;
    --v7;
  }
  while (v7);
  CFDictionaryRef v30 = CFDictionaryCreate(v12, v14, v14, v20, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v20 >= 1)
  {
    do
    {
      uint64_t v31 = *v14++;
      CFRelease(v31);
      --v20;
    }
    while (v20);
  }
  return v30;
}

CFDictionaryRef _MDPlistContainerCopyObjectsAtKeyPath(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  if (!_MDPlistContainerGetPlistObjectAtKeyPath(a2, a3, (uint64_t)&v14, a4, a5, a6, a7, a8)) {
    return 0;
  }
  long long v12 = v14;
  size_t v13 = v15;
  return _MDPlistContainerCopyObjectsAtPlistObject(a1, (uint64_t)&v12, a4, a5, v15);
}

void _MDPlistContainerAddPlistObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(unsigned __int8 *)(a2 + 20);
  if (*(unsigned __int8 *)(a2 + 20) > 0x32u)
  {
    switch(*(unsigned char *)(a2 + 20))
    {
      case 0xE0:
      case 0xE1:
      case 0xE2:
      case 0xE3:
        int v11 = *(_DWORD *)(a1 + 136);
        if (v11 <= 1) {
          _MDPlistContainerAddPlistObject_cold_3(a1, a2, v10, a4, a5, a6, a7, a8);
        }
        uint64_t v12 = *(void *)(a1 + 144);
        int v13 = v11 - 1;
        int v14 = *(_DWORD *)(v12 + 24 * v13);
        uint64_t v15 = v12 + 24 * v13;
        int v18 = *(_DWORD *)(v15 + 4);
        uint64_t v16 = (_DWORD *)(v15 + 4);
        int v17 = v18;
        int v19 = v18 & 1;
        if (v14 == 241 && v19 == 0) {
          _MDPlistContainerAddPlistObject_cold_2(a1, a2, v10, a4, a5, a6, a7, a8);
        }
        *uint64_t v16 = v17 + 1;
        uint64_t v21 = MDPlistBufferConsume(a1, a1 + 64, 5uLL);
        if (v21)
        {
          int v22 = *(_DWORD *)(a2 + 16);
          v21[4] = *(unsigned char *)(a2 + 20);
          *(_DWORD *)uint64_t v21 = v22;
        }
        return;
      case 0xE4:
      case 0xE5:
      case 0xE6:
      case 0xE7:
      case 0xE8:
      case 0xE9:
      case 0xEA:
      case 0xEB:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF2:
      case 0xF3:
        goto LABEL_22;
      case 0xF0:
        _MDPlistContainerBeginArray(a1, a2, v10, a4, a5, a6, a7, a8);
        v51[0] = MEMORY[0x1E4F143A8];
        v51[1] = 0x40000000;
        v51[2] = ___MDPlistContainerAddPlistObject_block_invoke;
        v51[3] = &__block_descriptor_tmp_27;
        v51[4] = a1;
        long long v52 = *(_OWORD *)a2;
        uint64_t v53 = *(void *)(a2 + 16);
        _MDPlistArrayIterateWithError((unint64_t)&v52, 0, (uint64_t)v51, v28, v29, v30, v31, v32);
        _MDPlistContainerEndArray(a1, 0, v33, v34, v35, v36, v37, v38);
        return;
      case 0xF1:
        _MDPlistContainerBeginDictionary(a1, a2, v10, a4, a5, a6, a7, a8);
        v50[0] = MEMORY[0x1E4F143A8];
        v50[1] = 0x40000000;
        void v50[2] = ___MDPlistContainerAddPlistObject_block_invoke_2;
        v50[3] = &__block_descriptor_tmp_29;
        v50[4] = a1;
        long long v52 = *(_OWORD *)a2;
        uint64_t v53 = *(void *)(a2 + 16);
        _MDPlistDictionaryIterateWithError((unint64_t)&v52, 0, (uint64_t)v50, v39, v40, v41, v42, v43);
        _MDPlistContainerEndDictionary(a1, 0, v44, v45, v46, v47, v48, v49);
        return;
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
        long long v25 = (unsigned int *)(*(void *)a2 + *(unsigned int *)(a2 + 16));
        unsigned int v27 = *v25;
        uint64_t v23 = v25 + 1;
        size_t v26 = v27;
        uint64_t v24 = 0;
        goto LABEL_18;
      default:
        if (v10 != 51) {
          goto LABEL_22;
        }
        goto LABEL_13;
    }
  }
  if (v10 == 11)
  {
    uint64_t v23 = (const void *)(*(void *)a2 + *(unsigned int *)(a2 + 16));
    uint64_t v24 = 1;
    uint64_t v10 = 11;
    size_t v26 = 16;
  }
  else
  {
    if (v10 == 19)
    {
      uint64_t v23 = (const void *)(*(void *)a2 + *(unsigned int *)(a2 + 16));
      uint64_t v24 = 1;
      uint64_t v10 = 19;
    }
    else
    {
      if (v10 != 35) {
LABEL_22:
      }
        _MDPlistContainerAddPlistObject_cold_1(a1, a2, v10, a4, a5, a6, a7, a8);
LABEL_13:
      uint64_t v23 = (const void *)(*(void *)a2 + *(unsigned int *)(a2 + 16));
      uint64_t v24 = 1;
    }
    size_t v26 = 8;
  }
LABEL_18:

  _addGenericData(a1, v24, v10, v23, v26, 0, a7, a8);
}

int *_MDPlistContainerAddNullValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _addInlineData(a1, 224, 0, a2, a5, a6, a7, a8);
}

int *_MDPlistContainerAddBooleanValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _addInlineData(a1, 225, a2, a3, a5, a6, a7, a8);
}

int *_MDPlistContainerAddFloatValue(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return _addInlineData(a1, 227, LODWORD(a3), a2, a6, a7, a8, a9);
}

_DWORD *_MDPlistContainerAddDateValue(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  *(double *)uint64_t v10 = a3;
  return _addGenericData(a1, 1, 19, v10, 8uLL, a2, a8, a9);
}

_DWORD *_MDPlistContainerAddUUIDValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD v9[2] = *MEMORY[0x1E4F143B8];
  v9[0] = a2;
  v9[1] = a3;
  return _addGenericData(a1, 1, 11, v9, 0x10uLL, a4, a7, a8);
}

_DWORD *_MDPlistContainerAddDoubleValue(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  *(double *)uint64_t v10 = a3;
  return _addGenericData(a1, 1, 51, v10, 8uLL, a2, a8, a9);
}

_DWORD *_MDPlistContainerAddUUID(uint64_t a1, CFUUIDRef uuid, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFUUIDBytes v8 = CFUUIDGetUUIDBytes(uuid);
  return _addGenericData(a1, 1, 11, &v8, 0x10uLL, a3, v5, v6);
}

void _MDPlistContainerAddURL(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 136);
  BOOL v9 = __OFSUB__(v8, 1);
  int v10 = v8 - 1;
  if ((v10 < 0) ^ v9 | (v10 == 0)) {
    _MDPlistContainerAddURL_cold_1(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v12 = *(void *)(a1 + 144);
  int v13 = *(_DWORD *)(v12 + 24 * v10);
  uint64_t v14 = v12 + 24 * v10;
  int v17 = *(_DWORD *)(v14 + 4);
  uint64_t v15 = (_DWORD *)(v14 + 4);
  int v16 = v17;
  int v18 = v17 & 1;
  if (v13 == 241 && v18 == 0) {
    _MDPlistContainerAddURL_cold_2(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  *uint64_t v15 = v16 + 1;
  uint64_t v22 = *(void *)(a1 + 32);
  uint64_t v23 = (int *)MDPlistBufferConsume(a1, a1 + 64, 5uLL);
  if (!v23)
  {
    uint64_t v30 = 0;
    if (!a3) {
      return;
    }
    goto LABEL_20;
  }
  CFURLRef v24 = CFURLGetBaseURL(a2);
  CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v24)
  {
    CFDataRef v26 = CFURLCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v24, 0x8000100u, 0);
    CFDataRef v27 = CFURLCreateData(v25, a2, 0x8000100u, 0);
    if (v26)
    {
      int v28 = 0;
      CFIndex v29 = CFDataGetLength(v26) + 8;
      goto LABEL_14;
    }
  }
  else
  {
    CFDataRef v27 = CFURLCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u, 0);
    CFDataRef v26 = 0;
  }
  int v28 = 1;
  CFIndex v29 = 8;
LABEL_14:
  CFIndex v31 = CFDataGetLength(v27) + v29;
  uint64_t v32 = (UInt8 *)MDPlistBufferConsume(a1, a1 + 32, v31 + 4);
  uint64_t v30 = v32;
  if (v32)
  {
    *(_DWORD *)uint64_t v32 = v31;
    if (v28)
    {
      *((_DWORD *)v32 + 1) = 0;
      uint64_t v33 = v32 + 8;
    }
    else
    {
      *((_DWORD *)v32 + 1) = CFDataGetLength(v26);
      uint64_t v34 = v30 + 8;
      v38.length = CFDataGetLength(v26);
      v38.CFIndex location = 0;
      CFDataGetBytes(v26, v38, v34);
      uint64_t v33 = &v34[CFDataGetLength(v26)];
      CFRelease(v26);
    }
    *(_DWORD *)uint64_t v33 = CFDataGetLength(v27);
    uint64_t v30 = v33 + 4;
    v39.length = CFDataGetLength(v27);
    v39.CFIndex location = 0;
    CFDataGetBytes(v27, v39, v30);
  }
  CFRelease(v27);
  *uint64_t v23 = v22;
  *((unsigned char *)v23 + 4) = -9;
  if (a3)
  {
LABEL_20:
    if (v30) {
      BOOL v35 = v23 == 0;
    }
    else {
      BOOL v35 = 1;
    }
    uint64_t v36 = &gNullObjectReference;
    if (!v35) {
      uint64_t v36 = v23;
    }
    int v37 = *v36;
    *(unsigned char *)(a3 + 4) = *((unsigned char *)v36 + 4);
    *(_DWORD *)a3 = v37;
  }
}

CFURLRef copyCFURL(CFAllocatorRef allocator, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (const UInt8 *)(*(void *)a2 + *(unsigned int *)(a2 + 16));
  unint64_t v9 = *(unsigned int *)v8;
  if (v9 <= 7) {
    copyCFURL_cold_1((uint64_t)allocator, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v10 = *((unsigned int *)v8 + 1);
  if (v10 + 8 > v9) {
    copyCFURL_cold_2((uint64_t)allocator, a2, a3, a4, a5, a6, a7, a8);
  }
  CFAllocatorRef v11 = allocator;
  uint64_t v12 = v8 + 8;
  if (v10)
  {
    CFAllocatorRef allocator = CFURLCreateWithBytes(allocator, v8 + 8, *((unsigned int *)v8 + 1), 0x8000100u, 0);
    CFURLRef v13 = allocator;
    v12 += v10;
  }
  else
  {
    CFURLRef v13 = 0;
  }
  uint64_t v14 = *(unsigned int *)v12;
  if (v10 + 8 + v14 > v9) {
    copyCFURL_cold_3((uint64_t)allocator, a2, v14, a4, a5, a6, a7, a8);
  }
  CFURLRef v15 = CFURLCreateWithBytes(v11, v12 + 4, v14, 0x8000100u, v13);
  if (v13) {
    CFRelease(v13);
  }
  return v15;
}

CFStringRef MDPropertyCopyXAttrName(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  if (CFStringCompare(a1, @"kMDItemLastUsedDate", 0))
  {
    if (CFStringCompare(a1, @"com.apple.metadata:", 0)) {
      return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@%@", @"com.apple.metadata:", a1);
    }
    return 0;
  }

  return (CFStringRef)CFRetain(@"com.apple.lastuseddate#PS");
}

CFStringRef MDPropertyCopyName(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  if (CFStringCompare(a1, @"com.apple.lastuseddate#PS", 0))
  {
    if (CFStringCompare(a1, @"com.apple.favorite-rank.number#PS", 0))
    {
      if (CFStringHasPrefix(a1, @"com.apple.metadata:"))
      {
        CFIndex Length = CFStringGetLength(a1);
        CFIndex v3 = CFStringGetLength(@"com.apple.metadata:");
        v4.length = Length - v3;
        if (Length > v3)
        {
          v4.CFIndex location = v3;
          CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          return CFStringCreateWithSubstring(v5, a1, v4);
        }
      }
      return 0;
    }
    uint64_t v7 = @"kMDItemFavoriteRank";
  }
  else
  {
    uint64_t v7 = @"kMDItemLastUsedDate";
  }

  return (CFStringRef)CFRetain(v7);
}

CFDataRef MDPropertyCopyEncodedData(const __CFString *a1, const void *a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  if (CFStringCompare(a1, @"com.apple.lastuseddate#PS", 0)
    && CFStringCompare(a1, @"kMDItemLastUsedDate", 0))
  {
    if (CFEqual(a1, @"com.apple.favorite-rank.number#PS")
      || CFEqual(a1, @"kMDItemFavoriteRank"))
    {
      CFTypeID v10 = CFGetTypeID(a2);
      if (v10 == CFNumberGetTypeID())
      {
        v11[0] = 0;
        if (CFNumberGetValue((CFNumberRef)a2, kCFNumberLongLongType, v11)) {
          return MDPropertyCopyEncodedDataForFavoriteRank(v11[0], 1);
        }
      }
      return 0;
    }
    CFComparisonResult v4 = CFStringCompare(a1, @"com.apple.metadata:_kMDItemUserTags", 0);
    CFTypeID v5 = CFGetTypeID(a2);
    if (v4)
    {
      if (v5 != CFDictionaryGetTypeID())
      {
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        return CFPropertyListCreateData(v6, a2, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      }
      return 0;
    }
    if (v5 != CFArrayGetTypeID()) {
      return 0;
    }
    return MDPropertyCopyEncodedDataForUserTagStrings((const __CFArray *)a2);
  }
  else
  {
    CFTypeID v8 = CFGetTypeID(a2);
    if (v8 != CFDateGetTypeID()) {
      return 0;
    }
    MEMORY[0x1A6246220](a2);
    return MDPropertyCopyEncodedDataForLastUsedDateWithAsoluteTime(v9);
  }
}

CFDataRef MDPropertyCopyEncodedDataForLastUsedDateWithAsoluteTime(double a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1 == 0.0) {
    return 0;
  }
  long double v1 = *MEMORY[0x1E4F1CF78] + a1;
  uint64_t v2 = (uint64_t)v1;
  long double v3 = fmod(v1, 1.0);
  uint64_t v4 = (uint64_t)(v3 * 1000000000.0);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  *(void *)bytes = v2;
  uint64_t v7 = v4;
  return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 16);
}

CFDataRef MDPropertyCopyEncodedDataForFavoriteRank(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t valuePtr = a1;
  if (!a1) {
    return 0;
  }
  if (!a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      CFDataRef Data = CFPropertyListCreateData(v4, v5, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      CFRelease(v6);
      return Data;
    }
    return 0;
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)__str = 0u;
  long long v10 = 0u;
  snprintf(__str, 0x100uLL, "%lld", a1);
  size_t v2 = strlen(__str);
  return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)__str, v2 + 1);
}

CFDataRef MDPropertyCopyEncodedDataForUserTagStrings(const __CFArray *a1)
{
  if (!a1 || !CFArrayGetCount(a1)) {
    return 0;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return CFPropertyListCreateData(v2, a1, kCFPropertyListBinaryFormat_v1_0, 0, 0);
}

CFDateRef MDPropertyCopyDecodedValue(const __CFString *a1, const __CFData *a2)
{
  at[1] = *(CFAbsoluteTime *)MEMORY[0x1E4F143B8];
  if (CFEqual(a1, @"com.apple.lastuseddate#PS")
    || CFEqual(a1, @"kMDItemLastUsedDate"))
  {
    at[0] = 0.0;
    if (MDPropertyDecodedLastUsedDateAbsoluteTime(a2, at)) {
      return CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], at[0]);
    }
    return 0;
  }
  if (CFEqual(a1, @"com.apple.favorite-rank.number#PS")
    || CFEqual(a1, @"kMDItemFavoriteRank"))
  {
    at[0] = 0.0;
    if (MDPropertyDecodedFavoritRank(a2, (uint64_t *)at))
    {
      CFAbsoluteTime valuePtr = at[0];
      return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongLongType, &valuePtr);
    }
    return 0;
  }
  if (CFStringCompare(a1, @"com.apple.metadata:_kMDItemUserTags", 0))
  {
    CFPropertyListRef v4 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0, 0, 0);
    CFNumberRef v5 = v4;
    if (!v4) {
      return (CFDateRef)v5;
    }
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 != CFDictionaryGetTypeID()) {
      return (CFDateRef)v5;
    }
    CFRelease(v5);
    return 0;
  }

  return (CFDateRef)MDPropertyCopyDecodedUserTags(a2);
}

CFDataRef MDPropertyDecodedLastUsedDateAbsoluteTime(const __CFData *a1, double *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  long long v4 = 0uLL;
  CFDataRef result = MDPropertyDecodedLastUsedDateTimeSpec(a1, &v4);
  if (result)
  {
    if (a2) {
      *a2 = (double)*((uint64_t *)&v4 + 1) / 1000000000.0 + (double)(uint64_t)v4 - *MEMORY[0x1E4F1CF78];
    }
    return (const __CFData *)1;
  }
  return result;
}

uint64_t MDPropertyDecodedFavoritRank(CFDataRef theData, uint64_t *a2)
{
  uint64_t v2 = (uint64_t)theData;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!theData) {
    return v2;
  }
  CFIndex Length = CFDataGetLength(theData);
  if (!Length) {
    return 0;
  }
  uint64_t v5 = Length;
  CFNumberRef v6 = (const __CFNumber *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFDataRef)v2, 0, 0, 0);
  if (v6)
  {
    CFNumberRef v7 = v6;
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == CFNumberGetTypeID()
      && (*(void *)&valuePtr[0] = 0, CFNumberGetValue(v7, kCFNumberSInt64Type, valuePtr)))
    {
      if (a2) {
        *a2 = *(void *)&valuePtr[0];
      }
      uint64_t v2 = 1;
    }
    else
    {
      uint64_t v2 = 0;
    }
    CFRelease(v7);
    return v2;
  }
  if (v5 >= 255) {
    uint64_t v9 = 255;
  }
  else {
    uint64_t v9 = v5;
  }
  CFDataGetBytePtr((CFDataRef)v2);
  memset(valuePtr, 0, sizeof(valuePtr));
  __memcpy_chk();
  *((unsigned char *)valuePtr + v9) = 0;
  __endptr = 0;
  uint64_t v10 = strtoll((const char *)valuePtr, &__endptr, 0);
  uint64_t v2 = 0;
  if (v10 < 1 || !__endptr) {
    return v2;
  }
  if (*__endptr) {
    return 0;
  }
  if (a2) {
    *a2 = v10;
  }
  return 1;
}

const void *MDPropertyCopyDecodedUserTags(CFDataRef data)
{
  CFPropertyListRef v1 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], data, 0, 0, 0);
  uint64_t v2 = v1;
  if (v1)
  {
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 != CFArrayGetTypeID() || !CFArrayGetCount((CFArrayRef)v2))
    {
      CFRelease(v2);
      return 0;
    }
  }
  return v2;
}

CFDataRef MDPropertyCopyEncodedDataForLastUsedDateWithTimeSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)bytes = a1;
  uint64_t v4 = a2;
  return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 16);
}

CFDataRef MDPropertyDecodedLastUsedDateTimeSpec(const __CFData *result, _OWORD *a2)
{
  if (result)
  {
    CFDataRef v3 = result;
    if (CFDataGetLength(result) == 16)
    {
      BytePtr = CFDataGetBytePtr(v3);
      if (a2) {
        *a2 = *(_OWORD *)BytePtr;
      }
      return (const __CFData *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFStringRef MDPropertyCopyUserTagString(const __CFString *a1, unsigned int a2)
{
  if (!a1 || !CFStringGetLength(a1)) {
    return 0;
  }
  CFIndex location = CFStringFind(a1, @"\n", 0).location;
  if (location == -1)
  {
    CFNumberRef v7 = (void *)CFRetain(a1);
  }
  else
  {
    v5.length = location;
    CFStringRef v6 = 0;
    if (!location) {
      return v6;
    }
    v5.CFIndex location = 0;
    CFNumberRef v7 = (void *)CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, v5);
  }
  uint64_t v9 = v7;
  if (a2 - 1 > 6) {
    return (CFStringRef)v7;
  }
  CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@\n%u", v7, a2);
  if (v9) {
    CFRelease(v9);
  }
  return v6;
}

__CFArray *MDPropertyCreateUserTagStrings(CFIndex capacity, uint64_t a2)
{
  CFMutableStringRef Mutable = 0;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (capacity <= 1023)
  {
    if (capacity)
    {
      if (a2)
      {
        CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          char v11 = 0;
          if (capacity >= 1)
          {
            uint64_t v5 = 0;
            while (1)
            {
              CFStringRef v10 = 0;
              unsigned __int8 v9 = 0;
              (*(void (**)(uint64_t, uint64_t, const __CFString **, unsigned __int8 *, char *))(a2 + 16))(a2, v5, &v10, &v9, &v11);
              if (v11) {
                goto LABEL_13;
              }
              CFStringRef v6 = MDPropertyCopyUserTagString(v10, v9);
              if (v6)
              {
                CFStringRef v7 = v6;
                CFArrayAppendValue(Mutable, v6);
                CFRelease(v7);
              }
              if (capacity == ++v5)
              {
                if (v11) {
                  goto LABEL_13;
                }
                break;
              }
            }
          }
          if (!CFArrayGetCount(Mutable))
          {
LABEL_13:
            CFRelease(Mutable);
            return 0;
          }
        }
      }
    }
  }
  return Mutable;
}

uint64_t MDPropertyDecodedUserTags()
{
  return 0;
}

unsigned __int8 *MDMatcherCreate(const char *a1, char *a2, char a3, int a4)
{
  return icu_search_context_create(a1, a2, a3, a4);
}

uint64_t MDMatch(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  return MDMatchWithFuzzyIndicies(a1, a2, a3, 0, 0, 0, 0);
}

uint64_t MDMatchWithFuzzyIndicies(uint64_t a1, unsigned __int16 *a2, uint64_t a3, void *a4, void *a5, void *a6, char *a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  bzero(v18, 0x400uLL);
  uint64_t v17 = 0;
  if (utf8_encodestr(a2, 2 * a3, v18, &v17, 1023, 47, 4)) {
    return 0;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v15 = icu_search_match(a1, v18, &v17, &v16, 0);
  uint64_t result = 0;
  if (v15)
  {
    icu_search_context_fuzzy_match_state(a1, a4, a6, a5, a7);
    return 1;
  }
  return result;
}

uint64_t MDMatchUTF8(uint64_t result, const char *a2, void *a3, uint64_t *a4, int a5)
{
  return icu_search_match(result, a2, a3, a4, a5);
}

uint64_t MDMatchWithFuzzyIndiciesRange(uint64_t a1, unsigned __int16 *a2, uint64_t a3, void *a4, void *a5, void *a6, char *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  bzero(v22, 0x400uLL);
  uint64_t v21 = 0;
  if (utf8_encodestr(a2, 2 * a3, v22, &v21, 1023, 47, 4)) {
    return 0;
  }
  int v18 = icu_search_match(a1, v22, a8, a9, 0);
  uint64_t result = 0;
  if (v18)
  {
    uint64_t v19 = normalizeSizeForUTF8toUnichar((uint64_t)a2, (uint64_t)v22, *a8);
    uint64_t v20 = normalizeSizeForUTF8toUnichar((uint64_t)&a2[v19], (uint64_t)&v22[*a8], *a9);
    *a8 = v19;
    *a9 = v20;
    icu_search_context_fuzzy_match_state(a1, a4, a6, a5, a7);
    return 1;
  }
  return result;
}

uint64_t normalizeSizeForUTF8toUnichar(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = a2 + 1;
  do
  {
    unsigned int v9 = *(unsigned __int8 *)(a2 + v7);
    uint64_t v10 = *(unsigned char *)(a2 + v7) >> 4;
    if (*(char *)(a2 + v7) < 0)
    {
      uint64_t v11 = utf8_byte_length_utf8_len_table_0[v10];
      unsigned int v12 = utf8_to_code_point_utf8_first_char_mask_0[v11] & v9;
      if ((~(_BYTE)v10 & 0xC) != 0)
      {
        v9 &= utf8_to_code_point_utf8_first_char_mask_0[v11];
      }
      else
      {
        if (v11 <= 2) {
          uint64_t v13 = 2;
        }
        else {
          uint64_t v13 = utf8_byte_length_utf8_len_table_0[v10];
        }
        uint64_t v14 = v13 - 1;
        int v15 = (char *)(v8 + v7);
        do
        {
          char v16 = *v15++;
          unsigned int v9 = v16 & 0x3F | (v12 << 6);
          unsigned int v12 = v9;
          --v14;
        }
        while (v14);
      }
    }
    uint64_t v17 = utf8_byte_length_noerror_utf8_len_table_0[v10];
    int v18 = (unsigned __int16 *)(a1 + 2 * v6);
    if (v9 == *v18)
    {
      ++v6;
    }
    else if (v9 < 0x10000)
    {
      memset(v22, 0, sizeof(v22));
      uint64_t v21 = 0;
      int v19 = utf8_encodestr(v18, 2uLL, v22, &v21, 63, 47, 4);
      uint64_t v17 = v21;
      if (v19) {
        uint64_t v17 = 0;
      }
      else {
        ++v6;
      }
    }
    else
    {
      v6 += 2;
    }
    v7 += v17;
  }
  while (v7 < a3);
  return v6;
}

void MDMatcherDispose(uint64_t a1)
{
  icu_ctx_release(a1);
}

uint64_t _MDBundleUtilsCopyApplicationCategories()
{
  return copyAppCategoryMap();
}

uint64_t copyAppCategoryMap()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  uint64_t v13 = 0;
  if (getCoreTypesBundleURL_onceToken != -1) {
    dispatch_once(&getCoreTypesBundleURL_onceToken, &__block_literal_global_48);
  }
  CFURLRef v0 = (const __CFURL *)gCoreTypesInfoPlistURL;
  if (gCoreTypesInfoPlistURL)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFTypeID v2 = CFStringGetTypeID();
    CFTypeID v3 = CFArrayGetTypeID();
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    uint64_t v8[2] = __copyAppCategoryMap_block_invoke;
    v8[3] = &unk_1E5AEEB48;
    v8[6] = v3;
    v8[7] = v2;
    char v9 = 1;
    v8[4] = &v10;
    void v8[5] = TypeID;
    int v4 = processMappedPlist(v0, (uint64_t)v8);
    if (v4)
    {
      int v5 = v4;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        copyAppCategoryMap_cold_1(v5);
      }
    }
  }
  uint64_t v6 = v11[3];
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t _MDBundleUtilsCopyLocalizedApplicationCategories(CFArrayRef theArray)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (_MDBundleUtilsCopyLocalizedApplicationCategories_onceToken != -1)
  {
    dispatch_once(&_MDBundleUtilsCopyLocalizedApplicationCategories_onceToken, &__block_literal_global_9);
    if (theArray) {
      goto LABEL_3;
    }
LABEL_5:
    CFIndex Count = 0;
    goto LABEL_6;
  }
  if (!theArray) {
    goto LABEL_5;
  }
LABEL_3:
  CFIndex Count = CFArrayGetCount(theArray);
LABEL_6:
  uint64_t v3 = 0;
  if (Count
    && _MDBundleUtilsCopyLocalizedApplicationCategories_sLocalizedApplicationCategoriesMap
    && _MDBundleUtilsCopyLocalizedApplicationCategories_sLocalizedApplicationCategories
    && Count >= 1)
  {
    uint64_t v3 = 0;
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      if (CFDictionaryGetValue((CFDictionaryRef)_MDBundleUtilsCopyLocalizedApplicationCategories_sLocalizedApplicationCategoriesMap, ValueAtIndex))
      {
        context = ValueAtIndex;
        uint64_t v8 = v3;
        CFDictionaryApplyFunction((CFDictionaryRef)_MDBundleUtilsCopyLocalizedApplicationCategories_sLocalizedApplicationCategories, (CFDictionaryApplierFunction)localizedApplicationCategoriesApplier, &context);
        uint64_t v3 = v8;
      }
    }
  }
  return v3;
}

void localizedApplicationCategoriesApplier(const void *a1, const __CFDictionary *cf, uint64_t a3)
{
  CFDictionaryRef Value = cf;
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFDictionaryGetTypeID())
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, *(const void **)a3);
  }
  else
  {
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 != CFStringGetTypeID()) {
      return;
    }
  }
  if (Value)
  {
    CFDictionaryRef Mutable = *(const __CFDictionary **)(a3 + 8);
    if (!Mutable)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(a3 + 8) = Mutable;
    }
    uint64_t v9 = CFDictionaryGetValue(Mutable, a1);
    if (v9)
    {
      uint64_t v10 = v9;
      if (!CFEqual(v9, Value))
      {
        CFStringRef v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@, %@", v10, Value);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 8), a1, v12);
        if (v12)
        {
          CFRelease(v12);
        }
      }
    }
    else
    {
      uint64_t v11 = *(__CFDictionary **)(a3 + 8);
      CFDictionarySetValue(v11, a1, Value);
    }
  }
}

CFDictionaryRef _MDBundleUtilsCopyLocalizedDescriptionDictionary(const void *a1, void *a2, const __CFURL *a3, int a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v8 = localizedCacheValueCopy(a1);
    if (!a2) {
      goto LABEL_60;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (!a2) {
      goto LABEL_60;
    }
  }
  if (v8) {
    goto LABEL_60;
  }
  if (getCoreTypesBundleURL_onceToken == -1)
  {
    if (a3) {
      goto LABEL_8;
    }
LABEL_47:
    v26[0] = a2;
    goto LABEL_48;
  }
  dispatch_once(&getCoreTypesBundleURL_onceToken, &__block_literal_global_48);
  if (!a3) {
    goto LABEL_47;
  }
LABEL_8:
  CFURLRef v9 = (CFURLRef)getCoreTypesBundleURL_sCoreTypesBundleURL;
  if (!getCoreTypesBundleURL_sCoreTypesBundleURL
    || (const __CFURL *)getCoreTypesBundleURL_sCoreTypesBundleURL != a3
    && !CFEqual((CFTypeRef)getCoreTypesBundleURL_sCoreTypesBundleURL, a3)
    && ((CFURLRef v10 = CFURLGetBaseURL(a3)) == 0 || v10 != v9 && !CFEqual(v9, v10)))
  {
    CFArrayRef v11 = CFBundleCopyLocalizationsForURL(a3);
    if (v11)
    {
      CFArrayRef v12 = v11;
      if (CFArrayGetCount(v11))
      {
        uint64_t v27 = 0;
        int v28 = &v27;
        uint64_t v29 = 0x2000000000;
        uint64_t v30 = 0;
        CFURLRef v13 = CFBundleCopyResourceURLInDirectory(a3, @"InfoPlist", @"loctable", 0);
        if (v13)
        {
          CFURLRef v14 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"Info.plist", a3);
          v26[0] = (const void *)MEMORY[0x1E4F143A8];
          v26[1] = (const void *)0x40000000;
          v26[2] = __bundleLocalizedPropertyCopy_block_invoke;
          v26[3] = &unk_1E5AEEB70;
          v26[4] = &v27;
          v26[5] = a1;
          v26[6] = a2;
          int v15 = processMappedPlist(v14, (uint64_t)v26);
          if (v15)
          {
            int v16 = v15;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              if (v14) {
                CFURLRef v17 = v14;
              }
              else {
                CFURLRef v17 = a3;
              }
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v16;
              *(_WORD *)uint64_t v32 = 2112;
              *(void *)&v32[2] = a1;
              __int16 v33 = 2112;
              uint64_t v34 = a2;
              __int16 v35 = 2112;
              CFURLRef v36 = v17;
              _os_log_impl(&dword_1A334F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "bundleLocalizedPropertyCopy error %d resolving %@ %@ for %@", buf, 0x26u);
            }
          }
          if (v14) {
            CFRelease(v14);
          }
          int v18 = 0;
        }
        else
        {
          Unique = (__CFBundle *)_CFBundleCreateUnique();
          int v18 = Unique;
          if (Unique)
          {
            CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(Unique);
            if (InfoDictionary)
            {
              CFDictionaryRef v22 = bundleDescriptionCopy(InfoDictionary, a1, a2);
              v28[3] = (uint64_t)v22;
            }
          }
        }
        *(void *)buf = a2;
        *(void *)uint64_t v32 = 0;
        if (v28[3])
        {
          *(void *)uint64_t v32 = v28[3];
          CFIndex v19 = 2;
        }
        else
        {
          CFIndex v19 = 1;
        }
        os_unfair_lock_lock((os_unfair_lock_t)&bundleLocalizedPropertyCopy_sLocalizePropertyLock);
        if (a4)
        {
          uint64_t v8 = localizedCacheValueCopy(a1);
          if (!v8)
          {
            uint64_t v8 = localizedPropertyCopy((const void **)buf, v19, v13, (uint64_t)v18, v12, 1);
            if (v8) {
              localizedCacheValueSet(a1, v8, 0);
            }
          }
        }
        else
        {
          uint64_t v8 = localizedPropertyCopy((const void **)buf, v19, v13, (uint64_t)v18, v12, 1);
        }
        os_unfair_lock_unlock((os_unfair_lock_t)&bundleLocalizedPropertyCopy_sLocalizePropertyLock);
        if (v18) {
          CFRelease(v18);
        }
        if (v13) {
          CFRelease(v13);
        }
        _Block_object_dispose(&v27, 8);
      }
      else
      {
        uint64_t v8 = 0;
      }
      CFRelease(v12);
      goto LABEL_60;
    }
LABEL_59:
    uint64_t v8 = 0;
    goto LABEL_60;
  }
  v26[0] = a2;
  if (getCoreTypesBundleURL_onceToken != -1) {
    dispatch_once(&getCoreTypesBundleURL_onceToken, &__block_literal_global_48);
  }
LABEL_48:
  CFArrayRef v23 = (const __CFArray *)gCoreTypesBundleLocalizations;
  if (!gCoreTypesBundleLocalizations || !CFArrayGetCount((CFArrayRef)gCoreTypesBundleLocalizations)) {
    goto LABEL_59;
  }
  os_unfair_lock_lock(&coreTypesLocalizedPropertyCopy_sCoreTypesLock);
  if (!a1 || !a4 || (uint64_t v8 = localizedCacheValueCopy(a1)) == 0)
  {
    if (getCoreTypesBundleURL_onceToken != -1) {
      dispatch_once(&getCoreTypesBundleURL_onceToken, &__block_literal_global_48);
    }
    long long v24 = localizedPropertyCopy(v26, 1, (const __CFURL *)gCoreTypesLocTableURL, 0, v23, 1);
    uint64_t v8 = v24;
    if (a4 && v24) {
      localizedCacheValueSet(a1, v24, 1);
    }
  }
  os_unfair_lock_unlock(&coreTypesLocalizedPropertyCopy_sCoreTypesLock);
LABEL_60:
  if (a2 && a1 && !v8) {
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CFA0], (const void **)&stru_1EF684D88.isa, (const void **)a2, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  return (CFDictionaryRef)v8;
}

void localizedCacheValueSet(const void *a1, const void *a2, int a3)
{
  if (a1 && a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&gLocalizePropertyCacheLock);
    if (a3)
    {
      CFDictionaryRef Mutable = (__CFDictionary *)gCoreTypesLocalizedPropertyCache;
      if (!gCoreTypesLocalizedPropertyCache)
      {
        CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        gCoreTypesLocalizedPropertyCache = (uint64_t)Mutable;
      }
    }
    else
    {
      CFDictionaryRef Mutable = (__CFDictionary *)gLocalizedPropertyCache;
      if (!gLocalizedPropertyCache)
      {
        CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        gLocalizedPropertyCache = (uint64_t)Mutable;
      }
    }
    CFDictionarySetValue(Mutable, a1, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)&gLocalizePropertyCacheLock);
  }
}

uint64_t processMappedPlist(const __CFURL *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 22;
  if (a1 && a2)
  {
    bzero(buffer, 0x400uLL);
    if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
    {
      int v5 = open((const char *)buffer, 0);
      if (v5 == -1)
      {
        return *__error();
      }
      else
      {
        int v6 = v5;
        memset(&v12, 0, sizeof(v12));
        if (fstat(v5, &v12))
        {
          uint64_t v2 = *__error();
        }
        else
        {
          off_t v7 = (v12.st_size + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
          uint64_t v8 = (UInt8 *)mmap(0, v7, 1, 1, v6, 0);
          if (v8 == (UInt8 *)-1
            || (CFDataRef v9 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8, v12.st_size, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0])) == 0)
          {
            uint64_t v2 = 0xFFFFFFFFLL;
          }
          else
          {
            CFDataRef v10 = v9;
            uint64_t v2 = (*(uint64_t (**)(uint64_t, CFDataRef))(a2 + 16))(a2, v9);
            CFRelease(v10);
          }
          munmap(v8, v7);
        }
        close(v6);
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v2;
}

uint64_t __copyAppCategoryMap_block_invoke(uint64_t a1)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"UTExportedTypeDeclarations";
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFSetRef v3 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D548]);
  CFDictionaryRef v45 = 0;
  if (!_CFPropertyListCreateFiltered())
  {
    uint64_t v35 = 0xFFFFFFFFLL;
    if (v3) {
      goto LABEL_38;
    }
    return v35;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4 != CFGetTypeID(v45)) {
    goto LABEL_37;
  }
  if (!CFDictionaryGetCount(v45)) {
    goto LABEL_37;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v45, values[0]);
  if (!Value) {
    goto LABEL_37;
  }
  CFArrayRef v6 = Value;
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7 != CFGetTypeID(Value)) {
    goto LABEL_37;
  }
  CFArrayRef v44 = v6;
  CFIndex Count = CFArrayGetCount(v6);
  MEMORY[0x1F4188790](v12, Count, v9, v10, v11);
  bzero((char *)v39 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0), 8 * Count);
  MEMORY[0x1F4188790](v17, v13, v14, v15, v16);
  CFIndex v18 = Count;
  bzero((char *)v39 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0), 8 * Count);
  if (Count < 1) {
    goto LABEL_37;
  }
  uint64_t v40 = (const void **)((char *)v39 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = v40;
  v39[1] = v39;
  CFIndex v19 = 0;
  CFIndex v42 = 0;
  CFIndex v43 = Count;
  CFArrayRef v20 = v44;
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v20, v19);
    if (ValueAtIndex)
    {
      CFDictionaryRef v22 = ValueAtIndex;
      if (CFGetTypeID(ValueAtIndex) == *(void *)(a1 + 40))
      {
        CFArrayRef v23 = (const __CFArray *)CFDictionaryGetValue(v22, @"UTTypeConformsTo");
        if (v23)
        {
          CFArrayRef v24 = v23;
          CFTypeID v25 = CFGetTypeID(v23);
          if (v25 == *(void *)(a1 + 48))
          {
            CFIndex v26 = CFArrayGetCount(v24);
            if (v26 < 1) {
              goto LABEL_26;
            }
            CFIndex v27 = v26;
            CFIndex v28 = 0;
            while (1)
            {
              CFStringRef v29 = (const __CFString *)CFArrayGetValueAtIndex(v24, v28);
              if (CFGetTypeID(v29) == *(void *)(a1 + 56))
              {
                if (CFStringHasPrefix(v29, @"public.app-category")) {
                  break;
                }
              }
              if (v27 == ++v28)
              {
                CFArrayRef v20 = v44;
                goto LABEL_25;
              }
            }
            CFArrayRef v20 = v44;
            if (!v29) {
              goto LABEL_29;
            }
          }
          else
          {
            if (v25 != *(void *)(a1 + 56)) {
              goto LABEL_26;
            }
            if (!CFStringHasPrefix((CFStringRef)v24, @"public.app-category"))
            {
LABEL_29:
              CFIndex v18 = v43;
              goto LABEL_26;
            }
          }
          uint64_t v30 = CFDictionaryGetValue(v22, @"UTTypeDescription");
          if (v30)
          {
            CFIndex v31 = v30;
            if (CFGetTypeID(v30) == *(void *)(a1 + 56))
            {
              uint64_t v32 = CFDictionaryGetValue(v22, @"UTTypeIdentifier");
              if (v32)
              {
                __int16 v33 = v32;
                if (CFGetTypeID(v32) == *(void *)(a1 + 56))
                {
                  CFIndex v34 = v42;
                  v40[v42] = v33;
                  v41[v34] = v31;
                  CFIndex v42 = v34 + 1;
                }
              }
            }
          }
LABEL_25:
          CFIndex v18 = v43;
        }
      }
    }
LABEL_26:
    ++v19;
  }
  while (v19 != v18);
  CFURLRef v36 = v40;
  if (v42)
  {
    if (*(unsigned char *)(a1 + 64))
    {
      uint64_t v37 = v41;
    }
    else
    {
      uint64_t v37 = v40;
      CFURLRef v36 = v41;
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFDictionaryCreate(v2, v37, v36, v42, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
LABEL_37:
  uint64_t v35 = 0;
  if (v3) {
LABEL_38:
  }
    CFRelease(v3);
  return v35;
}

uint64_t __bundleLocalizedPropertyCopy_block_invoke(uint64_t a1)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"CFBundleDocumentTypes";
  CFSetRef v2 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D548]);
  if (!_CFPropertyListCreateFiltered())
  {
    uint64_t v4 = 0xFFFFFFFFLL;
    if (!v2) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(0) && CFDictionaryGetCount(0)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = bundleDescriptionCopy(0, *(const void **)(a1 + 40), *(const void **)(a1 + 48));
  }
  uint64_t v4 = 0;
  if (v2) {
LABEL_8:
  }
    CFRelease(v2);
LABEL_9:
  if (values[0]) {
    CFRelease(values[0]);
  }
  return v4;
}

CFDictionaryRef bundleDescriptionCopy(const __CFDictionary *result, const void *a2, const void *a3)
{
  if (result)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(result, @"CFBundleDocumentTypes");
    CFTypeID TypeID = CFArrayGetTypeID();
    if (Value)
    {
      CFTypeID v7 = TypeID;
      if (TypeID == CFGetTypeID(Value))
      {
        CFTypeID v8 = CFDictionaryGetTypeID();
        CFTypeID v9 = CFStringGetTypeID();
        CFIndex Count = CFArrayGetCount(Value);
        if (Count >= 1)
        {
          CFIndex v11 = Count;
          CFTypeID v21 = v7;
          CFTypeRef cf1 = a3;
          CFTypeRef v23 = a2;
          CFIndex v12 = 0;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(Value, v12);
            if (v8 != CFGetTypeID(ValueAtIndex)) {
              goto LABEL_20;
            }
            uint64_t result = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"CFBundleTypeName");
            if (!result) {
              goto LABEL_21;
            }
            CFDictionaryRef v14 = result;
            if (v9 != CFGetTypeID(result)) {
              goto LABEL_20;
            }
            if (cf1 && CFEqual(cf1, v14)) {
              return 0;
            }
            uint64_t result = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"LSItemContentTypes");
            if (result) {
              break;
            }
LABEL_21:
            if (v11 <= ++v12 || result) {
              return result;
            }
          }
          CFArrayRef v15 = result;
          if (v21 == CFGetTypeID(result))
          {
            CFIndex v16 = CFArrayGetCount(v15);
            if (v16 >= 1)
            {
              CFIndex v17 = v16;
              CFIndex v18 = 0;
              while (1)
              {
                CFIndex v19 = CFArrayGetValueAtIndex(v15, v18);
                if (v19)
                {
                  CFArrayRef v20 = v19;
                  if (v9 == CFGetTypeID(v19))
                  {
                    if (CFEqual(v23, v20)) {
                      break;
                    }
                  }
                }
                uint64_t result = 0;
                if (v17 == ++v18) {
                  goto LABEL_21;
                }
              }
              uint64_t result = (const __CFDictionary *)CFRetain(v14);
              goto LABEL_21;
            }
          }
LABEL_20:
          uint64_t result = 0;
          goto LABEL_21;
        }
      }
    }
    return 0;
  }
  return result;
}

__CFDictionary *localizedPropertyCopy(const void **a1, CFIndex a2, const __CFURL *a3, uint64_t a4, CFArrayRef theArray, int a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Count)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      CFTypeID v16 = TypeID;
      if (a3)
      {
        CFAllocatorRef v17 = v13;
        v30[0] = MEMORY[0x1E4F143A8];
        v30[1] = 0x40000000;
        v30[2] = __localizedPropertyCopy_block_invoke;
        v30[3] = &__block_descriptor_tmp_45;
        v30[4] = Count;
        v30[5] = theArray;
        v30[6] = a2;
        v30[7] = a1;
        v30[8] = TypeID;
        v30[9] = Mutable;
        char v31 = a6;
        int v18 = processMappedPlist(a3, (uint64_t)v30);
        if (v18)
        {
          int v19 = v18;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            localizedPropertyCopy_cold_1((uint64_t)a3, v19);
          }
        }
        CFAllocatorRef v13 = v17;
      }
      else if (a4)
      {
        int v28 = a6;
        CFAllocatorRef v27 = v13;
        CFStringRef v29 = a1;
        CFSetRef v22 = CFSetCreate(v13, a1, a2, MEMORY[0x1E4F1D548]);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
            CFDictionaryRef FilteredLocalizedInfoPlist = (const __CFDictionary *)_CFBundleCreateFilteredLocalizedInfoPlist();
            if (FilteredLocalizedInfoPlist)
            {
              CFDictionaryRef v26 = FilteredLocalizedInfoPlist;
              if (v16 == CFGetTypeID(FilteredLocalizedInfoPlist)) {
                localizedPropertyAdd(Mutable, ValueAtIndex, v26, v29, a2, v28);
              }
              CFRelease(v26);
            }
          }
        }
        if (v22) {
          CFRelease(v22);
        }
        a1 = v29;
        a6 = v28;
        CFAllocatorRef v13 = v27;
      }
    }
  }
  else
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  if (!CFDictionaryGetValue(Mutable, &stru_1EF684D88))
  {
    if (a6)
    {
      CFDictionarySetValue(Mutable, &stru_1EF684D88, *a1);
    }
    else
    {
      CFDictionaryRef v20 = CFDictionaryCreate(v13, a1, a1, a2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, &stru_1EF684D88, v20);
      if (v20) {
        CFRelease(v20);
      }
    }
  }
  return Mutable;
}

uint64_t __localizedPropertyCopy_block_invoke(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  if (*(uint64_t *)(a1 + 32) >= 1)
  {
    CFIndex v4 = 0;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v4);
      if (*(uint64_t *)(a1 + 48) >= 1)
      {
        CFArrayRef v6 = ValueAtIndex;
        uint64_t v7 = 0;
        do
        {
          CFStringRef v8 = CFStringCreateWithFormat(v2, 0, @"%@:%@", v6, *(void *)(*(void *)(a1 + 56) + 8 * v7));
          CFSetAddValue(Mutable, v8);
          if (v8) {
            CFRelease(v8);
          }
          ++v7;
        }
        while (v7 < *(void *)(a1 + 48));
      }
      ++v4;
    }
    while (v4 < *(void *)(a1 + 32));
  }
  if ((_CFPropertyListCreateFiltered() & 1) == 0)
  {
    uint64_t v15 = 0xFFFFFFFFLL;
    if (!Mutable) {
      return v15;
    }
LABEL_21:
    CFRelease(Mutable);
    return v15;
  }
  uint64_t v9 = *(void *)(a1 + 64);
  if (v9 == CFGetTypeID(0) && CFDictionaryGetCount(0) && *(uint64_t *)(a1 + 32) >= 1)
  {
    CFIndex v10 = 0;
    do
    {
      CFStringRef v11 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v10);
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(0, v11);
      if (Value)
      {
        CFDictionaryRef v13 = Value;
        uint64_t v14 = *(void *)(a1 + 64);
        if (v14 == CFGetTypeID(Value)) {
          localizedPropertyAdd(*(__CFDictionary **)(a1 + 72), v11, v13, *(const void ***)(a1 + 56), *(void *)(a1 + 48), *(unsigned char *)(a1 + 80));
        }
      }
      ++v10;
    }
    while (v10 < *(void *)(a1 + 32));
  }
  uint64_t v15 = 0;
  if (Mutable) {
    goto LABEL_21;
  }
  return v15;
}

void localizedPropertyAdd(__CFDictionary *a1, const __CFString *a2, const __CFDictionary *a3, const void **a4, uint64_t a5, char a6)
{
  CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
  if (!CanonicalLanguageIdentifierFromString)
  {
    CanonicalLanguageIdentifierFromString = CFRetain(a2);
    if (a6) {
      goto LABEL_3;
    }
LABEL_10:
    CFAllocatorRef v17 = a1;
    int v18 = CanonicalLanguageIdentifierFromString;
    CFDictionaryRef v19 = a3;
    goto LABEL_11;
  }
  if ((a6 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_3:
  CFTypeID TypeID = CFStringGetTypeID();
  if (a5 < 1) {
    goto LABEL_12;
  }
  CFTypeID v14 = TypeID;
  while (1)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a3, *a4);
    if (Value)
    {
      CFDictionaryRef v16 = Value;
      if (v14 == CFGetTypeID(Value)) {
        break;
      }
    }
    ++a4;
    if (!--a5) {
      goto LABEL_12;
    }
  }
  CFAllocatorRef v17 = a1;
  int v18 = CanonicalLanguageIdentifierFromString;
  CFDictionaryRef v19 = v16;
LABEL_11:
  CFDictionarySetValue(v17, v18, v19);
LABEL_12:

  CFRelease(CanonicalLanguageIdentifierFromString);
}

CFURLRef __getCoreTypesBundleURL_block_invoke()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  memset(&v6, 0, sizeof(v6));
  CFURLRef result = (const __CFURL *)stat("/System/Library/CoreServices/MobileCoreTypes.bundle", &v6);
  if (!result)
  {
    CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFURLRef result = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)"/System/Library/CoreServices/MobileCoreTypes.bundle", 51, 1u);
    if (result)
    {
      CFURLRef v2 = result;
      CFArrayRef v3 = CFBundleCopyLocalizationsForURL(result);
      CFURLRef v4 = CFBundleCopyResourceURLInDirectory(v2, @"InfoPlist", @"loctable", 0);
      int v5 = stat("/System/Library/CoreServices/MobileCoreTypes.bundle/Info.plist", &v6);
      CFURLRef result = 0;
      if (!v5) {
        CFURLRef result = CFURLCreateFromFileSystemRepresentation(v1, (const UInt8 *)"/System/Library/CoreServices/MobileCoreTypes.bundle/Info.plist", 62, 1u);
      }
      getCoreTypesBundleURL_sCoreTypesBundleURL = (uint64_t)v2;
      gCoreTypesBundleLocalizations = (uint64_t)v3;
      gCoreTypesInfoPlistURL = (uint64_t)result;
      gCoreTypesLocTableURL = (uint64_t)v4;
    }
  }
  return result;
}

uint64_t unicode_decomposeable(unsigned int a1)
{
  if (a1 < 0xC0) {
    return 0;
  }
  int v1 = __CFUniCharDecomposableBitmap[(unint64_t)a1 >> 8];
  if (!__CFUniCharDecomposableBitmap[(unint64_t)a1 >> 8]) {
    return 0;
  }
  if (v1 == 255) {
    return 1;
  }
  return (__CFUniCharDecomposableBitmap[(a1 >> 3) + 256 + 32 * v1 - 32] >> (a1 & 7)) & 1;
}

uint64_t utf8_encodelen(unsigned __int16 *a1, unint64_t a2, int a3, char a4)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v6 = a2 >> 1;
  if (a3) {
    __int16 v7 = a3;
  }
  else {
    __int16 v7 = 95;
  }
  do
  {
    unsigned int v9 = *a1++;
    unsigned __int16 v8 = v9;
    unsigned int v10 = bswap32(v9) >> 16;
    if (a4) {
      unsigned __int16 v8 = v10;
    }
    int v11 = v8;
    if (!v8) {
      unsigned __int16 v8 = 9216;
    }
    if (v11 == 47) {
      unsigned __int16 v8 = v7;
    }
    if (v8 >= 0x80u)
    {
      if (v8 >= 0x800u)
      {
        if (v8 >> 11 == 27) {
          uint64_t v12 = 2;
        }
        else {
          uint64_t v12 = 3;
        }
      }
      else
      {
        uint64_t v12 = 2;
      }
    }
    else
    {
      uint64_t v12 = 1;
    }
    result += v12;
    --v6;
  }
  while (v6);
  return result;
}

uint64_t utf8_encodestr(unsigned __int16 *a1, unint64_t a2, unsigned char *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  v31[0] = 0;
  v31[1] = 0;
  if (a2 < 2)
  {
    uint64_t result = 0;
    unsigned __int16 v8 = a3;
    goto LABEL_39;
  }
  uint64_t result = 0;
  int v10 = 0;
  int v11 = 0;
  unint64_t v12 = (unint64_t)&a3[a5 - ((a7 & 2) == 0)];
  unint64_t v13 = a2 >> 1;
  unsigned __int16 v8 = a3;
  while (1)
  {
    while (1)
    {
      --v13;
      if (v10 < 1)
      {
        unsigned int v16 = *a1++;
        unsigned int v14 = v16;
        unsigned int v17 = bswap32(v16) >> 16;
        if (a7) {
          unsigned int v14 = v17;
        }
        if ((a7 & 4) != 0)
        {
          int v18 = (unsigned __int16)v14;
          if ((unsigned __int16)v14 >= 0xC0u)
          {
            int v19 = __CFUniCharDecomposableBitmap[(unint64_t)(unsigned __int16)v14 >> 8];
            if (!__CFUniCharDecomposableBitmap[(unint64_t)(unsigned __int16)v14 >> 8]
              || v19 != 255
              && ((__CFUniCharDecomposableBitmap[(v14 >> 3) + 256 + 32 * v19 - 32] >> (v14 & 7)) & 1) == 0)
            {
              goto LABEL_18;
            }
            unsigned int v30 = result;
            CFDictionaryRef v20 = a4;
            CFTypeID v21 = a3;
            uint64_t v22 = a6;
            uint64_t v23 = a7;
            int v24 = unicode_decompose(v14, v31);
            a7 = v23;
            a6 = v22;
            a3 = v21;
            a4 = v20;
            int v10 = v24 - 1;
            uint64_t result = v30;
            v13 += v10;
            unsigned int v14 = LOWORD(v31[0]);
            int v11 = (unsigned __int16 *)v31 + 1;
          }
        }
      }
      else
      {
        unsigned int v15 = *v11++;
        unsigned int v14 = v15;
        --v10;
      }
      if (!(_WORD)v14)
      {
        LOBYTE(v14) = 0;
        LOBYTE(v25) = 2;
        LOBYTE(v26) = -112;
        goto LABEL_23;
      }
      if ((unsigned __int16)v14 == 47)
      {
        unsigned int v14 = a6;
        if (!a6) {
          break;
        }
      }
      int v18 = (unsigned __int16)v14;
      if ((unsigned __int16)v14 < 0x80u) {
        goto LABEL_35;
      }
LABEL_18:
      if ((unsigned __int16)v14 > 0x7FFu)
      {
        __int16 v26 = (unsigned __int16)v14 >> 6;
        __int16 v25 = (unsigned __int16)v14 >> 12;
        if ((unsigned __int16)v14 >> 10 != 54 || !v13) {
          goto LABEL_23;
        }
        unsigned int v27 = *a1;
        unsigned int v28 = bswap32(v27) >> 16;
        if (a7) {
          LOWORD(v27) = v28;
        }
        if ((unsigned __int16)v27 >> 10 == 55)
        {
          if ((unint64_t)(v8 + 3) >= v12) {
            goto LABEL_38;
          }
          unsigned int v29 = (v18 << 10) + (unsigned __int16)v27 - 56613888;
          --v13;
          ++a1;
          *unsigned __int16 v8 = (v29 >> 18) | 0xF0;
          v8[1] = (v29 >> 12) & 0x3F | 0x80;
          uint64_t v8[2] = (v29 >> 6) & 0x3F | 0x80;
          v8[3] = v27 & 0x3F | 0x80;
          v8 += 4;
          if (!v13) {
            goto LABEL_39;
          }
        }
        else
        {
LABEL_23:
          if ((unint64_t)(v8 + 2) >= v12) {
            goto LABEL_38;
          }
          *unsigned __int16 v8 = v25 | 0xE0;
          v8[1] = v26 & 0x3F | 0x80;
          uint64_t v8[2] = v14 & 0x3F | 0x80;
          v8 += 3;
          if (!v13) {
            goto LABEL_39;
          }
        }
      }
      else
      {
        if ((unint64_t)(v8 + 1) >= v12) {
          goto LABEL_38;
        }
        *unsigned __int16 v8 = (v14 >> 6) | 0xC0;
        v8[1] = v14 & 0x3F | 0x80;
        v8 += 2;
        if (!v13) {
          goto LABEL_39;
        }
      }
    }
    LOBYTE(v14) = 95;
    uint64_t result = 22;
LABEL_35:
    if ((unint64_t)v8 >= v12) {
      break;
    }
    *v8++ = v14;
    if (!v13) {
      goto LABEL_39;
    }
  }
LABEL_38:
  uint64_t result = 63;
LABEL_39:
  *a4 = v8 - a3;
  if ((a7 & 2) == 0) {
    *unsigned __int16 v8 = 0;
  }
  return result;
}

uint64_t unicode_decompose(__int16 a1, _WORD *a2)
{
  unsigned __int16 v2 = a1 + 21504;
  if ((unsigned __int16)(a1 + 21504) > 0x2BA4u)
  {
    return unicode_recursive_decompose(a1, a2);
  }
  else
  {
    *a2 = ((28533 * (unsigned __int16)(a1 + 21504)) >> 24) | 0x1100;
    a2[1] = v2 % 0x24Cu / 0x1C + 4449;
    if (v2 % 0x1Cu)
    {
      a2[2] = (unsigned __int16)(a1 + 21504) % 0x1Cu + 4519;
      return 3;
    }
    else
    {
      return 2;
    }
  }
}

uint64_t utf8_decodestr(unsigned __int8 *a1, unint64_t a2, _WORD *a3, void *a4, uint64_t a5, _DWORD *a6, char a7)
{
  v45[2] = *MEMORY[0x1E4F143B8];
  *a6 = 0;
  if (!a2)
  {
    uint64_t result = 0;
    int v11 = a3;
    goto LABEL_66;
  }
  unint64_t v9 = a2;
  unint64_t v10 = (unint64_t)a3 + a5;
  int v11 = a3;
  unint64_t v12 = a1;
  while (1)
  {
    unsigned int v14 = *v12++;
    unint64_t v13 = v14;
    if (!v14)
    {
LABEL_61:
      uint64_t result = 0;
      goto LABEL_66;
    }
    --v9;
    if ((v13 & 0x80) == 0) {
      goto LABEL_56;
    }
    unint64_t v15 = utf_extrabytes[v13 >> 3];
    BOOL v16 = v9 >= v15;
    v9 -= v15;
    if (!v16) {
      goto LABEL_63;
    }
    if (v15 != 3) {
      break;
    }
    int v19 = *v12;
    if ((v19 & 0xC0) != 0x80
      || (int v20 = a1[2], (v20 & 0xC0) != 0x80)
      || (int v21 = a1[3], (v21 & 0xC0) != 0x80)
      || (unsigned int v22 = v21 + (((v19 << 6) + (v13 << 12) + v20) << 6) - 63512704, v22 >> 20))
    {
LABEL_63:
      uint64_t result = 22;
      goto LABEL_66;
    }
    unsigned int v23 = (v22 >> 10) - 10240;
    if (a7)
    {
      *int v11 = bswap32(v23) >> 16;
      int v24 = v11 + 1;
      if ((unint64_t)(v11 + 1) >= v10)
      {
LABEL_67:
        uint64_t result = 63;
        int v11 = v24;
        goto LABEL_66;
      }
      __int16 v25 = __rev16(v22 & 0x3FF | 0xDC00);
    }
    else
    {
      *int v11 = v23;
      int v24 = v11 + 1;
      if ((unint64_t)(v11 + 1) >= v10) {
        goto LABEL_67;
      }
      __int16 v25 = v22 & 0x3FF | 0xDC00;
    }
    unint64_t v12 = a1 + 4;
    v11[1] = v25;
    v11 += 2;
LABEL_60:
    a1 = v12;
    if (!v9) {
      goto LABEL_61;
    }
  }
  if (v15 == 2)
  {
    int v26 = *v12;
    if ((v26 & 0xC0) != 0x80) {
      goto LABEL_63;
    }
    int v27 = a1[2];
    if ((v27 & 0xC0) != 0x80) {
      goto LABEL_63;
    }
    int v28 = (v26 << 6) + (v13 << 12) + v27;
    unsigned int v18 = v28 - 925824;
    if ((v28 - 925824) < 0x800) {
      goto LABEL_63;
    }
    unint64_t v12 = a1 + 3;
    if (v18 >> 11 >= 0x1B)
    {
      uint64_t result = 22;
      if (v18 < 0xE000 || (v28 & 0x3FFFFE) == 0xF207E) {
        goto LABEL_66;
      }
    }
  }
  else
  {
    if (v15 != 1) {
      goto LABEL_63;
    }
    int v17 = *v12;
    if ((v17 & 0xC0) != 0x80) {
      goto LABEL_63;
    }
    unsigned int v18 = v17 + (v13 << 6) - 12416;
    if (v18 < 0x80) {
      goto LABEL_63;
    }
    unint64_t v12 = a1 + 2;
  }
  if ((a7 & 4) == 0)
  {
    if ((a7 & 8) != 0 && (unsigned __int16)v18 >= 0x300u)
    {
      int v30 = __CFUniCharCombiningBitmap[BYTE1(v18)];
      if (__CFUniCharCombiningBitmap[BYTE1(v18)])
      {
        if (v30 == 255
          || ((__CFUniCharCombiningBitmap[(v18 >> 3) + 256 + 32 * v30 - 32] >> (v18 & 7)) & 1) != 0)
        {
          *a6 = 1;
          if (v11 == a3)
          {
            int v11 = a3;
          }
          else
          {
            unsigned int v31 = (unsigned __int16)*(v11 - 1);
            unsigned int v32 = bswap32(v31) >> 16;
            if (a7) {
              LOWORD(v31) = v32;
            }
            __int16 v33 = a4;
            CFIndex v43 = a6;
            unsigned int v34 = unicode_combine((unsigned __int16)v31, (unsigned __int16)v18);
            a6 = v43;
            a4 = v33;
            if (v34)
            {
              --v11;
              unsigned int v18 = v34;
            }
          }
        }
      }
    }
LABEL_53:
    if (v18 == 9216) {
      LODWORD(v13) = 0;
    }
    else {
      LODWORD(v13) = v18;
    }
LABEL_56:
    if ((unint64_t)v11 >= v10) {
      goto LABEL_65;
    }
    unsigned int v42 = bswap32(v13) >> 16;
    if (a7) {
      LOWORD(v13) = v42;
    }
    *v11++ = v13;
    goto LABEL_60;
  }
  if ((unsigned __int16)v18 < 0xC0u) {
    goto LABEL_53;
  }
  int v35 = __CFUniCharDecomposableBitmap[BYTE1(v18)];
  if (!__CFUniCharDecomposableBitmap[BYTE1(v18)]
    || v35 != 255
    && ((__CFUniCharDecomposableBitmap[(v18 >> 3) + 256 + 32 * v35 - 32] >> (v18 & 7)) & 1) == 0)
  {
    goto LABEL_53;
  }
  CFArrayRef v44 = a6;
  v45[0] = 0;
  CFURLRef v36 = a4;
  v45[1] = 0;
  int v37 = unicode_decompose(v18, v45);
  if (v37 < 1)
  {
    a4 = v36;
    a6 = v44;
    goto LABEL_60;
  }
  uint64_t v38 = 0;
  a4 = v36;
  a6 = v44;
  while (1)
  {
    CFRange v39 = &v11[v38];
    unsigned int v40 = *(unsigned __int16 *)((char *)v45 + v38 * 2);
    unsigned int v41 = bswap32(v40) >> 16;
    if (a7) {
      LOWORD(v40) = v41;
    }
    *CFRange v39 = v40;
    if ((unint64_t)(v39 + 1) >= v10) {
      break;
    }
    if (v37 == ++v38)
    {
      int v11 = (_WORD *)((char *)v11 + v38 * 2);
      goto LABEL_60;
    }
  }
  int v11 = v39 + 1;
LABEL_65:
  uint64_t result = 63;
LABEL_66:
  *a4 = (char *)v11 - (char *)a3;
  return result;
}

uint64_t unicode_combine(unsigned int a1, unsigned int a2)
{
  if (a2 - 4449 > 0x61)
  {
    if ((unsigned __int16)(a2 - 12443) < 0xD265u) {
      return 0;
    }
  }
  else
  {
    if (a2 >> 1 <= 0x8BA && (unsigned __int16)(a1 - 4352) <= 0x12u) {
      return (unsigned __int16)(28 * a2 + 588 * a1 - 18076);
    }
    if (a2 >> 3 >= 0x235 && (unsigned __int16)((unsigned __int16)(a1 + 21504) >> 2) <= 0xAE8u)
    {
      HIDWORD(v3) = -1227133513 * a1 - 1840706560;
      LODWORD(v3) = HIDWORD(v3);
      if ((v3 >> 2) <= 0x9249249) {
        return (unsigned __int16)(a1 + a2 - 4519);
      }
      else {
        return 0;
      }
    }
  }
  CFURLRef v4 = (unsigned int *)&__CFUniCharPrecompSourceTable;
  int v5 = (unsigned int *)&unk_1A33A0C18;
  while (1)
  {
    uint64_t v6 = ((char *)v5 - (char *)v4) >> 4;
    __int16 v7 = &v4[2 * v6];
    if (*v7 <= a2) {
      break;
    }
    int v5 = v7 - 2;
LABEL_17:
    if (v4 > v5) {
      return 0;
    }
  }
  if (*v7 < a2)
  {
    CFURLRef v4 = v7 + 2;
    goto LABEL_17;
  }
  unsigned int v9 = v4[2 * v6 + 1];
  if (v9)
  {
    unint64_t v10 = (char *)&__CFUniCharBMPPrecompDestinationTable + 4 * (unsigned __int16)v9;
    if (*(unsigned __int16 *)v10 <= a1)
    {
      int v11 = (unsigned __int16 *)&v10[4 * HIWORD(v9) - 4];
      if (*v11 >= a1)
      {
        while (1)
        {
          uint64_t v12 = ((char *)v11 - v10) >> 3;
          unint64_t v13 = (unsigned __int16 *)&v10[4 * v12];
          unsigned int v14 = *v13;
          if (v14 <= a1)
          {
            if (v14 >= a1) {
              return *(unsigned __int16 *)&v10[4 * v12 + 2];
            }
            unint64_t v10 = (char *)(v13 + 2);
          }
          else
          {
            int v11 = v13 - 2;
          }
          unsigned __int16 v2 = 0;
          if (v10 > (char *)v11) {
            return v2;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t unicode_recursive_decompose(unsigned int a1, _WORD *a2)
{
  unsigned __int16 v2 = a2;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((unsigned __int16)(a1 + 1201) < 0x571u)
  {
LABEL_8:
    unsigned int v8 = 0;
    goto LABEL_9;
  }
  unint64_t v3 = (unsigned __int16 *)&__CFUniCharDecompositionTable;
  CFURLRef v4 = (unsigned __int16 *)&unk_1A33A3058;
  while (1)
  {
    uint64_t v5 = ((char *)v4 - (char *)v3) >> 3;
    uint64_t v6 = &v3[2 * v5];
    unsigned int v7 = *v6;
    if (v7 <= a1) {
      break;
    }
    CFURLRef v4 = v6 - 2;
LABEL_7:
    if (v3 > v4) {
      goto LABEL_8;
    }
  }
  if (v7 < a1)
  {
    unint64_t v3 = v6 + 2;
    goto LABEL_7;
  }
  unsigned int v8 = v3[2 * v5 + 1];
LABEL_9:
  int v9 = (v8 >> 12) & 7;
  __int16 v15 = v8 & 0xFFF;
  unint64_t v10 = (char *)&__CFUniCharMultipleDecompositionTable + 2 * (v8 & 0xFFF);
  int v11 = (unsigned __int16 *)&v15;
  if (v9 != 1) {
    int v11 = (unsigned __int16 *)((char *)&__CFUniCharMultipleDecompositionTable + 2 * (v8 & 0xFFF));
  }
  if ((v8 & 0x8000) == 0)
  {
    LODWORD(result) = 0;
    goto LABEL_17;
  }
  uint64_t result = unicode_recursive_decompose(*v11, a2);
  if (result)
  {
    --v9;
    unint64_t v13 = &v15;
    if (v9) {
      unint64_t v13 = (__int16 *)v10;
    }
    int v11 = (unsigned __int16 *)(v13 + 1);
    v2 += result;
LABEL_17:
    for (uint64_t result = (result + v9); v9; --v9)
    {
      __int16 v14 = *v11++;
      *v2++ = v14;
    }
  }
  return result;
}

uint64_t check_and_decompose_string(unsigned __int8 *a1, unint64_t a2, unsigned __int8 **a3, unint64_t *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v22 = 0;
  *a3 = a1;
  *a4 = a2;
  if (!a2) {
    return 0;
  }
  unint64_t v8 = 0;
  int v23 = 0;
  int v9 = a1;
  while (((char)*v9 & 0x80000000) == 0)
  {
LABEL_10:
    ++v8;
    ++v9;
    if (v8 >= a2) {
      goto LABEL_11;
    }
  }
  int v24 = 0;
  unint64_t v10 = utf8_byte_length_noerror_utf8_len_table_1[(unint64_t)*v9 >> 4];
  if (utf8_decodestr(v9, v10, &v24, &v22, 4, &v23, 0)) {
    return 22;
  }
  if ((unsigned __int16)v24 < 0xC0u
    || (int v11 = __CFUniCharDecomposableBitmap[(unint64_t)(unsigned __int16)v24 >> 8]) == 0
    || v11 != 255
    && ((__CFUniCharDecomposableBitmap[(v24 >> 3) + 256 + 32 * v11 - 32] >> (v24 & 7)) & 1) == 0)
  {
    v8 += v10 - 1;
    v9 += v10 - 1;
    goto LABEL_10;
  }
LABEL_11:
  if (v8 >= a2)
  {
    if (v8 <= a2) {
      return 0;
    }
    return 22;
  }
  uint64_t v12 = (a2 >> 1) & 0x7FFFFFFFFFFFFFFELL;
  unint64_t v13 = malloc_type_malloc(v12 + 2 * a2 + 2, 0xBDF9019uLL);
  if (v13)
  {
    size_t v14 = 2 * a2 + v12 + 66;
    do
    {
      int v15 = utf8_decodestr(a1, a2, v13, &v22, v14 - 64, &v23, 4);
      if (!v15) {
        break;
      }
      if (v15 == 22)
      {
        free(v13);
        return 22;
      }
      free(v13);
      unint64_t v13 = malloc_type_malloc(v14, 0xBDF9019uLL);
      v14 += 64;
    }
    while (v13);
  }
  unint64_t v16 = v22;
  uint64_t v17 = utf8_encodelen(v13, v22, 47, 0);
  unsigned int v18 = malloc_type_malloc(v17 + 1, 0xB67BE8AFuLL);
  uint64_t v19 = utf8_encodestr(v13, v16, v18, &v22, v17 + 1, 47, 4);
  if (v19)
  {
    uint64_t v20 = v19;
    free(v13);
    free(v18);
    return v20;
  }
  v18[v17] = 0;
  *a3 = v18;
  *a4 = v17 + 1;
  free(v13);
  return 0;
}

void *MDTrieCreate(int a1, const char *a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  v53[1] = *(char **)MEMORY[0x1E4F143B8];
  uint64_t v12 = (char *)malloc_type_calloc(1uLL, 0x3368uLL, 0x10B0040EFDB134FuLL);
  unint64_t v13 = v12;
  if (v12)
  {
    *((_DWORD *)v12 + 3182) = a1;
    *((void *)v12 + 1592) = a2;
    *((_DWORD *)v12 + 3186) = a3;
    *((_DWORD *)v12 + 3187) = a4;
    v12[12752] = a5;
    CFIndex v43 = v12 + 12752;
    v12[12753] = a6;
    *((void *)v12 + 1620) = 766030772;
    *(_OWORD *)(v12 + 12968) = 0u;
    *(_OWORD *)(v12 + 12984) = 0u;
    *(_OWORD *)(v12 + 13000) = 0u;
    *(_OWORD *)(v12 + 13016) = 0u;
    *(_OWORD *)(v12 + 13032) = 0u;
    *(_OWORD *)(v12 + 13048) = 0u;
    *(_OWORD *)(v12 + 13064) = 0u;
    *(_OWORD *)(v12 + 13080) = 0u;
    *(_OWORD *)(v12 + 13096) = 0u;
    *(_OWORD *)(v12 + 13112) = 0u;
    *(_OWORD *)(v12 + 13128) = 0u;
    *(_OWORD *)(v12 + 13144) = 0u;
    *((void *)v12 + 1595) = 766030772;
    *((_OWORD *)v12 + 798) = 0u;
    *((_OWORD *)v12 + 799) = 0u;
    *((_OWORD *)v12 + 800) = 0u;
    *((_OWORD *)v12 + 801) = 0u;
    *((_OWORD *)v12 + 802) = 0u;
    *((_OWORD *)v12 + 803) = 0u;
    *((_OWORD *)v12 + 804) = 0u;
    *((_OWORD *)v12 + 805) = 0u;
    *((_OWORD *)v12 + 806) = 0u;
    *((_OWORD *)v12 + 807) = 0u;
    *((_OWORD *)v12 + 808) = 0u;
    *((_OWORD *)v12 + 809) = 0u;
    v53[0] = 0;
    asprintf(v53, "%s.node", a2);
    int v14 = cacheFileExists(a1, v53[0]);
    if (a5) {
      int v15 = 0;
    }
    else {
      int v15 = 514;
    }
    unint64_t v16 = fd_create_protected(a1, v53[0], v15, a3);
    *unint64_t v13 = v16;
    bzero(v13 + 3, 0x1088uLL);
    v51[0] = MEMORY[0x1E4F143A8];
    v51[1] = 0x40000000;
    v51[2] = ___ZL10createTrieiPciibb_block_invoke;
    v51[3] = &__block_descriptor_tmp_9;
    char v52 = v14;
    v51[4] = v13;
    storage_array_Init((_DWORD *)v13 + 6, 1024, 0, 4392, (uint64_t)v16, v14 ^ 1u, a4, a5, 0, 102, 0, (uint64_t)v51);
    if ((v14 & 1) == 0 && (a5 & 1) == 0) {
      storage_array_FlushHeader(v13 + 3, v17, v18, v19);
    }
    CFArrayRef v44 = v13 + 3;
    free(v53[0]);
    CFIndex v50 = 0;
    asprintf(&v50, "%s.container", a2);
    int v20 = cacheFileExists(a1, v50);
    int v21 = fd_create_protected(a1, v50, v15, a3);
    v13[1] = v21;
    bzero(v13 + 532, 0x1088uLL);
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 0x40000000;
    v48[2] = ___ZL10createTrieiPciibb_block_invoke_2;
    v48[3] = &__block_descriptor_tmp_6_0;
    char v49 = v20;
    v48[4] = v13;
    storage_array_Init((_DWORD *)v13 + 1064, 1024, 0, 528, (uint64_t)v21, v20 ^ 1u, a4, a5, 0, 102, 0, (uint64_t)v48);
    if ((v20 & 1) == 0 && (a5 & 1) == 0) {
      storage_array_FlushHeader(v13 + 532, v22, v23, v24);
    }
    free(v50);
    uint64_t v47 = 0;
    asprintf(&v47, "%s.payload", a2);
    int v25 = cacheFileExists(a1, v47);
    int v26 = fd_create_protected(a1, v47, v15, a3);
    v13[2] = v26;
    bzero(v13 + 1061, 0x1088uLL);
    v45[0] = MEMORY[0x1E4F143A8];
    v45[1] = 0x40000000;
    v45[2] = ___ZL10createTrieiPciibb_block_invoke_3;
    void v45[3] = &__block_descriptor_tmp_8;
    char v46 = v25;
    uint8_t v45[4] = v13;
    storage_array_Init((_DWORD *)v13 + 2122, 1024, 0, 344, (uint64_t)v26, v25 ^ 1u, a4, a5, 0, 102, 0, (uint64_t)v45);
    if ((v25 & 1) == 0 && (a5 & 1) == 0) {
      storage_array_FlushHeader(v13 + 1061, v27, v28, v29);
    }
    free(v47);
    if ((a5 & 1) == 0)
    {
      if (storage_array_ValidPtr((uint64_t)v44, 0, 1))
      {
        unint64_t v37 = storage_array_ResolvePtr((uint64_t)v44, 0, 1);
LABEL_19:
        v13[1590] = v37;
        return v13;
      }
      unint64_t v38 = storage_array_AllocOffsetFromEnd(v44, v30, v31, v32, v33, v34, v35, v36);
      if (storage_array_ValidPtr((uint64_t)v44, v38, 1))
      {
        unint64_t v37 = storage_array_ResolvePtr((uint64_t)v44, v38, 1);
        char v39 = v43[1];
        *(void *)unint64_t v37 = 0;
        *(void *)(v37 + 8) = 0;
        memset((void *)(v37 + 16), 255, 0x1000uLL);
        *(_DWORD *)(v37 + 4116) = 0;
        *(void *)(v37 + 4376) = 0;
        *(unsigned char *)(v37 + 4384) = v39;
        *(unsigned char *)(v37 + 4385) = 0;
        *(_OWORD *)(v37 + 4120) = 0u;
        *(_OWORD *)(v37 + 4136) = 0u;
        *(_OWORD *)(v37 + 4152) = 0u;
        *(_OWORD *)(v37 + 4168) = 0u;
        *(_OWORD *)(v37 + 4184) = 0u;
        *(_OWORD *)(v37 + 4200) = 0u;
        *(_OWORD *)(v37 + 4216) = 0u;
        *(_OWORD *)(v37 + 4232) = 0u;
        *(_OWORD *)(v37 + 4248) = 0u;
        *(_OWORD *)(v37 + 4264) = 0u;
        *(_OWORD *)(v37 + 4280) = 0u;
        *(_OWORD *)(v37 + 4296) = 0u;
        *(_OWORD *)(v37 + 4312) = 0u;
        *(_OWORD *)(v37 + 4328) = 0u;
        *(_OWORD *)(v37 + 4344) = 0u;
        *(_OWORD *)(v37 + 4360) = 0u;
        goto LABEL_19;
      }
      int v40 = *__error();
      unsigned int v41 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
        MDTrieCreate_cold_1((uint64_t)v13, v38, v41);
      }
      unint64_t v13 = 0;
      *__error() = v40;
    }
  }
  return v13;
}

void *MDTrieOpenReadOnly(int *a1, const char *a2)
{
  v12[1] = *(char **)MEMORY[0x1E4F143B8];
  CFURLRef v4 = malloc_type_calloc(1uLL, 0x3368uLL, 0x10B0040EFDB134FuLL);
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 3182) = -1;
    *((unsigned char *)v4 + 12752) = 1;
    v12[0] = 0;
    asprintf(v12, "%s.node.shadow", a2);
    only = fd_create_read_only(a1[1], v12[0]);
    void *v5 = only;
    storage_array_ReadInit((uint64_t)(v5 + 3), (uint64_t)only, 1024, 0x105C89E00, 4392, 4096);
    free(v12[0]);
    int v11 = 0;
    asprintf(&v11, "%s.container.shadow", a2);
    unsigned int v7 = fd_create_read_only(a1[2], v11);
    v5[1] = v7;
    storage_array_ReadInit((uint64_t)(v5 + 532), (uint64_t)v7, 1024, 528001024, 528, 4096);
    free(v11);
    unint64_t v10 = 0;
    asprintf(&v10, "%s.payload.shadow", a2);
    unint64_t v8 = fd_create_read_only(a1[3], v10);
    void v5[2] = v8;
    storage_array_ReadInit((uint64_t)(v5 + 1061), (uint64_t)v8, 1024, 344001024, 344, 4096);
    free(v10);
  }
  return v5;
}

BOOL MDTrieSearch(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return a1
      && searchLevel(a1, 0, a2, a3, 0, 0, 0, a5, (void (*)(uint64_t, unint64_t, uint64_t, void, char *, double))containsKey);
}

BOOL searchLevel(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, int a7, uint64_t a8, void (*a9)(uint64_t, unint64_t, uint64_t, void, char *, double))
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a4 - a5;
  if (a4 <= a5)
  {
LABEL_5:
    char v37 = 1;
    unint64_t v18 = storage_array_ResolvePtr(a1 + 24, a2, 1);
    if (a7)
    {
      MDTrieNode::removePayload((MDTrieNode *)v18, a6);
    }
    else if (a9 && !*(unsigned char *)(v18 + 4385))
    {
      a9(a8, v18 + 4112, 1, *(unsigned int *)(v18 + 4116), &v37, *(double *)(v18 + 4376));
    }
    return 1;
  }
  uint64_t v14 = 0;
  uint64_t v15 = a5;
  uint64_t v16 = a3 + a5;
  while (1)
  {
    uint64_t v17 = (void *)storage_array_ResolvePtr(a1 + 24, a2, 1);
    a2 = v17[*(unsigned __int8 *)(v16 + v14) + 2];
    if (!storage_array_ValidPtr(a1 + 24, a2, 1)) {
      break;
    }
    if (v12 == ++v14) {
      goto LABEL_5;
    }
  }
  uint64_t v20 = a3 + v15;
  uint64_t v34 = a1 + 4256;
  unint64_t v35 = v17[*(unsigned __int8 *)(a3 + v15 + v14) + 258];
  if (!storage_array_ValidPtr(a1 + 4256, v35, 1)) {
    return 0;
  }
  unint64_t v21 = 0;
  uint64_t v22 = a1 + 8488;
  uint64_t v30 = a8;
  unint64_t v31 = (v12 - v14);
  BOOL v19 = 1;
  while (1)
  {
    uint64_t v23 = (void *)storage_array_ResolvePtr(v34, v35, 1);
    unint64_t v24 = v23[v21 + 1];
    if (!storage_array_ValidPtr(v22, v24, 1)) {
      goto LABEL_28;
    }
    int v25 = (MDTriePayload *)storage_array_ResolvePtr(v22, v24, 1);
    char v36 = 1;
    if (v12 == v14
      || v12 - *((_DWORD *)v25 + 2) != v14
      || *(unsigned __int8 *)(v20 + v14) != *((unsigned __int8 *)v25 + 12))
    {
      goto LABEL_28;
    }
    unint64_t v26 = 0;
    while (v31 - 1 != v26)
    {
      int v27 = *(unsigned __int8 *)(v20 + v26 + v14 + 1);
      int v28 = *((unsigned __int8 *)v25 + v26++ + 13);
      if (v27 != v28) {
        goto LABEL_22;
      }
    }
    unint64_t v26 = (v12 - v14);
LABEL_22:
    if (v26 < v31) {
      goto LABEL_28;
    }
    if (a7) {
      break;
    }
    if (a9 && !*((unsigned char *)v25 + 337))
    {
      a9(v30, (unint64_t)v25 + 12, v12 - v14, *((unsigned int *)v25 + 16), &v36, *(double *)v25);
      return v19;
    }
LABEL_28:
    BOOL v19 = v21++ < 0x3F;
    if (v21 == 64) {
      return 0;
    }
  }
  if (!MDTriePayload::removePayload(v25, a6)) {
    goto LABEL_28;
  }
  --*v23;
  if (!v19) {
    return 0;
  }
  --*v17;
  return 1;
}

void *containsKey(void *result, unsigned __int8 *a2, unsigned int a3, int a4, double a5, BOOL *a6)
{
  if (result)
  {
    uint64_t v11 = (uint64_t)result;
    uint64_t v12 = malloc_type_malloc(a3 + 1, 0xA4724245uLL);
    *(void *)uint64_t v11 = v12;
    uint64_t result = memcpy(v12, a2, a3);
    *(unsigned char *)(*(void *)v11 + a3) = 0;
    *(_DWORD *)(v11 + 8) = a3;
    *(_DWORD *)(v11 + 12) = a4;
    *(double *)(v11 + 16) = a5;
    *a6 = 1;
  }
  return result;
}

uint64_t MDTrieInsert(uint64_t result, const void *a2, uint64_t a3, uint64_t a4, double a5)
{
  if (result)
  {
    uint64_t v5 = result;
    if (!*(unsigned char *)(result + 12752))
    {
      pthread_rwlock_wrlock((pthread_rwlock_t *)(result + 12960));
      if (payloadCounter(v5, 0) <= 999999) {
        addLevel(v5, 0, a2, a3, 0, a4, a5);
      }
      return pthread_rwlock_unlock((pthread_rwlock_t *)(v5 + 12960));
    }
  }
  return result;
}

uint64_t MDTrieCount(uint64_t a1)
{
  return payloadCounter(a1, 0);
}

void *addLevel(uint64_t a1, unint64_t a2, const void *a3, uint64_t a4, unsigned int a5, uint64_t a6, double a7)
{
  char v46 = (void *)*MEMORY[0x1E4F143B8];
  size_t v14 = a4;
  MEMORY[0x1F4188790](v46, a1, a2, a3, a4);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0x1FFFFFFF0);
  bzero(v15, v14);
  if (a4) {
    memcpy((char *)&v45 - ((v14 + 15) & 0x1FFFFFFF0), a3, v14);
  }
  uint64_t v16 = a1 + 24;
  unint64_t v17 = storage_array_ResolvePtr(a1 + 24, a2, 1);
  unint64_t v18 = (void *)v17;
  unsigned int v19 = a4 - a5;
  if (a4 <= a5)
  {
    uint64_t result = (void *)MDTrieNode::updatePayload(v17, a6, a7);
    ++*v18;
  }
  else
  {
    CFDictionaryRef v45 = &v15[a5];
    uint64_t v20 = *v45;
    uint64_t v21 = *(void *)(v17 + 8 * v20 + 16);
    if (storage_array_ValidPtr(a1 + 24, v21, 1))
    {
      return (void *)addLevel(a1, v21, v15, a4, a5 + 1, a6, a7);
    }
    else
    {
      unint64_t v23 = *(void *)(storage_array_ResolvePtr(a1 + 24, a2, 1) + 8 * v20 + 2064);
      if (storage_array_ValidPtr(a1 + 4256, v23, 1))
      {
        unint64_t v31 = v45;
        addPayloadToContainer(a1, v23, v45, v19, a6, a7);
        if (*(uint64_t *)storage_array_ResolvePtr(a1 + 4256, v23, 1) >= 64)
        {
          *(void *)(storage_array_ResolvePtr(a1 + 24, a2, 1) + 8 * *v31 + 2064) = -1;
          unint64_t v38 = burstLevel(a1, v23, v32, v33, v34, v35, v36, v37);
          unint64_t v39 = storage_array_ResolvePtr(v16, a2, 1);
          *(void *)(v39 + 8 * *v31 + 16) = v38;
          ++*(void *)(v39 + 8);
        }
      }
      else
      {
        unint64_t v40 = storage_array_AllocOffsetFromEnd((void *)(a1 + 4256), v24, v25, v26, v27, v28, v29, v30);
        unint64_t v41 = storage_array_ResolvePtr(a1 + 4256, v40, 1);
        *(void *)unint64_t v41 = 0;
        *(void *)&long long v42 = -1;
        *((void *)&v42 + 1) = -1;
        *(_OWORD *)(v41 + 24) = v42;
        *(_OWORD *)(v41 + 40) = v42;
        *(_OWORD *)(v41 + 56) = v42;
        *(_OWORD *)(v41 + 72) = v42;
        *(_OWORD *)(v41 + 88) = v42;
        *(_OWORD *)(v41 + 104) = v42;
        *(_OWORD *)(v41 + 120) = v42;
        *(_OWORD *)(v41 + 136) = v42;
        *(_OWORD *)(v41 + 152) = v42;
        *(_OWORD *)(v41 + 168) = v42;
        *(_OWORD *)(v41 + 184) = v42;
        *(_OWORD *)(v41 + 200) = v42;
        *(_OWORD *)(v41 + 216) = v42;
        *(_OWORD *)(v41 + 232) = v42;
        *(_OWORD *)(v41 + 248) = v42;
        *(unsigned char *)(v41 + 520) = 0;
        *(_OWORD *)(v41 + 8) = v42;
        v41 += 8;
        *(_OWORD *)(v41 + 256) = v42;
        *(_OWORD *)(v41 + 272) = v42;
        *(_OWORD *)(v41 + 288) = v42;
        *(_OWORD *)(v41 + 304) = v42;
        *(_OWORD *)(v41 + 320) = v42;
        *(_OWORD *)(v41 + 336) = v42;
        *(_OWORD *)(v41 + 352) = v42;
        *(_OWORD *)(v41 + 368) = v42;
        *(_OWORD *)(v41 + 384) = v42;
        *(_OWORD *)(v41 + 400) = v42;
        *(_OWORD *)(v41 + 416) = v42;
        *(_OWORD *)(v41 + 432) = v42;
        *(_OWORD *)(v41 + 448) = v42;
        *(_OWORD *)(v41 + 464) = v42;
        *(_OWORD *)(v41 + 480) = v42;
        *(_OWORD *)(v41 + 496) = v42;
        unint64_t v43 = storage_array_ResolvePtr(a1 + 24, a2, 1);
        CFArrayRef v44 = v45;
        *(void *)(v43 + 8 * *v45 + 2064) = v40;
        addPayloadToContainer(a1, v40, v44, v19, a6, a7);
      }
      uint64_t result = (void *)storage_array_ResolvePtr(v16, a2, 1);
      ++*result;
    }
  }
  return result;
}

uint64_t MDTrieDelete(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  if (result)
  {
    uint64_t v4 = result;
    if (!*(unsigned char *)(result + 12752))
    {
      pthread_rwlock_wrlock((pthread_rwlock_t *)(result + 12960));
      searchLevel(v4, 0, a2, a3, 0, a4, 1, 0, 0);
      return pthread_rwlock_unlock((pthread_rwlock_t *)(v4 + 12960));
    }
  }
  return result;
}

uint64_t payloadCounter(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (uint64_t *)storage_array_ResolvePtr(a1 + 24, a2, 1);
  uint64_t v4 = 0;
  uint64_t v6 = v3 + 2;
  uint64_t v5 = *v3;
  do
  {
    if (v6[v4] != -1) {
      v5 += payloadCounter(a1);
    }
    ++v4;
  }
  while (v4 != 256);
  return v5;
}

uint64_t MDTrieSync(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v4 = result;
    if (!*(unsigned char *)(result + 12752))
    {
      storage_array_FlushHeader((void *)(result + 24), a2, a3, a4);
      storage_array_Sync((int *)(v4 + 24), 1, 1);
      storage_array_FlushHeader((void *)(v4 + 4256), v5, v6, v7);
      storage_array_Sync((int *)(v4 + 4256), 1, 1);
      storage_array_FlushHeader((void *)(v4 + 8488), v8, v9, v10);
      storage_array_Sync((int *)(v4 + 8488), 1, 1);
      return writeToShadowTrie(v4);
    }
  }
  return result;
}

uint64_t storage_array_FlushHeader(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v17 = (void *)*MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](v17, a1, a1[2], a3, a4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v6, v5);
  uint64_t v7 = (_DWORD *)storage_array_FdPtr((uint64_t)a1);
  fd_pread(v7, v6, a1[2], 0);
  uint64_t v16 = v6;
  storage_array_HeaderStore(a1, (uint64_t *)&v16, v8, v9, v10, v11, v12, v13);
  uint64_t v14 = storage_array_FdPtr((uint64_t)a1);
  return fd_pwrite(v14, (uint64_t)v6, a1[2], 0);
}

uint64_t writeToShadowTrie(uint64_t result)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(result + 12752))
  {
    uint64_t v1 = result;
    unsigned __int16 v2 = (pthread_rwlock_t *)(result + 12760);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(result + 12760));
    int v22 = 0;
    bzero(v29, 0x400uLL);
    bzero(__str, 0x400uLL);
    bzero(v27, 0x400uLL);
    unint64_t v3 = faccurate_realpath(*(_DWORD *)(v1 + 12728), v29);
    double Current = CFAbsoluteTimeGetCurrent();
    snprintf(__str, 0x400uLL, "%s/%s.node", v3, *(const char **)(v1 + 12736));
    snprintf(v27, 0x400uLL, "%s/%s.node.shadow", v3, *(const char **)(v1 + 12736));
    if (copyFile(*(_DWORD *)(v1 + 12728), __str, *(_DWORD *)(v1 + 12728), v27, &v22))
    {
      if (dword_1E95AC908 < 5) {
        goto LABEL_9;
      }
      int v5 = *__error();
      uint64_t v6 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(v1 + 12736);
        float v8 = CFAbsoluteTimeGetCurrent() - Current;
        *(_DWORD *)buf = 136315394;
        uint64_t v24 = v7;
        __int16 v25 = 2048;
        double v26 = v8;
        _os_log_impl(&dword_1A334F000, v6, OS_LOG_TYPE_DEFAULT, "%s.node.shadow took %f seconds", buf, 0x16u);
      }
    }
    else
    {
      int v5 = *__error();
      uint64_t v9 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        writeToShadowTrie();
      }
    }
    *__error() = v5;
LABEL_9:
    double v10 = CFAbsoluteTimeGetCurrent();
    snprintf(__str, 0x400uLL, "%s/%s.container", v3, *(const char **)(v1 + 12736));
    snprintf(v27, 0x400uLL, "%s/%s.container.shadow", v3, *(const char **)(v1 + 12736));
    if (copyFile(*(_DWORD *)(v1 + 12728), __str, *(_DWORD *)(v1 + 12728), v27, &v22))
    {
      if (dword_1E95AC908 < 5) {
        goto LABEL_16;
      }
      int v11 = *__error();
      uint64_t v12 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(v1 + 12736);
        float v14 = CFAbsoluteTimeGetCurrent() - v10;
        *(_DWORD *)buf = 136315394;
        uint64_t v24 = v13;
        __int16 v25 = 2048;
        double v26 = v14;
        _os_log_impl(&dword_1A334F000, v12, OS_LOG_TYPE_DEFAULT, "%s.container.shadow took %f seconds", buf, 0x16u);
      }
    }
    else
    {
      int v11 = *__error();
      uint64_t v15 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        writeToShadowTrie();
      }
    }
    *__error() = v11;
LABEL_16:
    double v16 = CFAbsoluteTimeGetCurrent();
    snprintf(__str, 0x400uLL, "%s/%s.payload", v3, *(const char **)(v1 + 12736));
    snprintf(v27, 0x400uLL, "%s/%s.payload.shadow", v3, *(const char **)(v1 + 12736));
    if (copyFile(*(_DWORD *)(v1 + 12728), __str, *(_DWORD *)(v1 + 12728), v27, &v22))
    {
      if (dword_1E95AC908 < 5) {
        return pthread_rwlock_unlock(v2);
      }
      int v17 = *__error();
      unint64_t v18 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(v1 + 12736);
        float v20 = CFAbsoluteTimeGetCurrent() - v16;
        *(_DWORD *)buf = 136315394;
        uint64_t v24 = v19;
        __int16 v25 = 2048;
        double v26 = v20;
        _os_log_impl(&dword_1A334F000, v18, OS_LOG_TYPE_DEFAULT, "%s.payload.shadow took %f seconds", buf, 0x16u);
      }
    }
    else
    {
      int v17 = *__error();
      uint64_t v21 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        writeToShadowTrie();
      }
    }
    *__error() = v17;
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void MDTrieClose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    MDTrieSync(a1, a2, a3, a4);
    storage_array_Close(a1 + 24);
    storage_array_Close(a1 + 4256);
    storage_array_Close(a1 + 8488);
    if (!*(unsigned char *)(a1 + 12752))
    {
      pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 12960));
      pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 12760));
    }
  }
}

uint64_t MDTrieGetFd(uint64_t result, _DWORD *a2)
{
  v6[1] = *(char **)MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v2 = result;
    if (!*(unsigned char *)(result + 12752))
    {
      pthread_rwlock_rdlock((pthread_rwlock_t *)(result + 12960));
      writeToShadowTrie(v2);
      pthread_rwlock_unlock((pthread_rwlock_t *)(v2 + 12960));
      pthread_rwlock_rdlock((pthread_rwlock_t *)(v2 + 12760));
      *a2 = 0;
      v6[0] = 0;
      asprintf(v6, "%s.node.shadow", *(const char **)(v2 + 12736));
      a2[1] = openat(*(_DWORD *)(v2 + 12728), v6[0], 0);
      free(v6[0]);
      int v5 = 0;
      asprintf(&v5, "%s.container.shadow", *(const char **)(v2 + 12736));
      a2[2] = openat(*(_DWORD *)(v2 + 12728), v5, 0);
      free(v5);
      uint64_t v4 = 0;
      asprintf(&v4, "%s.payload.shadow", *(const char **)(v2 + 12736));
      a2[3] = openat(*(_DWORD *)(v2 + 12728), v4, 0);
      free(v4);
      return pthread_rwlock_unlock((pthread_rwlock_t *)(v2 + 12760));
    }
  }
  return result;
}

void MDTrieEnumerateEntry(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    __int16 v7 = 0;
    memset(v6, 0, sizeof(v6));
    uint64_t v5 = 0;
    enumerateNode(a1, a2, (char *)v6, a3, &v5, a4, a5);
  }
}

void enumerateNode(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = storage_array_ResolvePtr(a1 + 24, a2, 1);
  if (v12)
  {
    unint64_t v13 = v12;
    if (!*(unsigned char *)(v12 + 4385))
    {
      uint64_t v14 = 0;
      unint64_t v50 = v12;
      __s2 = (char *)(v12 + 4112);
      uint64_t v15 = a1 + 4256;
      do
      {
        if (*a5 >= a4) {
          return;
        }
        unint64_t v16 = v13 + 8 * v14;
        if (*(void *)(v16 + 2064) == -1)
        {
          uint64_t v31 = *(void *)(v16 + 16);
          uint64_t v30 = (void *)(v16 + 16);
          if (v31 == -1) {
            goto LABEL_15;
          }
          size_t v32 = strlen(a3);
          uint64_t v33 = strncat(a3, __s2, 49 - v32);
          size_t v34 = strlen(v33);
          if (v34 >= 0x32) {
            enumerateNode(v34, v35, v36, v37, v38, v39, v40, v41);
          }
          size_t v29 = v34;
          enumerateNode(a1, *v30, a3, a4, a5, a6, a7);
          if (!v29) {
            goto LABEL_15;
          }
        }
        else
        {
          size_t v17 = strlen(a3);
          unint64_t v18 = strncat(a3, __s2, 49 - v17);
          size_t v19 = strlen(v18);
          if (v19 >= 0x32) {
            enumerateNode(v19, v20, v21, v22, v23, v24, v25, v26);
          }
          size_t v52 = v19;
          uint64_t v53 = v14;
          unint64_t v27 = *(void *)(v16 + 2064);
          uint64_t v28 = a1 + 8488;
          if (!*(unsigned char *)(storage_array_ResolvePtr(v15, v27, 1) + 520))
          {
            for (unint64_t i = 0; ; ++i)
            {
              unint64_t v43 = *(void *)(storage_array_ResolvePtr(v15, v27, 1) + 8 * i + 8);
              if (v43 == -1 || (unint64_t v44 = storage_array_ResolvePtr(v28, v43, 1), *(unsigned char *)(v44 + 337)))
              {
                if (i > 0x3E) {
                  break;
                }
              }
              else
              {
                unint64_t v45 = v44;
                uint64_t v46 = *a5 + 1;
                *a5 = v46;
                if (a6)
                {
                  printf("key: %s%s, payload: %d, score: %f\n", a3, (const char *)(v44 + 12), *(_DWORD *)(v44 + 64), *(double *)v44);
                  uint64_t v46 = *a5;
                }
                int v47 = v46 >= a4;
                unsigned __int8 v55 = v47;
                if (a7)
                {
                  __s = 0;
                  asprintf(&__s, "%s%s", a3, (const char *)(v45 + 12));
                  size_t v48 = strlen(__s);
                  uint64_t v28 = a1 + 8488;
                  (*(void (**)(uint64_t, char *, size_t, void, unsigned __int8 *, double))(a7 + 16))(a7, __s, v48, *(unsigned int *)(v45 + 64), &v55, *(double *)v45);
                  free(__s);
                  int v47 = v55;
                }
                if (v47 || i >= 0x3F) {
                  break;
                }
              }
            }
          }
          unint64_t v13 = v50;
          size_t v29 = v52;
          uint64_t v14 = v53;
          if (!v52) {
            goto LABEL_15;
          }
        }
        a3[v29] = 0;
LABEL_15:
        ++v14;
      }
      while (v14 != 256);
    }
  }
}

uint64_t cacheFileExists(int a1, char *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  bzero(__filename, 0x400uLL);
  uint64_t result = (uint64_t)faccurate_realpath(a1, __filename);
  if (result)
  {
    uint64_t v5 = result;
    size_t v6 = strlen((const char *)result);
    snprintf((char *)(v5 + v6), 1024 - v6, "/%s", a2);
    uint64_t result = (uint64_t)fopen(__filename, "r");
    if (result)
    {
      fclose((FILE *)result);
      return 1;
    }
  }
  return result;
}

uint64_t ___ZL10createTrieiPciibb_block_invoke(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v1 = *(void **)(result + 32);
    uint64_t v4 = (_DWORD *)*v1;
    uint64_t v2 = v1 + 3;
    unint64_t v3 = v4;
    return storage_array_RestoreHeader(v2, v3);
  }
  return result;
}

uint64_t storage_array_RestoreHeader(void *a1, _DWORD *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  bzero(v11, 0x400uLL);
  double v10 = v11;
  uint64_t result = fd_pread(a2, v11, 0x400uLL, 0);
  if (result == 1024) {
    return storage_array_HeaderRestore(a1, &v10, 1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ___ZL10createTrieiPciibb_block_invoke_2(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v1 = *(void *)(result + 32);
    uint64_t v2 = *(_DWORD **)(v1 + 8);
    return storage_array_RestoreHeader((void *)(v1 + 4256), v2);
  }
  return result;
}

uint64_t ___ZL10createTrieiPciibb_block_invoke_3(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v1 = *(void *)(result + 32);
    uint64_t v2 = *(_DWORD **)(v1 + 16);
    return storage_array_RestoreHeader((void *)(v1 + 8488), v2);
  }
  return result;
}

BOOL MDTriePayload::removePayload(MDTriePayload *this, int a2)
{
  int v2 = *((_DWORD *)this + 16);
  if (*((unsigned char *)this + 336)) {
    BOOL v3 = (v2 & a2) != 0;
  }
  else {
    BOOL v3 = v2 == a2;
  }
  if (v3)
  {
    if (!*((unsigned char *)this + 336))
    {
      *((void *)this + 41) = 0;
LABEL_14:
      *((_DWORD *)this + 16) = 0;
      *((unsigned char *)this + 337) = 1;
      return v3;
    }
    uint64_t v4 = 0;
    uint64_t v5 = (char *)this + 72;
    do
    {
      if (((1 << v4) & a2) != 0)
      {
        --*(void *)&v5[8 * v4];
        --*((void *)this + 41);
        if (!*(void *)&v5[8 * v4])
        {
          v2 &= ~(1 << v4);
          *((_DWORD *)this + 16) = v2;
        }
      }
      ++v4;
    }
    while (v4 != 32);
    if (!*((void *)this + 41)) {
      goto LABEL_14;
    }
  }
  return v3;
}

BOOL MDTrieNode::removePayload(MDTrieNode *this, int a2)
{
  int v2 = *((_DWORD *)this + 1029);
  if (*((unsigned char *)this + 4384)) {
    BOOL v3 = (v2 & a2) != 0;
  }
  else {
    BOOL v3 = v2 == a2;
  }
  if (v3)
  {
    if (!*((unsigned char *)this + 4384))
    {
      *(void *)this = 0;
LABEL_14:
      *((_DWORD *)this + 1029) = 0;
      *((unsigned char *)this + 4385) = 1;
      return v3;
    }
    for (uint64_t i = 515; i != 547; ++i)
    {
      int v5 = 1 << (i - 3);
      if ((v5 & a2) != 0)
      {
        uint64_t v6 = *((void *)this + i);
        --*(void *)this;
        *((void *)this + i) = --v6;
        if (!v6)
        {
          v2 &= ~v5;
          *((_DWORD *)this + 1029) = v2;
        }
      }
    }
    if (!*(void *)this) {
      goto LABEL_14;
    }
  }
  return v3;
}

uint64_t addPayloadToContainer(uint64_t a1, unint64_t a2, char *a3, unsigned int a4, unsigned int a5, double a6)
{
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 4256;
  int v11 = (void *)(a1 + 8488);
  if (a3) {
    BOOL v12 = a4 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = !v12;
  unint64_t v37 = a4;
  uint64_t v14 = a3 + 1;
  uint64_t v15 = a4 - 1;
  do
  {
    unint64_t v16 = (void *)storage_array_ResolvePtr(v10, a2, 1);
    unint64_t v17 = v16[v9 + 1];
    if (storage_array_ValidPtr((uint64_t)v11, v17, 1))
    {
      unint64_t v18 = storage_array_ResolvePtr((uint64_t)v11, v17, 1);
      if (v13)
      {
        if (*(_DWORD *)(v18 + 8) == a4 && *a3 == *(unsigned char *)(v18 + 12))
        {
          uint64_t v19 = 0;
          do
          {
            uint64_t v20 = v19;
            if (v15 == v19) {
              break;
            }
            int v21 = v14[v19];
            int v22 = *(unsigned __int8 *)(v18 + v19++ + 13);
          }
          while (v21 == v22);
          if (v20 + 1 >= v37)
          {
            ++*v16;
            return MDTriePayload::updatePayload(v18, a5, a6);
          }
        }
      }
    }
    ++v9;
  }
  while (v9 != 64);
  uint64_t v23 = 8;
  while (1)
  {
    unint64_t v24 = storage_array_ResolvePtr(v10, a2, 1);
    uint64_t result = storage_array_ValidPtr((uint64_t)v11, *(void *)(v24 + v23), 1);
    if ((result & 1) == 0) {
      break;
    }
    v23 += 8;
    if (v23 == 520) {
      return result;
    }
  }
  unint64_t v33 = storage_array_AllocOffsetFromEnd(v11, v26, v27, v28, v29, v30, v31, v32);
  unint64_t v34 = storage_array_ResolvePtr((uint64_t)v11, v33, 1);
  MDTriePayload::initMDTriePayload(v34, a3, a4, a5, a6, *(unsigned __int8 *)(a1 + 12753));
  uint64_t result = storage_array_ResolvePtr(v10, a2, 1);
  *(void *)(result + v23) = v33;
  ++*(void *)result;
  return result;
}

unint64_t burstLevel(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a1 + 24;
  unint64_t v11 = storage_array_AllocOffsetFromEnd((void *)(a1 + 24), a2, a3, a4, a5, a6, a7, a8);
  unint64_t v12 = storage_array_ResolvePtr(v10, v11, 1);
  char v13 = *(unsigned char *)(a1 + 12753);
  *(void *)unint64_t v12 = 0;
  *(void *)(v12 + 8) = 0;
  memset((void *)(v12 + 16), 255, 0x1000uLL);
  *(_DWORD *)(v12 + 4116) = 0;
  *(void *)(v12 + 4376) = 0;
  *(unsigned char *)(v12 + 4384) = v13;
  *(unsigned char *)(v12 + 4385) = 0;
  *(_OWORD *)(v12 + 4120) = 0u;
  *(_OWORD *)(v12 + 4136) = 0u;
  *(_OWORD *)(v12 + 4152) = 0u;
  *(_OWORD *)(v12 + 4168) = 0u;
  *(_OWORD *)(v12 + 4184) = 0u;
  *(_OWORD *)(v12 + 4200) = 0u;
  *(_OWORD *)(v12 + 4216) = 0u;
  *(_OWORD *)(v12 + 4232) = 0u;
  *(_OWORD *)(v12 + 4248) = 0u;
  *(_OWORD *)(v12 + 4264) = 0u;
  *(_OWORD *)(v12 + 4280) = 0u;
  *(_OWORD *)(v12 + 4296) = 0u;
  *(_OWORD *)(v12 + 4312) = 0u;
  *(_OWORD *)(v12 + 4328) = 0u;
  *(_OWORD *)(v12 + 4344) = 0u;
  *(_OWORD *)(v12 + 4360) = 0u;
  for (uint64_t i = 8; i != 520; i += 8)
  {
    unint64_t v15 = *(void *)(storage_array_ResolvePtr(a1 + 4256, a2, 1) + i);
    if (storage_array_ValidPtr(a1 + 8488, v15, 1)) {
      addBurstLevel(a1, v11, v15);
    }
  }
  *(unsigned char *)(storage_array_ResolvePtr(a1 + 4256, a2, 1) + 520) = 1;
  return v11;
}

uint64_t MDTriePayload::updatePayload(uint64_t this, int a2, double a3)
{
  if (*(unsigned char *)(this + 336))
  {
    for (uint64_t i = 0; i != 32; ++i)
    {
      if (((1 << i) & a2) != 0)
      {
        ++*(void *)(this + 72 + 8 * i);
        ++*(void *)(this + 328);
        *(_DWORD *)(this + 64) |= 1 << i;
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 64) = a2;
    *(void *)(this + 328) = 1;
  }
  *(double *)this = a3;
  *(unsigned char *)(this + 337) = 0;
  return this;
}

uint64_t MDTriePayload::initMDTriePayload(uint64_t this, char *a2, unsigned int a3, unsigned int a4, double a5, int a6)
{
  *(_DWORD *)(this + 8) = a3;
  *(double *)this = a5;
  *(_DWORD *)(this + 64) = a4;
  *(unsigned char *)(this + 336) = a6;
  if (a6)
  {
    uint64_t v6 = 0;
    int32x2_t v7 = vdup_n_s32(a4);
    int32x2_t v8 = (int32x2_t)0x100000000;
    int8x16_t v9 = (int8x16_t)vdupq_n_s64(1uLL);
    do
    {
      int32x2_t v10 = vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)v8), v7);
      v11.i64[0] = v10.u32[0];
      v11.i64[1] = v10.u32[1];
      *(int8x16_t *)(this + 72 + v6) = vandq_s8(v11, v9);
      int32x2_t v8 = vadd_s32(v8, (int32x2_t)0x200000002);
      v6 += 16;
    }
    while (v6 != 256);
  }
  *(void *)(this + 328) = 1;
  *(_OWORD *)(this + 12) = 0u;
  *(_OWORD *)(this + 28) = 0u;
  *(_OWORD *)(this + 44) = 0u;
  *(_WORD *)(this + 60) = 0;
  if (a3)
  {
    uint64_t v12 = a3;
    char v13 = (unsigned char *)(this + 12);
    do
    {
      char v14 = *a2++;
      *v13++ = v14;
      --v12;
    }
    while (v12);
  }
  return this;
}

unint64_t addBurstLevel(uint64_t a1, unint64_t a2, unint64_t a3)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  unint64_t result = storage_array_ResolvePtr(a1 + 8488, a3, 1);
  if (result)
  {
    unint64_t v10 = result;
    double v11 = *(double *)result;
    unsigned int v12 = *(_DWORD *)(result + 64);
    size_t v13 = *(unsigned int *)(result + 8);
    MEMORY[0x1F4188790](v9, result, v6, v7, v8);
    char v14 = (unsigned __int8 *)v33 - ((v13 + 15) & 0x1FFFFFFF0);
    bzero(v14, v13);
    if (!v13) {
      goto LABEL_9;
    }
    for (uint64_t i = 0; i != v13; ++i)
      v14[i] = *(unsigned char *)(v10 + 12 + i);
    if (v13 > 1)
    {
      uint64_t v16 = a1 + 24;
      unint64_t v17 = storage_array_ResolvePtr(a1 + 24, a2, 1);
      *(unsigned char *)(v17 + 4112) = *v14;
      unsigned int v19 = v14[1];
      unint64_t v18 = (char *)(v14 + 1);
      unint64_t v20 = *(void *)(v17 + 8 * v19 + 2064);
      if (storage_array_ValidPtr(a1 + 4256, v20, 1))
      {
        addPayloadToContainer(a1, v20, v18, v13 - 1, v12, v11);
        unint64_t result = storage_array_ResolvePtr(a1 + 4256, v20, 1);
        if (*(uint64_t *)result >= 64)
        {
          *(void *)(storage_array_ResolvePtr(a1 + 24, a2, 1) + 8 * *v18 + 2064) = -1;
          uint64_t v28 = burstLevel(a1, v20);
          unint64_t result = storage_array_ResolvePtr(v16, a2, 1);
          *(void *)(result + 8 * *v18 + 16) = v28;
          ++*(void *)(result + 8);
        }
      }
      else
      {
        unint64_t v30 = storage_array_AllocOffsetFromEnd((void *)(a1 + 4256), v21, v22, v23, v24, v25, v26, v27);
        unint64_t v31 = storage_array_ResolvePtr(a1 + 4256, v30, 1);
        *(void *)unint64_t v31 = 0;
        *(void *)&long long v32 = -1;
        *((void *)&v32 + 1) = -1;
        *(_OWORD *)(v31 + 24) = v32;
        *(_OWORD *)(v31 + 40) = v32;
        *(_OWORD *)(v31 + 56) = v32;
        *(_OWORD *)(v31 + 72) = v32;
        *(_OWORD *)(v31 + 88) = v32;
        *(_OWORD *)(v31 + 104) = v32;
        *(_OWORD *)(v31 + 120) = v32;
        *(_OWORD *)(v31 + 136) = v32;
        *(_OWORD *)(v31 + 152) = v32;
        *(_OWORD *)(v31 + 168) = v32;
        *(_OWORD *)(v31 + 184) = v32;
        *(_OWORD *)(v31 + 200) = v32;
        *(_OWORD *)(v31 + 216) = v32;
        *(_OWORD *)(v31 + 232) = v32;
        *(_OWORD *)(v31 + 248) = v32;
        *(unsigned char *)(v31 + 520) = 0;
        *(_OWORD *)(v31 + 8) = v32;
        v31 += 8;
        *(_OWORD *)(v31 + 256) = v32;
        *(_OWORD *)(v31 + 272) = v32;
        *(_OWORD *)(v31 + 288) = v32;
        *(_OWORD *)(v31 + 304) = v32;
        *(_OWORD *)(v31 + 320) = v32;
        *(_OWORD *)(v31 + 336) = v32;
        *(_OWORD *)(v31 + 352) = v32;
        *(_OWORD *)(v31 + 368) = v32;
        *(_OWORD *)(v31 + 384) = v32;
        *(_OWORD *)(v31 + 400) = v32;
        *(_OWORD *)(v31 + 416) = v32;
        *(_OWORD *)(v31 + 432) = v32;
        *(_OWORD *)(v31 + 448) = v32;
        *(_OWORD *)(v31 + 464) = v32;
        *(_OWORD *)(v31 + 480) = v32;
        *(_OWORD *)(v31 + 496) = v32;
        *(void *)(storage_array_ResolvePtr(a1 + 24, a2, 1) + 8 * *v18 + 2064) = v30;
        return addPayloadToContainer(a1, v30, v18, (int)v13 - 1, v12, v11);
      }
    }
    else
    {
LABEL_9:
      unint64_t v29 = storage_array_ResolvePtr(a1 + 24, a2, 1);
      return MDTrieNode::updatePayload(v29, v12, v11);
    }
  }
  return result;
}

uint64_t MDTrieNode::updatePayload(uint64_t this, int a2, double a3)
{
  if (*(unsigned char *)(this + 4384))
  {
    for (uint64_t i = 515; i != 547; ++i)
    {
      int v4 = 1 << (i - 3);
      if ((v4 & a2) != 0)
      {
        ++*(void *)(this + 8 * i);
        ++*(void *)this;
        *(_DWORD *)(this + 4116) |= v4;
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 4116) = a2;
    *(void *)this = 1;
  }
  *(double *)(this + 4376) = a3;
  return this;
}

void OUTLINED_FUNCTION_1_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x26u);
}

uint64_t MDDictionaryUIntUIntGetTypeID()
{
  uint64_t result = __kMDDictionaryUIntUIntTypeID;
  if (!__kMDDictionaryUIntUIntTypeID)
  {
    uint64_t result = _CFRuntimeRegisterClass();
    __kMDDictionaryUIntUIntCFTypeID TypeID = result;
  }
  return result;
}

uint64_t MDDictionaryUIntUIntCreate()
{
  if (!__kMDDictionaryUIntUIntTypeID) {
    __kMDDictionaryUIntUIntCFTypeID TypeID = _CFRuntimeRegisterClass();
  }

  return _CFRuntimeCreateInstance();
}

uint64_t MDDictionaryUIntUIntCreateCopy(uint64_t a1, uint64_t a2)
{
  void v5[5] = *MEMORY[0x1E4F143B8];
  if (!__kMDDictionaryUIntUIntTypeID) {
    __kMDDictionaryUIntUIntCFTypeID TypeID = _CFRuntimeRegisterClass();
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::~__hash_table(Instance + 16);
  std::unordered_map<unsigned long long,unsigned long long>::unordered_map((uint64_t)v5, a2 + 16);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__move_assign(Instance + 16, v5);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::~__hash_table((uint64_t)v5);
  return Instance;
}

uint64_t MDDictionaryUIntUIntGetCount(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

BOOL MDDictionaryUIntUIntContainsKey(uint64_t a1, unint64_t a2)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  v3[0] = a2;
  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>((void *)(a1 + 16), v3) != 0;
}

void *MDDictionaryUIntUIntAddValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = a2;
  *((void *)&v4 + 1) = a3;
  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,unsigned long long> const&>(a1 + 16, (unint64_t *)&v4, &v4);
}

void *MDDictionaryUIntUIntSetValue(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  v6[0] = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,unsigned long long &>(a1 + 16, v6, v6, &v5);
  if (!v4) {
    result[3] = v5;
  }
  return result;
}

void *MDDictionaryUIntUIntReplaceValue(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a3;
  v7[0] = a2;
  uint64_t v3 = a1 + 16;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>((void *)(a1 + 16), v7);
  if (result)
  {
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,unsigned long long &>(v3, v7, v7, &v6);
    if (!v5) {
      result[3] = v6;
    }
  }
  return result;
}

void *MDDictionaryUIntUIntGetValue(uint64_t a1, unint64_t a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  v5[0] = a2;
  int v2 = (void *)(a1 + 16);
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>((void *)(a1 + 16), v5);
  if (result)
  {
    char v4 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>(v2, v5);
    if (!v4) {
      abort();
    }
    return (void *)v4[3];
  }
  return result;
}

uint64_t MDDictionaryUIntUIntIncrementValue(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a3;
  v10[0] = a2;
  uint64_t v4 = a1 + 16;
  char v5 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>((void *)(a1 + 16), v10);
  if (v5)
  {
    uint64_t v6 = v5[3] + a3;
  }
  else
  {
    char v5 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,unsigned long long &>(v4, v10, v10, &v9);
    if (v7) {
      return 0;
    }
    uint64_t v6 = v9;
  }
  v5[3] = v6;
  return 0;
}

void *MDDictionaryUIntUIntRemoveAllValues(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 16);

  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::clear(v1);
}

uint64_t MDDictionaryUIntUIntIterateValues(uint64_t result, uint64_t a2)
{
  for (uint64_t i = *(void **)(result + 32); i; uint64_t i = (void *)*i)
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(a2 + 16))(a2, i[2], i[3]);
  return result;
}

double __MDDictionaryUIntUIntInit(_OWORD *a1)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *((_DWORD *)a1 + 12) = 1065353216;
  return result;
}

uint64_t __MDDictionaryUIntUIntFinalize(char *a1)
{
  uint64_t v1 = a1 + 16;

  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::~__hash_table((uint64_t)v1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::~__hash_table(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::unordered_map<unsigned long long,unsigned long long>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,unsigned long long> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_6;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_6:
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      double v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *double v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            double v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          double v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,unsigned long long> const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = *a2;
      if (v5 >= v6) {
        unint64_t v8 = v5 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v5)
        {
          if (i[2] == v5) {
            return i;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6) {
              v11 %= v6;
            }
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v5;
  *((_OWORD *)i + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v14 = 1;
    if (v6 >= 3) {
      BOOL v14 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v6);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__rehash<true>(a1, v17);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v8 = v5 % v6;
      }
      else {
        unint64_t v8 = v5;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
  }
  uint64_t v18 = *(void *)a1;
  unsigned int v19 = *(void **)(*(void *)a1 + 8 * v8);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *unsigned int v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v8) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6) {
        v20 %= v6;
      }
    }
    else
    {
      v20 &= v6 - 1;
    }
    unsigned int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::clear((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint8x8_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint8x8_t v7 = 0;
    v7[1] = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    double result = (void *)result[2];
    if (result)
    {
      do
      {
        int v2 = (void *)*result;
        operator delete(result);
        double result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  double result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  void *v6;
  void *result;
  unint64_t v8;

  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  double result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,unsigned long long &>(uint64_t a1, unint64_t *a2, void *a3, uint64_t *a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = *a2;
      if (v7 >= v8) {
        unint64_t v10 = v7 % v8;
      }
    }
    else
    {
      unint64_t v10 = (v8 - 1) & v7;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v10);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  uint64_t v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v10 = v7 % v8;
      }
      else {
        unint64_t v10 = v7;
      }
    }
    else
    {
      unint64_t v10 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v10);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v10) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

BOOL _MDPlistBytesAppendPlist(uint64_t a1, const __CFString *a2)
{
  return _MDPlistBytesBeginPlist(a1)
      && __MDPlistBytesAddObject(a1, a2)
      && _MDPlistBytesEndPlist(a1);
}

_MDPlistBytes *_MDPlistBytesCreate(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a2)
  {
    unint64_t v7 = [_MDPlistBytes alloc];
    if (a4) {
      unint64_t v8 = &__block_literal_global_108;
    }
    else {
      unint64_t v8 = 0;
    }
    uint8x8_t v9 = [(_MDPlistBytes *)v7 initWithByteVector:a2 count:a3 trusted:0 deallocator:v8];
    unint64_t v10 = v9;
    if (v9) {
      CFRetain(v9);
    }

    return v10;
  }
  else
  {
    if (qword_1E95CA390 != -1) {
      dispatch_once(&qword_1E95CA390, &__block_literal_global_128);
    }
    unint64_t v12 = (const void *)qword_1E95CA388;
    return (_MDPlistBytes *)CFRetain(v12);
  }
}

uint64_t __MDPlistBytesAddObject(uint64_t a1, const __CFString *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (qword_1E95CA320 != -1) {
    dispatch_once(&qword_1E95CA320, &__block_literal_global_85);
  }
  if (!a2) {
    a2 = (const __CFString *)*MEMORY[0x1E4F1D260];
  }
  CFTypeID v4 = CFGetTypeID(a2);
  if (v4 == qword_1E95CA328)
  {
    return _MDPlistBytesAddString(a1, a2);
  }
  if (v4 == qword_1E95CA330)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
    uint64_t result = _MDPlistBytesBeginContainer(a1, 10);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        while (!(_BYTE)result)
        {
          uint64_t result = 0;
          if (Count == ++i) {
            goto LABEL_15;
          }
        }
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
        uint64_t result = __MDPlistBytesAddObject(a1, ValueAtIndex) != 0;
      }
    }
LABEL_15:
    if (!result) {
      return result;
    }
    return _MDPlistBytesEndContainer(a1);
  }
  if (v4 == qword_1E95CA338)
  {
    double context = *(double *)&a1;
    BOOL v25 = _MDPlistBytesBeginContainer(a1, 13);
    CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)dictionaryApplier, &context);
    if (v25) {
      return _MDPlistBytesEndContainer(a1);
    }
    return 0;
  }
  if (v4 == qword_1E95CA340)
  {
    uint64_t v9 = CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    return _MDPlistBytesAddBoolean(a1, v9);
  }
  if (v4 == qword_1E95CA348)
  {
    double v10 = MEMORY[0x1A6246220](a2);
    uint64_t result = _MDPlistBytesAddRLETagRoom(a1, 0x86u, 1u);
    if (!result) {
      return result;
    }
    goto LABEL_27;
  }
  if (v4 == qword_1E95CA350)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)a2);
    size_t Length = CFDataGetLength((CFDataRef)a2);
    return _MDPlistBytesAddData(a1, BytePtr, Length);
  }
  if (v4 == qword_1E95CA358)
  {
    while (!*(_WORD *)(a1 + 32) && (*(unsigned char *)(a1 + 34) & 1) != 0)
    {
      if (*(int *)(a1 + 88) >= 1)
      {
        return _MDPlistBytesAddRLETagRoom(a1, 0, 0);
      }
      unint64_t v15 = *(void *)(a1 + 112);
      if (v15 + 8 < *(void *)(a1 + 120)) {
        goto LABEL_40;
      }
      if (_MDPlistBytesGrowCapacityVM(a1, 8u, 0))
      {
        unint64_t v15 = *(void *)(a1 + 112);
LABEL_40:
        uint64_t v16 = *MEMORY[0x1E4F14B00];
        uint64_t v17 = -*MEMORY[0x1E4F14B00];
        if ((((v15 + 8) ^ v15) & v17) != 0 && (((v15 + 8) >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
        {
          size_t v18 = 16 << *MEMORY[0x1E4F14AF8];
          if (v18 >= 4 * v16)
          {
            madvise((void *)((v16 - 1 + v15) & v17), v18, 3);
            unint64_t v15 = *(void *)(a1 + 112);
          }
        }
        *(void *)unint64_t v15 = 0x100000001;
        unint64_t v12 = (void *)(v15 + 8);
        goto LABEL_28;
      }
    }
    return 0;
  }
  if (v4 == qword_1E95CA360)
  {
    if (!CFNumberIsFloatType((CFNumberRef)a2))
    {
      double context = 0.0;
      CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt64Type, &context);
      double v20 = context;
      uint64_t result = _MDPlistBytesAddRLETagRoom(a1, 0x84u, 1u);
      if (!result) {
        return result;
      }
      uint64_t v21 = *(void **)(a1 + 112);
      *(double *)uint64_t v21 = v20;
      unint64_t v12 = v21 + 1;
LABEL_28:
      *(void *)(a1 + 112) = v12;
      return 1;
    }
    double context = 0.0;
    CFNumberGetValue((CFNumberRef)a2, kCFNumberFloat64Type, &context);
    double v10 = context;
    uint64_t result = _MDPlistBytesAddRLETagRoom(a1, 0x85u, 1u);
    if (!result) {
      return result;
    }
LABEL_27:
    unint64_t v11 = *(double **)(a1 + 112);
    *unint64_t v11 = v10;
    unint64_t v12 = v11 + 1;
    goto LABEL_28;
  }
  if (v4 == qword_1E95CA368)
  {
    CFUUIDBytes v19 = CFUUIDGetUUIDBytes((CFUUIDRef)a2);
    return _MDPlistBytesAddUUID(a1, *(uint64_t *)&v19.byte0, *(uint64_t *)&v19.byte8);
  }
  else if (v4 == qword_1E95CA370)
  {
    return __MDPlistBytesAddURL(a1, (const __CFURL *)a2);
  }
  else if (v4 == qword_1E95CA378)
  {
    return _MDPlistBytesAddPlistBytes(a1, (uint64_t)a2);
  }
  else if (v4 == qword_1E95CA380)
  {
    return _MDPlistBytesAddStoreOIDArray(a1, (uint64_t)a2);
  }
  else
  {
    uint64_t v22 = v4;
    unint64_t v23 = _MDLogForCategoryDefault();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      __MDPlistBytesAddObject_cold_1((uint64_t)a2, v22);
    }
    return _MDPlistBytesAddRLETagRoom(a1, 0, 0);
  }
}

__CFString *_MDPlistBytesCopyPlistAtIndexWithCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8 = *MEMORY[0x1E4F1CF80];

  return _MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator(v8, a1, a2, a3, a4);
}

uint64_t _MDPlistEnumerateQueryResults(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [a1 enumerateQueryResults:a2 attributeSize:a3 stringCache:a4 usingBlock:a5];
}

uint64_t _MDPlistBytesGetTypeID()
{
  if (qword_1E95CA310 != -1) {
    dispatch_once(&qword_1E95CA310, &__block_literal_global_12);
  }
  return qword_1E95CA318;
}

__CFString *__MDPlistBytesCopyDebugDescription(uint64_t a1)
{
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 52 * gMDPlistBytesDebugDescriptionDumpMaxLines + 52);
  unint64_t v3 = Mutable;
  if (gMDPlistBytesDebugDescriptionDumpMaxLines <= 0) {
    CFTypeID v4 = "";
  }
  else {
    CFTypeID v4 = "[";
  }
  CFStringAppendFormat(Mutable, 0, @"<_MDPlistBytes: %p>%s", a1, v4);
  if (gMDPlistBytesDebugDescriptionDumpMaxLines >= 1)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 16) >> 3;
    signed int v36 = v5;
    if (v5 <= gMDPlistBytesDebugDescriptionDumpMaxLines) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = (gMDPlistBytesDebugDescriptionDumpMaxLines - 1);
    }
    int v37 = v6;
    if (v6)
    {
      unint64_t v7 = (char *)(*(void *)(a1 + 8) + 3);
      int v8 = 0xFFFFFF;
      uint64_t v9 = MEMORY[0x1E4F14390];
      uint64_t v10 = v6;
      do
      {
        CFStringAppendFormat(v3, 0, @"\n    0x%016llx, // [0x%06x] - |", *(void *)(v7 - 3), v8 & 0xFFFFFF);
        unsigned int v13 = *(v7 - 3);
        if ((v13 & 0x80000000) != 0) {
          int v14 = __maskrune(*(v7 - 3), 0x40000uLL);
        }
        else {
          int v14 = *(_DWORD *)(v9 + 4 * v13 + 60) & 0x40000;
        }
        if (v14) {
          uint64_t v15 = v13;
        }
        else {
          uint64_t v15 = 46;
        }
        CFStringAppendFormat(v3, 0, @"%c", v15);
        unsigned int v16 = *(v7 - 2);
        if ((v16 & 0x80000000) != 0) {
          int v17 = __maskrune(*(v7 - 2), 0x40000uLL);
        }
        else {
          int v17 = *(_DWORD *)(v9 + 4 * v16 + 60) & 0x40000;
        }
        if (v17) {
          uint64_t v18 = v16;
        }
        else {
          uint64_t v18 = 46;
        }
        CFStringAppendFormat(v3, 0, @"%c", v18);
        unsigned int v19 = *(v7 - 1);
        if ((v19 & 0x80000000) != 0) {
          int v20 = __maskrune(*(v7 - 1), 0x40000uLL);
        }
        else {
          int v20 = *(_DWORD *)(v9 + 4 * v19 + 60) & 0x40000;
        }
        if (v20) {
          uint64_t v21 = v19;
        }
        else {
          uint64_t v21 = 46;
        }
        CFStringAppendFormat(v3, 0, @"%c", v21);
        unsigned int v22 = *v7;
        if ((v22 & 0x80000000) != 0) {
          int v23 = __maskrune(*v7, 0x40000uLL);
        }
        else {
          int v23 = *(_DWORD *)(v9 + 4 * v22 + 60) & 0x40000;
        }
        if (v23) {
          uint64_t v24 = v22;
        }
        else {
          uint64_t v24 = 46;
        }
        CFStringAppendFormat(v3, 0, @"%c", v24);
        unsigned int v25 = v7[1];
        if ((v25 & 0x80000000) != 0) {
          int v26 = __maskrune(v7[1], 0x40000uLL);
        }
        else {
          int v26 = *(_DWORD *)(v9 + 4 * v25 + 60) & 0x40000;
        }
        if (v26) {
          uint64_t v27 = v25;
        }
        else {
          uint64_t v27 = 46;
        }
        CFStringAppendFormat(v3, 0, @"%c", v27);
        unsigned int v28 = v7[2];
        if ((v28 & 0x80000000) != 0) {
          int v29 = __maskrune(v7[2], 0x40000uLL);
        }
        else {
          int v29 = *(_DWORD *)(v9 + 4 * v28 + 60) & 0x40000;
        }
        if (v29) {
          uint64_t v30 = v28;
        }
        else {
          uint64_t v30 = 46;
        }
        CFStringAppendFormat(v3, 0, @"%c", v30);
        unsigned int v31 = v7[3];
        if ((v31 & 0x80000000) != 0) {
          int v32 = __maskrune(v7[3], 0x40000uLL);
        }
        else {
          int v32 = *(_DWORD *)(v9 + 4 * v31 + 60) & 0x40000;
        }
        if (v32) {
          uint64_t v33 = v31;
        }
        else {
          uint64_t v33 = 46;
        }
        CFStringAppendFormat(v3, 0, @"%c", v33);
        unsigned int v34 = v7[4];
        if ((v34 & 0x80000000) != 0) {
          int v11 = __maskrune(v7[4], 0x40000uLL);
        }
        else {
          int v11 = *(_DWORD *)(v9 + 4 * v34 + 60) & 0x40000;
        }
        if (v11) {
          uint64_t v12 = v34;
        }
        else {
          uint64_t v12 = 46;
        }
        CFStringAppendFormat(v3, 0, @"%c", v12);
        CFStringAppendCString(v3, "|", 0x600u);
        ++v8;
        v7 += 8;
        --v10;
      }
      while (v10);
    }
    if (v36 > v37) {
      CFStringAppendFormat(v3, 0, @"\n    // ... %i more lines suppressed ...", (v36 - v37));
    }
    CFStringAppendCString(v3, "\n]", 0x600u);
  }
  return v3;
}

uint64_t _MDPlistBytesGetByteVector(uint64_t result)
{
  if (result)
  {
    if (*(_WORD *)(result + 32)) {
      return 0;
    }
    else {
      return *(void *)(result + 8);
    }
  }
  return result;
}

_MDPlistBytes *_MDPlistBytesCreateWithDeallocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    CFTypeID v4 = [[_MDPlistBytes alloc] initWithByteVector:a2 count:a3 trusted:0 deallocator:a4];
    unsigned int v5 = v4;
    if (v4) {
      CFRetain(v4);
    }

    return v5;
  }
  else
  {
    if (qword_1E95CA3A0 != -1) {
      dispatch_once(&qword_1E95CA3A0, &__block_literal_global_130);
    }
    unint64_t v7 = (const void *)qword_1E95CA398;
    return (_MDPlistBytes *)CFRetain(v7);
  }
}

_MDPlistBytes *_MDPlistBytesCreateTrustedWithDeallocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    CFTypeID v4 = [[_MDPlistBytes alloc] initWithByteVector:a2 count:a3 trusted:1 deallocator:a4];
    unsigned int v5 = v4;
    if (v4) {
      CFRetain(v4);
    }

    return v5;
  }
  else
  {
    if (qword_1E95CA3A0 != -1) {
      dispatch_once(&qword_1E95CA3A0, &__block_literal_global_130);
    }
    unint64_t v7 = (const void *)qword_1E95CA398;
    return (_MDPlistBytes *)CFRetain(v7);
  }
}

BOOL _MDPlistBytesValidate(uint64_t a1)
{
  return __MDPlistBytesValidate(a1);
}

BOOL __MDPlistBytesValidate(uint64_t a1)
{
  *(void *)&v24[5] = *MEMORY[0x1E4F143B8];
  int8x8_t v2 = (unint64_t *)(*(void *)(a1 + 8) + 8);
  *(void *)(a1 + 48) = v2;
  int v3 = *(_DWORD *)(a1 + 16) >> 3;
  do
  {
    unint64_t v4 = *v2;
    v3 += ~*(_DWORD *)v2;
    if (v3 < 0) {
      break;
    }
    unint64_t v5 = HIDWORD(v4);
    if (SHIDWORD(v4) >= (int)v4 || SHIDWORD(v4) < 2)
    {
      __int16 v7 = 472;
    }
    else
    {
      unint64_t v8 = v2[v5];
      if ((v8 & 0xFF000000) == 0x88000000)
      {
        int v9 = v8 & 0xFFFFFF;
        if ((v8 & 0xFFFFFF) + HIDWORD(v4) == v4)
        {
          unsigned int v22 = &v2[v5];
          CFDictionaryRef Mutable = CFSetCreateMutable(0, 0, 0);
          uint64_t v11 = *(void *)(a1 + 48);
          unsigned int v12 = 1;
          do
          {
            int v13 = *(void *)(v11 + 8 * v12) & 0xFFFFFF;
            if (!v13) {
              break;
            }
            CFSetAddValue(Mutable, (const void *)v12);
            uint64_t v11 = *(void *)(a1 + 48);
            uint64_t v14 = *(void *)(v11 + 8 * v12);
            if ((v14 & 0xFF000000) == 0x2000000)
            {
              __int16 v15 = 500;
              if (v14 < 0 || v9 <= SHIDWORD(v14)) {
                goto LABEL_44;
              }
            }
            v12 += v13;
          }
          while ((int)v12 < SHIDWORD(v4));
          if (v12 == HIDWORD(v4))
          {
            if (v9 >= 2)
            {
              for (unint64_t i = (v8 & 0xFFFFFF) - 1; i != 0 && i < 0xFFFFFFFFFFFFFFFELL; --i)
              {
                unint64_t v18 = v22[i];
                if (BYTE3(v18) < 3u || (v18 & 0xFF000000) == -2013265920)
                {
                  __int16 v15 = 521;
                  goto LABEL_44;
                }
                if ((int)(v18 & 0xFFFFFF) < SHIDWORD(v4))
                {
                  if (!CFSetContainsValue(Mutable, (const void *)(v18 & 0xFFFFFF)))
                  {
                    __int16 v15 = 532;
                    goto LABEL_44;
                  }
                }
                else
                {
                  if (HIDWORD(v18)) {
                    BOOL v20 = 0;
                  }
                  else {
                    BOOL v20 = (int)(v18 & 0xFFFFFF) <= SHIDWORD(v4);
                  }
                  if (!v20)
                  {
                    __int16 v15 = 538;
                    goto LABEL_44;
                  }
                }
              }
            }
            CFRelease(Mutable);
            goto LABEL_23;
          }
          __int16 v15 = 508;
LABEL_44:
          *(_WORD *)(a1 + 32) = v15;
          if (Mutable)
          {
            CFRelease(Mutable);
            if (!*(_WORD *)(a1 + 32))
            {
              __int16 v7 = 549;
              goto LABEL_20;
            }
          }
          goto LABEL_21;
        }
        __int16 v7 = 485;
      }
      else
      {
        __int16 v7 = 479;
      }
    }
LABEL_20:
    *(_WORD *)(a1 + 32) = v7;
LABEL_21:
    unsigned int v16 = _MDLogForCategoryDefault();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      __MDPlistBytesValidate_cold_1(buf, v24, v16);
    }
LABEL_23:
    if (v3 < 1) {
      return *(_WORD *)(a1 + 32) == 0;
    }
    int8x8_t v2 = (unint64_t *)(*(void *)(a1 + 48) + 8 * (int)v4 + 8);
    *(void *)(a1 + 48) = v2;
  }
  while ((unint64_t)v2 - *(void *)(a1 + 8) < (unint64_t)*(unsigned int *)(a1 + 16) - 8
       && !*(_WORD *)(a1 + 32));
  BOOL result = 0;
  *(_WORD *)(a1 + 32) = 573;
  return result;
}

BOOL __MDPlistBytesWriteToFile(uint64_t a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v9 = nosymlink_open(a2, a3, a3, a4, a5, a6, a7, a8, a4);
  if (v9 < 0) {
    return 0;
  }
  int v10 = v9;
  if (a1 && !*(_WORD *)(a1 + 32))
  {
    size_t v11 = *(unsigned int *)(a1 + 16);
    unsigned int v12 = *(const void **)(a1 + 8);
  }
  else
  {
    size_t v11 = 0;
    unsigned int v12 = 0;
  }
  ssize_t v14 = write(v9, v12, v11);
  int v15 = close(v10);
  return v14 == v11 && v15 == 0;
}

__CFString *_MDPlistBytesCopyPlistAtIndexWithAllocator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator(a1, a2, a3, (uint64_t)&_kMDPlistBytesDeserializationCallbacks, 0);
}

__CFString *_MDPlistBytesCopyPlistAtIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F1CF80];

  return _MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator(v4, a1, a2, (uint64_t)&_kMDPlistBytesDeserializationCallbacks, 0);
}

unsigned char *_MDPlistBytesCopyPlistBytesAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __dst[1] = *(void **)MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a2 + 32)) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  if (v4 <= 0xF)
  {
    int v3 = 0;
    *(void *)(a2 + 48) = 0;
    return v3;
  }
  int v5 = (v4 >> 3) - 2;
  uint64_t v6 = (_DWORD *)(*(void *)(a2 + 8) + 8);
  *(void *)(a2 + 48) = v6;
  uint64_t v7 = a3 + 1;
  while (--v7 >= 1)
  {
    unsigned int v8 = *v6 + 1;
    BOOL v9 = *v6 < 0x7FFFFFFFu;
    BOOL v10 = __OFSUB__(v5, v8);
    v5 -= v8;
    if ((v5 < 0) ^ v10 | (v5 == 0)) {
      int v11 = 0;
    }
    else {
      int v11 = 1;
    }
    v6 += 2 * v8;
    int v12 = v9 & v11;
    if (v12) {
      int v13 = v6;
    }
    else {
      int v13 = 0;
    }
    *(void *)(a2 + 48) = v13;
    if ((v12 & 1) == 0)
    {
      uint64_t v6 = 0;
      break;
    }
  }
  if (!v6) {
    return 0;
  }
  unsigned int v16 = *v6;
  int v15 = v6 - 2;
  unsigned int v14 = v16;
  if (((v16 >> 25) & 0xF) > 6) {
    return 0;
  }
  size_t v17 = 8 * v14 + 8;
  if (v17 >= 0x800 && (*(unsigned char *)(a2 + 34) & 8) == 0)
  {
    __dst[0] = 0;
    int v3 = 0;
    if (!_fast_vm_allocate(__dst, v17, -251658239))
    {
      if (v17 >= 4 * *MEMORY[0x1E4F14B00]) {
        madvise(__dst[0], v17, 3);
      }
      memcpy(__dst[0], v15, v17);
      if (__dst[0])
      {
        unsigned int v22 = [[_MDPlistBytes alloc] initWithByteVector:__dst[0] count:v17 trusted:0 deallocator:&__block_literal_global_108];
        int v3 = v22;
        if (v22) {
          CFRetain(v22);
        }
      }
      else
      {
        if (qword_1E95CA390 != -1) {
          dispatch_once(&qword_1E95CA390, &__block_literal_global_128);
        }
        return CFRetain((CFTypeRef)qword_1E95CA388);
      }
    }
  }
  else
  {
    unsigned int v19 = malloc_type_valloc(v17, 0x63925250uLL);
    BOOL v20 = v19;
    if (v17 >= 4 * *MEMORY[0x1E4F14B00]) {
      madvise(v19, v17, 3);
    }
    memcpy(v20, v15, v17);
    if (v20)
    {
      uint64_t v21 = [[_MDPlistBytes alloc] initWithByteVector:v20 count:v17 trusted:0 deallocator:&__block_literal_global_108];
      int v3 = v21;
      if (v21) {
        CFRetain(v21);
      }
    }
    else
    {
      if (qword_1E95CA390 != -1) {
        dispatch_once(&qword_1E95CA390, &__block_literal_global_128);
      }
      int v3 = CFRetain((CFTypeRef)qword_1E95CA388);
    }
    v3[34] |= 8u;
  }
  return v3;
}

uint64_t _MDPlistBytesSetShouldUseMalloc(uint64_t result, char a2)
{
  *(unsigned char *)(result + 34) = *(unsigned char *)(result + 34) & 0xF7 | (8 * (a2 & 1));
  return result;
}

void *_MDPlistBytesSetShouldDeallocate(uint64_t a1, int a2)
{
  if (a2) {
    BOOL result = &__block_literal_global_108;
  }
  else {
    BOOL result = 0;
  }
  *(void *)(a1 + 24) = result;
  return result;
}

BOOL _MDPlistBytesBeginDictionary(uint64_t a1)
{
  return _MDPlistBytesBeginContainer(a1, 13);
}

BOOL _MDPlistBytesEndDictionary(uint64_t a1)
{
  return _MDPlistBytesEndContainer(a1);
}

_MDMutablePlistBytes *_MDPlistBytesCreateMutableUsingMalloc(uint64_t a1, unsigned int a2)
{
  int8x8_t v2 = [[_MDMutablePlistBytes alloc] initWithCapacity:a2 useMalloc:1];
  if (!v2) {
    _MDPlistBytesCreateMutableUsingMalloc_cold_1();
  }
  int v3 = v2;
  CFRetain(v2);

  return v3;
}

_MDMutablePlistBytes *_MDPlistBytesCreateMutableUsingMallocWithZone(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3 = [[_MDMutablePlistBytes alloc] initWithCapacity:a2 useMalloc:1 zone:a3];
  if (!v3) {
    _MDPlistBytesCreateMutableUsingMallocWithZone_cold_1();
  }
  unsigned int v4 = v3;
  CFRetain(v3);

  return v4;
}

_MDMutablePlistBytes *_MDPlistBytesCreateMutableCopy(uint64_t a1, int a2, uint64_t a3)
{
  if (a3 && !*(_WORD *)(a3 + 32)) {
    int v4 = *(_DWORD *)(a3 + 16);
  }
  else {
    int v4 = 0;
  }
  int v5 = [[_MDMutablePlistBytes alloc] initWithCapacity:(v4 + a2) useMalloc:0];
  if (!v5) {
    +[_MDPlistBytes createPlistBytes:]();
  }
  uint64_t v6 = v5;
  CFRetain(v5);

  if (v4 && !_MDPlistBytesAppendPlistBytes((uint64_t)v6, a3))
  {
    CFRelease(v6);
    return 0;
  }
  return v6;
}

BOOL _MDPlistBytesAppendPlistBytes(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    while (!*(_WORD *)(a1 + 32) && (*(unsigned char *)(a1 + 34) & 1) != 0)
    {
      if (*(_DWORD *)(a1 + 80) != -1) {
        goto LABEL_27;
      }
      if (*(_WORD *)(a2 + 32)) {
        unsigned int v4 = 0;
      }
      else {
        unsigned int v4 = *(_DWORD *)(a2 + 16);
      }
      size_t v5 = v4;
      unint64_t v6 = (unint64_t)v4 >> 3;
      if (*(void *)(a1 + 112) + 8 * v6 < *(void *)(a1 + 120) || _MDPlistBytesGrowCapacityVM(a1, v4 & 0xFFFFFFF8, 0)) {
        goto LABEL_17;
      }
    }
  }
  else
  {
    while (!*(_WORD *)(a1 + 32) && (*(unsigned char *)(a1 + 34) & 1) != 0)
    {
      if (*(_DWORD *)(a1 + 80) != -1)
      {
LABEL_27:
        *(_WORD *)(a1 + 32) = 2823;
        int v15 = _MDLogForCategoryDefault();
        BOOL result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
        if (result)
        {
          _MDPlistBytesAppendPlistBytes_cold_1();
          return 0;
        }
        return result;
      }
      if (*(void *)(a1 + 112) < *(void *)(a1 + 120) || _MDPlistBytesGrowCapacityVM(a1, 0, 0))
      {
        size_t v5 = 0;
        unint64_t v6 = 0;
LABEL_17:
        uint64_t v7 = *(void *)(a1 + 112);
        unint64_t v8 = v7 + 8 * v6;
        BOOL v9 = (uint64_t *)MEMORY[0x1E4F14B00];
        uint64_t v10 = *MEMORY[0x1E4F14B00];
        uint64_t v11 = -*MEMORY[0x1E4F14B00];
        if (((v8 ^ v7) & v11) != 0 && ((v8 >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
        {
          size_t v12 = 16 << *MEMORY[0x1E4F14AF8];
          if (v12 >= 4 * v10)
          {
            madvise((void *)((v10 - 1 + v7) & v11), v12, 3);
            uint64_t v10 = *v9;
          }
        }
        if (v5 >= 4 * v10) {
          madvise(*(void **)(a1 + 112), v5, 3);
        }
        if (a2 && !*(_WORD *)(a2 + 32)) {
          int v13 = *(const void **)(a2 + 8);
        }
        else {
          int v13 = 0;
        }
        memcpy(*(void **)(a1 + 112), v13, v5);
        uint64_t v16 = *(void *)(a1 + 112) + 8 * v6;
        *(void *)(a1 + 112) = v16;
        *(_DWORD *)(a1 + 16) = v16 - *(_DWORD *)(a1 + 8);
        return 1;
      }
    }
  }
  return 0;
}

BOOL __MDPlistBytesReadFromFile(uint64_t a1, char *a2, off_t *a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!*(_WORD *)(a1 + 32))
  {
    while (1)
    {
      if ((*(unsigned char *)(a1 + 34) & 1) == 0) {
        return 0;
      }
      if (*(_DWORD *)(a1 + 80) != -1) {
        break;
      }
      int v13 = nosymlink_open(a2, 0, (int)a3, a4, a5, a6, a7, a8, 0);
      if (v13 < 0) {
        return 0;
      }
      int v14 = v13;
      if (a3) {
        off_t v15 = *a3;
      }
      else {
        off_t v15 = 0;
      }
      memset(&v25, 0, sizeof(v25));
      if (md_fstat_real(v13, &v25) == -1)
      {
LABEL_19:
        BOOL v8 = 0;
        goto LABEL_32;
      }
      unsigned int v16 = LODWORD(v25.st_size) - v15;
      if ((LODWORD(v25.st_size) - v15 - 16) > 0x6FFFFFF0 || (v16 & 7) != 0) {
        goto LABEL_31;
      }
      if (v15 >= 1 && lseek(v14, v15, 0) != v15) {
        goto LABEL_19;
      }
      unint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = v16 >> 3;
      if (v17 + 8 * v18 < *(void *)(a1 + 120)) {
        goto LABEL_23;
      }
      if (_MDPlistBytesGrowCapacityVM(a1, v16 & 0xFFFFFFF8, 0))
      {
        unint64_t v17 = *(void *)(a1 + 112);
LABEL_23:
        unint64_t v20 = v17 + 8 * v18;
        uint64_t v21 = *MEMORY[0x1E4F14B00];
        uint64_t v22 = -*MEMORY[0x1E4F14B00];
        if (((v20 ^ v17) & v22) != 0)
        {
          int v23 = *MEMORY[0x1E4F14AF8];
          if (((v20 >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0 && 16 << v23 >= (unint64_t)(4 * v21))
          {
            madvise((void *)((v21 - 1 + v17) & v22), 16 << v23, 3);
            unint64_t v17 = *(void *)(a1 + 112);
          }
        }
        if (read(v14, (void *)v17, v16) == v16)
        {
          uint64_t v24 = *(void *)(a1 + 112) + 8 * v18;
          *(void *)(a1 + 112) = v24;
          *(_DWORD *)(a1 + 16) = v24 - *(_DWORD *)(a1 + 8);
          _maybeSwapPlistBytes(a1, 0);
          BOOL v8 = *(_WORD *)(a1 + 32) == 0;
          if (a3 && !*(_WORD *)(a1 + 32))
          {
            *a3 += v16;
            BOOL v8 = 1;
          }
        }
        else
        {
LABEL_31:
          BOOL v8 = 0;
          *(_WORD *)(a1 + 32) = 2283;
        }
LABEL_32:
        close(v14);
        return v8;
      }
      if (*(_WORD *)(a1 + 32)) {
        return 0;
      }
    }
    *(_WORD *)(a1 + 32) = 2250;
    unsigned int v19 = _MDLogForCategoryDefault();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      __MDPlistBytesReadFromFile_cold_1();
    }
  }
  return 0;
}

void __MDPlistBytesError(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!*(_WORD *)(a1 + 32))
  {
    *(_WORD *)(a1 + 32) = a4;
    uint64_t v7 = _MDLogForCategoryDefault();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315650;
      uint64_t v9 = a2;
      __int16 v10 = 2080;
      uint64_t v11 = a3;
      __int16 v12 = 2048;
      uint64_t v13 = a1;
      _os_log_error_impl(&dword_1A334F000, v7, OS_LOG_TYPE_ERROR, "%s: %s error -- <_MDPlistBytes: %p> marked bad", (uint8_t *)&v8, 0x20u);
    }
  }
}

BOOL _MDPlistBytesAddData(uint64_t a1, const void *a2, size_t __n)
{
  if (!*(_WORD *)(a1 + 32))
  {
    size_t v6 = 8 * (__n != 0);
    if ((__n & 7) != 0) {
      size_t v6 = __n & 7;
    }
    size_t v7 = v6 << 32;
    int v8 = ((int)__n + 7) >> 3;
    int v31 = v8 + 1;
    unsigned int v9 = 8 * (v8 + 1);
    size_t v32 = v7;
    int v33 = __n + 7;
    uint64_t v34 = (uint64_t)((int)__n + 7) >> 3;
    uint64_t v10 = v8;
    uint64_t v11 = v7 | 0xB000000;
    do
    {
      if ((*(unsigned char *)(a1 + 34) & 1) == 0) {
        return 0;
      }
      if (*(int *)(a1 + 88) <= 0)
      {
        *(_WORD *)(a1 + 32) = 2454;
        uint64_t v30 = _MDLogForCategoryDefault();
        BOOL result = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        _MDPlistBytesAddData_cold_1();
        return 0;
      }
      uint64_t v13 = *(unsigned int *)(a1 + 64);
      int v12 = *(_DWORD *)(a1 + 68);
      if (v12 == v13)
      {
        if (!_MDPlistBytesGrowUIDTable(a1, v12)) {
          continue;
        }
        uint64_t v13 = *(unsigned int *)(a1 + 64);
      }
      *(_DWORD *)(a1 + 64) = v13 + 1;
      if (v13 == -1) {
        _MDPlistBytesAddData_cold_2();
      }
      uint64_t v14 = *(uint64_t **)(a1 + 112);
      if ((unint64_t)(v14 + 1) >= *(void *)(a1 + 120))
      {
        if (!_MDPlistBytesGrowCapacityVM(a1, 8u, 0)) {
          continue;
        }
        uint64_t v14 = *(uint64_t **)(a1 + 112);
      }
      uint64_t v15 = *MEMORY[0x1E4F14B00];
      uint64_t v16 = -*MEMORY[0x1E4F14B00];
      if ((((unint64_t)(v14 + 1) ^ (unint64_t)v14) & v16) != 0
        && (((unint64_t)(v14 + 1) >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
      {
        size_t v17 = 16 << *MEMORY[0x1E4F14AF8];
        if (v17 >= 4 * v15)
        {
          madvise((void *)(((unint64_t)v14 + v15 - 1) & v16), v17, 3);
          uint64_t v14 = *(uint64_t **)(a1 + 112);
        }
      }
      *uint64_t v14 = (v13 << 32) | 0x2000001;
      uint64_t v18 = v14 + 1;
      *(void *)(a1 + 112) = v18;
      unsigned int v19 = *(uint64_t **)(a1 + 56);
      v19[(int)v13] = ((unint64_t)(v18 - *(_DWORD *)(a1 + 48)) >> 3) & 0xFFFFFF | v11;
      uint64_t v20 = *v19 + 1;
      *(_DWORD *)(a1 + 80) = v13;
      uint64_t v21 = *(void *)(a1 + 96);
      uint64_t v22 = *(int *)(a1 + 88);
      *unsigned int v19 = v20;
      uint64_t v23 = *(int *)(v21 + 4 * v22 - 4);
      v19[v23] += 0x100000000;
      uint64_t v24 = *(size_t **)(a1 + 112);
      if ((unint64_t)&v24[v10 + 1] < *(void *)(a1 + 120)) {
        goto LABEL_24;
      }
      if (_MDPlistBytesGrowCapacityVM(a1, v9, 0))
      {
        uint64_t v24 = *(size_t **)(a1 + 112);
LABEL_24:
        unint64_t v25 = (unint64_t)&v24[v10 + 1];
        uint64_t v26 = *MEMORY[0x1E4F14B00];
        uint64_t v27 = -*MEMORY[0x1E4F14B00];
        if (((v25 ^ (unint64_t)v24) & v27) != 0 && ((v25 >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
        {
          size_t v28 = 16 << *MEMORY[0x1E4F14AF8];
          if (v28 >= 4 * v26)
          {
            madvise((void *)(((unint64_t)v24 + v26 - 1) & v27), v28, 3);
            uint64_t v24 = *(size_t **)(a1 + 112);
          }
        }
        *uint64_t v24 = v32 | v31 & 0xFFFFFF | 0x7000000;
        int v29 = v24 + 1;
        *(void *)(a1 + 112) = v29;
        if (v33 >= 8) {
          v29[(v34 - 1)] = 0;
        }
        if (__n >= 4 * *MEMORY[0x1E4F14B00])
        {
          madvise(v29, __n, 3);
          int v29 = *(void **)(a1 + 112);
        }
        memcpy(v29, a2, __n);
        *(void *)(a1 + 112) += 8 * v34;
        return 1;
      }
    }
    while (!*(_WORD *)(a1 + 32));
  }
  return 0;
}

uint64_t _MDPlistBytesAddString(uint64_t a1, CFStringRef theString)
{
  usedBufLen[1] = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a1 + 32) || (*(unsigned char *)(a1 + 34) & 1) == 0) {
    return 0;
  }
  if (*(int *)(a1 + 88) <= 0)
  {
    *(_WORD *)(a1 + 32) = 2496;
    size_t v7 = _MDLogForCategoryDefault();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      _MDPlistBytesAddString_cold_1();
      return 0;
    }
    return 0;
  }
  CFIndex Length = CFStringGetLength(theString);
  CFStringEncoding FastestEncoding = CFStringGetFastestEncoding(theString);
  uint64_t v10 = 0;
  usedBufLen[0] = 0;
  if (FastestEncoding == 256 || FastestEncoding == 335544576 || FastestEncoding == 268435712)
  {
    v12.CFIndex location = 0;
    v12.length = Length;
    CFStringGetBytes(theString, v12, 0x100u, 0x20u, 1u, 0, 0, usedBufLen);
    if (addStringBytes(a1, 28, (const void **)&v10, usedBufLen[0]))
    {
      uint64_t v6 = 1;
      v13.CFIndex location = 0;
      v13.length = Length;
      CFStringGetBytes(theString, v13, 0x100u, 0x20u, 1u, v10, usedBufLen[0], usedBufLen);
      return v6;
    }
    if (!*(_WORD *)(a1 + 32))
    {
      *(_WORD *)(a1 + 32) = 2517;
      int v8 = _MDLogForCategoryDefault();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        _MDPlistBytesAddString_cold_2();
        return 0;
      }
    }
    return 0;
  }
  v14.CFIndex location = 0;
  v14.length = Length;
  CFStringGetBytes(theString, v14, 0x8000100u, 0x20u, 1u, 0, 0, usedBufLen);
  if (addStringBytes(a1, 12, (const void **)&v10, usedBufLen[0]))
  {
    uint64_t v6 = 1;
    v15.CFIndex location = 0;
    v15.length = Length;
    CFStringGetBytes(theString, v15, 0x8000100u, 0x20u, 1u, v10, usedBufLen[0], usedBufLen);
  }
  else
  {
    __MDPlistBytesError(a1, (uint64_t)"_MDPlistBytesAddString", (uint64_t)"Encoding", 2540);
    return 0;
  }
  return v6;
}

BOOL _MDPlistBytesAddInternedCString(uint64_t a1, void *key, int a3)
{
  keya[1] = *(void **)MEMORY[0x1E4F143B8];
  keya[0] = key;
  while (1)
  {
    if (*(_WORD *)(a1 + 32) || (*(unsigned char *)(a1 + 34) & 1) == 0) {
      return 0;
    }
    if (*(int *)(a1 + 88) <= 0)
    {
      *(_WORD *)(a1 + 32) = 2578;
      CFRange v13 = _MDLogForCategoryDefault();
      BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if (result)
      {
        _MDPlistBytesAddInternedCString_cold_1();
        return 0;
      }
      return result;
    }
    CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 104), key);
    if (!Value) {
      break;
    }
    size_t v7 = Value;
    uint64_t v8 = 8 * *(int *)(*(void *)(a1 + 96) + 4 * *(int *)(a1 + 88) - 4);
    *(void *)(*(void *)(a1 + 56) + v8) += 0x100000000;
    unsigned int v9 = *(uint64_t **)(a1 + 112);
    if ((unint64_t)(v9 + 1) < *(void *)(a1 + 120)) {
      goto LABEL_9;
    }
    if (_MDPlistBytesGrowCapacityVM(a1, 8u, 0))
    {
      unsigned int v9 = *(uint64_t **)(a1 + 112);
LABEL_9:
      uint64_t v10 = *MEMORY[0x1E4F14B00];
      uint64_t v11 = -*MEMORY[0x1E4F14B00];
      if ((((unint64_t)(v9 + 1) ^ (unint64_t)v9) & v11) != 0
        && (((unint64_t)(v9 + 1) >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
      {
        size_t v12 = 16 << *MEMORY[0x1E4F14AF8];
        if (v12 >= 4 * v10)
        {
          madvise((void *)(((unint64_t)v9 + v10 - 1) & v11), v12, 3);
          unsigned int v9 = *(uint64_t **)(a1 + 112);
        }
      }
      *unsigned int v9 = ((void)v7 << 32) | 0x2000001;
      *(void *)(a1 + 112) = v9 + 1;
      return 1;
    }
  }
  if (a3 == -1)
  {
    int v16 = strlen((const char *)key);
    int v15 = addStringBytes(a1, 12, (const void **)keya, v16);
    if (v15) {
      goto LABEL_18;
    }
  }
  else
  {
    int v15 = addStringBytes(a1, 12, (const void **)keya, a3);
    if (v15)
    {
LABEL_18:
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 104), keya[0], (const void *)v15);
      return 1;
    }
  }
  if (*(_WORD *)(a1 + 32)) {
    return 0;
  }
  *(_WORD *)(a1 + 32) = 2586;
  size_t v17 = _MDLogForCategoryDefault();
  BOOL result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _MDPlistBytesAddInternedCString_cold_2();
    return 0;
  }
  return result;
}

BOOL __MDPlistBytesAddUInt64Array(uint64_t a1, uint64_t a2, const void *a3)
{
  if (!*(_WORD *)(a1 + 32))
  {
    size_t v5 = 8 * a2;
    int v26 = ((8 * (int)a2) >> 3) + 1;
    uint64_t v28 = (uint64_t)(8 * (int)a2) >> 3;
    uint64_t v6 = (8 * (int)a2) >> 3;
    unint64_t v27 = (unint64_t)(8 * a2 != 0) << 35;
    do
    {
      if ((*(unsigned char *)(a1 + 34) & 1) == 0) {
        return 0;
      }
      if (*(int *)(a1 + 88) <= 0)
      {
        *(_WORD *)(a1 + 32) = 2697;
        unint64_t v25 = _MDLogForCategoryDefault();
        BOOL result = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        __MDPlistBytesAddUInt64Array_cold_1();
        return 0;
      }
      uint64_t v8 = *(unsigned int *)(a1 + 64);
      int v7 = *(_DWORD *)(a1 + 68);
      if (v7 == v8)
      {
        if (!_MDPlistBytesGrowUIDTable(a1, v7)) {
          continue;
        }
        uint64_t v8 = *(unsigned int *)(a1 + 64);
      }
      *(_DWORD *)(a1 + 64) = v8 + 1;
      if (v8 == -1) {
        __MDPlistBytesAddUInt64Array_cold_2();
      }
      unsigned int v9 = *(uint64_t **)(a1 + 112);
      if ((unint64_t)(v9 + 1) >= *(void *)(a1 + 120))
      {
        if (!_MDPlistBytesGrowCapacityVM(a1, 8u, 0)) {
          continue;
        }
        unsigned int v9 = *(uint64_t **)(a1 + 112);
      }
      uint64_t v10 = *MEMORY[0x1E4F14B00];
      uint64_t v11 = -*MEMORY[0x1E4F14B00];
      if ((((unint64_t)(v9 + 1) ^ (unint64_t)v9) & v11) != 0
        && (((unint64_t)(v9 + 1) >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
      {
        size_t v12 = 16 << *MEMORY[0x1E4F14AF8];
        if (v12 >= 4 * v10)
        {
          madvise((void *)(((unint64_t)v9 + v10 - 1) & v11), v12, 3);
          unsigned int v9 = *(uint64_t **)(a1 + 112);
        }
      }
      *unsigned int v9 = (v8 << 32) | 0x2000001;
      CFRange v13 = v9 + 1;
      *(void *)(a1 + 112) = v13;
      CFRange v14 = *(uint64_t **)(a1 + 56);
      v14[(int)v8] = ((unint64_t)(v13 - *(_DWORD *)(a1 + 48)) >> 3) & 0xFFFFFF | v27 | 0xB000000;
      uint64_t v15 = *v14 + 1;
      *(_DWORD *)(a1 + 80) = v8;
      uint64_t v16 = *(void *)(a1 + 96);
      uint64_t v17 = *(int *)(a1 + 88);
      *CFRange v14 = v15;
      uint64_t v18 = *(int *)(v16 + 4 * v17 - 4);
      v14[v18] += 0x100000000;
      unsigned int v19 = *(unint64_t **)(a1 + 112);
      if ((unint64_t)&v19[v6 + 1] < *(void *)(a1 + 120)) {
        goto LABEL_22;
      }
      if (_MDPlistBytesGrowCapacityVM(a1, 8 * v26, 0))
      {
        unsigned int v19 = *(unint64_t **)(a1 + 112);
LABEL_22:
        unint64_t v20 = (unint64_t)&v19[v6 + 1];
        uint64_t v21 = *MEMORY[0x1E4F14B00];
        uint64_t v22 = -*MEMORY[0x1E4F14B00];
        if (((v20 ^ (unint64_t)v19) & v22) != 0 && ((v20 >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
        {
          size_t v23 = 16 << *MEMORY[0x1E4F14AF8];
          if (v23 >= 4 * v21)
          {
            madvise((void *)(((unint64_t)v19 + v21 - 1) & v22), v23, 3);
            unsigned int v19 = *(unint64_t **)(a1 + 112);
          }
        }
        *unsigned int v19 = v27 | v26 & 0xFFFFFF | 0x7000000;
        uint64_t v24 = v19 + 1;
        *(void *)(a1 + 112) = v24;
        if ((int)v5 >= 1) {
          v24[(v28 - 1)] = 0;
        }
        memcpy(v24, a3, v5);
        *(void *)(a1 + 112) += 8 * v28;
        return 1;
      }
    }
    while (!*(_WORD *)(a1 + 32));
  }
  return 0;
}

BOOL _MDPlistBytesAddUUID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = _MDPlistBytesAddRLETagRoom(a1, 0xEu, 2u);
  if (result)
  {
    int v7 = *(void **)(a1 + 112);
    *int v7 = a2;
    v7[1] = a3;
    *(void *)(a1 + 112) += 16;
    return 1;
  }
  return result;
}

uint64_t __MDPlistBytesAddURL(uint64_t a1, const __CFURL *a2)
{
  if (*(_WORD *)(a1 + 32) || (*(unsigned char *)(a1 + 34) & 1) == 0) {
    return 0;
  }
  CFURLRef v4 = CFURLGetBaseURL(a2);
  if (v4)
  {
    uint64_t result = _MDPlistBytesBeginContainer(a1, 17);
    if (!result) {
      return result;
    }
    uint64_t result = __MDPlistBytesAddURL(a1, v4);
    if (!result) {
      return result;
    }
  }
  CFDataRef v6 = CFURLCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u, 0);
  __src = CFDataGetBytePtr(v6);
  CFIndex Length = CFDataGetLength(v6);
  size_t v8 = Length;
  if ((Length & 7) != 0) {
    uint64_t v9 = Length & 7;
  }
  else {
    uint64_t v9 = 8 * (Length != 0);
  }
  uint64_t v11 = *(unsigned int *)(a1 + 64);
  int v10 = *(_DWORD *)(a1 + 68);
  if (v10 == v11)
  {
    if (!_MDPlistBytesGrowUIDTable(a1, v10)) {
      goto LABEL_34;
    }
    uint64_t v11 = *(unsigned int *)(a1 + 64);
  }
  *(_DWORD *)(a1 + 64) = v11 + 1;
  if (v11 == -1) {
    __MDPlistBytesAddURL_cold_2();
  }
  size_t v12 = *(uint64_t **)(a1 + 112);
  if ((unint64_t)(v12 + 1) >= *(void *)(a1 + 120))
  {
    if (!_MDPlistBytesGrowCapacityVM(a1, 8u, 0)) {
      goto LABEL_34;
    }
    size_t v12 = *(uint64_t **)(a1 + 112);
  }
  CFRange v13 = (uint64_t *)MEMORY[0x1E4F14B00];
  uint64_t v14 = *MEMORY[0x1E4F14B00];
  uint64_t v15 = -*MEMORY[0x1E4F14B00];
  uint64_t v16 = (_DWORD *)MEMORY[0x1E4F14AF8];
  if ((((unint64_t)(v12 + 1) ^ (unint64_t)v12) & v15) != 0
    && (((unint64_t)(v12 + 1) >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
  {
    size_t v17 = 16 << *MEMORY[0x1E4F14AF8];
    if (v17 >= 4 * v14)
    {
      uint64_t v18 = (_DWORD *)MEMORY[0x1E4F14AF8];
      madvise((void *)(((unint64_t)v12 + v14 - 1) & v15), v17, 3);
      uint64_t v16 = v18;
      size_t v12 = *(uint64_t **)(a1 + 112);
    }
  }
  *size_t v12 = (v11 << 32) | 0x2000001;
  unsigned int v19 = v12 + 1;
  *(void *)(a1 + 112) = v19;
  uint64_t v20 = v9 << 32;
  uint64_t v21 = *(uint64_t **)(a1 + 56);
  v21[(int)v11] = (v9 << 32) | ((unint64_t)(v19 - *(_DWORD *)(a1 + 48)) >> 3) & 0xFFFFFF | 0x10000000;
  uint64_t v22 = *v21 + 1;
  *(_DWORD *)(a1 + 80) = v11;
  uint64_t v23 = *(void *)(a1 + 96);
  uint64_t v24 = *(int *)(a1 + 88);
  *uint64_t v21 = v22;
  uint64_t v25 = *(int *)(v23 + 4 * v24 - 4);
  v21[v25] += 0x100000000;
  int v26 = v8 + 7;
  int v27 = (((int)v8 + 7) >> 3) + 1;
  uint64_t v28 = *(uint64_t **)(a1 + 112);
  uint64_t v29 = ((int)v8 + 7) >> 3;
  if ((unint64_t)&v28[v29 + 1] >= *(void *)(a1 + 120))
  {
    uint64_t v30 = v16;
    if (_MDPlistBytesGrowCapacityVM(a1, 8 * v27, 0))
    {
      uint64_t v28 = *(uint64_t **)(a1 + 112);
      uint64_t v16 = v30;
      goto LABEL_23;
    }
LABEL_34:
    if (!*(_WORD *)(a1 + 32))
    {
      *(_WORD *)(a1 + 32) = 2772;
      int v37 = _MDLogForCategoryDefault();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
        __MDPlistBytesAddURL_cold_1();
      }
    }
    CFRelease(v6);
    return 0;
  }
LABEL_23:
  unint64_t v31 = (unint64_t)&v28[v29 + 1];
  uint64_t v32 = *v13;
  uint64_t v33 = -*v13;
  if (((v31 ^ (unint64_t)v28) & v33) != 0 && ((v31 >> *v16) & 0xF) == 0)
  {
    size_t v34 = 16 << *v16;
    if (v34 >= 4 * v32)
    {
      madvise((void *)(((unint64_t)v28 + v32 - 1) & v33), v34, 3);
      uint64_t v28 = *(uint64_t **)(a1 + 112);
    }
  }
  uint64_t v35 = (uint64_t)v26 >> 3;
  *uint64_t v28 = v20 | v27 & 0xFFFFFF | 0x7000000;
  signed int v36 = v28 + 1;
  *(void *)(a1 + 112) = v36;
  if (v26 >= 8) {
    v36[(v35 - 1)] = 0;
  }
  memcpy(v36, __src, v8);
  *(void *)(a1 + 112) += 8 * v35;
  if (!*(_DWORD *)(a1 + 80)) {
    goto LABEL_34;
  }
  CFRelease(v6);
  if (!v4) {
    return 1;
  }

  return _MDPlistBytesEndContainer(a1);
}

BOOL _MDPlistBytesAddStoreOIDArray(uint64_t a1, uint64_t a2)
{
  while (!*(_WORD *)(a1 + 32))
  {
    if ((*(unsigned char *)(a1 + 34) & 1) == 0) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 80) == -1)
    {
      *(_WORD *)(a1 + 32) = 2786;
      int v27 = _MDLogForCategoryDefault();
      BOOL result = os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _MDPlistBytesAddStoreOIDArray_cold_1();
      return 0;
    }
    VectorCFIndex Count = _MDStoreOIDArrayGetVectorCount(a2);
    uint64_t v7 = *(unsigned int *)(a1 + 64);
    int v6 = *(_DWORD *)(a1 + 68);
    if (v6 == v7)
    {
      if (!_MDPlistBytesGrowUIDTable(a1, v6)) {
        continue;
      }
      uint64_t v7 = *(unsigned int *)(a1 + 64);
    }
    *(_DWORD *)(a1 + 64) = v7 + 1;
    if (v7 == -1) {
      _MDPlistBytesAddStoreOIDArray_cold_2();
    }
    size_t v8 = *(uint64_t **)(a1 + 112);
    if ((unint64_t)(v8 + 1) >= *(void *)(a1 + 120))
    {
      if (!_MDPlistBytesGrowCapacityVM(a1, 8u, 0)) {
        continue;
      }
      size_t v8 = *(uint64_t **)(a1 + 112);
    }
    uint64_t v9 = *MEMORY[0x1E4F14B00];
    uint64_t v10 = -*MEMORY[0x1E4F14B00];
    if ((((unint64_t)(v8 + 1) ^ (unint64_t)v8) & v10) != 0
      && (((unint64_t)(v8 + 1) >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
    {
      size_t v11 = 16 << *MEMORY[0x1E4F14AF8];
      if (v11 >= 4 * v9)
      {
        madvise((void *)(((unint64_t)v8 + v9 - 1) & v10), v11, 3);
        size_t v8 = *(uint64_t **)(a1 + 112);
      }
    }
    *size_t v8 = (v7 << 32) | 0x2000001;
    size_t v12 = v8 + 1;
    *(void *)(a1 + 112) = v12;
    unint64_t v13 = (VectorCount << 32) | ((unint64_t)(v12 - *(_DWORD *)(a1 + 48)) >> 3) & 0xFFFFFF | 0x1A000000;
    uint64_t v14 = *(void **)(a1 + 56);
    v14[(int)v7] = v13;
    ++*v14;
    *(_DWORD *)(a1 + 80) = v7;
    LODWORD(v13) = *(_DWORD *)(a1 + 88);
    BOOL v15 = __OFSUB__(v13, 1);
    int v16 = v13 - 1;
    if (v16 < 0 == v15)
    {
      uint64_t v17 = *(int *)(*(void *)(a1 + 96) + 4 * v16);
      v14[v17] += 0x100000000;
    }
    int v18 = VectorCount + 1;
    unsigned int v19 = *(uint64_t **)(a1 + 112);
    unint64_t v20 = 8 * (int)VectorCount;
    if ((unint64_t)&v19[v20 / 8 + 1] < *(void *)(a1 + 120)) {
      goto LABEL_24;
    }
    if (_MDPlistBytesGrowCapacityVM(a1, 8 * v18, 0))
    {
      unsigned int v19 = *(uint64_t **)(a1 + 112);
LABEL_24:
      unint64_t v21 = (unint64_t)&v19[v20 / 8 + 1];
      uint64_t v22 = *MEMORY[0x1E4F14B00];
      uint64_t v23 = -*MEMORY[0x1E4F14B00];
      if (((v21 ^ (unint64_t)v19) & v23) != 0 && ((v21 >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
      {
        size_t v24 = 16 << *MEMORY[0x1E4F14AF8];
        if (v24 >= 4 * v22)
        {
          madvise((void *)(((unint64_t)v19 + v22 - 1) & v23), v24, 3);
          unsigned int v19 = *(uint64_t **)(a1 + 112);
          uint64_t v22 = *MEMORY[0x1E4F14B00];
        }
      }
      *unsigned int v19 = v18 & 0xFFFFFF | 0x887000000;
      uint64_t v25 = v19 + 1;
      *(void *)(a1 + 112) = v25;
      if (v20 >= 4 * v22)
      {
        madvise(v25, 8 * (int)VectorCount, 3);
        uint64_t v25 = *(void **)(a1 + 112);
      }
      Vector = (const void *)_MDStoreOIDArrayGetVector(a2);
      memcpy(v25, Vector, 8 * (int)VectorCount);
      *(void *)(a1 + 112) += 8 * (int)VectorCount;
      return 1;
    }
  }
  return 0;
}

BOOL _MDPlistBytesAddPlistBytes(uint64_t a1, uint64_t a2)
{
  while (!*(_WORD *)(a1 + 32))
  {
    if ((*(unsigned char *)(a1 + 34) & 1) == 0) {
      return 0;
    }
    if (*(int *)(a1 + 88) <= 0)
    {
      *(_WORD *)(a1 + 32) = 2804;
      int v27 = _MDLogForCategoryDefault();
      BOOL result = os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _MDPlistBytesAddPlistBytes_cold_1();
      return 0;
    }
    if (a2 && !*(_WORD *)(a2 + 32))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 16);
      uint64_t v7 = *(unsigned int *)(a1 + 64);
      int v6 = *(_DWORD *)(a1 + 68);
      if (v6 != v7)
      {
LABEL_11:
        *(_DWORD *)(a1 + 64) = v7 + 1;
        if (v7 == -1) {
          goto LABEL_41;
        }
        goto LABEL_16;
      }
    }
    else
    {
      unsigned int v5 = 0;
      uint64_t v7 = *(unsigned int *)(a1 + 64);
      int v6 = *(_DWORD *)(a1 + 68);
      if (v6 != v7) {
        goto LABEL_11;
      }
    }
    if (!_MDPlistBytesGrowUIDTable(a1, v6)) {
      continue;
    }
    uint64_t v7 = *(unsigned int *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v7 + 1;
    if (v7 == -1) {
LABEL_41:
    }
      _MDPlistBytesAddPlistBytes_cold_2();
LABEL_16:
    size_t v8 = *(uint64_t **)(a1 + 112);
    if ((unint64_t)(v8 + 1) >= *(void *)(a1 + 120))
    {
      if (!_MDPlistBytesGrowCapacityVM(a1, 8u, 0)) {
        continue;
      }
      size_t v8 = *(uint64_t **)(a1 + 112);
    }
    uint64_t v9 = *MEMORY[0x1E4F14B00];
    uint64_t v10 = -*MEMORY[0x1E4F14B00];
    if ((((unint64_t)(v8 + 1) ^ (unint64_t)v8) & v10) != 0
      && (((unint64_t)(v8 + 1) >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
    {
      size_t v11 = 16 << *MEMORY[0x1E4F14AF8];
      if (v11 >= 4 * v9)
      {
        madvise((void *)(((unint64_t)v8 + v9 - 1) & v10), v11, 3);
        size_t v8 = *(uint64_t **)(a1 + 112);
      }
    }
    uint64_t v12 = v5 >> 3;
    *size_t v8 = (v7 << 32) | 0x2000001;
    unint64_t v13 = v8 + 1;
    *(void *)(a1 + 112) = v13;
    unint64_t v14 = (v12 << 32) | ((unint64_t)(v13 - *(_DWORD *)(a1 + 48)) >> 3) & 0xFFFFFF | 0x1B000000;
    BOOL v15 = *(void **)(a1 + 56);
    v15[(int)v7] = v14;
    ++*v15;
    *(_DWORD *)(a1 + 80) = v7;
    LODWORD(v14) = *(_DWORD *)(a1 + 88);
    BOOL v16 = __OFSUB__(v14, 1);
    int v17 = v14 - 1;
    if (v17 < 0 == v16)
    {
      uint64_t v18 = *(int *)(*(void *)(a1 + 96) + 4 * v17);
      v15[v18] += 0x100000000;
    }
    int v19 = v12 + 1;
    unint64_t v20 = *(uint64_t **)(a1 + 112);
    if ((unint64_t)&v20[v12 + 1] < *(void *)(a1 + 120)) {
      goto LABEL_28;
    }
    if (_MDPlistBytesGrowCapacityVM(a1, 8 * v19, 0))
    {
      unint64_t v20 = *(uint64_t **)(a1 + 112);
LABEL_28:
      unint64_t v21 = (unint64_t)&v20[v12 + 1];
      uint64_t v22 = *MEMORY[0x1E4F14B00];
      uint64_t v23 = -*MEMORY[0x1E4F14B00];
      if (((v21 ^ (unint64_t)v20) & v23) != 0 && ((v21 >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
      {
        size_t v24 = 16 << *MEMORY[0x1E4F14AF8];
        if (v24 >= 4 * v22)
        {
          madvise((void *)(((unint64_t)v20 + v22 - 1) & v23), v24, 3);
          unint64_t v20 = *(uint64_t **)(a1 + 112);
          uint64_t v22 = *MEMORY[0x1E4F14B00];
        }
      }
      uint64_t *v20 = v19 & 0xFFFFFF | 0x807000000;
      uint64_t v25 = v20 + 1;
      *(void *)(a1 + 112) = v25;
      if (v5 >= (unint64_t)(4 * v22))
      {
        madvise(v25, v5, 3);
        uint64_t v25 = *(void **)(a1 + 112);
      }
      if (a2 && !*(_WORD *)(a2 + 32)) {
        int v26 = *(const void **)(a2 + 8);
      }
      else {
        int v26 = 0;
      }
      memcpy(v25, v26, v5);
      *(void *)(a1 + 112) += 8 * v12;
      return 1;
    }
  }
  return 0;
}

void dictionaryApplier(const __CFString *a1, uint64_t a2, uint64_t *a3)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  if (CFGetTypeID(a1) == qword_1E95CA328)
  {
    CFIndex Length = CFStringGetLength(a1);
    CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
    if (CStringPtr)
    {
      size_t v8 = (char *)CStringPtr;
      int v9 = 0;
    }
    else
    {
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      size_t v15 = MaximumSizeForEncoding + 20;
      if (MaximumSizeForEncoding + 20 > 4095)
      {
        size_t v8 = (char *)malloc_type_malloc(MaximumSizeForEncoding + 20, 0x11100B14uLL);
        int v9 = 1;
      }
      else
      {
        MEMORY[0x1F4188790](v14, MaximumSizeForEncoding, v11, v12, v13);
        size_t v8 = (char *)v17 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v8, v15);
        int v9 = 0;
      }
      if (!CFStringGetCString(a1, v8, v15, 0x8000100u)) {
        strlcpy(v8, "<Bad UTF-8 string>", v15);
      }
    }
    int v16 = *((unsigned __int8 *)a3 + 8);
    if (*((unsigned char *)a3 + 8)) {
      int v16 = _MDPlistBytesAddCString(*a3, v8, -1);
    }
    *((unsigned char *)a3 + 8) = v16;
    if (v9)
    {
      free(v8);
      int v16 = *((unsigned __int8 *)a3 + 8);
    }
    if (v16) {
      LOBYTE(v16) = __MDPlistBytesAddObject(*a3, a2) != 0;
    }
    *((unsigned char *)a3 + 8) = v16;
  }
}

BOOL __MDPlistBytesAppendChunk(uint64_t a1, uint64_t a2)
{
  do
  {
    if (*(_WORD *)(a1 + 32) || (*(unsigned char *)(a1 + 34) & 1) == 0) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 80) != -1)
    {
      *(_WORD *)(a1 + 32) = 3058;
      uint64_t v13 = _MDLogForCategoryDefault();
      BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      __MDPlistBytesAppendChunk_cold_1();
      return 0;
    }
    size_t v4 = *(void *)a2;
    unint64_t v5 = *(void *)(a1 + 112);
    if (v5 + 8 * (*(void *)a2 >> 3) < *(void *)(a1 + 120)) {
      goto LABEL_7;
    }
  }
  while (!_MDPlistBytesGrowCapacityVM(a1, v4 & 0xFFFFFFF8, 0));
  unint64_t v5 = *(void *)(a1 + 112);
LABEL_7:
  uint64_t v6 = (v4 >> 3);
  unint64_t v7 = v5 + 8 * v6;
  uint64_t v8 = *MEMORY[0x1E4F14B00];
  uint64_t v9 = -*MEMORY[0x1E4F14B00];
  if (((v7 ^ v5) & v9) != 0 && ((v7 >> *MEMORY[0x1E4F14AF8]) & 0xF) == 0)
  {
    size_t v10 = 16 << *MEMORY[0x1E4F14AF8];
    if (v10 >= 4 * v8)
    {
      madvise((void *)((v8 - 1 + v5) & v9), v10, 3);
      unint64_t v5 = *(void *)(a1 + 112);
    }
  }
  memcpy((void *)v5, *(const void **)(a2 + 8), *(void *)a2);
  uint64_t v11 = *(void *)(a1 + 112) + 8 * v6;
  *(void *)(a1 + 112) = v11;
  *(_DWORD *)(a1 + 16) = v11 - *(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a2 + 16)) {
    _maybeSwapPlistBytes(a1, 0);
  }
  return 1;
}

uint64_t __MDPlistBytesFirstChunk@<X0>(uint64_t result@<X0>, int a2@<W1>, unint64_t *a3@<X8>)
{
  a3[1] = *(void *)(result + 8);
  a3[2] = 0;
  if (*(_WORD *)(result + 32))
  {
    unint64_t v3 = 0;
    char v4 = 1;
  }
  else
  {
    unint64_t v3 = a2 & 0xFFFFFFF8;
    if (v3 < *(unsigned int *)(result + 16))
    {
      char v4 = 0;
    }
    else
    {
      unint64_t v3 = *(unsigned int *)(result + 16);
      char v4 = 1;
    }
  }
  *a3 = v3;
  *((unsigned char *)a3 + 16) = v4;
  return result;
}

uint64_t __MDPlistBytesNextChunk(uint64_t a1, uint64_t *a2)
{
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t result = 0;
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1] + *a2;
    a2[1] = v4;
    uint64_t v5 = *(void *)(a1 + 8) - v4 + *(unsigned int *)(a1 + 16);
    uint64_t result = 1;
    if (v5 <= v3)
    {
      *a2 = v5;
      *((unsigned char *)a2 + 16) = 1;
    }
  }
  return result;
}

CFArrayRef copyArray(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  HIDWORD(v18) = *a3;
  unint64_t v8 = (a2 >> 32) & ~(a2 >> 63);
  if (v8 < 0x21)
  {
    MEMORY[0x1F4188790]();
    uint64_t v9 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v9, v10);
    if (a2 <= 0xFFFFFFFFLL) {
      goto LABEL_6;
    }
  }
  else
  {
    if (!(v8 >> 28))
    {
      uint64_t v9 = (char *)malloc_type_zone_malloc(*(malloc_zone_t **)(a1 + 144), 8 * v8, 0x7BA9AC21uLL);
      if (a2 > 0xFFFFFFFFLL) {
        goto LABEL_8;
      }
LABEL_6:
      CFArrayRef v11 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v9, v8, MEMORY[0x1E4F1D510]);
      goto LABEL_14;
    }
    uint64_t v9 = 0;
    if (a2 <= 0xFFFFFFFFLL) {
      goto LABEL_6;
    }
  }
LABEL_8:
  uint64_t v12 = 0;
  uint64_t v13 = (a4 + 1);
  if (v8 <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v8;
  }
  do
  {
    *(void *)&v9[v12] = copyObject(a1, (char *)&v18 + 4, v13);
    v12 += 8;
  }
  while (8 * v14 != v12);
  CFArrayRef v11 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v9, v8, MEMORY[0x1E4F1D510]);
  size_t v15 = (const void **)v9;
  do
  {
    int v16 = *v15++;
    CFRelease(v16);
    --v14;
  }
  while (v14);
LABEL_14:
  if (v8 > 0x20) {
    free(v9);
  }
  *a3 = HIDWORD(v18);
  if (!v11) {
    copyArray_cold_1();
  }
  return v11;
}

CFDictionaryRef copyDictionary(uint64_t a1, unint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  HIDWORD(v21) = *a3;
  unint64_t v7 = HIDWORD(a2);
  if ((a2 & 0x8000000000000000) == 0) {
    int v8 = HIDWORD(a2);
  }
  else {
    int v8 = HIDWORD(a2) + 1;
  }
  unint64_t v9 = (v8 >> 1) & ~(v8 >> 31);
  if (v9 < 0x11)
  {
    MEMORY[0x1F4188790]();
    size_t v10 = (char *)&v21 - ((8 * v9 + 15) & 0xFFFFFFFF0);
    bzero(v10, 8 * v9);
    MEMORY[0x1F4188790]();
    CFArrayRef v11 = (const void **)v10;
    bzero(v10, 8 * v9);
    if ((int)v7 <= 1) {
      goto LABEL_9;
    }
  }
  else
  {
    if (!(v9 >> 28))
    {
      size_t v10 = (char *)malloc_type_zone_malloc(*(malloc_zone_t **)(a1 + 144), 8 * v9, 0x7BA9AC21uLL);
      CFArrayRef v11 = (const void **)malloc_type_zone_malloc(*(malloc_zone_t **)(a1 + 144), 8 * v9, 0x7BA9AC21uLL);
      if ((int)v7 > 1) {
        goto LABEL_11;
      }
LABEL_9:
      CFDictionaryRef v12 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v10, v11, v9, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      goto LABEL_17;
    }
    size_t v10 = 0;
    CFArrayRef v11 = 0;
    if (SHIDWORD(a2) <= 1) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v13 = 0;
  uint64_t v14 = (a4 + 1);
  if (v9 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v9;
  }
  do
  {
    *(void *)&v10[v13 * 8] = copyObject(a1, (char *)&v21 + 4, v14);
    v11[v13++] = (const void *)copyObject(a1, (char *)&v21 + 4, v14);
  }
  while (v15 != v13);
  CFDictionaryRef v12 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v10, v11, v9, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v16 = (const void **)v10;
  int v17 = v11;
  do
  {
    uint64_t v18 = *v16++;
    CFRelease(v18);
    uint64_t v19 = *v17++;
    CFRelease(v19);
    --v15;
  }
  while (v15);
LABEL_17:
  if (v9 > 0x10)
  {
    free(v10);
    free(v11);
  }
  *a3 = HIDWORD(v21);
  if (!v12) {
    copyDictionary_cold_1();
  }
  return v12;
}

void OUTLINED_FUNCTION_1_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void OUTLINED_FUNCTION_4_0(unsigned int *a1@<X8>)
{
  *a1 = v1 | 0xC0DE0000;
  abort();
}

void OUTLINED_FUNCTION_5(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void __MDSetKeywordsDictionary(uint64_t a1)
{
  v1[5] = *MEMORY[0x1E4F143B8];
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ____MDSetKeywordsDictionary_block_invoke;
  v1[3] = &__block_descriptor_tmp_10;
  v1[4] = a1;
  if (__MDSetKeywordsDictionary_onceToken != -1) {
    dispatch_once(&__MDSetKeywordsDictionary_onceToken, v1);
  }
}

void __MDSetKeywordsToNamesDictionary(uint64_t a1)
{
  v1[5] = *MEMORY[0x1E4F143B8];
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ____MDSetKeywordsToNamesDictionary_block_invoke;
  v1[3] = &__block_descriptor_tmp_1;
  v1[4] = a1;
  if (__MDSetKeywordsToNamesDictionary_onceToken != -1) {
    dispatch_once(&__MDSetKeywordsToNamesDictionary_onceToken, v1);
  }
}

void __MDSetFieldPairToMaxWordCountDictionary(uint64_t a1)
{
  v1[5] = *MEMORY[0x1E4F143B8];
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ____MDSetFieldPairToMaxWordCountDictionary_block_invoke;
  v1[3] = &__block_descriptor_tmp_2;
  v1[4] = a1;
  if (__MDSetFieldPairToMaxWordCountDictionary_onceToken != -1) {
    dispatch_once(&__MDSetFieldPairToMaxWordCountDictionary_onceToken, v1);
  }
}

uint64_t TokenRetainCallback(uint64_t a1, uint64_t a2)
{
  return a2;
}

void TokenReleaseCallback(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 24) - 1;
  *(_WORD *)(a2 + 24) = v2;
  if (!v2)
  {
    TokenDestroy((int *)a2);
  }
}

CFStringRef TokenCopyDescriptionCallback(int *a1)
{
  if (!a1) {
    return @"Token: NULL\n";
  }
  uint64_t v1 = *a1;
  if (v1 > 0xA) {
    __int16 v2 = "UNKNOWN_TOKEN";
  }
  else {
    __int16 v2 = off_1E5AEF0E8[v1];
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%s %@\n", v2, *((void *)a1 + 1));
}

BOOL TokenEqualCallback(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return CFEqual(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a2 + 8));
  }
  return 0;
}

void TokenDestroy(int *a1)
{
  if (*((_WORD *)a1 + 12)) {
    TokenDestroy_cold_1();
  }
  int v2 = *a1;
  CFRelease(*((CFTypeRef *)a1 + 1));
  if (v2 == 10) {
    CFRelease(*((CFTypeRef *)a1 + 2));
  }

  free(a1);
}

const void *TokenListGetTokenAtOffset(uint64_t a1, int a2)
{
  CFIndex v4 = *(int *)(a1 + 8) + (uint64_t)a2;
  if (CFArrayGetCount(*(CFArrayRef *)a1) <= v4) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  if (v5 + a2 < 0) {
    return 0;
  }
  CFArrayRef v6 = *(const __CFArray **)a1;

  return CFArrayGetValueAtIndex(v6, (v5 + a2));
}

CFMutableStringRef mutableEscapedCopy(CFStringRef theString)
{
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theString);
  v3.length = CFStringGetLength(MutableCopy);
  v3.CFIndex location = 0;
  CFStringFindAndReplace(MutableCopy, @"\\", @"\\\\", v3, 0);
  v4.length = CFStringGetLength(MutableCopy);
  v4.CFIndex location = 0;
  CFStringFindAndReplace(MutableCopy, @"*", @"\\*", v4, 0);
  v5.length = CFStringGetLength(MutableCopy);
  v5.CFIndex location = 0;
  CFStringFindAndReplace(MutableCopy, @"\"", @"\\\"", v5, 0);
  v6.length = CFStringGetLength(MutableCopy);
  v6.CFIndex location = 0;
  CFStringFindAndReplace(MutableCopy, @"'", @"\\'", v6, 0);
  return MutableCopy;
}

void renderParseTreeToQuery(uint64_t a1, __CFString *a2, __CFString **a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v58 = 0;
  memset(v57, 0, sizeof(v57));
  if (a3) {
    CFRange v3 = a3;
  }
  else {
    CFRange v3 = (__CFString **)v57;
  }
  if (a1)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    CFRange v6 = a3;
    switch(v5)
    {
      case 0:
      case 2:
        uint64_t v9 = (__CFString **)v57;
        if (a3) {
          uint64_t v9 = a3;
        }
        *((unsigned char *)v9 + 69) = 1;
        if (*(void *)(a1 + 16))
        {
          if (*(void *)(a1 + 24))
          {
            CFStringAppend(a2, @"(");
            renderParseTreeToQuery(*(void *)(a1 + 16), a2, v3);
            if (*(_DWORD *)(a1 + 8)) {
              CFStringRef v10 = @" || ";
            }
            else {
              CFStringRef v10 = @" && ";
            }
            CFStringAppend(a2, v10);
            uint64_t v11 = *(void *)(a1 + 24);
            goto LABEL_23;
          }
          ((void (*)(void))renderParseTreeToQuery)();
        }
        uint64_t v19 = *(void *)(a1 + 24);
        if (v19) {
          goto LABEL_35;
        }
        return;
      case 1:
        CFDictionaryRef v12 = (__CFString **)v57;
        if (a3) {
          CFDictionaryRef v12 = a3;
        }
        *((unsigned char *)v12 + 69) = 1;
        if (*(void *)(a1 + 16))
        {
          CFStringAppend(a2, @"(!");
          uint64_t v11 = *(void *)(a1 + 16);
LABEL_23:
          renderParseTreeToQuery(v11, a2, v3);
          CFStringAppend(a2, @""));
        }
        return;
      case 3:
        uint64_t v13 = *(void **)(a1 + 16);
        if (!v13 || !*v13 || !*(void *)(a1 + 24)) {
          return;
        }
        uint64_t v14 = (__CFString **)v57;
        if (a3) {
          uint64_t v14 = a3;
        }
        *((unsigned char *)v14 + 69) = 1;
        CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
        reprintParseTree((uint64_t *)a1, Mutable);
        int v16 = 0;
        uint64_t v17 = _keywordsDictionary;
        uint64_t v18 = _keywordsToNamesDictionary;
        if (_keywordsDictionary && _keywordsToNamesDictionary)
        {
          int v16 = CFDictionaryGetValue((CFDictionaryRef)_keywordsDictionary, Mutable);
          value = (void *)CFDictionaryGetValue((CFDictionaryRef)_keywordsToNamesDictionary, Mutable);
          uint64_t v17 = _keywordsDictionary;
          uint64_t v18 = _keywordsToNamesDictionary;
        }
        else
        {
          value = 0;
        }
        if (v16 || !v17 || !v18) {
          goto LABEL_49;
        }
        CFRange v20 = CFStringFind(Mutable, @":", 0);
        if (v20.location == -1)
        {
          int v16 = 0;
        }
        else
        {
          uint64_t v21 = *(void *)(a1 + 24);
          if (!v21
            || (int v16 = 0, (findDatesInText(*(const __CFString **)(*(void *)v21 + 8), 0, 0, 0) & 1) == 0))
          {
            v60.length = v20.location + v20.length;
            v60.CFIndex location = 0;
            CFStringRef v22 = CFStringCreateWithSubstring(alloc, Mutable, v60);
            int v16 = CFDictionaryGetValue((CFDictionaryRef)_keywordsDictionary, v22);
            uint64_t v23 = (void *)CFDictionaryGetValue((CFDictionaryRef)_keywordsToNamesDictionary, v22);
            CFRelease(v22);
            value = v23;
            if (v23)
            {
              if (v16)
              {
LABEL_50:
                size_t v24 = (__CFString **)v57;
                if (v6) {
                  size_t v24 = v6;
                }
                if (v24[7]) {
                  CFStringAppend(a2, @"(true)");
                }
                else {
                  CFStringAppendFormat(a2, 0, @"(%@)", v16);
                }
                if (!v6) {
                  CFRange v6 = (__CFString **)v57;
                }
                if (!Mutable || !v6[3]) {
                  goto LABEL_101;
                }
                uint64_t v33 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
                size_t v34 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
                uint64_t v35 = CFDictionaryCreateMutable(alloc, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                signed int v36 = CFDictionaryCreateMutable(alloc, 0, v33, v34);
                CFDictionarySetValue(v36, @"TYPE", value);
                CFDictionarySetValue(v36, @"QUERY", v16);
                CFDictionarySetValue(v35, Mutable, v36);
                CFArrayAppendValue((CFMutableArrayRef)v6[3], v35);
                CFRelease(v36);
                int v37 = v35;
                goto LABEL_68;
              }
            }
          }
        }
        CFLog();
LABEL_49:
        if (v16) {
          goto LABEL_50;
        }
        uint64_t v25 = (__CFString **)v57;
        if (v6) {
          int v26 = v6;
        }
        else {
          int v26 = (__CFString **)v57;
        }
        CFDictionaryRef v27 = (const __CFDictionary *)v26[4];
        if (!v27)
        {
          if (v6) {
            uint64_t v25 = v6;
          }
          uint64_t v38 = (uint64_t (*)(void))v25[1];
          if (!v38 || (CFDictionaryRef v27 = (const __CFDictionary *)v38(), (v26[4] = (__CFString *)v27) == 0))
          {
            CFSetRef v29 = 0;
            goto LABEL_74;
          }
        }
        CFSetRef v28 = (const __CFSet *)CFDictionaryGetValue(v27, *(const void **)(**(void **)(a1 + 16) + 8));
        CFSetRef v29 = v28;
        if (!v28)
        {
LABEL_74:
          char v39 = 1;
          goto LABEL_76;
        }
        CFIndex Count = CFSetGetCount(v28);
        if (!Count)
        {
          char v39 = 0;
LABEL_76:
          uint64_t v40 = *(_DWORD **)(a1 + 24);
          int v41 = v40[2];
          if (v41 == 8) {
            int v42 = 1;
          }
          else {
            int v42 = 2 * (v41 == 7);
          }
          renderQueryPredicate(a2, *(const __CFString **)(*(void *)v40 + 8), *(__CFString **)(**(void **)(a1 + 16) + 8), v42, (uint64_t)v3);
          if (v39) {
            goto LABEL_101;
          }
          goto LABEL_94;
        }
        uint64_t v31 = Count;
        uint64_t v32 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
        CFSetGetValues(v29, v32);
        if (v31 < 2)
        {
          if (v31 != 1)
          {
LABEL_93:
            free(v32);
LABEL_94:
            if (v6) {
              char v49 = v6;
            }
            else {
              char v49 = (__CFString **)v57;
            }
            if (!Mutable || !v49[3] || !*(void *)(**(void **)(a1 + 16) + 8)) {
              goto LABEL_101;
            }
            unint64_t v50 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
            uint64_t v51 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
            size_t v52 = CFDictionaryCreateMutable(alloc, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            uint64_t v53 = CFDictionaryCreateMutable(alloc, 0, v50, v51);
            CFDictionarySetValue(v53, @"ATTRS", v29);
            CFDictionarySetValue(v53, @"TEXT", *(const void **)(**(void **)(a1 + 24) + 8));
            CFDictionarySetValue(v52, Mutable, v53);
            CFArrayAppendValue((CFMutableArrayRef)v49[3], v52);
            CFRelease(v53);
            int v37 = v52;
LABEL_68:
            CFRelease(v37);
LABEL_101:
            CFRelease(Mutable);
            return;
          }
        }
        else
        {
          CFStringAppend(a2, @"(");
        }
        CFSetRef valuea = v29;
        for (uint64_t i = 0; i != v31; ++i)
        {
          if (i) {
            CFStringAppend(a2, @" || ");
          }
          CFIndex Length = CFStringGetLength(a2);
          unint64_t v45 = *(_DWORD **)(a1 + 24);
          CFStringRef v46 = *(const __CFString **)(*(void *)v45 + 8);
          int v47 = v45[2];
          if (v47 == 8) {
            int v48 = 1;
          }
          else {
            int v48 = 2 * (v47 == 7);
          }
          renderQueryPredicate(a2, v46, (__CFString *)v32[i], v48, (uint64_t)v3);
          if (CFStringGetLength(a2) == Length) {
            CFStringAppend(a2, @" false ");
          }
        }
        CFSetRef v29 = valuea;
        if (v31 >= 2) {
          CFStringAppend(a2, @""));
        }
        goto LABEL_93;
      case 4:
      case 7:
      case 8:
        if (!**(_DWORD **)a1)
        {
          if (v5 == 8) {
            int v8 = 1;
          }
          else {
            int v8 = 2 * (v5 == 7);
          }
          renderQueryPredicate(a2, *(const __CFString **)(*(void *)a1 + 8), *v3, v8, (uint64_t)v3);
        }
        return;
      case 5:
        uint64_t v19 = *(void *)(a1 + 16);
LABEL_35:
        renderParseTreeToQuery(v19, a2, v3);
        return;
      default:
        return;
    }
  }
}

void renderQueryPredicate(__CFString *a1, const __CFString *a2, __CFString *theString2, int a4, uint64_t a5)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (a5 && theString2 && (CFStringRef v10 = *(const __CFString **)(a5 + 56)) != 0)
  {
    if (CFStringCompare(v10, theString2, 0))
    {
      CFStringAppend(a1, @"(true)");
      return;
    }
  }
  else if (!theString2)
  {
    CFDictionaryRef v12 = 0;
    char v13 = 1;
    goto LABEL_13;
  }
  uint64_t v11 = *(uint64_t (**)(__CFString *))(a5 + 16);
  if (v11)
  {
    CFDictionaryRef v12 = (const void *)v11(theString2);
    char v13 = 0;
  }
  else
  {
    char v13 = 0;
    CFDictionaryRef v12 = 0;
  }
LABEL_13:
  if (_keywordsDictionary) {
    BOOL v14 = _keywordsToNamesDictionary == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14 || !*(void *)(a5 + 24)) {
    goto LABEL_26;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)_keywordsDictionary, a2))
  {
    uint64_t v15 = CFDictionaryGetValue((CFDictionaryRef)_keywordsDictionary, a2);
    int v16 = CFDictionaryGetValue((CFDictionaryRef)_keywordsToNamesDictionary, a2);
    if (v15)
    {
      if (CFStringGetLength(a1)) {
        CFStringAppendCString(a1, " || ", 0x8000100u);
      }
      if (*(void *)(a5 + 56)) {
        CFStringAppend(a1, @"(true)");
      }
      else {
        CFStringAppendFormat(a1, 0, @"(%@)", v15);
      }
    }
    CFAllocatorRef v47 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v48 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    char v49 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v51 = CFDictionaryCreateMutable(v47, 0, v48, v49);
    CFDictionarySetValue(v51, @"TYPE", v16);
    CFDictionarySetValue(v51, @"QUERY", v15);
    CFDictionarySetValue(Mutable, a2, v51);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a5 + 24), Mutable);
    CFRelease(v51);
    CFRelease(Mutable);
    if (v12)
    {
      CFRelease(v12);
    }
    return;
  }
  CFRange v17 = CFStringFind(a2, @":", 0);
  if (v17.location == -1)
  {
LABEL_26:
    CFStringRef v18 = 0;
  }
  else
  {
    v78.length = v17.location + v17.length;
    v78.CFIndex location = 0;
    CFStringRef v18 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, v78);
  }
  CFAbsoluteTime at = 0.0;
  double v74 = 0.0;
  double v71 = 0.0;
  double v72 = 0.0;
  unsigned int v70 = 0;
  if (v12)
  {
    CFTypeID valuePtr = 0;
    CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v12, @"kMDAttributeType");
    CFNumberGetValue(v19, kCFNumberLongType, &valuePtr);
    CFTypeID v20 = valuePtr;
    if (v20 != CFNumberGetTypeID())
    {
      CFTypeID v21 = valuePtr;
      if (v21 != CFBooleanGetTypeID()) {
        goto LABEL_98;
      }
    }
    CFIndex Length = CFStringGetLength(@"-");
    CFIndex v23 = CFStringGetLength(a2);
    if (v23 < 1)
    {
LABEL_97:
      CFTypeID valuePtr = CFStringGetTypeID();
      goto LABEL_98;
    }
    unint64_t v24 = v23;
    int value = a4;
    int CharacterAtIndex = CFStringGetCharacterAtIndex(a2, 0);
    char v65 = v13;
    CFIndex rangeToCompare = Length;
    if ((CharacterAtIndex | 2) == 0x3E)
    {
      if (v24 < 2)
      {
        int v26 = 0;
        CFIndex v27 = 1;
      }
      else
      {
        int v26 = CFStringGetCharacterAtIndex(a2, 1);
        if (v26 == 61) {
          CFIndex v27 = 2;
        }
        else {
          CFIndex v27 = 1;
        }
      }
    }
    else
    {
      CFIndex v27 = 0;
      int v26 = 0;
    }
    int64_t v38 = v24 - v27;
    rangep.CFIndex location = v27;
    rangep.length = v24 - v27;
    NumberFormatter = (__CFNumberFormatter *)getNumberFormatter();
    if (!CFNumberFormatterGetValueFromString(NumberFormatter, a2, &rangep, kCFNumberDoubleType, &v72)) {
      goto LABEL_96;
    }
    if (!rangep.location && (CharacterAtIndex | 2) != 0x3E && v38 > rangep.length + rangeToCompare)
    {
      CFIndex v53 = rangep.length;
      rangep.CFIndex location = rangep.length + rangeToCompare;
      rangep.length = v38 - (rangep.length + rangeToCompare);
      uint64_t v54 = (__CFNumberFormatter *)getNumberFormatter();
      if (!CFNumberFormatterGetValueFromString(v54, a2, &rangep, kCFNumberDoubleType, &v71)) {
        goto LABEL_96;
      }
      v79.CFIndex location = v53;
      v79.length = rangeToCompare;
      if (CFStringCompareWithOptions(a2, @"-", v79, 0)) {
        goto LABEL_96;
      }
      unsigned int v70 = 5;
      BOOL v62 = trunc(v72) == v72;
      if (trunc(v71) != v71) {
        BOOL v62 = 0;
      }
      if (v65)
      {
        if (v62) {
          CFStringRef v63 = @"(InRange(*,%.lf,%.lf))";
        }
        else {
          CFStringRef v63 = @"(InRange(*,%lf,%lf))";
        }
        CFStringAppendFormat(a1, 0, v63, *(void *)&v72, *(void *)&v71);
      }
      else if (v62)
      {
        CFStringAppendFormat(a1, 0, @"(InRange(%@,%.lf,%.lf))", theString2, *(void *)&v72, *(void *)&v71);
      }
      else
      {
        CFStringAppendFormat(a1, 0, @"(InRange(%@,%lf,%lf))", theString2, *(void *)&v72, *(void *)&v71);
      }
      a4 = value;
LABEL_98:
      CFTypeID v55 = valuePtr;
      if (v55 != CFDateGetTypeID() || !findDatesInText(a2, &v74, &at, (int *)&v70)) {
        goto LABEL_106;
      }
      if (v70 == 4)
      {
        uint64_t v56 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], (CFCalendarIdentifier)*MEMORY[0x1E4F1D198]);
        CFTimeZoneRef v57 = CFTimeZoneCopySystem();
        CFAbsoluteTime at = v74;
        if (!CFCalendarAddComponents(v56, &at, 0, "dHM", 1, 0, 0)) {
          renderQueryPredicate_cold_2();
        }
        CFCalendarSetTimeZone(v56, v57);
        CFRelease(v57);
        CFRelease(v56);
      }
      else if (v70 != 5)
      {
        renderQueryPredicateForDate(a1, v70, (uint64_t)theString2, v74);
LABEL_106:
        CFTypeID v58 = valuePtr;
        if (v58 == CFStringGetTypeID())
        {
          if (a5)
          {
            if (*(unsigned char *)(a5 + 64)) {
              BOOL v59 = 0;
            }
            else {
              BOOL v59 = a4 < 2;
            }
            BOOL v60 = v59;
            int v61 = *(unsigned __int8 *)(a5 + 65);
          }
          else
          {
            int v61 = 0;
            BOOL v60 = a4 < 2;
          }
          renderQueryPredicateForText(a1, a2, theString2, v60, a4 > 0, v61, a5);
        }
        CFRelease(v12);
        goto LABEL_118;
      }
      renderQueryPredicateForDateRange(a1, (uint64_t)theString2, v74, at);
      goto LABEL_106;
    }
    if (rangep.length + rangep.location != v24)
    {
LABEL_96:
      a4 = value;
      goto LABEL_97;
    }
    if ((unint64_t)(rangep.location - 1) > 1) {
      goto LABEL_76;
    }
    if (CharacterAtIndex == 60)
    {
      double v40 = v72;
      BOOL v41 = trunc(v72) == v72;
      unsigned int v70 = v24 > 1 && v26 == 61;
      int v42 = @"<";
      if (v70) {
        int v42 = @"<=";
      }
      goto LABEL_77;
    }
    if (CharacterAtIndex == 62)
    {
      if (v24 >= 2 && v26 == 61)
      {
        unsigned int v70 = 3;
        double v40 = v72;
        BOOL v41 = trunc(v72) == v72;
        int v42 = @">=";
      }
      else
      {
        unsigned int v70 = 2;
        double v40 = v72;
        BOOL v41 = trunc(v72) == v72;
        int v42 = @">";
      }
    }
    else
    {
LABEL_76:
      unsigned int v70 = 4;
      double v40 = v72;
      BOOL v41 = trunc(v72) == v72;
      int v42 = @"=";
    }
LABEL_77:
    a4 = value;
    if (v65)
    {
      if (v41) {
        CFStringRef v46 = @"(* %@ %.lf)";
      }
      else {
        CFStringRef v46 = @"(* %@ %lf)";
      }
      CFStringAppendFormat(a1, 0, v46, v42, *(void *)&v40);
    }
    else
    {
      if (v41) {
        CFStringRef v52 = @"(%@ %@ %.lf)";
      }
      else {
        CFStringRef v52 = @"(%@ %@ %lf)";
      }
      CFStringAppendFormat(a1, 0, v52, theString2, v42, *(void *)&v40);
    }
    goto LABEL_98;
  }
  if (findDatesInText(a2, &v74, &at, (int *)&v70))
  {
    if (v70 == 4)
    {
      CFSetRef v28 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], (CFCalendarIdentifier)*MEMORY[0x1E4F1D198]);
      CFTimeZoneRef v29 = CFTimeZoneCopySystem();
      CFAbsoluteTime at = v74;
      if (!CFCalendarAddComponents(v28, &at, 0, "dHM", 1, 0, 0)) {
        renderQueryPredicate_cold_1();
      }
      CFCalendarSetTimeZone(v28, v29);
      CFRelease(v29);
      CFRelease(v28);
    }
    CFStringAppendCString(a1, "(", 0x8000100u);
    if ((v70 & 0xFFFFFFFE) == 4) {
      renderQueryPredicateForDateRange(a1, (uint64_t)theString2, v74, at);
    }
    else {
      renderQueryPredicateForDate(a1, v70, (uint64_t)theString2, v74);
    }
    CFStringAppendCString(a1, " || ", 0x8000100u);
    if (a5)
    {
      if (*(unsigned char *)(a5 + 64)) {
        BOOL v43 = 0;
      }
      else {
        BOOL v43 = a4 < 2;
      }
      BOOL v44 = v43;
      int v45 = *(unsigned __int8 *)(a5 + 65);
    }
    else
    {
      int v45 = 0;
      BOOL v44 = a4 < 2;
    }
    renderQueryPredicateForText(a1, a2, theString2, v44, a4 > 0, v45, a5);
    CFStringAppendCString(a1, ")", 0x8000100u);
    goto LABEL_118;
  }
  if (v18 && CFDictionaryContainsKey((CFDictionaryRef)_keywordsDictionary, v18))
  {
    CFSetRef valuea = (void *)CFDictionaryGetValue((CFDictionaryRef)_keywordsToNamesDictionary, v18);
    uint64_t v66 = (void *)CFDictionaryGetValue((CFDictionaryRef)_keywordsDictionary, v18);
    CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v31 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    uint64_t v32 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    uint64_t v33 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    size_t v34 = CFDictionaryCreateMutable(v30, 0, v31, v32);
    CFDictionarySetValue(v34, @"TYPE", valuea);
    CFDictionarySetValue(v34, @"QUERY", v66);
    CFDictionarySetValue(v33, a2, v34);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a5 + 24), v33);
    CFRelease(v34);
    CFRelease(v33);
LABEL_46:
    if (*(unsigned char *)(a5 + 64)) {
      BOOL v35 = 0;
    }
    else {
      BOOL v35 = a4 < 2;
    }
    BOOL v36 = v35;
    int v37 = *(unsigned __int8 *)(a5 + 65);
    goto LABEL_92;
  }
  if (a5) {
    goto LABEL_46;
  }
  int v37 = 0;
  BOOL v36 = a4 < 2;
LABEL_92:
  renderQueryPredicateForText(a1, a2, theString2, v36, a4 > 0, v37, a5);
LABEL_118:
  if (v18) {
    CFRelease(v18);
  }
}

void reprintParseTree(uint64_t *a1, __CFString *a2)
{
  if (a1)
  {
    CFRange v3 = a1;
    do
    {
      if (*((_DWORD *)v3 + 2) == 3)
      {
        reprintParseTree(v3[2], a2);
        if (*v3) {
          CFStringAppend(a2, *(CFStringRef *)(*v3 + 8));
        }
      }
      else
      {
        uint64_t v4 = *v3;
        if (*v3 && *(_DWORD *)v4 != 10) {
          CFStringAppend(a2, *(CFStringRef *)(v4 + 8));
        }
        reprintParseTree(v3[2], a2);
      }
      CFRange v3 = (uint64_t *)v3[3];
    }
    while (v3);
  }
}

uint64_t findDatesInText(const __CFString *a1, CFAbsoluteTime *a2, CFAbsoluteTime *a3, int *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a2) {
    CFRange v6 = a2;
  }
  else {
    CFRange v6 = (CFAbsoluteTime *)&v45;
  }
  if (a3) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = (CFAbsoluteTime *)&v44;
  }
  CFIndex Length = CFStringGetLength(@"-");
  CFIndex v9 = CFStringGetLength(a1);
  if (v9 < 1) {
    return 0;
  }
  uint64_t v10 = v9;
  int CharacterAtIndex = CFStringGetCharacterAtIndex(a1, 0);
  if ((CharacterAtIndex | 2) == 0x3E)
  {
    if ((unint64_t)v10 < 2)
    {
      int v12 = 0;
      CFIndex v13 = 1;
    }
    else
    {
      int v12 = CFStringGetCharacterAtIndex(a1, 1);
      if (v12 == 61) {
        CFIndex v13 = 2;
      }
      else {
        CFIndex v13 = 1;
      }
    }
  }
  else
  {
    int v12 = 0;
    CFIndex v13 = 0;
  }
  uint64_t v14 = v10 - v13;
  v43.CFIndex location = v13;
  v43.length = v10 - v13;
  int AbsoluteTimeFromString = GetAbsoluteTimeFromString(a1, &v43, v6);
  CFIndex location = v43.location;
  if (AbsoluteTimeFromString)
  {
    if (!v43.location && (CharacterAtIndex | 2) != 0x3E)
    {
      CFIndex v39 = v43.length;
      if (v14 > v43.length + Length)
      {
        v43.CFIndex location = v43.length + Length;
        v43.length = v14 - (v43.length + Length);
        if (GetAbsoluteTimeFromString(a1, &v43, v7))
        {
          v54.CFIndex location = v39;
          v54.length = Length;
          if (CFStringCompareWithOptions(a1, @"-", v54, 0) == kCFCompareEqualTo)
          {
            if (!a4) {
              return 1;
            }
LABEL_92:
            int v18 = 5;
            goto LABEL_57;
          }
        }
      }
    }
    if ((unint64_t)(v43.location - 1) <= 1)
    {
      if (CharacterAtIndex == 60)
      {
        if (a4)
        {
          BOOL v17 = (unint64_t)v10 > 1 && v12 == 61;
LABEL_24:
          int v18 = v17;
          goto LABEL_57;
        }
        return 1;
      }
      if (CharacterAtIndex == 62)
      {
        if (a4)
        {
          if (v12 == 61 && (unint64_t)v10 > 1) {
            int v18 = 3;
          }
          else {
            int v18 = 2;
          }
          goto LABEL_57;
        }
        return 1;
      }
    }
    if (!a4) {
      return 1;
    }
LABEL_56:
    int v18 = 4;
LABEL_57:
    *a4 = v18;
    return 1;
  }
  int v42 = v12;
  CFIndex v19 = CFStringGetLength(a1) - location;
  if (v19 != 4)
  {
    if (v19 == 9 && (CharacterAtIndex | 2) != 0x3E)
    {
      *(void *)buffer = 0;
      uint64_t v47 = 0;
      __int16 v48 = 0;
      CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
      v50.CFIndex location = location;
      v50.length = 9;
      CFStringGetCharacters(a1, v50, buffer);
      if ((unsigned __int16)v47 == 45)
      {
        unint64_t v21 = 0;
        do
        {
          int IsCharacterMember = CFCharacterSetIsCharacterMember(Predefined, buffer[v21]);
          if (v21 > 2) {
            break;
          }
          ++v21;
        }
        while (IsCharacterMember);
        if (IsCharacterMember)
        {
          unint64_t v23 = 5;
          do
          {
            int v24 = CFCharacterSetIsCharacterMember(Predefined, buffer[v23]);
            if (v23 > 7) {
              break;
            }
            ++v23;
          }
          while (v24);
          if (v24)
          {
            CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            v51.CFIndex location = location;
            v51.length = 4;
            CFStringRef v26 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, v51);
            v52.CFIndex location = location + 5;
            v52.length = 4;
            CFStringRef v27 = CFStringCreateWithSubstring(v25, a1, v52);
            IntCFDictionaryRef Value = CFStringGetIntValue(v26);
            uint64_t v29 = CFStringGetIntValue(v27);
            CFRelease(v26);
            CFRelease(v27);
            BOOL v30 = (int)IntValue < 1900 || (int)v29 <= (int)IntValue;
            if (!v30 && (int)v29 <= 2050)
            {
              pthread_mutex_lock(&myMutex);
              uint64_t v31 = (__CFCalendar *)myCalendar;
              if (!myCalendar)
              {
                uint64_t v31 = CFCalendarCopyCurrent();
                myCalendar = (uint64_t)v31;
              }
              CFCalendarComposeAbsoluteTime(v31, v6, "y", IntValue);
              CFCalendarComposeAbsoluteTime((CFCalendarRef)myCalendar, v7, "y", v29);
              pthread_mutex_unlock(&myMutex);
              int v32 = v42;
              goto LABEL_72;
            }
          }
        }
      }
    }
    return 0;
  }
  v53.CFIndex location = location;
  v53.length = 4;
  CFStringRef v35 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, v53);
  uint64_t v36 = CFStringGetIntValue(v35);
  if ((v36 - 1901) > 0x94)
  {
    CFRelease(v35);
    return 0;
  }
  uint64_t v37 = v36;
  pthread_mutex_lock(&myMutex);
  int64_t v38 = (__CFCalendar *)myCalendar;
  if (!myCalendar)
  {
    int64_t v38 = CFCalendarCopyCurrent();
    myCalendar = (uint64_t)v38;
  }
  CFCalendarComposeAbsoluteTime(v38, v6, "y", v37);
  int v32 = v42;
  if ((CharacterAtIndex | 2) == 0x3E) {
    *unint64_t v7 = *v6;
  }
  else {
    CFCalendarComposeAbsoluteTime((CFCalendarRef)myCalendar, v7, "y", (v37 + 1));
  }
  pthread_mutex_unlock(&myMutex);
  CFRelease(v35);
LABEL_72:
  if ((unint64_t)(v43.location - 1) > 1)
  {
    if (!v43.location)
    {
      if (!a4) {
        return 1;
      }
      if (*v6 != *v7) {
        goto LABEL_92;
      }
      goto LABEL_56;
    }
    return 0;
  }
  if (CharacterAtIndex == 60)
  {
    if (!a4) {
      return 1;
    }
    BOOL v17 = v10 > 1 && v32 == 61;
    goto LABEL_24;
  }
  uint64_t result = 1;
  if (a4 && CharacterAtIndex == 62)
  {
    if (v32 != 61 || v10 <= 1) {
      int v41 = 2;
    }
    else {
      int v41 = 3;
    }
    *a4 = v41;
  }
  return result;
}

void *parseUserQuery(const void *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = malloc_type_malloc(0x10uLL, 0x1060040ADAFC7CAuLL);
  *(void *)uint64_t v4 = CFRetain(a1);
  v4[2] = 0;
  v8[0] = (uint64_t)v4;
  v8[1] = a2;
  CFTypeRef cf = 0;
  int v5 = ParseSpace(v8);
  CFRange v6 = (void *)v8[0];
  CFRelease(*(CFTypeRef *)v8[0]);
  free(v6);
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

void *ParseSpace(uint64_t *a1)
{
  if (TokenListGetTokenAtOffset(*a1, 0) && *(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) == 1)
  {
    int v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
    v2[2] = 5;
    TokenAtOffset = TokenListGetTokenAtOffset(*a1, 0);
    ++TokenAtOffset[12];
    *(void *)int v2 = TokenAtOffset;
    uint64_t v4 = *a1;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(*a1 + 8) + 1;
    TokenListGetTokenAtOffset(v4, 0);
    *((void *)v2 + 2) = ParseOr(a1);
    return v2;
  }
  else
  {
    return ParseOr(a1);
  }
}

CFMutableArrayRef __MDCopyTokensFromString(const __CFString *a1)
{
  if (__MDCopyTokensFromString_once != -1) {
    dispatch_once(&__MDCopyTokensFromString_once, &__block_literal_global_11);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kTokenCallbacks);
  v4.length = CFStringGetLength(a1);
  v4.CFIndex location = 0;
  QueryTokens(a1, v4, (uint64_t (*)(void, void, void, void))QueryTokenCallback, (uint64_t)Mutable);
  return Mutable;
}

CFStringRef copyNonDefaultLocalizedString(uint64_t a1, const __CFString *a2, const void *a3)
{
  if (!a2) {
    return 0;
  }
  CFLocaleRef v5 = CFLocaleCopyCurrent();
  if (!v5) {
    return 0;
  }
  CFLocaleRef v6 = v5;
  CFLocaleGetValue(v5, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  if (CFBundleGetLocalizationInfoForLocalization())
  {
    uint64_t v7 = CFBundleCopyLocalizationForLocalizationInfo();
    if (v7)
    {
      int v8 = (const void *)v7;
      CFStringRef v9 = (const __CFString *)CFBundleCopyLocalizedStringForLocalization();
      if (v9)
      {
        CFStringRef v10 = v9;
        if (!CFStringHasPrefix(v9, a2)) {
          goto LABEL_13;
        }
        CFRelease(v10);
      }
      CFRelease(v8);
    }
  }
  uint64_t v11 = CFBundleCopyLocalizationForLocalizationInfo();
  if (!v11)
  {
    CFStringRef v10 = 0;
    goto LABEL_15;
  }
  int v8 = (const void *)v11;
  CFStringRef v12 = (const __CFString *)CFBundleCopyLocalizedStringForLocalization();
  CFStringRef v10 = v12;
  if (v12 && CFStringHasPrefix(v12, a2))
  {
    CFRelease(v10);
    CFStringRef v10 = 0;
  }
LABEL_13:
  CFRelease(v8);
LABEL_15:
  CFRelease(v6);
  if (a3 && v10 && CFEqual(v10, a3))
  {
    CFRelease(v10);
    return 0;
  }
  return v10;
}

uint64_t QueryTokenCallback(int a1, const UInt8 *a2, unsigned int a3, __CFArray *a4)
{
  int v8 = malloc_type_malloc(0x20uLL, 0x1060040C3D0B2E6uLL);
  *((_WORD *)v8 + 12) = 1;
  *((void *)v8 + 1) = 0;
  *(_DWORD *)int v8 = 0;
  CFArrayAppendValue(a4, v8);
  __int16 v9 = *((_WORD *)v8 + 12) - 1;
  *((_WORD *)v8 + 12) = v9;
  if (!v9) {
    TokenDestroy((int *)v8);
  }
  CFStringRef v10 = CFStringCreateWithBytes(0, a2, a3, 0x8000100u, 0);
  *((void *)v8 + 1) = v10;
  switch(a1)
  {
    case 257:
      *(_DWORD *)int v8 = 1;
      CFIndex Count = CFArrayGetCount(a4);
      CFIndex v12 = Count - 2;
      if (Count < 2) {
        return 1;
      }
      CFStringRef ValueAtIndex = (CFStringRef *)CFArrayGetValueAtIndex(a4, v12);
      uint64_t v14 = ValueAtIndex;
      int v15 = *(_DWORD *)ValueAtIndex;
      if ((*(_DWORD *)ValueAtIndex - 2) < 2) {
        goto LABEL_9;
      }
      if (v15 == 5 && CFStringCompare(ValueAtIndex[1], @"-", 0))
      {
        int v15 = *(_DWORD *)v14;
LABEL_9:
        *(_DWORD *)int v8 = v15;
        CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v14[1]);
        CFStringAppend(MutableCopy, *((CFStringRef *)v8 + 1));
        CFRelease(*((CFTypeRef *)v8 + 1));
        *((void *)v8 + 1) = MutableCopy;
        goto LABEL_25;
      }
      return 1;
    case 260:
      int v17 = 5;
      goto LABEL_17;
    case 261:
      int v17 = 4;
      goto LABEL_17;
    case 263:
      int v17 = 9;
      goto LABEL_17;
    case 264:
      int v17 = 6;
      goto LABEL_17;
    case 265:
      int v17 = 7;
      goto LABEL_17;
    case 266:
      int v17 = 8;
      goto LABEL_17;
    case 267:
      CFStringRef v19 = v10;
      if (TokenMatches(v10, @"AND", (const __CFString *)_locAndToken))
      {
        int v20 = 2;
        goto LABEL_23;
      }
      if (TokenMatches(v19, @"OR", (const __CFString *)_locOrToken))
      {
        int v20 = 3;
LABEL_23:
        *(_DWORD *)int v8 = v20;
        CFIndex v21 = CFArrayGetCount(a4);
        CFIndex v12 = v21 - 2;
        if (v21 >= 2)
        {
          CFStringRef v22 = (CFStringRef *)CFArrayGetValueAtIndex(a4, v12);
          CFStringRef v23 = (const __CFString *)*((void *)v8 + 1);
          int v24 = CFStringCreateMutableCopy(0, 0, v22[1]);
          *((void *)v8 + 1) = v24;
          CFStringAppend(v24, v23);
          CFRelease(v23);
LABEL_25:
          CFArrayRemoveValueAtIndex(a4, v12);
        }
        return 1;
      }
      if (TokenMatches(v19, @"NOT", (const __CFString *)_locNotToken)) {
        int v17 = 5;
      }
      else {
        int v17 = 0;
      }
LABEL_17:
      *(_DWORD *)int v8 = v17;
      return 1;
    default:
      *(_DWORD *)int v8 = 0;
      return 1;
  }
}

void PTNodeDestroy(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      __int16 v3 = *(_WORD *)(v2 + 24) - 1;
      *(_WORD *)(v2 + 24) = v3;
      if (!v3) {
        TokenDestroy((int *)v2);
      }
    }
    PTNodeDestroy(a1[2]);
    PTNodeDestroy(a1[3]);
    free(a1);
  }
}

void *ParseOr(uint64_t *a1)
{
  uint64_t v2 = ParseAnd(a1);
  if (v2)
  {
    __int16 v3 = ParseOr2(a1);
    if (v3)
    {
      CFRange v4 = v3;
      CFLocaleRef v5 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
      unint64_t v5[2] = v2;
      v5[3] = v4;
      *((_DWORD *)v5 + 2) = 2;
      return v5;
    }
  }
  return v2;
}

_DWORD *normalizeParseTree(uint64_t *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1;
  while (2)
  {
    switch(*((_DWORD *)v1 + 2))
    {
      case 0:
      case 2:
        uint64_t v2 = v1[2];
        __int16 v3 = (uint64_t *)v1[3];
        if (v2)
        {
          if (v3)
          {
            uint64_t v7 = normalizeParseTree(v2);
            uint64_t v8 = normalizeParseTree(v1[3]);
            uint64_t v9 = v8;
            if (v7 && v8)
            {
              CFRange v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
              v4[2] = *((_DWORD *)v1 + 2);
              *((void *)v4 + 2) = v7;
              *((void *)v4 + 3) = v9;
            }
            else if (v7)
            {
              return (_DWORD *)v7;
            }
            else
            {
              return (_DWORD *)v8;
            }
            return v4;
          }
          __int16 v3 = (uint64_t *)v1[2];
        }
        else if (!v3)
        {
          return 0;
        }
LABEL_9:
        uint64_t v1 = v3;
        if (!v3) {
          return 0;
        }
        continue;
      case 1:
      case 4:
      case 5:
        CFRange v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
        v4[2] = *((_DWORD *)v1 + 2);
        uint64_t v5 = v1[2];
        goto LABEL_12;
      case 3:
        CFRange v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
        uint64_t v5 = v1[2];
        if (!v5)
        {
          CFIndex v12 = (void *)v1[3];
          if (!v12 || *v12)
          {
LABEL_29:
            v4[2] = 4;
            CFIndex v13 = malloc_type_malloc(0x20uLL, 0x1060040C3D0B2E6uLL);
            v13[12] = 1;
            *((void *)v13 + 1) = 0;
            *(_DWORD *)CFIndex v13 = 0;
            *(void *)CFRange v4 = v13;
            uint64_t v15 = v1[2];
            uint64_t v14 = v1[3];
            if (v15)
            {
              if (!v14)
              {
                CFStringRef v16 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@%@", *(void *)(*(void *)v15 + 8), *(void *)(*v1 + 8));
LABEL_41:
                *(void *)(*(void *)v4 + 8) = v16;
                return v4;
              }
            }
            else if (v14)
            {
              CFStringRef v16 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@%@", *(void *)(*v1 + 8), *(void *)(*(void *)v14 + 8));
              goto LABEL_41;
            }
LABEL_47:
            *(void *)(*(void *)v4 + 8) = CFRetain(*(CFTypeRef *)(*v1 + 8));
            **(_DWORD **)CFRange v4 = 0;
            return v4;
          }
          goto LABEL_34;
        }
        if (!*(void *)v5)
        {
          if (*(_DWORD *)(v5 + 8) <= 2u)
          {
            uint64_t v17 = normalizeParseTree(v5);
            normalizeParseTreeAppend(v17, *(const void **)(*v1 + 8));
            goto LABEL_35;
          }
LABEL_34:
          uint64_t v17 = 0;
LABEL_35:
          uint64_t v18 = v1[3];
          if (v18)
          {
            uint64_t v19 = normalizeParseTree(v18);
            uint64_t v20 = v19;
            if (v17)
            {
              if (v19)
              {
                v4[2] = 0;
                *((void *)v4 + 2) = v17;
                *((void *)v4 + 3) = v19;
                return v4;
              }
              goto LABEL_43;
            }
            normalizeParseTreePrepend(v19, *(const void **)(*v1 + 8));
            if (v20)
            {
              PTNodeDestroy((uint64_t *)v4);
              return (_DWORD *)v20;
            }
          }
          else if (v17)
          {
LABEL_43:
            PTNodeDestroy((uint64_t *)v4);
            return (_DWORD *)v17;
          }
          v4[2] = 4;
          CFIndex v21 = malloc_type_malloc(0x20uLL, 0x1060040C3D0B2E6uLL);
          v21[12] = 1;
          *((void *)v21 + 1) = 0;
          *(_DWORD *)CFIndex v21 = 0;
          *(void *)CFRange v4 = v21;
          goto LABEL_47;
        }
        if (!v1[3]) {
          goto LABEL_29;
        }
        v4[2] = *((_DWORD *)v1 + 2);
LABEL_12:
        *((void *)v4 + 2) = normalizeParseTree(v5);
        *((void *)v4 + 3) = normalizeParseTree(v1[3]);
        uint64_t v6 = *v1;
        *(_WORD *)(v6 + 24) = *(_WORD *)(*v1 + 24) + 1;
        *(void *)CFRange v4 = v6;
        return v4;
      case 6:
        __int16 v3 = (uint64_t *)v1[2];
        goto LABEL_9;
      case 7:
        uint64_t v10 = normalizeParseTree(v1[2]);
        CFRange v4 = (_DWORD *)v10;
        if (v1[3]) {
          int v11 = 7;
        }
        else {
          int v11 = 8;
        }
        *(_DWORD *)(v10 + 8) = v11;
        return v4;
      default:
        return 0;
    }
  }
}

void normalizeParseTreeAppend(uint64_t a1, const void *a2)
{
  if (!a1) {
    return;
  }
  uint64_t v3 = a1;
  while (2)
  {
    switch(*(_DWORD *)(v3 + 8))
    {
      case 0:
      case 5:
        goto LABEL_5;
      case 1:
      case 6:
      case 7:
        goto LABEL_18;
      case 2:
        normalizeParseTreeAppend(*(void *)(v3 + 16), a2);
LABEL_5:
        uint64_t v4 = *(void *)(v3 + 24);
        goto LABEL_6;
      case 3:
        uint64_t v4 = *(void *)(v3 + 24);
        if (v4) {
          goto LABEL_6;
        }
        uint64_t v4 = *(void *)(v3 + 16);
        if (v4) {
          goto LABEL_6;
        }
LABEL_18:
        nodeAppend(v3, a2);
        return;
      case 4:
        uint64_t v4 = *(void *)(v3 + 24);
        if (v4 || (uint64_t v4 = *(void *)(v3 + 16)) != 0)
        {
LABEL_6:
          uint64_t v3 = v4;
          if (!v4) {
            return;
          }
          continue;
        }
        int v5 = **(_DWORD **)v3;
        if (v5 == 10)
        {
          uint64_t v7 = malloc_type_malloc(0x20uLL, 0x1060040C3D0B2E6uLL);
          v7[12] = 1;
          *((void *)v7 + 1) = 0;
          *(_DWORD *)uint64_t v7 = 0;
          *((void *)v7 + 1) = CFRetain(a2);
          *(_DWORD *)uint64_t v7 = 0;
          CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)v3 + 8), v7);
          __int16 v8 = v7[12] - 1;
          v7[12] = v8;
          if (!v8)
          {
            TokenDestroy((int *)v7);
          }
        }
        else if (!v5)
        {
          uint64_t v6 = *(const void **)(*(void *)v3 + 8);
          *(void *)(*(void *)v3 + 8) = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@%@", v6, a2);
          CFRelease(v6);
        }
        return;
      default:
        return;
    }
  }
}

void normalizeParseTreePrepend(uint64_t a1, const void *a2)
{
  if (!a1) {
    return;
  }
  uint64_t v3 = a1;
  while (2)
  {
    switch(*(_DWORD *)(v3 + 8))
    {
      case 0:
      case 5:
        goto LABEL_5;
      case 1:
        nodeAppend(v3, a2);
        return;
      case 2:
        normalizeParseTreePrepend(*(void *)(v3 + 24), a2);
LABEL_5:
        uint64_t v4 = *(void *)(v3 + 16);
        goto LABEL_6;
      case 3:
        uint64_t v4 = *(void *)(v3 + 16);
        if (!v4)
        {
          uint64_t v4 = *(void *)(v3 + 24);
          if (!v4) {
            goto LABEL_19;
          }
        }
        goto LABEL_6;
      case 4:
        uint64_t v4 = *(void *)(v3 + 16);
        if (v4 || (uint64_t v4 = *(void *)(v3 + 24)) != 0)
        {
LABEL_6:
          uint64_t v3 = v4;
          if (!v4) {
            return;
          }
          continue;
        }
        int v5 = **(_DWORD **)v3;
        if (v5 == 10)
        {
          uint64_t v7 = malloc_type_malloc(0x20uLL, 0x1060040C3D0B2E6uLL);
          v7[12] = 1;
          *((void *)v7 + 1) = 0;
          *(_DWORD *)uint64_t v7 = 0;
          *((void *)v7 + 1) = CFRetain(a2);
          *(_DWORD *)uint64_t v7 = 0;
          __int16 v8 = *(__CFArray **)(*(void *)v3 + 8);
          CFArrayInsertValueAtIndex(v8, 0, v7);
        }
        else if (!v5)
        {
          uint64_t v6 = *(const void **)(*(void *)v3 + 8);
          *(void *)(*(void *)v3 + 8) = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@%@", a2, v6);
          CFRelease(v6);
        }
        return;
      case 6:
      case 7:
LABEL_19:
        nodePrepend(v3, a2);
        return;
      default:
        return;
    }
  }
}

CFStringRef __MDQueryStringCreateForRanking(const __CFString *a1, const __CFString *a2, int a3)
{
  v22[1] = *(const char **)MEMORY[0x1E4F143B8];
  v22[0] = 0;
  if (a1) {
    CStringFromString = _createCStringFromString(a1);
  }
  else {
    CStringFromString = 0;
  }
  uint64_t v6 = _MDQueryNodeCreate(a2, v22);
  if (v6)
  {
    uint64_t v17 = 0;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x2000000000;
    char v20 = 0;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    v15[2] = ____MDQueryStringCreateForRanking_block_invoke;
    v15[3] = &unk_1E5AEED18;
    v15[4] = &v17;
    v15[5] = CStringFromString;
    int v16 = a3;
    tree_apply_block = db_query_tree_apply_block(v6, v15, (uint64_t)&__block_literal_global_101);
    CFIndex v21 = tree_apply_block;
    free(CStringFromString);
    if (*((unsigned char *)v18 + 24) && (cStr = (char *)malloc_type_malloc(0x400uLL, 0x31206877uLL)) != 0)
    {
      tree = _db_render_query_tree((uint64_t)&v21, (uint64_t)&cStr, 1024, 0, v8);
      uint64_t v10 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
      if (tree) {
        CFStringRef v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
      }
      else {
        CFStringRef v11 = 0;
      }
      free(cStr);
      db_free_query_node(v21);
      if ((a3 & 0x10000) != 0 && v11)
      {
        CFStringRef v12 = CFStringCreateWithFormat(*v10, 0, @"!(%@)", v11);
        CFRelease(v11);
        CFStringRef v11 = v12;
      }
    }
    else
    {
      db_free_query_node(tree_apply_block);
      CFStringRef v11 = 0;
    }
    _Block_object_dispose(&v17, 8);
  }
  else
  {
    free(CStringFromString);
    return 0;
  }
  return v11;
}

void *_createCStringFromString(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  uint64_t v4 = malloc_type_malloc(MaximumSizeForEncoding + 1, 0xCD83E649uLL);
  if (!CFStringGetCString(a1, (char *)v4, MaximumSizeForEncoding, 0x8000100u))
  {
    free(v4);
    return 0;
  }
  return v4;
}

void *_MDQueryNodeCreate(const __CFString *a1, const char **a2)
{
  CStringFromString = (char *)_createCStringFromString(a1);
  if (!CStringFromString) {
    return 0;
  }
  uint64_t v4 = CStringFromString;
  int v5 = *CStringFromString;
  uint64_t v6 = "$";
  BOOL v7 = 1;
  __int16 v8 = "@";
  if (v5 != 64) {
    __int16 v8 = 0;
  }
  if (v5 != 36)
  {
    BOOL v7 = v5 == 64;
    uint64_t v6 = v8;
  }
  BOOL v9 = v5 == 35;
  uint64_t v10 = v5 == 35 || v7;
  if (v9) {
    CFStringRef v11 = "#";
  }
  else {
    CFStringRef v11 = v6;
  }
  query_node = db_make_query_node(&CStringFromString[v10]);
  free(v4);
  if (query_node && a2) {
    *a2 = v11;
  }
  return query_node;
}

void remove_outside_stars(const char **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    size_t v3 = strlen(*a1);
    if (v3 >= 2 && v2[v3 - 1] == 42 && v2[v3 - 2] != 92) {
      v2[v3 - 1] = 0;
    }
  }

  remove_leading_star((char **)a1);
}

void add_trailing_star(const char **a1)
{
  uint64_t v2 = (char *)*a1;
  size_t v3 = strlen(*a1);
  if (v3 < 2 || v2[v3 - 1] != 42 || v2[v3 - 2] == 92)
  {
    v2[v3] = 42;
    uint64_t v2 = (char *)*a1;
  }
  uint64_t v4 = strndup(v2, v3 + 1);
  free(v2);
  *a1 = v4;
}

void remove_leading_star(char **a1)
{
  uint64_t v1 = *a1;
  if (*a1 && *v1 == 42)
  {
    if (v1[1])
    {
      size_t v3 = strdup(v1 + 1);
      free(v1);
      *a1 = v3;
    }
  }
}

CFMutableStringRef __MDQueryStringCopyUserInput(const __CFString *a1)
{
  v9[1] = *(const char **)MEMORY[0x1E4F143B8];
  v9[0] = 0;
  uint64_t v1 = (__CFString *)_MDQueryNodeCreate(a1, v9);
  CFMutableStringRef Mutable = v1;
  if (v1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x2000000000;
    uint64_t v8 = 0;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 0x40000000;
    v4[2] = ____MDQueryStringCopyUserInput_block_invoke;
    v4[3] = &unk_1E5AEED60;
    v4[4] = &v5;
    db_query_tree_apply_block(v1, v4, 0);
    db_free_query_node(Mutable);
    if (v6[3])
    {
      CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      CFStringAppendCString(Mutable, (const char *)v6[3], 0x8000100u);
      CFStringTrim(Mutable, @"*");
      free((void *)v6[3]);
    }
    else
    {
      CFMutableStringRef Mutable = 0;
    }
    _Block_object_dispose(&v5, 8);
  }
  return Mutable;
}

__CFDictionary *__MDQueryCreateQueryDictionaryWithOptionsDict(__CFString *a1, CFStringRef theString, const __CFDictionary *a3, int a4, uint64_t a5, uint64_t a6)
{
  BOOL v59 = (__CFString **)a5;
  uint64_t v60 = a6;
  CFStringRef v8 = theString;
  valuePtr[1] = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(theString);
  if (Length >= 2049)
  {
    v126.CFIndex location = 0;
    v126.length = 2048;
    CFStringRef v8 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8, v126);
  }
  CFDictionaryRef v70 = a3;
  BOOL v10 = 0;
  CFStringRef v11 = 0;
  valuePtr[0] = 0;
  CFTypeID v58 = a1;
  if (a1)
  {
    uint64_t v68 = 0;
    CFDictionaryRef v69 = 0;
    CFDictionaryRef v12 = 0;
    CFIndex v13 = 0;
    CFRange v64 = 0;
    char v65 = 0;
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    CFNumberRef v66 = 0;
    int v67 = 0;
    double v71 = 0;
  }
  else
  {
    uint64_t v68 = 0;
    CFDictionaryRef v69 = 0;
    CFDictionaryRef v12 = 0;
    CFIndex v13 = 0;
    CFRange v64 = 0;
    char v65 = 0;
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    CFNumberRef v66 = 0;
    int v67 = 0;
    double v71 = 0;
    if ((a4 & 0x10) == 0)
    {
      _init_parser((uint64_t)v70);
      if (gQueryParserEnabled == 1)
      {
        _qpUpdateParserOptions((CFIndex)v70, 1);
        pthread_mutex_lock(&gQueryParserLock);
        if (gQueryParser)
        {
          rescheduleAutomaticCooldown_Locked();
          double v71 = (__CFString *)qpEntitySearch;
          double v72 = 0;
          int v73 = &v72;
          uint64_t v74 = 0x2000000000;
          *(void *)&long long v75 = 0;
          CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          *(void *)&long long v75 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
          uint64_t v121 = 0;
          uint64_t v122 = &v121;
          uint64_t v123 = 0x2000000000;
          CFMutableArrayRef Mutable = 0;
          uint64_t v17 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          CFMutableArrayRef Mutable = CFArrayCreateMutable(v16, 0, MEMORY[0x1E4F1D510]);
          uint64_t v117 = 0;
          unint64_t v118 = &v117;
          uint64_t v119 = 0x2000000000;
          CFMutableArrayRef v120 = 0;
          CFMutableArrayRef v120 = CFArrayCreateMutable(v16, 0, v17);
          uint64_t v113 = 0;
          UChar32 v114 = &v113;
          uint64_t v115 = 0x2000000000;
          CFMutableArrayRef v116 = 0;
          CFMutableArrayRef v116 = CFArrayCreateMutable(v16, 0, v17);
          uint64_t v109 = 0;
          UChar32 v110 = &v109;
          uint64_t v111 = 0x2000000000;
          CFMutableArrayRef v112 = 0;
          CFMutableArrayRef v112 = CFArrayCreateMutable(v16, 0, v17);
          uint64_t v105 = 0;
          int v106 = &v105;
          uint64_t v107 = 0x2000000000;
          CFMutableDictionaryRef v108 = 0;
          uint64_t v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
          uint64_t v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
          CFMutableDictionaryRef v108 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          uint64_t v101 = 0;
          uint64_t v102 = &v101;
          uint64_t v103 = 0x2000000000;
          CFMutableDictionaryRef v104 = 0;
          CFMutableDictionaryRef v104 = CFDictionaryCreateMutable(v16, 0, v18, v19);
          uint64_t v97 = 0;
          int v98 = &v97;
          uint64_t v99 = 0x2000000000;
          uint64_t v100 = 0;
          uint64_t v93 = 0;
          v94 = &v93;
          uint64_t v95 = 0x2000000000;
          uint64_t v96 = -1;
          v92[0] = 0;
          v92[1] = v92;
          v92[2] = 0x2000000000;
          v92[3] = 100;
          uint64_t v88 = 0;
          signed int v89 = &v88;
          uint64_t v90 = 0x2000000000;
          int v91 = 0;
          uint64_t v84 = 0;
          unint64_t v85 = &v84;
          uint64_t v86 = 0x2000000000;
          uint64_t v87 = 0;
          uint64_t v80 = 0;
          char v81 = &v80;
          uint64_t v82 = 0x2000000000;
          uint64_t v83 = 0;
          v79[0] = MEMORY[0x1E4F143A8];
          v79[1] = 0x40000000;
          v79[2] = ____MDQueryCreateQueryDictionaryWithOptionsDict_block_invoke;
          v79[3] = &unk_1E5AEED88;
          v79[4] = &v88;
          v79[5] = &v72;
          v79[6] = v92;
          v79[7] = &v105;
          v79[8] = &v113;
          v79[9] = &v109;
          v79[10] = &v101;
          v79[11] = &v97;
          v79[12] = &v93;
          v79[13] = &v121;
          v79[14] = &v84;
          v79[15] = &v80;
          v78[0] = MEMORY[0x1E4F143A8];
          v78[1] = 0x40000000;
          v78[2] = ____MDQueryCreateQueryDictionaryWithOptionsDict_block_invoke_2;
          v78[3] = &unk_1E5AEEDB0;
          v78[4] = &v117;
          if ((a4 & 0x1000) != 0 || v71)
          {
            uint64_t v21 = (uint64_t)v8;
            CFDictionaryRef v22 = v70;
            char v20 = 0;
          }
          else
          {
            char v20 = v78;
            uint64_t v21 = (uint64_t)v8;
            CFDictionaryRef v22 = v70;
          }
          CFRange v64 = (const void *)sQPQueryParserParse(gQueryParser, v21, (uint64_t)v22, (uint64_t)v79, (uint64_t)v20);
          double v71 = v73[3];
          CFDictionaryRef v12 = (const __CFDictionary *)v122[3];
          CFIndex v13 = (const void *)v118[3];
          CFStringRef v23 = (const void *)v110[3];
          int v67 = (const void *)v114[3];
          uint64_t v68 = v23;
          CFNumberRef v24 = (const __CFNumber *)v106[3];
          CFStringRef v11 = (const void *)v102[3];
          CFDictionaryRef v69 = (CFDictionaryRef)v98[3];
          valuePtr[0] = v94[3];
          unsigned int v15 = *((_DWORD *)v89 + 6);
          BOOL v10 = v15 != 0;
          char v65 = (const void *)v85[3];
          CFNumberRef v66 = v24;
          uint64_t v14 = (const void *)v81[3];
          _Block_object_dispose(&v80, 8);
          _Block_object_dispose(&v84, 8);
          _Block_object_dispose(&v88, 8);
          _Block_object_dispose(v92, 8);
          _Block_object_dispose(&v93, 8);
          _Block_object_dispose(&v97, 8);
          _Block_object_dispose(&v101, 8);
          _Block_object_dispose(&v105, 8);
          _Block_object_dispose(&v109, 8);
          _Block_object_dispose(&v113, 8);
          _Block_object_dispose(&v117, 8);
          _Block_object_dispose(&v121, 8);
          _Block_object_dispose(&v72, 8);
        }
        else
        {
          CFStringRef v11 = 0;
          uint64_t v68 = 0;
          CFDictionaryRef v69 = 0;
          CFDictionaryRef v12 = 0;
          CFIndex v13 = 0;
          CFRange v64 = 0;
          char v65 = 0;
          uint64_t v14 = 0;
          BOOL v10 = 0;
          unsigned int v15 = 0;
          CFNumberRef v66 = 0;
          int v67 = 0;
          double v71 = 0;
        }
        pthread_mutex_unlock(&gQueryParserLock);
      }
      else
      {
        CFStringRef v11 = 0;
        uint64_t v68 = 0;
        CFDictionaryRef v69 = 0;
        CFDictionaryRef v12 = 0;
        CFIndex v13 = 0;
        CFRange v64 = 0;
        char v65 = 0;
        uint64_t v14 = 0;
        BOOL v10 = 0;
        unsigned int v15 = 0;
        CFNumberRef v66 = 0;
        int v67 = 0;
        double v71 = 0;
      }
    }
  }
  int v61 = v14;
  BOOL v62 = v10;
  unsigned int v25 = v15;
  CFDictionaryRef v26 = v12;
  CFStringRef v27 = v13;
  CFStringRef v57 = v8;
  CFMutableArrayRef v28 = __MDCopyTokensFromString(v8);
  uint64_t v29 = parseUserQuery(v28, (uint64_t)v59);
  CFRelease(v28);
  BOOL v30 = (uint64_t *)normalizeParseTree(v29);
  PTNodeDestroy(v29);
  CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v32 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  long long v76 = 0u;
  long long v77 = 0u;
  BYTE8(v77) = a4 & 1;
  BYTE9(v77) = (a4 & 2) != 0;
  BYTE10(v77) = (a4 & 4) != 0;
  BYTE11(v77) = (a4 & 8) != 0;
  long long v75 = 0u;
  BYTE12(v77) = (a4 & 0x80000) != 0;
  double v72 = v58;
  int v73 = v59;
  uint64_t v74 = v60;
  *(void *)&long long v75 = CFArrayCreateMutable(v31, 0, MEMORY[0x1E4F1D510]);
  CFNumberRef v33 = v66;
  if (v70)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v70, @"kMDQueryOptionFinderLabelsDict");
    if (Value) {
      *(void *)&long long v76 = Value;
    }
    CFStringRef v35 = CFDictionaryGetValue(v70, @"kMDQueryOptionFinderLabelsDictLocale");
    if (v35) {
      *((void *)&v76 + 1) = v35;
    }
  }
  renderParseTreeToQuery((uint64_t)v30, v32, &v72);
  PTNodeDestroy(v30);
  if (*((void *)&v75 + 1)) {
    CFRelease(*((CFTypeRef *)&v75 + 1));
  }
  uint64_t v36 = CFDictionaryCreateMutable(v31, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v37 = v27;
  if (Length >= 2049) {
    CFRelease(v57);
  }
  CFDictionaryRef v70 = v26;
  if (!v71) {
    double v71 = (__CFString *)CFRetain(v32);
  }
  if (v64)
  {
    CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryInputAttributesKey", v64);
    CFRelease(v64);
  }
  CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryNLPStringKey", v71);
  CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryDefaultStringKey", v32);
  if (BYTE13(v77) || CFArrayGetCount((CFArrayRef)v75)) {
    CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryKindKey", @"kMDQueryAdvancedSyntaxQuery");
  }
  if (CFArrayGetCount((CFArrayRef)v75)) {
    CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryAdvancedComponentsKey", (const void *)v75);
  }
  if ((void)v75) {
    CFRelease((CFTypeRef)v75);
  }
  if (v25 < 2)
  {
    unsigned int v38 = v25;
    double v40 = @"kMDUserQueryDictionaryQueryStringKey";
    int v41 = v36;
    CFDictionaryRef v39 = (CFDictionaryRef)v32;
    goto LABEL_46;
  }
  CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryStringKey", v71);
  if (v66
    || v25 == 3
    && v71
    && (uint64_t v56 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
        uint64_t v121 = 0,
        (CFNumberRef v33 = CFNumberCreate(v31, kCFNumberCFIndexType, &v121)) != 0)
    && (CFDictionarySetValue(v56, v71, v33), CFRelease(v33), (CFNumberRef v33 = v56) != 0))
  {
    if (CFDictionaryGetCount(v33)) {
      CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryRankingTermsKey", v33);
    }
  }
  if (v11 && CFDictionaryGetCount((CFDictionaryRef)v11)) {
    CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryRankingCategoriesKey", v11);
  }
  unsigned int v38 = v25;
  CFDictionaryRef v39 = v70;
  if (v70)
  {
    double v40 = @"kMDUserQueryDictionaryQuerySuggestionsKey";
    int v41 = v36;
LABEL_46:
    CFDictionarySetValue(v41, v40, v39);
  }
  if (v65)
  {
    CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryUnderstandingOutputKey", v65);
    CFRelease(v65);
    if (v11)
    {
      if (CFDictionaryGetCount((CFDictionaryRef)v11)) {
        CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryRankingCategoriesKey", v11);
      }
    }
  }
  if (v37) {
    CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryUniversalSuggestionsKey", v37);
  }
  CFRelease(v71);
  CFRelease(v32);
  int v42 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!v62) {
    int v42 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryLanguageSupportedKey", *v42);
  if (v61)
  {
    CFDictionarySetValue(v36, @"kMDUserQueryDictionaryEntitySearchParseKey", v61);
    CFRelease(v61);
  }
  CFNumberRef v43 = CFNumberCreate(v31, kCFNumberCFIndexType, valuePtr);
  CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryTokenCountKey", v43);
  CFRelease(v43);
  if (v67)
  {
    if (CFArrayGetCount((CFArrayRef)v67)) {
      CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryAttributedInputKey", v67);
    }
    CFRelease(v67);
  }
  CFDictionaryRef v44 = v69;
  if (v68)
  {
    if (CFArrayGetCount((CFArrayRef)v68)) {
      CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryAttributedInputSourcesKey", v68);
    }
    CFRelease(v68);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v70) {
    CFRelease(v70);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v38 - 1 > 2) {
    char v45 = @"kMDUserQueryDictionaryQueryConfidenceNoneValue";
  }
  else {
    char v45 = off_1E5AEF140[v38 - 1];
  }
  CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryConfidenceKey", v45);
  if (v69)
  {
    CFStringRef v46 = CFDictionaryCreateMutable(v31, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFIndex Count = CFDictionaryGetCount(v69);
    MEMORY[0x1F4188790](v50, Count, 8 * Count, v48, v49);
    CFRange v52 = (const __CFString **)((char *)&v57 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v52, v51);
    CFDictionaryGetKeysAndValues(v44, (const void **)v52, 0);
    if (Count >= 1)
    {
      do
      {
        CFNumberRef v53 = (const __CFNumber *)*v52;
        LODWORD(v121) = 0;
        if (CFNumberGetValue(v53, kCFNumberIntType, &v121))
        {
          if (v121 == 2)
          {
            CFRange v54 = @"kMDUserQueryDictionaryQueryDisplayCriteriaSortOrderMaxValue";
            goto LABEL_83;
          }
          if (v121 == 1)
          {
            CFRange v54 = @"kMDUserQueryDictionaryQueryDisplayCriteriaSortOrderMinValue";
LABEL_83:
            CFDictionarySetValue(v46, @"kMDUserQueryDictionaryQueryDisplayCriteriaSortOrderKey", v54);
          }
        }
        ++v52;
        --Count;
      }
      while (Count);
    }
    if (CFDictionaryGetCount(v46))
    {
      CFDictionarySetValue(v46, @"kMDUserQueryDictionaryQueryDisplayCriteriaSortFieldKey", @"kMDUserQueryDictionaryQueryDisplayCriteriaSortFieldDateValue");
      CFDictionarySetValue(v36, @"kMDUserQueryDictionaryQueryDisplayCriteriaKey", v46);
    }
    CFRelease(v44);
    CFRelease(v46);
  }
  return v36;
}

void _init_parser(uint64_t a1)
{
  v1[5] = *MEMORY[0x1E4F143B8];
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___init_parser_block_invoke;
  v1[3] = &__block_descriptor_tmp_385;
  v1[4] = a1;
  if (_init_parser_once != -1) {
    dispatch_once(&_init_parser_once, v1);
  }
}

CFIndex _qpUpdateParserOptions(CFIndex result, int a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  CFDictionaryRef v3 = (const __CFDictionary *)result;
  uint64_t result = CFDictionaryGetCount((CFDictionaryRef)result);
  if (!result) {
    return result;
  }
  pthread_mutex_lock(&gQueryParserOptionsLock);
  CFDictionaryRef Value = CFDictionaryGetValue(v3, @"kQPQueryParserOptionReferenceTimezoneKey");
  if (!Value) {
    goto LABEL_6;
  }
  uint64_t v5 = Value;
  if (qpTimeZoneReference)
  {
    if (CFEqual(Value, (CFTypeRef)qpTimeZoneReference))
    {
LABEL_6:
      int v6 = 0;
      goto LABEL_10;
    }
    if (qpTimeZoneReference)
    {
      CFRelease((CFTypeRef)qpTimeZoneReference);
      qpTimeZoneReference = 0;
    }
  }
  qpTimeZoneReference = (uint64_t)CFRetain(v5);
  int v6 = 1;
LABEL_10:
  if (CFDictionaryContainsKey(v3, @"kMDQueryOptionContextIdentifier")) {
    CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(v3, @"kMDQueryOptionContextIdentifier");
  }
  else {
    CFStringRef v7 = (const __CFString *)qpContextIdentifier;
  }
  if (v7) {
    CFStringRef v8 = v7;
  }
  else {
    CFStringRef v8 = (const __CFString *)identifier;
  }
  if (v8)
  {
    if (qpContextIdentifier)
    {
      if (CFEqual(v8, (CFStringRef)qpContextIdentifier)) {
        goto LABEL_22;
      }
      if (qpContextIdentifier)
      {
        CFRelease((CFTypeRef)qpContextIdentifier);
        qpContextIdentifier = 0;
      }
    }
    qpContextIdentifier = (uint64_t)CFRetain(v8);
    int v6 = 1;
  }
LABEL_22:
  BOOL v9 = CFDictionaryGetValue(v3, @"kMDQueryOptionCustomFieldSpecifications");
  if (!v9) {
    goto LABEL_28;
  }
  BOOL v10 = v9;
  if (qpCustomFieldSpecifications)
  {
    if (CFEqual(v9, (CFTypeRef)qpCustomFieldSpecifications)) {
      goto LABEL_28;
    }
    if (qpCustomFieldSpecifications)
    {
      CFRelease((CFTypeRef)qpCustomFieldSpecifications);
      qpCustomFieldSpecifications = 0;
    }
  }
  qpCustomFieldSpecifications = (uint64_t)CFRetain(v10);
  int v6 = 1;
LABEL_28:
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v3, @"kMDQueryOptionPrivateParsingKey");
  if (!v11) {
    goto LABEL_34;
  }
  CFNumberRef v12 = v11;
  if (qpPrivateParsing)
  {
    if (CFNumberCompare(v11, (CFNumberRef)qpPrivateParsing, 0) == kCFCompareEqualTo) {
      goto LABEL_34;
    }
    if (qpPrivateParsing)
    {
      CFRelease((CFTypeRef)qpPrivateParsing);
      qpPrivateParsing = 0;
    }
  }
  qpPrivateParsing = (uint64_t)CFRetain(v12);
  int v6 = 1;
LABEL_34:
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v3, @"kMDQueryOptionEmbeddingEnabledKey");
  if (!v13) {
    goto LABEL_40;
  }
  CFNumberRef v14 = v13;
  if (qpEmbeddingGeneration)
  {
    if (CFNumberCompare(v13, (CFNumberRef)qpEmbeddingGeneration, 0) == kCFCompareEqualTo) {
      goto LABEL_40;
    }
    if (qpEmbeddingGeneration)
    {
      CFRelease((CFTypeRef)qpEmbeddingGeneration);
      qpEmbeddingGeneration = 0;
    }
  }
  qpEmbeddingGeneration = (uint64_t)CFRetain(v14);
  int v6 = 1;
LABEL_40:
  CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v3, @"kMDQueryOptionEmbeddingGenerationTimeout");
  if (!v15) {
    goto LABEL_46;
  }
  CFNumberRef v16 = v15;
  if (qpEmbeddingGenerationTimeout)
  {
    if (CFNumberCompare(v15, (CFNumberRef)qpEmbeddingGenerationTimeout, 0) == kCFCompareEqualTo) {
      goto LABEL_46;
    }
    if (qpEmbeddingGenerationTimeout)
    {
      CFRelease((CFTypeRef)qpEmbeddingGenerationTimeout);
      qpEmbeddingGenerationTimeout = 0;
    }
  }
  qpEmbeddingGenerationTimeout = (uint64_t)CFRetain(v16);
  int v6 = 1;
LABEL_46:
  CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(v3, @"loadAnnotations");
  if (!v17) {
    goto LABEL_52;
  }
  CFNumberRef v18 = v17;
  if (qpLoadAnnotations)
  {
    if (CFNumberCompare(v17, (CFNumberRef)qpLoadAnnotations, 0) == kCFCompareEqualTo) {
      goto LABEL_52;
    }
    if (qpLoadAnnotations)
    {
      CFRelease((CFTypeRef)qpLoadAnnotations);
      qpLoadAnnotations = 0;
    }
  }
  qpLoadAnnotations = (uint64_t)CFRetain(v18);
  int v6 = 1;
LABEL_52:
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v3, @"kMDQueryOptionU2EnabledKey");
  if (!v19) {
    goto LABEL_58;
  }
  CFNumberRef v20 = v19;
  if (qpOnDeviceQueryUnderstanding)
  {
    if (CFNumberCompare(v19, (CFNumberRef)qpOnDeviceQueryUnderstanding, 0) == kCFCompareEqualTo) {
      goto LABEL_58;
    }
    if (qpOnDeviceQueryUnderstanding)
    {
      CFRelease((CFTypeRef)qpOnDeviceQueryUnderstanding);
      qpOnDeviceQueryUnderstanding = 0;
    }
  }
  qpOnDeviceQueryUnderstanding = (uint64_t)CFRetain(v20);
  int v6 = 1;
LABEL_58:
  CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(v3, @"kMDQueryOptionEntitySearch");
  if (!v21) {
    goto LABEL_64;
  }
  CFNumberRef v22 = v21;
  if (qpEntitySearch)
  {
    if (CFNumberCompare(v21, (CFNumberRef)qpEntitySearch, 0) == kCFCompareEqualTo) {
      goto LABEL_64;
    }
    if (qpEntitySearch)
    {
      CFRelease((CFTypeRef)qpEntitySearch);
      qpEntitySearch = 0;
    }
  }
  qpEntitySearch = (uint64_t)CFRetain(v22);
  int v6 = 1;
LABEL_64:
  CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(v3, @"forTesting");
  if (!v23) {
    goto LABEL_70;
  }
  CFNumberRef v24 = v23;
  if (qpForTesting)
  {
    if (CFNumberCompare(v23, (CFNumberRef)qpForTesting, 0) == kCFCompareEqualTo) {
      goto LABEL_70;
    }
    if (qpForTesting)
    {
      CFRelease((CFTypeRef)qpForTesting);
      qpForTesting = 0;
    }
  }
  qpForTesting = (uint64_t)CFRetain(v24);
  int v6 = 1;
LABEL_70:
  CFStringRef v25 = (const __CFString *)CFDictionaryGetValue(v3, @"customResourceDirectory");
  if (!v25) {
    goto LABEL_76;
  }
  CFStringRef v26 = v25;
  if (qpCustomResourceDirectory)
  {
    if (CFEqual(v25, (CFStringRef)qpCustomResourceDirectory)) {
      goto LABEL_76;
    }
    if (qpCustomResourceDirectory)
    {
      CFRelease((CFTypeRef)qpCustomResourceDirectory);
      qpCustomResourceDirectory = 0;
    }
  }
  qpCustomResourceDirectory = (uint64_t)CFRetain(v26);
  int v6 = 1;
LABEL_76:
  CFDateRef v27 = (const __CFDate *)CFDictionaryGetValue(v3, @"date");
  if (v27)
  {
    CFDateRef v28 = v27;
    if (!qpDateReference)
    {
LABEL_81:
      qpDateReference = (uint64_t)CFRetain(v28);
LABEL_83:
      uint64_t v29 = sQPQueryParserCopyDefaultOptionsForContext(qpContextIdentifier);
      if (v29)
      {
        CFDictionaryRef v30 = (const __CFDictionary *)v29;
        if (gQueryParserOptions)
        {
          CFRelease((CFTypeRef)gQueryParserOptions);
          gQueryParserOptions = 0;
        }
        CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v30);
        CFNumberRef v33 = MutableCopy;
        if (qpTimeZoneReference) {
          CFDictionarySetValue(MutableCopy, @"referenceTimezone", (const void *)qpTimeZoneReference);
        }
        if (qpDateReference) {
          CFDictionarySetValue(v33, @"referenceDate", (const void *)qpDateReference);
        }
        if (qpPrivateParsing) {
          CFDictionarySetValue(v33, @"privateParsing", (const void *)qpPrivateParsing);
        }
        if (qpEmbeddingGeneration) {
          CFDictionarySetValue(v33, @"embeddingsEnabled", (const void *)qpEmbeddingGeneration);
        }
        if (qpEmbeddingGenerationTimeout) {
          CFDictionarySetValue(v33, @"embeddingGenerationTimeout", (const void *)qpEmbeddingGenerationTimeout);
        }
        if (qpCustomFieldSpecifications) {
          CFDictionarySetValue(v33, @"customFieldSpecifications", (const void *)qpCustomFieldSpecifications);
        }
        if (qpOnDeviceQueryUnderstanding) {
          CFDictionarySetValue(v33, @"u2Enabled", (const void *)qpOnDeviceQueryUnderstanding);
        }
        if (qpEntitySearch) {
          CFDictionarySetValue(v33, @"isEntitySearch", (const void *)qpEntitySearch);
        }
        if (qpForTesting) {
          CFDictionarySetValue(v33, @"forTesting", (const void *)qpForTesting);
        }
        if (qpCustomResourceDirectory)
        {
          CFURLRef v34 = CFURLCreateWithString(v31, (CFStringRef)qpCustomResourceDirectory, 0);
          CFDictionarySetValue(v33, @"customResourceDirectory", v34);
        }
        if (qpLoadAnnotations) {
          CFDictionarySetValue(v33, @"loadAnnotations", (const void *)qpLoadAnnotations);
        }
        gQueryParserOptions = (uint64_t)v33;
        CFRelease(v30);
      }
      uint64_t result = pthread_mutex_unlock(&gQueryParserOptionsLock);
      if (a2)
      {
        pthread_mutex_lock(&gQueryParserLock);
        if (gQueryParser)
        {
          pthread_mutex_lock(&gQueryParserOptionsLock);
          uint64_t v35 = gQueryParserOptions;
          if (gQueryParserOptions)
          {
            uint64_t v36 = gQueryParser;
            uint64_t v39 = 0;
            double v40 = &v39;
            uint64_t v41 = 0x2000000000;
            uint64_t v37 = (void (*)(uint64_t, uint64_t))getQPQueryParserSetOptionsSymbolLoc_ptr;
            int v42 = getQPQueryParserSetOptionsSymbolLoc_ptr;
            if (!getQPQueryParserSetOptionsSymbolLoc_ptr)
            {
              ParserLibrary = (void *)QueryParserLibrary();
              v40[3] = (uint64_t)dlsym(ParserLibrary, "QPQueryParserSetOptions");
              getQPQueryParserSetOptionsSymbolLoc_ptr = (_UNKNOWN *)v40[3];
              uint64_t v37 = (void (*)(uint64_t, uint64_t))v40[3];
            }
            _Block_object_dispose(&v39, 8);
            if (!v37) {
              _qpUpdateParserOptions_cold_1();
            }
            v37(v36, v35);
          }
          pthread_mutex_unlock(&gQueryParserOptionsLock);
        }
        return pthread_mutex_unlock(&gQueryParserLock);
      }
      return result;
    }
    if (CFDateCompare(v27, (CFDateRef)qpDateReference, 0))
    {
      if (qpDateReference)
      {
        CFRelease((CFTypeRef)qpDateReference);
        qpDateReference = 0;
      }
      goto LABEL_81;
    }
  }
  if (v6) {
    goto LABEL_83;
  }

  return pthread_mutex_unlock(&gQueryParserOptionsLock);
}

void rescheduleAutomaticCooldown_Locked()
{
  if (rescheduleAutomaticCooldown_Locked_onceToken != -1) {
    dispatch_once(&rescheduleAutomaticCooldown_Locked_onceToken, &__block_literal_global_456);
  }
  if (gQueryParserAutomaticCoolDownBlock)
  {
    dispatch_block_cancel((dispatch_block_t)gQueryParserAutomaticCoolDownBlock);
    _Block_release((const void *)gQueryParserAutomaticCoolDownBlock);
    gQueryParserAutomaticCoolDownBlock = 0;
  }
  gQueryParserAutomaticCoolDownBlock = (uint64_t)dispatch_block_create((dispatch_block_flags_t)0, &__block_literal_global_462);
  dispatch_time_t v0 = dispatch_time(0, 120000000000);
  global_queue = dispatch_get_global_queue(17, 0);
  uint64_t v2 = (void *)gQueryParserAutomaticCoolDownBlock;

  dispatch_after(v0, global_queue, v2);
}

uint64_t sQPQueryParserParse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  CFNumberRef v14 = &v13;
  uint64_t v15 = 0x2000000000;
  BOOL v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))getQPQueryParserParseSymbolLoc_ptr;
  CFNumberRef v16 = getQPQueryParserParseSymbolLoc_ptr;
  if (!getQPQueryParserParseSymbolLoc_ptr)
  {
    ParserLibrary = (void *)QueryParserLibrary();
    v14[3] = (uint64_t)dlsym(ParserLibrary, "QPQueryParserParse");
    getQPQueryParserParseSymbolLoc_ptr = (_UNKNOWN *)v14[3];
    BOOL v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v14[3];
  }
  _Block_object_dispose(&v13, 8);
  if (!v10) {
    _qpUpdateParserOptions_cold_1();
  }
  return v10(a1, a2, a3, a4, a5);
}

void *__MDQueryCreateQueryStringWithOptionsDict(__CFString *a1, const __CFString *a2, const __CFDictionary *a3, int a4, uint64_t a5, uint64_t a6)
{
  valuePtr[1] = *MEMORY[0x1E4F143B8];
  QueryDictionaryWithOptionsDict = __MDQueryCreateQueryDictionaryWithOptionsDict(a1, a2, a3, a4, a5, a6);
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(QueryDictionaryWithOptionsDict, @"kMDUserQueryDictionaryQueryStringKey");
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(QueryDictionaryWithOptionsDict, @"kMDUserQueryDictionaryQueryDefaultStringKey");
  CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(QueryDictionaryWithOptionsDict, @"kMDUserQueryDictionaryQueryConfidenceKey");
  if (v9) {
    CFStringRef v10 = v9;
  }
  else {
    CFStringRef v10 = @"kMDUserQueryDictionaryQueryConfidenceNoneValue";
  }
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(QueryDictionaryWithOptionsDict, @"kMDUserQueryDictionaryQueryTokenCountKey");
  valuePtr[0] = 0;
  if (v11
    && (CFNumberGetValue(v11, kCFNumberCFIndexType, valuePtr), valuePtr[0] >= 2)
    && CFStringCompare(v10, @"kMDUserQueryDictionaryQueryConfidenceNoneValue", 0)
    && CFStringCompare(v10, @"kMDUserQueryDictionaryQueryConfidenceLowValue", 0)
    || CFEqual(Value, v8))
  {
    CFNumberRef v12 = (void *)CFRetain(Value);
  }
  else
  {
    CFNumberRef v12 = (void *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@ || %@", Value, v8);
    if (CFPreferencesGetAppBooleanValue(@"QPQueryLoggingEnabled", (CFStringRef)*MEMORY[0x1E4F1D3B8], 0)) {
      CFLog();
    }
  }
  CFRelease(QueryDictionaryWithOptionsDict);
  return v12;
}

void *__MDQueryCreateQueryStringToMatchAttributeWithOptions(const __CFString *a1, __CFString *a2, int a3, uint64_t a4, uint64_t a5)
{
  return __MDQueryCreateQueryStringWithOptionsDict(a2, a1, 0, a3, a4, a5);
}

CFStringRef __MDQueryCopyTextTerms(const __CFString *a1, uint64_t a2, uint64_t (*a3)(void))
{
  CFStringRef v5 = a1;
  CFIndex Length = CFStringGetLength(a1);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (Length >= 2049)
  {
    v14.CFIndex location = 0;
    v14.length = 2048;
    CFStringRef v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, v14);
  }
  CFMutableArrayRef v8 = __MDCopyTokensFromString(v5);
  CFStringRef v9 = parseUserQuery(v8, a2);
  CFRelease(v8);
  CFStringRef v10 = (uint64_t *)normalizeParseTree(v9);
  PTNodeDestroy(v9);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
  if (a3) {
    a3 = (uint64_t (*)(void))a3();
  }
  getListOfTermText((uint64_t)v10, Mutable, (const __CFSet *)a3);
  CFStringRef v12 = CFStringCreateByCombiningStrings(v7, Mutable, @" ");
  CFRelease(Mutable);
  PTNodeDestroy(v10);
  if (a3) {
    CFRelease(a3);
  }
  if (Length >= 2049) {
    CFRelease(v5);
  }
  return v12;
}

void getListOfTermText(uint64_t a1, __CFArray *a2, const __CFSet *a3)
{
  if (a3)
  {
    if (a2)
    {
      uint64_t v4 = a1;
      if (a1)
      {
        while (2)
        {
          switch(*(_DWORD *)(v4 + 8))
          {
            case 3:
              if (*(void *)v4)
              {
                if (**(_DWORD **)v4 == 8)
                {
                  int v6 = *(uint64_t **)(v4 + 16);
                  if (v6)
                  {
                    uint64_t v7 = *v6;
                    if (v7)
                    {
                      CFStringRef v10 = *(void **)(v4 + 24);
                      CFStringRef v9 = (uint64_t *)(v4 + 24);
                      CFMutableArrayRef v8 = v10;
                      if (v10)
                      {
                        if (*v8 && !*(_DWORD *)v7 && CFSetContainsValue(a3, *(const void **)(v7 + 8))) {
                          goto LABEL_19;
                        }
                      }
                    }
                  }
                }
              }
              return;
            case 4:
              getListOfTermText(*(void *)(v4 + 16), a2, a3);
              CFNumberRef v11 = *(CFStringRef **)v4;
              if (*(void *)v4 && !*(_DWORD *)v11)
              {
                CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v11[1], @" ");
                v23.length = CFArrayGetCount(ArrayBySeparatingStrings);
                v23.CFIndex location = 0;
                CFArrayAppendArray(a2, ArrayBySeparatingStrings, v23);
                CFRelease(ArrayBySeparatingStrings);
              }
              goto LABEL_18;
            case 7:
              uint64_t v13 = *(uint64_t **)(v4 + 16);
              if (v13 && (CFRange v14 = *(uint64_t **)(v4 + 24)) != 0)
              {
                if (!*(void *)v4) {
                  return;
                }
                uint64_t v15 = *(void *)(*(void *)v4 + 8);
                if (!v15) {
                  return;
                }
                uint64_t v16 = *v13;
                if (!v16) {
                  return;
                }
                uint64_t v17 = *(void *)(v16 + 8);
                if (!v17) {
                  return;
                }
                uint64_t v18 = *v14;
                if (!v18) {
                  return;
                }
                uint64_t v19 = *(void *)(v18 + 8);
                if (!v19) {
                  return;
                }
                CFStringRef v20 = CFStringCreateWithFormat(0, 0, @"%@%@%@", v15, v17, v19);
              }
              else
              {
                if (!*(void *)v4 || !*(void *)(*(void *)v4 + 8)) {
                  return;
                }
                CFStringRef v20 = CFStringCreateWithFormat(0, 0, @"\"%@\"", *(void *)(*(void *)v4 + 8));
              }
LABEL_36:
              CFStringRef v21 = v20;
              CFArrayAppendValue(a2, v20);
              CFRelease(v21);
              break;
            case 8:
              if (!*(void *)v4 || !*(void *)(*(void *)v4 + 8)) {
                return;
              }
              CFStringRef v20 = CFStringCreateWithFormat(0, 0, @"\"%@", *(void *)(*(void *)v4 + 8));
              goto LABEL_36;
            default:
              getListOfTermText(*(void *)(v4 + 16), a2, a3);
LABEL_18:
              CFStringRef v9 = (uint64_t *)(v4 + 24);
LABEL_19:
              uint64_t v4 = *v9;
              if (!v4) {
                return;
              }
              continue;
          }
          break;
        }
      }
    }
  }
}

void __MDQueryUserStringFacetsApplyDoWhileBlock(CFStringRef theString, CFRange range, uint64_t a3, uint64_t a4)
{
  CFIndex location = range.location;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (range.length >= 2048) {
    CFIndex length = 2048;
  }
  else {
    CFIndex length = range.length;
  }
  if (range.location || length != CFStringGetLength(theString))
  {
    v16.CFIndex location = location;
    v16.CFIndex length = length;
    CFStringRef v10 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, v16);
    int v9 = 1;
  }
  else
  {
    int v9 = 0;
    CFStringRef v10 = theString;
  }
  CFMutableArrayRef v11 = __MDCopyTokensFromString(v10);
  CFStringRef v12 = parseUserQuery(v11, a4);
  CFRelease(v11);
  uint64_t v13 = (uint64_t *)normalizeParseTree(v12);
  PTNodeDestroy(v12);
  v14.CFIndex location = location;
  v14.CFIndex length = length;
  _parseTreeFacetsApplyDoWhileBlock(v13, theString, &v14, a3);
  PTNodeDestroy(v13);
  if (v9) {
    CFRelease(v10);
  }
}

CFStringRef __MDQueryCreateStringByAddingBackslashEscapes(const __CFString *a1)
{
  CFStringRef v1 = mutableEscapedCopy(a1);
  CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1);
  CFRelease(v1);
  return Copy;
}

uint64_t __MDQueryParserCancelWithReferenceDict(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  _init_parser(0);
  uint64_t v2 = gQueryParser;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  CFDictionaryRef v3 = (uint64_t (*)(uint64_t, uint64_t))getQPQueryParserCancelSymbolLoc_ptr;
  int v9 = getQPQueryParserCancelSymbolLoc_ptr;
  if (!getQPQueryParserCancelSymbolLoc_ptr)
  {
    ParserLibrary = (void *)QueryParserLibrary();
    v7[3] = (uint64_t)dlsym(ParserLibrary, "QPQueryParserCancel");
    getQPQueryParserCancelSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    CFDictionaryRef v3 = (uint64_t (*)(uint64_t, uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v3) {
    _qpUpdateParserOptions_cold_1();
  }
  return v3(v2, a1);
}

uint64_t __MDQueryParserPreheatWithOptionsDict(uint64_t a1)
{
  _init_parser(a1);
  pthread_mutex_lock(&gQueryParserLock);
  sQPQueryParserPreheat(gQueryParser);
  rescheduleAutomaticCooldown_Locked();

  return pthread_mutex_unlock(&gQueryParserLock);
}

uint64_t sQPQueryParserPreheat(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v2 = (uint64_t (*)(uint64_t))getQPQueryParserPreheatSymbolLoc_ptr;
  uint64_t v8 = getQPQueryParserPreheatSymbolLoc_ptr;
  if (!getQPQueryParserPreheatSymbolLoc_ptr)
  {
    ParserLibrary = (void *)QueryParserLibrary();
    _OWORD v6[3] = (uint64_t)dlsym(ParserLibrary, "QPQueryParserPreheat");
    getQPQueryParserPreheatSymbolLoc_ptr = (_UNKNOWN *)v6[3];
    uint64_t v2 = (uint64_t (*)(uint64_t))v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v2) {
    _qpUpdateParserOptions_cold_1();
  }
  return v2(a1);
}

uint64_t __MDQueryParserPreheat()
{
  _init_parser(0);
  pthread_mutex_lock(&gQueryParserLock);
  sQPQueryParserPreheat(gQueryParser);
  rescheduleAutomaticCooldown_Locked();

  return pthread_mutex_unlock(&gQueryParserLock);
}

uint64_t __MDQueryParserCooldown()
{
  pthread_mutex_lock(&gQueryParserLock);
  sQPQueryParserCooldown(gQueryParser);

  return pthread_mutex_unlock(&gQueryParserLock);
}

uint64_t sQPQueryParserCooldown(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v2 = (uint64_t (*)(uint64_t))getQPQueryParserCooldownSymbolLoc_ptr;
  uint64_t v8 = getQPQueryParserCooldownSymbolLoc_ptr;
  if (!getQPQueryParserCooldownSymbolLoc_ptr)
  {
    ParserLibrary = (void *)QueryParserLibrary();
    _OWORD v6[3] = (uint64_t)dlsym(ParserLibrary, "QPQueryParserCooldown");
    getQPQueryParserCooldownSymbolLoc_ptr = (_UNKNOWN *)v6[3];
    uint64_t v2 = (uint64_t (*)(uint64_t))v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v2) {
    _qpUpdateParserOptions_cold_1();
  }
  return v2(a1);
}

void renderQueryPredicateForDateRange(__CFString *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  BOOL v4 = trunc(a3) == a3;
  if (trunc(a4) != a4) {
    BOOL v4 = 0;
  }
  if (a2)
  {
    if (v4) {
      CFStringRef v5 = @"(InRange(%@,$time.absolute(%.lf),$time.absolute(%.lf)))";
    }
    else {
      CFStringRef v5 = @"(InRange(%@,$time.absolute(%lf),$time.absolute(%lf)))";
    }
    CFStringAppendFormat(a1, 0, v5, a2, *(void *)&a3, *(void *)&a4, v7);
  }
  else if (v4)
  {
    CFStringAppendFormat(a1, 0, @"(InRange(*,$time.absolute(%.lf),$time.absolute(%.lf)))", *(void *)&a3, *(void *)&a4, v6, v7);
  }
  else
  {
    CFStringAppendFormat(a1, 0, @"(InRange(*,$time.absolute(%lf),$time.absolute(%lf)))", *(void *)&a3, *(void *)&a4, v6, v7);
  }
}

void renderQueryPredicateForDate(__CFString *a1, unsigned int a2, uint64_t a3, double a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 > 3) {
    BOOL v4 = @"=";
  }
  else {
    BOOL v4 = off_1E5AEF158[a2];
  }
  double v5 = trunc(a4);
  if (a3)
  {
    CFStringRef v6 = @"(%@ %@ $time.absolute(%lf))";
    if (v5 == a4) {
      CFStringRef v6 = @"(%@ %@ $time.absolute(%.lf))";
    }
    CFStringAppendFormat(a1, 0, v6, a3, v4, *(void *)&a4, v9);
  }
  else
  {
    if (v5 == a4) {
      CFStringRef v7 = @"(* %@ $time.absolute(%.lf))";
    }
    else {
      CFStringRef v7 = @"(* %@ $time.absolute(%lf))";
    }
    CFStringAppendFormat(a1, 0, v7, v4, *(void *)&a4, v8, v9);
  }
}

void renderQueryPredicateForText(__CFString *a1, CFStringRef theString, __CFString *a3, int a4, int a5, int a6, uint64_t a7)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(theString);
  uint64_t v15 = @"*";
  if (!a4) {
    uint64_t v15 = &stru_1EF684D88;
  }
  uint64_t v39 = v15;
  __int16 v42 = 0;
  uint64_t v41 = 0;
  __int16 v40 = 25699;
  if (a6)
  {
    CFRange v16 = (char *)&v41;
  }
  else
  {
    CFRange v16 = (char *)&v41 + 1;
    LOBYTE(v41) = 119;
  }
  if (*(unsigned char *)(a7 + 66)) {
    *v16++ = 106;
  }
  if (*(unsigned char *)(a7 + 67)) {
    *v16++ = 115;
  }
  if (*(unsigned char *)(a7 + 68))
  {
    *(_DWORD *)CFRange v16 = 808923238;
    v16 += 4;
  }
  if (!a5)
  {
    if ((unint64_t)CFStringFind(theString, @" ", 0).length) {
      *v16++ = 116;
    }
    if (!*(unsigned char *)(a7 + 67) && Length >= 2)
    {
      CFIndex v35 = 0;
      while (1)
      {
        unsigned int CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v35);
        if (CharacterAtIndex >> 8 >= 0x11
          && ((CharacterAtIndex & 0xFF00) == 0x1100
           || (CharacterAtIndex - 11904) >> 7 < 0x197
           || CharacterAtIndex - 65376 <= 0x4F))
        {
          break;
        }
        if (Length == ++v35) {
          goto LABEL_13;
        }
      }
      *v16++ = 115;
    }
  }
LABEL_13:
  *CFRange v16 = 0;
  if (Length)
  {
    if (!a3) {
      a3 = @"**";
    }
    CFIndex v17 = CFStringGetLength(a1);
    CFStringAppendFormat(a1, 0, @"(%@ = \""), a3;
    CFStringRef v18 = mutableEscapedCopy(theString);
    CFStringAppend(a1, v18);
    CFRelease(v18);
    CFStringAppendFormat(a1, 0, @"%@\"%s"), v39, &v40);
    if (a7
      && *(void *)(a7 + 40)
      && (CFEqual(a3, @"*") || CFEqual(a3, @"**") || CFEqual(a3, @"kMDItemUserTags")))
    {
      uint64_t v19 = 0;
      v43[0] = 0;
      CFStringRef v20 = &v40;
      CFStringRef v21 = v43;
      do
      {
        uint64_t v22 = v19;
        do
        {
          uint64_t v19 = v22;
          int v24 = *(unsigned __int8 *)v20;
          CFStringRef v20 = (__int16 *)((char *)v20 + 1);
          int v23 = v24;
          uint64_t v22 = 1;
        }
        while (v24 == 116);
        *v21++ = v23;
      }
      while (v23);
      if (v19)
      {
        CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, @" ");
        int64_t Count = CFArrayGetCount(ArrayBySeparatingStrings);
        CFDateRef v27 = malloc_type_calloc(Count, 8uLL, 0x100004000313F17uLL);
        if (Count >= 1)
        {
          CFIndex v28 = 0;
          char v29 = 0;
          do
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v28);
            uint64_t v31 = finderLabelForText(ValueAtIndex, *(const __CFLocale **)(a7 + 48), *(const __CFDictionary **)(a7 + 40));
            v27[v28] = v31;
            if (v31) {
              char v29 = 1;
            }
            ++v28;
          }
          while (Count != v28);
          if (v29)
          {
            CFStringInsert(a1, v17, @"(");
            CFStringAppend(a1, @" || (");
            for (CFIndex i = 0; i != Count; ++i)
            {
              if (i) {
                CFStringAppend(a1, @" && ");
              }
              CFStringAppendFormat(a1, 0, @"(%@ = \""), a3;
              CFStringRef v33 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, i);
              CFStringRef v34 = mutableEscapedCopy(v33);
              CFStringAppend(a1, v34);
              CFRelease(v34);
              CFStringAppendFormat(a1, 0, @"%@\"%s", v39, v43);
              if (v27[i]) {
                CFStringAppendFormat(a1, 0, @" || (_kMDItemFinderLabel = %u && kMDItemUserTags != *)"), v27[i]);
              }
              else {
                CFStringAppend(a1, @""));
              }
            }
            CFStringAppend(a1, @")"));
          }
        }
        free(v27);
        CFRelease(ArrayBySeparatingStrings);
      }
      else
      {
        uint64_t v37 = finderLabelForText(theString, *(const __CFLocale **)(a7 + 48), *(const __CFDictionary **)(a7 + 40));
        if (v37)
        {
          uint64_t v38 = v37;
          CFStringInsert(a1, v17, @"(");
          CFStringAppendFormat(a1, 0, @" || (_kMDItemFinderLabel = %u && kMDItemUserTags != *)"), v38);
        }
      }
    }
  }
  else if (a3)
  {
    CFStringAppendFormat(a1, 0, @"(%@ = *)", a3);
  }
  else
  {
    CFStringAppend(a1, @"(true)");
  }
}

uint64_t getNumberFormatter()
{
  if (!getNumberFormatter_sNumberFormatter)
  {
    CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFLocaleRef Locale = (const __CFLocale *)getLocale();
    CFNumberFormatterRef v2 = CFNumberFormatterCreate(v0, Locale, kCFNumberFormatterScientificStyle);
    uint64_t v3 = 0;
    atomic_compare_exchange_strong(&getNumberFormatter_sNumberFormatter, (unint64_t *)&v3, (unint64_t)v2);
    if (v3) {
      CFRelease(v2);
    }
  }
  return getNumberFormatter_sNumberFormatter;
}

uint64_t getLocale()
{
  if (!getLocale_sLocale)
  {
    CFLocaleRef v0 = CFLocaleCopyCurrent();
    uint64_t v1 = 0;
    atomic_compare_exchange_strong(&getLocale_sLocale, (unint64_t *)&v1, (unint64_t)v0);
    if (v1) {
      CFRelease(v0);
    }
  }
  return getLocale_sLocale;
}

uint64_t finderLabelForText(CFStringRef theString, const __CFLocale *a2, const __CFDictionary *a3)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  if (!a3) {
    return 0;
  }
  CFLocaleRef Locale = a2;
  if (!a2) {
    CFLocaleRef Locale = (const __CFLocale *)getLocale();
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theString);
  CFStringFold(MutableCopy, 0x181uLL, Locale);
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, MutableCopy);
  if (Value) {
    CFNumberGetValue(Value, kCFNumberCFIndexType, v9);
  }
  CFRelease(MutableCopy);
  return v9[0];
}

uint64_t GetAbsoluteTimeFromString(const __CFString *a1, CFRange *a2, CFAbsoluteTime *a3)
{
  pthread_mutex_lock(&GetAbsoluteTimeFromString__dateFormatterLock);
  if (!getDateFormatter_sDateFormatter)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFLocaleRef Locale = (const __CFLocale *)getLocale();
    CFDateFormatterRef v8 = CFDateFormatterCreate(v6, Locale, kCFDateFormatterShortStyle, kCFDateFormatterNoStyle);
    uint64_t v9 = 0;
    atomic_compare_exchange_strong(&getDateFormatter_sDateFormatter, (unint64_t *)&v9, (unint64_t)v8);
    if (v9) {
      CFRelease(v8);
    }
  }
  uint64_t AbsoluteTimeFromString = CFDateFormatterGetAbsoluteTimeFromString((CFDateFormatterRef)getDateFormatter_sDateFormatter, a1, a2, a3);
  pthread_mutex_unlock(&GetAbsoluteTimeFromString__dateFormatterLock);
  return AbsoluteTimeFromString;
}

BOOL TokenMatches(const __CFString *a1, const __CFString *a2, const __CFString *a3)
{
  return CFEqual(a1, a2)
      || a3 && CFStringCompare(a1, a3, 0x10uLL) == kCFCompareEqualTo;
}

void *ParseAnd(uint64_t *a1)
{
  CFNumberFormatterRef v2 = ParseNot(a1);
  if (v2)
  {
    uint64_t v3 = ParseAnd2(a1);
    if (v3)
    {
      BOOL v4 = v3;
      double v5 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
      unint64_t v5[2] = v2;
      v5[3] = v4;
      *((_DWORD *)v5 + 2) = 0;
      return v5;
    }
  }
  return v2;
}

_DWORD *ParseOr2(uint64_t *a1)
{
  if (!TokenListGetTokenAtOffset(*a1, 0) || *(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) != 3) {
    return 0;
  }
  CFNumberFormatterRef v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
  v2[2] = 2;
  TokenAtOffset = TokenListGetTokenAtOffset(*a1, 0);
  ++TokenAtOffset[12];
  *(void *)CFNumberFormatterRef v2 = TokenAtOffset;
  uint64_t v4 = *a1;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(*a1 + 8) + 1;
  TokenListGetTokenAtOffset(v4, 0);
  double v5 = ParseAnd(a1);
  *((void *)v2 + 2) = v5;
  if (v5) {
    *((void *)v2 + 3) = ParseOr2(a1);
  }
  return v2;
}

_DWORD *ParseNot(uint64_t *a1)
{
  v23[2] = *MEMORY[0x1E4F143B8];
  if (TokenListGetTokenAtOffset(*a1, 0)
    && *(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) == 5
    && TokenListGetTokenAtOffset(*a1, 1)
    && *(_DWORD *)TokenListGetTokenAtOffset(*a1, 1) != 1)
  {
    int v4 = 1;
    CFNumberFormatterRef v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
    TokenAtOffset = TokenListGetTokenAtOffset(*a1, 0);
    goto LABEL_10;
  }
  if (TokenListGetTokenAtOffset(*a1, 0) && *(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) == 4)
  {
    CFNumberFormatterRef v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
    TokenAtOffset = TokenListGetTokenAtOffset(*a1, 0);
    int v4 = 0;
LABEL_10:
    ++TokenAtOffset[12];
    *(void *)CFNumberFormatterRef v2 = TokenAtOffset;
    uint64_t v5 = *a1;
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(*a1 + 8) + 1;
    TokenListGetTokenAtOffset(v5, 0);
    v2[2] = v4;
    goto LABEL_11;
  }
  CFNumberFormatterRef v2 = 0;
  LOBYTE(v4) = 0;
LABEL_11:
  if (TokenListGetTokenAtOffset(*a1, 0) && *(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) == 6)
  {
    CFAllocatorRef v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
    unint64_t v6[2] = 6;
    CFStringRef v7 = TokenListGetTokenAtOffset(*a1, 0);
    ++v7[12];
    *(void *)CFAllocatorRef v6 = v7;
    uint64_t v8 = *a1;
    *(_DWORD *)(v8 + 8) = *(_DWORD *)(*a1 + 8) + 1;
    TokenListGetTokenAtOffset(v8, 0);
    *((void *)v6 + 2) = ParseOr(a1);
    if (!TokenListGetTokenAtOffset(*a1, 0) || *(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) != 7) {
      goto LABEL_27;
    }
    uint64_t v9 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
    void v9[2] = 6;
    uint64_t v10 = TokenListGetTokenAtOffset(*a1, 0);
    ++v10[12];
    *(void *)uint64_t v9 = v10;
    uint64_t v11 = *a1;
    *(_DWORD *)(v11 + 8) = *(_DWORD *)(*a1 + 8) + 1;
    TokenListGetTokenAtOffset(v11, 0);
    goto LABEL_26;
  }
  if (!TokenListGetTokenAtOffset(*a1, 0)) {
    return v2;
  }
  if (*(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) == 10)
  {
    CFStringRef v12 = TokenListGetTokenAtOffset(*a1, 0);
    v23[1] = 0;
    uint64_t v13 = v12[1];
    v22[0] = v23;
    v22[1] = 0;
    void v22[2] = a1[2];
    v23[0] = v13;
    uint64_t v14 = ParseSpace(v22);
    uint64_t v15 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
    ++*((_WORD *)v12 + 12);
    *(void *)uint64_t v15 = v12;
    v15[2] = 4;
    CFAllocatorRef v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
    *((void *)v6 + 2) = v14;
    *((void *)v6 + 3) = v15;
    unint64_t v6[2] = 2;
    uint64_t v16 = *a1;
    *(_DWORD *)(v16 + 8) = *(_DWORD *)(*a1 + 8) + 1;
    TokenListGetTokenAtOffset(v16, 0);
  }
  else
  {
    CFAllocatorRef v6 = ParseAtom(a1, 0, v4);
    if (!v6) {
      return v2;
    }
  }
  if (TokenListGetTokenAtOffset(*a1, 0) && *(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) == 8)
  {
    CFIndex v17 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
    void v17[2] = 3;
    *((void *)v17 + 2) = v6;
    CFStringRef v18 = TokenListGetTokenAtOffset(*a1, 0);
    ++v18[12];
    *(void *)CFIndex v17 = v18;
    uint64_t v19 = *a1;
    *(_DWORD *)(v19 + 8) = *(_DWORD *)(*a1 + 8) + 1;
    TokenListGetTokenAtOffset(v19, 0);
    if (TokenListGetTokenAtOffset(*a1, 0) && *(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) == 1)
    {
      uint64_t v20 = *a1;
      *(_DWORD *)(v20 + 8) = *(_DWORD *)(*a1 + 8) + 1;
      TokenListGetTokenAtOffset(v20, 0);
    }
    uint64_t v9 = ParseAtom(a1, *(const __CFString **)(*(void *)v6 + 8), v4);
    CFAllocatorRef v6 = v17;
LABEL_26:
    *((void *)v6 + 3) = v9;
  }
LABEL_27:
  if (!v2) {
    return v6;
  }
  *((void *)v2 + 2) = v6;
  return v2;
}

_DWORD *ParseAnd2(uint64_t *a1)
{
  if (!TokenListGetTokenAtOffset(*a1, 0)
    || *(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) != 1
    && *(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) != 2
    && *(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) != 6)
  {
    return 0;
  }
  CFNumberFormatterRef v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
  v2[2] = 0;
  if (*(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) == 1 || *(_DWORD *)TokenListGetTokenAtOffset(*a1, 0) == 2)
  {
    TokenAtOffset = TokenListGetTokenAtOffset(*a1, 0);
    ++TokenAtOffset[12];
    *(void *)CFNumberFormatterRef v2 = TokenAtOffset;
    uint64_t v4 = *a1;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(*a1 + 8) + 1;
    TokenListGetTokenAtOffset(v4, 0);
  }
  uint64_t v5 = ParseNot(a1);
  *((void *)v2 + 2) = v5;
  if (v5) {
    *((void *)v2 + 3) = ParseAnd2(a1);
  }
  return v2;
}

_DWORD *ParseAtom(uint64_t *a1, const __CFString *a2, char a3)
{
  uint64_t v5 = a1;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  TokenAtOffset = TokenListGetTokenAtOffset(*a1, 0);
  CFStringRef v7 = 0;
  if (TokenAtOffset)
  {
    switch(*(_DWORD *)TokenAtOffset)
    {
      case 0:
      case 5:
      case 8:
        CFStringRef v7 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
        unint64_t v7[2] = 4;
        CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
        uint64_t v9 = malloc_type_malloc(0x20uLL, 0x1060040C3D0B2E6uLL);
        BOOL v10 = 0;
        char v11 = 0;
        v9[12] = 1;
        *(_DWORD *)uint64_t v9 = 0;
        *(void *)CFStringRef v7 = v9;
        *((void *)v9 + 1) = Mutable;
        **(_DWORD **)CFStringRef v7 = 0;
        char v65 = 0;
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        break;
      case 9:
        CFDictionaryRef v44 = TokenListGetTokenAtOffset(*v5, 0);
        int v45 = *(_DWORD *)v44;
        CFStringRef v46 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
        CFStringRef v7 = v46;
        uint64_t v47 = v46;
        if (v45 == 9)
        {
          ++v44[12];
          *CFStringRef v46 = v44;
          *((_DWORD *)v46 + 2) = 7;
          uint64_t v48 = *v5;
          *(_DWORD *)(v48 + 8) = *(_DWORD *)(*v5 + 8) + 1;
          TokenListGetTokenAtOffset(v48, 0);
          uint64_t v47 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
          *((void *)v7 + 2) = v47;
        }
        uint64_t v49 = malloc_type_malloc(0x20uLL, 0x1060040C3D0B2E6uLL);
        v49[12] = 1;
        *((void *)v49 + 1) = 0;
        *(_DWORD *)uint64_t v49 = 0;
        *(void *)uint64_t v47 = v49;
        v47[2] = 4;
        CFRange v50 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
        *(void *)(*(void *)v47 + 8) = v50;
        **(_DWORD **)uint64_t v47 = 0;
        while (TokenListGetTokenAtOffset(*v5, 0) && *(_DWORD *)TokenListGetTokenAtOffset(*v5, 0) != 9)
        {
          size_t v51 = (CFStringRef *)TokenListGetTokenAtOffset(*v5, 0);
          CFStringAppend(v50, v51[1]);
          uint64_t v52 = *v5;
          *(_DWORD *)(v52 + 8) = *(_DWORD *)(*v5 + 8) + 1;
          TokenListGetTokenAtOffset(v52, 0);
        }
        if (!TokenListGetTokenAtOffset(*v5, 0)) {
          return v7;
        }
        *((void *)v7 + 3) = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
        CFNumberRef v53 = TokenListGetTokenAtOffset(*v5, 0);
        ++v53[12];
        uint64_t v54 = *((void *)v7 + 3);
        *(void *)uint64_t v54 = v53;
        *(_DWORD *)(v54 + 8) = 7;
LABEL_76:
        uint64_t v55 = *v5;
        *(_DWORD *)(v55 + 8) = *(_DWORD *)(*v5 + 8) + 1;
        TokenListGetTokenAtOffset(v55, 0);
        return v7;
      case 0xA:
        uint64_t v64 = 0;
        *(void *)chars = TokenAtOffset[1];
        char v65 = chars;
        uint64_t v66 = 0;
        uint64_t v67 = v5[2];
        CFStringRef v7 = (_DWORD *)ParseSpace(&v65);
        goto LABEL_76;
      default:
        return v7;
    }
    while (2)
    {
      if ((v11 & 1) == 0)
      {
        CFStringRef v12 = (CFStringRef *)TokenListGetTokenAtOffset(*v5, 0);
        if (v12)
        {
          uint64_t v13 = v12;
          uint64_t v14 = 0;
LABEL_7:
          char v11 = 1;
          switch(*(_DWORD *)v13)
          {
            case 1:
              if (a2)
              {
                uint64_t v26 = *(void *)v7;
                CFDateRef v27 = *(const void **)(*(void *)v7 + 8);
                CFStringRef v28 = CFStringCreateWithFormat(alloc, 0, @"%@:%@", a2, v27);
                if (_fieldPairToMaxWordCountDictionary) {
                  BOOL v29 = v28 == 0;
                }
                else {
                  BOOL v29 = 1;
                }
                if (v29
                  || (uint64_t Value = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)_fieldPairToMaxWordCountDictionary, v28),
                      Value < 2))
                {
                  int v40 = 0;
                }
                else
                {
                  uint64_t v59 = v26;
                  uint64_t v60 = v7;
                  CFStringRef v61 = v28;
                  CFTypeRef cf = (CFTypeRef)Value;
                  if (Value <= 2) {
                    uint64_t v31 = 2;
                  }
                  else {
                    uint64_t v31 = Value;
                  }
                  int v32 = 1;
                  int64_t v33 = 1;
                  while (TokenListGetTokenAtOffset(*v5, v32 - 1)
                       && *(_DWORD *)TokenListGetTokenAtOffset(*v5, v32 - 1) == 1
                       && TokenListGetTokenAtOffset(*v5, v32)
                       && !*(_DWORD *)TokenListGetTokenAtOffset(*v5, v32))
                  {
                    ++v33;
                    v32 += 2;
                    if (v31 == v33)
                    {
                      int64_t v33 = (int64_t)cf;
                      break;
                    }
                  }
                  if (v33 < 2)
                  {
                    int v40 = 0;
                  }
                  else
                  {
                    CFTypeRef cfa = v27;
                    CFStringRef v34 = malloc_type_calloc(v33, 8uLL, 0x100004000313F17uLL);
                    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(alloc, 0, v61);
                    *CFStringRef v34 = CFStringGetLength(MutableCopy);
                    chars[0] = 32;
                    int v36 = 1;
                    for (uint64_t i = 1; i != v33; ++i)
                    {
                      CFStringAppendCharacters(MutableCopy, chars, 1);
                      uint64_t v38 = (CFStringRef *)TokenListGetTokenAtOffset(*v5, v36);
                      CFStringAppend(MutableCopy, v38[1]);
                      v34[i] = CFStringGetLength(MutableCopy);
                      v36 += 2;
                    }
                    uint64_t v39 = &v34[v33 - 1];
                    while (!_keywordsDictionary
                         || !CFDictionaryContainsKey((CFDictionaryRef)_keywordsDictionary, MutableCopy))
                    {
                      --v33;
                      v69.CFIndex location = *(v39 - 1);
                      v69.CFIndex length = *v39 - v69.location;
                      CFStringDelete(MutableCopy, v69);
                      --v39;
                      if (v33 + 1 <= 2)
                      {
                        int v40 = 0;
                        goto LABEL_64;
                      }
                    }
                    v70.CFIndex location = CFStringGetLength(a2) + 1;
                    v70.CFIndex length = *v39 - v70.location;
                    *(void *)(v59 + 8) = CFStringCreateWithSubstring(alloc, MutableCopy, v70);
                    CFRelease(cfa);
                    if (v33 >= 2)
                    {
                      for (uint64_t j = 1; j != v33; ++j)
                      {
                        uint64_t v42 = *v5;
                        *(_DWORD *)(v42 + 8) = *(_DWORD *)(*v5 + 8) + 1;
                        TokenListGetTokenAtOffset(v42, 0);
                        uint64_t v43 = *v5;
                        *(_DWORD *)(v43 + 8) = *(_DWORD *)(*v5 + 8) + 1;
                        TokenListGetTokenAtOffset(v43, 0);
                      }
                    }
                    int v40 = 1;
LABEL_64:
                    CFRelease(MutableCopy);
                    free(v34);
                  }
                  CFStringRef v7 = v60;
                  CFStringRef v28 = v61;
                }
                CFRelease(v28);
                BOOL v10 = v40 != 0;
                char v11 = 1;
              }
              else if ((a3 & 1) == 0 {
                     && TokenListGetTokenAtOffset(*v5, 1)
              }
                     && (!*(_DWORD *)TokenListGetTokenAtOffset(*v5, 1)
                      || *(_DWORD *)TokenListGetTokenAtOffset(*v5, 1) == 5
                      && (!TokenListGetTokenAtOffset(*v5, 2) || *(_DWORD *)TokenListGetTokenAtOffset(*v5, 2) == 1)))
              {
                if (!TokenListGetTokenAtOffset(*v5, 2)) {
                  goto LABEL_29;
                }
                int v15 = *(_DWORD *)TokenListGetTokenAtOffset(*v5, 2);
                if (v15 == 8)
                {
                  uint64_t v22 = (const __CFString **)TokenListGetTokenAtOffset(*v5, 1);
                  if ((StringIsShortcutWithContext(v22[1], (uint64_t)v5) & 1) == 0)
                  {
LABEL_29:
                    CFStringAppend(Mutable, @" ");
                    uint64_t v23 = *v5;
                    *(_DWORD *)(v23 + 8) = *(_DWORD *)(*v5 + 8) + 1;
                    TokenListGetTokenAtOffset(v23, 0);
                    int v24 = (CFStringRef *)TokenListGetTokenAtOffset(*v5, 0);
                    CFStringAppend(Mutable, v24[1]);
                    uint64_t v25 = *v5;
                    *(_DWORD *)(v25 + 8) = *(_DWORD *)(*v5 + 8) + 1;
                    TokenListGetTokenAtOffset(v25, 0);
                    BOOL v10 = 1;
                    goto LABEL_30;
                  }
                }
                else if ((v15 - 6) >= 2)
                {
                  goto LABEL_29;
                }
              }
LABEL_32:
              uint64_t v5 = v14;
              if (!v14) {
                return v7;
              }
              continue;
            case 2:
            case 3:
            case 6:
            case 7:
              goto LABEL_32;
            case 8:
              if (v10 || (StringIsShortcutWithContext(Mutable, (uint64_t)v5) & 1) == 0) {
                goto LABEL_21;
              }
              BOOL v10 = 0;
              goto LABEL_32;
            case 9:
              CFStringAppend(Mutable, v13[1]);
              do
              {
                uint64_t v17 = *v5;
                *(_DWORD *)(v17 + 8) = *(_DWORD *)(*v5 + 8) + 1;
                TokenListGetTokenAtOffset(v17, 0);
                CFStringRef v18 = (CFStringRef *)TokenListGetTokenAtOffset(*v5, 0);
                if (!v18) {
                  break;
                }
                int v19 = *(_DWORD *)v18;
                CFStringAppend(Mutable, v18[1]);
              }
              while (v19 != 9);
              goto LABEL_22;
            case 0xA:
              *(void *)chars = 0;
              uint64_t v64 = 0;
              *(void *)chars = v13[1];
              uint64_t v20 = v5[2];
              char v65 = chars;
              uint64_t v66 = 0;
              uint64_t v67 = v20;
              uint64_t v21 = *v5;
              *(_DWORD *)(v21 + 8) = *(_DWORD *)(*v5 + 8) + 1;
              TokenListGetTokenAtOffset(v21, 0);
              uint64_t v14 = v5;
              uint64_t v5 = (uint64_t *)&v65;
              goto LABEL_30;
            default:
LABEL_21:
              CFStringAppend(Mutable, v13[1]);
LABEL_22:
              uint64_t v16 = *v5;
              *(_DWORD *)(v16 + 8) = *(_DWORD *)(*v5 + 8) + 1;
              TokenListGetTokenAtOffset(v16, 0);
LABEL_30:
              uint64_t v13 = (CFStringRef *)TokenListGetTokenAtOffset(*v5, 0);
              if (v13) {
                goto LABEL_7;
              }
              char v11 = 0;
              goto LABEL_32;
          }
        }
      }
      break;
    }
  }
  return v7;
}

CFIndex StringIsShortcutWithContext(const __CFString *a1, uint64_t a2)
{
  CFIndex result = CFStringGetLength(a1);
  if (result)
  {
    CFDictionaryRef v5 = *(const __CFDictionary **)(a2 + 16);
    if (!v5)
    {
      CFAllocatorRef v6 = *(uint64_t (**)(void))(a2 + 8);
      if (v6)
      {
        CFDictionaryRef v5 = (const __CFDictionary *)v6();
        *(void *)(a2 + 16) = v5;
      }
      else
      {
        CFDictionaryRef v5 = 0;
      }
    }
    CFStringRef v7 = *(uint64_t (**)(void))(a2 + 8);
    CFIndex result = CFStringGetLength(a1);
    if (result)
    {
      unint64_t v8 = result;
      BOOL v9 = 0;
      if (!v5 && v7)
      {
        CFDictionaryRef v5 = (const __CFDictionary *)v7();
        BOOL v9 = v5 != 0;
      }
      if (v5 && CFDictionaryContainsKey(v5, a1)
        || v8 >= 7
        && ((v11.CFIndex location = 0,
             v11.CFIndex length = 7,
             CFStringCompareWithOptions(a1, @"kMDItem", v11, 0) == kCFCompareEqualTo)
         || v8 >= 8
         && (v12.CFIndex location = 0,
             v12.CFIndex length = 8,
             CFStringCompareWithOptions(a1, @"_kMDItem", v12, 0) == kCFCompareEqualTo)))
      {
        uint64_t v10 = 1;
        CFIndex result = 1;
        if (!v9) {
          return result;
        }
      }
      else
      {
        uint64_t v10 = 0;
        CFIndex result = 0;
        if (!v9) {
          return result;
        }
      }
      CFRelease(v5);
      return v10;
    }
  }
  return result;
}

CFTypeRef nodeAppend(uint64_t a1, const void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
  long long v5 = *(_OWORD *)(a1 + 16);
  *uint64_t v4 = *(_OWORD *)a1;
  v4[1] = v5;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v4;
  *(void *)a1 = 0;
  CFAllocatorRef v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
  *(void *)(a1 + 24) = v6;
  unint64_t v6[2] = 4;
  CFStringRef v7 = malloc_type_malloc(0x20uLL, 0x1060040C3D0B2E6uLL);
  v7[12] = 1;
  *((void *)v7 + 1) = 0;
  *(_DWORD *)CFStringRef v7 = 0;
  **(void **)(a1 + 24) = v7;
  CFTypeRef result = CFRetain(a2);
  *(void *)(**(void **)(a1 + 24) + 8) = result;
  ***(_DWORD ***)(a1 + 24) = 0;
  return result;
}

CFTypeRef nodePrepend(uint64_t a1, const void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
  long long v5 = *(_OWORD *)(a1 + 16);
  *uint64_t v4 = *(_OWORD *)a1;
  v4[1] = v5;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = v4;
  *(void *)a1 = 0;
  CFAllocatorRef v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405028CB4AuLL);
  *(void *)(a1 + 16) = v6;
  unint64_t v6[2] = 4;
  CFStringRef v7 = malloc_type_malloc(0x20uLL, 0x1060040C3D0B2E6uLL);
  v7[12] = 1;
  *((void *)v7 + 1) = 0;
  *(_DWORD *)CFStringRef v7 = 0;
  **(void **)(a1 + 16) = v7;
  CFTypeRef result = CFRetain(a2);
  *(void *)(**(void **)(a1 + 16) + 8) = result;
  ***(_DWORD ***)(a1 + 16) = 0;
  return result;
}

void ___init_parser_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFPreferencesGetAppBooleanValue(@"QPQueryParserLoggingEnabled", (CFStringRef)*MEMORY[0x1E4F1D3B8], 0);
  gQueryParserEnabled = 1;
  MainBundle = CFBundleGetMainBundle();
  if (MainBundle)
  {
    identifier = (uint64_t)CFBundleGetIdentifier(MainBundle);
    if (identifier) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (!identifier) {
LABEL_3:
  }
    identifier = @"com.apple.query.search";
LABEL_4:
  _qpUpdateParserOptions(*(void *)(a1 + 32), 0);
  uint64_t v3 = sQPQueryParserCopyDefaultOptionsForContext(qpContextIdentifier);
  if (v3)
  {
    uint64_t v4 = (const void *)v3;
    uint64_t v7 = 0;
    unint64_t v8 = &v7;
    uint64_t v9 = 0x2000000000;
    long long v5 = (uint64_t (*)(const void *))getQPQueryParserCreateSymbolLoc_ptr;
    uint64_t v10 = getQPQueryParserCreateSymbolLoc_ptr;
    if (!getQPQueryParserCreateSymbolLoc_ptr)
    {
      ParserLibrary = (void *)QueryParserLibrary();
      v8[3] = (uint64_t)dlsym(ParserLibrary, "QPQueryParserCreate");
      getQPQueryParserCreateSymbolLoc_ptr = (_UNKNOWN *)v8[3];
      long long v5 = (uint64_t (*)(const void *))v8[3];
    }
    _Block_object_dispose(&v7, 8);
    if (!v5) {
      _qpUpdateParserOptions_cold_1();
    }
    gQueryParser = v5(v4);
    _qpUpdateParserOptions((CFIndex)v4, 1);
    CFRelease(v4);
  }
}

uint64_t sQPQueryParserCopyDefaultOptionsForContext(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 0;
  CFAllocatorRef v6 = &v5;
  uint64_t v7 = 0x2000000000;
  CFNumberFormatterRef v2 = (uint64_t (*)(uint64_t))getQPQueryParserCopyDefaultOptionsForContextSymbolLoc_ptr;
  unint64_t v8 = getQPQueryParserCopyDefaultOptionsForContextSymbolLoc_ptr;
  if (!getQPQueryParserCopyDefaultOptionsForContextSymbolLoc_ptr)
  {
    ParserLibrary = (void *)QueryParserLibrary();
    _OWORD v6[3] = (uint64_t)dlsym(ParserLibrary, "QPQueryParserCopyDefaultOptionsForContext");
    getQPQueryParserCopyDefaultOptionsForContextSymbolLoc_ptr = (_UNKNOWN *)v6[3];
    CFNumberFormatterRef v2 = (uint64_t (*)(uint64_t))v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v2) {
    _qpUpdateParserOptions_cold_1();
  }
  return v2(a1);
}

void *__getQPQueryParserCopyDefaultOptionsForContextSymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  CFTypeRef result = dlsym(ParserLibrary, "QPQueryParserCopyDefaultOptionsForContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getQPQueryParserCopyDefaultOptionsForContextSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

uint64_t QueryParserLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!QueryParserLibraryCore_frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    unint64_t v3[2] = 0x40000000;
    v3[3] = __QueryParserLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_tmp_389;
    v3[5] = v3;
    long long v4 = xmmword_1E5AEEE18;
    uint64_t v5 = 0;
    QueryParserLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = QueryParserLibraryCore_frameworkLibrary;
  uint64_t v1 = (void *)v3[0];
  if (!QueryParserLibraryCore_frameworkLibrary)
  {
    uint64_t v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __QueryParserLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  QueryParserLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getQPQueryParserCreateSymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "QPQueryParserCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getQPQueryParserCreateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getQPQueryParserSetOptionsSymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "QPQueryParserSetOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getQPQueryParserSetOptionsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t handleDidEnterBackgroundNotification()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&gQueryParserLock);
  uint64_t v0 = (void *)gQueryParserAutomaticCoolDownBlock;
  if (gQueryParserAutomaticCoolDownBlock)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFNumberFormatterRef v2 = 0;
      _os_log_impl(&dword_1A334F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "[automatic cooldown] immediately cooling down due to didEnterBackground", v2, 2u);
      uint64_t v0 = (void *)gQueryParserAutomaticCoolDownBlock;
    }
    dispatch_block_cancel(v0);
    _Block_release((const void *)gQueryParserAutomaticCoolDownBlock);
    gQueryParserAutomaticCoolDownBlock = 0;
    sQPQueryParserCooldown(gQueryParser);
  }
  return pthread_mutex_unlock(&gQueryParserLock);
}

void *__getkQPParseResultQUOutputKeySymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPParseResultQUOutputKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkQPParseResultQUOutputKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkQPParseResultConfidenceKeySymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPParseResultConfidenceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkQPParseResultConfidenceKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkQPParseResultDescriptionKeySymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPParseResultDescriptionKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkQPParseResultDescriptionKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkQPParseResultAttributedParseKeySymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPParseResultAttributedParseKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkQPParseResultAttributedParseKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkQPParseResultRankCategoriesKeySymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPParseResultRankCategoriesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkQPParseResultRankCategoriesKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkQPParseResultSortModifierKeySymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPParseResultSortModifierKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkQPParseResultSortModifierKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkQPParseResultTokenCountKeySymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPParseResultTokenCountKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkQPParseResultTokenCountKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkQPParseResultSuggestionKeySymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPParseResultSuggestionKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkQPParseResultSuggestionKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkQPParseResultAttributeCountKeySymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPParseResultAttributeCountKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkQPParseResultAttributeCountKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getQPQueryParserParseSymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "QPQueryParserParse");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getQPQueryParserParseSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _parseTreeFacetsApplyDoWhileBlock(uint64_t *a1, const __CFString *a2, CFRange *a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  int v8 = *((_DWORD *)a1 + 2);
  if (v8 == 4)
  {
    uint64_t result = _parseTreeFacetsApplyDoWhileBlock(a1[2], a2, a3, a4);
    if (!result) {
      return result;
    }
    CFIndex location = a3->location;
    v18.CFIndex location = a3->location;
    uint64_t v14 = *a1;
    if (*a1)
    {
      CFIndex v15 = location;
      if (*(_DWORD *)v14 != 10)
      {
        _skipText(*(CFStringRef *)(v14 + 8), a2, a3);
        CFIndex v15 = a3->location;
      }
    }
    else
    {
      CFIndex v15 = location;
    }
    v18.CFIndex length = v15 - location;
    _trimWhitespaceFromRange(a2, &v18);
    return (v18.length < 1
         || ((*(uint64_t (**)(uint64_t, uint64_t, void, CFIndex))(a4 + 16))(a4, -1, 0, v18.location) & 1) != 0)
        && (_parseTreeFacetsApplyDoWhileBlock(a1[3], a2, a3, a4) & 1) != 0;
  }
  if (v8 == 3)
  {
    v18.CFIndex location = a3->location;
    _skipParseTree(a1[2], a2, (int64x2_t *)a3);
    v18.CFIndex length = a3->location - v18.location;
    _trimWhitespaceFromRange(a2, &v18);
    uint64_t v9 = *a1;
    if (*a1 && *(_DWORD *)v9 != 10) {
      _skipText(*(CFStringRef *)(v9 + 8), a2, a3);
    }
    v17.CFIndex location = a3->location;
    _skipParseTree(a1[3], a2, (int64x2_t *)a3);
    v17.CFIndex length = a3->location - v17.location;
    _trimWhitespaceFromRange(a2, &v17);
    if (v18.length >= 1 && v17.length >= 1)
    {
      uint64_t v10 = *(uint64_t (**)(uint64_t, CFIndex))(a4 + 16);
      CFIndex v11 = v18.location;
      return v10(a4, v11);
    }
    return 1;
  }
  uint64_t v16 = *a1;
  if (*a1 && *(_DWORD *)v16 != 10) {
    _skipText(*(CFStringRef *)(v16 + 8), a2, a3);
  }
  uint64_t result = _parseTreeFacetsApplyDoWhileBlock(a1[2], a2, a3, a4);
  if (result)
  {
    uint64_t result = _parseTreeFacetsApplyDoWhileBlock(a1[3], a2, a3, a4);
    if (result) {
      return 1;
    }
  }
  return result;
}

uint64_t _skipParseTree(uint64_t result, const __CFString *a2, int64x2_t *a3)
{
  if (result)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t result = _skipParseTree(*(void *)(v5 + 16), a2, a3);
      if (*(_DWORD *)(v5 + 8) == 7) {
        uint64_t result = (uint64_t)_skipOptionalQuote(a2, a3);
      }
      if (*(void *)v5) {
        uint64_t result = _skipText(*(CFStringRef *)(*(void *)v5 + 8), a2, (CFRange *)a3);
      }
      if (*(_DWORD *)(v5 + 8) == 7) {
        uint64_t result = (uint64_t)_skipOptionalQuote(a2, a3);
      }
      uint64_t v5 = *(void *)(v5 + 24);
    }
    while (v5);
  }
  return result;
}

uint64_t _trimWhitespaceFromRange(const __CFString *a1, CFRange *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  result.CFIndex location = 0;
  result.CFIndex length = 0;
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  if (CFStringFindCharacterFromSet(a1, Predefined, *a2, 8uLL, &result))
  {
    v5.CFIndex location = result.length + result.location;
    v5.CFIndex length = a2->length - result.length;
    a2->CFIndex location = result.length + result.location;
    a2->CFIndex length = v5.length;
  }
  else
  {
    CFRange v5 = *a2;
  }
  uint64_t CharacterFromSet = CFStringFindCharacterFromSet(a1, Predefined, v5, 0xCuLL, &result);
  if (CharacterFromSet) {
    a2->length -= result.length;
  }
  return CharacterFromSet;
}

uint64_t _skipText(CFStringRef stringToFind, CFStringRef theString, CFRange *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  result.CFIndex location = 0;
  result.CFIndex length = 0;
  uint64_t v4 = CFStringFindWithOptions(theString, stringToFind, *a3, 0x10uLL, &result);
  if (v4)
  {
    CFIndex v5 = a3->location - (result.length + result.location) + a3->length;
    a3->CFIndex location = result.length + result.location;
    a3->CFIndex length = v5;
  }
  return v4;
}

CFStringRef _skipOptionalQuote(const __CFString *result, int64x2_t *a2)
{
  if (a2->i64[1] >= 1)
  {
    CFRange result = (const __CFString *)CFStringGetCharacterAtIndex(result, a2->i64[0]);
    if ((result - 8220) < 2 || result == 34) {
      *a2 = vaddq_s64(*a2, (int64x2_t)xmmword_1A33A3FC0);
    }
  }
  return result;
}

void *__getQPQueryParserCancelSymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  CFRange result = dlsym(ParserLibrary, "QPQueryParserCancel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getQPQueryParserCancelSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getQPQueryParserPreheatSymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  CFRange result = dlsym(ParserLibrary, "QPQueryParserPreheat");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getQPQueryParserPreheatSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getQPQueryParserCooldownSymbolLoc_block_invoke(uint64_t a1)
{
  ParserLibrary = (void *)QueryParserLibrary();
  CFRange result = dlsym(ParserLibrary, "QPQueryParserCooldown");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getQPQueryParserCooldownSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *MDTokenizerCreate()
{
  return CIRetainIndexingTokenizer(3u);
}

void MDTokenizerDispose(uint64_t a1)
{
  CIReleaseIndexingTokenizer(a1);
}

void MDPurgeTokenizers()
{
  CIPurgeTokenizers();
}

void MDTokenizerGetTokenRangesWithTranscriptionOptional(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  v8[0] = a1;
  v8[1] = 0;
  uint64_t v8[2] = a5;
  v8[3] = a6;
  if (a7) {
    uint64_t v7 = (32 * ((a4 >> 1) & 1)) | 2;
  }
  else {
    uint64_t v7 = (16 * a4) & 0x20;
  }
  CITokenizerGetTokensNew(a1, a2, a3, v7, (void *)v7, 0, (uint64_t)v8);
}

uint64_t _MDTokenizerGetTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v12 = 0;
  __n128 v10 = 0uLL;
  uint64_t v11 = 0;
  __n128 MatchState = CITokenizerGetMatchState(*(void *)a4, &v10);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, void, void, unsigned __int8 *, __n128))(a4 + 8);
  if (v8) {
    v8(a1, a2, 0, *(void *)(a4 + 24), &v12, MatchState);
  }
  else {
    (*(void (**)(uint64_t, uint64_t, void, unint64_t, unint64_t, uint64_t, void, unsigned __int8 *, __n128))(a4 + 16))(a1, a2, 0, v10.n128_u64[0], v10.n128_u64[1], v11, *(void *)(a4 + 24), &v12, MatchState);
  }
  return v12;
}

uint64_t _MDTokenizerGetSubTokens(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v14 = 0;
  __n128 v12 = 0uLL;
  uint64_t v13 = 0;
  __n128 MatchState = CITokenizerGetMatchState(*(void *)a4, &v12);
  if (a3 == 1) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 1;
  }
  __n128 v10 = *(void (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int8 *, __n128))(a4 + 8);
  if (v10) {
    v10(a1, a2, v9, *(void *)(a4 + 24), &v14, MatchState);
  }
  else {
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, void, unsigned __int8 *, __n128))(a4 + 16))(a1, a2, v9, v12.n128_u64[0], v12.n128_u64[1], v13, *(void *)(a4 + 24), &v14, MatchState);
  }
  return v14;
}

void MDTokenizerGetTokenRanges(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  v6[0] = a1;
  v6[1] = 0;
  unint64_t v6[2] = a5;
  _OWORD v6[3] = a6;
  CITokenizerGetTokensNew(a1, a2, a3, (16 * a4) & 0x20, (void *)((16 * a4) & 0x20), 0, (uint64_t)v6);
}

void MDTokenizerGetTokens(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  v6[0] = a1;
  v6[1] = a5;
  unint64_t v6[2] = 0;
  _OWORD v6[3] = a6;
  CITokenizerGetTokensNew(a1, a2, a3, (16 * a4) & 0x20, (void *)((16 * a4) & 0x20), 0, (uint64_t)v6);
}

uint64_t x_openat(int a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9)
{
  if ((a3 & 0x200) != 0) {
    uint64_t v12 = a9;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t result = openat(a1, a2, a3, v12);
  if (result == -1)
  {
    unsigned __int8 v14 = __error();
    uint64_t result = 0xFFFFFFFFLL;
    if ((a3 & 0x20000000) != 0 && *v14 == 22) {
      return openat(a1, a2, a3 & 0xDFFFFFFF, v12);
    }
  }
  return result;
}

unsigned char *faccurate_realpath(int a1, unsigned char *a2)
{
  CFNumberFormatterRef v2 = a2;
  if (fcntl(a1, 50, a2) < 0 || !*v2) {
    return 0;
  }
  return v2;
}

uint64_t nosymlink_open(char *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9)
{
  if ((a2 & 0x200) != 0) {
    unsigned __int16 v9 = a9;
  }
  else {
    unsigned __int16 v9 = 0;
  }
  return x_openat(-1, a1, a2 | 0x20000000u, a4, a5, a6, a7, a8, v9);
}

uint64_t md_fstat_real(int a1, stat *a2)
{
  uint64_t v4 = fstatat(a1, 0, a2, 1536);
  if (!v4 || *__error() != 22) {
    return v4;
  }

  return fstat(a1, a2);
}

void _log_fault_for_malloc_failure()
{
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
    _log_fault_for_malloc_failure_cold_1();
  }
}

uint64_t QueryTokens(CFStringRef str, CFRange range, uint64_t (*a3)(void, void, void, void), uint64_t a4)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v7 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], str, range);
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v6, 0, v7);
  CFRelease(v7);
  CFStringNormalize(MutableCopy, kCFStringNormalizationFormD);
  int Length = CFStringGetLength(MutableCopy);
  LODWORD(v7) = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  pthread_mutex_lock(&sQueryMutex);
  __gQueryCallback = a3;
  __gQueryContext = a4;
  __gTermBufferLen = 0;
  __gTermBuffer = 0;
  size_t v10 = (int)v7 + 1;
  sInputBuffer = (uint64_t)malloc_type_malloc(v10, 0x151C4E0DuLL);
  if (sInputBuffer)
  {
    __gTermBuffer = (uint64_t)malloc_type_malloc(v10, 0x44E5473CuLL);
    if (__gTermBuffer)
    {
      if (CFStringGetCString(MutableCopy, (char *)sInputBuffer, v10, 0x8000100u))
      {
        sInputBufferint Length = strlen((const char *)sInputBuffer);
        sInputBufferPosition = 0;
        QueryScannerReset();
        while (Querylex())
          ;
      }
    }
  }
  CFRelease(MutableCopy);
  if (sInputBuffer) {
    free((void *)sInputBuffer);
  }
  if (__gTermBuffer) {
    free((void *)__gTermBuffer);
  }
  sInputBuffer = 0;
  sInputBufferint Length = 0;
  sInputBufferPosition = 0;
  __gQueryCallback = 0;
  __gQueryContext = 0;
  __gTermBuffer = 0;
  __gTermBufferLen = 0;

  return pthread_mutex_unlock(&sQueryMutex);
}

size_t QueryScannerReadChars(void *a1, unsigned int a2)
{
  if (!sInputBuffer) {
    return 0;
  }
  int v2 = sInputBufferPosition;
  if ((int)(sInputBufferPosition + a2) <= sInputBufferLength) {
    size_t v3 = a2;
  }
  else {
    size_t v3 = (sInputBufferLength - sInputBufferPosition);
  }
  if (v3)
  {
    memcpy(a1, (const void *)(sInputBuffer + sInputBufferPosition), v3);
    sInputBufferPosition = v3 + v2;
  }
  return v3;
}

void *db_query_tree_apply_block_with_meta(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v42[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFAllocatorRef v6 = a1;
    unint64_t v36 = 0;
    unint64_t v37 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v39 = 0;
    ptr = 0;
    uint64_t v41 = 0;
    uint64_t v38 = a2;
    while (1)
    {
      v42[0] = a4;
      uint64_t v11 = (void *)*v6;
      uint64_t v12 = v6[1];
      uint64_t v13 = (char *)(*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
      uint64_t v19 = v13;
      if (a3) {
        break;
      }
      unint64_t v21 = v9;
      if (v12) {
        goto LABEL_19;
      }
      unint64_t v21 = v9;
      if (v11)
      {
LABEL_27:
        uint64_t v25 = v42;
        goto LABEL_41;
      }
LABEL_29:
      if (v8)
      {
        if (v39[v8 - 1] == v10)
        {
          uint64_t v26 = &ptr[8 * v21 - 24];
          unint64_t v27 = v21;
          while (1)
          {
            unint64_t v21 = v27 - 2;
            if (v27 <= 2) {
              db_query_tree_apply_block_with_meta_cold_4((uint64_t)v13, (uint64_t)v6, v14, a4, v15, v16, v17, v18);
            }
            uint64_t v13 = (char *)(*(uint64_t (**)(uint64_t, void, void, void))(a3 + 16))(a3, *(void *)v26, *((void *)v26 + 1), *((void *)v26 + 2));
            uint64_t v19 = v13;
            *(void *)uint64_t v26 = v13;
            unint64_t v28 = v8 - 1;
            if (v8 == 1) {
              break;
            }
            uint64_t v29 = v39[v8 - 2];
            v26 -= 16;
            --v8;
            v27 -= 2;
            if (v29 != v10) {
              goto LABEL_39;
            }
          }
          unint64_t v21 = v27 - 3;
          if (!v10) {
            goto LABEL_44;
          }
        }
        else
        {
          unint64_t v28 = v8;
LABEL_39:
          if (!v10)
          {
LABEL_44:
            unint64_t v8 = v28;
LABEL_45:
            if (v8)
            {
              int v32 = v39;
              int64_t v33 = &ptr[8 * v21 - 24];
              do
              {
                BOOL v34 = v21 > 2;
                v21 -= 2;
                if (!v34) {
                  db_query_tree_apply_block_with_meta_cold_3((uint64_t)v13, (uint64_t)v6, v14, a4, v15, v16, v17, v18);
                }
                --v8;
                uint64_t v13 = (char *)(*(uint64_t (**)(uint64_t, void, void, void))(a3 + 16))(a3, *(void *)v33, *((void *)v33 + 1), *((void *)v33 + 2));
                *(void *)int64_t v33 = v13;
                v33 -= 16;
              }
              while (v8);
              uint64_t v19 = v13;
              --v21;
              if (!v39)
              {
LABEL_56:
                free(v41);
                free(ptr);
                free(v32);
                return v19;
              }
            }
            else
            {
              int v32 = v39;
              if (!v39) {
                goto LABEL_56;
              }
            }
            if (v21) {
              db_query_tree_apply_block_with_meta_cold_2((uint64_t)v13, (uint64_t)v6, v14, a4, v15, v16, v17, v18);
            }
            if (v10) {
              db_query_tree_apply_block_with_meta_cold_1((uint64_t)v13, (uint64_t)v6, v14, a4, v15, v16, v17, v18);
            }
            goto LABEL_56;
          }
        }
      }
      else
      {
        unint64_t v28 = 0;
        if (!v10) {
          goto LABEL_44;
        }
      }
      --v10;
      CFDictionaryRef v30 = &v41[16 * v10];
      uint64_t v31 = *(void **)v30;
      uint64_t v25 = (uint64_t *)(v30 + 8);
      uint64_t v11 = v31;
      unint64_t v8 = v28;
LABEL_41:
      a4 = *v25;
      CFAllocatorRef v6 = v11;
      unint64_t v9 = v21;
      a2 = v38;
      if (!v11) {
        goto LABEL_45;
      }
    }
    if (v9 >= v37)
    {
      uint64_t v20 = v37 ? 2 * v37 : 4;
      uint64_t v13 = (char *)malloc_type_realloc(ptr, 8 * v20, 0x792B06CAuLL);
      ptr = v13;
      unint64_t v37 = v20;
      if (!v13)
      {
        _log_fault_for_malloc_failure();
        ptr = 0;
      }
    }
    unint64_t v21 = v9 + 1;
    *(void *)&ptr[8 * v9] = v19;
    if (v12)
    {
      uint64_t v22 = v36;
      if (v8 >= v36)
      {
        uint64_t v22 = v36 ? 2 * v36 : 4;
        uint64_t v13 = (char *)malloc_type_realloc(v39, 8 * v22, 0x792B06CAuLL);
        uint64_t v39 = v13;
        if (!v13)
        {
          _log_fault_for_malloc_failure();
          uint64_t v39 = 0;
        }
      }
      unint64_t v36 = v22;
      v39[v8++] = v10;
LABEL_19:
      if (v10 >= v7)
      {
        if (v7) {
          v7 *= 2;
        }
        else {
          unint64_t v7 = 4;
        }
        uint64_t v13 = (char *)malloc_type_realloc(v41, 16 * v7, 0x792B06CAuLL);
        uint64_t v41 = v13;
        if (!v13)
        {
          _log_fault_for_malloc_failure();
          uint64_t v41 = 0;
        }
      }
      uint64_t v23 = v42[0];
      int v24 = &v41[16 * v10++];
      *(void *)int v24 = v12;
      *((void *)v24 + 1) = v23;
    }
    if (v11) {
      goto LABEL_27;
    }
    goto LABEL_29;
  }
  return 0;
}

void *db_query_tree_apply_block(void *a1, void *a2, uint64_t a3)
{
  void v5[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    size_t v3 = a2;
    a2 = v5;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    unint64_t v5[2] = __db_query_tree_apply_block_block_invoke;
    v5[3] = &unk_1E5AEF180;
    v5[4] = v3;
  }
  return db_query_tree_apply_block_with_meta(a1, (uint64_t)a2, a3, 0);
}

uint64_t __db_query_tree_apply_block_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v1();
}

uint64_t __apply_demorgans_law_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a2 + 48);
  if (v2 <= 3)
  {
    if (v2 == 1)
    {
      __int16 v3 = 2;
      goto LABEL_13;
    }
    if (v2 == 2)
    {
      __int16 v3 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    switch(v2)
    {
      case 4u:
        uint64_t v4 = *(void *)(a2 + 16);
        uint64_t v5 = *(unsigned int *)(v4 + 24);
        if ((v5 - 16) >= 0xFFFFFFF1) {
          int v6 = dword_1A33A3FD0[v5];
        }
        else {
          int v6 = 0;
        }
        *(_DWORD *)(v4 + 24) = v6;
        break;
      case 0x10u:
        __int16 v3 = 32;
        goto LABEL_13;
      case 0x20u:
        __int16 v3 = 16;
LABEL_13:
        *(_WORD *)(a2 + 48) = v3;
        break;
    }
  }
  return a2;
}

void db_free_qp(int *a1)
{
  free_qp(a1);
}

void free_qp(int *a1)
{
  unsigned int v2 = (void *)*((void *)a1 + 21);
  if (v2)
  {
    if (a1[10] >= 1)
    {
      uint64_t v3 = 0;
      do
        free(*(void **)(*((void *)a1 + 21) + 8 * v3++));
      while (v3 < a1[10]);
      unsigned int v2 = (void *)*((void *)a1 + 21);
    }
    free(v2);
    *((void *)a1 + 21) = 0;
    uint64_t v4 = (void *)*((void *)a1 + 34);
    if (v4)
    {
      free(v4);
      *((void *)a1 + 34) = 0;
    }
  }
  uint64_t v5 = (void *)*((void *)a1 + 37);
  if (v5)
  {
    free(v5);
    *((void *)a1 + 37) = 0;
  }
  int v6 = (void *)*((void *)a1 + 36);
  if (v6)
  {
    free(v6);
    *((void *)a1 + 36) = 0;
  }
  if (*(void *)a1) {
    free(*(void **)a1);
  }
  *(void *)a1 = 0;
  unint64_t v7 = (void *)*((void *)a1 + 17);
  if (v7) {
    free(v7);
  }
  *((void *)a1 + 17) = 0;
  a1[36] = 0;
  unint64_t v8 = (void *)*((void *)a1 + 9);
  if (v8) {
    free(v8);
  }
  *((void *)a1 + 9) = 0;
  unint64_t v9 = (void *)*((void *)a1 + 11);
  if (v9) {
    free(v9);
  }
  if (*((void *)a1 + 15))
  {
    unint64_t v10 = (void (*)(void))*((void *)a1 + 16);
    if (v10)
    {
      v10();
      *((void *)a1 + 15) = 0;
    }
  }
  uint64_t v11 = (char *)*((void *)a1 + 14);
  if (v11)
  {
    for (uint64_t i = 0; i != 384; i += 24)
    {
      uint64_t v13 = *(const void **)&v11[i + 8];
      if (v13) {
        CFRelease(v13);
      }
      uint64_t v14 = *(const void **)&v11[i + 16];
      if (v14) {
        CFRelease(v14);
      }
    }
    free(v11);
  }

  free(a1);
}

void *db_free_query_node(void *result)
{
  v1[5] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    v1[0] = MEMORY[0x1E4F143A8];
    v1[1] = 0x40000000;
    v1[2] = __db_query_tree_apply_block_block_invoke;
    v1[3] = &unk_1E5AEF180;
    v1[4] = &__block_literal_global_170;
    return db_query_tree_apply_block_with_meta(result, (uint64_t)v1, 0, 0);
  }
  return result;
}

uint64_t db_count_query_tree(void *a1)
{
  void v8[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  unint64_t v3[2] = __db_count_query_tree_block_invoke;
  v3[3] = &unk_1E5AEF1C8;
  v3[4] = &v4;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  uint64_t v8[2] = __db_query_tree_apply_block_block_invoke;
  v8[3] = &unk_1E5AEF180;
  v8[4] = v3;
  db_query_tree_apply_block_with_meta(a1, (uint64_t)v8, 0, 0);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t __db_count_query_tree_block_invoke(uint64_t a1, uint64_t a2)
{
  return a2;
}

unsigned __int16 *db_optimize_query_tree(void **a1)
{
  v7[5] = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *a1;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  unint64_t v7[2] = __db_query_tree_apply_block_block_invoke;
  v7[3] = &unk_1E5AEF180;
  v7[4] = &__block_literal_global_35;
  uint64_t result = (unsigned __int16 *)db_query_tree_apply_block_with_meta(v2, (uint64_t)v7, (uint64_t)&__block_literal_global_38, 0);
  uint64_t v4 = result;
  if (result)
  {
    int v5 = result[24];
    if (v5 == 32 || v5 == 16) {
      uint64_t result = (unsigned __int16 *)cleanup_children((uint64_t)result);
    }
  }
  *a1 = v4;
  return result;
}

uint64_t __db_optimize_query_tree_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 48);
  if (v3 == 32)
  {
    unint64_t v8 = *(int **)(a2 + 16);
    unint64_t v9 = v8 + 13;
    if (!v8) {
      unint64_t v9 = (_DWORD *)(a2 + 72);
    }
    *(_DWORD *)(a2 + 72) = *v9;
    if (v8)
    {
      free_qp(v8);
      *(void *)(a2 + 16) = 0;
    }
    cleanup_children(a2);
  }
  else if (v3 == 16)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    int v5 = (float *)(a2 + 72);
    if (v4) {
      uint64_t v6 = (_DWORD *)(v4 + 56);
    }
    else {
      uint64_t v6 = (_DWORD *)(a2 + 72);
    }
    *(_DWORD *)(a2 + 72) = *v6;
    cleanup_children(a2);
    uint64_t v7 = *(int **)(a2 + 16);
    if (v7)
    {
      free_qp(v7);
      *(void *)(a2 + 16) = 0;
    }
    if (*v5 != 0.0) {
      *(_WORD *)(a2 + 48) = 32;
    }
  }
  return a2;
}

void *cleanup_children(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(void **)a1;
  if (v2)
  {
    uint64_t v4 = MEMORY[0x1E4F143A8];
    uint64_t v5 = 0x40000000;
    uint64_t v6 = __db_query_tree_apply_block_block_invoke;
    uint64_t v7 = &unk_1E5AEF180;
    unint64_t v8 = &__block_literal_global_170;
    db_query_tree_apply_block_with_meta(v2, (uint64_t)&v4, 0, 0);
    *(void *)a1 = 0;
  }
  uint64_t result = *(void **)(a1 + 8);
  if (result)
  {
    uint64_t v4 = MEMORY[0x1E4F143A8];
    uint64_t v5 = 0x40000000;
    uint64_t v6 = __db_query_tree_apply_block_block_invoke;
    uint64_t v7 = &unk_1E5AEF180;
    unint64_t v8 = &__block_literal_global_170;
    uint64_t result = db_query_tree_apply_block_with_meta(result, (uint64_t)&v4, 0, 0);
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t __db_optimize_query_tree_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  *(void *)a2 = a3;
  *(void *)(a2 + 8) = a4;
  int v7 = *(unsigned __int16 *)(a2 + 48);
  if (v7 == 2)
  {
    if (a3)
    {
      if (a4)
      {
        int v9 = *(unsigned __int16 *)(a3 + 48);
        if (v9 != 16)
        {
          int v10 = *(unsigned __int16 *)(a4 + 48);
          if (v10 != 16)
          {
            if (v9 != 32 || v10 != 32)
            {
              if (v9 == 32)
              {
                uint64_t v27 = *(void *)(a3 + 16);
                if (v27) {
                  unint64_t v28 = (float *)(v27 + 52);
                }
                else {
                  unint64_t v28 = (float *)(a3 + 72);
                }
                float v29 = *(float *)(a2 + 72) + *v28;
                *(void *)(a2 + 8) = 0;
                db_free_query_node((void *)a2);
                *(float *)&double v30 = v29;
                add_bias(a4, v30);
                return a4;
              }
              if (v10 != 32) {
                return v6;
              }
              uint64_t v31 = *(void *)(a4 + 16);
              if (v31) {
                int v32 = (float *)(v31 + 52);
              }
              else {
                int v32 = (float *)(a4 + 72);
              }
              float v33 = *(float *)(a2 + 72) + *v32;
              *(void *)a2 = 0;
              db_free_query_node((void *)a2);
              *(float *)&double v34 = v33;
              add_bias(a3, v34);
              return a3;
            }
            float v20 = *(float *)(a2 + 72);
            if (v20 == 0.0) {
              float v20 = 0.0;
            }
            uint64_t v21 = *(void *)(a3 + 16);
            if (v21) {
              uint64_t v22 = (float *)(v21 + 52);
            }
            else {
              uint64_t v22 = (float *)(a3 + 72);
            }
            float v23 = v20 + *v22;
            uint64_t v24 = *(void *)(a4 + 16);
            if (v24) {
              uint64_t v25 = (float *)(v24 + 52);
            }
            else {
              uint64_t v25 = (float *)(a4 + 72);
            }
            float v26 = v23 + *v25;
            *(_WORD *)(a2 + 48) = 32;
            cleanup_children(a2);
            *(float *)(v6 + 72) = v26;
            return v6;
          }
        }
      }
    }
    goto LABEL_15;
  }
  if (v7 != 1) {
    return v6;
  }
  if (!a3 || (int v8 = *(unsigned __int16 *)(a3 + 48), v8 == 16))
  {
    if (a4 && *(_WORD *)(a4 + 48) != 16)
    {
      if (!a3 || (int v8 = *(unsigned __int16 *)(a3 + 48), v8 == 16))
      {
        *(void *)(a2 + 8) = 0;
        uint64_t v35 = MEMORY[0x1E4F143A8];
        uint64_t v36 = 0x40000000;
        unint64_t v37 = __db_query_tree_apply_block_block_invoke;
        uint64_t v38 = &unk_1E5AEF180;
        uint64_t v39 = &__block_literal_global_170;
        db_query_tree_apply_block_with_meta((void *)a2, (uint64_t)&v35, 0, 0);
        return a4;
      }
      goto LABEL_19;
    }
LABEL_15:
    *(_WORD *)(a2 + 48) = 16;
LABEL_16:
    cleanup_children(v6);
    return v6;
  }
  if (!a4)
  {
LABEL_20:
    *(void *)a2 = 0;
    uint64_t v35 = MEMORY[0x1E4F143A8];
    uint64_t v36 = 0x40000000;
    unint64_t v37 = __db_query_tree_apply_block_block_invoke;
    uint64_t v38 = &unk_1E5AEF180;
    uint64_t v39 = &__block_literal_global_170;
    db_query_tree_apply_block_with_meta((void *)a2, (uint64_t)&v35, 0, 0);
    return a3;
  }
LABEL_19:
  int v12 = *(unsigned __int16 *)(a4 + 48);
  if (v12 == 16) {
    goto LABEL_20;
  }
  if (v8 == 32)
  {
    uint64_t v13 = *(void *)(a3 + 16);
    uint64_t v14 = (float *)(v13 ? v13 + 52 : a3 + 72);
    float v15 = *v14;
    node_max_bias(a4);
    if (v15 >= v16) {
      goto LABEL_32;
    }
  }
  if (v12 == 32)
  {
    uint64_t v17 = *(void *)(a4 + 16);
    uint64_t v18 = (float *)(v17 ? v17 + 52 : a4 + 72);
    float v15 = *v18;
    node_max_bias(a3);
    if (v15 >= v19)
    {
LABEL_32:
      *(_WORD *)(v6 + 48) = 32;
      *(float *)(v6 + 72) = v15;
      goto LABEL_16;
    }
  }
  return v6;
}

void node_max_bias(uint64_t a1)
{
  int v2 = *(_WORD *)(a1 + 48) & 0xFFF7;
  if (v2 != 32)
  {
    if (v2 == 2)
    {
      if (*(void *)a1) {
        node_max_bias();
      }
      if (*(void *)(a1 + 8)) {
        goto LABEL_13;
      }
    }
    else if (v2 == 1)
    {
      if (*(void *)a1) {
        node_max_bias();
      }
      if (*(void *)(a1 + 8)) {
LABEL_13:
      }
        node_max_bias();
    }
  }
}

uint64_t add_bias(uint64_t result, double a2)
{
  if (*(float *)&a2 != 0.0)
  {
    uint64_t v2 = *(void *)(result + 16);
    if (v2)
    {
      *(float32x2_t *)(v2 + 52) = vadd_f32(*(float32x2_t *)(v2 + 52), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0));
    }
    else
    {
      float v3 = *(float *)(result + 72);
      if (v3 == 0.0) {
        *(_DWORD *)(result + 72) = LODWORD(a2);
      }
      else {
        *(float *)(result + 72) = v3 + *(float *)&a2;
      }
    }
  }
  return result;
}

void *query_strdup(const char *a1)
{
  size_t v2 = strlen(a1);
  float v3 = malloc_type_malloc(v2 + 1, 0xB1929E07uLL);
  if (!v3) {
    _log_fault_for_malloc_failure();
  }
  memcpy(v3, a1, v2);
  *((unsigned char *)v3 + v2) = 0;
  return v3;
}

void *db_make_query_node(char *a1)
{
  return db_make_query_node_with_ann(a1, 0);
}

void *db_make_query_node_with_ann(char *__s, const __CFDictionary *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (__s && !*__s) {
    return 0;
  }
  unint64_t v31 = 0;
  int v32 = 0;
  int v4 = strlen(__s);
  int v5 = check_and_decompose_string((unsigned __int8 *)__s, v4 + 1, (unsigned __int8 **)&v32, &v31);
  if (v5)
  {
    int v6 = v5;
    int v7 = *__error();
    int v8 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      db_make_query_node_with_ann_cold_2((uint64_t)__s, v6, v8);
    }
    int v9 = 0;
    *__error() = v7;
  }
  else
  {
    int v10 = (char *)v32;
    int v29 = 3;
    int valuePtr = 3;
    int v28 = 0;
    if (a2 && CFDictionaryContainsKey(a2, @"vectors"))
    {
      uint64_t Value = CFDictionaryGetValue(a2, @"vectors");
      CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a2, @"vec_data_format");
      if (v12) {
        CFNumberGetValue(v12, kCFNumberIntType, &valuePtr);
      }
      CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a2, @"vec_dimensions");
      if (v13) {
        CFNumberGetValue(v13, kCFNumberIntType, &v29);
      }
      CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a2, @"vec_version");
      if (v14)
      {
        CFNumberGetValue(v14, kCFNumberSInt32Type, &v28);
        __int16 v15 = v28;
      }
      else
      {
        __int16 v15 = 0;
      }
    }
    else
    {
      __int16 v15 = 0;
      uint64_t Value = 0;
    }
    int v27 = 0;
    float v26 = v10;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 0x40000000;
    void v22[2] = __db_make_query_node_with_ann_block_invoke;
    void v22[3] = &__block_descriptor_tmp_59;
    int v23 = valuePtr;
    int v24 = v29;
    __int16 v25 = v15;
    _OWORD v22[4] = Value;
    v22[5] = v31;
    int v9 = or_expr(&v26, 1, &v27, (uint64_t)v22);
    if (v9)
    {
      float v16 = (char *)(v26 - v10);
      if (v26 - v10 != v31 - 1)
      {
        int v17 = *__error();
        uint64_t v18 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "db_make_query_node_with_ann";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6125;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v16;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v31;
          *(_WORD *)&buf[38] = 2080;
          double v34 = v10;
          _os_log_error_impl(&dword_1A334F000, v18, OS_LOG_TYPE_ERROR, "%s:%d: query used %ld of %ld - %s", buf, 0x30u);
        }
        *__error() = v17;
      }
      if ((unint64_t)db_count_query_tree(v9) >= 0x801)
      {
        int v19 = *__error();
        float v20 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          db_make_query_node_with_ann_cold_1(v9, (uint64_t)__s, v20);
        }
        *__error() = v19;
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&buf[16] = __db_query_tree_apply_block_block_invoke;
        *(void *)&buf[24] = &unk_1E5AEF180;
        *(void *)&buf[32] = &__block_literal_global_170;
        db_query_tree_apply_block_with_meta(v9, (uint64_t)buf, 0, 0);
        int v9 = 0;
      }
    }
    if (v10 != __s) {
      free(v32);
    }
  }
  return v9;
}

void *or_expr(char **a1, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v8 = *a1;
  if (*a1)
  {
    while (1)
    {
      unsigned int v9 = *v8;
      BOOL v10 = v9 > 0x20;
      uint64_t v11 = (1 << v9) & 0x100001600;
      if (v10 || v11 == 0) {
        break;
      }
      ++v8;
    }
  }
  *a1 = v8;
  uint64_t result = and_expr(a1, a2, a3, a4);
  if (!result) {
    return result;
  }
  CFNumberRef v14 = result;
  __int16 v15 = *a1;
  if (*a1)
  {
    while (1)
    {
      unsigned int v16 = *v15;
      BOOL v10 = v16 > 0x20;
      uint64_t v17 = (1 << v16) & 0x100001600;
      if (v10 || v17 == 0) {
        break;
      }
      ++v15;
    }
  }
  *a1 = v15;
  if (*v15 != 124)
  {
    uint64_t v35 = 0;
LABEL_39:
    if (v35) {
      return v35;
    }
    else {
      return v14;
    }
  }
  uint64_t v35 = 0;
  int v19 = 0;
  while (1)
  {
    *a1 = v15 + 1;
    if (v15[1] != 124) {
      goto LABEL_44;
    }
    for (uint64_t i = v15 + 2; ; ++i)
    {
      unsigned int v21 = *i;
      BOOL v10 = v21 > 0x20;
      uint64_t v22 = (1 << v21) & 0x100001600;
      if (v10 || v22 == 0) {
        break;
      }
    }
    *a1 = i;
    int v24 = and_expr(a1, a2, a3, a4);
    __int16 v25 = v24;
    float v26 = *a1;
    if (*a1)
    {
      while (1)
      {
        unsigned int v27 = *v26;
        BOOL v10 = v27 > 0x20;
        uint64_t v28 = (1 << v27) & 0x100001600;
        if (v10 || v28 == 0) {
          break;
        }
        ++v26;
      }
    }
    *a1 = v26;
    if (!v24)
    {
      double v34 = v35;
      if (v35)
      {
        uint64_t v36 = MEMORY[0x1E4F143A8];
        uint64_t v37 = 0x40000000;
        uint64_t v38 = __db_query_tree_apply_block_block_invoke;
        uint64_t v39 = &unk_1E5AEF180;
        uint64_t v40 = &__block_literal_global_170;
        goto LABEL_48;
      }
LABEL_44:
      uint64_t v36 = MEMORY[0x1E4F143A8];
      uint64_t v37 = 0x40000000;
      uint64_t v38 = __db_query_tree_apply_block_block_invoke;
      uint64_t v39 = &unk_1E5AEF180;
      uint64_t v40 = &__block_literal_global_170;
      double v34 = v14;
      goto LABEL_48;
    }
    int v30 = (*a3)++;
    if (v30 > 2048) {
      return 0;
    }
    if (!v19) {
      break;
    }
    uint64_t v31 = v19[1];
    int v32 = malloc_type_calloc(1uLL, 0x50uLL, 0xF92E41uLL);
    if (!v32)
    {
      _log_fault_for_malloc_failure();
      v19[1] = 0;
      uint64_t v36 = MEMORY[0x1E4F143A8];
      uint64_t v37 = 0x40000000;
      uint64_t v38 = __db_query_tree_apply_block_block_invoke;
      uint64_t v39 = &unk_1E5AEF180;
      uint64_t v40 = &__block_literal_global_170;
      db_query_tree_apply_block_with_meta(v35, (uint64_t)&v36, 0, 0);
      uint64_t v36 = MEMORY[0x1E4F143A8];
      uint64_t v37 = 0x40000000;
      uint64_t v38 = __db_query_tree_apply_block_block_invoke;
      uint64_t v39 = &unk_1E5AEF180;
      uint64_t v40 = &__block_literal_global_170;
      goto LABEL_47;
    }
    v19[1] = v32;
    *int v32 = v31;
    int v19 = v32;
LABEL_36:
    *((_WORD *)v19 + 24) = 1;
    v19[1] = v25;
    __int16 v15 = *a1;
    if (**a1 != 124) {
      goto LABEL_39;
    }
  }
  float v33 = malloc_type_calloc(1uLL, 0x50uLL, 0xF92E41uLL);
  if (v33)
  {
    int v19 = v33;
    *float v33 = v14;
    uint64_t v35 = v33;
    goto LABEL_36;
  }
  _log_fault_for_malloc_failure();
  uint64_t v36 = MEMORY[0x1E4F143A8];
  uint64_t v37 = 0x40000000;
  uint64_t v38 = __db_query_tree_apply_block_block_invoke;
  uint64_t v39 = &unk_1E5AEF180;
  uint64_t v40 = &__block_literal_global_170;
  db_query_tree_apply_block_with_meta(v14, (uint64_t)&v36, 0, 0);
  uint64_t v36 = MEMORY[0x1E4F143A8];
  uint64_t v37 = 0x40000000;
  uint64_t v38 = __db_query_tree_apply_block_block_invoke;
  uint64_t v39 = &unk_1E5AEF180;
  uint64_t v40 = &__block_literal_global_170;
LABEL_47:
  double v34 = v25;
LABEL_48:
  db_query_tree_apply_block_with_meta(v34, (uint64_t)&v36, 0, 0);
  return 0;
}

CFArrayRef __db_make_query_node_with_ann_block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 32);
  if (result)
  {
    if (CFArrayGetCount(result) <= a3) {
      return 0;
    }
    CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), a3);
    BytePtr = CFDataGetBytePtr(ValueAtIndex);
    unsigned int v9 = *(_DWORD *)(a2 + 60) & 0xFFFFFFF3 | (4 * (*(_DWORD *)(a1 + 48) & 3));
    *(_DWORD *)(a2 + 60) = v9;
    unsigned int v10 = v9 & 0xFFFFFFFC | *(_DWORD *)(a1 + 52) & 3;
    *(_DWORD *)(a2 + 60) = v10;
    *(_DWORD *)(a2 + 60) = v10 & 0x1FFFFFF | (*(_WORD *)(a1 + 56) << 25);
    uint64_t v11 = *(unsigned int *)(a1 + 52);
    size_t v12 = -1;
    if (v11 <= 2)
    {
      uint64_t v13 = *(unsigned int *)(a1 + 48);
      if (v13 <= 2) {
        size_t v12 = (vector_dimension_vec_sizes[v11] * vector_size_elem_sizes[v13]);
      }
    }
    if (*(void *)(a1 + 40) == -1)
    {
      return 0;
    }
    else
    {
      CFNumberRef v14 = malloc_type_malloc(v12, 0xDB0F5D7EuLL);
      *(void *)(a2 + 296) = v14;
      *(_DWORD *)(a2 + 160) |= 0x10000u;
      memcpy(v14, BytePtr, v12);
      return (const __CFArray *)1;
    }
  }
  return result;
}

size_t render_qp(uint64_t a1, void **a2, size_t a3, size_t *a4, _DWORD *a5)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0xB:
      goto LABEL_3;
    case 0xC:
      a3 = render_string("!", a2, a3, a4);
LABEL_3:
      size_t v9 = render_string("InRange(", a2, a3, a4);
      uint64_t v10 = render_field_name(a1, a2, v9, a4, a5);
      size_t v11 = render_string(",", a2, v10, a4);
      size_t v12 = render_string(**(const char ***)(a1 + 168), a2, v11, a4);
      size_t v13 = render_string(",", a2, v12, a4);
      CFNumberRef v14 = *(const char **)(*(void *)(a1 + 168) + 8);
      goto LABEL_16;
    case 0xD:
      goto LABEL_7;
    case 0xE:
      a3 = render_string("!", a2, a3, a4);
LABEL_7:
      size_t v18 = render_string("FieldMatch(", a2, a3, a4);
      uint64_t v19 = render_field_name(a1, a2, v18, a4, a5);
      size_t v20 = render_string(",", a2, v19, a4);
      if (*(int *)(a1 + 40) >= 1)
      {
        uint64_t v21 = 0;
        do
        {
          if (v21) {
            size_t v20 = render_string(",", a2, v20, a4);
          }
          size_t v22 = render_string("\"", a2, v20, a4);
          size_t v23 = render_string_protecting_char(*(const char **)(*(void *)(a1 + 168) + 8 * v21), a2, v22, a4);
          size_t v20 = render_string("\"", a2, v23, a4);
          ++v21;
        }
        while (v21 < *(int *)(a1 + 40));
      }
      goto LABEL_17;
    case 0xF:
      size_t v24 = render_string("aNN.data(", a2, a3, a4);
      uint64_t v25 = render_field_name(a1, a2, v24, a4, a5);
      size_t v26 = render_string(",0,", a2, v25, a4);
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      *(_OWORD *)__str = 0u;
      long long v49 = 0u;
      snprintf(__str, 0x80uLL, "%u", (*(_DWORD *)(a1 + 60) >> 4) & 0xFFFFF);
      size_t v27 = render_string(__str, a2, v26, a4);
      size_t v28 = render_string(",", a2, v27, a4);
      snprintf(__str, 0x80uLL, "%g", *(float *)(a1 + 64));
      size_t v29 = render_string(__str, a2, v28, a4);
      size_t v13 = render_string(",", a2, v29, a4);
      if ((*(_DWORD *)(a1 + 60) & 0x1000000) != 0) {
        CFNumberRef v14 = "1";
      }
      else {
        CFNumberRef v14 = "0";
      }
LABEL_16:
      size_t v20 = render_string(v14, a2, v13, a4);
      goto LABEL_17;
    default:
      uint64_t v15 = render_field_name(a1, a2, a3, a4, a5);
      uint64_t v16 = *(unsigned int *)(a1 + 24);
      if ((v16 - 9) >= 0xFFFFFFF8) {
        uint64_t v17 = off_1E5AEF248[v16];
      }
      else {
        uint64_t v17 = "bad op";
      }
      size_t v31 = render_string(v17, a2, v15, a4);
      size_t v32 = render_string("\"", a2, v31, a4);
      size_t v33 = render_string_protecting_char(*(const char **)(a1 + 72), a2, v32, a4);
      size_t v34 = render_string("\"", a2, v33, a4);
      uint64_t v35 = *(void *)(a1 + 32);
      if ((v35 & 0x10) != 0)
      {
        size_t v34 = render_string("c", a2, v34, a4);
        uint64_t v35 = *(void *)(a1 + 32);
        if ((v35 & 0x800000) == 0)
        {
LABEL_23:
          if ((v35 & 0x20) == 0) {
            goto LABEL_24;
          }
          goto LABEL_43;
        }
      }
      else if ((v35 & 0x800000) == 0)
      {
        goto LABEL_23;
      }
      size_t v43 = render_string("f", a2, v34, a4);
      unsigned __int8 v44 = *(unsigned char *)(a1 + 28);
      __str[0] = (v44 / 0x64u) | 0x30;
      __str[1] = (v44 / 0xAu - 10 * ((unsigned __int16)(26 * (v44 / 0xAu)) >> 8)) | 0x30;
      __str[2] = (v44 % 0xAu) | 0x30;
      __str[3] = 0;
      size_t v34 = render_string(__str, a2, v43, a4);
      uint64_t v35 = *(void *)(a1 + 32);
      if ((v35 & 0x20) == 0)
      {
LABEL_24:
        if ((v35 & 0x40) == 0) {
          goto LABEL_25;
        }
        goto LABEL_44;
      }
LABEL_43:
      size_t v34 = render_string("d", a2, v34, a4);
      uint64_t v35 = *(void *)(a1 + 32);
      if ((v35 & 0x40) == 0)
      {
LABEL_25:
        if ((v35 & 2) == 0) {
          goto LABEL_26;
        }
        goto LABEL_45;
      }
LABEL_44:
      size_t v34 = render_string("w", a2, v34, a4);
      uint64_t v35 = *(void *)(a1 + 32);
      if ((v35 & 2) == 0)
      {
LABEL_26:
        if ((v35 & 4) == 0) {
          goto LABEL_27;
        }
        goto LABEL_46;
      }
LABEL_45:
      size_t v34 = render_string("r", a2, v34, a4);
      uint64_t v35 = *(void *)(a1 + 32);
      if ((v35 & 4) == 0)
      {
LABEL_27:
        if ((v35 & 8) == 0) {
          goto LABEL_28;
        }
        goto LABEL_47;
      }
LABEL_46:
      size_t v34 = render_string("t", a2, v34, a4);
      uint64_t v35 = *(void *)(a1 + 32);
      if ((v35 & 8) == 0)
      {
LABEL_28:
        if ((v35 & 0x1000000) == 0) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
LABEL_47:
      size_t v34 = render_string("j", a2, v34, a4);
      if ((*(void *)(a1 + 32) & 0x1000000) != 0) {
LABEL_29:
      }
        size_t v34 = render_string("s", a2, v34, a4);
LABEL_30:
      if (*(float *)(a1 + 52) != 0.0 || *(float *)(a1 + 56) != 0.0)
      {
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        *(_OWORD *)__str = 0u;
        long long v49 = 0u;
        size_t v36 = render_string("W(", a2, v34, a4);
        snprintf(__str, 0x80uLL, "%.6g", *(float *)(a1 + 52));
        size_t v37 = render_string(__str, a2, v36, a4);
        if (*(float *)(a1 + 56) != 0.0)
        {
          size_t v38 = render_string(",", a2, v37, a4);
          snprintf(__str, 0x80uLL, "%.6g", *(float *)(a1 + 56));
          size_t v37 = render_string(__str, a2, v38, a4);
        }
        size_t v34 = render_string(")", a2, v37, a4);
      }
      if (*(_DWORD *)(a1 + 60))
      {
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        *(_OWORD *)__str = 0u;
        long long v49 = 0u;
        size_t v39 = render_string("L(", a2, v34, a4);
        snprintf(__str, 0x80uLL, "%u", *(_DWORD *)(a1 + 60));
        size_t v40 = render_string(__str, a2, v39, a4);
        size_t v34 = render_string(")", a2, v40, a4);
      }
      uint64_t v41 = *(void *)(a1 + 32) & 0x6000000000;
      if (!v41) {
        return v34;
      }
      if (v41 == 0x6000000000) {
        uint64_t v42 = "a";
      }
      else {
        uint64_t v42 = v41 == 0x2000000000 ? "n" : "o";
      }
      size_t v34 = render_string(v42, a2, v34, a4);
      if (!*(_DWORD *)(a1 + 96)) {
        return v34;
      }
      long long v50 = 0u;
      long long v51 = 0u;
      *(_OWORD *)__str = 0u;
      long long v49 = 0u;
      size_t v45 = render_string("(", a2, v34, a4);
      snprintf(__str, 0x40uLL, "%d", **(_DWORD **)(a1 + 88));
      size_t v20 = render_string(__str, a2, v45, a4);
      if (*(_DWORD *)(a1 + 96) >= 2u)
      {
        unint64_t v46 = 1;
        do
        {
          size_t v47 = render_string(",", a2, v20, a4);
          snprintf(__str, 0x40uLL, "%d", *(_DWORD *)(*(void *)(a1 + 88) + 4 * v46));
          size_t v20 = render_string(__str, a2, v47, a4);
          ++v46;
        }
        while (v46 < *(unsigned int *)(a1 + 96));
      }
LABEL_17:
      return render_string(")", a2, v20, a4);
  }
}

unint64_t render_end(void **a1, uint64_t a2, size_t *a3)
{
  unint64_t v5 = a2 + 1;
  size_t v6 = *a3;
  if (v5 <= *a3)
  {
    int v8 = *a1;
  }
  else
  {
    do
    {
      BOOL v7 = v5 > 2 * v6;
      v6 *= 2;
    }
    while (v7);
    *a3 = v6;
    int v8 = malloc_type_realloc(*a1, v6, 0x3D1E281BuLL);
    *a1 = v8;
  }
  *((unsigned char *)v8 + a2) = 0;
  return v5;
}

void *_db_render_query_tree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  CFArrayRef result = MEMORY[0x1F4188790](a5, a1, a2, a3, a4);
  v43[2047] = *MEMORY[0x1E4F143B8];
  size_t v40 = v10;
  if (!result) {
    return result;
  }
  size_t v11 = result;
  size_t v12 = (void *)*result;
  if (!*result) {
    return 0;
  }
  size_t v13 = v8;
  uint64_t v14 = v7;
  uint64_t v15 = v6;
  if (v9)
  {
    db_optimize_query_tree((void **)result);
    size_t v12 = (void *)*v11;
  }
  if (v13) {
    size_t v13 = (const char *)render_string(v13, v15, 0, &v40);
  }
  memset(v41, 0, 124);
  bzero(v43, 0x3FF8uLL);
  size_t v16 = v14 - 1;
  uint64_t v17 = 1024;
  __ptr = v12;
  uint64_t v18 = 1;
  p_ptr = &__ptr;
  while (v16 >= v40)
  {
    uint64_t v20 = v18 - 1;
    uint64_t v21 = &p_ptr[2 * v18 - 2];
    __int16 v22 = *((_WORD *)v21 + 5);
    if ((v22 & 2) != 0)
    {
      size_t v27 = "(";
      goto LABEL_16;
    }
    if ((v22 & 4) != 0)
    {
      size_t v27 = ")";
      goto LABEL_16;
    }
    size_t v23 = (void *)*v21;
    uint64_t v24 = *(unsigned __int16 *)(*v21 + 48);
    unint64_t v25 = v17;
    if ((v24 & 0xFFFFFFF7) > 7)
    {
      unsigned int v26 = 0;
      if (v22) {
        goto LABEL_27;
      }
    }
    else
    {
      unsigned int v26 = binding_str[v24 & 0xFFFFFFFFFFFFFFF7];
      if (v22) {
        goto LABEL_27;
      }
    }
    unsigned int v28 = *((unsigned __int16 *)v21 + 4);
    int v29 = *((_DWORD *)v21 + 3);
    if (v23[1] || *v23)
    {
      uint64_t v30 = 3;
      if (v26 < v28) {
        uint64_t v30 = 5;
      }
      if (v30 + v20 > v25)
      {
        int v38 = *((_DWORD *)v21 + 3);
        uint64_t v39 = 2 * v25;
        if (p_ptr == &__ptr)
        {
          p_ptr = malloc_type_malloc(32 * v25, 0x10200403A5D3213uLL);
          memcpy(p_ptr, &__ptr, 16 * v20);
        }
        else
        {
          p_ptr = reallocf(p_ptr, 32 * v25);
        }
        unint64_t v25 = v39;
        int v29 = v38;
      }
      if (v26 < v28)
      {
        size_t v32 = &p_ptr[2 * v20];
        *size_t v32 = 0;
        *((_DWORD *)v32 + 2) = 0x40000;
        uint64_t v20 = v18;
      }
      uint64_t v33 = v23[1];
      if (v33)
      {
        size_t v34 = &p_ptr[2 * v20];
        *size_t v34 = v33;
        *((_WORD *)v34 + 4) = v26;
        *((_WORD *)v34 + 5) = 0;
        ++v20;
      }
      uint64_t v35 = &p_ptr[2 * v20];
      *uint64_t v35 = v23;
      *((_WORD *)v35 + 4) = v28;
      *((_WORD *)v35 + 5) = v22 | 1;
      *((_DWORD *)v35 + 3) = v29;
      if (*v23)
      {
        size_t v36 = &p_ptr[2 * v20 + 2];
        *size_t v36 = *v23;
        *((_WORD *)v36 + 4) = v26;
        *((_WORD *)v36 + 5) = 0;
        v20 += 2;
      }
      else
      {
        ++v20;
      }
      if (v26 < v28)
      {
        size_t v37 = &p_ptr[2 * v20];
        *size_t v37 = 0;
        *((_DWORD *)v37 + 2) = 0x20000;
        ++v20;
      }
      uint64_t v17 = v25;
      goto LABEL_17;
    }
LABEL_27:
    if (*(unsigned __int16 *)(*v21 + 48) > 3u)
    {
      uint64_t v17 = v25;
      if (v24 == 4)
      {
        size_t v31 = render_qp(v23[2], v15, (size_t)v13, &v40, v41);
        goto LABEL_36;
      }
      if (v24 != 32)
      {
LABEL_37:
        size_t v27 = "false";
        goto LABEL_16;
      }
      size_t v27 = "true";
    }
    else
    {
      uint64_t v17 = v25;
      if (v24 == 1)
      {
        size_t v31 = render_string("||", v15, (uint64_t)v13, &v40);
LABEL_36:
        size_t v13 = (const char *)v31;
        goto LABEL_17;
      }
      if (v24 != 2) {
        goto LABEL_37;
      }
      size_t v27 = "&&";
    }
LABEL_16:
    size_t v13 = (const char *)render_string(v27, v15, (uint64_t)v13, &v40);
LABEL_17:
    uint64_t v18 = v20;
    if (!v20) {
      break;
    }
  }
  if (p_ptr != &__ptr) {
    free(p_ptr);
  }
  return (void *)render_end(v15, (uint64_t)v13, &v40);
}

size_t render_string(const char *a1, void **a2, uint64_t a3, size_t *a4)
{
  size_t v8 = strlen(a1);
  size_t v9 = *a4;
  if (v8 + a3 <= *a4)
  {
    size_t v11 = (char *)*a2;
  }
  else
  {
    do
    {
      BOOL v10 = v8 + a3 > 2 * v9;
      v9 *= 2;
    }
    while (v10);
    *a4 = v9;
    size_t v11 = (char *)malloc_type_realloc(*a2, v9, 0x6D1E66BFuLL);
    *a2 = v11;
  }
  memcpy(&v11[a3], a1, v8);
  return v8 + a3;
}

void *and_expr(char **a1, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFArrayRef result = factor(a1, a2, a3, a4);
  if (!result) {
    return result;
  }
  size_t v9 = result;
  BOOL v10 = *a1;
  if (*a1)
  {
    while (1)
    {
      unsigned int v11 = *v10;
      BOOL v12 = v11 > 0x20;
      uint64_t v13 = (1 << v11) & 0x100001600;
      if (v12 || v13 == 0) {
        break;
      }
      ++v10;
    }
  }
  *a1 = v10;
  if (*v10 != 38)
  {
    size_t v31 = 0;
LABEL_33:
    if (v31) {
      return v31;
    }
    else {
      return v9;
    }
  }
  size_t v31 = 0;
  uint64_t v15 = 0;
  while (1)
  {
    *a1 = v10 + 1;
    if (v10[1] != 38) {
      goto LABEL_38;
    }
    for (uint64_t i = v10 + 2; ; ++i)
    {
      unsigned int v17 = *i;
      BOOL v12 = v17 > 0x20;
      uint64_t v18 = (1 << v17) & 0x100001600;
      if (v12 || v18 == 0) {
        break;
      }
    }
    *a1 = i;
    uint64_t v20 = factor(a1, a2, a3, a4);
    uint64_t v21 = v20;
    __int16 v22 = *a1;
    if (*a1)
    {
      while (1)
      {
        unsigned int v23 = *v22;
        BOOL v12 = v23 > 0x20;
        uint64_t v24 = (1 << v23) & 0x100001600;
        if (v12 || v24 == 0) {
          break;
        }
        ++v22;
      }
    }
    *a1 = v22;
    if (!v20)
    {
      uint64_t v30 = v31;
      if (v31)
      {
        uint64_t v32 = MEMORY[0x1E4F143A8];
        uint64_t v33 = 0x40000000;
        size_t v34 = __db_query_tree_apply_block_block_invoke;
        uint64_t v35 = &unk_1E5AEF180;
        size_t v36 = &__block_literal_global_170;
        goto LABEL_42;
      }
LABEL_38:
      uint64_t v32 = MEMORY[0x1E4F143A8];
      uint64_t v33 = 0x40000000;
      size_t v34 = __db_query_tree_apply_block_block_invoke;
      uint64_t v35 = &unk_1E5AEF180;
      size_t v36 = &__block_literal_global_170;
      uint64_t v30 = v9;
      goto LABEL_42;
    }
    int v26 = (*a3)++;
    if (v26 > 2048) {
      return 0;
    }
    if (!v15) {
      break;
    }
    uint64_t v27 = v15[1];
    unsigned int v28 = malloc_type_calloc(1uLL, 0x50uLL, 0xF92E41uLL);
    if (!v28)
    {
      _log_fault_for_malloc_failure();
      v15[1] = 0;
      uint64_t v32 = MEMORY[0x1E4F143A8];
      uint64_t v33 = 0x40000000;
      size_t v34 = __db_query_tree_apply_block_block_invoke;
      uint64_t v35 = &unk_1E5AEF180;
      size_t v36 = &__block_literal_global_170;
      db_query_tree_apply_block_with_meta(v31, (uint64_t)&v32, 0, 0);
      uint64_t v32 = MEMORY[0x1E4F143A8];
      uint64_t v33 = 0x40000000;
      size_t v34 = __db_query_tree_apply_block_block_invoke;
      uint64_t v35 = &unk_1E5AEF180;
      size_t v36 = &__block_literal_global_170;
      goto LABEL_41;
    }
    v15[1] = v28;
    *unsigned int v28 = v27;
    uint64_t v15 = v28;
LABEL_30:
    *((_WORD *)v15 + 24) = 2;
    v15[1] = v21;
    BOOL v10 = *a1;
    if (**a1 != 38) {
      goto LABEL_33;
    }
  }
  int v29 = malloc_type_calloc(1uLL, 0x50uLL, 0xF92E41uLL);
  if (v29)
  {
    uint64_t v15 = v29;
    *int v29 = v9;
    size_t v31 = v29;
    goto LABEL_30;
  }
  _log_fault_for_malloc_failure();
  uint64_t v32 = MEMORY[0x1E4F143A8];
  uint64_t v33 = 0x40000000;
  size_t v34 = __db_query_tree_apply_block_block_invoke;
  uint64_t v35 = &unk_1E5AEF180;
  size_t v36 = &__block_literal_global_170;
  db_query_tree_apply_block_with_meta(v9, (uint64_t)&v32, 0, 0);
  uint64_t v32 = MEMORY[0x1E4F143A8];
  uint64_t v33 = 0x40000000;
  size_t v34 = __db_query_tree_apply_block_block_invoke;
  uint64_t v35 = &unk_1E5AEF180;
  size_t v36 = &__block_literal_global_170;
LABEL_41:
  uint64_t v30 = v21;
LABEL_42:
  db_query_tree_apply_block_with_meta(v30, (uint64_t)&v32, 0, 0);
  return 0;
}

void *factor(char **a1, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  size_t v6 = *a1;
  int v7 = *v6;
  if (v7 == 33)
  {
    ++v6;
    while (1)
    {
      unsigned int v8 = *v6;
      BOOL v9 = v8 > 0x20;
      uint64_t v10 = (1 << v8) & 0x100001600;
      if (v9 || v10 == 0) {
        break;
      }
      ++v6;
    }
    *a1 = v6;
    int v12 = *v6;
  }
  else
  {
    int v12 = *v6;
  }
  if (v12 != 40)
  {
    query_piece = (int *)get_query_piece(v6, a1, a4);
    if (!query_piece) {
      return 0;
    }
    uint64_t v18 = query_piece;
    uint64_t v19 = *a1;
    if (*a1)
    {
      while (1)
      {
        unsigned int v20 = *v19;
        BOOL v9 = v20 > 0x20;
        uint64_t v21 = (1 << v20) & 0x100001600;
        if (v9 || v21 == 0) {
          break;
        }
        ++v19;
      }
    }
    *a1 = v19;
    int v25 = (*a3)++;
    if (v25 >= 2049)
    {
      free_qp(query_piece);
      return 0;
    }
    int v26 = malloc_type_calloc(1uLL, 0x50uLL, 0xF92E41uLL);
    uint64_t v24 = v26;
    if (!v26)
    {
      _log_fault_for_malloc_failure();
      free_qp(v18);
      return v24;
    }
    uint64_t v27 = v18[6];
    if (v27 == 9)
    {
      free_qp(v18);
      BOOL v28 = v7 == 33;
      __int16 v29 = 16;
      __int16 v30 = 32;
    }
    else
    {
      if (v27 != 10)
      {
        v26[24] = 4;
        *((void *)v26 + 2) = v18;
        if (v7 == 33)
        {
          if ((v27 - 16) >= 0xFFFFFFF1) {
            int v32 = dword_1A33A3FD0[v27];
          }
          else {
            int v32 = 0;
          }
          v18[6] = v32;
        }
        return v24;
      }
      free_qp(v18);
      BOOL v28 = v7 == 33;
      __int16 v29 = 32;
      __int16 v30 = 16;
    }
    if (v28) {
      __int16 v29 = v30;
    }
    *((_WORD *)v24 + 24) = v29;
    return v24;
  }
  for (uint64_t i = v6 + 1; ; ++i)
  {
    unsigned int v14 = *i;
    BOOL v9 = v14 > 0x20;
    uint64_t v15 = (1 << v14) & 0x100001600;
    if (v9 || v15 == 0) {
      break;
    }
  }
  *a1 = i;
  if (a2 > 99) {
    return 0;
  }
  unsigned int v23 = (void *)or_expr(a1, (a2 + 1), a3);
  uint64_t v24 = v23;
  if (v23)
  {
    if (v7 == 33)
    {
      uint64_t v33 = MEMORY[0x1E4F143A8];
      uint64_t v34 = 0x40000000;
      uint64_t v35 = __db_query_tree_apply_block_block_invoke;
      size_t v36 = &unk_1E5AEF180;
      uint64_t v37 = &__block_literal_global_12;
      db_query_tree_apply_block_with_meta(v23, (uint64_t)&v33, 0, 0);
    }
    if (**a1 == 41)
    {
      ++*a1;
      return v24;
    }
    uint64_t v33 = MEMORY[0x1E4F143A8];
    uint64_t v34 = 0x40000000;
    uint64_t v35 = __db_query_tree_apply_block_block_invoke;
    size_t v36 = &unk_1E5AEF180;
    uint64_t v37 = &__block_literal_global_170;
    db_query_tree_apply_block_with_meta(v24, (uint64_t)&v33, 0, 0);
    return 0;
  }
  return v24;
}

float *get_query_piece(char *a1, char **a2, uint64_t a3)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  size_t v6 = (float *)malloc_type_calloc(1uLL, 0x130uLL, 0xF92E41uLL);
  if (!v6)
  {
    _log_fault_for_malloc_failure();
    return v6;
  }
  char v7 = *a1;
  if (*a1)
  {
    uint64_t v8 = MEMORY[0x1E4F14390];
    do
    {
      if (v7 < 0)
      {
        if (!__maskrune(v7, 0x4000uLL)) {
          break;
        }
      }
      else if ((*(_DWORD *)(v8 + 4 * v7 + 60) & 0x4000) == 0)
      {
        break;
      }
      int v9 = *++a1;
      char v7 = v9;
    }
    while (v9);
  }
  int v99 = 0;
  bzero(__dst, 0x420uLL);
  __str = a1;
  if (!*a1) {
    goto LABEL_194;
  }
  __str = (char *)parse_string_piece((uint64_t)a1, __dst, 1056, &v99);
  uint64_t v10 = process_qp_field_name((uint64_t)v6, __dst, v99);
  if (!v10) {
    goto LABEL_194;
  }
  unsigned int v11 = v10;
  *(void *)size_t v6 = v10;
  char v12 = *__str;
  if (*__str)
  {
    uint64_t v13 = __str + 1;
    uint64_t v14 = MEMORY[0x1E4F14390];
    do
    {
      if (v12 < 0)
      {
        if (!__maskrune(v12, 0x4000uLL)) {
          break;
        }
      }
      else if ((*(_DWORD *)(v14 + 4 * v12 + 60) & 0x4000) == 0)
      {
        break;
      }
      __str = v13;
      int v15 = *v13++;
      char v12 = v15;
    }
    while (v15);
    unsigned int v11 = *(void **)v6;
  }
  if (!strcasecmp((const char *)v11, "true"))
  {
    int v22 = 10;
LABEL_38:
    *((_DWORD *)v6 + 6) = v22;
    if (v11) {
      free(v11);
    }
    *(void *)size_t v6 = 0;
    goto LABEL_41;
  }
  if (!strcasecmp((const char *)v11, "false"))
  {
    int v22 = 9;
    goto LABEL_38;
  }
  size_t v16 = __str;
  int v17 = *__str;
  if (v17 != 40) {
    goto LABEL_30;
  }
  if (_os_feature_enabled_impl() && !strcmp("aNN.data", *(const char **)v6))
  {
    *((_DWORD *)v6 + 6) = 15;
    int v26 = __str + 1;
    uint64_t v27 = MEMORY[0x1E4F14390];
    do
    {
      __str = v26;
      unsigned int v28 = *v26;
      if (!*v26) {
        break;
      }
      int v29 = (v28 & 0x80000000) != 0 ? __maskrune(v28, 0x4000uLL) : *(_DWORD *)(v27 + 4 * v28 + 60) & 0x4000;
      ++v26;
    }
    while (v29);
    free(*(void **)v6);
    __str = (char *)parse_string_piece((uint64_t)__str, __dst, 1056, &v99);
    *(void *)size_t v6 = process_qp_field_name((uint64_t)v6, __dst, v99);
    if (!parse_comma(__str, &__str)) {
      goto LABEL_194;
    }
    uint64_t v97 = 0;
    uint64_t v30 = strtol(__str, &v97, 0);
    size_t v31 = v97;
    if (!v97) {
      goto LABEL_194;
    }
    if (v97 == __str) {
      goto LABEL_194;
    }
    uint64_t v97 = 0;
    __str = v31;
    if (!parse_comma(v31, &__str)) {
      goto LABEL_194;
    }
    unsigned int v32 = strtol(__str, &v97, 0);
    uint64_t v33 = v97;
    if (!v97 || v97 == __str) {
      goto LABEL_194;
    }
    int v34 = *((_DWORD *)v6 + 15);
    unsigned int v35 = v32 < 0x100000 ? v34 & 0xFF00000F | (16 * (v32 & 0xFFFFF)) : v34 | 0xFFFFF0;
    *((_DWORD *)v6 + 15) = v35;
    uint64_t v97 = 0;
    __str = v33;
    ++*((_DWORD *)v6 + 10);
    if (!parse_comma(v33, &__str)) {
      goto LABEL_194;
    }
    float v66 = strtof(__str, &v97);
    uint64_t v67 = v97;
    if (!v97) {
      goto LABEL_194;
    }
    if (v97 == __str) {
      goto LABEL_194;
    }
    v6[16] = v66;
    ++*((_DWORD *)v6 + 10);
    __str = v67;
    if (!parse_comma(v67, &__str)) {
      goto LABEL_194;
    }
    *((_DWORD *)v6 + 40) |= 0x10000u;
    if (((*(uint64_t (**)(uint64_t, float *, uint64_t))(a3 + 16))(a3, v6, v30) & 1) == 0) {
      *((_DWORD *)v6 + 15) &= 0xFF00000F;
    }
    *((_DWORD *)v6 + 10) += 3;
    uint64_t v68 = __str;
    int v69 = *__str;
    switch(v69)
    {
      case '1':
LABEL_191:
        uint64_t v92 = v68 + 1;
        __str = v68 + 1;
        unsigned int v93 = *((_DWORD *)v6 + 15) | 0x1000000;
        break;
      case '0':
LABEL_190:
        uint64_t v92 = v68 + 1;
        __str = v68 + 1;
        unsigned int v93 = v6[15] & 0xFEFFFFFF;
        break;
      case ')':
        CFRange v70 = __str + 1;
LABEL_152:
        __str = v70;
        *((_DWORD *)v6 + 15) &= ~0x1000000u;
        goto LABEL_41;
      default:
        goto LABEL_194;
    }
    *((_DWORD *)v6 + 15) = v93;
    v94 = parse_whitespace(v92);
    __str = v94;
    if (*v94 != 41) {
      goto LABEL_194;
    }
    __str = v94 + 1;
LABEL_41:
    *a2 = __str;
    return v6;
  }
  int v18 = _os_feature_enabled_impl();
  uint64_t v19 = *(const char **)v6;
  if (!v18 || strcmp("aNN", *(const char **)v6))
  {
    if (!strcmp("InRange", v19))
    {
      int v25 = 11;
    }
    else
    {
      if (strcmp("FieldMatch", v19))
      {
        size_t v16 = __str;
        if (!*((_DWORD *)v6 + 6))
        {
          int v17 = *__str;
LABEL_30:
          if (v17 > 60)
          {
            if (v17 == 62)
            {
              unsigned int v20 = (unsigned __int8 *)(v16 + 1);
              __str = v16 + 1;
              if (v16[1] == 61)
              {
                int v21 = 4;
                goto LABEL_52;
              }
              int v24 = 8;
            }
            else
            {
              if (v17 != 61) {
                goto LABEL_194;
              }
              *((_DWORD *)v6 + 6) = 1;
              unsigned int v20 = (unsigned __int8 *)(v16 + 1);
              __str = v16 + 1;
              int v23 = v16[1];
              if (v23 != 61) {
                goto LABEL_96;
              }
              unsigned int v20 = (unsigned __int8 *)(v16 + 2);
              __str = v16 + 2;
              int v23 = v16[2];
              if (v23 != 61) {
                goto LABEL_96;
              }
              unsigned int v20 = (unsigned __int8 *)(v16 + 3);
              __str = v16 + 3;
              int v24 = 2;
            }
          }
          else
          {
            if (v17 == 33)
            {
              if (v16[1] != 61) {
                goto LABEL_194;
              }
              int v21 = 5;
              goto LABEL_52;
            }
            if (v17 != 60) {
              goto LABEL_194;
            }
            unsigned int v20 = (unsigned __int8 *)(v16 + 1);
            __str = v16 + 1;
            if (v16[1] == 61)
            {
              int v21 = 3;
LABEL_52:
              *((_DWORD *)v6 + 6) = v21;
              unsigned int v20 = (unsigned __int8 *)(v16 + 2);
              __str = v16 + 2;
LABEL_95:
              int v23 = *v20;
LABEL_96:
              if (!v23) {
                goto LABEL_194;
              }
              long long v52 = (char *)(v20 + 1);
              uint64_t v53 = MEMORY[0x1E4F14390];
              while (1)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!__maskrune((char)v23, 0x4000uLL))
                  {
LABEL_104:
                    if (*__str)
                    {
                      __str = (char *)parse_string_piece((uint64_t)__str, __dst, 1056, &v99);
                      *((void *)v6 + 9) = query_strdup(__dst);
                      while (1)
                      {
                        long long v55 = __str;
                        switch(*__str)
                        {
                          case 'W':
                            uint64_t v56 = ++__str;
                            if (v55[1] == 40) {
                              get_weights((uint64_t)v6, v56, &__str);
                            }
                            continue;
                          case 'X':
                          case 'Y':
                          case 'Z':
                          case '[':
                          case '\\':
                          case ']':
                          case '^':
                          case '_':
                          case 'e':
                          case 'g':
                          case 'h':
                          case 'k':
                          case 'l':
                          case 'm':
                          case 'q':
                          case 'u':
                          case 'v':
                          case 'y':
                            goto LABEL_41;
                          case 'a':
                            uint64_t v58 = *((void *)v6 + 4) | 0x6000000000;
                            goto LABEL_121;
                          case 'b':
                            uint64_t v59 = *((void *)v6 + 4) | 0x20000000;
                            goto LABEL_130;
                          case 'c':
                            uint64_t v59 = *((void *)v6 + 4) | 0x10;
                            goto LABEL_130;
                          case 'd':
                            uint64_t v59 = *((void *)v6 + 4) | 0x20;
                            goto LABEL_130;
                          case 'f':
                            *((void *)v6 + 4) |= 0x800000uLL;
                            __str = v55 + 2;
                            int v60 = 100 * __maskrune(v55[1], 0xFuLL);
                            CFStringRef v61 = __str++;
                            LOBYTE(v60) = v60 + 10 * __maskrune(*v61, 0xFuLL);
                            BOOL v62 = __str++;
                            *((unsigned char *)v6 + 28) = (v60 + __maskrune(*v62, 0xFuLL)) & 0x7F;
                            continue;
                          case 'i':
                            uint64_t v59 = *((void *)v6 + 4) | 0x200000000;
                            goto LABEL_130;
                          case 'j':
                            uint64_t v59 = *((void *)v6 + 4) | 8;
                            goto LABEL_130;
                          case 'n':
                            uint64_t v58 = *((void *)v6 + 4) | 0x2000000000;
                            goto LABEL_121;
                          case 'o':
                            uint64_t v58 = *((void *)v6 + 4) | 0x4000000000;
LABEL_121:
                            *((void *)v6 + 4) = v58;
                            __str = v55 + 1;
                            if (v55[1] == 40) {
                              get_proximities((uint64_t)v6, v55 + 1, &__str);
                            }
                            continue;
                          case 'p':
                            uint64_t v59 = *((void *)v6 + 4) | 0x40000000;
                            goto LABEL_130;
                          case 'r':
                            uint64_t v59 = *((void *)v6 + 4) | 2;
                            goto LABEL_130;
                          case 's':
                            uint64_t v59 = *((void *)v6 + 4) | 0x1000000;
                            goto LABEL_130;
                          case 't':
                            uint64_t v59 = *((void *)v6 + 4) | 4;
                            goto LABEL_130;
                          case 'w':
                            uint64_t v59 = *((void *)v6 + 4) | 0x40;
                            goto LABEL_130;
                          case 'x':
                            uint64_t v59 = *((void *)v6 + 4) | 0x100000000;
                            goto LABEL_130;
                          case 'z':
                            uint64_t v59 = *((void *)v6 + 4) | 0x80000000;
LABEL_130:
                            *((void *)v6 + 4) = v59;
                            __str = v55 + 1;
                            continue;
                          default:
                            if (*__str != 76) {
                              goto LABEL_41;
                            }
                            CFStringRef v57 = ++__str;
                            if (v55[1] == 40) {
                              get_wildcard_limit((uint64_t)v6, v57, &__str);
                            }
                            break;
                        }
                      }
                    }
                    goto LABEL_194;
                  }
                }
                else if ((*(_DWORD *)(v53 + 4 * (char)v23 + 60) & 0x4000) == 0)
                {
                  goto LABEL_104;
                }
                __str = v52;
                int v54 = *v52++;
                LOBYTE(v23) = v54;
                if (!v54) {
                  goto LABEL_194;
                }
              }
            }
            int v24 = 7;
          }
          *((_DWORD *)v6 + 6) = v24;
          goto LABEL_95;
        }
        goto LABEL_69;
      }
      int v25 = 13;
    }
    *((_DWORD *)v6 + 6) = v25;
    size_t v16 = __str;
LABEL_69:
    size_t v36 = v16 + 1;
    uint64_t v37 = MEMORY[0x1E4F14390];
    do
    {
      __str = v36;
      unsigned int v38 = *v36;
      if (!*v36) {
        break;
      }
      int v39 = (v38 & 0x80000000) != 0 ? __maskrune(v38, 0x4000uLL) : *(_DWORD *)(v37 + 4 * v38 + 60) & 0x4000;
      ++v36;
    }
    while (v39);
    free(*(void **)v6);
    __str = (char *)parse_string_piece((uint64_t)__str, __dst, 1056, &v99);
    *(void *)size_t v6 = process_qp_field_name((uint64_t)v6, __dst, v99);
    parse_comma(__str, &__str);
    get_args((uint64_t)v6, (uint64_t)__str, (uint64_t)&__str, v40, v41);
    int v42 = *((_DWORD *)v6 + 6);
    if (v42 == 13)
    {
      if (*((int *)v6 + 10) < 1) {
        goto LABEL_194;
      }
    }
    else if (v42 == 11 && *((_DWORD *)v6 + 10) != 2)
    {
      goto LABEL_194;
    }
    goto LABEL_41;
  }
  *((_DWORD *)v6 + 6) = 15;
  size_t v43 = __str + 1;
  uint64_t v44 = MEMORY[0x1E4F14390];
  do
  {
    __str = v43;
    unsigned int v45 = *v43;
    if (!*v43) {
      break;
    }
    int v46 = (v45 & 0x80000000) != 0 ? __maskrune(v45, 0x4000uLL) : *(_DWORD *)(v44 + 4 * v45 + 60) & 0x4000;
    ++v43;
  }
  while (v46);
  free(*(void **)v6);
  __str = (char *)parse_string_piece((uint64_t)__str, __dst, 1056, &v99);
  *(void *)size_t v6 = process_qp_field_name((uint64_t)v6, __dst, v99);
  if (parse_comma(__str, &__str))
  {
    size_t v47 = __str;
    int v48 = *__str;
    if (v48 == 52)
    {
      int v49 = 0;
      size_t v47 = ++__str;
      *((_DWORD *)v6 + 15) &= 0xFFFFFFF3;
      int v50 = 1;
      unsigned int v51 = 4;
    }
    else if (v48 == 50)
    {
      int v50 = 0;
      size_t v47 = ++__str;
      *((_DWORD *)v6 + 15) = v6[15] & 0xFFFFFFF3 | 4;
      int v49 = 1;
      unsigned int v51 = 2;
    }
    else
    {
      int v49 = 0;
      int v50 = 0;
      if (v48 == 49)
      {
        size_t v47 = ++__str;
        *((_DWORD *)v6 + 15) = v6[15] & 0xFFFFFFF3 | 8;
        unsigned int v51 = 1;
      }
      else
      {
        unsigned int v51 = 0;
      }
    }
    ++*((_DWORD *)v6 + 10);
    if (parse_comma(v47, &__str))
    {
      uint64_t v97 = 0;
      unsigned int v63 = strtol(__str, &v97, 0);
      uint64_t v64 = v97;
      if (v97)
      {
        if (v97 != __str)
        {
          switch(v63)
          {
            case 0x100u:
              unsigned int v65 = v6[15] & 0xFFFFFFFC;
              break;
            case 0x200u:
              unsigned int v65 = v6[15] & 0xFFFFFFFC | 1;
              break;
            case 0x300u:
              unsigned int v65 = v6[15] & 0xFFFFFFFC | 2;
              break;
            default:
              goto LABEL_194;
          }
          *((_DWORD *)v6 + 15) = v65;
          ++*((_DWORD *)v6 + 10);
          __str = v64;
          if (parse_comma(v64, &__str))
          {
            double v71 = __str;
            if (*__str == 118)
            {
              *((_DWORD *)v6 + 15) = v6[15] & 0x1FFFFFF | (strtoul(++__str, &v97, 0) << 25);
              __str = v97;
              if (!parse_comma(v97, &__str)) {
                goto LABEL_194;
              }
              double v71 = __str;
            }
            else
            {
              *((_DWORD *)v6 + 15) &= 0x1FFFFFFu;
            }
            if (*v71 == 105)
            {
              __str = v71 + 1;
              if (v71[1] == 120)
              {
                double v72 = v71 + 2;
                int v73 = -1;
              }
              else
              {
                unsigned int v74 = strtol(v71 + 1, &v97, 0);
                if (v74 > 2) {
                  int v73 = -1;
                }
                else {
                  int v73 = v74;
                }
                double v72 = v97;
              }
              *((_DWORD *)v6 + 20) = v73;
              __str = v72;
              if ((parse_comma(v72, &__str) & 1) == 0) {
                goto LABEL_194;
              }
            }
            else
            {
              v6[20] = 0.0;
            }
            long long v75 = malloc_type_malloc(v63 * (unint64_t)v51, 0x86104BD8uLL);
            uint64_t v76 = 0;
            *((void *)v6 + 37) = v75;
            *((_DWORD *)v6 + 40) |= 0x10000u;
            long long v77 = __str;
            while (1)
            {
              uint64_t v97 = 0;
              _S0 = strtof(v77, &v97);
              if (v49)
              {
                __asm { FCVT            H0, S0 }
                *(_WORD *)(*((void *)v6 + 37) + 2 * v76) = _H0;
              }
              else
              {
                if (!v50) {
                  break;
                }
                *(float *)(*((void *)v6 + 37) + 4 * v76) = _S0;
              }
              if (!v97) {
                break;
              }
              __str = v97;
              long long v77 = parse_whitespace(v97);
              __str = v77;
              if (v63 == ++v76)
              {
                ++*((_DWORD *)v6 + 10);
                if (!parse_comma(v77, &__str)) {
                  break;
                }
                uint64_t v97 = 0;
                unsigned int v84 = strtol(__str, &v97, 0);
                unint64_t v85 = v97;
                if (!v97 || v97 == __str) {
                  break;
                }
                int v86 = *((_DWORD *)v6 + 15);
                unsigned int v87 = v84 < 0x100000 ? v86 & 0xFF00000F | (16 * (v84 & 0xFFFFF)) : v86 | 0xFFFFF0;
                *((_DWORD *)v6 + 15) = v87;
                __str = v85;
                ++*((_DWORD *)v6 + 10);
                if (!parse_comma(v85, &__str)) {
                  break;
                }
                float v88 = strtof(__str, &v97);
                signed int v89 = v97;
                if (!v97 || v97 == __str) {
                  break;
                }
                v6[16] = v88;
                ++*((_DWORD *)v6 + 10);
                __str = v89;
                uint64_t v90 = parse_whitespace(v89);
                __str = v90;
                if (*v90 == 41)
                {
                  CFRange v70 = v90 + 1;
                  goto LABEL_152;
                }
                if (!parse_comma(v90, &__str)) {
                  break;
                }
                uint64_t v68 = __str;
                int v91 = *__str;
                if (v91 != 49)
                {
                  if (v91 != 48) {
                    break;
                  }
                  goto LABEL_190;
                }
                goto LABEL_191;
              }
            }
          }
        }
      }
    }
  }
LABEL_194:
  if (*(void *)v6)
  {
    free(*(void **)v6);
    *(void *)size_t v6 = 0;
  }
  uint64_t v95 = (void *)*((void *)v6 + 9);
  if (v95) {
    free(v95);
  }
  free(v6);
  return 0;
}

unsigned __int8 *parse_string_piece(uint64_t a1, char *__dst, int a3, _DWORD *a4)
{
  int v5 = (int)__dst;
  size_t v6 = &__dst[a3 - 1];
  for (uint64_t i = (unsigned __int8 *)(a1 + 1); ; ++i)
  {
    unsigned int v8 = *(i - 1);
    if (v8 > 0x27) {
      goto LABEL_26;
    }
    if (((1 << v8) & 0x100000600) == 0) {
      break;
    }
  }
  if (((1 << v8) & 0x8400000000) != 0)
  {
    LOBYTE(v9) = *i;
    if (!*i)
    {
      uint64_t v10 = __dst;
      goto LABEL_64;
    }
    uint64_t v10 = __dst;
    while (1)
    {
      if (v8 == v9)
      {
        ++i;
        goto LABEL_64;
      }
      if (v9 == 92)
      {
        int v9 = i[1];
        if (v9 != 34 && v9 != 39)
        {
          if (v9 == 92)
          {
            if (v10 < v6) {
              *v10++ = 92;
            }
            uint64_t v11 = 5;
            ++i;
          }
          else
          {
            uint64_t v11 = 5u;
          }
LABEL_20:
          uint64_t v12 = utf8_byte_length_utf8_len_table_1[v11];
          uint64_t v13 = &v10[v12];
          if (&v10[v12] >= v6)
          {
            size_t v6 = v10;
          }
          else
          {
            memcpy(v10, i, utf8_byte_length_utf8_len_table_1[v11]);
            uint64_t v10 = v13;
          }
          i += v12;
          goto LABEL_24;
        }
        ++i;
      }
      uint64_t v11 = v9 >> 4;
      if ((v11 & 0xC) != 8) {
        goto LABEL_20;
      }
      ++i;
LABEL_24:
      LOBYTE(v9) = *i;
      if (!*i) {
        goto LABEL_64;
      }
    }
  }
LABEL_26:
  if (v8 == 36)
  {
    *__dst = 36;
    uint64_t v10 = __dst + 1;
    LOBYTE(v14) = *i;
    if (!*i) {
      goto LABEL_64;
    }
  }
  else
  {
    --i;
    LOBYTE(v14) = v8;
    uint64_t v10 = __dst;
    if (!v8) {
      goto LABEL_64;
    }
  }
  int v15 = 0;
  uint64_t v16 = 1;
  while (1)
  {
    uint64_t v17 = (char)v14;
    int v18 = i + 1;
    if (v17 <= 0x3E)
    {
      if (((1 << v14) & 0x7000104300000600) != 0) {
        goto LABEL_35;
      }
      if (v17 == 40)
      {
        if (v8 != 36) {
          goto LABEL_63;
        }
        v15 += v8 == 36;
        goto LABEL_36;
      }
      if (v17 == 41) {
        break;
      }
    }
    if (v17 != 92)
    {
      if (v17 == 124)
      {
LABEL_35:
        if (!v15) {
          goto LABEL_63;
        }
      }
LABEL_36:
      uint64_t i = v18;
      goto LABEL_37;
    }
    if (v14 != 92) {
      goto LABEL_36;
    }
    int v14 = *v18;
    if (v14 != 39 && v14 != 34)
    {
      int v19 = i[2];
      i += 2;
      if (v19 == 92)
      {
        if (v10 < v6)
        {
          *v10++ = 92;
          LOBYTE(v14) = *v18;
        }
        goto LABEL_37;
      }
      LOBYTE(v14) = 92;
      goto LABEL_36;
    }
    i += 2;
LABEL_37:
    if ((_BYTE)v14 && v10 < v6) {
      *v10++ = v14;
    }
    LOBYTE(v14) = *i;
    if (!*i) {
      goto LABEL_64;
    }
  }
  if (!v15) {
    goto LABEL_63;
  }
  if (--v15) {
    goto LABEL_36;
  }
  if (v10 < v6) {
    *v10++ = v14;
  }
  uint64_t v16 = 2;
LABEL_63:
  uint64_t i = &i[v16 - 1];
LABEL_64:
  *uint64_t v10 = 0;
  if (a4) {
    *a4 = v10 - v5;
  }
  return i;
}

void *process_qp_field_name(uint64_t a1, char *__s1, int a3)
{
  float v3 = __s1;
  unsigned int v4 = a3 - 2;
  if (a3 < 2 || __s1[a3 - 1] != 93)
  {
LABEL_38:
    int v17 = *v3;
    if (!*v3) {
      return 0;
    }
    switch(*v3)
    {
      case 'm':
        if (!strncmp(v3, "modified.", 9uLL))
        {
          if (!strcmp(v3 + 10, "date"))
          {
            float v3 = "kMDItemUserModifiedDate";
          }
          else if (!strcmp(v3 + 10, "user"))
          {
            float v3 = "kMDItemUserModifiedUserHandle";
          }
        }
        break;
      case 'n':
      case 'o':
      case 'q':
        break;
      case 'p':
        if (!strncmp(v3, "printed.", 8uLL))
        {
          if (!strcmp(v3 + 9, "date"))
          {
            float v3 = "kMDItemUserPrintedDate";
          }
          else if (!strcmp(v3 + 9, "user"))
          {
            float v3 = "kMDItemUserPrintedUserHandle";
          }
        }
        break;
      case 'r':
        if (!strncmp(v3, "received.", 9uLL))
        {
          if (!strcmp(v3 + 10, "date"))
          {
            float v3 = "kMDItemUserSharedReceivedDate";
          }
          else if (!strcmp(v3 + 10, "sender"))
          {
            float v3 = "kMDItemUserSharedReceivedSender";
          }
          else if (!strcmp(v3 + 10, "receivers"))
          {
            float v3 = "kMDItemUserSharedReceivedRecipient";
          }
          else if (!strcmp(v3 + 10, "transport"))
          {
            float v3 = "kMDItemUserSharedReceivedTransport";
          }
          else if (!strcmp(v3 + 10, "senderHandle"))
          {
            float v3 = "kMDItemUserSharedReceivedSenderHandle";
          }
          else if (!strcmp(v3 + 10, "receiverHandles"))
          {
            float v3 = "kMDItemUserSharedReceivedRecipientHandle";
          }
        }
        break;
      case 's':
        if (!strncmp(v3, "sent.", 5uLL))
        {
          if (!strcmp(v3 + 6, "date"))
          {
            float v3 = "kMDItemUserSharedSentDate";
          }
          else if (!strcmp(v3 + 6, "sender"))
          {
            float v3 = "kMDItemUserSharedSentSender";
          }
          else if (!strcmp(v3 + 6, "recipients"))
          {
            float v3 = "kMDItemUserSharedSentRecipient";
          }
          else if (!strcmp(v3 + 6, "transport"))
          {
            float v3 = "kMDItemUserSharedSentTransport";
          }
          else if (!strcmp(v3 + 6, "senderHandle"))
          {
            float v3 = "kMDItemUserSharedSentSenderHandle";
          }
          else if (!strcmp(v3 + 6, "recipientHandles"))
          {
            float v3 = "kMDItemUserSharedSentRecipientHandle";
          }
        }
        break;
      default:
        if (v17 == 100)
        {
          if (!strncmp(v3, "downloaded.", 0xBuLL))
          {
            if (!strcmp(v3 + 12, "date"))
            {
              float v3 = "kMDItemUserDownloadedUserHandle";
            }
            else if (!strcmp(v3 + 12, "user"))
            {
              float v3 = "kMDItemUserDownloadedDate";
            }
          }
        }
        else if (v17 == 99 && !strncmp(v3, "created.", 8uLL))
        {
          if (!strcmp(v3 + 9, "date"))
          {
            float v3 = "kMDItemUserCreatedUserHandle";
          }
          else if (!strcmp(v3 + 9, "user"))
          {
            float v3 = "kMDItemUserCreatedDate";
          }
        }
        break;
    }
    return query_strdup(v3);
  }
  if (a3 <= 3)
  {
    *(void *)(a1 + 32) |= 0x2000000uLL;
    *(_DWORD *)(a1 + 44) = 0;
    goto LABEL_38;
  }
  char v6 = 0;
  char v7 = 0;
  unsigned int v8 = &__s1[a3 - 2];
  BOOL v9 = 1;
  uint64_t v10 = MEMORY[0x1E4F14390];
  while (1)
  {
    uint64_t v11 = &v3[v4];
    unsigned int v12 = *v11;
    if (v12 == 36)
    {
      if (v6) {
        BOOL v9 = 0;
      }
      char v6 = 1;
      goto LABEL_26;
    }
    if (v12 == 91)
    {
      *uint64_t v11 = 0;
      goto LABEL_32;
    }
    if ((v12 & 0x80000000) != 0) {
      break;
    }
    if ((*(_DWORD *)(v10 + 4 * v12 + 60) & 0x400) != 0) {
      goto LABEL_14;
    }
    int v13 = *(_DWORD *)(v10 + 4 * v12 + 60) & 0x4000;
LABEL_25:
    BOOL v9 = v13 != 0;
LABEL_26:
    int v15 = v9;
    if (v4 >= 3)
    {
      --v4;
      if (v9) {
        continue;
      }
    }
    goto LABEL_33;
  }
  if (!__maskrune(*v11, 0x400uLL))
  {
    int v13 = __maskrune(v12, 0x4000uLL);
    goto LABEL_25;
  }
LABEL_14:
  if ((v6 & 1) == 0)
  {
    char v6 = 0;
    if (v7) {
      BOOL v14 = v7 == v11 + 1;
    }
    else {
      BOOL v14 = 1;
    }
    BOOL v9 = v14;
    if (v14) {
      char v7 = v8;
    }
    goto LABEL_26;
  }
  LOBYTE(v9) = 0;
  char v6 = 1;
LABEL_32:
  int v15 = v9;
LABEL_33:
  uint64_t v16 = *(void *)(a1 + 32);
  if ((v6 & 1) == 0 && v7)
  {
    *(void *)(a1 + 32) = v16 | 0x4000000;
    *(_DWORD *)(a1 + 44) = 0;
    goto LABEL_37;
  }
  *(void *)(a1 + 32) = v16 | 0x2000000;
  *(_DWORD *)(a1 + 44) = 0;
  if (!v7)
  {
    if (!v15) {
      return 0;
    }
    goto LABEL_38;
  }
LABEL_37:
  *(_DWORD *)(a1 + 44) = atoi(v7);
  if (v15) {
    goto LABEL_38;
  }
  return 0;
}

uint64_t parse_comma(char *a1, void *a2)
{
  char v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = a1 + 1;
  uint64_t v5 = MEMORY[0x1E4F14390];
  while ((v2 & 0x80) == 0)
  {
    if ((*(_DWORD *)(v5 + 4 * v2 + 60) & 0x4000) == 0) {
      goto LABEL_9;
    }
LABEL_7:
    int v6 = *v4++;
    char v2 = v6;
    if (!v6) {
      return 0;
    }
  }
  if (__maskrune(v2, 0x4000uLL)) {
    goto LABEL_7;
  }
LABEL_9:
  if (*(v4 - 1) != 44) {
    return 0;
  }
  do
  {
    char v7 = v4;
    unsigned int v8 = (char)*v4;
    if (!*v4) {
      break;
    }
    int v9 = (v8 & 0x80000000) != 0 ? __maskrune(v8, 0x4000uLL) : *(_DWORD *)(v5 + 4 * v8 + 60) & 0x4000;
    ++v4;
  }
  while (v9);
  *a2 = v7;
  return 1;
}

unsigned char *parse_whitespace(unsigned char *a1)
{
  uint64_t v1 = a1;
  char v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = MEMORY[0x1E4F14390];
    do
    {
      if (v2 < 0)
      {
        if (!__maskrune(v2, 0x4000uLL)) {
          return v1;
        }
      }
      else if ((*(_DWORD *)(v3 + 4 * v2 + 60) & 0x4000) == 0)
      {
        return v1;
      }
      int v4 = *++v1;
      char v2 = v4;
    }
    while (v4);
  }
  return v1;
}

void get_args(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = MEMORY[0x1F4188790](a5, a1, a2, a3, a4);
  char v7 = v6;
  int v9 = (unsigned __int8 *)v8;
  uint64_t v10 = v5;
  char __src[1024] = *MEMORY[0x1E4F143B8];
  size_t v11 = strlen(v8);
  signed __int8 v12 = *v9;
  if (!*v9) {
    goto LABEL_33;
  }
  int v13 = &v9[v11];
  uint64_t v14 = MEMORY[0x1E4F14390];
  while (1)
  {
    if ((v12 & 0x80) == 0)
    {
      if ((*(_DWORD *)(v14 + 4 * v12 + 60) & 0x4000) == 0) {
        break;
      }
      goto LABEL_7;
    }
    if (!__maskrune(v12, 0x4000uLL)) {
      break;
    }
LABEL_7:
    int v15 = *++v9;
    signed __int8 v12 = v15;
    if (!v15) {
      goto LABEL_33;
    }
  }
  int v16 = *v9;
  if (!*v9)
  {
LABEL_33:
    *((_DWORD *)v10 + 10) = 0;
    goto LABEL_34;
  }
  bzero(__src, 0x2000uLL);
  uint64_t v17 = 0;
  unsigned int v18 = 0;
LABEL_11:
  if (v16 != 41)
  {
    bzero(__dst, 0x400uLL);
    int v9 = parse_string_piece((uint64_t)v9, __dst, 1024, 0);
    __src[v17] = query_strdup(__dst);
    signed __int8 v19 = *v9;
    if (!*v9) {
      goto LABEL_29;
    }
    unsigned int v20 = v9 + 1;
    while (1)
    {
      if (v19 < 0)
      {
        if (!__maskrune(v19, 0x4000uLL))
        {
LABEL_20:
          BOOL v22 = *v9 != 44 || v9 >= v13;
          if (!v22)
          {
            do
            {
              int v9 = v20;
              unsigned int v23 = (char)*v20;
              if (!*v20) {
                break;
              }
              int v24 = (v23 & 0x80000000) != 0 ? __maskrune(v23, 0x4000uLL) : *(_DWORD *)(v14 + 4 * v23 + 60) & 0x4000;
              ++v20;
            }
            while (v24);
          }
LABEL_29:
          ++v17;
          int v16 = *v9;
          if (!*v9) {
            goto LABEL_36;
          }
          BOOL v22 = v18++ >= 0x3FF;
          if (v22) {
            goto LABEL_36;
          }
          goto LABEL_11;
        }
      }
      else if ((*(_DWORD *)(v14 + 4 * v19 + 60) & 0x4000) == 0)
      {
        goto LABEL_20;
      }
      int v21 = *++v9;
      signed __int8 v19 = v21;
      ++v20;
      if (!v21) {
        goto LABEL_29;
      }
    }
  }
  ++v9;
LABEL_36:
  *((_DWORD *)v10 + 10) = v17;
  if (v17)
  {
    int v25 = malloc_type_malloc(8 * v17, 0xB1929E07uLL);
    if (!v25) {
      _log_fault_for_malloc_failure();
    }
    v10[21] = v25;
    memcpy(v25, __src, 8 * v17);
  }
LABEL_34:
  *char v7 = v9;
}

void get_proximities(uint64_t a1, char *a2, char **a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  signed __int8 v12 = &v11;
  uint64_t v13 = 0x2000000000;
  uint64_t v14 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  unint64_t v10[2] = __get_proximities_block_invoke;
  v10[3] = &unk_1E5AEF298;
  v10[4] = &v11;
  int v6 = _process_proximities(a2, (uint64_t)v10);
  *(_DWORD *)(a1 + 96) = 0;
  uint64_t v7 = v12[3];
  if (v7)
  {
    unsigned int v8 = malloc_type_malloc(4 * v7, 0xB1929E07uLL);
    if (v8)
    {
      *(void *)(a1 + 88) = v8;
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 0x40000000;
      void v9[2] = __get_proximities_block_invoke_2;
      void v9[3] = &__block_descriptor_tmp_164;
      void v9[4] = a1;
      _process_proximities(a2, (uint64_t)v9);
    }
    else
    {
      _log_fault_for_malloc_failure();
      *(void *)(a1 + 88) = 0;
    }
  }
  *a3 = v6;
  _Block_object_dispose(&v11, 8);
}

void get_weights(uint64_t a1, char *a2, char **a3)
{
  int v4 = a2;
  v21[1] = *(char **)MEMORY[0x1E4F143B8];
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2000000000;
  v20[3] = 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  int v16 = __get_weights_block_invoke;
  uint64_t v17 = &unk_1E5AEF2E0;
  unsigned int v18 = v20;
  uint64_t v19 = a1;
  if (*a2 == 40)
  {
    uint64_t v5 = a2 + 1;
    uint64_t v6 = MEMORY[0x1E4F14390];
    do
    {
      int v4 = v5;
      unsigned int v7 = *v5;
      if (!*v5) {
        break;
      }
      int v8 = (v7 & 0x80000000) != 0 ? __maskrune(v7, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000;
      uint64_t v5 = v4 + 1;
    }
    while (v8);
LABEL_8:
    v21[0] = v4;
LABEL_9:
    int v9 = *v4;
    if (*v4)
    {
      ++v4;
      if (v9 != 41)
      {
        while (1)
        {
          if ((v9 & 0x80) != 0)
          {
            if (!__maskrune((char)v9, 0x4000uLL))
            {
LABEL_17:
              int v4 = v21[0];
              int v9 = *v21[0];
LABEL_18:
              if (v9 == 46 || ((char)v9 - 48) <= 9)
              {
                float v12 = strtof(v4, v21);
                v16((uint64_t)v15, v12);
                int v4 = v21[0];
                int v9 = *v21[0];
              }
              if (!v9)
              {
LABEL_32:
                ++v4;
                goto LABEL_8;
              }
              uint64_t v13 = v4 + 1;
              while (1)
              {
                if ((v9 & 0x80) != 0)
                {
                  if (!__maskrune((char)v9, 0x4000uLL))
                  {
LABEL_31:
                    int v4 = v21[0];
                    if (*v21[0] != 41) {
                      goto LABEL_32;
                    }
                    goto LABEL_9;
                  }
                }
                else if ((*(_DWORD *)(v6 + 4 * (char)v9 + 60) & 0x4000) == 0)
                {
                  goto LABEL_31;
                }
                v21[0] = v13;
                int v14 = *v13++;
                LOBYTE(v9) = v14;
                if (!v14)
                {
                  int v4 = v13 - 1;
                  goto LABEL_32;
                }
              }
            }
          }
          else if ((*(_DWORD *)(v6 + 4 * (char)v9 + 60) & 0x4000) == 0)
          {
            goto LABEL_17;
          }
          v21[0] = v4;
          int v10 = *v4++;
          int v9 = v10;
          if (!v10)
          {
            --v4;
            goto LABEL_18;
          }
        }
      }
    }
  }
  *a3 = v4;
  _Block_object_dispose(v20, 8);
}

void get_wildcard_limit(uint64_t a1, char *a2, char **a3)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2000000000;
  v4[3] = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  unint64_t v3[2] = __get_wildcard_limit_block_invoke;
  v3[3] = &unk_1E5AEF308;
  v3[4] = v4;
  void v3[5] = a1;
  *a3 = _process_proximities(a2, (uint64_t)v3);
  _Block_object_dispose(v4, 8);
}

char *_process_proximities(char *a1, uint64_t a2)
{
  char v2 = a1;
  v16[1] = *(char **)MEMORY[0x1E4F143B8];
  if (*a1 == 40)
  {
    int v4 = a1 + 1;
    uint64_t v5 = MEMORY[0x1E4F14390];
    do
    {
      char v2 = v4;
      unsigned int v6 = *v4;
      if (!*v4) {
        break;
      }
      int v7 = (v6 & 0x80000000) != 0 ? __maskrune(v6, 0x4000uLL) : *(_DWORD *)(v5 + 4 * v6 + 60) & 0x4000;
      int v4 = v2 + 1;
    }
    while (v7);
    for (v16[0] = v2; ; v16[0] = v2)
    {
      while (2)
      {
        while (2)
        {
          int v8 = *v2;
          if (!*v2) {
            return v2;
          }
          if (v8 == 41) {
            return ++v2;
          }
          do
          {
            if ((v8 & 0x80) != 0)
            {
              if (!__maskrune((char)v8, 0x4000uLL)) {
                break;
              }
            }
            else if ((*(_DWORD *)(v5 + 4 * (char)v8 + 60) & 0x4000) == 0)
            {
              break;
            }
            int v9 = *++v2;
            LOBYTE(v8) = v9;
          }
          while (v9);
          v16[0] = v2;
          if ((*v2 - 48) > 9)
          {
            char v11 = *v2;
            if (!*v2) {
              goto LABEL_30;
            }
          }
          else
          {
            uint64_t v10 = strtol(v2, v16, 0);
            (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v10);
            char v2 = v16[0];
            char v11 = *v16[0];
            if (!*v16[0]) {
              goto LABEL_30;
            }
          }
          float v12 = v2 + 1;
          while ((v11 & 0x80) == 0)
          {
            if ((*(_DWORD *)(v5 + 4 * v11 + 60) & 0x4000) == 0) {
              goto LABEL_27;
            }
LABEL_25:
            int v13 = *v12++;
            char v11 = v13;
            if (!v13)
            {
              char v2 = v12 - 1;
              goto LABEL_30;
            }
          }
          if (__maskrune(v11, 0x4000uLL)) {
            goto LABEL_25;
          }
LABEL_27:
          char v2 = v12 - 1;
          v16[0] = v12 - 1;
          int v14 = *(v12 - 1);
          if (v14 == 41) {
            continue;
          }
          break;
        }
        if (v14 == 44)
        {
          v16[0] = v12;
          char v2 = v12;
          continue;
        }
        break;
      }
LABEL_30:
      ++v2;
    }
  }
  return v2;
}

uint64_t __get_proximities_block_invoke(uint64_t result)
{
  return result;
}

uint64_t __get_proximities_block_invoke_2(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(void *)(v2 + 88);
  uint64_t v4 = *(unsigned int *)(v2 + 96);
  *(_DWORD *)(v2 + 96) = v4 + 1;
  *(_DWORD *)(v3 + 4 * v4) = a2;
  return result;
}

uint64_t __get_weights_block_invoke(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24);
  if (v2 == 1)
  {
    *(float *)(*(void *)(result + 40) + 56) = a2;
  }
  else if (!v2)
  {
    *(float *)(*(void *)(result + 40) + 52) = a2;
  }
  ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24);
  return result;
}

uint64_t __get_wildcard_limit_block_invoke(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  uint64_t v3 = *(void *)(v2 + 24);
  *(void *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3 + 1;
  if (!v3) {
    *(_DWORD *)(*(void *)(result + 40) + 60) = a2;
  }
  return result;
}

uint64_t __free_tree_block_invoke(int a1, void *a2)
{
  uint64_t v3 = (int *)a2[2];
  if (v3) {
    free_qp(v3);
  }
  free(a2);
  return 0;
}

uint64_t render_field_name(uint64_t a1, void **a2, uint64_t a3, size_t *a4, _DWORD *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t result = render_string(*(const char **)a1, a2, a3, a4);
  uint64_t v10 = *(void *)(a1 + 32);
  if ((v10 & 0x800000) == 0 && (v10 & 0x6000000) != 0)
  {
    size_t v11 = render_string("[", a2, result, a4);
    if ((*(unsigned char *)(a1 + 35) & 2) != 0)
    {
      size_t v11 = render_string("$", a2, v11, a4);
      uint64_t v13 = *(void *)(a1 + 32);
      *(_OWORD *)__str = 0u;
      long long v18 = 0u;
      int v12 = *(_DWORD *)(a1 + 44);
      if (a5 && (v13 & 0x2000000) != 0)
      {
        uint64_t v14 = *a5;
        if ((int)v14 >= 1)
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (a5[i + 1] == v12)
            {
              int v12 = i;
              goto LABEL_15;
            }
          }
          if ((int)v14 > 29) {
            goto LABEL_15;
          }
        }
        a5[(int)v14 + 1] = v12;
        int v12 = (*a5)++;
      }
    }
    else
    {
      *(_OWORD *)__str = 0u;
      long long v18 = 0u;
      int v12 = *(_DWORD *)(a1 + 44);
    }
LABEL_15:
    snprintf(__str, 0x20uLL, "%d", v12);
    size_t v16 = render_string(__str, a2, v11, a4);
    return render_string("]", a2, v16, a4);
  }
  return result;
}

size_t render_string_protecting_char(const char *a1, void **a2, uint64_t a3, size_t *a4)
{
  int v7 = (char *)a1;
  size_t v8 = strlen(a1);
  int v9 = strchr(v7, 34);
  for (i = 0; v9; int v9 = strchr(v9 + 1, 34))
    ++i;
  size_t v11 = v8 + a3;
  unint64_t v12 = v8 + a3 + i;
  size_t v13 = *a4;
  if (v12 > *a4)
  {
    do
    {
      BOOL v14 = v12 > 2 * v13;
      v13 *= 2;
    }
    while (v14);
    *a4 = v13;
    *a2 = malloc_type_realloc(*a2, v13, 0x3E98BC13uLL);
  }
  if (i)
  {
    uint64_t v15 = strchr(v7, 34);
    if (v15)
    {
      size_t v16 = v15;
      do
      {
        memcpy((char *)*a2 + a3, v7, v16 - v7);
        *((unsigned char *)*a2 + v16 - v7 + a3) = 92;
        uint64_t v17 = (char *)*a2 + v16 - v7 + a3;
        a3 += v16 - v7 + 2;
        v17[1] = 34;
        v8 += ~(v16 - v7);
        int v7 = v16 + 1;
        size_t v16 = strchr(v16 + 1, 34);
      }
      while (v16);
      size_t v11 = v8 + a3;
    }
  }
  memcpy((char *)*a2 + a3, v7, v8);
  return v11;
}

uint64_t _MDIsAppleInternal()
{
  if (_MDIsAppleInternal_onceToken != -1) {
    dispatch_once(&_MDIsAppleInternal_onceToken, &__block_literal_global_17);
  }
  return 0;
}

uint64_t StringTripletRetain(uint64_t a1, uint64_t a2)
{
  return a2;
}

void StringTripletRelease(CFAllocatorRef allocator, void *ptr)
{
  unsigned int v2 = *((_DWORD *)ptr + 2);
  if (v2 < 2)
  {
    CFAllocatorDeallocate(allocator, ptr);
  }
  else
  {
    *((_DWORD *)ptr + 2) = v2 - 1;
  }
}

CFStringRef StringTripletCopyDescription(CFIndex *a1)
{
  uint64_t v1 = (const UInt8 *)a1[2];
  CFIndex v2 = *a1;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return CFStringCreateWithBytes(v3, v1, v2, 0x8000100u, 1u);
}

BOOL StringTripletEqual(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), *(void *)a1) == 0;
}

uint64_t StringTripletHash(uint64_t *a1)
{
  uint64_t v1 = *a1;
  CFIndex v2 = (char *)a1[2];
  if (*a1 > 23)
  {
    uint64_t v6 = 66049 * v2[5]
       + 16974593 * v2[4]
       + 67503105 * (67503105 * v1 + 16974593 * *v2 + 66049 * v2[1] + 257 * v2[2] + v2[3])
       + 257 * v2[6]
       + v2[7];
    int v7 = &v2[v1];
    uint64_t v4 = 66049 * *(v7 - 3)
       + 16974593 * *(v7 - 4)
       + 257 * *(v7 - 2)
       + *(v7 - 1)
       + 67503105
       * (66049 * *(v7 - 7)
        + 16974593 * *(v7 - 8)
        + 257 * *(v7 - 6)
        + *(v7 - 5)
        + 67503105
        * (66049 * *(v7 - 11)
         + 16974593 * *(v7 - 12)
         + 257 * *(v7 - 10)
         + *(v7 - 9)
         + 67503105 * (66049 * *(v7 - 15) + 16974593 * *(v7 - 16) + 257 * *(v7 - 14) + *(v7 - 13) + 67503105 * v6)));
  }
  else
  {
    if ((uint64_t)(v1 & 0xFFFFFFFFFFFFFFFCLL) < 1)
    {
      CFAllocatorRef v3 = (char *)a1[2];
      uint64_t v5 = v3;
      uint64_t v4 = *a1;
    }
    else
    {
      CFAllocatorRef v3 = (char *)a1[2];
      uint64_t v4 = *a1;
      uint64_t v5 = v3;
      do
      {
        uint64_t v4 = 67503105 * v4 + 16974593 * *v5 + 66049 * v5[1] + 257 * v5[2] + v5[3];
        v5 += 4;
        v3 += 4;
      }
      while (v5 < &v2[v1 & 0xFFFFFFFFFFFFFFFCLL]);
    }
    if (v5 < &v2[v1])
    {
      size_t v8 = (char *)(&v2[v1] - v3);
      do
      {
        uint64_t v9 = *v5++;
        uint64_t v4 = 257 * v4 + v9;
        --v8;
      }
      while (v8);
    }
  }
  return ((v4 << (v1 & 0x1F)) + v4) ^ (v1 << 24);
}

CFStringRef _MDPlistBytesCreateUniquedString(const __CFAllocator *a1, UInt8 *bytes, size_t numBytes, CFStringEncoding encoding, uint64_t a5)
{
  value[1] = *(void **)MEMORY[0x1E4F143B8];
  CFDictionaryRef v9 = *(const __CFDictionary **)a5;
  if (*(void *)a5)
  {
    key[2] = bytes;
    value[0] = 0;
    key[0] = numBytes;
    key[1] = 0;
    if (CFDictionaryGetValueIfPresent(v9, key, (const void **)value))
    {
      CFRetain(value[0]);
      return (CFStringRef)value[0];
    }
    CFTypeRef cf = 0;
    CFDictionaryRef v13 = *(const __CFDictionary **)(a5 + 8);
    if (v13 && CFDictionaryGetValueIfPresent(v13, key, &cf))
    {
      CFRetain(cf);
    }
    else
    {
      CFStringRef result = CFStringCreateWithBytes(a1, bytes, numBytes, encoding, 1u);
      CFTypeRef cf = result;
      if (!result) {
        return result;
      }
    }
    CFAllocatorRef v14 = CFGetAllocator(*(CFTypeRef *)a5);
    uint64_t v15 = CFAllocatorAllocate(v14, numBytes + 24, 0);
    *(void *)uint64_t v15 = numBytes;
    void v15[2] = 0;
    *((void *)v15 + 2) = v15 + 6;
    memcpy(v15 + 6, bytes, numBytes);
    if (*(_DWORD *)(a5 + 16) <= 0x7A120u)
    {
      CFMutableStringRef Mutable = *(__CFDictionary **)a5;
    }
    else
    {
      size_t v16 = *(const void **)(a5 + 8);
      if (v16) {
        CFRelease(v16);
      }
      *(void *)(a5 + 8) = *(void *)a5;
      CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kStringTripletDictionaryKeyCallBacks, MEMORY[0x1E4F1D540]);
      *(void *)a5 = Mutable;
      *(_DWORD *)(a5 + 16) = 0;
    }
    CFDictionarySetValue(Mutable, v15, cf);
    ++*(_DWORD *)(a5 + 16);
    return (CFStringRef)cf;
  }
  else
  {
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    return CFStringCreateWithBytes(v12, bytes, numBytes, encoding, 1u);
  }
}

CFMutableDictionaryRef _MDUniquiedStringDictCreate(const __CFAllocator *a1)
{
  uint64_t v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];

  return CFDictionaryCreateMutable(a1, 0, &kStringTripletDictionaryKeyCallBacks, v1);
}

MDPathFilterGenerator *MDCreateFilterGenerator(void *a1, void *a2, unsigned char *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if ([a2 count])
  {
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v6 = [a2 countByEnumeratingWithState:&v32 objects:v31 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v33;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v33 != v8) {
            objc_enumerationMutation(a2);
          }
          [v5 setObject:@"<BUNDLE>" forKey:*(void *)(*((void *)&v32 + 1) + 8 * i)];
        }
        uint64_t v7 = [a2 countByEnumeratingWithState:&v32 objects:v31 count:16];
      }
      while (v7);
    }
    [v5 removeObjectForKey:@"mbox"];
    [v5 removeObjectForKey:@"imapmbox"];
    [v5 addEntriesFromDictionary:&unk_1EF689EA0];
    uint64_t v10 = &unk_1EF689EC8;
  }
  else
  {
    id v5 = 0;
    uint64_t v10 = 0;
  }
  int v24 = [[MDPathFilterGenerator alloc] initWithDefaultFieldsAndValues:0 ignoreFields:0 mappedPrefixes:v10 hiddenExtensions:0 mappedExtensions:v5];
  [(MDPathFilterGenerator *)v24 setAtBundleField:176230 inBundleField:184423];

  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v11 = [a1 countByEnumeratingWithState:&v27 objects:v26 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v28;
    do
    {
      for (uint64_t j = 0; j != v12; ++j)
      {
        if (*(void *)v28 != v13) {
          objc_enumerationMutation(a1);
        }
        uint64_t v15 = *(void **)(*((void *)&v27 + 1) + 8 * j);
        if ([v15 isEqualToString:@"/"])
        {
          if (a3[5])
          {
            size_t v16 = &rulesVolumeROSP;
            if (!a3[6])
            {
              if (a3[7]) {
                size_t v16 = &rulesDataROSP;
              }
              else {
                size_t v16 = 0;
              }
            }
          }
          else
          {
            size_t v16 = &rulesBootableVolume;
            if (!a3[2])
            {
              if (a3[3]) {
                size_t v16 = &rulesPrebootVolume;
              }
              else {
                size_t v16 = &rulesNonBootableVolume;
              }
            }
          }
          if (a3[8]) {
            uint64_t v17 = 0;
          }
          else {
            uint64_t v17 = &unk_1EF689EF0;
          }
          -[MDPathFilterGenerator addRules:withPrefix:tableMapping:](v24, "addRules:withPrefix:tableMapping:", v16, [v15 stringByAppendingPathComponent:&stru_1EF684D88], v17);
        }
      }
      uint64_t v12 = [a1 countByEnumeratingWithState:&v27 objects:v26 count:16];
    }
    while (v12);
  }
  if ([a1 count])
  {
    if (a3[2]) {
      long long v18 = &rulesBootableVolume;
    }
    else {
      long long v18 = &rulesNonBootableVolume;
    }
    if (*a3)
    {
      uint64_t v19 = @"/Backups.backupdb/*/*/*";
      unsigned int v20 = &unk_1EF689F18;
    }
    else
    {
      if (!a3[1]) {
        goto LABEL_41;
      }
      uint64_t v19 = @"/*";
      unsigned int v20 = &unk_1EF689F40;
    }
    [(MDPathFilterGenerator *)v24 addRules:v18 withPrefix:v19 tableMapping:v20];
LABEL_41:
    int v21 = &unk_1EF689F68;
    if (a3[8] && !*a3) {
      int v21 = 0;
    }
    [(MDPathFilterGenerator *)v24 addRules:&rulesCommon withPrefix:&stru_1EF684D88 tableMapping:v21];
    if (_os_feature_enabled_impl()) {
      BOOL v22 = &rulesNewSytemPrefs;
    }
    else {
      BOOL v22 = &rulesOldSytemPrefs;
    }
    [(MDPathFilterGenerator *)v24 addRules:v22 withPrefix:&stru_1EF684D88 tableMapping:v21];
    [(MDPathFilterGenerator *)v24 addRules:&rulesExtensions withPrefix:&stru_1EF684D88 tableMapping:0];
  }
  return v24;
}

void *CITokenizerCreate(int a1)
{
  CFIndex v2 = malloc_type_calloc(1uLL, 0x70uLL, 0x10F0040AEFF90DEuLL);
  CFAllocatorRef v3 = v2;
  if (v2)
  {
    v2[3] = 0;
    v2[4] = 0;
    *((_DWORD *)v2 + 10) = a1;
    uint64_t v4 = NLStringTokenizerCreate();
    v3[1] = v4;
    unint64_t v3[2] = 0;
    if (!v4) {
      CITokenizerCreate_cold_1();
    }
    v3[7] = 0;
    v3[8] = 0;
  }
  return v3;
}

void CITokenizerDispose(void *a1)
{
  if (a1)
  {
    CFIndex v2 = (const void *)a1[1];
    if (v2) {
      CFRelease(v2);
    }
    CFAllocatorRef v3 = (const void *)a1[2];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (void *)a1[8];
    if (v4) {
      free(v4);
    }
    id v5 = (const void *)a1[7];
    if (v5) {
      CFRelease(v5);
    }
    free(a1);
  }
}

uint64_t CITokenizerReset(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    return _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  }
  return result;
}

void *CIRetainIndexingTokenizer(unsigned int a1)
{
  if (a1 >= 4) {
    CIRetainIndexingTokenizer_cold_1();
  }
  CFIndex v2 = OSAtomicDequeue((OSQueueHead *)&gIndexingTokenizerStack + a1, 0);
  if (v2)
  {
    uint64_t v3 = v2[1];
    v2[1] = 0;
    OSAtomicEnqueue(&gIndexingTokenizerHeap, v2, 0);
    return (void *)v3;
  }
  else
  {
    return CITokenizerCreate(a1);
  }
}

void CIPurgeTokenizers()
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v1 = OSAtomicDequeue((OSQueueHead *)&gIndexingTokenizerStack + i, 0);
    CFIndex v2 = (void **)OSAtomicDequeue((OSQueueHead *)&gIndexingTokenizerStack + i, 0);
    if (v2)
    {
      uint64_t v3 = v2;
      do
      {
        CITokenizerDispose(v3[1]);
        v3[1] = 0;
        OSAtomicEnqueue(&gIndexingTokenizerHeap, v3, 0);
        uint64_t v3 = (void **)OSAtomicDequeue((OSQueueHead *)&gIndexingTokenizerStack + i, 0);
      }
      while (v3);
    }
    if (v1) {
      OSAtomicEnqueue((OSQueueHead *)&gIndexingTokenizerStack + i, v1, 0);
    }
  }
}

void CIReleaseIndexingTokenizer(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 40);
  if (v1 >= 4) {
    CIReleaseIndexingTokenizer_cold_1();
  }
  CITokenizerReset(a1);
  uint64_t v3 = OSAtomicDequeue(&gIndexingTokenizerHeap, 0);
  if (!v3) {
    uint64_t v3 = malloc_type_malloc(0x10uLL, 0xA0040BD48D6D6uLL);
  }
  v3[1] = a1;

  OSAtomicEnqueue((OSQueueHead *)&gIndexingTokenizerStack + v1, v3, 0);
}

void CITokenizerSetLocale(uint64_t a1, const __CFString *a2, const char *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  bzero(buffer, 0x400uLL);
  if (a2 && (uint64_t v6 = buffer, CFStringGetCString(a2, buffer, 1024, 0x8000100u)) || (uint64_t v6 = (char *)a3) != 0)
  {
    if (*v6) {
      a3 = v6;
    }
    else {
      a3 = 0;
    }
    if (*v6) {
      CFStringRef v7 = a2;
    }
    else {
      CFStringRef v7 = 0;
    }
  }
  else
  {
    CFStringRef v7 = a2;
  }
  uint64_t v8 = *(char **)(a1 + 64);
  if (a3 == v8) {
    return;
  }
  if (a3 && v8)
  {
    if (!strcmp(a3, *(const char **)(a1 + 64))) {
      return;
    }
    goto LABEL_17;
  }
  if (v8) {
LABEL_17:
  }
    free(v8);
  *(void *)(a1 + 64) = 0;
  CFDictionaryRef v9 = *(const void **)(a1 + 56);
  if (v9) {
    CFRelease(v9);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v10 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a3 && !v7) {
    CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, 0x8000100u);
  }
  if (v7)
  {
    CFLocaleRef v11 = CFLocaleCreate(*v10, v7);
    *(void *)(a1 + 56) = v11;
    if (v11) {
      *(void *)(a1 + 64) = strdup(a3);
    }
    if (v7 != a2) {
      CFRelease(v7);
    }
  }
  *(_DWORD *)(a1 + 72) = MEMORY[0x1A6246960](*(void *)(a1 + 56));
}

BOOL CIStringTokenizerResolveTranscriptions@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v5 = (const char *)MEMORY[0x1F4188790](a5, a1, a2, a3, a4);
  CFIndex v7 = v6;
  CFDictionaryRef v9 = v8;
  CFLocaleRef v11 = v10;
  uint64_t v12 = (const UInt8 *)v5;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  size_t v13 = strlen(v5);
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v14 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, v13, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (!v14) {
    return 0;
  }
  CFStringRef v15 = v14;
  size_t v16 = CIRetainIndexingTokenizer(3u);
  if (!v16)
  {
    BOOL v39 = 0;
    goto LABEL_55;
  }
  uint64_t v17 = (uint64_t)v16;
  buffer = v9;
  CFIndex v42 = v7;
  bzero(v57, 0x1000uLL);
  bzero(&v56, 0x800uLL);
  bzero(v55, 0x800uLL);
  bzero(v54, 0x800uLL);
  uint64_t v53 = 0;
  *(_OWORD *)unsigned int v51 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  memset(v50, 0, sizeof(v50));
  CITokenizerSetLocale(v17, 0, v11);
  CITokenizerStateInit((uint64_t)v50, v15, (*(unsigned int *)(v17 + 72) < 0x37uLL) & (0x40000000300030uLL >> *(_DWORD *)(v17 + 72)), 0);
  CFStringRef v43 = v15;
  if (cf[0]) {
    CFStringRef v18 = (const __CFString *)cf[0];
  }
  else {
    CFStringRef v18 = v15;
  }
  CFStringGetLength(v18);
  _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  CFMutableStringRef Mutable = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  UniChar chars = 32;
  int v48 = (const UniChar *)v51[0];
  uint64_t v44 = v17;
  do
  {
    uint64_t v22 = _NLStringTokenizerTokenizeWithTranscriptions();
    uint64_t v23 = v22;
    uint64_t v24 = v22 - 1;
    if (v22 >= 1)
    {
      uint64_t v25 = 0;
      int v26 = (uint64_t *)v57;
      int v46 = &v57[v24];
      uint64_t v45 = v22 - 1;
      long long v27 = (CFIndex *)v55;
      while (1)
      {
        if (!*v27)
        {
          if (v24 != v25) {
            goto LABEL_26;
          }
          if (!v20) {
            goto LABEL_26;
          }
          uint64_t v28 = v46[1] + *v46;
          CFIndex v29 = v28 - v20;
          if (v28 == v20) {
            goto LABEL_26;
          }
          unint64_t v30 = v48[v20];
          if (v30 > 0x7F)
          {
            if (!__maskrune(v30, 0x4000uLL)) {
              goto LABEL_34;
            }
          }
          else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v30 + 60) & 0x4000) == 0)
          {
LABEL_34:
            CFStringAppendCharacters(Mutable, &chars, 1);
          }
          long long v33 = Mutable;
          size_t v31 = &v48[v20];
          CFIndex v32 = v29;
          goto LABEL_25;
        }
        if (*(unsigned __int16 *)v54[v25] >= 0x80u) {
          char v21 = 1;
        }
        if (Mutable) {
          break;
        }
        CFMutableStringRef Mutable = CFStringCreateMutable(alloc, 0);
        if (v25) {
          goto LABEL_22;
        }
LABEL_24:
        uint64_t v20 = v26[1] + *v26;
        size_t v31 = (const UniChar *)v54[v25];
        CFIndex v32 = *v27;
        long long v33 = Mutable;
LABEL_25:
        CFStringAppendCharacters(v33, v31, v32);
LABEL_26:
        ++v25;
        v26 += 2;
        ++v27;
        if (v23 == v25) {
          goto LABEL_43;
        }
      }
      if (!v25) {
        goto LABEL_24;
      }
LABEL_22:
      if (*(v27 - 1))
      {
LABEL_23:
        CFStringAppendCharacters(Mutable, &chars, 1);
        goto LABEL_24;
      }
      uint64_t v34 = *v26;
      CFIndex v35 = *v26 - v20;
      if (v35 < 1) {
        goto LABEL_24;
      }
      if (v20)
      {
        unint64_t v36 = v48[v20];
        if (v36 > 0x7F)
        {
          if (__maskrune(v36, 0x4000uLL)) {
            goto LABEL_38;
          }
        }
        else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v36 + 60) & 0x4000) != 0)
        {
          goto LABEL_38;
        }
        CFStringAppendCharacters(Mutable, &chars, 1);
      }
LABEL_38:
      CFStringAppendCharacters(Mutable, &v48[v20], v35);
      unint64_t v37 = v48[v34 - 1];
      if (v37 > 0x7F) {
        int v38 = __maskrune(v37, 0x4000uLL);
      }
      else {
        int v38 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v37 + 60) & 0x4000;
      }
      uint64_t v24 = v45;
      if (v38) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
LABEL_43:
    ;
  }
  while (v23);
  if (v21) {
    CFStringNormalize(Mutable, kCFStringNormalizationFormD);
  }
  CFStringRef v15 = v43;
  if (Mutable)
  {
    BOOL v39 = CFStringGetCString(Mutable, buffer, v42, 0x8000100u) != 0;
    CFRelease(Mutable);
  }
  else
  {
    BOOL v39 = 0;
  }
  CIReleaseIndexingTokenizer(v44);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v51[1]) {
    free(v51[1]);
  }
LABEL_55:
  CFRelease(v15);
  return v39;
}

void CITokenizerStateInit(uint64_t a1, CFStringRef theString, int a3, int a4)
{
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (theString) {
    CFIndex Length = CFStringGetLength(theString);
  }
  else {
    CFIndex Length = 0;
  }
  CharactersPtr = CFStringGetCharactersPtr(theString);
  *(void *)(a1 + 96) = CharactersPtr;
  if (!CharactersPtr)
  {
    uint64_t v10 = (UniChar *)malloc_type_malloc(2 * Length + 32, 0xBD203FB0uLL);
    *(void *)(a1 + 104) = v10;
    if (!v10) {
      CITokenizerStateInit_cold_1(Length);
    }
    v19.CFIndex location = 0;
    v19.CFIndex length = Length;
    CFStringGetCharacters(theString, v19, v10);
    *(void *)(a1 + 96) = *(void *)(a1 + 104);
  }
  *(void *)(a1 + 120) = Length;
  if (!a3 || (int)Length < 1) {
    goto LABEL_15;
  }
  unorm2_getNFCInstance();
  if (unorm2_quickCheck() == 1)
  {
    *(unsigned char *)(a1 + 128) = 1;
    if (!a4) {
      return;
    }
    goto LABEL_16;
  }
  CFLocaleRef v11 = malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
  if (!v11)
  {
LABEL_15:
    if (!a4) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v12 = v11;
  int v13 = unorm2_normalize();
  int v17 = v13;
  *(unsigned char *)(a1 + 128) = 1;
  if (v13 == Length && !memcmp(*(const void **)(a1 + 96), v12, Length))
  {
    free(v12);
    goto LABEL_15;
  }
  if (v17 < (int)Length) {
    LODWORD(Length) = v17;
  }
  CFStringRef v18 = *(void **)(a1 + 104);
  if (v18) {
    free(v18);
  }
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = v12;
  *(void *)(a1 + 112) = CFStringCreateWithCharactersNoCopy(0, (const UniChar *)v12, (int)Length, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  *(void *)(a1 + 120) = (int)Length;
  if (a4)
  {
LABEL_16:
    uint64_t v14 = *(void *)(a1 + 120);
    if (v14 >= 2)
    {
      uint64_t v15 = *(void *)(a1 + 96);
      uint64_t v16 = v15 + 2 * v14;
      if (*(_WORD *)(v16 - 2) == 42
        && (*(_WORD *)(v16 - 4) != 92 || (unint64_t)v14 >= 3 && *(_WORD *)(v15 + 2 * v14 - 6) != 92))
      {
        *(unsigned char *)(a1 + 129) = 1;
      }
    }
  }
}

__n128 CITokenizerGetMatchState@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 88);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 104);
  return result;
}

void CITokenizerGetQueryTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)*(unsigned int *)(a1 + 32);

  CITokenizerGetQueryTokensWithOptions(a1, a2, a3, v3 & 0x10, v3);
}

void CITokenizerGetQueryTokensWithOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v5 = MEMORY[0x1F4188790](a5, a1, a2, a3, a4);
  uint64_t v10 = v9;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (v6)
  {
    CFStringRef v11 = v7;
    uint64_t v12 = (uint64_t)v6;
    uint64_t v13 = (uint64_t)v5;
    uint64_t v14 = v8;
    if (CFStringGetLength(v6))
    {
      v15[0] = v14;
      v15[1] = v10;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v18 = 0;
      bzero(&cf, 0x1810uLL);
      CITokenizerSetLocale(v13, v11, 0);
      _CITokenizerGetTokens(v13, *(void *)(v13 + 8), v12, (uint64_t)&cf, v15, 0, 0, _CITokenizerGetQueryTokensEnd, (uint64_t)v15);
      if (cf) {
        CFRelease(cf);
      }
      if (v20) {
        free(v20);
      }
    }
    else
    {
      v14(0, 0, v10);
    }
  }
  else
  {
    v8(0, 0, v9);
  }
}

void _CITokenizerGetTokens(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, void (*a6)(void, void *, uint64_t *), void (*a7)(uint64_t, uint64_t), void (*a8)(void, uint64_t, uint64_t), uint64_t a9)
{
  uint64_t v9 = MEMORY[0x1F4188790](a5, a1, a2, a3, a4);
  uint64_t v219 = v10;
  unsigned int v215 = v11;
  uint64_t v13 = v12;
  unsigned int v15 = v14;
  uint64_t v210 = v16;
  CFStringRef v18 = v17;
  uint64_t v20 = v19;
  uint64_t v21 = v9;
  uint64_t v252 = *MEMORY[0x1E4F143B8];
  bzero(v234, 0xC30uLL);
  uint64_t v236 = -1;
  uint64_t v22 = v21[1];
  uint64_t v221 = v20;
  if (v22 != v20) {
    goto LABEL_2;
  }
  if ((v15 & 4) != 0)
  {
    LODWORD(v23) = 1;
  }
  else
  {
    unsigned int v24 = *((_DWORD *)v21 + 18);
    if (v24 > 0x36)
    {
LABEL_2:
      LODWORD(v23) = 0;
      goto LABEL_7;
    }
    unint64_t v23 = (0x40000000300030uLL >> v24) & 1;
  }
LABEL_7:
  unsigned int v211 = a8;
  unsigned int v25 = *((_DWORD *)v21 + 10);
  unsigned int v222 = v15;
  uint64_t v232 = 0;
  long long v230 = 0u;
  long long v231 = 0u;
  long long v228 = 0u;
  long long v229 = 0u;
  memset(v227, 0, sizeof(v227));
  long long v225 = 0u;
  long long v226 = 0u;
  bzero(v251, 0x1010uLL);
  bzero(v250, 0x808uLL);
  bzero(&v246, 0x1010uLL);
  bzero(v242, 0x808uLL);
  bzero(v240, 0x808uLL);
  bzero(v239, 0x808uLL);
  CITokenizerStateInit((uint64_t)&v225, v18, v23, (v15 >> 6) & 1);
  if (v21[2] == v221) {
    LOBYTE(v232) = 1;
  }
  uint64_t v26 = a9;
  uint64_t v217 = a9;
  uint64_t v214 = *((void *)&v231 + 1);
  if (!*((void *)&v231 + 1))
  {
    char v183 = v211;
    uint64_t v184 = 0;
    if (v222)
    {
      if (v13) {
        v13(0, 0, v217);
      }
      if (v215) {
        v215(0, 0, 0, v217);
      }
    }
    goto LABEL_359;
  }
  uint64_t v224 = v21;
  if (a7)
  {
    uint64_t v27 = NLStringTokenizerCopyBestStringLanguage();
    if (v27)
    {
      uint64_t v28 = (const void *)v27;
      a7(v27, a9);
      CFRelease(v28);
    }
  }
  char v218 = a6;
  _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  if (v13) {
    v13(v230, v214, a9);
  }
  uint64_t v216 = 0;
  CFIndex v29 = &v228;
  UChar32 v220 = &v227[1];
  CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  unsigned int v202 = v222 & 0xFFFFFFFE;
  uint64_t v200 = v210 + 4112;
  uint64_t v201 = v210 + 16;
  v205 = &v248;
  CFAllocatorRef v203 = v30;
  uint64_t v204 = &v243;
  v199 = (void *)(v210 + 24);
  unsigned int v212 = &v247;
  v213 = &v235;
  unsigned int v208 = &v241;
  unsigned int v209 = &v245;
  char v206 = &v244;
  BOOL v207 = &v249;
  size_t v31 = v224;
  char v223 = &v228;
LABEL_16:
  while (2)
  {
    while (2)
    {
      while (2)
      {
        uint64_t v32 = *((void *)&v226 + 1);
        while (1)
        {
          uint64_t v33 = v226;
          if (v32 >= (uint64_t)v226)
          {
            uint64_t v60 = *((void *)&v225 + 1);
            uint64_t v59 = v225;
            if (*((uint64_t *)&v225 + 1) >= (uint64_t)v225)
            {
              *((void *)&v225 + 1) = 0;
              if ((v222 & 2) != 0) {
                uint64_t v59 = _NLStringTokenizerTokenize();
              }
              else {
                uint64_t v59 = _NLStringTokenizerTokenizeWithTranscriptions();
              }
              *(void *)&long long v225 = v59;
              if (!v59)
              {
                if (v216 < v214 && v31[1] == v221) {
                  handle_missing_punctuation(v230, v216, v214, v215, v26, 0);
                }
                goto LABEL_337;
              }
              uint64_t v216 = *((void *)&v251[v59 - 1] + 1) + *(void *)&v251[v59 - 1];
              uint64_t v60 = *((void *)&v225 + 1);
              CFIndex v29 = v223;
            }
            uint64_t v61 = v60 + 1;
            uint64_t v62 = v250[v60];
            *((void *)&v225 + 1) = v60 + 1;
            v227[3] = v62;
            *UChar32 v220 = v251[v60];
            if (v227[2] == 1)
            {
              if (*(_WORD *)(v230 + 2 * v227[1]) == 8204) {
                goto LABEL_16;
              }
              if ((_BYTE)v232) {
                goto LABEL_127;
              }
            }
            else if ((_BYTE)v232)
            {
              if (v227[2] > 256) {
                goto LABEL_16;
              }
              goto LABEL_127;
            }
            if (v62 & 1) != 0 || v61 < v59 && (v250[v61])
            {
              if ((v62 & 0x40001000) != 0
                || (unsigned int v63 = *(unsigned __int16 *)(v230 + 2 * v227[1]), v63 >> 8 >= 0x11)
                && ((v63 & 0xFF00) == 0x1100 || (v63 - 11904) >> 7 < 0x197 || v63 - 65376 <= 0x4F))
              {
                v233[0] = 0;
                unorm2_getNFCInstance();
                char v183 = v211;
                uint64_t v184 = v214;
                if (v233[0] <= 0)
                {
                  uint64_t v188 = v227[1];
                  uint64_t v189 = v214 - v227[1];
                  int v190 = (UniChar *)malloc_type_malloc(2 * (v214 - v227[1]), 0x4AF24339uLL);
                  if (v190)
                  {
                    unint64_t v191 = v190;
                    int v192 = unorm2_normalize();
                    if (v233[0] <= 0)
                    {
                      CFIndex v193 = v189 >= v192 ? v192 : v184 - v188;
                      CFStringRef v194 = CFStringCreateWithCharactersNoCopy(0, v191, v193, v203);
                      if (v194)
                      {
                        CFStringRef v195 = v194;
                        uint64_t v196 = v224;
                        if (!v224[2]) {
                          v196[2] = NLStringTokenizerCreate();
                        }
                        _NLStringTokenizerSetLocale();
                        _CITokenizerGetTokens(v196, v196[2], v195, v210, v202, 0, v215, v219, 0, 0, 0, v217);
                        CFRelease(v195);
                      }
                    }
                    free(v191);
                  }
                }
                goto LABEL_359;
              }
            }
            if (v227[2] > 256) {
              goto LABEL_16;
            }
            if ((~(_WORD)v62 & 0x401) == 0)
            {
              v233[0] = 0;
              NFCuint64_t Instance = unorm2_getNFCInstance();
              if (v233[0] <= 0)
              {
                int v67 = v227[2];
                int v68 = v227[2];
                MEMORY[0x1F4188790]((void *)v233[0], NFCInstance, 2 * LODWORD(v227[2]), v65, v66);
                CFRange v70 = (char *)&v197 - ((v69 + 15) & 0x3FFFFFFF0);
                bzero(v70, v69);
                int v71 = unorm2_normalize();
                if (v233[0] <= 0)
                {
                  int v72 = v71;
                  if (v71 <= v67 && (v71 != v67 || !memcmp(v70, (const void *)(v230 + 2 * v227[1]), 2 * v68)))
                  {
                    CFStringRef v73 = CFStringCreateWithCharactersNoCopy(0, (const UniChar *)v70, v72, v203);
                    if (v73)
                    {
                      CFStringRef v74 = v73;
                      size_t v31 = v224;
                      if (!v224[2]) {
                        v31[2] = NLStringTokenizerCreate();
                      }
                      _NLStringTokenizerSetLocale();
                      _CITokenizerGetTokens(v31, v31[2], v74, v210, v202, 0, v215, v219, 0, 0, 0, v26);
                      CFRelease(v74);
                      CFIndex v29 = v223;
                      goto LABEL_16;
                    }
                  }
                }
                size_t v31 = v224;
              }
              CFIndex v29 = v223;
            }
LABEL_127:
            char v91 = v222;
            if ((v222 & 2) == 0)
            {
              if (v240[v60])
              {
                *(_OWORD *)(v31 + 11) = *(_OWORD *)&v227[1];
                v31[13] = v60;
                if (v219)
                {
                  v219(v239[v60]);
                  CFIndex v29 = v223;
                }
              }
            }
            *((void *)&v226 + 1) = 0;
            DWORD2(v229) = 0;
            if ((v227[3] & 0xFFFFFFFFFFFFFFFDLL) == 0)
            {
              *(void *)&long long v226 = 1;
              uint64_t v246 = 0;
              uint64_t v247 = v227[2];
              v242[0] = 0;
              goto LABEL_144;
            }
            if ((v227[3] & 0x400) == 0) {
              goto LABEL_133;
            }
            unsigned int v176 = *(__CFString **)v210;
            if (*(void *)v210)
            {
              v253.CFIndex length = CFStringGetLength(*(CFStringRef *)v210);
              v253.CFIndex location = 0;
              CFStringDelete(v176, v253);
              uint64_t v26 = v217;
              size_t v31 = v224;
            }
            else
            {
              uint64_t v177 = *(UniChar **)(v210 + 8);
              uint64_t v26 = v217;
              size_t v31 = v224;
              if (!v177)
              {
                uint64_t v177 = (UniChar *)malloc_type_malloc(0x400uLL, 0x1000040BDFB0063uLL);
                *(void *)(v210 + 8) = v177;
                if (!v177) {
                  goto LABEL_337;
                }
              }
              MutableWithExternalCharactersNoCFStringRef Copy = CFStringCreateMutableWithExternalCharactersNoCopy(0, v177, 0, 512, v203);
              *(void *)uint64_t v210 = MutableWithExternalCharactersNoCopy;
              if (!MutableWithExternalCharactersNoCopy) {
                goto LABEL_337;
              }
            }
            *(void *)&long long v226 = 0;
            uint64_t DerivedTokens = _NLStringTokenizerGetDerivedTokens();
            *(void *)&long long v226 = DerivedTokens;
            if (DerivedTokens == 1)
            {
              uint64_t v92 = v227[2];
              char v91 = v222;
              CFIndex v29 = v223;
              if (v227[2] == v247)
              {
                *(void *)&long long v226 = 0;
                goto LABEL_134;
              }
              uint64_t DerivedTokens = 1;
            }
            else
            {
              char v91 = v222;
              CFIndex v29 = v223;
              if (DerivedTokens < 1)
              {
LABEL_133:
                uint64_t v92 = v227[2];
                uint64_t v26 = v217;
                size_t v31 = v224;
LABEL_134:
                if (v92 >= 2 && ((v91 & 0x20) == 0 || (v227[3] & 0x200) != 0))
                {
                  uint64_t SubTokensOfCompound = _NLStringTokenizerGetSubTokensOfCompound();
                  *(void *)&long long v226 = SubTokensOfCompound;
                  if (SubTokensOfCompound)
                  {
                    CFIndex v29 = v223;
                    if (SubTokensOfCompound >= 2)
                    {
                      if ((v227[3] & 0x20) == 0) {
                        goto LABEL_147;
                      }
                      if ((v91 & 8) != 0 && (v227[3] & 0x40001000) == 0)
                      {
                        uint64_t v94 = v227[2];
                        uint64_t v95 = &v246 + 2 * *((void *)&v226 + 1);
                        uint64_t *v95 = 0;
                        v95[1] = v94;
                        *(void *)&long long v226 = 1;
LABEL_144:
                        uint64_t SubTokensOfCompound = 1;
                        goto LABEL_147;
                      }
                      uint64_t v155 = 0;
                      uint64_t v156 = 0;
                      int v157 = 0;
                      BOOL v158 = 0;
                      uint64_t v159 = v230;
                      uint64_t v160 = v227[1];
                      v161 = v212;
                      uint64_t v137 = SubTokensOfCompound;
                      while (1)
                      {
                        uint64_t v162 = v242[v156];
                        if ((v162 & 0x20) != 0) {
                          break;
                        }
                        BOOL v163 = (v162 & 0xFFFFFFFFFFFFFFF1) == 0;
                        if ((v163 & v157) != 1) {
                          goto LABEL_297;
                        }
                        if (*v161 > 2)
                        {
                          BOOL v163 = 1;
LABEL_297:
                          uint64_t v166 = v155 + (v157 & 1);
                          *((_OWORD *)&v246 + v166) = *(_OWORD *)(v161 - 1);
                          uint64_t v155 = v166 + 1;
                          v242[v166] = v162;
                          int v157 = 0;
                          goto LABEL_298;
                        }
                        int v157 = 0;
                        BOOL v163 = 0;
                        *(&v246 + 2 * v155 + 1) += *v161;
                        v242[v155++] |= v162;
                        *(void *)&long long v226 = --v137;
LABEL_298:
                        BOOL v158 = v163;
                        ++v156;
                        v161 += 2;
                        if (SubTokensOfCompound == v156) {
                          goto LABEL_246;
                        }
                      }
                      if (*v161 == 1)
                      {
                        int v164 = *(unsigned __int16 *)(v159 + 2 * (*(v161 - 1) + v160));
                        if (v164 == 8217 || v164 == 39)
                        {
                          if (!v156) {
                            goto LABEL_246;
                          }
                          if (v158)
                          {
                            --v155;
                            ++*(&v246 + 2 * v155 + 1);
                            uint64_t v165 = v242[v155];
                            if ((v165 & 0x20) == 0) {
                              v242[v155] = v165 | 0x10000020;
                            }
                            BOOL v163 = 0;
                            *(void *)&long long v226 = --v137;
                            int v157 = 1;
                            goto LABEL_298;
                          }
                        }
                      }
                      BOOL v163 = 0;
                      goto LABEL_297;
                    }
                    uint64_t v137 = SubTokensOfCompound;
LABEL_246:
                    uint64_t SubTokensOfCompound = v137;
                    if (!v137) {
                      goto LABEL_16;
                    }
LABEL_147:
                    uint64_t v96 = *((void *)&v226 + 1);
                    uint64_t v97 = &v246 + 2 * *((void *)&v226 + 1);
                    *CFIndex v29 = *(_OWORD *)v97;
                    uint64_t v98 = v242[v96];
                    *(void *)&long long v229 = v98;
                    if ((v98 & 0x20) == 0)
                    {
                      uint64_t v99 = *v97;
                      uint64_t v100 = *(&v246 + 2 * SubTokensOfCompound - 1) + *(&v246 + 2 * SubTokensOfCompound - 2);
                      v227[0] = v100;
                      if (v96 >= SubTokensOfCompound)
                      {
                        uint64_t v109 = v98;
                        uint64_t v55 = v100;
                        goto LABEL_181;
                      }
                      uint64_t v101 = 0;
                      uint64_t v102 = 0;
                      uint64_t v103 = v230 + 2 * v227[1];
                      if (BYTE1(v232)) {
                        BOOL v104 = v227[2] + v227[1] == *((void *)&v231 + 1);
                      }
                      else {
                        BOOL v104 = 0;
                      }
                      int v105 = v104;
                      int v106 = &v212[2 * v96];
                      BOOL v107 = 1;
                      uint64_t v108 = v96;
                      uint64_t v109 = v98;
                      while (1)
                      {
                        if ((v242[v108] & 0x10000020) == 0x20)
                        {
                          uint64_t v55 = *(v106 - 1);
                          if (v25 < 2
                            || (uint64_t v110 = *v106, *v106 != 1)
                            && (v110 == 2 ? (int v111 = v105) : (int v111 = 0), v111 != 1
                                                                     || *(_WORD *)(v103 + 2 * v55 + 2) != 42)
                            || (int v112 = *(unsigned __int16 *)(v103 + 2 * v55),
                                size_t v31 = v224,
                                (v112 - 8208) >= 2)
                            && (v112 != 45 ? (BOOL v113 = v112 == 65293) : (BOOL v113 = 1), !v113))
                          {
                            v227[0] = *(v106 - 1);
LABEL_177:
                            if (v102 >= 9)
                            {
                              if (v101 - v99 <= 63 && (v101 - v99) / v102 > 2)
                              {
                                if (v107) {
                                  uint64_t v138 = v108;
                                }
                                else {
                                  uint64_t v138 = SubTokensOfCompound - 1;
                                }
                                if ((v242[v138] & 0x20) != 0)
                                {
                                  if (v25 < 2
                                    || (uint64_t v146 = &v246 + 2 * v138, v146[1] != 1)
                                    || (int v147 = *(unsigned __int16 *)(v230 + 2 * v227[1] + 2 * *v146),
                                        (v147 - 8208) >= 2)
                                    && (v147 != 45 ? (BOOL v148 = v147 == 65293) : (BOOL v148 = 1), !v148))
                                  {
                                    --v138;
                                  }
                                }
                                uint64_t v149 = 0;
                                uint64_t v150 = &v209[2 * v138];
                                uint64_t v114 = v138 - 7;
                                unsigned int v151 = &v208[v138];
                                uint64_t v152 = &v207[2 * v96];
                                uint64_t v153 = &v206[v96];
                                do
                                {
                                  uint64_t v154 = *v153--;
                                  *v151-- = v154;
                                  *(_OWORD *)&v150[v149] = *(_OWORD *)&v152[v149];
                                  v149 -= 2;
                                }
                                while (v149 != -10);
                              }
                              else
                              {
                                *(void *)&long long v228 = v99;
                                *((void *)&v228 + 1) = v101 - v99;
                                uint64_t v114 = v102 + v96;
                              }
LABEL_183:
                              *((void *)&v226 + 1) = v114;
                              if (v114) {
                                goto LABEL_124;
                              }
                              goto LABEL_184;
                            }
LABEL_181:
                            *(void *)&long long v229 = v109 | v98;
LABEL_182:
                            uint64_t v114 = v96 + 1;
                            goto LABEL_183;
                          }
                          v109 |= 0x10uLL;
                        }
                        else
                        {
                          ++v102;
                          uint64_t v55 = *(v106 - 1);
                          uint64_t v110 = *v106;
                        }
                        uint64_t v101 = v110 + v55;
                        BOOL v107 = ++v108 < SubTokensOfCompound;
                        v106 += 2;
                        if (SubTokensOfCompound == v108)
                        {
                          uint64_t v55 = v100;
                          uint64_t v108 = SubTokensOfCompound;
                          goto LABEL_177;
                        }
                      }
                    }
                    uint64_t v55 = *((void *)&v228 + 1) + v228;
                    v227[0] = *((void *)&v228 + 1) + v228;
                    goto LABEL_182;
                  }
                  uint64_t v92 = v227[2];
                  CFIndex v29 = v223;
                }
                *(void *)&long long v226 = 1;
                uint64_t v246 = 0;
                uint64_t v247 = v92;
                uint64_t SubTokensOfCompound = 1;
                v242[0] = 0;
                goto LABEL_147;
              }
            }
            uint64_t v180 = 0;
            v181 = v199;
            do
            {
              if (*v181)
              {
                unint64_t v182 = v224;
                *(_OWORD *)(v224 + 11) = *(_OWORD *)&v227[1];
                v182[13] = v60;
                if (v219)
                {
                  ((void (*)(uint64_t, void, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, void *))v219)(*(void *)(v210 + 8) + 2 * *(v181 - 1), *v181, 2, v217, &v246, 1, 4294959088, v242);
                  CFIndex v29 = v223;
                  uint64_t DerivedTokens = v226;
                }
              }
              ++v180;
              v181 += 2;
            }
            while (v180 < DerivedTokens);
            goto LABEL_133;
          }
          uint64_t v34 = &v246 + 2 * v32;
          *CFIndex v29 = *(_OWORD *)v34;
          uint64_t v35 = v242[v32];
          *(void *)&long long v229 = v35;
          if (v32)
          {
            uint64_t v36 = v32 + 2;
            if (v32 + 2 < v33)
            {
              uint64_t v37 = v32 - 1;
              uint64_t v38 = v32 - 2;
              if (v32 < 2
                || (v242[v38] & 0x20) == 0
                || *(&v246 + 2 * v38 + 1) + *(&v246 + 2 * v38) != *(&v246 + 2 * v37))
              {
                uint64_t v39 = v35 & 0x20;
                if ((v242[v37] & 0x30) == 0 && v39 != 0 && v34[1] == 1)
                {
                  uint64_t v41 = v227[1];
                  uint64_t v42 = v230 + 2 * v227[1];
                  if (*(_WORD *)(v42 + 2 * *v34) == 46)
                  {
                    uint64_t v43 = v32 + 1;
                    if ((v242[v32 + 1] & 0x30) == 0 && (v242[v36] & 0x20) != 0)
                    {
                      uint64_t v44 = &v246 + 2 * v36;
                      if (v44[1] == 1 && *(_WORD *)(v42 + 2 * *v44) == 46)
                      {
                        memset(v233, 0, sizeof(v233));
                        uint64_t v45 = &v246 + 2 * v37;
                        uint64_t v46 = v45[1];
                        unsigned int v198 = v45;
                        if (v46 > 255)
                        {
                          uint64_t v48 = 0;
                        }
                        else
                        {
                          uint64_t v47 = v46;
                          __memcpy_chk();
                          uint64_t v48 = v47;
                        }
                        int v49 = &v205[2 * v32];
                        int v50 = &v204[v32];
                        while ((*(unsigned char *)(v50 - 1) & 0x30) == 0)
                        {
                          if ((*(unsigned char *)v50 & 0x20) == 0) {
                            goto LABEL_45;
                          }
                          if (*v49 != 1) {
                            goto LABEL_45;
                          }
                          if (*(_WORD *)(v42 + 2 * *(v49 - 1)) != 46) {
                            goto LABEL_45;
                          }
                          uint64_t v51 = *(v49 - 2);
                          uint64_t v52 = v51 + v48;
                          if (v51 + v48 > 255) {
                            goto LABEL_45;
                          }
                          memcpy((char *)v233 + 2 * v48, (const void *)(v42 + 2 * *(v49 - 3)), 2 * v51);
                          v43 += 2;
                          v36 += 2;
                          v49 += 4;
                          v50 += 2;
                          uint64_t v48 = v52;
                          if (v36 >= v33)
                          {
                            uint64_t v43 = v36 - 1;
                            goto LABEL_46;
                          }
                        }
                        uint64_t v43 = v36 - 1;
LABEL_45:
                        uint64_t v52 = v48;
LABEL_46:
                        uint64_t v53 = *v198 + v41;
                        uint64_t v54 = *(&v246 + 2 * v43 - 2) - v53 + *(&v246 + 2 * v43 - 1);
                        size_t v31 = v224;
                        v224[11] = v53;
                        void v31[12] = v54;
                        v31[13] = *((void *)&v225 + 1) - 1;
                        uint64_t v26 = v217;
                        if (v219) {
                          ((void (*)(_DWORD *, uint64_t, void, uint64_t, uint64_t *))v219)(v233, v52, 0, v217, &v246);
                        }
                        CFIndex v29 = v223;
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v55 = v227[0];
          if (*((void *)&v228 + 1) + (void)v228 > v227[0]) {
            break;
          }
          DWORD2(v229) = 1;
          uint64_t v56 = *((void *)&v226 + 1);
          uint64_t v32 = ++*((void *)&v226 + 1);
          if (v56 < 1) {
            goto LABEL_123;
          }
          if (v25 >= 2 && *((void *)&v228 + 1) == 1)
          {
            int v57 = *(unsigned __int16 *)(v230 + 2 * v227[1] + 2 * v228);
            BOOL v58 = (v57 - 8208) < 2 || v57 == 65293;
            if (v58 || v57 == 45) {
              continue;
            }
          }
          goto LABEL_124;
        }
        if ((v229 & 0x20) != 0)
        {
          if (v25 < 2
            || *((void *)&v228 + 1) != 1
            || (int v85 = *(unsigned __int16 *)(v230 + 2 * v227[1] + 2 * v228), (v85 - 8208) >= 2)
            && (v85 != 45 ? (BOOL v86 = v85 == 65293) : (BOOL v86 = 1), !v86))
          {
            v227[0] = *((void *)&v228 + 1) + v228;
            uint64_t v32 = *((void *)&v226 + 1) + 1;
            uint64_t v55 = *((void *)&v228 + 1) + v228;
            goto LABEL_122;
          }
        }
        uint64_t v75 = *(&v246 + 2 * *((void *)&v226 + 1));
        uint64_t v76 = *(&v246 + 2 * (void)v226 - 1) + *(&v246 + 2 * (void)v226 - 2);
        v227[0] = v76;
        if ((uint64_t)v226 <= *((uint64_t *)&v226 + 1))
        {
          uint64_t v55 = v76;
LABEL_121:
          uint64_t v32 = *((void *)&v226 + 1) + 1;
          goto LABEL_122;
        }
        uint64_t v77 = 0;
        uint64_t v78 = 0;
        CFRange v79 = &v212[2 * *((void *)&v226 + 1)];
        BOOL v80 = 1;
        uint64_t v81 = *((void *)&v226 + 1);
        while (2)
        {
          uint64_t v55 = *(v79 - 1);
          if ((v242[v81] & 0x10000020) != 0x20)
          {
            uint64_t v84 = *v79;
            goto LABEL_105;
          }
          if (v25 < 2 || *v79 != 1) {
            goto LABEL_116;
          }
          int v82 = *(unsigned __int16 *)(v230 + 2 * v227[1] + 2 * v55);
          if ((v82 - 8208) < 2)
          {
            uint64_t v84 = 1;
LABEL_105:
            ++v78;
            uint64_t v77 = v84 + v55;
            BOOL v80 = ++v81 < (uint64_t)v226;
            v79 += 2;
            if ((void)v226 == v81)
            {
              uint64_t v55 = v76;
              uint64_t v78 = v226 - *((void *)&v226 + 1);
              uint64_t v81 = v226;
              goto LABEL_117;
            }
            continue;
          }
          break;
        }
        BOOL v83 = v82 == 45 || v82 == 65293;
        uint64_t v84 = 1;
        if (v83) {
          goto LABEL_105;
        }
LABEL_116:
        v227[0] = *(v79 - 1);
LABEL_117:
        if ((unint64_t)v78 < 9) {
          goto LABEL_121;
        }
        if (v77 - v75 <= 63 && (v77 - v75) / v78 > 2)
        {
          if (v80) {
            uint64_t v139 = v81;
          }
          else {
            uint64_t v139 = v226 - 1;
          }
          if ((v242[v139] & 0x20) != 0)
          {
            if (v25 < 2
              || (char v167 = &v246 + 2 * v139, v167[1] != 1)
              || (int v168 = *(unsigned __int16 *)(v230 + 2 * v227[1] + 2 * *v167), (v168 - 8208) >= 2)
              && (v168 != 45 ? (BOOL v169 = v168 == 65293) : (BOOL v169 = 1), !v169))
            {
              --v139;
            }
          }
          uint64_t v170 = 0;
          uint64_t v171 = &v209[2 * v139];
          uint64_t v32 = v139 - 7;
          char v172 = &v208[v139];
          uint64_t v173 = &v207[2 * *((void *)&v226 + 1)];
          unint64_t v174 = &v206[*((void *)&v226 + 1)];
          do
          {
            uint64_t v175 = *v174--;
            *v172-- = v175;
            *(_OWORD *)&v171[v170] = *(_OWORD *)&v173[v170];
            v170 -= 2;
          }
          while (v170 != -10);
        }
        else
        {
          *(void *)&long long v228 = v75;
          *((void *)&v228 + 1) = v77 - v75;
          uint64_t v32 = v78 + *((void *)&v226 + 1);
        }
LABEL_122:
        *((void *)&v226 + 1) = v32;
        DWORD2(v229) = 0;
LABEL_123:
        if (v32)
        {
LABEL_124:
          uint64_t v87 = v228;
          uint64_t v89 = v227[1];
          uint64_t v88 = v227[2];
          uint64_t v90 = v227[2] - v228;
          v31[11] = v228 + v227[1];
          void v31[12] = v90;
          goto LABEL_185;
        }
LABEL_184:
        uint64_t v89 = v227[1];
        uint64_t v88 = v227[2];
        v31[11] = v227[1];
        void v31[12] = v88;
        uint64_t v87 = v228;
LABEL_185:
        uint64_t v115 = v230;
        v31[13] = *((void *)&v225 + 1) - 1;
        CFMutableArrayRef v116 = (unsigned __int16 *)(v115 + 2 * v89 + 2 * v87);
        uint64_t v117 = v55 - v87;
        int v118 = *v116;
        if ((v118 - 12441) > 1)
        {
          if (v88 != 1 || (v118 & 0xF800 | 0x400) != 0xDC00) {
            goto LABEL_188;
          }
          continue;
        }
        break;
      }
      if (!v117) {
        continue;
      }
      break;
    }
    while (*v116 - 12441 <= 1)
    {
      ++v116;
      if (!--v117) {
        goto LABEL_16;
      }
    }
LABEL_188:
    if (DWORD2(v229))
    {
      if (v219)
      {
        char v119 = ((uint64_t (*)(unsigned __int16 *, uint64_t, void, uint64_t))v219)(v116, v117, 0, v26);
        CFIndex v29 = v223;
        char v120 = v119;
        if (v119) {
          goto LABEL_241;
        }
      }
      else
      {
        char v120 = 0;
      }
LABEL_236:
      if (v31[1] == v221 && (void)v226 == *((void *)&v226 + 1) && *((uint64_t *)&v225 + 1) < (uint64_t)v225)
      {
        int v134 = (uint64_t *)&v251[*((void *)&v225 + 1)];
        uint64_t v135 = *(v134 - 1) + *(v134 - 2);
        if (v135 < *v134)
        {
          char v136 = handle_missing_punctuation(v230, v135, *v134, v215, v26, 0);
          CFIndex v29 = v223;
          char v120 = v136;
        }
      }
      goto LABEL_241;
    }
    if ((v222 & 0x10) != 0 && (v227[3] & 0x40001000) != 0 && v117 >= 2)
    {
      uint64_t v123 = 0;
      char v124 = 0;
      v125 = v215;
      while (1)
      {
        CFRange v126 = &v116[v123];
        if ((*v126 & 0xFC00) == 0xD800)
        {
          if (++v123 >= v117 || (v116[v123] & 0xFC00) != 0xDC00)
          {
LABEL_213:
            if (v124) {
              char v120 = v124;
            }
            else {
              char v120 = 0;
            }
            if (v124)
            {
              size_t v31 = v224;
            }
            else
            {
              size_t v31 = v224;
              if (v219)
              {
                char v122 = ((uint64_t (*)(unsigned __int16 *, uint64_t, uint64_t, uint64_t))v219)(v116, v117, 3, v26);
LABEL_219:
                char v120 = v122;
              }
            }
            goto LABEL_220;
          }
          if (v125)
          {
            uint64_t v127 = 2;
LABEL_209:
            char v124 = v125((uint64_t)v126, v127, v229, v26);
            goto LABEL_211;
          }
        }
        else if (v125)
        {
          uint64_t v127 = 1;
          goto LABEL_209;
        }
        char v124 = 0;
LABEL_211:
        if (++v123 >= v117 || (v124 & 1) != 0) {
          goto LABEL_213;
        }
      }
    }
    if (v215)
    {
      char v122 = v215((uint64_t)v116, v117, v229, v26);
      goto LABEL_219;
    }
    char v120 = 0;
LABEL_220:
    if (v218)
    {
      if (v238 < 128)
      {
        uint64_t v128 = (uint64_t)((uint64_t)v116 - v230) >> 1;
        if (v238)
        {
          uint64_t v129 = v234[2 * v238 - 1] + v234[2 * v238 - 2];
          if (v129 < v128) {
            handle_missing_punctuation(v230, v129, (uint64_t)((uint64_t)v116 - v230) >> 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sentenceTokenizerMissingPunctuation, (uint64_t)v234, 1);
          }
        }
      }
      else
      {
        v218(v230, v234, v213);
        uint64_t v238 = 0;
        uint64_t v128 = (uint64_t)((uint64_t)v116 - v230) >> 1;
      }
      if (v117)
      {
        uint64_t v236 = v128;
        uint64_t v237 = v117;
        uint64_t v130 = &v234[2 * v238];
        *uint64_t v130 = v128;
        v130[1] = v117;
        v234[v238++ + 258] = v229;
      }
      CFUUIDRef v131 = &v116[v117];
      if ((unint64_t)v131 >= (uint64_t)v230 + 2 * v214) {
        goto LABEL_233;
      }
      int v132 = *v131;
      switch(v132)
      {
        case 9:
          goto LABEL_233;
        case 8200:
          goto LABEL_233;
        case 12288:
          goto LABEL_233;
      }
      CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
      if (CFCharacterSetIsCharacterMember(Predefined, v132)) {
        goto LABEL_233;
      }
      if (*((void *)&v226 + 1) == (void)v226)
      {
        uint64_t v26 = v217;
        CFIndex v29 = v223;
        if (*((uint64_t *)&v225 + 1) >= (uint64_t)v225
          || (unint64_t v140 = v230 + 2 * *(void *)&v251[*((void *)&v225 + 1)], (unint64_t)v131 >= v140))
        {
          size_t v31 = v224;
          if (v120) {
            goto LABEL_241;
          }
          goto LABEL_236;
        }
        uint64_t v141 = *((void *)&v251[*((void *)&v225 + 1) - 1] + 1) + *(void *)&v251[*((void *)&v225 + 1) - 1];
        uint64_t v142 = 2 * v141 + 2;
        while (1)
        {
          int v143 = *v131;
          if (v143 == 9 || v143 == 8200) {
            break;
          }
          if (v143 == 12288) {
            break;
          }
          CFCharacterSetRef v145 = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
          if (CFCharacterSetIsCharacterMember(v145, v143)) {
            break;
          }
          ++v141;
          CFUUIDRef v131 = (unsigned __int16 *)(v230 + v142);
          v142 += 2;
          if ((uint64_t)v230 + 2 * v141 >= v140) {
            goto LABEL_270;
          }
        }
LABEL_233:
        uint64_t v26 = v217;
        ((void (*)(void, void *, uint64_t *, uint64_t, uint64_t))v218)(v230, v234, v213, v238, v217);
        uint64_t v238 = 0;
      }
      else
      {
LABEL_270:
        uint64_t v26 = v217;
      }
      size_t v31 = v224;
    }
    CFIndex v29 = v223;
    if ((v120 & 1) == 0) {
      goto LABEL_236;
    }
LABEL_241:
    if ((v120 & 1) == 0)
    {
      if ((v120 & 2) != 0 && !DWORD2(v229)) {
        v227[3] &= ~0x400uLL;
      }
      continue;
    }
    break;
  }
LABEL_337:
  char v183 = v211;
  uint64_t v184 = v214;
  if (v218)
  {
    uint64_t v185 = v238;
    if (v238)
    {
      if (v238 <= 127)
      {
        uint64_t v186 = v234[2 * v238 - 1] + v234[2 * v238 - 2];
        uint64_t v187 = v230;
        if (v186 < v214)
        {
          handle_missing_punctuation(v230, v186, v214, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sentenceTokenizerMissingPunctuation, (uint64_t)v234, 1);
          uint64_t v187 = v230;
          uint64_t v185 = v238;
        }
        ((void (*)(uint64_t, void *, uint64_t *, uint64_t, uint64_t))v218)(v187, v234, v213, v185, v217);
        uint64_t v238 = 0;
      }
    }
  }
LABEL_359:
  if (v183) {
    v183(v230, v184, v217);
  }
  if ((void)v231) {
    CFRelease((CFTypeRef)v231);
  }
  if (*((void *)&v230 + 1)) {
    free(*((void **)&v230 + 1));
  }
}

uint64_t _CITokenizerGetQueryTokensStart(uint64_t result, uint64_t a2, void *a3)
{
  a3[5] = result;
  a3[2] = result;
  a3[3] = result + 2 * a2;
  return result;
}

uint64_t _CITokenizerGetQueryTokens(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    id v5 = (_WORD *)a1;
    if (*(void *)(a4 + 16) <= a1)
    {
      uint64_t v6 = a2;
      unint64_t v7 = *(void *)(a4 + 24);
      if (v7 > a1 && a1 + 2 * a2 <= v7)
      {
        uint64_t v9 = (_WORD *)(a1 - 2);
        unint64_t v10 = *(void *)(a4 + 40);
        if (a1 - 2 >= v10)
        {
          CFStringRef v11 = (_WORD *)(a1 - 2);
          while (1)
          {
            int v12 = (unsigned __int16)*v11--;
            if (v12 != 42) {
              break;
            }
            if ((unint64_t)v11 > v10 && *v11 == 92) {
              goto LABEL_15;
            }
            --v5;
            ++v6;
            uint64_t v9 = v11;
            if ((unint64_t)v11 < v10)
            {
              id v5 = v11 + 1;
              goto LABEL_15;
            }
          }
          id v5 = v9 + 1;
        }
LABEL_15:
        uint64_t v13 = *(void *)(a4 + 48);
        if (v13)
        {
          uint64_t v14 = *(void *)(a4 + 32);
          unsigned int v15 = (_WORD *)(v14 + 2 * v13);
          if (v15 < v5)
          {
            uint64_t v16 = v13 + 1;
            do
            {
              if (*v15 != 42) {
                break;
              }
              ++v15;
              *(void *)(a4 + 48) = v16++;
            }
            while (v15 < v5);
            uint64_t v13 = v16 - 1;
          }
          CFStringRef v17 = (_WORD *)(v14 + 2 * v13);
          if (v17 == v5)
          {
            if (*(v17 - 1) == 42 && (v13 < 2 || *(_WORD *)(v14 + 2 * v13 - 4) != 92))
            {
              *(void *)(a4 + 48) = v13 + v6;
              return 0;
            }
          }
          else
          {
            (*(void (**)(void))a4)();
            uint64_t v13 = 0;
            uint64_t v18 = *(void *)(a4 + 32) + 2 * *(void *)(a4 + 48);
            *(void *)(a4 + 32) = 0;
            *(void *)(a4 + 40) = v18;
            *(void *)(a4 + 48) = 0;
          }
        }
        uint64_t v19 = &v5[v6];
        if (*(v19 - 1) == 42 && (v6 < 2 || v5[v6 - 2] != 92)
          || (unint64_t)v19 < *(void *)(a4 + 24) && *v19 == 42)
        {
          uint64_t v20 = *(_WORD **)(a4 + 32);
          if (!v20)
          {
            *(void *)(a4 + 32) = v5;
            uint64_t v20 = v5;
          }
          *(void *)(a4 + 40) = &v20[v13 + v6];
          *(void *)(a4 + 48) = v13 + v6;
        }
        else
        {
          if (v13)
          {
            (*(void (**)(void, uint64_t, void))a4)(*(void *)(a4 + 32), v13, *(void *)(a4 + 8));
            uint64_t v21 = *(void *)(a4 + 32) + 2 * *(void *)(a4 + 48);
            *(void *)(a4 + 32) = 0;
            *(void *)(a4 + 40) = v21;
            *(void *)(a4 + 48) = 0;
          }
          (*(void (**)(_WORD *, uint64_t, void))a4)(v5, v6, *(void *)(a4 + 8));
          *(void *)(a4 + 40) = v19;
        }
      }
    }
  }
  return 0;
}

void _CITokenizerGetQueryTokensEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 48))
  {
    uint64_t v3 = *(void *)(a3 + 32);
    uint64_t v4 = *(void (**)(uint64_t))a3;
    v4(v3);
  }
}

void CITokenizerGetTokensNew(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, void (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  unint64_t v7 = MEMORY[0x1F4188790](a5, a1, a2, a3, a4);
  uint64_t v9 = v8;
  CFStringRef v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = (uint64_t)v7;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  bzero(&cf, 0x1810uLL);
  CITokenizerSetLocale(v14, v11, 0);
  _CITokenizerGetTokens(v14, *(void *)(v14 + 8), v13, (uint64_t)&cf, v15, v9, a6, 0, a7);
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    free(v17);
  }
}

uint64_t handle_missing_punctuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, int a6)
{
  if (a2 >= a3) {
    return 0;
  }
  uint64_t v9 = a2;
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  do
  {
    UChar32 v15 = *(unsigned __int16 *)(a1 + 2 * v9);
    if (u_isUWhiteSpace(v15))
    {
      if (v13)
      {
        if (a4)
        {
          unsigned int v11 = a4(a1 + 2 * v14, v13, v12, a5);
          uint64_t v14 = 0;
          uint64_t v13 = 0;
          uint64_t v12 = 0;
          goto LABEL_19;
        }
        uint64_t v14 = 0;
        uint64_t v13 = 0;
        uint64_t v12 = 0;
      }
      else
      {
        if (!a6) {
          goto LABEL_8;
        }
        if (a4)
        {
          unsigned int v11 = a4(a1 + 2 * v14, 1, 2048, a5);
LABEL_8:
          uint64_t v13 = 0;
          goto LABEL_19;
        }
        uint64_t v13 = 0;
      }
      unsigned int v11 = 0;
    }
    else
    {
      if (((1 << u_charType(v15)) & 0x30F80000) != 0) {
        v12 |= 0x20uLL;
      }
      if (!v13) {
        uint64_t v14 = v9;
      }
      ++v13;
    }
LABEL_19:
    ++v9;
  }
  while (a3 != v9);
  if (v13) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v11;
  }
  if (v13 && a4)
  {
    return a4(a1 + 2 * v14, v13, v12, a5);
  }
  return result;
}

uint64_t sentenceTokenizerMissingPunctuation(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = a4[387];
    if (v4 == -1) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = a4[388] + v4;
    }
    a4[387] = v5;
    a4[388] = a2;
    if ((a3 & 0x800) == 0)
    {
      uint64_t v6 = a4[389];
      if (v6 <= 127)
      {
        *(_OWORD *)&a4[2 * v6] = *(_OWORD *)(a4 + 387);
        a4[a4[389]++ + 258] = a3;
      }
    }
  }
  return 0;
}

char *strToUTF8(char *a1, int32_t a2, int32_t *a3, const UChar *a4, int32_t a5, UErrorCode *a6)
{
  bzero(a1, a2);
  uint64_t result = u_strToUTF8(a1, a2, a3, a4, a5, a6);
  if (a2 >= 1 && *a6 == U_BUFFER_OVERFLOW_ERROR)
  {
    uint64_t v13 = a2;
    do
    {
      *a3 = v13;
      if (v13 < 1) {
        break;
      }
    }
    while (!a1[--v13]);
    *a6 = U_STRING_NOT_TERMINATED_WARNING;
  }
  return result;
}

UChar *strFromUTF8(void *a1, int32_t a2, int32_t *a3, const char *a4, int32_t a5, UErrorCode *a6)
{
  bzero(a1, 2 * a2);
  uint64_t result = u_strFromUTF8((UChar *)a1, a2, a3, a4, a5, a6);
  unsigned int v13 = a2 - 1;
  if (a2 >= 1 && *a6 == U_BUFFER_OVERFLOW_ERROR)
  {
    *a3 = a2;
    if (*((_WORD *)a1 + v13)) {
      BOOL v14 = (*((_WORD *)a1 + v13) & 0xFC00) == 55296;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      *a3 = v13;
    }
    *a6 = U_STRING_NOT_TERMINATED_WARNING;
  }
  return result;
}

UChar *strFromUTF32(void *a1, int32_t a2, int32_t *a3, const UChar32 *a4, int32_t a5, UErrorCode *a6)
{
  bzero(a1, 2 * a2);
  uint64_t result = u_strFromUTF32((UChar *)a1, a2, a3, a4, a5, a6);
  unsigned int v13 = a2 - 1;
  if (a2 >= 1 && *a6 == U_BUFFER_OVERFLOW_ERROR)
  {
    *a3 = a2;
    if (*((_WORD *)a1 + v13)) {
      BOOL v14 = (*((_WORD *)a1 + v13) & 0xFC00) == 55296;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      *a3 = v13;
    }
    *a6 = U_STRING_NOT_TERMINATED_WARNING;
  }
  return result;
}

void icu_range_search_destroy(void *a1)
{
  if (a1)
  {
    int v2 = *(_DWORD *)a1;
    if (v2 != 268435460) {
      icu_range_search_destroy_cold_1(v2);
    }
    *(_DWORD *)a1 = 0;
    if (*((void *)a1 + 5)) {
      usearch_close();
    }
    uint64_t v3 = (UText *)*((void *)a1 + 9);
    if (v3) {
      utext_close(v3);
    }
    uint64_t v4 = (const void *)*((void *)a1 + 6);
    if (v4) {
      CFRelease(v4);
    }
    if (*((unsigned char *)a1 + 97)) {
      free(*((void **)a1 + 7));
    }
    icu_ctx_release(*((void *)a1 + 3));
    free(*((void **)a1 + 1));
    free(a1);
  }
}

uint64_t icu_rules_max_expansion(int8x8_t *a1, unsigned __int8 *a2, int a3)
{
  return _icu_rules_max_expansion(a1, a2, a3, 0);
}

uint64_t icu_rules_set_cache_fd(int a1)
{
  if (sCacheDirFd != -1) {
    close(sCacheDirFd);
  }
  uint64_t result = dup(a1);
  sCacheDirFd = result;
  return result;
}

int *icu_locale_retain(int *result)
{
  return icu_ctx_retain(result);
}

uint64_t icu_rules_clear_cache()
{
  uint64_t result = sCacheDirFd;
  if (sCacheDirFd != -1)
  {
    uint64_t result = dup(sCacheDirFd);
    if (result != -1)
    {
      int v1 = result;
      int v2 = fdopendir(result);
      if (v2)
      {
        uint64_t v3 = v2;
        for (uint64_t i = readdir(v2); i; uint64_t i = readdir(v3))
        {
          d_name = i->d_name;
          if (!strncmp(i->d_name, "icu_rules_", 0xAuLL)) {
            unlinkat(sCacheDirFd, d_name, 0);
          }
        }
        return closedir(v3);
      }
      else
      {
        return close(v1);
      }
    }
  }
  return result;
}

int8x8_t *icu_rules_add_collator(uint64_t a1, uint64_t a2, malloc_zone_t *a3, int8x8_t *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  UErrorCode pErrorCode = U_ZERO_ERROR;
  int Rules = ucol_getRulesEx();
  BOOL v14 = (UChar *)malloc_type_malloc(2 * (Rules + 1), 0x1000040BDFB0063uLL);
  uint64_t v95 = a2;
  int32_t v15 = ucol_getRulesEx();
  pDestCFIndex Length = 0;
  u_strToUTF8(0, 0, &pDestLength, v14, v15, &pErrorCode);
  uint64_t v16 = (char *)malloc_type_malloc(pDestLength + 1, 0x956EE4D3uLL);
  UErrorCode pErrorCode = U_ZERO_ERROR;
  strToUTF8(v16, pDestLength + 1, &pDestLength, v14, v15, &pErrorCode);
  free(v14);
  uint64_t LocaleByType = 0;
  if (a6) {
    uint64_t LocaleByType = ucol_getLocaleByType();
  }
  v101[0] = MEMORY[0x1E4F143A8];
  v101[1] = 0x40000000;
  uint64_t v102 = __icu_rules_add_collator_block_invoke;
  uint64_t v103 = &__block_descriptor_tmp_12;
  uint64_t v94 = a1;
  uint64_t v104 = a1;
  int v105 = a4;
  uint64_t v96 = a3;
  int v106 = a3;
  uint64_t v107 = LocaleByType;
  uint64_t v18 = pDestLength;
  v139[0] = v16;
  v139[1] = pDestLength;
  memset(&v139[2], 0, 136);
  uint64_t v140 = 0;
  uint64_t v141 = a5;
  long long v137 = 0u;
  long long v138 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long __s1 = 0u;
  long long v124 = 0u;
  HIDWORD(v112) = 0;
  NFKDuint64_t Instance = unorm2_getNFKDInstance();
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int32_t v100 = 0;
  if (SHIDWORD(v112) <= 0) {
    uint64_t v22 = NFKDInstance;
  }
  else {
    uint64_t v22 = 0;
  }
  HIDWORD(v112) = 0;
  uint64_t v99 = v22;
LABEL_7:
  unsigned int v98 = v21;
LABEL_8:
  while (1)
  {
    LODWORD(v140) = 0;
    uint64_t v23 = HIDWORD(v140);
    if (!HIDWORD(v140)) {
      break;
    }
    uint64_t v24 = 0;
    HIDWORD(v140) = 0;
    if (v23 == 6)
    {
LABEL_112:
      if (!v100) {
        goto LABEL_147;
      }
      __memcpy_chk();
      if (v131 != 1)
      {
        if ((int)v24 < 2)
        {
LABEL_119:
          unsigned int v72 = 0;
        }
        else
        {
          uint64_t v70 = 1;
          while (1)
          {
            int v71 = *((_DWORD *)&__s1 + v70);
            if (v71 == 47) {
              break;
            }
            if (v71 == 124)
            {
              unsigned int v72 = 0;
              goto LABEL_123;
            }
            if (v24 == ++v70) {
              goto LABEL_119;
            }
          }
          unsigned int v72 = v70;
        }
        LODWORD(v70) = 0;
LABEL_123:
        long long v121 = 0u;
        long long v122 = 0u;
        *(_OWORD *)src = 0u;
        long long v120 = 0u;
        uint64_t v112 = 0;
        memset(__src, 0, sizeof(__src));
        unsigned int v111 = 0;
        strFromUTF32(src, 32, (int32_t *)&v112, (const UChar32 *)&v131, v100, (UErrorCode *)&v112 + 1);
        if (v72)
        {
          strFromUTF32(__src, 32, (int32_t *)&v111, (const UChar32 *)&__s1 + v72 + 1, v24 + ~v72, (UErrorCode *)&v112 + 1);
          unsigned int v74 = v111;
          int v73 = v112;
          memcpy(&src[(int)v112], __src, 2 * (int)v111);
          int v75 = v74 + v73;
          uint64_t v21 = v98;
          LODWORD(v112) = v75;
          int32_t v76 = v72;
        }
        else
        {
          if (v70)
          {
            long long v116 = 0u;
            long long v117 = 0u;
            *(_OWORD *)dst = 0u;
            long long v115 = 0u;
            LODWORD(__s2[0]) = 0;
            strFromUTF32(dst, 32, (int32_t *)__s2, (const UChar32 *)&__s1, v70, (UErrorCode *)&v112 + 1);
            u_strcat(dst, src);
            int v77 = LODWORD(__s2[0]) + v112;
            LODWORD(__s2[0]) += v112;
            if ((int)v24 > (int)v70 + 2)
            {
              int32_t v110 = 0;
              strFromUTF32(&dst[v77], 32 - v77, &v110, (const UChar32 *)&__s1 + (v70 + 2), v24 - (v70 + 2), (UErrorCode *)&v112 + 1);
              LODWORD(__s2[0]) += v110;
            }
            u_strcpy(src, dst);
            LODWORD(v112) = __s2[0];
            strFromUTF32(__src, 32, (int32_t *)&v111, (const UChar32 *)&__s1, v70, (UErrorCode *)&v112 + 1);
            int32_t v110 = 0;
            strFromUTF32((char *)__src + 2 * (int)v111, 32 - v111, &v110, (const UChar32 *)&__s1 + v70 + 1, v24 + ~v70, (UErrorCode *)&v112 + 1);
            v111 += v110;
            goto LABEL_130;
          }
          int32_t v76 = v24;
        }
        strFromUTF32(__src, 32, (int32_t *)&v111, (const UChar32 *)&__s1, v76, (UErrorCode *)&v112 + 1);
LABEL_130:
        if (SHIDWORD(v112) <= 0)
        {
          if (v21 == 3) {
            goto LABEL_145;
          }
          if (v99)
          {
            long long v116 = 0u;
            long long v117 = 0u;
            *(_OWORD *)dst = 0u;
            long long v115 = 0u;
            memset(__s2, 0, sizeof(__s2));
            HIDWORD(v112) = 0;
            uint64_t v78 = unorm2_normalize();
            HIDWORD(v112) = 0;
            uint64_t v79 = unorm2_normalize();
            if (v78 != v79)
            {
              uint64_t v86 = v79;
              goto LABEL_152;
            }
            if (!memcmp(dst, __s2, 2 * (int)v78))
            {
              uint64_t v80 = v111;
              if ((int)v111 >= 1)
              {
                uint64_t v81 = (unsigned __int16 *)__src;
                do
                {
                  int v82 = *v81++;
                  if ((v82 - 65280) < 0xF0) {
                    goto LABEL_144;
                  }
                }
                while (--v80);
              }
              uint64_t v83 = v112;
              if ((int)v112 >= 1)
              {
                uint64_t v84 = src;
                while (1)
                {
                  int v85 = *v84++;
                  if ((v85 - 65280) <= 0xEF) {
                    goto LABEL_144;
                  }
                  if (!--v83) {
                    goto LABEL_8;
                  }
                }
              }
            }
            else
            {
              uint64_t v86 = v78;
LABEL_152:
              v102((uint64_t)v101, v21, dst, v78, (const UChar *)__s2, v86);
            }
          }
          else
          {
LABEL_144:
            v102((uint64_t)v101, v21, src, v112, (const UChar *)__src, v24);
LABEL_145:
            if (v21 == 3 && !v70)
            {
LABEL_147:
              __memcpy_chk();
              int32_t v100 = v24;
            }
          }
        }
      }
    }
    else
    {
      if ((v23 - 2) < 4)
      {
        uint64_t v21 = v23;
        if (!v100) {
          icu_rules_add_collator_cold_6();
        }
        goto LABEL_7;
      }
      int32_t v100 = 0;
      if (v23 != 1) {
        icu_rules_add_collator_cold_5(v23);
      }
    }
  }
  if (v20 >= v18) {
    goto LABEL_158;
  }
  unint64_t v25 = v16[v20];
  unint64_t v26 = v25 >> 4;
  uint64_t v27 = (v25 >> 4) & 0xC;
  if (v27 == 8)
  {
LABEL_180:
    __message_assert("%s:%u: failed assertion '%s' %s invalid utf8 %u", "icu_utils.c", 810, "len", "", (char)v25);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  char v28 = 0;
  uint64_t v29 = 0;
  char v30 = 0;
  char v31 = 0;
  LODWORD(v32) = 0;
  uint64_t v97 = v141;
  while (1)
  {
    uint64_t v33 = utf8_byte_length_utf8_len_table_2[v26];
    if ((v25 & 0x80) != 0)
    {
      UChar32 v35 = v25 & utf8_to_code_point_utf8_first_char_mask_1[v33];
      if (v27 == 12)
      {
        if (v33 <= 2) {
          uint64_t v36 = 2;
        }
        else {
          uint64_t v36 = v33;
        }
        uint64_t v37 = v36 - 1;
        uint64_t v38 = &v16[v20 + 1];
        do
        {
          char v39 = *v38++;
          UChar32 v34 = v39 & 0x3F | (v35 << 6);
          UChar32 v35 = v34;
          --v37;
        }
        while (v37);
      }
      else
      {
        UChar32 v34 = v35;
      }
    }
    else
    {
      UChar32 v34 = v25;
    }
    v20 += v33;
    if (!v32)
    {
      if (v34 <= 59)
      {
        switch(v34)
        {
          case ' ':
            goto LABEL_63;
          case '!':
          case '""':
          case '$':
          case '%':
            goto LABEL_51;
          case '#':
            uint64_t v29 = v20 - 1;
            LODWORD(v32) = 10;
            char v31 = 1;
            goto LABEL_64;
          case '&':
            uint64_t v24 = v140;
            if (v140)
            {
              int v69 = 1;
              goto LABEL_109;
            }
            int32_t v100 = 0;
            uint64_t v21 = v98;
            break;
          case '\'':
            uint64_t v29 = v20 - 1;
            LODWORD(v32) = 39;
            char v30 = 1;
            goto LABEL_64;
          default:
            if ((v34 - 9) >= 2) {
              goto LABEL_51;
            }
            goto LABEL_63;
        }
        goto LABEL_8;
      }
      switch(v34)
      {
        case '[':
          uint64_t v29 = v20 - 1;
          LODWORD(v32) = 93;
          char v28 = 1;
          goto LABEL_64;
        case '<':
          uint64_t v24 = v140;
          if (!v140)
          {
            uint64_t v24 = 1;
            LODWORD(v140) = 1;
            LODWORD(v139[3]) = 32;
          }
          uint64_t v21 = v98;
          if (v16[v20] == 60)
          {
            if (v16[v20 + 1] == 60) {
              int v69 = 5;
            }
            else {
              int v69 = 4;
            }
            if (v16[v20 + 1] == 60) {
              v20 += 2;
            }
            else {
              ++v20;
            }
          }
          else
          {
            int v69 = 3;
          }
LABEL_111:
          HIDWORD(v140) = v69;
          goto LABEL_112;
        case '=':
          uint64_t v24 = v140;
          if (!v140)
          {
            uint64_t v24 = 1;
            LODWORD(v140) = 1;
            LODWORD(v139[3]) = 0;
          }
          int v69 = 2;
LABEL_109:
          uint64_t v21 = v98;
          goto LABEL_111;
      }
LABEL_51:
      if (u_charType(v34) != 16)
      {
        uint64_t v51 = (int)v140;
        if ((int)v140 <= 31)
        {
          LODWORD(v32) = 0;
          LODWORD(v140) = v140 + 1;
          *((_DWORD *)&v139[3] + v51) = v34;
          goto LABEL_64;
        }
      }
      goto LABEL_63;
    }
    if (v34 != v32) {
      goto LABEL_64;
    }
    if (v31) {
      goto LABEL_62;
    }
    if (v30)
    {
      uint64_t v40 = &v16[v29 + 1];
      if (!strncmp(v40, "\\u", 2uLL))
      {
        int v55 = 4;
      }
      else
      {
        if (strncmp(&v16[v29 + 1], "\\U", 2uLL))
        {
          while (v40 < &v16[v20 - 1])
          {
            unint64_t v41 = *(unsigned __int8 *)v40;
            int v42 = *(unsigned __int8 *)v40;
            if (*v40 < 0)
            {
              unint64_t v43 = *(unsigned __int8 *)v40;
              unint64_t v44 = v43 >> 4;
              uint64_t v45 = utf8_byte_length_utf8_len_table_2[v43 >> 4];
              int v46 = v43 & utf8_to_code_point_utf8_first_char_mask_1[v45];
              if ((~(_BYTE)v44 & 0xC) != 0)
              {
                int v42 = v46;
              }
              else
              {
                if (v45 <= 2) {
                  uint64_t v45 = 2;
                }
                else {
                  uint64_t v45 = v45;
                }
                uint64_t v47 = v45 - 1;
                uint64_t v48 = (char *)(v40 + 1);
                do
                {
                  char v49 = *v48++;
                  int v42 = v49 & 0x3F | (v46 << 6);
                  int v46 = v42;
                  --v47;
                }
                while (v47);
              }
            }
            uint64_t v50 = (int)v140;
            if ((int)v140 >= 32) {
              icu_rules_add_collator_cold_3(v140);
            }
            LODWORD(v140) = v140 + 1;
            *((_DWORD *)&v139[3] + v50) = v42;
            v40 += utf8_byte_length_noerror_utf8_len_table_2[v41 >> 4];
          }
          goto LABEL_61;
        }
        int v55 = 8;
      }
      int v56 = 0;
      int v57 = v16 + 3;
      do
      {
        int v58 = v57[v29];
        if ((v58 - 48) >= 0xA)
        {
          if ((v58 - 97) >= 0x1A)
          {
            if ((v58 - 65) >= 0x1A) {
              icu_rules_add_collator_cold_2(v58);
            }
            int v59 = -55;
          }
          else
          {
            int v59 = -87;
          }
        }
        else
        {
          int v59 = -48;
        }
        int v56 = (v59 + v58) | (16 * v56);
        ++v57;
        --v55;
      }
      while (v55);
      uint64_t v60 = (int)v140;
      if ((int)v140 >= 32) {
        icu_rules_add_collator_cold_1(v140);
      }
      char v30 = 0;
      char v31 = 0;
      LODWORD(v32) = 0;
      LODWORD(v140) = v140 + 1;
      uint64_t v61 = (char *)v139 + 4 * v60;
      goto LABEL_84;
    }
    if ((v28 & 1) == 0) {
      icu_rules_add_collator_cold_4((int)v32);
    }
    LODWORD(v32) = strncmp(&v16[v29], "[last tertiary ignorable]", 0x19uLL);
    if (!v32 || (LODWORD(v32) = strncmp(&v16[v29], "[last primary ignorable]", 0x18uLL), !v32))
    {
      char v28 = 0;
      char v30 = 0;
      char v31 = 0;
      uint64_t v52 = (int)v140;
      LODWORD(v140) = v140 + 1;
      uint64_t v53 = (char *)v139 + 4 * v52;
      int v54 = 1;
LABEL_70:
      *((_DWORD *)v53 + 6) = v54;
      goto LABEL_64;
    }
    LODWORD(v32) = strncmp(&v16[v29], "[variable top]", 0xEuLL);
    if (!v32)
    {
      char v28 = 0;
      char v30 = 0;
      char v31 = 0;
      uint64_t v62 = (int)v140;
      LODWORD(v140) = v140 + 1;
      uint64_t v53 = (char *)v139 + 4 * v62;
      int v54 = 2;
      goto LABEL_70;
    }
    LODWORD(v32) = strncmp(&v16[v29], "[last regular]", 0xEuLL);
    if (!v32)
    {
      char v28 = 0;
      char v30 = 0;
      char v31 = 0;
      uint64_t v63 = (int)v140;
      LODWORD(v140) = v140 + 1;
      uint64_t v61 = (char *)v139 + 4 * v63;
      int v56 = 66597;
LABEL_84:
      *((_DWORD *)v61 + 6) = v56;
      goto LABEL_64;
    }
    if (strncmp(&v16[v29], "[import ", 8uLL) || !v97 || (uint64_t v64 = *(int *)(v97 + 16), (int)v64 > 1))
    {
      char v28 = 0;
LABEL_61:
      char v30 = 0;
LABEL_62:
      char v31 = 0;
LABEL_63:
      LODWORD(v32) = 0;
      goto LABEL_64;
    }
    uint64_t v65 = &v16[v29 + 8];
    uint64_t v32 = strchr(v65, 93);
    char v28 = 0;
    if (v32)
    {
      size_t v66 = v32 - v65;
      if (v32 == v65 || v66 > 0xFF)
      {
        char v30 = 0;
        char v31 = 0;
        LODWORD(v32) = 0;
      }
      else
      {
        int v67 = strndup(&v16[v29 + 8], v66);
        char v28 = 0;
        char v30 = 0;
        uint64_t v68 = v64;
        char v31 = 0;
        LODWORD(v32) = 0;
        *(_DWORD *)(v97 + 16) = v68 + 1;
        *(void *)(v97 + 8 * v68) = v67;
      }
    }
    else
    {
      char v30 = 0;
      char v31 = 0;
    }
LABEL_64:
    if (v20 >= v18) {
      break;
    }
    unint64_t v25 = v16[v20];
    unint64_t v26 = v25 >> 4;
    uint64_t v27 = (v25 >> 4) & 0xC;
    if (v27 == 8) {
      goto LABEL_180;
    }
  }
  uint64_t v24 = v140;
  uint64_t v21 = v98;
  if (v140) {
    goto LABEL_112;
  }
LABEL_158:
  free(v16);
  if (a7)
  {
    icu_rules_add_expansions(a4, v96, v94, (uint64_t)&unk_1A33A405C, 5);
    icu_rules_add_expansions(a4, v96, v94, (uint64_t)&unk_1A33A4074, 6);
  }
  if (v95 == v94)
  {
    UErrorCode pErrorCode = U_ZERO_ERROR;
    uint64_t v88 = unorm2_getNFKDInstance();
    if (pErrorCode <= U_ZERO_ERROR)
    {
      if (v88)
      {
        unsigned __int16 v89 = -155;
        LOWORD(v111) = -155;
        do
        {
          if (!unicode_decomposeable(v89))
          {
            UErrorCode pErrorCode = U_ZERO_ERROR;
            LOWORD(v110) = 0;
            int v90 = unorm2_normalize();
            if (pErrorCode <= U_ZERO_ERROR && v90 == 1)
            {
              memset(v139, 0, 32);
              *(_DWORD *)dst = 0;
              strToUTF8((char *)v139, 32, (int32_t *)dst, (const UChar *)&v111, 1, &pErrorCode);
              if (pErrorCode <= U_ZERO_ERROR)
              {
                long long v131 = 0u;
                long long v132 = 0u;
                LODWORD(__s2[0]) = 0;
                strToUTF8((char *)&v131, 32, (int32_t *)__s2, (const UChar *)&v110, 1, &pErrorCode);
                if (pErrorCode <= U_ZERO_ERROR)
                {
                  long long __s1 = 0u;
                  long long v124 = 0u;
                  HIDWORD(v112) = 0;
                  icu_build_pattern_key(v95, (const char *)v139, *(int32_t *)dst, &__s1, 32, (_DWORD *)&v112 + 1);
                  size_t v92 = SHIDWORD(v112);
                  if (HIDWORD(v112))
                  {
                    *(_OWORD *)src = 0u;
                    long long v120 = 0u;
                    LODWORD(v112) = 0;
                    icu_build_pattern_key(v95, (const char *)&v131, __s2[0], src, 32, &v112);
                    if (v112)
                    {
                      if (v92 == v112 && !memcmp(&__s1, src, v92))
                      {
                        __src[0] = (unsigned __int16)v111;
                        __src[1] = (unsigned __int16)v110;
                        icu_rules_add_expansions(a4, v96, v95, (uint64_t)__src, 2);
                      }
                    }
                  }
                }
              }
            }
          }
          unsigned __int16 v89 = v111 + 1;
          LOWORD(v111) = v89;
        }
        while (v89 < 0xFF9Fu);
      }
    }
  }
  return a4;
}

uint64_t icu_open_collation()
{
  uint64_t v0 = ucol_open();
  if (v0)
  {
    ucol_setAttribute();
    ucol_setAttribute();
  }
  return v0;
}

void icu_rules_free(char *a1)
{
  if (a1)
  {
    if (malloc_zone_from_ptr(a1))
    {
      free(a1);
    }
    else
    {
      size_t v2 = *((void *)a1 - 1);
      munmap(a1 - 24, v2);
    }
  }
}

unint64_t utf8_to_code_point(unsigned __int8 *a1)
{
  int v2 = (char)*a1;
  unint64_t result = *a1;
  if (v2 < 0)
  {
    uint64_t v4 = utf8_byte_length_utf8_len_table_2[result >> 4];
    int v5 = utf8_to_code_point_utf8_first_char_mask_1[v4] & result;
    if ((~(result >> 4) & 0xC) != 0)
    {
      return utf8_to_code_point_utf8_first_char_mask_1[v4] & result;
    }
    else
    {
      if (v4 <= 2) {
        uint64_t v6 = 2;
      }
      else {
        uint64_t v6 = utf8_byte_length_utf8_len_table_2[result >> 4];
      }
      unint64_t v7 = (char *)(a1 + 1);
      uint64_t v8 = v6 - 1;
      do
      {
        char v9 = *v7++;
        unint64_t result = v9 & 0x3F | (v5 << 6);
        int v5 = v9 & 0x3F | (v5 << 6);
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t icu_search_context_dump(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t result = printf("###dumping search context(%s)\n", *(const char **)(result + 16));
    if (*(int *)(v1 + 8) >= 1)
    {
      uint64_t v2 = 0;
      while (1)
      {
        uint64_t v3 = *(void *)(v1 + 24);
        int v4 = *(_DWORD *)(v3 + 32 * v2);
        if (v4 > 15) {
          break;
        }
        int v5 = "\t-WildCard-";
        if ((v4 - 1) >= 2)
        {
          if (v4 != 4)
          {
            if (v4 != 8) {
              goto LABEL_40;
            }
            printf("\t{ %s", *(const char **)(v3 + 32 * v2 + 16));
            for (uint64_t i = *(unsigned char **)(*(void *)(v1 + 24) + 32 * v2 + 16);
                  ;
                  i += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*i >> 4])
            {
              UChar32 v7 = *i;
              if (!*i) {
                break;
              }
              if ((v7 & 0x80) != 0)
              {
                unint64_t v8 = (unint64_t)*i >> 4;
                char v9 = ~(_BYTE)v8;
                uint64_t v10 = utf8_byte_length_utf8_len_table_2[v8];
                UChar32 v11 = (utf8_to_code_point_utf8_first_char_mask_1[v10] & v7);
                if ((v9 & 0xC) != 0)
                {
                  UChar32 v7 = (utf8_to_code_point_utf8_first_char_mask_1[v10] & v7);
                }
                else
                {
                  if (v10 <= 2) {
                    uint64_t v10 = 2;
                  }
                  else {
                    uint64_t v10 = v10;
                  }
                  uint64_t v12 = v10 - 1;
                  unsigned int v13 = i + 1;
                  do
                  {
                    char v14 = *v13++;
                    UChar32 v7 = v14 & 0x3F | (v11 << 6);
                    UChar32 v11 = v7;
                    --v12;
                  }
                  while (v12);
                }
              }
              int v15 = u_charType(v7);
              printf(" 0x%x (%d)", v7, v15);
            }
LABEL_36:
            int v5 = " }";
            goto LABEL_38;
          }
          int v5 = "\t-IgnoreCombining-";
        }
LABEL_38:
        unint64_t result = puts(v5);
        if (++v2 >= *(int *)(v1 + 8)) {
          return result;
        }
      }
      if (v4 > 63)
      {
        if (v4 == 64)
        {
          int v5 = "\t-Word Match-";
        }
        else
        {
          if (v4 != 128) {
LABEL_40:
          }
            icu_search_context_dump_cold_1(v4);
          int v5 = "\t-Empty-";
        }
        goto LABEL_38;
      }
      if (v4 != 16)
      {
        if (v4 != 32) {
          goto LABEL_40;
        }
        int v5 = "\t-WhiteSpace-";
        goto LABEL_38;
      }
      printf("\t{ ");
      uint64_t v16 = *(void *)(v1 + 24);
      uint64_t v17 = *(void *)(v16 + 32 * v2 + 8);
      if (*(_DWORD *)(v17 + 4))
      {
        unint64_t v18 = 0;
        do
        {
          if (v18) {
            uint64_t v19 = ",";
          }
          else {
            uint64_t v19 = "";
          }
          printf("%s%s", v19, (const char *)(*(void *)(*(void *)(v17 + 16) + 8 * v18++) + 1));
          uint64_t v16 = *(void *)(v1 + 24);
          uint64_t v17 = *(void *)(v16 + 32 * v2 + 8);
        }
        while (v18 < *(unsigned int *)(v17 + 4));
      }
      uint64_t v20 = *(const char **)(v16 + 32 * v2 + 16);
      if (v20) {
        printf(",%s", v20);
      }
      goto LABEL_36;
    }
  }
  return result;
}

unsigned int *icu_search_context_create_raw(const char *a1)
{
  uint64_t v2 = (unsigned int *)malloc_type_calloc(1uLL, 0x60uLL, 0x1070040181A2D16uLL);
  atomic_store(1u, v2 + 1);
  *uint64_t v2 = 268435458;
  if (a1) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = "";
  }
  int v4 = strdup(v3);
  *((void *)v2 + 2) = v4;
  int v5 = strlen(v4);
  if (v5)
  {
    int v6 = v4[v5 - 1];
    _icu_search_context_add_part((uint64_t)v2, 0, v4, v5 - (v6 == 42), 0, 0);
    if (v6 == 42) {
      _icu_search_context_add_type((int *)v2, 2);
    }
  }
  return v2;
}

void *UTF16FromUTF8(const char *a1, int32_t a2, void *a3, int32_t *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v11 = 0;
  unint64_t v8 = strFromUTF8(a3, *a4, a4, a1, a2, (UErrorCode *)&v11);
  if (!a3 || v11)
  {
    if (*a4)
    {
      int v9 = *a4 + 1;
      *a4 = v9;
      unint64_t v8 = malloc_type_malloc(2 * v9, 0x1000040BDFB0063uLL);
      int v11 = 0;
      strFromUTF8(v8, *a4, a4, a1, a2, (UErrorCode *)&v11);
      if (v11)
      {
        free(v8);
        return 0;
      }
    }
  }
  return v8;
}

BOOL lev_ukkonen_accepts(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  int v119 = 0;
  if (a2 > (int)a4) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a4;
  }
  if (a2 > (int)a4) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = a3;
  }
  uint64_t v108 = v7;
  if (a2 > (int)a4) {
    int v8 = a4;
  }
  else {
    int v8 = a2;
  }
  if (a2 > (int)a4) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = a1;
  }
  uint64_t v102 = v9;
  int v10 = v8 + a5 - v6;
  if (v10 < 0) {
    return 0;
  }
  int v97 = a2;
  int v98 = a4;
  int v101 = a5;
  uint64_t v99 = &v95;
  uint64_t v100 = a6;
  uint64_t v112 = v6;
  int v104 = v8;
  int v96 = v6 - v8;
  int v11 = (v10 & 0xFFFFFFFE) + v6 - v8;
  int v12 = v11 + 3;
  MEMORY[0x1F4188790]((void *)((12 * v12 + 15) & 0x1FFFFFFFF0), a1, 12 * v12, a3, a4);
  char v14 = (char *)&v95 - v13;
  bzero((char *)&v95 - v13, v15);
  int v103 = v11;
  if (v11 >= -2)
  {
    if (v12 <= 1) {
      unsigned int v19 = 1;
    }
    else {
      unsigned int v19 = v11 + 3;
    }
    uint64_t v16 = memset(v14, 255, 12 * v19);
  }
  unsigned int v95 = v10 >> 1;
  int v20 = v112;
  MEMORY[0x1F4188790]((void *)((4 * v112 + 15) & 0x7FFFFFFF0), v16, 4 * v112, v17, v18);
  long long v116 = (char *)&v95 - v21;
  bzero((char *)&v95 - v21, v22);
  MEMORY[0x1A6247540](v108);
  uint64_t v23 = v14 + 12;
  uint64_t v24 = v14;
  if ((v104 & 0x80000000) == 0)
  {
    int v25 = v20;
    int v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = -(v10 >> 1);
    uint64_t v29 = v25 + (v10 & 0xFFFFFFFE) - v104 + 1;
    int v118 = v14 + 21;
    int v105 = v14 + 18;
    int v106 = v14 + 15;
    uint64_t v110 = v29;
    unsigned int v111 = v14 + 12;
    uint64_t v114 = v14;
    do
    {
      uint64_t v30 = v27;
      int v117 = v26;
      if (v26)
      {
        int v31 = ucol_next();
        int v26 = v117;
        unsigned int v32 = v31 & 0xFFFF0000;
        uint64_t v29 = v110;
        uint64_t v23 = v111;
      }
      else
      {
        unsigned int v32 = 0;
      }
      int v113 = v28;
      if (v103 < 0)
      {
        uint64_t v24 = v114;
        uint64_t v27 = v30;
      }
      else
      {
        uint64_t v33 = 0;
        int v107 = v26 - 1;
        uint64_t v24 = v114;
        int v34 = v112;
        uint64_t v27 = v30;
        unsigned int v109 = v32;
        do
        {
          if (v26 | v28)
          {
            uint64_t v36 = v33 + 1;
            uint64_t v37 = &v23[12 * (v33 + 1)];
            int v38 = *v37;
            uint64_t v40 = v37 + 2;
            uint64_t v39 = v37[2];
            unsigned int v41 = v38 + v37[1] + v37[2];
            int v42 = &v24[12 * v33];
            uint64_t v43 = *v42;
            unsigned __int8 v44 = v42[2];
            unsigned int v45 = v43 + v42[1] + v44;
            if (v41 >= v45) {
              int v46 = v43 + v42[1] + v42[2];
            }
            else {
              int v46 = v38 + v37[1] + v37[2];
            }
            if (v41 >= v45) {
              uint64_t v47 = &v24[12 * v33];
            }
            else {
              uint64_t v47 = &v23[12 * (v33 + 1)];
            }
            if ((v28 & 0x80000000) == 0 && (int)v28 <= v34)
            {
              if (v26 && v28)
              {
                if ((int)v28 <= (int)v27)
                {
                  unsigned int v49 = *(_DWORD *)&v116[4 * (v28 - 1)];
                }
                else
                {
                  uint64_t v115 = v33 + 1;
                  int v48 = ucol_next();
                  uint64_t v24 = v114;
                  uint64_t v36 = v115;
                  unsigned int v32 = v109;
                  int v26 = v117;
                  int v34 = v112;
                  unsigned int v49 = v48 & 0xFFFF0000;
                  uint64_t v29 = v110;
                  uint64_t v23 = v111;
                  *(_DWORD *)&v116[4 * (v28 - 1)] = v49;
                  uint64_t v27 = v28;
                }
                int v58 = &v23[12 * v33];
                int v59 = v58 + 1;
                uint64_t v60 = v58[1];
                uint64_t v61 = v58 + 2;
                if (v32 == v49) {
                  int v62 = v58[1];
                }
                else {
                  int v62 = v60 + 1;
                }
                if (v46 + 1 >= v62 + *v58 + v58[2])
                {
                  if (v32 != v49)
                  {
                    if (v60 <= 2) {
                      v23[12 * v33 + 9 + v60] = v107;
                    }
                    *int v59 = v60 + 1;
                  }
                }
                else
                {
                  *int v59 = v47[1];
                  if (v41 >= v45)
                  {
                    unint64_t v76 = *v42;
                    char *v58 = v76 + 1;
                    if (v76 <= 2) {
                      v23[12 * v33 + 3 + v76] = v28 - 1;
                    }
                    *uint64_t v61 = v42[2];
                    if (*v42)
                    {
                      unint64_t v77 = 0;
                      uint64_t v78 = &v106[12 * v33];
                      do
                      {
                        v78[v77] = v47[v77 + 3];
                        if (v77 > 1) {
                          break;
                        }
                        ++v77;
                      }
                      while (v77 < *v47);
                    }
                    uint64_t v79 = 0;
                    uint64_t v80 = &v118[12 * v33];
                    uint64_t v81 = (unsigned __int8 *)(v47 + 9);
                    do
                    {
                      int v82 = &v80[v79];
                      *(v82 - 3) = v81[v79 - 3];
                      *int v82 = v81[v79++];
                    }
                    while (v79 != 3);
                  }
                  else
                  {
                    char *v58 = *v37;
                    unint64_t v63 = *v40;
                    *uint64_t v61 = v63 + 1;
                    if (v63 <= 2) {
                      v23[12 * v33 + 6 + v63] = v107;
                    }
                    if (*v40)
                    {
                      unint64_t v64 = 0;
                      uint64_t v65 = &v105[12 * v33];
                      do
                      {
                        v65[v64] = v47[v64 + 6];
                        if (v64 > 1) {
                          break;
                        }
                        ++v64;
                      }
                      while (v64 < *v40);
                    }
                    uint64_t v66 = 0;
                    int v67 = &v118[12 * v33];
                    uint64_t v68 = (unsigned __int8 *)(v47 + 9);
                    do
                    {
                      int v69 = &v67[v66];
                      *(v69 - 6) = v68[v66 - 6];
                      char *v69 = v68[v66++];
                    }
                    while (v66 != 3);
                  }
                }
              }
              else
              {
                uint64_t v50 = &v23[12 * v33];
                v50[1] = v47[1];
                uint64_t v51 = (unsigned __int8 *)(v50 + 2);
                if (v41 >= v45)
                {
                  *uint64_t v50 = v43 + 1;
                  unsigned __int8 *v51 = v44;
                  if (v43 <= 2) {
                    v23[12 * v33 + 3 + v43] = v28 - 1;
                  }
                  if (*v42)
                  {
                    unint64_t v70 = 0;
                    int v71 = &v106[12 * v33];
                    do
                    {
                      v71[v70] = v47[v70 + 3];
                      if (v70 > 1) {
                        break;
                      }
                      ++v70;
                    }
                    while (v70 < *v47);
                  }
                  uint64_t v72 = 0;
                  int v73 = &v118[12 * v33];
                  unsigned int v74 = (unsigned __int8 *)(v47 + 9);
                  do
                  {
                    int v75 = &v73[v72];
                    *(v75 - 3) = v74[v72 - 3];
                    *int v75 = v74[v72++];
                  }
                  while (v72 != 3);
                }
                else
                {
                  *uint64_t v50 = v38;
                  unsigned __int8 *v51 = v39 + 1;
                  if (v39 <= 2) {
                    v23[12 * v33 + 6 + v39] = v26;
                  }
                  if (*v40)
                  {
                    unint64_t v52 = 0;
                    uint64_t v53 = &v105[12 * v33];
                    do
                    {
                      v53[v52] = v47[v52 + 6];
                      if (v52 > 1) {
                        break;
                      }
                      ++v52;
                    }
                    while (v52 < *v40);
                  }
                  uint64_t v54 = 0;
                  int v55 = &v118[12 * v33];
                  int v56 = (unsigned __int8 *)(v47 + 9);
                  do
                  {
                    int v57 = &v55[v54];
                    *(v57 - 6) = v56[v54 - 6];
                    char *v57 = v56[v54++];
                  }
                  while (v54 != 3);
                }
              }
            }
          }
          else
          {
            UChar32 v35 = &v23[12 * v33];
            *(_WORD *)UChar32 v35 = 0;
            v35[2] = 0;
            uint64_t v36 = v33 + 1;
          }
          uint64_t v28 = (v28 + 1);
          uint64_t v33 = v36;
        }
        while (v36 != v29);
      }
      uint64_t v28 = (v113 + 1);
    }
    while (v26++ != v104);
  }
  uint64_t v84 = (int)(v95 + v96);
  int v85 = &v23[12 * v84];
  uint64_t v86 = 12 * v84;
  uint64_t v87 = v100;
  uint64_t v88 = (_WORD *)(v100 + 3);
  if (v97 <= v98)
  {
    *uint64_t v88 = *(_WORD *)&v24[v86 + 15];
    *(unsigned char *)(v87 + 5) = v24[v86 + 17];
    *(_WORD *)(v87 + 6) = *(_WORD *)&v24[v86 + 18];
    *(unsigned char *)(v87 + 8) = v24[v86 + 20];
    int v90 = *v85;
    *(unsigned char *)uint64_t v87 = v90;
    int v91 = v23[12 * (int)v84 + 2];
    *(unsigned char *)(v87 + 2) = v91;
  }
  else
  {
    uint64_t v89 = 0;
    *uint64_t v88 = *(_WORD *)&v24[v86 + 18];
    *(unsigned char *)(v87 + 5) = v24[v86 + 20];
    do
    {
      *(unsigned char *)(v87 + v89 + 6) = v24[12 * (int)v84 + 15 + v89];
      ++v89;
    }
    while (v89 != 3);
    int v90 = *v85;
    *(unsigned char *)(v87 + 2) = v90;
    int v91 = v23[12 * (int)v84 + 2];
    *(unsigned char *)uint64_t v87 = v91;
  }
  int v93 = v23[12 * (int)v84 + 1];
  *(unsigned char *)(v87 + 1) = v93;
  uint64_t v94 = &v24[v86];
  *(_WORD *)(v87 + 9) = *(_WORD *)(v94 + 21);
  *(unsigned char *)(v87 + 11) = v94[23];
  return v90 + v91 + v93 <= v101;
}

uint64_t fuzzy_matches(uint64_t a1, const char *a2, int a3, void *a4, uint64_t *a5)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  if (dword_1E95AC8E4 >= 5)
  {
    int v84 = *__error();
    int v85 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v86 = *(void *)(a1 + 16);
      uint64_t v87 = "yes";
      if (*(unsigned char *)(a1 + 66)) {
        uint64_t v88 = "yes";
      }
      else {
        uint64_t v88 = "no";
      }
      if (!*(unsigned char *)(a1 + 67)) {
        uint64_t v87 = "no";
      }
      *(_DWORD *)unsigned int v111 = 136316162;
      uint64_t v112 = a2;
      __int16 v113 = 2080;
      uint64_t v114 = v86;
      __int16 v115 = 2080;
      long long v116 = v88;
      __int16 v117 = 2080;
      int v118 = v87;
      __int16 v119 = 1024;
      int v120 = a3;
      _os_log_impl(&dword_1A334F000, v85, OS_LOG_TYPE_DEFAULT, "FUZZY MATCH BEGIN, string:\"%s\", pattern:\"%s\", word_match:%s, word_start:%s, threshold:%d\n", v111, 0x30u);
    }
    *__error() = v84;
  }
  int v10 = *(_DWORD *)(a1 + 92);
  bzero(v111, 0x800uLL);
  int v11 = v10 * (100 - a3);
  if (v11 <= 399) {
    int v12 = v11 / 100;
  }
  else {
    int v12 = 3;
  }
  uint64_t v104 = a1;
  if (!*(unsigned char *)(a1 + 66))
  {
    if (dword_1E95AC8E4 >= 5)
    {
      int v92 = v12;
      int v93 = *__error();
      uint64_t v94 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v110 = a2;
        _os_log_impl(&dword_1A334F000, v94, OS_LOG_TYPE_DEFAULT, "string: %s ", buf, 0xCu);
      }
      *__error() = v93;
      int v12 = v92;
    }
    uint64_t v67 = 0;
    *(_DWORD *)buf = 1024;
    do
      unsigned int v68 = a2[v67++];
    while (v68 > 1);
    int v69 = (uint8_t *)UTF16FromUTF8(a2, (int)v67 - 1, v111, (int32_t *)buf);
    uint64_t v70 = ucol_openElements();
    LODWORD(v73) = -1;
    do
      uint64_t v73 = (v73 + 1);
    while (ucol_next() != -1);
    MEMORY[0x1A6247540](v70);
    uint64_t v74 = ucol_openElements();
    uint64_t v75 = v74;
    if (*(unsigned char *)(v104 + 68))
    {
      int v76 = v10;
      if (v12 + v10 >= (int)v73) {
        int v77 = v73;
      }
      else {
        int v77 = v12 + v10;
      }
      int v78 = (v76 - v12) & ~((v76 - v12) >> 31);
      if (v78 <= v77)
      {
        int v82 = v76;
        if (lev_ukkonen_accepts(v74, v76, v70, (v76 - v12) & ~((v76 - v12) >> 31), v12, v104 + 96))
        {
          uint64_t v71 = 1;
        }
        else
        {
          do
          {
            int v83 = v78;
            MEMORY[0x1A6247540](v75);
            MEMORY[0x1A6247540](v70);
            if (v77 == v78) {
              break;
            }
            ++v78;
          }
          while (!lev_ukkonen_accepts(v75, v82, v70, (v83 + 1), v12, v104 + 96));
          uint64_t v71 = v83 < v77;
        }
      }
      else
      {
        uint64_t v71 = 0;
      }
      if (dword_1E95AC8E4 < 5)
      {
LABEL_130:
        if (v69 != v111) {
          free(v69);
        }
        ucol_closeElements();
        if (v70) {
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      int v79 = *__error();
      uint64_t v80 = _SILogForLogForCategory(1);
      if (!os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
      {
LABEL_153:
        *__error() = v79;
        goto LABEL_130;
      }
      *(_WORD *)uint64_t v108 = 0;
      uint64_t v81 = "prefix matched against pattern ";
    }
    else
    {
      uint64_t v71 = lev_ukkonen_accepts(v74, v10, v70, v73, v12, v104 + 96);
      if (dword_1E95AC8E4 < 5) {
        goto LABEL_130;
      }
      int v79 = *__error();
      uint64_t v80 = _SILogForLogForCategory(1);
      if (!os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_153;
      }
      *(_WORD *)uint64_t v108 = 0;
      uint64_t v81 = "normally matched against pattern ";
    }
    _os_log_impl(&dword_1A334F000, v80, OS_LOG_TYPE_DEFAULT, v81, v108, 2u);
    goto LABEL_153;
  }
  int v105 = *(unsigned __int8 *)(a1 + 67);
  uint64_t v13 = 0xFFFFFFFF00000000;
  char v14 = a2;
  do
  {
    unsigned int v15 = *(unsigned __int8 *)v14++;
    v13 += 0x100000000;
  }
  while (v15 > 1);
  unsigned int v16 = *(unsigned __int8 *)a2;
  if (v16 < 2)
  {
    uint64_t v18 = 0;
    BOOL v106 = 0;
    goto LABEL_110;
  }
  uint64_t v99 = a5;
  char v17 = 0;
  BOOL v106 = 0;
  uint64_t v18 = 0;
  uint64_t v107 = v13 >> 32;
  int v103 = v12 + v10;
  int v102 = (v10 - v12) & ~((v10 - v12) >> 31);
  uint64_t v101 = a1 + 96;
  unsigned int v19 = a2;
  uint64_t v100 = a2;
  while (1)
  {
    int v20 = a2;
    a2 = v19;
    if (v17)
    {
      do
      {
        if ((v16 & 0x80) != 0)
        {
          unint64_t v21 = (unint64_t)v16 >> 4;
          char v22 = ~(_BYTE)v21;
          uint64_t v23 = utf8_byte_length_utf8_len_table_2[v21];
          int v24 = utf8_to_code_point_utf8_first_char_mask_1[v23] & v16;
          if ((v22 & 0xC) != 0)
          {
            v16 &= utf8_to_code_point_utf8_first_char_mask_1[v23];
          }
          else
          {
            if (v23 <= 2) {
              uint64_t v23 = 2;
            }
            else {
              uint64_t v23 = v23;
            }
            uint64_t v25 = v23 - 1;
            int v26 = (char *)(a2 + 1);
            uint64_t v27 = (char *)(a2 + 1);
            uint64_t v28 = v25;
            unsigned int v16 = v24;
            do
            {
              char v29 = *v27++;
              unsigned int v16 = v29 & 0x3F | (v16 << 6);
              --v28;
            }
            while (v28);
            do
            {
              char v30 = *v26++;
              int v24 = v30 & 0x3F | (v24 << 6);
              --v25;
            }
            while (v25);
            if (v24 >= 0x10000)
            {
              unsigned int v31 = v24 - 917760;
              unsigned int v32 = v24 - 127995;
              if (v31 < 0xF0 || v32 < 5) {
                goto LABEL_33;
              }
              goto LABEL_12;
            }
          }
          BOOL v34 = (v24 - 12441) >= 4 && (v24 - 65438) >= 2;
          if (!v34 || unicode_combinable((unsigned __int16)v24)) {
            goto LABEL_33;
          }
        }
LABEL_12:
        if (!u_isUWhiteSpace(v16) && !u_ispunct(v16)) {
          break;
        }
LABEL_33:
        a2 += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*(unsigned __int8 *)a2 >> 4];
        unsigned int v16 = *(unsigned __int8 *)a2;
      }
      while (v16 >= 2);
    }
    if (dword_1E95AC8E4 >= 5)
    {
      int v62 = *__error();
      unint64_t v63 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v110 = a2;
        _os_log_impl(&dword_1A334F000, v63, OS_LOG_TYPE_DEFAULT, "string: %s ", buf, 0xCu);
      }
      *__error() = v62;
    }
    *(_DWORD *)uint64_t v108 = 1024;
    v107 += v20 - a2;
    UChar32 v35 = (uint8_t *)UTF16FromUTF8(a2, v107, v111, (int32_t *)v108);
    if (v18) {
      ucol_closeElements();
    }
    uint64_t v18 = ucol_openElements();
    int v36 = 0;
    LODWORD(v37) = -1;
    do
    {
      int v38 = v36;
      int v39 = ucol_next();
      uint64_t v37 = (v37 + 1);
      int v36 = v38 + 1;
    }
    while (v39 != -1);
    MEMORY[0x1A6247540](v18);
    uint64_t v40 = ucol_openElements();
    uint64_t v41 = v40;
    if (!*(unsigned char *)(a1 + 68))
    {
      BOOL v106 = lev_ukkonen_accepts(v40, v10, v18, v37, v12, v101);
      if (dword_1E95AC8E4 < 5) {
        goto LABEL_58;
      }
      int v98 = *__error();
      int v46 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A334F000, v46, OS_LOG_TYPE_DEFAULT, "normally matched against pattern ", buf, 2u);
      }
      goto LABEL_101;
    }
    int v42 = v12 + v10;
    if (v103 >= (int)v37) {
      int v42 = v37;
    }
    if (v102 <= v42)
    {
      uint64_t v44 = v102;
      int v43 = v12 + v10;
      if (v38 < v103) {
        int v43 = v38;
      }
      int v45 = v43 + 1;
      while (!lev_ukkonen_accepts(v41, v10, v18, v44, v12, v101))
      {
        MEMORY[0x1A6247540](v41);
        MEMORY[0x1A6247540](v18);
        uint64_t v44 = (v44 + 1);
        if (v45 == v44)
        {
          BOOL v106 = 0;
          goto LABEL_57;
        }
      }
      BOOL v106 = 1;
    }
LABEL_57:
    if (dword_1E95AC8E4 >= 5)
    {
      int v98 = *__error();
      uint64_t v66 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A334F000, v66, OS_LOG_TYPE_DEFAULT, "prefix matched against pattern ", buf, 2u);
      }
LABEL_101:
      *__error() = v98;
    }
LABEL_58:
    ucol_closeElements();
    if (v35 != v111) {
      free(v35);
    }
    if (v106 || v105) {
      break;
    }
    if (dword_1E95AC8E4 >= 5)
    {
      int v64 = *__error();
      uint64_t v65 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A334F000, v65, OS_LOG_TYPE_DEFAULT, "no match!\n", buf, 2u);
      }
      *__error() = v64;
    }
    unsigned int v47 = *(unsigned __int8 *)a2;
    unsigned int v19 = a2;
    if (v47 >= 2)
    {
      unsigned int v19 = a2;
      do
      {
        if ((v47 & 0x80) != 0)
        {
          unint64_t v48 = (unint64_t)v47 >> 4;
          char v49 = ~(_BYTE)v48;
          uint64_t v50 = utf8_byte_length_utf8_len_table_2[v48];
          int v51 = utf8_to_code_point_utf8_first_char_mask_1[v50] & v47;
          if ((v49 & 0xC) != 0)
          {
            v47 &= utf8_to_code_point_utf8_first_char_mask_1[v50];
          }
          else
          {
            if (v50 <= 2) {
              uint64_t v50 = 2;
            }
            else {
              uint64_t v50 = v50;
            }
            uint64_t v52 = v50 - 1;
            uint64_t v53 = (char *)(v19 + 1);
            uint64_t v54 = (char *)(v19 + 1);
            uint64_t v55 = v52;
            unsigned int v47 = v51;
            do
            {
              char v56 = *v54++;
              unsigned int v47 = v56 & 0x3F | (v47 << 6);
              --v55;
            }
            while (v55);
            do
            {
              char v57 = *v53++;
              int v51 = v57 & 0x3F | (v51 << 6);
              --v52;
            }
            while (v52);
            if (v51 >= 0x10000)
            {
              unsigned int v58 = v51 - 917760;
              unsigned int v59 = v51 - 127995;
              if (v58 < 0xF0 || v59 < 5) {
                goto LABEL_87;
              }
              goto LABEL_66;
            }
          }
          BOOL v61 = (v51 - 12441) >= 4 && (v51 - 65438) >= 2;
          if (!v61 || unicode_combinable((unsigned __int16)v51)) {
            goto LABEL_87;
          }
        }
LABEL_66:
        if (u_isUWhiteSpace(v47) || u_ispunct(v47)) {
          break;
        }
LABEL_87:
        v19 += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)*(unsigned __int8 *)v19 >> 4];
        unsigned int v47 = *(unsigned __int8 *)v19;
      }
      while (v47 > 1);
    }
    unsigned int v16 = *(unsigned __int8 *)v19;
    char v17 = 1;
    if (v16 <= 1) {
      goto LABEL_110;
    }
  }
  if (dword_1E95AC8E4 >= 5)
  {
    int v95 = *__error();
    int v96 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
    {
      int v97 = "got";
      if (!v106) {
        int v97 = "no";
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v110 = v97;
      _os_log_impl(&dword_1A334F000, v96, OS_LOG_TYPE_DEFAULT, "%s match!\n", buf, 0xCu);
    }
    *__error() = v95;
  }
  if (v106)
  {
    *a4 = a2 - v100;
    *uint64_t v99 = v107;
  }
LABEL_110:
  uint64_t v71 = v106;
  if (v18) {
LABEL_111:
  }
    ucol_closeElements();
LABEL_112:
  if (dword_1E95AC8E4 >= 5)
  {
    int v89 = *__error();
    int v90 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      int v91 = "NO_MATCH";
      if (v71) {
        int v91 = "MATCH";
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v110 = v91;
      _os_log_impl(&dword_1A334F000, v90, OS_LOG_TYPE_DEFAULT, "FUZZY MATCH END: %s\n", buf, 0xCu);
    }
    *__error() = v89;
  }
  return v71;
}

BOOL icu_search_context_is_prefix(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 68) != 0;
  }
  return result;
}

uint64_t icu_search_context_get_pattern(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t icu_search_context_fuzzy_match_state(uint64_t result, void *a2, void *a3, void *a4, char *a5)
{
  if (a5)
  {
    char v5 = *(unsigned char *)(result + 69);
    if (v5)
    {
      *a2 = result + 99;
      *a3 = result + 105;
      *a4 = result + 102;
      char v5 = 3;
    }
    *a5 = v5;
  }
  return result;
}

uint64_t icu_get_char_category_mask(unsigned __int8 *a1)
{
  int v2 = (char)*a1;
  UChar32 v3 = *a1;
  if (v2 < 0)
  {
    unint64_t v4 = (unint64_t)v2 >> 4;
    char v5 = ~(_BYTE)v4;
    uint64_t v6 = utf8_byte_length_utf8_len_table_2[v4];
    UChar32 v7 = (utf8_to_code_point_utf8_first_char_mask_1[v6] & v3);
    if ((v5 & 0xC) != 0)
    {
      UChar32 v3 = (utf8_to_code_point_utf8_first_char_mask_1[v6] & v3);
    }
    else
    {
      if (v6 <= 2) {
        uint64_t v6 = 2;
      }
      else {
        uint64_t v6 = v6;
      }
      uint64_t v8 = v6 - 1;
      uint64_t v9 = (char *)(a1 + 1);
      do
      {
        char v10 = *v9++;
        UChar32 v3 = v10 & 0x3F | (v7 << 6);
        UChar32 v7 = v3;
        --v8;
      }
      while (v8);
    }
  }
  int v11 = 1 << u_charType(v3);
  if ((v11 & 0x3E) != 0) {
    return 62;
  }
  if ((v11 & 0xF000000) != 0) {
    int v13 = 251658240;
  }
  else {
    int v13 = v11;
  }
  if ((v11 & 0x78001) != 0) {
    unsigned int v14 = 491521;
  }
  else {
    unsigned int v14 = v13;
  }
  if ((v11 & 0x7000) != 0) {
    unsigned int v14 = 28672;
  }
  if ((v11 & 0xE00) != 0) {
    unsigned int v14 = 3584;
  }
  if ((v11 & 0x1C0) != 0) {
    return 448;
  }
  else {
    return v14;
  }
}

unsigned int *icu_regex_create(const char *a1, int32_t a2, uint32_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  bzero(v12, 0x800uLL);
  patternCFIndex Length = 1024;
  unint64_t result = (unsigned int *)UTF16FromUTF8(a1, a2, v12, &patternLength);
  if (result)
  {
    UChar32 v7 = result;
    UErrorCode status = U_ZERO_ERROR;
    memset(&pe, 0, sizeof(pe));
    uint64_t v8 = uregex_open((const UChar *)result, patternLength, a3, &pe, &status);
    if (v7 != (unsigned int *)v12) {
      free(v7);
    }
    if (v8)
    {
      unint64_t result = (unsigned int *)malloc_type_malloc(0x18uLL, 0x1020040BC38B472uLL);
      result[4] = 0;
      *((void *)result + 1) = v8;
      atomic_store(1u, result + 1);
      *unint64_t result = 268435459;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void icu_regex_copy(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    UErrorCode status = U_ZERO_ERROR;
    uint64_t v1 = uregex_clone(*(const URegularExpression **)(a1 + 8), &status);
    if (v1)
    {
      int v2 = v1;
      UChar32 v3 = malloc_type_malloc(0x18uLL, 0x1020040BC38B472uLL);
      *((void *)v3 + 1) = v2;
      atomic_store(1u, (unsigned int *)v3 + 1);
      *(_DWORD *)UChar32 v3 = 268435459;
    }
  }
}

BOOL icu_regex_matches(uint64_t a1, const char *a2, int32_t a3, int32_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  bzero(v14, 0x800uLL);
  textCFIndex Length = 1024;
  uint64_t v8 = (const UChar *)UTF16FromUTF8(a2, a3, v14, &textLength);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (UChar *)v8;
  int v12 = 0;
  uregex_setText(*(URegularExpression **)(a1 + 8), v8, textLength, (UErrorCode *)&v12);
  BOOL v10 = uregex_matches(*(URegularExpression **)(a1 + 8), a4, (UErrorCode *)&v12) != 0;
  if (v9 != (UChar *)v14) {
    free(v9);
  }
  return v10;
}

BOOL icu_regex_at(uint64_t a1, const char *a2, int32_t a3, int32_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  bzero(v14, 0x800uLL);
  textCFIndex Length = 1024;
  uint64_t v8 = (const UChar *)UTF16FromUTF8(a2, a3, v14, &textLength);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (UChar *)v8;
  int v12 = 0;
  uregex_setText(*(URegularExpression **)(a1 + 8), v8, textLength, (UErrorCode *)&v12);
  BOOL v10 = uregex_lookingAt(*(URegularExpression **)(a1 + 8), a4, (UErrorCode *)&v12) != 0;
  if (v9 != (UChar *)v14) {
    free(v9);
  }
  return v10;
}

BOOL icu_regex_find(uint64_t a1, const char *a2, int32_t a3, int32_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  bzero(v14, 0x800uLL);
  textCFIndex Length = 1024;
  uint64_t v8 = (UChar *)UTF16FromUTF8(a2, a3, v14, &textLength);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  int v12 = 0;
  uregex_setText(*(URegularExpression **)(a1 + 8), v9, textLength, (UErrorCode *)&v12);
  BOOL v10 = uregex_find(*(URegularExpression **)(a1 + 8), a4, (UErrorCode *)&v12) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  if (v9 != (UChar *)v14) {
    free(v9);
  }
  return v10;
}

unsigned int *icu_range_search_create(const __CFString *a1, __CFString *a2, int a3, char a4, int a5, char a6, char a7)
{
  unsigned int v14 = (unsigned int *)malloc_type_calloc(1uLL, 0x68uLL, 0x107004098E5F20DuLL);
  atomic_store(1u, v14 + 1);
  *unsigned int v14 = 268435460;
  *((unsigned char *)v14 + 84) = a3;
  *((unsigned char *)v14 + 85) = a4;
  v14[22] = a5;
  *((unsigned char *)v14 + 92) = a6;
  *((unsigned char *)v14 + 93) = a7;
  CFIndex Length = CFStringGetLength(a1);
  v14[4] = Length;
  if (Length)
  {
    unsigned int v16 = (UniChar *)malloc_type_malloc(((Length << 32) + 0x100000000) >> 31, 0x1000040BDFB0063uLL);
    *((void *)v14 + 1) = v16;
    v28.CFIndex length = (int)v14[4];
    v28.CFIndex location = 0;
    CFStringGetCharacters(a1, v28, v16);
    char v17 = (_WORD *)*((void *)v14 + 1);
    int v18 = v14[4];
    uint64_t v19 = v18;
    v17[v18] = 0;
    if (v17[v18 - 1] == 42 && (v18 == 1 || v17[v18 - 2] != 92)) {
      *((unsigned char *)v14 + 94) = 1;
    }
    if (v18 > 1 && *v17 == 42)
    {
      memmove(v17, v17 + 1, 2 * (v18 - 1));
      char v17 = (_WORD *)*((void *)v14 + 1);
      uint64_t v19 = (int)v14[4] - 1;
      v17[v19] = 0;
      *((unsigned char *)v14 + 95) = 1;
      int v18 = v19;
    }
    int v20 = (char *)v17;
    if (v18 >= 1)
    {
      unint64_t v21 = &v17[v19];
      int v20 = (char *)v17;
      char v22 = v17;
      do
      {
        int v23 = (unsigned __int16)*v22;
        if (v23 == 92)
        {
          if (++v22 >= v21)
          {
            *(_WORD *)int v20 = 92;
            v20 += 2;
            break;
          }
          LOWORD(v23) = *v22;
        }
        ++v22;
        *(_WORD *)int v20 = v23;
        v20 += 2;
      }
      while (v22 < v21);
    }
    unint64_t v24 = (unint64_t)(v20 - (char *)v17) >> 1;
    v14[4] = v24;
    if (*((unsigned char *)v14 + 94))
    {
      LODWORD(v++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v24 - 1;
      v14[4] = v24;
      v17[(int)v24] = 0;
    }
    if (!v24) {
      goto LABEL_24;
    }
    uint64_t v25 = icu_locale_create(a2, 1);
    *((void *)v14 + 3) = v25;
    if (v25)
    {
      unint64_t collation = icu_locale_get_collation((unint64_t)v25, a3, a3);
      *((void *)v14 + 4) = collation;
      if (collation)
      {
        *((void *)v14 + 5) = usearch_openFromCollator();
LABEL_24:
        *((unsigned char *)v14 + 96) = 1;
        return v14;
      }
    }
  }
  icu_range_search_destroy(v14);
  return 0;
}

void icu_range_search_set_text(uint64_t a1, const __CFString *a2, int a3)
{
  if (a1)
  {
    _icu_range_match_search_reset_text(a1);
    if (a2)
    {
      *(_DWORD *)(a1 + 64) = CFStringGetLength(a2);
      CharactersPtr = CFStringGetCharactersPtr(a2);
      *(void *)(a1 + 56) = CharactersPtr;
      if (CharactersPtr)
      {
        *(void *)(a1 + 48) = CFRetain(a2);
      }
      else
      {
        UChar32 v7 = (UniChar *)malloc_type_malloc(2 * *(int *)(a1 + 64) + 2, 0x1000040BDFB0063uLL);
        v9.CFIndex length = *(int *)(a1 + 64);
        v9.CFIndex location = 0;
        CFStringGetCharacters(a2, v9, v7);
        *(void *)(a1 + 56) = v7;
        *(unsigned char *)(a1 + 97) = 1;
      }
      _icu_range_search_set_text(a1, a3);
    }
  }
}

void _icu_range_match_search_reset_text(uint64_t a1)
{
  int v2 = *(UText **)(a1 + 72);
  if (v2)
  {
    utext_close(v2);
    *(void *)(a1 + 72) = 0;
  }
  UChar32 v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRelease(v3);
  }
  if (*(unsigned char *)(a1 + 97)) {
    free(*(void **)(a1 + 56));
  }
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 96) = 1;
}

void _icu_range_search_set_text(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 96) = 0;
  usearch_setText();
}

void icu_range_search_set_uchar_text(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a1)
  {
    _icu_range_match_search_reset_text(a1);
    if (a2)
    {
      *(_DWORD *)(a1 + 64) = a3;
      *(void *)(a1 + 56) = a2;
      _icu_range_search_set_text(a1, a4);
    }
  }
}

uint64_t icu_range_search_next_match(uint64_t result, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 96))
    {
      return 0;
    }
    else
    {
      int v14 = -1;
      int v15 = -1;
      UErrorCode status = U_ZERO_ERROR;
      while (1)
      {
        if (!usearch_search())
        {
LABEL_21:
          unint64_t result = 0;
          *(unsigned char *)(v2 + 96) = 1;
          return result;
        }
        int v4 = v15;
        *(_DWORD *)(v2 + 80) = v15 + 1;
        if (!v4 || *(unsigned char *)(v2 + 95)) {
          break;
        }
        uint64_t v5 = *(UText **)(v2 + 72);
        if (!v5)
        {
          UErrorCode status = U_ZERO_ERROR;
          uint64_t v5 = utext_openUChars(0, *(const UChar **)(v2 + 56), *(int *)(v2 + 64), &status);
          *(void *)(v2 + 72) = v5;
          if (status > U_ZERO_ERROR || !v5) {
            goto LABEL_21;
          }
          int v4 = v15;
        }
        utext_setNativeIndex(v5, v4);
        utext_moveIndex32(*(UText **)(v2 + 72), -1);
        UChar32 v6 = utext_next32(*(UText **)(v2 + 72));
        int v7 = u_charType(v6);
        UChar32 v8 = utext_next32(*(UText **)(v2 + 72));
        int v9 = u_charType(v8);
        UChar32 v10 = utext_next32(*(UText **)(v2 + 72));
        int v11 = u_charType(v10);
        if (((1 << v7) & 0x7000) != 0) {
          break;
        }
        if (((1 << v7) & 0x3E) != 0)
        {
          if (((1 << v9) & 0x3E) == 0 || v9 == 1 && (v7 != 1 || v11 == 2)) {
            break;
          }
        }
        else if (v7 != v9)
        {
          break;
        }
        int v15 = -1;
        if (status > U_ZERO_ERROR) {
          goto LABEL_21;
        }
      }
      uint64_t v12 = v14 - (uint64_t)v15;
      *a2 = v15;
      a2[1] = v12;
      return 1;
    }
  }
  return result;
}

uint64_t icu_copy_query_terms(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v7 = CIRetainIndexingTokenizer(3u);
  CITokenizerGetQueryTokens((uint64_t)v7, a1, a2);
  CIReleaseIndexingTokenizer((uint64_t)v7);
  *a4 = 0;
  return 0;
}

void *copyQueryTokensCallback(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  bzero(__s1, 0x414uLL);
  uint64_t v11 = 0;
  unint64_t result = (void *)utf8_encodestr(a1, 2 * a2, __s1, &v11, 1043, 47, 4);
  if (!result)
  {
    unint64_t result = strdup(__s1);
    if (result)
    {
      int v7 = result;
      int v9 = *(_DWORD *)(a3 + 8);
      int v8 = *(_DWORD *)(a3 + 12);
      unint64_t result = *(void **)a3;
      if (v8 >= v9)
      {
        int v10 = 2 * v9;
        if (!v9) {
          int v10 = 16;
        }
        *(_DWORD *)(a3 + 8) = v10;
        unint64_t result = malloc_type_realloc(result, 8 * v10, 0x10040436913F5uLL);
        *(void *)a3 = result;
        int v8 = *(_DWORD *)(a3 + 12);
      }
      *(_DWORD *)(a3 + 12) = v8 + 1;
      *((void *)result + v8) = v7;
    }
  }
  return result;
}

unsigned char *CreateUTF8StringDecomposed(const __CFString *a1, unsigned char *a2, uint64_t a3)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  v18[0] = 0;
  if (!a1) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID()) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CharactersPtr = CFStringGetCharactersPtr(a1);
  if (!CharactersPtr)
  {
    uint64_t v12 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
    if (v12)
    {
      int v10 = v12;
      v19.CFIndex location = 0;
      v19.CFIndex length = Length;
      CFStringGetCharacters(a1, v19, v12);
      uint64_t v11 = v10;
      goto LABEL_7;
    }
    return 0;
  }
  int v10 = (unsigned __int16 *)CharactersPtr;
  uint64_t v11 = 0;
LABEL_7:
  uint64_t v13 = a2;
  if (MaximumSizeForEncoding >= a3)
  {
    a3 = MaximumSizeForEncoding + 1;
    uint64_t v13 = malloc_type_malloc(MaximumSizeForEncoding + 1, 0x62677F11uLL);
  }
  if (v13)
  {
    int v14 = utf8_encodestr(v10, 2 * Length, v13, v18, a3, 47, 4);
    if (v14) {
      int v15 = v13;
    }
    else {
      int v15 = 0;
    }
    if (v14) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v13;
    }
  }
  else
  {
    int v15 = 0;
    uint64_t v16 = 0;
  }
  free(v11);
  if (v15 && v15 != a2) {
    free(v15);
  }
  return v16;
}

char *icu_word_matcher_create(uint64_t a1, const __CFString *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  uint64_t v5 = icu_copy_query_terms(a1, (uint64_t)a2, 0, &v15);
  if (!v5) {
    return 0;
  }
  CFTypeID v6 = (const char **)v5;
  LODWORD(v7) = v15;
  int v8 = (char *)malloc_type_calloc(1uLL, 8 * v15 + 32, 0xDEAA9FD8uLL);
  atomic_store(1u, (unsigned int *)v8 + 1);
  *(_DWORD *)int v8 = 268435461;
  *((_DWORD *)v8 + 6) = a3;
  bzero(v16, 0x400uLL);
  UTF8StringDecomposed = CreateUTF8StringDecomposed(a2, v16, 1024);
  if ((int)v7 >= 1)
  {
    int v10 = UTF8StringDecomposed;
    uint64_t v7 = v7;
    uint64_t v11 = (unsigned __int8 **)(v8 + 32);
    uint64_t v12 = v6;
    do
    {
      *v11++ = icu_search_context_create(*v12, v10, a3, 0);
      uint64_t v13 = (char *)*v12++;
      free(v13);
      ++*((void *)v8 + 1);
      --v7;
    }
    while (v7);
  }
  free(v6);
  return v8;
}

uint64_t icu_word_matcher_count(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t icu_word_matcher_matches(uint64_t a1, const char *a2, void *a3)
{
  char v3 = 0;
  v18[1] = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    unint64_t v7 = *(void *)(a1 + 8);
    if ((*(unsigned char *)(a1 + 24) & 0x40) != 0)
    {
      if (v7)
      {
        unint64_t v13 = 0;
        uint64_t v9 = 0;
        do
        {
          uint64_t v14 = *(void *)(a1 + 32 + 8 * v13);
          uint64_t v17 = 0;
          v18[0] = 0;
          int v15 = icu_search_match(v14, a2, v18, &v17, 0);
          unint64_t v7 = *(void *)(a1 + 8);
          if (!v15) {
            break;
          }
          v9 |= 1 << v13++;
        }
        while (v13 < v7);
      }
      else
      {
        uint64_t v9 = 0;
        unint64_t v13 = 0;
      }
      char v3 = v13 >= v7;
    }
    else if (v7)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 0;
      char v3 = 0;
      do
      {
        uint64_t v10 = *(void *)(a1 + 32 + 8 * v8);
        uint64_t v17 = 0;
        v18[0] = 0;
        int v11 = icu_search_match(v10, a2, v18, &v17, 0);
        uint64_t v12 = 1 << v8;
        v3 |= v11;
        if (!v11) {
          uint64_t v12 = 0;
        }
        v9 |= v12;
        ++v8;
      }
      while (v8 < *(void *)(a1 + 8));
    }
    else
    {
      char v3 = 0;
      uint64_t v9 = 0;
    }
    if (a3) {
      *a3 = v9;
    }
  }
  return v3 & 1;
}

uint64_t icu_word_matcher_matches_string(uint64_t a1, const __CFString *a2, void *a3)
{
  uint64_t v3 = 0;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      bzero(v9, 0x400uLL);
      UTF8StringDecomposed = CreateUTF8StringDecomposed(a2, v9, 1024);
      uint64_t v3 = icu_word_matcher_matches(a1, UTF8StringDecomposed, a3);
      if (UTF8StringDecomposed != v9) {
        free(UTF8StringDecomposed);
      }
    }
  }
  return v3;
}

BOOL resolve_transcriptions_for_locale(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CIStringTokenizerResolveTranscriptions(a1, a2, a3, a4, (void *)*MEMORY[0x1E4F143B8]);
}

uint64_t openCacheFile(uint64_t a1, int a2, int a3, int a4)
{
  v10[1] = *(char **)MEMORY[0x1E4F143B8];
  if (a1) {
    uint64_t v5 = *(const char **)(a1 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  v10[0] = 0;
  asprintf(v10, "icu_rules_%s_%d_%d", v5, a2, a3);
  if (a4) {
    int v6 = 1538;
  }
  else {
    int v6 = 0;
  }
  if (a4) {
    int v7 = 536872450;
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = si_openat_protected(sCacheDirFd, v10[0], v6, 384, 4);
  openat(sCacheDirFd, v10[0], v7, 384);
  if ((v8 & 0x80000000) == 0 && fcntl(v8, 63) != 4 && fcntl(v8, 64, 4))
  {
    close(v8);
    unlinkat(sCacheDirFd, v10[0], 0);
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  free(v10[0]);
  return v8;
}

unsigned char *_icu_rules_base_create(malloc_zone_t *a1, int a2)
{
  if (a2 >= 257) {
    _icu_rules_base_create_cold_1(a2);
  }
  unint64_t result = malloc_type_zone_calloc(a1, 1uLL, 8 * a2 + 48, 0x29EC4FE6uLL);
  if (a2 == 256) {
    char v4 = -1;
  }
  else {
    char v4 = a2;
  }
  result[41] = v4;
  return result;
}

uint64_t __icu_rules_add_collator_block_invoke(uint64_t result, int a2, const UChar *a3, int32_t a4, const UChar *a5, int32_t a6)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  if (a2 == 3) {
    return result;
  }
  uint64_t v10 = result;
  memset(v104, 0, 32);
  memset(v103, 0, sizeof(v103));
  uint64_t v94 = 0;
  UErrorCode pErrorCode = U_ZERO_ERROR;
  strToUTF8(v104, 32, (int32_t *)&v94 + 1, a3, a4, &pErrorCode);
  unint64_t result = (uint64_t)strToUTF8(v103, 32, (int32_t *)&v94, a5, a6, &pErrorCode);
  if (v104[0] < 0)
  {
    unint64_t v11 = (unint64_t)v104[0] >> 4;
    uint64_t v12 = utf8_byte_length_utf8_len_table_2[v11];
    if (HIDWORD(v94) == v12)
    {
      int v13 = (utf8_to_code_point_utf8_first_char_mask_1[v12] & v104[0]);
      if ((~(_BYTE)v11 & 0xC) != 0) {
        goto LABEL_11;
      }
      uint64_t v14 = v12 <= 2 ? 2 : utf8_byte_length_utf8_len_table_2[v11];
      uint64_t v15 = v14 - 1;
      uint64_t v16 = &v104[1];
      do
      {
        char v17 = *v16++;
        int v13 = v17 & 0x3F | (v13 << 6);
        --v15;
      }
      while (v15);
      if (v13 < 0x10000)
      {
LABEL_11:
        if ((v13 - 12441) >= 4 && (v13 - 65438) >= 2)
        {
          unint64_t result = unicode_combinable((unsigned __int16)v13);
          if (!result) {
            goto LABEL_38;
          }
        }
LABEL_15:
        int v19 = v94;
        if (v103[0] < 0)
        {
          uint64_t v20 = v103[0] >> 4;
          unsigned int v21 = utf8_byte_length_utf8_len_table_2[v20];
          if (v94 == v21)
          {
            int v22 = (utf8_to_code_point_utf8_first_char_mask_1[utf8_byte_length_utf8_len_table_2[v20]] & v103[0]);
            if ((~(_BYTE)v20 & 0xC) != 0) {
              goto LABEL_24;
            }
            uint64_t v23 = v21 <= 2 ? 2 : utf8_byte_length_utf8_len_table_2[v20];
            uint64_t v24 = v23 - 1;
            uint64_t v25 = &v103[1];
            do
            {
              char v26 = *v25++;
              int v22 = v26 & 0x3F | (v22 << 6);
              --v24;
            }
            while (v24);
            if (v22 < 0x10000)
            {
LABEL_24:
              if ((v22 - 12441) < 4 || (v22 - 65438) < 2) {
                return result;
              }
              unint64_t result = unicode_combinable((unsigned __int16)v22);
              if (result) {
                return result;
              }
              int v19 = v94;
            }
            else
            {
              unsigned int v42 = v22 - 917760;
              unsigned int v43 = v22 - 127995;
              BOOL v44 = v42 >= 0xF0 && v43 >= 5;
              int v19 = v21;
              if (!v44) {
                return result;
              }
            }
          }
        }
        unint64_t result = __memcpy_chk();
        HIDWORD(v94) = v19;
        goto LABEL_64;
      }
      unsigned int v28 = v13 - 917760;
      unsigned int v29 = v13 - 127995;
      if (v28 < 0xF0 || v29 <= 4) {
        goto LABEL_15;
      }
    }
  }
LABEL_38:
  int v19 = v94;
  if (v103[0] < 0)
  {
    uint64_t v31 = v103[0] >> 4;
    unsigned int v32 = utf8_byte_length_utf8_len_table_2[v31];
    if (v94 == v32)
    {
      int v33 = (utf8_to_code_point_utf8_first_char_mask_1[utf8_byte_length_utf8_len_table_2[v31]] & v103[0]);
      if ((~(_BYTE)v31 & 0xC) != 0) {
        goto LABEL_47;
      }
      uint64_t v34 = v32 <= 2 ? 2 : utf8_byte_length_utf8_len_table_2[v31];
      uint64_t v35 = v34 - 1;
      int v36 = &v103[1];
      do
      {
        char v37 = *v36++;
        int v33 = v37 & 0x3F | (v33 << 6);
        --v35;
      }
      while (v35);
      if (v33 < 0x10000)
      {
LABEL_47:
        if ((v33 - 12441) >= 4 && (v33 - 65438) >= 2)
        {
          unint64_t result = unicode_combinable((unsigned __int16)v33);
          int v19 = v94;
          if (!result) {
            goto LABEL_64;
          }
        }
      }
      else
      {
        unsigned int v39 = v33 - 917760;
        unsigned int v40 = v33 - 127995;
        BOOL v41 = v39 >= 0xF0 && v40 > 4;
        int v19 = v32;
        if (v41) {
          goto LABEL_64;
        }
      }
      unint64_t result = __memcpy_chk();
      int v19 = HIDWORD(v94);
      LODWORD(v94) = HIDWORD(v94);
    }
  }
LABEL_64:
  int32_t v45 = HIDWORD(v94);
  if (SHIDWORD(v94) < 2 || v19 < 2) {
    goto LABEL_76;
  }
  int v46 = v104;
  uint64_t v47 = HIDWORD(v94);
  while (1)
  {
    int v48 = *v46++;
    if (v48 < 0) {
      break;
    }
    if (!--v47) {
      goto LABEL_71;
    }
  }
  if (v47) {
    goto LABEL_76;
  }
LABEL_71:
  uint64_t v49 = v19;
  uint64_t v50 = v103;
  do
  {
    int v51 = *v50++;
    if (v51 < 0) {
      break;
    }
    --v49;
  }
  while (v49);
  if (v49)
  {
LABEL_76:
    bzero(__s1, 0x400uLL);
    int v92 = 0;
    icu_build_pattern_key(*(void *)(v10 + 32), v104, v45, __s1, 1024, &v92);
    bzero(__s2, 0x400uLL);
    int v91 = 0;
    unint64_t result = (uint64_t)icu_build_pattern_key(*(void *)(v10 + 32), v103, v94, __s2, 1024, &v91);
    size_t v52 = v91;
    if (v91 == v92)
    {
      unint64_t result = memcmp(__s1, __s2, v91);
      if (!result)
      {
        icu_rule_insert(*(int8x8_t **)(v10 + 40), *(malloc_zone_t **)(v10 + 48), __s1, v52, v104, HIDWORD(v94));
        unint64_t result = (uint64_t)icu_rule_insert(*(int8x8_t **)(v10 + 40), *(malloc_zone_t **)(v10 + 48), __s1, v52, v103, v94);
        uint64_t v53 = *(const char **)(v10 + 56);
        if (v53)
        {
          long long v100 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          *(_OWORD *)dest = 0u;
          memset(v96, 0, sizeof(v96));
          unsigned int v90 = 0;
          memset(v95, 0, sizeof(v95));
          int32_t v54 = u_strToLower(dest, 32, a3, a4, v53, &pErrorCode);
          strToUTF8((char *)v96, 32, (int32_t *)&v90, dest, v54, &pErrorCode);
          icu_build_pattern_key(*(void *)(v10 + 32), (const char *)v96, v90, __s2, 1024, &v91);
          if (v91 == v52 && !memcmp(__s1, __s2, v52)) {
            icu_rule_insert(*(int8x8_t **)(v10 + 40), *(malloc_zone_t **)(v10 + 48), __s1, v52, (char *)v96, v90);
          }
          uint64_t v55 = LOBYTE(v96[0]);
          if (LOBYTE(v96[0]))
          {
            unsigned int v56 = 0;
            uint64_t v57 = utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)LOBYTE(v96[0]) >> 4];
            do
            {
              ++v56;
              int v58 = *((unsigned __int8 *)v96 + v57);
              v57 += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)LOBYTE(v96[0]) >> 4];
            }
            while (v58);
            if (v56 >= 2)
            {
              if ((v96[0] & 0x80) != 0)
              {
                uint64_t v59 = utf8_byte_length_utf8_len_table_2[(unint64_t)LOBYTE(v96[0]) >> 4];
                int v60 = (utf8_to_code_point_utf8_first_char_mask_1[v59] & v96[0]);
                if ((~((unint64_t)LOBYTE(v96[0]) >> 4) & 0xC) != 0)
                {
                  uint64_t v55 = (utf8_to_code_point_utf8_first_char_mask_1[v59] & v96[0]);
                }
                else
                {
                  if (v59 <= 2) {
                    uint64_t v61 = 2;
                  }
                  else {
                    uint64_t v61 = utf8_byte_length_utf8_len_table_2[(unint64_t)LOBYTE(v96[0]) >> 4];
                  }
                  uint64_t v62 = v61 - 1;
                  unint64_t v63 = (char *)v96 + 1;
                  do
                  {
                    char v64 = *v63++;
                    uint64_t v55 = v64 & 0x3F | (v60 << 6);
                    int v60 = v64 & 0x3F | (v60 << 6);
                    --v62;
                  }
                  while (v62);
                }
              }
              unsigned int v65 = MEMORY[0x1A62474B0](v55);
              if (v65 != v55)
              {
                uint64_t v66 = utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)LOBYTE(v96[0]) >> 4];
                unsigned int v67 = codepoint_to_utf8(v65, v95);
                unsigned int v68 = (char *)v96 + v66;
                size_t v69 = (int)v90 - v66;
                memcpy((char *)v95 + v67, v68, v69);
                uint64_t v70 = v69 + v67;
                icu_build_pattern_key(*(void *)(v10 + 32), (const char *)v95, v70, __s2, 1024, &v91);
                if (v91 == v52 && !memcmp(__s1, __s2, v52)) {
                  icu_rule_insert(*(int8x8_t **)(v10 + 40), *(malloc_zone_t **)(v10 + 48), __s1, v52, (char *)v95, v70);
                }
              }
            }
          }
          int32_t v71 = u_strToUpper(dest, 32, a3, a4, *(const char **)(v10 + 56), &pErrorCode);
          strToUTF8((char *)v96, 32, (int32_t *)&v90, dest, v71, &pErrorCode);
          icu_build_pattern_key(*(void *)(v10 + 32), (const char *)v96, v90, __s2, 1024, &v91);
          if (v91 == v52 && !memcmp(__s1, __s2, v52)) {
            icu_rule_insert(*(int8x8_t **)(v10 + 40), *(malloc_zone_t **)(v10 + 48), __s1, v52, (char *)v96, v90);
          }
          uint64_t v72 = LOBYTE(v96[0]);
          if (LOBYTE(v96[0]))
          {
            unsigned int v73 = 0;
            uint64_t v74 = utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)LOBYTE(v96[0]) >> 4];
            do
            {
              ++v73;
              int v75 = *((unsigned __int8 *)v96 + v74);
              v74 += utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)LOBYTE(v96[0]) >> 4];
            }
            while (v75);
            if (v73 >= 2)
            {
              if ((v96[0] & 0x80) != 0)
              {
                uint64_t v76 = utf8_byte_length_utf8_len_table_2[(unint64_t)LOBYTE(v96[0]) >> 4];
                int v77 = (utf8_to_code_point_utf8_first_char_mask_1[v76] & v96[0]);
                if ((~((unint64_t)LOBYTE(v96[0]) >> 4) & 0xC) != 0)
                {
                  uint64_t v72 = (utf8_to_code_point_utf8_first_char_mask_1[v76] & v96[0]);
                }
                else
                {
                  if (v76 <= 2) {
                    uint64_t v78 = 2;
                  }
                  else {
                    uint64_t v78 = utf8_byte_length_utf8_len_table_2[(unint64_t)LOBYTE(v96[0]) >> 4];
                  }
                  uint64_t v79 = v78 - 1;
                  uint64_t v80 = (char *)v96 + 1;
                  do
                  {
                    char v81 = *v80++;
                    uint64_t v72 = v81 & 0x3F | (v77 << 6);
                    int v77 = v81 & 0x3F | (v77 << 6);
                    --v79;
                  }
                  while (v79);
                }
              }
              unsigned int v82 = MEMORY[0x1A62474A0](v72);
              if (v82 != v72)
              {
                uint64_t v83 = utf8_byte_length_noerror_utf8_len_table_2[(unint64_t)LOBYTE(v96[0]) >> 4];
                unsigned int v84 = codepoint_to_utf8(v82, v95);
                int v85 = (char *)v96 + v83;
                size_t v86 = (int)v90 - v83;
                memcpy((char *)v95 + v84, v85, v86);
                uint64_t v87 = v86 + v84;
                icu_build_pattern_key(*(void *)(v10 + 32), (const char *)v95, v87, __s2, 1024, &v91);
                if (v91 == v52 && !memcmp(__s1, __s2, v52)) {
                  icu_rule_insert(*(int8x8_t **)(v10 + 40), *(malloc_zone_t **)(v10 + 48), __s1, v52, (char *)v95, v87);
                }
              }
            }
          }
          int32_t v88 = u_strToLower(dest, 32, a5, a6, *(const char **)(v10 + 56), &pErrorCode);
          strToUTF8((char *)v96, 32, (int32_t *)&v90, dest, v88, &pErrorCode);
          icu_build_pattern_key(*(void *)(v10 + 32), (const char *)v96, v90, __s2, 1024, &v91);
          if (v91 == v52 && !memcmp(__s1, __s2, v52)) {
            icu_rule_insert(*(int8x8_t **)(v10 + 40), *(malloc_zone_t **)(v10 + 48), __s1, v52, (char *)v96, v90);
          }
          int32_t v89 = u_strToUpper(dest, 32, a5, a6, *(const char **)(v10 + 56), &pErrorCode);
          strToUTF8((char *)v96, 32, (int32_t *)&v90, dest, v89, &pErrorCode);
          unint64_t result = (uint64_t)icu_build_pattern_key(*(void *)(v10 + 32), (const char *)v96, v90, __s2, 1024, &v91);
          if (v91 == v52)
          {
            unint64_t result = memcmp(__s1, __s2, v52);
            if (!result) {
              return (uint64_t)icu_rule_insert(*(int8x8_t **)(v10 + 40), *(malloc_zone_t **)(v10 + 48), __s1, v52, (char *)v96, v90);
            }
          }
        }
      }
    }
  }
  return result;
}

int8x8_t *icu_rule_insert(int8x8_t *a1, malloc_zone_t *a2, unsigned __int8 *a3, int a4, char *a5, uint64_t a6)
{
  uint64_t v9 = a1;
  if (a4)
  {
    char v10 = a4;
    unint64_t v12 = *a3;
    if ((*(unsigned __int32 *)((char *)a1[1].i32 + ((v12 >> 3) & 0x1C)) >> v12))
    {
      uint64_t v13 = 0;
      uint64_t v14 = a1 + 1;
      unint64_t v15 = v12 >> 6;
      if ((v12 >> 6) != 1)
      {
        if (v15 != 2)
        {
          if (v15 != 3)
          {
LABEL_9:
            uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v14[v15] & ~(-1 << v12)));
            v19.i16[0] = vaddlv_u8(v19);
            uint64_t v20 = v13 + v19.u32[0];
            unsigned int v21 = (unsigned char *)a1[v20 + 6];
LABEL_29:
            v9[v20 + 6] = (int8x8_t)icu_rule_insert(v21, a2, a3 + 1, (v10 - 1), a5, a6);
            return v9;
          }
          uint8x8_t v16 = (uint8x8_t)vcnt_s8(a1[3]);
          v16.i16[0] = vaddlv_u8(v16);
          uint64_t v13 = v16.u32[0];
        }
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(a1[2]);
        v17.i16[0] = vaddlv_u8(v17);
        v13 += v17.u32[0];
      }
      uint8x8_t v18 = (uint8x8_t)vcnt_s8(*v14);
      v18.i16[0] = vaddlv_u8(v18);
      v13 += v18.u32[0];
      goto LABEL_9;
    }
    unsigned int v22 = a1[5].u8[1];
    if (a1[5].u8[0] + 1 >= v22)
    {
      if (v22 == 255)
      {
        int v25 = *__error();
        char v26 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          icu_rule_insert_cold_2((unsigned __int8 *)&v9[5], (unsigned __int8 *)&v9[5] + 1, v26);
        }
        *__error() = v25;
      }
      else
      {
        uint64_t v23 = _icu_rules_base_create(a2, 2 * v22);
        v23[40] = v9[5].i8[0];
        *(int8x8_t *)uint64_t v23 = *v9;
        long long v24 = *(_OWORD *)v9[1].i8;
        *(_OWORD *)(v23 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)v9[3].i8;
        *(_OWORD *)(v23 + 8) = v24;
        memcpy(v23 + 48, &v9[6], 8 * v9[5].u8[0]);
        free(v9);
        uint64_t v9 = (int8x8_t *)v23;
      }
    }
    __int32 v27 = 0;
    unint64_t v28 = *a3;
    unsigned int v29 = v9[5].u8[0];
    char v30 = v9 + 1;
    *(__int32 *)((char *)v9[1].i32 + ((v28 >> 3) & 0x1C)) |= 1 << v28;
    unint64_t v31 = v28 >> 6;
    if ((v28 >> 6) != 1)
    {
      if (v31 != 2)
      {
        if (v31 != 3)
        {
LABEL_24:
          uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v30[v31] & ~(-1 << v28)));
          v35.i16[0] = vaddlv_u8(v35);
          uint64_t v20 = (v27 + v35.i32[0]);
          if (v20 < v29)
          {
            int v36 = &v9[v29 + 6];
            char v37 = &v9[v29 + 5];
            unsigned int v38 = v29;
            do
            {
              int8x8_t v39 = *v37--;
              *v36-- = v39;
              --v38;
            }
            while (v20 < v38);
          }
          unsigned __int8 v40 = v29 + 1;
          v9[5].i8[0] = v40;
          unsigned int v41 = v9[5].u8[1];
          if (v41 < v40)
          {
            __message_assert("%s:%u: failed assertion '%s' %s size: %d count:%d", "icu_utils.c", 691, "b->size>=b->count", "", v41, v40);
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          unsigned int v21 = malloc_type_zone_calloc(a2, 1uLL, 0x38uLL, 0x29EC4FE6uLL);
          v21[41] = 1;
          v9[v20 + 6] = (int8x8_t)v21;
          goto LABEL_29;
        }
        uint8x8_t v32 = (uint8x8_t)vcnt_s8(v9[3]);
        v32.i16[0] = vaddlv_u8(v32);
        __int32 v27 = v32.i32[0];
      }
      uint8x8_t v33 = (uint8x8_t)vcnt_s8(v9[2]);
      v33.i16[0] = vaddlv_u8(v33);
      v27 += v33.i32[0];
    }
    uint8x8_t v34 = (uint8x8_t)vcnt_s8(*v30);
    v34.i16[0] = vaddlv_u8(v34);
    v27 += v34.i32[0];
    goto LABEL_24;
  }
  if ((int)a6 >= 254) {
    icu_rule_insert_cold_1(a6);
  }
  *a1 = (int8x8_t)term_expansions_insert(*(unsigned int **)a1, a2, a5, a6);
  return v9;
}

uint64_t codepoint_to_utf8(unsigned int a1, unsigned char *a2)
{
  if ((int)a1 > 127)
  {
    if (a1 > 0x7FF)
    {
      if (HIWORD(a1))
      {
        if (HIWORD(a1) > 0x10u) {
          return 0;
        }
        a2[3] = a1 & 0x3F | 0x80;
        a2[2] = (a1 >> 6) & 0x3F | 0x80;
        a2[1] = (a1 >> 12) & 0x3F | 0x80;
        a1 = (a1 >> 18) | 0xFFFFFFF0;
        uint64_t v2 = 4;
      }
      else
      {
        a2[2] = a1 & 0x3F | 0x80;
        a2[1] = (a1 >> 6) & 0x3F | 0x80;
        a1 = (a1 >> 12) | 0xFFFFFFE0;
        uint64_t v2 = 3;
      }
    }
    else
    {
      a2[1] = a1 & 0x3F | 0x80;
      a1 = (a1 >> 6) | 0xFFFFFFC0;
      uint64_t v2 = 2;
    }
  }
  else
  {
    uint64_t v2 = 1;
  }
  *a2 = a1;
  return v2;
}

int8x8_t *icu_rules_add_expansions(int8x8_t *result, malloc_zone_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  int v17 = 0;
  if (a5)
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    memset(v20, 0, sizeof(v20));
    do
    {
      unsigned int v11 = *(_DWORD *)(a4 + 4 * v10);
      if ((int)v11 > 127)
      {
        if (v11 > 0x7FF)
        {
          if (HIWORD(v11))
          {
            if (HIWORD(v11) > 0x10u)
            {
              int32_t v12 = 0;
              goto LABEL_12;
            }
            BYTE3(v20[0]) = v11 & 0x3F | 0x80;
            BYTE2(v20[0]) = (v11 >> 6) & 0x3F | 0x80;
            BYTE1(v20[0]) = (v11 >> 12) & 0x3F | 0x80;
            unsigned int v11 = (v11 >> 18) | 0xFFFFFFF0;
            int32_t v12 = 4;
          }
          else
          {
            BYTE2(v20[0]) = v11 & 0x3F | 0x80;
            BYTE1(v20[0]) = (v11 >> 6) & 0x3F | 0x80;
            unsigned int v11 = (v11 >> 12) | 0xFFFFFFE0;
            int32_t v12 = 3;
          }
        }
        else
        {
          BYTE1(v20[0]) = v11 & 0x3F | 0x80;
          unsigned int v11 = (v11 >> 6) | 0xFFFFFFC0;
          int32_t v12 = 2;
        }
      }
      else
      {
        int32_t v12 = 1;
      }
      LOBYTE(v20[0]) = v11;
LABEL_12:
      icu_build_pattern_key(a3, (const char *)v20, v12, v18, 32, &v17);
      uint64_t v13 = 0;
      unsigned __int8 v14 = v17;
      do
      {
        unsigned int v15 = *(_DWORD *)(a4 + 4 * v13);
        if ((int)v15 <= 127)
        {
          uint64_t v16 = 1;
LABEL_21:
          LOBYTE(v19[0]) = v15;
          goto LABEL_22;
        }
        if (v15 <= 0x7FF)
        {
          BYTE1(v19[0]) = v15 & 0x3F | 0x80;
          unsigned int v15 = (v15 >> 6) | 0xFFFFFFC0;
          uint64_t v16 = 2;
          goto LABEL_21;
        }
        if (!HIWORD(v15))
        {
          BYTE2(v19[0]) = v15 & 0x3F | 0x80;
          BYTE1(v19[0]) = (v15 >> 6) & 0x3F | 0x80;
          unsigned int v15 = (v15 >> 12) | 0xFFFFFFE0;
          uint64_t v16 = 3;
          goto LABEL_21;
        }
        if (HIWORD(v15) <= 0x10u)
        {
          BYTE3(v19[0]) = v15 & 0x3F | 0x80;
          BYTE2(v19[0]) = (v15 >> 6) & 0x3F | 0x80;
          BYTE1(v19[0]) = (v15 >> 12) & 0x3F | 0x80;
          unsigned int v15 = (v15 >> 18) | 0xFFFFFFF0;
          uint64_t v16 = 4;
          goto LABEL_21;
        }
        uint64_t v16 = 0;
LABEL_22:
        unint64_t result = icu_rule_insert(v9, a2, (unsigned __int8 *)v18, v14, (char *)v19, v16);
        ++v13;
      }
      while (a5 != v13);
      ++v10;
    }
    while (v10 != a5);
  }
  return result;
}

unsigned int *term_expansions_insert(unsigned int *a1, malloc_zone_t *zone, char *__s, int a4)
{
  int v6 = zone;
  if (!zone) {
    int v6 = malloc_default_zone();
  }
  if (a4 == -1) {
    a4 = strlen(__s);
  }
  if (a4 >= 254) {
    term_expansions_insert_cold_1(a4);
  }
  if (!a1)
  {
    a1 = (unsigned int *)malloc_type_zone_malloc(v6, 0x18uLL, 0x1080040216EE090uLL);
    LODWORD(v8) = 0;
    *((void *)a1 + 2) = 0;
    a1[1] = 0;
    a1[2] = 0;
    atomic_store(1u, a1);
LABEL_16:
    *((void *)a1 + 2) = malloc_type_zone_realloc(v6, *((void **)a1 + 2), 8 * (v8 + 1), 0x10040436913F5uLL);
    ++a1[1];
    *(void *)(*((void *)a1 + 2) + 8 * v8) = malloc_type_zone_malloc(v6, a4 + 2, 0x9E603C44uLL);
    **(unsigned char **)(*((void *)a1 + 2) + 8 * v8) = a4;
    memcpy((void *)(*(void *)(*((void *)a1 + 2) + 8 * v8) + 1), __s, a4);
    *(unsigned char *)(*(void *)(*((void *)a1 + 2) + 8 * v8) + a4 + 1) = 0;
    if (a1[1] >= 2)
    {
      if ((a1[2] & 1) == 0 && a4 >= 1)
      {
        int32_t v12 = &__s[a4];
        do
        {
          int v13 = *__s;
          if (v13 < 0)
          {
            uint64_t v14 = utf8_byte_length_utf8_len_table_2[(unint64_t)*__s >> 4];
            int v15 = (utf8_to_code_point_utf8_first_char_mask_1[v14] & *__s);
            if ((~((unint64_t)*__s >> 4) & 0xC) != 0) {
              goto LABEL_28;
            }
            uint64_t v16 = v14 <= 2
                ? 2
                : utf8_byte_length_utf8_len_table_2[(unint64_t)*__s >> 4];
            uint64_t v17 = v16 - 1;
            uint8x8_t v18 = __s + 1;
            do
            {
              char v19 = *v18++;
              int v15 = v19 & 0x3F | (v15 << 6);
              --v17;
            }
            while (v17);
            if (v15 < 0x10000)
            {
LABEL_28:
              BOOL v20 = (v15 - 12441) >= 4 && (v15 - 65438) >= 2;
              if (!v20 || unicode_combinable((unsigned __int16)v15)) {
                goto LABEL_42;
              }
              LOBYTE(v13) = *__s;
            }
            else
            {
              unsigned int v21 = v15 - 917760;
              unsigned int v22 = v15 - 127995;
              if (v21 < 0xF0 || v22 < 5)
              {
LABEL_42:
                a1[2] |= 1u;
                break;
              }
            }
          }
          __s += utf8_byte_length_noerror_utf8_len_table_2[v13 >> 4];
        }
        while (__s < v12);
      }
      qsort_b(*((void **)a1 + 2), a1[1], 8uLL, &__block_literal_global_13);
    }
    return a1;
  }
  uint64_t v8 = a1[1];
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)a1 + 2);
    while (1)
    {
      unsigned int v11 = *(char **)(v10 + 8 * v9);
      if (a4 == *v11 && !memcmp(__s, v11 + 1, a4)) {
        break;
      }
      if (v8 == ++v9) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if (v9 == v8) {
    goto LABEL_16;
  }
  return a1;
}

uint64_t __term_expansions_insert_block_invoke(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v3 = *a2;
  char v4 = *a3;
  unsigned int v7 = *v3;
  uint64_t v5 = v3 + 1;
  size_t v6 = v7;
  unsigned int v10 = *v4;
  uint64_t v8 = v4 + 1;
  size_t v9 = v10;
  BOOL v11 = v6 > v10;
  if (v6 >= v10)
  {
    if (v11)
    {
      LODWORD(result) = memcmp(v5, v8, v9);
      if (result) {
        return result;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return memcmp(v5, v8, v6);
    }
  }
  else
  {
    LODWORD(result) = memcmp(v5, v8, v6);
    if (result <= 1) {
      return 1;
    }
    else {
      return result;
    }
  }
}

uint64_t _icu_rules_base_dump(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = a3;
  unsigned int v7 = (int8x8_t *)result;
  if (a4) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, a2, a3, result);
  }
  int v8 = 0;
  unsigned int v9 = 0;
  unsigned int v10 = v7 + 1;
  do
  {
    if ((((unsigned __int32)v7[1].i32[v9 >> 5] >> v9) & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v11 = 0;
    unsigned int v12 = v9 >> 6;
    if (v9 >> 6 != 1)
    {
      if (v12 != 2)
      {
        if (v12 != 3) {
          goto LABEL_11;
        }
        uint8x8_t v13 = (uint8x8_t)vcnt_s8(v7[3]);
        v13.i16[0] = vaddlv_u8(v13);
        uint64_t v11 = v13.u32[0];
      }
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(v7[2]);
      v14.i16[0] = vaddlv_u8(v14);
      v11 += v14.u32[0];
    }
    uint8x8_t v15 = (uint8x8_t)vcnt_s8(*v10);
    v15.i16[0] = vaddlv_u8(v15);
    v11 += v15.u32[0];
LABEL_11:
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v10[v12] & ~(-1 << v9)));
    v16.i16[0] = vaddlv_u8(v16);
    *(unsigned char *)(a2 + v5) = v9;
    uint64_t result = _icu_rules_base_dump(*(void *)&v7[v16.u32[0] + 6 + v11], a2, v5 + 1, a4);
    if (++v8 == v7[5].u8[0]) {
      return result;
    }
LABEL_12:
    ++v9;
  }
  while (v9 != 256);
  return result;
}

void *__icu_rules_copy_block_invoke(void *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *(void *)(*(void *)(result[4] + 8) + 24) += 48;
  *(void *)(*(void *)(result[4] + 8) + 24) += 8 * *((unsigned __int8 *)a4 + 41);
  uint64_t v4 = *a4;
  if (*a4)
  {
    uint64_t v5 = *(unsigned int *)(v4 + 4);
    if (v5)
    {
      *(void *)(*(void *)(result[5] + 8) + 24) += 24;
      *(void *)(*(void *)(result[5] + 8) + 24) += 8 * v5;
      size_t v6 = *(char ***)(v4 + 16);
      do
      {
        unsigned int v7 = *v6++;
        *(void *)(*(void *)(result[6] + 8) + 24) += (*v7 + 2);
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

void *__icu_rules_copy_block_invoke_2(void *result, uint64_t a2, unsigned int a3, long long *a4)
{
  *(void *)(*(void *)(result[4] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(void *)(*(void *)(result[4] + 8) + 24) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(*(void *)(result[5] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(void *)(*(void *)(result[5] + 8) + 24) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = result[9];
  uint64_t v5 = *(void *)(result[4] + 8);
  uint64_t v6 = *(void *)(v5 + 24);
  *(void *)(v5 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6 + 8 * *((unsigned __int8 *)a4 + 41) + 48;
  if (*(void *)(*(void *)(result[4] + 8) + 24) > *(void *)(*(void *)(result[6] + 8) + 24)) {
    __icu_rules_copy_block_invoke_2_cold_1();
  }
  unsigned int v7 = result;
  int v8 = (_OWORD *)(v4 + v6);
  long long v9 = *a4;
  long long v10 = a4[2];
  v8[1] = a4[1];
  uint64_t v8[2] = v10;
  *int v8 = v9;
  *(void *)(result[10] + 8 * a3) = v4 + v6;
  if (a3)
  {
    uint64_t v11 = 0;
    unsigned int v12 = *(int8x8_t **)(result[10] + 8 * (a3 - 1));
    unint64_t v13 = *(unsigned __int8 *)(a2 + a3 - 1);
    uint8x8_t v14 = v12 + 1;
    unint64_t v15 = v13 >> 6;
    if ((v13 >> 6) != 1)
    {
      if (v15 != 2)
      {
        if (v15 != 3)
        {
LABEL_9:
          uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v14[v15] & ~(-1 << v13)));
          v19.i16[0] = vaddlv_u8(v19);
          v12[v19.u32[0] + 6 + v11] = (int8x8_t)v8;
          goto LABEL_10;
        }
        uint8x8_t v16 = (uint8x8_t)vcnt_s8(v12[3]);
        v16.i16[0] = vaddlv_u8(v16);
        uint64_t v11 = v16.u32[0];
      }
      uint8x8_t v17 = (uint8x8_t)vcnt_s8(v12[2]);
      v17.i16[0] = vaddlv_u8(v17);
      v11 += v17.u32[0];
    }
    uint8x8_t v18 = (uint8x8_t)vcnt_s8(*v14);
    v18.i16[0] = vaddlv_u8(v18);
    v11 += v18.u32[0];
    goto LABEL_9;
  }
LABEL_10:
  *(void *)int v8 = 0;
  BOOL v20 = *(long long **)a4;
  if (*(void *)a4)
  {
    uint64_t v21 = *((unsigned int *)v20 + 1);
    if (v21)
    {
      *(void *)(*(void *)(result[5] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(void *)(*(void *)(result[5] + 8) + 24) + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v22 = *(void *)(result[5] + 8);
      uint64_t v23 = *(void *)(v22 + 24);
      *(void *)(v22 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v23 + 24;
      *(void *)(*(void *)(result[5] + 8) + 24) += 8 * v21;
      if (*(void *)(*(void *)(result[5] + 8) + 24) > *(void *)(*(void *)(result[7] + 8) + 24)
                                                            + *(void *)(*(void *)(result[6] + 8) + 24))
        __icu_rules_copy_block_invoke_2_cold_2();
      uint64_t v24 = result[9] + v23;
      long long v25 = *v20;
      *(void *)(v24 + 16) = *((void *)v20 + 2);
      *(_OWORD *)uint64_t v24 = v25;
      atomic_store(0xFFFFFFFF, (unsigned int *)v24);
      uint64_t v26 = result[9] + v23 + 24;
      *(void *)(v24 + 16) = v26;
      if (*(_DWORD *)(v24 + 4))
      {
        unint64_t v27 = 0;
        do
        {
          int v28 = **(char **)(*((void *)v20 + 2) + 8 * v27);
          size_t v29 = (v28 + 2);
          *(void *)(v26 + 8 * v27) = v7[9] + *(void *)(*(void *)(v7[8] + 8) + 24);
          *(void *)(*(void *)(v7[8] + 8) + 24) += v29;
          if (*(void *)(*(void *)(v7[8] + 8) + 24) > v7[11]) {
            __icu_rules_copy_block_invoke_2_cold_3();
          }
          uint64_t result = memcpy(*(void **)(*(void *)(v24 + 16) + 8 * v27), *(const void **)(*((void *)v20 + 2) + 8 * v27), v29);
          uint64_t v26 = *(void *)(v24 + 16);
          if (*(unsigned char *)(*(void *)(v26 + 8 * v27) + (v28 + 1))) {
            __icu_rules_copy_block_invoke_2_cold_4();
          }
          ++v27;
        }
        while (v27 < *(unsigned int *)(v24 + 4));
      }
      *(void *)int v8 = v24;
    }
  }
  return result;
}

uint64_t fd_setDir(uint64_t a1, int *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *a2 = -1;
  memset(&v5, 0, sizeof(v5));
  if (!fstat(a1, &v5))
  {
    *a2 = open(".", 4);
    if (!MEMORY[0x1A62471B0](a1)) {
      return 1;
    }
    if ((*a2 & 0x80000000) == 0)
    {
      close(*a2);
      uint64_t result = 0;
      *a2 = -1;
      return result;
    }
  }
  return 0;
}

uint64_t fd_resetDir(int a1)
{
  uint64_t result = MEMORY[0x1A62471B0]();
  if ((a1 & 0x80000000) == 0)
  {
    return close(a1);
  }
  return result;
}

uint64_t fd_msync(void *a1, size_t a2, int a3, int a4)
{
  if (a4) {
    fd_system_status_stall_if_busy();
  }

  return msync(a1, a2, a3);
}

uint64_t ci_preallocate(int a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  if (gDisablePreallocate == 1)
  {
    *__error() = 45;
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = a2;
  v7[0] = 0x300000002;
  v7[1] = 0;
  unint64_t v7[2] = a2;
  v7[3] = 0;
  uint64_t result = fcntl(a1, 42, v7);
  if (result == -1)
  {
    if (*__error() == 45) {
      return 0xFFFFFFFFLL;
    }
    while (v3 >= 419430401)
    {
      long long v5 = xmmword_1A33A4108;
      long long v6 = unk_1A33A4118;
      v3 -= 419430400;
      if (fcntl(a1, 42, &v5) == -1) {
        return 0xFFFFFFFFLL;
      }
    }
    long long v5 = 0x300000004uLL;
    long long v6 = (unint64_t)v3;
    uint64_t result = fcntl(a1, 42, &v5);
    if (result == -1) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t prot_error_check()
{
  if (!g_prot_error_callback) {
    return 0;
  }
  uint64_t v0 = *(uint64_t (**)(void))(g_prot_error_callback + 16);

  return v0();
}

uint64_t prot_fsync(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    while (1)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t v4 = fcntl(a1, 85);
      if (v4 != -1)
      {
        uint64_t v5 = v4;
        goto LABEL_17;
      }
      if (*__error() == 25 || *__error() == 45)
      {
        *__error() = 0;
        uint64_t v5 = fcntl(a1, 51);
      }
      else
      {
        uint64_t v5 = 0xFFFFFFFFLL;
      }
      if (v5 != -1) {
        break;
      }
      uint64_t v6 = g_prot_error_callback;
      if (!g_prot_error_callback) {
        break;
      }
      unsigned int v7 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v6 + 16))(v6, a1, *v7, 2) & 1) == 0) {
        goto LABEL_13;
      }
    }
    if (v5 == -1) {
      goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    while (1)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t v5 = fsync(a1);
      if (v5 != -1) {
        break;
      }
      uint64_t v8 = g_prot_error_callback;
      if (!g_prot_error_callback) {
        break;
      }
      long long v9 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v8 + 16))(v8, a1, *v9, 3) & 1) == 0)
      {
        uint64_t v5 = 0xFFFFFFFFLL;
        break;
      }
    }
  }
LABEL_17:
  int v10 = *__error();
  double v11 = CFAbsoluteTimeGetCurrent();
  bzero(v23, 0x400uLL);
  int v12 = *__error();
  unint64_t v13 = _SILogForLogForCategory(0);
  os_log_type_t v14 = 2 * (gSILogLevels < 4);
  if (os_log_type_enabled(v13, v14))
  {
    double v15 = v11 - Current;
    uint8x8_t v16 = faccurate_realpath(a1, v23);
    uint8x8_t v17 = "";
    if (v16) {
      uint8x8_t v17 = v16;
    }
    int v19 = 134218242;
    double v20 = v15;
    __int16 v21 = 2080;
    uint64_t v22 = v17;
    _os_log_impl(&dword_1A334F000, v13, v14, "fsync time %f - %s\n", (uint8_t *)&v19, 0x16u);
  }
  *__error() = v12;
  *__error() = v10;
  return v5;
}

ssize_t prot_pread(uint64_t __fd, void *__buf, size_t __nbyte, off_t a4)
{
  do
  {
    ssize_t v8 = pread(__fd, __buf, __nbyte, a4);
    if (v8 != -1) {
      break;
    }
    uint64_t v9 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    int v10 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v9 + 16))(v9, __fd, *v10, 4) & 1) != 0);
  return v8;
}

uint64_t prot_pwrite(uint64_t __fd, char *__buf, size_t __nbyte, off_t a4)
{
  uint64_t v8 = 0;
  do
  {
    while (1)
    {
      unint64_t v9 = pwrite(__fd, __buf, __nbyte, a4);
      if ((v9 & 0x8000000000000000) != 0) {
        break;
      }
      v8 += v9;
      BOOL v12 = __nbyte > v9;
      __nbyte -= v9;
      if (!v12) {
        return v8;
      }
      __buf += v9;
      a4 += v9;
    }
    uint64_t v10 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    double v11 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v10 + 16))(v10, __fd, *v11, 5) & 1) != 0);
  return -1;
}

uint64_t prot_pwrite_guarded(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = 0;
  do
  {
    while (1)
    {
      unint64_t v10 = guarded_pwrite_np();
      if ((v10 & 0x8000000000000000) != 0) {
        break;
      }
      v9 += v10;
      BOOL v13 = a4 > v10;
      a4 -= v10;
      if (!v13) {
        return v9;
      }
      a3 += v10;
      a5 += v10;
    }
    uint64_t v11 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    BOOL v12 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v11 + 16))(v11, a1, *v12, 5) & 1) != 0);
  return -1;
}

uint64_t si_openat_protected(uint64_t a1, const char *a2, int a3, uint64_t a4, int a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v13 = 0;
  if ((fd_setDir(a1, (int *)&v13) & 1) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = open_dprotected_np(a2, a3, a5, 0, a4);
  int v10 = *__error();
  int v11 = v13;
  MEMORY[0x1A62471B0](v13);
  if ((v11 & 0x80000000) == 0) {
    close(v11);
  }
  if (v9 == -1 && v10)
  {
    *__error() = v10;
    return 0xFFFFFFFFLL;
  }
  return v9;
}

uint64_t _fd_ftruncate(uint64_t a1, off_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((gDisablePreallocate & 1) == 0)
  {
    off_t v4 = lseek(a1, 0, 2);
    uint64_t v5 = a2 - v4;
    if (a2 > v4 && v5 > *MEMORY[0x1E4F14B00])
    {
      ci_preallocate(a1, v5);
      if (prot_pwrite(a1, "", 1uLL, a2 - 1) == 1) {
        return 0;
      }
    }
  }
  while (1)
  {
    uint64_t result = ftruncate(a1, a2);
    if (result != -1) {
      break;
    }
    if (*__error() == 22)
    {
      uint64_t result = ftruncate(a1, a2);
      if (result != -1) {
        break;
      }
    }
    int v7 = *__error();
    uint64_t v8 = g_prot_error_callback;
    if (g_prot_error_callback)
    {
      uint64_t v9 = __error();
      if ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v8 + 16))(v8, a1, *v9, 7)) {
        continue;
      }
    }
    bzero(v19, 0x400uLL);
    int v10 = faccurate_realpath(a1, v19);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v11 = "";
      v12[0] = 67109890;
      if (v10) {
        int v11 = v10;
      }
      v12[1] = a1;
      __int16 v13 = 2080;
      uint64_t v14 = v11;
      __int16 v15 = 2048;
      off_t v16 = a2;
      __int16 v17 = 1024;
      int v18 = v7;
      _os_log_error_impl(&dword_1A334F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "ftruncate(%d %s, %lld) error:%d", (uint8_t *)v12, 0x22u);
    }
    *__error() = v7;
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t _fd_ftruncate_guarded(uint64_t a1, uint64_t a2, off_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if ((gDisablePreallocate & 1) == 0)
  {
    off_t v6 = lseek(a1, 0, 2);
    uint64_t v7 = a3 - v6;
    if (a3 > v6 && v7 > *MEMORY[0x1E4F14B00])
    {
      ci_preallocate(a1, v7);
      if (prot_pwrite_guarded(a1, a2, (uint64_t)"", 1uLL, a3 - 1) == 1) {
        return 0;
      }
    }
  }
  while (1)
  {
    uint64_t result = ftruncate(a1, a3);
    if (result != -1) {
      break;
    }
    if (*__error() == 22)
    {
      uint64_t result = ftruncate(a1, a3);
      if (result != -1) {
        break;
      }
    }
    int v9 = *__error();
    uint64_t v10 = g_prot_error_callback;
    if (g_prot_error_callback)
    {
      int v11 = __error();
      if ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v10 + 16))(v10, a1, *v11, 7)) {
        continue;
      }
    }
    bzero(v21, 0x400uLL);
    BOOL v12 = faccurate_realpath(a1, v21);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      __int16 v13 = "";
      v14[0] = 67109890;
      if (v12) {
        __int16 v13 = v12;
      }
      v14[1] = a1;
      __int16 v15 = 2080;
      off_t v16 = v13;
      __int16 v17 = 2048;
      off_t v18 = a3;
      __int16 v19 = 1024;
      int v20 = v9;
      _os_log_error_impl(&dword_1A334F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "ftruncate(%d %s, %lld) error:%d", (uint8_t *)v14, 0x22u);
    }
    *__error() = v9;
    return 0xFFFFFFFFLL;
  }
  return result;
}

void fd_system_status_stall_if_busy()
{
  if (_gSystemStatusBool)
  {
    pthread_mutex_lock(&_gSystemStatusLock);
    while (_gSystemStatusBool)
      pthread_cond_wait(&_gSystemStatusCond, &_gSystemStatusLock);
    pthread_mutex_unlock(&_gSystemStatusLock);
  }
}

uint64_t SpotlightCachePayload(const __CFString *a1)
{
  if (CFEqual(a1, @"kMDItemPhotosLocationKeywords")
    || CFEqual(a1, @"kMDItemEventHotelReservationForAddressLocality")
    || CFEqual(a1, @"kMDItemEventHotelReservationForAddressCountry")
    || CFEqual(a1, @"kMDItemEventFlightArrivalAirportLocality")
    || CFEqual(a1, @"kMDItemEventFlightArrivalAirportCountry")
    || CFEqual(a1, @"kMDItemEventFlightDepartureAirportLocality")
    || CFEqual(a1, @"kMDItemEventFlightDepartureAirportCountry"))
  {
    return 16;
  }
  if (CFEqual(a1, @"kMDItemEventFlightArrivalAirportName")
    || CFEqual(a1, @"kMDItemEventFlightArrivalAirportCode")
    || CFEqual(a1, @"kMDItemEventFlightDepartureAirportName")
    || CFEqual(a1, @"kMDItemEventFlightDepartureAirportCode"))
  {
    return 64;
  }
  if (CFEqual(a1, @"kMDItemEventFlightCarrier")
    || CFEqual(a1, @"kMDItemEventFlightCarrierCode")
    || CFEqual(a1, @"kMDItemEventFlightDesignator"))
  {
    return 32;
  }
  if (CFEqual(a1, @"kMDItemEventHotelReservationForName")) {
    return 1024;
  }
  if (CFEqual(a1, @"kMDItemVendorName")) {
    return 256;
  }
  if (CFEqual(a1, @"kMDItemDisplayName")
    || CFEqual(a1, @"kMDItemAlternateNames"))
  {
    return 128;
  }
  if (CFStringCompare(a1, @"kMDItemPhotosPeopleNames", 0)
    && CFStringCompare(a1, @"kMDItemRecipients", 0)
    && CFStringCompare(a1, @"kMDItemAuthors", 0))
  {
    return 2 * (CFEqual(a1, @"kMDContactKeywords"));
  }
  return 2;
}

uint64_t SpotlightCacheLookup(uint64_t a1, uint64_t a2, CFStringRef theString, void **a4)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  if (a2
    && theString
    && CFStringGetLength(theString)
    && (CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%u:%@", a2, theString),
        (CFStringRef v9 = preprocessStringKey(v8)) != 0))
  {
    CFStringRef v10 = v9;
    CFIndex Length = CFStringGetLength(v9);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    size_t v13 = MaximumSizeForEncoding + 1;
    MEMORY[0x1F4188790]((void *)((MaximumSizeForEncoding + 16) & 0xFFFFFFFFFFFFFFF0), MaximumSizeForEncoding, v14, v15, v16);
    off_t v18 = (char *)v22 - v17;
    bzero((char *)v22 - v17, v13);
    if (CFStringGetCString(v10, v18, v13, 0x8000100u)
      && (unsigned int v19 = strlen(v18), MDTrieSearch(a1, (uint64_t)v18, v19, 1, (uint64_t)a4)))
    {
      free(*a4);
      uint64_t v20 = 1;
    }
    else
    {
      uint64_t v20 = 0;
    }
    CFRelease(v10);
  }
  else
  {
    CFLog();
    return 0;
  }
  return v20;
}

CFStringRef preprocessStringKey(const __CFString *a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (__onceCSetToken != -1) {
    dispatch_once(&__onceCSetToken, &__block_literal_global_14);
  }
  uint64_t v28 = 0;
  size_t v29 = &v28;
  uint64_t v30 = 0x2000000000;
  CFMutableStringRef Mutable = 0;
  CFIndex v2 = 0;
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x2000000000;
  int v27 = 0;
  v24[0] = 0;
  v24[1] = v24;
  void v24[2] = 0x2000000000;
  char v25 = 0;
  v22[0] = 0;
  v22[1] = v22;
  void v22[2] = 0x2000000000;
  char v23 = 0;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  uint64_t v15 = __copyStringInsertingSpacesBetweenIdeographCharacters_block_invoke_2;
  uint64_t v16 = &unk_1E5AEF420;
  uint64_t v20 = &v28;
  CFStringRef v21 = a1;
  uint64_t v17 = v26;
  off_t v18 = v24;
  unsigned int v19 = v22;
  char v32 = 0;
  do
  {
    if (v2 >= 50) {
      break;
    }
    CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(a1, v2);
    if (RangeOfComposedCharactersAtIndex.location == -1) {
      break;
    }
    ((void (*)(void *, CFIndex, CFIndex, char *))v15)(v14, RangeOfComposedCharactersAtIndex.location, RangeOfComposedCharactersAtIndex.length, &v32);
    v2 += RangeOfComposedCharactersAtIndex.length;
  }
  while (!v32);
  CFStringLowercase((CFMutableStringRef)v29[3], 0);
  CFStringRef v4 = (const __CFString *)v29[3];
  _Block_object_dispose(v22, 8);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v26, 8);
  _Block_object_dispose(&v28, 8);
  if (v4) {
    unint64_t v5 = 2 * (int)CFStringGetLength(v4);
  }
  else {
    unint64_t v5 = 0;
  }
  CharactersPtr = CFStringGetCharactersPtr(v4);
  if (CharactersPtr)
  {
    int v11 = (unsigned __int16 *)CharactersPtr;
    MEMORY[0x1F4188790](v10, CharactersPtr, v7, v8, v9);
    bzero(v13, 0x32uLL);
    v14[0] = 0;
    if (!utf8_encodestr(v11, v5, v13, v14, 50, 47, 4)) {
      return CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v13, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    }
  }
  return v4;
}

uint64_t SpotlightCacheInsert(uint64_t a1, uint64_t a2, CFStringRef theString, uint64_t a4)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  if (a2
    && theString
    && (CFIndex v8 = CFStringGetLength(theString), a4)
    && v8
    && (CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%u:%@", a2, theString),
        (CFStringRef v10 = preprocessStringKey(v9)) != 0))
  {
    CFStringRef v11 = v10;
    CFIndex Length = CFStringGetLength(v10);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    size_t v14 = MaximumSizeForEncoding + 1;
    MEMORY[0x1F4188790]((void *)((MaximumSizeForEncoding + 16) & 0xFFFFFFFFFFFFFFF0), MaximumSizeForEncoding, v15, v16, v17);
    unsigned int v19 = (char *)v22 - v18;
    bzero((char *)v22 - v18, v14);
    if (CFStringGetCString(v11, v19, v14, 0x8000100u))
    {
      size_t v20 = strlen(v19);
      MDTrieInsert(a1, v19, v20, a4, 1.0);
    }
    CFRelease(v11);
    CFRelease(v9);
    CFLog();
    return 1;
  }
  else
  {
    CFLog();
    return 0;
  }
}

uint64_t SpotlightCacheInsertEntry(uint64_t result, uint64_t a2, const __CFDictionary *a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    CFTypeID TypeID = CFStringGetTypeID();
    CFTypeID v15 = CFArrayGetTypeID();
    if (indexAttributes_onceToken != -1) {
      dispatch_once(&indexAttributes_onceToken, &__block_literal_global_114);
    }
    CFArrayRef v6 = (const __CFArray *)indexAttributes_gAttributes;
    uint64_t result = CFArrayGetCount((CFArrayRef)indexAttributes_gAttributes);
    if (result >= 1)
    {
      uint64_t v7 = result;
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, i);
        uint64_t v10 = SpotlightCachePayload(ValueAtIndex);
        uint64_t result = CFDictionaryContainsKey(a3, ValueAtIndex);
        if (result)
        {
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a3, ValueAtIndex);
          if (CFGetTypeID(Value) == TypeID)
          {
            uint64_t result = SpotlightCacheInsert(v5, a2, Value, v10);
          }
          else
          {
            uint64_t result = CFGetTypeID(Value);
            if (result == v15)
            {
              uint64_t result = CFArrayGetCount((CFArrayRef)Value);
              if (result >= 1)
              {
                uint64_t v12 = result;
                for (CFIndex j = 0; j != v12; ++j)
                {
                  CFStringRef v14 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)Value, j);
                  uint64_t result = SpotlightCacheInsert(v5, a2, v14, v10);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t SpotlightCacheAttributes()
{
  if (indexAttributes_onceToken != -1) {
    dispatch_once(&indexAttributes_onceToken, &__block_literal_global_114);
  }
  return indexAttributes_gAttributes;
}

uint64_t SpotlightCacheDelete(uint64_t a1, uint64_t a2, CFStringRef theString, int a4)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  if (a2
    && theString
    && (CFIndex v8 = CFStringGetLength(theString), a4)
    && v8
    && (CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%u:%@", a2, theString),
        (CFStringRef v10 = preprocessStringKey(v9)) != 0))
  {
    CFStringRef v11 = v10;
    CFIndex Length = CFStringGetLength(v10);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    size_t v14 = MaximumSizeForEncoding + 1;
    MEMORY[0x1F4188790]((void *)((MaximumSizeForEncoding + 16) & 0xFFFFFFFFFFFFFFF0), MaximumSizeForEncoding, v15, v16, v17);
    unsigned int v19 = (char *)v22 - v18;
    bzero((char *)v22 - v18, v14);
    if (CFStringGetCString(v11, v19, v14, 0x8000100u))
    {
      unsigned int v20 = strlen(v19);
      MDTrieDelete(a1, (uint64_t)v19, v20, a4);
    }
    CFRelease(v11);
    CFRelease(v9);
    CFLog();
    return 1;
  }
  else
  {
    CFLog();
    return 0;
  }
}

uint64_t SpotlightCacheDeleteEntry(uint64_t result, uint64_t a2, const __CFDictionary *a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    CFTypeID TypeID = CFStringGetTypeID();
    CFTypeID v15 = CFArrayGetTypeID();
    if (indexAttributes_onceToken != -1) {
      dispatch_once(&indexAttributes_onceToken, &__block_literal_global_114);
    }
    CFArrayRef v6 = (const __CFArray *)indexAttributes_gAttributes;
    uint64_t result = CFArrayGetCount((CFArrayRef)indexAttributes_gAttributes);
    if (result >= 1)
    {
      uint64_t v7 = result;
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, i);
        int v10 = SpotlightCachePayload(ValueAtIndex);
        uint64_t result = CFDictionaryContainsKey(a3, ValueAtIndex);
        if (result)
        {
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a3, ValueAtIndex);
          if (CFGetTypeID(Value) == TypeID)
          {
            uint64_t result = SpotlightCacheDelete(v5, a2, Value, v10);
          }
          else
          {
            uint64_t result = CFGetTypeID(Value);
            if (result == v15)
            {
              uint64_t result = CFArrayGetCount((CFArrayRef)Value);
              if (result >= 1)
              {
                uint64_t v12 = result;
                for (CFIndex j = 0; j != v12; ++j)
                {
                  CFStringRef v14 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)Value, j);
                  uint64_t result = SpotlightCacheDelete(v5, a2, v14, v10);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t __copyStringInsertingSpacesBetweenIdeographCharacters_block_invoke()
{
  uint64_t result = newCharacterSetWithPattern();
  __CSet = result;
  return result;
}

uint64_t newCharacterSetWithPattern()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  HIDWORD(v7) = 0;
  CFIndex Length = CFStringGetLength(@"[[:Hani:][:Katakana:][:Hiragana:][:Katakana_Or_Hiragana:][\\u30FC]]");
  MEMORY[0x1F4188790](v3, Length, 2 * Length, v1, v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v5, v4);
  if (!CFStringGetCharactersPtr(@"[[:Hani:][:Katakana:][:Hiragana:][:Katakana_Or_Hiragana:][\\u30FC]]"))
  {
    v9.CFIndex location = 0;
    v9.CFIndex length = Length;
    CFStringGetCharacters(@"[[:Hani:][:Katakana:][:Hiragana:][:Katakana_Or_Hiragana:][\\u30FC]]", v9, (UniChar *)v5);
  }
  uint64_t result = uset_openPattern();
  if (SHIDWORD(v7) >= 1)
  {
    if (result)
    {
      uset_close();
      return 0;
    }
  }
  return result;
}

void __copyStringInsertingSpacesBetweenIdeographCharacters_block_invoke_2(uint64_t a1, CFIndex a2, CFIndex a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  CFArrayRef v6 = (unsigned __int16 *)((char *)v12 - ((2 * a3 + 17) & 0xFFFFFFFFFFFFFFF0));
  bzero(v6, 2 * a3 + 2);
  v13.CFIndex location = a2;
  v13.CFIndex length = a3;
  CFStringGetCharacters(*(CFStringRef *)(a1 + 64), v13, v6);
  int isWhitespace = u_isWhitespace(*v6);
  int v8 = uset_containsAllCodePoints();
  int v9 = v8;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    BOOL v10 = !*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) || v8 == 0;
    if (!v10
      || (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) ? (BOOL v11 = isWhitespace == 0) : (BOOL v11 = 0), v11))
    {
      CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), @" ");
    }
  }
  CFStringAppendCharacters(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), v6, a3);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = isWhitespace == 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9 != 0;
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

CFArrayRef __indexAttributes_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v1[8] = xmmword_1E5AEF4E0;
  v1[9] = *(_OWORD *)&off_1E5AEF4F0;
  v1[10] = xmmword_1E5AEF500;
  v1[4] = xmmword_1E5AEF4A0;
  v1[5] = *(_OWORD *)&off_1E5AEF4B0;
  void v1[6] = xmmword_1E5AEF4C0;
  v1[7] = *(_OWORD *)&off_1E5AEF4D0;
  v1[0] = xmmword_1E5AEF460;
  v1[1] = *(_OWORD *)&off_1E5AEF470;
  v1[2] = xmmword_1E5AEF480;
  v1[3] = *(_OWORD *)&off_1E5AEF490;
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v1, 22, MEMORY[0x1E4F1D510]);
  indexAttributes_gAttributes = (uint64_t)result;
  return result;
}

uint64_t Querylex()
{
  unint64_t v0 = 0x1EB3F3000;
  uint64_t v1 = &unk_1E95CA000;
  if ((yy_init & 1) == 0)
  {
    yy_init = 1;
    if (!yy_start) {
      yy_start = 1;
    }
    if (!Queryin) {
      Queryin = 0;
    }
    if (!Queryout) {
      Queryout = *MEMORY[0x1E4F143D8];
    }
    uint64_t v2 = yy_buffer_stack;
    if (!yy_buffer_stack
      || (uint64_t v3 = yy_buffer_stack_top, (buffer = *(_DWORD **)(yy_buffer_stack + 8 * yy_buffer_stack_top)) == 0))
    {
      Queryensure_buffer_stack();
      buffer = Query_create_buffer((FILE *)Queryin, 0x4000);
      unint64_t v0 = 0x1EB3F3000uLL;
      uint64_t v2 = yy_buffer_stack;
      uint64_t v3 = yy_buffer_stack_top;
      *(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top) = buffer;
    }
    yy_n_UniChar chars = *((void *)buffer + 4);
    uint64_t v5 = (char *)*((void *)buffer + 2);
    *(void *)(v0 + 1352) = v5;
    Querytext = (uint64_t)v5;
    Queryin = **(void **)(v2 + 8 * v3);
    yy_hold_char = *v5;
  }
  unint64_t v6 = 0x1EB3F3000uLL;
LABEL_13:
  uint64_t v7 = *(char **)(v0 + 1352);
  *uint64_t v7 = v1[1128];
  int previous_state = yy_start;
  uint64_t v59 = (uint64_t)v7;
  unint64_t v9 = 0x1EB3F3000uLL;
  while (1)
  {
    do
    {
LABEL_14:
      uint64_t v10 = yy_ec[*v7];
      if (((0x21FBFE00000007FuLL >> previous_state) & 1) == 0)
      {
        *(_DWORD *)(v9 + 1380) = previous_state;
        *(void *)(v6 + 1368) = v7;
      }
      uint64_t v11 = yy_base[previous_state] + v10;
      if (previous_state != (__int16)yy_chk[v11])
      {
        uint64_t v12 = previous_state;
        do
        {
          if ((0x11040000000006uLL >> v12)) {
            uint64_t v10 = *((unsigned __int8 *)&yy_meta + v10);
          }
          uint64_t v12 = yy_def[v12];
          uint64_t v11 = yy_base[v12] + v10;
        }
        while (yy_chk[v11] != (unsigned __int16)v12);
      }
      __int16 v13 = yy_nxt[v11];
      int previous_state = v13;
      ++v7;
    }
    while (((0x3E040007F07E700uLL >> v13) & 1) == 0);
    while (2)
    {
      uint64_t v14 = *(int *)(v9 + 1380);
      if ((0x21FBFE00000007FuLL >> previous_state)) {
        CFTypeID v15 = *(char **)(v6 + 1368);
      }
      else {
        CFTypeID v15 = v7;
      }
      if ((0x21FBFE00000007FuLL >> previous_state)) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = previous_state;
      }
      int v17 = yy_accept[v16];
      Querytext = v59;
      Queryleng = (uint64_t)&v15[-v59];
      v1[1128] = *v15;
      *CFTypeID v15 = 0;
      *(void *)(v0 + 1352) = v15;
      if (v16 != 7 && ((0x3FFBFEFF9FFE7FFuLL >> v16) & 1) == 0)
      {
        uint64_t v18 = Queryleng;
        if (Queryleng)
        {
          int v19 = Querylineno;
          unsigned int v20 = (unsigned __int8 *)Querytext;
          do
          {
            int v21 = *v20++;
            if (v21 == 10) {
              Querylineno = ++v19;
            }
            --v18;
          }
          while (v18);
        }
      }
LABEL_35:
      switch(v17)
      {
        case 0:
          *CFTypeID v15 = v1[1128];
          uint64_t v7 = *(char **)(v6 + 1368);
          unint64_t v9 = 0x1EB3F3000uLL;
          int previous_state = yy_last_accepting_state;
          continue;
        case 1:
          yyunput(*(char *)Querytext, Querytext);
          unint64_t v0 = 0x1EB3F3000;
          goto LABEL_95;
        case 2:
          uint64_t v55 = 257;
          goto LABEL_104;
        case 3:
          uint64_t v55 = 260;
          goto LABEL_104;
        case 4:
          uint64_t v55 = 261;
          goto LABEL_104;
        case 5:
          uint64_t v55 = 263;
          goto LABEL_104;
        case 6:
          uint64_t v55 = 264;
          goto LABEL_104;
        case 7:
          uint64_t v55 = 265;
          goto LABEL_104;
        case 8:
          uint64_t v55 = 266;
          goto LABEL_104;
        case 9:
          char v51 = *(unsigned char *)Querytext;
          uint64_t v52 = __gTermBufferLen++;
          *(unsigned char *)(__gTermBuffer + v52) = v51;
          yy_start = 5;
          goto LABEL_13;
        case 10:
          __gQueryCallback(267, __gTermBuffer, __gTermBufferLen, __gQueryContext);
          __gTermBufferLen = 0;
          switch(Queryleng)
          {
            case 1:
              goto LABEL_90;
            case 2:
              goto LABEL_89;
            case 3:
              yyunput(*(char *)(Querytext + 2), Querytext);
LABEL_89:
              yyunput(*(char *)(Querytext + 1), Querytext);
LABEL_90:
              yyunput(*(char *)Querytext, Querytext);
              break;
          }
          yy_start = 3;
          unint64_t v0 = 0x1EB3F3000;
          goto LABEL_13;
        case 11:
          __gQueryCallback(267, __gTermBuffer, __gTermBufferLen, __gQueryContext);
          __gTermBufferLen = 0;
          yy_start = 3;
          uint64_t v55 = 263;
          goto LABEL_104;
        case 12:
          __gQueryCallback(267, __gTermBuffer, __gTermBufferLen, __gQueryContext);
          __gTermBufferLen = 0;
          yy_start = 3;
          uint64_t v55 = 264;
          goto LABEL_104;
        case 13:
          __gQueryCallback(267, __gTermBuffer, __gTermBufferLen, __gQueryContext);
          __gTermBufferLen = 0;
          yy_start = 3;
          uint64_t v55 = 265;
          goto LABEL_104;
        case 14:
          __gQueryCallback(267, __gTermBuffer, __gTermBufferLen, __gQueryContext);
          __gTermBufferLen = 0;
          yy_start = 3;
          uint64_t v55 = 266;
LABEL_104:
          __gQueryCallback(v55, Querytext, Queryleng, __gQueryContext);
          return v55;
        case 15:
          char v53 = *(unsigned char *)Querytext;
          uint64_t v54 = __gTermBufferLen++;
          *(unsigned char *)(__gTermBuffer + v54) = v53;
          goto LABEL_13;
        case 16:
          fwrite((const void *)Querytext, Queryleng, 1uLL, (FILE *)Queryout);
          unint64_t v0 = 0x1EB3F3000;
          goto LABEL_13;
        case 17:
          int v22 = Querytext;
          *CFTypeID v15 = v1[1128];
          uint64_t v23 = yy_buffer_stack;
          uint64_t v24 = yy_buffer_stack_top;
          uint64_t v25 = *(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top);
          int v57 = v22;
          if (*(_DWORD *)(v25 + 64))
          {
            uint64_t v26 = yy_n_chars;
          }
          else
          {
            uint64_t v26 = *(void *)(v25 + 32);
            yy_n_UniChar chars = v26;
            *(void *)uint64_t v25 = Queryin;
            uint64_t v25 = *(void *)(v23 + 8 * v24);
            *(_DWORD *)(v25 + 64) = 1;
          }
          int v27 = *(char **)(v0 + 1352);
          uint64_t v28 = *(unsigned char **)(v25 + 8);
          if (v27 <= &v28[v26])
          {
            uint64_t v7 = (char *)(Querytext + ~v57 + (int)v15);
            *(void *)(v0 + 1352) = v7;
            int previous_state = yy_get_previous_state();
            unint64_t v9 = 0x1EB3F3000uLL;
            unint64_t v6 = 0x1EB3F3000uLL;
            if (((0x21FBFE00000007FuLL >> previous_state) & 1) == 0)
            {
              yy_last_accepting_state = previous_state;
              yy_last_accepting_cpos = (uint64_t)v7;
            }
            uint64_t v47 = yy_base[previous_state] + 1;
            unint64_t v0 = 0x1EB3F3000uLL;
            uint64_t v1 = (unsigned char *)&unk_1E95CA000;
            if (previous_state != (__int16)yy_chk[v47])
            {
              uint64_t v48 = previous_state;
              do
              {
                int v49 = (unsigned __int16)yy_def[v48];
                uint64_t v48 = (__int16)v49;
                uint64_t v47 = yy_base[(__int16)v49] + 1;
              }
              while (v49 != yy_chk[v47]);
            }
            uint64_t v59 = Querytext;
            if (v47)
            {
              int v50 = (unsigned __int16)yy_nxt[v47];
              if (v50 != 57)
              {
                int previous_state = (__int16)v50;
                yy_c_buf_p = (uint64_t)++v7;
                goto LABEL_14;
              }
            }
            continue;
          }
          size_t v29 = (char *)Querytext;
          if (!*(_DWORD *)(v25 + 60))
          {
            uint64_t v1 = (unsigned char *)&unk_1E95CA000;
            if (&v27[-Querytext] != (char *)1) {
              goto LABEL_73;
            }
            goto LABEL_65;
          }
          int v30 = ~Querytext + v27;
          if (v30 >= 1)
          {
            int v31 = ~Querytext + v27;
            do
            {
              char v32 = *v29++;
              *v28++ = v32;
              --v31;
            }
            while (v31);
            uint64_t v25 = *(void *)(v23 + 8 * v24);
          }
          int v58 = v15;
          if (*(_DWORD *)(v25 + 64) == 2)
          {
            yy_n_UniChar chars = 0;
            *(void *)(v25 + 32) = 0;
            if (v30) {
              goto LABEL_47;
            }
LABEL_61:
            Queryrestart((FILE *)Queryin);
            unint64_t v0 = 0x1EB3F3000;
            unint64_t v33 = yy_n_chars;
            uint64_t v23 = yy_buffer_stack;
            uint64_t v24 = yy_buffer_stack_top;
            uint64_t v25 = *(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top);
            int v34 = 1;
          }
          else
          {
            int v35 = ~v30;
            int v36 = *(_DWORD *)(v25 + 24);
            unsigned int v37 = v36 + ~v30;
            if (!v37)
            {
              do
              {
                unsigned int v38 = *(void **)(v25 + 8);
                if (*(_DWORD *)(v25 + 40))
                {
                  *(_DWORD *)(v25 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 2 * v36;
                  int8x8_t v39 = (char *)malloc_type_realloc(v38, 2 * v36 + 2, 0x44819167uLL);
                  unint64_t v0 = 0x1EB3F3000;
                  uint64_t v23 = yy_buffer_stack;
                  uint64_t v24 = yy_buffer_stack_top;
                }
                else
                {
                  int8x8_t v39 = 0;
                }
                *(void *)(v25 + 8) = v39;
                int v27 = &v39[(int)v27 - (int)v38];
                *(void *)(v0 + 1352) = v27;
                uint64_t v25 = *(void *)(v23 + 8 * v24);
                int v36 = *(_DWORD *)(v25 + 24);
                unsigned int v37 = v36 + v35;
              }
              while (!(v36 + v35));
            }
            if (v37 >= 0x2000) {
              unsigned int v40 = 0x2000;
            }
            else {
              unsigned int v40 = v37;
            }
            int Chars = QueryScannerReadChars((void *)(*(void *)(v25 + 8) + v30), v40);
            unint64_t v33 = Chars;
            yy_n_UniChar chars = Chars;
            uint64_t v23 = yy_buffer_stack;
            uint64_t v24 = yy_buffer_stack_top;
            uint64_t v25 = *(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top);
            *(void *)(v25 + 32) = Chars;
            if (Chars)
            {
              int v34 = 0;
              unint64_t v0 = 0x1EB3F3000;
            }
            else
            {
              unint64_t v0 = 0x1EB3F3000;
              if (!v30) {
                goto LABEL_61;
              }
LABEL_47:
              unint64_t v33 = 0;
              int v34 = 2;
              *(_DWORD *)(v25 + 64) = 2;
            }
          }
          unint64_t v42 = v33 + v30;
          if (v42 > *(int *)(v25 + 24))
          {
            size_t v43 = v42 + (v33 >> 1);
            BOOL v44 = malloc_type_realloc(*(void **)(v25 + 8), v43, 0x44819167uLL);
            unint64_t v0 = 0x1EB3F3000uLL;
            uint64_t v23 = yy_buffer_stack;
            uint64_t v24 = yy_buffer_stack_top;
            *(void *)(*(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top) + 8) = v44;
            uint64_t v25 = *(void *)(v23 + 8 * v24);
            *(_DWORD *)(v25 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v43 - 2;
            unint64_t v42 = yy_n_chars + v30;
          }
          CFTypeID v15 = v58;
          yy_n_UniChar chars = v42;
          *(unsigned char *)(*(void *)(v25 + 8) + v42) = 0;
          *(unsigned char *)(v42 + *(void *)(*(void *)(v23 + 8 * v24) + 8) + 1) = 0;
          size_t v29 = *(char **)(*(void *)(v23 + 8 * v24) + 8);
          Querytext = (uint64_t)v29;
          uint64_t v1 = (unsigned char *)&unk_1E95CA000;
          if (v34 == 1)
          {
LABEL_65:
            *(void *)(v0 + 1352) = v29;
            int v45 = yy_start;
            if (yy_start >= 1) {
              int v45 = yy_start - 1;
            }
            int v17 = (v45 >> 1) + 18;
            unint64_t v6 = 0x1EB3F3000;
            goto LABEL_35;
          }
          if (v34)
          {
            BOOL v46 = v34 == 2;
            unint64_t v6 = 0x1EB3F3000;
            if (!v46) {
              goto LABEL_13;
            }
            uint64_t v28 = *(unsigned char **)(*(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top) + 8);
            uint64_t v26 = yy_n_chars;
LABEL_73:
            uint64_t v7 = &v28[v26];
            *(void *)(v0 + 1352) = &v28[v26];
            int previous_state = yy_get_previous_state();
            unint64_t v0 = 0x1EB3F3000;
            uint64_t v59 = Querytext;
            unint64_t v9 = 0x1EB3F3000;
            unint64_t v6 = 0x1EB3F3000;
            continue;
          }
          uint64_t v7 = &v29[~v57 + (int)v58];
          *(void *)(v0 + 1352) = v7;
          int previous_state = yy_get_previous_state();
          unint64_t v0 = 0x1EB3F3000;
          uint64_t v59 = Querytext;
          unint64_t v9 = 0x1EB3F3000;
          unint64_t v6 = 0x1EB3F3000;
          break;
        case 18:
        case 19:
          return 0;
        case 20:
          __gQueryCallback(267, __gTermBuffer, __gTermBufferLen, __gQueryContext);
          unint64_t v0 = 0x1EB3F3000;
          __gTermBufferLen = 0;
LABEL_95:
          yy_start = 3;
          goto LABEL_13;
        default:
          goto LABEL_13;
      }
      break;
    }
  }
}

void *Queryensure_buffer_stack()
{
  CFArrayRef result = (void *)yy_buffer_stack;
  if (yy_buffer_stack)
  {
    if (yy_buffer_stack_top >= (unint64_t)(yy_buffer_stack_max - 1))
    {
      uint64_t v1 = yy_buffer_stack_max + 8;
      CFArrayRef result = malloc_type_realloc((void *)yy_buffer_stack, 8 * (yy_buffer_stack_max + 8), 0x44819167uLL);
      yy_buffer_stack = (uint64_t)result;
      uint64_t v2 = &result[yy_buffer_stack_max];
      *uint64_t v2 = 0u;
      v2[1] = 0u;
      v2[2] = 0u;
      v2[3] = 0u;
      yy_buffer_stack_max = v1;
    }
  }
  else
  {
    CFArrayRef result = malloc_type_malloc(8uLL, 0x895110EAuLL);
    yy_buffer_stack = (uint64_t)result;
    *CFArrayRef result = 0;
    yy_buffer_stack_max = 1;
    yy_buffer_stack_top = 0;
  }
  return result;
}

_DWORD *Query_create_buffer(FILE *a1, int a2)
{
  size_t v4 = malloc_type_malloc(0x48uLL, 0x895110EAuLL);
  void v4[6] = a2;
  *((void *)v4 + 1) = malloc_type_malloc(a2 + 2, 0x895110EAuLL);
  v4[10] = 1;
  Query_init_buffer((uint64_t)v4, a1);
  return v4;
}

uint64_t yyunput(uint64_t result, uint64_t a2)
{
  unint64_t v2 = yy_c_buf_p;
  *(unsigned char *)yy_c_buf_p = yy_hold_char;
  uint64_t v3 = yy_buffer_stack;
  uint64_t v4 = yy_buffer_stack_top;
  uint64_t v5 = *(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top);
  uint64_t v6 = *(void *)(v5 + 8);
  if (v2 < v6 + 2)
  {
    uint64_t v7 = *(int *)(v5 + 24) + v6 + 2;
    unint64_t v8 = v6 + yy_n_chars + 2;
    if (yy_n_chars + 2 < 1)
    {
      int v10 = *(_DWORD *)(v5 + 24);
    }
    else
    {
      do
      {
        char v9 = *(unsigned char *)--v8;
        *(unsigned char *)--uint64_t v7 = v9;
        uint64_t v5 = *(void *)(v3 + 8 * v4);
      }
      while (v8 > *(void *)(v5 + 8));
      int v10 = *(_DWORD *)(v5 + 24);
    }
    int v11 = v7 - v8;
    v2 += v11;
    yy_n_UniChar chars = v10;
    *(void *)(v5 + 32) = v10;
    a2 += v11;
  }
  *(unsigned char *)(v2 - 1) = result;
  uint64_t v12 = (char *)(v2 - 1);
  if (result == 10) {
    --Querylineno;
  }
  Querytext = a2;
  yy_hold_char = *v12;
  yy_c_buf_p = (uint64_t)v12;
  return result;
}

uint64_t yy_get_previous_state()
{
  uint64_t result = yy_start;
  uint64_t v1 = (unsigned char *)Querytext;
  if (Querytext < (unint64_t)yy_c_buf_p)
  {
    do
    {
      if (*v1) {
        uint64_t v2 = yy_ec[*v1];
      }
      else {
        uint64_t v2 = 1u;
      }
      if (((0x21FBFE00000007FuLL >> result) & 1) == 0)
      {
        yy_last_accepting_state = result;
        yy_last_accepting_cpos = (uint64_t)v1;
      }
      uint64_t v3 = yy_base[(int)result] + v2;
      if (result != (__int16)yy_chk[v3])
      {
        uint64_t result = (int)result;
        do
        {
          if ((0x11040000000006uLL >> result)) {
            uint64_t v2 = *((unsigned __int8 *)&yy_meta + v2);
          }
          uint64_t result = yy_def[result];
          uint64_t v3 = yy_base[result] + v2;
        }
        while (yy_chk[v3] != (unsigned __int16)result);
      }
      uint64_t result = yy_nxt[v3];
      ++v1;
    }
    while (v1 != (unsigned char *)yy_c_buf_p);
  }
  return result;
}

int *Queryrestart(FILE *a1)
{
  if (!yy_buffer_stack || (buffer = *(_DWORD **)(yy_buffer_stack + 8 * yy_buffer_stack_top)) == 0)
  {
    Queryensure_buffer_stack();
    buffer = Query_create_buffer((FILE *)Queryin, 0x4000);
    *(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top) = buffer;
  }
  uint64_t result = Query_init_buffer((uint64_t)buffer, a1);
  uint64_t v4 = *(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top);
  yy_n_UniChar chars = *(void *)(v4 + 32);
  yy_c_buf_p = *(void *)(v4 + 16);
  Querytext = yy_c_buf_p;
  Queryin = **(void **)(yy_buffer_stack + 8 * yy_buffer_stack_top);
  yy_hold_char = *(unsigned char *)yy_c_buf_p;
  return result;
}

int *Query_init_buffer(uint64_t a1, FILE *a2)
{
  int v4 = *__error();
  Query_flush_buffer(a1);
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 1;
  uint64_t v5 = yy_buffer_stack;
  if (yy_buffer_stack) {
    uint64_t v5 = *(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top);
  }
  if (v5 != a1) {
    *(void *)(a1 + 52) = 1;
  }
  if (a2)
  {
    int v6 = fileno(a2);
    BOOL v7 = isatty(v6) > 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  *(_DWORD *)(a1 + 44) = v7;
  uint64_t result = __error();
  *uint64_t result = v4;
  return result;
}

uint64_t Query_flush_buffer(uint64_t result)
{
  if (result)
  {
    *(void *)(result + 32) = 0;
    **(unsigned char **)(result + 8) = 0;
    *(unsigned char *)(*(void *)(result + 8) + 1) = 0;
    *(void *)(result + 16) = *(void *)(result + 8);
    *(_DWORD *)(result + 48) = 1;
    *(_DWORD *)(result + 64) = 0;
    if (yy_buffer_stack) {
      uint64_t v1 = *(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top);
    }
    else {
      uint64_t v1 = 0;
    }
    if (v1 == result)
    {
      uint64_t v2 = *(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top);
      yy_n_UniChar chars = *(void *)(v2 + 32);
      yy_c_buf_p = *(void *)(v2 + 16);
      Querytext = yy_c_buf_p;
      Queryin = **(void **)(yy_buffer_stack + 8 * yy_buffer_stack_top);
      yy_hold_char = *(unsigned char *)yy_c_buf_p;
    }
  }
  return result;
}

uint64_t QueryScannerReset()
{
  if (yy_buffer_stack) {
    uint64_t v0 = *(void *)(yy_buffer_stack + 8 * yy_buffer_stack_top);
  }
  else {
    uint64_t v0 = 0;
  }
  uint64_t result = Query_flush_buffer(v0);
  yy_start = 3;
  return result;
}

void _windowsMapInit_cold_1()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 460, "windows->_size>(1ull<<windows->offset_shift) || windows->count <= 1", "");
  OUTLINED_FUNCTION_0();
}

void _windowsMapInit_cold_2()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 446, "windows->_size>(1ull<<windows->offset_shift) || windows->count <= 1", "");
  OUTLINED_FUNCTION_0();
}

void _windowsMapInit_cold_3()
{
}

void _initWindow_cold_1()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 378, "mapStart <= parentWindows->_size", "");
  OUTLINED_FUNCTION_0();
}

void _initWindow_cold_2()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 374, "(1ull<<parentWindows->offset_shift) <= mapEnd-mapStart", "");
  OUTLINED_FUNCTION_0();
}

void _initWindow_cold_3()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 372, "(window->mappedStart==0||window->mappedStart==mapStart)&&window->mappedMemory==((void *)0)", "");
  OUTLINED_FUNCTION_0();
}

void si_analytics_log_cold_1(uint64_t *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  int v2 = 136315138;
  uint64_t v3 = v1;
  _os_log_fault_impl(&dword_1A334F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&v2, 0xCu);
}

void _windowsResolvePtr_cold_1()
{
}

void _windowsResolvePtr_cold_2()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 773, "(offset_t)(intptr_t)ptr !=inOffset", "");
  OUTLINED_FUNCTION_0();
}

void _windowsResolvePtr_cold_3()
{
}

void _storageWindowsExpandBacking_cold_1(_DWORD **a1, unsigned char *a2)
{
  fd_realpath(*a1, a2);
  __error();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_1A334F000, v2, v3, "%s:%d: _storageExpand %s error:%d", v4, v5, v6, v7, 2u);
}

void _storageWindowsExpandBacking_cold_2()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 825, "windows->_size>(1ull<<windows->offset_shift) || windows->count <= 1", "");
  OUTLINED_FUNCTION_0();
}

void _storageWindowsExpandBacking_cold_3()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 794, "windows->_size>(1ull<<windows->offset_shift) || windows->count <= 1", "");
  OUTLINED_FUNCTION_0();
}

void storage_array_HeaderStore_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void storage_array_HeaderRestore_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void storage_array_HeaderRestore_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v1[0] = 136315394;
  OUTLINED_FUNCTION_1_0();
  *(_DWORD *)((char *)&v1[3] + 2) = 311;
  _os_log_error_impl(&dword_1A334F000, v0, OS_LOG_TYPE_ERROR, "%s:%d: invalid storage_array data", (uint8_t *)v1, 0x12u);
}

void storage_array_Init_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void storage_array_Init_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v1[0] = 136315394;
  OUTLINED_FUNCTION_1_0();
  *(_DWORD *)((char *)&v1[3] + 2) = 372;
  _os_log_error_impl(&dword_1A334F000, v0, OS_LOG_TYPE_ERROR, "%s:%d: storage_array_Init - inFdPtr == NULL", (uint8_t *)v1, 0x12u);
}

void storage_array_Init_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void storage_array_Init_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void bit_vector_set_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void bit_vector_set_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _copyFile_cold_1()
{
  __error();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_1A334F000, v0, v1, "%s:%d: error (%d) opening %s\n", v2, v3, v4, v5, 2u);
}

void _copyFile_cold_2()
{
  __error();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1_1(&dword_1A334F000, v0, v1, "%s:%d: fstat error (%d)\n", v2, v3, v4, v5, 2u);
}

void _copyFile_cold_3()
{
  __error();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_1A334F000, v0, v1, "%s:%d: error (%d) opening %s\n", v2, v3, v4, v5, 2u);
}

void _copyFile_cold_4()
{
  __error();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1_1(&dword_1A334F000, v0, v1, "%s:%d: ftruncate error (%d)\n", v2, v3, v4, v5, 2u);
}

void _copyFile_cold_5()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)uint64_t v3 = 136315906;
  OUTLINED_FUNCTION_0_0();
  *(_DWORD *)&v3[7] = 208;
  v3[9] = 2048;
  uint64_t v4 = v0;
  __int16 v5 = 2048;
  uint64_t v6 = v1;
  _os_log_error_impl(&dword_1A334F000, v2, OS_LOG_TYPE_ERROR, "%s:%d: write failed - expected:%lld, actual: %lld", (uint8_t *)v3, 0x26u);
}

void _copyFile_cold_6()
{
  __error();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1_1(&dword_1A334F000, v0, v1, "%s:%d: read error (%d)\n", v2, v3, v4, v5, 2u);
}

void _copyFile_cold_7()
{
  __error();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1_1(&dword_1A334F000, v0, v1, "%s:%d: write error (%d)\n", v2, v3, v4, v5, 2u);
}

void _copyFile_cold_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  MEMORY[0xBAD] = -559038737;
  abort();
}

void copyFileFallback_cold_1()
{
  __error();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6(&dword_1A334F000, v0, v1, "%s:%d: copy file error(%d) resolving source fd %d for %s", v2, v3, v4, v5, 2u);
}

void copyFileFallback_cold_2()
{
  __error();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6(&dword_1A334F000, v0, v1, "%s:%d: copy file error(%d) resolving dest fd %d for %s", v2, v3, v4, v5, 2u);
}

void copyFileFallback_cold_3(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  __error();
  *(_DWORD *)unint64_t v8 = 136316162;
  OUTLINED_FUNCTION_0_0();
  *(_DWORD *)&v8[7] = 337;
  v8[9] = v6;
  int v9 = v7;
  __int16 v10 = 2080;
  uint64_t v11 = a1;
  __int16 v12 = 2080;
  uint64_t v13 = a2;
  _os_log_error_impl(&dword_1A334F000, a3, OS_LOG_TYPE_ERROR, "%s:%d: copy file error(%d) (%s) (%s)", (uint8_t *)v8, 0x2Cu);
}

void fd_release_cold_1()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 483, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void fd_name_cold_1()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1231, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void _fd_acquire_fd_cold_1(os_log_t log)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v1 = 136315394;
  uint64_t v2 = "_fd_acquire_fd";
  __int16 v3 = 1024;
  int v4 = 1627;
  _os_log_error_impl(&dword_1A334F000, log, OS_LOG_TYPE_ERROR, "%s:%d: fd_ptr instance was invalidated", (uint8_t *)&v1, 0x12u);
}

void _fd_acquire_fd_cold_2()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1622, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void fd_pwrite_cold_1()
{
}

void _fd_release_fd_cold_1()
{
}

void _fd_release_fd_cold_2()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1707, "obj->_guard == inguard", "");
  OUTLINED_FUNCTION_0();
}

void _fd_release_fd_cold_3()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1706, "obj->fd == in_fd", "");
  OUTLINED_FUNCTION_0();
}

void _fd_release_fd_cold_4()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1701, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void fd_name_ptr_cold_1()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1246, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void _fd_remove_locked_cold_1()
{
}

void _fd_remove_locked_cold_2()
{
}

void _fd_remove_locked_cold_3()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 444, "g_fd_list->item_count==0", "");
  OUTLINED_FUNCTION_0();
}

void _fd_remove_locked_cold_4()
{
}

void _fd_remove_locked_cold_5()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 451, "g_fd_list->item_count>=0", "");
  OUTLINED_FUNCTION_0();
}

void _fd_close_inactive_cold_1()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1372, "processed == g_fd_list->item_count", "");
  OUTLINED_FUNCTION_0();
}

void _fd_close_inactive_cold_2()
{
}

void _fd_close_inactive_cold_3()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1363, "g_fd_list->fd_count>=0", "");
  OUTLINED_FUNCTION_0();
}

void _fd_update_locked_cold_1()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1565, "obj->fd != -1", "");
  OUTLINED_FUNCTION_0();
}

void _fd_update_locked_cold_2()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1569, "g_fd_list->item_count==0", "");
  OUTLINED_FUNCTION_0();
}

void _fd_update_locked_cold_3()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1572, "g_fd_list->item_count!=0", "");
  OUTLINED_FUNCTION_0();
}

void _fd_update_locked_cold_4()
{
}

void _fd_update_locked_cold_5()
{
}

void _fd_update_locked_cold_6()
{
}

void _safe_open_at_cold_1(unsigned char *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D520]);
  bzero(a1, 0x400uLL);
  if (gOpenLimit < 1)
  {
    int v6 = 0;
    int v5 = 0;
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
    int v6 = 0;
    do
    {
      int v7 = faccurate_realpath(v4, a1);
      if (v7)
      {
        if (*v7)
        {
          CFStringRef v8 = CFStringCreateWithCString(v2, v7, 0x8000100u);
          CFBagAddValue(Mutable, v8);
          CFRelease(v8);
        }
        else
        {
          CFBagAddValue(Mutable, &stru_1EF684D88);
          ++v5;
        }
        ++v6;
      }
      ++v4;
    }
    while (v4 < gOpenLimit);
  }
  CFRelease(Mutable);
  __message_assert("%s:%u: failed assertion '%s' %s Too many open files %d (%d) (%d)", "fd_obj.c", 1508, "false", "", 24, v6, v5);
  OUTLINED_FUNCTION_0();
}

void _safe_open_at_cold_2()
{
}

void _MDStoreOIDArrayEndSequence_cold_1()
{
  __assert_rtn("_MDStoreOIDArrayEndSequence", "_MDStoreOIDArray.c", 469, "length -1 <= UINT16_MAX");
}

void _MDPlistEmbeddedReferenceToPlistObject_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void validatePlistObject_cold_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistReferenceToPlistObject_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void MDPlistGetRootPlistObjectFromBuffer_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void MDPlistGetRootPlistObjectFromBuffer_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void MDPlistGetRootPlistObjectFromBuffer_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void MDPlistGetRootPlistObjectFromBuffer_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistArrayGetPlistObjectAtIndex_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistArrayIterateWithError_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistDictionaryGetPlistObjectForKey_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistDictionaryGetPlistObjectForKey_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistDictionaryGetPlistObjectForKey_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistDictionaryIterateWithError_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistDictionaryIterateWithError_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistDictionaryIterateWithError_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void __MDPlistContainerCopyObjectErrorCode_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void __MDPlistContainerCopyObjectErrorCode_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void __MDPlistContainerCopyObjectErrorCode_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void __MDPlistContainerCopyObjectErrorCode_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerCreateCommon_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerCreateCommon_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerBeginContainer_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerBeginContainer_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerBeginContainer_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerAddObject_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerAddObject_cold_2(int a1, uint64_t a2, os_log_t log)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 67109378;
  v3[1] = a1;
  __int16 v4 = 2112;
  uint64_t v5 = a2;
  _os_log_error_impl(&dword_1A334F000, log, OS_LOG_TYPE_ERROR, "Unsupported type (%d) %@", (uint8_t *)v3, 0x12u);
}

void _MDPlistContainerEndContainer_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerEndContainer_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerBeginArray_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerBeginArray_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerBeginArray_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerEndArray_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerEndArray_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerBeginDictionary_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerBeginDictionary_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerBeginDictionary_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerEndDictionary_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerEndDictionary_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerEndDictionary_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerAddCString_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerAddCString_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerAddPlistObject_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerAddPlistObject_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerAddPlistObject_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _addGenericData_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _addGenericData_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _addInlineData_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _addInlineData_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerAddString_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerAddString_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerAddString_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerAddURL_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _MDPlistContainerAddURL_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void copyCFURL_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void copyCFURL_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void copyCFURL_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _fast_vm_allocate_cold_1()
{
  MEMORY[0xBAD] = -1059192814;
  abort();
}

void copyAppCategoryMap_cold_1(int a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_1A334F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "copyAppCategoryMapp error %d", (uint8_t *)v1, 8u);
}

void localizedPropertyCopy_cold_1(uint64_t a1, int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109378;
  v2[1] = a2;
  __int16 v3 = 2112;
  uint64_t v4 = a1;
  _os_log_error_impl(&dword_1A334F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "localizedPropertyCopy error %d for %@", (uint8_t *)v2, 0x12u);
}

void MDTrieCreate_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(a1 + 88);
  int v9 = *(unsigned __int8 *)(a1 + 92);
  int v10 = *(unsigned __int8 *)(a1 + 93);
  int v11 = *(unsigned __int8 *)(a1 + 94);
  int v12 = *(unsigned __int8 *)(a1 + 104);
  int v13 = 136318210;
  uint64_t v14 = "MDTrieCreate";
  __int16 v15 = 1024;
  int v16 = 640;
  __int16 v17 = 2048;
  uint64_t v18 = a2;
  __int16 v19 = 2048;
  uint64_t v20 = v3;
  __int16 v21 = 2048;
  uint64_t v22 = v4;
  __int16 v23 = 2048;
  uint64_t v24 = v5;
  __int16 v25 = 2048;
  uint64_t v26 = v6;
  __int16 v27 = 2048;
  uint64_t v28 = v7;
  __int16 v29 = 1024;
  int v30 = v8;
  __int16 v31 = 1024;
  int v32 = v9;
  __int16 v33 = 1024;
  int v34 = v10;
  __int16 v35 = 1024;
  int v36 = v11;
  __int16 v37 = 1024;
  int v38 = v12;
  _os_log_error_impl(&dword_1A334F000, log, OS_LOG_TYPE_ERROR, "%s:%d: MDTrieCreate failed to allocate offset 0x%llx. hs:%lld es:%ld fd:%p sz:%lld fr:%lld c:%d ro:%d sm:%d um:%d os:%d", (uint8_t *)&v13, 0x6Cu);
}

void writeToShadowTrie()
{
  LODWORD(v2) = 136315906;
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_1_2(&dword_1A334F000, v0, v1, "%s:%d: copyFile error, src: %s, dst: %s", v2, v3, v4, v5);
}

{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  int v3;
  const char *v4;
  const char *v5;

  LODWORD(v2) = 136315906;
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_1_2(&dword_1A334F000, v0, v1, "%s:%d: copyFile error, src: %s, dst: %s", v2, v3, v4, v5);
}

{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  int v3;
  const char *v4;
  const char *v5;

  LODWORD(v2) = 136315906;
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_1_2(&dword_1A334F000, v0, v1, "%s:%d: copyFile error, src: %s, dst: %s", v2, v3, v4, v5);
}

void enumerateNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  __message_assert_0(a1, a2, a3, a4, a5, a6, a7, a8, (char)"MDTrie.cpp");
  OUTLINED_FUNCTION_0();
}

void _MDPlistBytesBeginPlist_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void __MDPlistBytesAddObject_cold_1(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)uint64_t v4 = 136315650;
  *(void *)&v4[4] = "Boolean __MDPlistBytesAddObject(MDMutablePlistBytesRef, CFTypeRef)";
  *(_WORD *)&v4[12] = 2048;
  *(void *)&v4[14] = a2;
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_5(&dword_1A334F000, v2, v3, "%s: Unsupported CFTypeID (%lu) -- replaced %p with kCFNull", *(const char **)v4, *(void *)&v4[8], *(const void **)&v4[16]);
}

void _MDPlistBytesEndPlist_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesEndPlist_cold_2()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _maybeSwapPlistBytes_cold_1(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136315138;
  uint64_t v2 = "void swapPlistBytes(_MDPlistBytes *)";
  _os_log_error_impl(&dword_1A334F000, log, OS_LOG_TYPE_ERROR, "%s: Invalid plist bytes encoding: innerCount > count", (uint8_t *)&v1, 0xCu);
}

void _maybeSwapPlistBytes_cold_2(int a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v2 = 136315394;
  uint64_t v3 = "void swapPlistBytes(_MDPlistBytes *)";
  __int16 v4 = 1024;
  int v5 = a1;
  _os_log_error_impl(&dword_1A334F000, a2, OS_LOG_TYPE_ERROR, "%s: Invalid plist bytes encoding: Bad quadCount (%d)", (uint8_t *)&v2, 0x12u);
}

void _maybeSwapPlistBytes_cold_3(uint64_t *a1, NSObject *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  int v3 = 136315394;
  __int16 v4 = "void swapPlistBytes(_MDPlistBytes *)";
  __int16 v5 = 2048;
  uint64_t v6 = v2;
  _os_log_error_impl(&dword_1A334F000, a2, OS_LOG_TYPE_ERROR, "%s: Invalid plist bytes header: %#018llx", (uint8_t *)&v3, 0x16u);
}

void __MDPlistBytesValidate_cold_1(uint8_t *buf, void *a2, os_log_t log)
{
  *(_DWORD *)buf = 136315138;
  *a2 = "void validatePlistEncoding(_MDPlistBytes *, int)";
  _os_log_error_impl(&dword_1A334F000, log, OS_LOG_TYPE_ERROR, "%s: Invalid plist bytes encoding", buf, 0xCu);
}

void _MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator_cold_1(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 136315650;
  __int16 v4 = "CFTypeRef _MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator(CFAllocatorRef, MDPlistBytesRef, CFIndex, const "
       "MDPlistBytesDeserializationCallbacks *, void *)";
  __int16 v5 = 2048;
  uint64_t v6 = a2;
  OUTLINED_FUNCTION_3_0();
  _os_log_debug_impl(&dword_1A334F000, v2, OS_LOG_TYPE_DEBUG, "%s: plist idx bounds; idx = %ld; ctx = %p",
    (uint8_t *)&v3,
    0x20u);
}

void _MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator_cold_2(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)__int16 v4 = 136315650;
  *(void *)&v4[4] = "CFTypeRef _MDPlistBytesCopyPlistAtIndexWithCallbacksAndAllocator(CFAllocatorRef, MDPlistBytesRef, "
                      "CFIndex, const MDPlistBytesDeserializationCallbacks *, void *)";
  *(_WORD *)&v4[12] = 2048;
  *(void *)&v4[14] = a2;
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_5(&dword_1A334F000, v2, v3, "%s: plist alloc err; idx = %ld; ctx = %p",
    *(const char **)v4,
    *(void *)&v4[8],
    *(const void **)&v4[16]);
}

void copyObject_cold_1()
{
}

void copyObject_cold_2()
{
}

void copyObject_cold_3()
{
}

void copyObject_cold_4()
{
}

void copyObject_cold_5()
{
}

void copyObject_cold_6()
{
}

void copyObject_cold_7()
{
}

void copyObject_cold_8()
{
}

void copyObject_cold_9()
{
}

void copyObject_cold_10()
{
}

void copyObject_cold_11()
{
}

void copyObject_cold_12()
{
}

void copyObject_cold_13()
{
}

void copyObject_cold_14()
{
}

void copyObject_cold_15()
{
}

void copyObject_cold_16()
{
}

void copyObject_cold_17()
{
}

void copyObject_cold_18()
{
}

void copyObject_cold_19()
{
}

void _MDChildPlistBytesContextCreate_cold_1()
{
  __assert_rtn("_MDChildPlistBytesContextCreate", "_MDPlistBytes.c", 1858, "!(nextWrapperIndex <= 0 || nextWrapperIndex >= count)");
}

void _MDPlistBytesCreateMutableUsingMalloc_cold_1()
{
}

void _MDPlistBytesCreateMutableUsingMallocWithZone_cold_1()
{
}

void _MDPlistBytesAppendPlistBytes_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void __MDPlistBytesReadFromFile_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesBeginContainer_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesBeginContainer_cold_2()
{
}

void _MDPlistBytesEndContainer_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddData_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddData_cold_2()
{
}

void _MDPlistBytesGrowUIDTable_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddString_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddString_cold_2()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void addStringBytes_cold_1()
{
}

void _MDPlistBytesAddCString_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddCString_cold_2()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddInternedCString_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddInternedCString_cold_2()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddRawInternedCStringKey_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddRawInternedCStringKeyWithString_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddRawInternedCStringKeyWithString_cold_2()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddBoolean_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddRLETagRoom_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void __MDPlistBytesAddUInt64Array_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void __MDPlistBytesAddUInt64Array_cold_2()
{
}

void __MDPlistBytesAddURL_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void __MDPlistBytesAddURL_cold_2()
{
}

void _MDPlistBytesAddStoreOIDArray_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddStoreOIDArray_cold_2()
{
}

void _MDPlistBytesAddPlistBytes_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesAddPlistBytes_cold_2()
{
}

void _MDPlistBytesAppendMultiplePlistBytes_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesGrowCapacityVM_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void _MDPlistBytesGrowCapacityVM_cold_2()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void __MDPlistBytesAppendChunk_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3(&dword_1A334F000, v0, v1, "%s: %s error -- <_MDPlistBytes: %p> marked bad", v2, v3, v4, v5, 2u);
}

void defaultDeallocator_block_invoke_cold_1(uint64_t a1, mach_error_t error_value, NSObject *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  mach_error_string(error_value);
  int v5 = 136315650;
  uint64_t v6 = "void _MDPlistBytesDeallocateMemory(_MDMutablePlistBytes *)";
  __int16 v7 = 2048;
  uint64_t v8 = a1;
  OUTLINED_FUNCTION_3_0();
  _os_log_error_impl(&dword_1A334F000, a3, OS_LOG_TYPE_ERROR, "%s: Error finalizing <_MDPlistBytes: %p> -- vm_deallocate: %s", (uint8_t *)&v5, 0x20u);
}

void copyArray_cold_1()
{
}

void copyDictionary_cold_1()
{
}

void TokenDestroy_cold_1()
{
  __assert_rtn("TokenDestroy", "MDUtilUserQueryParser.c", 272, "tok->_retainCount == 0");
}

void renderQueryPredicate_cold_1()
{
}

void renderQueryPredicate_cold_2()
{
}

void _qpUpdateParserOptions_cold_1()
{
}

void _log_fault_for_malloc_failure_cold_1()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *(_WORD *)uint64_t v0 = 0;
  _os_log_fault_impl(&dword_1A334F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v0, 2u);
}

void db_query_tree_apply_block_with_meta_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void db_query_tree_apply_block_with_meta_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void db_query_tree_apply_block_with_meta_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void db_query_tree_apply_block_with_meta_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void db_make_query_node_with_ann_cold_1(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v5 = 136316162;
  uint64_t v6 = "db_make_query_node_with_ann";
  __int16 v7 = 1024;
  int v8 = 6136;
  __int16 v9 = 1024;
  int tree = db_count_query_tree(a1);
  __int16 v11 = 1024;
  int v12 = 2048;
  __int16 v13 = 2080;
  uint64_t v14 = a2;
  _os_log_error_impl(&dword_1A334F000, a3, OS_LOG_TYPE_ERROR, "%s:%d: query node count %d exceeded %d - %s", (uint8_t *)&v5, 0x28u);
}

void db_make_query_node_with_ann_cold_2(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = 136315906;
  uint64_t v4 = "db_make_query_node_with_ann";
  __int16 v5 = 1024;
  int v6 = 6015;
  __int16 v7 = 1024;
  int v8 = a2;
  __int16 v9 = 2080;
  uint64_t v10 = a1;
  _os_log_error_impl(&dword_1A334F000, log, OS_LOG_TYPE_ERROR, "%s:%d: invalid query (%d) - %s", (uint8_t *)&v3, 0x22u);
}

void CITokenizerCreate_cold_1()
{
  uint64_t v0 = __error();
  __message_assert("%s:%u: failed assertion '%s' %s NLStringTokenizerCreate err:%d", "CITokenizer.c", 173, "false", "", *v0);
  OUTLINED_FUNCTION_0();
}

void CIRetainIndexingTokenizer_cold_1()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "CITokenizer.c", 254, "version>=0 && version<=kCITokenizerVersionCurrent", "");
  OUTLINED_FUNCTION_0();
}

void CIReleaseIndexingTokenizer_cold_1()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "CITokenizer.c", 288, "version>=0 && version<=kCITokenizerVersionCurrent", "");
  OUTLINED_FUNCTION_0();
}

void CITokenizerStateInit_cold_1(int a1)
{
  uint64_t v2 = __error();
  __message_assert("%s:%u: failed assertion '%s' %s alloc err:%d (%x)", "CITokenizer.c", 78, "state->uniChars", "", *v2, a1);
  OUTLINED_FUNCTION_0();
}

void icu_ctx_retain_cold_1(int a1)
{
}

void icu_ctx_release_cold_1(int a1)
{
}

void icu_ctx_release_cold_2(int a1)
{
}

void icu_search_context_destroy_cold_1(int a1)
{
  __message_assert("%s:%u: failed assertion '%s' %s type: %d", "icu_utils.c", 2120, "ctx->_base._type==kICUSearchType", "", a1);
  OUTLINED_FUNCTION_0();
}

void icu_range_search_destroy_cold_1(int a1)
{
  __message_assert("%s:%u: failed assertion '%s' %s type: %d", "icu_utils.c", 3758, "ctx->_base._type==kICURangeType", "", a1);
  OUTLINED_FUNCTION_0();
}

void icu_rules_add_collator_cold_1(int a1)
{
}

void icu_rules_add_collator_cold_2(int a1)
{
}

void icu_rules_add_collator_cold_3(int a1)
{
}

void icu_rules_add_collator_cold_4(int a1)
{
}

void icu_rules_add_collator_cold_5(int a1)
{
}

void icu_rules_add_collator_cold_6()
{
}

void icu_search_context_dump_cold_1(int a1)
{
}

void _icu_search_context_add_string_cold_1(os_log_t log)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v1 = 136315394;
  uint64_t v2 = "_icu_search_context_add_string";
  __int16 v3 = 1024;
  int v4 = 1957;
  _os_log_error_impl(&dword_1A334F000, log, OS_LOG_TYPE_ERROR, "%s:%d: invalid utf-8 string in _icu_search_context_add_string.\n", (uint8_t *)&v1, 0x12u);
}

void _icu_rules_base_create_cold_1(int a1)
{
  __message_assert("%s:%u: failed assertion '%s' %s bad length: %d", "icu_utils.c", 415, "size <= 256", "", a1);
  OUTLINED_FUNCTION_0();
}

void icu_rule_insert_cold_1(int a1)
{
}

void icu_rule_insert_cold_2(unsigned __int8 *a1, unsigned __int8 *a2, os_log_t log)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v3 = *a1;
  int v4 = *a2;
  int v5 = 136315906;
  int v6 = "icu_rule_insert";
  __int16 v7 = 1024;
  int v8 = 717;
  __int16 v9 = 1024;
  int v10 = v3;
  __int16 v11 = 1024;
  int v12 = v4;
  _os_log_error_impl(&dword_1A334F000, log, OS_LOG_TYPE_ERROR, "%s:%d: icu_rule_base resizing beyond 255: count %d, size %d", (uint8_t *)&v5, 0x1Eu);
}

void term_expansions_insert_cold_1(int a1)
{
}

void __icu_rules_copy_block_invoke_2_cold_1()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "icu_utils.c", 627, "rules_offset <= rules_size", "");
  OUTLINED_FUNCTION_0();
}

void __icu_rules_copy_block_invoke_2_cold_2()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "icu_utils.c", 646, "expansions_offset <= rules_size+expansions_size", "");
  OUTLINED_FUNCTION_0();
}

void __icu_rules_copy_block_invoke_2_cold_3()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "icu_utils.c", 658, "string_offset <= total_size", "");
  OUTLINED_FUNCTION_0();
}

void __icu_rules_copy_block_invoke_2_cold_4()
{
  __message_assert("%s:%u: failed assertion '%s' %s ", "icu_utils.c", 660, "ne->expansions[i][needed-1] == 0", "");
  OUTLINED_FUNCTION_0();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1F40D70E8](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

CFAttributedStringRef CFAttributedStringCreateCopy(CFAllocatorRef alloc, CFAttributedStringRef aStr)
{
  return (CFAttributedStringRef)MEMORY[0x1F40D7248](alloc, aStr);
}

void CFBagAddValue(CFMutableBagRef theBag, const void *value)
{
}

CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks)
{
  return (CFMutableBagRef)MEMORY[0x1F40D7308](allocator, capacity, callBacks);
}

CFMutableBitVectorRef CFBitVectorCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableBitVectorRef)MEMORY[0x1F40D73B8](allocator, capacity);
}

CFMutableBitVectorRef CFBitVectorCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFBitVectorRef bv)
{
  return (CFMutableBitVectorRef)MEMORY[0x1F40D73C0](allocator, capacity, bv);
}

void CFBitVectorSetBitAtIndex(CFMutableBitVectorRef bv, CFIndex idx, CFBit value)
{
}

void CFBitVectorSetCount(CFMutableBitVectorRef bv, CFIndex count)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

uint64_t CFBundleCopyLocalizationForLocalizationInfo()
{
  return MEMORY[0x1F40D7488]();
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7490](locArray, prefArray);
}

CFArrayRef CFBundleCopyLocalizationsForURL(CFURLRef url)
{
  return (CFArrayRef)MEMORY[0x1F40D7498](url);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return MEMORY[0x1F40D74B0]();
}

CFURLRef CFBundleCopyResourceURLInDirectory(CFURLRef bundleURL, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74E0](bundleURL, resourceName, resourceType, subDirName);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7568](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7578](bundle);
}

uint64_t CFBundleGetLocalizationInfoForLocalization()
{
  return MEMORY[0x1F40D7590]();
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1F40D7598]();
}

Boolean CFCalendarAddComponents(CFCalendarRef calendar, CFAbsoluteTime *at, CFOptionFlags options, const char *componentDesc, ...)
{
  return MEMORY[0x1F40D7670](calendar, at, options, componentDesc);
}

Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...)
{
  return MEMORY[0x1F40D7678](calendar, at, componentDesc);
}

CFCalendarRef CFCalendarCopyCurrent(void)
{
  return (CFCalendarRef)MEMORY[0x1F40D7680]();
}

CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier)
{
  return (CFCalendarRef)MEMORY[0x1F40D7690](allocator, identifier);
}

void CFCalendarSetTimeZone(CFCalendarRef calendar, CFTimeZoneRef tz)
{
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7718](alloc);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7740](theSetIdentifier);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1F40D7770](theSet, theChar);
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return MEMORY[0x1F40D7888](theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1F40D78B0](allocator, locale, dateStyle, timeStyle);
}

Boolean CFDateFormatterGetAbsoluteTimeFromString(CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep, CFAbsoluteTime *atp)
{
  return MEMORY[0x1F40D78E8](formatter, string, rangep, atp);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  MEMORY[0x1F40D7928](theDate);
  return result;
}

CFTypeID CFDateGetTypeID(void)
{
  return MEMORY[0x1F40D7938]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7BE8](allocator, localeIdentifier);
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x1F40D7C48](locale, key);
}

uint64_t CFLog()
{
  return MEMORY[0x1F40D7C50]();
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D7CA0](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1F40D7D68]();
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1F40D7D78](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x1F40D7D98](allocator, locale, style);
}

Boolean CFNumberFormatterGetValueFromString(CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFNumberType numberType, void *valuePtr)
{
  return MEMORY[0x1F40D7DD8](formatter, string, rangep, numberType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E08](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x1F40D8200](allocator, values, numValues, callBacks);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFShow(CFTypeRef obj)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8390](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8418](alloc, chars, numChars, capacity, externalCharactersAllocator);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8470](alloc, chars, numChars, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.CFIndex length = v4;
  result.CFIndex location = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D84D0](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84D8](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84E0](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

void CFStringFold(CFMutableStringRef theString, CFStringCompareFlags theFlags, CFLocaleRef theLocale)
{
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

CFStringEncoding CFStringGetFastestEncoding(CFStringRef theString)
{
  return MEMORY[0x1F40D8550](theString);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex)
{
  CFIndex v2 = MEMORY[0x1F40D85D8](theString, theIndex);
  result.CFIndex length = v3;
  result.CFIndex location = v2;
  return result;
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr)
{
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
}

void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString)
{
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D86F8]();
}

CFDataRef CFURLCreateData(CFAllocatorRef allocator, CFURLRef url, CFStringEncoding encoding, Boolean escapeWhitespace)
{
  return (CFDataRef)MEMORY[0x1F40D8820](allocator, url, *(void *)&encoding, escapeWhitespace);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8848](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D8888](allocator, URLBytes, length, *(void *)&encoding, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88C0](allocator, URLString, baseURL);
}

CFURLRef CFURLGetBaseURL(CFURLRef anURL)
{
  return (CFURLRef)MEMORY[0x1F40D88F0](anURL);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1F40D8928]();
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1F40D89A0](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x1F40D89D8]();
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x1F40D89E8](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t NLStringTokenizerCopyBestStringLanguage()
{
  return MEMORY[0x1F41140C0]();
}

uint64_t NLStringTokenizerCreate()
{
  return MEMORY[0x1F41140C8]();
}

void *__cdecl OSAtomicDequeue(OSQueueHead *__list, size_t a2)
{
  return (void *)MEMORY[0x1F40C99E8](__list, a2);
}

void OSAtomicEnqueue(OSQueueHead *__list, void *__new, size_t a3)
{
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFBundleCreateFilteredLocalizedInfoPlist()
{
  return MEMORY[0x1F40D8C28]();
}

uint64_t _CFBundleCreateUnique()
{
  return MEMORY[0x1F40D8C30]();
}

uint64_t _CFBundleGetBundleWithIdentifierAndLibraryName()
{
  return MEMORY[0x1F40D8C50]();
}

uint64_t _CFPropertyListCreateFiltered()
{
  return MEMORY[0x1F40D9030]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeInitStaticInstance()
{
  return MEMORY[0x1F40D90E0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _NLStringTokenizerGetDerivedTokens()
{
  return MEMORY[0x1F4114198]();
}

uint64_t _NLStringTokenizerGetLanguageIDForLocale()
{
  return MEMORY[0x1F41141A0]();
}

uint64_t _NLStringTokenizerGetSubTokensOfCompound()
{
  return MEMORY[0x1F41141A8]();
}

uint64_t _NLStringTokenizerSetLocale()
{
  return MEMORY[0x1F41141B0]();
}

uint64_t _NLStringTokenizerSetStringWithOptionsAndLanguageID()
{
  return MEMORY[0x1F41141B8]();
}

uint64_t _NLStringTokenizerTokenize()
{
  return MEMORY[0x1F41141C0]();
}

uint64_t _NLStringTokenizerTokenizeWithTranscriptions()
{
  return MEMORY[0x1F41141C8]();
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

uint64_t __mmap()
{
  return MEMORY[0x1F40C9C40]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1F40C9CD0]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

uint64_t __strncpy_chk()
{
  return MEMORY[0x1F40C9CE8]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1F40CA440](a1, a2);
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t change_fdguard_np()
{
  return MEMORY[0x1F40CB388]();
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1F40CB880](from, to, state, *(void *)&flags);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_release(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x1F40CBDF8](*(void *)&a1);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

DIR *__cdecl fdopendir(int a1)
{
  return (DIR *)MEMORY[0x1F40CC078](*(void *)&a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1F40CC110](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

void free(void *a1)
{
}

int fsctl(const char *a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1F40CC288](a1, a2, a3, *(void *)&a4);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

int fstatat(int a1, const char *a2, stat *a3, int a4)
{
  return MEMORY[0x1F40CC2C8](*(void *)&a1, a2, a3, *(void *)&a4);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1F40CC2D0](*(void *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x1F40CC2D8](*(void *)&a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1F40CC2F0](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

int getrlimit(int a1, rlimit *a2)
{
  return MEMORY[0x1F40CC500](*(void *)&a1, a2);
}

uint64_t guarded_close_np()
{
  return MEMORY[0x1F40CC5B8]();
}

uint64_t guarded_pwrite_np()
{
  return MEMORY[0x1F40CC5D0]();
}

int isatty(int a1)
{
  return MEMORY[0x1F40CC6B0](*(void *)&a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCB08](a1, a2, *(void *)&a3);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB20](start_size, *(void *)&flags);
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB30]();
}

void malloc_destroy_zone(malloc_zone_t *zone)
{
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1F40CCB58](size);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBB0](size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBB8](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBC0](zone, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBD8](zone, ptr, size, type_id);
}

malloc_zone_t *__cdecl malloc_zone_from_ptr(const void *ptr)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCC10](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCE58](a1, a2, *(void *)&a3);
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCE78](a1, a2, *(void *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1F40CD0F0](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

int openat(int a1, const char *a2, int a3, ...)
{
  return MEMORY[0x1F40CD100](*(void *)&a1, a2, *(void *)&a3);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CD830](*(void *)&__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

uint64_t pthread_fchdir_np()
{
  return MEMORY[0x1F40CD9F0]();
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAE8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1F40CDAF0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAF8](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB10](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB18](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CDBC0](*(void *)&__fd, __buf, __nbyte, a4);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

uint64_t random(void)
{
  return MEMORY[0x1F40CDC18]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1F40CDC60](a1);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1F40CDC88](__ptr, __size);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1F40CE168](__dst, __src);
}

size_t strcspn(const char *__s, const char *__charset)
{
  return MEMORY[0x1F40CE170](__s, __charset);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1E8](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1F40CE200](__s1, __n);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

float strtof(const char *a1, char **a2)
{
  MEMORY[0x1F40CE270](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2C0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1F417F718](*(void *)&c);
}

UBool u_isUWhiteSpace(UChar32 c)
{
  return MEMORY[0x1F417F7A0](*(void *)&c);
}

UBool u_isWhitespace(UChar32 c)
{
  return MEMORY[0x1F417F7A8](*(void *)&c);
}

UBool u_ispunct(UChar32 c)
{
  return MEMORY[0x1F417F7E0](*(void *)&c);
}

UChar *__cdecl u_strFromUTF32(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const UChar32 *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (UChar *)MEMORY[0x1F417F830](dest, *(void *)&destCapacity, pDestLength, src, *(void *)&srcLength, pErrorCode);
}

UChar *__cdecl u_strFromUTF8(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (UChar *)MEMORY[0x1F417F838](dest, *(void *)&destCapacity, pDestLength, src, *(void *)&srcLength, pErrorCode);
}

int32_t u_strToLower(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F417F848](dest, *(void *)&destCapacity, src, *(void *)&srcLength, locale, pErrorCode);
}

char *__cdecl u_strToUTF8(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (char *)MEMORY[0x1F417F858](dest, *(void *)&destCapacity, pDestLength, src, *(void *)&srcLength, pErrorCode);
}

int32_t u_strToUpper(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F417F860](dest, *(void *)&destCapacity, src, *(void *)&srcLength, locale, pErrorCode);
}

UChar *__cdecl u_strcat(UChar *dst, const UChar *src)
{
  return (UChar *)MEMORY[0x1F417F870](dst, src);
}

UChar *__cdecl u_strcpy(UChar *dst, const UChar *src)
{
  return (UChar *)MEMORY[0x1F417F880](dst, src);
}

UChar32 u_tolower(UChar32 c)
{
  return MEMORY[0x1F417F8A8](*(void *)&c);
}

UChar32 u_toupper(UChar32 c)
{
  return MEMORY[0x1F417F8B8](*(void *)&c);
}

uint64_t ucol_close()
{
  return MEMORY[0x1F417FD08]();
}

uint64_t ucol_closeElements()
{
  return MEMORY[0x1F417FD10]();
}

uint64_t ucol_getLocaleByType()
{
  return MEMORY[0x1F417FD48]();
}

uint64_t ucol_getRulesEx()
{
  return MEMORY[0x1F417FD60]();
}

uint64_t ucol_next()
{
  return MEMORY[0x1F417FD90]();
}

uint64_t ucol_nextSortKeyPart()
{
  return MEMORY[0x1F417FD98]();
}

uint64_t ucol_open()
{
  return MEMORY[0x1F417FDA0]();
}

uint64_t ucol_openElements()
{
  return MEMORY[0x1F417FDB0]();
}

uint64_t ucol_reset()
{
  return MEMORY[0x1F417FDC0]();
}

uint64_t ucol_setAttribute()
{
  return MEMORY[0x1F417FDC8]();
}

void uiter_setUTF8(UCharIterator *iter, const char *s, int32_t length)
{
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int unlinkat(int a1, const char *a2, int a3)
{
  return MEMORY[0x1F40CE5E8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t unorm2_getNFCInstance()
{
  return MEMORY[0x1F4180230]();
}

uint64_t unorm2_getNFKDInstance()
{
  return MEMORY[0x1F4180248]();
}

uint64_t unorm2_normalize()
{
  return MEMORY[0x1F4180258]();
}

uint64_t unorm2_quickCheck()
{
  return MEMORY[0x1F4180268]();
}

URegularExpression *__cdecl uregex_clone(const URegularExpression *regexp, UErrorCode *status)
{
  return (URegularExpression *)MEMORY[0x1F4180458](regexp, status);
}

void uregex_close(URegularExpression *regexp)
{
}

UBool uregex_find(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return MEMORY[0x1F4180478](regexp, *(void *)&startIndex, status);
}

UBool uregex_lookingAt(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return MEMORY[0x1F41804A8](regexp, *(void *)&startIndex, status);
}

UBool uregex_matches(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return MEMORY[0x1F41804B0](regexp, *(void *)&startIndex, status);
}

URegularExpression *__cdecl uregex_open(const UChar *pattern, int32_t patternLength, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  return (URegularExpression *)MEMORY[0x1F41804B8](pattern, *(void *)&patternLength, *(void *)&flags, pe, status);
}

void uregex_setText(URegularExpression *regexp, const UChar *text, int32_t textLength, UErrorCode *status)
{
}

uint64_t usearch_close()
{
  return MEMORY[0x1F4180610]();
}

uint64_t usearch_openFromCollator()
{
  return MEMORY[0x1F4180648]();
}

uint64_t usearch_search()
{
  return MEMORY[0x1F4180658]();
}

uint64_t usearch_setText()
{
  return MEMORY[0x1F4180678]();
}

uint64_t uset_close()
{
  return MEMORY[0x1F41806D0]();
}

uint64_t uset_containsAllCodePoints()
{
  return MEMORY[0x1F41806E8]();
}

uint64_t uset_openPattern()
{
  return MEMORY[0x1F4180720]();
}

UText *__cdecl utext_close(UText *ut)
{
  return (UText *)MEMORY[0x1F4180780](ut);
}

UBool utext_moveIndex32(UText *ut, int32_t delta)
{
  return MEMORY[0x1F41807A8](ut, *(void *)&delta);
}

UChar32 utext_next32(UText *ut)
{
  return MEMORY[0x1F41807B8](ut);
}

UText *__cdecl utext_openUChars(UText *ut, const UChar *s, int64_t length, UErrorCode *status)
{
  return (UText *)MEMORY[0x1F41807C0](ut, s, length, status);
}

void utext_setNativeIndex(UText *ut, int64_t nativeIndex)
{
}

int32_t utf8_back1SafeBody(const uint8_t *s, int32_t start, int32_t i)
{
  return MEMORY[0x1F41807E8](s, *(void *)&start, *(void *)&i);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE680](a1, a2, a3);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1F40CE6A8](*(void *)&target_task, address, size, *(void *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1F40CE6C0](*(void *)&target_task, address, size);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}